; ModuleID = 'blender/source/blender/blenkernel/intern/sequencer.c'
source_filename = "blender/source/blender/blenkernel/intern/sequencer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ImBuf = type { %struct.ImBuf*, %struct.ImBuf*, i32, i32, i8, i32, i32, i32, i32*, float*, [2 x double], i32, i32, i32, i32, i32**, i32*, float*, float, [20 x %struct.ImBuf*], i32, i32, i32, i32, %struct.ImMetaData*, i8*, i32, [1024 x i8], [1024 x i8], %struct.MEM_CacheLimiterHandle_s*, i32, i8*, i32, i32, %struct.ColorSpace*, %struct.ColorSpace*, i32*, %struct.ColormanageCache*, i32, %struct.rcti, %struct.DDSData }
%struct.ImMetaData = type opaque
%struct.MEM_CacheLimiterHandle_s = type opaque
%struct.ColorSpace = type opaque
%struct.ColormanageCache = type opaque
%struct.rcti = type { i32, i32, i32, i32 }
%struct.DDSData = type { i32, i32, i8*, i32 }
%struct.Scene = type { %struct.ID, %struct.AnimData*, %struct.Object*, %struct.World*, %struct.Scene*, %struct.ListBase, %struct.Base*, %struct.Object*, [3 x float], [3 x float], [3 x float], [3 x float], i32, i32, i32, i16, i8, [1 x i8], %struct.bNodeTree*, %struct.Editing*, %struct.ToolSettings*, %struct.SceneStats*, %struct.RenderData, %struct.AudioData, %struct.ListBase, %struct.ListBase, i8*, i8*, i8*, i8*, i8*, %struct.DagForest*, i16, i16, i32, %struct.ListBase, %struct.GameFraming, %struct.GameData, %struct.UnitSettings, %struct.bGPdata*, %struct.PhysicsSettings, %struct.MovieClip*, i64, i64, %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings, %struct.ColorManagedColorspaceSettings, %struct.RigidBodyWorld* }
%struct.ID = type { i8*, i8*, %struct.ID*, %struct.Library*, [66 x i8], i16, i32, i32, i32, %struct.IDProperty* }
%struct.Library = type { %struct.ID, %struct.ID*, %struct.FileData*, [1024 x i8], [1024 x i8], %struct.Library*, %struct.PackedFile* }
%struct.FileData = type opaque
%struct.PackedFile = type opaque
%struct.IDProperty = type { %struct.IDProperty*, %struct.IDProperty*, i8, i8, i16, [64 x i8], i32, %struct.IDPropertyData, i32, i32 }
%struct.IDPropertyData = type { i8*, %struct.ListBase, i32, i32 }
%struct.AnimData = type { %struct.bAction*, %struct.bAction*, %struct.AnimMapper*, %struct.ListBase, %struct.NlaStrip*, %struct.ListBase, %struct.ListBase, i32, i32, i16, i16, float }
%struct.bAction = type { %struct.ID, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, i32, i32, i32, i32 }
%struct.AnimMapper = type { %struct.AnimMapper*, %struct.AnimMapper*, %struct.bAction*, %struct.ListBase }
%struct.NlaStrip = type { %struct.NlaStrip*, %struct.NlaStrip*, %struct.ListBase, %struct.bAction*, %struct.AnimMapper*, %struct.ListBase, %struct.ListBase, [64 x i8], float, float, float, float, float, float, float, float, float, float, i16, i16, i16, i16, i8*, i32, i32 }
%struct.World = type opaque
%struct.Base = type { %struct.Base*, %struct.Base*, i32, i32, i32, i16, i16, %struct.Object* }
%struct.bNodeTree = type opaque
%struct.Editing = type { %struct.ListBase*, %struct.ListBase, %struct.ListBase, %struct.Sequence*, [1024 x i8], [1024 x i8], i32, i32, i32, i32, %struct.rctf }
%struct.Sequence = type { %struct.Sequence*, %struct.Sequence*, i8*, i8*, [64 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i16, i16, i32, i32, %struct.Strip*, %struct.Ipo*, %struct.Scene*, %struct.Object*, %struct.MovieClip*, %struct.Mask*, %struct.anim*, float, float, %struct.Sequence*, %struct.Sequence*, %struct.Sequence*, %struct.ListBase, %struct.bSound*, i8*, float, float, float, float, i8*, i32, i32, i32, float, i32, i8, [3 x i8], %struct.ListBase }
%struct.Strip = type { %struct.Strip*, %struct.Strip*, i32, i32, i32, i32, %struct.StripElem*, [768 x i8], %struct.StripProxy*, %struct.StripCrop*, %struct.StripTransform*, %struct.StripColorBalance*, %struct.ColorManagedColorspaceSettings }
%struct.StripElem = type { [256 x i8], i32, i32 }
%struct.StripProxy = type { [768 x i8], [256 x i8], %struct.anim*, i16, i16, i16, i16 }
%struct.StripCrop = type { i32, i32, i32, i32 }
%struct.StripTransform = type { i32, i32 }
%struct.StripColorBalance = type { [3 x float], [3 x float], [3 x float], i32, i32 }
%struct.Ipo = type opaque
%struct.Mask = type { %struct.ID, %struct.AnimData*, %struct.ListBase, i32, i32, i32, i32, i32, i32 }
%struct.anim = type opaque
%struct.bSound = type { %struct.ID, [1024 x i8], %struct.PackedFile*, i8*, %struct.PackedFile*, %struct.Ipo*, float, float, float, float, float, float, i32, i32, i8*, i8*, i8* }
%struct.rctf = type { float, float, float, float }
%struct.ToolSettings = type { %struct.VPaint*, %struct.VPaint*, %struct.Sculpt*, %struct.UvSculpt*, float, float, float, i16, i16, i8, i8, i8, i8, float, i16, i8, [5 x i8], %struct.ImagePaintSettings, %struct.ParticleEditSettings, float, float, i16, i16, i8, [1 x i8], i16, float, float, float, float, float, float, float, float, float, float, i16, i8, i8, [3 x i8], i8, %struct.Object*, i8, i8, i8, i8, i8, [8 x i8], [8 x i8], i8, i8, i8, i8, i8, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i16, i16, i32, float, float, %struct.UnifiedPaintSettings, %struct.MeshStatVis }
%struct.VPaint = type { %struct.Paint, i16, i16, i32, i32*, %struct.MDeformVert*, i8* }
%struct.Paint = type { %struct.Brush*, %struct.Palette*, i8*, [4 x i8], i32, i32, i32 }
%struct.Brush = type opaque
%struct.Palette = type opaque
%struct.MDeformVert = type opaque
%struct.Sculpt = type { %struct.Paint, i32, [3 x i32], float, i32, float, float, %struct.Object*, i8* }
%struct.UvSculpt = type { %struct.Paint }
%struct.ImagePaintSettings = type { %struct.Paint, i16, i16, i16, i16, [2 x i16], i32, i8*, %struct.Image*, %struct.Image*, %struct.Image*, [3 x float], float }
%struct.Image = type { %struct.ID, [1024 x i8], %struct.MovieCache*, %struct.GPUTexture*, %struct.anim*, %struct.RenderResult*, [8 x %struct.RenderResult*], i16, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i32, i32*, %struct.PackedFile*, %struct.PreviewImage*, float, i32, i16, i16, i32, i32, i8, i8, i16, [4 x float], float, float, %struct.ColorManagedColorspaceSettings, i8, [7 x i8], [8 x %struct.RenderSlot] }
%struct.MovieCache = type opaque
%struct.GPUTexture = type opaque
%struct.RenderResult = type { %struct.RenderResult*, %struct.RenderResult*, i32, i32, i16, i16, i32*, float*, float*, %struct.rcti, i32, i32, %struct.ListBase, %struct.rcti, %struct.RenderLayer*, i32, i32, i32, i8* }
%struct.RenderLayer = type { %struct.RenderLayer*, %struct.RenderLayer*, [74 x i8], i32, i32, i32, i32, i32, i32, %struct.Material*, %struct.Group*, float*, float*, float*, i32*, i32, i32, i8*, %struct.ListBase }
%struct.Material = type opaque
%struct.Group = type opaque
%struct.PreviewImage = type { [2 x i32], [2 x i32], [2 x i16], [2 x i16], [2 x i32*], [2 x %struct.GPUTexture*] }
%struct.RenderSlot = type { [64 x i8] }
%struct.ParticleEditSettings = type { i16, i16, i16, i16, [7 x %struct.ParticleBrushData], i8*, float, float, i32, i32, i32, i32, %struct.Scene*, %struct.Object* }
%struct.ParticleBrushData = type { i16, i16, i16, i16, i32, float }
%struct.UnifiedPaintSettings = type { i32, float, float, float, [3 x float], [3 x float], i32, [2 x float], float, i32, i32, i8, [7 x i8], float, [2 x float], i32, float, [2 x float], [2 x float], i32, %struct.ColorSpace*, float, i32 }
%struct.MeshStatVis = type { i8, [2 x i8], i8, float, float, float, float, i8, [3 x i8], float, float, float, float }
%struct.SceneStats = type opaque
%struct.RenderData = type { %struct.ImageFormatData, %struct.AviCodecData*, %struct.QuicktimeCodecData*, %struct.QuicktimeCodecSettings, %struct.FFMpegCodecData, i32, i32, i32, float, i32, i32, i32, i32, i16, i16, float, float, float, float, float, i16, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i32, i32, i16, i16, i32, i32, i16, i16, i16, i16, i16, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, %struct.rctf, %struct.rctf, %struct.rcti, %struct.ListBase, i16, i16, float, float, float, float, i32, float, float, float, float, i16, i16, i16, i16, i16, i16, float, float, i16, i16, float, float, [1024 x i8], i32, i16, i16, [768 x i8], [4 x float], [4 x float], i8, i8, i8, [5 x i8], i32, i16, i16, float, float, i16, i16, float, i16, i16, i32, i16, i16, i16, i16, float, float, %struct.Text*, i32, float, [32 x i8], %struct.BakeData, i32, i32 }
%struct.ImageFormatData = type { i8, i8, i8, i8, i8, i8, i8, i8, i16, i16, float, i8, i8, [6 x i8], %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings }
%struct.AviCodecData = type { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [128 x i8] }
%struct.QuicktimeCodecData = type { i8*, i8*, i32, i32, [128 x i8] }
%struct.QuicktimeCodecSettings = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32 }
%struct.FFMpegCodecData = type { i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, %struct.IDProperty* }
%struct.Text = type opaque
%struct.BakeData = type { %struct.ImageFormatData, [1024 x i8], i16, i16, i16, i16, float, float, [3 x i8], i8, i8, [3 x i8], [64 x i8] }
%struct.AudioData = type { i32, float, float, float, i32, i16, i16, float, float }
%struct.DagForest = type opaque
%struct.ListBase = type { i8*, i8* }
%struct.GameFraming = type { [3 x float], i8, i8, i8, i8 }
%struct.GameData = type { %struct.GameFraming, i16, i16, i16, i16, i16, i16, i16, i16, i16, [3 x i16], %struct.GameDome, i16, i16, float, %struct.RecastData, float, float, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, float, float, float, float, float }
%struct.GameDome = type { i16, i16, i16, i16, float, float, %struct.Text* }
%struct.RecastData = type { float, float, float, float, float, float, float, float, float, float, i32, float, float, i16, i16 }
%struct.UnitSettings = type { float, i8, i8, i16 }
%struct.bGPdata = type opaque
%struct.PhysicsSettings = type { [3 x float], i32, i32, i32 }
%struct.MovieClip = type { %struct.ID, %struct.AnimData*, [1024 x i8], i32, i32, [2 x i32], float, float, %struct.anim*, %struct.MovieClipCache*, %struct.bGPdata*, %struct.MovieTracking, i8*, %struct.MovieClipProxy, i32, i32, i32, i32, %struct.ColorManagedColorspaceSettings }
%struct.MovieClipCache = type opaque
%struct.MovieTracking = type { %struct.MovieTrackingSettings, %struct.MovieTrackingCamera, %struct.ListBase, %struct.ListBase, %struct.MovieTrackingReconstruction, %struct.MovieTrackingStabilization, %struct.MovieTrackingTrack*, %struct.MovieTrackingPlaneTrack*, %struct.ListBase, i32, i32, %struct.MovieTrackingStats*, %struct.MovieTrackingDopesheet }
%struct.MovieTrackingSettings = type { i32, i16, i16, float, i16, i16, i16, i16, i16, i16, float, i16, i16, i32, i32, i32, i16, i16, float, i32, i32, float, float, i32 }
%struct.MovieTrackingCamera = type { i8*, i16, i16, float, float, float, i16, i16, [2 x float], float, float, float, float, float }
%struct.MovieTrackingReconstruction = type { i32, float, i32, i32, %struct.MovieReconstructedCamera* }
%struct.MovieReconstructedCamera = type { i32, float, [4 x [4 x float]] }
%struct.MovieTrackingStabilization = type { i32, i32, i32, float, %struct.MovieTrackingTrack*, float, float, float, i32, i32, float }
%struct.MovieTrackingTrack = type { %struct.MovieTrackingTrack*, %struct.MovieTrackingTrack*, [64 x i8], [2 x float], [2 x float], [2 x float], [2 x float], [2 x float], i32, i32, %struct.MovieTrackingMarker*, [3 x float], float, i32, i32, i32, [3 x float], i16, i16, i16, i16, i32, float, %struct.bGPdata*, float, float }
%struct.MovieTrackingMarker = type { [2 x float], [4 x [2 x float]], [2 x float], [2 x float], i32, i32 }
%struct.MovieTrackingPlaneTrack = type { %struct.MovieTrackingPlaneTrack*, %struct.MovieTrackingPlaneTrack*, [64 x i8], %struct.MovieTrackingTrack**, i32, i32, %struct.MovieTrackingPlaneMarker*, i32, i32, %struct.Image*, float, i32 }
%struct.MovieTrackingPlaneMarker = type { [4 x [2 x float]], i32, i32 }
%struct.MovieTrackingStats = type { [256 x i8] }
%struct.MovieTrackingDopesheet = type { i32, i16, i16, %struct.ListBase, %struct.ListBase, i32, i32 }
%struct.MovieClipProxy = type { [768 x i8], i16, i16, i16, i16 }
%struct.ColorManagedViewSettings = type { i32, i32, [64 x i8], [64 x i8], float, float, %struct.CurveMapping*, i8* }
%struct.CurveMapping = type { i32, i32, i32, i32, %struct.rctf, %struct.rctf, [4 x %struct.CurveMap], [3 x float], [3 x float], [3 x float], [3 x float] }
%struct.CurveMap = type { i16, i16, float, float, float, [2 x float], [2 x float], %struct.CurveMapPoint*, %struct.CurveMapPoint*, %struct.CurveMapPoint*, [2 x float], [2 x float] }
%struct.CurveMapPoint = type { float, float, i16, i16 }
%struct.ColorManagedDisplaySettings = type { [64 x i8] }
%struct.ColorManagedColorspaceSettings = type { [64 x i8] }
%struct.RigidBodyWorld = type opaque
%struct.Object = type { %struct.ID, %struct.AnimData*, %struct.SculptSession*, i16, i16, i32, i32, i32, [64 x i8], %struct.Object*, %struct.Object*, %struct.Object*, %struct.Object*, %struct.Object*, %struct.Ipo*, %struct.BoundBox*, %struct.bAction*, %struct.bAction*, %struct.bPose*, i8*, %struct.bGPdata*, %struct.bAnimVizSettings, %struct.bMotionPath*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, i32, i32, %struct.Material**, i8*, i32, i32, [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [4 x float], [4 x float], [3 x float], [3 x float], float, float, [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, i16, i16, i16, i8, i8, i16, i8, i8, float, float, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, float, i16, i16, [4 x float], i32, i32, %struct.BulletSoftBody*, i8, i8, i16, [3 x float], %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.PartDeflect*, %struct.SoftBody*, %struct.Group*, i8, i8, i16, float, %struct.FluidsimSettings*, %struct.CurveCache*, %struct.DerivedMesh*, %struct.DerivedMesh*, i64, i64, i32, i32, %struct.ListBase, %struct.ListBase, %struct.ListBase*, %struct.RigidBodyOb*, %struct.RigidBodyCon*, [2 x float], %struct.ImageUser*, %struct.ListBase, %struct.LodLevel* }
%struct.SculptSession = type opaque
%struct.BoundBox = type { [8 x [3 x float]], i32, i32 }
%struct.bPose = type { %struct.ListBase, %struct.GHash*, i16, i16, i32, i32, float, [3 x float], [3 x float], %struct.ListBase, i32, i32, i8*, i8*, %struct.bAnimVizSettings, [64 x i8] }
%struct.GHash = type opaque
%struct.bAnimVizSettings = type { i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i32, i32, i32 }
%struct.bMotionPath = type { %struct.bMotionPathVert*, i32, i32, i32, i32 }
%struct.bMotionPathVert = type { [3 x float], i32 }
%struct.BulletSoftBody = type opaque
%struct.PartDeflect = type opaque
%struct.SoftBody = type opaque
%struct.FluidsimSettings = type opaque
%struct.CurveCache = type opaque
%struct.DerivedMesh = type opaque
%struct.RigidBodyOb = type opaque
%struct.RigidBodyCon = type opaque
%struct.ImageUser = type { %struct.Scene*, i32, i32, i32, i32, i8, i8, i8, i8, i16, i16, i16, i16, i32 }
%struct.LodLevel = type { %struct.LodLevel*, %struct.LodLevel*, %struct.Object*, i32, float }
%struct.Global = type { %struct.Main*, [1024 x i8], [1024 x i8], i8, i8, i8, %struct.ListBase, i8, i8, i8, i16, i16, i16, i8, i16, i32, i32, i8, i32, i32, [200 x i8] }
%struct.Main = type { %struct.Main*, %struct.Main*, [1024 x i8], i16, i16, i16, i16, i64, [16 x i8], i16, %struct.Library*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, [256 x i8], %struct.EvaluationContext*, %struct.MainLock* }
%struct.EvaluationContext = type { i32 }
%struct.MainLock = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.StructRNA = type opaque
%struct.SeqEffectHandle = type { i8, i8, void (%struct.Sequence*)*, i32 ()*, void (%struct.Sequence*)*, void (%struct.Sequence*, %struct.Sequence*)*, void (%struct.Sequence*)*, i32 (%struct.Sequence*, float, float)*, void (%struct.Sequence*, i16, float*, float*)*, void (%struct.Sequence*, float, float*, float*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)* }
%struct.SeqRenderData = type { %struct.EvaluationContext*, %struct.Main*, %struct.Scene*, i32, i32, i32, i32, float, i8, i8 }
%struct.SeqIterator = type { %struct.Sequence**, i32, i32, %struct.Sequence*, i32 }
%struct.SeqUniqueInfo = type { %struct.Sequence*, [64 x i8], [64 x i8], i32, i32 }
%struct.SeqIndexBuildContext = type { %struct.IndexBuildContext*, i32, i32, i32, %struct.Main*, %struct.Scene*, %struct.Sequence*, %struct.Sequence* }
%struct.IndexBuildContext = type opaque
%struct.MaskRasterHandle = type opaque
%struct.ColorBalanceInitData = type { %struct.StripColorBalance*, %struct.ImBuf*, float, %struct.ImBuf*, i8 }
%struct.ColorBalanceThread = type { %struct.StripColorBalance*, float, i32, i32, i8*, i8*, float*, float*, i8 }
%struct.MetaStack = type { %struct.MetaStack*, %struct.MetaStack*, %struct.ListBase*, %struct.Sequence*, [2 x i32] }
%struct.PrefetchQueueElem = type { %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem*, i32, i32, float, i32, i32, i32, %struct.ImBuf* }
%struct.PrefetchThread = type { %struct.PrefetchThread*, %struct.PrefetchThread*, %struct.Scene*, %struct.PrefetchQueueElem*, i32, i32 }
%struct.FCurve = type { %struct.FCurve*, %struct.FCurve*, %struct.bActionGroup*, %struct.ChannelDriver*, %struct.ListBase, %struct.BezTriple*, %struct.FPoint*, i32, float, i16, i16, i32, i8*, i32, [3 x float], float, float }
%struct.bActionGroup = type { %struct.bActionGroup*, %struct.bActionGroup*, %struct.ListBase, i32, i32, [64 x i8], %struct.ThemeWireColor }
%struct.ThemeWireColor = type { [4 x i8], [4 x i8], [4 x i8], i16, i16 }
%struct.ChannelDriver = type { %struct.ListBase, [256 x i8], i8*, float, float, i32, i32 }
%struct.BezTriple = type { [3 x [3 x float]], float, float, float, i8, i8, i8, i8, i8, i8, i8, i8, float, float, float, [4 x i8] }
%struct.FPoint = type { [2 x float], i32, i32 }
%struct.bContext = type opaque
%struct.SeqLoadInfo = type { i32, i32, i32, i32, i32, i32, [1024 x i8], [64 x i8], %struct.Sequence*, i32, i32 }
%struct.SpeedControlVars = type { float*, float, i32, i32, i32 }
%struct.Render = type opaque
%struct.SceneRenderLayer = type { %struct.SceneRenderLayer*, %struct.SceneRenderLayer*, [64 x i8], %struct.Material*, %struct.Group*, i32, i32, i32, i32, i32, i32, i32, float, %struct.FreestyleConfig }
%struct.FreestyleConfig = type { %struct.ListBase, i32, i32, i32, float, float, float, %struct.ListBase }
%struct.MovieClipUser = type { i32, i16, i16 }
%struct.RenderEffectInitData = type { %struct.SeqEffectHandle*, %struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf* }
%struct.RenderEffectThread = type { %struct.SeqEffectHandle*, %struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32 }

@sequencer_view3d_cb = dso_local global %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)* null, align 8, !dbg !0
@seqbase_clipboard = common dso_local global %struct.ListBase zeroinitializer, align 8, !dbg !2004
@MEM_callocN = external dso_local global i8* (i64, i8*)*, align 8
@.str = private unnamed_addr constant [7 x i8] c"addseq\00", align 1
@MEM_freeN = external dso_local global void (i8*)*, align 8
@MEM_allocN_len = external dso_local global i64 (i8*)*, align 8
@G = external dso_local global %struct.Global, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"Effect\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"seq proxy rebuild context\00", align 1
@seq_thread_shutdown = internal global i8 1, align 1, !dbg !2014
@.str.3 = private unnamed_addr constant [20 x i8] c"prefetch_queue_elem\00", align 1
@monoton_cfra = internal global i32 0, align 4, !dbg !2017
@prefetch_wait = internal global %struct.ListBase zeroinitializer, align 8, !dbg !2010
@prefetch_done = internal global %struct.ListBase zeroinitializer, align 8, !dbg !2012
@running_threads = internal global %struct.ListBase zeroinitializer, align 8, !dbg !2008
@seq_last_given_monoton_cfra = internal global i32 0, align 4, !dbg !2019
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [46 x i8] c"SEQ-THREAD: Requested frame not in queue ???\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Strips must be the same length\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"Strips were not compatible\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"Strips must have the same number of inputs\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"sequence_editor.sequences_all\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"strip\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"stripelem\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"Movie\00", align 1
@seqbase_clipboard_frame = common dso_local global i32 0, align 4, !dbg !2006
@.str.12 = private unnamed_addr constant [32 x i8] c"error: negative users in strip\0A\00", align 1
@MEM_dupallocN = external dso_local global i8* (i8*)*, align 8
@MEM_mallocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.13 = private unnamed_addr constant [9 x i8] c"SeqArray\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"%.*s.%03d\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"Meta\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"Image\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"Scene\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"Clip\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"Mask\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"Audio\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"Cross\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"Gamma Cross\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"Add\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"Sub\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"Mul\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"Alpha Over\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"Alpha Under\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"Over Drop\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"Wipe\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Glow\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1
@.str.32 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"Multicam\00", align 1
@.str.34 = private unnamed_addr constant [11 x i8] c"Adjustment\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"Speed\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"Gaussian Blur\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"%s/BL_proxy\00", align 1
@.str.38 = private unnamed_addr constant [22 x i8] c"%s/images/%d/%s_proxy\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"%s/proxy_misc/%d/####\00", align 1
@.str.40 = private unnamed_addr constant [5 x i8] c".jpg\00", align 1
@__func__.seq_render_mask = private unnamed_addr constant [16 x i8] c"seq_render_mask\00", align 1
@RNA_Sequence = external dso_local global %struct.StructRNA, align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"effect_fader\00", align 1
@__const.seq_render_scene_strip.err_out = private unnamed_addr constant [256 x i8] c"unknownalign 16
@.str.42 = private unnamed_addr constant [56 x i8] c"seq_render_scene_strip failed to get opengl buffer: %s\0A\00", align 1
@.str.43 = private unnamed_addr constant [36 x i8] c"sequence_editor.sequences_all[\22%s\22]\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequencer_base_recursive_apply(%struct.ListBase* %seqbase, i32 (%struct.Sequence*, i8*)* %apply_func, i8* %arg) #0 !dbg !2030 {
entry:
  %retval = alloca i32, align 4
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %apply_func.addr = alloca i32 (%struct.Sequence*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !2037, metadata !DIExpression()), !dbg !2038
  store i32 (%struct.Sequence*, i8*)* %apply_func, i32 (%struct.Sequence*, i8*)** %apply_func.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%struct.Sequence*, i8*)** %apply_func.addr, metadata !2039, metadata !DIExpression()), !dbg !2040
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !2041, metadata !DIExpression()), !dbg !2042
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !2043, metadata !DIExpression()), !dbg !2044
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !2045
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !2047
  %1 = load i8*, i8** %first, align 8, !dbg !2047
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2045
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !2048
  br label %for.cond, !dbg !2049

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2050
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2052
  br i1 %tobool, label %for.body, label %for.end, !dbg !2052

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2053
  %5 = load i32 (%struct.Sequence*, i8*)*, i32 (%struct.Sequence*, i8*)** %apply_func.addr, align 8, !dbg !2056
  %6 = load i8*, i8** %arg.addr, align 8, !dbg !2057
  %call = call i32 @BKE_sequencer_recursive_apply(%struct.Sequence* %4, i32 (%struct.Sequence*, i8*)* %5, i8* %6), !dbg !2058
  %cmp = icmp eq i32 %call, -1, !dbg !2059
  br i1 %cmp, label %if.then, label %if.end, !dbg !2060

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4, !dbg !2061
  br label %return, !dbg !2061

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2062

for.inc:                                          ; preds = %if.end
  %7 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2063
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 0, !dbg !2064
  %8 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2064
  store %struct.Sequence* %8, %struct.Sequence** %iseq, align 8, !dbg !2065
  br label %for.cond, !dbg !2066, !llvm.loop !2067

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !2069
  br label %return, !dbg !2069

return:                                           ; preds = %for.end, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2070
  ret i32 %9, !dbg !2070
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequencer_recursive_apply(%struct.Sequence* %seq, i32 (%struct.Sequence*, i8*)* %apply_func, i8* %arg) #0 !dbg !2071 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %apply_func.addr = alloca i32 (%struct.Sequence*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2074, metadata !DIExpression()), !dbg !2075
  store i32 (%struct.Sequence*, i8*)* %apply_func, i32 (%struct.Sequence*, i8*)** %apply_func.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%struct.Sequence*, i8*)** %apply_func.addr, metadata !2076, metadata !DIExpression()), !dbg !2077
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !2078, metadata !DIExpression()), !dbg !2079
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2080, metadata !DIExpression()), !dbg !2081
  %0 = load i32 (%struct.Sequence*, i8*)*, i32 (%struct.Sequence*, i8*)** %apply_func.addr, align 8, !dbg !2082
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2083
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !2084
  %call = call i32 %0(%struct.Sequence* %1, i8* %2), !dbg !2082
  store i32 %call, i32* %ret, align 4, !dbg !2081
  %3 = load i32, i32* %ret, align 4, !dbg !2085
  %cmp = icmp eq i32 %3, -1, !dbg !2087
  br i1 %cmp, label %if.then, label %if.end, !dbg !2088

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !2089
  br label %return, !dbg !2089

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %ret, align 4, !dbg !2090
  %tobool = icmp ne i32 %4, 0, !dbg !2090
  br i1 %tobool, label %land.lhs.true, label %if.end5, !dbg !2092

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2093
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 36, !dbg !2094
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !2095
  %6 = load i8*, i8** %first, align 8, !dbg !2095
  %tobool1 = icmp ne i8* %6, null, !dbg !2093
  br i1 %tobool1, label %if.then2, label %if.end5, !dbg !2096

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2097
  %seqbase3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 36, !dbg !2098
  %8 = load i32 (%struct.Sequence*, i8*)*, i32 (%struct.Sequence*, i8*)** %apply_func.addr, align 8, !dbg !2099
  %9 = load i8*, i8** %arg.addr, align 8, !dbg !2100
  %call4 = call i32 @BKE_sequencer_base_recursive_apply(%struct.ListBase* %seqbase3, i32 (%struct.Sequence*, i8*)* %8, i8* %9), !dbg !2101
  store i32 %call4, i32* %ret, align 4, !dbg !2102
  br label %if.end5, !dbg !2103

if.end5:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %10 = load i32, i32* %ret, align 4, !dbg !2104
  store i32 %10, i32* %retval, align 4, !dbg !2105
  br label %return, !dbg !2105

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !2106
  ret i32 %11, !dbg !2106
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_free(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !2107 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2110, metadata !DIExpression()), !dbg !2111
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2112, metadata !DIExpression()), !dbg !2113
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2114
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2115
  call void @BKE_sequence_free_ex(%struct.Scene* %0, %struct.Sequence* %1, i8 zeroext 1), !dbg !2116
  ret void, !dbg !2117
}

; Function Attrs: noinline nounwind uwtable
define internal void @BKE_sequence_free_ex(%struct.Scene* %scene, %struct.Sequence* %seq, i8 zeroext %do_cache) #0 !dbg !2118 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %do_cache.addr = alloca i8, align 1
  %sh = alloca %struct.SeqEffectHandle, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2122, metadata !DIExpression()), !dbg !2123
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2124, metadata !DIExpression()), !dbg !2125
  store i8 %do_cache, i8* %do_cache.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_cache.addr, metadata !2126, metadata !DIExpression()), !dbg !2127
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2128
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !2130
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !2130
  %tobool = icmp ne %struct.Strip* %1, null, !dbg !2128
  br i1 %tobool, label %if.then, label %if.end, !dbg !2131

if.then:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2132
  %strip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !2133
  %3 = load %struct.Strip*, %struct.Strip** %strip1, align 8, !dbg !2133
  call void @seq_free_strip(%struct.Strip* %3), !dbg !2134
  br label %if.end, !dbg !2134

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2135
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 30, !dbg !2137
  %5 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !2137
  %tobool2 = icmp ne %struct.anim* %5, null, !dbg !2135
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !2138

if.then3:                                         ; preds = %if.end
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2139
  %anim4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 30, !dbg !2141
  %7 = load %struct.anim*, %struct.anim** %anim4, align 8, !dbg !2141
  call void @IMB_free_anim(%struct.anim* %7), !dbg !2142
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2143
  %anim5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 30, !dbg !2144
  store %struct.anim* null, %struct.anim** %anim5, align 8, !dbg !2145
  br label %if.end6, !dbg !2146

if.end6:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2147
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 6, !dbg !2149
  %10 = load i32, i32* %type, align 4, !dbg !2149
  %and = and i32 %10, 8, !dbg !2150
  %tobool7 = icmp ne i32 %and, 0, !dbg !2150
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !2151

if.then8:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !2152, metadata !DIExpression()), !dbg !2154
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2155
  call void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret %sh, %struct.Sequence* %11), !dbg !2156
  %free = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 6, !dbg !2157
  %12 = load void (%struct.Sequence*)*, void (%struct.Sequence*)** %free, align 8, !dbg !2157
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2158
  call void %12(%struct.Sequence* %13), !dbg !2159
  br label %if.end9, !dbg !2160

if.end9:                                          ; preds = %if.then8, %if.end6
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2161
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 37, !dbg !2163
  %15 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !2163
  %tobool10 = icmp ne %struct.bSound* %15, null, !dbg !2161
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !2164

if.then11:                                        ; preds = %if.end9
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2165
  %sound12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 37, !dbg !2167
  %17 = load %struct.bSound*, %struct.bSound** %sound12, align 8, !dbg !2167
  %18 = bitcast %struct.bSound* %17 to %struct.ID*, !dbg !2168
  %us = getelementptr inbounds %struct.ID, %struct.ID* %18, i32 0, i32 6, !dbg !2168
  %19 = load i32, i32* %us, align 4, !dbg !2169
  %dec = add nsw i32 %19, -1, !dbg !2169
  store i32 %dec, i32* %us, align 4, !dbg !2169
  br label %if.end13, !dbg !2170

if.end13:                                         ; preds = %if.then11, %if.end9
  %20 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2171
  %tobool14 = icmp ne %struct.Scene* %20, null, !dbg !2171
  br i1 %tobool14, label %if.then15, label %if.end28, !dbg !2173

if.then15:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2174, metadata !DIExpression()), !dbg !2178
  %21 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2179
  %ed16 = getelementptr inbounds %struct.Scene, %struct.Scene* %21, i32 0, i32 19, !dbg !2180
  %22 = load %struct.Editing*, %struct.Editing** %ed16, align 8, !dbg !2180
  store %struct.Editing* %22, %struct.Editing** %ed, align 8, !dbg !2178
  %23 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2181
  %act_seq = getelementptr inbounds %struct.Editing, %struct.Editing* %23, i32 0, i32 3, !dbg !2183
  %24 = load %struct.Sequence*, %struct.Sequence** %act_seq, align 8, !dbg !2183
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2184
  %cmp = icmp eq %struct.Sequence* %24, %25, !dbg !2185
  br i1 %cmp, label %if.then17, label %if.end19, !dbg !2186

if.then17:                                        ; preds = %if.then15
  %26 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2187
  %act_seq18 = getelementptr inbounds %struct.Editing, %struct.Editing* %26, i32 0, i32 3, !dbg !2188
  store %struct.Sequence* null, %struct.Sequence** %act_seq18, align 8, !dbg !2189
  br label %if.end19, !dbg !2187

if.end19:                                         ; preds = %if.then17, %if.then15
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2190
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 38, !dbg !2192
  %28 = load i8*, i8** %scene_sound, align 8, !dbg !2192
  %tobool20 = icmp ne i8* %28, null, !dbg !2190
  br i1 %tobool20, label %land.lhs.true, label %if.end27, !dbg !2193

land.lhs.true:                                    ; preds = %if.end19
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2194
  %type21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 6, !dbg !2194
  %30 = load i32, i32* %type21, align 4, !dbg !2194
  %cmp22 = icmp eq i32 %30, 4, !dbg !2194
  br i1 %cmp22, label %if.then25, label %lor.lhs.false, !dbg !2194

lor.lhs.false:                                    ; preds = %land.lhs.true
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2194
  %type23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 6, !dbg !2194
  %32 = load i32, i32* %type23, align 4, !dbg !2194
  %cmp24 = icmp eq i32 %32, 2, !dbg !2194
  br i1 %cmp24, label %if.then25, label %if.end27, !dbg !2195

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %33 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2196
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2197
  %scene_sound26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 38, !dbg !2198
  %35 = load i8*, i8** %scene_sound26, align 8, !dbg !2198
  call void @sound_remove_scene_sound(%struct.Scene* %33, i8* %35), !dbg !2199
  br label %if.end27, !dbg !2199

if.end27:                                         ; preds = %if.then25, %lor.lhs.false, %if.end19
  %36 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2200
  %37 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2201
  call void @seq_free_animdata(%struct.Scene* %36, %struct.Sequence* %37), !dbg !2202
  br label %if.end28, !dbg !2203

if.end28:                                         ; preds = %if.end27, %if.end13
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2204
  call void @BKE_sequence_modifier_clear(%struct.Sequence* %38), !dbg !2205
  %39 = load i8, i8* %do_cache.addr, align 1, !dbg !2206
  %tobool29 = icmp ne i8 %39, 0, !dbg !2206
  br i1 %tobool29, label %if.then30, label %if.end34, !dbg !2208

if.then30:                                        ; preds = %if.end28
  %40 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2209
  %tobool31 = icmp ne %struct.Scene* %40, null, !dbg !2209
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !2212

if.then32:                                        ; preds = %if.then30
  %41 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2213
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2215
  call void @BKE_sequence_invalidate_cache(%struct.Scene* %41, %struct.Sequence* %42), !dbg !2216
  br label %if.end33, !dbg !2217

if.end33:                                         ; preds = %if.then32, %if.then30
  br label %if.end34, !dbg !2218

if.end34:                                         ; preds = %if.end33, %if.end28
  %43 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2219
  %44 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2220
  %45 = bitcast %struct.Sequence* %44 to i8*, !dbg !2220
  call void %43(i8* %45), !dbg !2219
  ret void, !dbg !2221
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %scene, i8 zeroext %alloc) #0 !dbg !2222 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %alloc.addr = alloca i8, align 1
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2225, metadata !DIExpression()), !dbg !2226
  store i8 %alloc, i8* %alloc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %alloc.addr, metadata !2227, metadata !DIExpression()), !dbg !2228
  %0 = load i8, i8* %alloc.addr, align 1, !dbg !2229
  %tobool = icmp ne i8 %0, 0, !dbg !2229
  br i1 %tobool, label %if.then, label %if.end, !dbg !2231

if.then:                                          ; preds = %entry
  %1 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2232
  %call = call %struct.Editing* @BKE_sequencer_editing_ensure(%struct.Scene* %1), !dbg !2234
  br label %if.end, !dbg !2235

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2236
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %2, i32 0, i32 19, !dbg !2237
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2237
  ret %struct.Editing* %3, !dbg !2238
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Editing* @BKE_sequencer_editing_ensure(%struct.Scene* %scene) #0 !dbg !2239 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ed1 = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2242, metadata !DIExpression()), !dbg !2243
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2244
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 19, !dbg !2246
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2246
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !2247
  br i1 %cmp, label %if.then, label %if.end, !dbg !2248

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed1, metadata !2249, metadata !DIExpression()), !dbg !2251
  %2 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !2252
  %call = call i8* %2(i64 2128, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !2252
  %3 = bitcast i8* %call to %struct.Editing*, !dbg !2252
  %4 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2253
  %ed2 = getelementptr inbounds %struct.Scene, %struct.Scene* %4, i32 0, i32 19, !dbg !2254
  store %struct.Editing* %3, %struct.Editing** %ed2, align 8, !dbg !2255
  store %struct.Editing* %3, %struct.Editing** %ed1, align 8, !dbg !2256
  %5 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !2257
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %5, i32 0, i32 1, !dbg !2258
  %6 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !2259
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %6, i32 0, i32 0, !dbg !2260
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbasep, align 8, !dbg !2261
  br label %if.end, !dbg !2262

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2263
  %ed3 = getelementptr inbounds %struct.Scene, %struct.Scene* %7, i32 0, i32 19, !dbg !2264
  %8 = load %struct.Editing*, %struct.Editing** %ed3, align 8, !dbg !2264
  ret %struct.Editing* %8, !dbg !2265
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_free_clipboard() #0 !dbg !2266 {
entry:
  %seq = alloca %struct.Sequence*, align 8
  %nseq = alloca %struct.Sequence*, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2269, metadata !DIExpression()), !dbg !2270
  call void @llvm.dbg.declare(metadata %struct.Sequence** %nseq, metadata !2271, metadata !DIExpression()), !dbg !2272
  call void @BKE_sequencer_base_clipboard_pointers_free(%struct.ListBase* @seqbase_clipboard), !dbg !2273
  %0 = load i8*, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @seqbase_clipboard, i32 0, i32 0), align 8, !dbg !2274
  %1 = bitcast i8* %0 to %struct.Sequence*, !dbg !2276
  store %struct.Sequence* %1, %struct.Sequence** %seq, align 8, !dbg !2277
  br label %for.cond, !dbg !2278

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2279
  %tobool = icmp ne %struct.Sequence* %2, null, !dbg !2281
  br i1 %tobool, label %for.body, label %for.end, !dbg !2281

for.body:                                         ; preds = %for.cond
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2282
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 0, !dbg !2284
  %4 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2284
  store %struct.Sequence* %4, %struct.Sequence** %nseq, align 8, !dbg !2285
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2286
  call void @seq_free_sequence_recurse(%struct.Scene* null, %struct.Sequence* %5), !dbg !2287
  br label %for.inc, !dbg !2288

for.inc:                                          ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !2289
  store %struct.Sequence* %6, %struct.Sequence** %seq, align 8, !dbg !2290
  br label %for.cond, !dbg !2291, !llvm.loop !2292

for.end:                                          ; preds = %for.cond
  call void @BLI_listbase_clear(%struct.ListBase* @seqbase_clipboard), !dbg !2294
  ret void, !dbg !2295
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_base_clipboard_pointers_free(%struct.ListBase* %seqbase) #0 !dbg !2296 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !2299, metadata !DIExpression()), !dbg !2300
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2301, metadata !DIExpression()), !dbg !2302
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !2303
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !2305
  %1 = load i8*, i8** %first, align 8, !dbg !2305
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2303
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !2306
  br label %for.cond, !dbg !2307

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2308
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2310
  br i1 %tobool, label %for.body, label %for.end, !dbg !2310

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2311
  call void @BKE_sequence_clipboard_pointers_free(%struct.Sequence* %4), !dbg !2313
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2314
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 36, !dbg !2315
  call void @BKE_sequencer_base_clipboard_pointers_free(%struct.ListBase* %seqbase1), !dbg !2316
  br label %for.inc, !dbg !2317

for.inc:                                          ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2318
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 0, !dbg !2319
  %7 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2319
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !2320
  br label %for.cond, !dbg !2321, !llvm.loop !2322

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2324
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_free_sequence_recurse(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !2325 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  %iseq_next = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2328, metadata !DIExpression()), !dbg !2329
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !2330, metadata !DIExpression()), !dbg !2331
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq_next, metadata !2332, metadata !DIExpression()), !dbg !2333
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2334
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 36, !dbg !2336
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !2337
  %1 = load i8*, i8** %first, align 8, !dbg !2337
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2334
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !2338
  br label %for.cond, !dbg !2339

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2340
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2342
  br i1 %tobool, label %for.body, label %for.end, !dbg !2342

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2343
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 0, !dbg !2345
  %5 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2345
  store %struct.Sequence* %5, %struct.Sequence** %iseq_next, align 8, !dbg !2346
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2347
  %7 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !2348
  call void @seq_free_sequence_recurse(%struct.Scene* %6, %struct.Sequence* %7), !dbg !2349
  br label %for.inc, !dbg !2350

for.inc:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %iseq_next, align 8, !dbg !2351
  store %struct.Sequence* %8, %struct.Sequence** %iseq, align 8, !dbg !2352
  br label %for.cond, !dbg !2353, !llvm.loop !2354

for.end:                                          ; preds = %for.cond
  %9 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2356
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2357
  call void @BKE_sequence_free_ex(%struct.Scene* %9, %struct.Sequence* %10, i8 zeroext 0), !dbg !2358
  ret void, !dbg !2359
}

; Function Attrs: noinline nounwind uwtable
define internal void @BLI_listbase_clear(%struct.ListBase* %lb) #0 !dbg !2360 {
entry:
  %lb.addr = alloca %struct.ListBase*, align 8
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !2365, metadata !DIExpression()), !dbg !2366
  %0 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !2367
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 1, !dbg !2368
  store i8* null, i8** %last, align 8, !dbg !2369
  %1 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !2370
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %1, i32 0, i32 0, !dbg !2371
  store i8* null, i8** %first, align 8, !dbg !2372
  ret void, !dbg !2373
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_clipboard_pointers_free(%struct.Sequence* %seq) #0 !dbg !2374 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2377, metadata !DIExpression()), !dbg !2378
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2379
  %scene = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 26, !dbg !2380
  %1 = bitcast %struct.Scene** %scene to %struct.ID**, !dbg !2381
  call void @seqclipboard_ptr_free(%struct.ID** %1), !dbg !2382
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2383
  %scene_camera = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 27, !dbg !2384
  %3 = bitcast %struct.Object** %scene_camera to %struct.ID**, !dbg !2385
  call void @seqclipboard_ptr_free(%struct.ID** %3), !dbg !2386
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2387
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 28, !dbg !2388
  %5 = bitcast %struct.MovieClip** %clip to %struct.ID**, !dbg !2389
  call void @seqclipboard_ptr_free(%struct.ID** %5), !dbg !2390
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2391
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 29, !dbg !2392
  %7 = bitcast %struct.Mask** %mask to %struct.ID**, !dbg !2393
  call void @seqclipboard_ptr_free(%struct.ID** %7), !dbg !2394
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2395
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 37, !dbg !2396
  %9 = bitcast %struct.bSound** %sound to %struct.ID**, !dbg !2397
  call void @seqclipboard_ptr_free(%struct.ID** %9), !dbg !2398
  ret void, !dbg !2399
}

; Function Attrs: noinline nounwind uwtable
define internal void @seqclipboard_ptr_free(%struct.ID** %id_pt) #0 !dbg !2400 {
entry:
  %id_pt.addr = alloca %struct.ID**, align 8
  store %struct.ID** %id_pt, %struct.ID*** %id_pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID*** %id_pt.addr, metadata !2403, metadata !DIExpression()), !dbg !2404
  %0 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2405
  %1 = load %struct.ID*, %struct.ID** %0, align 8, !dbg !2405
  %tobool = icmp ne %struct.ID* %1, null, !dbg !2405
  br i1 %tobool, label %if.then, label %if.end, !dbg !2407

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2408
  %3 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2410
  %4 = load %struct.ID*, %struct.ID** %3, align 8, !dbg !2410
  %5 = bitcast %struct.ID* %4 to i8*, !dbg !2410
  call void %2(i8* %5), !dbg !2408
  %6 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2411
  store %struct.ID* null, %struct.ID** %6, align 8, !dbg !2412
  br label %if.end, !dbg !2413

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2414
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_clipboard_pointers_store(%struct.Sequence* %seq) #0 !dbg !2415 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2416, metadata !DIExpression()), !dbg !2417
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2418
  %scene = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 26, !dbg !2419
  %1 = bitcast %struct.Scene** %scene to %struct.ID**, !dbg !2420
  call void @seqclipboard_ptr_store(%struct.ID** %1), !dbg !2421
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2422
  %scene_camera = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 27, !dbg !2423
  %3 = bitcast %struct.Object** %scene_camera to %struct.ID**, !dbg !2424
  call void @seqclipboard_ptr_store(%struct.ID** %3), !dbg !2425
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2426
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 28, !dbg !2427
  %5 = bitcast %struct.MovieClip** %clip to %struct.ID**, !dbg !2428
  call void @seqclipboard_ptr_store(%struct.ID** %5), !dbg !2429
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2430
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 29, !dbg !2431
  %7 = bitcast %struct.Mask** %mask to %struct.ID**, !dbg !2432
  call void @seqclipboard_ptr_store(%struct.ID** %7), !dbg !2433
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2434
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 37, !dbg !2435
  %9 = bitcast %struct.bSound** %sound to %struct.ID**, !dbg !2436
  call void @seqclipboard_ptr_store(%struct.ID** %9), !dbg !2437
  ret void, !dbg !2438
}

; Function Attrs: noinline nounwind uwtable
define internal void @seqclipboard_ptr_store(%struct.ID** %id_pt) #0 !dbg !2439 {
entry:
  %id_pt.addr = alloca %struct.ID**, align 8
  %id_prev = alloca %struct.ID*, align 8
  store %struct.ID** %id_pt, %struct.ID*** %id_pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID*** %id_pt.addr, metadata !2440, metadata !DIExpression()), !dbg !2441
  %0 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2442
  %1 = load %struct.ID*, %struct.ID** %0, align 8, !dbg !2442
  %tobool = icmp ne %struct.ID* %1, null, !dbg !2442
  br i1 %tobool, label %if.then, label %if.end, !dbg !2444

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.ID** %id_prev, metadata !2445, metadata !DIExpression()), !dbg !2447
  %2 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2448
  %3 = load %struct.ID*, %struct.ID** %2, align 8, !dbg !2448
  store %struct.ID* %3, %struct.ID** %id_prev, align 8, !dbg !2447
  %4 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !2449
  %5 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2450
  %6 = load %struct.ID*, %struct.ID** %5, align 8, !dbg !2450
  %7 = bitcast %struct.ID* %6 to i8*, !dbg !2450
  %call = call i8* %4(i8* %7), !dbg !2449
  %8 = bitcast i8* %call to %struct.ID*, !dbg !2449
  %9 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2451
  store %struct.ID* %8, %struct.ID** %9, align 8, !dbg !2452
  %10 = load %struct.ID*, %struct.ID** %id_prev, align 8, !dbg !2453
  %11 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2454
  %12 = load %struct.ID*, %struct.ID** %11, align 8, !dbg !2454
  %newid = getelementptr inbounds %struct.ID, %struct.ID* %12, i32 0, i32 2, !dbg !2455
  store %struct.ID* %10, %struct.ID** %newid, align 8, !dbg !2456
  br label %if.end, !dbg !2457

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2458
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_clipboard_pointers_restore(%struct.Sequence* %seq, %struct.Main* %bmain) #0 !dbg !2459 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %bmain.addr = alloca %struct.Main*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !2464, metadata !DIExpression()), !dbg !2465
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !2466, metadata !DIExpression()), !dbg !2467
  %0 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2468
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2469
  %scene = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 26, !dbg !2470
  %2 = bitcast %struct.Scene** %scene to %struct.ID**, !dbg !2471
  call void @seqclipboard_ptr_restore(%struct.Main* %0, %struct.ID** %2), !dbg !2472
  %3 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2473
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2474
  %scene_camera = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 27, !dbg !2475
  %5 = bitcast %struct.Object** %scene_camera to %struct.ID**, !dbg !2476
  call void @seqclipboard_ptr_restore(%struct.Main* %3, %struct.ID** %5), !dbg !2477
  %6 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2478
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2479
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 28, !dbg !2480
  %8 = bitcast %struct.MovieClip** %clip to %struct.ID**, !dbg !2481
  call void @seqclipboard_ptr_restore(%struct.Main* %6, %struct.ID** %8), !dbg !2482
  %9 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2483
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2484
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 29, !dbg !2485
  %11 = bitcast %struct.Mask** %mask to %struct.ID**, !dbg !2486
  call void @seqclipboard_ptr_restore(%struct.Main* %9, %struct.ID** %11), !dbg !2487
  %12 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2488
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !2489
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 37, !dbg !2490
  %14 = bitcast %struct.bSound** %sound to %struct.ID**, !dbg !2491
  call void @seqclipboard_ptr_restore(%struct.Main* %12, %struct.ID** %14), !dbg !2492
  ret void, !dbg !2493
}

; Function Attrs: noinline nounwind uwtable
define internal void @seqclipboard_ptr_restore(%struct.Main* %bmain, %struct.ID** %id_pt) #0 !dbg !2494 {
entry:
  %bmain.addr = alloca %struct.Main*, align 8
  %id_pt.addr = alloca %struct.ID**, align 8
  %lb = alloca %struct.ListBase*, align 8
  %id_restore = alloca i8*, align 8
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !2497, metadata !DIExpression()), !dbg !2498
  store %struct.ID** %id_pt, %struct.ID*** %id_pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ID*** %id_pt.addr, metadata !2499, metadata !DIExpression()), !dbg !2500
  %0 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2501
  %1 = load %struct.ID*, %struct.ID** %0, align 8, !dbg !2501
  %tobool = icmp ne %struct.ID* %1, null, !dbg !2501
  br i1 %tobool, label %if.then, label %if.end35, !dbg !2503

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb, metadata !2504, metadata !DIExpression()), !dbg !2508
  %2 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2509
  %3 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2510
  %4 = load %struct.ID*, %struct.ID** %3, align 8, !dbg !2510
  %name = getelementptr inbounds %struct.ID, %struct.ID* %4, i32 0, i32 4, !dbg !2510
  %arraydecay = getelementptr inbounds [66 x i8], [66 x i8]* %name, i64 0, i64 0, !dbg !2510
  %5 = bitcast i8* %arraydecay to i16*, !dbg !2510
  %6 = load i16, i16* %5, align 8, !dbg !2510
  %call = call %struct.ListBase* @which_libbase(%struct.Main* %2, i16 signext %6), !dbg !2511
  store %struct.ListBase* %call, %struct.ListBase** %lb, align 8, !dbg !2508
  call void @llvm.dbg.declare(metadata i8** %id_restore, metadata !2512, metadata !DIExpression()), !dbg !2513
  %7 = load %struct.ListBase*, %struct.ListBase** %lb, align 8, !dbg !2514
  %8 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2516
  %9 = load %struct.ID*, %struct.ID** %8, align 8, !dbg !2516
  %newid = getelementptr inbounds %struct.ID, %struct.ID* %9, i32 0, i32 2, !dbg !2517
  %10 = load %struct.ID*, %struct.ID** %newid, align 8, !dbg !2517
  %11 = bitcast %struct.ID* %10 to i8*, !dbg !2518
  %call1 = call i32 @BLI_findindex(%struct.ListBase* %7, i8* %11), !dbg !2519
  %cmp = icmp ne i32 %call1, -1, !dbg !2520
  br i1 %cmp, label %if.then2, label %if.else, !dbg !2521

if.then2:                                         ; preds = %if.then
  %12 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2522
  %13 = load %struct.ID*, %struct.ID** %12, align 8, !dbg !2522
  %newid3 = getelementptr inbounds %struct.ID, %struct.ID* %13, i32 0, i32 2, !dbg !2524
  %14 = load %struct.ID*, %struct.ID** %newid3, align 8, !dbg !2524
  %15 = bitcast %struct.ID* %14 to i8*, !dbg !2525
  store i8* %15, i8** %id_restore, align 8, !dbg !2526
  br label %if.end, !dbg !2527

if.else:                                          ; preds = %if.then
  %16 = load %struct.ListBase*, %struct.ListBase** %lb, align 8, !dbg !2528
  %17 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2530
  %18 = load %struct.ID*, %struct.ID** %17, align 8, !dbg !2530
  %name4 = getelementptr inbounds %struct.ID, %struct.ID* %18, i32 0, i32 4, !dbg !2531
  %arraydecay5 = getelementptr inbounds [66 x i8], [66 x i8]* %name4, i64 0, i64 0, !dbg !2532
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 2, !dbg !2533
  %call6 = call i8* @BLI_findstring(%struct.ListBase* %16, i8* %add.ptr, i32 34), !dbg !2534
  store i8* %call6, i8** %id_restore, align 8, !dbg !2535
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %19 = load i8*, i8** %id_restore, align 8, !dbg !2536
  %cmp7 = icmp eq i8* %19, null, !dbg !2538
  br i1 %cmp7, label %if.then8, label %if.end34, !dbg !2539

if.then8:                                         ; preds = %if.end
  %20 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2540
  %21 = load %struct.ID*, %struct.ID** %20, align 8, !dbg !2540
  %name9 = getelementptr inbounds %struct.ID, %struct.ID* %21, i32 0, i32 4, !dbg !2540
  %arraydecay10 = getelementptr inbounds [66 x i8], [66 x i8]* %name9, i64 0, i64 0, !dbg !2540
  %22 = bitcast i8* %arraydecay10 to i16*, !dbg !2540
  %23 = load i16, i16* %22, align 8, !dbg !2540
  %conv = sext i16 %23 to i32, !dbg !2540
  switch i32 %conv, label %sw.epilog [
    i32 20307, label %sw.bb
    i32 17229, label %sw.bb22
  ], !dbg !2542

sw.bb:                                            ; preds = %if.then8
  %24 = load %struct.ListBase*, %struct.ListBase** %lb, align 8, !dbg !2543
  %25 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2546
  %26 = load %struct.ID*, %struct.ID** %25, align 8, !dbg !2546
  %27 = bitcast %struct.ID* %26 to %struct.bSound*, !dbg !2547
  %name11 = getelementptr inbounds %struct.bSound, %struct.bSound* %27, i32 0, i32 1, !dbg !2547
  %arraydecay12 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name11, i64 0, i64 0, !dbg !2548
  %call13 = call i8* @BLI_findstring(%struct.ListBase* %24, i8* %arraydecay12, i32 120), !dbg !2549
  store i8* %call13, i8** %id_restore, align 8, !dbg !2550
  %28 = load i8*, i8** %id_restore, align 8, !dbg !2551
  %cmp14 = icmp eq i8* %28, null, !dbg !2553
  br i1 %cmp14, label %if.then16, label %if.end21, !dbg !2554

if.then16:                                        ; preds = %sw.bb
  %29 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2555
  %30 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2557
  %31 = load %struct.ID*, %struct.ID** %30, align 8, !dbg !2557
  %32 = bitcast %struct.ID* %31 to %struct.bSound*, !dbg !2558
  %name17 = getelementptr inbounds %struct.bSound, %struct.bSound* %32, i32 0, i32 1, !dbg !2558
  %arraydecay18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name17, i64 0, i64 0, !dbg !2559
  %call19 = call %struct.bSound* @sound_new_file(%struct.Main* %29, i8* %arraydecay18), !dbg !2560
  %33 = bitcast %struct.bSound* %call19 to i8*, !dbg !2560
  store i8* %33, i8** %id_restore, align 8, !dbg !2561
  %34 = load i8*, i8** %id_restore, align 8, !dbg !2562
  %35 = bitcast i8* %34 to %struct.ID*, !dbg !2562
  %36 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2563
  %37 = load %struct.ID*, %struct.ID** %36, align 8, !dbg !2563
  %newid20 = getelementptr inbounds %struct.ID, %struct.ID* %37, i32 0, i32 2, !dbg !2564
  store %struct.ID* %35, %struct.ID** %newid20, align 8, !dbg !2565
  br label %if.end21, !dbg !2566

if.end21:                                         ; preds = %if.then16, %sw.bb
  br label %sw.epilog, !dbg !2567

sw.bb22:                                          ; preds = %if.then8
  %38 = load %struct.ListBase*, %struct.ListBase** %lb, align 8, !dbg !2568
  %39 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2570
  %40 = load %struct.ID*, %struct.ID** %39, align 8, !dbg !2570
  %41 = bitcast %struct.ID* %40 to %struct.MovieClip*, !dbg !2571
  %name23 = getelementptr inbounds %struct.MovieClip, %struct.MovieClip* %41, i32 0, i32 2, !dbg !2571
  %arraydecay24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name23, i64 0, i64 0, !dbg !2572
  %call25 = call i8* @BLI_findstring(%struct.ListBase* %38, i8* %arraydecay24, i32 128), !dbg !2573
  store i8* %call25, i8** %id_restore, align 8, !dbg !2574
  %42 = load i8*, i8** %id_restore, align 8, !dbg !2575
  %cmp26 = icmp eq i8* %42, null, !dbg !2577
  br i1 %cmp26, label %if.then28, label %if.end33, !dbg !2578

if.then28:                                        ; preds = %sw.bb22
  %43 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2579
  %44 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2581
  %45 = load %struct.ID*, %struct.ID** %44, align 8, !dbg !2581
  %46 = bitcast %struct.ID* %45 to %struct.MovieClip*, !dbg !2582
  %name29 = getelementptr inbounds %struct.MovieClip, %struct.MovieClip* %46, i32 0, i32 2, !dbg !2582
  %arraydecay30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name29, i64 0, i64 0, !dbg !2583
  %call31 = call %struct.MovieClip* @BKE_movieclip_file_add(%struct.Main* %43, i8* %arraydecay30), !dbg !2584
  %47 = bitcast %struct.MovieClip* %call31 to i8*, !dbg !2584
  store i8* %47, i8** %id_restore, align 8, !dbg !2585
  %48 = load i8*, i8** %id_restore, align 8, !dbg !2586
  %49 = bitcast i8* %48 to %struct.ID*, !dbg !2586
  %50 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2587
  %51 = load %struct.ID*, %struct.ID** %50, align 8, !dbg !2587
  %newid32 = getelementptr inbounds %struct.ID, %struct.ID* %51, i32 0, i32 2, !dbg !2588
  store %struct.ID* %49, %struct.ID** %newid32, align 8, !dbg !2589
  br label %if.end33, !dbg !2590

if.end33:                                         ; preds = %if.then28, %sw.bb22
  br label %sw.epilog, !dbg !2591

sw.epilog:                                        ; preds = %if.then8, %if.end33, %if.end21
  br label %if.end34, !dbg !2592

if.end34:                                         ; preds = %sw.epilog, %if.end
  %52 = load i8*, i8** %id_restore, align 8, !dbg !2593
  %53 = bitcast i8* %52 to %struct.ID*, !dbg !2593
  %54 = load %struct.ID**, %struct.ID*** %id_pt.addr, align 8, !dbg !2594
  store %struct.ID* %53, %struct.ID** %54, align 8, !dbg !2595
  br label %if.end35, !dbg !2596

if.end35:                                         ; preds = %if.end34, %entry
  ret void, !dbg !2597
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_base_clipboard_pointers_store(%struct.ListBase* %seqbase) #0 !dbg !2598 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !2599, metadata !DIExpression()), !dbg !2600
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2601, metadata !DIExpression()), !dbg !2602
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !2603
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !2605
  %1 = load i8*, i8** %first, align 8, !dbg !2605
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2603
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !2606
  br label %for.cond, !dbg !2607

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2608
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2610
  br i1 %tobool, label %for.body, label %for.end, !dbg !2610

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2611
  call void @BKE_sequence_clipboard_pointers_store(%struct.Sequence* %4), !dbg !2613
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2614
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 36, !dbg !2615
  call void @BKE_sequencer_base_clipboard_pointers_store(%struct.ListBase* %seqbase1), !dbg !2616
  br label %for.inc, !dbg !2617

for.inc:                                          ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2618
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 0, !dbg !2619
  %7 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2619
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !2620
  br label %for.cond, !dbg !2621, !llvm.loop !2622

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2624
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_base_clipboard_pointers_restore(%struct.ListBase* %seqbase, %struct.Main* %bmain) #0 !dbg !2625 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %bmain.addr = alloca %struct.Main*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !2628, metadata !DIExpression()), !dbg !2629
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !2630, metadata !DIExpression()), !dbg !2631
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2632, metadata !DIExpression()), !dbg !2633
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !2634
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !2636
  %1 = load i8*, i8** %first, align 8, !dbg !2636
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2634
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !2637
  br label %for.cond, !dbg !2638

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2639
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2641
  br i1 %tobool, label %for.body, label %for.end, !dbg !2641

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2642
  %5 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2644
  call void @BKE_sequence_clipboard_pointers_restore(%struct.Sequence* %4, %struct.Main* %5), !dbg !2645
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2646
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 36, !dbg !2647
  %7 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !2648
  call void @BKE_sequencer_base_clipboard_pointers_restore(%struct.ListBase* %seqbase1, %struct.Main* %7), !dbg !2649
  br label %for.inc, !dbg !2650

for.inc:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2651
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 0, !dbg !2652
  %9 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2652
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !2653
  br label %for.cond, !dbg !2654, !llvm.loop !2655

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2657
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_editing_free(%struct.Scene* %scene) #0 !dbg !2658 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %iter_macro = alloca %struct.SeqIterator, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2661, metadata !DIExpression()), !dbg !2662
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2663, metadata !DIExpression()), !dbg !2664
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2665
  %ed1 = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 19, !dbg !2666
  %1 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !2666
  store %struct.Editing* %1, %struct.Editing** %ed, align 8, !dbg !2664
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2667, metadata !DIExpression()), !dbg !2668
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2669
  %cmp = icmp eq %struct.Editing* %2, null, !dbg !2671
  br i1 %cmp, label %if.then, label %if.end, !dbg !2672

if.then:                                          ; preds = %entry
  br label %return, !dbg !2673

if.end:                                           ; preds = %entry
  call void @BKE_sequencer_cache_cleanup(), !dbg !2674
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro, metadata !2675, metadata !DIExpression()), !dbg !2686
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2687
  call void @BKE_sequence_iterator_begin(%struct.Editing* %3, %struct.SeqIterator* %iter_macro, i8 zeroext 0), !dbg !2687
  br label %for.cond, !dbg !2687

for.cond:                                         ; preds = %for.inc, %if.end
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 4, !dbg !2689
  %4 = load i32, i32* %valid, align 8, !dbg !2689
  %tobool = icmp ne i32 %4, 0, !dbg !2687
  br i1 %tobool, label %for.body, label %for.end, !dbg !2687

for.body:                                         ; preds = %for.cond
  %seq2 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 3, !dbg !2691
  %5 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2691
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !2691
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2693
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2695
  call void @BKE_sequence_free_ex(%struct.Scene* %6, %struct.Sequence* %7, i8 zeroext 0), !dbg !2696
  br label %for.inc, !dbg !2697

for.inc:                                          ; preds = %for.body
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro), !dbg !2689
  br label %for.cond, !dbg !2689, !llvm.loop !2698

for.end:                                          ; preds = %for.cond
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro), !dbg !2700
  %8 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2701
  %metastack = getelementptr inbounds %struct.Editing, %struct.Editing* %8, i32 0, i32 2, !dbg !2702
  call void @BLI_freelistN(%struct.ListBase* %metastack), !dbg !2703
  %9 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2704
  %10 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2705
  %11 = bitcast %struct.Editing* %10 to i8*, !dbg !2705
  call void %9(i8* %11), !dbg !2704
  %12 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2706
  %ed3 = getelementptr inbounds %struct.Scene, %struct.Scene* %12, i32 0, i32 19, !dbg !2707
  store %struct.Editing* null, %struct.Editing** %ed3, align 8, !dbg !2708
  br label %return, !dbg !2709

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !2709
}

declare dso_local void @BKE_sequencer_cache_cleanup() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_iterator_begin(%struct.Editing* %ed, %struct.SeqIterator* %iter, i8 zeroext %use_pointer) #0 !dbg !2710 {
entry:
  %ed.addr = alloca %struct.Editing*, align 8
  %iter.addr = alloca %struct.SeqIterator*, align 8
  %use_pointer.addr = alloca i8, align 1
  store %struct.Editing* %ed, %struct.Editing** %ed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed.addr, metadata !2714, metadata !DIExpression()), !dbg !2715
  store %struct.SeqIterator* %iter, %struct.SeqIterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqIterator** %iter.addr, metadata !2716, metadata !DIExpression()), !dbg !2717
  store i8 %use_pointer, i8* %use_pointer.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_pointer.addr, metadata !2718, metadata !DIExpression()), !dbg !2719
  %0 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2720
  %1 = bitcast %struct.SeqIterator* %0 to i8*, !dbg !2721
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false), !dbg !2721
  %2 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !2722
  %3 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2723
  %array = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %3, i32 0, i32 0, !dbg !2724
  %4 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2725
  %tot = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %4, i32 0, i32 1, !dbg !2726
  %5 = load i8, i8* %use_pointer.addr, align 1, !dbg !2727
  call void @seq_array(%struct.Editing* %2, %struct.Sequence*** %array, i32* %tot, i8 zeroext %5), !dbg !2728
  %6 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2729
  %tot1 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %6, i32 0, i32 1, !dbg !2731
  %7 = load i32, i32* %tot1, align 8, !dbg !2731
  %tobool = icmp ne i32 %7, 0, !dbg !2729
  br i1 %tobool, label %if.then, label %if.end, !dbg !2732

if.then:                                          ; preds = %entry
  %8 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2733
  %cur = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %8, i32 0, i32 2, !dbg !2735
  store i32 0, i32* %cur, align 4, !dbg !2736
  %9 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2737
  %array2 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %9, i32 0, i32 0, !dbg !2738
  %10 = load %struct.Sequence**, %struct.Sequence*** %array2, align 8, !dbg !2738
  %11 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2739
  %cur3 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %11, i32 0, i32 2, !dbg !2740
  %12 = load i32, i32* %cur3, align 4, !dbg !2740
  %idxprom = sext i32 %12 to i64, !dbg !2737
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %10, i64 %idxprom, !dbg !2737
  %13 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !2737
  %14 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2741
  %seq = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %14, i32 0, i32 3, !dbg !2742
  store %struct.Sequence* %13, %struct.Sequence** %seq, align 8, !dbg !2743
  %15 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2744
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %15, i32 0, i32 4, !dbg !2745
  store i32 1, i32* %valid, align 8, !dbg !2746
  br label %if.end, !dbg !2747

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2748
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter) #0 !dbg !2749 {
entry:
  %iter.addr = alloca %struct.SeqIterator*, align 8
  store %struct.SeqIterator* %iter, %struct.SeqIterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqIterator** %iter.addr, metadata !2752, metadata !DIExpression()), !dbg !2753
  %0 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2754
  %cur = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %0, i32 0, i32 2, !dbg !2756
  %1 = load i32, i32* %cur, align 4, !dbg !2757
  %inc = add nsw i32 %1, 1, !dbg !2757
  store i32 %inc, i32* %cur, align 4, !dbg !2757
  %2 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2758
  %tot = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %2, i32 0, i32 1, !dbg !2759
  %3 = load i32, i32* %tot, align 8, !dbg !2759
  %cmp = icmp slt i32 %inc, %3, !dbg !2760
  br i1 %cmp, label %if.then, label %if.else, !dbg !2761

if.then:                                          ; preds = %entry
  %4 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2762
  %array = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %4, i32 0, i32 0, !dbg !2763
  %5 = load %struct.Sequence**, %struct.Sequence*** %array, align 8, !dbg !2763
  %6 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2764
  %cur1 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %6, i32 0, i32 2, !dbg !2765
  %7 = load i32, i32* %cur1, align 4, !dbg !2765
  %idxprom = sext i32 %7 to i64, !dbg !2762
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %5, i64 %idxprom, !dbg !2762
  %8 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !2762
  %9 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2766
  %seq = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %9, i32 0, i32 3, !dbg !2767
  store %struct.Sequence* %8, %struct.Sequence** %seq, align 8, !dbg !2768
  br label %if.end, !dbg !2766

if.else:                                          ; preds = %entry
  %10 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2769
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %10, i32 0, i32 4, !dbg !2770
  store i32 0, i32* %valid, align 8, !dbg !2771
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2772
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter) #0 !dbg !2773 {
entry:
  %iter.addr = alloca %struct.SeqIterator*, align 8
  store %struct.SeqIterator* %iter, %struct.SeqIterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqIterator** %iter.addr, metadata !2774, metadata !DIExpression()), !dbg !2775
  %0 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2776
  %array = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %0, i32 0, i32 0, !dbg !2778
  %1 = load %struct.Sequence**, %struct.Sequence*** %array, align 8, !dbg !2778
  %tobool = icmp ne %struct.Sequence** %1, null, !dbg !2776
  br i1 %tobool, label %if.then, label %if.end, !dbg !2779

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !2780
  %3 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2781
  %array1 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %3, i32 0, i32 0, !dbg !2782
  %4 = load %struct.Sequence**, %struct.Sequence*** %array1, align 8, !dbg !2782
  %5 = bitcast %struct.Sequence** %4 to i8*, !dbg !2781
  call void %2(i8* %5), !dbg !2780
  br label %if.end, !dbg !2780

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.SeqIterator*, %struct.SeqIterator** %iter.addr, align 8, !dbg !2783
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %6, i32 0, i32 4, !dbg !2784
  store i32 0, i32* %valid, align 8, !dbg !2785
  ret void, !dbg !2786
}

declare dso_local void @BLI_freelistN(%struct.ListBase*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %scene, %struct.ImBuf* %ibuf, i8 zeroext %make_float) #0 !dbg !2787 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %make_float.addr = alloca i8, align 1
  %from_colorspace = alloca i8*, align 8
  %to_colorspace = alloca i8*, align 8
  %float_colorspace = alloca i8*, align 8
  %byte_colorspace = alloca i8*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2790, metadata !DIExpression()), !dbg !2791
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !2792, metadata !DIExpression()), !dbg !2793
  store i8 %make_float, i8* %make_float.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %make_float.addr, metadata !2794, metadata !DIExpression()), !dbg !2795
  call void @llvm.dbg.declare(metadata i8** %from_colorspace, metadata !2796, metadata !DIExpression()), !dbg !2799
  %call = call i8* @IMB_colormanagement_role_colorspace_name_get(i32 0), !dbg !2800
  store i8* %call, i8** %from_colorspace, align 8, !dbg !2799
  call void @llvm.dbg.declare(metadata i8** %to_colorspace, metadata !2801, metadata !DIExpression()), !dbg !2802
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2803
  %sequencer_colorspace_settings = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 46, !dbg !2804
  %name = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %sequencer_colorspace_settings, i32 0, i32 0, !dbg !2805
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !2803
  store i8* %arraydecay, i8** %to_colorspace, align 8, !dbg !2802
  call void @llvm.dbg.declare(metadata i8** %float_colorspace, metadata !2806, metadata !DIExpression()), !dbg !2807
  %1 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2808
  %call1 = call i8* @IMB_colormanagement_get_float_colorspace(%struct.ImBuf* %1), !dbg !2809
  store i8* %call1, i8** %float_colorspace, align 8, !dbg !2807
  %2 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2810
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %2, i32 0, i32 9, !dbg !2812
  %3 = load float*, float** %rect_float, align 8, !dbg !2812
  %tobool = icmp ne float* %3, null, !dbg !2810
  br i1 %tobool, label %if.end11, label %if.then, !dbg !2813

if.then:                                          ; preds = %entry
  %4 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2814
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %4, i32 0, i32 8, !dbg !2817
  %5 = load i32*, i32** %rect, align 8, !dbg !2817
  %tobool2 = icmp ne i32* %5, null, !dbg !2814
  br i1 %tobool2, label %if.then3, label %if.else9, !dbg !2818

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %byte_colorspace, metadata !2819, metadata !DIExpression()), !dbg !2821
  %6 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2822
  %call4 = call i8* @IMB_colormanagement_get_rect_colorspace(%struct.ImBuf* %6), !dbg !2823
  store i8* %call4, i8** %byte_colorspace, align 8, !dbg !2821
  %7 = load i8, i8* %make_float.addr, align 1, !dbg !2824
  %conv = zext i8 %7 to i32, !dbg !2824
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2824
  br i1 %tobool5, label %if.then8, label %lor.lhs.false, !dbg !2826

lor.lhs.false:                                    ; preds = %if.then3
  %8 = load i8*, i8** %to_colorspace, align 8, !dbg !2827
  %9 = load i8*, i8** %byte_colorspace, align 8, !dbg !2827
  %call6 = call i32 @strcmp(i8* %8, i8* %9) #7, !dbg !2827
  %cmp = icmp eq i32 %call6, 0, !dbg !2827
  br i1 %cmp, label %if.else, label %if.then8, !dbg !2828

if.then8:                                         ; preds = %lor.lhs.false, %if.then3
  %10 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2829
  call void @IMB_float_from_rect(%struct.ImBuf* %10), !dbg !2831
  br label %if.end, !dbg !2832

if.else:                                          ; preds = %lor.lhs.false
  br label %if.end27, !dbg !2833

if.end:                                           ; preds = %if.then8
  br label %if.end10, !dbg !2835

if.else9:                                         ; preds = %if.then
  br label %if.end27, !dbg !2836

if.end10:                                         ; preds = %if.end
  br label %if.end11, !dbg !2838

if.end11:                                         ; preds = %if.end10, %entry
  %11 = load i8*, i8** %from_colorspace, align 8, !dbg !2839
  %tobool12 = icmp ne i8* %11, null, !dbg !2839
  br i1 %tobool12, label %land.lhs.true, label %if.end27, !dbg !2841

land.lhs.true:                                    ; preds = %if.end11
  %12 = load i8*, i8** %from_colorspace, align 8, !dbg !2842
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0, !dbg !2842
  %13 = load i8, i8* %arrayidx, align 1, !dbg !2842
  %conv13 = zext i8 %13 to i32, !dbg !2842
  %cmp14 = icmp ne i32 %conv13, 0, !dbg !2843
  br i1 %cmp14, label %if.then16, label %if.end27, !dbg !2844

if.then16:                                        ; preds = %land.lhs.true
  %14 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2845
  %rect17 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %14, i32 0, i32 8, !dbg !2848
  %15 = load i32*, i32** %rect17, align 8, !dbg !2848
  %tobool18 = icmp ne i32* %15, null, !dbg !2845
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !2849

if.then19:                                        ; preds = %if.then16
  %16 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2850
  call void @imb_freerectImBuf(%struct.ImBuf* %16), !dbg !2851
  br label %if.end20, !dbg !2851

if.end20:                                         ; preds = %if.then19, %if.then16
  %17 = load i8*, i8** %float_colorspace, align 8, !dbg !2852
  %18 = load i8*, i8** %to_colorspace, align 8, !dbg !2852
  %call21 = call i32 @strcmp(i8* %17, i8* %18) #7, !dbg !2852
  %cmp22 = icmp eq i32 %call21, 0, !dbg !2852
  br i1 %cmp22, label %if.end26, label %if.then24, !dbg !2854

if.then24:                                        ; preds = %if.end20
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2855
  %rect_float25 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %19, i32 0, i32 9, !dbg !2857
  %20 = load float*, float** %rect_float25, align 8, !dbg !2857
  %21 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2858
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %21, i32 0, i32 2, !dbg !2859
  %22 = load i32, i32* %x, align 8, !dbg !2859
  %23 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2860
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %23, i32 0, i32 3, !dbg !2861
  %24 = load i32, i32* %y, align 4, !dbg !2861
  %25 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2862
  %channels = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %25, i32 0, i32 5, !dbg !2863
  %26 = load i32, i32* %channels, align 4, !dbg !2863
  %27 = load i8*, i8** %from_colorspace, align 8, !dbg !2864
  %28 = load i8*, i8** %to_colorspace, align 8, !dbg !2865
  call void @IMB_colormanagement_transform_threaded(float* %20, i32 %22, i32 %24, i32 %26, i8* %27, i8* %28, i8 zeroext 1), !dbg !2866
  %29 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2867
  %30 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2868
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %29, %struct.ImBuf* %30), !dbg !2869
  br label %if.end26, !dbg !2870

if.end26:                                         ; preds = %if.then24, %if.end20
  br label %if.end27, !dbg !2871

if.end27:                                         ; preds = %if.else, %if.else9, %if.end26, %land.lhs.true, %if.end11
  ret void, !dbg !2872
}

declare dso_local i8* @IMB_colormanagement_role_colorspace_name_get(i32) #2

declare dso_local i8* @IMB_colormanagement_get_float_colorspace(%struct.ImBuf*) #2

declare dso_local i8* @IMB_colormanagement_get_rect_colorspace(%struct.ImBuf*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #3

declare dso_local void @IMB_float_from_rect(%struct.ImBuf*) #2

declare dso_local void @imb_freerectImBuf(%struct.ImBuf*) #2

declare dso_local void @IMB_colormanagement_transform_threaded(float*, i32, i32, i32, i8*, i8*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sequencer_imbuf_assign_spaces(%struct.Scene* %scene, %struct.ImBuf* %ibuf) #0 !dbg !2873 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !2878, metadata !DIExpression()), !dbg !2879
  %0 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2880
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %0, i32 0, i32 9, !dbg !2882
  %1 = load float*, float** %rect_float, align 8, !dbg !2882
  %tobool = icmp ne float* %1, null, !dbg !2880
  br i1 %tobool, label %if.then, label %if.end, !dbg !2883

if.then:                                          ; preds = %entry
  %2 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2884
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2886
  %sequencer_colorspace_settings = getelementptr inbounds %struct.Scene, %struct.Scene* %3, i32 0, i32 46, !dbg !2887
  %name = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %sequencer_colorspace_settings, i32 0, i32 0, !dbg !2888
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !2886
  call void @IMB_colormanagement_assign_float_colorspace(%struct.ImBuf* %2, i8* %arraydecay), !dbg !2889
  br label %if.end, !dbg !2890

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2891
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_imbuf_from_sequencer_space(%struct.Scene* %scene, %struct.ImBuf* %ibuf) #0 !dbg !2892 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %from_colorspace = alloca i8*, align 8
  %to_colorspace = alloca i8*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2893, metadata !DIExpression()), !dbg !2894
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !2895, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata i8** %from_colorspace, metadata !2897, metadata !DIExpression()), !dbg !2898
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2899
  %sequencer_colorspace_settings = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 46, !dbg !2900
  %name = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %sequencer_colorspace_settings, i32 0, i32 0, !dbg !2901
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !2899
  store i8* %arraydecay, i8** %from_colorspace, align 8, !dbg !2898
  call void @llvm.dbg.declare(metadata i8** %to_colorspace, metadata !2902, metadata !DIExpression()), !dbg !2903
  %call = call i8* @IMB_colormanagement_role_colorspace_name_get(i32 0), !dbg !2904
  store i8* %call, i8** %to_colorspace, align 8, !dbg !2903
  %1 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2905
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %1, i32 0, i32 9, !dbg !2907
  %2 = load float*, float** %rect_float, align 8, !dbg !2907
  %tobool = icmp ne float* %2, null, !dbg !2905
  br i1 %tobool, label %if.end, label %if.then, !dbg !2908

if.then:                                          ; preds = %entry
  br label %if.end5, !dbg !2909

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %to_colorspace, align 8, !dbg !2910
  %tobool1 = icmp ne i8* %3, null, !dbg !2910
  br i1 %tobool1, label %land.lhs.true, label %if.end5, !dbg !2912

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %to_colorspace, align 8, !dbg !2913
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0, !dbg !2913
  %5 = load i8, i8* %arrayidx, align 1, !dbg !2913
  %conv = zext i8 %5 to i32, !dbg !2913
  %cmp = icmp ne i32 %conv, 0, !dbg !2914
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !2915

if.then3:                                         ; preds = %land.lhs.true
  %6 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2916
  %rect_float4 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %6, i32 0, i32 9, !dbg !2918
  %7 = load float*, float** %rect_float4, align 8, !dbg !2918
  %8 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2919
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %8, i32 0, i32 2, !dbg !2920
  %9 = load i32, i32* %x, align 8, !dbg !2920
  %10 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2921
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %10, i32 0, i32 3, !dbg !2922
  %11 = load i32, i32* %y, align 4, !dbg !2922
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2923
  %channels = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %12, i32 0, i32 5, !dbg !2924
  %13 = load i32, i32* %channels, align 4, !dbg !2924
  %14 = load i8*, i8** %from_colorspace, align 8, !dbg !2925
  %15 = load i8*, i8** %to_colorspace, align 8, !dbg !2926
  call void @IMB_colormanagement_transform_threaded(float* %7, i32 %9, i32 %11, i32 %13, i8* %14, i8* %15, i8 zeroext 1), !dbg !2927
  %16 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !2928
  %17 = load i8*, i8** %to_colorspace, align 8, !dbg !2929
  call void @IMB_colormanagement_assign_float_colorspace(%struct.ImBuf* %16, i8* %17), !dbg !2930
  br label %if.end5, !dbg !2931

if.end5:                                          ; preds = %if.then, %if.then3, %land.lhs.true, %if.end
  ret void, !dbg !2932
}

declare dso_local void @IMB_colormanagement_assign_float_colorspace(%struct.ImBuf*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_pixel_from_sequencer_space_v4(%struct.Scene* %scene, float* %pixel) #0 !dbg !2933 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %pixel.addr = alloca float*, align 8
  %from_colorspace = alloca i8*, align 8
  %to_colorspace = alloca i8*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2936, metadata !DIExpression()), !dbg !2937
  store float* %pixel, float** %pixel.addr, align 8
  call void @llvm.dbg.declare(metadata float** %pixel.addr, metadata !2938, metadata !DIExpression()), !dbg !2939
  call void @llvm.dbg.declare(metadata i8** %from_colorspace, metadata !2940, metadata !DIExpression()), !dbg !2941
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2942
  %sequencer_colorspace_settings = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 46, !dbg !2943
  %name = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %sequencer_colorspace_settings, i32 0, i32 0, !dbg !2944
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !2942
  store i8* %arraydecay, i8** %from_colorspace, align 8, !dbg !2941
  call void @llvm.dbg.declare(metadata i8** %to_colorspace, metadata !2945, metadata !DIExpression()), !dbg !2946
  %call = call i8* @IMB_colormanagement_role_colorspace_name_get(i32 0), !dbg !2947
  store i8* %call, i8** %to_colorspace, align 8, !dbg !2946
  %1 = load i8*, i8** %to_colorspace, align 8, !dbg !2948
  %tobool = icmp ne i8* %1, null, !dbg !2948
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2950

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %to_colorspace, align 8, !dbg !2951
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !2951
  %3 = load i8, i8* %arrayidx, align 1, !dbg !2951
  %conv = zext i8 %3 to i32, !dbg !2951
  %cmp = icmp ne i32 %conv, 0, !dbg !2952
  br i1 %cmp, label %if.then, label %if.else, !dbg !2953

if.then:                                          ; preds = %land.lhs.true
  %4 = load float*, float** %pixel.addr, align 8, !dbg !2954
  %5 = load i8*, i8** %from_colorspace, align 8, !dbg !2956
  %6 = load i8*, i8** %to_colorspace, align 8, !dbg !2957
  call void @IMB_colormanagement_transform_v4(float* %4, i8* %5, i8* %6), !dbg !2958
  br label %if.end, !dbg !2959

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load float*, float** %pixel.addr, align 8, !dbg !2960
  %8 = load float*, float** %pixel.addr, align 8, !dbg !2962
  call void @srgb_to_linearrgb_v4(float* %7, float* %8), !dbg !2963
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2964
}

declare dso_local void @IMB_colormanagement_transform_v4(float*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @srgb_to_linearrgb_v4(float* %linear, float* %srgb) #0 !dbg !2965 {
entry:
  %linear.addr = alloca float*, align 8
  %srgb.addr = alloca float*, align 8
  store float* %linear, float** %linear.addr, align 8
  call void @llvm.dbg.declare(metadata float** %linear.addr, metadata !2971, metadata !DIExpression()), !dbg !2972
  store float* %srgb, float** %srgb.addr, align 8
  call void @llvm.dbg.declare(metadata float** %srgb.addr, metadata !2973, metadata !DIExpression()), !dbg !2974
  %0 = load float*, float** %linear.addr, align 8, !dbg !2975
  %1 = load float*, float** %srgb.addr, align 8, !dbg !2976
  call void @srgb_to_linearrgb_v3_v3(float* %0, float* %1), !dbg !2977
  %2 = load float*, float** %srgb.addr, align 8, !dbg !2978
  %arrayidx = getelementptr inbounds float, float* %2, i64 3, !dbg !2978
  %3 = load float, float* %arrayidx, align 4, !dbg !2978
  %4 = load float*, float** %linear.addr, align 8, !dbg !2979
  %arrayidx1 = getelementptr inbounds float, float* %4, i64 3, !dbg !2979
  store float %3, float* %arrayidx1, align 4, !dbg !2980
  ret void, !dbg !2981
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_new_render_data(%struct.SeqRenderData* noalias sret %agg.result, %struct.EvaluationContext* %eval_ctx, %struct.Main* %bmain, %struct.Scene* %scene, i32 %rectx, i32 %recty, i32 %preview_render_size) #0 !dbg !2982 {
entry:
  %eval_ctx.addr = alloca %struct.EvaluationContext*, align 8
  %bmain.addr = alloca %struct.Main*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %rectx.addr = alloca i32, align 4
  %recty.addr = alloca i32, align 4
  %preview_render_size.addr = alloca i32, align 4
  store %struct.EvaluationContext* %eval_ctx, %struct.EvaluationContext** %eval_ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.EvaluationContext** %eval_ctx.addr, metadata !2987, metadata !DIExpression()), !dbg !2988
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !2989, metadata !DIExpression()), !dbg !2990
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2991, metadata !DIExpression()), !dbg !2992
  store i32 %rectx, i32* %rectx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rectx.addr, metadata !2993, metadata !DIExpression()), !dbg !2994
  store i32 %recty, i32* %recty.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %recty.addr, metadata !2995, metadata !DIExpression()), !dbg !2996
  store i32 %preview_render_size, i32* %preview_render_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %preview_render_size.addr, metadata !2997, metadata !DIExpression()), !dbg !2998
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData* %agg.result, metadata !2999, metadata !DIExpression()), !dbg !3000
  %0 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !3001
  %bmain1 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 1, !dbg !3002
  store %struct.Main* %0, %struct.Main** %bmain1, align 8, !dbg !3003
  %1 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3004
  %scene2 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 2, !dbg !3005
  store %struct.Scene* %1, %struct.Scene** %scene2, align 8, !dbg !3006
  %2 = load i32, i32* %rectx.addr, align 4, !dbg !3007
  %rectx3 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 3, !dbg !3008
  store i32 %2, i32* %rectx3, align 8, !dbg !3009
  %3 = load i32, i32* %recty.addr, align 4, !dbg !3010
  %recty4 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 4, !dbg !3011
  store i32 %3, i32* %recty4, align 4, !dbg !3012
  %4 = load i32, i32* %preview_render_size.addr, align 4, !dbg !3013
  %preview_render_size5 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 5, !dbg !3014
  store i32 %4, i32* %preview_render_size5, align 8, !dbg !3015
  %motion_blur_samples = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 6, !dbg !3016
  store i32 0, i32* %motion_blur_samples, align 4, !dbg !3017
  %motion_blur_shutter = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 7, !dbg !3018
  store float 0.000000e+00, float* %motion_blur_shutter, align 8, !dbg !3019
  %5 = load %struct.EvaluationContext*, %struct.EvaluationContext** %eval_ctx.addr, align 8, !dbg !3020
  %eval_ctx6 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 0, !dbg !3021
  store %struct.EvaluationContext* %5, %struct.EvaluationContext** %eval_ctx6, align 8, !dbg !3022
  %skip_cache = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 8, !dbg !3023
  store i8 0, i8* %skip_cache, align 4, !dbg !3024
  %is_proxy_render = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %agg.result, i32 0, i32 9, !dbg !3025
  store i8 0, i8* %is_proxy_render, align 1, !dbg !3026
  ret void, !dbg !3027
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noinline nounwind uwtable
define internal void @seq_array(%struct.Editing* %ed, %struct.Sequence*** %seqarray, i32* %tot, i8 zeroext %use_pointer) #0 !dbg !3028 {
entry:
  %ed.addr = alloca %struct.Editing*, align 8
  %seqarray.addr = alloca %struct.Sequence***, align 8
  %tot.addr = alloca i32*, align 8
  %use_pointer.addr = alloca i8, align 1
  %array = alloca %struct.Sequence**, align 8
  store %struct.Editing* %ed, %struct.Editing** %ed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed.addr, metadata !3032, metadata !DIExpression()), !dbg !3033
  store %struct.Sequence*** %seqarray, %struct.Sequence**** %seqarray.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence**** %seqarray.addr, metadata !3034, metadata !DIExpression()), !dbg !3035
  store i32* %tot, i32** %tot.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %tot.addr, metadata !3036, metadata !DIExpression()), !dbg !3037
  store i8 %use_pointer, i8* %use_pointer.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_pointer.addr, metadata !3038, metadata !DIExpression()), !dbg !3039
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %array, metadata !3040, metadata !DIExpression()), !dbg !3041
  %0 = load %struct.Sequence***, %struct.Sequence**** %seqarray.addr, align 8, !dbg !3042
  store %struct.Sequence** null, %struct.Sequence*** %0, align 8, !dbg !3043
  %1 = load i32*, i32** %tot.addr, align 8, !dbg !3044
  store i32 0, i32* %1, align 4, !dbg !3045
  %2 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !3046
  %cmp = icmp eq %struct.Editing* %2, null, !dbg !3048
  br i1 %cmp, label %if.then, label %if.end, !dbg !3049

if.then:                                          ; preds = %entry
  br label %if.end11, !dbg !3050

if.end:                                           ; preds = %entry
  %3 = load i8, i8* %use_pointer.addr, align 1, !dbg !3051
  %tobool = icmp ne i8 %3, 0, !dbg !3051
  br i1 %tobool, label %if.then1, label %if.else, !dbg !3053

if.then1:                                         ; preds = %if.end
  %4 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !3054
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !3055
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3055
  %6 = load i32*, i32** %tot.addr, align 8, !dbg !3056
  call void @seq_count(%struct.ListBase* %5, i32* %6), !dbg !3057
  br label %if.end2, !dbg !3057

if.else:                                          ; preds = %if.end
  %7 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !3058
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %7, i32 0, i32 1, !dbg !3059
  %8 = load i32*, i32** %tot.addr, align 8, !dbg !3060
  call void @seq_count(%struct.ListBase* %seqbase, i32* %8), !dbg !3061
  br label %if.end2

if.end2:                                          ; preds = %if.else, %if.then1
  %9 = load i32*, i32** %tot.addr, align 8, !dbg !3062
  %10 = load i32, i32* %9, align 4, !dbg !3064
  %cmp3 = icmp eq i32 %10, 0, !dbg !3065
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !3066

if.then4:                                         ; preds = %if.end2
  br label %if.end11, !dbg !3067

if.end5:                                          ; preds = %if.end2
  %11 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3068
  %12 = load i32*, i32** %tot.addr, align 8, !dbg !3069
  %13 = load i32, i32* %12, align 4, !dbg !3070
  %conv = sext i32 %13 to i64, !dbg !3071
  %mul = mul i64 8, %conv, !dbg !3072
  %call = call i8* %11(i64 %mul, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0)), !dbg !3068
  %14 = bitcast i8* %call to %struct.Sequence**, !dbg !3068
  store %struct.Sequence** %14, %struct.Sequence*** %array, align 8, !dbg !3073
  %15 = load %struct.Sequence***, %struct.Sequence**** %seqarray.addr, align 8, !dbg !3074
  store %struct.Sequence** %14, %struct.Sequence*** %15, align 8, !dbg !3075
  %16 = load i8, i8* %use_pointer.addr, align 1, !dbg !3076
  %tobool6 = icmp ne i8 %16, 0, !dbg !3076
  br i1 %tobool6, label %if.then7, label %if.else9, !dbg !3078

if.then7:                                         ; preds = %if.end5
  %17 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !3079
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %17, i32 0, i32 0, !dbg !3080
  %18 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !3080
  call void @seq_build_array(%struct.ListBase* %18, %struct.Sequence*** %array, i32 0), !dbg !3081
  br label %if.end11, !dbg !3081

if.else9:                                         ; preds = %if.end5
  %19 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !3082
  %seqbase10 = getelementptr inbounds %struct.Editing, %struct.Editing* %19, i32 0, i32 1, !dbg !3083
  call void @seq_build_array(%struct.ListBase* %seqbase10, %struct.Sequence*** %array, i32 0), !dbg !3084
  br label %if.end11

if.end11:                                         ; preds = %if.then, %if.then4, %if.else9, %if.then7
  ret void, !dbg !3085
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_calc_disp(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !3086 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3087, metadata !DIExpression()), !dbg !3088
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3089, metadata !DIExpression()), !dbg !3090
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3091
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 9, !dbg !3093
  %1 = load i32, i32* %startofs, align 8, !dbg !3093
  %tobool = icmp ne i32 %1, 0, !dbg !3091
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3094

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3095
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 11, !dbg !3096
  %3 = load i32, i32* %startstill, align 8, !dbg !3096
  %tobool1 = icmp ne i32 %3, 0, !dbg !3095
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3097

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3098
  %startstill2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 11, !dbg !3099
  store i32 0, i32* %startstill2, align 8, !dbg !3100
  br label %if.end, !dbg !3098

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3101
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 10, !dbg !3103
  %6 = load i32, i32* %endofs, align 4, !dbg !3103
  %tobool3 = icmp ne i32 %6, 0, !dbg !3101
  br i1 %tobool3, label %land.lhs.true4, label %if.end8, !dbg !3104

land.lhs.true4:                                   ; preds = %if.end
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3105
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 12, !dbg !3106
  %8 = load i32, i32* %endstill, align 4, !dbg !3106
  %tobool5 = icmp ne i32 %8, 0, !dbg !3105
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !3107

if.then6:                                         ; preds = %land.lhs.true4
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3108
  %endstill7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 12, !dbg !3109
  store i32 0, i32* %endstill7, align 4, !dbg !3110
  br label %if.end8, !dbg !3108

if.end8:                                          ; preds = %if.then6, %land.lhs.true4, %if.end
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3111
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 8, !dbg !3112
  %11 = load i32, i32* %start, align 4, !dbg !3112
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3113
  %startofs9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 9, !dbg !3114
  %13 = load i32, i32* %startofs9, align 8, !dbg !3114
  %add = add nsw i32 %11, %13, !dbg !3115
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3116
  %startstill10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 11, !dbg !3117
  %15 = load i32, i32* %startstill10, align 8, !dbg !3117
  %sub = sub nsw i32 %add, %15, !dbg !3118
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3119
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 15, !dbg !3120
  store i32 %sub, i32* %startdisp, align 8, !dbg !3121
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3122
  %start11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 8, !dbg !3123
  %18 = load i32, i32* %start11, align 4, !dbg !3123
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3124
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 7, !dbg !3125
  %20 = load i32, i32* %len, align 8, !dbg !3125
  %add12 = add nsw i32 %18, %20, !dbg !3126
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3127
  %endofs13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 10, !dbg !3128
  %22 = load i32, i32* %endofs13, align 4, !dbg !3128
  %sub14 = sub nsw i32 %add12, %22, !dbg !3129
  %23 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3130
  %endstill15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 12, !dbg !3131
  %24 = load i32, i32* %endstill15, align 4, !dbg !3131
  %add16 = add nsw i32 %sub14, %24, !dbg !3132
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3133
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 16, !dbg !3134
  store i32 %add16, i32* %enddisp, align 4, !dbg !3135
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3136
  %handsize = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 19, !dbg !3137
  store float 1.000000e+01, float* %handsize, align 8, !dbg !3138
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3139
  %enddisp17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 16, !dbg !3141
  %28 = load i32, i32* %enddisp17, align 4, !dbg !3141
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3142
  %startdisp18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 15, !dbg !3143
  %30 = load i32, i32* %startdisp18, align 8, !dbg !3143
  %sub19 = sub nsw i32 %28, %30, !dbg !3144
  %cmp = icmp slt i32 %sub19, 10, !dbg !3145
  br i1 %cmp, label %if.then20, label %if.else, !dbg !3146

if.then20:                                        ; preds = %if.end8
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3147
  %enddisp21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 16, !dbg !3149
  %32 = load i32, i32* %enddisp21, align 4, !dbg !3149
  %33 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3150
  %startdisp22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 15, !dbg !3151
  %34 = load i32, i32* %startdisp22, align 8, !dbg !3151
  %sub23 = sub nsw i32 %32, %34, !dbg !3152
  %conv = sitofp i32 %sub23 to double, !dbg !3153
  %mul = fmul double 5.000000e-01, %conv, !dbg !3154
  %conv24 = fptrunc double %mul to float, !dbg !3155
  %35 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3156
  %handsize25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 19, !dbg !3157
  store float %conv24, float* %handsize25, align 8, !dbg !3158
  br label %if.end38, !dbg !3159

if.else:                                          ; preds = %if.end8
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3160
  %enddisp26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 16, !dbg !3162
  %37 = load i32, i32* %enddisp26, align 4, !dbg !3162
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3163
  %startdisp27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 15, !dbg !3164
  %39 = load i32, i32* %startdisp27, align 8, !dbg !3164
  %sub28 = sub nsw i32 %37, %39, !dbg !3165
  %cmp29 = icmp sgt i32 %sub28, 250, !dbg !3166
  br i1 %cmp29, label %if.then31, label %if.end37, !dbg !3167

if.then31:                                        ; preds = %if.else
  %40 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3168
  %enddisp32 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 16, !dbg !3170
  %41 = load i32, i32* %enddisp32, align 4, !dbg !3170
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3171
  %startdisp33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 15, !dbg !3172
  %43 = load i32, i32* %startdisp33, align 8, !dbg !3172
  %sub34 = sub nsw i32 %41, %43, !dbg !3173
  %div = sdiv i32 %sub34, 25, !dbg !3174
  %conv35 = sitofp i32 %div to float, !dbg !3175
  %44 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3176
  %handsize36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 19, !dbg !3177
  store float %conv35, float* %handsize36, align 8, !dbg !3178
  br label %if.end37, !dbg !3179

if.end37:                                         ; preds = %if.then31, %if.else
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then20
  %45 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3180
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 6, !dbg !3180
  %46 = load i32, i32* %type, align 4, !dbg !3180
  %cmp39 = icmp eq i32 %46, 4, !dbg !3180
  br i1 %cmp39, label %if.then44, label %lor.lhs.false, !dbg !3180

lor.lhs.false:                                    ; preds = %if.end38
  %47 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3180
  %type41 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 6, !dbg !3180
  %48 = load i32, i32* %type41, align 4, !dbg !3180
  %cmp42 = icmp eq i32 %48, 2, !dbg !3180
  br i1 %cmp42, label %if.then44, label %if.else45, !dbg !3182

if.then44:                                        ; preds = %lor.lhs.false, %if.end38
  %49 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3183
  %50 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3185
  call void @BKE_sequencer_update_sound_bounds(%struct.Scene* %49, %struct.Sequence* %50), !dbg !3186
  br label %if.end51, !dbg !3187

if.else45:                                        ; preds = %lor.lhs.false
  %51 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3188
  %type46 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 6, !dbg !3190
  %52 = load i32, i32* %type46, align 4, !dbg !3190
  %cmp47 = icmp eq i32 %52, 1, !dbg !3191
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !3192

if.then49:                                        ; preds = %if.else45
  %53 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3193
  %54 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3195
  call void @seq_update_sound_bounds_recursive(%struct.Scene* %53, %struct.Sequence* %54), !dbg !3196
  br label %if.end50, !dbg !3197

if.end50:                                         ; preds = %if.then49, %if.else45
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then44
  ret void, !dbg !3198
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_update_sound_bounds(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !3199 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %startofs = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3202, metadata !DIExpression()), !dbg !3203
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3204
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !3206
  %1 = load i32, i32* %type, align 4, !dbg !3206
  %cmp = icmp eq i32 %1, 2, !dbg !3207
  br i1 %cmp, label %if.then, label %if.else, !dbg !3208

if.then:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3209
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 38, !dbg !3212
  %3 = load i8*, i8** %scene_sound, align 8, !dbg !3212
  %tobool = icmp ne i8* %3, null, !dbg !3209
  br i1 %tobool, label %if.then1, label %if.end, !dbg !3213

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %startofs, metadata !3214, metadata !DIExpression()), !dbg !3216
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3217
  %startofs2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 9, !dbg !3218
  %5 = load i32, i32* %startofs2, align 8, !dbg !3218
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3219
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 44, !dbg !3220
  %7 = load i32, i32* %anim_startofs, align 8, !dbg !3220
  %add = add nsw i32 %5, %7, !dbg !3221
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3222
  %scene3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 26, !dbg !3223
  %9 = load %struct.Scene*, %struct.Scene** %scene3, align 8, !dbg !3223
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %9, i32 0, i32 22, !dbg !3224
  %sfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 6, !dbg !3225
  %10 = load i32, i32* %sfra, align 4, !dbg !3225
  %add4 = add nsw i32 %add, %10, !dbg !3226
  store i32 %add4, i32* %startofs, align 4, !dbg !3216
  %11 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3227
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3228
  %scene_sound5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 38, !dbg !3229
  %13 = load i8*, i8** %scene_sound5, align 8, !dbg !3229
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3230
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 15, !dbg !3231
  %15 = load i32, i32* %startdisp, align 8, !dbg !3231
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3232
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 16, !dbg !3233
  %17 = load i32, i32* %enddisp, align 4, !dbg !3233
  %18 = load i32, i32* %startofs, align 4, !dbg !3234
  call void @sound_move_scene_sound(%struct.Scene* %11, i8* %13, i32 %15, i32 %17, i32 %18), !dbg !3235
  br label %if.end, !dbg !3236

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end6, !dbg !3237

if.else:                                          ; preds = %entry
  %19 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3238
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3240
  call void @sound_move_scene_sound_defaults(%struct.Scene* %19, %struct.Sequence* %20), !dbg !3241
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  ret void, !dbg !3242
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_update_sound_bounds_recursive(%struct.Scene* %scene, %struct.Sequence* %metaseq) #0 !dbg !3243 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %metaseq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3244, metadata !DIExpression()), !dbg !3245
  store %struct.Sequence* %metaseq, %struct.Sequence** %metaseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %metaseq.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3248
  %1 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !3249
  %2 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !3250
  %call = call i32 @metaseq_start(%struct.Sequence* %2), !dbg !3251
  %3 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !3252
  %call1 = call i32 @metaseq_end(%struct.Sequence* %3), !dbg !3253
  call void @seq_update_sound_bounds_recursive_rec(%struct.Scene* %0, %struct.Sequence* %1, i32 %call, i32 %call1), !dbg !3254
  ret void, !dbg !3255
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_calc(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !3256 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %seqm = alloca %struct.Sequence*, align 8
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3257, metadata !DIExpression()), !dbg !3258
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3259, metadata !DIExpression()), !dbg !3260
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqm, metadata !3261, metadata !DIExpression()), !dbg !3262
  call void @llvm.dbg.declare(metadata i32* %min, metadata !3263, metadata !DIExpression()), !dbg !3264
  call void @llvm.dbg.declare(metadata i32* %max, metadata !3265, metadata !DIExpression()), !dbg !3266
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3267
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 36, !dbg !3268
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !3269
  %1 = load i8*, i8** %first, align 8, !dbg !3269
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !3267
  store %struct.Sequence* %2, %struct.Sequence** %seqm, align 8, !dbg !3270
  br label %while.cond, !dbg !3271

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3272
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !3271
  br i1 %tobool, label %while.body, label %while.end, !dbg !3271

while.body:                                       ; preds = %while.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3273
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 36, !dbg !3276
  %first2 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase1, i32 0, i32 0, !dbg !3277
  %5 = load i8*, i8** %first2, align 8, !dbg !3277
  %tobool3 = icmp ne i8* %5, null, !dbg !3273
  br i1 %tobool3, label %if.then, label %if.end, !dbg !3278

if.then:                                          ; preds = %while.body
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3279
  %7 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3280
  call void @BKE_sequence_calc(%struct.Scene* %6, %struct.Sequence* %7), !dbg !3281
  br label %if.end, !dbg !3281

if.end:                                           ; preds = %if.then, %while.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3282
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 0, !dbg !3283
  %9 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !3283
  store %struct.Sequence* %9, %struct.Sequence** %seqm, align 8, !dbg !3284
  br label %while.cond, !dbg !3271, !llvm.loop !3285

while.end:                                        ; preds = %while.cond
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3287
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !3289
  %11 = load i32, i32* %type, align 4, !dbg !3289
  %and = and i32 %11, 8, !dbg !3290
  %tobool4 = icmp ne i32 %and, 0, !dbg !3290
  br i1 %tobool4, label %if.then5, label %if.else47, !dbg !3291

if.then5:                                         ; preds = %while.end
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3292
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 34, !dbg !3295
  %13 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !3295
  %cmp = icmp eq %struct.Sequence* %13, null, !dbg !3296
  br i1 %cmp, label %if.then6, label %if.end8, !dbg !3297

if.then6:                                         ; preds = %if.then5
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3298
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 33, !dbg !3299
  %15 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !3299
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3300
  %seq27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 34, !dbg !3301
  store %struct.Sequence* %15, %struct.Sequence** %seq27, align 8, !dbg !3302
  br label %if.end8, !dbg !3300

if.end8:                                          ; preds = %if.then6, %if.then5
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3303
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 35, !dbg !3305
  %18 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !3305
  %cmp9 = icmp eq %struct.Sequence* %18, null, !dbg !3306
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !3307

if.then10:                                        ; preds = %if.end8
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3308
  %seq111 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 33, !dbg !3309
  %20 = load %struct.Sequence*, %struct.Sequence** %seq111, align 8, !dbg !3309
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3310
  %seq312 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 35, !dbg !3311
  store %struct.Sequence* %20, %struct.Sequence** %seq312, align 8, !dbg !3312
  br label %if.end13, !dbg !3310

if.end13:                                         ; preds = %if.then10, %if.end8
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3313
  %seq114 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 33, !dbg !3315
  %23 = load %struct.Sequence*, %struct.Sequence** %seq114, align 8, !dbg !3315
  %tobool15 = icmp ne %struct.Sequence* %23, null, !dbg !3313
  br i1 %tobool15, label %if.then16, label %if.else45, !dbg !3316

if.then16:                                        ; preds = %if.end13
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3317
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 12, !dbg !3319
  store i32 0, i32* %endstill, align 4, !dbg !3320
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3321
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 11, !dbg !3322
  store i32 0, i32* %startstill, align 8, !dbg !3323
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3324
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 10, !dbg !3325
  store i32 0, i32* %endofs, align 4, !dbg !3326
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3327
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 9, !dbg !3328
  store i32 0, i32* %startofs, align 8, !dbg !3329
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3330
  %seq117 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 33, !dbg !3331
  %29 = load %struct.Sequence*, %struct.Sequence** %seq117, align 8, !dbg !3331
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 15, !dbg !3332
  %30 = load i32, i32* %startdisp, align 8, !dbg !3332
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3333
  %seq218 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 34, !dbg !3334
  %32 = load %struct.Sequence*, %struct.Sequence** %seq218, align 8, !dbg !3334
  %startdisp19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 15, !dbg !3335
  %33 = load i32, i32* %startdisp19, align 8, !dbg !3335
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3336
  %seq320 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 35, !dbg !3337
  %35 = load %struct.Sequence*, %struct.Sequence** %seq320, align 8, !dbg !3337
  %startdisp21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 15, !dbg !3338
  %36 = load i32, i32* %startdisp21, align 8, !dbg !3338
  %call = call i32 @max_iii(i32 %30, i32 %33, i32 %36), !dbg !3339
  %37 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3340
  %startdisp22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 15, !dbg !3341
  store i32 %call, i32* %startdisp22, align 8, !dbg !3342
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3343
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 8, !dbg !3344
  store i32 %call, i32* %start, align 4, !dbg !3345
  %39 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3346
  %seq123 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 33, !dbg !3347
  %40 = load %struct.Sequence*, %struct.Sequence** %seq123, align 8, !dbg !3347
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 16, !dbg !3348
  %41 = load i32, i32* %enddisp, align 4, !dbg !3348
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3349
  %seq224 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 34, !dbg !3350
  %43 = load %struct.Sequence*, %struct.Sequence** %seq224, align 8, !dbg !3350
  %enddisp25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 16, !dbg !3351
  %44 = load i32, i32* %enddisp25, align 4, !dbg !3351
  %45 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3352
  %seq326 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 35, !dbg !3353
  %46 = load %struct.Sequence*, %struct.Sequence** %seq326, align 8, !dbg !3353
  %enddisp27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 16, !dbg !3354
  %47 = load i32, i32* %enddisp27, align 4, !dbg !3354
  %call28 = call i32 @min_iii(i32 %41, i32 %44, i32 %47), !dbg !3355
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3356
  %enddisp29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 16, !dbg !3357
  store i32 %call28, i32* %enddisp29, align 4, !dbg !3358
  %49 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3359
  %enddisp30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 16, !dbg !3361
  %50 = load i32, i32* %enddisp30, align 4, !dbg !3361
  %51 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3362
  %startdisp31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 15, !dbg !3363
  %52 = load i32, i32* %startdisp31, align 8, !dbg !3363
  %cmp32 = icmp slt i32 %50, %52, !dbg !3364
  br i1 %cmp32, label %if.then33, label %if.else, !dbg !3365

if.then33:                                        ; preds = %if.then16
  %53 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3366
  %enddisp34 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 16, !dbg !3368
  %54 = load i32, i32* %enddisp34, align 4, !dbg !3368
  %55 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3369
  %start35 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %55, i32 0, i32 8, !dbg !3370
  store i32 %54, i32* %start35, align 4, !dbg !3371
  %56 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3372
  %startdisp36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 15, !dbg !3373
  %57 = load i32, i32* %startdisp36, align 8, !dbg !3373
  %58 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3374
  %enddisp37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %58, i32 0, i32 16, !dbg !3375
  store i32 %57, i32* %enddisp37, align 4, !dbg !3376
  %59 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3377
  %start38 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 8, !dbg !3378
  %60 = load i32, i32* %start38, align 4, !dbg !3378
  %61 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3379
  %startdisp39 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %61, i32 0, i32 15, !dbg !3380
  store i32 %60, i32* %startdisp39, align 8, !dbg !3381
  %62 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3382
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 5, !dbg !3383
  %63 = load i32, i32* %flag, align 8, !dbg !3384
  %or = or i32 %63, -2147483648, !dbg !3384
  store i32 %or, i32* %flag, align 8, !dbg !3384
  br label %if.end42, !dbg !3385

if.else:                                          ; preds = %if.then16
  %64 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3386
  %flag40 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 5, !dbg !3388
  %65 = load i32, i32* %flag40, align 8, !dbg !3389
  %and41 = and i32 %65, 2147483647, !dbg !3389
  store i32 %and41, i32* %flag40, align 8, !dbg !3389
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then33
  %66 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3390
  %enddisp43 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 16, !dbg !3391
  %67 = load i32, i32* %enddisp43, align 4, !dbg !3391
  %68 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3392
  %startdisp44 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %68, i32 0, i32 15, !dbg !3393
  %69 = load i32, i32* %startdisp44, align 8, !dbg !3393
  %sub = sub nsw i32 %67, %69, !dbg !3394
  %70 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3395
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 7, !dbg !3396
  store i32 %sub, i32* %len, align 8, !dbg !3397
  br label %if.end46, !dbg !3398

if.else45:                                        ; preds = %if.end13
  %71 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3399
  %72 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3401
  call void @BKE_sequence_calc_disp(%struct.Scene* %71, %struct.Sequence* %72), !dbg !3402
  br label %if.end46

if.end46:                                         ; preds = %if.else45, %if.end42
  br label %if.end80, !dbg !3403

if.else47:                                        ; preds = %while.end
  %73 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3404
  %type48 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %73, i32 0, i32 6, !dbg !3407
  %74 = load i32, i32* %type48, align 4, !dbg !3407
  %cmp49 = icmp eq i32 %74, 1, !dbg !3408
  br i1 %cmp49, label %if.then50, label %if.end79, !dbg !3409

if.then50:                                        ; preds = %if.else47
  %75 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3410
  %seqbase51 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %75, i32 0, i32 36, !dbg !3412
  %first52 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase51, i32 0, i32 0, !dbg !3413
  %76 = load i8*, i8** %first52, align 8, !dbg !3413
  %77 = bitcast i8* %76 to %struct.Sequence*, !dbg !3410
  store %struct.Sequence* %77, %struct.Sequence** %seqm, align 8, !dbg !3414
  %78 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3415
  %tobool53 = icmp ne %struct.Sequence* %78, null, !dbg !3415
  br i1 %tobool53, label %if.then54, label %if.end78, !dbg !3417

if.then54:                                        ; preds = %if.then50
  store i32 600000, i32* %min, align 4, !dbg !3418
  store i32 -600000, i32* %max, align 4, !dbg !3420
  br label %while.cond55, !dbg !3421

while.cond55:                                     ; preds = %if.end67, %if.then54
  %79 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3422
  %tobool56 = icmp ne %struct.Sequence* %79, null, !dbg !3421
  br i1 %tobool56, label %while.body57, label %while.end69, !dbg !3421

while.body57:                                     ; preds = %while.cond55
  %80 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3423
  %startdisp58 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %80, i32 0, i32 15, !dbg !3426
  %81 = load i32, i32* %startdisp58, align 8, !dbg !3426
  %82 = load i32, i32* %min, align 4, !dbg !3427
  %cmp59 = icmp slt i32 %81, %82, !dbg !3428
  br i1 %cmp59, label %if.then60, label %if.end62, !dbg !3429

if.then60:                                        ; preds = %while.body57
  %83 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3430
  %startdisp61 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %83, i32 0, i32 15, !dbg !3431
  %84 = load i32, i32* %startdisp61, align 8, !dbg !3431
  store i32 %84, i32* %min, align 4, !dbg !3432
  br label %if.end62, !dbg !3433

if.end62:                                         ; preds = %if.then60, %while.body57
  %85 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3434
  %enddisp63 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 16, !dbg !3436
  %86 = load i32, i32* %enddisp63, align 4, !dbg !3436
  %87 = load i32, i32* %max, align 4, !dbg !3437
  %cmp64 = icmp sgt i32 %86, %87, !dbg !3438
  br i1 %cmp64, label %if.then65, label %if.end67, !dbg !3439

if.then65:                                        ; preds = %if.end62
  %88 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3440
  %enddisp66 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %88, i32 0, i32 16, !dbg !3441
  %89 = load i32, i32* %enddisp66, align 4, !dbg !3441
  store i32 %89, i32* %max, align 4, !dbg !3442
  br label %if.end67, !dbg !3443

if.end67:                                         ; preds = %if.then65, %if.end62
  %90 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !3444
  %next68 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %90, i32 0, i32 0, !dbg !3445
  %91 = load %struct.Sequence*, %struct.Sequence** %next68, align 8, !dbg !3445
  store %struct.Sequence* %91, %struct.Sequence** %seqm, align 8, !dbg !3446
  br label %while.cond55, !dbg !3421, !llvm.loop !3447

while.end69:                                      ; preds = %while.cond55
  %92 = load i32, i32* %min, align 4, !dbg !3449
  %93 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3450
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %93, i32 0, i32 44, !dbg !3451
  %94 = load i32, i32* %anim_startofs, align 8, !dbg !3451
  %add = add nsw i32 %92, %94, !dbg !3452
  %95 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3453
  %start70 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %95, i32 0, i32 8, !dbg !3454
  store i32 %add, i32* %start70, align 4, !dbg !3455
  %96 = load i32, i32* %max, align 4, !dbg !3456
  %97 = load i32, i32* %min, align 4, !dbg !3457
  %sub71 = sub nsw i32 %96, %97, !dbg !3458
  %98 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3459
  %len72 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %98, i32 0, i32 7, !dbg !3460
  store i32 %sub71, i32* %len72, align 8, !dbg !3461
  %99 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3462
  %anim_startofs73 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %99, i32 0, i32 44, !dbg !3463
  %100 = load i32, i32* %anim_startofs73, align 8, !dbg !3463
  %101 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3464
  %len74 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %101, i32 0, i32 7, !dbg !3465
  %102 = load i32, i32* %len74, align 8, !dbg !3466
  %sub75 = sub nsw i32 %102, %100, !dbg !3466
  store i32 %sub75, i32* %len74, align 8, !dbg !3466
  %103 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3467
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %103, i32 0, i32 45, !dbg !3468
  %104 = load i32, i32* %anim_endofs, align 4, !dbg !3468
  %105 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3469
  %len76 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %105, i32 0, i32 7, !dbg !3470
  %106 = load i32, i32* %len76, align 8, !dbg !3471
  %sub77 = sub nsw i32 %106, %104, !dbg !3471
  store i32 %sub77, i32* %len76, align 8, !dbg !3471
  br label %if.end78, !dbg !3472

if.end78:                                         ; preds = %while.end69, %if.then50
  %107 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3473
  %108 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3474
  call void @seq_update_sound_bounds_recursive(%struct.Scene* %107, %struct.Sequence* %108), !dbg !3475
  br label %if.end79, !dbg !3476

if.end79:                                         ; preds = %if.end78, %if.else47
  %109 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3477
  %110 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3478
  call void @BKE_sequence_calc_disp(%struct.Scene* %109, %struct.Sequence* %110), !dbg !3479
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.end46
  ret void, !dbg !3480
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_iii(i32 %a, i32 %b, i32 %c) #0 !dbg !3481 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3485, metadata !DIExpression()), !dbg !3486
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3487, metadata !DIExpression()), !dbg !3488
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !3489, metadata !DIExpression()), !dbg !3490
  %0 = load i32, i32* %a.addr, align 4, !dbg !3491
  %1 = load i32, i32* %b.addr, align 4, !dbg !3492
  %call = call i32 @max_ii(i32 %0, i32 %1), !dbg !3493
  %2 = load i32, i32* %c.addr, align 4, !dbg !3494
  %call1 = call i32 @max_ii(i32 %call, i32 %2), !dbg !3495
  ret i32 %call1, !dbg !3496
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @min_iii(i32 %a, i32 %b, i32 %c) #0 !dbg !3497 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3498, metadata !DIExpression()), !dbg !3499
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3500, metadata !DIExpression()), !dbg !3501
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !3502, metadata !DIExpression()), !dbg !3503
  %0 = load i32, i32* %a.addr, align 4, !dbg !3504
  %1 = load i32, i32* %b.addr, align 4, !dbg !3505
  %call = call i32 @min_ii(i32 %0, i32 %1), !dbg !3506
  %2 = load i32, i32* %c.addr, align 4, !dbg !3507
  %call1 = call i32 @min_ii(i32 %call, i32 %2), !dbg !3508
  ret i32 %call1, !dbg !3509
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_reload_new_file(%struct.Scene* %scene, %struct.Sequence* %seq, i8 zeroext %lock_range) #0 !dbg !3510 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %lock_range.addr = alloca i8, align 1
  %str = alloca [1024 x i8], align 16
  %prev_startdisp = alloca i32, align 4
  %prev_enddisp = alloca i32, align 4
  %olen = alloca i64, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3511, metadata !DIExpression()), !dbg !3512
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3513, metadata !DIExpression()), !dbg !3514
  store i8 %lock_range, i8* %lock_range.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %lock_range.addr, metadata !3515, metadata !DIExpression()), !dbg !3516
  call void @llvm.dbg.declare(metadata [1024 x i8]* %str, metadata !3517, metadata !DIExpression()), !dbg !3518
  call void @llvm.dbg.declare(metadata i32* %prev_startdisp, metadata !3519, metadata !DIExpression()), !dbg !3520
  store i32 0, i32* %prev_startdisp, align 4, !dbg !3520
  call void @llvm.dbg.declare(metadata i32* %prev_enddisp, metadata !3521, metadata !DIExpression()), !dbg !3522
  store i32 0, i32* %prev_enddisp, align 4, !dbg !3522
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !3523
  %1 = load i32, i32* %type, align 4, !dbg !3523
  %cmp = icmp eq i32 %1, 3, !dbg !3523
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !3523

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !3523
  %3 = load i32, i32* %type1, align 4, !dbg !3523
  %cmp2 = icmp eq i32 %3, 0, !dbg !3523
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !3523

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !3523
  %5 = load i32, i32* %type4, align 4, !dbg !3523
  %cmp5 = icmp eq i32 %5, 4, !dbg !3523
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !3523

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !3523
  %7 = load i32, i32* %type7, align 4, !dbg !3523
  %cmp8 = icmp eq i32 %7, 2, !dbg !3523
  br i1 %cmp8, label %lor.end, label %lor.lhs.false9, !dbg !3523

lor.lhs.false9:                                   ; preds = %lor.lhs.false6
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 6, !dbg !3523
  %9 = load i32, i32* %type10, align 4, !dbg !3523
  %cmp11 = icmp eq i32 %9, 1, !dbg !3523
  br i1 %cmp11, label %lor.end, label %lor.lhs.false12, !dbg !3523

lor.lhs.false12:                                  ; preds = %lor.lhs.false9
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !3523
  %11 = load i32, i32* %type13, align 4, !dbg !3523
  %cmp14 = icmp eq i32 %11, 6, !dbg !3523
  br i1 %cmp14, label %lor.end, label %lor.rhs, !dbg !3523

lor.rhs:                                          ; preds = %lor.lhs.false12
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3523
  %type15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 6, !dbg !3523
  %13 = load i32, i32* %type15, align 4, !dbg !3523
  %cmp16 = icmp eq i32 %13, 7, !dbg !3523
  br label %lor.end, !dbg !3523

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false12, %lor.lhs.false9, %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %entry
  %14 = phi i1 [ true, %lor.lhs.false12 ], [ true, %lor.lhs.false9 ], [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp16, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32, !dbg !3523
  %cmp17 = icmp eq i32 %lor.ext, 0, !dbg !3525
  br i1 %cmp17, label %if.then, label %if.end, !dbg !3526

if.then:                                          ; preds = %lor.end
  br label %return, !dbg !3527

if.end:                                           ; preds = %lor.end
  %15 = load i8, i8* %lock_range.addr, align 1, !dbg !3529
  %tobool = icmp ne i8 %15, 0, !dbg !3529
  br i1 %tobool, label %if.then18, label %if.end19, !dbg !3531

if.then18:                                        ; preds = %if.end
  %16 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3532
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3534
  call void @BKE_sequence_calc_disp(%struct.Scene* %16, %struct.Sequence* %17), !dbg !3535
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3536
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 15, !dbg !3537
  %19 = load i32, i32* %startdisp, align 8, !dbg !3537
  store i32 %19, i32* %prev_startdisp, align 4, !dbg !3538
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3539
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 16, !dbg !3540
  %21 = load i32, i32* %enddisp, align 4, !dbg !3540
  store i32 %21, i32* %prev_enddisp, align 4, !dbg !3541
  br label %if.end19, !dbg !3542

if.end19:                                         ; preds = %if.then18, %if.end
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3543
  %type20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 6, !dbg !3544
  %23 = load i32, i32* %type20, align 4, !dbg !3544
  switch i32 %23, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb30
    i32 6, label %sw.bb80
    i32 7, label %sw.bb100
    i32 4, label %sw.bb120
    i32 2, label %sw.bb121
  ], !dbg !3545

sw.bb:                                            ; preds = %if.end19
  call void @llvm.dbg.declare(metadata i64* %olen, metadata !3546, metadata !DIExpression()), !dbg !3551
  %24 = load i64 (i8*)*, i64 (i8*)** @MEM_allocN_len, align 8, !dbg !3552
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3553
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 24, !dbg !3554
  %26 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !3554
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %26, i32 0, i32 6, !dbg !3555
  %27 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !3555
  %28 = bitcast %struct.StripElem* %27 to i8*, !dbg !3553
  %call = call i64 %24(i8* %28), !dbg !3552
  %div = udiv i64 %call, 264, !dbg !3556
  store i64 %div, i64* %olen, align 8, !dbg !3551
  %29 = load i64, i64* %olen, align 8, !dbg !3557
  %conv = trunc i64 %29 to i32, !dbg !3557
  %30 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3558
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 7, !dbg !3559
  store i32 %conv, i32* %len, align 8, !dbg !3560
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3561
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 44, !dbg !3562
  %32 = load i32, i32* %anim_startofs, align 8, !dbg !3562
  %33 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3563
  %len21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 7, !dbg !3564
  %34 = load i32, i32* %len21, align 8, !dbg !3565
  %sub = sub nsw i32 %34, %32, !dbg !3565
  store i32 %sub, i32* %len21, align 8, !dbg !3565
  %35 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3566
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 45, !dbg !3567
  %36 = load i32, i32* %anim_endofs, align 4, !dbg !3567
  %37 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3568
  %len22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 7, !dbg !3569
  %38 = load i32, i32* %len22, align 8, !dbg !3570
  %sub23 = sub nsw i32 %38, %36, !dbg !3570
  store i32 %sub23, i32* %len22, align 8, !dbg !3570
  %39 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3571
  %len24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 7, !dbg !3573
  %40 = load i32, i32* %len24, align 8, !dbg !3573
  %cmp25 = icmp slt i32 %40, 0, !dbg !3574
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !3575

if.then27:                                        ; preds = %sw.bb
  %41 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3576
  %len28 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 7, !dbg !3578
  store i32 0, i32* %len28, align 8, !dbg !3579
  br label %if.end29, !dbg !3580

if.end29:                                         ; preds = %if.then27, %sw.bb
  br label %sw.epilog, !dbg !3581

sw.bb30:                                          ; preds = %if.end19
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %str, i64 0, i64 0, !dbg !3582
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3583
  %strip31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 24, !dbg !3584
  %43 = load %struct.Strip*, %struct.Strip** %strip31, align 8, !dbg !3584
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %43, i32 0, i32 7, !dbg !3585
  %arraydecay32 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !3583
  %44 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3586
  %strip33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 24, !dbg !3587
  %45 = load %struct.Strip*, %struct.Strip** %strip33, align 8, !dbg !3587
  %stripdata34 = getelementptr inbounds %struct.Strip, %struct.Strip* %45, i32 0, i32 6, !dbg !3588
  %46 = load %struct.StripElem*, %struct.StripElem** %stripdata34, align 8, !dbg !3588
  %name = getelementptr inbounds %struct.StripElem, %struct.StripElem* %46, i32 0, i32 0, !dbg !3589
  %arraydecay35 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i64 0, i64 0, !dbg !3586
  call void @BLI_join_dirfile(i8* %arraydecay, i64 1024, i8* %arraydecay32, i8* %arraydecay35), !dbg !3590
  %arraydecay36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %str, i64 0, i64 0, !dbg !3591
  %47 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !3592
  %name37 = getelementptr inbounds %struct.Main, %struct.Main* %47, i32 0, i32 2, !dbg !3593
  %arraydecay38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name37, i64 0, i64 0, !dbg !3594
  %call39 = call zeroext i8 @BLI_path_abs(i8* %arraydecay36, i8* %arraydecay38), !dbg !3595
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3596
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 30, !dbg !3598
  %49 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !3598
  %tobool40 = icmp ne %struct.anim* %49, null, !dbg !3596
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !3599

if.then41:                                        ; preds = %sw.bb30
  %50 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3600
  %anim42 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %50, i32 0, i32 30, !dbg !3601
  %51 = load %struct.anim*, %struct.anim** %anim42, align 8, !dbg !3601
  call void @IMB_free_anim(%struct.anim* %51), !dbg !3602
  br label %if.end43, !dbg !3602

if.end43:                                         ; preds = %if.then41, %sw.bb30
  %arraydecay44 = getelementptr inbounds [1024 x i8], [1024 x i8]* %str, i64 0, i64 0, !dbg !3603
  %52 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3604
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %52, i32 0, i32 5, !dbg !3605
  %53 = load i32, i32* %flag, align 8, !dbg !3605
  %and = and i32 %53, 16, !dbg !3606
  %tobool45 = icmp ne i32 %and, 0, !dbg !3607
  %54 = zext i1 %tobool45 to i64, !dbg !3607
  %cond = select i1 %tobool45, i32 512, i32 0, !dbg !3607
  %or = or i32 1, %cond, !dbg !3608
  %55 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3609
  %streamindex = getelementptr inbounds %struct.Sequence, %struct.Sequence* %55, i32 0, i32 21, !dbg !3610
  %56 = load i16, i16* %streamindex, align 2, !dbg !3610
  %conv46 = sext i16 %56 to i32, !dbg !3609
  %57 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3611
  %strip47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %57, i32 0, i32 24, !dbg !3612
  %58 = load %struct.Strip*, %struct.Strip** %strip47, align 8, !dbg !3612
  %colorspace_settings = getelementptr inbounds %struct.Strip, %struct.Strip* %58, i32 0, i32 12, !dbg !3613
  %name48 = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %colorspace_settings, i32 0, i32 0, !dbg !3614
  %arraydecay49 = getelementptr inbounds [64 x i8], [64 x i8]* %name48, i64 0, i64 0, !dbg !3611
  %call50 = call %struct.anim* @openanim(i8* %arraydecay44, i32 %or, i32 %conv46, i8* %arraydecay49), !dbg !3615
  %59 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3616
  %anim51 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 30, !dbg !3617
  store %struct.anim* %call50, %struct.anim** %anim51, align 8, !dbg !3618
  %60 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3619
  %anim52 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %60, i32 0, i32 30, !dbg !3621
  %61 = load %struct.anim*, %struct.anim** %anim52, align 8, !dbg !3621
  %tobool53 = icmp ne %struct.anim* %61, null, !dbg !3619
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !3622

if.then54:                                        ; preds = %if.end43
  br label %return, !dbg !3623

if.end55:                                         ; preds = %if.end43
  %62 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3625
  %anim56 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 30, !dbg !3626
  %63 = load %struct.anim*, %struct.anim** %anim56, align 8, !dbg !3626
  %64 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3627
  %strip57 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 24, !dbg !3628
  %65 = load %struct.Strip*, %struct.Strip** %strip57, align 8, !dbg !3628
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %65, i32 0, i32 8, !dbg !3629
  %66 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !3629
  %tobool58 = icmp ne %struct.StripProxy* %66, null, !dbg !3627
  br i1 %tobool58, label %cond.true, label %cond.false, !dbg !3627

cond.true:                                        ; preds = %if.end55
  %67 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3630
  %strip59 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 24, !dbg !3631
  %68 = load %struct.Strip*, %struct.Strip** %strip59, align 8, !dbg !3631
  %proxy60 = getelementptr inbounds %struct.Strip, %struct.Strip* %68, i32 0, i32 8, !dbg !3632
  %69 = load %struct.StripProxy*, %struct.StripProxy** %proxy60, align 8, !dbg !3632
  %tc = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %69, i32 0, i32 3, !dbg !3633
  %70 = load i16, i16* %tc, align 8, !dbg !3633
  %conv61 = sext i16 %70 to i32, !dbg !3630
  br label %cond.end, !dbg !3627

cond.false:                                       ; preds = %if.end55
  br label %cond.end, !dbg !3627

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond62 = phi i32 [ %conv61, %cond.true ], [ 1, %cond.false ], !dbg !3627
  %call63 = call i32 @IMB_anim_get_duration(%struct.anim* %63, i32 %cond62), !dbg !3634
  %71 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3635
  %len64 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %71, i32 0, i32 7, !dbg !3636
  store i32 %call63, i32* %len64, align 8, !dbg !3637
  %72 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3638
  %anim65 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %72, i32 0, i32 30, !dbg !3639
  %73 = load %struct.anim*, %struct.anim** %anim65, align 8, !dbg !3639
  %call66 = call i32 @IMB_anim_get_preseek(%struct.anim* %73), !dbg !3640
  %conv67 = trunc i32 %call66 to i16, !dbg !3640
  %74 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3641
  %anim_preseek = getelementptr inbounds %struct.Sequence, %struct.Sequence* %74, i32 0, i32 20, !dbg !3642
  store i16 %conv67, i16* %anim_preseek, align 4, !dbg !3643
  %75 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3644
  %anim_startofs68 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %75, i32 0, i32 44, !dbg !3645
  %76 = load i32, i32* %anim_startofs68, align 8, !dbg !3645
  %77 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3646
  %len69 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %77, i32 0, i32 7, !dbg !3647
  %78 = load i32, i32* %len69, align 8, !dbg !3648
  %sub70 = sub nsw i32 %78, %76, !dbg !3648
  store i32 %sub70, i32* %len69, align 8, !dbg !3648
  %79 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3649
  %anim_endofs71 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %79, i32 0, i32 45, !dbg !3650
  %80 = load i32, i32* %anim_endofs71, align 4, !dbg !3650
  %81 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3651
  %len72 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %81, i32 0, i32 7, !dbg !3652
  %82 = load i32, i32* %len72, align 8, !dbg !3653
  %sub73 = sub nsw i32 %82, %80, !dbg !3653
  store i32 %sub73, i32* %len72, align 8, !dbg !3653
  %83 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3654
  %len74 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %83, i32 0, i32 7, !dbg !3656
  %84 = load i32, i32* %len74, align 8, !dbg !3656
  %cmp75 = icmp slt i32 %84, 0, !dbg !3657
  br i1 %cmp75, label %if.then77, label %if.end79, !dbg !3658

if.then77:                                        ; preds = %cond.end
  %85 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3659
  %len78 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 7, !dbg !3661
  store i32 0, i32* %len78, align 8, !dbg !3662
  br label %if.end79, !dbg !3663

if.end79:                                         ; preds = %if.then77, %cond.end
  br label %sw.epilog, !dbg !3664

sw.bb80:                                          ; preds = %if.end19
  %86 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3665
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %86, i32 0, i32 28, !dbg !3667
  %87 = load %struct.MovieClip*, %struct.MovieClip** %clip, align 8, !dbg !3667
  %cmp81 = icmp eq %struct.MovieClip* %87, null, !dbg !3668
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !3669

if.then83:                                        ; preds = %sw.bb80
  br label %return, !dbg !3670

if.end84:                                         ; preds = %sw.bb80
  %88 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3671
  %clip85 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %88, i32 0, i32 28, !dbg !3672
  %89 = load %struct.MovieClip*, %struct.MovieClip** %clip85, align 8, !dbg !3672
  %call86 = call i32 @BKE_movieclip_get_duration(%struct.MovieClip* %89), !dbg !3673
  %90 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3674
  %len87 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %90, i32 0, i32 7, !dbg !3675
  store i32 %call86, i32* %len87, align 8, !dbg !3676
  %91 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3677
  %anim_startofs88 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %91, i32 0, i32 44, !dbg !3678
  %92 = load i32, i32* %anim_startofs88, align 8, !dbg !3678
  %93 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3679
  %len89 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %93, i32 0, i32 7, !dbg !3680
  %94 = load i32, i32* %len89, align 8, !dbg !3681
  %sub90 = sub nsw i32 %94, %92, !dbg !3681
  store i32 %sub90, i32* %len89, align 8, !dbg !3681
  %95 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3682
  %anim_endofs91 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %95, i32 0, i32 45, !dbg !3683
  %96 = load i32, i32* %anim_endofs91, align 4, !dbg !3683
  %97 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3684
  %len92 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %97, i32 0, i32 7, !dbg !3685
  %98 = load i32, i32* %len92, align 8, !dbg !3686
  %sub93 = sub nsw i32 %98, %96, !dbg !3686
  store i32 %sub93, i32* %len92, align 8, !dbg !3686
  %99 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3687
  %len94 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %99, i32 0, i32 7, !dbg !3689
  %100 = load i32, i32* %len94, align 8, !dbg !3689
  %cmp95 = icmp slt i32 %100, 0, !dbg !3690
  br i1 %cmp95, label %if.then97, label %if.end99, !dbg !3691

if.then97:                                        ; preds = %if.end84
  %101 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3692
  %len98 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %101, i32 0, i32 7, !dbg !3694
  store i32 0, i32* %len98, align 8, !dbg !3695
  br label %if.end99, !dbg !3696

if.end99:                                         ; preds = %if.then97, %if.end84
  br label %sw.epilog, !dbg !3697

sw.bb100:                                         ; preds = %if.end19
  %102 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3698
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %102, i32 0, i32 29, !dbg !3700
  %103 = load %struct.Mask*, %struct.Mask** %mask, align 8, !dbg !3700
  %cmp101 = icmp eq %struct.Mask* %103, null, !dbg !3701
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !3702

if.then103:                                       ; preds = %sw.bb100
  br label %return, !dbg !3703

if.end104:                                        ; preds = %sw.bb100
  %104 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3704
  %mask105 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %104, i32 0, i32 29, !dbg !3705
  %105 = load %struct.Mask*, %struct.Mask** %mask105, align 8, !dbg !3705
  %call106 = call i32 @BKE_mask_get_duration(%struct.Mask* %105), !dbg !3706
  %106 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3707
  %len107 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %106, i32 0, i32 7, !dbg !3708
  store i32 %call106, i32* %len107, align 8, !dbg !3709
  %107 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3710
  %anim_startofs108 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %107, i32 0, i32 44, !dbg !3711
  %108 = load i32, i32* %anim_startofs108, align 8, !dbg !3711
  %109 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3712
  %len109 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %109, i32 0, i32 7, !dbg !3713
  %110 = load i32, i32* %len109, align 8, !dbg !3714
  %sub110 = sub nsw i32 %110, %108, !dbg !3714
  store i32 %sub110, i32* %len109, align 8, !dbg !3714
  %111 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3715
  %anim_endofs111 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %111, i32 0, i32 45, !dbg !3716
  %112 = load i32, i32* %anim_endofs111, align 4, !dbg !3716
  %113 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3717
  %len112 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %113, i32 0, i32 7, !dbg !3718
  %114 = load i32, i32* %len112, align 8, !dbg !3719
  %sub113 = sub nsw i32 %114, %112, !dbg !3719
  store i32 %sub113, i32* %len112, align 8, !dbg !3719
  %115 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3720
  %len114 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %115, i32 0, i32 7, !dbg !3722
  %116 = load i32, i32* %len114, align 8, !dbg !3722
  %cmp115 = icmp slt i32 %116, 0, !dbg !3723
  br i1 %cmp115, label %if.then117, label %if.end119, !dbg !3724

if.then117:                                       ; preds = %if.end104
  %117 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3725
  %len118 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %117, i32 0, i32 7, !dbg !3727
  store i32 0, i32* %len118, align 8, !dbg !3728
  br label %if.end119, !dbg !3729

if.end119:                                        ; preds = %if.then117, %if.end104
  br label %sw.epilog, !dbg !3730

sw.bb120:                                         ; preds = %if.end19
  br label %return, !dbg !3731

sw.bb121:                                         ; preds = %if.end19
  %118 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3732
  %scene122 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 26, !dbg !3734
  %119 = load %struct.Scene*, %struct.Scene** %scene122, align 8, !dbg !3734
  %tobool123 = icmp ne %struct.Scene* %119, null, !dbg !3735
  br i1 %tobool123, label %cond.true124, label %cond.false129, !dbg !3735

cond.true124:                                     ; preds = %sw.bb121
  %120 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3736
  %scene125 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %120, i32 0, i32 26, !dbg !3737
  %121 = load %struct.Scene*, %struct.Scene** %scene125, align 8, !dbg !3737
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %121, i32 0, i32 22, !dbg !3738
  %efra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 7, !dbg !3739
  %122 = load i32, i32* %efra, align 8, !dbg !3739
  %123 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3740
  %scene126 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %123, i32 0, i32 26, !dbg !3741
  %124 = load %struct.Scene*, %struct.Scene** %scene126, align 8, !dbg !3741
  %r127 = getelementptr inbounds %struct.Scene, %struct.Scene* %124, i32 0, i32 22, !dbg !3742
  %sfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r127, i32 0, i32 6, !dbg !3743
  %125 = load i32, i32* %sfra, align 4, !dbg !3743
  %sub128 = sub nsw i32 %122, %125, !dbg !3744
  %add = add nsw i32 %sub128, 1, !dbg !3745
  br label %cond.end130, !dbg !3735

cond.false129:                                    ; preds = %sw.bb121
  br label %cond.end130, !dbg !3735

cond.end130:                                      ; preds = %cond.false129, %cond.true124
  %cond131 = phi i32 [ %add, %cond.true124 ], [ 0, %cond.false129 ], !dbg !3735
  %126 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3746
  %len132 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %126, i32 0, i32 7, !dbg !3747
  store i32 %cond131, i32* %len132, align 8, !dbg !3748
  %127 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3749
  %anim_startofs133 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %127, i32 0, i32 44, !dbg !3750
  %128 = load i32, i32* %anim_startofs133, align 8, !dbg !3750
  %129 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3751
  %len134 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %129, i32 0, i32 7, !dbg !3752
  %130 = load i32, i32* %len134, align 8, !dbg !3753
  %sub135 = sub nsw i32 %130, %128, !dbg !3753
  store i32 %sub135, i32* %len134, align 8, !dbg !3753
  %131 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3754
  %anim_endofs136 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %131, i32 0, i32 45, !dbg !3755
  %132 = load i32, i32* %anim_endofs136, align 4, !dbg !3755
  %133 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3756
  %len137 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %133, i32 0, i32 7, !dbg !3757
  %134 = load i32, i32* %len137, align 8, !dbg !3758
  %sub138 = sub nsw i32 %134, %132, !dbg !3758
  store i32 %sub138, i32* %len137, align 8, !dbg !3758
  %135 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3759
  %len139 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %135, i32 0, i32 7, !dbg !3761
  %136 = load i32, i32* %len139, align 8, !dbg !3761
  %cmp140 = icmp slt i32 %136, 0, !dbg !3762
  br i1 %cmp140, label %if.then142, label %if.end144, !dbg !3763

if.then142:                                       ; preds = %cond.end130
  %137 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3764
  %len143 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %137, i32 0, i32 7, !dbg !3766
  store i32 0, i32* %len143, align 8, !dbg !3767
  br label %if.end144, !dbg !3768

if.end144:                                        ; preds = %if.then142, %cond.end130
  br label %sw.epilog, !dbg !3769

sw.epilog:                                        ; preds = %if.end19, %if.end144, %if.end119, %if.end99, %if.end79, %if.end29
  %138 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3770
  call void @free_proxy_seq(%struct.Sequence* %138), !dbg !3771
  %139 = load i8, i8* %lock_range.addr, align 1, !dbg !3772
  %tobool145 = icmp ne i8 %139, 0, !dbg !3772
  br i1 %tobool145, label %if.then146, label %if.end147, !dbg !3774

if.then146:                                       ; preds = %sw.epilog
  %140 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3775
  %141 = load i32, i32* %prev_startdisp, align 4, !dbg !3777
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %140, i32 %141), !dbg !3778
  %142 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3779
  %143 = load i32, i32* %prev_enddisp, align 4, !dbg !3780
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %142, i32 %143), !dbg !3781
  %144 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3782
  call void @BKE_sequence_single_fix(%struct.Sequence* %144), !dbg !3783
  br label %if.end147, !dbg !3784

if.end147:                                        ; preds = %if.then146, %sw.epilog
  %145 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3785
  %146 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3786
  call void @BKE_sequence_calc(%struct.Scene* %145, %struct.Sequence* %146), !dbg !3787
  br label %return, !dbg !3788

return:                                           ; preds = %if.end147, %sw.bb120, %if.then103, %if.then83, %if.then54, %if.then
  ret void, !dbg !3788
}

declare dso_local void @BLI_join_dirfile(i8*, i64, i8*, i8*) #2

declare dso_local zeroext i8 @BLI_path_abs(i8*, i8*) #2

declare dso_local void @IMB_free_anim(%struct.anim*) #2

declare dso_local %struct.anim* @openanim(i8*, i32, i32, i8*) #2

declare dso_local i32 @IMB_anim_get_duration(%struct.anim*, i32) #2

declare dso_local i32 @IMB_anim_get_preseek(%struct.anim*) #2

declare dso_local i32 @BKE_movieclip_get_duration(%struct.MovieClip*) #2

declare dso_local i32 @BKE_mask_get_duration(%struct.Mask*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_proxy_seq(%struct.Sequence* %seq) #0 !dbg !3789 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3790, metadata !DIExpression()), !dbg !3791
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3792
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !3794
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !3794
  %tobool = icmp ne %struct.Strip* %1, null, !dbg !3792
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3795

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3796
  %strip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !3797
  %3 = load %struct.Strip*, %struct.Strip** %strip1, align 8, !dbg !3797
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 8, !dbg !3798
  %4 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !3798
  %tobool2 = icmp ne %struct.StripProxy* %4, null, !dbg !3796
  br i1 %tobool2, label %land.lhs.true3, label %if.end, !dbg !3799

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3800
  %strip4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 24, !dbg !3801
  %6 = load %struct.Strip*, %struct.Strip** %strip4, align 8, !dbg !3801
  %proxy5 = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 8, !dbg !3802
  %7 = load %struct.StripProxy*, %struct.StripProxy** %proxy5, align 8, !dbg !3802
  %anim = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %7, i32 0, i32 2, !dbg !3803
  %8 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !3803
  %tobool6 = icmp ne %struct.anim* %8, null, !dbg !3800
  br i1 %tobool6, label %if.then, label %if.end, !dbg !3804

if.then:                                          ; preds = %land.lhs.true3
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3805
  %strip7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 24, !dbg !3807
  %10 = load %struct.Strip*, %struct.Strip** %strip7, align 8, !dbg !3807
  %proxy8 = getelementptr inbounds %struct.Strip, %struct.Strip* %10, i32 0, i32 8, !dbg !3808
  %11 = load %struct.StripProxy*, %struct.StripProxy** %proxy8, align 8, !dbg !3808
  %anim9 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %11, i32 0, i32 2, !dbg !3809
  %12 = load %struct.anim*, %struct.anim** %anim9, align 8, !dbg !3809
  call void @IMB_free_anim(%struct.anim* %12), !dbg !3810
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3811
  %strip10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 24, !dbg !3812
  %14 = load %struct.Strip*, %struct.Strip** %strip10, align 8, !dbg !3812
  %proxy11 = getelementptr inbounds %struct.Strip, %struct.Strip* %14, i32 0, i32 8, !dbg !3813
  %15 = load %struct.StripProxy*, %struct.StripProxy** %proxy11, align 8, !dbg !3813
  %anim12 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %15, i32 0, i32 2, !dbg !3814
  store %struct.anim* null, %struct.anim** %anim12, align 8, !dbg !3815
  br label %if.end, !dbg !3816

if.end:                                           ; preds = %if.then, %land.lhs.true3, %land.lhs.true, %entry
  ret void, !dbg !3817
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_tx_set_final_left(%struct.Sequence* %seq, i32 %val) #0 !dbg !3818 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %val.addr = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3821, metadata !DIExpression()), !dbg !3822
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !3823, metadata !DIExpression()), !dbg !3824
  %0 = load i32, i32* %val.addr, align 4, !dbg !3825
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3827
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 8, !dbg !3828
  %2 = load i32, i32* %start, align 4, !dbg !3828
  %cmp = icmp slt i32 %0, %2, !dbg !3829
  br i1 %cmp, label %if.then, label %if.else, !dbg !3830

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %val.addr, align 4, !dbg !3831
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3833
  %start1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 8, !dbg !3834
  %5 = load i32, i32* %start1, align 4, !dbg !3834
  %sub = sub nsw i32 %3, %5, !dbg !3835
  %call = call i32 @abs(i32 %sub) #8, !dbg !3836
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3837
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 11, !dbg !3838
  store i32 %call, i32* %startstill, align 8, !dbg !3839
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3840
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 9, !dbg !3841
  store i32 0, i32* %startofs, align 8, !dbg !3842
  br label %if.end, !dbg !3843

if.else:                                          ; preds = %entry
  %8 = load i32, i32* %val.addr, align 4, !dbg !3844
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3846
  %start2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 8, !dbg !3847
  %10 = load i32, i32* %start2, align 4, !dbg !3847
  %sub3 = sub nsw i32 %8, %10, !dbg !3848
  %call4 = call i32 @abs(i32 %sub3) #8, !dbg !3849
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3850
  %startofs5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 9, !dbg !3851
  store i32 %call4, i32* %startofs5, align 8, !dbg !3852
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3853
  %startstill6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 11, !dbg !3854
  store i32 0, i32* %startstill6, align 8, !dbg !3855
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3856
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_tx_set_final_right(%struct.Sequence* %seq, i32 %val) #0 !dbg !3857 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %val.addr = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3858, metadata !DIExpression()), !dbg !3859
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !3860, metadata !DIExpression()), !dbg !3861
  %0 = load i32, i32* %val.addr, align 4, !dbg !3862
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3864
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 8, !dbg !3865
  %2 = load i32, i32* %start, align 4, !dbg !3865
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3866
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 7, !dbg !3867
  %4 = load i32, i32* %len, align 8, !dbg !3867
  %add = add nsw i32 %2, %4, !dbg !3868
  %cmp = icmp sgt i32 %0, %add, !dbg !3869
  br i1 %cmp, label %if.then, label %if.else, !dbg !3870

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %val.addr, align 4, !dbg !3871
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3873
  %start1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 8, !dbg !3874
  %7 = load i32, i32* %start1, align 4, !dbg !3874
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3875
  %len2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 7, !dbg !3876
  %9 = load i32, i32* %len2, align 8, !dbg !3876
  %add3 = add nsw i32 %7, %9, !dbg !3877
  %sub = sub nsw i32 %5, %add3, !dbg !3878
  %call = call i32 @abs(i32 %sub) #8, !dbg !3879
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3880
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 12, !dbg !3881
  store i32 %call, i32* %endstill, align 4, !dbg !3882
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3883
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 10, !dbg !3884
  store i32 0, i32* %endofs, align 4, !dbg !3885
  br label %if.end, !dbg !3886

if.else:                                          ; preds = %entry
  %12 = load i32, i32* %val.addr, align 4, !dbg !3887
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3889
  %start4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 8, !dbg !3890
  %14 = load i32, i32* %start4, align 4, !dbg !3890
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3891
  %len5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 7, !dbg !3892
  %16 = load i32, i32* %len5, align 8, !dbg !3892
  %add6 = add nsw i32 %14, %16, !dbg !3893
  %sub7 = sub nsw i32 %12, %add6, !dbg !3894
  %call8 = call i32 @abs(i32 %sub7) #8, !dbg !3895
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3896
  %endofs9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 10, !dbg !3897
  store i32 %call8, i32* %endofs9, align 4, !dbg !3898
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3899
  %endstill10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 12, !dbg !3900
  store i32 0, i32* %endstill10, align 4, !dbg !3901
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3902
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_single_fix(%struct.Sequence* %seq) #0 !dbg !3903 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %left = alloca i32, align 4
  %start = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !3904, metadata !DIExpression()), !dbg !3905
  call void @llvm.dbg.declare(metadata i32* %left, metadata !3906, metadata !DIExpression()), !dbg !3907
  call void @llvm.dbg.declare(metadata i32* %start, metadata !3908, metadata !DIExpression()), !dbg !3909
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3910, metadata !DIExpression()), !dbg !3911
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3912
  %call = call zeroext i8 @BKE_sequence_single_check(%struct.Sequence* %0), !dbg !3914
  %tobool = icmp ne i8 %call, 0, !dbg !3914
  br i1 %tobool, label %if.end, label %if.then, !dbg !3915

if.then:                                          ; preds = %entry
  br label %if.end9, !dbg !3916

if.end:                                           ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3917
  %call1 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %1, i8 zeroext 0), !dbg !3918
  store i32 %call1, i32* %left, align 4, !dbg !3919
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3920
  %start2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 8, !dbg !3921
  %3 = load i32, i32* %start2, align 4, !dbg !3921
  store i32 %3, i32* %start, align 4, !dbg !3922
  %4 = load i32, i32* %start, align 4, !dbg !3923
  %5 = load i32, i32* %left, align 4, !dbg !3925
  %cmp = icmp ne i32 %4, %5, !dbg !3926
  br i1 %cmp, label %if.then3, label %if.end9, !dbg !3927

if.then3:                                         ; preds = %if.end
  %6 = load i32, i32* %left, align 4, !dbg !3928
  %7 = load i32, i32* %start, align 4, !dbg !3930
  %sub = sub nsw i32 %6, %7, !dbg !3931
  store i32 %sub, i32* %offset, align 4, !dbg !3932
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3933
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3934
  %call4 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %9, i8 zeroext 0), !dbg !3935
  %10 = load i32, i32* %offset, align 4, !dbg !3936
  %sub5 = sub nsw i32 %call4, %10, !dbg !3937
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %8, i32 %sub5), !dbg !3938
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3939
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3940
  %call6 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %12, i8 zeroext 0), !dbg !3941
  %13 = load i32, i32* %offset, align 4, !dbg !3942
  %sub7 = sub nsw i32 %call6, %13, !dbg !3943
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %11, i32 %sub7), !dbg !3944
  %14 = load i32, i32* %offset, align 4, !dbg !3945
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !3946
  %start8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 8, !dbg !3947
  %16 = load i32, i32* %start8, align 4, !dbg !3948
  %add = add nsw i32 %16, %14, !dbg !3948
  store i32 %add, i32* %start8, align 4, !dbg !3948
  br label %if.end9, !dbg !3949

if.end9:                                          ; preds = %if.then, %if.then3, %if.end
  ret void, !dbg !3950
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_sort(%struct.Scene* %scene) #0 !dbg !3951 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seqbase = alloca %struct.ListBase, align 8
  %effbase = alloca %struct.ListBase, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %seqt = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !3952, metadata !DIExpression()), !dbg !3953
  call void @llvm.dbg.declare(metadata %struct.ListBase* %seqbase, metadata !3954, metadata !DIExpression()), !dbg !3955
  call void @llvm.dbg.declare(metadata %struct.ListBase* %effbase, metadata !3956, metadata !DIExpression()), !dbg !3957
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3958, metadata !DIExpression()), !dbg !3959
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !3960
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !3961
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !3959
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !3962, metadata !DIExpression()), !dbg !3963
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqt, metadata !3964, metadata !DIExpression()), !dbg !3965
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3966
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !3968
  br i1 %cmp, label %if.then, label %if.end, !dbg !3969

if.then:                                          ; preds = %entry
  br label %return, !dbg !3970

if.end:                                           ; preds = %entry
  call void @BLI_listbase_clear(%struct.ListBase* %seqbase), !dbg !3971
  call void @BLI_listbase_clear(%struct.ListBase* %effbase), !dbg !3972
  br label %while.cond, !dbg !3973

while.cond:                                       ; preds = %if.end28, %if.end
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3974
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !3975
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3975
  %call1 = call i8* @BLI_pophead(%struct.ListBase* %3), !dbg !3976
  %4 = bitcast i8* %call1 to %struct.Sequence*, !dbg !3976
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !3977
  %tobool = icmp ne %struct.Sequence* %4, null, !dbg !3973
  br i1 %tobool, label %while.body, label %while.end29, !dbg !3973

while.body:                                       ; preds = %while.cond
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3978
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !3981
  %6 = load i32, i32* %type, align 4, !dbg !3981
  %and = and i32 %6, 8, !dbg !3982
  %tobool2 = icmp ne i32 %and, 0, !dbg !3982
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !3983

if.then3:                                         ; preds = %while.body
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %effbase, i32 0, i32 0, !dbg !3984
  %7 = load i8*, i8** %first, align 8, !dbg !3984
  %8 = bitcast i8* %7 to %struct.Sequence*, !dbg !3986
  store %struct.Sequence* %8, %struct.Sequence** %seqt, align 8, !dbg !3987
  br label %while.cond4, !dbg !3988

while.cond4:                                      ; preds = %if.end10, %if.then3
  %9 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !3989
  %tobool5 = icmp ne %struct.Sequence* %9, null, !dbg !3988
  br i1 %tobool5, label %while.body6, label %while.end, !dbg !3988

while.body6:                                      ; preds = %while.cond4
  %10 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !3990
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 13, !dbg !3993
  %11 = load i32, i32* %machine, align 8, !dbg !3993
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3994
  %machine7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 13, !dbg !3995
  %13 = load i32, i32* %machine7, align 8, !dbg !3995
  %cmp8 = icmp sge i32 %11, %13, !dbg !3996
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3997

if.then9:                                         ; preds = %while.body6
  %14 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !3998
  %15 = bitcast %struct.Sequence* %14 to i8*, !dbg !3998
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4000
  %17 = bitcast %struct.Sequence* %16 to i8*, !dbg !4000
  call void @BLI_insertlinkbefore(%struct.ListBase* %effbase, i8* %15, i8* %17), !dbg !4001
  br label %while.end, !dbg !4002

if.end10:                                         ; preds = %while.body6
  %18 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4003
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 0, !dbg !4004
  %19 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4004
  store %struct.Sequence* %19, %struct.Sequence** %seqt, align 8, !dbg !4005
  br label %while.cond4, !dbg !3988, !llvm.loop !4006

while.end:                                        ; preds = %if.then9, %while.cond4
  %20 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4008
  %cmp11 = icmp eq %struct.Sequence* %20, null, !dbg !4010
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !4011

if.then12:                                        ; preds = %while.end
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4012
  %22 = bitcast %struct.Sequence* %21 to i8*, !dbg !4012
  call void @BLI_addtail(%struct.ListBase* %effbase, i8* %22), !dbg !4013
  br label %if.end13, !dbg !4013

if.end13:                                         ; preds = %if.then12, %while.end
  br label %if.end28, !dbg !4014

if.else:                                          ; preds = %while.body
  %first14 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !4015
  %23 = load i8*, i8** %first14, align 8, !dbg !4015
  %24 = bitcast i8* %23 to %struct.Sequence*, !dbg !4017
  store %struct.Sequence* %24, %struct.Sequence** %seqt, align 8, !dbg !4018
  br label %while.cond15, !dbg !4019

while.cond15:                                     ; preds = %if.end22, %if.else
  %25 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4020
  %tobool16 = icmp ne %struct.Sequence* %25, null, !dbg !4019
  br i1 %tobool16, label %while.body17, label %while.end24, !dbg !4019

while.body17:                                     ; preds = %while.cond15
  %26 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4021
  %machine18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 13, !dbg !4024
  %27 = load i32, i32* %machine18, align 8, !dbg !4024
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4025
  %machine19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 13, !dbg !4026
  %29 = load i32, i32* %machine19, align 8, !dbg !4026
  %cmp20 = icmp sge i32 %27, %29, !dbg !4027
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !4028

if.then21:                                        ; preds = %while.body17
  %30 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4029
  %31 = bitcast %struct.Sequence* %30 to i8*, !dbg !4029
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4031
  %33 = bitcast %struct.Sequence* %32 to i8*, !dbg !4031
  call void @BLI_insertlinkbefore(%struct.ListBase* %seqbase, i8* %31, i8* %33), !dbg !4032
  br label %while.end24, !dbg !4033

if.end22:                                         ; preds = %while.body17
  %34 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4034
  %next23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 0, !dbg !4035
  %35 = load %struct.Sequence*, %struct.Sequence** %next23, align 8, !dbg !4035
  store %struct.Sequence* %35, %struct.Sequence** %seqt, align 8, !dbg !4036
  br label %while.cond15, !dbg !4019, !llvm.loop !4037

while.end24:                                      ; preds = %if.then21, %while.cond15
  %36 = load %struct.Sequence*, %struct.Sequence** %seqt, align 8, !dbg !4039
  %cmp25 = icmp eq %struct.Sequence* %36, null, !dbg !4041
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !4042

if.then26:                                        ; preds = %while.end24
  %37 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4043
  %38 = bitcast %struct.Sequence* %37 to i8*, !dbg !4043
  call void @BLI_addtail(%struct.ListBase* %seqbase, i8* %38), !dbg !4044
  br label %if.end27, !dbg !4044

if.end27:                                         ; preds = %if.then26, %while.end24
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end13
  br label %while.cond, !dbg !3973, !llvm.loop !4045

while.end29:                                      ; preds = %while.cond
  call void @BLI_movelisttolist(%struct.ListBase* %seqbase, %struct.ListBase* %effbase), !dbg !4047
  %39 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4048
  %seqbasep30 = getelementptr inbounds %struct.Editing, %struct.Editing* %39, i32 0, i32 0, !dbg !4049
  %40 = load %struct.ListBase*, %struct.ListBase** %seqbasep30, align 8, !dbg !4049
  %41 = bitcast %struct.ListBase* %40 to i8*, !dbg !4050
  %42 = bitcast %struct.ListBase* %seqbase to i8*, !dbg !4050
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false), !dbg !4050
  br label %return, !dbg !4051

return:                                           ; preds = %while.end29, %if.then
  ret void, !dbg !4051
}

declare dso_local i8* @BLI_pophead(%struct.ListBase*) #2

declare dso_local void @BLI_insertlinkbefore(%struct.ListBase*, i8*, i8*) #2

declare dso_local void @BLI_addtail(%struct.ListBase*, i8*) #2

declare dso_local void @BLI_movelisttolist(%struct.ListBase*, %struct.ListBase*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_clear_scene_in_allseqs(%struct.Main* %bmain, %struct.Scene* %scene) #0 !dbg !4052 {
entry:
  %bmain.addr = alloca %struct.Main*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %scene_iter = alloca %struct.Scene*, align 8
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !4055, metadata !DIExpression()), !dbg !4056
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !4057, metadata !DIExpression()), !dbg !4058
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene_iter, metadata !4059, metadata !DIExpression()), !dbg !4060
  %0 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !4061
  %scene1 = getelementptr inbounds %struct.Main, %struct.Main* %0, i32 0, i32 11, !dbg !4063
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %scene1, i32 0, i32 0, !dbg !4064
  %1 = load i8*, i8** %first, align 8, !dbg !4064
  %2 = bitcast i8* %1 to %struct.Scene*, !dbg !4061
  store %struct.Scene* %2, %struct.Scene** %scene_iter, align 8, !dbg !4065
  br label %for.cond, !dbg !4066

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Scene*, %struct.Scene** %scene_iter, align 8, !dbg !4067
  %tobool = icmp ne %struct.Scene* %3, null, !dbg !4069
  br i1 %tobool, label %for.body, label %for.end, !dbg !4069

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Scene*, %struct.Scene** %scene_iter, align 8, !dbg !4070
  %5 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4073
  %cmp = icmp ne %struct.Scene* %4, %5, !dbg !4074
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4075

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.Scene*, %struct.Scene** %scene_iter, align 8, !dbg !4076
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %6, i32 0, i32 19, !dbg !4077
  %7 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4077
  %tobool2 = icmp ne %struct.Editing* %7, null, !dbg !4076
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4078

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.Scene*, %struct.Scene** %scene_iter, align 8, !dbg !4079
  %ed3 = getelementptr inbounds %struct.Scene, %struct.Scene* %8, i32 0, i32 19, !dbg !4081
  %9 = load %struct.Editing*, %struct.Editing** %ed3, align 8, !dbg !4081
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %9, i32 0, i32 1, !dbg !4082
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4083
  %11 = bitcast %struct.Scene* %10 to i8*, !dbg !4083
  %call = call i32 @BKE_sequencer_base_recursive_apply(%struct.ListBase* %seqbase, i32 (%struct.Sequence*, i8*)* @clear_scene_in_allseqs_cb, i8* %11), !dbg !4084
  br label %if.end, !dbg !4085

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4086

for.inc:                                          ; preds = %if.end
  %12 = load %struct.Scene*, %struct.Scene** %scene_iter, align 8, !dbg !4087
  %id = getelementptr inbounds %struct.Scene, %struct.Scene* %12, i32 0, i32 0, !dbg !4088
  %next = getelementptr inbounds %struct.ID, %struct.ID* %id, i32 0, i32 0, !dbg !4089
  %13 = load i8*, i8** %next, align 8, !dbg !4089
  %14 = bitcast i8* %13 to %struct.Scene*, !dbg !4087
  store %struct.Scene* %14, %struct.Scene** %scene_iter, align 8, !dbg !4090
  br label %for.cond, !dbg !4091, !llvm.loop !4092

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4094
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @clear_scene_in_allseqs_cb(%struct.Sequence* %seq, i8* %arg_pt) #0 !dbg !4095 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %arg_pt.addr = alloca i8*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4096, metadata !DIExpression()), !dbg !4097
  store i8* %arg_pt, i8** %arg_pt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg_pt.addr, metadata !4098, metadata !DIExpression()), !dbg !4099
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4100
  %scene = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 26, !dbg !4102
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4102
  %2 = load i8*, i8** %arg_pt.addr, align 8, !dbg !4103
  %3 = bitcast i8* %2 to %struct.Scene*, !dbg !4104
  %cmp = icmp eq %struct.Scene* %1, %3, !dbg !4105
  br i1 %cmp, label %if.then, label %if.end, !dbg !4106

if.then:                                          ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4107
  %scene1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 26, !dbg !4108
  store %struct.Scene* null, %struct.Scene** %scene1, align 8, !dbg !4109
  br label %if.end, !dbg !4107

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !4110
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbasep, %struct.Sequence* %seq) #0 !dbg !4111 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %sui = alloca %struct.SeqUniqueInfo, align 8
  %dot = alloca i8*, align 8
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !4114, metadata !DIExpression()), !dbg !4115
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4116, metadata !DIExpression()), !dbg !4117
  call void @llvm.dbg.declare(metadata %struct.SeqUniqueInfo* %sui, metadata !4118, metadata !DIExpression()), !dbg !4119
  call void @llvm.dbg.declare(metadata i8** %dot, metadata !4120, metadata !DIExpression()), !dbg !4121
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4122
  %seq1 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 0, !dbg !4123
  store %struct.Sequence* %0, %struct.Sequence** %seq1, align 8, !dbg !4124
  %name_src = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 1, !dbg !4125
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name_src, i64 0, i64 0, !dbg !4126
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4127
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 4, !dbg !4128
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !4127
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 2, !dbg !4129
  %call = call i8* @BLI_strncpy(i8* %arraydecay, i8* %add.ptr, i64 64), !dbg !4130
  %name_dest = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 2, !dbg !4131
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %name_dest, i64 0, i64 0, !dbg !4132
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4133
  %name4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 4, !dbg !4134
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %name4, i64 0, i64 0, !dbg !4133
  %add.ptr6 = getelementptr inbounds i8, i8* %arraydecay5, i64 2, !dbg !4135
  %call7 = call i8* @BLI_strncpy(i8* %arraydecay3, i8* %add.ptr6, i64 64), !dbg !4136
  %count = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 3, !dbg !4137
  store i32 1, i32* %count, align 8, !dbg !4138
  %match = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 4, !dbg !4139
  store i32 1, i32* %match, align 4, !dbg !4140
  %name_src8 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 1, !dbg !4141
  %arraydecay9 = getelementptr inbounds [64 x i8], [64 x i8]* %name_src8, i64 0, i64 0, !dbg !4143
  %call10 = call i8* @strrchr(i8* %arraydecay9, i32 46) #7, !dbg !4144
  store i8* %call10, i8** %dot, align 8, !dbg !4145
  %tobool = icmp ne i8* %call10, null, !dbg !4145
  br i1 %tobool, label %if.then, label %if.end15, !dbg !4146

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %dot, align 8, !dbg !4147
  store i8 0, i8* %3, align 1, !dbg !4149
  %4 = load i8*, i8** %dot, align 8, !dbg !4150
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !4150
  store i8* %incdec.ptr, i8** %dot, align 8, !dbg !4150
  %5 = load i8*, i8** %dot, align 8, !dbg !4151
  %6 = load i8, i8* %5, align 1, !dbg !4153
  %tobool11 = icmp ne i8 %6, 0, !dbg !4153
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !4154

if.then12:                                        ; preds = %if.then
  %7 = load i8*, i8** %dot, align 8, !dbg !4155
  %call13 = call i32 @atoi(i8* %7) #7, !dbg !4156
  %add = add nsw i32 %call13, 1, !dbg !4157
  %count14 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 3, !dbg !4158
  store i32 %add, i32* %count14, align 8, !dbg !4159
  br label %if.end, !dbg !4160

if.end:                                           ; preds = %if.then12, %if.then
  br label %if.end15, !dbg !4161

if.end15:                                         ; preds = %if.end, %entry
  br label %while.cond, !dbg !4162

while.cond:                                       ; preds = %while.body, %if.end15
  %match16 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 4, !dbg !4163
  %8 = load i32, i32* %match16, align 4, !dbg !4163
  %tobool17 = icmp ne i32 %8, 0, !dbg !4162
  br i1 %tobool17, label %while.body, label %while.end, !dbg !4162

while.body:                                       ; preds = %while.cond
  %match18 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 4, !dbg !4164
  store i32 0, i32* %match18, align 4, !dbg !4166
  %9 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !4167
  call void @seqbase_unique_name(%struct.ListBase* %9, %struct.SeqUniqueInfo* %sui), !dbg !4168
  %10 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !4169
  %11 = bitcast %struct.SeqUniqueInfo* %sui to i8*, !dbg !4170
  %call19 = call i32 @BKE_sequencer_base_recursive_apply(%struct.ListBase* %10, i32 (%struct.Sequence*, i8*)* @seqbase_unique_name_recursive_cb, i8* %11), !dbg !4171
  br label %while.cond, !dbg !4162, !llvm.loop !4172

while.end:                                        ; preds = %while.cond
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4174
  %name20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 4, !dbg !4175
  %arraydecay21 = getelementptr inbounds [64 x i8], [64 x i8]* %name20, i64 0, i64 0, !dbg !4174
  %add.ptr22 = getelementptr inbounds i8, i8* %arraydecay21, i64 2, !dbg !4176
  %name_dest23 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %sui, i32 0, i32 2, !dbg !4177
  %arraydecay24 = getelementptr inbounds [64 x i8], [64 x i8]* %name_dest23, i64 0, i64 0, !dbg !4178
  %call25 = call i8* @BLI_strncpy(i8* %add.ptr22, i8* %arraydecay24, i64 62), !dbg !4179
  ret void, !dbg !4180
}

declare dso_local i8* @BLI_strncpy(i8*, i8*, i64) #2

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #3

; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @seqbase_unique_name(%struct.ListBase* %seqbasep, %struct.SeqUniqueInfo* %sui) #0 !dbg !4181 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %sui.addr = alloca %struct.SeqUniqueInfo*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !4184, metadata !DIExpression()), !dbg !4185
  store %struct.SeqUniqueInfo* %sui, %struct.SeqUniqueInfo** %sui.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqUniqueInfo** %sui.addr, metadata !4186, metadata !DIExpression()), !dbg !4187
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4188, metadata !DIExpression()), !dbg !4189
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !4190
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !4192
  %1 = load i8*, i8** %first, align 8, !dbg !4192
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !4190
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !4193
  br label %for.cond, !dbg !4194

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4195
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !4197
  br i1 %tobool, label %for.body, label %for.end, !dbg !4197

for.body:                                         ; preds = %for.cond
  %4 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4198
  %seq1 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %4, i32 0, i32 0, !dbg !4201
  %5 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4201
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4202
  %cmp = icmp ne %struct.Sequence* %5, %6, !dbg !4203
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4204

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4205
  %name_dest = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %7, i32 0, i32 2, !dbg !4205
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name_dest, i64 0, i64 0, !dbg !4205
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4205
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 4, !dbg !4205
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !4205
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 2, !dbg !4205
  %call = call i32 @strcmp(i8* %arraydecay, i8* %add.ptr) #7, !dbg !4205
  %cmp3 = icmp eq i32 %call, 0, !dbg !4205
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4206

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4207
  %name_dest4 = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %9, i32 0, i32 2, !dbg !4209
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %name_dest4, i64 0, i64 0, !dbg !4207
  %10 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4210
  %name_src = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %10, i32 0, i32 1, !dbg !4211
  %arraydecay6 = getelementptr inbounds [64 x i8], [64 x i8]* %name_src, i64 0, i64 0, !dbg !4210
  %11 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4212
  %count = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %11, i32 0, i32 3, !dbg !4213
  %12 = load i32, i32* %count, align 8, !dbg !4214
  %inc = add nsw i32 %12, 1, !dbg !4214
  store i32 %inc, i32* %count, align 8, !dbg !4214
  %call7 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %arraydecay5, i64 64, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i32 57, i8* %arraydecay6, i32 %12), !dbg !4215
  %13 = load %struct.SeqUniqueInfo*, %struct.SeqUniqueInfo** %sui.addr, align 8, !dbg !4216
  %match = getelementptr inbounds %struct.SeqUniqueInfo, %struct.SeqUniqueInfo* %13, i32 0, i32 4, !dbg !4217
  store i32 1, i32* %match, align 4, !dbg !4218
  br label %if.end, !dbg !4219

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4220

for.inc:                                          ; preds = %if.end
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4221
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 0, !dbg !4222
  %15 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4222
  store %struct.Sequence* %15, %struct.Sequence** %seq, align 8, !dbg !4223
  br label %for.cond, !dbg !4224, !llvm.loop !4225

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4227
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @seqbase_unique_name_recursive_cb(%struct.Sequence* %seq, i8* %arg_pt) #0 !dbg !4228 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %arg_pt.addr = alloca i8*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  store i8* %arg_pt, i8** %arg_pt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg_pt.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4233
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 36, !dbg !4235
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !4236
  %1 = load i8*, i8** %first, align 8, !dbg !4236
  %tobool = icmp ne i8* %1, null, !dbg !4233
  br i1 %tobool, label %if.then, label %if.end, !dbg !4237

if.then:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4238
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 36, !dbg !4239
  %3 = load i8*, i8** %arg_pt.addr, align 8, !dbg !4240
  %4 = bitcast i8* %3 to %struct.SeqUniqueInfo*, !dbg !4241
  call void @seqbase_unique_name(%struct.ListBase* %seqbase1, %struct.SeqUniqueInfo* %4), !dbg !4242
  br label %if.end, !dbg !4242

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !4243
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @BKE_sequence_give_name(%struct.Sequence* %seq) #0 !dbg !4244 {
entry:
  %retval = alloca i8*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %name = alloca i8*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4247, metadata !DIExpression()), !dbg !4248
  call void @llvm.dbg.declare(metadata i8** %name, metadata !4249, metadata !DIExpression()), !dbg !4250
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4251
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !4252
  %1 = load i32, i32* %type, align 4, !dbg !4252
  %call = call i8* @give_seqname_by_type(i32 %1), !dbg !4253
  store i8* %call, i8** %name, align 8, !dbg !4250
  %2 = load i8*, i8** %name, align 8, !dbg !4254
  %tobool = icmp ne i8* %2, null, !dbg !4254
  br i1 %tobool, label %if.end, label %if.then, !dbg !4256

if.then:                                          ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4257
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 6, !dbg !4260
  %4 = load i32, i32* %type1, align 4, !dbg !4260
  %cmp = icmp slt i32 %4, 8, !dbg !4261
  br i1 %cmp, label %if.then2, label %if.else, !dbg !4262

if.then2:                                         ; preds = %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4263
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 24, !dbg !4265
  %6 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !4265
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 7, !dbg !4266
  %arraydecay = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !4263
  store i8* %arraydecay, i8** %retval, align 8, !dbg !4267
  br label %return, !dbg !4267

if.else:                                          ; preds = %if.then
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8** %retval, align 8, !dbg !4268
  br label %return, !dbg !4268

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %name, align 8, !dbg !4270
  store i8* %7, i8** %retval, align 8, !dbg !4271
  br label %return, !dbg !4271

return:                                           ; preds = %if.end, %if.else, %if.then2
  %8 = load i8*, i8** %retval, align 8, !dbg !4272
  ret i8* %8, !dbg !4272
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @give_seqname_by_type(i32 %type) #0 !dbg !4273 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  %0 = load i32, i32* %type.addr, align 4, !dbg !4278
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 6, label %sw.bb4
    i32 7, label %sw.bb5
    i32 4, label %sw.bb6
    i32 8, label %sw.bb7
    i32 13, label %sw.bb8
    i32 9, label %sw.bb9
    i32 10, label %sw.bb10
    i32 14, label %sw.bb11
    i32 11, label %sw.bb12
    i32 12, label %sw.bb13
    i32 15, label %sw.bb14
    i32 25, label %sw.bb15
    i32 26, label %sw.bb16
    i32 27, label %sw.bb17
    i32 28, label %sw.bb18
    i32 30, label %sw.bb19
    i32 31, label %sw.bb20
    i32 29, label %sw.bb21
    i32 40, label %sw.bb22
  ], !dbg !4279

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i8** %retval, align 8, !dbg !4280
  br label %return, !dbg !4280

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0), i8** %retval, align 8, !dbg !4282
  br label %return, !dbg !4282

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), i8** %retval, align 8, !dbg !4283
  br label %return, !dbg !4283

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8** %retval, align 8, !dbg !4284
  br label %return, !dbg !4284

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), i8** %retval, align 8, !dbg !4285
  br label %return, !dbg !4285

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), i8** %retval, align 8, !dbg !4286
  br label %return, !dbg !4286

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8** %retval, align 8, !dbg !4287
  br label %return, !dbg !4287

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0), i8** %retval, align 8, !dbg !4288
  br label %return, !dbg !4288

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i64 0, i64 0), i8** %retval, align 8, !dbg !4289
  br label %return, !dbg !4289

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0), i8** %retval, align 8, !dbg !4290
  br label %return, !dbg !4290

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0), i8** %retval, align 8, !dbg !4291
  br label %return, !dbg !4291

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i8** %retval, align 8, !dbg !4292
  br label %return, !dbg !4292

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i8** %retval, align 8, !dbg !4293
  br label %return, !dbg !4293

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i64 0, i64 0), i8** %retval, align 8, !dbg !4294
  br label %return, !dbg !4294

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i64 0, i64 0), i8** %retval, align 8, !dbg !4295
  br label %return, !dbg !4295

sw.bb15:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i8** %retval, align 8, !dbg !4296
  br label %return, !dbg !4296

sw.bb16:                                          ; preds = %entry
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i64 0, i64 0), i8** %retval, align 8, !dbg !4297
  br label %return, !dbg !4297

sw.bb17:                                          ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8** %retval, align 8, !dbg !4298
  br label %return, !dbg !4298

sw.bb18:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32, i64 0, i64 0), i8** %retval, align 8, !dbg !4299
  br label %return, !dbg !4299

sw.bb19:                                          ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i64 0, i64 0), i8** %retval, align 8, !dbg !4300
  br label %return, !dbg !4300

sw.bb20:                                          ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0), i8** %retval, align 8, !dbg !4301
  br label %return, !dbg !4301

sw.bb21:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0), i8** %retval, align 8, !dbg !4302
  br label %return, !dbg !4302

sw.bb22:                                          ; preds = %entry
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i64 0, i64 0), i8** %retval, align 8, !dbg !4303
  br label %return, !dbg !4303

sw.default:                                       ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4304
  br label %return, !dbg !4304

return:                                           ; preds = %sw.default, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8, !dbg !4305
  ret i8* %1, !dbg !4305
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence* %seq, i32 %cfra) #0 !dbg !4306 {
entry:
  %retval = alloca %struct.StripElem*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca i32, align 4
  %se = alloca %struct.StripElem*, align 8
  %nr = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4310, metadata !DIExpression()), !dbg !4311
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !4312, metadata !DIExpression()), !dbg !4313
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se, metadata !4314, metadata !DIExpression()), !dbg !4315
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4316
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !4317
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !4317
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %1, i32 0, i32 6, !dbg !4318
  %2 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !4318
  store %struct.StripElem* %2, %struct.StripElem** %se, align 8, !dbg !4315
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4319
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 6, !dbg !4321
  %4 = load i32, i32* %type, align 4, !dbg !4321
  %cmp = icmp eq i32 %4, 0, !dbg !4322
  br i1 %cmp, label %if.then, label %if.end7, !dbg !4323

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %nr, metadata !4324, metadata !DIExpression()), !dbg !4326
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4327
  %6 = load i32, i32* %cfra.addr, align 4, !dbg !4328
  %conv = sitofp i32 %6 to float, !dbg !4328
  %call = call float @give_stripelem_index(%struct.Sequence* %5, float %conv), !dbg !4329
  %conv1 = fptosi float %call to i32, !dbg !4330
  store i32 %conv1, i32* %nr, align 4, !dbg !4326
  %7 = load i32, i32* %nr, align 4, !dbg !4331
  %cmp2 = icmp eq i32 %7, -1, !dbg !4333
  br i1 %cmp2, label %if.then6, label %lor.lhs.false, !dbg !4334

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !4335
  %cmp4 = icmp eq %struct.StripElem* %8, null, !dbg !4336
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !4337

if.then6:                                         ; preds = %lor.lhs.false, %if.then
  store %struct.StripElem* null, %struct.StripElem** %retval, align 8, !dbg !4338
  br label %return, !dbg !4338

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i32, i32* %nr, align 4, !dbg !4339
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4340
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 44, !dbg !4341
  %11 = load i32, i32* %anim_startofs, align 8, !dbg !4341
  %add = add nsw i32 %9, %11, !dbg !4342
  %12 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !4343
  %idx.ext = sext i32 %add to i64, !dbg !4343
  %add.ptr = getelementptr inbounds %struct.StripElem, %struct.StripElem* %12, i64 %idx.ext, !dbg !4343
  store %struct.StripElem* %add.ptr, %struct.StripElem** %se, align 8, !dbg !4343
  br label %if.end7, !dbg !4344

if.end7:                                          ; preds = %if.end, %entry
  %13 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !4345
  store %struct.StripElem* %13, %struct.StripElem** %retval, align 8, !dbg !4346
  br label %return, !dbg !4346

return:                                           ; preds = %if.end7, %if.then6
  %14 = load %struct.StripElem*, %struct.StripElem** %retval, align 8, !dbg !4347
  ret %struct.StripElem* %14, !dbg !4347
}

; Function Attrs: noinline nounwind uwtable
define internal float @give_stripelem_index(%struct.Sequence* %seq, float %cfra) #0 !dbg !4348 {
entry:
  %retval = alloca float, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %nr = alloca float, align 4
  %sta = alloca i32, align 4
  %end = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4351, metadata !DIExpression()), !dbg !4352
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !4353, metadata !DIExpression()), !dbg !4354
  call void @llvm.dbg.declare(metadata float* %nr, metadata !4355, metadata !DIExpression()), !dbg !4356
  call void @llvm.dbg.declare(metadata i32* %sta, metadata !4357, metadata !DIExpression()), !dbg !4358
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4359
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !4360
  %1 = load i32, i32* %start, align 4, !dbg !4360
  store i32 %1, i32* %sta, align 4, !dbg !4358
  call void @llvm.dbg.declare(metadata i32* %end, metadata !4361, metadata !DIExpression()), !dbg !4362
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4363
  %start1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 8, !dbg !4364
  %3 = load i32, i32* %start1, align 4, !dbg !4364
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4365
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 7, !dbg !4366
  %5 = load i32, i32* %len, align 8, !dbg !4366
  %add = add nsw i32 %3, %5, !dbg !4367
  %sub = sub nsw i32 %add, 1, !dbg !4368
  store i32 %sub, i32* %end, align 4, !dbg !4362
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4369
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !4371
  %7 = load i32, i32* %type, align 4, !dbg !4371
  %and = and i32 %7, 8, !dbg !4372
  %tobool = icmp ne i32 %and, 0, !dbg !4372
  br i1 %tobool, label %if.then, label %if.end, !dbg !4373

if.then:                                          ; preds = %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4374
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 16, !dbg !4376
  %9 = load i32, i32* %enddisp, align 4, !dbg !4376
  store i32 %9, i32* %end, align 4, !dbg !4377
  br label %if.end, !dbg !4378

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %end, align 4, !dbg !4379
  %11 = load i32, i32* %sta, align 4, !dbg !4381
  %cmp = icmp slt i32 %10, %11, !dbg !4382
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !4383

if.then2:                                         ; preds = %if.end
  store float -1.000000e+00, float* %retval, align 4, !dbg !4384
  br label %return, !dbg !4384

if.end3:                                          ; preds = %if.end
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4386
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 5, !dbg !4388
  %13 = load i32, i32* %flag, align 8, !dbg !4388
  %and4 = and i32 %13, 128, !dbg !4389
  %tobool5 = icmp ne i32 %and4, 0, !dbg !4389
  br i1 %tobool5, label %if.then6, label %if.else21, !dbg !4390

if.then6:                                         ; preds = %if.end3
  %14 = load float, float* %cfra.addr, align 4, !dbg !4391
  %15 = load i32, i32* %sta, align 4, !dbg !4394
  %conv = sitofp i32 %15 to float, !dbg !4394
  %cmp7 = fcmp ole float %14, %conv, !dbg !4395
  br i1 %cmp7, label %if.then9, label %if.else, !dbg !4396

if.then9:                                         ; preds = %if.then6
  %16 = load i32, i32* %end, align 4, !dbg !4397
  %17 = load i32, i32* %sta, align 4, !dbg !4398
  %sub10 = sub nsw i32 %16, %17, !dbg !4399
  %conv11 = sitofp i32 %sub10 to float, !dbg !4397
  store float %conv11, float* %nr, align 4, !dbg !4400
  br label %if.end20, !dbg !4401

if.else:                                          ; preds = %if.then6
  %18 = load float, float* %cfra.addr, align 4, !dbg !4402
  %19 = load i32, i32* %end, align 4, !dbg !4404
  %conv12 = sitofp i32 %19 to float, !dbg !4404
  %cmp13 = fcmp oge float %18, %conv12, !dbg !4405
  br i1 %cmp13, label %if.then15, label %if.else16, !dbg !4406

if.then15:                                        ; preds = %if.else
  store float 0.000000e+00, float* %nr, align 4, !dbg !4407
  br label %if.end19, !dbg !4408

if.else16:                                        ; preds = %if.else
  %20 = load i32, i32* %end, align 4, !dbg !4409
  %conv17 = sitofp i32 %20 to float, !dbg !4409
  %21 = load float, float* %cfra.addr, align 4, !dbg !4410
  %sub18 = fsub float %conv17, %21, !dbg !4411
  store float %sub18, float* %nr, align 4, !dbg !4412
  br label %if.end19

if.end19:                                         ; preds = %if.else16, %if.then15
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then9
  br label %if.end38, !dbg !4413

if.else21:                                        ; preds = %if.end3
  %22 = load float, float* %cfra.addr, align 4, !dbg !4414
  %23 = load i32, i32* %sta, align 4, !dbg !4417
  %conv22 = sitofp i32 %23 to float, !dbg !4417
  %cmp23 = fcmp ole float %22, %conv22, !dbg !4418
  br i1 %cmp23, label %if.then25, label %if.else26, !dbg !4419

if.then25:                                        ; preds = %if.else21
  store float 0.000000e+00, float* %nr, align 4, !dbg !4420
  br label %if.end37, !dbg !4421

if.else26:                                        ; preds = %if.else21
  %24 = load float, float* %cfra.addr, align 4, !dbg !4422
  %25 = load i32, i32* %end, align 4, !dbg !4424
  %conv27 = sitofp i32 %25 to float, !dbg !4424
  %cmp28 = fcmp oge float %24, %conv27, !dbg !4425
  br i1 %cmp28, label %if.then30, label %if.else33, !dbg !4426

if.then30:                                        ; preds = %if.else26
  %26 = load i32, i32* %end, align 4, !dbg !4427
  %27 = load i32, i32* %sta, align 4, !dbg !4428
  %sub31 = sub nsw i32 %26, %27, !dbg !4429
  %conv32 = sitofp i32 %sub31 to float, !dbg !4427
  store float %conv32, float* %nr, align 4, !dbg !4430
  br label %if.end36, !dbg !4431

if.else33:                                        ; preds = %if.else26
  %28 = load float, float* %cfra.addr, align 4, !dbg !4432
  %29 = load i32, i32* %sta, align 4, !dbg !4433
  %conv34 = sitofp i32 %29 to float, !dbg !4433
  %sub35 = fsub float %28, %conv34, !dbg !4434
  store float %sub35, float* %nr, align 4, !dbg !4435
  br label %if.end36

if.end36:                                         ; preds = %if.else33, %if.then30
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then25
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end20
  %30 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4436
  %strobe = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 42, !dbg !4438
  %31 = load float, float* %strobe, align 4, !dbg !4438
  %cmp39 = fcmp olt float %31, 1.000000e+00, !dbg !4439
  br i1 %cmp39, label %if.then41, label %if.end43, !dbg !4440

if.then41:                                        ; preds = %if.end38
  %32 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4441
  %strobe42 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 42, !dbg !4442
  store float 1.000000e+00, float* %strobe42, align 4, !dbg !4443
  br label %if.end43, !dbg !4441

if.end43:                                         ; preds = %if.then41, %if.end38
  %33 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4444
  %strobe44 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 42, !dbg !4446
  %34 = load float, float* %strobe44, align 4, !dbg !4446
  %cmp45 = fcmp ogt float %34, 1.000000e+00, !dbg !4447
  br i1 %cmp45, label %if.then47, label %if.end54, !dbg !4448

if.then47:                                        ; preds = %if.end43
  %35 = load float, float* %nr, align 4, !dbg !4449
  %conv48 = fpext float %35 to double, !dbg !4451
  %conv49 = fptrunc double %conv48 to float, !dbg !4451
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4452
  %strobe50 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 42, !dbg !4453
  %37 = load float, float* %strobe50, align 4, !dbg !4453
  %conv51 = fpext float %37 to double, !dbg !4454
  %conv52 = fptrunc double %conv51 to float, !dbg !4454
  %call = call float @fmodf(float %conv49, float %conv52) #9, !dbg !4455
  %38 = load float, float* %nr, align 4, !dbg !4456
  %sub53 = fsub float %38, %call, !dbg !4456
  store float %sub53, float* %nr, align 4, !dbg !4456
  br label %if.end54, !dbg !4457

if.end54:                                         ; preds = %if.then47, %if.end43
  %39 = load float, float* %nr, align 4, !dbg !4458
  store float %39, float* %retval, align 4, !dbg !4459
  br label %return, !dbg !4459

return:                                           ; preds = %if.end54, %if.then2
  %40 = load float, float* %retval, align 4, !dbg !4460
  ret float %40, !dbg !4460
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequencer_evaluate_frame(%struct.Scene* %scene, i32 %cfra) #0 !dbg !4461 {
entry:
  %retval = alloca i32, align 4
  %scene.addr = alloca %struct.Scene*, align 8
  %cfra.addr = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %seq_arr = alloca [33 x %struct.Sequence*], align 16
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !4464, metadata !DIExpression()), !dbg !4465
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !4466, metadata !DIExpression()), !dbg !4467
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4468, metadata !DIExpression()), !dbg !4469
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4470
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !4471
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !4469
  call void @llvm.dbg.declare(metadata [33 x %struct.Sequence*]* %seq_arr, metadata !4472, metadata !DIExpression()), !dbg !4476
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4477
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !4479
  br i1 %cmp, label %if.then, label %if.end, !dbg !4480

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4481
  br label %return, !dbg !4481

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 0, !dbg !4482
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4483
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !4484
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4484
  %4 = load i32, i32* %cfra.addr, align 4, !dbg !4485
  %call1 = call i32 @evaluate_seq_frame_gen(%struct.Sequence** %arraydecay, %struct.ListBase* %3, i32 %4, i32 0), !dbg !4486
  store i32 %call1, i32* %retval, align 4, !dbg !4487
  br label %return, !dbg !4487

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !4488
  ret i32 %5, !dbg !4488
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @evaluate_seq_frame_gen(%struct.Sequence** %seq_arr, %struct.ListBase* %seqbase, i32 %cfra, i32 %chanshown) #0 !dbg !4489 {
entry:
  %seq_arr.addr = alloca %struct.Sequence**, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %cfra.addr = alloca i32, align 4
  %chanshown.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %effect_inputs = alloca [33 x %struct.Sequence*], align 16
  %i = alloca i32, align 4
  %totseq = alloca i32, align 4
  %num_effect_inputs = alloca i32, align 4
  store %struct.Sequence** %seq_arr, %struct.Sequence*** %seq_arr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_arr.addr, metadata !4492, metadata !DIExpression()), !dbg !4493
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !4494, metadata !DIExpression()), !dbg !4495
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !4496, metadata !DIExpression()), !dbg !4497
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !4498, metadata !DIExpression()), !dbg !4499
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4500, metadata !DIExpression()), !dbg !4501
  call void @llvm.dbg.declare(metadata [33 x %struct.Sequence*]* %effect_inputs, metadata !4502, metadata !DIExpression()), !dbg !4503
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4504, metadata !DIExpression()), !dbg !4505
  call void @llvm.dbg.declare(metadata i32* %totseq, metadata !4506, metadata !DIExpression()), !dbg !4507
  store i32 0, i32* %totseq, align 4, !dbg !4507
  call void @llvm.dbg.declare(metadata i32* %num_effect_inputs, metadata !4508, metadata !DIExpression()), !dbg !4509
  store i32 0, i32* %num_effect_inputs, align 4, !dbg !4509
  %0 = load %struct.Sequence**, %struct.Sequence*** %seq_arr.addr, align 8, !dbg !4510
  %1 = bitcast %struct.Sequence** %0 to i8*, !dbg !4511
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 264, i1 false), !dbg !4511
  %2 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !4512
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %2, i32 0, i32 0, !dbg !4513
  %3 = load i8*, i8** %first, align 8, !dbg !4513
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !4512
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !4514
  br label %while.cond, !dbg !4515

while.cond:                                       ; preds = %if.end25, %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4516
  %tobool = icmp ne %struct.Sequence* %5, null, !dbg !4515
  br i1 %tobool, label %while.body, label %while.end, !dbg !4515

while.body:                                       ; preds = %while.cond
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4517
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 15, !dbg !4520
  %7 = load i32, i32* %startdisp, align 8, !dbg !4520
  %8 = load i32, i32* %cfra.addr, align 4, !dbg !4521
  %cmp = icmp sle i32 %7, %8, !dbg !4522
  br i1 %cmp, label %land.lhs.true, label %if.end25, !dbg !4523

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4524
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 16, !dbg !4525
  %10 = load i32, i32* %enddisp, align 4, !dbg !4525
  %11 = load i32, i32* %cfra.addr, align 4, !dbg !4526
  %cmp1 = icmp sgt i32 %10, %11, !dbg !4527
  br i1 %cmp1, label %if.then, label %if.end25, !dbg !4528

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4529
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 6, !dbg !4532
  %13 = load i32, i32* %type, align 4, !dbg !4532
  %and = and i32 %13, 8, !dbg !4533
  %tobool2 = icmp ne i32 %and, 0, !dbg !4533
  br i1 %tobool2, label %if.then3, label %if.end21, !dbg !4534

if.then3:                                         ; preds = %if.then
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4535
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 33, !dbg !4538
  %15 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4538
  %tobool4 = icmp ne %struct.Sequence* %15, null, !dbg !4535
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !4539

if.then5:                                         ; preds = %if.then3
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4540
  %seq16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 33, !dbg !4542
  %17 = load %struct.Sequence*, %struct.Sequence** %seq16, align 8, !dbg !4542
  %18 = load i32, i32* %num_effect_inputs, align 4, !dbg !4543
  %inc = add nsw i32 %18, 1, !dbg !4543
  store i32 %inc, i32* %num_effect_inputs, align 4, !dbg !4543
  %idxprom = sext i32 %18 to i64, !dbg !4544
  %arrayidx = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %effect_inputs, i64 0, i64 %idxprom, !dbg !4544
  store %struct.Sequence* %17, %struct.Sequence** %arrayidx, align 8, !dbg !4545
  br label %if.end, !dbg !4546

if.end:                                           ; preds = %if.then5, %if.then3
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4547
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 34, !dbg !4549
  %20 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !4549
  %tobool7 = icmp ne %struct.Sequence* %20, null, !dbg !4547
  br i1 %tobool7, label %if.then8, label %if.end13, !dbg !4550

if.then8:                                         ; preds = %if.end
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4551
  %seq29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 34, !dbg !4553
  %22 = load %struct.Sequence*, %struct.Sequence** %seq29, align 8, !dbg !4553
  %23 = load i32, i32* %num_effect_inputs, align 4, !dbg !4554
  %inc10 = add nsw i32 %23, 1, !dbg !4554
  store i32 %inc10, i32* %num_effect_inputs, align 4, !dbg !4554
  %idxprom11 = sext i32 %23 to i64, !dbg !4555
  %arrayidx12 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %effect_inputs, i64 0, i64 %idxprom11, !dbg !4555
  store %struct.Sequence* %22, %struct.Sequence** %arrayidx12, align 8, !dbg !4556
  br label %if.end13, !dbg !4557

if.end13:                                         ; preds = %if.then8, %if.end
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4558
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 35, !dbg !4560
  %25 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !4560
  %tobool14 = icmp ne %struct.Sequence* %25, null, !dbg !4558
  br i1 %tobool14, label %if.then15, label %if.end20, !dbg !4561

if.then15:                                        ; preds = %if.end13
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4562
  %seq316 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 35, !dbg !4564
  %27 = load %struct.Sequence*, %struct.Sequence** %seq316, align 8, !dbg !4564
  %28 = load i32, i32* %num_effect_inputs, align 4, !dbg !4565
  %inc17 = add nsw i32 %28, 1, !dbg !4565
  store i32 %inc17, i32* %num_effect_inputs, align 4, !dbg !4565
  %idxprom18 = sext i32 %28 to i64, !dbg !4566
  %arrayidx19 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %effect_inputs, i64 0, i64 %idxprom18, !dbg !4566
  store %struct.Sequence* %27, %struct.Sequence** %arrayidx19, align 8, !dbg !4567
  br label %if.end20, !dbg !4568

if.end20:                                         ; preds = %if.then15, %if.end13
  br label %if.end21, !dbg !4569

if.end21:                                         ; preds = %if.end20, %if.then
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4570
  %30 = load %struct.Sequence**, %struct.Sequence*** %seq_arr.addr, align 8, !dbg !4571
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4572
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 13, !dbg !4573
  %32 = load i32, i32* %machine, align 8, !dbg !4573
  %idxprom22 = sext i32 %32 to i64, !dbg !4571
  %arrayidx23 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %30, i64 %idxprom22, !dbg !4571
  store %struct.Sequence* %29, %struct.Sequence** %arrayidx23, align 8, !dbg !4574
  %33 = load i32, i32* %totseq, align 4, !dbg !4575
  %inc24 = add nsw i32 %33, 1, !dbg !4575
  store i32 %inc24, i32* %totseq, align 4, !dbg !4575
  br label %if.end25, !dbg !4576

if.end25:                                         ; preds = %if.end21, %land.lhs.true, %while.body
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4577
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 0, !dbg !4578
  %35 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4578
  store %struct.Sequence* %35, %struct.Sequence** %seq, align 8, !dbg !4579
  br label %while.cond, !dbg !4515, !llvm.loop !4580

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4, !dbg !4582
  br label %for.cond, !dbg !4584

for.cond:                                         ; preds = %for.inc, %while.end
  %36 = load i32, i32* %i, align 4, !dbg !4585
  %37 = load i32, i32* %num_effect_inputs, align 4, !dbg !4587
  %cmp26 = icmp slt i32 %36, %37, !dbg !4588
  br i1 %cmp26, label %for.body, label %for.end, !dbg !4589

for.body:                                         ; preds = %for.cond
  %38 = load i32, i32* %i, align 4, !dbg !4590
  %idxprom27 = sext i32 %38 to i64, !dbg !4592
  %arrayidx28 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %effect_inputs, i64 0, i64 %idxprom27, !dbg !4592
  %39 = load %struct.Sequence*, %struct.Sequence** %arrayidx28, align 8, !dbg !4592
  store %struct.Sequence* %39, %struct.Sequence** %seq, align 8, !dbg !4593
  %40 = load %struct.Sequence**, %struct.Sequence*** %seq_arr.addr, align 8, !dbg !4594
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4596
  %machine29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 13, !dbg !4597
  %42 = load i32, i32* %machine29, align 8, !dbg !4597
  %idxprom30 = sext i32 %42 to i64, !dbg !4594
  %arrayidx31 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %40, i64 %idxprom30, !dbg !4594
  %43 = load %struct.Sequence*, %struct.Sequence** %arrayidx31, align 8, !dbg !4594
  %tobool32 = icmp ne %struct.Sequence* %43, null, !dbg !4594
  br i1 %tobool32, label %land.lhs.true33, label %if.end41, !dbg !4598

land.lhs.true33:                                  ; preds = %for.body
  %44 = load %struct.Sequence**, %struct.Sequence*** %seq_arr.addr, align 8, !dbg !4599
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4600
  %machine34 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 13, !dbg !4601
  %46 = load i32, i32* %machine34, align 8, !dbg !4601
  %idxprom35 = sext i32 %46 to i64, !dbg !4599
  %arrayidx36 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %44, i64 %idxprom35, !dbg !4599
  %47 = load %struct.Sequence*, %struct.Sequence** %arrayidx36, align 8, !dbg !4599
  %type37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 6, !dbg !4602
  %48 = load i32, i32* %type37, align 4, !dbg !4602
  %and38 = and i32 %48, 8, !dbg !4603
  %tobool39 = icmp ne i32 %and38, 0, !dbg !4603
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !4604

if.then40:                                        ; preds = %land.lhs.true33
  br label %for.inc, !dbg !4605

if.end41:                                         ; preds = %land.lhs.true33, %for.body
  %49 = load i32, i32* %chanshown.addr, align 4, !dbg !4607
  %cmp42 = icmp ne i32 %49, 0, !dbg !4609
  br i1 %cmp42, label %land.lhs.true43, label %if.end47, !dbg !4610

land.lhs.true43:                                  ; preds = %if.end41
  %50 = load i32, i32* %chanshown.addr, align 4, !dbg !4611
  %51 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4612
  %machine44 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 13, !dbg !4613
  %52 = load i32, i32* %machine44, align 8, !dbg !4613
  %cmp45 = icmp sle i32 %50, %52, !dbg !4614
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !4615

if.then46:                                        ; preds = %land.lhs.true43
  br label %for.inc, !dbg !4616

if.end47:                                         ; preds = %land.lhs.true43, %if.end41
  %53 = load %struct.Sequence**, %struct.Sequence*** %seq_arr.addr, align 8, !dbg !4618
  %54 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4619
  %machine48 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 13, !dbg !4620
  %55 = load i32, i32* %machine48, align 8, !dbg !4620
  %idxprom49 = sext i32 %55 to i64, !dbg !4618
  %arrayidx50 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %53, i64 %idxprom49, !dbg !4618
  store %struct.Sequence* null, %struct.Sequence** %arrayidx50, align 8, !dbg !4621
  br label %for.inc, !dbg !4622

for.inc:                                          ; preds = %if.end47, %if.then46, %if.then40
  %56 = load i32, i32* %i, align 4, !dbg !4623
  %inc51 = add nsw i32 %56, 1, !dbg !4623
  store i32 %inc51, i32* %i, align 4, !dbg !4623
  br label %for.cond, !dbg !4624, !llvm.loop !4625

for.end:                                          ; preds = %for.cond
  %57 = load i32, i32* %totseq, align 4, !dbg !4627
  ret i32 %57, !dbg !4628
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.SeqIndexBuildContext* @BKE_sequencer_proxy_rebuild_context(%struct.Main* %bmain, %struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !4629 {
entry:
  %retval = alloca %struct.SeqIndexBuildContext*, align 8
  %bmain.addr = alloca %struct.Main*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %context = alloca %struct.SeqIndexBuildContext*, align 8
  %nseq = alloca %struct.Sequence*, align 8
  store %struct.Main* %bmain, %struct.Main** %bmain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain.addr, metadata !4645, metadata !DIExpression()), !dbg !4646
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !4647, metadata !DIExpression()), !dbg !4648
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4649, metadata !DIExpression()), !dbg !4650
  call void @llvm.dbg.declare(metadata %struct.SeqIndexBuildContext** %context, metadata !4651, metadata !DIExpression()), !dbg !4654
  call void @llvm.dbg.declare(metadata %struct.Sequence** %nseq, metadata !4655, metadata !DIExpression()), !dbg !4656
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4657
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !4659
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !4659
  %tobool = icmp ne %struct.Strip* %1, null, !dbg !4657
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4660

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4661
  %strip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !4662
  %3 = load %struct.Strip*, %struct.Strip** %strip1, align 8, !dbg !4662
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 8, !dbg !4663
  %4 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !4663
  %tobool2 = icmp ne %struct.StripProxy* %4, null, !dbg !4661
  br i1 %tobool2, label %if.end, label %if.then, !dbg !4664

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.SeqIndexBuildContext* null, %struct.SeqIndexBuildContext** %retval, align 8, !dbg !4665
  br label %return, !dbg !4665

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4667
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 5, !dbg !4669
  %6 = load i32, i32* %flag, align 8, !dbg !4669
  %and = and i32 %6, 32768, !dbg !4670
  %tobool3 = icmp ne i32 %and, 0, !dbg !4670
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !4671

if.then4:                                         ; preds = %if.end
  store %struct.SeqIndexBuildContext* null, %struct.SeqIndexBuildContext** %retval, align 8, !dbg !4672
  br label %return, !dbg !4672

if.end5:                                          ; preds = %if.end
  %7 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !4674
  %call = call i8* %7(i64 56, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)), !dbg !4674
  %8 = bitcast i8* %call to %struct.SeqIndexBuildContext*, !dbg !4674
  store %struct.SeqIndexBuildContext* %8, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4675
  %9 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4676
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4677
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4678
  %call6 = call %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %9, %struct.Scene* %10, %struct.Sequence* %11, i32 0), !dbg !4679
  store %struct.Sequence* %call6, %struct.Sequence** %nseq, align 8, !dbg !4680
  %12 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4681
  %strip7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 24, !dbg !4682
  %13 = load %struct.Strip*, %struct.Strip** %strip7, align 8, !dbg !4682
  %proxy8 = getelementptr inbounds %struct.Strip, %struct.Strip* %13, i32 0, i32 8, !dbg !4683
  %14 = load %struct.StripProxy*, %struct.StripProxy** %proxy8, align 8, !dbg !4683
  %build_tc_flags = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %14, i32 0, i32 6, !dbg !4684
  %15 = load i16, i16* %build_tc_flags, align 2, !dbg !4684
  %conv = sext i16 %15 to i32, !dbg !4681
  %16 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4685
  %tc_flags = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %16, i32 0, i32 1, !dbg !4686
  store i32 %conv, i32* %tc_flags, align 8, !dbg !4687
  %17 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4688
  %strip9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 24, !dbg !4689
  %18 = load %struct.Strip*, %struct.Strip** %strip9, align 8, !dbg !4689
  %proxy10 = getelementptr inbounds %struct.Strip, %struct.Strip* %18, i32 0, i32 8, !dbg !4690
  %19 = load %struct.StripProxy*, %struct.StripProxy** %proxy10, align 8, !dbg !4690
  %build_size_flags = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %19, i32 0, i32 5, !dbg !4691
  %20 = load i16, i16* %build_size_flags, align 4, !dbg !4691
  %conv11 = sext i16 %20 to i32, !dbg !4688
  %21 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4692
  %size_flags = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %21, i32 0, i32 2, !dbg !4693
  store i32 %conv11, i32* %size_flags, align 4, !dbg !4694
  %22 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4695
  %strip12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 24, !dbg !4696
  %23 = load %struct.Strip*, %struct.Strip** %strip12, align 8, !dbg !4696
  %proxy13 = getelementptr inbounds %struct.Strip, %struct.Strip* %23, i32 0, i32 8, !dbg !4697
  %24 = load %struct.StripProxy*, %struct.StripProxy** %proxy13, align 8, !dbg !4697
  %quality = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %24, i32 0, i32 4, !dbg !4698
  %25 = load i16, i16* %quality, align 2, !dbg !4698
  %conv14 = sext i16 %25 to i32, !dbg !4695
  %26 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4699
  %quality15 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %26, i32 0, i32 3, !dbg !4700
  store i32 %conv14, i32* %quality15, align 8, !dbg !4701
  %27 = load %struct.Main*, %struct.Main** %bmain.addr, align 8, !dbg !4702
  %28 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4703
  %bmain16 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %28, i32 0, i32 4, !dbg !4704
  store %struct.Main* %27, %struct.Main** %bmain16, align 8, !dbg !4705
  %29 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4706
  %30 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4707
  %scene17 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %30, i32 0, i32 5, !dbg !4708
  store %struct.Scene* %29, %struct.Scene** %scene17, align 8, !dbg !4709
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4710
  %32 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4711
  %orig_seq = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %32, i32 0, i32 7, !dbg !4712
  store %struct.Sequence* %31, %struct.Sequence** %orig_seq, align 8, !dbg !4713
  %33 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4714
  %34 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4715
  %seq18 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %34, i32 0, i32 6, !dbg !4716
  store %struct.Sequence* %33, %struct.Sequence** %seq18, align 8, !dbg !4717
  %35 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4718
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 6, !dbg !4720
  %36 = load i32, i32* %type, align 4, !dbg !4720
  %cmp = icmp eq i32 %36, 3, !dbg !4721
  br i1 %cmp, label %if.then20, label %if.end29, !dbg !4722

if.then20:                                        ; preds = %if.end5
  %37 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4723
  call void @seq_open_anim_file(%struct.Sequence* %37), !dbg !4725
  %38 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4726
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 30, !dbg !4728
  %39 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !4728
  %tobool21 = icmp ne %struct.anim* %39, null, !dbg !4726
  br i1 %tobool21, label %if.then22, label %if.end28, !dbg !4729

if.then22:                                        ; preds = %if.then20
  %40 = load %struct.Sequence*, %struct.Sequence** %nseq, align 8, !dbg !4730
  %anim23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 30, !dbg !4732
  %41 = load %struct.anim*, %struct.anim** %anim23, align 8, !dbg !4732
  %42 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4733
  %tc_flags24 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %42, i32 0, i32 1, !dbg !4734
  %43 = load i32, i32* %tc_flags24, align 8, !dbg !4734
  %44 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4735
  %size_flags25 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %44, i32 0, i32 2, !dbg !4736
  %45 = load i32, i32* %size_flags25, align 4, !dbg !4736
  %46 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4737
  %quality26 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %46, i32 0, i32 3, !dbg !4738
  %47 = load i32, i32* %quality26, align 8, !dbg !4738
  %call27 = call %struct.IndexBuildContext* @IMB_anim_index_rebuild_context(%struct.anim* %41, i32 %43, i32 %45, i32 %47), !dbg !4739
  %48 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4740
  %index_context = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %48, i32 0, i32 0, !dbg !4741
  store %struct.IndexBuildContext* %call27, %struct.IndexBuildContext** %index_context, align 8, !dbg !4742
  br label %if.end28, !dbg !4743

if.end28:                                         ; preds = %if.then22, %if.then20
  br label %if.end29, !dbg !4744

if.end29:                                         ; preds = %if.end28, %if.end5
  %49 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !4745
  store %struct.SeqIndexBuildContext* %49, %struct.SeqIndexBuildContext** %retval, align 8, !dbg !4746
  br label %return, !dbg !4746

return:                                           ; preds = %if.end29, %if.then4, %if.then
  %50 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %retval, align 8, !dbg !4747
  ret %struct.SeqIndexBuildContext* %50, !dbg !4747
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %scene, %struct.Scene* %scene_to, %struct.Sequence* %seq, i32 %dupe_flag) #0 !dbg !4748 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %scene_to.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %dupe_flag.addr = alloca i32, align 4
  %seqn = alloca %struct.Sequence*, align 8
  %s = alloca %struct.Sequence*, align 8
  %n = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !4751, metadata !DIExpression()), !dbg !4752
  store %struct.Scene* %scene_to, %struct.Scene** %scene_to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene_to.addr, metadata !4753, metadata !DIExpression()), !dbg !4754
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4755, metadata !DIExpression()), !dbg !4756
  store i32 %dupe_flag, i32* %dupe_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dupe_flag.addr, metadata !4757, metadata !DIExpression()), !dbg !4758
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !4759, metadata !DIExpression()), !dbg !4760
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4761
  %1 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !4762
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4763
  %3 = load i32, i32* %dupe_flag.addr, align 4, !dbg !4764
  %call = call %struct.Sequence* @seq_dupli(%struct.Scene* %0, %struct.Scene* %1, %struct.Sequence* %2, i32 %3), !dbg !4765
  store %struct.Sequence* %call, %struct.Sequence** %seqn, align 8, !dbg !4760
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4766
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !4768
  %5 = load i32, i32* %type, align 4, !dbg !4768
  %cmp = icmp eq i32 %5, 1, !dbg !4769
  br i1 %cmp, label %if.then, label %if.end5, !dbg !4770

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %s, metadata !4771, metadata !DIExpression()), !dbg !4773
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4774
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 36, !dbg !4776
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !4777
  %7 = load i8*, i8** %first, align 8, !dbg !4777
  %8 = bitcast i8* %7 to %struct.Sequence*, !dbg !4774
  store %struct.Sequence* %8, %struct.Sequence** %s, align 8, !dbg !4778
  br label %for.cond, !dbg !4779

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load %struct.Sequence*, %struct.Sequence** %s, align 8, !dbg !4780
  %tobool = icmp ne %struct.Sequence* %9, null, !dbg !4782
  br i1 %tobool, label %for.body, label %for.end, !dbg !4782

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.Sequence** %n, metadata !4783, metadata !DIExpression()), !dbg !4785
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !4786
  %11 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !4787
  %12 = load %struct.Sequence*, %struct.Sequence** %s, align 8, !dbg !4788
  %13 = load i32, i32* %dupe_flag.addr, align 4, !dbg !4789
  %call1 = call %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %10, %struct.Scene* %11, %struct.Sequence* %12, i32 %13), !dbg !4790
  store %struct.Sequence* %call1, %struct.Sequence** %n, align 8, !dbg !4785
  %14 = load %struct.Sequence*, %struct.Sequence** %n, align 8, !dbg !4791
  %tobool2 = icmp ne %struct.Sequence* %14, null, !dbg !4791
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4793

if.then3:                                         ; preds = %for.body
  %15 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !4794
  %seqbase4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 36, !dbg !4796
  %16 = load %struct.Sequence*, %struct.Sequence** %n, align 8, !dbg !4797
  %17 = bitcast %struct.Sequence* %16 to i8*, !dbg !4797
  call void @BLI_addtail(%struct.ListBase* %seqbase4, i8* %17), !dbg !4798
  br label %if.end, !dbg !4799

if.end:                                           ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !4800

for.inc:                                          ; preds = %if.end
  %18 = load %struct.Sequence*, %struct.Sequence** %s, align 8, !dbg !4801
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 0, !dbg !4802
  %19 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4802
  store %struct.Sequence* %19, %struct.Sequence** %s, align 8, !dbg !4803
  br label %for.cond, !dbg !4804, !llvm.loop !4805

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !4807

if.end5:                                          ; preds = %for.end, %entry
  %20 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !4808
  ret %struct.Sequence* %20, !dbg !4809
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_open_anim_file(%struct.Sequence* %seq) #0 !dbg !4810 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %name = alloca [1024 x i8], align 16
  %proxy = alloca %struct.StripProxy*, align 8
  %dir29 = alloca [1024 x i8], align 16
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !4811, metadata !DIExpression()), !dbg !4812
  call void @llvm.dbg.declare(metadata [1024 x i8]* %name, metadata !4813, metadata !DIExpression()), !dbg !4814
  call void @llvm.dbg.declare(metadata %struct.StripProxy** %proxy, metadata !4815, metadata !DIExpression()), !dbg !4816
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4817
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 30, !dbg !4819
  %1 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !4819
  %cmp = icmp ne %struct.anim* %1, null, !dbg !4820
  br i1 %cmp, label %if.then, label %if.end, !dbg !4821

if.then:                                          ; preds = %entry
  br label %if.end42, !dbg !4822

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !4824
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4825
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !4826
  %3 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !4826
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 7, !dbg !4827
  %arraydecay1 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !4825
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4828
  %strip2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 24, !dbg !4829
  %5 = load %struct.Strip*, %struct.Strip** %strip2, align 8, !dbg !4829
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %5, i32 0, i32 6, !dbg !4830
  %6 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !4830
  %name3 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %6, i32 0, i32 0, !dbg !4831
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %name3, i64 0, i64 0, !dbg !4828
  call void @BLI_join_dirfile(i8* %arraydecay, i64 1024, i8* %arraydecay1, i8* %arraydecay4), !dbg !4832
  %arraydecay5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !4833
  %7 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !4834
  %name6 = getelementptr inbounds %struct.Main, %struct.Main* %7, i32 0, i32 2, !dbg !4835
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name6, i64 0, i64 0, !dbg !4836
  %call = call zeroext i8 @BLI_path_abs(i8* %arraydecay5, i8* %arraydecay7), !dbg !4837
  %arraydecay8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !4838
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4839
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 5, !dbg !4840
  %9 = load i32, i32* %flag, align 8, !dbg !4840
  %and = and i32 %9, 16, !dbg !4841
  %tobool = icmp ne i32 %and, 0, !dbg !4842
  %10 = zext i1 %tobool to i64, !dbg !4842
  %cond = select i1 %tobool, i32 512, i32 0, !dbg !4842
  %or = or i32 1, %cond, !dbg !4843
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4844
  %streamindex = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 21, !dbg !4845
  %12 = load i16, i16* %streamindex, align 2, !dbg !4845
  %conv = sext i16 %12 to i32, !dbg !4844
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4846
  %strip9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 24, !dbg !4847
  %14 = load %struct.Strip*, %struct.Strip** %strip9, align 8, !dbg !4847
  %colorspace_settings = getelementptr inbounds %struct.Strip, %struct.Strip* %14, i32 0, i32 12, !dbg !4848
  %name10 = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %colorspace_settings, i32 0, i32 0, !dbg !4849
  %arraydecay11 = getelementptr inbounds [64 x i8], [64 x i8]* %name10, i64 0, i64 0, !dbg !4846
  %call12 = call %struct.anim* @openanim(i8* %arraydecay8, i32 %or, i32 %conv, i8* %arraydecay11), !dbg !4850
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4851
  %anim13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 30, !dbg !4852
  store %struct.anim* %call12, %struct.anim** %anim13, align 8, !dbg !4853
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4854
  %anim14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 30, !dbg !4856
  %17 = load %struct.anim*, %struct.anim** %anim14, align 8, !dbg !4856
  %cmp15 = icmp eq %struct.anim* %17, null, !dbg !4857
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !4858

if.then17:                                        ; preds = %if.end
  br label %if.end42, !dbg !4859

if.end18:                                         ; preds = %if.end
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4861
  %strip19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 24, !dbg !4862
  %19 = load %struct.Strip*, %struct.Strip** %strip19, align 8, !dbg !4862
  %proxy20 = getelementptr inbounds %struct.Strip, %struct.Strip* %19, i32 0, i32 8, !dbg !4863
  %20 = load %struct.StripProxy*, %struct.StripProxy** %proxy20, align 8, !dbg !4863
  store %struct.StripProxy* %20, %struct.StripProxy** %proxy, align 8, !dbg !4864
  %21 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !4865
  %cmp21 = icmp eq %struct.StripProxy* %21, null, !dbg !4867
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !4868

if.then23:                                        ; preds = %if.end18
  br label %if.end42, !dbg !4869

if.end24:                                         ; preds = %if.end18
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4871
  %flag25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 5, !dbg !4873
  %23 = load i32, i32* %flag25, align 8, !dbg !4873
  %and26 = and i32 %23, 524288, !dbg !4874
  %tobool27 = icmp ne i32 %and26, 0, !dbg !4874
  br i1 %tobool27, label %if.then28, label %if.end42, !dbg !4875

if.then28:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata [1024 x i8]* %dir29, metadata !4876, metadata !DIExpression()), !dbg !4878
  %arraydecay30 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir29, i64 0, i64 0, !dbg !4879
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4880
  %strip31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 24, !dbg !4881
  %25 = load %struct.Strip*, %struct.Strip** %strip31, align 8, !dbg !4881
  %proxy32 = getelementptr inbounds %struct.Strip, %struct.Strip* %25, i32 0, i32 8, !dbg !4882
  %26 = load %struct.StripProxy*, %struct.StripProxy** %proxy32, align 8, !dbg !4882
  %dir33 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %26, i32 0, i32 0, !dbg !4883
  %arraydecay34 = getelementptr inbounds [768 x i8], [768 x i8]* %dir33, i64 0, i64 0, !dbg !4880
  %call35 = call i8* @BLI_strncpy(i8* %arraydecay30, i8* %arraydecay34, i64 1024), !dbg !4884
  %arraydecay36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir29, i64 0, i64 0, !dbg !4885
  %27 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !4886
  %name37 = getelementptr inbounds %struct.Main, %struct.Main* %27, i32 0, i32 2, !dbg !4887
  %arraydecay38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name37, i64 0, i64 0, !dbg !4888
  %call39 = call zeroext i8 @BLI_path_abs(i8* %arraydecay36, i8* %arraydecay38), !dbg !4889
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !4890
  %anim40 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 30, !dbg !4891
  %29 = load %struct.anim*, %struct.anim** %anim40, align 8, !dbg !4891
  %arraydecay41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir29, i64 0, i64 0, !dbg !4892
  call void @IMB_anim_set_index_dir(%struct.anim* %29, i8* %arraydecay41), !dbg !4893
  br label %if.end42, !dbg !4894

if.end42:                                         ; preds = %if.then, %if.then17, %if.then23, %if.then28, %if.end24
  ret void, !dbg !4895
}

declare dso_local %struct.IndexBuildContext* @IMB_anim_index_rebuild_context(%struct.anim*, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_proxy_rebuild(%struct.SeqIndexBuildContext* %context, i16* %stop, i16* %do_update, float* %progress) #0 !dbg !4896 {
entry:
  %context.addr = alloca %struct.SeqIndexBuildContext*, align 8
  %stop.addr = alloca i16*, align 8
  %do_update.addr = alloca i16*, align 8
  %progress.addr = alloca float*, align 8
  %render_context = alloca %struct.SeqRenderData, align 8
  %seq = alloca %struct.Sequence*, align 8
  %scene = alloca %struct.Scene*, align 8
  %bmain = alloca %struct.Main*, align 8
  %cfra = alloca i32, align 4
  %tmp = alloca %struct.SeqRenderData, align 8
  store %struct.SeqIndexBuildContext* %context, %struct.SeqIndexBuildContext** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqIndexBuildContext** %context.addr, metadata !4899, metadata !DIExpression()), !dbg !4900
  store i16* %stop, i16** %stop.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %stop.addr, metadata !4901, metadata !DIExpression()), !dbg !4902
  store i16* %do_update, i16** %do_update.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %do_update.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  store float* %progress, float** %progress.addr, align 8
  call void @llvm.dbg.declare(metadata float** %progress.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData* %render_context, metadata !4907, metadata !DIExpression()), !dbg !4908
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4909, metadata !DIExpression()), !dbg !4910
  %0 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4911
  %seq1 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %0, i32 0, i32 6, !dbg !4912
  %1 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4912
  store %struct.Sequence* %1, %struct.Sequence** %seq, align 8, !dbg !4910
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4913, metadata !DIExpression()), !dbg !4914
  %2 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4915
  %scene2 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %2, i32 0, i32 5, !dbg !4916
  %3 = load %struct.Scene*, %struct.Scene** %scene2, align 8, !dbg !4916
  store %struct.Scene* %3, %struct.Scene** %scene, align 8, !dbg !4914
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain, metadata !4917, metadata !DIExpression()), !dbg !4918
  %4 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4919
  %bmain3 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %4, i32 0, i32 4, !dbg !4920
  %5 = load %struct.Main*, %struct.Main** %bmain3, align 8, !dbg !4920
  store %struct.Main* %5, %struct.Main** %bmain, align 8, !dbg !4918
  call void @llvm.dbg.declare(metadata i32* %cfra, metadata !4921, metadata !DIExpression()), !dbg !4922
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4923
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !4925
  %7 = load i32, i32* %type, align 4, !dbg !4925
  %cmp = icmp eq i32 %7, 3, !dbg !4926
  br i1 %cmp, label %if.then, label %if.end6, !dbg !4927

if.then:                                          ; preds = %entry
  %8 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4928
  %index_context = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %8, i32 0, i32 0, !dbg !4931
  %9 = load %struct.IndexBuildContext*, %struct.IndexBuildContext** %index_context, align 8, !dbg !4931
  %tobool = icmp ne %struct.IndexBuildContext* %9, null, !dbg !4928
  br i1 %tobool, label %if.then4, label %if.end, !dbg !4932

if.then4:                                         ; preds = %if.then
  %10 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4933
  %index_context5 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %10, i32 0, i32 0, !dbg !4935
  %11 = load %struct.IndexBuildContext*, %struct.IndexBuildContext** %index_context5, align 8, !dbg !4935
  %12 = load i16*, i16** %stop.addr, align 8, !dbg !4936
  %13 = load i16*, i16** %do_update.addr, align 8, !dbg !4937
  %14 = load float*, float** %progress.addr, align 8, !dbg !4938
  call void @IMB_anim_index_rebuild(%struct.IndexBuildContext* %11, i16* %12, i16* %13, float* %14), !dbg !4939
  br label %if.end, !dbg !4940

if.end:                                           ; preds = %if.then4, %if.then
  br label %for.end, !dbg !4941

if.end6:                                          ; preds = %entry
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4942
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 5, !dbg !4944
  %16 = load i32, i32* %flag, align 8, !dbg !4944
  %and = and i32 %16, 32768, !dbg !4945
  %tobool7 = icmp ne i32 %and, 0, !dbg !4945
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !4946

if.then8:                                         ; preds = %if.end6
  br label %for.end, !dbg !4947

if.end9:                                          ; preds = %if.end6
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4949
  %flag10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 5, !dbg !4951
  %18 = load i32, i32* %flag10, align 8, !dbg !4951
  %and11 = and i32 %18, 2097152, !dbg !4952
  %tobool12 = icmp ne i32 %and11, 0, !dbg !4952
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4953

if.then13:                                        ; preds = %if.end9
  br label %for.end, !dbg !4954

if.end14:                                         ; preds = %if.end9
  %19 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !4956
  %eval_ctx = getelementptr inbounds %struct.Main, %struct.Main* %19, i32 0, i32 46, !dbg !4957
  %20 = load %struct.EvaluationContext*, %struct.EvaluationContext** %eval_ctx, align 8, !dbg !4957
  %21 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !4958
  %22 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !4959
  %scene15 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %22, i32 0, i32 5, !dbg !4960
  %23 = load %struct.Scene*, %struct.Scene** %scene15, align 8, !dbg !4960
  %24 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4961
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %24, i32 0, i32 22, !dbg !4962
  %size = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 30, !dbg !4963
  %25 = load i16, i16* %size, align 2, !dbg !4963
  %conv = sext i16 %25 to i32, !dbg !4961
  %conv16 = sitofp i32 %conv to float, !dbg !4961
  %26 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4964
  %r17 = getelementptr inbounds %struct.Scene, %struct.Scene* %26, i32 0, i32 22, !dbg !4965
  %xsch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r17, i32 0, i32 33, !dbg !4966
  %27 = load i32, i32* %xsch, align 4, !dbg !4966
  %conv18 = sitofp i32 %27 to float, !dbg !4967
  %mul = fmul float %conv16, %conv18, !dbg !4968
  %div = fdiv float %mul, 1.000000e+02, !dbg !4969
  %add = fadd float %div, 5.000000e-01, !dbg !4970
  %conv19 = fptosi float %add to i32, !dbg !4971
  %28 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4972
  %r20 = getelementptr inbounds %struct.Scene, %struct.Scene* %28, i32 0, i32 22, !dbg !4973
  %size21 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r20, i32 0, i32 30, !dbg !4974
  %29 = load i16, i16* %size21, align 2, !dbg !4974
  %conv22 = sext i16 %29 to i32, !dbg !4972
  %conv23 = sitofp i32 %conv22 to float, !dbg !4972
  %30 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4975
  %r24 = getelementptr inbounds %struct.Scene, %struct.Scene* %30, i32 0, i32 22, !dbg !4976
  %ysch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r24, i32 0, i32 34, !dbg !4977
  %31 = load i32, i32* %ysch, align 8, !dbg !4977
  %conv25 = sitofp i32 %31 to float, !dbg !4978
  %mul26 = fmul float %conv23, %conv25, !dbg !4979
  %div27 = fdiv float %mul26, 1.000000e+02, !dbg !4980
  %add28 = fadd float %div27, 5.000000e-01, !dbg !4981
  %conv29 = fptosi float %add28 to i32, !dbg !4982
  call void @BKE_sequencer_new_render_data(%struct.SeqRenderData* sret %tmp, %struct.EvaluationContext* %20, %struct.Main* %21, %struct.Scene* %23, i32 %conv19, i32 %conv29, i32 100), !dbg !4983
  %32 = bitcast %struct.SeqRenderData* %render_context to i8*, !dbg !4983
  %33 = bitcast %struct.SeqRenderData* %tmp to i8*, !dbg !4983
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 48, i1 false), !dbg !4983
  %skip_cache = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %render_context, i32 0, i32 8, !dbg !4984
  store i8 1, i8* %skip_cache, align 4, !dbg !4985
  %is_proxy_render = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %render_context, i32 0, i32 9, !dbg !4986
  store i8 1, i8* %is_proxy_render, align 1, !dbg !4987
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4988
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 15, !dbg !4990
  %35 = load i32, i32* %startdisp, align 8, !dbg !4990
  %36 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4991
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 11, !dbg !4992
  %37 = load i32, i32* %startstill, align 8, !dbg !4992
  %add30 = add nsw i32 %35, %37, !dbg !4993
  store i32 %add30, i32* %cfra, align 4, !dbg !4994
  br label %for.cond, !dbg !4995

for.cond:                                         ; preds = %for.inc, %if.end14
  %38 = load i32, i32* %cfra, align 4, !dbg !4996
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4998
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 16, !dbg !4999
  %40 = load i32, i32* %enddisp, align 4, !dbg !4999
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5000
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 12, !dbg !5001
  %42 = load i32, i32* %endstill, align 4, !dbg !5001
  %sub = sub nsw i32 %40, %42, !dbg !5002
  %cmp31 = icmp slt i32 %38, %sub, !dbg !5003
  br i1 %cmp31, label %for.body, label %for.end, !dbg !5004

for.body:                                         ; preds = %for.cond
  %43 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5005
  %size_flags = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %43, i32 0, i32 2, !dbg !5008
  %44 = load i32, i32* %size_flags, align 4, !dbg !5008
  %and33 = and i32 %44, 1, !dbg !5009
  %tobool34 = icmp ne i32 %and33, 0, !dbg !5009
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !5010

if.then35:                                        ; preds = %for.body
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5011
  %46 = load i32, i32* %cfra, align 4, !dbg !5013
  call void @seq_proxy_build_frame(%struct.SeqRenderData* %render_context, %struct.Sequence* %45, i32 %46, i32 25), !dbg !5014
  br label %if.end36, !dbg !5015

if.end36:                                         ; preds = %if.then35, %for.body
  %47 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5016
  %size_flags37 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %47, i32 0, i32 2, !dbg !5018
  %48 = load i32, i32* %size_flags37, align 4, !dbg !5018
  %and38 = and i32 %48, 2, !dbg !5019
  %tobool39 = icmp ne i32 %and38, 0, !dbg !5019
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !5020

if.then40:                                        ; preds = %if.end36
  %49 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5021
  %50 = load i32, i32* %cfra, align 4, !dbg !5023
  call void @seq_proxy_build_frame(%struct.SeqRenderData* %render_context, %struct.Sequence* %49, i32 %50, i32 50), !dbg !5024
  br label %if.end41, !dbg !5025

if.end41:                                         ; preds = %if.then40, %if.end36
  %51 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5026
  %size_flags42 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %51, i32 0, i32 2, !dbg !5028
  %52 = load i32, i32* %size_flags42, align 4, !dbg !5028
  %and43 = and i32 %52, 4, !dbg !5029
  %tobool44 = icmp ne i32 %and43, 0, !dbg !5029
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !5030

if.then45:                                        ; preds = %if.end41
  %53 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5031
  %54 = load i32, i32* %cfra, align 4, !dbg !5033
  call void @seq_proxy_build_frame(%struct.SeqRenderData* %render_context, %struct.Sequence* %53, i32 %54, i32 75), !dbg !5034
  br label %if.end46, !dbg !5035

if.end46:                                         ; preds = %if.then45, %if.end41
  %55 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5036
  %size_flags47 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %55, i32 0, i32 2, !dbg !5038
  %56 = load i32, i32* %size_flags47, align 4, !dbg !5038
  %and48 = and i32 %56, 8, !dbg !5039
  %tobool49 = icmp ne i32 %and48, 0, !dbg !5039
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !5040

if.then50:                                        ; preds = %if.end46
  %57 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5041
  %58 = load i32, i32* %cfra, align 4, !dbg !5043
  call void @seq_proxy_build_frame(%struct.SeqRenderData* %render_context, %struct.Sequence* %57, i32 %58, i32 100), !dbg !5044
  br label %if.end51, !dbg !5045

if.end51:                                         ; preds = %if.then50, %if.end46
  %59 = load i32, i32* %cfra, align 4, !dbg !5046
  %60 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5047
  %startdisp52 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %60, i32 0, i32 15, !dbg !5048
  %61 = load i32, i32* %startdisp52, align 8, !dbg !5048
  %sub53 = sub nsw i32 %59, %61, !dbg !5049
  %62 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5050
  %startstill54 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 11, !dbg !5051
  %63 = load i32, i32* %startstill54, align 8, !dbg !5051
  %sub55 = sub nsw i32 %sub53, %63, !dbg !5052
  %conv56 = sitofp i32 %sub55 to float, !dbg !5053
  %64 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5054
  %enddisp57 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 16, !dbg !5055
  %65 = load i32, i32* %enddisp57, align 4, !dbg !5055
  %66 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5056
  %endstill58 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 12, !dbg !5057
  %67 = load i32, i32* %endstill58, align 4, !dbg !5057
  %sub59 = sub nsw i32 %65, %67, !dbg !5058
  %68 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5059
  %startdisp60 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %68, i32 0, i32 15, !dbg !5060
  %69 = load i32, i32* %startdisp60, align 8, !dbg !5060
  %sub61 = sub nsw i32 %sub59, %69, !dbg !5061
  %70 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5062
  %startstill62 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 11, !dbg !5063
  %71 = load i32, i32* %startstill62, align 8, !dbg !5063
  %sub63 = sub nsw i32 %sub61, %71, !dbg !5064
  %conv64 = sitofp i32 %sub63 to float, !dbg !5065
  %div65 = fdiv float %conv56, %conv64, !dbg !5066
  %72 = load float*, float** %progress.addr, align 8, !dbg !5067
  store float %div65, float* %72, align 4, !dbg !5068
  %73 = load i16*, i16** %do_update.addr, align 8, !dbg !5069
  store i16 1, i16* %73, align 2, !dbg !5070
  %74 = load i16*, i16** %stop.addr, align 8, !dbg !5071
  %75 = load i16, i16* %74, align 2, !dbg !5073
  %conv66 = sext i16 %75 to i32, !dbg !5073
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !5073
  br i1 %tobool67, label %if.then70, label %lor.lhs.false, !dbg !5074

lor.lhs.false:                                    ; preds = %if.end51
  %76 = load i8, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 7), align 8, !dbg !5075
  %conv68 = zext i8 %76 to i32, !dbg !5076
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !5076
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !5077

if.then70:                                        ; preds = %lor.lhs.false, %if.end51
  br label %for.end, !dbg !5078

if.end71:                                         ; preds = %lor.lhs.false
  br label %for.inc, !dbg !5079

for.inc:                                          ; preds = %if.end71
  %77 = load i32, i32* %cfra, align 4, !dbg !5080
  %inc = add nsw i32 %77, 1, !dbg !5080
  store i32 %inc, i32* %cfra, align 4, !dbg !5080
  br label %for.cond, !dbg !5081, !llvm.loop !5082

for.end:                                          ; preds = %if.end, %if.then8, %if.then13, %if.then70, %for.cond
  ret void, !dbg !5084
}

declare dso_local void @IMB_anim_index_rebuild(%struct.IndexBuildContext*, i16*, i16*, float*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @seq_proxy_build_frame(%struct.SeqRenderData* %context, %struct.Sequence* %seq, i32 %cfra, i32 %proxy_render_size) #0 !dbg !5085 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca i32, align 4
  %proxy_render_size.addr = alloca i32, align 4
  %name = alloca [1792 x i8], align 16
  %quality = alloca i32, align 4
  %rectx = alloca i32, align 4
  %recty = alloca i32, align 4
  %ok = alloca i32, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5088, metadata !DIExpression()), !dbg !5089
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !5090, metadata !DIExpression()), !dbg !5091
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !5092, metadata !DIExpression()), !dbg !5093
  store i32 %proxy_render_size, i32* %proxy_render_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %proxy_render_size.addr, metadata !5094, metadata !DIExpression()), !dbg !5095
  call void @llvm.dbg.declare(metadata [1792 x i8]* %name, metadata !5096, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata i32* %quality, metadata !5101, metadata !DIExpression()), !dbg !5102
  call void @llvm.dbg.declare(metadata i32* %rectx, metadata !5103, metadata !DIExpression()), !dbg !5104
  call void @llvm.dbg.declare(metadata i32* %recty, metadata !5105, metadata !DIExpression()), !dbg !5106
  call void @llvm.dbg.declare(metadata i32* %ok, metadata !5107, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !5109, metadata !DIExpression()), !dbg !5110
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5111
  %1 = load i32, i32* %cfra.addr, align 4, !dbg !5113
  %2 = load i32, i32* %proxy_render_size.addr, align 4, !dbg !5114
  %arraydecay = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !5115
  %call = call zeroext i8 @seq_proxy_get_fname(%struct.Sequence* %0, i32 %1, i32 %2, i8* %arraydecay), !dbg !5116
  %tobool = icmp ne i8 %call, 0, !dbg !5116
  br i1 %tobool, label %if.end, label %if.then, !dbg !5117

if.then:                                          ; preds = %entry
  br label %return, !dbg !5118

if.end:                                           ; preds = %entry
  %3 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5120
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5121
  %5 = load i32, i32* %cfra.addr, align 4, !dbg !5122
  %conv = sitofp i32 %5 to float, !dbg !5122
  %call1 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %3, %struct.Sequence* %4, float %conv), !dbg !5123
  store %struct.ImBuf* %call1, %struct.ImBuf** %ibuf, align 8, !dbg !5124
  %6 = load i32, i32* %proxy_render_size.addr, align 4, !dbg !5125
  %7 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5126
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %7, i32 0, i32 2, !dbg !5127
  %8 = load i32, i32* %x, align 8, !dbg !5127
  %mul = mul nsw i32 %6, %8, !dbg !5128
  %div = sdiv i32 %mul, 100, !dbg !5129
  store i32 %div, i32* %rectx, align 4, !dbg !5130
  %9 = load i32, i32* %proxy_render_size.addr, align 4, !dbg !5131
  %10 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5132
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %10, i32 0, i32 3, !dbg !5133
  %11 = load i32, i32* %y, align 4, !dbg !5133
  %mul2 = mul nsw i32 %9, %11, !dbg !5134
  %div3 = sdiv i32 %mul2, 100, !dbg !5135
  store i32 %div3, i32* %recty, align 4, !dbg !5136
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5137
  %x4 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %12, i32 0, i32 2, !dbg !5139
  %13 = load i32, i32* %x4, align 8, !dbg !5139
  %14 = load i32, i32* %rectx, align 4, !dbg !5140
  %cmp = icmp ne i32 %13, %14, !dbg !5141
  br i1 %cmp, label %if.then9, label %lor.lhs.false, !dbg !5142

lor.lhs.false:                                    ; preds = %if.end
  %15 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5143
  %y6 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %15, i32 0, i32 3, !dbg !5144
  %16 = load i32, i32* %y6, align 4, !dbg !5144
  %17 = load i32, i32* %recty, align 4, !dbg !5145
  %cmp7 = icmp ne i32 %16, %17, !dbg !5146
  br i1 %cmp7, label %if.then9, label %if.end15, !dbg !5147

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  %18 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5148
  %19 = load i32, i32* %rectx, align 4, !dbg !5150
  %conv10 = trunc i32 %19 to i16, !dbg !5151
  %conv11 = sext i16 %conv10 to i32, !dbg !5151
  %20 = load i32, i32* %recty, align 4, !dbg !5152
  %conv12 = trunc i32 %20 to i16, !dbg !5153
  %conv13 = sext i16 %conv12 to i32, !dbg !5153
  %call14 = call %struct.ImBuf* @IMB_scalefastImBuf(%struct.ImBuf* %18, i32 %conv11, i32 %conv13), !dbg !5154
  br label %if.end15, !dbg !5155

if.end15:                                         ; preds = %if.then9, %lor.lhs.false
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5156
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 24, !dbg !5157
  %22 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !5157
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %22, i32 0, i32 8, !dbg !5158
  %23 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !5158
  %quality16 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %23, i32 0, i32 4, !dbg !5159
  %24 = load i16, i16* %quality16, align 2, !dbg !5159
  %conv17 = sext i16 %24 to i32, !dbg !5156
  store i32 %conv17, i32* %quality, align 4, !dbg !5160
  %25 = load i32, i32* %quality, align 4, !dbg !5161
  %or = or i32 134217728, %25, !dbg !5162
  %26 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5163
  %ftype = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %26, i32 0, i32 26, !dbg !5164
  store i32 %or, i32* %ftype, align 8, !dbg !5165
  %27 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5166
  %planes = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %27, i32 0, i32 4, !dbg !5168
  %28 = load i8, i8* %planes, align 8, !dbg !5168
  %conv18 = zext i8 %28 to i32, !dbg !5166
  %cmp19 = icmp eq i32 %conv18, 32, !dbg !5169
  br i1 %cmp19, label %if.then21, label %if.end23, !dbg !5170

if.then21:                                        ; preds = %if.end15
  %29 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5171
  %planes22 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %29, i32 0, i32 4, !dbg !5172
  store i8 24, i8* %planes22, align 8, !dbg !5173
  br label %if.end23, !dbg !5171

if.end23:                                         ; preds = %if.then21, %if.end15
  %arraydecay24 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !5174
  call void @BLI_make_existing_file(i8* %arraydecay24), !dbg !5175
  %30 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5176
  %arraydecay25 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !5177
  %call26 = call signext i16 @IMB_saveiff(%struct.ImBuf* %30, i8* %arraydecay25, i32 73), !dbg !5178
  %conv27 = sext i16 %call26 to i32, !dbg !5178
  store i32 %conv27, i32* %ok, align 4, !dbg !5179
  %31 = load i32, i32* %ok, align 4, !dbg !5180
  %cmp28 = icmp eq i32 %31, 0, !dbg !5182
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !5183

if.then30:                                        ; preds = %if.end23
  %arraydecay31 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !5184
  call void @perror(i8* %arraydecay31), !dbg !5186
  br label %if.end32, !dbg !5187

if.end32:                                         ; preds = %if.then30, %if.end23
  %32 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5188
  call void @IMB_freeImBuf(%struct.ImBuf* %32), !dbg !5189
  br label %return, !dbg !5190

return:                                           ; preds = %if.end32, %if.then
  ret void, !dbg !5190
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_proxy_rebuild_finish(%struct.SeqIndexBuildContext* %context, i8 zeroext %stop) #0 !dbg !5191 {
entry:
  %context.addr = alloca %struct.SeqIndexBuildContext*, align 8
  %stop.addr = alloca i8, align 1
  store %struct.SeqIndexBuildContext* %context, %struct.SeqIndexBuildContext** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqIndexBuildContext** %context.addr, metadata !5194, metadata !DIExpression()), !dbg !5195
  store i8 %stop, i8* %stop.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stop.addr, metadata !5196, metadata !DIExpression()), !dbg !5197
  %0 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5198
  %index_context = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %0, i32 0, i32 0, !dbg !5200
  %1 = load %struct.IndexBuildContext*, %struct.IndexBuildContext** %index_context, align 8, !dbg !5200
  %tobool = icmp ne %struct.IndexBuildContext* %1, null, !dbg !5198
  br i1 %tobool, label %if.then, label %if.end, !dbg !5201

if.then:                                          ; preds = %entry
  %2 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5202
  %seq = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %2, i32 0, i32 6, !dbg !5204
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5204
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 30, !dbg !5205
  %4 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !5205
  call void @IMB_close_anim_proxies(%struct.anim* %4), !dbg !5206
  %5 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5207
  %orig_seq = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %5, i32 0, i32 7, !dbg !5208
  %6 = load %struct.Sequence*, %struct.Sequence** %orig_seq, align 8, !dbg !5208
  %anim1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 30, !dbg !5209
  %7 = load %struct.anim*, %struct.anim** %anim1, align 8, !dbg !5209
  call void @IMB_close_anim_proxies(%struct.anim* %7), !dbg !5210
  %8 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5211
  %index_context2 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %8, i32 0, i32 0, !dbg !5212
  %9 = load %struct.IndexBuildContext*, %struct.IndexBuildContext** %index_context2, align 8, !dbg !5212
  %10 = load i8, i8* %stop.addr, align 1, !dbg !5213
  %conv = zext i8 %10 to i16, !dbg !5213
  call void @IMB_anim_index_rebuild_finish(%struct.IndexBuildContext* %9, i16 signext %conv), !dbg !5214
  br label %if.end, !dbg !5215

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5216
  %seq3 = getelementptr inbounds %struct.SeqIndexBuildContext, %struct.SeqIndexBuildContext* %11, i32 0, i32 6, !dbg !5217
  %12 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !5217
  call void @seq_free_sequence_recurse(%struct.Scene* null, %struct.Sequence* %12), !dbg !5218
  %13 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5219
  %14 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context.addr, align 8, !dbg !5220
  %15 = bitcast %struct.SeqIndexBuildContext* %14 to i8*, !dbg !5220
  call void %13(i8* %15), !dbg !5219
  ret void, !dbg !5221
}

declare dso_local void @IMB_close_anim_proxies(%struct.anim*) #2

declare dso_local void @IMB_anim_index_rebuild_finish(%struct.IndexBuildContext*, i16 signext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ImBuf* @BKE_sequencer_render_mask_input(%struct.SeqRenderData* %context, i32 %mask_input_type, %struct.Sequence* %mask_sequence, %struct.Mask* %mask_id, i32 %cfra, i8 zeroext %make_float) #0 !dbg !5222 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %mask_input_type.addr = alloca i32, align 4
  %mask_sequence.addr = alloca %struct.Sequence*, align 8
  %mask_id.addr = alloca %struct.Mask*, align 8
  %cfra.addr = alloca i32, align 4
  %make_float.addr = alloca i8, align 1
  %mask_input = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  store i32 %mask_input_type, i32* %mask_input_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask_input_type.addr, metadata !5229, metadata !DIExpression()), !dbg !5230
  store %struct.Sequence* %mask_sequence, %struct.Sequence** %mask_sequence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %mask_sequence.addr, metadata !5231, metadata !DIExpression()), !dbg !5232
  store %struct.Mask* %mask_id, %struct.Mask** %mask_id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Mask** %mask_id.addr, metadata !5233, metadata !DIExpression()), !dbg !5234
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !5235, metadata !DIExpression()), !dbg !5236
  store i8 %make_float, i8* %make_float.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %make_float.addr, metadata !5237, metadata !DIExpression()), !dbg !5238
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %mask_input, metadata !5239, metadata !DIExpression()), !dbg !5240
  store %struct.ImBuf* null, %struct.ImBuf** %mask_input, align 8, !dbg !5240
  %0 = load i32, i32* %mask_input_type.addr, align 4, !dbg !5241
  %cmp = icmp eq i32 %0, 0, !dbg !5243
  br i1 %cmp, label %if.then, label %if.else11, !dbg !5244

if.then:                                          ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %mask_sequence.addr, align 8, !dbg !5245
  %tobool = icmp ne %struct.Sequence* %1, null, !dbg !5245
  br i1 %tobool, label %if.then1, label %if.end10, !dbg !5248

if.then1:                                         ; preds = %if.then
  %2 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5249
  %3 = load %struct.Sequence*, %struct.Sequence** %mask_sequence.addr, align 8, !dbg !5251
  %4 = load i32, i32* %cfra.addr, align 4, !dbg !5252
  %conv = sitofp i32 %4 to float, !dbg !5252
  %call = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %2, %struct.Sequence* %3, float %conv), !dbg !5253
  store %struct.ImBuf* %call, %struct.ImBuf** %mask_input, align 8, !dbg !5254
  %5 = load i8, i8* %make_float.addr, align 1, !dbg !5255
  %tobool2 = icmp ne i8 %5, 0, !dbg !5255
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !5257

if.then3:                                         ; preds = %if.then1
  %6 = load %struct.ImBuf*, %struct.ImBuf** %mask_input, align 8, !dbg !5258
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %6, i32 0, i32 9, !dbg !5261
  %7 = load float*, float** %rect_float, align 8, !dbg !5261
  %tobool4 = icmp ne float* %7, null, !dbg !5258
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !5262

if.then5:                                         ; preds = %if.then3
  %8 = load %struct.ImBuf*, %struct.ImBuf** %mask_input, align 8, !dbg !5263
  call void @IMB_float_from_rect(%struct.ImBuf* %8), !dbg !5264
  br label %if.end, !dbg !5264

if.end:                                           ; preds = %if.then5, %if.then3
  br label %if.end9, !dbg !5265

if.else:                                          ; preds = %if.then1
  %9 = load %struct.ImBuf*, %struct.ImBuf** %mask_input, align 8, !dbg !5266
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %9, i32 0, i32 8, !dbg !5269
  %10 = load i32*, i32** %rect, align 8, !dbg !5269
  %tobool6 = icmp ne i32* %10, null, !dbg !5266
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5270

if.then7:                                         ; preds = %if.else
  %11 = load %struct.ImBuf*, %struct.ImBuf** %mask_input, align 8, !dbg !5271
  call void @IMB_rect_from_float(%struct.ImBuf* %11), !dbg !5272
  br label %if.end8, !dbg !5272

if.end8:                                          ; preds = %if.then7, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  br label %if.end10, !dbg !5273

if.end10:                                         ; preds = %if.end9, %if.then
  br label %if.end18, !dbg !5274

if.else11:                                        ; preds = %entry
  %12 = load i32, i32* %mask_input_type.addr, align 4, !dbg !5275
  %cmp12 = icmp eq i32 %12, 1, !dbg !5277
  br i1 %cmp12, label %if.then14, label %if.end17, !dbg !5278

if.then14:                                        ; preds = %if.else11
  %13 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5279
  %14 = load %struct.Mask*, %struct.Mask** %mask_id.addr, align 8, !dbg !5281
  %15 = load i32, i32* %cfra.addr, align 4, !dbg !5282
  %conv15 = sitofp i32 %15 to float, !dbg !5282
  %16 = load i8, i8* %make_float.addr, align 1, !dbg !5283
  %call16 = call %struct.ImBuf* @seq_render_mask(%struct.SeqRenderData* %13, %struct.Mask* %14, float %conv15, i8 zeroext %16), !dbg !5284
  store %struct.ImBuf* %call16, %struct.ImBuf** %mask_input, align 8, !dbg !5285
  br label %if.end17, !dbg !5286

if.end17:                                         ; preds = %if.then14, %if.else11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end10
  %17 = load %struct.ImBuf*, %struct.ImBuf** %mask_input, align 8, !dbg !5287
  ret %struct.ImBuf* %17, !dbg !5288
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra) #0 !dbg !5289 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  %use_preprocess = alloca i8, align 1
  %is_proxy_image = alloca i8, align 1
  %nr = alloca float, align 4
  %type = alloca i32, align 4
  %is_preprocessed = alloca i8, align 1
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5292, metadata !DIExpression()), !dbg !5293
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !5294, metadata !DIExpression()), !dbg !5295
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !5296, metadata !DIExpression()), !dbg !5297
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !5298, metadata !DIExpression()), !dbg !5299
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !5299
  call void @llvm.dbg.declare(metadata i8* %use_preprocess, metadata !5300, metadata !DIExpression()), !dbg !5301
  store i8 0, i8* %use_preprocess, align 1, !dbg !5301
  call void @llvm.dbg.declare(metadata i8* %is_proxy_image, metadata !5302, metadata !DIExpression()), !dbg !5303
  store i8 0, i8* %is_proxy_image, align 1, !dbg !5303
  call void @llvm.dbg.declare(metadata float* %nr, metadata !5304, metadata !DIExpression()), !dbg !5305
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5306
  %1 = load float, float* %cfra.addr, align 4, !dbg !5307
  %call = call float @give_stripelem_index(%struct.Sequence* %0, float %1), !dbg !5308
  store float %call, float* %nr, align 4, !dbg !5305
  call void @llvm.dbg.declare(metadata i32* %type, metadata !5309, metadata !DIExpression()), !dbg !5310
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5311
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !5312
  %3 = load i32, i32* %type1, align 4, !dbg !5312
  %and = and i32 %3, 8, !dbg !5313
  %tobool = icmp ne i32 %and, 0, !dbg !5313
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !5314

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5315
  %type2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !5316
  %5 = load i32, i32* %type2, align 4, !dbg !5316
  %cmp = icmp ne i32 %5, 29, !dbg !5317
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5318

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !5318

cond.false:                                       ; preds = %land.lhs.true, %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5319
  %type3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !5320
  %7 = load i32, i32* %type3, align 4, !dbg !5320
  br label %cond.end, !dbg !5318

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 8, %cond.true ], [ %7, %cond.false ], !dbg !5318
  store i32 %cond, i32* %type, align 4, !dbg !5310
  call void @llvm.dbg.declare(metadata i8* %is_preprocessed, metadata !5321, metadata !DIExpression()), !dbg !5322
  %8 = load i32, i32* %type, align 4, !dbg !5323
  %cmp4 = icmp eq i32 %8, 0, !dbg !5323
  br i1 %cmp4, label %lor.end, label %lor.lhs.false, !dbg !5323

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load i32, i32* %type, align 4, !dbg !5323
  %cmp5 = icmp eq i32 %9, 3, !dbg !5323
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !5323

lor.rhs:                                          ; preds = %lor.lhs.false
  %10 = load i32, i32* %type, align 4, !dbg !5323
  %cmp6 = icmp eq i32 %10, 2, !dbg !5323
  br label %lor.end, !dbg !5323

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %cond.end
  %11 = phi i1 [ true, %lor.lhs.false ], [ true, %cond.end ], [ %cmp6, %lor.rhs ]
  %lnot = xor i1 %11, true, !dbg !5324
  %lnot.ext = zext i1 %lnot to i32, !dbg !5324
  %conv = trunc i32 %lnot.ext to i8, !dbg !5324
  store i8 %conv, i8* %is_preprocessed, align 1, !dbg !5322
  %12 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5325
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5326
  %14 = load float, float* %cfra.addr, align 4, !dbg !5327
  %call7 = call %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData* %12, %struct.Sequence* %13, float %14, i32 0), !dbg !5328
  store %struct.ImBuf* %call7, %struct.ImBuf** %ibuf, align 8, !dbg !5329
  %15 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5330
  %cmp8 = icmp eq %struct.ImBuf* %15, null, !dbg !5332
  br i1 %cmp8, label %if.then, label %if.else, !dbg !5333

if.then:                                          ; preds = %lor.end
  %16 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5334
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5336
  %18 = load float, float* %nr, align 4, !dbg !5337
  %call10 = call %struct.ImBuf* @copy_from_ibuf_still(%struct.SeqRenderData* %16, %struct.Sequence* %17, float %18), !dbg !5338
  store %struct.ImBuf* %call10, %struct.ImBuf** %ibuf, align 8, !dbg !5339
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5340
  %cmp11 = icmp eq %struct.ImBuf* %19, null, !dbg !5342
  br i1 %cmp11, label %if.then13, label %if.end51, !dbg !5343

if.then13:                                        ; preds = %if.then
  %20 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5344
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5346
  %22 = load float, float* %cfra.addr, align 4, !dbg !5347
  %call14 = call %struct.ImBuf* @BKE_sequencer_preprocessed_cache_get(%struct.SeqRenderData* %20, %struct.Sequence* %21, float %22, i32 0), !dbg !5348
  store %struct.ImBuf* %call14, %struct.ImBuf** %ibuf, align 8, !dbg !5349
  %23 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5350
  %cmp15 = icmp eq %struct.ImBuf* %23, null, !dbg !5352
  br i1 %cmp15, label %if.then17, label %if.end50, !dbg !5353

if.then17:                                        ; preds = %if.then13
  %24 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5354
  %cmp18 = icmp eq %struct.ImBuf* %24, null, !dbg !5357
  br i1 %cmp18, label %land.lhs.true20, label %if.end, !dbg !5358

land.lhs.true20:                                  ; preds = %if.then17
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5359
  %type21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 6, !dbg !5360
  %26 = load i32, i32* %type21, align 4, !dbg !5360
  %cmp22 = icmp ne i32 %26, 6, !dbg !5361
  br i1 %cmp22, label %if.then24, label %if.end, !dbg !5362

if.then24:                                        ; preds = %land.lhs.true20
  %27 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5363
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5365
  %29 = load float, float* %cfra.addr, align 4, !dbg !5366
  %conv25 = fptosi float %29 to i32, !dbg !5366
  %call26 = call %struct.ImBuf* @seq_proxy_fetch(%struct.SeqRenderData* %27, %struct.Sequence* %28, i32 %conv25), !dbg !5367
  store %struct.ImBuf* %call26, %struct.ImBuf** %ibuf, align 8, !dbg !5368
  %30 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5369
  %cmp27 = icmp ne %struct.ImBuf* %30, null, !dbg !5370
  %conv28 = zext i1 %cmp27 to i32, !dbg !5370
  %conv29 = trunc i32 %conv28 to i8, !dbg !5371
  store i8 %conv29, i8* %is_proxy_image, align 1, !dbg !5372
  br label %if.end, !dbg !5373

if.end:                                           ; preds = %if.then24, %land.lhs.true20, %if.then17
  %31 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5374
  %cmp30 = icmp eq %struct.ImBuf* %31, null, !dbg !5376
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !5377

if.then32:                                        ; preds = %if.end
  %32 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5378
  %33 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5379
  %34 = load float, float* %cfra.addr, align 4, !dbg !5380
  %call33 = call %struct.ImBuf* @do_render_strip_uncached(%struct.SeqRenderData* %32, %struct.Sequence* %33, float %34), !dbg !5381
  store %struct.ImBuf* %call33, %struct.ImBuf** %ibuf, align 8, !dbg !5382
  br label %if.end34, !dbg !5383

if.end34:                                         ; preds = %if.then32, %if.end
  %35 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5384
  %tobool35 = icmp ne %struct.ImBuf* %35, null, !dbg !5384
  br i1 %tobool35, label %if.then36, label %if.end49, !dbg !5386

if.then36:                                        ; preds = %if.end34
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5387
  %type37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 6, !dbg !5387
  %37 = load i32, i32* %type37, align 4, !dbg !5387
  %cmp38 = icmp eq i32 %37, 3, !dbg !5387
  br i1 %cmp38, label %if.then44, label %lor.lhs.false40, !dbg !5387

lor.lhs.false40:                                  ; preds = %if.then36
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5387
  %type41 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 6, !dbg !5387
  %39 = load i32, i32* %type41, align 4, !dbg !5387
  %cmp42 = icmp eq i32 %39, 6, !dbg !5387
  br i1 %cmp42, label %if.then44, label %if.end48, !dbg !5390

if.then44:                                        ; preds = %lor.lhs.false40, %if.then36
  %40 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5391
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %40, i32 0, i32 5, !dbg !5393
  %41 = load i32, i32* %preview_render_size, align 8, !dbg !5393
  %cmp45 = icmp ne i32 %41, 100, !dbg !5394
  %conv46 = zext i1 %cmp45 to i32, !dbg !5394
  %conv47 = trunc i32 %conv46 to i8, !dbg !5395
  store i8 %conv47, i8* %is_proxy_image, align 1, !dbg !5396
  br label %if.end48, !dbg !5397

if.end48:                                         ; preds = %if.then44, %lor.lhs.false40
  %42 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5398
  %43 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5399
  %44 = load float, float* %cfra.addr, align 4, !dbg !5400
  %45 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5401
  call void @BKE_sequencer_preprocessed_cache_put(%struct.SeqRenderData* %42, %struct.Sequence* %43, float %44, i32 0, %struct.ImBuf* %45), !dbg !5402
  br label %if.end49, !dbg !5403

if.end49:                                         ; preds = %if.end48, %if.end34
  br label %if.end50, !dbg !5404

if.end50:                                         ; preds = %if.end49, %if.then13
  br label %if.end51, !dbg !5405

if.end51:                                         ; preds = %if.end50, %if.then
  %46 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5406
  %tobool52 = icmp ne %struct.ImBuf* %46, null, !dbg !5406
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !5408

if.then53:                                        ; preds = %if.end51
  %47 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5409
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5410
  %49 = load float, float* %cfra.addr, align 4, !dbg !5411
  %call54 = call zeroext i8 @BKE_sequencer_input_have_to_preprocess(%struct.SeqRenderData* %47, %struct.Sequence* %48, float %49), !dbg !5412
  store i8 %call54, i8* %use_preprocess, align 1, !dbg !5413
  br label %if.end55, !dbg !5414

if.end55:                                         ; preds = %if.then53, %if.end51
  br label %if.end56, !dbg !5415

if.else:                                          ; preds = %lor.end
  br label %if.end56

if.end56:                                         ; preds = %if.else, %if.end55
  %50 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5416
  %cmp57 = icmp eq %struct.ImBuf* %50, null, !dbg !5418
  br i1 %cmp57, label %if.then59, label %if.end61, !dbg !5419

if.then59:                                        ; preds = %if.end56
  %51 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5420
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %51, i32 0, i32 3, !dbg !5422
  %52 = load i32, i32* %rectx, align 8, !dbg !5422
  %53 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5423
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %53, i32 0, i32 4, !dbg !5424
  %54 = load i32, i32* %recty, align 4, !dbg !5424
  %call60 = call %struct.ImBuf* @IMB_allocImBuf(i32 %52, i32 %54, i8 zeroext 32, i32 1), !dbg !5425
  store %struct.ImBuf* %call60, %struct.ImBuf** %ibuf, align 8, !dbg !5426
  %55 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5427
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %55, i32 0, i32 2, !dbg !5428
  %56 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5428
  %57 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5429
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %56, %struct.ImBuf* %57), !dbg !5430
  br label %if.end61, !dbg !5431

if.end61:                                         ; preds = %if.then59, %if.end56
  %58 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5432
  %is_proxy_render = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %58, i32 0, i32 9, !dbg !5434
  %59 = load i8, i8* %is_proxy_render, align 1, !dbg !5434
  %conv62 = zext i8 %59 to i32, !dbg !5432
  %cmp63 = icmp eq i32 %conv62, 0, !dbg !5435
  br i1 %cmp63, label %land.lhs.true65, label %if.end74, !dbg !5436

land.lhs.true65:                                  ; preds = %if.end61
  %60 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5437
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %60, i32 0, i32 2, !dbg !5438
  %61 = load i32, i32* %x, align 8, !dbg !5438
  %62 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5439
  %rectx66 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %62, i32 0, i32 3, !dbg !5440
  %63 = load i32, i32* %rectx66, align 8, !dbg !5440
  %cmp67 = icmp ne i32 %61, %63, !dbg !5441
  br i1 %cmp67, label %if.then73, label %lor.lhs.false69, !dbg !5442

lor.lhs.false69:                                  ; preds = %land.lhs.true65
  %64 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5443
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %64, i32 0, i32 3, !dbg !5444
  %65 = load i32, i32* %y, align 4, !dbg !5444
  %66 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5445
  %recty70 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %66, i32 0, i32 4, !dbg !5446
  %67 = load i32, i32* %recty70, align 4, !dbg !5446
  %cmp71 = icmp ne i32 %65, %67, !dbg !5447
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !5448

if.then73:                                        ; preds = %lor.lhs.false69, %land.lhs.true65
  store i8 1, i8* %use_preprocess, align 1, !dbg !5449
  br label %if.end74, !dbg !5451

if.end74:                                         ; preds = %if.then73, %lor.lhs.false69, %if.end61
  %68 = load i8, i8* %use_preprocess, align 1, !dbg !5452
  %tobool75 = icmp ne i8 %68, 0, !dbg !5452
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !5454

if.then76:                                        ; preds = %if.end74
  %69 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5455
  %70 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5456
  %71 = load float, float* %cfra.addr, align 4, !dbg !5457
  %72 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5458
  %73 = load i8, i8* %is_proxy_image, align 1, !dbg !5459
  %74 = load i8, i8* %is_preprocessed, align 1, !dbg !5460
  %call77 = call %struct.ImBuf* @input_preprocess(%struct.SeqRenderData* %69, %struct.Sequence* %70, float %71, %struct.ImBuf* %72, i8 zeroext %73, i8 zeroext %74), !dbg !5461
  store %struct.ImBuf* %call77, %struct.ImBuf** %ibuf, align 8, !dbg !5462
  br label %if.end78, !dbg !5463

if.end78:                                         ; preds = %if.then76, %if.end74
  %75 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5464
  %76 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5465
  %77 = load float, float* %cfra.addr, align 4, !dbg !5466
  %78 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5467
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %75, %struct.Sequence* %76, float %77, i32 0, %struct.ImBuf* %78), !dbg !5468
  %79 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5469
  ret %struct.ImBuf* %79, !dbg !5470
}

declare dso_local void @IMB_rect_from_float(%struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_mask(%struct.SeqRenderData* %context, %struct.Mask* %mask, float %nr, i8 zeroext %make_float) #0 !dbg !5471 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %mask.addr = alloca %struct.Mask*, align 8
  %nr.addr = alloca float, align 4
  %make_float.addr = alloca i8, align 1
  %ibuf = alloca %struct.ImBuf*, align 8
  %maskbuf = alloca float*, align 8
  %i = alloca i32, align 4
  %mask_temp = alloca %struct.Mask*, align 8
  %mr_handle = alloca %struct.MaskRasterHandle*, align 8
  %fp_src = alloca float*, align 8
  %fp_dst = alloca float*, align 8
  %fp_src24 = alloca float*, align 8
  %ub_dst = alloca i8*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  store %struct.Mask* %mask, %struct.Mask** %mask.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Mask** %mask.addr, metadata !5476, metadata !DIExpression()), !dbg !5477
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !5478, metadata !DIExpression()), !dbg !5479
  store i8 %make_float, i8* %make_float.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %make_float.addr, metadata !5480, metadata !DIExpression()), !dbg !5481
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !5482, metadata !DIExpression()), !dbg !5483
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !5483
  call void @llvm.dbg.declare(metadata float** %maskbuf, metadata !5484, metadata !DIExpression()), !dbg !5485
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5486, metadata !DIExpression()), !dbg !5487
  %0 = load %struct.Mask*, %struct.Mask** %mask.addr, align 8, !dbg !5488
  %tobool = icmp ne %struct.Mask* %0, null, !dbg !5488
  br i1 %tobool, label %if.else, label %if.then, !dbg !5490

if.then:                                          ; preds = %entry
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !5491
  br label %return, !dbg !5491

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Mask** %mask_temp, metadata !5493, metadata !DIExpression()), !dbg !5495
  call void @llvm.dbg.declare(metadata %struct.MaskRasterHandle** %mr_handle, metadata !5496, metadata !DIExpression()), !dbg !5501
  %1 = load %struct.Mask*, %struct.Mask** %mask.addr, align 8, !dbg !5502
  %call = call %struct.Mask* @BKE_mask_copy_nolib(%struct.Mask* %1), !dbg !5503
  store %struct.Mask* %call, %struct.Mask** %mask_temp, align 8, !dbg !5504
  %2 = load %struct.Mask*, %struct.Mask** %mask_temp, align 8, !dbg !5505
  %3 = load %struct.Mask*, %struct.Mask** %mask.addr, align 8, !dbg !5506
  %sfra = getelementptr inbounds %struct.Mask, %struct.Mask* %3, i32 0, i32 5, !dbg !5507
  %4 = load i32, i32* %sfra, align 8, !dbg !5507
  %conv = sitofp i32 %4 to float, !dbg !5506
  %5 = load float, float* %nr.addr, align 4, !dbg !5508
  %add = fadd float %conv, %5, !dbg !5509
  call void @BKE_mask_evaluate(%struct.Mask* %2, float %add, i8 zeroext 1), !dbg !5510
  %6 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !5511
  %7 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5512
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %7, i32 0, i32 3, !dbg !5513
  %8 = load i32, i32* %rectx, align 8, !dbg !5513
  %conv1 = sext i32 %8 to i64, !dbg !5512
  %mul = mul i64 4, %conv1, !dbg !5514
  %9 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5515
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %9, i32 0, i32 4, !dbg !5516
  %10 = load i32, i32* %recty, align 4, !dbg !5516
  %conv2 = sext i32 %10 to i64, !dbg !5515
  %mul3 = mul i64 %mul, %conv2, !dbg !5517
  %call4 = call i8* %6(i64 %mul3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.seq_render_mask, i64 0, i64 0)), !dbg !5511
  %11 = bitcast i8* %call4 to float*, !dbg !5511
  store float* %11, float** %maskbuf, align 8, !dbg !5518
  %call5 = call %struct.MaskRasterHandle* @BKE_maskrasterize_handle_new(), !dbg !5519
  store %struct.MaskRasterHandle* %call5, %struct.MaskRasterHandle** %mr_handle, align 8, !dbg !5520
  %12 = load %struct.MaskRasterHandle*, %struct.MaskRasterHandle** %mr_handle, align 8, !dbg !5521
  %13 = load %struct.Mask*, %struct.Mask** %mask_temp, align 8, !dbg !5522
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5523
  %rectx6 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %14, i32 0, i32 3, !dbg !5524
  %15 = load i32, i32* %rectx6, align 8, !dbg !5524
  %16 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5525
  %recty7 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %16, i32 0, i32 4, !dbg !5526
  %17 = load i32, i32* %recty7, align 4, !dbg !5526
  call void @BKE_maskrasterize_handle_init(%struct.MaskRasterHandle* %12, %struct.Mask* %13, i32 %15, i32 %17, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !5527
  %18 = load %struct.Mask*, %struct.Mask** %mask_temp, align 8, !dbg !5528
  call void @BKE_mask_free_nolib(%struct.Mask* %18), !dbg !5529
  %19 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5530
  %20 = load %struct.Mask*, %struct.Mask** %mask_temp, align 8, !dbg !5531
  %21 = bitcast %struct.Mask* %20 to i8*, !dbg !5531
  call void %19(i8* %21), !dbg !5530
  %22 = load %struct.MaskRasterHandle*, %struct.MaskRasterHandle** %mr_handle, align 8, !dbg !5532
  %23 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5533
  %rectx8 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %23, i32 0, i32 3, !dbg !5534
  %24 = load i32, i32* %rectx8, align 8, !dbg !5534
  %25 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5535
  %recty9 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %25, i32 0, i32 4, !dbg !5536
  %26 = load i32, i32* %recty9, align 4, !dbg !5536
  %27 = load float*, float** %maskbuf, align 8, !dbg !5537
  call void @BKE_maskrasterize_buffer(%struct.MaskRasterHandle* %22, i32 %24, i32 %26, float* %27), !dbg !5538
  %28 = load %struct.MaskRasterHandle*, %struct.MaskRasterHandle** %mr_handle, align 8, !dbg !5539
  call void @BKE_maskrasterize_handle_free(%struct.MaskRasterHandle* %28), !dbg !5540
  br label %if.end

if.end:                                           ; preds = %if.else
  %29 = load i8, i8* %make_float.addr, align 1, !dbg !5541
  %tobool10 = icmp ne i8 %29, 0, !dbg !5541
  br i1 %tobool10, label %if.then11, label %if.else23, !dbg !5543

if.then11:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata float** %fp_src, metadata !5544, metadata !DIExpression()), !dbg !5546
  call void @llvm.dbg.declare(metadata float** %fp_dst, metadata !5547, metadata !DIExpression()), !dbg !5548
  %30 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5549
  %rectx12 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %30, i32 0, i32 3, !dbg !5550
  %31 = load i32, i32* %rectx12, align 8, !dbg !5550
  %32 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5551
  %recty13 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %32, i32 0, i32 4, !dbg !5552
  %33 = load i32, i32* %recty13, align 4, !dbg !5552
  %call14 = call %struct.ImBuf* @IMB_allocImBuf(i32 %31, i32 %33, i8 zeroext 32, i32 32), !dbg !5553
  store %struct.ImBuf* %call14, %struct.ImBuf** %ibuf, align 8, !dbg !5554
  %34 = load float*, float** %maskbuf, align 8, !dbg !5555
  store float* %34, float** %fp_src, align 8, !dbg !5556
  %35 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5557
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %35, i32 0, i32 9, !dbg !5558
  %36 = load float*, float** %rect_float, align 8, !dbg !5558
  store float* %36, float** %fp_dst, align 8, !dbg !5559
  %37 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5560
  %rectx15 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %37, i32 0, i32 3, !dbg !5561
  %38 = load i32, i32* %rectx15, align 8, !dbg !5561
  %39 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5562
  %recty16 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %39, i32 0, i32 4, !dbg !5563
  %40 = load i32, i32* %recty16, align 4, !dbg !5563
  %mul17 = mul nsw i32 %38, %40, !dbg !5564
  store i32 %mul17, i32* %i, align 4, !dbg !5565
  br label %while.cond, !dbg !5566

while.cond:                                       ; preds = %while.body, %if.then11
  %41 = load i32, i32* %i, align 4, !dbg !5567
  %dec = add nsw i32 %41, -1, !dbg !5567
  store i32 %dec, i32* %i, align 4, !dbg !5567
  %tobool18 = icmp ne i32 %dec, 0, !dbg !5566
  br i1 %tobool18, label %while.body, label %while.end, !dbg !5566

while.body:                                       ; preds = %while.cond
  %42 = load float*, float** %fp_src, align 8, !dbg !5568
  %43 = load float, float* %42, align 4, !dbg !5570
  %44 = load float*, float** %fp_dst, align 8, !dbg !5571
  %arrayidx = getelementptr inbounds float, float* %44, i64 2, !dbg !5571
  store float %43, float* %arrayidx, align 4, !dbg !5572
  %45 = load float*, float** %fp_dst, align 8, !dbg !5573
  %arrayidx19 = getelementptr inbounds float, float* %45, i64 1, !dbg !5573
  store float %43, float* %arrayidx19, align 4, !dbg !5574
  %46 = load float*, float** %fp_dst, align 8, !dbg !5575
  %arrayidx20 = getelementptr inbounds float, float* %46, i64 0, !dbg !5575
  store float %43, float* %arrayidx20, align 4, !dbg !5576
  %47 = load float*, float** %fp_dst, align 8, !dbg !5577
  %arrayidx21 = getelementptr inbounds float, float* %47, i64 3, !dbg !5577
  store float 1.000000e+00, float* %arrayidx21, align 4, !dbg !5578
  %48 = load float*, float** %fp_src, align 8, !dbg !5579
  %add.ptr = getelementptr inbounds float, float* %48, i64 1, !dbg !5579
  store float* %add.ptr, float** %fp_src, align 8, !dbg !5579
  %49 = load float*, float** %fp_dst, align 8, !dbg !5580
  %add.ptr22 = getelementptr inbounds float, float* %49, i64 4, !dbg !5580
  store float* %add.ptr22, float** %fp_dst, align 8, !dbg !5580
  br label %while.cond, !dbg !5566, !llvm.loop !5581

while.end:                                        ; preds = %while.cond
  br label %if.end44, !dbg !5583

if.else23:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata float** %fp_src24, metadata !5584, metadata !DIExpression()), !dbg !5586
  call void @llvm.dbg.declare(metadata i8** %ub_dst, metadata !5587, metadata !DIExpression()), !dbg !5588
  %50 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5589
  %rectx25 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %50, i32 0, i32 3, !dbg !5590
  %51 = load i32, i32* %rectx25, align 8, !dbg !5590
  %52 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5591
  %recty26 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %52, i32 0, i32 4, !dbg !5592
  %53 = load i32, i32* %recty26, align 4, !dbg !5592
  %call27 = call %struct.ImBuf* @IMB_allocImBuf(i32 %51, i32 %53, i8 zeroext 32, i32 1), !dbg !5593
  store %struct.ImBuf* %call27, %struct.ImBuf** %ibuf, align 8, !dbg !5594
  %54 = load float*, float** %maskbuf, align 8, !dbg !5595
  store float* %54, float** %fp_src24, align 8, !dbg !5596
  %55 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5597
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %55, i32 0, i32 8, !dbg !5598
  %56 = load i32*, i32** %rect, align 8, !dbg !5598
  %57 = bitcast i32* %56 to i8*, !dbg !5599
  store i8* %57, i8** %ub_dst, align 8, !dbg !5600
  %58 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5601
  %rectx28 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %58, i32 0, i32 3, !dbg !5602
  %59 = load i32, i32* %rectx28, align 8, !dbg !5602
  %60 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5603
  %recty29 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %60, i32 0, i32 4, !dbg !5604
  %61 = load i32, i32* %recty29, align 4, !dbg !5604
  %mul30 = mul nsw i32 %59, %61, !dbg !5605
  store i32 %mul30, i32* %i, align 4, !dbg !5606
  br label %while.cond31, !dbg !5607

while.cond31:                                     ; preds = %while.body34, %if.else23
  %62 = load i32, i32* %i, align 4, !dbg !5608
  %dec32 = add nsw i32 %62, -1, !dbg !5608
  store i32 %dec32, i32* %i, align 4, !dbg !5608
  %tobool33 = icmp ne i32 %dec32, 0, !dbg !5607
  br i1 %tobool33, label %while.body34, label %while.end43, !dbg !5607

while.body34:                                     ; preds = %while.cond31
  %63 = load float*, float** %fp_src24, align 8, !dbg !5609
  %64 = load float, float* %63, align 4, !dbg !5611
  %mul35 = fmul float %64, 2.550000e+02, !dbg !5612
  %conv36 = fptoui float %mul35 to i8, !dbg !5613
  %65 = load i8*, i8** %ub_dst, align 8, !dbg !5614
  %arrayidx37 = getelementptr inbounds i8, i8* %65, i64 2, !dbg !5614
  store i8 %conv36, i8* %arrayidx37, align 1, !dbg !5615
  %66 = load i8*, i8** %ub_dst, align 8, !dbg !5616
  %arrayidx38 = getelementptr inbounds i8, i8* %66, i64 1, !dbg !5616
  store i8 %conv36, i8* %arrayidx38, align 1, !dbg !5617
  %67 = load i8*, i8** %ub_dst, align 8, !dbg !5618
  %arrayidx39 = getelementptr inbounds i8, i8* %67, i64 0, !dbg !5618
  store i8 %conv36, i8* %arrayidx39, align 1, !dbg !5619
  %68 = load i8*, i8** %ub_dst, align 8, !dbg !5620
  %arrayidx40 = getelementptr inbounds i8, i8* %68, i64 3, !dbg !5620
  store i8 -1, i8* %arrayidx40, align 1, !dbg !5621
  %69 = load float*, float** %fp_src24, align 8, !dbg !5622
  %add.ptr41 = getelementptr inbounds float, float* %69, i64 1, !dbg !5622
  store float* %add.ptr41, float** %fp_src24, align 8, !dbg !5622
  %70 = load i8*, i8** %ub_dst, align 8, !dbg !5623
  %add.ptr42 = getelementptr inbounds i8, i8* %70, i64 4, !dbg !5623
  store i8* %add.ptr42, i8** %ub_dst, align 8, !dbg !5623
  br label %while.cond31, !dbg !5607, !llvm.loop !5624

while.end43:                                      ; preds = %while.cond31
  br label %if.end44

if.end44:                                         ; preds = %while.end43, %while.end
  %71 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5626
  %72 = load float*, float** %maskbuf, align 8, !dbg !5627
  %73 = bitcast float* %72 to i8*, !dbg !5627
  call void %71(i8* %73), !dbg !5626
  %74 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5628
  store %struct.ImBuf* %74, %struct.ImBuf** %retval, align 8, !dbg !5629
  br label %return, !dbg !5629

return:                                           ; preds = %if.end44, %if.then
  %75 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !5630
  ret %struct.ImBuf* %75, !dbg !5630
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_color_balance_apply(%struct.StripColorBalance* %cb, %struct.ImBuf* %ibuf, float %mul, i8 zeroext %make_float, %struct.ImBuf* %mask_input) #0 !dbg !5631 {
entry:
  %cb.addr = alloca %struct.StripColorBalance*, align 8
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %mul.addr = alloca float, align 4
  %make_float.addr = alloca i8, align 1
  %mask_input.addr = alloca %struct.ImBuf*, align 8
  %init_data = alloca %struct.ColorBalanceInitData, align 8
  store %struct.StripColorBalance* %cb, %struct.StripColorBalance** %cb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb.addr, metadata !5634, metadata !DIExpression()), !dbg !5635
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !5636, metadata !DIExpression()), !dbg !5637
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !5638, metadata !DIExpression()), !dbg !5639
  store i8 %make_float, i8* %make_float.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %make_float.addr, metadata !5640, metadata !DIExpression()), !dbg !5641
  store %struct.ImBuf* %mask_input, %struct.ImBuf** %mask_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %mask_input.addr, metadata !5642, metadata !DIExpression()), !dbg !5643
  call void @llvm.dbg.declare(metadata %struct.ColorBalanceInitData* %init_data, metadata !5644, metadata !DIExpression()), !dbg !5645
  %0 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5646
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %0, i32 0, i32 9, !dbg !5648
  %1 = load float*, float** %rect_float, align 8, !dbg !5648
  %tobool = icmp ne float* %1, null, !dbg !5646
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5649

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %make_float.addr, align 1, !dbg !5650
  %conv = zext i8 %2 to i32, !dbg !5650
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5650
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5651

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5652
  %call = call zeroext i8 @imb_addrectfloatImBuf(%struct.ImBuf* %3), !dbg !5653
  br label %if.end, !dbg !5653

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %4 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb.addr, align 8, !dbg !5654
  %cb2 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %init_data, i32 0, i32 0, !dbg !5655
  store %struct.StripColorBalance* %4, %struct.StripColorBalance** %cb2, align 8, !dbg !5656
  %5 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5657
  %ibuf3 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %init_data, i32 0, i32 1, !dbg !5658
  store %struct.ImBuf* %5, %struct.ImBuf** %ibuf3, align 8, !dbg !5659
  %6 = load float, float* %mul.addr, align 4, !dbg !5660
  %mul4 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %init_data, i32 0, i32 2, !dbg !5661
  store float %6, float* %mul4, align 8, !dbg !5662
  %7 = load i8, i8* %make_float.addr, align 1, !dbg !5663
  %make_float5 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %init_data, i32 0, i32 4, !dbg !5664
  store i8 %7, i8* %make_float5, align 8, !dbg !5665
  %8 = load %struct.ImBuf*, %struct.ImBuf** %mask_input.addr, align 8, !dbg !5666
  %mask = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %init_data, i32 0, i32 3, !dbg !5667
  store %struct.ImBuf* %8, %struct.ImBuf** %mask, align 8, !dbg !5668
  %9 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5669
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %9, i32 0, i32 3, !dbg !5670
  %10 = load i32, i32* %y, align 4, !dbg !5670
  %11 = bitcast %struct.ColorBalanceInitData* %init_data to i8*, !dbg !5671
  call void @IMB_processor_apply_threaded(i32 %10, i32 64, i8* %11, void (i8*, i32, i32, i8*)* @color_balance_init_handle, i8* (i8*)* @color_balance_do_thread), !dbg !5672
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5673
  %rect_float6 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %12, i32 0, i32 9, !dbg !5675
  %13 = load float*, float** %rect_float6, align 8, !dbg !5675
  %tobool7 = icmp ne float* %13, null, !dbg !5673
  br i1 %tobool7, label %land.lhs.true8, label %if.end11, !dbg !5676

land.lhs.true8:                                   ; preds = %if.end
  %14 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5677
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %14, i32 0, i32 8, !dbg !5678
  %15 = load i32*, i32** %rect, align 8, !dbg !5678
  %tobool9 = icmp ne i32* %15, null, !dbg !5677
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !5679

if.then10:                                        ; preds = %land.lhs.true8
  %16 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !5680
  call void @imb_freerectImBuf(%struct.ImBuf* %16), !dbg !5681
  br label %if.end11, !dbg !5681

if.end11:                                         ; preds = %if.then10, %land.lhs.true8, %if.end
  ret void, !dbg !5682
}

declare dso_local zeroext i8 @imb_addrectfloatImBuf(%struct.ImBuf*) #2

declare dso_local void @IMB_processor_apply_threaded(i32, i32, i8*, void (i8*, i32, i32, i8*)*, i8* (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @color_balance_init_handle(i8* %handle_v, i32 %start_line, i32 %tot_line, i8* %init_data_v) #0 !dbg !5683 {
entry:
  %handle_v.addr = alloca i8*, align 8
  %start_line.addr = alloca i32, align 4
  %tot_line.addr = alloca i32, align 4
  %init_data_v.addr = alloca i8*, align 8
  %handle = alloca %struct.ColorBalanceThread*, align 8
  %init_data = alloca %struct.ColorBalanceInitData*, align 8
  %ibuf = alloca %struct.ImBuf*, align 8
  %mask = alloca %struct.ImBuf*, align 8
  %offset = alloca i32, align 4
  store i8* %handle_v, i8** %handle_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handle_v.addr, metadata !5686, metadata !DIExpression()), !dbg !5687
  store i32 %start_line, i32* %start_line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_line.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  store i32 %tot_line, i32* %tot_line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tot_line.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  store i8* %init_data_v, i8** %init_data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %init_data_v.addr, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.ColorBalanceThread** %handle, metadata !5694, metadata !DIExpression()), !dbg !5695
  %0 = load i8*, i8** %handle_v.addr, align 8, !dbg !5696
  %1 = bitcast i8* %0 to %struct.ColorBalanceThread*, !dbg !5697
  store %struct.ColorBalanceThread* %1, %struct.ColorBalanceThread** %handle, align 8, !dbg !5695
  call void @llvm.dbg.declare(metadata %struct.ColorBalanceInitData** %init_data, metadata !5698, metadata !DIExpression()), !dbg !5699
  %2 = load i8*, i8** %init_data_v.addr, align 8, !dbg !5700
  %3 = bitcast i8* %2 to %struct.ColorBalanceInitData*, !dbg !5701
  store %struct.ColorBalanceInitData* %3, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5699
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !5702, metadata !DIExpression()), !dbg !5703
  %4 = load %struct.ColorBalanceInitData*, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5704
  %ibuf1 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %4, i32 0, i32 1, !dbg !5705
  %5 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1, align 8, !dbg !5705
  store %struct.ImBuf* %5, %struct.ImBuf** %ibuf, align 8, !dbg !5703
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %mask, metadata !5706, metadata !DIExpression()), !dbg !5707
  %6 = load %struct.ColorBalanceInitData*, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5708
  %mask2 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %6, i32 0, i32 3, !dbg !5709
  %7 = load %struct.ImBuf*, %struct.ImBuf** %mask2, align 8, !dbg !5709
  store %struct.ImBuf* %7, %struct.ImBuf** %mask, align 8, !dbg !5707
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !5710, metadata !DIExpression()), !dbg !5711
  %8 = load i32, i32* %start_line.addr, align 4, !dbg !5712
  %mul = mul nsw i32 4, %8, !dbg !5713
  %9 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5714
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %9, i32 0, i32 2, !dbg !5715
  %10 = load i32, i32* %x, align 8, !dbg !5715
  %mul3 = mul nsw i32 %mul, %10, !dbg !5716
  store i32 %mul3, i32* %offset, align 4, !dbg !5711
  %11 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5717
  %12 = bitcast %struct.ColorBalanceThread* %11 to i8*, !dbg !5718
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 64, i1 false), !dbg !5718
  %13 = load %struct.ColorBalanceInitData*, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5719
  %cb = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %13, i32 0, i32 0, !dbg !5720
  %14 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb, align 8, !dbg !5720
  %15 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5721
  %cb4 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %15, i32 0, i32 0, !dbg !5722
  store %struct.StripColorBalance* %14, %struct.StripColorBalance** %cb4, align 8, !dbg !5723
  %16 = load %struct.ColorBalanceInitData*, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5724
  %mul5 = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %16, i32 0, i32 2, !dbg !5725
  %17 = load float, float* %mul5, align 8, !dbg !5725
  %18 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5726
  %mul6 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %18, i32 0, i32 1, !dbg !5727
  store float %17, float* %mul6, align 8, !dbg !5728
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5729
  %x7 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %19, i32 0, i32 2, !dbg !5730
  %20 = load i32, i32* %x7, align 8, !dbg !5730
  %21 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5731
  %width = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %21, i32 0, i32 2, !dbg !5732
  store i32 %20, i32* %width, align 4, !dbg !5733
  %22 = load i32, i32* %tot_line.addr, align 4, !dbg !5734
  %23 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5735
  %height = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %23, i32 0, i32 3, !dbg !5736
  store i32 %22, i32* %height, align 8, !dbg !5737
  %24 = load %struct.ColorBalanceInitData*, %struct.ColorBalanceInitData** %init_data, align 8, !dbg !5738
  %make_float = getelementptr inbounds %struct.ColorBalanceInitData, %struct.ColorBalanceInitData* %24, i32 0, i32 4, !dbg !5739
  %25 = load i8, i8* %make_float, align 8, !dbg !5739
  %26 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5740
  %make_float8 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %26, i32 0, i32 8, !dbg !5741
  store i8 %25, i8* %make_float8, align 8, !dbg !5742
  %27 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5743
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %27, i32 0, i32 8, !dbg !5745
  %28 = load i32*, i32** %rect, align 8, !dbg !5745
  %tobool = icmp ne i32* %28, null, !dbg !5743
  br i1 %tobool, label %if.then, label %if.end, !dbg !5746

if.then:                                          ; preds = %entry
  %29 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5747
  %rect9 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %29, i32 0, i32 8, !dbg !5748
  %30 = load i32*, i32** %rect9, align 8, !dbg !5748
  %31 = bitcast i32* %30 to i8*, !dbg !5749
  %32 = load i32, i32* %offset, align 4, !dbg !5750
  %idx.ext = sext i32 %32 to i64, !dbg !5751
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %idx.ext, !dbg !5751
  %33 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5752
  %rect10 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %33, i32 0, i32 4, !dbg !5753
  store i8* %add.ptr, i8** %rect10, align 8, !dbg !5754
  br label %if.end, !dbg !5752

if.end:                                           ; preds = %if.then, %entry
  %34 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5755
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %34, i32 0, i32 9, !dbg !5757
  %35 = load float*, float** %rect_float, align 8, !dbg !5757
  %tobool11 = icmp ne float* %35, null, !dbg !5755
  br i1 %tobool11, label %if.then12, label %if.end17, !dbg !5758

if.then12:                                        ; preds = %if.end
  %36 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !5759
  %rect_float13 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %36, i32 0, i32 9, !dbg !5760
  %37 = load float*, float** %rect_float13, align 8, !dbg !5760
  %38 = load i32, i32* %offset, align 4, !dbg !5761
  %idx.ext14 = sext i32 %38 to i64, !dbg !5762
  %add.ptr15 = getelementptr inbounds float, float* %37, i64 %idx.ext14, !dbg !5762
  %39 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5763
  %rect_float16 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %39, i32 0, i32 6, !dbg !5764
  store float* %add.ptr15, float** %rect_float16, align 8, !dbg !5765
  br label %if.end17, !dbg !5763

if.end17:                                         ; preds = %if.then12, %if.end
  %40 = load %struct.ImBuf*, %struct.ImBuf** %mask, align 8, !dbg !5766
  %tobool18 = icmp ne %struct.ImBuf* %40, null, !dbg !5766
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !5768

if.then19:                                        ; preds = %if.end17
  %41 = load %struct.ImBuf*, %struct.ImBuf** %mask, align 8, !dbg !5769
  %rect20 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %41, i32 0, i32 8, !dbg !5772
  %42 = load i32*, i32** %rect20, align 8, !dbg !5772
  %tobool21 = icmp ne i32* %42, null, !dbg !5769
  br i1 %tobool21, label %if.then22, label %if.end26, !dbg !5773

if.then22:                                        ; preds = %if.then19
  %43 = load %struct.ImBuf*, %struct.ImBuf** %mask, align 8, !dbg !5774
  %rect23 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %43, i32 0, i32 8, !dbg !5775
  %44 = load i32*, i32** %rect23, align 8, !dbg !5775
  %45 = bitcast i32* %44 to i8*, !dbg !5776
  %46 = load i32, i32* %offset, align 4, !dbg !5777
  %idx.ext24 = sext i32 %46 to i64, !dbg !5778
  %add.ptr25 = getelementptr inbounds i8, i8* %45, i64 %idx.ext24, !dbg !5778
  %47 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5779
  %mask_rect = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %47, i32 0, i32 5, !dbg !5780
  store i8* %add.ptr25, i8** %mask_rect, align 8, !dbg !5781
  br label %if.end26, !dbg !5779

if.end26:                                         ; preds = %if.then22, %if.then19
  %48 = load %struct.ImBuf*, %struct.ImBuf** %mask, align 8, !dbg !5782
  %rect_float27 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %48, i32 0, i32 9, !dbg !5784
  %49 = load float*, float** %rect_float27, align 8, !dbg !5784
  %tobool28 = icmp ne float* %49, null, !dbg !5782
  br i1 %tobool28, label %if.then29, label %if.end33, !dbg !5785

if.then29:                                        ; preds = %if.end26
  %50 = load %struct.ImBuf*, %struct.ImBuf** %mask, align 8, !dbg !5786
  %rect_float30 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %50, i32 0, i32 9, !dbg !5787
  %51 = load float*, float** %rect_float30, align 8, !dbg !5787
  %52 = load i32, i32* %offset, align 4, !dbg !5788
  %idx.ext31 = sext i32 %52 to i64, !dbg !5789
  %add.ptr32 = getelementptr inbounds float, float* %51, i64 %idx.ext31, !dbg !5789
  %53 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5790
  %mask_rect_float = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %53, i32 0, i32 7, !dbg !5791
  store float* %add.ptr32, float** %mask_rect_float, align 8, !dbg !5792
  br label %if.end33, !dbg !5790

if.end33:                                         ; preds = %if.then29, %if.end26
  br label %if.end36, !dbg !5793

if.else:                                          ; preds = %if.end17
  %54 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5794
  %mask_rect34 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %54, i32 0, i32 5, !dbg !5796
  store i8* null, i8** %mask_rect34, align 8, !dbg !5797
  %55 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %handle, align 8, !dbg !5798
  %mask_rect_float35 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %55, i32 0, i32 7, !dbg !5799
  store float* null, float** %mask_rect_float35, align 8, !dbg !5800
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.end33
  ret void, !dbg !5801
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @color_balance_do_thread(i8* %thread_data_v) #0 !dbg !5802 {
entry:
  %thread_data_v.addr = alloca i8*, align 8
  %thread_data = alloca %struct.ColorBalanceThread*, align 8
  %cb = alloca %struct.StripColorBalance*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %rect = alloca i8*, align 8
  %mask_rect = alloca i8*, align 8
  %rect_float = alloca float*, align 8
  %mask_rect_float = alloca float*, align 8
  %mul = alloca float, align 4
  store i8* %thread_data_v, i8** %thread_data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %thread_data_v.addr, metadata !5805, metadata !DIExpression()), !dbg !5806
  call void @llvm.dbg.declare(metadata %struct.ColorBalanceThread** %thread_data, metadata !5807, metadata !DIExpression()), !dbg !5808
  %0 = load i8*, i8** %thread_data_v.addr, align 8, !dbg !5809
  %1 = bitcast i8* %0 to %struct.ColorBalanceThread*, !dbg !5810
  store %struct.ColorBalanceThread* %1, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5808
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb, metadata !5811, metadata !DIExpression()), !dbg !5812
  %2 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5813
  %cb1 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %2, i32 0, i32 0, !dbg !5814
  %3 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb1, align 8, !dbg !5814
  store %struct.StripColorBalance* %3, %struct.StripColorBalance** %cb, align 8, !dbg !5812
  call void @llvm.dbg.declare(metadata i32* %width, metadata !5815, metadata !DIExpression()), !dbg !5816
  %4 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5817
  %width2 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %4, i32 0, i32 2, !dbg !5818
  %5 = load i32, i32* %width2, align 4, !dbg !5818
  store i32 %5, i32* %width, align 4, !dbg !5816
  call void @llvm.dbg.declare(metadata i32* %height, metadata !5819, metadata !DIExpression()), !dbg !5820
  %6 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5821
  %height3 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %6, i32 0, i32 3, !dbg !5822
  %7 = load i32, i32* %height3, align 8, !dbg !5822
  store i32 %7, i32* %height, align 4, !dbg !5820
  call void @llvm.dbg.declare(metadata i8** %rect, metadata !5823, metadata !DIExpression()), !dbg !5824
  %8 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5825
  %rect4 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %8, i32 0, i32 4, !dbg !5826
  %9 = load i8*, i8** %rect4, align 8, !dbg !5826
  store i8* %9, i8** %rect, align 8, !dbg !5824
  call void @llvm.dbg.declare(metadata i8** %mask_rect, metadata !5827, metadata !DIExpression()), !dbg !5828
  %10 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5829
  %mask_rect5 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %10, i32 0, i32 5, !dbg !5830
  %11 = load i8*, i8** %mask_rect5, align 8, !dbg !5830
  store i8* %11, i8** %mask_rect, align 8, !dbg !5828
  call void @llvm.dbg.declare(metadata float** %rect_float, metadata !5831, metadata !DIExpression()), !dbg !5832
  %12 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5833
  %rect_float6 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %12, i32 0, i32 6, !dbg !5834
  %13 = load float*, float** %rect_float6, align 8, !dbg !5834
  store float* %13, float** %rect_float, align 8, !dbg !5832
  call void @llvm.dbg.declare(metadata float** %mask_rect_float, metadata !5835, metadata !DIExpression()), !dbg !5836
  %14 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5837
  %mask_rect_float7 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %14, i32 0, i32 7, !dbg !5838
  %15 = load float*, float** %mask_rect_float7, align 8, !dbg !5838
  store float* %15, float** %mask_rect_float, align 8, !dbg !5836
  call void @llvm.dbg.declare(metadata float* %mul, metadata !5839, metadata !DIExpression()), !dbg !5840
  %16 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5841
  %mul8 = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %16, i32 0, i32 1, !dbg !5842
  %17 = load float, float* %mul8, align 8, !dbg !5842
  store float %17, float* %mul, align 4, !dbg !5840
  %18 = load float*, float** %rect_float, align 8, !dbg !5843
  %tobool = icmp ne float* %18, null, !dbg !5843
  br i1 %tobool, label %if.then, label %if.else, !dbg !5845

if.then:                                          ; preds = %entry
  %19 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb, align 8, !dbg !5846
  %20 = load float*, float** %rect_float, align 8, !dbg !5848
  %21 = load float*, float** %mask_rect_float, align 8, !dbg !5849
  %22 = load i32, i32* %width, align 4, !dbg !5850
  %23 = load i32, i32* %height, align 4, !dbg !5851
  %24 = load float, float* %mul, align 4, !dbg !5852
  call void @color_balance_float_float(%struct.StripColorBalance* %19, float* %20, float* %21, i32 %22, i32 %23, float %24), !dbg !5853
  br label %if.end12, !dbg !5854

if.else:                                          ; preds = %entry
  %25 = load %struct.ColorBalanceThread*, %struct.ColorBalanceThread** %thread_data, align 8, !dbg !5855
  %make_float = getelementptr inbounds %struct.ColorBalanceThread, %struct.ColorBalanceThread* %25, i32 0, i32 8, !dbg !5857
  %26 = load i8, i8* %make_float, align 8, !dbg !5857
  %tobool9 = icmp ne i8 %26, 0, !dbg !5855
  br i1 %tobool9, label %if.then10, label %if.else11, !dbg !5858

if.then10:                                        ; preds = %if.else
  %27 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb, align 8, !dbg !5859
  %28 = load i8*, i8** %rect, align 8, !dbg !5861
  %29 = load float*, float** %rect_float, align 8, !dbg !5862
  %30 = load i8*, i8** %mask_rect, align 8, !dbg !5863
  %31 = load i32, i32* %width, align 4, !dbg !5864
  %32 = load i32, i32* %height, align 4, !dbg !5865
  %33 = load float, float* %mul, align 4, !dbg !5866
  call void @color_balance_byte_float(%struct.StripColorBalance* %27, i8* %28, float* %29, i8* %30, i32 %31, i32 %32, float %33), !dbg !5867
  br label %if.end, !dbg !5868

if.else11:                                        ; preds = %if.else
  %34 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb, align 8, !dbg !5869
  %35 = load i8*, i8** %rect, align 8, !dbg !5871
  %36 = load i8*, i8** %mask_rect, align 8, !dbg !5872
  %37 = load i32, i32* %width, align 4, !dbg !5873
  %38 = load i32, i32* %height, align 4, !dbg !5874
  %39 = load float, float* %mul, align 4, !dbg !5875
  call void @color_balance_byte_byte(%struct.StripColorBalance* %34, i8* %35, i8* %36, i32 %37, i32 %38, float %39), !dbg !5876
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then10
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  ret i8* null, !dbg !5877
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequencer_input_have_to_preprocess(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %UNUSED_cfra) #0 !dbg !5878 {
entry:
  %retval = alloca i8, align 1
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %UNUSED_cfra.addr = alloca float, align 4
  %mul = alloca float, align 4
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5881, metadata !DIExpression()), !dbg !5882
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !5883, metadata !DIExpression()), !dbg !5884
  store float %UNUSED_cfra, float* %UNUSED_cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %UNUSED_cfra.addr, metadata !5885, metadata !DIExpression()), !dbg !5886
  call void @llvm.dbg.declare(metadata float* %mul, metadata !5887, metadata !DIExpression()), !dbg !5888
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5889
  %is_proxy_render = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %0, i32 0, i32 9, !dbg !5891
  %1 = load i8, i8* %is_proxy_render, align 1, !dbg !5891
  %tobool = icmp ne i8 %1, 0, !dbg !5889
  br i1 %tobool, label %if.then, label %if.end, !dbg !5892

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5893
  br label %return, !dbg !5893

if.end:                                           ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5895
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 5, !dbg !5897
  %3 = load i32, i32* %flag, align 8, !dbg !5897
  %and = and i32 %3, 210960, !dbg !5898
  %tobool1 = icmp ne i32 %and, 0, !dbg !5898
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5899

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !5900
  br label %return, !dbg !5900

if.end3:                                          ; preds = %if.end
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5902
  %mul4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 18, !dbg !5903
  %5 = load float, float* %mul4, align 4, !dbg !5903
  store float %5, float* %mul, align 4, !dbg !5904
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5905
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 46, !dbg !5907
  %7 = load i32, i32* %blend_mode, align 8, !dbg !5907
  %cmp = icmp eq i32 %7, 0, !dbg !5908
  br i1 %cmp, label %if.then5, label %if.end7, !dbg !5909

if.then5:                                         ; preds = %if.end3
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5910
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 47, !dbg !5912
  %9 = load float, float* %blend_opacity, align 4, !dbg !5912
  %div = fdiv float %9, 1.000000e+02, !dbg !5913
  %10 = load float, float* %mul, align 4, !dbg !5914
  %mul6 = fmul float %10, %div, !dbg !5914
  store float %mul6, float* %mul, align 4, !dbg !5914
  br label %if.end7, !dbg !5915

if.end7:                                          ; preds = %if.then5, %if.end3
  %11 = load float, float* %mul, align 4, !dbg !5916
  %cmp8 = fcmp une float %11, 1.000000e+00, !dbg !5918
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !5919

if.then9:                                         ; preds = %if.end7
  store i8 1, i8* %retval, align 1, !dbg !5920
  br label %return, !dbg !5920

if.end10:                                         ; preds = %if.end7
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5922
  %sat = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 17, !dbg !5924
  %13 = load float, float* %sat, align 8, !dbg !5924
  %cmp11 = fcmp une float %13, 1.000000e+00, !dbg !5925
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5926

if.then12:                                        ; preds = %if.end10
  store i8 1, i8* %retval, align 1, !dbg !5927
  br label %return, !dbg !5927

if.end13:                                         ; preds = %if.end10
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !5929
  %modifiers = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 51, !dbg !5931
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %modifiers, i32 0, i32 0, !dbg !5932
  %15 = load i8*, i8** %first, align 8, !dbg !5932
  %tobool14 = icmp ne i8* %15, null, !dbg !5929
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5933

if.then15:                                        ; preds = %if.end13
  store i8 1, i8* %retval, align 1, !dbg !5934
  br label %return, !dbg !5934

if.end16:                                         ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !5936
  br label %return, !dbg !5936

return:                                           ; preds = %if.end16, %if.then15, %if.then12, %if.then9, %if.then2, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !5937
  ret i8 %16, !dbg !5937
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ImBuf* @BKE_sequencer_give_ibuf(%struct.SeqRenderData* %context, float %cfra, i32 %chanshown) #0 !dbg !5938 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %cfra.addr = alloca float, align 4
  %chanshown.addr = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %seqbasep = alloca %struct.ListBase*, align 8
  %count = alloca i32, align 4
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !5941, metadata !DIExpression()), !dbg !5942
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !5943, metadata !DIExpression()), !dbg !5944
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !5945, metadata !DIExpression()), !dbg !5946
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5947, metadata !DIExpression()), !dbg !5948
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5949
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %0, i32 0, i32 2, !dbg !5950
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5950
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5951
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !5948
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep, metadata !5952, metadata !DIExpression()), !dbg !5953
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5954
  %cmp = icmp eq %struct.Editing* %2, null, !dbg !5956
  br i1 %cmp, label %if.then, label %if.end, !dbg !5957

if.then:                                          ; preds = %entry
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !5958
  br label %return, !dbg !5958

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %chanshown.addr, align 4, !dbg !5959
  %cmp1 = icmp slt i32 %3, 0, !dbg !5961
  br i1 %cmp1, label %land.lhs.true, label %if.else, !dbg !5962

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5963
  %metastack = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 2, !dbg !5964
  %call2 = call zeroext i8 @BLI_listbase_is_empty(%struct.ListBase* %metastack), !dbg !5965
  %tobool = icmp ne i8 %call2, 0, !dbg !5965
  br i1 %tobool, label %if.else, label %if.then3, !dbg !5966

if.then3:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5967, metadata !DIExpression()), !dbg !5969
  %5 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5970
  %metastack4 = getelementptr inbounds %struct.Editing, %struct.Editing* %5, i32 0, i32 2, !dbg !5971
  %call5 = call i32 @BLI_countlist(%struct.ListBase* %metastack4), !dbg !5972
  store i32 %call5, i32* %count, align 4, !dbg !5969
  %6 = load i32, i32* %count, align 4, !dbg !5973
  %7 = load i32, i32* %chanshown.addr, align 4, !dbg !5974
  %add = add nsw i32 %6, %7, !dbg !5975
  %call6 = call i32 @max_ii(i32 %add, i32 0), !dbg !5976
  store i32 %call6, i32* %count, align 4, !dbg !5977
  %8 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5978
  %metastack7 = getelementptr inbounds %struct.Editing, %struct.Editing* %8, i32 0, i32 2, !dbg !5979
  %9 = load i32, i32* %count, align 4, !dbg !5980
  %call8 = call i8* @BLI_findlink(%struct.ListBase* %metastack7, i32 %9), !dbg !5981
  %10 = bitcast i8* %call8 to %struct.MetaStack*, !dbg !5982
  %oldbasep = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %10, i32 0, i32 2, !dbg !5983
  %11 = load %struct.ListBase*, %struct.ListBase** %oldbasep, align 8, !dbg !5983
  store %struct.ListBase* %11, %struct.ListBase** %seqbasep, align 8, !dbg !5984
  br label %if.end10, !dbg !5985

if.else:                                          ; preds = %land.lhs.true, %if.end
  %12 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5986
  %seqbasep9 = getelementptr inbounds %struct.Editing, %struct.Editing* %12, i32 0, i32 0, !dbg !5988
  %13 = load %struct.ListBase*, %struct.ListBase** %seqbasep9, align 8, !dbg !5988
  store %struct.ListBase* %13, %struct.ListBase** %seqbasep, align 8, !dbg !5989
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then3
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !5990
  %15 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5991
  %16 = load float, float* %cfra.addr, align 4, !dbg !5992
  %17 = load i32, i32* %chanshown.addr, align 4, !dbg !5993
  %call11 = call %struct.ImBuf* @seq_render_strip_stack(%struct.SeqRenderData* %14, %struct.ListBase* %15, float %16, i32 %17), !dbg !5994
  store %struct.ImBuf* %call11, %struct.ImBuf** %retval, align 8, !dbg !5995
  br label %return, !dbg !5995

return:                                           ; preds = %if.end10, %if.then
  %18 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !5996
  ret %struct.ImBuf* %18, !dbg !5996
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BLI_listbase_is_empty(%struct.ListBase* %lb) #0 !dbg !5997 {
entry:
  %lb.addr = alloca %struct.ListBase*, align 8
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  %0 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !6004
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !6005
  %1 = load i8*, i8** %first, align 8, !dbg !6005
  %cmp = icmp eq i8* %1, null, !dbg !6006
  %conv = zext i1 %cmp to i32, !dbg !6006
  %conv1 = trunc i32 %conv to i8, !dbg !6007
  ret i8 %conv1, !dbg !6008
}

declare dso_local i32 @BLI_countlist(%struct.ListBase*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_ii(i32 %a, i32 %b) #0 !dbg !6009 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !6012, metadata !DIExpression()), !dbg !6013
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !6014, metadata !DIExpression()), !dbg !6015
  %0 = load i32, i32* %b.addr, align 4, !dbg !6016
  %1 = load i32, i32* %a.addr, align 4, !dbg !6017
  %cmp = icmp slt i32 %0, %1, !dbg !6018
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6019

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !6020
  br label %cond.end, !dbg !6019

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !6021
  br label %cond.end, !dbg !6019

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !6019
  ret i32 %cond, !dbg !6022
}

declare dso_local i8* @BLI_findlink(%struct.ListBase*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_strip_stack(%struct.SeqRenderData* %context, %struct.ListBase* %seqbasep, float %cfra, i32 %chanshown) #0 !dbg !6023 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %cfra.addr = alloca float, align 4
  %chanshown.addr = alloca i32, align 4
  %seq_arr = alloca [33 x %struct.Sequence*], align 16
  %count = alloca i32, align 4
  %i = alloca i32, align 4
  %out = alloca %struct.ImBuf*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %early_out = alloca i32, align 4
  %ibuf1 = alloca %struct.ImBuf*, align 8
  %ibuf2 = alloca %struct.ImBuf*, align 8
  %early_out57 = alloca i32, align 4
  %seq58 = alloca %struct.Sequence*, align 8
  %ibuf185 = alloca %struct.ImBuf*, align 8
  %ibuf289 = alloca %struct.ImBuf*, align 8
  %seq102 = alloca %struct.Sequence*, align 8
  %ibuf1109 = alloca %struct.ImBuf*, align 8
  %ibuf2110 = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !6026, metadata !DIExpression()), !dbg !6027
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  call void @llvm.dbg.declare(metadata [33 x %struct.Sequence*]* %seq_arr, metadata !6034, metadata !DIExpression()), !dbg !6035
  call void @llvm.dbg.declare(metadata i32* %count, metadata !6036, metadata !DIExpression()), !dbg !6037
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %out, metadata !6040, metadata !DIExpression()), !dbg !6041
  store %struct.ImBuf* null, %struct.ImBuf** %out, align 8, !dbg !6041
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !6042
  %1 = load float, float* %cfra.addr, align 4, !dbg !6043
  %conv = fptosi float %1 to i32, !dbg !6043
  %2 = load i32, i32* %chanshown.addr, align 4, !dbg !6044
  %3 = bitcast [33 x %struct.Sequence*]* %seq_arr to %struct.Sequence**, !dbg !6045
  %call = call i32 @get_shown_sequences(%struct.ListBase* %0, i32 %conv, i32 %2, %struct.Sequence** %3), !dbg !6046
  store i32 %call, i32* %count, align 4, !dbg !6047
  %4 = load i32, i32* %count, align 4, !dbg !6048
  %cmp = icmp eq i32 %4, 0, !dbg !6050
  br i1 %cmp, label %if.then, label %if.end, !dbg !6051

if.then:                                          ; preds = %entry
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !6052
  br label %return, !dbg !6052

if.end:                                           ; preds = %entry
  %5 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6054
  %6 = load i32, i32* %count, align 4, !dbg !6055
  %sub = sub nsw i32 %6, 1, !dbg !6056
  %idxprom = sext i32 %sub to i64, !dbg !6057
  %arrayidx = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom, !dbg !6057
  %7 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !6057
  %8 = load float, float* %cfra.addr, align 4, !dbg !6058
  %call2 = call %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData* %5, %struct.Sequence* %7, float %8, i32 1), !dbg !6059
  store %struct.ImBuf* %call2, %struct.ImBuf** %out, align 8, !dbg !6060
  %9 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6061
  %tobool = icmp ne %struct.ImBuf* %9, null, !dbg !6061
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !6063

if.then3:                                         ; preds = %if.end
  %10 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6064
  store %struct.ImBuf* %10, %struct.ImBuf** %retval, align 8, !dbg !6066
  br label %return, !dbg !6066

if.end4:                                          ; preds = %if.end
  %11 = load i32, i32* %count, align 4, !dbg !6067
  %cmp5 = icmp eq i32 %11, 1, !dbg !6069
  br i1 %cmp5, label %if.then7, label %if.end53, !dbg !6070

if.then7:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6071, metadata !DIExpression()), !dbg !6073
  %arrayidx8 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 0, !dbg !6074
  %12 = load %struct.Sequence*, %struct.Sequence** %arrayidx8, align 16, !dbg !6074
  store %struct.Sequence* %12, %struct.Sequence** %seq, align 8, !dbg !6073
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6075
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 46, !dbg !6075
  %14 = load i32, i32* %blend_mode, align 8, !dbg !6075
  %cmp9 = icmp eq i32 %14, 0, !dbg !6075
  br i1 %cmp9, label %if.then18, label %lor.lhs.false, !dbg !6075

lor.lhs.false:                                    ; preds = %if.then7
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6075
  %blend_mode11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 46, !dbg !6075
  %16 = load i32, i32* %blend_mode11, align 8, !dbg !6075
  %cmp12 = icmp eq i32 %16, 8, !dbg !6075
  br i1 %cmp12, label %if.then18, label %lor.lhs.false14, !dbg !6075

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6075
  %blend_mode15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 46, !dbg !6075
  %18 = load i32, i32* %blend_mode15, align 8, !dbg !6075
  %cmp16 = icmp eq i32 %18, 11, !dbg !6075
  br i1 %cmp16, label %if.then18, label %if.else50, !dbg !6077

if.then18:                                        ; preds = %lor.lhs.false14, %lor.lhs.false, %if.then7
  call void @llvm.dbg.declare(metadata i32* %early_out, metadata !6078, metadata !DIExpression()), !dbg !6080
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6081
  %blend_mode19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 46, !dbg !6083
  %20 = load i32, i32* %blend_mode19, align 8, !dbg !6083
  %cmp20 = icmp eq i32 %20, 0, !dbg !6084
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !6085

if.then22:                                        ; preds = %if.then18
  store i32 -1, i32* %early_out, align 4, !dbg !6086
  br label %if.end24, !dbg !6088

if.else:                                          ; preds = %if.then18
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6089
  %call23 = call i32 @seq_get_early_out_for_blend_mode(%struct.Sequence* %21), !dbg !6091
  store i32 %call23, i32* %early_out, align 4, !dbg !6092
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then22
  %22 = load i32, i32* %early_out, align 4, !dbg !6093
  %cmp25 = icmp eq i32 %22, -1, !dbg !6093
  br i1 %cmp25, label %if.then30, label %lor.lhs.false27, !dbg !6093

lor.lhs.false27:                                  ; preds = %if.end24
  %23 = load i32, i32* %early_out, align 4, !dbg !6093
  %cmp28 = icmp eq i32 %23, 2, !dbg !6093
  br i1 %cmp28, label %if.then30, label %if.else32, !dbg !6095

if.then30:                                        ; preds = %lor.lhs.false27, %if.end24
  %24 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6096
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6098
  %26 = load float, float* %cfra.addr, align 4, !dbg !6099
  %call31 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %24, %struct.Sequence* %25, float %26), !dbg !6100
  store %struct.ImBuf* %call31, %struct.ImBuf** %out, align 8, !dbg !6101
  br label %if.end49, !dbg !6102

if.else32:                                        ; preds = %lor.lhs.false27
  %27 = load i32, i32* %early_out, align 4, !dbg !6103
  %cmp33 = icmp eq i32 %27, 1, !dbg !6105
  br i1 %cmp33, label %if.then35, label %if.else37, !dbg !6106

if.then35:                                        ; preds = %if.else32
  %28 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6107
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %28, i32 0, i32 3, !dbg !6109
  %29 = load i32, i32* %rectx, align 8, !dbg !6109
  %30 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6110
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %30, i32 0, i32 4, !dbg !6111
  %31 = load i32, i32* %recty, align 4, !dbg !6111
  %call36 = call %struct.ImBuf* @IMB_allocImBuf(i32 %29, i32 %31, i8 zeroext 32, i32 1), !dbg !6112
  store %struct.ImBuf* %call36, %struct.ImBuf** %out, align 8, !dbg !6113
  br label %if.end48, !dbg !6114

if.else37:                                        ; preds = %if.else32
  %32 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6115
  %33 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6117
  %34 = load float, float* %cfra.addr, align 4, !dbg !6118
  %call38 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %32, %struct.Sequence* %33, float %34), !dbg !6119
  store %struct.ImBuf* %call38, %struct.ImBuf** %out, align 8, !dbg !6120
  %35 = load i32, i32* %early_out, align 4, !dbg !6121
  %cmp39 = icmp eq i32 %35, 0, !dbg !6123
  br i1 %cmp39, label %if.then41, label %if.end47, !dbg !6124

if.then41:                                        ; preds = %if.else37
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf1, metadata !6125, metadata !DIExpression()), !dbg !6127
  %36 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6128
  %rectx42 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %36, i32 0, i32 3, !dbg !6129
  %37 = load i32, i32* %rectx42, align 8, !dbg !6129
  %38 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6130
  %recty43 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %38, i32 0, i32 4, !dbg !6131
  %39 = load i32, i32* %recty43, align 4, !dbg !6131
  %40 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6132
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %40, i32 0, i32 9, !dbg !6133
  %41 = load float*, float** %rect_float, align 8, !dbg !6133
  %tobool44 = icmp ne float* %41, null, !dbg !6132
  %42 = zext i1 %tobool44 to i64, !dbg !6132
  %cond = select i1 %tobool44, i32 32, i32 1, !dbg !6132
  %call45 = call %struct.ImBuf* @IMB_allocImBuf(i32 %37, i32 %39, i8 zeroext 32, i32 %cond), !dbg !6134
  store %struct.ImBuf* %call45, %struct.ImBuf** %ibuf1, align 8, !dbg !6127
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf2, metadata !6135, metadata !DIExpression()), !dbg !6136
  %43 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6137
  store %struct.ImBuf* %43, %struct.ImBuf** %ibuf2, align 8, !dbg !6136
  %44 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6138
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6139
  %46 = load float, float* %cfra.addr, align 4, !dbg !6140
  %47 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1, align 8, !dbg !6141
  %48 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2, align 8, !dbg !6142
  %call46 = call %struct.ImBuf* @seq_render_strip_stack_apply_effect(%struct.SeqRenderData* %44, %struct.Sequence* %45, float %46, %struct.ImBuf* %47, %struct.ImBuf* %48), !dbg !6143
  store %struct.ImBuf* %call46, %struct.ImBuf** %out, align 8, !dbg !6144
  %49 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1, align 8, !dbg !6145
  call void @IMB_freeImBuf(%struct.ImBuf* %49), !dbg !6146
  %50 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2, align 8, !dbg !6147
  call void @IMB_freeImBuf(%struct.ImBuf* %50), !dbg !6148
  br label %if.end47, !dbg !6149

if.end47:                                         ; preds = %if.then41, %if.else37
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then35
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then30
  br label %if.end52, !dbg !6150

if.else50:                                        ; preds = %lor.lhs.false14
  %51 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6151
  %52 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6153
  %53 = load float, float* %cfra.addr, align 4, !dbg !6154
  %call51 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %51, %struct.Sequence* %52, float %53), !dbg !6155
  store %struct.ImBuf* %call51, %struct.ImBuf** %out, align 8, !dbg !6156
  br label %if.end52

if.end52:                                         ; preds = %if.else50, %if.end49
  %54 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6157
  %55 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6158
  %56 = load float, float* %cfra.addr, align 4, !dbg !6159
  %57 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6160
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %54, %struct.Sequence* %55, float %56, i32 1, %struct.ImBuf* %57), !dbg !6161
  %58 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6162
  store %struct.ImBuf* %58, %struct.ImBuf** %retval, align 8, !dbg !6163
  br label %return, !dbg !6163

if.end53:                                         ; preds = %if.end4
  %59 = load i32, i32* %count, align 4, !dbg !6164
  %sub54 = sub nsw i32 %59, 1, !dbg !6166
  store i32 %sub54, i32* %i, align 4, !dbg !6167
  br label %for.cond, !dbg !6168

for.cond:                                         ; preds = %for.inc, %if.end53
  %60 = load i32, i32* %i, align 4, !dbg !6169
  %cmp55 = icmp sge i32 %60, 0, !dbg !6171
  br i1 %cmp55, label %for.body, label %for.end, !dbg !6172

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %early_out57, metadata !6173, metadata !DIExpression()), !dbg !6175
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq58, metadata !6176, metadata !DIExpression()), !dbg !6177
  %61 = load i32, i32* %i, align 4, !dbg !6178
  %idxprom59 = sext i32 %61 to i64, !dbg !6179
  %arrayidx60 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom59, !dbg !6179
  %62 = load %struct.Sequence*, %struct.Sequence** %arrayidx60, align 8, !dbg !6179
  store %struct.Sequence* %62, %struct.Sequence** %seq58, align 8, !dbg !6177
  %63 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6180
  %64 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6181
  %65 = load float, float* %cfra.addr, align 4, !dbg !6182
  %call61 = call %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData* %63, %struct.Sequence* %64, float %65, i32 1), !dbg !6183
  store %struct.ImBuf* %call61, %struct.ImBuf** %out, align 8, !dbg !6184
  %66 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6185
  %tobool62 = icmp ne %struct.ImBuf* %66, null, !dbg !6185
  br i1 %tobool62, label %if.then63, label %if.end64, !dbg !6187

if.then63:                                        ; preds = %for.body
  br label %for.end, !dbg !6188

if.end64:                                         ; preds = %for.body
  %67 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6190
  %blend_mode65 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 46, !dbg !6192
  %68 = load i32, i32* %blend_mode65, align 8, !dbg !6192
  %cmp66 = icmp eq i32 %68, 0, !dbg !6193
  br i1 %cmp66, label %if.then68, label %if.end70, !dbg !6194

if.then68:                                        ; preds = %if.end64
  %69 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6195
  %70 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6197
  %71 = load float, float* %cfra.addr, align 4, !dbg !6198
  %call69 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %69, %struct.Sequence* %70, float %71), !dbg !6199
  store %struct.ImBuf* %call69, %struct.ImBuf** %out, align 8, !dbg !6200
  br label %for.end, !dbg !6201

if.end70:                                         ; preds = %if.end64
  %72 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6202
  %call71 = call i32 @seq_get_early_out_for_blend_mode(%struct.Sequence* %72), !dbg !6203
  store i32 %call71, i32* %early_out57, align 4, !dbg !6204
  %73 = load i32, i32* %early_out57, align 4, !dbg !6205
  switch i32 %73, label %sw.epilog [
    i32 -1, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb73
    i32 0, label %sw.bb81
  ], !dbg !6206

sw.bb:                                            ; preds = %if.end70, %if.end70
  %74 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6207
  %75 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6209
  %76 = load float, float* %cfra.addr, align 4, !dbg !6210
  %call72 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %74, %struct.Sequence* %75, float %76), !dbg !6211
  store %struct.ImBuf* %call72, %struct.ImBuf** %out, align 8, !dbg !6212
  br label %sw.epilog, !dbg !6213

sw.bb73:                                          ; preds = %if.end70
  %77 = load i32, i32* %i, align 4, !dbg !6214
  %cmp74 = icmp eq i32 %77, 0, !dbg !6216
  br i1 %cmp74, label %if.then76, label %if.end80, !dbg !6217

if.then76:                                        ; preds = %sw.bb73
  %78 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6218
  %rectx77 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %78, i32 0, i32 3, !dbg !6220
  %79 = load i32, i32* %rectx77, align 8, !dbg !6220
  %80 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6221
  %recty78 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %80, i32 0, i32 4, !dbg !6222
  %81 = load i32, i32* %recty78, align 4, !dbg !6222
  %call79 = call %struct.ImBuf* @IMB_allocImBuf(i32 %79, i32 %81, i8 zeroext 32, i32 1), !dbg !6223
  store %struct.ImBuf* %call79, %struct.ImBuf** %out, align 8, !dbg !6224
  br label %if.end80, !dbg !6225

if.end80:                                         ; preds = %if.then76, %sw.bb73
  br label %sw.epilog, !dbg !6226

sw.bb81:                                          ; preds = %if.end70
  %82 = load i32, i32* %i, align 4, !dbg !6227
  %cmp82 = icmp eq i32 %82, 0, !dbg !6229
  br i1 %cmp82, label %if.then84, label %if.end92, !dbg !6230

if.then84:                                        ; preds = %sw.bb81
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf185, metadata !6231, metadata !DIExpression()), !dbg !6233
  %83 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6234
  %rectx86 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %83, i32 0, i32 3, !dbg !6235
  %84 = load i32, i32* %rectx86, align 8, !dbg !6235
  %85 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6236
  %recty87 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %85, i32 0, i32 4, !dbg !6237
  %86 = load i32, i32* %recty87, align 4, !dbg !6237
  %call88 = call %struct.ImBuf* @IMB_allocImBuf(i32 %84, i32 %86, i8 zeroext 32, i32 1), !dbg !6238
  store %struct.ImBuf* %call88, %struct.ImBuf** %ibuf185, align 8, !dbg !6233
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf289, metadata !6239, metadata !DIExpression()), !dbg !6240
  %87 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6241
  %88 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6242
  %89 = load float, float* %cfra.addr, align 4, !dbg !6243
  %call90 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %87, %struct.Sequence* %88, float %89), !dbg !6244
  store %struct.ImBuf* %call90, %struct.ImBuf** %ibuf289, align 8, !dbg !6240
  %90 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6245
  %91 = load %struct.Sequence*, %struct.Sequence** %seq58, align 8, !dbg !6246
  %92 = load float, float* %cfra.addr, align 4, !dbg !6247
  %93 = load %struct.ImBuf*, %struct.ImBuf** %ibuf185, align 8, !dbg !6248
  %94 = load %struct.ImBuf*, %struct.ImBuf** %ibuf289, align 8, !dbg !6249
  %call91 = call %struct.ImBuf* @seq_render_strip_stack_apply_effect(%struct.SeqRenderData* %90, %struct.Sequence* %91, float %92, %struct.ImBuf* %93, %struct.ImBuf* %94), !dbg !6250
  store %struct.ImBuf* %call91, %struct.ImBuf** %out, align 8, !dbg !6251
  %95 = load %struct.ImBuf*, %struct.ImBuf** %ibuf185, align 8, !dbg !6252
  call void @IMB_freeImBuf(%struct.ImBuf* %95), !dbg !6253
  %96 = load %struct.ImBuf*, %struct.ImBuf** %ibuf289, align 8, !dbg !6254
  call void @IMB_freeImBuf(%struct.ImBuf* %96), !dbg !6255
  br label %if.end92, !dbg !6256

if.end92:                                         ; preds = %if.then84, %sw.bb81
  br label %sw.epilog, !dbg !6257

sw.epilog:                                        ; preds = %if.end70, %if.end92, %if.end80, %sw.bb
  %97 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6258
  %tobool93 = icmp ne %struct.ImBuf* %97, null, !dbg !6258
  br i1 %tobool93, label %if.then94, label %if.end95, !dbg !6260

if.then94:                                        ; preds = %sw.epilog
  br label %for.end, !dbg !6261

if.end95:                                         ; preds = %sw.epilog
  br label %for.inc, !dbg !6263

for.inc:                                          ; preds = %if.end95
  %98 = load i32, i32* %i, align 4, !dbg !6264
  %dec = add nsw i32 %98, -1, !dbg !6264
  store i32 %dec, i32* %i, align 4, !dbg !6264
  br label %for.cond, !dbg !6265, !llvm.loop !6266

for.end:                                          ; preds = %if.then94, %if.then68, %if.then63, %for.cond
  %99 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6268
  %100 = load i32, i32* %i, align 4, !dbg !6269
  %idxprom96 = sext i32 %100 to i64, !dbg !6270
  %arrayidx97 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom96, !dbg !6270
  %101 = load %struct.Sequence*, %struct.Sequence** %arrayidx97, align 8, !dbg !6270
  %102 = load float, float* %cfra.addr, align 4, !dbg !6271
  %103 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6272
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %99, %struct.Sequence* %101, float %102, i32 1, %struct.ImBuf* %103), !dbg !6273
  %104 = load i32, i32* %i, align 4, !dbg !6274
  %inc = add nsw i32 %104, 1, !dbg !6274
  store i32 %inc, i32* %i, align 4, !dbg !6274
  br label %for.cond98, !dbg !6275

for.cond98:                                       ; preds = %for.inc116, %for.end
  %105 = load i32, i32* %i, align 4, !dbg !6276
  %106 = load i32, i32* %count, align 4, !dbg !6279
  %cmp99 = icmp slt i32 %105, %106, !dbg !6280
  br i1 %cmp99, label %for.body101, label %for.end118, !dbg !6281

for.body101:                                      ; preds = %for.cond98
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq102, metadata !6282, metadata !DIExpression()), !dbg !6284
  %107 = load i32, i32* %i, align 4, !dbg !6285
  %idxprom103 = sext i32 %107 to i64, !dbg !6286
  %arrayidx104 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom103, !dbg !6286
  %108 = load %struct.Sequence*, %struct.Sequence** %arrayidx104, align 8, !dbg !6286
  store %struct.Sequence* %108, %struct.Sequence** %seq102, align 8, !dbg !6284
  %109 = load %struct.Sequence*, %struct.Sequence** %seq102, align 8, !dbg !6287
  %call105 = call i32 @seq_get_early_out_for_blend_mode(%struct.Sequence* %109), !dbg !6289
  %cmp106 = icmp eq i32 %call105, 0, !dbg !6290
  br i1 %cmp106, label %if.then108, label %if.end113, !dbg !6291

if.then108:                                       ; preds = %for.body101
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf1109, metadata !6292, metadata !DIExpression()), !dbg !6294
  %110 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6295
  store %struct.ImBuf* %110, %struct.ImBuf** %ibuf1109, align 8, !dbg !6294
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf2110, metadata !6296, metadata !DIExpression()), !dbg !6297
  %111 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6298
  %112 = load %struct.Sequence*, %struct.Sequence** %seq102, align 8, !dbg !6299
  %113 = load float, float* %cfra.addr, align 4, !dbg !6300
  %call111 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %111, %struct.Sequence* %112, float %113), !dbg !6301
  store %struct.ImBuf* %call111, %struct.ImBuf** %ibuf2110, align 8, !dbg !6297
  %114 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6302
  %115 = load %struct.Sequence*, %struct.Sequence** %seq102, align 8, !dbg !6303
  %116 = load float, float* %cfra.addr, align 4, !dbg !6304
  %117 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1109, align 8, !dbg !6305
  %118 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2110, align 8, !dbg !6306
  %call112 = call %struct.ImBuf* @seq_render_strip_stack_apply_effect(%struct.SeqRenderData* %114, %struct.Sequence* %115, float %116, %struct.ImBuf* %117, %struct.ImBuf* %118), !dbg !6307
  store %struct.ImBuf* %call112, %struct.ImBuf** %out, align 8, !dbg !6308
  %119 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1109, align 8, !dbg !6309
  call void @IMB_freeImBuf(%struct.ImBuf* %119), !dbg !6310
  %120 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2110, align 8, !dbg !6311
  call void @IMB_freeImBuf(%struct.ImBuf* %120), !dbg !6312
  br label %if.end113, !dbg !6313

if.end113:                                        ; preds = %if.then108, %for.body101
  %121 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6314
  %122 = load i32, i32* %i, align 4, !dbg !6315
  %idxprom114 = sext i32 %122 to i64, !dbg !6316
  %arrayidx115 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom114, !dbg !6316
  %123 = load %struct.Sequence*, %struct.Sequence** %arrayidx115, align 8, !dbg !6316
  %124 = load float, float* %cfra.addr, align 4, !dbg !6317
  %125 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6318
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %121, %struct.Sequence* %123, float %124, i32 1, %struct.ImBuf* %125), !dbg !6319
  br label %for.inc116, !dbg !6320

for.inc116:                                       ; preds = %if.end113
  %126 = load i32, i32* %i, align 4, !dbg !6321
  %inc117 = add nsw i32 %126, 1, !dbg !6321
  store i32 %inc117, i32* %i, align 4, !dbg !6321
  br label %for.cond98, !dbg !6322, !llvm.loop !6323

for.end118:                                       ; preds = %for.cond98
  %127 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !6325
  store %struct.ImBuf* %127, %struct.ImBuf** %retval, align 8, !dbg !6326
  br label %return, !dbg !6326

return:                                           ; preds = %for.end118, %if.end52, %if.then3, %if.then
  %128 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !6327
  ret %struct.ImBuf* %128, !dbg !6327
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ImBuf* @BKE_sequencer_give_ibuf_seqbase(%struct.SeqRenderData* %context, float %cfra, i32 %chanshown, %struct.ListBase* %seqbasep) #0 !dbg !6328 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %cfra.addr = alloca float, align 4
  %chanshown.addr = alloca i32, align 4
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !6331, metadata !DIExpression()), !dbg !6332
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !6333, metadata !DIExpression()), !dbg !6334
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !6335, metadata !DIExpression()), !dbg !6336
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !6337, metadata !DIExpression()), !dbg !6338
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6339
  %1 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !6340
  %2 = load float, float* %cfra.addr, align 4, !dbg !6341
  %3 = load i32, i32* %chanshown.addr, align 4, !dbg !6342
  %call = call %struct.ImBuf* @seq_render_strip_stack(%struct.SeqRenderData* %0, %struct.ListBase* %1, float %2, i32 %3), !dbg !6343
  ret %struct.ImBuf* %call, !dbg !6344
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ImBuf* @BKE_sequencer_give_ibuf_direct(%struct.SeqRenderData* %context, float %cfra, %struct.Sequence* %seq) #0 !dbg !6345 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %cfra.addr = alloca float, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !6350, metadata !DIExpression()), !dbg !6351
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6352, metadata !DIExpression()), !dbg !6353
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6354
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6355
  %2 = load float, float* %cfra.addr, align 4, !dbg !6356
  %call = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %0, %struct.Sequence* %1, float %2), !dbg !6357
  ret %struct.ImBuf* %call, !dbg !6358
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_give_ibuf_prefetch_request(%struct.SeqRenderData* %context, float %cfra, i32 %chanshown) #0 !dbg !6359 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %cfra.addr = alloca float, align 4
  %chanshown.addr = alloca i32, align 4
  %e = alloca %struct.PrefetchQueueElem*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !6362, metadata !DIExpression()), !dbg !6363
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !6364, metadata !DIExpression()), !dbg !6365
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !6366, metadata !DIExpression()), !dbg !6367
  call void @llvm.dbg.declare(metadata %struct.PrefetchQueueElem** %e, metadata !6368, metadata !DIExpression()), !dbg !6383
  %0 = load volatile i8, i8* @seq_thread_shutdown, align 1, !dbg !6384
  %tobool = icmp ne i8 %0, 0, !dbg !6384
  br i1 %tobool, label %if.then, label %if.end, !dbg !6386

if.then:                                          ; preds = %entry
  br label %return, !dbg !6387

if.end:                                           ; preds = %entry
  %1 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !6389
  %call = call i8* %1(i64 48, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)), !dbg !6389
  %2 = bitcast i8* %call to %struct.PrefetchQueueElem*, !dbg !6389
  store %struct.PrefetchQueueElem* %2, %struct.PrefetchQueueElem** %e, align 8, !dbg !6390
  %3 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6391
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %3, i32 0, i32 3, !dbg !6392
  %4 = load i32, i32* %rectx, align 8, !dbg !6392
  %5 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6393
  %rectx1 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %5, i32 0, i32 2, !dbg !6394
  store i32 %4, i32* %rectx1, align 8, !dbg !6395
  %6 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6396
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %6, i32 0, i32 4, !dbg !6397
  %7 = load i32, i32* %recty, align 4, !dbg !6397
  %8 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6398
  %recty2 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %8, i32 0, i32 3, !dbg !6399
  store i32 %7, i32* %recty2, align 4, !dbg !6400
  %9 = load float, float* %cfra.addr, align 4, !dbg !6401
  %10 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6402
  %cfra3 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %10, i32 0, i32 4, !dbg !6403
  store float %9, float* %cfra3, align 8, !dbg !6404
  %11 = load i32, i32* %chanshown.addr, align 4, !dbg !6405
  %12 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6406
  %chanshown4 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %12, i32 0, i32 5, !dbg !6407
  store i32 %11, i32* %chanshown4, align 4, !dbg !6408
  %13 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6409
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %13, i32 0, i32 5, !dbg !6410
  %14 = load i32, i32* %preview_render_size, align 8, !dbg !6410
  %15 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6411
  %preview_render_size5 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %15, i32 0, i32 6, !dbg !6412
  store i32 %14, i32* %preview_render_size5, align 8, !dbg !6413
  %16 = load i32, i32* @monoton_cfra, align 4, !dbg !6414
  %inc = add nsw i32 %16, 1, !dbg !6414
  store i32 %inc, i32* @monoton_cfra, align 4, !dbg !6414
  %17 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6415
  %monoton_cfra = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %17, i32 0, i32 7, !dbg !6416
  store i32 %16, i32* %monoton_cfra, align 4, !dbg !6417
  %18 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6418
  %19 = bitcast %struct.PrefetchQueueElem* %18 to i8*, !dbg !6418
  call void @BLI_addtail(%struct.ListBase* @prefetch_wait, i8* %19), !dbg !6419
  br label %return, !dbg !6420

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6420
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ImBuf* @BKE_sequencer_give_ibuf_threaded(%struct.SeqRenderData* %context, float %cfra, i32 %chanshown) #0 !dbg !6421 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %cfra.addr = alloca float, align 4
  %chanshown.addr = alloca i32, align 4
  %e = alloca %struct.PrefetchQueueElem*, align 8
  %found_something = alloca i8, align 1
  %success = alloca i8, align 1
  %tslot = alloca %struct.PrefetchThread*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !6422, metadata !DIExpression()), !dbg !6423
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !6424, metadata !DIExpression()), !dbg !6425
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !6426, metadata !DIExpression()), !dbg !6427
  call void @llvm.dbg.declare(metadata %struct.PrefetchQueueElem** %e, metadata !6428, metadata !DIExpression()), !dbg !6429
  store %struct.PrefetchQueueElem* null, %struct.PrefetchQueueElem** %e, align 8, !dbg !6429
  call void @llvm.dbg.declare(metadata i8* %found_something, metadata !6430, metadata !DIExpression()), !dbg !6431
  store i8 0, i8* %found_something, align 1, !dbg !6431
  %0 = load volatile i8, i8* @seq_thread_shutdown, align 1, !dbg !6432
  %tobool = icmp ne i8 %0, 0, !dbg !6432
  br i1 %tobool, label %if.then, label %if.end, !dbg !6434

if.then:                                          ; preds = %entry
  %1 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6435
  %2 = load float, float* %cfra.addr, align 4, !dbg !6437
  %3 = load i32, i32* %chanshown.addr, align 4, !dbg !6438
  %call = call %struct.ImBuf* @BKE_sequencer_give_ibuf(%struct.SeqRenderData* %1, float %2, i32 %3), !dbg !6439
  store %struct.ImBuf* %call, %struct.ImBuf** %retval, align 8, !dbg !6440
  br label %return, !dbg !6440

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !6441

while.cond:                                       ; preds = %if.end89, %if.end
  %4 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6442
  %tobool1 = icmp ne %struct.PrefetchQueueElem* %4, null, !dbg !6443
  %lnot = xor i1 %tobool1, true, !dbg !6443
  br i1 %lnot, label %while.body, label %while.end, !dbg !6441

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8* %success, metadata !6444, metadata !DIExpression()), !dbg !6446
  store i8 0, i8* %success, align 1, !dbg !6446
  %5 = load i8*, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @prefetch_done, i32 0, i32 0), align 8, !dbg !6447
  %6 = bitcast i8* %5 to %struct.PrefetchQueueElem*, !dbg !6449
  store %struct.PrefetchQueueElem* %6, %struct.PrefetchQueueElem** %e, align 8, !dbg !6450
  br label %for.cond, !dbg !6451

for.cond:                                         ; preds = %for.inc, %while.body
  %7 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6452
  %tobool2 = icmp ne %struct.PrefetchQueueElem* %7, null, !dbg !6454
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6454

for.body:                                         ; preds = %for.cond
  %8 = load float, float* %cfra.addr, align 4, !dbg !6455
  %9 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6458
  %cfra3 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %9, i32 0, i32 4, !dbg !6459
  %10 = load float, float* %cfra3, align 8, !dbg !6459
  %cmp = fcmp oeq float %8, %10, !dbg !6460
  br i1 %cmp, label %land.lhs.true, label %if.end16, !dbg !6461

land.lhs.true:                                    ; preds = %for.body
  %11 = load i32, i32* %chanshown.addr, align 4, !dbg !6462
  %12 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6463
  %chanshown4 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %12, i32 0, i32 5, !dbg !6464
  %13 = load i32, i32* %chanshown4, align 4, !dbg !6464
  %cmp5 = icmp eq i32 %11, %13, !dbg !6465
  br i1 %cmp5, label %land.lhs.true6, label %if.end16, !dbg !6466

land.lhs.true6:                                   ; preds = %land.lhs.true
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6467
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %14, i32 0, i32 3, !dbg !6468
  %15 = load i32, i32* %rectx, align 8, !dbg !6468
  %16 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6469
  %rectx7 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %16, i32 0, i32 2, !dbg !6470
  %17 = load i32, i32* %rectx7, align 8, !dbg !6470
  %cmp8 = icmp eq i32 %15, %17, !dbg !6471
  br i1 %cmp8, label %land.lhs.true9, label %if.end16, !dbg !6472

land.lhs.true9:                                   ; preds = %land.lhs.true6
  %18 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6473
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %18, i32 0, i32 4, !dbg !6474
  %19 = load i32, i32* %recty, align 4, !dbg !6474
  %20 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6475
  %recty10 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %20, i32 0, i32 3, !dbg !6476
  %21 = load i32, i32* %recty10, align 4, !dbg !6476
  %cmp11 = icmp eq i32 %19, %21, !dbg !6477
  br i1 %cmp11, label %land.lhs.true12, label %if.end16, !dbg !6478

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %22 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6479
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %22, i32 0, i32 5, !dbg !6480
  %23 = load i32, i32* %preview_render_size, align 8, !dbg !6480
  %24 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6481
  %preview_render_size13 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %24, i32 0, i32 6, !dbg !6482
  %25 = load i32, i32* %preview_render_size13, align 8, !dbg !6482
  %cmp14 = icmp eq i32 %23, %25, !dbg !6483
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6484

if.then15:                                        ; preds = %land.lhs.true12
  store i8 1, i8* %success, align 1, !dbg !6485
  store i8 1, i8* %found_something, align 1, !dbg !6487
  br label %for.end, !dbg !6488

if.end16:                                         ; preds = %land.lhs.true12, %land.lhs.true9, %land.lhs.true6, %land.lhs.true, %for.body
  br label %for.inc, !dbg !6489

for.inc:                                          ; preds = %if.end16
  %26 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6490
  %next = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %26, i32 0, i32 0, !dbg !6491
  %27 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %next, align 8, !dbg !6491
  store %struct.PrefetchQueueElem* %27, %struct.PrefetchQueueElem** %e, align 8, !dbg !6492
  br label %for.cond, !dbg !6493, !llvm.loop !6494

for.end:                                          ; preds = %if.then15, %for.cond
  %28 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6496
  %tobool17 = icmp ne %struct.PrefetchQueueElem* %28, null, !dbg !6496
  br i1 %tobool17, label %if.end44, label %if.then18, !dbg !6498

if.then18:                                        ; preds = %for.end
  %29 = load i8*, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @prefetch_wait, i32 0, i32 0), align 8, !dbg !6499
  %30 = bitcast i8* %29 to %struct.PrefetchQueueElem*, !dbg !6502
  store %struct.PrefetchQueueElem* %30, %struct.PrefetchQueueElem** %e, align 8, !dbg !6503
  br label %for.cond19, !dbg !6504

for.cond19:                                       ; preds = %for.inc41, %if.then18
  %31 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6505
  %tobool20 = icmp ne %struct.PrefetchQueueElem* %31, null, !dbg !6507
  br i1 %tobool20, label %for.body21, label %for.end43, !dbg !6507

for.body21:                                       ; preds = %for.cond19
  %32 = load float, float* %cfra.addr, align 4, !dbg !6508
  %33 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6511
  %cfra22 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %33, i32 0, i32 4, !dbg !6512
  %34 = load float, float* %cfra22, align 8, !dbg !6512
  %cmp23 = fcmp oeq float %32, %34, !dbg !6513
  br i1 %cmp23, label %land.lhs.true24, label %if.end40, !dbg !6514

land.lhs.true24:                                  ; preds = %for.body21
  %35 = load i32, i32* %chanshown.addr, align 4, !dbg !6515
  %36 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6516
  %chanshown25 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %36, i32 0, i32 5, !dbg !6517
  %37 = load i32, i32* %chanshown25, align 4, !dbg !6517
  %cmp26 = icmp eq i32 %35, %37, !dbg !6518
  br i1 %cmp26, label %land.lhs.true27, label %if.end40, !dbg !6519

land.lhs.true27:                                  ; preds = %land.lhs.true24
  %38 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6520
  %rectx28 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %38, i32 0, i32 3, !dbg !6521
  %39 = load i32, i32* %rectx28, align 8, !dbg !6521
  %40 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6522
  %rectx29 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %40, i32 0, i32 2, !dbg !6523
  %41 = load i32, i32* %rectx29, align 8, !dbg !6523
  %cmp30 = icmp eq i32 %39, %41, !dbg !6524
  br i1 %cmp30, label %land.lhs.true31, label %if.end40, !dbg !6525

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %42 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6526
  %recty32 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %42, i32 0, i32 4, !dbg !6527
  %43 = load i32, i32* %recty32, align 4, !dbg !6527
  %44 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6528
  %recty33 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %44, i32 0, i32 3, !dbg !6529
  %45 = load i32, i32* %recty33, align 4, !dbg !6529
  %cmp34 = icmp eq i32 %43, %45, !dbg !6530
  br i1 %cmp34, label %land.lhs.true35, label %if.end40, !dbg !6531

land.lhs.true35:                                  ; preds = %land.lhs.true31
  %46 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6532
  %preview_render_size36 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %46, i32 0, i32 5, !dbg !6533
  %47 = load i32, i32* %preview_render_size36, align 8, !dbg !6533
  %48 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6534
  %preview_render_size37 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %48, i32 0, i32 6, !dbg !6535
  %49 = load i32, i32* %preview_render_size37, align 8, !dbg !6535
  %cmp38 = icmp eq i32 %47, %49, !dbg !6536
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !6537

if.then39:                                        ; preds = %land.lhs.true35
  store i8 1, i8* %found_something, align 1, !dbg !6538
  br label %for.end43, !dbg !6540

if.end40:                                         ; preds = %land.lhs.true35, %land.lhs.true31, %land.lhs.true27, %land.lhs.true24, %for.body21
  br label %for.inc41, !dbg !6541

for.inc41:                                        ; preds = %if.end40
  %50 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6542
  %next42 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %50, i32 0, i32 0, !dbg !6543
  %51 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %next42, align 8, !dbg !6543
  store %struct.PrefetchQueueElem* %51, %struct.PrefetchQueueElem** %e, align 8, !dbg !6544
  br label %for.cond19, !dbg !6545, !llvm.loop !6546

for.end43:                                        ; preds = %if.then39, %for.cond19
  br label %if.end44, !dbg !6548

if.end44:                                         ; preds = %for.end43, %for.end
  %52 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6549
  %tobool45 = icmp ne %struct.PrefetchQueueElem* %52, null, !dbg !6549
  br i1 %tobool45, label %if.end79, label %if.then46, !dbg !6551

if.then46:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata %struct.PrefetchThread** %tslot, metadata !6552, metadata !DIExpression()), !dbg !6569
  %53 = load i8*, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @running_threads, i32 0, i32 0), align 8, !dbg !6570
  %54 = bitcast i8* %53 to %struct.PrefetchThread*, !dbg !6572
  store %struct.PrefetchThread* %54, %struct.PrefetchThread** %tslot, align 8, !dbg !6573
  br label %for.cond47, !dbg !6574

for.cond47:                                       ; preds = %for.inc76, %if.then46
  %55 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6575
  %tobool48 = icmp ne %struct.PrefetchThread* %55, null, !dbg !6577
  br i1 %tobool48, label %for.body49, label %for.end78, !dbg !6577

for.body49:                                       ; preds = %for.cond47
  %56 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6578
  %current = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %56, i32 0, i32 3, !dbg !6581
  %57 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current, align 8, !dbg !6581
  %tobool50 = icmp ne %struct.PrefetchQueueElem* %57, null, !dbg !6578
  br i1 %tobool50, label %land.lhs.true51, label %if.end75, !dbg !6582

land.lhs.true51:                                  ; preds = %for.body49
  %58 = load float, float* %cfra.addr, align 4, !dbg !6583
  %59 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6584
  %current52 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %59, i32 0, i32 3, !dbg !6585
  %60 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current52, align 8, !dbg !6585
  %cfra53 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %60, i32 0, i32 4, !dbg !6586
  %61 = load float, float* %cfra53, align 8, !dbg !6586
  %cmp54 = fcmp oeq float %58, %61, !dbg !6587
  br i1 %cmp54, label %land.lhs.true55, label %if.end75, !dbg !6588

land.lhs.true55:                                  ; preds = %land.lhs.true51
  %62 = load i32, i32* %chanshown.addr, align 4, !dbg !6589
  %63 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6590
  %current56 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %63, i32 0, i32 3, !dbg !6591
  %64 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current56, align 8, !dbg !6591
  %chanshown57 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %64, i32 0, i32 5, !dbg !6592
  %65 = load i32, i32* %chanshown57, align 4, !dbg !6592
  %cmp58 = icmp eq i32 %62, %65, !dbg !6593
  br i1 %cmp58, label %land.lhs.true59, label %if.end75, !dbg !6594

land.lhs.true59:                                  ; preds = %land.lhs.true55
  %66 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6595
  %rectx60 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %66, i32 0, i32 3, !dbg !6596
  %67 = load i32, i32* %rectx60, align 8, !dbg !6596
  %68 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6597
  %current61 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %68, i32 0, i32 3, !dbg !6598
  %69 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current61, align 8, !dbg !6598
  %rectx62 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %69, i32 0, i32 2, !dbg !6599
  %70 = load i32, i32* %rectx62, align 8, !dbg !6599
  %cmp63 = icmp eq i32 %67, %70, !dbg !6600
  br i1 %cmp63, label %land.lhs.true64, label %if.end75, !dbg !6601

land.lhs.true64:                                  ; preds = %land.lhs.true59
  %71 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6602
  %recty65 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %71, i32 0, i32 4, !dbg !6603
  %72 = load i32, i32* %recty65, align 4, !dbg !6603
  %73 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6604
  %current66 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %73, i32 0, i32 3, !dbg !6605
  %74 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current66, align 8, !dbg !6605
  %recty67 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %74, i32 0, i32 3, !dbg !6606
  %75 = load i32, i32* %recty67, align 4, !dbg !6606
  %cmp68 = icmp eq i32 %72, %75, !dbg !6607
  br i1 %cmp68, label %land.lhs.true69, label %if.end75, !dbg !6608

land.lhs.true69:                                  ; preds = %land.lhs.true64
  %76 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !6609
  %preview_render_size70 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %76, i32 0, i32 5, !dbg !6610
  %77 = load i32, i32* %preview_render_size70, align 8, !dbg !6610
  %78 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6611
  %current71 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %78, i32 0, i32 3, !dbg !6612
  %79 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %current71, align 8, !dbg !6612
  %preview_render_size72 = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %79, i32 0, i32 6, !dbg !6613
  %80 = load i32, i32* %preview_render_size72, align 8, !dbg !6613
  %cmp73 = icmp eq i32 %77, %80, !dbg !6614
  br i1 %cmp73, label %if.then74, label %if.end75, !dbg !6615

if.then74:                                        ; preds = %land.lhs.true69
  store i8 1, i8* %found_something, align 1, !dbg !6616
  br label %for.end78, !dbg !6618

if.end75:                                         ; preds = %land.lhs.true69, %land.lhs.true64, %land.lhs.true59, %land.lhs.true55, %land.lhs.true51, %for.body49
  br label %for.inc76, !dbg !6619

for.inc76:                                        ; preds = %if.end75
  %81 = load %struct.PrefetchThread*, %struct.PrefetchThread** %tslot, align 8, !dbg !6620
  %next77 = getelementptr inbounds %struct.PrefetchThread, %struct.PrefetchThread* %81, i32 0, i32 0, !dbg !6621
  %82 = load %struct.PrefetchThread*, %struct.PrefetchThread** %next77, align 8, !dbg !6621
  store %struct.PrefetchThread* %82, %struct.PrefetchThread** %tslot, align 8, !dbg !6622
  br label %for.cond47, !dbg !6623, !llvm.loop !6624

for.end78:                                        ; preds = %if.then74, %for.cond47
  br label %if.end79, !dbg !6626

if.end79:                                         ; preds = %for.end78, %if.end44
  %83 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6627
  %tobool80 = icmp ne %struct.PrefetchQueueElem* %83, null, !dbg !6627
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !6629

if.then81:                                        ; preds = %if.end79
  %84 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6630
  %monoton_cfra = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %84, i32 0, i32 7, !dbg !6632
  %85 = load i32, i32* %monoton_cfra, align 4, !dbg !6632
  store volatile i32 %85, i32* @seq_last_given_monoton_cfra, align 4, !dbg !6633
  br label %if.end82, !dbg !6634

if.end82:                                         ; preds = %if.then81, %if.end79
  %86 = load i8, i8* %success, align 1, !dbg !6635
  %tobool83 = icmp ne i8 %86, 0, !dbg !6635
  br i1 %tobool83, label %if.end89, label %if.then84, !dbg !6637

if.then84:                                        ; preds = %if.end82
  store %struct.PrefetchQueueElem* null, %struct.PrefetchQueueElem** %e, align 8, !dbg !6638
  %87 = load i8, i8* %found_something, align 1, !dbg !6640
  %tobool85 = icmp ne i8 %87, 0, !dbg !6640
  br i1 %tobool85, label %if.end88, label %if.then86, !dbg !6642

if.then86:                                        ; preds = %if.then84
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6643
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0)), !dbg !6645
  br label %while.end, !dbg !6646

if.end88:                                         ; preds = %if.then84
  br label %if.end89, !dbg !6647

if.end89:                                         ; preds = %if.end88, %if.end82
  br label %while.cond, !dbg !6441, !llvm.loop !6648

while.end:                                        ; preds = %if.then86, %while.cond
  %89 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6650
  %tobool90 = icmp ne %struct.PrefetchQueueElem* %89, null, !dbg !6650
  br i1 %tobool90, label %cond.true, label %cond.false, !dbg !6650

cond.true:                                        ; preds = %while.end
  %90 = load %struct.PrefetchQueueElem*, %struct.PrefetchQueueElem** %e, align 8, !dbg !6651
  %ibuf = getelementptr inbounds %struct.PrefetchQueueElem, %struct.PrefetchQueueElem* %90, i32 0, i32 8, !dbg !6652
  %91 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !6652
  br label %cond.end, !dbg !6650

cond.false:                                       ; preds = %while.end
  br label %cond.end, !dbg !6650

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ImBuf* [ %91, %cond.true ], [ null, %cond.false ], !dbg !6650
  store %struct.ImBuf* %cond, %struct.ImBuf** %retval, align 8, !dbg !6653
  br label %return, !dbg !6653

return:                                           ; preds = %cond.end, %if.then
  %92 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !6654
  ret %struct.ImBuf* %92, !dbg !6654
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_check_depend(%struct.Sequence* %seq, %struct.Sequence* %cur) #0 !dbg !6655 {
entry:
  %retval = alloca i8, align 1
  %seq.addr = alloca %struct.Sequence*, align 8
  %cur.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6658, metadata !DIExpression()), !dbg !6659
  store %struct.Sequence* %cur, %struct.Sequence** %cur.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %cur.addr, metadata !6660, metadata !DIExpression()), !dbg !6661
  %0 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6662
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 33, !dbg !6664
  %1 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !6664
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6665
  %cmp = icmp eq %struct.Sequence* %1, %2, !dbg !6666
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6667

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6668
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 34, !dbg !6669
  %4 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !6669
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6670
  %cmp1 = icmp eq %struct.Sequence* %4, %5, !dbg !6671
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !6672

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6673
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 35, !dbg !6674
  %7 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !6674
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6675
  %cmp3 = icmp eq %struct.Sequence* %7, %8, !dbg !6676
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6677

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !6678
  br label %return, !dbg !6678

if.end:                                           ; preds = %lor.lhs.false2
  %9 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6679
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 16, !dbg !6681
  %10 = load i32, i32* %enddisp, align 4, !dbg !6681
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6682
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 15, !dbg !6683
  %12 = load i32, i32* %startdisp, align 8, !dbg !6683
  %cmp4 = icmp slt i32 %10, %12, !dbg !6684
  br i1 %cmp4, label %if.then9, label %lor.lhs.false5, !dbg !6685

lor.lhs.false5:                                   ; preds = %if.end
  %13 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6686
  %startdisp6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 15, !dbg !6687
  %14 = load i32, i32* %startdisp6, align 8, !dbg !6687
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6688
  %enddisp7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 16, !dbg !6689
  %16 = load i32, i32* %enddisp7, align 4, !dbg !6689
  %cmp8 = icmp sgt i32 %14, %16, !dbg !6690
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6691

if.then9:                                         ; preds = %lor.lhs.false5, %if.end
  store i8 0, i8* %retval, align 1, !dbg !6692
  br label %return, !dbg !6692

if.end10:                                         ; preds = %lor.lhs.false5
  %17 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6693
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 13, !dbg !6695
  %18 = load i32, i32* %machine, align 8, !dbg !6695
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6696
  %machine11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 13, !dbg !6697
  %20 = load i32, i32* %machine11, align 8, !dbg !6697
  %cmp12 = icmp slt i32 %18, %20, !dbg !6698
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !6699

if.then13:                                        ; preds = %if.end10
  store i8 0, i8* %retval, align 1, !dbg !6700
  br label %return, !dbg !6700

if.end14:                                         ; preds = %if.end10
  %21 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6701
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 6, !dbg !6703
  %22 = load i32, i32* %type, align 4, !dbg !6703
  %and = and i32 %22, 8, !dbg !6704
  %cmp15 = icmp eq i32 %and, 0, !dbg !6705
  br i1 %cmp15, label %land.lhs.true, label %if.end23, !dbg !6706

land.lhs.true:                                    ; preds = %if.end14
  %23 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6707
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 46, !dbg !6708
  %24 = load i32, i32* %blend_mode, align 8, !dbg !6708
  %cmp16 = icmp eq i32 %24, 0, !dbg !6709
  br i1 %cmp16, label %if.then22, label %lor.lhs.false17, !dbg !6710

lor.lhs.false17:                                  ; preds = %land.lhs.true
  %25 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6711
  %blend_mode18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 46, !dbg !6712
  %26 = load i32, i32* %blend_mode18, align 8, !dbg !6712
  %cmp19 = icmp eq i32 %26, 8, !dbg !6713
  br i1 %cmp19, label %land.lhs.true20, label %if.end23, !dbg !6714

land.lhs.true20:                                  ; preds = %lor.lhs.false17
  %27 = load %struct.Sequence*, %struct.Sequence** %cur.addr, align 8, !dbg !6715
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 47, !dbg !6716
  %28 = load float, float* %blend_opacity, align 4, !dbg !6716
  %cmp21 = fcmp oeq float %28, 1.000000e+02, !dbg !6717
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !6718

if.then22:                                        ; preds = %land.lhs.true20, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6719
  br label %return, !dbg !6719

if.end23:                                         ; preds = %land.lhs.true20, %lor.lhs.false17, %if.end14
  store i8 1, i8* %retval, align 1, !dbg !6721
  br label %return, !dbg !6721

return:                                           ; preds = %if.end23, %if.then22, %if.then13, %if.then9, %if.then
  %29 = load i8, i8* %retval, align 1, !dbg !6722
  ret i8 %29, !dbg !6722
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_invalidate_cache(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !6723 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6724, metadata !DIExpression()), !dbg !6725
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6726, metadata !DIExpression()), !dbg !6727
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6728
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6729
  call void @sequence_invalidate_cache(%struct.Scene* %0, %struct.Sequence* %1, i8 zeroext 1, i8 zeroext 1), !dbg !6730
  ret void, !dbg !6731
}

; Function Attrs: noinline nounwind uwtable
define internal void @sequence_invalidate_cache(%struct.Scene* %scene, %struct.Sequence* %seq, i8 zeroext %invalidate_self, i8 zeroext %invalidate_preprocess) #0 !dbg !6732 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %invalidate_self.addr = alloca i8, align 1
  %invalidate_preprocess.addr = alloca i8, align 1
  %ed = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6735, metadata !DIExpression()), !dbg !6736
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6737, metadata !DIExpression()), !dbg !6738
  store i8 %invalidate_self, i8* %invalidate_self.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %invalidate_self.addr, metadata !6739, metadata !DIExpression()), !dbg !6740
  store i8 %invalidate_preprocess, i8* %invalidate_preprocess.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %invalidate_preprocess.addr, metadata !6741, metadata !DIExpression()), !dbg !6742
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6743, metadata !DIExpression()), !dbg !6744
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6745
  %ed1 = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 19, !dbg !6746
  %1 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !6746
  store %struct.Editing* %1, %struct.Editing** %ed, align 8, !dbg !6744
  %2 = load i8, i8* %invalidate_self.addr, align 1, !dbg !6747
  %tobool = icmp ne i8 %2, 0, !dbg !6747
  br i1 %tobool, label %if.then, label %if.end6, !dbg !6749

if.then:                                          ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6750
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 30, !dbg !6753
  %4 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !6753
  %tobool2 = icmp ne %struct.anim* %4, null, !dbg !6750
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !6754

if.then3:                                         ; preds = %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6755
  %anim4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 30, !dbg !6757
  %6 = load %struct.anim*, %struct.anim** %anim4, align 8, !dbg !6757
  call void @IMB_free_anim(%struct.anim* %6), !dbg !6758
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6759
  %anim5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 30, !dbg !6760
  store %struct.anim* null, %struct.anim** %anim5, align 8, !dbg !6761
  br label %if.end, !dbg !6762

if.end:                                           ; preds = %if.then3, %if.then
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6763
  call void @BKE_sequencer_cache_cleanup_sequence(%struct.Sequence* %8), !dbg !6764
  br label %if.end6, !dbg !6765

if.end6:                                          ; preds = %if.end, %entry
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6766
  %effectdata = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 43, !dbg !6768
  %10 = load i8*, i8** %effectdata, align 8, !dbg !6768
  %tobool7 = icmp ne i8* %10, null, !dbg !6766
  br i1 %tobool7, label %land.lhs.true, label %if.end9, !dbg !6769

land.lhs.true:                                    ; preds = %if.end6
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6770
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !6771
  %12 = load i32, i32* %type, align 4, !dbg !6771
  %cmp = icmp eq i32 %12, 29, !dbg !6772
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !6773

if.then8:                                         ; preds = %land.lhs.true
  %13 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6774
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6775
  call void @BKE_sequence_effect_speed_rebuild_map(%struct.Scene* %13, %struct.Sequence* %14, i8 zeroext 1), !dbg !6776
  br label %if.end9, !dbg !6776

if.end9:                                          ; preds = %if.then8, %land.lhs.true, %if.end6
  %15 = load i8, i8* %invalidate_preprocess.addr, align 1, !dbg !6777
  %tobool10 = icmp ne i8 %15, 0, !dbg !6777
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !6779

if.then11:                                        ; preds = %if.end9
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6780
  call void @BKE_sequencer_preprocessed_cache_cleanup_sequence(%struct.Sequence* %16), !dbg !6781
  br label %if.end12, !dbg !6781

if.end12:                                         ; preds = %if.then11, %if.end9
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6782
  %18 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6783
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %18, i32 0, i32 1, !dbg !6784
  call void @sequence_do_invalidate_dependent(%struct.Sequence* %17, %struct.ListBase* %seqbase), !dbg !6785
  ret void, !dbg !6786
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_invalidate_dependent(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !6787 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6788, metadata !DIExpression()), !dbg !6789
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6790, metadata !DIExpression()), !dbg !6791
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6792
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6793
  call void @sequence_invalidate_cache(%struct.Scene* %0, %struct.Sequence* %1, i8 zeroext 0, i8 zeroext 1), !dbg !6794
  ret void, !dbg !6795
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_invalidate_cache_for_modifier(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !6796 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6797, metadata !DIExpression()), !dbg !6798
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6799, metadata !DIExpression()), !dbg !6800
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6801
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6802
  call void @sequence_invalidate_cache(%struct.Scene* %0, %struct.Sequence* %1, i8 zeroext 1, i8 zeroext 0), !dbg !6803
  ret void, !dbg !6804
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_free_imbuf(%struct.Scene* %scene, %struct.ListBase* %seqbase, i8 zeroext %for_render) #0 !dbg !6805 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %for_render.addr = alloca i8, align 1
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6808, metadata !DIExpression()), !dbg !6809
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !6810, metadata !DIExpression()), !dbg !6811
  store i8 %for_render, i8* %for_render.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %for_render.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6814, metadata !DIExpression()), !dbg !6815
  call void @BKE_sequencer_cache_cleanup(), !dbg !6816
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !6817
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !6819
  %1 = load i8*, i8** %first, align 8, !dbg !6819
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !6817
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !6820
  br label %for.cond, !dbg !6821

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6822
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !6824
  br i1 %tobool, label %for.body, label %for.end, !dbg !6824

for.body:                                         ; preds = %for.cond
  %4 = load i8, i8* %for_render.addr, align 1, !dbg !6825
  %conv = zext i8 %4 to i32, !dbg !6825
  %tobool1 = icmp ne i32 %conv, 0, !dbg !6825
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !6828

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6829
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %5, i32 0, i32 22, !dbg !6829
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !6829
  %6 = load i32, i32* %cfra, align 8, !dbg !6829
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6830
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 15, !dbg !6831
  %8 = load i32, i32* %startdisp, align 8, !dbg !6831
  %cmp = icmp sge i32 %6, %8, !dbg !6832
  br i1 %cmp, label %land.lhs.true3, label %if.end, !dbg !6833

land.lhs.true3:                                   ; preds = %land.lhs.true
  %9 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6834
  %r4 = getelementptr inbounds %struct.Scene, %struct.Scene* %9, i32 0, i32 22, !dbg !6834
  %cfra5 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r4, i32 0, i32 5, !dbg !6834
  %10 = load i32, i32* %cfra5, align 8, !dbg !6834
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6835
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 16, !dbg !6836
  %12 = load i32, i32* %enddisp, align 4, !dbg !6836
  %cmp6 = icmp sle i32 %10, %12, !dbg !6837
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6838

if.then:                                          ; preds = %land.lhs.true3
  br label %for.inc, !dbg !6839

if.end:                                           ; preds = %land.lhs.true3, %land.lhs.true, %for.body
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6841
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 24, !dbg !6843
  %14 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !6843
  %tobool8 = icmp ne %struct.Strip* %14, null, !dbg !6841
  br i1 %tobool8, label %if.then9, label %if.end19, !dbg !6844

if.then9:                                         ; preds = %if.end
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6845
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 6, !dbg !6848
  %16 = load i32, i32* %type, align 4, !dbg !6848
  %cmp10 = icmp eq i32 %16, 3, !dbg !6849
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6850

if.then12:                                        ; preds = %if.then9
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6851
  call void @free_anim_seq(%struct.Sequence* %17), !dbg !6853
  br label %if.end13, !dbg !6854

if.end13:                                         ; preds = %if.then12, %if.then9
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6855
  %type14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 6, !dbg !6857
  %19 = load i32, i32* %type14, align 4, !dbg !6857
  %cmp15 = icmp eq i32 %19, 29, !dbg !6858
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !6859

if.then17:                                        ; preds = %if.end13
  %20 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6860
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6862
  call void @BKE_sequence_effect_speed_rebuild_map(%struct.Scene* %20, %struct.Sequence* %21, i8 zeroext 1), !dbg !6863
  br label %if.end18, !dbg !6864

if.end18:                                         ; preds = %if.then17, %if.end13
  br label %if.end19, !dbg !6865

if.end19:                                         ; preds = %if.end18, %if.end
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6866
  %type20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 6, !dbg !6868
  %23 = load i32, i32* %type20, align 4, !dbg !6868
  %cmp21 = icmp eq i32 %23, 1, !dbg !6869
  br i1 %cmp21, label %if.then23, label %if.end25, !dbg !6870

if.then23:                                        ; preds = %if.end19
  %24 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6871
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6873
  %seqbase24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 36, !dbg !6874
  %26 = load i8, i8* %for_render.addr, align 1, !dbg !6875
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %24, %struct.ListBase* %seqbase24, i8 zeroext %26), !dbg !6876
  br label %if.end25, !dbg !6877

if.end25:                                         ; preds = %if.then23, %if.end19
  %27 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6878
  %type26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 6, !dbg !6880
  %28 = load i32, i32* %type26, align 4, !dbg !6880
  %cmp27 = icmp eq i32 %28, 2, !dbg !6881
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !6882

if.then29:                                        ; preds = %if.end25
  br label %if.end30, !dbg !6883

if.end30:                                         ; preds = %if.then29, %if.end25
  br label %for.inc, !dbg !6885

for.inc:                                          ; preds = %if.end30, %if.then
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6886
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 0, !dbg !6887
  %30 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6887
  store %struct.Sequence* %30, %struct.Sequence** %seq, align 8, !dbg !6888
  br label %for.cond, !dbg !6889, !llvm.loop !6890

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6892
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_anim_seq(%struct.Sequence* %seq) #0 !dbg !6893 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6896
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 30, !dbg !6898
  %1 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !6898
  %tobool = icmp ne %struct.anim* %1, null, !dbg !6896
  br i1 %tobool, label %if.then, label %if.end, !dbg !6899

if.then:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6900
  %anim1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 30, !dbg !6902
  %3 = load %struct.anim*, %struct.anim** %anim1, align 8, !dbg !6902
  call void @IMB_free_anim(%struct.anim* %3), !dbg !6903
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6904
  %anim2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 30, !dbg !6905
  store %struct.anim* null, %struct.anim** %anim2, align 8, !dbg !6906
  br label %if.end, !dbg !6907

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6908
}

declare dso_local void @BKE_sequence_effect_speed_rebuild_map(%struct.Scene*, %struct.Sequence*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %scene, %struct.Sequence* %changed_seq, i32 %len_change, i32 %ibuf_change) #0 !dbg !6909 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %changed_seq.addr = alloca %struct.Sequence*, align 8
  %len_change.addr = alloca i32, align 4
  %ibuf_change.addr = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6912, metadata !DIExpression()), !dbg !6913
  store %struct.Sequence* %changed_seq, %struct.Sequence** %changed_seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %changed_seq.addr, metadata !6914, metadata !DIExpression()), !dbg !6915
  store i32 %len_change, i32* %len_change.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len_change.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  store i32 %ibuf_change, i32* %ibuf_change.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ibuf_change.addr, metadata !6918, metadata !DIExpression()), !dbg !6919
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6920, metadata !DIExpression()), !dbg !6921
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6922
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !6923
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !6921
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6924, metadata !DIExpression()), !dbg !6925
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6926
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !6928
  br i1 %cmp, label %if.then, label %if.end, !dbg !6929

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !6930

if.end:                                           ; preds = %entry
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6931
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 1, !dbg !6933
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !6934
  %3 = load i8*, i8** %first, align 8, !dbg !6934
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !6931
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !6935
  br label %for.cond, !dbg !6936

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6937
  %tobool = icmp ne %struct.Sequence* %5, null, !dbg !6939
  br i1 %tobool, label %for.body, label %for.end, !dbg !6939

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6940
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6941
  %8 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !6942
  %9 = load i32, i32* %len_change.addr, align 4, !dbg !6943
  %10 = load i32, i32* %ibuf_change.addr, align 4, !dbg !6944
  %call1 = call zeroext i8 @update_changed_seq_recurs(%struct.Scene* %6, %struct.Sequence* %7, %struct.Sequence* %8, i32 %9, i32 %10), !dbg !6945
  br label %for.inc, !dbg !6945

for.inc:                                          ; preds = %for.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6946
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 0, !dbg !6947
  %12 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6947
  store %struct.Sequence* %12, %struct.Sequence** %seq, align 8, !dbg !6948
  br label %for.cond, !dbg !6949, !llvm.loop !6950

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6952
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @update_changed_seq_recurs(%struct.Scene* %scene, %struct.Sequence* %seq, %struct.Sequence* %changed_seq, i32 %len_change, i32 %ibuf_change) #0 !dbg !6953 {
entry:
  %retval = alloca i8, align 1
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %changed_seq.addr = alloca %struct.Sequence*, align 8
  %len_change.addr = alloca i32, align 4
  %ibuf_change.addr = alloca i32, align 4
  %subseq = alloca %struct.Sequence*, align 8
  %free_imbuf = alloca i8, align 1
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !6958, metadata !DIExpression()), !dbg !6959
  store %struct.Sequence* %changed_seq, %struct.Sequence** %changed_seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %changed_seq.addr, metadata !6960, metadata !DIExpression()), !dbg !6961
  store i32 %len_change, i32* %len_change.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len_change.addr, metadata !6962, metadata !DIExpression()), !dbg !6963
  store i32 %ibuf_change, i32* %ibuf_change.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ibuf_change.addr, metadata !6964, metadata !DIExpression()), !dbg !6965
  call void @llvm.dbg.declare(metadata %struct.Sequence** %subseq, metadata !6966, metadata !DIExpression()), !dbg !6967
  call void @llvm.dbg.declare(metadata i8* %free_imbuf, metadata !6968, metadata !DIExpression()), !dbg !6969
  store i8 0, i8* %free_imbuf, align 1, !dbg !6969
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6970
  %cmp = icmp eq %struct.Sequence* %0, null, !dbg !6972
  br i1 %cmp, label %if.then, label %if.end, !dbg !6973

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6974
  br label %return, !dbg !6974

if.end:                                           ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6975
  %2 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !6977
  %cmp1 = icmp eq %struct.Sequence* %1, %2, !dbg !6978
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !6979

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %free_imbuf, align 1, !dbg !6980
  br label %if.end3, !dbg !6981

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !6982
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 36, !dbg !6984
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !6985
  %4 = load i8*, i8** %first, align 8, !dbg !6985
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !6982
  store %struct.Sequence* %5, %struct.Sequence** %subseq, align 8, !dbg !6986
  br label %for.cond, !dbg !6987

for.cond:                                         ; preds = %for.inc, %if.end3
  %6 = load %struct.Sequence*, %struct.Sequence** %subseq, align 8, !dbg !6988
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !6990
  br i1 %tobool, label %for.body, label %for.end, !dbg !6990

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !6991
  %8 = load %struct.Sequence*, %struct.Sequence** %subseq, align 8, !dbg !6993
  %9 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !6994
  %10 = load i32, i32* %len_change.addr, align 4, !dbg !6995
  %11 = load i32, i32* %ibuf_change.addr, align 4, !dbg !6996
  %call = call zeroext i8 @update_changed_seq_recurs(%struct.Scene* %7, %struct.Sequence* %8, %struct.Sequence* %9, i32 %10, i32 %11), !dbg !6997
  %tobool4 = icmp ne i8 %call, 0, !dbg !6997
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !6998

if.then5:                                         ; preds = %for.body
  store i8 1, i8* %free_imbuf, align 1, !dbg !6999
  br label %if.end6, !dbg !7000

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !7001

for.inc:                                          ; preds = %if.end6
  %12 = load %struct.Sequence*, %struct.Sequence** %subseq, align 8, !dbg !7002
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 0, !dbg !7003
  %13 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7003
  store %struct.Sequence* %13, %struct.Sequence** %subseq, align 8, !dbg !7004
  br label %for.cond, !dbg !7005, !llvm.loop !7006

for.end:                                          ; preds = %for.cond
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7008
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 33, !dbg !7010
  %15 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !7010
  %tobool7 = icmp ne %struct.Sequence* %15, null, !dbg !7008
  br i1 %tobool7, label %if.then8, label %if.end14, !dbg !7011

if.then8:                                         ; preds = %for.end
  %16 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7012
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7014
  %seq19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 33, !dbg !7015
  %18 = load %struct.Sequence*, %struct.Sequence** %seq19, align 8, !dbg !7015
  %19 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !7016
  %20 = load i32, i32* %len_change.addr, align 4, !dbg !7017
  %21 = load i32, i32* %ibuf_change.addr, align 4, !dbg !7018
  %call10 = call zeroext i8 @update_changed_seq_recurs(%struct.Scene* %16, %struct.Sequence* %18, %struct.Sequence* %19, i32 %20, i32 %21), !dbg !7019
  %tobool11 = icmp ne i8 %call10, 0, !dbg !7019
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7020

if.then12:                                        ; preds = %if.then8
  store i8 1, i8* %free_imbuf, align 1, !dbg !7021
  br label %if.end13, !dbg !7022

if.end13:                                         ; preds = %if.then12, %if.then8
  br label %if.end14, !dbg !7023

if.end14:                                         ; preds = %if.end13, %for.end
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7024
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 34, !dbg !7026
  %23 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !7026
  %tobool15 = icmp ne %struct.Sequence* %23, null, !dbg !7024
  br i1 %tobool15, label %land.lhs.true, label %if.end25, !dbg !7027

land.lhs.true:                                    ; preds = %if.end14
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7028
  %seq216 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 34, !dbg !7029
  %25 = load %struct.Sequence*, %struct.Sequence** %seq216, align 8, !dbg !7029
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7030
  %seq117 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 33, !dbg !7031
  %27 = load %struct.Sequence*, %struct.Sequence** %seq117, align 8, !dbg !7031
  %cmp18 = icmp ne %struct.Sequence* %25, %27, !dbg !7032
  br i1 %cmp18, label %if.then19, label %if.end25, !dbg !7033

if.then19:                                        ; preds = %land.lhs.true
  %28 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7034
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7036
  %seq220 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 34, !dbg !7037
  %30 = load %struct.Sequence*, %struct.Sequence** %seq220, align 8, !dbg !7037
  %31 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !7038
  %32 = load i32, i32* %len_change.addr, align 4, !dbg !7039
  %33 = load i32, i32* %ibuf_change.addr, align 4, !dbg !7040
  %call21 = call zeroext i8 @update_changed_seq_recurs(%struct.Scene* %28, %struct.Sequence* %30, %struct.Sequence* %31, i32 %32, i32 %33), !dbg !7041
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7041
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !7042

if.then23:                                        ; preds = %if.then19
  store i8 1, i8* %free_imbuf, align 1, !dbg !7043
  br label %if.end24, !dbg !7044

if.end24:                                         ; preds = %if.then23, %if.then19
  br label %if.end25, !dbg !7045

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %if.end14
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7046
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 35, !dbg !7048
  %35 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !7048
  %tobool26 = icmp ne %struct.Sequence* %35, null, !dbg !7046
  br i1 %tobool26, label %land.lhs.true27, label %if.end41, !dbg !7049

land.lhs.true27:                                  ; preds = %if.end25
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7050
  %seq328 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 35, !dbg !7051
  %37 = load %struct.Sequence*, %struct.Sequence** %seq328, align 8, !dbg !7051
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7052
  %seq129 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 33, !dbg !7053
  %39 = load %struct.Sequence*, %struct.Sequence** %seq129, align 8, !dbg !7053
  %cmp30 = icmp ne %struct.Sequence* %37, %39, !dbg !7054
  br i1 %cmp30, label %land.lhs.true31, label %if.end41, !dbg !7055

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %40 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7056
  %seq332 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 35, !dbg !7057
  %41 = load %struct.Sequence*, %struct.Sequence** %seq332, align 8, !dbg !7057
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7058
  %seq233 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 34, !dbg !7059
  %43 = load %struct.Sequence*, %struct.Sequence** %seq233, align 8, !dbg !7059
  %cmp34 = icmp ne %struct.Sequence* %41, %43, !dbg !7060
  br i1 %cmp34, label %if.then35, label %if.end41, !dbg !7061

if.then35:                                        ; preds = %land.lhs.true31
  %44 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7062
  %45 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7064
  %seq336 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 35, !dbg !7065
  %46 = load %struct.Sequence*, %struct.Sequence** %seq336, align 8, !dbg !7065
  %47 = load %struct.Sequence*, %struct.Sequence** %changed_seq.addr, align 8, !dbg !7066
  %48 = load i32, i32* %len_change.addr, align 4, !dbg !7067
  %49 = load i32, i32* %ibuf_change.addr, align 4, !dbg !7068
  %call37 = call zeroext i8 @update_changed_seq_recurs(%struct.Scene* %44, %struct.Sequence* %46, %struct.Sequence* %47, i32 %48, i32 %49), !dbg !7069
  %tobool38 = icmp ne i8 %call37, 0, !dbg !7069
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !7070

if.then39:                                        ; preds = %if.then35
  store i8 1, i8* %free_imbuf, align 1, !dbg !7071
  br label %if.end40, !dbg !7072

if.end40:                                         ; preds = %if.then39, %if.then35
  br label %if.end41, !dbg !7073

if.end41:                                         ; preds = %if.end40, %land.lhs.true31, %land.lhs.true27, %if.end25
  %50 = load i8, i8* %free_imbuf, align 1, !dbg !7074
  %tobool42 = icmp ne i8 %50, 0, !dbg !7074
  br i1 %tobool42, label %if.then43, label %if.end57, !dbg !7076

if.then43:                                        ; preds = %if.end41
  %51 = load i32, i32* %ibuf_change.addr, align 4, !dbg !7077
  %tobool44 = icmp ne i32 %51, 0, !dbg !7077
  br i1 %tobool44, label %if.then45, label %if.end53, !dbg !7080

if.then45:                                        ; preds = %if.then43
  %52 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7081
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %52, i32 0, i32 6, !dbg !7084
  %53 = load i32, i32* %type, align 4, !dbg !7084
  %cmp46 = icmp eq i32 %53, 3, !dbg !7085
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !7086

if.then47:                                        ; preds = %if.then45
  %54 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7087
  call void @free_anim_seq(%struct.Sequence* %54), !dbg !7088
  br label %if.end48, !dbg !7088

if.end48:                                         ; preds = %if.then47, %if.then45
  %55 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7089
  %type49 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %55, i32 0, i32 6, !dbg !7091
  %56 = load i32, i32* %type49, align 4, !dbg !7091
  %cmp50 = icmp eq i32 %56, 29, !dbg !7092
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !7093

if.then51:                                        ; preds = %if.end48
  %57 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7094
  %58 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7096
  call void @BKE_sequence_effect_speed_rebuild_map(%struct.Scene* %57, %struct.Sequence* %58, i8 zeroext 1), !dbg !7097
  br label %if.end52, !dbg !7098

if.end52:                                         ; preds = %if.then51, %if.end48
  br label %if.end53, !dbg !7099

if.end53:                                         ; preds = %if.end52, %if.then43
  %59 = load i32, i32* %len_change.addr, align 4, !dbg !7100
  %tobool54 = icmp ne i32 %59, 0, !dbg !7100
  br i1 %tobool54, label %if.then55, label %if.end56, !dbg !7102

if.then55:                                        ; preds = %if.end53
  %60 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7103
  %61 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7104
  call void @BKE_sequence_calc(%struct.Scene* %60, %struct.Sequence* %61), !dbg !7105
  br label %if.end56, !dbg !7105

if.end56:                                         ; preds = %if.then55, %if.end53
  br label %if.end57, !dbg !7106

if.end57:                                         ; preds = %if.end56, %if.end41
  %62 = load i8, i8* %free_imbuf, align 1, !dbg !7107
  store i8 %62, i8* %retval, align 1, !dbg !7108
  br label %return, !dbg !7108

return:                                           ; preds = %if.end57, %if.then
  %63 = load i8, i8* %retval, align 1, !dbg !7109
  ret i8 %63, !dbg !7109
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %seq, i8 zeroext %metaclip) #0 !dbg !7110 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %metaclip.addr = alloca i8, align 1
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7113, metadata !DIExpression()), !dbg !7114
  store i8 %metaclip, i8* %metaclip.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %metaclip.addr, metadata !7115, metadata !DIExpression()), !dbg !7116
  %0 = load i8, i8* %metaclip.addr, align 1, !dbg !7117
  %conv = zext i8 %0 to i32, !dbg !7117
  %tobool = icmp ne i32 %conv, 0, !dbg !7117
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7119

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7120
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 2, !dbg !7121
  %2 = load i8*, i8** %tmp, align 8, !dbg !7121
  %tobool1 = icmp ne i8* %2, null, !dbg !7120
  br i1 %tobool1, label %if.then, label %if.else, !dbg !7122

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7123
  %call = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %3, i8 zeroext 0), !dbg !7125
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7126
  %tmp2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 2, !dbg !7127
  %5 = load i8*, i8** %tmp2, align 8, !dbg !7127
  %6 = bitcast i8* %5 to %struct.Sequence*, !dbg !7128
  %call3 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %6, i8 zeroext 1), !dbg !7129
  %call4 = call i32 @max_ii(i32 %call, i32 %call3), !dbg !7130
  store i32 %call4, i32* %retval, align 4, !dbg !7131
  br label %return, !dbg !7131

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7132
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 8, !dbg !7134
  %8 = load i32, i32* %start, align 4, !dbg !7134
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7135
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 11, !dbg !7136
  %10 = load i32, i32* %startstill, align 8, !dbg !7136
  %sub = sub nsw i32 %8, %10, !dbg !7137
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7138
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 9, !dbg !7139
  %12 = load i32, i32* %startofs, align 8, !dbg !7139
  %add = add nsw i32 %sub, %12, !dbg !7140
  store i32 %add, i32* %retval, align 4, !dbg !7141
  br label %return, !dbg !7141

return:                                           ; preds = %if.else, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !7142
  ret i32 %13, !dbg !7142
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %seq, i8 zeroext %metaclip) #0 !dbg !7143 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %metaclip.addr = alloca i8, align 1
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7144, metadata !DIExpression()), !dbg !7145
  store i8 %metaclip, i8* %metaclip.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %metaclip.addr, metadata !7146, metadata !DIExpression()), !dbg !7147
  %0 = load i8, i8* %metaclip.addr, align 1, !dbg !7148
  %conv = zext i8 %0 to i32, !dbg !7148
  %tobool = icmp ne i32 %conv, 0, !dbg !7148
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7150

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7151
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 2, !dbg !7152
  %2 = load i8*, i8** %tmp, align 8, !dbg !7152
  %tobool1 = icmp ne i8* %2, null, !dbg !7151
  br i1 %tobool1, label %if.then, label %if.else, !dbg !7153

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7154
  %call = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %3, i8 zeroext 0), !dbg !7156
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7157
  %tmp2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 2, !dbg !7158
  %5 = load i8*, i8** %tmp2, align 8, !dbg !7158
  %6 = bitcast i8* %5 to %struct.Sequence*, !dbg !7159
  %call3 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %6, i8 zeroext 1), !dbg !7160
  %call4 = call i32 @min_ii(i32 %call, i32 %call3), !dbg !7161
  store i32 %call4, i32* %retval, align 4, !dbg !7162
  br label %return, !dbg !7162

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7163
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 8, !dbg !7165
  %8 = load i32, i32* %start, align 4, !dbg !7165
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7166
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 7, !dbg !7167
  %10 = load i32, i32* %len, align 8, !dbg !7167
  %add = add nsw i32 %8, %10, !dbg !7168
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7169
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 12, !dbg !7170
  %12 = load i32, i32* %endstill, align 4, !dbg !7170
  %add5 = add nsw i32 %add, %12, !dbg !7171
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7172
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 10, !dbg !7173
  %14 = load i32, i32* %endofs, align 4, !dbg !7173
  %sub = sub nsw i32 %add5, %14, !dbg !7174
  store i32 %sub, i32* %retval, align 4, !dbg !7175
  br label %return, !dbg !7175

return:                                           ; preds = %if.else, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !7176
  ret i32 %15, !dbg !7176
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @min_ii(i32 %a, i32 %b) #0 !dbg !7177 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !7178, metadata !DIExpression()), !dbg !7179
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !7180, metadata !DIExpression()), !dbg !7181
  %0 = load i32, i32* %a.addr, align 4, !dbg !7182
  %1 = load i32, i32* %b.addr, align 4, !dbg !7183
  %cmp = icmp slt i32 %0, %1, !dbg !7184
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7185

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !7186
  br label %cond.end, !dbg !7185

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !7187
  br label %cond.end, !dbg !7185

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !7185
  ret i32 %cond, !dbg !7188
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #5

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_single_check(%struct.Sequence* %seq) #0 !dbg !7189 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7194
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 7, !dbg !7195
  %1 = load i32, i32* %len, align 8, !dbg !7195
  %cmp = icmp eq i32 %1, 1, !dbg !7196
  br i1 %cmp, label %land.rhs, label %land.end6, !dbg !7197

land.rhs:                                         ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7198
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !7199
  %3 = load i32, i32* %type, align 4, !dbg !7199
  %cmp1 = icmp eq i32 %3, 0, !dbg !7200
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !7201

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7202
  %type2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !7203
  %5 = load i32, i32* %type2, align 4, !dbg !7203
  %and = and i32 %5, 8, !dbg !7204
  %tobool = icmp ne i32 %and, 0, !dbg !7204
  br i1 %tobool, label %land.rhs3, label %land.end, !dbg !7205

land.rhs3:                                        ; preds = %lor.rhs
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7206
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !7207
  %7 = load i32, i32* %type4, align 4, !dbg !7207
  %call = call i32 @BKE_sequence_effect_get_num_inputs(i32 %7), !dbg !7208
  %cmp5 = icmp eq i32 %call, 0, !dbg !7209
  br label %land.end

land.end:                                         ; preds = %land.rhs3, %lor.rhs
  %8 = phi i1 [ false, %lor.rhs ], [ %cmp5, %land.rhs3 ], !dbg !7210
  br label %lor.end, !dbg !7201

lor.end:                                          ; preds = %land.end, %land.rhs
  %9 = phi i1 [ true, %land.rhs ], [ %8, %land.end ]
  br label %land.end6

land.end6:                                        ; preds = %lor.end, %entry
  %10 = phi i1 [ false, %entry ], [ %9, %lor.end ], !dbg !7210
  %land.ext = zext i1 %10 to i32, !dbg !7197
  %conv = trunc i32 %land.ext to i8, !dbg !7211
  ret i8 %conv, !dbg !7212
}

declare dso_local i32 @BKE_sequence_effect_get_num_inputs(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_base_isolated_sel_check(%struct.ListBase* %seqbase, i8 zeroext %one_only) #0 !dbg !7213 {
entry:
  %retval = alloca i8, align 1
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %one_only.addr = alloca i8, align 1
  %seq = alloca %struct.Sequence*, align 8
  %ok = alloca i8, align 1
  %first = alloca i8, align 1
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  store i8 %one_only, i8* %one_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %one_only.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7220, metadata !DIExpression()), !dbg !7221
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !7222, metadata !DIExpression()), !dbg !7223
  store i8 0, i8* %ok, align 1, !dbg !7223
  call void @llvm.dbg.declare(metadata i8* %first, metadata !7224, metadata !DIExpression()), !dbg !7225
  store i8 0, i8* %first, align 1, !dbg !7225
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !7226
  %first1 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !7228
  %1 = load i8*, i8** %first1, align 8, !dbg !7228
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !7226
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !7229
  br label %for.cond, !dbg !7230

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7231
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !7233
  br i1 %tobool, label %for.body, label %for.end, !dbg !7233

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7234
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 5, !dbg !7237
  %5 = load i32, i32* %flag, align 8, !dbg !7237
  %and = and i32 %5, 1, !dbg !7238
  %tobool2 = icmp ne i32 %and, 0, !dbg !7238
  br i1 %tobool2, label %if.then, label %if.end9, !dbg !7239

if.then:                                          ; preds = %for.body
  %6 = load i8, i8* %one_only.addr, align 1, !dbg !7240
  %tobool3 = icmp ne i8 %6, 0, !dbg !7240
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !7243

if.then4:                                         ; preds = %if.then
  store i8 1, i8* %ok, align 1, !dbg !7244
  br label %for.end, !dbg !7246

if.else:                                          ; preds = %if.then
  %7 = load i8, i8* %first, align 1, !dbg !7247
  %tobool5 = icmp ne i8 %7, 0, !dbg !7247
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !7250

if.then6:                                         ; preds = %if.else
  store i8 1, i8* %ok, align 1, !dbg !7251
  br label %for.end, !dbg !7253

if.else7:                                         ; preds = %if.else
  store i8 1, i8* %first, align 1, !dbg !7254
  br label %if.end

if.end:                                           ; preds = %if.else7
  br label %if.end8

if.end8:                                          ; preds = %if.end
  br label %if.end9, !dbg !7255

if.end9:                                          ; preds = %if.end8, %for.body
  br label %for.inc, !dbg !7256

for.inc:                                          ; preds = %if.end9
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7257
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 0, !dbg !7258
  %9 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7258
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !7259
  br label %for.cond, !dbg !7260, !llvm.loop !7261

for.end:                                          ; preds = %if.then6, %if.then4, %for.cond
  %10 = load i8, i8* %ok, align 1, !dbg !7263
  %conv = zext i8 %10 to i32, !dbg !7263
  %cmp = icmp eq i32 %conv, 0, !dbg !7265
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !7266

if.then11:                                        ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !7267
  br label %return, !dbg !7267

if.end12:                                         ; preds = %for.end
  %11 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !7268
  %first13 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %11, i32 0, i32 0, !dbg !7270
  %12 = load i8*, i8** %first13, align 8, !dbg !7270
  %13 = bitcast i8* %12 to %struct.Sequence*, !dbg !7268
  store %struct.Sequence* %13, %struct.Sequence** %seq, align 8, !dbg !7271
  br label %for.cond14, !dbg !7272

for.cond14:                                       ; preds = %for.inc76, %if.end12
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7273
  %tobool15 = icmp ne %struct.Sequence* %14, null, !dbg !7275
  br i1 %tobool15, label %for.body16, label %for.end78, !dbg !7275

for.body16:                                       ; preds = %for.cond14
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7276
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 6, !dbg !7279
  %16 = load i32, i32* %type, align 4, !dbg !7279
  %and17 = and i32 %16, 8, !dbg !7280
  %cmp18 = icmp eq i32 %and17, 0, !dbg !7281
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !7282

if.then20:                                        ; preds = %for.body16
  br label %for.inc76, !dbg !7283

if.end21:                                         ; preds = %for.body16
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7284
  %flag22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 5, !dbg !7286
  %18 = load i32, i32* %flag22, align 8, !dbg !7286
  %and23 = and i32 %18, 1, !dbg !7287
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7287
  br i1 %tobool24, label %if.then25, label %if.else49, !dbg !7288

if.then25:                                        ; preds = %if.end21
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7289
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 33, !dbg !7292
  %20 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !7292
  %tobool26 = icmp ne %struct.Sequence* %20, null, !dbg !7289
  br i1 %tobool26, label %land.lhs.true, label %lor.lhs.false, !dbg !7293

land.lhs.true:                                    ; preds = %if.then25
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7294
  %seq127 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 33, !dbg !7295
  %22 = load %struct.Sequence*, %struct.Sequence** %seq127, align 8, !dbg !7295
  %flag28 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 5, !dbg !7296
  %23 = load i32, i32* %flag28, align 8, !dbg !7296
  %and29 = and i32 %23, 1, !dbg !7297
  %cmp30 = icmp eq i32 %and29, 0, !dbg !7298
  br i1 %cmp30, label %if.then47, label %lor.lhs.false, !dbg !7299

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then25
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7300
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 34, !dbg !7301
  %25 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !7301
  %tobool32 = icmp ne %struct.Sequence* %25, null, !dbg !7300
  br i1 %tobool32, label %land.lhs.true33, label %lor.lhs.false39, !dbg !7302

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7303
  %seq234 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 34, !dbg !7304
  %27 = load %struct.Sequence*, %struct.Sequence** %seq234, align 8, !dbg !7304
  %flag35 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 5, !dbg !7305
  %28 = load i32, i32* %flag35, align 8, !dbg !7305
  %and36 = and i32 %28, 1, !dbg !7306
  %cmp37 = icmp eq i32 %and36, 0, !dbg !7307
  br i1 %cmp37, label %if.then47, label %lor.lhs.false39, !dbg !7308

lor.lhs.false39:                                  ; preds = %land.lhs.true33, %lor.lhs.false
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7309
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 35, !dbg !7310
  %30 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !7310
  %tobool40 = icmp ne %struct.Sequence* %30, null, !dbg !7309
  br i1 %tobool40, label %land.lhs.true41, label %if.end48, !dbg !7311

land.lhs.true41:                                  ; preds = %lor.lhs.false39
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7312
  %seq342 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 35, !dbg !7313
  %32 = load %struct.Sequence*, %struct.Sequence** %seq342, align 8, !dbg !7313
  %flag43 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 5, !dbg !7314
  %33 = load i32, i32* %flag43, align 8, !dbg !7314
  %and44 = and i32 %33, 1, !dbg !7315
  %cmp45 = icmp eq i32 %and44, 0, !dbg !7316
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !7317

if.then47:                                        ; preds = %land.lhs.true41, %land.lhs.true33, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7318
  br label %return, !dbg !7318

if.end48:                                         ; preds = %land.lhs.true41, %lor.lhs.false39
  br label %if.end75, !dbg !7320

if.else49:                                        ; preds = %if.end21
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7321
  %seq150 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 33, !dbg !7324
  %35 = load %struct.Sequence*, %struct.Sequence** %seq150, align 8, !dbg !7324
  %tobool51 = icmp ne %struct.Sequence* %35, null, !dbg !7321
  br i1 %tobool51, label %land.lhs.true52, label %lor.lhs.false57, !dbg !7325

land.lhs.true52:                                  ; preds = %if.else49
  %36 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7326
  %seq153 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 33, !dbg !7327
  %37 = load %struct.Sequence*, %struct.Sequence** %seq153, align 8, !dbg !7327
  %flag54 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 5, !dbg !7328
  %38 = load i32, i32* %flag54, align 8, !dbg !7328
  %and55 = and i32 %38, 1, !dbg !7329
  %tobool56 = icmp ne i32 %and55, 0, !dbg !7329
  br i1 %tobool56, label %if.then73, label %lor.lhs.false57, !dbg !7330

lor.lhs.false57:                                  ; preds = %land.lhs.true52, %if.else49
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7331
  %seq258 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 34, !dbg !7332
  %40 = load %struct.Sequence*, %struct.Sequence** %seq258, align 8, !dbg !7332
  %tobool59 = icmp ne %struct.Sequence* %40, null, !dbg !7331
  br i1 %tobool59, label %land.lhs.true60, label %lor.lhs.false65, !dbg !7333

land.lhs.true60:                                  ; preds = %lor.lhs.false57
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7334
  %seq261 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 34, !dbg !7335
  %42 = load %struct.Sequence*, %struct.Sequence** %seq261, align 8, !dbg !7335
  %flag62 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 5, !dbg !7336
  %43 = load i32, i32* %flag62, align 8, !dbg !7336
  %and63 = and i32 %43, 1, !dbg !7337
  %tobool64 = icmp ne i32 %and63, 0, !dbg !7337
  br i1 %tobool64, label %if.then73, label %lor.lhs.false65, !dbg !7338

lor.lhs.false65:                                  ; preds = %land.lhs.true60, %lor.lhs.false57
  %44 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7339
  %seq366 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 35, !dbg !7340
  %45 = load %struct.Sequence*, %struct.Sequence** %seq366, align 8, !dbg !7340
  %tobool67 = icmp ne %struct.Sequence* %45, null, !dbg !7339
  br i1 %tobool67, label %land.lhs.true68, label %if.end74, !dbg !7341

land.lhs.true68:                                  ; preds = %lor.lhs.false65
  %46 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7342
  %seq369 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 35, !dbg !7343
  %47 = load %struct.Sequence*, %struct.Sequence** %seq369, align 8, !dbg !7343
  %flag70 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 5, !dbg !7344
  %48 = load i32, i32* %flag70, align 8, !dbg !7344
  %and71 = and i32 %48, 1, !dbg !7345
  %tobool72 = icmp ne i32 %and71, 0, !dbg !7345
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !7346

if.then73:                                        ; preds = %land.lhs.true68, %land.lhs.true60, %land.lhs.true52
  store i8 0, i8* %retval, align 1, !dbg !7347
  br label %return, !dbg !7347

if.end74:                                         ; preds = %land.lhs.true68, %lor.lhs.false65
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end48
  br label %for.inc76, !dbg !7349

for.inc76:                                        ; preds = %if.end75, %if.then20
  %49 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7350
  %next77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 0, !dbg !7351
  %50 = load %struct.Sequence*, %struct.Sequence** %next77, align 8, !dbg !7351
  store %struct.Sequence* %50, %struct.Sequence** %seq, align 8, !dbg !7352
  br label %for.cond14, !dbg !7353, !llvm.loop !7354

for.end78:                                        ; preds = %for.cond14
  store i8 1, i8* %retval, align 1, !dbg !7356
  br label %return, !dbg !7356

return:                                           ; preds = %for.end78, %if.then73, %if.then47, %if.then11
  %51 = load i8, i8* %retval, align 1, !dbg !7357
  ret i8 %51, !dbg !7357
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_tx_handle_xlimits(%struct.Sequence* %seq, i32 %leftflag, i32 %rightflag) #0 !dbg !7358 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %leftflag.addr = alloca i32, align 4
  %rightflag.addr = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7361, metadata !DIExpression()), !dbg !7362
  store i32 %leftflag, i32* %leftflag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %leftflag.addr, metadata !7363, metadata !DIExpression()), !dbg !7364
  store i32 %rightflag, i32* %rightflag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rightflag.addr, metadata !7365, metadata !DIExpression()), !dbg !7366
  %0 = load i32, i32* %leftflag.addr, align 4, !dbg !7367
  %tobool = icmp ne i32 %0, 0, !dbg !7367
  br i1 %tobool, label %if.then, label %if.end17, !dbg !7369

if.then:                                          ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7370
  %call = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %1, i8 zeroext 0), !dbg !7373
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7374
  %call1 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %2, i8 zeroext 0), !dbg !7375
  %cmp = icmp sge i32 %call, %call1, !dbg !7376
  br i1 %cmp, label %if.then2, label %if.end, !dbg !7377

if.then2:                                         ; preds = %if.then
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7378
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7380
  %call3 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %4, i8 zeroext 0), !dbg !7381
  %sub = sub nsw i32 %call3, 1, !dbg !7382
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %3, i32 %sub), !dbg !7383
  br label %if.end, !dbg !7384

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7385
  %call4 = call zeroext i8 @BKE_sequence_single_check(%struct.Sequence* %5), !dbg !7387
  %conv = zext i8 %call4 to i32, !dbg !7387
  %cmp5 = icmp eq i32 %conv, 0, !dbg !7388
  br i1 %cmp5, label %if.then7, label %if.end16, !dbg !7389

if.then7:                                         ; preds = %if.end
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7390
  %call8 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %6, i8 zeroext 0), !dbg !7393
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7394
  %call9 = call i32 @seq_tx_get_end(%struct.Sequence* %7), !dbg !7395
  %cmp10 = icmp sge i32 %call8, %call9, !dbg !7396
  br i1 %cmp10, label %if.then12, label %if.end15, !dbg !7397

if.then12:                                        ; preds = %if.then7
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7398
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7400
  %call13 = call i32 @seq_tx_get_end(%struct.Sequence* %9), !dbg !7401
  %sub14 = sub nsw i32 %call13, 1, !dbg !7402
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %8, i32 %sub14), !dbg !7403
  br label %if.end15, !dbg !7404

if.end15:                                         ; preds = %if.then12, %if.then7
  br label %if.end16, !dbg !7405

if.end16:                                         ; preds = %if.end15, %if.end
  br label %if.end17, !dbg !7406

if.end17:                                         ; preds = %if.end16, %entry
  %10 = load i32, i32* %rightflag.addr, align 4, !dbg !7407
  %tobool18 = icmp ne i32 %10, 0, !dbg !7407
  br i1 %tobool18, label %if.then19, label %if.end41, !dbg !7409

if.then19:                                        ; preds = %if.end17
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7410
  %call20 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %11, i8 zeroext 0), !dbg !7413
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7414
  %call21 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %12, i8 zeroext 0), !dbg !7415
  %cmp22 = icmp sle i32 %call20, %call21, !dbg !7416
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !7417

if.then24:                                        ; preds = %if.then19
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7418
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7420
  %call25 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %14, i8 zeroext 0), !dbg !7421
  %add = add nsw i32 %call25, 1, !dbg !7422
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %13, i32 %add), !dbg !7423
  br label %if.end26, !dbg !7424

if.end26:                                         ; preds = %if.then24, %if.then19
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7425
  %call27 = call zeroext i8 @BKE_sequence_single_check(%struct.Sequence* %15), !dbg !7427
  %conv28 = zext i8 %call27 to i32, !dbg !7427
  %cmp29 = icmp eq i32 %conv28, 0, !dbg !7428
  br i1 %cmp29, label %if.then31, label %if.end40, !dbg !7429

if.then31:                                        ; preds = %if.end26
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7430
  %call32 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %16, i8 zeroext 0), !dbg !7433
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7434
  %call33 = call i32 @seq_tx_get_start(%struct.Sequence* %17), !dbg !7435
  %cmp34 = icmp sle i32 %call32, %call33, !dbg !7436
  br i1 %cmp34, label %if.then36, label %if.end39, !dbg !7437

if.then36:                                        ; preds = %if.then31
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7438
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7440
  %call37 = call i32 @seq_tx_get_start(%struct.Sequence* %19), !dbg !7441
  %add38 = add nsw i32 %call37, 1, !dbg !7442
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %18, i32 %add38), !dbg !7443
  br label %if.end39, !dbg !7444

if.end39:                                         ; preds = %if.then36, %if.then31
  br label %if.end40, !dbg !7445

if.end40:                                         ; preds = %if.end39, %if.end26
  br label %if.end41, !dbg !7446

if.end41:                                         ; preds = %if.end40, %if.end17
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7447
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 6, !dbg !7449
  %21 = load i32, i32* %type, align 4, !dbg !7449
  %cmp42 = icmp eq i32 %21, 4, !dbg !7450
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !7451

if.then44:                                        ; preds = %if.end41
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7452
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 11, !dbg !7454
  store i32 0, i32* %startstill, align 8, !dbg !7455
  %23 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7456
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 12, !dbg !7457
  store i32 0, i32* %endstill, align 4, !dbg !7458
  br label %if.end45, !dbg !7459

if.end45:                                         ; preds = %if.then44, %if.end41
  ret void, !dbg !7460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_tx_get_end(%struct.Sequence* %seq) #0 !dbg !7461 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7466
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !7467
  %1 = load i32, i32* %start, align 4, !dbg !7467
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7468
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 7, !dbg !7469
  %3 = load i32, i32* %len, align 8, !dbg !7469
  %add = add nsw i32 %1, %3, !dbg !7470
  ret i32 %add, !dbg !7471
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_tx_get_start(%struct.Sequence* %seq) #0 !dbg !7472 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7473, metadata !DIExpression()), !dbg !7474
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7475
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !7476
  %1 = load i32, i32* %start, align 4, !dbg !7476
  ret i32 %1, !dbg !7477
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_tx_test(%struct.Sequence* %seq) #0 !dbg !7478 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7481
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !7482
  %1 = load i32, i32* %type, align 4, !dbg !7482
  %cmp = icmp slt i32 %1, 8, !dbg !7483
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7484

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7485
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !7486
  %3 = load i32, i32* %type1, align 4, !dbg !7486
  %call = call i32 @BKE_sequence_effect_get_num_inputs(i32 %3), !dbg !7487
  %cmp2 = icmp eq i32 %call, 0, !dbg !7488
  br label %lor.end, !dbg !7484

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !7484
  %conv = trunc i32 %lor.ext to i8, !dbg !7489
  ret i8 %conv, !dbg !7490
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %seqbasep, %struct.Sequence* %test) #0 !dbg !7491 {
entry:
  %retval = alloca i8, align 1
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %test.addr = alloca %struct.Sequence*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !7494, metadata !DIExpression()), !dbg !7495
  store %struct.Sequence* %test, %struct.Sequence** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %test.addr, metadata !7496, metadata !DIExpression()), !dbg !7497
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7498, metadata !DIExpression()), !dbg !7499
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !7500
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !7501
  %1 = load i8*, i8** %first, align 8, !dbg !7501
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !7500
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !7502
  br label %while.cond, !dbg !7503

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7504
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !7503
  br i1 %tobool, label %while.body, label %while.end, !dbg !7503

while.body:                                       ; preds = %while.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7505
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7508
  %call = call zeroext i8 @seq_overlap(%struct.Sequence* %4, %struct.Sequence* %5), !dbg !7509
  %tobool1 = icmp ne i8 %call, 0, !dbg !7509
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7510

if.then:                                          ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !7511
  br label %return, !dbg !7511

if.end:                                           ; preds = %while.body
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7512
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 0, !dbg !7513
  %7 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7513
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !7514
  br label %while.cond, !dbg !7503, !llvm.loop !7515

while.end:                                        ; preds = %while.cond
  store i8 0, i8* %retval, align 1, !dbg !7517
  br label %return, !dbg !7517

return:                                           ; preds = %while.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7518
  ret i8 %8, !dbg !7518
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @seq_overlap(%struct.Sequence* %seq1, %struct.Sequence* %seq2) #0 !dbg !7519 {
entry:
  %seq1.addr = alloca %struct.Sequence*, align 8
  %seq2.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq1, %struct.Sequence** %seq1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq1.addr, metadata !7520, metadata !DIExpression()), !dbg !7521
  store %struct.Sequence* %seq2, %struct.Sequence** %seq2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq2.addr, metadata !7522, metadata !DIExpression()), !dbg !7523
  %0 = load %struct.Sequence*, %struct.Sequence** %seq1.addr, align 8, !dbg !7524
  %1 = load %struct.Sequence*, %struct.Sequence** %seq2.addr, align 8, !dbg !7525
  %cmp = icmp ne %struct.Sequence* %0, %1, !dbg !7526
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !7527

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq1.addr, align 8, !dbg !7528
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 13, !dbg !7529
  %3 = load i32, i32* %machine, align 8, !dbg !7529
  %4 = load %struct.Sequence*, %struct.Sequence** %seq2.addr, align 8, !dbg !7530
  %machine1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 13, !dbg !7531
  %5 = load i32, i32* %machine1, align 8, !dbg !7531
  %cmp2 = icmp eq i32 %3, %5, !dbg !7532
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !7533

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %struct.Sequence*, %struct.Sequence** %seq1.addr, align 8, !dbg !7534
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 16, !dbg !7535
  %7 = load i32, i32* %enddisp, align 4, !dbg !7535
  %8 = load %struct.Sequence*, %struct.Sequence** %seq2.addr, align 8, !dbg !7536
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 15, !dbg !7537
  %9 = load i32, i32* %startdisp, align 8, !dbg !7537
  %cmp3 = icmp sle i32 %7, %9, !dbg !7538
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !7539

lor.rhs:                                          ; preds = %land.rhs
  %10 = load %struct.Sequence*, %struct.Sequence** %seq1.addr, align 8, !dbg !7540
  %startdisp4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 15, !dbg !7541
  %11 = load i32, i32* %startdisp4, align 8, !dbg !7541
  %12 = load %struct.Sequence*, %struct.Sequence** %seq2.addr, align 8, !dbg !7542
  %enddisp5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 16, !dbg !7543
  %13 = load i32, i32* %enddisp5, align 4, !dbg !7543
  %cmp6 = icmp sge i32 %11, %13, !dbg !7544
  br label %lor.end, !dbg !7539

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %14 = phi i1 [ true, %land.rhs ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32, !dbg !7539
  %cmp7 = icmp eq i32 %lor.ext, 0, !dbg !7545
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %15 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp7, %lor.end ], !dbg !7546
  %land.ext = zext i1 %15 to i32, !dbg !7533
  %conv = trunc i32 %land.ext to i8, !dbg !7547
  ret i8 %conv, !dbg !7548
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_translate(%struct.Scene* %evil_scene, %struct.Sequence* %seq, i32 %delta) #0 !dbg !7549 {
entry:
  %evil_scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %delta.addr = alloca i32, align 4
  %seq_child = alloca %struct.Sequence*, align 8
  store %struct.Scene* %evil_scene, %struct.Scene** %evil_scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %evil_scene.addr, metadata !7552, metadata !DIExpression()), !dbg !7553
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7554, metadata !DIExpression()), !dbg !7555
  store i32 %delta, i32* %delta.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delta.addr, metadata !7556, metadata !DIExpression()), !dbg !7557
  %0 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !7558
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7559
  %2 = load i32, i32* %delta.addr, align 4, !dbg !7560
  call void @BKE_sequencer_offset_animdata(%struct.Scene* %0, %struct.Sequence* %1, i32 %2), !dbg !7561
  %3 = load i32, i32* %delta.addr, align 4, !dbg !7562
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7563
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 8, !dbg !7564
  %5 = load i32, i32* %start, align 4, !dbg !7565
  %add = add nsw i32 %5, %3, !dbg !7565
  store i32 %add, i32* %start, align 4, !dbg !7565
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7566
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !7568
  %7 = load i32, i32* %type, align 4, !dbg !7568
  %cmp = icmp eq i32 %7, 1, !dbg !7569
  br i1 %cmp, label %if.then, label %if.end, !dbg !7570

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_child, metadata !7571, metadata !DIExpression()), !dbg !7573
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7574
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 36, !dbg !7576
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !7577
  %9 = load i8*, i8** %first, align 8, !dbg !7577
  %10 = bitcast i8* %9 to %struct.Sequence*, !dbg !7574
  store %struct.Sequence* %10, %struct.Sequence** %seq_child, align 8, !dbg !7578
  br label %for.cond, !dbg !7579

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7580
  %tobool = icmp ne %struct.Sequence* %11, null, !dbg !7582
  br i1 %tobool, label %for.body, label %for.end, !dbg !7582

for.body:                                         ; preds = %for.cond
  %12 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !7583
  %13 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7585
  %14 = load i32, i32* %delta.addr, align 4, !dbg !7586
  call void @BKE_sequence_translate(%struct.Scene* %12, %struct.Sequence* %13, i32 %14), !dbg !7587
  br label %for.inc, !dbg !7588

for.inc:                                          ; preds = %for.body
  %15 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7589
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 0, !dbg !7590
  %16 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7590
  store %struct.Sequence* %16, %struct.Sequence** %seq_child, align 8, !dbg !7591
  br label %for.cond, !dbg !7592, !llvm.loop !7593

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !7595

if.end:                                           ; preds = %for.end, %entry
  %17 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !7596
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7597
  call void @BKE_sequence_calc_disp(%struct.Scene* %17, %struct.Sequence* %18), !dbg !7598
  ret void, !dbg !7599
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_offset_animdata(%struct.Scene* %scene, %struct.Sequence* %seq, i32 %ofs) #0 !dbg !7600 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %ofs.addr = alloca i32, align 4
  %str = alloca [163 x i8], align 16
  %str_len = alloca i64, align 8
  %fcu = alloca %struct.FCurve*, align 8
  %i = alloca i32, align 4
  %bezt17 = alloca %struct.BezTriple*, align 8
  %fpt39 = alloca %struct.FPoint*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !7601, metadata !DIExpression()), !dbg !7602
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7603, metadata !DIExpression()), !dbg !7604
  store i32 %ofs, i32* %ofs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ofs.addr, metadata !7605, metadata !DIExpression()), !dbg !7606
  call void @llvm.dbg.declare(metadata [163 x i8]* %str, metadata !7607, metadata !DIExpression()), !dbg !7611
  call void @llvm.dbg.declare(metadata i64* %str_len, metadata !7612, metadata !DIExpression()), !dbg !7613
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu, metadata !7614, metadata !DIExpression()), !dbg !7699
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7700
  %adt = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 1, !dbg !7702
  %1 = load %struct.AnimData*, %struct.AnimData** %adt, align 8, !dbg !7702
  %cmp = icmp eq %struct.AnimData* %1, null, !dbg !7703
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7704

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %ofs.addr, align 4, !dbg !7705
  %cmp1 = icmp eq i32 %2, 0, !dbg !7706
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !7707

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7708
  %adt3 = getelementptr inbounds %struct.Scene, %struct.Scene* %3, i32 0, i32 1, !dbg !7709
  %4 = load %struct.AnimData*, %struct.AnimData** %adt3, align 8, !dbg !7709
  %action = getelementptr inbounds %struct.AnimData, %struct.AnimData* %4, i32 0, i32 0, !dbg !7710
  %5 = load %struct.bAction*, %struct.bAction** %action, align 8, !dbg !7710
  %cmp4 = icmp eq %struct.bAction* %5, null, !dbg !7711
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7712

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  br label %for.end53, !dbg !7713

if.end:                                           ; preds = %lor.lhs.false2
  %arraydecay = getelementptr inbounds [163 x i8], [163 x i8]* %str, i64 0, i64 0, !dbg !7714
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7715
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 4, !dbg !7716
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !7715
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay5, i64 2, !dbg !7717
  %call = call i64 @sequencer_rna_path_prefix(i8* %arraydecay, i8* %add.ptr), !dbg !7718
  store i64 %call, i64* %str_len, align 8, !dbg !7719
  %7 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7720
  %adt6 = getelementptr inbounds %struct.Scene, %struct.Scene* %7, i32 0, i32 1, !dbg !7722
  %8 = load %struct.AnimData*, %struct.AnimData** %adt6, align 8, !dbg !7722
  %action7 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %8, i32 0, i32 0, !dbg !7723
  %9 = load %struct.bAction*, %struct.bAction** %action7, align 8, !dbg !7723
  %curves = getelementptr inbounds %struct.bAction, %struct.bAction* %9, i32 0, i32 1, !dbg !7724
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %curves, i32 0, i32 0, !dbg !7725
  %10 = load i8*, i8** %first, align 8, !dbg !7725
  %11 = bitcast i8* %10 to %struct.FCurve*, !dbg !7720
  store %struct.FCurve* %11, %struct.FCurve** %fcu, align 8, !dbg !7726
  br label %for.cond, !dbg !7727

for.cond:                                         ; preds = %for.inc52, %if.end
  %12 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7728
  %tobool = icmp ne %struct.FCurve* %12, null, !dbg !7730
  br i1 %tobool, label %for.body, label %for.end53, !dbg !7730

for.body:                                         ; preds = %for.cond
  %13 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7731
  %rna_path = getelementptr inbounds %struct.FCurve, %struct.FCurve* %13, i32 0, i32 12, !dbg !7731
  %14 = load i8*, i8** %rna_path, align 8, !dbg !7731
  %arraydecay8 = getelementptr inbounds [163 x i8], [163 x i8]* %str, i64 0, i64 0, !dbg !7731
  %15 = load i64, i64* %str_len, align 8, !dbg !7731
  %call9 = call i32 @strncmp(i8* %14, i8* %arraydecay8, i64 %15) #7, !dbg !7731
  %cmp10 = icmp eq i32 %call9, 0, !dbg !7731
  br i1 %cmp10, label %if.then11, label %if.end51, !dbg !7734

if.then11:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7735, metadata !DIExpression()), !dbg !7737
  %16 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7738
  %bezt = getelementptr inbounds %struct.FCurve, %struct.FCurve* %16, i32 0, i32 5, !dbg !7740
  %17 = load %struct.BezTriple*, %struct.BezTriple** %bezt, align 8, !dbg !7740
  %tobool12 = icmp ne %struct.BezTriple* %17, null, !dbg !7738
  br i1 %tobool12, label %if.then13, label %if.end31, !dbg !7741

if.then13:                                        ; preds = %if.then11
  store i32 0, i32* %i, align 4, !dbg !7742
  br label %for.cond14, !dbg !7745

for.cond14:                                       ; preds = %for.inc, %if.then13
  %18 = load i32, i32* %i, align 4, !dbg !7746
  %19 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7748
  %totvert = getelementptr inbounds %struct.FCurve, %struct.FCurve* %19, i32 0, i32 7, !dbg !7749
  %20 = load i32, i32* %totvert, align 8, !dbg !7749
  %cmp15 = icmp ult i32 %18, %20, !dbg !7750
  br i1 %cmp15, label %for.body16, label %for.end, !dbg !7751

for.body16:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata %struct.BezTriple** %bezt17, metadata !7752, metadata !DIExpression()), !dbg !7754
  %21 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7755
  %bezt18 = getelementptr inbounds %struct.FCurve, %struct.FCurve* %21, i32 0, i32 5, !dbg !7756
  %22 = load %struct.BezTriple*, %struct.BezTriple** %bezt18, align 8, !dbg !7756
  %23 = load i32, i32* %i, align 4, !dbg !7757
  %idxprom = zext i32 %23 to i64, !dbg !7755
  %arrayidx = getelementptr inbounds %struct.BezTriple, %struct.BezTriple* %22, i64 %idxprom, !dbg !7755
  store %struct.BezTriple* %arrayidx, %struct.BezTriple** %bezt17, align 8, !dbg !7754
  %24 = load i32, i32* %ofs.addr, align 4, !dbg !7758
  %conv = sitofp i32 %24 to float, !dbg !7758
  %25 = load %struct.BezTriple*, %struct.BezTriple** %bezt17, align 8, !dbg !7759
  %vec = getelementptr inbounds %struct.BezTriple, %struct.BezTriple* %25, i32 0, i32 0, !dbg !7760
  %arrayidx19 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %vec, i64 0, i64 0, !dbg !7759
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx19, i64 0, i64 0, !dbg !7759
  %26 = load float, float* %arrayidx20, align 4, !dbg !7761
  %add = fadd float %26, %conv, !dbg !7761
  store float %add, float* %arrayidx20, align 4, !dbg !7761
  %27 = load i32, i32* %ofs.addr, align 4, !dbg !7762
  %conv21 = sitofp i32 %27 to float, !dbg !7762
  %28 = load %struct.BezTriple*, %struct.BezTriple** %bezt17, align 8, !dbg !7763
  %vec22 = getelementptr inbounds %struct.BezTriple, %struct.BezTriple* %28, i32 0, i32 0, !dbg !7764
  %arrayidx23 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %vec22, i64 0, i64 1, !dbg !7763
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx23, i64 0, i64 0, !dbg !7763
  %29 = load float, float* %arrayidx24, align 4, !dbg !7765
  %add25 = fadd float %29, %conv21, !dbg !7765
  store float %add25, float* %arrayidx24, align 4, !dbg !7765
  %30 = load i32, i32* %ofs.addr, align 4, !dbg !7766
  %conv26 = sitofp i32 %30 to float, !dbg !7766
  %31 = load %struct.BezTriple*, %struct.BezTriple** %bezt17, align 8, !dbg !7767
  %vec27 = getelementptr inbounds %struct.BezTriple, %struct.BezTriple* %31, i32 0, i32 0, !dbg !7768
  %arrayidx28 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %vec27, i64 0, i64 2, !dbg !7767
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx28, i64 0, i64 0, !dbg !7767
  %32 = load float, float* %arrayidx29, align 4, !dbg !7769
  %add30 = fadd float %32, %conv26, !dbg !7769
  store float %add30, float* %arrayidx29, align 4, !dbg !7769
  br label %for.inc, !dbg !7770

for.inc:                                          ; preds = %for.body16
  %33 = load i32, i32* %i, align 4, !dbg !7771
  %inc = add i32 %33, 1, !dbg !7771
  store i32 %inc, i32* %i, align 4, !dbg !7771
  br label %for.cond14, !dbg !7772, !llvm.loop !7773

for.end:                                          ; preds = %for.cond14
  br label %if.end31, !dbg !7775

if.end31:                                         ; preds = %for.end, %if.then11
  %34 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7776
  %fpt = getelementptr inbounds %struct.FCurve, %struct.FCurve* %34, i32 0, i32 6, !dbg !7778
  %35 = load %struct.FPoint*, %struct.FPoint** %fpt, align 8, !dbg !7778
  %tobool32 = icmp ne %struct.FPoint* %35, null, !dbg !7776
  br i1 %tobool32, label %if.then33, label %if.end50, !dbg !7779

if.then33:                                        ; preds = %if.end31
  store i32 0, i32* %i, align 4, !dbg !7780
  br label %for.cond34, !dbg !7783

for.cond34:                                       ; preds = %for.inc47, %if.then33
  %36 = load i32, i32* %i, align 4, !dbg !7784
  %37 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7786
  %totvert35 = getelementptr inbounds %struct.FCurve, %struct.FCurve* %37, i32 0, i32 7, !dbg !7787
  %38 = load i32, i32* %totvert35, align 8, !dbg !7787
  %cmp36 = icmp ult i32 %36, %38, !dbg !7788
  br i1 %cmp36, label %for.body38, label %for.end49, !dbg !7789

for.body38:                                       ; preds = %for.cond34
  call void @llvm.dbg.declare(metadata %struct.FPoint** %fpt39, metadata !7790, metadata !DIExpression()), !dbg !7792
  %39 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7793
  %fpt40 = getelementptr inbounds %struct.FCurve, %struct.FCurve* %39, i32 0, i32 6, !dbg !7794
  %40 = load %struct.FPoint*, %struct.FPoint** %fpt40, align 8, !dbg !7794
  %41 = load i32, i32* %i, align 4, !dbg !7795
  %idxprom41 = zext i32 %41 to i64, !dbg !7793
  %arrayidx42 = getelementptr inbounds %struct.FPoint, %struct.FPoint* %40, i64 %idxprom41, !dbg !7793
  store %struct.FPoint* %arrayidx42, %struct.FPoint** %fpt39, align 8, !dbg !7792
  %42 = load i32, i32* %ofs.addr, align 4, !dbg !7796
  %conv43 = sitofp i32 %42 to float, !dbg !7796
  %43 = load %struct.FPoint*, %struct.FPoint** %fpt39, align 8, !dbg !7797
  %vec44 = getelementptr inbounds %struct.FPoint, %struct.FPoint* %43, i32 0, i32 0, !dbg !7798
  %arrayidx45 = getelementptr inbounds [2 x float], [2 x float]* %vec44, i64 0, i64 0, !dbg !7797
  %44 = load float, float* %arrayidx45, align 4, !dbg !7799
  %add46 = fadd float %44, %conv43, !dbg !7799
  store float %add46, float* %arrayidx45, align 4, !dbg !7799
  br label %for.inc47, !dbg !7800

for.inc47:                                        ; preds = %for.body38
  %45 = load i32, i32* %i, align 4, !dbg !7801
  %inc48 = add i32 %45, 1, !dbg !7801
  store i32 %inc48, i32* %i, align 4, !dbg !7801
  br label %for.cond34, !dbg !7802, !llvm.loop !7803

for.end49:                                        ; preds = %for.cond34
  br label %if.end50, !dbg !7805

if.end50:                                         ; preds = %for.end49, %if.end31
  br label %if.end51, !dbg !7806

if.end51:                                         ; preds = %if.end50, %for.body
  br label %for.inc52, !dbg !7807

for.inc52:                                        ; preds = %if.end51
  %46 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !7808
  %next = getelementptr inbounds %struct.FCurve, %struct.FCurve* %46, i32 0, i32 0, !dbg !7809
  %47 = load %struct.FCurve*, %struct.FCurve** %next, align 8, !dbg !7809
  store %struct.FCurve* %47, %struct.FCurve** %fcu, align 8, !dbg !7810
  br label %for.cond, !dbg !7811, !llvm.loop !7812

for.end53:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !7814
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_sound_init(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !7815 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %seq_child = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !7816, metadata !DIExpression()), !dbg !7817
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !7818, metadata !DIExpression()), !dbg !7819
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7820
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !7822
  %1 = load i32, i32* %type, align 4, !dbg !7822
  %cmp = icmp eq i32 %1, 1, !dbg !7823
  br i1 %cmp, label %if.then, label %if.else, !dbg !7824

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_child, metadata !7825, metadata !DIExpression()), !dbg !7827
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7828
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 36, !dbg !7830
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !7831
  %3 = load i8*, i8** %first, align 8, !dbg !7831
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !7828
  store %struct.Sequence* %4, %struct.Sequence** %seq_child, align 8, !dbg !7832
  br label %for.cond, !dbg !7833

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7834
  %tobool = icmp ne %struct.Sequence* %5, null, !dbg !7836
  br i1 %tobool, label %for.body, label %for.end, !dbg !7836

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7837
  %7 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7839
  call void @BKE_sequence_sound_init(%struct.Scene* %6, %struct.Sequence* %7), !dbg !7840
  br label %for.inc, !dbg !7841

for.inc:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seq_child, align 8, !dbg !7842
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 0, !dbg !7843
  %9 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7843
  store %struct.Sequence* %9, %struct.Sequence** %seq_child, align 8, !dbg !7844
  br label %for.cond, !dbg !7845, !llvm.loop !7846

for.end:                                          ; preds = %for.cond
  br label %if.end9, !dbg !7848

if.else:                                          ; preds = %entry
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7849
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 37, !dbg !7852
  %11 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !7852
  %tobool1 = icmp ne %struct.bSound* %11, null, !dbg !7849
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7853

if.then2:                                         ; preds = %if.else
  %12 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7854
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7856
  %call = call i8* @sound_add_scene_sound_defaults(%struct.Scene* %12, %struct.Sequence* %13), !dbg !7857
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7858
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 38, !dbg !7859
  store i8* %call, i8** %scene_sound, align 8, !dbg !7860
  br label %if.end, !dbg !7861

if.end:                                           ; preds = %if.then2, %if.else
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7862
  %scene3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 26, !dbg !7864
  %16 = load %struct.Scene*, %struct.Scene** %scene3, align 8, !dbg !7864
  %tobool4 = icmp ne %struct.Scene* %16, null, !dbg !7862
  br i1 %tobool4, label %if.then5, label %if.end8, !dbg !7865

if.then5:                                         ; preds = %if.end
  %17 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7866
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7868
  %call6 = call i8* @sound_scene_add_scene_sound_defaults(%struct.Scene* %17, %struct.Sequence* %18), !dbg !7869
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !7870
  %scene_sound7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 38, !dbg !7871
  store i8* %call6, i8** %scene_sound7, align 8, !dbg !7872
  br label %if.end8, !dbg !7873

if.end8:                                          ; preds = %if.then5, %if.end
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %for.end
  ret void, !dbg !7874
}

declare dso_local i8* @sound_add_scene_sound_defaults(%struct.Scene*, %struct.Sequence*) #2

declare dso_local i8* @sound_scene_add_scene_sound_defaults(%struct.Scene*, %struct.Sequence*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_foreground_frame_get(%struct.Scene* %scene, i32 %frame) #0 !dbg !7875 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %frame.addr = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %best_seq = alloca %struct.Sequence*, align 8
  %best_machine = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  store i32 %frame, i32* %frame.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frame.addr, metadata !7880, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !7882, metadata !DIExpression()), !dbg !7883
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7884
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !7885
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !7883
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7886, metadata !DIExpression()), !dbg !7887
  call void @llvm.dbg.declare(metadata %struct.Sequence** %best_seq, metadata !7888, metadata !DIExpression()), !dbg !7889
  store %struct.Sequence* null, %struct.Sequence** %best_seq, align 8, !dbg !7889
  call void @llvm.dbg.declare(metadata i32* %best_machine, metadata !7890, metadata !DIExpression()), !dbg !7891
  store i32 -1, i32* %best_machine, align 4, !dbg !7891
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7892
  %tobool = icmp ne %struct.Editing* %1, null, !dbg !7892
  br i1 %tobool, label %if.end, label %if.then, !dbg !7894

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !7895
  br label %return, !dbg !7895

if.end:                                           ; preds = %entry
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7896
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !7898
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !7898
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !7899
  %4 = load i8*, i8** %first, align 8, !dbg !7899
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !7896
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !7900
  br label %for.cond, !dbg !7901

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7902
  %tobool1 = icmp ne %struct.Sequence* %6, null, !dbg !7904
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7904

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7905
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !7908
  %8 = load i32, i32* %flag, align 8, !dbg !7908
  %and = and i32 %8, 32, !dbg !7909
  %tobool2 = icmp ne i32 %and, 0, !dbg !7909
  br i1 %tobool2, label %if.then5, label %lor.lhs.false, !dbg !7910

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7911
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 15, !dbg !7912
  %10 = load i32, i32* %startdisp, align 8, !dbg !7912
  %11 = load i32, i32* %frame.addr, align 4, !dbg !7913
  %cmp = icmp sgt i32 %10, %11, !dbg !7914
  br i1 %cmp, label %if.then5, label %lor.lhs.false3, !dbg !7915

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7916
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 16, !dbg !7917
  %13 = load i32, i32* %enddisp, align 4, !dbg !7917
  %14 = load i32, i32* %frame.addr, align 4, !dbg !7918
  %cmp4 = icmp sle i32 %13, %14, !dbg !7919
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !7920

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !7921

if.end6:                                          ; preds = %lor.lhs.false3
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7922
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 6, !dbg !7922
  %16 = load i32, i32* %type, align 4, !dbg !7922
  %cmp7 = icmp eq i32 %16, 0, !dbg !7922
  br i1 %cmp7, label %if.then20, label %lor.lhs.false8, !dbg !7922

lor.lhs.false8:                                   ; preds = %if.end6
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7922
  %type9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 6, !dbg !7922
  %18 = load i32, i32* %type9, align 4, !dbg !7922
  %cmp10 = icmp eq i32 %18, 1, !dbg !7922
  br i1 %cmp10, label %if.then20, label %lor.lhs.false11, !dbg !7922

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7922
  %type12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 6, !dbg !7922
  %20 = load i32, i32* %type12, align 4, !dbg !7922
  %cmp13 = icmp eq i32 %20, 2, !dbg !7922
  br i1 %cmp13, label %if.then20, label %lor.lhs.false14, !dbg !7922

lor.lhs.false14:                                  ; preds = %lor.lhs.false11
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7922
  %type15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 6, !dbg !7922
  %22 = load i32, i32* %type15, align 4, !dbg !7922
  %cmp16 = icmp eq i32 %22, 3, !dbg !7922
  br i1 %cmp16, label %if.then20, label %lor.lhs.false17, !dbg !7922

lor.lhs.false17:                                  ; preds = %lor.lhs.false14
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7922
  %type18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 6, !dbg !7922
  %24 = load i32, i32* %type18, align 4, !dbg !7922
  %cmp19 = icmp eq i32 %24, 28, !dbg !7922
  br i1 %cmp19, label %if.then20, label %if.end25, !dbg !7924

if.then20:                                        ; preds = %lor.lhs.false17, %lor.lhs.false14, %lor.lhs.false11, %lor.lhs.false8, %if.end6
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7925
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 13, !dbg !7928
  %26 = load i32, i32* %machine, align 8, !dbg !7928
  %27 = load i32, i32* %best_machine, align 4, !dbg !7929
  %cmp21 = icmp sgt i32 %26, %27, !dbg !7930
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !7931

if.then22:                                        ; preds = %if.then20
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7932
  store %struct.Sequence* %28, %struct.Sequence** %best_seq, align 8, !dbg !7934
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7935
  %machine23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 13, !dbg !7936
  %30 = load i32, i32* %machine23, align 8, !dbg !7936
  store i32 %30, i32* %best_machine, align 4, !dbg !7937
  br label %if.end24, !dbg !7938

if.end24:                                         ; preds = %if.then22, %if.then20
  br label %if.end25, !dbg !7939

if.end25:                                         ; preds = %if.end24, %lor.lhs.false17
  br label %for.inc, !dbg !7940

for.inc:                                          ; preds = %if.end25, %if.then5
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7941
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 0, !dbg !7942
  %32 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7942
  store %struct.Sequence* %32, %struct.Sequence** %seq, align 8, !dbg !7943
  br label %for.cond, !dbg !7944, !llvm.loop !7945

for.end:                                          ; preds = %for.cond
  %33 = load %struct.Sequence*, %struct.Sequence** %best_seq, align 8, !dbg !7947
  store %struct.Sequence* %33, %struct.Sequence** %retval, align 8, !dbg !7948
  br label %return, !dbg !7948

return:                                           ; preds = %for.end, %if.then
  %34 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !7949
  ret %struct.Sequence* %34, !dbg !7949
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %seqbasep, %struct.Sequence* %test, %struct.Scene* %evil_scene) #0 !dbg !7950 {
entry:
  %retval = alloca i8, align 1
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %test.addr = alloca %struct.Sequence*, align 8
  %evil_scene.addr = alloca %struct.Scene*, align 8
  %orig_machine = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %new_frame = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !7953, metadata !DIExpression()), !dbg !7954
  store %struct.Sequence* %test, %struct.Sequence** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %test.addr, metadata !7955, metadata !DIExpression()), !dbg !7956
  store %struct.Scene* %evil_scene, %struct.Scene** %evil_scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %evil_scene.addr, metadata !7957, metadata !DIExpression()), !dbg !7958
  call void @llvm.dbg.declare(metadata i32* %orig_machine, metadata !7959, metadata !DIExpression()), !dbg !7960
  %0 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7961
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 13, !dbg !7962
  %1 = load i32, i32* %machine, align 8, !dbg !7962
  store i32 %1, i32* %orig_machine, align 4, !dbg !7960
  %2 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7963
  %machine1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 13, !dbg !7964
  %3 = load i32, i32* %machine1, align 8, !dbg !7965
  %inc = add nsw i32 %3, 1, !dbg !7965
  store i32 %inc, i32* %machine1, align 8, !dbg !7965
  %4 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !7966
  %5 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7967
  call void @BKE_sequence_calc(%struct.Scene* %4, %struct.Sequence* %5), !dbg !7968
  br label %while.cond, !dbg !7969

while.cond:                                       ; preds = %if.end, %entry
  %6 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !7970
  %7 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7971
  %call = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %6, %struct.Sequence* %7), !dbg !7972
  %tobool = icmp ne i8 %call, 0, !dbg !7969
  br i1 %tobool, label %while.body, label %while.end, !dbg !7969

while.body:                                       ; preds = %while.cond
  %8 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7973
  %machine2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 13, !dbg !7976
  %9 = load i32, i32* %machine2, align 8, !dbg !7976
  %cmp = icmp sge i32 %9, 32, !dbg !7977
  br i1 %cmp, label %if.then, label %if.end, !dbg !7978

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !7979

if.end:                                           ; preds = %while.body
  %10 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7981
  %machine3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 13, !dbg !7982
  %11 = load i32, i32* %machine3, align 8, !dbg !7983
  %inc4 = add nsw i32 %11, 1, !dbg !7983
  store i32 %inc4, i32* %machine3, align 8, !dbg !7983
  %12 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !7984
  %13 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7985
  call void @BKE_sequence_calc(%struct.Scene* %12, %struct.Sequence* %13), !dbg !7986
  br label %while.cond, !dbg !7969, !llvm.loop !7987

while.end:                                        ; preds = %if.then, %while.cond
  %14 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7989
  %machine5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 13, !dbg !7991
  %15 = load i32, i32* %machine5, align 8, !dbg !7991
  %cmp6 = icmp sge i32 %15, 32, !dbg !7992
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !7993

if.then7:                                         ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7994, metadata !DIExpression()), !dbg !7996
  call void @llvm.dbg.declare(metadata i32* %new_frame, metadata !7997, metadata !DIExpression()), !dbg !7998
  %16 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !7999
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 16, !dbg !8000
  %17 = load i32, i32* %enddisp, align 4, !dbg !8000
  store i32 %17, i32* %new_frame, align 4, !dbg !7998
  %18 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8001
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %18, i32 0, i32 0, !dbg !8003
  %19 = load i8*, i8** %first, align 8, !dbg !8003
  %20 = bitcast i8* %19 to %struct.Sequence*, !dbg !8001
  store %struct.Sequence* %20, %struct.Sequence** %seq, align 8, !dbg !8004
  br label %for.cond, !dbg !8005

for.cond:                                         ; preds = %for.inc, %if.then7
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8006
  %tobool8 = icmp ne %struct.Sequence* %21, null, !dbg !8008
  br i1 %tobool8, label %for.body, label %for.end, !dbg !8008

for.body:                                         ; preds = %for.cond
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8009
  %machine9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 13, !dbg !8012
  %23 = load i32, i32* %machine9, align 8, !dbg !8012
  %24 = load i32, i32* %orig_machine, align 4, !dbg !8013
  %cmp10 = icmp eq i32 %23, %24, !dbg !8014
  br i1 %cmp10, label %if.then11, label %if.end14, !dbg !8015

if.then11:                                        ; preds = %for.body
  %25 = load i32, i32* %new_frame, align 4, !dbg !8016
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8017
  %enddisp12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 16, !dbg !8018
  %27 = load i32, i32* %enddisp12, align 4, !dbg !8018
  %call13 = call i32 @max_ii(i32 %25, i32 %27), !dbg !8019
  store i32 %call13, i32* %new_frame, align 4, !dbg !8020
  br label %if.end14, !dbg !8021

if.end14:                                         ; preds = %if.then11, %for.body
  br label %for.inc, !dbg !8022

for.inc:                                          ; preds = %if.end14
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8023
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 0, !dbg !8024
  %29 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8024
  store %struct.Sequence* %29, %struct.Sequence** %seq, align 8, !dbg !8025
  br label %for.cond, !dbg !8026, !llvm.loop !8027

for.end:                                          ; preds = %for.cond
  %30 = load i32, i32* %orig_machine, align 4, !dbg !8029
  %31 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8030
  %machine15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 13, !dbg !8031
  store i32 %30, i32* %machine15, align 8, !dbg !8032
  %32 = load i32, i32* %new_frame, align 4, !dbg !8033
  %33 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8034
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 8, !dbg !8035
  %34 = load i32, i32* %start, align 4, !dbg !8035
  %35 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8036
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 15, !dbg !8037
  %36 = load i32, i32* %startdisp, align 8, !dbg !8037
  %sub = sub nsw i32 %34, %36, !dbg !8038
  %add = add nsw i32 %32, %sub, !dbg !8039
  store i32 %add, i32* %new_frame, align 4, !dbg !8040
  %37 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !8041
  %38 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8042
  %39 = load i32, i32* %new_frame, align 4, !dbg !8043
  %40 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8044
  %start16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 8, !dbg !8045
  %41 = load i32, i32* %start16, align 4, !dbg !8045
  %sub17 = sub nsw i32 %39, %41, !dbg !8046
  call void @BKE_sequence_translate(%struct.Scene* %37, %struct.Sequence* %38, i32 %sub17), !dbg !8047
  %42 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !8048
  %43 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !8049
  call void @BKE_sequence_calc(%struct.Scene* %42, %struct.Sequence* %43), !dbg !8050
  store i8 0, i8* %retval, align 1, !dbg !8051
  br label %return, !dbg !8051

if.else:                                          ; preds = %while.end
  store i8 1, i8* %retval, align 1, !dbg !8052
  br label %return, !dbg !8052

return:                                           ; preds = %if.else, %for.end
  %44 = load i8, i8* %retval, align 1, !dbg !8054
  ret i8 %44, !dbg !8054
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_base_shuffle_time(%struct.ListBase* %seqbasep, %struct.Scene* %evil_scene) #0 !dbg !8055 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %evil_scene.addr = alloca %struct.Scene*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %offset_l = alloca i32, align 4
  %offset_r = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !8058, metadata !DIExpression()), !dbg !8059
  store %struct.Scene* %evil_scene, %struct.Scene** %evil_scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %evil_scene.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8062, metadata !DIExpression()), !dbg !8063
  call void @llvm.dbg.declare(metadata i32* %offset_l, metadata !8064, metadata !DIExpression()), !dbg !8065
  %0 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !8066
  %1 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8067
  %call = call i32 @shuffle_seq_time_offset(%struct.Scene* %0, %struct.ListBase* %1, i8 zeroext 76), !dbg !8068
  store i32 %call, i32* %offset_l, align 4, !dbg !8065
  call void @llvm.dbg.declare(metadata i32* %offset_r, metadata !8069, metadata !DIExpression()), !dbg !8070
  %2 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !8071
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8072
  %call1 = call i32 @shuffle_seq_time_offset(%struct.Scene* %2, %struct.ListBase* %3, i8 zeroext 82), !dbg !8073
  store i32 %call1, i32* %offset_r, align 4, !dbg !8070
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !8074, metadata !DIExpression()), !dbg !8075
  %4 = load i32, i32* %offset_l, align 4, !dbg !8076
  %sub = sub nsw i32 0, %4, !dbg !8077
  %5 = load i32, i32* %offset_r, align 4, !dbg !8078
  %cmp = icmp slt i32 %sub, %5, !dbg !8079
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8080

cond.true:                                        ; preds = %entry
  %6 = load i32, i32* %offset_l, align 4, !dbg !8081
  br label %cond.end, !dbg !8080

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %offset_r, align 4, !dbg !8082
  br label %cond.end, !dbg !8080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ %7, %cond.false ], !dbg !8080
  store i32 %cond, i32* %offset, align 4, !dbg !8075
  %8 = load i32, i32* %offset, align 4, !dbg !8083
  %tobool = icmp ne i32 %8, 0, !dbg !8083
  br i1 %tobool, label %if.then, label %if.end5, !dbg !8085

if.then:                                          ; preds = %cond.end
  %9 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8086
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %9, i32 0, i32 0, !dbg !8089
  %10 = load i8*, i8** %first, align 8, !dbg !8089
  %11 = bitcast i8* %10 to %struct.Sequence*, !dbg !8086
  store %struct.Sequence* %11, %struct.Sequence** %seq, align 8, !dbg !8090
  br label %for.cond, !dbg !8091

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8092
  %tobool2 = icmp ne %struct.Sequence* %12, null, !dbg !8094
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8094

for.body:                                         ; preds = %for.cond
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8095
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 2, !dbg !8098
  %14 = load i8*, i8** %tmp, align 8, !dbg !8098
  %tobool3 = icmp ne i8* %14, null, !dbg !8095
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !8099

if.then4:                                         ; preds = %for.body
  %15 = load %struct.Scene*, %struct.Scene** %evil_scene.addr, align 8, !dbg !8100
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8102
  %17 = load i32, i32* %offset, align 4, !dbg !8103
  call void @BKE_sequence_translate(%struct.Scene* %15, %struct.Sequence* %16, i32 %17), !dbg !8104
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8105
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 5, !dbg !8106
  %19 = load i32, i32* %flag, align 8, !dbg !8107
  %and = and i32 %19, -9, !dbg !8107
  store i32 %and, i32* %flag, align 8, !dbg !8107
  br label %if.end, !dbg !8108

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !8109

for.inc:                                          ; preds = %if.end
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8110
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 0, !dbg !8111
  %21 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8111
  store %struct.Sequence* %21, %struct.Sequence** %seq, align 8, !dbg !8112
  br label %for.cond, !dbg !8113, !llvm.loop !8114

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !8116

if.end5:                                          ; preds = %for.end, %cond.end
  %22 = load i32, i32* %offset, align 4, !dbg !8117
  %tobool6 = icmp ne i32 %22, 0, !dbg !8117
  %23 = zext i1 %tobool6 to i64, !dbg !8117
  %cond7 = select i1 %tobool6, i32 0, i32 1, !dbg !8117
  %conv = trunc i32 %cond7 to i8, !dbg !8117
  ret i8 %conv, !dbg !8118
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @shuffle_seq_time_offset(%struct.Scene* %scene, %struct.ListBase* %seqbasep, i8 zeroext %dir) #0 !dbg !8119 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %dir.addr = alloca i8, align 1
  %ofs = alloca i32, align 4
  %tot_ofs = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8122, metadata !DIExpression()), !dbg !8123
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !8124, metadata !DIExpression()), !dbg !8125
  store i8 %dir, i8* %dir.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %dir.addr, metadata !8126, metadata !DIExpression()), !dbg !8127
  call void @llvm.dbg.declare(metadata i32* %ofs, metadata !8128, metadata !DIExpression()), !dbg !8129
  store i32 0, i32* %ofs, align 4, !dbg !8129
  call void @llvm.dbg.declare(metadata i32* %tot_ofs, metadata !8130, metadata !DIExpression()), !dbg !8131
  store i32 0, i32* %tot_ofs, align 4, !dbg !8131
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8132, metadata !DIExpression()), !dbg !8133
  br label %while.cond, !dbg !8134

while.cond:                                       ; preds = %for.end, %entry
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8135
  %1 = load i8, i8* %dir.addr, align 1, !dbg !8136
  %call = call i32 @shuffle_seq_time_offset_test(%struct.ListBase* %0, i8 zeroext %1), !dbg !8137
  store i32 %call, i32* %ofs, align 4, !dbg !8138
  %tobool = icmp ne i32 %call, 0, !dbg !8134
  br i1 %tobool, label %while.body, label %while.end, !dbg !8134

while.body:                                       ; preds = %while.cond
  %2 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8139
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %2, i32 0, i32 0, !dbg !8142
  %3 = load i8*, i8** %first, align 8, !dbg !8142
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !8139
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !8143
  br label %for.cond, !dbg !8144

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8145
  %tobool1 = icmp ne %struct.Sequence* %5, null, !dbg !8147
  br i1 %tobool1, label %for.body, label %for.end, !dbg !8147

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8148
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 2, !dbg !8151
  %7 = load i8*, i8** %tmp, align 8, !dbg !8151
  %tobool2 = icmp ne i8* %7, null, !dbg !8148
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8152

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %ofs, align 4, !dbg !8153
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8155
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 15, !dbg !8156
  %10 = load i32, i32* %startdisp, align 8, !dbg !8157
  %add = add nsw i32 %10, %8, !dbg !8157
  store i32 %add, i32* %startdisp, align 8, !dbg !8157
  %11 = load i32, i32* %ofs, align 4, !dbg !8158
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8159
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 16, !dbg !8160
  %13 = load i32, i32* %enddisp, align 4, !dbg !8161
  %add3 = add nsw i32 %13, %11, !dbg !8161
  store i32 %add3, i32* %enddisp, align 4, !dbg !8161
  br label %if.end, !dbg !8162

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8163

for.inc:                                          ; preds = %if.end
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8164
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 0, !dbg !8165
  %15 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8165
  store %struct.Sequence* %15, %struct.Sequence** %seq, align 8, !dbg !8166
  br label %for.cond, !dbg !8167, !llvm.loop !8168

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %ofs, align 4, !dbg !8170
  %17 = load i32, i32* %tot_ofs, align 4, !dbg !8171
  %add4 = add nsw i32 %17, %16, !dbg !8171
  store i32 %add4, i32* %tot_ofs, align 4, !dbg !8171
  br label %while.cond, !dbg !8134, !llvm.loop !8172

while.end:                                        ; preds = %while.cond
  %18 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8174
  %first5 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %18, i32 0, i32 0, !dbg !8176
  %19 = load i8*, i8** %first5, align 8, !dbg !8176
  %20 = bitcast i8* %19 to %struct.Sequence*, !dbg !8174
  store %struct.Sequence* %20, %struct.Sequence** %seq, align 8, !dbg !8177
  br label %for.cond6, !dbg !8178

for.cond6:                                        ; preds = %for.inc13, %while.end
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8179
  %tobool7 = icmp ne %struct.Sequence* %21, null, !dbg !8181
  br i1 %tobool7, label %for.body8, label %for.end15, !dbg !8181

for.body8:                                        ; preds = %for.cond6
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8182
  %tmp9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 2, !dbg !8185
  %23 = load i8*, i8** %tmp9, align 8, !dbg !8185
  %tobool10 = icmp ne i8* %23, null, !dbg !8182
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !8186

if.then11:                                        ; preds = %for.body8
  %24 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8187
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8188
  call void @BKE_sequence_calc_disp(%struct.Scene* %24, %struct.Sequence* %25), !dbg !8189
  br label %if.end12, !dbg !8189

if.end12:                                         ; preds = %if.then11, %for.body8
  br label %for.inc13, !dbg !8190

for.inc13:                                        ; preds = %if.end12
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8191
  %next14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 0, !dbg !8192
  %27 = load %struct.Sequence*, %struct.Sequence** %next14, align 8, !dbg !8192
  store %struct.Sequence* %27, %struct.Sequence** %seq, align 8, !dbg !8193
  br label %for.cond6, !dbg !8194, !llvm.loop !8195

for.end15:                                        ; preds = %for.cond6
  %28 = load i32, i32* %tot_ofs, align 4, !dbg !8197
  ret i32 %28, !dbg !8198
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_refresh_sound_length(%struct.Scene* %scene) #0 !dbg !8199 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8200, metadata !DIExpression()), !dbg !8201
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8202
  ret void, !dbg !8203
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_update_sound_bounds_all(%struct.Scene* %scene) #0 !dbg !8204 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !8207, metadata !DIExpression()), !dbg !8208
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8209
  %ed1 = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 19, !dbg !8210
  %1 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !8210
  store %struct.Editing* %1, %struct.Editing** %ed, align 8, !dbg !8208
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8211
  %tobool = icmp ne %struct.Editing* %2, null, !dbg !8211
  br i1 %tobool, label %if.then, label %if.end10, !dbg !8213

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8214, metadata !DIExpression()), !dbg !8216
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8217
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 1, !dbg !8219
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !8220
  %4 = load i8*, i8** %first, align 8, !dbg !8220
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !8217
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !8221
  br label %for.cond, !dbg !8222

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8223
  %tobool2 = icmp ne %struct.Sequence* %6, null, !dbg !8225
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8225

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8226
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !8229
  %8 = load i32, i32* %type, align 4, !dbg !8229
  %cmp = icmp eq i32 %8, 1, !dbg !8230
  br i1 %cmp, label %if.then3, label %if.else, !dbg !8231

if.then3:                                         ; preds = %for.body
  %9 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8232
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8234
  call void @seq_update_sound_bounds_recursive(%struct.Scene* %9, %struct.Sequence* %10), !dbg !8235
  br label %if.end9, !dbg !8236

if.else:                                          ; preds = %for.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8237
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !8237
  %12 = load i32, i32* %type4, align 4, !dbg !8237
  %cmp5 = icmp eq i32 %12, 4, !dbg !8237
  br i1 %cmp5, label %if.then8, label %lor.lhs.false, !dbg !8237

lor.lhs.false:                                    ; preds = %if.else
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8237
  %type6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 6, !dbg !8237
  %14 = load i32, i32* %type6, align 4, !dbg !8237
  %cmp7 = icmp eq i32 %14, 2, !dbg !8237
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !8239

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %15 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8240
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8242
  call void @BKE_sequencer_update_sound_bounds(%struct.Scene* %15, %struct.Sequence* %16), !dbg !8243
  br label %if.end, !dbg !8244

if.end:                                           ; preds = %if.then8, %lor.lhs.false
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then3
  br label %for.inc, !dbg !8245

for.inc:                                          ; preds = %if.end9
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8246
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 0, !dbg !8247
  %18 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8247
  store %struct.Sequence* %18, %struct.Sequence** %seq, align 8, !dbg !8248
  br label %for.cond, !dbg !8249, !llvm.loop !8250

for.end:                                          ; preds = %for.cond
  br label %if.end10, !dbg !8252

if.end10:                                         ; preds = %for.end, %entry
  ret void, !dbg !8253
}

declare dso_local void @sound_move_scene_sound(%struct.Scene*, i8*, i32, i32, i32) #2

declare dso_local void @sound_move_scene_sound_defaults(%struct.Scene*, %struct.Sequence*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_update_muting(%struct.Editing* %ed) #0 !dbg !8254 {
entry:
  %ed.addr = alloca %struct.Editing*, align 8
  %ms = alloca %struct.MetaStack*, align 8
  store %struct.Editing* %ed, %struct.Editing** %ed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed.addr, metadata !8257, metadata !DIExpression()), !dbg !8258
  %0 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !8259
  %tobool = icmp ne %struct.Editing* %0, null, !dbg !8259
  br i1 %tobool, label %if.then, label %if.end4, !dbg !8261

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.MetaStack** %ms, metadata !8262, metadata !DIExpression()), !dbg !8264
  %1 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !8265
  %metastack = getelementptr inbounds %struct.Editing, %struct.Editing* %1, i32 0, i32 2, !dbg !8266
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %metastack, i32 0, i32 1, !dbg !8267
  %2 = load i8*, i8** %last, align 8, !dbg !8267
  %3 = bitcast i8* %2 to %struct.MetaStack*, !dbg !8265
  store %struct.MetaStack* %3, %struct.MetaStack** %ms, align 8, !dbg !8264
  %4 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !8268
  %tobool1 = icmp ne %struct.MetaStack* %4, null, !dbg !8268
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !8270

if.then2:                                         ; preds = %if.then
  %5 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !8271
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %5, i32 0, i32 1, !dbg !8272
  %6 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !8273
  %parseq = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %6, i32 0, i32 3, !dbg !8274
  %7 = load %struct.Sequence*, %struct.Sequence** %parseq, align 8, !dbg !8274
  call void @seq_update_muting_recursive(%struct.ListBase* %seqbase, %struct.Sequence* %7, i32 1), !dbg !8275
  br label %if.end, !dbg !8275

if.else:                                          ; preds = %if.then
  %8 = load %struct.Editing*, %struct.Editing** %ed.addr, align 8, !dbg !8276
  %seqbase3 = getelementptr inbounds %struct.Editing, %struct.Editing* %8, i32 0, i32 1, !dbg !8277
  call void @seq_update_muting_recursive(%struct.ListBase* %seqbase3, %struct.Sequence* null, i32 0), !dbg !8278
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end4, !dbg !8279

if.end4:                                          ; preds = %if.end, %entry
  ret void, !dbg !8280
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_update_muting_recursive(%struct.ListBase* %seqbasep, %struct.Sequence* %metaseq, i32 %mute) #0 !dbg !8281 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %metaseq.addr = alloca %struct.Sequence*, align 8
  %mute.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %seqmute = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !8284, metadata !DIExpression()), !dbg !8285
  store %struct.Sequence* %metaseq, %struct.Sequence** %metaseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %metaseq.addr, metadata !8286, metadata !DIExpression()), !dbg !8287
  store i32 %mute, i32* %mute.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mute.addr, metadata !8288, metadata !DIExpression()), !dbg !8289
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8290, metadata !DIExpression()), !dbg !8291
  call void @llvm.dbg.declare(metadata i32* %seqmute, metadata !8292, metadata !DIExpression()), !dbg !8293
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8294
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8296
  %1 = load i8*, i8** %first, align 8, !dbg !8296
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8294
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !8297
  br label %for.cond, !dbg !8298

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8299
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8301
  br i1 %tobool, label %for.body, label %for.end, !dbg !8301

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %mute.addr, align 4, !dbg !8302
  %tobool1 = icmp ne i32 %4, 0, !dbg !8302
  br i1 %tobool1, label %lor.end, label %lor.rhs, !dbg !8304

lor.rhs:                                          ; preds = %for.body
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8305
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 5, !dbg !8306
  %6 = load i32, i32* %flag, align 8, !dbg !8306
  %and = and i32 %6, 32, !dbg !8307
  %tobool2 = icmp ne i32 %and, 0, !dbg !8304
  br label %lor.end, !dbg !8304

lor.end:                                          ; preds = %lor.rhs, %for.body
  %7 = phi i1 [ true, %for.body ], [ %tobool2, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !8304
  store i32 %lor.ext, i32* %seqmute, align 4, !dbg !8308
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8309
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 6, !dbg !8311
  %9 = load i32, i32* %type, align 4, !dbg !8311
  %cmp = icmp eq i32 %9, 1, !dbg !8312
  br i1 %cmp, label %if.then, label %if.else, !dbg !8313

if.then:                                          ; preds = %lor.end
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8314
  %11 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !8317
  %cmp3 = icmp eq %struct.Sequence* %10, %11, !dbg !8318
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !8319

if.then4:                                         ; preds = %if.then
  store i32 0, i32* %seqmute, align 4, !dbg !8320
  br label %if.end, !dbg !8321

if.end:                                           ; preds = %if.then4, %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8322
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 36, !dbg !8323
  %13 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !8324
  %14 = load i32, i32* %seqmute, align 4, !dbg !8325
  call void @seq_update_muting_recursive(%struct.ListBase* %seqbase, %struct.Sequence* %13, i32 %14), !dbg !8326
  br label %if.end15, !dbg !8327

if.else:                                          ; preds = %lor.end
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8328
  %type5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 6, !dbg !8328
  %16 = load i32, i32* %type5, align 4, !dbg !8328
  %cmp6 = icmp eq i32 %16, 4, !dbg !8328
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !8328

lor.lhs.false:                                    ; preds = %if.else
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8328
  %type7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 6, !dbg !8328
  %18 = load i32, i32* %type7, align 4, !dbg !8328
  %cmp8 = icmp eq i32 %18, 2, !dbg !8328
  br i1 %cmp8, label %if.then9, label %if.end14, !dbg !8330

if.then9:                                         ; preds = %lor.lhs.false, %if.else
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8331
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 38, !dbg !8334
  %20 = load i8*, i8** %scene_sound, align 8, !dbg !8334
  %tobool10 = icmp ne i8* %20, null, !dbg !8331
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !8335

if.then11:                                        ; preds = %if.then9
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8336
  %scene_sound12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 38, !dbg !8338
  %22 = load i8*, i8** %scene_sound12, align 8, !dbg !8338
  %23 = load i32, i32* %seqmute, align 4, !dbg !8339
  %conv = trunc i32 %23 to i8, !dbg !8339
  call void @sound_mute_scene_sound(i8* %22, i8 zeroext %conv), !dbg !8340
  br label %if.end13, !dbg !8341

if.end13:                                         ; preds = %if.then11, %if.then9
  br label %if.end14, !dbg !8342

if.end14:                                         ; preds = %if.end13, %lor.lhs.false
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  br label %for.inc, !dbg !8343

for.inc:                                          ; preds = %if.end15
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8344
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !8345
  %25 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8345
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !8346
  br label %for.cond, !dbg !8347, !llvm.loop !8348

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8350
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_update_sound(%struct.Scene* %scene, %struct.bSound* %sound) #0 !dbg !8351 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %sound.addr = alloca %struct.bSound*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8354, metadata !DIExpression()), !dbg !8355
  store %struct.bSound* %sound, %struct.bSound** %sound.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bSound** %sound.addr, metadata !8356, metadata !DIExpression()), !dbg !8357
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8358
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 19, !dbg !8360
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8360
  %tobool = icmp ne %struct.Editing* %1, null, !dbg !8358
  br i1 %tobool, label %if.then, label %if.end, !dbg !8361

if.then:                                          ; preds = %entry
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8362
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8364
  %ed1 = getelementptr inbounds %struct.Scene, %struct.Scene* %3, i32 0, i32 19, !dbg !8365
  %4 = load %struct.Editing*, %struct.Editing** %ed1, align 8, !dbg !8365
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 1, !dbg !8366
  %5 = load %struct.bSound*, %struct.bSound** %sound.addr, align 8, !dbg !8367
  call void @seq_update_sound_recursive(%struct.Scene* %2, %struct.ListBase* %seqbase, %struct.bSound* %5), !dbg !8368
  br label %if.end, !dbg !8369

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8370
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_update_sound_recursive(%struct.Scene* %scene, %struct.ListBase* %seqbasep, %struct.bSound* %sound) #0 !dbg !8371 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %sound.addr = alloca %struct.bSound*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8374, metadata !DIExpression()), !dbg !8375
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !8376, metadata !DIExpression()), !dbg !8377
  store %struct.bSound* %sound, %struct.bSound** %sound.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bSound** %sound.addr, metadata !8378, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8380, metadata !DIExpression()), !dbg !8381
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !8382
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8384
  %1 = load i8*, i8** %first, align 8, !dbg !8384
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8382
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !8385
  br label %for.cond, !dbg !8386

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8387
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8389
  br i1 %tobool, label %for.body, label %for.end, !dbg !8389

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8390
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !8393
  %5 = load i32, i32* %type, align 4, !dbg !8393
  %cmp = icmp eq i32 %5, 1, !dbg !8394
  br i1 %cmp, label %if.then, label %if.else, !dbg !8395

if.then:                                          ; preds = %for.body
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8396
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8398
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 36, !dbg !8399
  %8 = load %struct.bSound*, %struct.bSound** %sound.addr, align 8, !dbg !8400
  call void @seq_update_sound_recursive(%struct.Scene* %6, %struct.ListBase* %seqbase, %struct.bSound* %8), !dbg !8401
  br label %if.end10, !dbg !8402

if.else:                                          ; preds = %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8403
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 6, !dbg !8405
  %10 = load i32, i32* %type1, align 4, !dbg !8405
  %cmp2 = icmp eq i32 %10, 4, !dbg !8406
  br i1 %cmp2, label %if.then3, label %if.end9, !dbg !8407

if.then3:                                         ; preds = %if.else
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8408
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 38, !dbg !8411
  %12 = load i8*, i8** %scene_sound, align 8, !dbg !8411
  %tobool4 = icmp ne i8* %12, null, !dbg !8408
  br i1 %tobool4, label %land.lhs.true, label %if.end, !dbg !8412

land.lhs.true:                                    ; preds = %if.then3
  %13 = load %struct.bSound*, %struct.bSound** %sound.addr, align 8, !dbg !8413
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8414
  %sound5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 37, !dbg !8415
  %15 = load %struct.bSound*, %struct.bSound** %sound5, align 8, !dbg !8415
  %cmp6 = icmp eq %struct.bSound* %13, %15, !dbg !8416
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !8417

if.then7:                                         ; preds = %land.lhs.true
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8418
  %scene_sound8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 38, !dbg !8420
  %17 = load i8*, i8** %scene_sound8, align 8, !dbg !8420
  %18 = load %struct.bSound*, %struct.bSound** %sound.addr, align 8, !dbg !8421
  call void @sound_update_scene_sound(i8* %17, %struct.bSound* %18), !dbg !8422
  br label %if.end, !dbg !8423

if.end:                                           ; preds = %if.then7, %land.lhs.true, %if.then3
  br label %if.end9, !dbg !8424

if.end9:                                          ; preds = %if.end, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then
  br label %for.inc, !dbg !8425

for.inc:                                          ; preds = %if.end10
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8426
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 0, !dbg !8427
  %20 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8427
  store %struct.Sequence* %20, %struct.Sequence** %seq, align 8, !dbg !8428
  br label %for.cond, !dbg !8429, !llvm.loop !8430

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8432
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ListBase* @BKE_sequence_seqbase(%struct.ListBase* %seqbase, %struct.Sequence* %seq) #0 !dbg !8433 {
entry:
  %retval = alloca %struct.ListBase*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  %lb = alloca %struct.ListBase*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !8436, metadata !DIExpression()), !dbg !8437
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8438, metadata !DIExpression()), !dbg !8439
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !8440, metadata !DIExpression()), !dbg !8441
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb, metadata !8442, metadata !DIExpression()), !dbg !8443
  store %struct.ListBase* null, %struct.ListBase** %lb, align 8, !dbg !8443
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !8444
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8446
  %1 = load i8*, i8** %first, align 8, !dbg !8446
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8444
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !8447
  br label %for.cond, !dbg !8448

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8449
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8451
  br i1 %tobool, label %for.body, label %for.end, !dbg !8451

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8452
  %5 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8455
  %cmp = icmp eq %struct.Sequence* %4, %5, !dbg !8456
  br i1 %cmp, label %if.then, label %if.else, !dbg !8457

if.then:                                          ; preds = %for.body
  %6 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !8458
  store %struct.ListBase* %6, %struct.ListBase** %retval, align 8, !dbg !8460
  br label %return, !dbg !8460

if.else:                                          ; preds = %for.body
  %7 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8461
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 36, !dbg !8463
  %first2 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase1, i32 0, i32 0, !dbg !8464
  %8 = load i8*, i8** %first2, align 8, !dbg !8464
  %tobool3 = icmp ne i8* %8, null, !dbg !8461
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !8465

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8466
  %seqbase4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 36, !dbg !8467
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8468
  %call = call %struct.ListBase* @BKE_sequence_seqbase(%struct.ListBase* %seqbase4, %struct.Sequence* %10), !dbg !8469
  store %struct.ListBase* %call, %struct.ListBase** %lb, align 8, !dbg !8470
  %tobool5 = icmp ne %struct.ListBase* %call, null, !dbg !8470
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !8471

if.then6:                                         ; preds = %land.lhs.true
  %11 = load %struct.ListBase*, %struct.ListBase** %lb, align 8, !dbg !8472
  store %struct.ListBase* %11, %struct.ListBase** %retval, align 8, !dbg !8474
  br label %return, !dbg !8474

if.end:                                           ; preds = %land.lhs.true, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end
  br label %for.inc, !dbg !8475

for.inc:                                          ; preds = %if.end7
  %12 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8476
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 0, !dbg !8477
  %13 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8477
  store %struct.Sequence* %13, %struct.Sequence** %iseq, align 8, !dbg !8478
  br label %for.cond, !dbg !8479, !llvm.loop !8480

for.end:                                          ; preds = %for.cond
  store %struct.ListBase* null, %struct.ListBase** %retval, align 8, !dbg !8482
  br label %return, !dbg !8482

return:                                           ; preds = %for.end, %if.then6, %if.then
  %14 = load %struct.ListBase*, %struct.ListBase** %retval, align 8, !dbg !8483
  ret %struct.ListBase* %14, !dbg !8483
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequence_metastrip(%struct.ListBase* %seqbase, %struct.Sequence* %meta, %struct.Sequence* %seq) #0 !dbg !8484 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %meta.addr = alloca %struct.Sequence*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  %rval = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !8487, metadata !DIExpression()), !dbg !8488
  store %struct.Sequence* %meta, %struct.Sequence** %meta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %meta.addr, metadata !8489, metadata !DIExpression()), !dbg !8490
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8491, metadata !DIExpression()), !dbg !8492
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !8493, metadata !DIExpression()), !dbg !8494
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !8495
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8497
  %1 = load i8*, i8** %first, align 8, !dbg !8497
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8495
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !8498
  br label %for.cond, !dbg !8499

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8500
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8502
  br i1 %tobool, label %for.body, label %for.end, !dbg !8502

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.Sequence** %rval, metadata !8503, metadata !DIExpression()), !dbg !8505
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8506
  %5 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8508
  %cmp = icmp eq %struct.Sequence* %4, %5, !dbg !8509
  br i1 %cmp, label %if.then, label %if.else, !dbg !8510

if.then:                                          ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %meta.addr, align 8, !dbg !8511
  store %struct.Sequence* %6, %struct.Sequence** %retval, align 8, !dbg !8513
  br label %return, !dbg !8513

if.else:                                          ; preds = %for.body
  %7 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8514
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 36, !dbg !8516
  %first2 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase1, i32 0, i32 0, !dbg !8517
  %8 = load i8*, i8** %first2, align 8, !dbg !8517
  %tobool3 = icmp ne i8* %8, null, !dbg !8514
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !8518

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8519
  %seqbase4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 36, !dbg !8520
  %10 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8521
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8522
  %call = call %struct.Sequence* @BKE_sequence_metastrip(%struct.ListBase* %seqbase4, %struct.Sequence* %10, %struct.Sequence* %11), !dbg !8523
  store %struct.Sequence* %call, %struct.Sequence** %rval, align 8, !dbg !8524
  %tobool5 = icmp ne %struct.Sequence* %call, null, !dbg !8524
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !8525

if.then6:                                         ; preds = %land.lhs.true
  %12 = load %struct.Sequence*, %struct.Sequence** %rval, align 8, !dbg !8526
  store %struct.Sequence* %12, %struct.Sequence** %retval, align 8, !dbg !8528
  br label %return, !dbg !8528

if.end:                                           ; preds = %land.lhs.true, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end
  br label %for.inc, !dbg !8529

for.inc:                                          ; preds = %if.end7
  %13 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8530
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 0, !dbg !8531
  %14 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8531
  store %struct.Sequence* %14, %struct.Sequence** %iseq, align 8, !dbg !8532
  br label %for.cond, !dbg !8533, !llvm.loop !8534

for.end:                                          ; preds = %for.cond
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !8536
  br label %return, !dbg !8536

return:                                           ; preds = %for.end, %if.then6, %if.then
  %15 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !8537
  ret %struct.Sequence* %15, !dbg !8537
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequence_swap(%struct.Sequence* %seq_a, %struct.Sequence* %seq_b, i8** %error_str) #0 !dbg !8538 {
entry:
  %retval = alloca i32, align 4
  %seq_a.addr = alloca %struct.Sequence*, align 8
  %seq_b.addr = alloca %struct.Sequence*, align 8
  %error_str.addr = alloca i8**, align 8
  %name = alloca [64 x i8], align 16
  %sw_ap = alloca %struct.Sequence, align 8
  %sw_ap46 = alloca i32, align 4
  %sw_ap50 = alloca float, align 4
  %sw_ap54 = alloca %struct.Sequence*, align 8
  %sw_ap58 = alloca %struct.Sequence*, align 8
  %sw_ap62 = alloca i32, align 4
  %sw_ap66 = alloca i32, align 4
  %sw_ap70 = alloca i32, align 4
  %sw_ap74 = alloca i32, align 4
  %sw_ap78 = alloca i32, align 4
  %sw_ap82 = alloca i32, align 4
  %sw_ap86 = alloca i32, align 4
  %sw_ap90 = alloca i32, align 4
  store %struct.Sequence* %seq_a, %struct.Sequence** %seq_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_a.addr, metadata !8542, metadata !DIExpression()), !dbg !8543
  store %struct.Sequence* %seq_b, %struct.Sequence** %seq_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_b.addr, metadata !8544, metadata !DIExpression()), !dbg !8545
  store i8** %error_str, i8*** %error_str.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %error_str.addr, metadata !8546, metadata !DIExpression()), !dbg !8547
  call void @llvm.dbg.declare(metadata [64 x i8]* %name, metadata !8548, metadata !DIExpression()), !dbg !8549
  %0 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8550
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 7, !dbg !8552
  %1 = load i32, i32* %len, align 8, !dbg !8552
  %2 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8553
  %len1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 7, !dbg !8554
  %3 = load i32, i32* %len1, align 8, !dbg !8554
  %cmp = icmp ne i32 %1, %3, !dbg !8555
  br i1 %cmp, label %if.then, label %if.end, !dbg !8556

if.then:                                          ; preds = %entry
  %4 = load i8**, i8*** %error_str.addr, align 8, !dbg !8557
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0), i8** %4, align 8, !dbg !8559
  store i32 0, i32* %retval, align 4, !dbg !8560
  br label %return, !dbg !8560

if.end:                                           ; preds = %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8561
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !8563
  %6 = load i32, i32* %type, align 4, !dbg !8563
  %7 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8564
  %type2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !8565
  %8 = load i32, i32* %type2, align 4, !dbg !8565
  %cmp3 = icmp ne i32 %6, %8, !dbg !8566
  br i1 %cmp3, label %if.then4, label %if.end30, !dbg !8567

if.then4:                                         ; preds = %if.end
  %9 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8568
  %type5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 6, !dbg !8571
  %10 = load i32, i32* %type5, align 4, !dbg !8571
  %cmp6 = icmp eq i32 %10, 4, !dbg !8572
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !8573

lor.lhs.false:                                    ; preds = %if.then4
  %11 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8574
  %type7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !8575
  %12 = load i32, i32* %type7, align 4, !dbg !8575
  %cmp8 = icmp eq i32 %12, 4, !dbg !8576
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !8577

if.then9:                                         ; preds = %lor.lhs.false, %if.then4
  %13 = load i8**, i8*** %error_str.addr, align 8, !dbg !8578
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8** %13, align 8, !dbg !8580
  store i32 0, i32* %retval, align 4, !dbg !8581
  br label %return, !dbg !8581

if.end10:                                         ; preds = %lor.lhs.false
  %14 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8582
  %type11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 6, !dbg !8584
  %15 = load i32, i32* %type11, align 4, !dbg !8584
  %and = and i32 %15, 8, !dbg !8585
  %16 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8586
  %type12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 6, !dbg !8587
  %17 = load i32, i32* %type12, align 4, !dbg !8587
  %and13 = and i32 %17, 8, !dbg !8588
  %cmp14 = icmp ne i32 %and, %and13, !dbg !8589
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !8590

if.then15:                                        ; preds = %if.end10
  %18 = load i8**, i8*** %error_str.addr, align 8, !dbg !8591
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8** %18, align 8, !dbg !8593
  store i32 0, i32* %retval, align 4, !dbg !8594
  br label %return, !dbg !8594

if.end16:                                         ; preds = %if.end10
  %19 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8595
  %type17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 6, !dbg !8597
  %20 = load i32, i32* %type17, align 4, !dbg !8597
  %and18 = and i32 %20, 8, !dbg !8598
  %tobool = icmp ne i32 %and18, 0, !dbg !8598
  br i1 %tobool, label %land.lhs.true, label %if.end29, !dbg !8599

land.lhs.true:                                    ; preds = %if.end16
  %21 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8600
  %type19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 6, !dbg !8601
  %22 = load i32, i32* %type19, align 4, !dbg !8601
  %and20 = and i32 %22, 8, !dbg !8602
  %tobool21 = icmp ne i32 %and20, 0, !dbg !8602
  br i1 %tobool21, label %if.then22, label %if.end29, !dbg !8603

if.then22:                                        ; preds = %land.lhs.true
  %23 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8604
  %type23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 6, !dbg !8607
  %24 = load i32, i32* %type23, align 4, !dbg !8607
  %call = call i32 @BKE_sequence_effect_get_num_inputs(i32 %24), !dbg !8608
  %25 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8609
  %type24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 6, !dbg !8610
  %26 = load i32, i32* %type24, align 4, !dbg !8610
  %call25 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %26), !dbg !8611
  %cmp26 = icmp ne i32 %call, %call25, !dbg !8612
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !8613

if.then27:                                        ; preds = %if.then22
  %27 = load i8**, i8*** %error_str.addr, align 8, !dbg !8614
  store i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0), i8** %27, align 8, !dbg !8616
  store i32 0, i32* %retval, align 4, !dbg !8617
  br label %return, !dbg !8617

if.end28:                                         ; preds = %if.then22
  br label %if.end29, !dbg !8618

if.end29:                                         ; preds = %if.end28, %land.lhs.true, %if.end16
  br label %if.end30, !dbg !8619

if.end30:                                         ; preds = %if.end29, %if.end
  call void @llvm.dbg.declare(metadata %struct.Sequence* %sw_ap, metadata !8620, metadata !DIExpression()), !dbg !8622
  %28 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8622
  %29 = bitcast %struct.Sequence* %sw_ap to i8*, !dbg !8622
  %30 = bitcast %struct.Sequence* %28 to i8*, !dbg !8622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 352, i1 false), !dbg !8622
  %31 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8622
  %32 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8622
  %33 = bitcast %struct.Sequence* %31 to i8*, !dbg !8622
  %34 = bitcast %struct.Sequence* %32 to i8*, !dbg !8622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 352, i1 false), !dbg !8622
  %35 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8622
  %36 = bitcast %struct.Sequence* %35 to i8*, !dbg !8622
  %37 = bitcast %struct.Sequence* %sw_ap to i8*, !dbg !8622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 352, i1 false), !dbg !8622
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !8623
  %38 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8624
  %name31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 4, !dbg !8625
  %arraydecay32 = getelementptr inbounds [64 x i8], [64 x i8]* %name31, i64 0, i64 0, !dbg !8624
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay32, i64 2, !dbg !8626
  %call33 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %add.ptr, i64 64), !dbg !8627
  %39 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8628
  %name34 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 4, !dbg !8629
  %arraydecay35 = getelementptr inbounds [64 x i8], [64 x i8]* %name34, i64 0, i64 0, !dbg !8628
  %add.ptr36 = getelementptr inbounds i8, i8* %arraydecay35, i64 2, !dbg !8630
  %40 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8631
  %name37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 4, !dbg !8632
  %arraydecay38 = getelementptr inbounds [64 x i8], [64 x i8]* %name37, i64 0, i64 0, !dbg !8631
  %add.ptr39 = getelementptr inbounds i8, i8* %arraydecay38, i64 2, !dbg !8633
  %call40 = call i8* @BLI_strncpy(i8* %add.ptr36, i8* %add.ptr39, i64 62), !dbg !8634
  %41 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8635
  %name41 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 4, !dbg !8636
  %arraydecay42 = getelementptr inbounds [64 x i8], [64 x i8]* %name41, i64 0, i64 0, !dbg !8635
  %add.ptr43 = getelementptr inbounds i8, i8* %arraydecay42, i64 2, !dbg !8637
  %arraydecay44 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !8638
  %call45 = call i8* @BLI_strncpy(i8* %add.ptr43, i8* %arraydecay44, i64 62), !dbg !8639
  call void @llvm.dbg.declare(metadata i32* %sw_ap46, metadata !8640, metadata !DIExpression()), !dbg !8642
  %42 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8642
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 46, !dbg !8642
  %43 = load i32, i32* %blend_mode, align 8, !dbg !8642
  store i32 %43, i32* %sw_ap46, align 4, !dbg !8642
  %44 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8642
  %blend_mode47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 46, !dbg !8642
  %45 = load i32, i32* %blend_mode47, align 8, !dbg !8642
  %46 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8642
  %blend_mode48 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 46, !dbg !8642
  store i32 %45, i32* %blend_mode48, align 8, !dbg !8642
  %47 = load i32, i32* %sw_ap46, align 4, !dbg !8642
  %48 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8642
  %blend_mode49 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 46, !dbg !8642
  store i32 %47, i32* %blend_mode49, align 8, !dbg !8642
  call void @llvm.dbg.declare(metadata float* %sw_ap50, metadata !8643, metadata !DIExpression()), !dbg !8645
  %49 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8645
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 47, !dbg !8645
  %50 = load float, float* %blend_opacity, align 4, !dbg !8645
  store float %50, float* %sw_ap50, align 4, !dbg !8645
  %51 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8645
  %blend_opacity51 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 47, !dbg !8645
  %52 = load float, float* %blend_opacity51, align 4, !dbg !8645
  %53 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8645
  %blend_opacity52 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 47, !dbg !8645
  store float %52, float* %blend_opacity52, align 4, !dbg !8645
  %54 = load float, float* %sw_ap50, align 4, !dbg !8645
  %55 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8645
  %blend_opacity53 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %55, i32 0, i32 47, !dbg !8645
  store float %54, float* %blend_opacity53, align 4, !dbg !8645
  call void @llvm.dbg.declare(metadata %struct.Sequence** %sw_ap54, metadata !8646, metadata !DIExpression()), !dbg !8648
  %56 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8648
  %prev = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 1, !dbg !8648
  %57 = load %struct.Sequence*, %struct.Sequence** %prev, align 8, !dbg !8648
  store %struct.Sequence* %57, %struct.Sequence** %sw_ap54, align 8, !dbg !8648
  %58 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8648
  %prev55 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %58, i32 0, i32 1, !dbg !8648
  %59 = load %struct.Sequence*, %struct.Sequence** %prev55, align 8, !dbg !8648
  %60 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8648
  %prev56 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %60, i32 0, i32 1, !dbg !8648
  store %struct.Sequence* %59, %struct.Sequence** %prev56, align 8, !dbg !8648
  %61 = load %struct.Sequence*, %struct.Sequence** %sw_ap54, align 8, !dbg !8648
  %62 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8648
  %prev57 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 1, !dbg !8648
  store %struct.Sequence* %61, %struct.Sequence** %prev57, align 8, !dbg !8648
  call void @llvm.dbg.declare(metadata %struct.Sequence** %sw_ap58, metadata !8649, metadata !DIExpression()), !dbg !8651
  %63 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8651
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %63, i32 0, i32 0, !dbg !8651
  %64 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8651
  store %struct.Sequence* %64, %struct.Sequence** %sw_ap58, align 8, !dbg !8651
  %65 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8651
  %next59 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %65, i32 0, i32 0, !dbg !8651
  %66 = load %struct.Sequence*, %struct.Sequence** %next59, align 8, !dbg !8651
  %67 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8651
  %next60 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 0, !dbg !8651
  store %struct.Sequence* %66, %struct.Sequence** %next60, align 8, !dbg !8651
  %68 = load %struct.Sequence*, %struct.Sequence** %sw_ap58, align 8, !dbg !8651
  %69 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8651
  %next61 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %69, i32 0, i32 0, !dbg !8651
  store %struct.Sequence* %68, %struct.Sequence** %next61, align 8, !dbg !8651
  call void @llvm.dbg.declare(metadata i32* %sw_ap62, metadata !8652, metadata !DIExpression()), !dbg !8654
  %70 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8654
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 8, !dbg !8654
  %71 = load i32, i32* %start, align 4, !dbg !8654
  store i32 %71, i32* %sw_ap62, align 4, !dbg !8654
  %72 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8654
  %start63 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %72, i32 0, i32 8, !dbg !8654
  %73 = load i32, i32* %start63, align 4, !dbg !8654
  %74 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8654
  %start64 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %74, i32 0, i32 8, !dbg !8654
  store i32 %73, i32* %start64, align 4, !dbg !8654
  %75 = load i32, i32* %sw_ap62, align 4, !dbg !8654
  %76 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8654
  %start65 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %76, i32 0, i32 8, !dbg !8654
  store i32 %75, i32* %start65, align 4, !dbg !8654
  call void @llvm.dbg.declare(metadata i32* %sw_ap66, metadata !8655, metadata !DIExpression()), !dbg !8657
  %77 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8657
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %77, i32 0, i32 9, !dbg !8657
  %78 = load i32, i32* %startofs, align 8, !dbg !8657
  store i32 %78, i32* %sw_ap66, align 4, !dbg !8657
  %79 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8657
  %startofs67 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %79, i32 0, i32 9, !dbg !8657
  %80 = load i32, i32* %startofs67, align 8, !dbg !8657
  %81 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8657
  %startofs68 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %81, i32 0, i32 9, !dbg !8657
  store i32 %80, i32* %startofs68, align 8, !dbg !8657
  %82 = load i32, i32* %sw_ap66, align 4, !dbg !8657
  %83 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8657
  %startofs69 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %83, i32 0, i32 9, !dbg !8657
  store i32 %82, i32* %startofs69, align 8, !dbg !8657
  call void @llvm.dbg.declare(metadata i32* %sw_ap70, metadata !8658, metadata !DIExpression()), !dbg !8660
  %84 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8660
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %84, i32 0, i32 10, !dbg !8660
  %85 = load i32, i32* %endofs, align 4, !dbg !8660
  store i32 %85, i32* %sw_ap70, align 4, !dbg !8660
  %86 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8660
  %endofs71 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %86, i32 0, i32 10, !dbg !8660
  %87 = load i32, i32* %endofs71, align 4, !dbg !8660
  %88 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8660
  %endofs72 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %88, i32 0, i32 10, !dbg !8660
  store i32 %87, i32* %endofs72, align 4, !dbg !8660
  %89 = load i32, i32* %sw_ap70, align 4, !dbg !8660
  %90 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8660
  %endofs73 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %90, i32 0, i32 10, !dbg !8660
  store i32 %89, i32* %endofs73, align 4, !dbg !8660
  call void @llvm.dbg.declare(metadata i32* %sw_ap74, metadata !8661, metadata !DIExpression()), !dbg !8663
  %91 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8663
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %91, i32 0, i32 11, !dbg !8663
  %92 = load i32, i32* %startstill, align 8, !dbg !8663
  store i32 %92, i32* %sw_ap74, align 4, !dbg !8663
  %93 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8663
  %startstill75 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %93, i32 0, i32 11, !dbg !8663
  %94 = load i32, i32* %startstill75, align 8, !dbg !8663
  %95 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8663
  %startstill76 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %95, i32 0, i32 11, !dbg !8663
  store i32 %94, i32* %startstill76, align 8, !dbg !8663
  %96 = load i32, i32* %sw_ap74, align 4, !dbg !8663
  %97 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8663
  %startstill77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %97, i32 0, i32 11, !dbg !8663
  store i32 %96, i32* %startstill77, align 8, !dbg !8663
  call void @llvm.dbg.declare(metadata i32* %sw_ap78, metadata !8664, metadata !DIExpression()), !dbg !8666
  %98 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8666
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %98, i32 0, i32 12, !dbg !8666
  %99 = load i32, i32* %endstill, align 4, !dbg !8666
  store i32 %99, i32* %sw_ap78, align 4, !dbg !8666
  %100 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8666
  %endstill79 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %100, i32 0, i32 12, !dbg !8666
  %101 = load i32, i32* %endstill79, align 4, !dbg !8666
  %102 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8666
  %endstill80 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %102, i32 0, i32 12, !dbg !8666
  store i32 %101, i32* %endstill80, align 4, !dbg !8666
  %103 = load i32, i32* %sw_ap78, align 4, !dbg !8666
  %104 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8666
  %endstill81 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %104, i32 0, i32 12, !dbg !8666
  store i32 %103, i32* %endstill81, align 4, !dbg !8666
  call void @llvm.dbg.declare(metadata i32* %sw_ap82, metadata !8667, metadata !DIExpression()), !dbg !8669
  %105 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8669
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %105, i32 0, i32 13, !dbg !8669
  %106 = load i32, i32* %machine, align 8, !dbg !8669
  store i32 %106, i32* %sw_ap82, align 4, !dbg !8669
  %107 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8669
  %machine83 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %107, i32 0, i32 13, !dbg !8669
  %108 = load i32, i32* %machine83, align 8, !dbg !8669
  %109 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8669
  %machine84 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %109, i32 0, i32 13, !dbg !8669
  store i32 %108, i32* %machine84, align 8, !dbg !8669
  %110 = load i32, i32* %sw_ap82, align 4, !dbg !8669
  %111 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8669
  %machine85 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %111, i32 0, i32 13, !dbg !8669
  store i32 %110, i32* %machine85, align 8, !dbg !8669
  call void @llvm.dbg.declare(metadata i32* %sw_ap86, metadata !8670, metadata !DIExpression()), !dbg !8672
  %112 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8672
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %112, i32 0, i32 15, !dbg !8672
  %113 = load i32, i32* %startdisp, align 8, !dbg !8672
  store i32 %113, i32* %sw_ap86, align 4, !dbg !8672
  %114 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8672
  %startdisp87 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %114, i32 0, i32 15, !dbg !8672
  %115 = load i32, i32* %startdisp87, align 8, !dbg !8672
  %116 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8672
  %startdisp88 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %116, i32 0, i32 15, !dbg !8672
  store i32 %115, i32* %startdisp88, align 8, !dbg !8672
  %117 = load i32, i32* %sw_ap86, align 4, !dbg !8672
  %118 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8672
  %startdisp89 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 15, !dbg !8672
  store i32 %117, i32* %startdisp89, align 8, !dbg !8672
  call void @llvm.dbg.declare(metadata i32* %sw_ap90, metadata !8673, metadata !DIExpression()), !dbg !8675
  %119 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8675
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %119, i32 0, i32 16, !dbg !8675
  %120 = load i32, i32* %enddisp, align 4, !dbg !8675
  store i32 %120, i32* %sw_ap90, align 4, !dbg !8675
  %121 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8675
  %enddisp91 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %121, i32 0, i32 16, !dbg !8675
  %122 = load i32, i32* %enddisp91, align 4, !dbg !8675
  %123 = load %struct.Sequence*, %struct.Sequence** %seq_a.addr, align 8, !dbg !8675
  %enddisp92 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %123, i32 0, i32 16, !dbg !8675
  store i32 %122, i32* %enddisp92, align 4, !dbg !8675
  %124 = load i32, i32* %sw_ap90, align 4, !dbg !8675
  %125 = load %struct.Sequence*, %struct.Sequence** %seq_b.addr, align 8, !dbg !8675
  %enddisp93 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %125, i32 0, i32 16, !dbg !8675
  store i32 %124, i32* %enddisp93, align 4, !dbg !8675
  store i32 1, i32* %retval, align 4, !dbg !8676
  br label %return, !dbg !8676

return:                                           ; preds = %if.end30, %if.then27, %if.then15, %if.then9, %if.then
  %126 = load i32, i32* %retval, align 4, !dbg !8677
  ret i32 %126, !dbg !8677
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @sequencer_rna_path_prefix(i8* %str, i8* %name) #0 !dbg !8678 {
entry:
  %str.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %name_esc = alloca [128 x i8], align 16
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !8681, metadata !DIExpression()), !dbg !8682
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8683, metadata !DIExpression()), !dbg !8684
  call void @llvm.dbg.declare(metadata [128 x i8]* %name_esc, metadata !8685, metadata !DIExpression()), !dbg !8686
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %name_esc, i64 0, i64 0, !dbg !8687
  %0 = load i8*, i8** %name.addr, align 8, !dbg !8688
  %call = call i64 @BLI_strescape(i8* %arraydecay, i8* %0, i64 128), !dbg !8689
  %1 = load i8*, i8** %str.addr, align 8, !dbg !8690
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %name_esc, i64 0, i64 0, !dbg !8691
  %call2 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %1, i64 163, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.43, i64 0, i64 0), i8* %arraydecay1), !dbg !8692
  ret i64 %call2, !dbg !8693
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_dupe_animdata(%struct.Scene* %scene, i8* %name_src, i8* %name_dst) #0 !dbg !8694 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %name_src.addr = alloca i8*, align 8
  %name_dst.addr = alloca i8*, align 8
  %str_from = alloca [163 x i8], align 16
  %str_from_len = alloca i64, align 8
  %fcu = alloca %struct.FCurve*, align 8
  %fcu_last = alloca %struct.FCurve*, align 8
  %fcu_cpy = alloca %struct.FCurve*, align 8
  %lb = alloca %struct.ListBase, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8697, metadata !DIExpression()), !dbg !8698
  store i8* %name_src, i8** %name_src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name_src.addr, metadata !8699, metadata !DIExpression()), !dbg !8700
  store i8* %name_dst, i8** %name_dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name_dst.addr, metadata !8701, metadata !DIExpression()), !dbg !8702
  call void @llvm.dbg.declare(metadata [163 x i8]* %str_from, metadata !8703, metadata !DIExpression()), !dbg !8704
  call void @llvm.dbg.declare(metadata i64* %str_from_len, metadata !8705, metadata !DIExpression()), !dbg !8706
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu, metadata !8707, metadata !DIExpression()), !dbg !8708
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu_last, metadata !8709, metadata !DIExpression()), !dbg !8710
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu_cpy, metadata !8711, metadata !DIExpression()), !dbg !8712
  call void @llvm.dbg.declare(metadata %struct.ListBase* %lb, metadata !8713, metadata !DIExpression()), !dbg !8714
  %0 = bitcast %struct.ListBase* %lb to i8*, !dbg !8714
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 16, i1 false), !dbg !8714
  %1 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8715
  %adt = getelementptr inbounds %struct.Scene, %struct.Scene* %1, i32 0, i32 1, !dbg !8717
  %2 = load %struct.AnimData*, %struct.AnimData** %adt, align 8, !dbg !8717
  %cmp = icmp eq %struct.AnimData* %2, null, !dbg !8718
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8719

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8720
  %adt1 = getelementptr inbounds %struct.Scene, %struct.Scene* %3, i32 0, i32 1, !dbg !8721
  %4 = load %struct.AnimData*, %struct.AnimData** %adt1, align 8, !dbg !8721
  %action = getelementptr inbounds %struct.AnimData, %struct.AnimData* %4, i32 0, i32 0, !dbg !8722
  %5 = load %struct.bAction*, %struct.bAction** %action, align 8, !dbg !8722
  %cmp2 = icmp eq %struct.bAction* %5, null, !dbg !8723
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8724

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8725

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [163 x i8], [163 x i8]* %str_from, i64 0, i64 0, !dbg !8726
  %6 = load i8*, i8** %name_src.addr, align 8, !dbg !8727
  %call = call i64 @sequencer_rna_path_prefix(i8* %arraydecay, i8* %6), !dbg !8728
  store i64 %call, i64* %str_from_len, align 8, !dbg !8729
  %7 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8730
  %adt3 = getelementptr inbounds %struct.Scene, %struct.Scene* %7, i32 0, i32 1, !dbg !8731
  %8 = load %struct.AnimData*, %struct.AnimData** %adt3, align 8, !dbg !8731
  %action4 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %8, i32 0, i32 0, !dbg !8732
  %9 = load %struct.bAction*, %struct.bAction** %action4, align 8, !dbg !8732
  %curves = getelementptr inbounds %struct.bAction, %struct.bAction* %9, i32 0, i32 1, !dbg !8733
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %curves, i32 0, i32 1, !dbg !8734
  %10 = load i8*, i8** %last, align 8, !dbg !8734
  %11 = bitcast i8* %10 to %struct.FCurve*, !dbg !8730
  store %struct.FCurve* %11, %struct.FCurve** %fcu_last, align 8, !dbg !8735
  %12 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8736
  %adt5 = getelementptr inbounds %struct.Scene, %struct.Scene* %12, i32 0, i32 1, !dbg !8738
  %13 = load %struct.AnimData*, %struct.AnimData** %adt5, align 8, !dbg !8738
  %action6 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %13, i32 0, i32 0, !dbg !8739
  %14 = load %struct.bAction*, %struct.bAction** %action6, align 8, !dbg !8739
  %curves7 = getelementptr inbounds %struct.bAction, %struct.bAction* %14, i32 0, i32 1, !dbg !8740
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %curves7, i32 0, i32 0, !dbg !8741
  %15 = load i8*, i8** %first, align 8, !dbg !8741
  %16 = bitcast i8* %15 to %struct.FCurve*, !dbg !8736
  store %struct.FCurve* %16, %struct.FCurve** %fcu, align 8, !dbg !8742
  br label %for.cond, !dbg !8743

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !8744
  %tobool = icmp ne %struct.FCurve* %17, null, !dbg !8744
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8746

land.rhs:                                         ; preds = %for.cond
  %18 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !8747
  %prev = getelementptr inbounds %struct.FCurve, %struct.FCurve* %18, i32 0, i32 1, !dbg !8748
  %19 = load %struct.FCurve*, %struct.FCurve** %prev, align 8, !dbg !8748
  %20 = load %struct.FCurve*, %struct.FCurve** %fcu_last, align 8, !dbg !8749
  %cmp8 = icmp ne %struct.FCurve* %19, %20, !dbg !8750
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %21 = phi i1 [ false, %for.cond ], [ %cmp8, %land.rhs ], !dbg !8751
  br i1 %21, label %for.body, label %for.end, !dbg !8752

for.body:                                         ; preds = %land.end
  %22 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !8753
  %rna_path = getelementptr inbounds %struct.FCurve, %struct.FCurve* %22, i32 0, i32 12, !dbg !8753
  %23 = load i8*, i8** %rna_path, align 8, !dbg !8753
  %arraydecay9 = getelementptr inbounds [163 x i8], [163 x i8]* %str_from, i64 0, i64 0, !dbg !8753
  %24 = load i64, i64* %str_from_len, align 8, !dbg !8753
  %call10 = call i32 @strncmp(i8* %23, i8* %arraydecay9, i64 %24) #7, !dbg !8753
  %cmp11 = icmp eq i32 %call10, 0, !dbg !8753
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !8756

if.then12:                                        ; preds = %for.body
  %25 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !8757
  %call13 = call %struct.FCurve* @copy_fcurve(%struct.FCurve* %25), !dbg !8759
  store %struct.FCurve* %call13, %struct.FCurve** %fcu_cpy, align 8, !dbg !8760
  %26 = load %struct.FCurve*, %struct.FCurve** %fcu_cpy, align 8, !dbg !8761
  %27 = bitcast %struct.FCurve* %26 to i8*, !dbg !8761
  call void @BLI_addtail(%struct.ListBase* %lb, i8* %27), !dbg !8762
  br label %if.end14, !dbg !8763

if.end14:                                         ; preds = %if.then12, %for.body
  br label %for.inc, !dbg !8764

for.inc:                                          ; preds = %if.end14
  %28 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !8765
  %next = getelementptr inbounds %struct.FCurve, %struct.FCurve* %28, i32 0, i32 0, !dbg !8766
  %29 = load %struct.FCurve*, %struct.FCurve** %next, align 8, !dbg !8766
  store %struct.FCurve* %29, %struct.FCurve** %fcu, align 8, !dbg !8767
  br label %for.cond, !dbg !8768, !llvm.loop !8769

for.end:                                          ; preds = %land.end
  %30 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8771
  %id = getelementptr inbounds %struct.Scene, %struct.Scene* %30, i32 0, i32 0, !dbg !8772
  %31 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8773
  %adt15 = getelementptr inbounds %struct.Scene, %struct.Scene* %31, i32 0, i32 1, !dbg !8774
  %32 = load %struct.AnimData*, %struct.AnimData** %adt15, align 8, !dbg !8774
  %33 = load i8*, i8** %name_src.addr, align 8, !dbg !8775
  %34 = load i8*, i8** %name_dst.addr, align 8, !dbg !8776
  call void @BKE_animdata_fix_paths_rename(%struct.ID* %id, %struct.AnimData* %32, %struct.ID* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0), i8* %33, i8* %34, i32 0, i32 0, i8 zeroext 0), !dbg !8777
  %35 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8778
  %adt16 = getelementptr inbounds %struct.Scene, %struct.Scene* %35, i32 0, i32 1, !dbg !8779
  %36 = load %struct.AnimData*, %struct.AnimData** %adt16, align 8, !dbg !8779
  %action17 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %36, i32 0, i32 0, !dbg !8780
  %37 = load %struct.bAction*, %struct.bAction** %action17, align 8, !dbg !8780
  %curves18 = getelementptr inbounds %struct.bAction, %struct.bAction* %37, i32 0, i32 1, !dbg !8781
  call void @BLI_movelisttolist(%struct.ListBase* %curves18, %struct.ListBase* %lb), !dbg !8782
  br label %return, !dbg !8783

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !8783
}

declare dso_local %struct.FCurve* @copy_fcurve(%struct.FCurve*) #2

declare dso_local void @BKE_animdata_fix_paths_rename(%struct.ID*, %struct.AnimData*, %struct.ID*, i8*, i8*, i8*, i32, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequence_get_by_name(%struct.ListBase* %seqbase, i8* %name, i8 zeroext %recursive) #0 !dbg !8784 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %name.addr = alloca i8*, align 8
  %recursive.addr = alloca i8, align 1
  %iseq = alloca %struct.Sequence*, align 8
  %rseq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !8787, metadata !DIExpression()), !dbg !8788
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !8789, metadata !DIExpression()), !dbg !8790
  store i8 %recursive, i8* %recursive.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %recursive.addr, metadata !8791, metadata !DIExpression()), !dbg !8792
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !8793, metadata !DIExpression()), !dbg !8794
  store %struct.Sequence* null, %struct.Sequence** %iseq, align 8, !dbg !8794
  call void @llvm.dbg.declare(metadata %struct.Sequence** %rseq, metadata !8795, metadata !DIExpression()), !dbg !8796
  store %struct.Sequence* null, %struct.Sequence** %rseq, align 8, !dbg !8796
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !8797
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8799
  %1 = load i8*, i8** %first, align 8, !dbg !8799
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8797
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !8800
  br label %for.cond, !dbg !8801

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8802
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8804
  br i1 %tobool, label %for.body, label %for.end, !dbg !8804

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %name.addr, align 8, !dbg !8805
  %5 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8805
  %name1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 4, !dbg !8805
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name1, i64 0, i64 0, !dbg !8805
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2, !dbg !8805
  %call = call i32 @strcmp(i8* %4, i8* %add.ptr) #7, !dbg !8805
  %cmp = icmp eq i32 %call, 0, !dbg !8805
  br i1 %cmp, label %if.then, label %if.else, !dbg !8808

if.then:                                          ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8809
  store %struct.Sequence* %6, %struct.Sequence** %retval, align 8, !dbg !8810
  br label %return, !dbg !8810

if.else:                                          ; preds = %for.body
  %7 = load i8, i8* %recursive.addr, align 1, !dbg !8811
  %conv = zext i8 %7 to i32, !dbg !8811
  %tobool2 = icmp ne i32 %conv, 0, !dbg !8811
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !8813

land.lhs.true:                                    ; preds = %if.else
  %8 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8814
  %seqbase3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 36, !dbg !8815
  %first4 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase3, i32 0, i32 0, !dbg !8816
  %9 = load i8*, i8** %first4, align 8, !dbg !8816
  %tobool5 = icmp ne i8* %9, null, !dbg !8817
  br i1 %tobool5, label %land.lhs.true6, label %if.end, !dbg !8818

land.lhs.true6:                                   ; preds = %land.lhs.true
  %10 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8819
  %seqbase7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 36, !dbg !8820
  %11 = load i8*, i8** %name.addr, align 8, !dbg !8821
  %call8 = call %struct.Sequence* @BKE_sequence_get_by_name(%struct.ListBase* %seqbase7, i8* %11, i8 zeroext 1), !dbg !8822
  store %struct.Sequence* %call8, %struct.Sequence** %rseq, align 8, !dbg !8823
  %tobool9 = icmp ne %struct.Sequence* %call8, null, !dbg !8823
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !8824

if.then10:                                        ; preds = %land.lhs.true6
  %12 = load %struct.Sequence*, %struct.Sequence** %rseq, align 8, !dbg !8825
  store %struct.Sequence* %12, %struct.Sequence** %retval, align 8, !dbg !8827
  br label %return, !dbg !8827

if.end:                                           ; preds = %land.lhs.true6, %land.lhs.true, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end
  br label %for.inc, !dbg !8828

for.inc:                                          ; preds = %if.end11
  %13 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8829
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 0, !dbg !8830
  %14 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8830
  store %struct.Sequence* %14, %struct.Sequence** %iseq, align 8, !dbg !8831
  br label %for.cond, !dbg !8832, !llvm.loop !8833

for.end:                                          ; preds = %for.cond
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !8835
  br label %return, !dbg !8835

return:                                           ; preds = %for.end, %if.then10, %if.then
  %15 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !8836
  ret %struct.Sequence* %15, !dbg !8836
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_from_elem(%struct.ListBase* %seqbase, %struct.StripElem* %se) #0 !dbg !8837 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %se.addr = alloca %struct.StripElem*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  %seq_found = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !8840, metadata !DIExpression()), !dbg !8841
  store %struct.StripElem* %se, %struct.StripElem** %se.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se.addr, metadata !8842, metadata !DIExpression()), !dbg !8843
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !8844, metadata !DIExpression()), !dbg !8845
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !8846
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8848
  %1 = load i8*, i8** %first, align 8, !dbg !8848
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8846
  store %struct.Sequence* %2, %struct.Sequence** %iseq, align 8, !dbg !8849
  br label %for.cond, !dbg !8850

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8851
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8853
  br i1 %tobool, label %for.body, label %for.end, !dbg !8853

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_found, metadata !8854, metadata !DIExpression()), !dbg !8856
  %4 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8857
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 24, !dbg !8859
  %5 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !8859
  %tobool1 = icmp ne %struct.Strip* %5, null, !dbg !8857
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !8860

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8861
  %strip2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 24, !dbg !8862
  %7 = load %struct.Strip*, %struct.Strip** %strip2, align 8, !dbg !8862
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %7, i32 0, i32 6, !dbg !8863
  %8 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !8863
  %tobool3 = icmp ne %struct.StripElem* %8, null, !dbg !8861
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !8864

land.lhs.true4:                                   ; preds = %land.lhs.true
  %9 = load %struct.StripElem*, %struct.StripElem** %se.addr, align 8, !dbg !8865
  %10 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8865
  %strip5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 24, !dbg !8865
  %11 = load %struct.Strip*, %struct.Strip** %strip5, align 8, !dbg !8865
  %stripdata6 = getelementptr inbounds %struct.Strip, %struct.Strip* %11, i32 0, i32 6, !dbg !8865
  %12 = load %struct.StripElem*, %struct.StripElem** %stripdata6, align 8, !dbg !8865
  %sub.ptr.lhs.cast = ptrtoint %struct.StripElem* %9 to i64, !dbg !8865
  %sub.ptr.rhs.cast = ptrtoint %struct.StripElem* %12 to i64, !dbg !8865
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8865
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 264, !dbg !8865
  %conv = trunc i64 %sub.ptr.div to i32, !dbg !8865
  %13 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8865
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 7, !dbg !8865
  %14 = load i32, i32* %len, align 8, !dbg !8865
  %cmp = icmp ult i32 %conv, %14, !dbg !8865
  br i1 %cmp, label %if.then, label %if.else, !dbg !8866

if.then:                                          ; preds = %land.lhs.true4
  br label %for.end, !dbg !8867

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %for.body
  %15 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8869
  %seqbase8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 36, !dbg !8871
  %16 = load %struct.StripElem*, %struct.StripElem** %se.addr, align 8, !dbg !8872
  %call = call %struct.Sequence* @BKE_sequencer_from_elem(%struct.ListBase* %seqbase8, %struct.StripElem* %16), !dbg !8873
  store %struct.Sequence* %call, %struct.Sequence** %seq_found, align 8, !dbg !8874
  %tobool9 = icmp ne %struct.Sequence* %call, null, !dbg !8874
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !8875

if.then10:                                        ; preds = %if.else
  %17 = load %struct.Sequence*, %struct.Sequence** %seq_found, align 8, !dbg !8876
  store %struct.Sequence* %17, %struct.Sequence** %iseq, align 8, !dbg !8878
  br label %for.end, !dbg !8879

if.end:                                           ; preds = %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end
  br label %for.inc, !dbg !8880

for.inc:                                          ; preds = %if.end11
  %18 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8881
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 0, !dbg !8882
  %19 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8882
  store %struct.Sequence* %19, %struct.Sequence** %iseq, align 8, !dbg !8883
  br label %for.cond, !dbg !8884, !llvm.loop !8885

for.end:                                          ; preds = %if.then10, %if.then, %for.cond
  %20 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !8887
  ret %struct.Sequence* %20, !dbg !8888
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %scene) #0 !dbg !8889 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8892, metadata !DIExpression()), !dbg !8893
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !8894, metadata !DIExpression()), !dbg !8895
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8896
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !8897
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !8895
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8898
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !8900
  br i1 %cmp, label %if.then, label %if.end, !dbg !8901

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !8902
  br label %return, !dbg !8902

if.end:                                           ; preds = %entry
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8903
  %act_seq = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 3, !dbg !8904
  %3 = load %struct.Sequence*, %struct.Sequence** %act_seq, align 8, !dbg !8904
  store %struct.Sequence* %3, %struct.Sequence** %retval, align 8, !dbg !8905
  br label %return, !dbg !8905

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !8906
  ret %struct.Sequence* %4, !dbg !8906
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequencer_active_set(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !8907 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8908, metadata !DIExpression()), !dbg !8909
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8910, metadata !DIExpression()), !dbg !8911
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !8912, metadata !DIExpression()), !dbg !8913
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8914
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !8915
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !8913
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8916
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !8918
  br i1 %cmp, label %if.then, label %if.end, !dbg !8919

if.then:                                          ; preds = %entry
  br label %return, !dbg !8920

if.end:                                           ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8921
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8922
  %act_seq = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 3, !dbg !8923
  store %struct.Sequence* %2, %struct.Sequence** %act_seq, align 8, !dbg !8924
  br label %return, !dbg !8925

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8925
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @BKE_sequencer_active_get_pair(%struct.Scene* %scene, %struct.Sequence** %seq_act, %struct.Sequence** %seq_other) #0 !dbg !8926 {
entry:
  %retval = alloca i32, align 4
  %scene.addr = alloca %struct.Scene*, align 8
  %seq_act.addr = alloca %struct.Sequence**, align 8
  %seq_other.addr = alloca %struct.Sequence**, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8929, metadata !DIExpression()), !dbg !8930
  store %struct.Sequence** %seq_act, %struct.Sequence*** %seq_act.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_act.addr, metadata !8931, metadata !DIExpression()), !dbg !8932
  store %struct.Sequence** %seq_other, %struct.Sequence*** %seq_other.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_other.addr, metadata !8933, metadata !DIExpression()), !dbg !8934
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !8935, metadata !DIExpression()), !dbg !8936
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8937
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !8938
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !8936
  %1 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8939
  %call1 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %1), !dbg !8940
  %2 = load %struct.Sequence**, %struct.Sequence*** %seq_act.addr, align 8, !dbg !8941
  store %struct.Sequence* %call1, %struct.Sequence** %2, align 8, !dbg !8942
  %3 = load %struct.Sequence**, %struct.Sequence*** %seq_act.addr, align 8, !dbg !8943
  %4 = load %struct.Sequence*, %struct.Sequence** %3, align 8, !dbg !8945
  %cmp = icmp eq %struct.Sequence* %4, null, !dbg !8946
  br i1 %cmp, label %if.then, label %if.else, !dbg !8947

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8948
  br label %return, !dbg !8948

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8950, metadata !DIExpression()), !dbg !8952
  %5 = load %struct.Sequence**, %struct.Sequence*** %seq_other.addr, align 8, !dbg !8953
  store %struct.Sequence* null, %struct.Sequence** %5, align 8, !dbg !8954
  %6 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8955
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %6, i32 0, i32 0, !dbg !8957
  %7 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !8957
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %7, i32 0, i32 0, !dbg !8958
  %8 = load i8*, i8** %first, align 8, !dbg !8958
  %9 = bitcast i8* %8 to %struct.Sequence*, !dbg !8955
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !8959
  br label %for.cond, !dbg !8960

for.cond:                                         ; preds = %for.inc, %if.else
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8961
  %tobool = icmp ne %struct.Sequence* %10, null, !dbg !8963
  br i1 %tobool, label %for.body, label %for.end, !dbg !8963

for.body:                                         ; preds = %for.cond
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8964
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 5, !dbg !8967
  %12 = load i32, i32* %flag, align 8, !dbg !8967
  %and = and i32 %12, 1, !dbg !8968
  %tobool2 = icmp ne i32 %and, 0, !dbg !8968
  br i1 %tobool2, label %land.lhs.true, label %if.end8, !dbg !8969

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8970
  %14 = load %struct.Sequence**, %struct.Sequence*** %seq_act.addr, align 8, !dbg !8971
  %15 = load %struct.Sequence*, %struct.Sequence** %14, align 8, !dbg !8972
  %cmp3 = icmp ne %struct.Sequence* %13, %15, !dbg !8973
  br i1 %cmp3, label %if.then4, label %if.end8, !dbg !8974

if.then4:                                         ; preds = %land.lhs.true
  %16 = load %struct.Sequence**, %struct.Sequence*** %seq_other.addr, align 8, !dbg !8975
  %17 = load %struct.Sequence*, %struct.Sequence** %16, align 8, !dbg !8978
  %tobool5 = icmp ne %struct.Sequence* %17, null, !dbg !8978
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !8979

if.then6:                                         ; preds = %if.then4
  store i32 0, i32* %retval, align 4, !dbg !8980
  br label %return, !dbg !8980

if.else7:                                         ; preds = %if.then4
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8982
  %19 = load %struct.Sequence**, %struct.Sequence*** %seq_other.addr, align 8, !dbg !8984
  store %struct.Sequence* %18, %struct.Sequence** %19, align 8, !dbg !8985
  br label %if.end

if.end:                                           ; preds = %if.else7
  br label %if.end8, !dbg !8986

if.end8:                                          ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !8987

for.inc:                                          ; preds = %if.end8
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8988
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 0, !dbg !8989
  %21 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8989
  store %struct.Sequence* %21, %struct.Sequence** %seq, align 8, !dbg !8990
  br label %for.cond, !dbg !8991, !llvm.loop !8992

for.end:                                          ; preds = %for.cond
  %22 = load %struct.Sequence**, %struct.Sequence*** %seq_other.addr, align 8, !dbg !8994
  %23 = load %struct.Sequence*, %struct.Sequence** %22, align 8, !dbg !8995
  %cmp9 = icmp ne %struct.Sequence* %23, null, !dbg !8996
  %conv = zext i1 %cmp9 to i32, !dbg !8996
  store i32 %conv, i32* %retval, align 4, !dbg !8997
  br label %return, !dbg !8997

return:                                           ; preds = %for.end, %if.then6, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !8998
  ret i32 %24, !dbg !8998
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Mask* @BKE_sequencer_mask_get(%struct.Scene* %scene) #0 !dbg !8999 {
entry:
  %retval = alloca %struct.Mask*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %seq_act = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9002, metadata !DIExpression()), !dbg !9003
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_act, metadata !9004, metadata !DIExpression()), !dbg !9005
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9006
  %call = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %0), !dbg !9007
  store %struct.Sequence* %call, %struct.Sequence** %seq_act, align 8, !dbg !9005
  %1 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !9008
  %tobool = icmp ne %struct.Sequence* %1, null, !dbg !9008
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9010

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !9011
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !9012
  %3 = load i32, i32* %type, align 4, !dbg !9012
  %cmp = icmp eq i32 %3, 7, !dbg !9013
  br i1 %cmp, label %if.then, label %if.else, !dbg !9014

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !9015
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 29, !dbg !9017
  %5 = load %struct.Mask*, %struct.Mask** %mask, align 8, !dbg !9017
  store %struct.Mask* %5, %struct.Mask** %retval, align 8, !dbg !9018
  br label %return, !dbg !9018

if.else:                                          ; preds = %land.lhs.true, %entry
  store %struct.Mask* null, %struct.Mask** %retval, align 8, !dbg !9019
  br label %return, !dbg !9019

return:                                           ; preds = %if.else, %if.then
  %6 = load %struct.Mask*, %struct.Mask** %retval, align 8, !dbg !9021
  ret %struct.Mask* %6, !dbg !9021
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequence_alloc(%struct.ListBase* %lb, i32 %cfra, i32 %machine) #0 !dbg !9022 {
entry:
  %lb.addr = alloca %struct.ListBase*, align 8
  %cfra.addr = alloca i32, align 4
  %machine.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !9025, metadata !DIExpression()), !dbg !9026
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !9027, metadata !DIExpression()), !dbg !9028
  store i32 %machine, i32* %machine.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %machine.addr, metadata !9029, metadata !DIExpression()), !dbg !9030
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9031, metadata !DIExpression()), !dbg !9032
  %0 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !9033
  %call = call i8* %0(i64 352, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)), !dbg !9033
  %1 = bitcast i8* %call to %struct.Sequence*, !dbg !9033
  store %struct.Sequence* %1, %struct.Sequence** %seq, align 8, !dbg !9034
  %2 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9035
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9036
  %4 = bitcast %struct.Sequence* %3 to i8*, !dbg !9036
  call void @BLI_addtail(%struct.ListBase* %2, i8* %4), !dbg !9037
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9038
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 4, !dbg !9039
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !9040
  %6 = bitcast i8* %arraydecay to i16*, !dbg !9040
  store i16 20819, i16* %6, align 8, !dbg !9041
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9042
  %name1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 4, !dbg !9043
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %name1, i64 0, i64 2, !dbg !9042
  store i8 0, i8* %arrayidx, align 2, !dbg !9044
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9045
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 5, !dbg !9046
  store i32 1, i32* %flag, align 8, !dbg !9047
  %9 = load i32, i32* %cfra.addr, align 4, !dbg !9048
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9049
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 8, !dbg !9050
  store i32 %9, i32* %start, align 4, !dbg !9051
  %11 = load i32, i32* %machine.addr, align 4, !dbg !9052
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9053
  %machine2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 13, !dbg !9054
  store i32 %11, i32* %machine2, align 8, !dbg !9055
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9056
  %sat = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 17, !dbg !9057
  store float 1.000000e+00, float* %sat, align 8, !dbg !9058
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9059
  %mul = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 18, !dbg !9060
  store float 1.000000e+00, float* %mul, align 4, !dbg !9061
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9062
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 47, !dbg !9063
  store float 1.000000e+02, float* %blend_opacity, align 4, !dbg !9064
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9065
  %volume = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 39, !dbg !9066
  store float 1.000000e+00, float* %volume, align 8, !dbg !9067
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9068
  %pitch = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 40, !dbg !9069
  store float 1.000000e+00, float* %pitch, align 4, !dbg !9070
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9071
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 38, !dbg !9072
  store i8* null, i8** %scene_sound, align 8, !dbg !9073
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9074
  ret %struct.Sequence* %19, !dbg !9075
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_alpha_mode_from_extension(%struct.Sequence* %seq) #0 !dbg !9076 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %filename = alloca i8*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9077, metadata !DIExpression()), !dbg !9078
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9079
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !9081
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9081
  %tobool = icmp ne %struct.Strip* %1, null, !dbg !9079
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9082

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9083
  %strip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !9084
  %3 = load %struct.Strip*, %struct.Strip** %strip1, align 8, !dbg !9084
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 6, !dbg !9085
  %4 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !9085
  %tobool2 = icmp ne %struct.StripElem* %4, null, !dbg !9083
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9086

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %filename, metadata !9087, metadata !DIExpression()), !dbg !9089
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9090
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 24, !dbg !9091
  %6 = load %struct.Strip*, %struct.Strip** %strip3, align 8, !dbg !9091
  %stripdata4 = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 6, !dbg !9092
  %7 = load %struct.StripElem*, %struct.StripElem** %stripdata4, align 8, !dbg !9092
  %name = getelementptr inbounds %struct.StripElem, %struct.StripElem* %7, i32 0, i32 0, !dbg !9093
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i64 0, i64 0, !dbg !9090
  store i8* %arraydecay, i8** %filename, align 8, !dbg !9089
  %8 = load i8*, i8** %filename, align 8, !dbg !9094
  %call = call zeroext i8 @BKE_image_alpha_mode_from_extension_ex(i8* %8), !dbg !9095
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9096
  %alpha_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 49, !dbg !9097
  store i8 %call, i8* %alpha_mode, align 4, !dbg !9098
  br label %if.end, !dbg !9099

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !9100
}

declare dso_local zeroext i8 @BKE_image_alpha_mode_from_extension_ex(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_init_colorspace(%struct.Sequence* %seq) #0 !dbg !9101 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %name = alloca [1024 x i8], align 16
  %ibuf = alloca %struct.ImBuf*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9102, metadata !DIExpression()), !dbg !9103
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9104
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !9106
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9106
  %tobool = icmp ne %struct.Strip* %1, null, !dbg !9104
  br i1 %tobool, label %land.lhs.true, label %if.end25, !dbg !9107

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9108
  %strip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !9109
  %3 = load %struct.Strip*, %struct.Strip** %strip1, align 8, !dbg !9109
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 6, !dbg !9110
  %4 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !9110
  %tobool2 = icmp ne %struct.StripElem* %4, null, !dbg !9108
  br i1 %tobool2, label %if.then, label %if.end25, !dbg !9111

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata [1024 x i8]* %name, metadata !9112, metadata !DIExpression()), !dbg !9114
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !9115, metadata !DIExpression()), !dbg !9116
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !9117
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9118
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 24, !dbg !9119
  %6 = load %struct.Strip*, %struct.Strip** %strip3, align 8, !dbg !9119
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 7, !dbg !9120
  %arraydecay4 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !9118
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9121
  %strip5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 24, !dbg !9122
  %8 = load %struct.Strip*, %struct.Strip** %strip5, align 8, !dbg !9122
  %stripdata6 = getelementptr inbounds %struct.Strip, %struct.Strip* %8, i32 0, i32 6, !dbg !9123
  %9 = load %struct.StripElem*, %struct.StripElem** %stripdata6, align 8, !dbg !9123
  %name7 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %9, i32 0, i32 0, !dbg !9124
  %arraydecay8 = getelementptr inbounds [256 x i8], [256 x i8]* %name7, i64 0, i64 0, !dbg !9121
  call void @BLI_join_dirfile(i8* %arraydecay, i64 1024, i8* %arraydecay4, i8* %arraydecay8), !dbg !9125
  %arraydecay9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !9126
  %10 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !9127
  %name10 = getelementptr inbounds %struct.Main, %struct.Main* %10, i32 0, i32 2, !dbg !9128
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name10, i64 0, i64 0, !dbg !9129
  %call = call zeroext i8 @BLI_path_abs(i8* %arraydecay9, i8* %arraydecay11), !dbg !9130
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9131
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !9133
  %12 = load i32, i32* %type, align 4, !dbg !9133
  %cmp = icmp eq i32 %12, 0, !dbg !9134
  br i1 %cmp, label %if.then12, label %if.end24, !dbg !9135

if.then12:                                        ; preds = %if.then
  %arraydecay13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !9136
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9138
  %strip14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 24, !dbg !9139
  %14 = load %struct.Strip*, %struct.Strip** %strip14, align 8, !dbg !9139
  %colorspace_settings = getelementptr inbounds %struct.Strip, %struct.Strip* %14, i32 0, i32 12, !dbg !9140
  %name15 = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %colorspace_settings, i32 0, i32 0, !dbg !9141
  %arraydecay16 = getelementptr inbounds [64 x i8], [64 x i8]* %name15, i64 0, i64 0, !dbg !9138
  %call17 = call %struct.ImBuf* @IMB_loadiffname(i8* %arraydecay13, i32 8194, i8* %arraydecay16), !dbg !9142
  store %struct.ImBuf* %call17, %struct.ImBuf** %ibuf, align 8, !dbg !9143
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9144
  %alpha_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 49, !dbg !9145
  store i8 0, i8* %alpha_mode, align 4, !dbg !9146
  %16 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !9147
  %tobool18 = icmp ne %struct.ImBuf* %16, null, !dbg !9147
  br i1 %tobool18, label %if.then19, label %if.end23, !dbg !9149

if.then19:                                        ; preds = %if.then12
  %17 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !9150
  %flags = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %17, i32 0, i32 6, !dbg !9153
  %18 = load i32, i32* %flags, align 8, !dbg !9153
  %and = and i32 %18, 4096, !dbg !9154
  %tobool20 = icmp ne i32 %and, 0, !dbg !9154
  br i1 %tobool20, label %if.then21, label %if.end, !dbg !9155

if.then21:                                        ; preds = %if.then19
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9156
  %alpha_mode22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 49, !dbg !9157
  store i8 1, i8* %alpha_mode22, align 4, !dbg !9158
  br label %if.end, !dbg !9156

if.end:                                           ; preds = %if.then21, %if.then19
  %20 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !9159
  call void @IMB_freeImBuf(%struct.ImBuf* %20), !dbg !9160
  br label %if.end23, !dbg !9161

if.end23:                                         ; preds = %if.end, %if.then12
  br label %if.end24, !dbg !9162

if.end24:                                         ; preds = %if.end23, %if.then
  br label %if.end25, !dbg !9163

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %entry
  ret void, !dbg !9164
}

declare dso_local %struct.ImBuf* @IMB_loadiffname(i8*, i32, i8*) #2

declare dso_local void @IMB_freeImBuf(%struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_add_image_strip(%struct.bContext* %C, %struct.ListBase* %seqbasep, %struct.SeqLoadInfo* %seq_load) #0 !dbg !9165 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %seq_load.addr = alloca %struct.SeqLoadInfo*, align 8
  %scene = alloca %struct.Scene*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %strip = alloca %struct.Strip*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !9188, metadata !DIExpression()), !dbg !9189
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !9190, metadata !DIExpression()), !dbg !9191
  store %struct.SeqLoadInfo* %seq_load, %struct.SeqLoadInfo** %seq_load.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqLoadInfo** %seq_load.addr, metadata !9192, metadata !DIExpression()), !dbg !9193
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !9194, metadata !DIExpression()), !dbg !9195
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !9196
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !9197
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !9195
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9198, metadata !DIExpression()), !dbg !9199
  call void @llvm.dbg.declare(metadata %struct.Strip** %strip, metadata !9200, metadata !DIExpression()), !dbg !9201
  %1 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !9202
  %2 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9203
  %start_frame = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %2, i32 0, i32 0, !dbg !9204
  %3 = load i32, i32* %start_frame, align 8, !dbg !9204
  %4 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9205
  %channel = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %4, i32 0, i32 2, !dbg !9206
  %5 = load i32, i32* %channel, align 8, !dbg !9206
  %call1 = call %struct.Sequence* @BKE_sequence_alloc(%struct.ListBase* %1, i32 %3, i32 %5), !dbg !9207
  store %struct.Sequence* %call1, %struct.Sequence** %seq, align 8, !dbg !9208
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9209
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !9210
  store i32 0, i32* %type, align 4, !dbg !9211
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9212
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 46, !dbg !9213
  store i32 8, i32* %blend_mode, align 8, !dbg !9214
  %8 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !9215
  %call2 = call i8* %8(i64 904, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)), !dbg !9215
  %9 = bitcast i8* %call2 to %struct.Strip*, !dbg !9215
  store %struct.Strip* %9, %struct.Strip** %strip, align 8, !dbg !9216
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9217
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 24, !dbg !9218
  store %struct.Strip* %9, %struct.Strip** %strip3, align 8, !dbg !9219
  %11 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9220
  %len = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %11, i32 0, i32 5, !dbg !9221
  %12 = load i32, i32* %len, align 4, !dbg !9221
  %tobool = icmp ne i32 %12, 0, !dbg !9220
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9220

cond.true:                                        ; preds = %entry
  %13 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9222
  %len4 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %13, i32 0, i32 5, !dbg !9223
  %14 = load i32, i32* %len4, align 4, !dbg !9223
  br label %cond.end, !dbg !9220

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 1, %cond.false ], !dbg !9220
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9224
  %len5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 7, !dbg !9225
  store i32 %cond, i32* %len5, align 8, !dbg !9226
  %16 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9227
  %us = getelementptr inbounds %struct.Strip, %struct.Strip* %16, i32 0, i32 2, !dbg !9228
  store i32 1, i32* %us, align 8, !dbg !9229
  %17 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !9230
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9231
  %len6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 7, !dbg !9232
  %19 = load i32, i32* %len6, align 8, !dbg !9232
  %conv = sext i32 %19 to i64, !dbg !9231
  %mul = mul i64 %conv, 264, !dbg !9233
  %call7 = call i8* %17(i64 %mul, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)), !dbg !9230
  %20 = bitcast i8* %call7 to %struct.StripElem*, !dbg !9230
  %21 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9234
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %21, i32 0, i32 6, !dbg !9235
  store %struct.StripElem* %20, %struct.StripElem** %stripdata, align 8, !dbg !9236
  %22 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9237
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %22, i32 0, i32 7, !dbg !9238
  %arraydecay = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !9237
  %23 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9239
  %path = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %23, i32 0, i32 6, !dbg !9240
  %arraydecay8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0, !dbg !9239
  %call9 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %arraydecay8, i64 768), !dbg !9241
  %24 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9242
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9243
  %26 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9244
  call void @seq_load_apply(%struct.Scene* %24, %struct.Sequence* %25, %struct.SeqLoadInfo* %26), !dbg !9245
  %27 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9246
  ret %struct.Sequence* %27, !dbg !9247
}

declare dso_local %struct.Scene* @CTX_data_scene(%struct.bContext*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @seq_load_apply(%struct.Scene* %scene, %struct.Sequence* %seq, %struct.SeqLoadInfo* %seq_load) #0 !dbg !9248 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %seq_load.addr = alloca %struct.SeqLoadInfo*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9251, metadata !DIExpression()), !dbg !9252
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9253, metadata !DIExpression()), !dbg !9254
  store %struct.SeqLoadInfo* %seq_load, %struct.SeqLoadInfo** %seq_load.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqLoadInfo** %seq_load.addr, metadata !9255, metadata !DIExpression()), !dbg !9256
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9257
  %tobool = icmp ne %struct.Sequence* %0, null, !dbg !9257
  br i1 %tobool, label %if.then, label %if.else, !dbg !9259

if.then:                                          ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9260
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 4, !dbg !9262
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !9260
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2, !dbg !9263
  %2 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9264
  %name1 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %2, i32 0, i32 7, !dbg !9265
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %name1, i64 0, i64 0, !dbg !9264
  %call = call i8* @BLI_strncpy_utf8(i8* %add.ptr, i8* %arraydecay2, i64 62), !dbg !9266
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9267
  %name3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 4, !dbg !9268
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %name3, i64 0, i64 0, !dbg !9267
  %add.ptr5 = getelementptr inbounds i8, i8* %arraydecay4, i64 2, !dbg !9269
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9270
  %name6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 4, !dbg !9271
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %name6, i64 0, i64 0, !dbg !9270
  %add.ptr8 = getelementptr inbounds i8, i8* %arraydecay7, i64 2, !dbg !9272
  %call9 = call i64 @strlen(i8* %add.ptr8) #7, !dbg !9273
  %conv = trunc i64 %call9 to i32, !dbg !9273
  %call10 = call i32 @BLI_utf8_invalid_strip(i8* %add.ptr5, i32 %conv), !dbg !9274
  %5 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9275
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %5, i32 0, i32 19, !dbg !9276
  %6 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9276
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %6, i32 0, i32 1, !dbg !9277
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9278
  call void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbase, %struct.Sequence* %7), !dbg !9279
  %8 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9280
  %flag = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %8, i32 0, i32 3, !dbg !9282
  %9 = load i32, i32* %flag, align 4, !dbg !9282
  %and = and i32 %9, 2, !dbg !9283
  %tobool11 = icmp ne i32 %and, 0, !dbg !9283
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !9284

if.then12:                                        ; preds = %if.then
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9285
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 16, !dbg !9287
  %11 = load i32, i32* %enddisp, align 4, !dbg !9287
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9288
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 15, !dbg !9289
  %13 = load i32, i32* %startdisp, align 8, !dbg !9289
  %sub = sub nsw i32 %11, %13, !dbg !9290
  %14 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9291
  %start_frame = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %14, i32 0, i32 0, !dbg !9292
  %15 = load i32, i32* %start_frame, align 8, !dbg !9293
  %add = add nsw i32 %15, %sub, !dbg !9293
  store i32 %add, i32* %start_frame, align 8, !dbg !9293
  br label %if.end, !dbg !9294

if.end:                                           ; preds = %if.then12, %if.then
  %16 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9295
  %flag13 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %16, i32 0, i32 3, !dbg !9297
  %17 = load i32, i32* %flag13, align 4, !dbg !9297
  %and14 = and i32 %17, 1, !dbg !9298
  %tobool15 = icmp ne i32 %and14, 0, !dbg !9298
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !9299

if.then16:                                        ; preds = %if.end
  %18 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9300
  %flag17 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %18, i32 0, i32 3, !dbg !9302
  %19 = load i32, i32* %flag17, align 4, !dbg !9303
  %or = or i32 %19, 1, !dbg !9303
  store i32 %or, i32* %flag17, align 4, !dbg !9303
  %20 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9304
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9305
  call void @BKE_sequencer_active_set(%struct.Scene* %20, %struct.Sequence* %21), !dbg !9306
  br label %if.end18, !dbg !9307

if.end18:                                         ; preds = %if.then16, %if.end
  %22 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9308
  %flag19 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %22, i32 0, i32 3, !dbg !9310
  %23 = load i32, i32* %flag19, align 4, !dbg !9310
  %and20 = and i32 %23, 8, !dbg !9311
  %tobool21 = icmp ne i32 %and20, 0, !dbg !9311
  br i1 %tobool21, label %if.then22, label %if.end27, !dbg !9312

if.then22:                                        ; preds = %if.end18
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9313
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 37, !dbg !9316
  %25 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !9316
  %tobool23 = icmp ne %struct.bSound* %25, null, !dbg !9313
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !9317

if.then24:                                        ; preds = %if.then22
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9318
  %sound25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 37, !dbg !9319
  %27 = load %struct.bSound*, %struct.bSound** %sound25, align 8, !dbg !9319
  call void @sound_cache(%struct.bSound* %27), !dbg !9320
  br label %if.end26, !dbg !9320

if.end26:                                         ; preds = %if.then24, %if.then22
  br label %if.end27, !dbg !9321

if.end27:                                         ; preds = %if.end26, %if.end18
  %28 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9322
  %tot_success = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %28, i32 0, i32 9, !dbg !9323
  %29 = load i32, i32* %tot_success, align 8, !dbg !9324
  %inc = add nsw i32 %29, 1, !dbg !9324
  store i32 %inc, i32* %tot_success, align 8, !dbg !9324
  br label %if.end29, !dbg !9325

if.else:                                          ; preds = %entry
  %30 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9326
  %tot_error = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %30, i32 0, i32 10, !dbg !9328
  %31 = load i32, i32* %tot_error, align 4, !dbg !9329
  %inc28 = add nsw i32 %31, 1, !dbg !9329
  store i32 %inc28, i32* %tot_error, align 4, !dbg !9329
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.end27
  ret void, !dbg !9330
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_add_sound_strip(%struct.bContext* %C, %struct.ListBase* %seqbasep, %struct.SeqLoadInfo* %seq_load) #0 !dbg !9331 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %seq_load.addr = alloca %struct.SeqLoadInfo*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !9332, metadata !DIExpression()), !dbg !9333
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !9334, metadata !DIExpression()), !dbg !9335
  store %struct.SeqLoadInfo* %seq_load, %struct.SeqLoadInfo** %seq_load.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqLoadInfo** %seq_load.addr, metadata !9336, metadata !DIExpression()), !dbg !9337
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !9338
  %1 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !9339
  %2 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9340
  ret %struct.Sequence* null, !dbg !9341
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @BKE_sequencer_add_movie_strip(%struct.bContext* %C, %struct.ListBase* %seqbasep, %struct.SeqLoadInfo* %seq_load) #0 !dbg !9342 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %C.addr = alloca %struct.bContext*, align 8
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %seq_load.addr = alloca %struct.SeqLoadInfo*, align 8
  %scene = alloca %struct.Scene*, align 8
  %path = alloca [1024 x i8], align 16
  %seq = alloca %struct.Sequence*, align 8
  %strip = alloca %struct.Strip*, align 8
  %se = alloca %struct.StripElem*, align 8
  %colorspace = alloca [64 x i8], align 16
  %an = alloca %struct.anim*, align 8
  %start_frame_back = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !9343, metadata !DIExpression()), !dbg !9344
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !9345, metadata !DIExpression()), !dbg !9346
  store %struct.SeqLoadInfo* %seq_load, %struct.SeqLoadInfo** %seq_load.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqLoadInfo** %seq_load.addr, metadata !9347, metadata !DIExpression()), !dbg !9348
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !9349, metadata !DIExpression()), !dbg !9350
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !9351
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !9352
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !9350
  call void @llvm.dbg.declare(metadata [1024 x i8]* %path, metadata !9353, metadata !DIExpression()), !dbg !9354
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9355, metadata !DIExpression()), !dbg !9356
  call void @llvm.dbg.declare(metadata %struct.Strip** %strip, metadata !9357, metadata !DIExpression()), !dbg !9358
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se, metadata !9359, metadata !DIExpression()), !dbg !9360
  call void @llvm.dbg.declare(metadata [64 x i8]* %colorspace, metadata !9361, metadata !DIExpression()), !dbg !9362
  %1 = bitcast [64 x i8]* %colorspace to i8*, !dbg !9362
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 64, i1 false), !dbg !9362
  call void @llvm.dbg.declare(metadata %struct.anim** %an, metadata !9363, metadata !DIExpression()), !dbg !9364
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0, !dbg !9365
  %2 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9366
  %path1 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %2, i32 0, i32 6, !dbg !9367
  %arraydecay2 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path1, i64 0, i64 0, !dbg !9366
  %call3 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %arraydecay2, i64 1024), !dbg !9368
  %arraydecay4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0, !dbg !9369
  %3 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !9370
  %name = getelementptr inbounds %struct.Main, %struct.Main* %3, i32 0, i32 2, !dbg !9371
  %arraydecay5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !9372
  %call6 = call zeroext i8 @BLI_path_abs(i8* %arraydecay4, i8* %arraydecay5), !dbg !9373
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0, !dbg !9374
  %arraydecay8 = getelementptr inbounds [64 x i8], [64 x i8]* %colorspace, i64 0, i64 0, !dbg !9375
  %call9 = call %struct.anim* @openanim(i8* %arraydecay7, i32 1, i32 0, i8* %arraydecay8), !dbg !9376
  store %struct.anim* %call9, %struct.anim** %an, align 8, !dbg !9377
  %4 = load %struct.anim*, %struct.anim** %an, align 8, !dbg !9378
  %cmp = icmp eq %struct.anim* %4, null, !dbg !9380
  br i1 %cmp, label %if.then, label %if.end, !dbg !9381

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !9382
  br label %return, !dbg !9382

if.end:                                           ; preds = %entry
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !9383
  %6 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9384
  %start_frame = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %6, i32 0, i32 0, !dbg !9385
  %7 = load i32, i32* %start_frame, align 8, !dbg !9385
  %8 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9386
  %channel = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %8, i32 0, i32 2, !dbg !9387
  %9 = load i32, i32* %channel, align 8, !dbg !9387
  %call10 = call %struct.Sequence* @BKE_sequence_alloc(%struct.ListBase* %5, i32 %7, i32 %9), !dbg !9388
  store %struct.Sequence* %call10, %struct.Sequence** %seq, align 8, !dbg !9389
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9390
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !9391
  store i32 3, i32* %type, align 4, !dbg !9392
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9393
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 46, !dbg !9394
  store i32 8, i32* %blend_mode, align 8, !dbg !9395
  %12 = load %struct.anim*, %struct.anim** %an, align 8, !dbg !9396
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9397
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 30, !dbg !9398
  store %struct.anim* %12, %struct.anim** %anim, align 8, !dbg !9399
  %14 = load %struct.anim*, %struct.anim** %an, align 8, !dbg !9400
  %call11 = call i32 @IMB_anim_get_preseek(%struct.anim* %14), !dbg !9401
  %conv = trunc i32 %call11 to i16, !dbg !9401
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9402
  %anim_preseek = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 20, !dbg !9403
  store i16 %conv, i16* %anim_preseek, align 4, !dbg !9404
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9405
  %name12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 4, !dbg !9406
  %arraydecay13 = getelementptr inbounds [64 x i8], [64 x i8]* %name12, i64 0, i64 0, !dbg !9405
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay13, i64 2, !dbg !9407
  %call14 = call i8* @BLI_strncpy(i8* %add.ptr, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i64 62), !dbg !9408
  %17 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9409
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %17, i32 0, i32 19, !dbg !9410
  %18 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9410
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %18, i32 0, i32 1, !dbg !9411
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9412
  call void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbase, %struct.Sequence* %19), !dbg !9413
  %20 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !9414
  %call15 = call i8* %20(i64 904, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)), !dbg !9414
  %21 = bitcast i8* %call15 to %struct.Strip*, !dbg !9414
  store %struct.Strip* %21, %struct.Strip** %strip, align 8, !dbg !9415
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9416
  %strip16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 24, !dbg !9417
  store %struct.Strip* %21, %struct.Strip** %strip16, align 8, !dbg !9418
  %23 = load %struct.anim*, %struct.anim** %an, align 8, !dbg !9419
  %call17 = call i32 @IMB_anim_get_duration(%struct.anim* %23, i32 1), !dbg !9420
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9421
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 7, !dbg !9422
  store i32 %call17, i32* %len, align 8, !dbg !9423
  %25 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9424
  %us = getelementptr inbounds %struct.Strip, %struct.Strip* %25, i32 0, i32 2, !dbg !9425
  store i32 1, i32* %us, align 8, !dbg !9426
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9427
  %strip18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 24, !dbg !9428
  %27 = load %struct.Strip*, %struct.Strip** %strip18, align 8, !dbg !9428
  %colorspace_settings = getelementptr inbounds %struct.Strip, %struct.Strip* %27, i32 0, i32 12, !dbg !9429
  %name19 = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %colorspace_settings, i32 0, i32 0, !dbg !9430
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %name19, i64 0, i64 0, !dbg !9427
  %arraydecay21 = getelementptr inbounds [64 x i8], [64 x i8]* %colorspace, i64 0, i64 0, !dbg !9431
  %call22 = call i8* @BLI_strncpy(i8* %arraydecay20, i8* %arraydecay21, i64 64), !dbg !9432
  %28 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !9433
  %call23 = call i8* %28(i64 264, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)), !dbg !9433
  %29 = bitcast i8* %call23 to %struct.StripElem*, !dbg !9433
  store %struct.StripElem* %29, %struct.StripElem** %se, align 8, !dbg !9434
  %30 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9435
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %30, i32 0, i32 6, !dbg !9436
  store %struct.StripElem* %29, %struct.StripElem** %stripdata, align 8, !dbg !9437
  %31 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9438
  %path24 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %31, i32 0, i32 6, !dbg !9439
  %arraydecay25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path24, i64 0, i64 0, !dbg !9438
  %32 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9440
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %32, i32 0, i32 7, !dbg !9441
  %arraydecay26 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !9440
  %33 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !9442
  %name27 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %33, i32 0, i32 0, !dbg !9443
  %arraydecay28 = getelementptr inbounds [256 x i8], [256 x i8]* %name27, i64 0, i64 0, !dbg !9442
  call void @BLI_split_dirfile(i8* %arraydecay25, i8* %arraydecay26, i8* %arraydecay28, i64 768, i64 256), !dbg !9444
  %34 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9445
  %35 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9446
  call void @BKE_sequence_calc_disp(%struct.Scene* %34, %struct.Sequence* %35), !dbg !9447
  %36 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9448
  %name29 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %36, i32 0, i32 7, !dbg !9450
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %name29, i64 0, i64 0, !dbg !9448
  %37 = load i8, i8* %arrayidx, align 8, !dbg !9448
  %conv30 = zext i8 %37 to i32, !dbg !9448
  %cmp31 = icmp eq i32 %conv30, 0, !dbg !9451
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !9452

if.then33:                                        ; preds = %if.end
  %38 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9453
  %name34 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %38, i32 0, i32 7, !dbg !9454
  %arraydecay35 = getelementptr inbounds [64 x i8], [64 x i8]* %name34, i64 0, i64 0, !dbg !9453
  %39 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !9455
  %name36 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %39, i32 0, i32 0, !dbg !9456
  %arraydecay37 = getelementptr inbounds [256 x i8], [256 x i8]* %name36, i64 0, i64 0, !dbg !9455
  %call38 = call i8* @BLI_strncpy(i8* %arraydecay35, i8* %arraydecay37, i64 64), !dbg !9457
  br label %if.end39, !dbg !9457

if.end39:                                         ; preds = %if.then33, %if.end
  %40 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9458
  %flag = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %40, i32 0, i32 3, !dbg !9460
  %41 = load i32, i32* %flag, align 4, !dbg !9460
  %and = and i32 %41, 4, !dbg !9461
  %tobool = icmp ne i32 %and, 0, !dbg !9461
  br i1 %tobool, label %if.then40, label %if.end46, !dbg !9462

if.then40:                                        ; preds = %if.end39
  call void @llvm.dbg.declare(metadata i32* %start_frame_back, metadata !9463, metadata !DIExpression()), !dbg !9465
  %42 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9466
  %start_frame41 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %42, i32 0, i32 0, !dbg !9467
  %43 = load i32, i32* %start_frame41, align 8, !dbg !9467
  store i32 %43, i32* %start_frame_back, align 4, !dbg !9465
  %44 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9468
  %channel42 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %44, i32 0, i32 2, !dbg !9469
  %45 = load i32, i32* %channel42, align 8, !dbg !9470
  %inc = add nsw i32 %45, 1, !dbg !9470
  store i32 %inc, i32* %channel42, align 8, !dbg !9470
  %46 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !9471
  %47 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !9472
  %48 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9473
  %call43 = call %struct.Sequence* @BKE_sequencer_add_sound_strip(%struct.bContext* %46, %struct.ListBase* %47, %struct.SeqLoadInfo* %48), !dbg !9474
  %49 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9475
  %seq_sound = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %49, i32 0, i32 8, !dbg !9476
  store %struct.Sequence* %call43, %struct.Sequence** %seq_sound, align 8, !dbg !9477
  %50 = load i32, i32* %start_frame_back, align 4, !dbg !9478
  %51 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9479
  %start_frame44 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %51, i32 0, i32 0, !dbg !9480
  store i32 %50, i32* %start_frame44, align 8, !dbg !9481
  %52 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9482
  %channel45 = getelementptr inbounds %struct.SeqLoadInfo, %struct.SeqLoadInfo* %52, i32 0, i32 2, !dbg !9483
  %53 = load i32, i32* %channel45, align 8, !dbg !9484
  %dec = add nsw i32 %53, -1, !dbg !9484
  store i32 %dec, i32* %channel45, align 8, !dbg !9484
  br label %if.end46, !dbg !9485

if.end46:                                         ; preds = %if.then40, %if.end39
  %54 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9486
  %55 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9487
  %56 = load %struct.SeqLoadInfo*, %struct.SeqLoadInfo** %seq_load.addr, align 8, !dbg !9488
  call void @seq_load_apply(%struct.Scene* %54, %struct.Sequence* %55, %struct.SeqLoadInfo* %56), !dbg !9489
  %57 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9490
  store %struct.Sequence* %57, %struct.Sequence** %retval, align 8, !dbg !9491
  br label %return, !dbg !9491

return:                                           ; preds = %if.end46, %if.then
  %58 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !9492
  ret %struct.Sequence* %58, !dbg !9492
}

declare dso_local void @BLI_split_dirfile(i8*, i8*, i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.Sequence* @seq_dupli(%struct.Scene* %scene, %struct.Scene* %scene_to, %struct.Sequence* %seq, i32 %dupe_flag) #0 !dbg !9493 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %scene_to.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %dupe_flag.addr = alloca i32, align 4
  %sce_audio = alloca %struct.Scene*, align 8
  %seqn = alloca %struct.Sequence*, align 8
  %sh = alloca %struct.SeqEffectHandle, align 8
  %tmp124 = alloca %struct.SeqEffectHandle, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9496, metadata !DIExpression()), !dbg !9497
  store %struct.Scene* %scene_to, %struct.Scene** %scene_to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene_to.addr, metadata !9498, metadata !DIExpression()), !dbg !9499
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9500, metadata !DIExpression()), !dbg !9501
  store i32 %dupe_flag, i32* %dupe_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dupe_flag.addr, metadata !9502, metadata !DIExpression()), !dbg !9503
  call void @llvm.dbg.declare(metadata %struct.Scene** %sce_audio, metadata !9504, metadata !DIExpression()), !dbg !9505
  %0 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !9506
  %tobool = icmp ne %struct.Scene* %0, null, !dbg !9506
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9506

cond.true:                                        ; preds = %entry
  %1 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !9507
  br label %cond.end, !dbg !9506

cond.false:                                       ; preds = %entry
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9508
  br label %cond.end, !dbg !9506

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Scene* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !9506
  store %struct.Scene* %cond, %struct.Scene** %sce_audio, align 8, !dbg !9505
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !9509, metadata !DIExpression()), !dbg !9510
  %3 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9511
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9512
  %5 = bitcast %struct.Sequence* %4 to i8*, !dbg !9512
  %call = call i8* %3(i8* %5), !dbg !9511
  %6 = bitcast i8* %call to %struct.Sequence*, !dbg !9511
  store %struct.Sequence* %6, %struct.Sequence** %seqn, align 8, !dbg !9510
  %7 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9513
  %8 = bitcast %struct.Sequence* %7 to i8*, !dbg !9513
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9514
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 2, !dbg !9515
  store i8* %8, i8** %tmp, align 8, !dbg !9516
  %10 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9517
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9518
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 24, !dbg !9519
  %12 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !9519
  %13 = bitcast %struct.Strip* %12 to i8*, !dbg !9518
  %call1 = call i8* %10(i8* %13), !dbg !9517
  %14 = bitcast i8* %call1 to %struct.Strip*, !dbg !9517
  %15 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9520
  %strip2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 24, !dbg !9521
  store %struct.Strip* %14, %struct.Strip** %strip2, align 8, !dbg !9522
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9523
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 24, !dbg !9525
  %17 = load %struct.Strip*, %struct.Strip** %strip3, align 8, !dbg !9525
  %crop = getelementptr inbounds %struct.Strip, %struct.Strip* %17, i32 0, i32 9, !dbg !9526
  %18 = load %struct.StripCrop*, %struct.StripCrop** %crop, align 8, !dbg !9526
  %tobool4 = icmp ne %struct.StripCrop* %18, null, !dbg !9523
  br i1 %tobool4, label %if.then, label %if.end, !dbg !9527

if.then:                                          ; preds = %cond.end
  %19 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9528
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9530
  %strip5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 24, !dbg !9531
  %21 = load %struct.Strip*, %struct.Strip** %strip5, align 8, !dbg !9531
  %crop6 = getelementptr inbounds %struct.Strip, %struct.Strip* %21, i32 0, i32 9, !dbg !9532
  %22 = load %struct.StripCrop*, %struct.StripCrop** %crop6, align 8, !dbg !9532
  %23 = bitcast %struct.StripCrop* %22 to i8*, !dbg !9530
  %call7 = call i8* %19(i8* %23), !dbg !9528
  %24 = bitcast i8* %call7 to %struct.StripCrop*, !dbg !9528
  %25 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9533
  %strip8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 24, !dbg !9534
  %26 = load %struct.Strip*, %struct.Strip** %strip8, align 8, !dbg !9534
  %crop9 = getelementptr inbounds %struct.Strip, %struct.Strip* %26, i32 0, i32 9, !dbg !9535
  store %struct.StripCrop* %24, %struct.StripCrop** %crop9, align 8, !dbg !9536
  br label %if.end, !dbg !9537

if.end:                                           ; preds = %if.then, %cond.end
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9538
  %strip10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 24, !dbg !9540
  %28 = load %struct.Strip*, %struct.Strip** %strip10, align 8, !dbg !9540
  %transform = getelementptr inbounds %struct.Strip, %struct.Strip* %28, i32 0, i32 10, !dbg !9541
  %29 = load %struct.StripTransform*, %struct.StripTransform** %transform, align 8, !dbg !9541
  %tobool11 = icmp ne %struct.StripTransform* %29, null, !dbg !9538
  br i1 %tobool11, label %if.then12, label %if.end18, !dbg !9542

if.then12:                                        ; preds = %if.end
  %30 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9543
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9545
  %strip13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 24, !dbg !9546
  %32 = load %struct.Strip*, %struct.Strip** %strip13, align 8, !dbg !9546
  %transform14 = getelementptr inbounds %struct.Strip, %struct.Strip* %32, i32 0, i32 10, !dbg !9547
  %33 = load %struct.StripTransform*, %struct.StripTransform** %transform14, align 8, !dbg !9547
  %34 = bitcast %struct.StripTransform* %33 to i8*, !dbg !9545
  %call15 = call i8* %30(i8* %34), !dbg !9543
  %35 = bitcast i8* %call15 to %struct.StripTransform*, !dbg !9543
  %36 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9548
  %strip16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 24, !dbg !9549
  %37 = load %struct.Strip*, %struct.Strip** %strip16, align 8, !dbg !9549
  %transform17 = getelementptr inbounds %struct.Strip, %struct.Strip* %37, i32 0, i32 10, !dbg !9550
  store %struct.StripTransform* %35, %struct.StripTransform** %transform17, align 8, !dbg !9551
  br label %if.end18, !dbg !9552

if.end18:                                         ; preds = %if.then12, %if.end
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9553
  %strip19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 24, !dbg !9555
  %39 = load %struct.Strip*, %struct.Strip** %strip19, align 8, !dbg !9555
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %39, i32 0, i32 8, !dbg !9556
  %40 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !9556
  %tobool20 = icmp ne %struct.StripProxy* %40, null, !dbg !9553
  br i1 %tobool20, label %if.then21, label %if.end29, !dbg !9557

if.then21:                                        ; preds = %if.end18
  %41 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9558
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9560
  %strip22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 24, !dbg !9561
  %43 = load %struct.Strip*, %struct.Strip** %strip22, align 8, !dbg !9561
  %proxy23 = getelementptr inbounds %struct.Strip, %struct.Strip* %43, i32 0, i32 8, !dbg !9562
  %44 = load %struct.StripProxy*, %struct.StripProxy** %proxy23, align 8, !dbg !9562
  %45 = bitcast %struct.StripProxy* %44 to i8*, !dbg !9560
  %call24 = call i8* %41(i8* %45), !dbg !9558
  %46 = bitcast i8* %call24 to %struct.StripProxy*, !dbg !9558
  %47 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9563
  %strip25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 24, !dbg !9564
  %48 = load %struct.Strip*, %struct.Strip** %strip25, align 8, !dbg !9564
  %proxy26 = getelementptr inbounds %struct.Strip, %struct.Strip* %48, i32 0, i32 8, !dbg !9565
  store %struct.StripProxy* %46, %struct.StripProxy** %proxy26, align 8, !dbg !9566
  %49 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9567
  %strip27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 24, !dbg !9568
  %50 = load %struct.Strip*, %struct.Strip** %strip27, align 8, !dbg !9568
  %proxy28 = getelementptr inbounds %struct.Strip, %struct.Strip* %50, i32 0, i32 8, !dbg !9569
  %51 = load %struct.StripProxy*, %struct.StripProxy** %proxy28, align 8, !dbg !9569
  %anim = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %51, i32 0, i32 2, !dbg !9570
  store %struct.anim* null, %struct.anim** %anim, align 8, !dbg !9571
  br label %if.end29, !dbg !9572

if.end29:                                         ; preds = %if.then21, %if.end18
  %52 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9573
  %modifiers = getelementptr inbounds %struct.Sequence, %struct.Sequence* %52, i32 0, i32 51, !dbg !9575
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %modifiers, i32 0, i32 0, !dbg !9576
  %53 = load i8*, i8** %first, align 8, !dbg !9576
  %tobool30 = icmp ne i8* %53, null, !dbg !9573
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !9577

if.then31:                                        ; preds = %if.end29
  %54 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9578
  %modifiers32 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 51, !dbg !9580
  call void @BLI_listbase_clear(%struct.ListBase* %modifiers32), !dbg !9581
  %55 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9582
  %56 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9583
  call void @BKE_sequence_modifier_list_copy(%struct.Sequence* %55, %struct.Sequence* %56), !dbg !9584
  br label %if.end33, !dbg !9585

if.end33:                                         ; preds = %if.then31, %if.end29
  %57 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9586
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %57, i32 0, i32 6, !dbg !9588
  %58 = load i32, i32* %type, align 4, !dbg !9588
  %cmp = icmp eq i32 %58, 1, !dbg !9589
  br i1 %cmp, label %if.then34, label %if.else, !dbg !9590

if.then34:                                        ; preds = %if.end33
  %59 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9591
  %strip35 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 24, !dbg !9593
  %60 = load %struct.Strip*, %struct.Strip** %strip35, align 8, !dbg !9593
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %60, i32 0, i32 6, !dbg !9594
  store %struct.StripElem* null, %struct.StripElem** %stripdata, align 8, !dbg !9595
  %61 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9596
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %61, i32 0, i32 36, !dbg !9597
  call void @BLI_listbase_clear(%struct.ListBase* %seqbase), !dbg !9598
  br label %if.end140, !dbg !9599

if.else:                                          ; preds = %if.end33
  %62 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9600
  %type36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 6, !dbg !9602
  %63 = load i32, i32* %type36, align 4, !dbg !9602
  %cmp37 = icmp eq i32 %63, 2, !dbg !9603
  br i1 %cmp37, label %if.then38, label %if.else46, !dbg !9604

if.then38:                                        ; preds = %if.else
  %64 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9605
  %strip39 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 24, !dbg !9607
  %65 = load %struct.Strip*, %struct.Strip** %strip39, align 8, !dbg !9607
  %stripdata40 = getelementptr inbounds %struct.Strip, %struct.Strip* %65, i32 0, i32 6, !dbg !9608
  store %struct.StripElem* null, %struct.StripElem** %stripdata40, align 8, !dbg !9609
  %66 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9610
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 38, !dbg !9612
  %67 = load i8*, i8** %scene_sound, align 8, !dbg !9612
  %tobool41 = icmp ne i8* %67, null, !dbg !9610
  br i1 %tobool41, label %if.then42, label %if.end45, !dbg !9613

if.then42:                                        ; preds = %if.then38
  %68 = load %struct.Scene*, %struct.Scene** %sce_audio, align 8, !dbg !9614
  %69 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9615
  %call43 = call i8* @sound_scene_add_scene_sound_defaults(%struct.Scene* %68, %struct.Sequence* %69), !dbg !9616
  %70 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9617
  %scene_sound44 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 38, !dbg !9618
  store i8* %call43, i8** %scene_sound44, align 8, !dbg !9619
  br label %if.end45, !dbg !9617

if.end45:                                         ; preds = %if.then42, %if.then38
  br label %if.end139, !dbg !9620

if.else46:                                        ; preds = %if.else
  %71 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9621
  %type47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %71, i32 0, i32 6, !dbg !9623
  %72 = load i32, i32* %type47, align 4, !dbg !9623
  %cmp48 = icmp eq i32 %72, 6, !dbg !9624
  br i1 %cmp48, label %if.then49, label %if.else50, !dbg !9625

if.then49:                                        ; preds = %if.else46
  br label %if.end138, !dbg !9626

if.else50:                                        ; preds = %if.else46
  %73 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9628
  %type51 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %73, i32 0, i32 6, !dbg !9630
  %74 = load i32, i32* %type51, align 4, !dbg !9630
  %cmp52 = icmp eq i32 %74, 7, !dbg !9631
  br i1 %cmp52, label %if.then53, label %if.else54, !dbg !9632

if.then53:                                        ; preds = %if.else50
  br label %if.end137, !dbg !9633

if.else54:                                        ; preds = %if.else50
  %75 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9635
  %type55 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %75, i32 0, i32 6, !dbg !9637
  %76 = load i32, i32* %type55, align 4, !dbg !9637
  %cmp56 = icmp eq i32 %76, 3, !dbg !9638
  br i1 %cmp56, label %if.then57, label %if.else64, !dbg !9639

if.then57:                                        ; preds = %if.else54
  %77 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9640
  %78 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9642
  %strip58 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %78, i32 0, i32 24, !dbg !9643
  %79 = load %struct.Strip*, %struct.Strip** %strip58, align 8, !dbg !9643
  %stripdata59 = getelementptr inbounds %struct.Strip, %struct.Strip* %79, i32 0, i32 6, !dbg !9644
  %80 = load %struct.StripElem*, %struct.StripElem** %stripdata59, align 8, !dbg !9644
  %81 = bitcast %struct.StripElem* %80 to i8*, !dbg !9642
  %call60 = call i8* %77(i8* %81), !dbg !9640
  %82 = bitcast i8* %call60 to %struct.StripElem*, !dbg !9640
  %83 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9645
  %strip61 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %83, i32 0, i32 24, !dbg !9646
  %84 = load %struct.Strip*, %struct.Strip** %strip61, align 8, !dbg !9646
  %stripdata62 = getelementptr inbounds %struct.Strip, %struct.Strip* %84, i32 0, i32 6, !dbg !9647
  store %struct.StripElem* %82, %struct.StripElem** %stripdata62, align 8, !dbg !9648
  %85 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9649
  %anim63 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 30, !dbg !9650
  store %struct.anim* null, %struct.anim** %anim63, align 8, !dbg !9651
  br label %if.end136, !dbg !9652

if.else64:                                        ; preds = %if.else54
  %86 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9653
  %type65 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %86, i32 0, i32 6, !dbg !9655
  %87 = load i32, i32* %type65, align 4, !dbg !9655
  %cmp66 = icmp eq i32 %87, 4, !dbg !9656
  br i1 %cmp66, label %if.then67, label %if.else79, !dbg !9657

if.then67:                                        ; preds = %if.else64
  %88 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9658
  %89 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9660
  %strip68 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %89, i32 0, i32 24, !dbg !9661
  %90 = load %struct.Strip*, %struct.Strip** %strip68, align 8, !dbg !9661
  %stripdata69 = getelementptr inbounds %struct.Strip, %struct.Strip* %90, i32 0, i32 6, !dbg !9662
  %91 = load %struct.StripElem*, %struct.StripElem** %stripdata69, align 8, !dbg !9662
  %92 = bitcast %struct.StripElem* %91 to i8*, !dbg !9660
  %call70 = call i8* %88(i8* %92), !dbg !9658
  %93 = bitcast i8* %call70 to %struct.StripElem*, !dbg !9658
  %94 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9663
  %strip71 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %94, i32 0, i32 24, !dbg !9664
  %95 = load %struct.Strip*, %struct.Strip** %strip71, align 8, !dbg !9664
  %stripdata72 = getelementptr inbounds %struct.Strip, %struct.Strip* %95, i32 0, i32 6, !dbg !9665
  store %struct.StripElem* %93, %struct.StripElem** %stripdata72, align 8, !dbg !9666
  %96 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9667
  %scene_sound73 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %96, i32 0, i32 38, !dbg !9669
  %97 = load i8*, i8** %scene_sound73, align 8, !dbg !9669
  %tobool74 = icmp ne i8* %97, null, !dbg !9667
  br i1 %tobool74, label %if.then75, label %if.end78, !dbg !9670

if.then75:                                        ; preds = %if.then67
  %98 = load %struct.Scene*, %struct.Scene** %sce_audio, align 8, !dbg !9671
  %99 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9672
  %call76 = call i8* @sound_add_scene_sound_defaults(%struct.Scene* %98, %struct.Sequence* %99), !dbg !9673
  %100 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9674
  %scene_sound77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %100, i32 0, i32 38, !dbg !9675
  store i8* %call76, i8** %scene_sound77, align 8, !dbg !9676
  br label %if.end78, !dbg !9674

if.end78:                                         ; preds = %if.then75, %if.then67
  %101 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9677
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %101, i32 0, i32 37, !dbg !9678
  %102 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !9678
  %103 = bitcast %struct.bSound* %102 to %struct.ID*, !dbg !9679
  call void @id_us_plus(%struct.ID* %103), !dbg !9680
  br label %if.end135, !dbg !9681

if.else79:                                        ; preds = %if.else64
  %104 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9682
  %type80 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %104, i32 0, i32 6, !dbg !9684
  %105 = load i32, i32* %type80, align 4, !dbg !9684
  %cmp81 = icmp eq i32 %105, 0, !dbg !9685
  br i1 %cmp81, label %if.then82, label %if.else88, !dbg !9686

if.then82:                                        ; preds = %if.else79
  %106 = load i8* (i8*)*, i8* (i8*)** @MEM_dupallocN, align 8, !dbg !9687
  %107 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9689
  %strip83 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %107, i32 0, i32 24, !dbg !9690
  %108 = load %struct.Strip*, %struct.Strip** %strip83, align 8, !dbg !9690
  %stripdata84 = getelementptr inbounds %struct.Strip, %struct.Strip* %108, i32 0, i32 6, !dbg !9691
  %109 = load %struct.StripElem*, %struct.StripElem** %stripdata84, align 8, !dbg !9691
  %110 = bitcast %struct.StripElem* %109 to i8*, !dbg !9689
  %call85 = call i8* %106(i8* %110), !dbg !9687
  %111 = bitcast i8* %call85 to %struct.StripElem*, !dbg !9687
  %112 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9692
  %strip86 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %112, i32 0, i32 24, !dbg !9693
  %113 = load %struct.Strip*, %struct.Strip** %strip86, align 8, !dbg !9693
  %stripdata87 = getelementptr inbounds %struct.Strip, %struct.Strip* %113, i32 0, i32 6, !dbg !9694
  store %struct.StripElem* %111, %struct.StripElem** %stripdata87, align 8, !dbg !9695
  br label %if.end134, !dbg !9696

if.else88:                                        ; preds = %if.else79
  %114 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9697
  %type89 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %114, i32 0, i32 6, !dbg !9699
  %115 = load i32, i32* %type89, align 4, !dbg !9699
  %cmp90 = icmp sge i32 %115, 8, !dbg !9700
  br i1 %cmp90, label %if.then91, label %if.else132, !dbg !9701

if.then91:                                        ; preds = %if.else88
  %116 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9702
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %116, i32 0, i32 33, !dbg !9705
  %117 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9705
  %tobool92 = icmp ne %struct.Sequence* %117, null, !dbg !9702
  br i1 %tobool92, label %land.lhs.true, label %if.end100, !dbg !9706

land.lhs.true:                                    ; preds = %if.then91
  %118 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9707
  %seq193 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 33, !dbg !9708
  %119 = load %struct.Sequence*, %struct.Sequence** %seq193, align 8, !dbg !9708
  %tmp94 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %119, i32 0, i32 2, !dbg !9709
  %120 = load i8*, i8** %tmp94, align 8, !dbg !9709
  %tobool95 = icmp ne i8* %120, null, !dbg !9707
  br i1 %tobool95, label %if.then96, label %if.end100, !dbg !9710

if.then96:                                        ; preds = %land.lhs.true
  %121 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9711
  %seq197 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %121, i32 0, i32 33, !dbg !9712
  %122 = load %struct.Sequence*, %struct.Sequence** %seq197, align 8, !dbg !9712
  %tmp98 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %122, i32 0, i32 2, !dbg !9713
  %123 = load i8*, i8** %tmp98, align 8, !dbg !9713
  %124 = bitcast i8* %123 to %struct.Sequence*, !dbg !9711
  %125 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9714
  %seq199 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %125, i32 0, i32 33, !dbg !9715
  store %struct.Sequence* %124, %struct.Sequence** %seq199, align 8, !dbg !9716
  br label %if.end100, !dbg !9714

if.end100:                                        ; preds = %if.then96, %land.lhs.true, %if.then91
  %126 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9717
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %126, i32 0, i32 34, !dbg !9719
  %127 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9719
  %tobool101 = icmp ne %struct.Sequence* %127, null, !dbg !9717
  br i1 %tobool101, label %land.lhs.true102, label %if.end110, !dbg !9720

land.lhs.true102:                                 ; preds = %if.end100
  %128 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9721
  %seq2103 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %128, i32 0, i32 34, !dbg !9722
  %129 = load %struct.Sequence*, %struct.Sequence** %seq2103, align 8, !dbg !9722
  %tmp104 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %129, i32 0, i32 2, !dbg !9723
  %130 = load i8*, i8** %tmp104, align 8, !dbg !9723
  %tobool105 = icmp ne i8* %130, null, !dbg !9721
  br i1 %tobool105, label %if.then106, label %if.end110, !dbg !9724

if.then106:                                       ; preds = %land.lhs.true102
  %131 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9725
  %seq2107 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %131, i32 0, i32 34, !dbg !9726
  %132 = load %struct.Sequence*, %struct.Sequence** %seq2107, align 8, !dbg !9726
  %tmp108 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %132, i32 0, i32 2, !dbg !9727
  %133 = load i8*, i8** %tmp108, align 8, !dbg !9727
  %134 = bitcast i8* %133 to %struct.Sequence*, !dbg !9725
  %135 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9728
  %seq2109 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %135, i32 0, i32 34, !dbg !9729
  store %struct.Sequence* %134, %struct.Sequence** %seq2109, align 8, !dbg !9730
  br label %if.end110, !dbg !9728

if.end110:                                        ; preds = %if.then106, %land.lhs.true102, %if.end100
  %136 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9731
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %136, i32 0, i32 35, !dbg !9733
  %137 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9733
  %tobool111 = icmp ne %struct.Sequence* %137, null, !dbg !9731
  br i1 %tobool111, label %land.lhs.true112, label %if.end120, !dbg !9734

land.lhs.true112:                                 ; preds = %if.end110
  %138 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9735
  %seq3113 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %138, i32 0, i32 35, !dbg !9736
  %139 = load %struct.Sequence*, %struct.Sequence** %seq3113, align 8, !dbg !9736
  %tmp114 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %139, i32 0, i32 2, !dbg !9737
  %140 = load i8*, i8** %tmp114, align 8, !dbg !9737
  %tobool115 = icmp ne i8* %140, null, !dbg !9735
  br i1 %tobool115, label %if.then116, label %if.end120, !dbg !9738

if.then116:                                       ; preds = %land.lhs.true112
  %141 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9739
  %seq3117 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %141, i32 0, i32 35, !dbg !9740
  %142 = load %struct.Sequence*, %struct.Sequence** %seq3117, align 8, !dbg !9740
  %tmp118 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %142, i32 0, i32 2, !dbg !9741
  %143 = load i8*, i8** %tmp118, align 8, !dbg !9741
  %144 = bitcast i8* %143 to %struct.Sequence*, !dbg !9739
  %145 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9742
  %seq3119 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %145, i32 0, i32 35, !dbg !9743
  store %struct.Sequence* %144, %struct.Sequence** %seq3119, align 8, !dbg !9744
  br label %if.end120, !dbg !9742

if.end120:                                        ; preds = %if.then116, %land.lhs.true112, %if.end110
  %146 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9745
  %type121 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %146, i32 0, i32 6, !dbg !9747
  %147 = load i32, i32* %type121, align 4, !dbg !9747
  %and = and i32 %147, 8, !dbg !9748
  %tobool122 = icmp ne i32 %and, 0, !dbg !9748
  br i1 %tobool122, label %if.then123, label %if.end129, !dbg !9749

if.then123:                                       ; preds = %if.end120
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !9750, metadata !DIExpression()), !dbg !9752
  %148 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9753
  call void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret %tmp124, %struct.Sequence* %148), !dbg !9754
  %149 = bitcast %struct.SeqEffectHandle* %sh to i8*, !dbg !9754
  %150 = bitcast %struct.SeqEffectHandle* %tmp124 to i8*, !dbg !9754
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* align 8 %150, i64 96, i1 false), !dbg !9754
  %copy = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 5, !dbg !9755
  %151 = load void (%struct.Sequence*, %struct.Sequence*)*, void (%struct.Sequence*, %struct.Sequence*)** %copy, align 8, !dbg !9755
  %tobool125 = icmp ne void (%struct.Sequence*, %struct.Sequence*)* %151, null, !dbg !9757
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !9758

if.then126:                                       ; preds = %if.then123
  %copy127 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 5, !dbg !9759
  %152 = load void (%struct.Sequence*, %struct.Sequence*)*, void (%struct.Sequence*, %struct.Sequence*)** %copy127, align 8, !dbg !9759
  %153 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9760
  %154 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9761
  call void %152(%struct.Sequence* %153, %struct.Sequence* %154), !dbg !9762
  br label %if.end128, !dbg !9762

if.end128:                                        ; preds = %if.then126, %if.then123
  br label %if.end129, !dbg !9763

if.end129:                                        ; preds = %if.end128, %if.end120
  %155 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9764
  %strip130 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %155, i32 0, i32 24, !dbg !9765
  %156 = load %struct.Strip*, %struct.Strip** %strip130, align 8, !dbg !9765
  %stripdata131 = getelementptr inbounds %struct.Strip, %struct.Strip* %156, i32 0, i32 6, !dbg !9766
  store %struct.StripElem* null, %struct.StripElem** %stripdata131, align 8, !dbg !9767
  br label %if.end133, !dbg !9768

if.else132:                                       ; preds = %if.else88
  br label %if.end133

if.end133:                                        ; preds = %if.else132, %if.end129
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.then82
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end78
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then57
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then53
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then49
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.end45
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.then34
  %157 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9769
  %and141 = and i32 %157, 1, !dbg !9771
  %tobool142 = icmp ne i32 %and141, 0, !dbg !9771
  br i1 %tobool142, label %if.then143, label %if.end145, !dbg !9772

if.then143:                                       ; preds = %if.end140
  %158 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9773
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %158, i32 0, i32 19, !dbg !9774
  %159 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9774
  %seqbase144 = getelementptr inbounds %struct.Editing, %struct.Editing* %159, i32 0, i32 1, !dbg !9775
  %160 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9776
  call void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbase144, %struct.Sequence* %160), !dbg !9777
  br label %if.end145, !dbg !9777

if.end145:                                        ; preds = %if.then143, %if.end140
  %161 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9778
  %and146 = and i32 %161, 4, !dbg !9780
  %tobool147 = icmp ne i32 %and146, 0, !dbg !9780
  br i1 %tobool147, label %if.then148, label %if.end152, !dbg !9781

if.then148:                                       ; preds = %if.end145
  %162 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9782
  %163 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9783
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %163, i32 0, i32 4, !dbg !9784
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !9783
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2, !dbg !9785
  %164 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9786
  %name149 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %164, i32 0, i32 4, !dbg !9787
  %arraydecay150 = getelementptr inbounds [64 x i8], [64 x i8]* %name149, i64 0, i64 0, !dbg !9786
  %add.ptr151 = getelementptr inbounds i8, i8* %arraydecay150, i64 2, !dbg !9788
  call void @BKE_sequencer_dupe_animdata(%struct.Scene* %162, i8* %add.ptr, i8* %add.ptr151), !dbg !9789
  br label %if.end152, !dbg !9789

if.end152:                                        ; preds = %if.then148, %if.end145
  %165 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9790
  ret %struct.Sequence* %165, !dbg !9791
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BKE_sequence_base_dupli_recursive(%struct.Scene* %scene, %struct.Scene* %scene_to, %struct.ListBase* %nseqbase, %struct.ListBase* %seqbase, i32 %dupe_flag) #0 !dbg !9792 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %scene_to.addr = alloca %struct.Scene*, align 8
  %nseqbase.addr = alloca %struct.ListBase*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %dupe_flag.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %seqn = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  %dupe_flag_recursive = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9795, metadata !DIExpression()), !dbg !9796
  store %struct.Scene* %scene_to, %struct.Scene** %scene_to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene_to.addr, metadata !9797, metadata !DIExpression()), !dbg !9798
  store %struct.ListBase* %nseqbase, %struct.ListBase** %nseqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %nseqbase.addr, metadata !9799, metadata !DIExpression()), !dbg !9800
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !9801, metadata !DIExpression()), !dbg !9802
  store i32 %dupe_flag, i32* %dupe_flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dupe_flag.addr, metadata !9803, metadata !DIExpression()), !dbg !9804
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9805, metadata !DIExpression()), !dbg !9806
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !9807, metadata !DIExpression()), !dbg !9808
  store %struct.Sequence* null, %struct.Sequence** %seqn, align 8, !dbg !9808
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !9809, metadata !DIExpression()), !dbg !9810
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9811
  %call = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %0), !dbg !9812
  store %struct.Sequence* %call, %struct.Sequence** %last_seq, align 8, !dbg !9810
  call void @llvm.dbg.declare(metadata i32* %dupe_flag_recursive, metadata !9813, metadata !DIExpression()), !dbg !9814
  %1 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9815
  %or = or i32 %1, 8, !dbg !9816
  store i32 %or, i32* %dupe_flag_recursive, align 4, !dbg !9814
  %2 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !9817
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %2, i32 0, i32 0, !dbg !9819
  %3 = load i8*, i8** %first, align 8, !dbg !9819
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !9817
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !9820
  br label %for.cond, !dbg !9821

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9822
  %tobool = icmp ne %struct.Sequence* %5, null, !dbg !9824
  br i1 %tobool, label %for.body, label %for.end, !dbg !9824

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9825
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 2, !dbg !9827
  store i8* null, i8** %tmp, align 8, !dbg !9828
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9829
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !9831
  %8 = load i32, i32* %flag, align 8, !dbg !9831
  %and = and i32 %8, 1, !dbg !9832
  %tobool1 = icmp ne i32 %and, 0, !dbg !9832
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !9833

lor.lhs.false:                                    ; preds = %for.body
  %9 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9834
  %and2 = and i32 %9, 8, !dbg !9835
  %tobool3 = icmp ne i32 %and2, 0, !dbg !9835
  br i1 %tobool3, label %if.then, label %if.end26, !dbg !9836

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9837
  %11 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !9839
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9840
  %13 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9841
  %call4 = call %struct.Sequence* @seq_dupli(%struct.Scene* %10, %struct.Scene* %11, %struct.Sequence* %12, i32 %13), !dbg !9842
  store %struct.Sequence* %call4, %struct.Sequence** %seqn, align 8, !dbg !9843
  %14 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9844
  %tobool5 = icmp ne %struct.Sequence* %14, null, !dbg !9844
  br i1 %tobool5, label %if.then6, label %if.end25, !dbg !9846

if.then6:                                         ; preds = %if.then
  %15 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9847
  %and7 = and i32 %15, 2, !dbg !9850
  %tobool8 = icmp ne i32 %and7, 0, !dbg !9850
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !9851

if.then9:                                         ; preds = %if.then6
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9852
  %flag10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 5, !dbg !9854
  %17 = load i32, i32* %flag10, align 8, !dbg !9855
  %and11 = and i32 %17, -8, !dbg !9855
  store i32 %and11, i32* %flag10, align 8, !dbg !9855
  %18 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9856
  %flag12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 5, !dbg !9857
  %19 = load i32, i32* %flag12, align 8, !dbg !9858
  %and13 = and i32 %19, -16391, !dbg !9858
  store i32 %and13, i32* %flag12, align 8, !dbg !9858
  br label %if.end, !dbg !9859

if.end:                                           ; preds = %if.then9, %if.then6
  %20 = load %struct.ListBase*, %struct.ListBase** %nseqbase.addr, align 8, !dbg !9860
  %21 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9861
  %22 = bitcast %struct.Sequence* %21 to i8*, !dbg !9861
  call void @BLI_addtail(%struct.ListBase* %20, i8* %22), !dbg !9862
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9863
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 6, !dbg !9865
  %24 = load i32, i32* %type, align 4, !dbg !9865
  %cmp = icmp eq i32 %24, 1, !dbg !9866
  br i1 %cmp, label %if.then14, label %if.end17, !dbg !9867

if.then14:                                        ; preds = %if.end
  %25 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9868
  %26 = load %struct.Scene*, %struct.Scene** %scene_to.addr, align 8, !dbg !9870
  %27 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9871
  %seqbase15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 36, !dbg !9872
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9873
  %seqbase16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 36, !dbg !9874
  %29 = load i32, i32* %dupe_flag_recursive, align 4, !dbg !9875
  call void @BKE_sequence_base_dupli_recursive(%struct.Scene* %25, %struct.Scene* %26, %struct.ListBase* %seqbase15, %struct.ListBase* %seqbase16, i32 %29), !dbg !9876
  br label %if.end17, !dbg !9877

if.end17:                                         ; preds = %if.then14, %if.end
  %30 = load i32, i32* %dupe_flag.addr, align 4, !dbg !9878
  %and18 = and i32 %30, 2, !dbg !9880
  %tobool19 = icmp ne i32 %and18, 0, !dbg !9880
  br i1 %tobool19, label %if.then20, label %if.end24, !dbg !9881

if.then20:                                        ; preds = %if.end17
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9882
  %32 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !9885
  %cmp21 = icmp eq %struct.Sequence* %31, %32, !dbg !9886
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !9887

if.then22:                                        ; preds = %if.then20
  %33 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9888
  %34 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9890
  call void @BKE_sequencer_active_set(%struct.Scene* %33, %struct.Sequence* %34), !dbg !9891
  br label %if.end23, !dbg !9892

if.end23:                                         ; preds = %if.then22, %if.then20
  br label %if.end24, !dbg !9893

if.end24:                                         ; preds = %if.end23, %if.end17
  br label %if.end25, !dbg !9894

if.end25:                                         ; preds = %if.end24, %if.then
  br label %if.end26, !dbg !9895

if.end26:                                         ; preds = %if.end25, %lor.lhs.false
  br label %for.inc, !dbg !9896

for.inc:                                          ; preds = %if.end26
  %35 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9897
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 0, !dbg !9898
  %36 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !9898
  store %struct.Sequence* %36, %struct.Sequence** %seq, align 8, !dbg !9899
  br label %for.cond, !dbg !9900, !llvm.loop !9901

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9903
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @BKE_sequence_is_valid_check(%struct.Sequence* %seq) #0 !dbg !9904 {
entry:
  %retval = alloca i8, align 1
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9905, metadata !DIExpression()), !dbg !9906
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9907
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !9908
  %1 = load i32, i32* %type, align 4, !dbg !9908
  switch i32 %1, label %sw.epilog [
    i32 7, label %sw.bb
    i32 6, label %sw.bb2
    i32 2, label %sw.bb6
    i32 4, label %sw.bb10
  ], !dbg !9909

sw.bb:                                            ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9910
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 29, !dbg !9912
  %3 = load %struct.Mask*, %struct.Mask** %mask, align 8, !dbg !9912
  %cmp = icmp ne %struct.Mask* %3, null, !dbg !9913
  %conv = zext i1 %cmp to i32, !dbg !9913
  %conv1 = trunc i32 %conv to i8, !dbg !9914
  store i8 %conv1, i8* %retval, align 1, !dbg !9915
  br label %return, !dbg !9915

sw.bb2:                                           ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9916
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 28, !dbg !9917
  %5 = load %struct.MovieClip*, %struct.MovieClip** %clip, align 8, !dbg !9917
  %cmp3 = icmp ne %struct.MovieClip* %5, null, !dbg !9918
  %conv4 = zext i1 %cmp3 to i32, !dbg !9918
  %conv5 = trunc i32 %conv4 to i8, !dbg !9919
  store i8 %conv5, i8* %retval, align 1, !dbg !9920
  br label %return, !dbg !9920

sw.bb6:                                           ; preds = %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9921
  %scene = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 26, !dbg !9922
  %7 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9922
  %cmp7 = icmp ne %struct.Scene* %7, null, !dbg !9923
  %conv8 = zext i1 %cmp7 to i32, !dbg !9923
  %conv9 = trunc i32 %conv8 to i8, !dbg !9924
  store i8 %conv9, i8* %retval, align 1, !dbg !9925
  br label %return, !dbg !9925

sw.bb10:                                          ; preds = %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9926
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 37, !dbg !9927
  %9 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !9927
  %cmp11 = icmp ne %struct.bSound* %9, null, !dbg !9928
  %conv12 = zext i1 %cmp11 to i32, !dbg !9928
  %conv13 = trunc i32 %conv12 to i8, !dbg !9929
  store i8 %conv13, i8* %retval, align 1, !dbg !9930
  br label %return, !dbg !9930

sw.epilog:                                        ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9931
  br label %return, !dbg !9931

return:                                           ; preds = %sw.epilog, %sw.bb10, %sw.bb6, %sw.bb2, %sw.bb
  %10 = load i8, i8* %retval, align 1, !dbg !9932
  ret i8 %10, !dbg !9932
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_free_strip(%struct.Strip* %strip) #0 !dbg !9933 {
entry:
  %strip.addr = alloca %struct.Strip*, align 8
  store %struct.Strip* %strip, %struct.Strip** %strip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Strip** %strip.addr, metadata !9936, metadata !DIExpression()), !dbg !9937
  %0 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9938
  %us = getelementptr inbounds %struct.Strip, %struct.Strip* %0, i32 0, i32 2, !dbg !9939
  %1 = load i32, i32* %us, align 8, !dbg !9940
  %dec = add nsw i32 %1, -1, !dbg !9940
  store i32 %dec, i32* %us, align 8, !dbg !9940
  %2 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9941
  %us1 = getelementptr inbounds %struct.Strip, %struct.Strip* %2, i32 0, i32 2, !dbg !9943
  %3 = load i32, i32* %us1, align 8, !dbg !9943
  %cmp = icmp sgt i32 %3, 0, !dbg !9944
  br i1 %cmp, label %if.then, label %if.end, !dbg !9945

if.then:                                          ; preds = %entry
  br label %return, !dbg !9946

if.end:                                           ; preds = %entry
  %4 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9947
  %us2 = getelementptr inbounds %struct.Strip, %struct.Strip* %4, i32 0, i32 2, !dbg !9949
  %5 = load i32, i32* %us2, align 8, !dbg !9949
  %cmp3 = icmp slt i32 %5, 0, !dbg !9950
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !9951

if.then4:                                         ; preds = %if.end
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0)), !dbg !9952
  br label %return, !dbg !9954

if.end5:                                          ; preds = %if.end
  %6 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9955
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 6, !dbg !9957
  %7 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !9957
  %tobool = icmp ne %struct.StripElem* %7, null, !dbg !9955
  br i1 %tobool, label %if.then6, label %if.end8, !dbg !9958

if.then6:                                         ; preds = %if.end5
  %8 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !9959
  %9 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9961
  %stripdata7 = getelementptr inbounds %struct.Strip, %struct.Strip* %9, i32 0, i32 6, !dbg !9962
  %10 = load %struct.StripElem*, %struct.StripElem** %stripdata7, align 8, !dbg !9962
  %11 = bitcast %struct.StripElem* %10 to i8*, !dbg !9961
  call void %8(i8* %11), !dbg !9959
  br label %if.end8, !dbg !9963

if.end8:                                          ; preds = %if.then6, %if.end5
  %12 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9964
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %12, i32 0, i32 8, !dbg !9966
  %13 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !9966
  %tobool9 = icmp ne %struct.StripProxy* %13, null, !dbg !9964
  br i1 %tobool9, label %if.then10, label %if.end18, !dbg !9967

if.then10:                                        ; preds = %if.end8
  %14 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9968
  %proxy11 = getelementptr inbounds %struct.Strip, %struct.Strip* %14, i32 0, i32 8, !dbg !9971
  %15 = load %struct.StripProxy*, %struct.StripProxy** %proxy11, align 8, !dbg !9971
  %anim = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %15, i32 0, i32 2, !dbg !9972
  %16 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !9972
  %tobool12 = icmp ne %struct.anim* %16, null, !dbg !9968
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !9973

if.then13:                                        ; preds = %if.then10
  %17 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9974
  %proxy14 = getelementptr inbounds %struct.Strip, %struct.Strip* %17, i32 0, i32 8, !dbg !9976
  %18 = load %struct.StripProxy*, %struct.StripProxy** %proxy14, align 8, !dbg !9976
  %anim15 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %18, i32 0, i32 2, !dbg !9977
  %19 = load %struct.anim*, %struct.anim** %anim15, align 8, !dbg !9977
  call void @IMB_free_anim(%struct.anim* %19), !dbg !9978
  br label %if.end16, !dbg !9979

if.end16:                                         ; preds = %if.then13, %if.then10
  %20 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !9980
  %21 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9981
  %proxy17 = getelementptr inbounds %struct.Strip, %struct.Strip* %21, i32 0, i32 8, !dbg !9982
  %22 = load %struct.StripProxy*, %struct.StripProxy** %proxy17, align 8, !dbg !9982
  %23 = bitcast %struct.StripProxy* %22 to i8*, !dbg !9981
  call void %20(i8* %23), !dbg !9980
  br label %if.end18, !dbg !9983

if.end18:                                         ; preds = %if.end16, %if.end8
  %24 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9984
  %crop = getelementptr inbounds %struct.Strip, %struct.Strip* %24, i32 0, i32 9, !dbg !9986
  %25 = load %struct.StripCrop*, %struct.StripCrop** %crop, align 8, !dbg !9986
  %tobool19 = icmp ne %struct.StripCrop* %25, null, !dbg !9984
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !9987

if.then20:                                        ; preds = %if.end18
  %26 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !9988
  %27 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9990
  %crop21 = getelementptr inbounds %struct.Strip, %struct.Strip* %27, i32 0, i32 9, !dbg !9991
  %28 = load %struct.StripCrop*, %struct.StripCrop** %crop21, align 8, !dbg !9991
  %29 = bitcast %struct.StripCrop* %28 to i8*, !dbg !9990
  call void %26(i8* %29), !dbg !9988
  br label %if.end22, !dbg !9992

if.end22:                                         ; preds = %if.then20, %if.end18
  %30 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9993
  %transform = getelementptr inbounds %struct.Strip, %struct.Strip* %30, i32 0, i32 10, !dbg !9995
  %31 = load %struct.StripTransform*, %struct.StripTransform** %transform, align 8, !dbg !9995
  %tobool23 = icmp ne %struct.StripTransform* %31, null, !dbg !9993
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !9996

if.then24:                                        ; preds = %if.end22
  %32 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !9997
  %33 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !9999
  %transform25 = getelementptr inbounds %struct.Strip, %struct.Strip* %33, i32 0, i32 10, !dbg !10000
  %34 = load %struct.StripTransform*, %struct.StripTransform** %transform25, align 8, !dbg !10000
  %35 = bitcast %struct.StripTransform* %34 to i8*, !dbg !9999
  call void %32(i8* %35), !dbg !9997
  br label %if.end26, !dbg !10001

if.end26:                                         ; preds = %if.then24, %if.end22
  %36 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !10002
  %37 = load %struct.Strip*, %struct.Strip** %strip.addr, align 8, !dbg !10003
  %38 = bitcast %struct.Strip* %37 to i8*, !dbg !10003
  call void %36(i8* %38), !dbg !10002
  br label %return, !dbg !10004

return:                                           ; preds = %if.end26, %if.then4, %if.then
  ret void, !dbg !10004
}

declare dso_local void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret, %struct.Sequence*) #2

declare dso_local void @sound_remove_scene_sound(%struct.Scene*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @seq_free_animdata(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !10005 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %str = alloca [163 x i8], align 16
  %str_len = alloca i64, align 8
  %fcu = alloca %struct.FCurve*, align 8
  %next_fcu = alloca %struct.FCurve*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !10006, metadata !DIExpression()), !dbg !10007
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !10008, metadata !DIExpression()), !dbg !10009
  call void @llvm.dbg.declare(metadata [163 x i8]* %str, metadata !10010, metadata !DIExpression()), !dbg !10011
  call void @llvm.dbg.declare(metadata i64* %str_len, metadata !10012, metadata !DIExpression()), !dbg !10013
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu, metadata !10014, metadata !DIExpression()), !dbg !10015
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10016
  %adt = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 1, !dbg !10018
  %1 = load %struct.AnimData*, %struct.AnimData** %adt, align 8, !dbg !10018
  %cmp = icmp eq %struct.AnimData* %1, null, !dbg !10019
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10020

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10021
  %adt1 = getelementptr inbounds %struct.Scene, %struct.Scene* %2, i32 0, i32 1, !dbg !10022
  %3 = load %struct.AnimData*, %struct.AnimData** %adt1, align 8, !dbg !10022
  %action = getelementptr inbounds %struct.AnimData, %struct.AnimData* %3, i32 0, i32 0, !dbg !10023
  %4 = load %struct.bAction*, %struct.bAction** %action, align 8, !dbg !10023
  %cmp2 = icmp eq %struct.bAction* %4, null, !dbg !10024
  br i1 %cmp2, label %if.then, label %if.end, !dbg !10025

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %while.end, !dbg !10026

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [163 x i8], [163 x i8]* %str, i64 0, i64 0, !dbg !10027
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10028
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 4, !dbg !10029
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !10028
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay3, i64 2, !dbg !10030
  %call = call i64 @sequencer_rna_path_prefix(i8* %arraydecay, i8* %add.ptr), !dbg !10031
  store i64 %call, i64* %str_len, align 8, !dbg !10032
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10033
  %adt4 = getelementptr inbounds %struct.Scene, %struct.Scene* %6, i32 0, i32 1, !dbg !10034
  %7 = load %struct.AnimData*, %struct.AnimData** %adt4, align 8, !dbg !10034
  %action5 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %7, i32 0, i32 0, !dbg !10035
  %8 = load %struct.bAction*, %struct.bAction** %action5, align 8, !dbg !10035
  %curves = getelementptr inbounds %struct.bAction, %struct.bAction* %8, i32 0, i32 1, !dbg !10036
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %curves, i32 0, i32 0, !dbg !10037
  %9 = load i8*, i8** %first, align 8, !dbg !10037
  %10 = bitcast i8* %9 to %struct.FCurve*, !dbg !10033
  store %struct.FCurve* %10, %struct.FCurve** %fcu, align 8, !dbg !10038
  br label %while.cond, !dbg !10039

while.cond:                                       ; preds = %if.end14, %if.end
  %11 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10040
  %tobool = icmp ne %struct.FCurve* %11, null, !dbg !10039
  br i1 %tobool, label %while.body, label %while.end, !dbg !10039

while.body:                                       ; preds = %while.cond
  %12 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10041
  %rna_path = getelementptr inbounds %struct.FCurve, %struct.FCurve* %12, i32 0, i32 12, !dbg !10041
  %13 = load i8*, i8** %rna_path, align 8, !dbg !10041
  %arraydecay6 = getelementptr inbounds [163 x i8], [163 x i8]* %str, i64 0, i64 0, !dbg !10041
  %14 = load i64, i64* %str_len, align 8, !dbg !10041
  %call7 = call i32 @strncmp(i8* %13, i8* %arraydecay6, i64 %14) #7, !dbg !10041
  %cmp8 = icmp eq i32 %call7, 0, !dbg !10041
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !10044

if.then9:                                         ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.FCurve** %next_fcu, metadata !10045, metadata !DIExpression()), !dbg !10047
  %15 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10048
  %next = getelementptr inbounds %struct.FCurve, %struct.FCurve* %15, i32 0, i32 0, !dbg !10049
  %16 = load %struct.FCurve*, %struct.FCurve** %next, align 8, !dbg !10049
  store %struct.FCurve* %16, %struct.FCurve** %next_fcu, align 8, !dbg !10047
  %17 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10050
  %adt10 = getelementptr inbounds %struct.Scene, %struct.Scene* %17, i32 0, i32 1, !dbg !10051
  %18 = load %struct.AnimData*, %struct.AnimData** %adt10, align 8, !dbg !10051
  %action11 = getelementptr inbounds %struct.AnimData, %struct.AnimData* %18, i32 0, i32 0, !dbg !10052
  %19 = load %struct.bAction*, %struct.bAction** %action11, align 8, !dbg !10052
  %curves12 = getelementptr inbounds %struct.bAction, %struct.bAction* %19, i32 0, i32 1, !dbg !10053
  %20 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10054
  %21 = bitcast %struct.FCurve* %20 to i8*, !dbg !10054
  call void @BLI_remlink(%struct.ListBase* %curves12, i8* %21), !dbg !10055
  %22 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10056
  call void @free_fcurve(%struct.FCurve* %22), !dbg !10057
  %23 = load %struct.FCurve*, %struct.FCurve** %next_fcu, align 8, !dbg !10058
  store %struct.FCurve* %23, %struct.FCurve** %fcu, align 8, !dbg !10059
  br label %if.end14, !dbg !10060

if.else:                                          ; preds = %while.body
  %24 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !10061
  %next13 = getelementptr inbounds %struct.FCurve, %struct.FCurve* %24, i32 0, i32 0, !dbg !10063
  %25 = load %struct.FCurve*, %struct.FCurve** %next13, align 8, !dbg !10063
  store %struct.FCurve* %25, %struct.FCurve** %fcu, align 8, !dbg !10064
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then9
  br label %while.cond, !dbg !10039, !llvm.loop !10065

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !10067
}

declare dso_local void @BKE_sequence_modifier_clear(%struct.Sequence*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local void @BLI_remlink(%struct.ListBase*, i8*) #2

declare dso_local void @free_fcurve(%struct.FCurve*) #2

declare dso_local %struct.ListBase* @which_libbase(%struct.Main*, i16 signext) #2

declare dso_local i32 @BLI_findindex(%struct.ListBase*, i8*) #2

declare dso_local i8* @BLI_findstring(%struct.ListBase*, i8*, i32) #2

declare dso_local %struct.bSound* @sound_new_file(%struct.Main*, i8*) #2

declare dso_local %struct.MovieClip* @BKE_movieclip_file_add(%struct.Main*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @srgb_to_linearrgb_v3_v3(float* %linear, float* %srgb) #0 !dbg !10068 {
entry:
  %linear.addr = alloca float*, align 8
  %srgb.addr = alloca float*, align 8
  store float* %linear, float** %linear.addr, align 8
  call void @llvm.dbg.declare(metadata float** %linear.addr, metadata !10069, metadata !DIExpression()), !dbg !10070
  store float* %srgb, float** %srgb.addr, align 8
  call void @llvm.dbg.declare(metadata float** %srgb.addr, metadata !10071, metadata !DIExpression()), !dbg !10072
  %0 = load float*, float** %srgb.addr, align 8, !dbg !10073
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !10073
  %1 = load float, float* %arrayidx, align 4, !dbg !10073
  %call = call float @srgb_to_linearrgb(float %1), !dbg !10074
  %2 = load float*, float** %linear.addr, align 8, !dbg !10075
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !10075
  store float %call, float* %arrayidx1, align 4, !dbg !10076
  %3 = load float*, float** %srgb.addr, align 8, !dbg !10077
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !10077
  %4 = load float, float* %arrayidx2, align 4, !dbg !10077
  %call3 = call float @srgb_to_linearrgb(float %4), !dbg !10078
  %5 = load float*, float** %linear.addr, align 8, !dbg !10079
  %arrayidx4 = getelementptr inbounds float, float* %5, i64 1, !dbg !10079
  store float %call3, float* %arrayidx4, align 4, !dbg !10080
  %6 = load float*, float** %srgb.addr, align 8, !dbg !10081
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 2, !dbg !10081
  %7 = load float, float* %arrayidx5, align 4, !dbg !10081
  %call6 = call float @srgb_to_linearrgb(float %7), !dbg !10082
  %8 = load float*, float** %linear.addr, align 8, !dbg !10083
  %arrayidx7 = getelementptr inbounds float, float* %8, i64 2, !dbg !10083
  store float %call6, float* %arrayidx7, align 4, !dbg !10084
  ret void, !dbg !10085
}

declare dso_local float @srgb_to_linearrgb(float) #2

; Function Attrs: noinline nounwind uwtable
define internal void @seq_count(%struct.ListBase* %seqbase, i32* %tot) #0 !dbg !10086 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %tot.addr = alloca i32*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !10089, metadata !DIExpression()), !dbg !10090
  store i32* %tot, i32** %tot.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %tot.addr, metadata !10091, metadata !DIExpression()), !dbg !10092
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !10093, metadata !DIExpression()), !dbg !10094
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !10095
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !10097
  %1 = load i8*, i8** %first, align 8, !dbg !10097
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !10095
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !10098
  br label %for.cond, !dbg !10099

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10100
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !10102
  br i1 %tobool, label %for.body, label %for.end, !dbg !10102

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %tot.addr, align 8, !dbg !10103
  %5 = load i32, i32* %4, align 4, !dbg !10105
  %inc = add nsw i32 %5, 1, !dbg !10105
  store i32 %inc, i32* %4, align 4, !dbg !10105
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10106
  %seqbase1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 36, !dbg !10108
  %first2 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase1, i32 0, i32 0, !dbg !10109
  %7 = load i8*, i8** %first2, align 8, !dbg !10109
  %tobool3 = icmp ne i8* %7, null, !dbg !10106
  br i1 %tobool3, label %if.then, label %if.end, !dbg !10110

if.then:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10111
  %seqbase4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 36, !dbg !10112
  %9 = load i32*, i32** %tot.addr, align 8, !dbg !10113
  call void @seq_count(%struct.ListBase* %seqbase4, i32* %9), !dbg !10114
  br label %if.end, !dbg !10114

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !10115

for.inc:                                          ; preds = %if.end
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10116
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 0, !dbg !10117
  %11 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !10117
  store %struct.Sequence* %11, %struct.Sequence** %seq, align 8, !dbg !10118
  br label %for.cond, !dbg !10119, !llvm.loop !10120

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10122
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_build_array(%struct.ListBase* %seqbase, %struct.Sequence*** %array, i32 %depth) #0 !dbg !10123 {
entry:
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %array.addr = alloca %struct.Sequence***, align 8
  %depth.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !10126, metadata !DIExpression()), !dbg !10127
  store %struct.Sequence*** %array, %struct.Sequence**** %array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence**** %array.addr, metadata !10128, metadata !DIExpression()), !dbg !10129
  store i32 %depth, i32* %depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %depth.addr, metadata !10130, metadata !DIExpression()), !dbg !10131
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !10132, metadata !DIExpression()), !dbg !10133
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !10134
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !10136
  %1 = load i8*, i8** %first, align 8, !dbg !10136
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !10134
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !10137
  br label %for.cond, !dbg !10138

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10139
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !10141
  br i1 %tobool, label %for.body, label %for.end, !dbg !10141

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %depth.addr, align 4, !dbg !10142
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10144
  %depth1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 14, !dbg !10145
  store i32 %4, i32* %depth1, align 4, !dbg !10146
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10147
  %seqbase2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 36, !dbg !10149
  %first3 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase2, i32 0, i32 0, !dbg !10150
  %7 = load i8*, i8** %first3, align 8, !dbg !10150
  %tobool4 = icmp ne i8* %7, null, !dbg !10147
  br i1 %tobool4, label %if.then, label %if.end, !dbg !10151

if.then:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10152
  %seqbase5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 36, !dbg !10153
  %9 = load %struct.Sequence***, %struct.Sequence**** %array.addr, align 8, !dbg !10154
  %10 = load i32, i32* %depth.addr, align 4, !dbg !10155
  %add = add nsw i32 %10, 1, !dbg !10156
  call void @seq_build_array(%struct.ListBase* %seqbase5, %struct.Sequence*** %9, i32 %add), !dbg !10157
  br label %if.end, !dbg !10157

if.end:                                           ; preds = %if.then, %for.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10158
  %12 = load %struct.Sequence***, %struct.Sequence**** %array.addr, align 8, !dbg !10159
  %13 = load %struct.Sequence**, %struct.Sequence*** %12, align 8, !dbg !10160
  store %struct.Sequence* %11, %struct.Sequence** %13, align 8, !dbg !10161
  %14 = load %struct.Sequence***, %struct.Sequence**** %array.addr, align 8, !dbg !10162
  %15 = load %struct.Sequence**, %struct.Sequence*** %14, align 8, !dbg !10163
  %incdec.ptr = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %15, i32 1, !dbg !10163
  store %struct.Sequence** %incdec.ptr, %struct.Sequence*** %14, align 8, !dbg !10163
  br label %for.inc, !dbg !10164

for.inc:                                          ; preds = %if.end
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10165
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 0, !dbg !10166
  %17 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !10166
  store %struct.Sequence* %17, %struct.Sequence** %seq, align 8, !dbg !10167
  br label %for.cond, !dbg !10168, !llvm.loop !10169

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10171
}

; Function Attrs: noinline nounwind uwtable
define internal void @seq_update_sound_bounds_recursive_rec(%struct.Scene* %scene, %struct.Sequence* %metaseq, i32 %start, i32 %end) #0 !dbg !10172 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %metaseq.addr = alloca %struct.Sequence*, align 8
  %start.addr = alloca i32, align 4
  %end.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %startofs = alloca i32, align 4
  %endofs = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !10173, metadata !DIExpression()), !dbg !10174
  store %struct.Sequence* %metaseq, %struct.Sequence** %metaseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %metaseq.addr, metadata !10175, metadata !DIExpression()), !dbg !10176
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !10177, metadata !DIExpression()), !dbg !10178
  store i32 %end, i32* %end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %end.addr, metadata !10179, metadata !DIExpression()), !dbg !10180
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !10181, metadata !DIExpression()), !dbg !10182
  %0 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10183
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 36, !dbg !10185
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !10186
  %1 = load i8*, i8** %first, align 8, !dbg !10186
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !10183
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !10187
  br label %for.cond, !dbg !10188

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10189
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !10191
  br i1 %tobool, label %for.body, label %for.end, !dbg !10191

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10192
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !10195
  %5 = load i32, i32* %type, align 4, !dbg !10195
  %cmp = icmp eq i32 %5, 1, !dbg !10196
  br i1 %cmp, label %if.then, label %if.else, !dbg !10197

if.then:                                          ; preds = %for.body
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10198
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10200
  %8 = load i32, i32* %start.addr, align 4, !dbg !10201
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10202
  %call = call i32 @metaseq_start(%struct.Sequence* %9), !dbg !10203
  %call1 = call i32 @max_ii(i32 %8, i32 %call), !dbg !10204
  %10 = load i32, i32* %end.addr, align 4, !dbg !10205
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10206
  %call2 = call i32 @metaseq_end(%struct.Sequence* %11), !dbg !10207
  %call3 = call i32 @min_ii(i32 %10, i32 %call2), !dbg !10208
  call void @seq_update_sound_bounds_recursive_rec(%struct.Scene* %6, %struct.Sequence* %7, i32 %call1, i32 %call3), !dbg !10209
  br label %if.end39, !dbg !10210

if.else:                                          ; preds = %for.body
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10211
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 6, !dbg !10211
  %13 = load i32, i32* %type4, align 4, !dbg !10211
  %cmp5 = icmp eq i32 %13, 4, !dbg !10211
  br i1 %cmp5, label %if.then8, label %lor.lhs.false, !dbg !10211

lor.lhs.false:                                    ; preds = %if.else
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10211
  %type6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 6, !dbg !10211
  %15 = load i32, i32* %type6, align 4, !dbg !10211
  %cmp7 = icmp eq i32 %15, 2, !dbg !10211
  br i1 %cmp7, label %if.then8, label %if.end38, !dbg !10213

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10214
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 38, !dbg !10217
  %17 = load i8*, i8** %scene_sound, align 8, !dbg !10217
  %tobool9 = icmp ne i8* %17, null, !dbg !10214
  br i1 %tobool9, label %if.then10, label %if.end37, !dbg !10218

if.then10:                                        ; preds = %if.then8
  call void @llvm.dbg.declare(metadata i32* %startofs, metadata !10219, metadata !DIExpression()), !dbg !10221
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10222
  %startofs11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 9, !dbg !10223
  %19 = load i32, i32* %startofs11, align 8, !dbg !10223
  store i32 %19, i32* %startofs, align 4, !dbg !10221
  call void @llvm.dbg.declare(metadata i32* %endofs, metadata !10224, metadata !DIExpression()), !dbg !10225
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10226
  %endofs12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 10, !dbg !10227
  %21 = load i32, i32* %endofs12, align 4, !dbg !10227
  store i32 %21, i32* %endofs, align 4, !dbg !10225
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10228
  %startofs13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 9, !dbg !10230
  %23 = load i32, i32* %startofs13, align 8, !dbg !10230
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10231
  %start14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 8, !dbg !10232
  %25 = load i32, i32* %start14, align 4, !dbg !10232
  %add = add nsw i32 %23, %25, !dbg !10233
  %26 = load i32, i32* %start.addr, align 4, !dbg !10234
  %cmp15 = icmp slt i32 %add, %26, !dbg !10235
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !10236

if.then16:                                        ; preds = %if.then10
  %27 = load i32, i32* %start.addr, align 4, !dbg !10237
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10238
  %start17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 8, !dbg !10239
  %29 = load i32, i32* %start17, align 4, !dbg !10239
  %sub = sub nsw i32 %27, %29, !dbg !10240
  store i32 %sub, i32* %startofs, align 4, !dbg !10241
  br label %if.end, !dbg !10242

if.end:                                           ; preds = %if.then16, %if.then10
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10243
  %start18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 8, !dbg !10245
  %31 = load i32, i32* %start18, align 4, !dbg !10245
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10246
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 7, !dbg !10247
  %33 = load i32, i32* %len, align 8, !dbg !10247
  %add19 = add nsw i32 %31, %33, !dbg !10248
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10249
  %endofs20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 10, !dbg !10250
  %35 = load i32, i32* %endofs20, align 4, !dbg !10250
  %sub21 = sub nsw i32 %add19, %35, !dbg !10251
  %36 = load i32, i32* %end.addr, align 4, !dbg !10252
  %cmp22 = icmp sgt i32 %sub21, %36, !dbg !10253
  br i1 %cmp22, label %if.then23, label %if.end28, !dbg !10254

if.then23:                                        ; preds = %if.end
  %37 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10255
  %start24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 8, !dbg !10256
  %38 = load i32, i32* %start24, align 4, !dbg !10256
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10257
  %len25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 7, !dbg !10258
  %40 = load i32, i32* %len25, align 8, !dbg !10258
  %add26 = add nsw i32 %38, %40, !dbg !10259
  %41 = load i32, i32* %end.addr, align 4, !dbg !10260
  %sub27 = sub nsw i32 %add26, %41, !dbg !10261
  store i32 %sub27, i32* %endofs, align 4, !dbg !10262
  br label %if.end28, !dbg !10263

if.end28:                                         ; preds = %if.then23, %if.end
  %42 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10264
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10265
  %scene_sound29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 38, !dbg !10266
  %44 = load i8*, i8** %scene_sound29, align 8, !dbg !10266
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10267
  %start30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 8, !dbg !10268
  %46 = load i32, i32* %start30, align 4, !dbg !10268
  %47 = load i32, i32* %startofs, align 4, !dbg !10269
  %add31 = add nsw i32 %46, %47, !dbg !10270
  %48 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10271
  %start32 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 8, !dbg !10272
  %49 = load i32, i32* %start32, align 4, !dbg !10272
  %50 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10273
  %len33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %50, i32 0, i32 7, !dbg !10274
  %51 = load i32, i32* %len33, align 8, !dbg !10274
  %add34 = add nsw i32 %49, %51, !dbg !10275
  %52 = load i32, i32* %endofs, align 4, !dbg !10276
  %sub35 = sub nsw i32 %add34, %52, !dbg !10277
  %53 = load i32, i32* %startofs, align 4, !dbg !10278
  %54 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10279
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 44, !dbg !10280
  %55 = load i32, i32* %anim_startofs, align 8, !dbg !10280
  %add36 = add nsw i32 %53, %55, !dbg !10281
  call void @sound_move_scene_sound(%struct.Scene* %42, i8* %44, i32 %add31, i32 %sub35, i32 %add36), !dbg !10282
  br label %if.end37, !dbg !10283

if.end37:                                         ; preds = %if.end28, %if.then8
  br label %if.end38, !dbg !10284

if.end38:                                         ; preds = %if.end37, %lor.lhs.false
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then
  br label %for.inc, !dbg !10285

for.inc:                                          ; preds = %if.end39
  %56 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10286
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 0, !dbg !10287
  %57 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !10287
  store %struct.Sequence* %57, %struct.Sequence** %seq, align 8, !dbg !10288
  br label %for.cond, !dbg !10289, !llvm.loop !10290

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10292
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @metaseq_start(%struct.Sequence* %metaseq) #0 !dbg !10293 {
entry:
  %metaseq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %metaseq, %struct.Sequence** %metaseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %metaseq.addr, metadata !10294, metadata !DIExpression()), !dbg !10295
  %0 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10296
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !10297
  %1 = load i32, i32* %start, align 4, !dbg !10297
  %2 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10298
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 9, !dbg !10299
  %3 = load i32, i32* %startofs, align 8, !dbg !10299
  %add = add nsw i32 %1, %3, !dbg !10300
  ret i32 %add, !dbg !10301
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @metaseq_end(%struct.Sequence* %metaseq) #0 !dbg !10302 {
entry:
  %metaseq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %metaseq, %struct.Sequence** %metaseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %metaseq.addr, metadata !10303, metadata !DIExpression()), !dbg !10304
  %0 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10305
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !10306
  %1 = load i32, i32* %start, align 4, !dbg !10306
  %2 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10307
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 7, !dbg !10308
  %3 = load i32, i32* %len, align 8, !dbg !10308
  %add = add nsw i32 %1, %3, !dbg !10309
  %4 = load %struct.Sequence*, %struct.Sequence** %metaseq.addr, align 8, !dbg !10310
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 10, !dbg !10311
  %5 = load i32, i32* %endofs, align 4, !dbg !10311
  %sub = sub nsw i32 %add, %5, !dbg !10312
  ret i32 %sub, !dbg !10313
}

declare dso_local i64 @BLI_snprintf(i8*, i64, i8*, ...) #2

; Function Attrs: nounwind
declare dso_local float @fmodf(float, float) #6

declare dso_local void @IMB_anim_set_index_dir(%struct.anim*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @seq_proxy_get_fname(%struct.Sequence* %seq, i32 %cfra, i32 %render_size, i8* %name) #0 !dbg !10314 {
entry:
  %retval = alloca i8, align 1
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca i32, align 4
  %render_size.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %frameno = alloca i32, align 4
  %dir = alloca [1792 x i8], align 16
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !10317, metadata !DIExpression()), !dbg !10318
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !10319, metadata !DIExpression()), !dbg !10320
  store i32 %render_size, i32* %render_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %render_size.addr, metadata !10321, metadata !DIExpression()), !dbg !10322
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10323, metadata !DIExpression()), !dbg !10324
  call void @llvm.dbg.declare(metadata i32* %frameno, metadata !10325, metadata !DIExpression()), !dbg !10326
  call void @llvm.dbg.declare(metadata [1792 x i8]* %dir, metadata !10327, metadata !DIExpression()), !dbg !10328
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10329
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 24, !dbg !10331
  %1 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !10331
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %1, i32 0, i32 8, !dbg !10332
  %2 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !10332
  %tobool = icmp ne %struct.StripProxy* %2, null, !dbg !10329
  br i1 %tobool, label %if.end, label %if.then, !dbg !10333

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10334
  br label %return, !dbg !10334

if.end:                                           ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10336
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 5, !dbg !10338
  %4 = load i32, i32* %flag, align 8, !dbg !10338
  %and = and i32 %4, 2621440, !dbg !10339
  %tobool1 = icmp ne i32 %and, 0, !dbg !10339
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !10340

if.then2:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1792 x i8], [1792 x i8]* %dir, i64 0, i64 0, !dbg !10341
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10343
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 24, !dbg !10344
  %6 = load %struct.Strip*, %struct.Strip** %strip3, align 8, !dbg !10344
  %proxy4 = getelementptr inbounds %struct.Strip, %struct.Strip* %6, i32 0, i32 8, !dbg !10345
  %7 = load %struct.StripProxy*, %struct.StripProxy** %proxy4, align 8, !dbg !10345
  %dir5 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %7, i32 0, i32 0, !dbg !10346
  %arraydecay6 = getelementptr inbounds [768 x i8], [768 x i8]* %dir5, i64 0, i64 0, !dbg !10343
  %call = call i8* @BLI_strncpy(i8* %arraydecay, i8* %arraydecay6, i64 1792), !dbg !10347
  br label %if.end15, !dbg !10348

if.else:                                          ; preds = %if.end
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10349
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 6, !dbg !10351
  %9 = load i32, i32* %type, align 4, !dbg !10351
  %cmp = icmp eq i32 %9, 0, !dbg !10352
  br i1 %cmp, label %if.then7, label %if.else13, !dbg !10353

if.then7:                                         ; preds = %if.else
  %arraydecay8 = getelementptr inbounds [1792 x i8], [1792 x i8]* %dir, i64 0, i64 0, !dbg !10354
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10356
  %strip9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 24, !dbg !10357
  %11 = load %struct.Strip*, %struct.Strip** %strip9, align 8, !dbg !10357
  %dir10 = getelementptr inbounds %struct.Strip, %struct.Strip* %11, i32 0, i32 7, !dbg !10358
  %arraydecay11 = getelementptr inbounds [768 x i8], [768 x i8]* %dir10, i64 0, i64 0, !dbg !10356
  %call12 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %arraydecay8, i64 1792, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i64 0, i64 0), i8* %arraydecay11), !dbg !10359
  br label %if.end14, !dbg !10360

if.else13:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !10361
  br label %return, !dbg !10361

if.end14:                                         ; preds = %if.then7
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then2
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10363
  %flag16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 5, !dbg !10365
  %13 = load i32, i32* %flag16, align 8, !dbg !10365
  %and17 = and i32 %13, 2097152, !dbg !10366
  %tobool18 = icmp ne i32 %and17, 0, !dbg !10366
  br i1 %tobool18, label %if.then19, label %if.end27, !dbg !10367

if.then19:                                        ; preds = %if.end15
  %14 = load i8*, i8** %name.addr, align 8, !dbg !10368
  %arraydecay20 = getelementptr inbounds [1792 x i8], [1792 x i8]* %dir, i64 0, i64 0, !dbg !10370
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10371
  %strip21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 24, !dbg !10372
  %16 = load %struct.Strip*, %struct.Strip** %strip21, align 8, !dbg !10372
  %proxy22 = getelementptr inbounds %struct.Strip, %struct.Strip* %16, i32 0, i32 8, !dbg !10373
  %17 = load %struct.StripProxy*, %struct.StripProxy** %proxy22, align 8, !dbg !10373
  %file = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %17, i32 0, i32 1, !dbg !10374
  %arraydecay23 = getelementptr inbounds [256 x i8], [256 x i8]* %file, i64 0, i64 0, !dbg !10371
  call void @BLI_join_dirfile(i8* %14, i64 1792, i8* %arraydecay20, i8* %arraydecay23), !dbg !10375
  %18 = load i8*, i8** %name.addr, align 8, !dbg !10376
  %19 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !10377
  %name24 = getelementptr inbounds %struct.Main, %struct.Main* %19, i32 0, i32 2, !dbg !10378
  %arraydecay25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name24, i64 0, i64 0, !dbg !10379
  %call26 = call zeroext i8 @BLI_path_abs(i8* %18, i8* %arraydecay25), !dbg !10380
  store i8 1, i8* %retval, align 1, !dbg !10381
  br label %return, !dbg !10381

if.end27:                                         ; preds = %if.end15
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10382
  %type28 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 6, !dbg !10384
  %21 = load i32, i32* %type28, align 4, !dbg !10384
  %cmp29 = icmp eq i32 %21, 0, !dbg !10385
  br i1 %cmp29, label %if.then30, label %if.else36, !dbg !10386

if.then30:                                        ; preds = %if.end27
  %22 = load i8*, i8** %name.addr, align 8, !dbg !10387
  %arraydecay31 = getelementptr inbounds [1792 x i8], [1792 x i8]* %dir, i64 0, i64 0, !dbg !10389
  %23 = load i32, i32* %render_size.addr, align 4, !dbg !10390
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10391
  %25 = load i32, i32* %cfra.addr, align 4, !dbg !10392
  %call32 = call %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence* %24, i32 %25), !dbg !10393
  %name33 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %call32, i32 0, i32 0, !dbg !10394
  %arraydecay34 = getelementptr inbounds [256 x i8], [256 x i8]* %name33, i64 0, i64 0, !dbg !10393
  %call35 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %22, i64 1792, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38, i64 0, i64 0), i8* %arraydecay31, i32 %23, i8* %arraydecay34), !dbg !10395
  store i32 1, i32* %frameno, align 4, !dbg !10396
  br label %if.end41, !dbg !10397

if.else36:                                        ; preds = %if.end27
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10398
  %27 = load i32, i32* %cfra.addr, align 4, !dbg !10400
  %conv = sitofp i32 %27 to float, !dbg !10400
  %call37 = call float @give_stripelem_index(%struct.Sequence* %26, float %conv), !dbg !10401
  %conv38 = fptosi float %call37 to i32, !dbg !10402
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10403
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 44, !dbg !10404
  %29 = load i32, i32* %anim_startofs, align 8, !dbg !10404
  %add = add nsw i32 %conv38, %29, !dbg !10405
  store i32 %add, i32* %frameno, align 4, !dbg !10406
  %30 = load i8*, i8** %name.addr, align 8, !dbg !10407
  %arraydecay39 = getelementptr inbounds [1792 x i8], [1792 x i8]* %dir, i64 0, i64 0, !dbg !10408
  %31 = load i32, i32* %render_size.addr, align 4, !dbg !10409
  %call40 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %30, i64 1792, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39, i64 0, i64 0), i8* %arraydecay39, i32 %31), !dbg !10410
  br label %if.end41

if.end41:                                         ; preds = %if.else36, %if.then30
  %32 = load i8*, i8** %name.addr, align 8, !dbg !10411
  %33 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !10412
  %name42 = getelementptr inbounds %struct.Main, %struct.Main* %33, i32 0, i32 2, !dbg !10413
  %arraydecay43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name42, i64 0, i64 0, !dbg !10414
  %call44 = call zeroext i8 @BLI_path_abs(i8* %32, i8* %arraydecay43), !dbg !10415
  %34 = load i8*, i8** %name.addr, align 8, !dbg !10416
  %35 = load i32, i32* %frameno, align 4, !dbg !10417
  %call45 = call zeroext i8 @BLI_path_frame(i8* %34, i32 %35, i32 0), !dbg !10418
  %36 = load i8*, i8** %name.addr, align 8, !dbg !10419
  %call46 = call i8* @strcat(i8* %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.40, i64 0, i64 0)) #9, !dbg !10420
  store i8 1, i8* %retval, align 1, !dbg !10421
  br label %return, !dbg !10421

return:                                           ; preds = %if.end41, %if.then19, %if.else13, %if.then
  %37 = load i8, i8* %retval, align 1, !dbg !10422
  ret i8 %37, !dbg !10422
}

declare dso_local %struct.ImBuf* @IMB_scalefastImBuf(%struct.ImBuf*, i32, i32) #2

declare dso_local void @BLI_make_existing_file(i8*) #2

declare dso_local signext i16 @IMB_saveiff(%struct.ImBuf*, i8*, i32) #2

declare dso_local void @perror(i8*) #2

declare dso_local zeroext i8 @BLI_path_frame(i8*, i32, i32) #2

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #6

; Function Attrs: noinline nounwind uwtable
define internal void @color_balance_float_float(%struct.StripColorBalance* %cb_, float* %rect_float, float* %mask_rect_float, i32 %width, i32 %height, float %mul) #0 !dbg !10423 {
entry:
  %cb_.addr = alloca %struct.StripColorBalance*, align 8
  %rect_float.addr = alloca float*, align 8
  %mask_rect_float.addr = alloca float*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %mul.addr = alloca float, align 4
  %p = alloca float*, align 8
  %e = alloca float*, align 8
  %m = alloca float*, align 8
  %cb = alloca %struct.StripColorBalance, align 4
  %c = alloca i32, align 4
  %t = alloca float, align 4
  store %struct.StripColorBalance* %cb_, %struct.StripColorBalance** %cb_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb_.addr, metadata !10426, metadata !DIExpression()), !dbg !10427
  store float* %rect_float, float** %rect_float.addr, align 8
  call void @llvm.dbg.declare(metadata float** %rect_float.addr, metadata !10428, metadata !DIExpression()), !dbg !10429
  store float* %mask_rect_float, float** %mask_rect_float.addr, align 8
  call void @llvm.dbg.declare(metadata float** %mask_rect_float.addr, metadata !10430, metadata !DIExpression()), !dbg !10431
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !10432, metadata !DIExpression()), !dbg !10433
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !10434, metadata !DIExpression()), !dbg !10435
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !10436, metadata !DIExpression()), !dbg !10437
  call void @llvm.dbg.declare(metadata float** %p, metadata !10438, metadata !DIExpression()), !dbg !10439
  %0 = load float*, float** %rect_float.addr, align 8, !dbg !10440
  store float* %0, float** %p, align 8, !dbg !10439
  call void @llvm.dbg.declare(metadata float** %e, metadata !10441, metadata !DIExpression()), !dbg !10442
  %1 = load float*, float** %rect_float.addr, align 8, !dbg !10443
  %2 = load i32, i32* %width.addr, align 4, !dbg !10444
  %mul1 = mul nsw i32 %2, 4, !dbg !10445
  %3 = load i32, i32* %height.addr, align 4, !dbg !10446
  %mul2 = mul nsw i32 %mul1, %3, !dbg !10447
  %idx.ext = sext i32 %mul2 to i64, !dbg !10448
  %add.ptr = getelementptr inbounds float, float* %1, i64 %idx.ext, !dbg !10448
  store float* %add.ptr, float** %e, align 8, !dbg !10442
  call void @llvm.dbg.declare(metadata float** %m, metadata !10449, metadata !DIExpression()), !dbg !10450
  %4 = load float*, float** %mask_rect_float.addr, align 8, !dbg !10451
  store float* %4, float** %m, align 8, !dbg !10450
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance* %cb, metadata !10452, metadata !DIExpression()), !dbg !10453
  %5 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb_.addr, align 8, !dbg !10454
  call void @calc_cb(%struct.StripColorBalance* sret %cb, %struct.StripColorBalance* %5), !dbg !10455
  br label %while.cond, !dbg !10456

while.cond:                                       ; preds = %if.end26, %entry
  %6 = load float*, float** %p, align 8, !dbg !10457
  %7 = load float*, float** %e, align 8, !dbg !10458
  %cmp = icmp ult float* %6, %7, !dbg !10459
  br i1 %cmp, label %while.body, label %while.end, !dbg !10456

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %c, metadata !10460, metadata !DIExpression()), !dbg !10462
  store i32 0, i32* %c, align 4, !dbg !10463
  br label %for.cond, !dbg !10465

for.cond:                                         ; preds = %for.inc, %while.body
  %8 = load i32, i32* %c, align 4, !dbg !10466
  %cmp3 = icmp slt i32 %8, 3, !dbg !10468
  br i1 %cmp3, label %for.body, label %for.end, !dbg !10469

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %t, metadata !10470, metadata !DIExpression()), !dbg !10472
  %9 = load float*, float** %p, align 8, !dbg !10473
  %10 = load i32, i32* %c, align 4, !dbg !10474
  %idxprom = sext i32 %10 to i64, !dbg !10473
  %arrayidx = getelementptr inbounds float, float* %9, i64 %idxprom, !dbg !10473
  %11 = load float, float* %arrayidx, align 4, !dbg !10473
  %lift = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 0, !dbg !10475
  %12 = load i32, i32* %c, align 4, !dbg !10476
  %idxprom4 = sext i32 %12 to i64, !dbg !10477
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %lift, i64 0, i64 %idxprom4, !dbg !10477
  %13 = load float, float* %arrayidx5, align 4, !dbg !10477
  %gain = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 2, !dbg !10478
  %14 = load i32, i32* %c, align 4, !dbg !10479
  %idxprom6 = sext i32 %14 to i64, !dbg !10480
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %gain, i64 0, i64 %idxprom6, !dbg !10480
  %15 = load float, float* %arrayidx7, align 4, !dbg !10480
  %gamma = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 1, !dbg !10481
  %16 = load i32, i32* %c, align 4, !dbg !10482
  %idxprom8 = sext i32 %16 to i64, !dbg !10483
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %gamma, i64 0, i64 %idxprom8, !dbg !10483
  %17 = load float, float* %arrayidx9, align 4, !dbg !10483
  %18 = load float, float* %mul.addr, align 4, !dbg !10484
  %call = call float @color_balance_fl(float %11, float %13, float %15, float %17, float %18), !dbg !10485
  store float %call, float* %t, align 4, !dbg !10472
  %19 = load float*, float** %m, align 8, !dbg !10486
  %tobool = icmp ne float* %19, null, !dbg !10486
  br i1 %tobool, label %if.then, label %if.else, !dbg !10488

if.then:                                          ; preds = %for.body
  %20 = load float*, float** %p, align 8, !dbg !10489
  %21 = load i32, i32* %c, align 4, !dbg !10490
  %idxprom10 = sext i32 %21 to i64, !dbg !10489
  %arrayidx11 = getelementptr inbounds float, float* %20, i64 %idxprom10, !dbg !10489
  %22 = load float, float* %arrayidx11, align 4, !dbg !10489
  %23 = load float*, float** %m, align 8, !dbg !10491
  %24 = load i32, i32* %c, align 4, !dbg !10492
  %idxprom12 = sext i32 %24 to i64, !dbg !10491
  %arrayidx13 = getelementptr inbounds float, float* %23, i64 %idxprom12, !dbg !10491
  %25 = load float, float* %arrayidx13, align 4, !dbg !10491
  %sub = fsub float 1.000000e+00, %25, !dbg !10493
  %mul14 = fmul float %22, %sub, !dbg !10494
  %26 = load float, float* %t, align 4, !dbg !10495
  %27 = load float*, float** %m, align 8, !dbg !10496
  %28 = load i32, i32* %c, align 4, !dbg !10497
  %idxprom15 = sext i32 %28 to i64, !dbg !10496
  %arrayidx16 = getelementptr inbounds float, float* %27, i64 %idxprom15, !dbg !10496
  %29 = load float, float* %arrayidx16, align 4, !dbg !10496
  %mul17 = fmul float %26, %29, !dbg !10498
  %add = fadd float %mul14, %mul17, !dbg !10499
  %30 = load float*, float** %p, align 8, !dbg !10500
  %31 = load i32, i32* %c, align 4, !dbg !10501
  %idxprom18 = sext i32 %31 to i64, !dbg !10500
  %arrayidx19 = getelementptr inbounds float, float* %30, i64 %idxprom18, !dbg !10500
  store float %add, float* %arrayidx19, align 4, !dbg !10502
  br label %if.end, !dbg !10500

if.else:                                          ; preds = %for.body
  %32 = load float, float* %t, align 4, !dbg !10503
  %33 = load float*, float** %p, align 8, !dbg !10504
  %34 = load i32, i32* %c, align 4, !dbg !10505
  %idxprom20 = sext i32 %34 to i64, !dbg !10504
  %arrayidx21 = getelementptr inbounds float, float* %33, i64 %idxprom20, !dbg !10504
  store float %32, float* %arrayidx21, align 4, !dbg !10506
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !10507

for.inc:                                          ; preds = %if.end
  %35 = load i32, i32* %c, align 4, !dbg !10508
  %inc = add nsw i32 %35, 1, !dbg !10508
  store i32 %inc, i32* %c, align 4, !dbg !10508
  br label %for.cond, !dbg !10509, !llvm.loop !10510

for.end:                                          ; preds = %for.cond
  %36 = load float*, float** %p, align 8, !dbg !10512
  %add.ptr22 = getelementptr inbounds float, float* %36, i64 4, !dbg !10512
  store float* %add.ptr22, float** %p, align 8, !dbg !10512
  %37 = load float*, float** %m, align 8, !dbg !10513
  %tobool23 = icmp ne float* %37, null, !dbg !10513
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !10515

if.then24:                                        ; preds = %for.end
  %38 = load float*, float** %m, align 8, !dbg !10516
  %add.ptr25 = getelementptr inbounds float, float* %38, i64 4, !dbg !10516
  store float* %add.ptr25, float** %m, align 8, !dbg !10516
  br label %if.end26, !dbg !10517

if.end26:                                         ; preds = %if.then24, %for.end
  br label %while.cond, !dbg !10456, !llvm.loop !10518

while.end:                                        ; preds = %while.cond
  ret void, !dbg !10520
}

; Function Attrs: noinline nounwind uwtable
define internal void @color_balance_byte_float(%struct.StripColorBalance* %cb_, i8* %rect, float* %rect_float, i8* %mask_rect, i32 %width, i32 %height, float %mul) #0 !dbg !10521 {
entry:
  %cb_.addr = alloca %struct.StripColorBalance*, align 8
  %rect.addr = alloca i8*, align 8
  %rect_float.addr = alloca float*, align 8
  %mask_rect.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %mul.addr = alloca float, align 4
  %cb_tab = alloca [4 x [256 x float]], align 16
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %e = alloca i8*, align 8
  %m = alloca i8*, align 8
  %o = alloca float*, align 8
  %cb = alloca %struct.StripColorBalance, align 4
  %tmp = alloca %struct.StripColorBalance, align 4
  %t = alloca [3 x float], align 4
  store %struct.StripColorBalance* %cb_, %struct.StripColorBalance** %cb_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb_.addr, metadata !10524, metadata !DIExpression()), !dbg !10525
  store i8* %rect, i8** %rect.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rect.addr, metadata !10526, metadata !DIExpression()), !dbg !10527
  store float* %rect_float, float** %rect_float.addr, align 8
  call void @llvm.dbg.declare(metadata float** %rect_float.addr, metadata !10528, metadata !DIExpression()), !dbg !10529
  store i8* %mask_rect, i8** %mask_rect.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mask_rect.addr, metadata !10530, metadata !DIExpression()), !dbg !10531
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !10532, metadata !DIExpression()), !dbg !10533
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !10534, metadata !DIExpression()), !dbg !10535
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !10536, metadata !DIExpression()), !dbg !10537
  call void @llvm.dbg.declare(metadata [4 x [256 x float]]* %cb_tab, metadata !10538, metadata !DIExpression()), !dbg !10541
  call void @llvm.dbg.declare(metadata i32* %c, metadata !10542, metadata !DIExpression()), !dbg !10543
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10544, metadata !DIExpression()), !dbg !10545
  call void @llvm.dbg.declare(metadata i8** %p, metadata !10546, metadata !DIExpression()), !dbg !10547
  %0 = load i8*, i8** %rect.addr, align 8, !dbg !10548
  store i8* %0, i8** %p, align 8, !dbg !10547
  call void @llvm.dbg.declare(metadata i8** %e, metadata !10549, metadata !DIExpression()), !dbg !10550
  %1 = load i8*, i8** %p, align 8, !dbg !10551
  %2 = load i32, i32* %width.addr, align 4, !dbg !10552
  %mul1 = mul nsw i32 %2, 4, !dbg !10553
  %3 = load i32, i32* %height.addr, align 4, !dbg !10554
  %mul2 = mul nsw i32 %mul1, %3, !dbg !10555
  %idx.ext = sext i32 %mul2 to i64, !dbg !10556
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !10556
  store i8* %add.ptr, i8** %e, align 8, !dbg !10550
  call void @llvm.dbg.declare(metadata i8** %m, metadata !10557, metadata !DIExpression()), !dbg !10558
  %4 = load i8*, i8** %mask_rect.addr, align 8, !dbg !10559
  store i8* %4, i8** %m, align 8, !dbg !10558
  call void @llvm.dbg.declare(metadata float** %o, metadata !10560, metadata !DIExpression()), !dbg !10561
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance* %cb, metadata !10562, metadata !DIExpression()), !dbg !10563
  %5 = load float*, float** %rect_float.addr, align 8, !dbg !10564
  store float* %5, float** %o, align 8, !dbg !10565
  %6 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb_.addr, align 8, !dbg !10566
  call void @calc_cb(%struct.StripColorBalance* sret %tmp, %struct.StripColorBalance* %6), !dbg !10567
  %7 = bitcast %struct.StripColorBalance* %cb to i8*, !dbg !10567
  %8 = bitcast %struct.StripColorBalance* %tmp to i8*, !dbg !10567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 44, i1 false), !dbg !10567
  store i32 0, i32* %c, align 4, !dbg !10568
  br label %for.cond, !dbg !10570

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %c, align 4, !dbg !10571
  %cmp = icmp slt i32 %9, 3, !dbg !10573
  br i1 %cmp, label %for.body, label %for.end, !dbg !10574

for.body:                                         ; preds = %for.cond
  %lift = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 0, !dbg !10575
  %10 = load i32, i32* %c, align 4, !dbg !10577
  %idxprom = sext i32 %10 to i64, !dbg !10578
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %lift, i64 0, i64 %idxprom, !dbg !10578
  %11 = load float, float* %arrayidx, align 4, !dbg !10578
  %gain = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 2, !dbg !10579
  %12 = load i32, i32* %c, align 4, !dbg !10580
  %idxprom3 = sext i32 %12 to i64, !dbg !10581
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %gain, i64 0, i64 %idxprom3, !dbg !10581
  %13 = load float, float* %arrayidx4, align 4, !dbg !10581
  %gamma = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 1, !dbg !10582
  %14 = load i32, i32* %c, align 4, !dbg !10583
  %idxprom5 = sext i32 %14 to i64, !dbg !10584
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %gamma, i64 0, i64 %idxprom5, !dbg !10584
  %15 = load float, float* %arrayidx6, align 4, !dbg !10584
  %16 = load i32, i32* %c, align 4, !dbg !10585
  %idxprom7 = sext i32 %16 to i64, !dbg !10586
  %arrayidx8 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 %idxprom7, !dbg !10586
  %arraydecay = getelementptr inbounds [256 x float], [256 x float]* %arrayidx8, i64 0, i64 0, !dbg !10586
  %17 = load float, float* %mul.addr, align 4, !dbg !10587
  call void @make_cb_table_float(float %11, float %13, float %15, float* %arraydecay, float %17), !dbg !10588
  br label %for.inc, !dbg !10589

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %c, align 4, !dbg !10590
  %inc = add nsw i32 %18, 1, !dbg !10590
  store i32 %inc, i32* %c, align 4, !dbg !10590
  br label %for.cond, !dbg !10591, !llvm.loop !10592

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !10594
  br label %for.cond9, !dbg !10596

for.cond9:                                        ; preds = %for.inc16, %for.end
  %19 = load i32, i32* %i, align 4, !dbg !10597
  %cmp10 = icmp slt i32 %19, 256, !dbg !10599
  br i1 %cmp10, label %for.body11, label %for.end18, !dbg !10600

for.body11:                                       ; preds = %for.cond9
  %20 = load i32, i32* %i, align 4, !dbg !10601
  %conv = sitofp i32 %20 to float, !dbg !10603
  %mul12 = fmul float %conv, 0x3F70101020000000, !dbg !10604
  %arrayidx13 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 3, !dbg !10605
  %21 = load i32, i32* %i, align 4, !dbg !10606
  %idxprom14 = sext i32 %21 to i64, !dbg !10605
  %arrayidx15 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !10605
  store float %mul12, float* %arrayidx15, align 4, !dbg !10607
  br label %for.inc16, !dbg !10608

for.inc16:                                        ; preds = %for.body11
  %22 = load i32, i32* %i, align 4, !dbg !10609
  %inc17 = add nsw i32 %22, 1, !dbg !10609
  store i32 %inc17, i32* %i, align 4, !dbg !10609
  br label %for.cond9, !dbg !10610, !llvm.loop !10611

for.end18:                                        ; preds = %for.cond9
  br label %while.cond, !dbg !10613

while.cond:                                       ; preds = %if.end, %for.end18
  %23 = load i8*, i8** %p, align 8, !dbg !10614
  %24 = load i8*, i8** %e, align 8, !dbg !10615
  %cmp19 = icmp ult i8* %23, %24, !dbg !10616
  br i1 %cmp19, label %while.body, label %while.end, !dbg !10613

while.body:                                       ; preds = %while.cond
  %25 = load i8*, i8** %m, align 8, !dbg !10617
  %tobool = icmp ne i8* %25, null, !dbg !10617
  br i1 %tobool, label %if.then, label %if.else, !dbg !10620

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata [3 x float]* %t, metadata !10621, metadata !DIExpression()), !dbg !10623
  %arrayinit.begin = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 0, !dbg !10624
  %26 = load i8*, i8** %m, align 8, !dbg !10625
  %arrayidx21 = getelementptr inbounds i8, i8* %26, i64 0, !dbg !10625
  %27 = load i8, i8* %arrayidx21, align 1, !dbg !10625
  %conv22 = zext i8 %27 to i32, !dbg !10625
  %conv23 = sitofp i32 %conv22 to float, !dbg !10625
  %div = fdiv float %conv23, 2.550000e+02, !dbg !10626
  store float %div, float* %arrayinit.begin, align 4, !dbg !10624
  %arrayinit.element = getelementptr inbounds float, float* %arrayinit.begin, i64 1, !dbg !10624
  %28 = load i8*, i8** %m, align 8, !dbg !10627
  %arrayidx24 = getelementptr inbounds i8, i8* %28, i64 1, !dbg !10627
  %29 = load i8, i8* %arrayidx24, align 1, !dbg !10627
  %conv25 = zext i8 %29 to i32, !dbg !10627
  %conv26 = sitofp i32 %conv25 to float, !dbg !10627
  %div27 = fdiv float %conv26, 2.550000e+02, !dbg !10628
  store float %div27, float* %arrayinit.element, align 4, !dbg !10624
  %arrayinit.element28 = getelementptr inbounds float, float* %arrayinit.element, i64 1, !dbg !10624
  %30 = load i8*, i8** %m, align 8, !dbg !10629
  %arrayidx29 = getelementptr inbounds i8, i8* %30, i64 2, !dbg !10629
  %31 = load i8, i8* %arrayidx29, align 1, !dbg !10629
  %conv30 = zext i8 %31 to i32, !dbg !10629
  %conv31 = sitofp i32 %conv30 to float, !dbg !10629
  %div32 = fdiv float %conv31, 2.550000e+02, !dbg !10630
  store float %div32, float* %arrayinit.element28, align 4, !dbg !10624
  %32 = load i8*, i8** %p, align 8, !dbg !10631
  %arrayidx33 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !10631
  %33 = load i8, i8* %arrayidx33, align 1, !dbg !10631
  %conv34 = zext i8 %33 to i32, !dbg !10631
  %conv35 = sitofp i32 %conv34 to float, !dbg !10631
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 0, !dbg !10632
  %34 = load float, float* %arrayidx36, align 4, !dbg !10632
  %sub = fsub float 1.000000e+00, %34, !dbg !10633
  %mul37 = fmul float %conv35, %sub, !dbg !10634
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 0, !dbg !10635
  %35 = load float, float* %arrayidx38, align 4, !dbg !10635
  %arrayidx39 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 0, !dbg !10636
  %36 = load i8*, i8** %p, align 8, !dbg !10637
  %arrayidx40 = getelementptr inbounds i8, i8* %36, i64 0, !dbg !10637
  %37 = load i8, i8* %arrayidx40, align 1, !dbg !10637
  %idxprom41 = zext i8 %37 to i64, !dbg !10636
  %arrayidx42 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx39, i64 0, i64 %idxprom41, !dbg !10636
  %38 = load float, float* %arrayidx42, align 4, !dbg !10636
  %mul43 = fmul float %35, %38, !dbg !10638
  %add = fadd float %mul37, %mul43, !dbg !10639
  %conv44 = fptoui float %add to i8, !dbg !10631
  %39 = load i8*, i8** %p, align 8, !dbg !10640
  %arrayidx45 = getelementptr inbounds i8, i8* %39, i64 0, !dbg !10640
  store i8 %conv44, i8* %arrayidx45, align 1, !dbg !10641
  %40 = load i8*, i8** %p, align 8, !dbg !10642
  %arrayidx46 = getelementptr inbounds i8, i8* %40, i64 1, !dbg !10642
  %41 = load i8, i8* %arrayidx46, align 1, !dbg !10642
  %conv47 = zext i8 %41 to i32, !dbg !10642
  %conv48 = sitofp i32 %conv47 to float, !dbg !10642
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 1, !dbg !10643
  %42 = load float, float* %arrayidx49, align 4, !dbg !10643
  %sub50 = fsub float 1.000000e+00, %42, !dbg !10644
  %mul51 = fmul float %conv48, %sub50, !dbg !10645
  %arrayidx52 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 1, !dbg !10646
  %43 = load float, float* %arrayidx52, align 4, !dbg !10646
  %arrayidx53 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 1, !dbg !10647
  %44 = load i8*, i8** %p, align 8, !dbg !10648
  %arrayidx54 = getelementptr inbounds i8, i8* %44, i64 1, !dbg !10648
  %45 = load i8, i8* %arrayidx54, align 1, !dbg !10648
  %idxprom55 = zext i8 %45 to i64, !dbg !10647
  %arrayidx56 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx53, i64 0, i64 %idxprom55, !dbg !10647
  %46 = load float, float* %arrayidx56, align 4, !dbg !10647
  %mul57 = fmul float %43, %46, !dbg !10649
  %add58 = fadd float %mul51, %mul57, !dbg !10650
  %conv59 = fptoui float %add58 to i8, !dbg !10642
  %47 = load i8*, i8** %p, align 8, !dbg !10651
  %arrayidx60 = getelementptr inbounds i8, i8* %47, i64 1, !dbg !10651
  store i8 %conv59, i8* %arrayidx60, align 1, !dbg !10652
  %48 = load i8*, i8** %p, align 8, !dbg !10653
  %arrayidx61 = getelementptr inbounds i8, i8* %48, i64 2, !dbg !10653
  %49 = load i8, i8* %arrayidx61, align 1, !dbg !10653
  %conv62 = zext i8 %49 to i32, !dbg !10653
  %conv63 = sitofp i32 %conv62 to float, !dbg !10653
  %arrayidx64 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 2, !dbg !10654
  %50 = load float, float* %arrayidx64, align 4, !dbg !10654
  %sub65 = fsub float 1.000000e+00, %50, !dbg !10655
  %mul66 = fmul float %conv63, %sub65, !dbg !10656
  %arrayidx67 = getelementptr inbounds [3 x float], [3 x float]* %t, i64 0, i64 2, !dbg !10657
  %51 = load float, float* %arrayidx67, align 4, !dbg !10657
  %arrayidx68 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 2, !dbg !10658
  %52 = load i8*, i8** %p, align 8, !dbg !10659
  %arrayidx69 = getelementptr inbounds i8, i8* %52, i64 2, !dbg !10659
  %53 = load i8, i8* %arrayidx69, align 1, !dbg !10659
  %idxprom70 = zext i8 %53 to i64, !dbg !10658
  %arrayidx71 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx68, i64 0, i64 %idxprom70, !dbg !10658
  %54 = load float, float* %arrayidx71, align 4, !dbg !10658
  %mul72 = fmul float %51, %54, !dbg !10660
  %add73 = fadd float %mul66, %mul72, !dbg !10661
  %conv74 = fptoui float %add73 to i8, !dbg !10653
  %55 = load i8*, i8** %p, align 8, !dbg !10662
  %arrayidx75 = getelementptr inbounds i8, i8* %55, i64 2, !dbg !10662
  store i8 %conv74, i8* %arrayidx75, align 1, !dbg !10663
  %56 = load i8*, i8** %m, align 8, !dbg !10664
  %add.ptr76 = getelementptr inbounds i8, i8* %56, i64 4, !dbg !10664
  store i8* %add.ptr76, i8** %m, align 8, !dbg !10664
  br label %if.end, !dbg !10665

if.else:                                          ; preds = %while.body
  %arrayidx77 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 0, !dbg !10666
  %57 = load i8*, i8** %p, align 8, !dbg !10668
  %arrayidx78 = getelementptr inbounds i8, i8* %57, i64 0, !dbg !10668
  %58 = load i8, i8* %arrayidx78, align 1, !dbg !10668
  %idxprom79 = zext i8 %58 to i64, !dbg !10666
  %arrayidx80 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx77, i64 0, i64 %idxprom79, !dbg !10666
  %59 = load float, float* %arrayidx80, align 4, !dbg !10666
  %60 = load float*, float** %o, align 8, !dbg !10669
  %arrayidx81 = getelementptr inbounds float, float* %60, i64 0, !dbg !10669
  store float %59, float* %arrayidx81, align 4, !dbg !10670
  %arrayidx82 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 1, !dbg !10671
  %61 = load i8*, i8** %p, align 8, !dbg !10672
  %arrayidx83 = getelementptr inbounds i8, i8* %61, i64 1, !dbg !10672
  %62 = load i8, i8* %arrayidx83, align 1, !dbg !10672
  %idxprom84 = zext i8 %62 to i64, !dbg !10671
  %arrayidx85 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx82, i64 0, i64 %idxprom84, !dbg !10671
  %63 = load float, float* %arrayidx85, align 4, !dbg !10671
  %64 = load float*, float** %o, align 8, !dbg !10673
  %arrayidx86 = getelementptr inbounds float, float* %64, i64 1, !dbg !10673
  store float %63, float* %arrayidx86, align 4, !dbg !10674
  %arrayidx87 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 2, !dbg !10675
  %65 = load i8*, i8** %p, align 8, !dbg !10676
  %arrayidx88 = getelementptr inbounds i8, i8* %65, i64 2, !dbg !10676
  %66 = load i8, i8* %arrayidx88, align 1, !dbg !10676
  %idxprom89 = zext i8 %66 to i64, !dbg !10675
  %arrayidx90 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx87, i64 0, i64 %idxprom89, !dbg !10675
  %67 = load float, float* %arrayidx90, align 4, !dbg !10675
  %68 = load float*, float** %o, align 8, !dbg !10677
  %arrayidx91 = getelementptr inbounds float, float* %68, i64 2, !dbg !10677
  store float %67, float* %arrayidx91, align 4, !dbg !10678
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arrayidx92 = getelementptr inbounds [4 x [256 x float]], [4 x [256 x float]]* %cb_tab, i64 0, i64 3, !dbg !10679
  %69 = load i8*, i8** %p, align 8, !dbg !10680
  %arrayidx93 = getelementptr inbounds i8, i8* %69, i64 3, !dbg !10680
  %70 = load i8, i8* %arrayidx93, align 1, !dbg !10680
  %idxprom94 = zext i8 %70 to i64, !dbg !10679
  %arrayidx95 = getelementptr inbounds [256 x float], [256 x float]* %arrayidx92, i64 0, i64 %idxprom94, !dbg !10679
  %71 = load float, float* %arrayidx95, align 4, !dbg !10679
  %72 = load float*, float** %o, align 8, !dbg !10681
  %arrayidx96 = getelementptr inbounds float, float* %72, i64 3, !dbg !10681
  store float %71, float* %arrayidx96, align 4, !dbg !10682
  %73 = load i8*, i8** %p, align 8, !dbg !10683
  %add.ptr97 = getelementptr inbounds i8, i8* %73, i64 4, !dbg !10683
  store i8* %add.ptr97, i8** %p, align 8, !dbg !10683
  %74 = load float*, float** %o, align 8, !dbg !10684
  %add.ptr98 = getelementptr inbounds float, float* %74, i64 4, !dbg !10684
  store float* %add.ptr98, float** %o, align 8, !dbg !10684
  br label %while.cond, !dbg !10613, !llvm.loop !10685

while.end:                                        ; preds = %while.cond
  ret void, !dbg !10687
}

; Function Attrs: noinline nounwind uwtable
define internal void @color_balance_byte_byte(%struct.StripColorBalance* %cb_, i8* %rect, i8* %mask_rect, i32 %width, i32 %height, float %mul) #0 !dbg !10688 {
entry:
  %cb_.addr = alloca %struct.StripColorBalance*, align 8
  %rect.addr = alloca i8*, align 8
  %mask_rect.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %mul.addr = alloca float, align 4
  %cp = alloca i8*, align 8
  %e = alloca i8*, align 8
  %m = alloca i8*, align 8
  %cb = alloca %struct.StripColorBalance, align 4
  %p = alloca [4 x float], align 16
  %c = alloca i32, align 4
  %t = alloca float, align 4
  %m_normal = alloca float, align 4
  store %struct.StripColorBalance* %cb_, %struct.StripColorBalance** %cb_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb_.addr, metadata !10691, metadata !DIExpression()), !dbg !10692
  store i8* %rect, i8** %rect.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %rect.addr, metadata !10693, metadata !DIExpression()), !dbg !10694
  store i8* %mask_rect, i8** %mask_rect.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mask_rect.addr, metadata !10695, metadata !DIExpression()), !dbg !10696
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !10697, metadata !DIExpression()), !dbg !10698
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !10699, metadata !DIExpression()), !dbg !10700
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !10701, metadata !DIExpression()), !dbg !10702
  call void @llvm.dbg.declare(metadata i8** %cp, metadata !10703, metadata !DIExpression()), !dbg !10704
  %0 = load i8*, i8** %rect.addr, align 8, !dbg !10705
  store i8* %0, i8** %cp, align 8, !dbg !10704
  call void @llvm.dbg.declare(metadata i8** %e, metadata !10706, metadata !DIExpression()), !dbg !10707
  %1 = load i8*, i8** %cp, align 8, !dbg !10708
  %2 = load i32, i32* %width.addr, align 4, !dbg !10709
  %mul1 = mul nsw i32 %2, 4, !dbg !10710
  %3 = load i32, i32* %height.addr, align 4, !dbg !10711
  %mul2 = mul nsw i32 %mul1, %3, !dbg !10712
  %idx.ext = sext i32 %mul2 to i64, !dbg !10713
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !10713
  store i8* %add.ptr, i8** %e, align 8, !dbg !10707
  call void @llvm.dbg.declare(metadata i8** %m, metadata !10714, metadata !DIExpression()), !dbg !10715
  %4 = load i8*, i8** %mask_rect.addr, align 8, !dbg !10716
  store i8* %4, i8** %m, align 8, !dbg !10715
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance* %cb, metadata !10717, metadata !DIExpression()), !dbg !10718
  %5 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb_.addr, align 8, !dbg !10719
  call void @calc_cb(%struct.StripColorBalance* sret %cb, %struct.StripColorBalance* %5), !dbg !10720
  br label %while.cond, !dbg !10721

while.cond:                                       ; preds = %if.end25, %entry
  %6 = load i8*, i8** %cp, align 8, !dbg !10722
  %7 = load i8*, i8** %e, align 8, !dbg !10723
  %cmp = icmp ult i8* %6, %7, !dbg !10724
  br i1 %cmp, label %while.body, label %while.end, !dbg !10721

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata [4 x float]* %p, metadata !10725, metadata !DIExpression()), !dbg !10727
  call void @llvm.dbg.declare(metadata i32* %c, metadata !10728, metadata !DIExpression()), !dbg !10729
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 0, !dbg !10730
  %8 = load i8*, i8** %cp, align 8, !dbg !10731
  call void @straight_uchar_to_premul_float(float* %arraydecay, i8* %8), !dbg !10732
  store i32 0, i32* %c, align 4, !dbg !10733
  br label %for.cond, !dbg !10735

for.cond:                                         ; preds = %for.inc, %while.body
  %9 = load i32, i32* %c, align 4, !dbg !10736
  %cmp3 = icmp slt i32 %9, 3, !dbg !10738
  br i1 %cmp3, label %for.body, label %for.end, !dbg !10739

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %t, metadata !10740, metadata !DIExpression()), !dbg !10742
  %10 = load i32, i32* %c, align 4, !dbg !10743
  %idxprom = sext i32 %10 to i64, !dbg !10744
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 %idxprom, !dbg !10744
  %11 = load float, float* %arrayidx, align 4, !dbg !10744
  %lift = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 0, !dbg !10745
  %12 = load i32, i32* %c, align 4, !dbg !10746
  %idxprom4 = sext i32 %12 to i64, !dbg !10747
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %lift, i64 0, i64 %idxprom4, !dbg !10747
  %13 = load float, float* %arrayidx5, align 4, !dbg !10747
  %gain = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 2, !dbg !10748
  %14 = load i32, i32* %c, align 4, !dbg !10749
  %idxprom6 = sext i32 %14 to i64, !dbg !10750
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %gain, i64 0, i64 %idxprom6, !dbg !10750
  %15 = load float, float* %arrayidx7, align 4, !dbg !10750
  %gamma = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %cb, i32 0, i32 1, !dbg !10751
  %16 = load i32, i32* %c, align 4, !dbg !10752
  %idxprom8 = sext i32 %16 to i64, !dbg !10753
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %gamma, i64 0, i64 %idxprom8, !dbg !10753
  %17 = load float, float* %arrayidx9, align 4, !dbg !10753
  %18 = load float, float* %mul.addr, align 4, !dbg !10754
  %call = call float @color_balance_fl(float %11, float %13, float %15, float %17, float %18), !dbg !10755
  store float %call, float* %t, align 4, !dbg !10742
  %19 = load i8*, i8** %m, align 8, !dbg !10756
  %tobool = icmp ne i8* %19, null, !dbg !10756
  br i1 %tobool, label %if.then, label %if.else, !dbg !10758

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata float* %m_normal, metadata !10759, metadata !DIExpression()), !dbg !10761
  %20 = load i8*, i8** %m, align 8, !dbg !10762
  %21 = load i32, i32* %c, align 4, !dbg !10763
  %idxprom10 = sext i32 %21 to i64, !dbg !10762
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i64 %idxprom10, !dbg !10762
  %22 = load i8, i8* %arrayidx11, align 1, !dbg !10762
  %conv = uitofp i8 %22 to float, !dbg !10764
  %div = fdiv float %conv, 2.550000e+02, !dbg !10765
  store float %div, float* %m_normal, align 4, !dbg !10761
  %23 = load i32, i32* %c, align 4, !dbg !10766
  %idxprom12 = sext i32 %23 to i64, !dbg !10767
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 %idxprom12, !dbg !10767
  %24 = load float, float* %arrayidx13, align 4, !dbg !10767
  %25 = load float, float* %m_normal, align 4, !dbg !10768
  %sub = fsub float 1.000000e+00, %25, !dbg !10769
  %mul14 = fmul float %24, %sub, !dbg !10770
  %26 = load float, float* %t, align 4, !dbg !10771
  %27 = load float, float* %m_normal, align 4, !dbg !10772
  %mul15 = fmul float %26, %27, !dbg !10773
  %add = fadd float %mul14, %mul15, !dbg !10774
  %28 = load i32, i32* %c, align 4, !dbg !10775
  %idxprom16 = sext i32 %28 to i64, !dbg !10776
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 %idxprom16, !dbg !10776
  store float %add, float* %arrayidx17, align 4, !dbg !10777
  br label %if.end, !dbg !10778

if.else:                                          ; preds = %for.body
  %29 = load float, float* %t, align 4, !dbg !10779
  %30 = load i32, i32* %c, align 4, !dbg !10780
  %idxprom18 = sext i32 %30 to i64, !dbg !10781
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 %idxprom18, !dbg !10781
  store float %29, float* %arrayidx19, align 4, !dbg !10782
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !10783

for.inc:                                          ; preds = %if.end
  %31 = load i32, i32* %c, align 4, !dbg !10784
  %inc = add nsw i32 %31, 1, !dbg !10784
  store i32 %inc, i32* %c, align 4, !dbg !10784
  br label %for.cond, !dbg !10785, !llvm.loop !10786

for.end:                                          ; preds = %for.cond
  %32 = load i8*, i8** %cp, align 8, !dbg !10788
  %arraydecay20 = getelementptr inbounds [4 x float], [4 x float]* %p, i64 0, i64 0, !dbg !10789
  call void @premul_float_to_straight_uchar(i8* %32, float* %arraydecay20), !dbg !10790
  %33 = load i8*, i8** %cp, align 8, !dbg !10791
  %add.ptr21 = getelementptr inbounds i8, i8* %33, i64 4, !dbg !10791
  store i8* %add.ptr21, i8** %cp, align 8, !dbg !10791
  %34 = load i8*, i8** %m, align 8, !dbg !10792
  %tobool22 = icmp ne i8* %34, null, !dbg !10792
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !10794

if.then23:                                        ; preds = %for.end
  %35 = load i8*, i8** %m, align 8, !dbg !10795
  %add.ptr24 = getelementptr inbounds i8, i8* %35, i64 4, !dbg !10795
  store i8* %add.ptr24, i8** %m, align 8, !dbg !10795
  br label %if.end25, !dbg !10796

if.end25:                                         ; preds = %if.then23, %for.end
  br label %while.cond, !dbg !10721, !llvm.loop !10797

while.end:                                        ; preds = %while.cond
  ret void, !dbg !10799
}

; Function Attrs: noinline nounwind uwtable
define internal void @calc_cb(%struct.StripColorBalance* noalias sret %agg.result, %struct.StripColorBalance* %cb_) #0 !dbg !10800 {
entry:
  %cb_.addr = alloca %struct.StripColorBalance*, align 8
  %c = alloca i32, align 4
  store %struct.StripColorBalance* %cb_, %struct.StripColorBalance** %cb_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance** %cb_.addr, metadata !10803, metadata !DIExpression()), !dbg !10804
  call void @llvm.dbg.declare(metadata %struct.StripColorBalance* %agg.result, metadata !10805, metadata !DIExpression()), !dbg !10806
  %0 = load %struct.StripColorBalance*, %struct.StripColorBalance** %cb_.addr, align 8, !dbg !10807
  %1 = bitcast %struct.StripColorBalance* %agg.result to i8*, !dbg !10808
  %2 = bitcast %struct.StripColorBalance* %0 to i8*, !dbg !10808
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 44, i1 false), !dbg !10808
  call void @llvm.dbg.declare(metadata i32* %c, metadata !10809, metadata !DIExpression()), !dbg !10810
  store i32 0, i32* %c, align 4, !dbg !10811
  br label %for.cond, !dbg !10813

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %c, align 4, !dbg !10814
  %cmp = icmp slt i32 %3, 3, !dbg !10816
  br i1 %cmp, label %for.body, label %for.end, !dbg !10817

for.body:                                         ; preds = %for.cond
  %lift = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10818
  %4 = load i32, i32* %c, align 4, !dbg !10820
  %idxprom = sext i32 %4 to i64, !dbg !10821
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %lift, i64 0, i64 %idxprom, !dbg !10821
  %5 = load float, float* %arrayidx, align 4, !dbg !10821
  %sub = fsub float 2.000000e+00, %5, !dbg !10822
  %lift1 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10823
  %6 = load i32, i32* %c, align 4, !dbg !10824
  %idxprom2 = sext i32 %6 to i64, !dbg !10825
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %lift1, i64 0, i64 %idxprom2, !dbg !10825
  store float %sub, float* %arrayidx3, align 4, !dbg !10826
  br label %for.inc, !dbg !10827

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %c, align 4, !dbg !10828
  %inc = add nsw i32 %7, 1, !dbg !10828
  store i32 %inc, i32* %c, align 4, !dbg !10828
  br label %for.cond, !dbg !10829, !llvm.loop !10830

for.end:                                          ; preds = %for.cond
  %flag = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 3, !dbg !10832
  %8 = load i32, i32* %flag, align 4, !dbg !10832
  %and = and i32 %8, 4, !dbg !10834
  %tobool = icmp ne i32 %and, 0, !dbg !10834
  br i1 %tobool, label %if.then, label %if.end30, !dbg !10835

if.then:                                          ; preds = %for.end
  store i32 0, i32* %c, align 4, !dbg !10836
  br label %for.cond4, !dbg !10839

for.cond4:                                        ; preds = %for.inc27, %if.then
  %9 = load i32, i32* %c, align 4, !dbg !10840
  %cmp5 = icmp slt i32 %9, 3, !dbg !10842
  br i1 %cmp5, label %for.body6, label %for.end29, !dbg !10843

for.body6:                                        ; preds = %for.cond4
  %lift7 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10844
  %10 = load i32, i32* %c, align 4, !dbg !10847
  %idxprom8 = sext i32 %10 to i64, !dbg !10848
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %lift7, i64 0, i64 %idxprom8, !dbg !10848
  %11 = load float, float* %arrayidx9, align 4, !dbg !10848
  %cmp10 = fcmp ogt float %11, 1.000000e+00, !dbg !10849
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !10850

if.then11:                                        ; preds = %for.body6
  %lift12 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10851
  %12 = load i32, i32* %c, align 4, !dbg !10852
  %idxprom13 = sext i32 %12 to i64, !dbg !10853
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %lift12, i64 0, i64 %idxprom13, !dbg !10853
  %13 = load float, float* %arrayidx14, align 4, !dbg !10853
  %sub15 = fsub float %13, 1.000000e+00, !dbg !10854
  %conv = fpext float %sub15 to double, !dbg !10853
  %call = call double @pow(double %conv, double 2.000000e+00) #9, !dbg !10855
  %add = fadd double %call, 1.000000e+00, !dbg !10856
  %conv16 = fptrunc double %add to float, !dbg !10855
  %lift17 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10857
  %14 = load i32, i32* %c, align 4, !dbg !10858
  %idxprom18 = sext i32 %14 to i64, !dbg !10859
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %lift17, i64 0, i64 %idxprom18, !dbg !10859
  store float %conv16, float* %arrayidx19, align 4, !dbg !10860
  br label %if.end, !dbg !10859

if.end:                                           ; preds = %if.then11, %for.body6
  %lift20 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10861
  %15 = load i32, i32* %c, align 4, !dbg !10862
  %idxprom21 = sext i32 %15 to i64, !dbg !10863
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %lift20, i64 0, i64 %idxprom21, !dbg !10863
  %16 = load float, float* %arrayidx22, align 4, !dbg !10863
  %sub23 = fsub float 2.000000e+00, %16, !dbg !10864
  %lift24 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 0, !dbg !10865
  %17 = load i32, i32* %c, align 4, !dbg !10866
  %idxprom25 = sext i32 %17 to i64, !dbg !10867
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %lift24, i64 0, i64 %idxprom25, !dbg !10867
  store float %sub23, float* %arrayidx26, align 4, !dbg !10868
  br label %for.inc27, !dbg !10869

for.inc27:                                        ; preds = %if.end
  %18 = load i32, i32* %c, align 4, !dbg !10870
  %inc28 = add nsw i32 %18, 1, !dbg !10870
  store i32 %inc28, i32* %c, align 4, !dbg !10870
  br label %for.cond4, !dbg !10871, !llvm.loop !10872

for.end29:                                        ; preds = %for.cond4
  br label %if.end30, !dbg !10874

if.end30:                                         ; preds = %for.end29, %for.end
  %flag31 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 3, !dbg !10875
  %19 = load i32, i32* %flag31, align 4, !dbg !10875
  %and32 = and i32 %19, 1, !dbg !10877
  %tobool33 = icmp ne i32 %and32, 0, !dbg !10877
  br i1 %tobool33, label %if.then34, label %if.end57, !dbg !10878

if.then34:                                        ; preds = %if.end30
  store i32 0, i32* %c, align 4, !dbg !10879
  br label %for.cond35, !dbg !10882

for.cond35:                                       ; preds = %for.inc54, %if.then34
  %20 = load i32, i32* %c, align 4, !dbg !10883
  %cmp36 = icmp slt i32 %20, 3, !dbg !10885
  br i1 %cmp36, label %for.body38, label %for.end56, !dbg !10886

for.body38:                                       ; preds = %for.cond35
  %gain = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 2, !dbg !10887
  %21 = load i32, i32* %c, align 4, !dbg !10890
  %idxprom39 = sext i32 %21 to i64, !dbg !10891
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %gain, i64 0, i64 %idxprom39, !dbg !10891
  %22 = load float, float* %arrayidx40, align 4, !dbg !10891
  %cmp41 = fcmp une float %22, 0.000000e+00, !dbg !10892
  br i1 %cmp41, label %if.then43, label %if.else, !dbg !10893

if.then43:                                        ; preds = %for.body38
  %gain44 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 2, !dbg !10894
  %23 = load i32, i32* %c, align 4, !dbg !10896
  %idxprom45 = sext i32 %23 to i64, !dbg !10897
  %arrayidx46 = getelementptr inbounds [3 x float], [3 x float]* %gain44, i64 0, i64 %idxprom45, !dbg !10897
  %24 = load float, float* %arrayidx46, align 4, !dbg !10897
  %div = fdiv float 1.000000e+00, %24, !dbg !10898
  %gain47 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 2, !dbg !10899
  %25 = load i32, i32* %c, align 4, !dbg !10900
  %idxprom48 = sext i32 %25 to i64, !dbg !10901
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %gain47, i64 0, i64 %idxprom48, !dbg !10901
  store float %div, float* %arrayidx49, align 4, !dbg !10902
  br label %if.end53, !dbg !10903

if.else:                                          ; preds = %for.body38
  %gain50 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 2, !dbg !10904
  %26 = load i32, i32* %c, align 4, !dbg !10906
  %idxprom51 = sext i32 %26 to i64, !dbg !10907
  %arrayidx52 = getelementptr inbounds [3 x float], [3 x float]* %gain50, i64 0, i64 %idxprom51, !dbg !10907
  store float 1.000000e+06, float* %arrayidx52, align 4, !dbg !10908
  br label %if.end53

if.end53:                                         ; preds = %if.else, %if.then43
  br label %for.inc54, !dbg !10909

for.inc54:                                        ; preds = %if.end53
  %27 = load i32, i32* %c, align 4, !dbg !10910
  %inc55 = add nsw i32 %27, 1, !dbg !10910
  store i32 %inc55, i32* %c, align 4, !dbg !10910
  br label %for.cond35, !dbg !10911, !llvm.loop !10912

for.end56:                                        ; preds = %for.cond35
  br label %if.end57, !dbg !10914

if.end57:                                         ; preds = %for.end56, %if.end30
  %flag58 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 3, !dbg !10915
  %28 = load i32, i32* %flag58, align 4, !dbg !10915
  %and59 = and i32 %28, 2, !dbg !10917
  %tobool60 = icmp ne i32 %and59, 0, !dbg !10917
  br i1 %tobool60, label %if.end86, label %if.then61, !dbg !10918

if.then61:                                        ; preds = %if.end57
  store i32 0, i32* %c, align 4, !dbg !10919
  br label %for.cond62, !dbg !10922

for.cond62:                                       ; preds = %for.inc83, %if.then61
  %29 = load i32, i32* %c, align 4, !dbg !10923
  %cmp63 = icmp slt i32 %29, 3, !dbg !10925
  br i1 %cmp63, label %for.body65, label %for.end85, !dbg !10926

for.body65:                                       ; preds = %for.cond62
  %gamma = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 1, !dbg !10927
  %30 = load i32, i32* %c, align 4, !dbg !10930
  %idxprom66 = sext i32 %30 to i64, !dbg !10931
  %arrayidx67 = getelementptr inbounds [3 x float], [3 x float]* %gamma, i64 0, i64 %idxprom66, !dbg !10931
  %31 = load float, float* %arrayidx67, align 4, !dbg !10931
  %cmp68 = fcmp une float %31, 0.000000e+00, !dbg !10932
  br i1 %cmp68, label %if.then70, label %if.else78, !dbg !10933

if.then70:                                        ; preds = %for.body65
  %gamma71 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 1, !dbg !10934
  %32 = load i32, i32* %c, align 4, !dbg !10936
  %idxprom72 = sext i32 %32 to i64, !dbg !10937
  %arrayidx73 = getelementptr inbounds [3 x float], [3 x float]* %gamma71, i64 0, i64 %idxprom72, !dbg !10937
  %33 = load float, float* %arrayidx73, align 4, !dbg !10937
  %div74 = fdiv float 1.000000e+00, %33, !dbg !10938
  %gamma75 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 1, !dbg !10939
  %34 = load i32, i32* %c, align 4, !dbg !10940
  %idxprom76 = sext i32 %34 to i64, !dbg !10941
  %arrayidx77 = getelementptr inbounds [3 x float], [3 x float]* %gamma75, i64 0, i64 %idxprom76, !dbg !10941
  store float %div74, float* %arrayidx77, align 4, !dbg !10942
  br label %if.end82, !dbg !10943

if.else78:                                        ; preds = %for.body65
  %gamma79 = getelementptr inbounds %struct.StripColorBalance, %struct.StripColorBalance* %agg.result, i32 0, i32 1, !dbg !10944
  %35 = load i32, i32* %c, align 4, !dbg !10946
  %idxprom80 = sext i32 %35 to i64, !dbg !10947
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %gamma79, i64 0, i64 %idxprom80, !dbg !10947
  store float 1.000000e+06, float* %arrayidx81, align 4, !dbg !10948
  br label %if.end82

if.end82:                                         ; preds = %if.else78, %if.then70
  br label %for.inc83, !dbg !10949

for.inc83:                                        ; preds = %if.end82
  %36 = load i32, i32* %c, align 4, !dbg !10950
  %inc84 = add nsw i32 %36, 1, !dbg !10950
  store i32 %inc84, i32* %c, align 4, !dbg !10950
  br label %for.cond62, !dbg !10951, !llvm.loop !10952

for.end85:                                        ; preds = %for.cond62
  br label %if.end86, !dbg !10954

if.end86:                                         ; preds = %for.end85, %if.end57
  ret void, !dbg !10955
}

; Function Attrs: noinline nounwind uwtable
define internal float @color_balance_fl(float %in, float %lift, float %gain, float %gamma, float %mul) #0 !dbg !10956 {
entry:
  %in.addr = alloca float, align 4
  %lift.addr = alloca float, align 4
  %gain.addr = alloca float, align 4
  %gamma.addr = alloca float, align 4
  %mul.addr = alloca float, align 4
  %x = alloca float, align 4
  store float %in, float* %in.addr, align 4
  call void @llvm.dbg.declare(metadata float* %in.addr, metadata !10959, metadata !DIExpression()), !dbg !10960
  store float %lift, float* %lift.addr, align 4
  call void @llvm.dbg.declare(metadata float* %lift.addr, metadata !10961, metadata !DIExpression()), !dbg !10962
  store float %gain, float* %gain.addr, align 4
  call void @llvm.dbg.declare(metadata float* %gain.addr, metadata !10963, metadata !DIExpression()), !dbg !10964
  store float %gamma, float* %gamma.addr, align 4
  call void @llvm.dbg.declare(metadata float* %gamma.addr, metadata !10965, metadata !DIExpression()), !dbg !10966
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !10967, metadata !DIExpression()), !dbg !10968
  call void @llvm.dbg.declare(metadata float* %x, metadata !10969, metadata !DIExpression()), !dbg !10970
  %0 = load float, float* %in.addr, align 4, !dbg !10971
  %sub = fsub float %0, 1.000000e+00, !dbg !10972
  %1 = load float, float* %lift.addr, align 4, !dbg !10973
  %mul1 = fmul float %sub, %1, !dbg !10974
  %add = fadd float %mul1, 1.000000e+00, !dbg !10975
  %2 = load float, float* %gain.addr, align 4, !dbg !10976
  %mul2 = fmul float %add, %2, !dbg !10977
  store float %mul2, float* %x, align 4, !dbg !10970
  %3 = load float, float* %x, align 4, !dbg !10978
  %cmp = fcmp olt float %3, 0.000000e+00, !dbg !10980
  br i1 %cmp, label %if.then, label %if.end, !dbg !10981

if.then:                                          ; preds = %entry
  store float 0.000000e+00, float* %x, align 4, !dbg !10982
  br label %if.end, !dbg !10983

if.end:                                           ; preds = %if.then, %entry
  %4 = load float, float* %x, align 4, !dbg !10984
  %5 = load float, float* %gamma.addr, align 4, !dbg !10985
  %call = call float @powf(float %4, float %5) #9, !dbg !10986
  %6 = load float, float* %mul.addr, align 4, !dbg !10987
  %mul3 = fmul float %call, %6, !dbg !10988
  ret float %mul3, !dbg !10989
}

; Function Attrs: nounwind
declare dso_local double @pow(double, double) #6

; Function Attrs: nounwind
declare dso_local float @powf(float, float) #6

; Function Attrs: noinline nounwind uwtable
define internal void @make_cb_table_float(float %lift, float %gain, float %gamma, float* %table, float %mul) #0 !dbg !10990 {
entry:
  %lift.addr = alloca float, align 4
  %gain.addr = alloca float, align 4
  %gamma.addr = alloca float, align 4
  %table.addr = alloca float*, align 8
  %mul.addr = alloca float, align 4
  %y = alloca i32, align 4
  %v = alloca float, align 4
  store float %lift, float* %lift.addr, align 4
  call void @llvm.dbg.declare(metadata float* %lift.addr, metadata !10993, metadata !DIExpression()), !dbg !10994
  store float %gain, float* %gain.addr, align 4
  call void @llvm.dbg.declare(metadata float* %gain.addr, metadata !10995, metadata !DIExpression()), !dbg !10996
  store float %gamma, float* %gamma.addr, align 4
  call void @llvm.dbg.declare(metadata float* %gamma.addr, metadata !10997, metadata !DIExpression()), !dbg !10998
  store float* %table, float** %table.addr, align 8
  call void @llvm.dbg.declare(metadata float** %table.addr, metadata !10999, metadata !DIExpression()), !dbg !11000
  store float %mul, float* %mul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %mul.addr, metadata !11001, metadata !DIExpression()), !dbg !11002
  call void @llvm.dbg.declare(metadata i32* %y, metadata !11003, metadata !DIExpression()), !dbg !11004
  store i32 0, i32* %y, align 4, !dbg !11005
  br label %for.cond, !dbg !11007

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %y, align 4, !dbg !11008
  %cmp = icmp slt i32 %0, 256, !dbg !11010
  br i1 %cmp, label %for.body, label %for.end, !dbg !11011

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %v, metadata !11012, metadata !DIExpression()), !dbg !11014
  %1 = load i32, i32* %y, align 4, !dbg !11015
  %conv = sitofp i32 %1 to float, !dbg !11016
  %mul1 = fmul float %conv, 0x3F70101020000000, !dbg !11017
  %2 = load float, float* %lift.addr, align 4, !dbg !11018
  %3 = load float, float* %gain.addr, align 4, !dbg !11019
  %4 = load float, float* %gamma.addr, align 4, !dbg !11020
  %5 = load float, float* %mul.addr, align 4, !dbg !11021
  %call = call float @color_balance_fl(float %mul1, float %2, float %3, float %4, float %5), !dbg !11022
  store float %call, float* %v, align 4, !dbg !11014
  %6 = load float, float* %v, align 4, !dbg !11023
  %7 = load float*, float** %table.addr, align 8, !dbg !11024
  %8 = load i32, i32* %y, align 4, !dbg !11025
  %idxprom = sext i32 %8 to i64, !dbg !11024
  %arrayidx = getelementptr inbounds float, float* %7, i64 %idxprom, !dbg !11024
  store float %6, float* %arrayidx, align 4, !dbg !11026
  br label %for.inc, !dbg !11027

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %y, align 4, !dbg !11028
  %inc = add nsw i32 %9, 1, !dbg !11028
  store i32 %inc, i32* %y, align 4, !dbg !11028
  br label %for.cond, !dbg !11029, !llvm.loop !11030

for.end:                                          ; preds = %for.cond
  ret void, !dbg !11032
}

; Function Attrs: noinline nounwind uwtable
define internal void @straight_uchar_to_premul_float(float* %result, i8* %color) #0 !dbg !11033 {
entry:
  %result.addr = alloca float*, align 8
  %color.addr = alloca i8*, align 8
  %alpha = alloca float, align 4
  %fac = alloca float, align 4
  store float* %result, float** %result.addr, align 8
  call void @llvm.dbg.declare(metadata float** %result.addr, metadata !11037, metadata !DIExpression()), !dbg !11038
  store i8* %color, i8** %color.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %color.addr, metadata !11039, metadata !DIExpression()), !dbg !11040
  call void @llvm.dbg.declare(metadata float* %alpha, metadata !11041, metadata !DIExpression()), !dbg !11042
  %0 = load i8*, i8** %color.addr, align 8, !dbg !11043
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 3, !dbg !11043
  %1 = load i8, i8* %arrayidx, align 1, !dbg !11043
  %conv = zext i8 %1 to i32, !dbg !11043
  %conv1 = sitofp i32 %conv to float, !dbg !11043
  %mul = fmul float %conv1, 0x3F70101020000000, !dbg !11044
  store float %mul, float* %alpha, align 4, !dbg !11042
  call void @llvm.dbg.declare(metadata float* %fac, metadata !11045, metadata !DIExpression()), !dbg !11046
  %2 = load float, float* %alpha, align 4, !dbg !11047
  %mul2 = fmul float %2, 0x3F70101020000000, !dbg !11048
  store float %mul2, float* %fac, align 4, !dbg !11046
  %3 = load i8*, i8** %color.addr, align 8, !dbg !11049
  %arrayidx3 = getelementptr inbounds i8, i8* %3, i64 0, !dbg !11049
  %4 = load i8, i8* %arrayidx3, align 1, !dbg !11049
  %conv4 = zext i8 %4 to i32, !dbg !11049
  %conv5 = sitofp i32 %conv4 to float, !dbg !11049
  %5 = load float, float* %fac, align 4, !dbg !11050
  %mul6 = fmul float %conv5, %5, !dbg !11051
  %6 = load float*, float** %result.addr, align 8, !dbg !11052
  %arrayidx7 = getelementptr inbounds float, float* %6, i64 0, !dbg !11052
  store float %mul6, float* %arrayidx7, align 4, !dbg !11053
  %7 = load i8*, i8** %color.addr, align 8, !dbg !11054
  %arrayidx8 = getelementptr inbounds i8, i8* %7, i64 1, !dbg !11054
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !11054
  %conv9 = zext i8 %8 to i32, !dbg !11054
  %conv10 = sitofp i32 %conv9 to float, !dbg !11054
  %9 = load float, float* %fac, align 4, !dbg !11055
  %mul11 = fmul float %conv10, %9, !dbg !11056
  %10 = load float*, float** %result.addr, align 8, !dbg !11057
  %arrayidx12 = getelementptr inbounds float, float* %10, i64 1, !dbg !11057
  store float %mul11, float* %arrayidx12, align 4, !dbg !11058
  %11 = load i8*, i8** %color.addr, align 8, !dbg !11059
  %arrayidx13 = getelementptr inbounds i8, i8* %11, i64 2, !dbg !11059
  %12 = load i8, i8* %arrayidx13, align 1, !dbg !11059
  %conv14 = zext i8 %12 to i32, !dbg !11059
  %conv15 = sitofp i32 %conv14 to float, !dbg !11059
  %13 = load float, float* %fac, align 4, !dbg !11060
  %mul16 = fmul float %conv15, %13, !dbg !11061
  %14 = load float*, float** %result.addr, align 8, !dbg !11062
  %arrayidx17 = getelementptr inbounds float, float* %14, i64 2, !dbg !11062
  store float %mul16, float* %arrayidx17, align 4, !dbg !11063
  %15 = load float, float* %alpha, align 4, !dbg !11064
  %16 = load float*, float** %result.addr, align 8, !dbg !11065
  %arrayidx18 = getelementptr inbounds float, float* %16, i64 3, !dbg !11065
  store float %15, float* %arrayidx18, align 4, !dbg !11066
  ret void, !dbg !11067
}

; Function Attrs: noinline nounwind uwtable
define internal void @premul_float_to_straight_uchar(i8* %result, float* %color) #0 !dbg !11068 {
entry:
  %result.addr = alloca i8*, align 8
  %color.addr = alloca float*, align 8
  %alpha_inv = alloca float, align 4
  store i8* %result, i8** %result.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %result.addr, metadata !11071, metadata !DIExpression()), !dbg !11072
  store float* %color, float** %color.addr, align 8
  call void @llvm.dbg.declare(metadata float** %color.addr, metadata !11073, metadata !DIExpression()), !dbg !11074
  %0 = load float*, float** %color.addr, align 8, !dbg !11075
  %arrayidx = getelementptr inbounds float, float* %0, i64 3, !dbg !11075
  %1 = load float, float* %arrayidx, align 4, !dbg !11075
  %cmp = fcmp oeq float %1, 0.000000e+00, !dbg !11077
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11078

lor.lhs.false:                                    ; preds = %entry
  %2 = load float*, float** %color.addr, align 8, !dbg !11079
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 3, !dbg !11079
  %3 = load float, float* %arrayidx1, align 4, !dbg !11079
  %cmp2 = fcmp oeq float %3, 1.000000e+00, !dbg !11080
  br i1 %cmp2, label %if.then, label %if.else, !dbg !11081

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load float*, float** %color.addr, align 8, !dbg !11082
  %arrayidx3 = getelementptr inbounds float, float* %4, i64 0, !dbg !11082
  %5 = load float, float* %arrayidx3, align 4, !dbg !11082
  %cmp4 = fcmp ole float %5, 0.000000e+00, !dbg !11082
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !11082

cond.true:                                        ; preds = %if.then
  br label %cond.end10, !dbg !11082

cond.false:                                       ; preds = %if.then
  %6 = load float*, float** %color.addr, align 8, !dbg !11082
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 0, !dbg !11082
  %7 = load float, float* %arrayidx5, align 4, !dbg !11082
  %cmp6 = fcmp ogt float %7, 0x3FEFEFEFE0000000, !dbg !11082
  br i1 %cmp6, label %cond.true7, label %cond.false8, !dbg !11082

cond.true7:                                       ; preds = %cond.false
  br label %cond.end, !dbg !11082

cond.false8:                                      ; preds = %cond.false
  %8 = load float*, float** %color.addr, align 8, !dbg !11082
  %arrayidx9 = getelementptr inbounds float, float* %8, i64 0, !dbg !11082
  %9 = load float, float* %arrayidx9, align 4, !dbg !11082
  %mul = fmul float 2.550000e+02, %9, !dbg !11082
  %add = fadd float %mul, 5.000000e-01, !dbg !11082
  br label %cond.end, !dbg !11082

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi float [ 2.550000e+02, %cond.true7 ], [ %add, %cond.false8 ], !dbg !11082
  br label %cond.end10, !dbg !11082

cond.end10:                                       ; preds = %cond.end, %cond.true
  %cond11 = phi float [ 0.000000e+00, %cond.true ], [ %cond, %cond.end ], !dbg !11082
  %conv = fptoui float %cond11 to i8, !dbg !11082
  %10 = load i8*, i8** %result.addr, align 8, !dbg !11084
  %arrayidx12 = getelementptr inbounds i8, i8* %10, i64 0, !dbg !11084
  store i8 %conv, i8* %arrayidx12, align 1, !dbg !11085
  %11 = load float*, float** %color.addr, align 8, !dbg !11086
  %arrayidx13 = getelementptr inbounds float, float* %11, i64 1, !dbg !11086
  %12 = load float, float* %arrayidx13, align 4, !dbg !11086
  %cmp14 = fcmp ole float %12, 0.000000e+00, !dbg !11086
  br i1 %cmp14, label %cond.true16, label %cond.false17, !dbg !11086

cond.true16:                                      ; preds = %cond.end10
  br label %cond.end28, !dbg !11086

cond.false17:                                     ; preds = %cond.end10
  %13 = load float*, float** %color.addr, align 8, !dbg !11086
  %arrayidx18 = getelementptr inbounds float, float* %13, i64 1, !dbg !11086
  %14 = load float, float* %arrayidx18, align 4, !dbg !11086
  %cmp19 = fcmp ogt float %14, 0x3FEFEFEFE0000000, !dbg !11086
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !11086

cond.true21:                                      ; preds = %cond.false17
  br label %cond.end26, !dbg !11086

cond.false22:                                     ; preds = %cond.false17
  %15 = load float*, float** %color.addr, align 8, !dbg !11086
  %arrayidx23 = getelementptr inbounds float, float* %15, i64 1, !dbg !11086
  %16 = load float, float* %arrayidx23, align 4, !dbg !11086
  %mul24 = fmul float 2.550000e+02, %16, !dbg !11086
  %add25 = fadd float %mul24, 5.000000e-01, !dbg !11086
  br label %cond.end26, !dbg !11086

cond.end26:                                       ; preds = %cond.false22, %cond.true21
  %cond27 = phi float [ 2.550000e+02, %cond.true21 ], [ %add25, %cond.false22 ], !dbg !11086
  br label %cond.end28, !dbg !11086

cond.end28:                                       ; preds = %cond.end26, %cond.true16
  %cond29 = phi float [ 0.000000e+00, %cond.true16 ], [ %cond27, %cond.end26 ], !dbg !11086
  %conv30 = fptoui float %cond29 to i8, !dbg !11086
  %17 = load i8*, i8** %result.addr, align 8, !dbg !11087
  %arrayidx31 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !11087
  store i8 %conv30, i8* %arrayidx31, align 1, !dbg !11088
  %18 = load float*, float** %color.addr, align 8, !dbg !11089
  %arrayidx32 = getelementptr inbounds float, float* %18, i64 2, !dbg !11089
  %19 = load float, float* %arrayidx32, align 4, !dbg !11089
  %cmp33 = fcmp ole float %19, 0.000000e+00, !dbg !11089
  br i1 %cmp33, label %cond.true35, label %cond.false36, !dbg !11089

cond.true35:                                      ; preds = %cond.end28
  br label %cond.end47, !dbg !11089

cond.false36:                                     ; preds = %cond.end28
  %20 = load float*, float** %color.addr, align 8, !dbg !11089
  %arrayidx37 = getelementptr inbounds float, float* %20, i64 2, !dbg !11089
  %21 = load float, float* %arrayidx37, align 4, !dbg !11089
  %cmp38 = fcmp ogt float %21, 0x3FEFEFEFE0000000, !dbg !11089
  br i1 %cmp38, label %cond.true40, label %cond.false41, !dbg !11089

cond.true40:                                      ; preds = %cond.false36
  br label %cond.end45, !dbg !11089

cond.false41:                                     ; preds = %cond.false36
  %22 = load float*, float** %color.addr, align 8, !dbg !11089
  %arrayidx42 = getelementptr inbounds float, float* %22, i64 2, !dbg !11089
  %23 = load float, float* %arrayidx42, align 4, !dbg !11089
  %mul43 = fmul float 2.550000e+02, %23, !dbg !11089
  %add44 = fadd float %mul43, 5.000000e-01, !dbg !11089
  br label %cond.end45, !dbg !11089

cond.end45:                                       ; preds = %cond.false41, %cond.true40
  %cond46 = phi float [ 2.550000e+02, %cond.true40 ], [ %add44, %cond.false41 ], !dbg !11089
  br label %cond.end47, !dbg !11089

cond.end47:                                       ; preds = %cond.end45, %cond.true35
  %cond48 = phi float [ 0.000000e+00, %cond.true35 ], [ %cond46, %cond.end45 ], !dbg !11089
  %conv49 = fptoui float %cond48 to i8, !dbg !11089
  %24 = load i8*, i8** %result.addr, align 8, !dbg !11090
  %arrayidx50 = getelementptr inbounds i8, i8* %24, i64 2, !dbg !11090
  store i8 %conv49, i8* %arrayidx50, align 1, !dbg !11091
  %25 = load float*, float** %color.addr, align 8, !dbg !11092
  %arrayidx51 = getelementptr inbounds float, float* %25, i64 3, !dbg !11092
  %26 = load float, float* %arrayidx51, align 4, !dbg !11092
  %cmp52 = fcmp ole float %26, 0.000000e+00, !dbg !11092
  br i1 %cmp52, label %cond.true54, label %cond.false55, !dbg !11092

cond.true54:                                      ; preds = %cond.end47
  br label %cond.end66, !dbg !11092

cond.false55:                                     ; preds = %cond.end47
  %27 = load float*, float** %color.addr, align 8, !dbg !11092
  %arrayidx56 = getelementptr inbounds float, float* %27, i64 3, !dbg !11092
  %28 = load float, float* %arrayidx56, align 4, !dbg !11092
  %cmp57 = fcmp ogt float %28, 0x3FEFEFEFE0000000, !dbg !11092
  br i1 %cmp57, label %cond.true59, label %cond.false60, !dbg !11092

cond.true59:                                      ; preds = %cond.false55
  br label %cond.end64, !dbg !11092

cond.false60:                                     ; preds = %cond.false55
  %29 = load float*, float** %color.addr, align 8, !dbg !11092
  %arrayidx61 = getelementptr inbounds float, float* %29, i64 3, !dbg !11092
  %30 = load float, float* %arrayidx61, align 4, !dbg !11092
  %mul62 = fmul float 2.550000e+02, %30, !dbg !11092
  %add63 = fadd float %mul62, 5.000000e-01, !dbg !11092
  br label %cond.end64, !dbg !11092

cond.end64:                                       ; preds = %cond.false60, %cond.true59
  %cond65 = phi float [ 2.550000e+02, %cond.true59 ], [ %add63, %cond.false60 ], !dbg !11092
  br label %cond.end66, !dbg !11092

cond.end66:                                       ; preds = %cond.end64, %cond.true54
  %cond67 = phi float [ 0.000000e+00, %cond.true54 ], [ %cond65, %cond.end64 ], !dbg !11092
  %conv68 = fptoui float %cond67 to i8, !dbg !11092
  %31 = load i8*, i8** %result.addr, align 8, !dbg !11093
  %arrayidx69 = getelementptr inbounds i8, i8* %31, i64 3, !dbg !11093
  store i8 %conv68, i8* %arrayidx69, align 1, !dbg !11094
  br label %if.end, !dbg !11095

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata float* %alpha_inv, metadata !11096, metadata !DIExpression()), !dbg !11098
  %32 = load float*, float** %color.addr, align 8, !dbg !11099
  %arrayidx70 = getelementptr inbounds float, float* %32, i64 3, !dbg !11099
  %33 = load float, float* %arrayidx70, align 4, !dbg !11099
  %div = fdiv float 1.000000e+00, %33, !dbg !11100
  store float %div, float* %alpha_inv, align 4, !dbg !11098
  %34 = load float*, float** %color.addr, align 8, !dbg !11101
  %arrayidx71 = getelementptr inbounds float, float* %34, i64 0, !dbg !11101
  %35 = load float, float* %arrayidx71, align 4, !dbg !11101
  %36 = load float, float* %alpha_inv, align 4, !dbg !11101
  %mul72 = fmul float %35, %36, !dbg !11101
  %cmp73 = fcmp ole float %mul72, 0.000000e+00, !dbg !11101
  br i1 %cmp73, label %cond.true75, label %cond.false76, !dbg !11101

cond.true75:                                      ; preds = %if.else
  br label %cond.end89, !dbg !11101

cond.false76:                                     ; preds = %if.else
  %37 = load float*, float** %color.addr, align 8, !dbg !11101
  %arrayidx77 = getelementptr inbounds float, float* %37, i64 0, !dbg !11101
  %38 = load float, float* %arrayidx77, align 4, !dbg !11101
  %39 = load float, float* %alpha_inv, align 4, !dbg !11101
  %mul78 = fmul float %38, %39, !dbg !11101
  %cmp79 = fcmp ogt float %mul78, 0x3FEFEFEFE0000000, !dbg !11101
  br i1 %cmp79, label %cond.true81, label %cond.false82, !dbg !11101

cond.true81:                                      ; preds = %cond.false76
  br label %cond.end87, !dbg !11101

cond.false82:                                     ; preds = %cond.false76
  %40 = load float*, float** %color.addr, align 8, !dbg !11101
  %arrayidx83 = getelementptr inbounds float, float* %40, i64 0, !dbg !11101
  %41 = load float, float* %arrayidx83, align 4, !dbg !11101
  %42 = load float, float* %alpha_inv, align 4, !dbg !11101
  %mul84 = fmul float %41, %42, !dbg !11101
  %mul85 = fmul float 2.550000e+02, %mul84, !dbg !11101
  %add86 = fadd float %mul85, 5.000000e-01, !dbg !11101
  br label %cond.end87, !dbg !11101

cond.end87:                                       ; preds = %cond.false82, %cond.true81
  %cond88 = phi float [ 2.550000e+02, %cond.true81 ], [ %add86, %cond.false82 ], !dbg !11101
  br label %cond.end89, !dbg !11101

cond.end89:                                       ; preds = %cond.end87, %cond.true75
  %cond90 = phi float [ 0.000000e+00, %cond.true75 ], [ %cond88, %cond.end87 ], !dbg !11101
  %conv91 = fptoui float %cond90 to i8, !dbg !11101
  %43 = load i8*, i8** %result.addr, align 8, !dbg !11102
  %arrayidx92 = getelementptr inbounds i8, i8* %43, i64 0, !dbg !11102
  store i8 %conv91, i8* %arrayidx92, align 1, !dbg !11103
  %44 = load float*, float** %color.addr, align 8, !dbg !11104
  %arrayidx93 = getelementptr inbounds float, float* %44, i64 1, !dbg !11104
  %45 = load float, float* %arrayidx93, align 4, !dbg !11104
  %46 = load float, float* %alpha_inv, align 4, !dbg !11104
  %mul94 = fmul float %45, %46, !dbg !11104
  %cmp95 = fcmp ole float %mul94, 0.000000e+00, !dbg !11104
  br i1 %cmp95, label %cond.true97, label %cond.false98, !dbg !11104

cond.true97:                                      ; preds = %cond.end89
  br label %cond.end111, !dbg !11104

cond.false98:                                     ; preds = %cond.end89
  %47 = load float*, float** %color.addr, align 8, !dbg !11104
  %arrayidx99 = getelementptr inbounds float, float* %47, i64 1, !dbg !11104
  %48 = load float, float* %arrayidx99, align 4, !dbg !11104
  %49 = load float, float* %alpha_inv, align 4, !dbg !11104
  %mul100 = fmul float %48, %49, !dbg !11104
  %cmp101 = fcmp ogt float %mul100, 0x3FEFEFEFE0000000, !dbg !11104
  br i1 %cmp101, label %cond.true103, label %cond.false104, !dbg !11104

cond.true103:                                     ; preds = %cond.false98
  br label %cond.end109, !dbg !11104

cond.false104:                                    ; preds = %cond.false98
  %50 = load float*, float** %color.addr, align 8, !dbg !11104
  %arrayidx105 = getelementptr inbounds float, float* %50, i64 1, !dbg !11104
  %51 = load float, float* %arrayidx105, align 4, !dbg !11104
  %52 = load float, float* %alpha_inv, align 4, !dbg !11104
  %mul106 = fmul float %51, %52, !dbg !11104
  %mul107 = fmul float 2.550000e+02, %mul106, !dbg !11104
  %add108 = fadd float %mul107, 5.000000e-01, !dbg !11104
  br label %cond.end109, !dbg !11104

cond.end109:                                      ; preds = %cond.false104, %cond.true103
  %cond110 = phi float [ 2.550000e+02, %cond.true103 ], [ %add108, %cond.false104 ], !dbg !11104
  br label %cond.end111, !dbg !11104

cond.end111:                                      ; preds = %cond.end109, %cond.true97
  %cond112 = phi float [ 0.000000e+00, %cond.true97 ], [ %cond110, %cond.end109 ], !dbg !11104
  %conv113 = fptoui float %cond112 to i8, !dbg !11104
  %53 = load i8*, i8** %result.addr, align 8, !dbg !11105
  %arrayidx114 = getelementptr inbounds i8, i8* %53, i64 1, !dbg !11105
  store i8 %conv113, i8* %arrayidx114, align 1, !dbg !11106
  %54 = load float*, float** %color.addr, align 8, !dbg !11107
  %arrayidx115 = getelementptr inbounds float, float* %54, i64 2, !dbg !11107
  %55 = load float, float* %arrayidx115, align 4, !dbg !11107
  %56 = load float, float* %alpha_inv, align 4, !dbg !11107
  %mul116 = fmul float %55, %56, !dbg !11107
  %cmp117 = fcmp ole float %mul116, 0.000000e+00, !dbg !11107
  br i1 %cmp117, label %cond.true119, label %cond.false120, !dbg !11107

cond.true119:                                     ; preds = %cond.end111
  br label %cond.end133, !dbg !11107

cond.false120:                                    ; preds = %cond.end111
  %57 = load float*, float** %color.addr, align 8, !dbg !11107
  %arrayidx121 = getelementptr inbounds float, float* %57, i64 2, !dbg !11107
  %58 = load float, float* %arrayidx121, align 4, !dbg !11107
  %59 = load float, float* %alpha_inv, align 4, !dbg !11107
  %mul122 = fmul float %58, %59, !dbg !11107
  %cmp123 = fcmp ogt float %mul122, 0x3FEFEFEFE0000000, !dbg !11107
  br i1 %cmp123, label %cond.true125, label %cond.false126, !dbg !11107

cond.true125:                                     ; preds = %cond.false120
  br label %cond.end131, !dbg !11107

cond.false126:                                    ; preds = %cond.false120
  %60 = load float*, float** %color.addr, align 8, !dbg !11107
  %arrayidx127 = getelementptr inbounds float, float* %60, i64 2, !dbg !11107
  %61 = load float, float* %arrayidx127, align 4, !dbg !11107
  %62 = load float, float* %alpha_inv, align 4, !dbg !11107
  %mul128 = fmul float %61, %62, !dbg !11107
  %mul129 = fmul float 2.550000e+02, %mul128, !dbg !11107
  %add130 = fadd float %mul129, 5.000000e-01, !dbg !11107
  br label %cond.end131, !dbg !11107

cond.end131:                                      ; preds = %cond.false126, %cond.true125
  %cond132 = phi float [ 2.550000e+02, %cond.true125 ], [ %add130, %cond.false126 ], !dbg !11107
  br label %cond.end133, !dbg !11107

cond.end133:                                      ; preds = %cond.end131, %cond.true119
  %cond134 = phi float [ 0.000000e+00, %cond.true119 ], [ %cond132, %cond.end131 ], !dbg !11107
  %conv135 = fptoui float %cond134 to i8, !dbg !11107
  %63 = load i8*, i8** %result.addr, align 8, !dbg !11108
  %arrayidx136 = getelementptr inbounds i8, i8* %63, i64 2, !dbg !11108
  store i8 %conv135, i8* %arrayidx136, align 1, !dbg !11109
  %64 = load float*, float** %color.addr, align 8, !dbg !11110
  %arrayidx137 = getelementptr inbounds float, float* %64, i64 3, !dbg !11110
  %65 = load float, float* %arrayidx137, align 4, !dbg !11110
  %cmp138 = fcmp ole float %65, 0.000000e+00, !dbg !11110
  br i1 %cmp138, label %cond.true140, label %cond.false141, !dbg !11110

cond.true140:                                     ; preds = %cond.end133
  br label %cond.end152, !dbg !11110

cond.false141:                                    ; preds = %cond.end133
  %66 = load float*, float** %color.addr, align 8, !dbg !11110
  %arrayidx142 = getelementptr inbounds float, float* %66, i64 3, !dbg !11110
  %67 = load float, float* %arrayidx142, align 4, !dbg !11110
  %cmp143 = fcmp ogt float %67, 0x3FEFEFEFE0000000, !dbg !11110
  br i1 %cmp143, label %cond.true145, label %cond.false146, !dbg !11110

cond.true145:                                     ; preds = %cond.false141
  br label %cond.end150, !dbg !11110

cond.false146:                                    ; preds = %cond.false141
  %68 = load float*, float** %color.addr, align 8, !dbg !11110
  %arrayidx147 = getelementptr inbounds float, float* %68, i64 3, !dbg !11110
  %69 = load float, float* %arrayidx147, align 4, !dbg !11110
  %mul148 = fmul float 2.550000e+02, %69, !dbg !11110
  %add149 = fadd float %mul148, 5.000000e-01, !dbg !11110
  br label %cond.end150, !dbg !11110

cond.end150:                                      ; preds = %cond.false146, %cond.true145
  %cond151 = phi float [ 2.550000e+02, %cond.true145 ], [ %add149, %cond.false146 ], !dbg !11110
  br label %cond.end152, !dbg !11110

cond.end152:                                      ; preds = %cond.end150, %cond.true140
  %cond153 = phi float [ 0.000000e+00, %cond.true140 ], [ %cond151, %cond.end150 ], !dbg !11110
  %conv154 = fptoui float %cond153 to i8, !dbg !11110
  %70 = load i8*, i8** %result.addr, align 8, !dbg !11111
  %arrayidx155 = getelementptr inbounds i8, i8* %70, i64 3, !dbg !11111
  store i8 %conv154, i8* %arrayidx155, align 1, !dbg !11112
  br label %if.end

if.end:                                           ; preds = %cond.end152, %cond.end66
  ret void, !dbg !11113
}

declare dso_local %struct.Mask* @BKE_mask_copy_nolib(%struct.Mask*) #2

declare dso_local void @BKE_mask_evaluate(%struct.Mask*, float, i8 zeroext) #2

declare dso_local %struct.MaskRasterHandle* @BKE_maskrasterize_handle_new() #2

declare dso_local void @BKE_maskrasterize_handle_init(%struct.MaskRasterHandle*, %struct.Mask*, i32, i32, i8 zeroext, i8 zeroext, i8 zeroext) #2

declare dso_local void @BKE_mask_free_nolib(%struct.Mask*) #2

declare dso_local void @BKE_maskrasterize_buffer(%struct.MaskRasterHandle*, i32, i32, float*) #2

declare dso_local void @BKE_maskrasterize_handle_free(%struct.MaskRasterHandle*) #2

declare dso_local %struct.ImBuf* @IMB_allocImBuf(i32, i32, i8 zeroext, i32) #2

declare dso_local %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData*, %struct.Sequence*, float, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @copy_from_ibuf_still(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %nr) #0 !dbg !11114 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %nr.addr = alloca float, align 4
  %rval = alloca %struct.ImBuf*, align 8
  %ibuf = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !11115, metadata !DIExpression()), !dbg !11116
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !11117, metadata !DIExpression()), !dbg !11118
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !11119, metadata !DIExpression()), !dbg !11120
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %rval, metadata !11121, metadata !DIExpression()), !dbg !11122
  store %struct.ImBuf* null, %struct.ImBuf** %rval, align 8, !dbg !11122
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !11123, metadata !DIExpression()), !dbg !11124
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !11124
  %0 = load float, float* %nr.addr, align 4, !dbg !11125
  %cmp = fcmp oeq float %0, 0.000000e+00, !dbg !11127
  br i1 %cmp, label %if.then, label %if.else, !dbg !11128

if.then:                                          ; preds = %entry
  %1 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11129
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11131
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11132
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 8, !dbg !11133
  %4 = load i32, i32* %start, align 4, !dbg !11133
  %conv = sitofp i32 %4 to float, !dbg !11132
  %call = call %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData* %1, %struct.Sequence* %2, float %conv, i32 2), !dbg !11134
  store %struct.ImBuf* %call, %struct.ImBuf** %ibuf, align 8, !dbg !11135
  br label %if.end8, !dbg !11136

if.else:                                          ; preds = %entry
  %5 = load float, float* %nr.addr, align 4, !dbg !11137
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11139
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 7, !dbg !11140
  %7 = load i32, i32* %len, align 8, !dbg !11140
  %sub = sub nsw i32 %7, 1, !dbg !11141
  %conv1 = sitofp i32 %sub to float, !dbg !11139
  %cmp2 = fcmp oeq float %5, %conv1, !dbg !11142
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !11143

if.then4:                                         ; preds = %if.else
  %8 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11144
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11146
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11147
  %start5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 8, !dbg !11148
  %11 = load i32, i32* %start5, align 4, !dbg !11148
  %conv6 = sitofp i32 %11 to float, !dbg !11147
  %call7 = call %struct.ImBuf* @BKE_sequencer_cache_get(%struct.SeqRenderData* %8, %struct.Sequence* %9, float %conv6, i32 3), !dbg !11149
  store %struct.ImBuf* %call7, %struct.ImBuf** %ibuf, align 8, !dbg !11150
  br label %if.end, !dbg !11151

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11152
  %tobool = icmp ne %struct.ImBuf* %12, null, !dbg !11152
  br i1 %tobool, label %if.then9, label %if.end11, !dbg !11154

if.then9:                                         ; preds = %if.end8
  %13 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11155
  %call10 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %13), !dbg !11157
  store %struct.ImBuf* %call10, %struct.ImBuf** %rval, align 8, !dbg !11158
  %14 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11159
  call void @IMB_freeImBuf(%struct.ImBuf* %14), !dbg !11160
  br label %if.end11, !dbg !11161

if.end11:                                         ; preds = %if.then9, %if.end8
  %15 = load %struct.ImBuf*, %struct.ImBuf** %rval, align 8, !dbg !11162
  ret %struct.ImBuf* %15, !dbg !11163
}

declare dso_local %struct.ImBuf* @BKE_sequencer_preprocessed_cache_get(%struct.SeqRenderData*, %struct.Sequence*, float, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_proxy_fetch(%struct.SeqRenderData* %context, %struct.Sequence* %seq, i32 %cfra) #0 !dbg !11164 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca i32, align 4
  %name = alloca [1792 x i8], align 16
  %psize = alloca i32, align 4
  %size_flags = alloca i32, align 4
  %render_size = alloca i32, align 4
  %frameno = alloca i32, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !11167, metadata !DIExpression()), !dbg !11168
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !11169, metadata !DIExpression()), !dbg !11170
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !11171, metadata !DIExpression()), !dbg !11172
  call void @llvm.dbg.declare(metadata [1792 x i8]* %name, metadata !11173, metadata !DIExpression()), !dbg !11174
  call void @llvm.dbg.declare(metadata i32* %psize, metadata !11175, metadata !DIExpression()), !dbg !11177
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11178
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %0, i32 0, i32 5, !dbg !11179
  %1 = load i32, i32* %preview_render_size, align 8, !dbg !11179
  %call = call i32 @seq_rendersize_to_proxysize(i32 %1), !dbg !11180
  store i32 %call, i32* %psize, align 4, !dbg !11177
  call void @llvm.dbg.declare(metadata i32* %size_flags, metadata !11181, metadata !DIExpression()), !dbg !11182
  call void @llvm.dbg.declare(metadata i32* %render_size, metadata !11183, metadata !DIExpression()), !dbg !11184
  %2 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11185
  %preview_render_size1 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %2, i32 0, i32 5, !dbg !11186
  %3 = load i32, i32* %preview_render_size1, align 8, !dbg !11186
  store i32 %3, i32* %render_size, align 4, !dbg !11184
  %4 = load i32, i32* %render_size, align 4, !dbg !11187
  %cmp = icmp eq i32 %4, 99, !dbg !11189
  br i1 %cmp, label %if.then, label %if.end, !dbg !11190

if.then:                                          ; preds = %entry
  store i32 100, i32* %render_size, align 4, !dbg !11191
  br label %if.end, !dbg !11193

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11194
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 5, !dbg !11196
  %6 = load i32, i32* %flag, align 8, !dbg !11196
  %and = and i32 %6, 32768, !dbg !11197
  %tobool = icmp ne i32 %and, 0, !dbg !11197
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !11198

if.then2:                                         ; preds = %if.end
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11199
  br label %return, !dbg !11199

if.end3:                                          ; preds = %if.end
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11201
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 24, !dbg !11202
  %8 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !11202
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %8, i32 0, i32 8, !dbg !11203
  %9 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !11203
  %build_size_flags = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %9, i32 0, i32 5, !dbg !11204
  %10 = load i16, i16* %build_size_flags, align 4, !dbg !11204
  %conv = sext i16 %10 to i32, !dbg !11201
  store i32 %conv, i32* %size_flags, align 4, !dbg !11205
  %11 = load i32, i32* %psize, align 4, !dbg !11206
  %cmp4 = icmp eq i32 %11, 0, !dbg !11208
  br i1 %cmp4, label %if.then9, label %lor.lhs.false, !dbg !11209

lor.lhs.false:                                    ; preds = %if.end3
  %12 = load i32, i32* %size_flags, align 4, !dbg !11210
  %13 = load i32, i32* %psize, align 4, !dbg !11211
  %and6 = and i32 %12, %13, !dbg !11212
  %14 = load i32, i32* %psize, align 4, !dbg !11213
  %cmp7 = icmp ne i32 %and6, %14, !dbg !11214
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !11215

if.then9:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11216
  br label %return, !dbg !11216

if.end10:                                         ; preds = %lor.lhs.false
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11218
  %flag11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 5, !dbg !11220
  %16 = load i32, i32* %flag11, align 8, !dbg !11220
  %and12 = and i32 %16, 2097152, !dbg !11221
  %tobool13 = icmp ne i32 %and12, 0, !dbg !11221
  br i1 %tobool13, label %if.then14, label %if.end51, !dbg !11222

if.then14:                                        ; preds = %if.end10
  call void @llvm.dbg.declare(metadata i32* %frameno, metadata !11223, metadata !DIExpression()), !dbg !11225
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11226
  %18 = load i32, i32* %cfra.addr, align 4, !dbg !11227
  %conv15 = sitofp i32 %18 to float, !dbg !11227
  %call16 = call float @give_stripelem_index(%struct.Sequence* %17, float %conv15), !dbg !11228
  %conv17 = fptosi float %call16 to i32, !dbg !11229
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11230
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 44, !dbg !11231
  %20 = load i32, i32* %anim_startofs, align 8, !dbg !11231
  %add = add nsw i32 %conv17, %20, !dbg !11232
  store i32 %add, i32* %frameno, align 4, !dbg !11225
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11233
  %strip18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 24, !dbg !11235
  %22 = load %struct.Strip*, %struct.Strip** %strip18, align 8, !dbg !11235
  %proxy19 = getelementptr inbounds %struct.Strip, %struct.Strip* %22, i32 0, i32 8, !dbg !11236
  %23 = load %struct.StripProxy*, %struct.StripProxy** %proxy19, align 8, !dbg !11236
  %anim = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %23, i32 0, i32 2, !dbg !11237
  %24 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !11237
  %cmp20 = icmp eq %struct.anim* %24, null, !dbg !11238
  br i1 %cmp20, label %if.then22, label %if.end34, !dbg !11239

if.then22:                                        ; preds = %if.then14
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11240
  %26 = load i32, i32* %cfra.addr, align 4, !dbg !11243
  %27 = load i32, i32* %render_size, align 4, !dbg !11244
  %arraydecay = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !11245
  %call23 = call zeroext i8 @seq_proxy_get_fname(%struct.Sequence* %25, i32 %26, i32 %27, i8* %arraydecay), !dbg !11246
  %conv24 = zext i8 %call23 to i32, !dbg !11246
  %cmp25 = icmp eq i32 %conv24, 0, !dbg !11247
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !11248

if.then27:                                        ; preds = %if.then22
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11249
  br label %return, !dbg !11249

if.end28:                                         ; preds = %if.then22
  %arraydecay29 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !11251
  %call30 = call %struct.anim* @openanim(i8* %arraydecay29, i32 1, i32 0, i8* null), !dbg !11252
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11253
  %strip31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 24, !dbg !11254
  %29 = load %struct.Strip*, %struct.Strip** %strip31, align 8, !dbg !11254
  %proxy32 = getelementptr inbounds %struct.Strip, %struct.Strip* %29, i32 0, i32 8, !dbg !11255
  %30 = load %struct.StripProxy*, %struct.StripProxy** %proxy32, align 8, !dbg !11255
  %anim33 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %30, i32 0, i32 2, !dbg !11256
  store %struct.anim* %call30, %struct.anim** %anim33, align 8, !dbg !11257
  br label %if.end34, !dbg !11258

if.end34:                                         ; preds = %if.end28, %if.then14
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11259
  %strip35 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 24, !dbg !11261
  %32 = load %struct.Strip*, %struct.Strip** %strip35, align 8, !dbg !11261
  %proxy36 = getelementptr inbounds %struct.Strip, %struct.Strip* %32, i32 0, i32 8, !dbg !11262
  %33 = load %struct.StripProxy*, %struct.StripProxy** %proxy36, align 8, !dbg !11262
  %anim37 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %33, i32 0, i32 2, !dbg !11263
  %34 = load %struct.anim*, %struct.anim** %anim37, align 8, !dbg !11263
  %cmp38 = icmp eq %struct.anim* %34, null, !dbg !11264
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !11265

if.then40:                                        ; preds = %if.end34
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11266
  br label %return, !dbg !11266

if.end41:                                         ; preds = %if.end34
  %35 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11268
  call void @seq_open_anim_file(%struct.Sequence* %35), !dbg !11269
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11270
  %anim42 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 30, !dbg !11271
  %37 = load %struct.anim*, %struct.anim** %anim42, align 8, !dbg !11271
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11272
  %strip43 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 24, !dbg !11273
  %39 = load %struct.Strip*, %struct.Strip** %strip43, align 8, !dbg !11273
  %proxy44 = getelementptr inbounds %struct.Strip, %struct.Strip* %39, i32 0, i32 8, !dbg !11274
  %40 = load %struct.StripProxy*, %struct.StripProxy** %proxy44, align 8, !dbg !11274
  %tc = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %40, i32 0, i32 3, !dbg !11275
  %41 = load i16, i16* %tc, align 8, !dbg !11275
  %conv45 = sext i16 %41 to i32, !dbg !11272
  %42 = load i32, i32* %frameno, align 4, !dbg !11276
  %call46 = call i32 @IMB_anim_index_get_frame_index(%struct.anim* %37, i32 %conv45, i32 %42), !dbg !11277
  store i32 %call46, i32* %frameno, align 4, !dbg !11278
  %43 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11279
  %strip47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 24, !dbg !11280
  %44 = load %struct.Strip*, %struct.Strip** %strip47, align 8, !dbg !11280
  %proxy48 = getelementptr inbounds %struct.Strip, %struct.Strip* %44, i32 0, i32 8, !dbg !11281
  %45 = load %struct.StripProxy*, %struct.StripProxy** %proxy48, align 8, !dbg !11281
  %anim49 = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %45, i32 0, i32 2, !dbg !11282
  %46 = load %struct.anim*, %struct.anim** %anim49, align 8, !dbg !11282
  %47 = load i32, i32* %frameno, align 4, !dbg !11283
  %call50 = call %struct.ImBuf* @IMB_anim_absolute(%struct.anim* %46, i32 %47, i32 0, i32 0), !dbg !11284
  store %struct.ImBuf* %call50, %struct.ImBuf** %retval, align 8, !dbg !11285
  br label %return, !dbg !11285

if.end51:                                         ; preds = %if.end10
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11286
  %49 = load i32, i32* %cfra.addr, align 4, !dbg !11288
  %50 = load i32, i32* %render_size, align 4, !dbg !11289
  %arraydecay52 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !11290
  %call53 = call zeroext i8 @seq_proxy_get_fname(%struct.Sequence* %48, i32 %49, i32 %50, i8* %arraydecay52), !dbg !11291
  %conv54 = zext i8 %call53 to i32, !dbg !11291
  %cmp55 = icmp eq i32 %conv54, 0, !dbg !11292
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !11293

if.then57:                                        ; preds = %if.end51
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11294
  br label %return, !dbg !11294

if.end58:                                         ; preds = %if.end51
  %arraydecay59 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !11296
  %call60 = call i32 @BLI_exists(i8* %arraydecay59), !dbg !11298
  %tobool61 = icmp ne i32 %call60, 0, !dbg !11298
  br i1 %tobool61, label %if.then62, label %if.else, !dbg !11299

if.then62:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !11300, metadata !DIExpression()), !dbg !11302
  %arraydecay63 = getelementptr inbounds [1792 x i8], [1792 x i8]* %name, i64 0, i64 0, !dbg !11303
  %call64 = call %struct.ImBuf* @IMB_loadiffname(i8* %arraydecay63, i32 1, i8* null), !dbg !11304
  store %struct.ImBuf* %call64, %struct.ImBuf** %ibuf, align 8, !dbg !11302
  %51 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11305
  %tobool65 = icmp ne %struct.ImBuf* %51, null, !dbg !11305
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !11307

if.then66:                                        ; preds = %if.then62
  %52 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11308
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %52, i32 0, i32 2, !dbg !11309
  %53 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11309
  %54 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11310
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %53, %struct.ImBuf* %54), !dbg !11311
  br label %if.end67, !dbg !11311

if.end67:                                         ; preds = %if.then66, %if.then62
  %55 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11312
  store %struct.ImBuf* %55, %struct.ImBuf** %retval, align 8, !dbg !11313
  br label %return, !dbg !11313

if.else:                                          ; preds = %if.end58
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !11314
  br label %return, !dbg !11314

return:                                           ; preds = %if.else, %if.end67, %if.then57, %if.end41, %if.then40, %if.then27, %if.then9, %if.then2
  %56 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !11316
  ret %struct.ImBuf* %56, !dbg !11316
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @do_render_strip_uncached(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra) #0 !dbg !11317 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  %nr = alloca float, align 4
  %type = alloca i32, align 4
  %use_preprocess = alloca i8, align 1
  %name = alloca [1024 x i8], align 16
  %meta_ibuf = alloca %struct.ImBuf*, align 8
  %i = alloca %struct.ImBuf*, align 8
  %child_ibuf = alloca %struct.ImBuf*, align 8
  %f_cfra = alloca float, align 4
  %s = alloca %struct.SpeedControlVars*, align 8
  %i31 = alloca %struct.ImBuf*, align 8
  %s_elem = alloca %struct.StripElem*, align 8
  %flag = alloca i32, align 4
  %i120 = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !11318, metadata !DIExpression()), !dbg !11319
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !11320, metadata !DIExpression()), !dbg !11321
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !11322, metadata !DIExpression()), !dbg !11323
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !11324, metadata !DIExpression()), !dbg !11325
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !11325
  call void @llvm.dbg.declare(metadata float* %nr, metadata !11326, metadata !DIExpression()), !dbg !11327
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11328
  %1 = load float, float* %cfra.addr, align 4, !dbg !11329
  %call = call float @give_stripelem_index(%struct.Sequence* %0, float %1), !dbg !11330
  store float %call, float* %nr, align 4, !dbg !11327
  call void @llvm.dbg.declare(metadata i32* %type, metadata !11331, metadata !DIExpression()), !dbg !11332
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11333
  %type1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 6, !dbg !11334
  %3 = load i32, i32* %type1, align 4, !dbg !11334
  %and = and i32 %3, 8, !dbg !11335
  %tobool = icmp ne i32 %and, 0, !dbg !11335
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !11336

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11337
  %type2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !11338
  %5 = load i32, i32* %type2, align 4, !dbg !11338
  %cmp = icmp ne i32 %5, 29, !dbg !11339
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11340

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !11340

cond.false:                                       ; preds = %land.lhs.true, %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11341
  %type3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !11342
  %7 = load i32, i32* %type3, align 4, !dbg !11342
  br label %cond.end, !dbg !11340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 8, %cond.true ], [ %7, %cond.false ], !dbg !11340
  store i32 %cond, i32* %type, align 4, !dbg !11332
  call void @llvm.dbg.declare(metadata i8* %use_preprocess, metadata !11343, metadata !DIExpression()), !dbg !11344
  %8 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11345
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11346
  %10 = load float, float* %cfra.addr, align 4, !dbg !11347
  %call4 = call zeroext i8 @BKE_sequencer_input_have_to_preprocess(%struct.SeqRenderData* %8, %struct.Sequence* %9, float %10), !dbg !11348
  store i8 %call4, i8* %use_preprocess, align 1, !dbg !11344
  call void @llvm.dbg.declare(metadata [1024 x i8]* %name, metadata !11349, metadata !DIExpression()), !dbg !11350
  %11 = load i32, i32* %type, align 4, !dbg !11351
  switch i32 %11, label %sw.epilog [
    i32 1, label %sw.bb
    i32 29, label %sw.bb18
    i32 8, label %sw.bb35
    i32 0, label %sw.bb40
    i32 3, label %sw.bb74
    i32 2, label %sw.bb113
    i32 6, label %sw.bb116
    i32 7, label %sw.bb128
  ], !dbg !11352

sw.bb:                                            ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %meta_ibuf, metadata !11353, metadata !DIExpression()), !dbg !11356
  store %struct.ImBuf* null, %struct.ImBuf** %meta_ibuf, align 8, !dbg !11356
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11357
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 36, !dbg !11359
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !11360
  %13 = load i8*, i8** %first, align 8, !dbg !11360
  %tobool5 = icmp ne i8* %13, null, !dbg !11357
  br i1 %tobool5, label %if.then, label %if.end, !dbg !11361

if.then:                                          ; preds = %sw.bb
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11362
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11363
  %seqbase6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 36, !dbg !11364
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11365
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 8, !dbg !11366
  %17 = load i32, i32* %start, align 4, !dbg !11366
  %conv = sitofp i32 %17 to float, !dbg !11365
  %18 = load float, float* %nr, align 4, !dbg !11367
  %add = fadd float %conv, %18, !dbg !11368
  %call7 = call %struct.ImBuf* @seq_render_strip_stack(%struct.SeqRenderData* %14, %struct.ListBase* %seqbase6, float %add, i32 0), !dbg !11369
  store %struct.ImBuf* %call7, %struct.ImBuf** %meta_ibuf, align 8, !dbg !11370
  br label %if.end, !dbg !11371

if.end:                                           ; preds = %if.then, %sw.bb
  %19 = load %struct.ImBuf*, %struct.ImBuf** %meta_ibuf, align 8, !dbg !11372
  %tobool8 = icmp ne %struct.ImBuf* %19, null, !dbg !11372
  br i1 %tobool8, label %if.then9, label %if.end17, !dbg !11374

if.then9:                                         ; preds = %if.end
  %20 = load %struct.ImBuf*, %struct.ImBuf** %meta_ibuf, align 8, !dbg !11375
  store %struct.ImBuf* %20, %struct.ImBuf** %ibuf, align 8, !dbg !11377
  %21 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11378
  %tobool10 = icmp ne %struct.ImBuf* %21, null, !dbg !11378
  br i1 %tobool10, label %land.lhs.true11, label %if.end16, !dbg !11380

land.lhs.true11:                                  ; preds = %if.then9
  %22 = load i8, i8* %use_preprocess, align 1, !dbg !11381
  %conv12 = zext i8 %22 to i32, !dbg !11381
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !11381
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !11382

if.then14:                                        ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %i, metadata !11383, metadata !DIExpression()), !dbg !11385
  %23 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11386
  %call15 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %23), !dbg !11387
  store %struct.ImBuf* %call15, %struct.ImBuf** %i, align 8, !dbg !11385
  %24 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11388
  call void @IMB_freeImBuf(%struct.ImBuf* %24), !dbg !11389
  %25 = load %struct.ImBuf*, %struct.ImBuf** %i, align 8, !dbg !11390
  store %struct.ImBuf* %25, %struct.ImBuf** %ibuf, align 8, !dbg !11391
  br label %if.end16, !dbg !11392

if.end16:                                         ; preds = %if.then14, %land.lhs.true11, %if.then9
  br label %if.end17, !dbg !11393

if.end17:                                         ; preds = %if.end16, %if.end
  br label %sw.epilog, !dbg !11394

sw.bb18:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %child_ibuf, metadata !11395, metadata !DIExpression()), !dbg !11397
  store %struct.ImBuf* null, %struct.ImBuf** %child_ibuf, align 8, !dbg !11397
  call void @llvm.dbg.declare(metadata float* %f_cfra, metadata !11398, metadata !DIExpression()), !dbg !11399
  call void @llvm.dbg.declare(metadata %struct.SpeedControlVars** %s, metadata !11400, metadata !DIExpression()), !dbg !11401
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11402
  %effectdata = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 43, !dbg !11403
  %27 = load i8*, i8** %effectdata, align 8, !dbg !11403
  %28 = bitcast i8* %27 to %struct.SpeedControlVars*, !dbg !11404
  store %struct.SpeedControlVars* %28, %struct.SpeedControlVars** %s, align 8, !dbg !11401
  %29 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11405
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %29, i32 0, i32 2, !dbg !11406
  %30 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11406
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11407
  call void @BKE_sequence_effect_speed_rebuild_map(%struct.Scene* %30, %struct.Sequence* %31, i8 zeroext 0), !dbg !11408
  %32 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11409
  %start19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 8, !dbg !11410
  %33 = load i32, i32* %start19, align 4, !dbg !11410
  %conv20 = sitofp i32 %33 to float, !dbg !11409
  %34 = load %struct.SpeedControlVars*, %struct.SpeedControlVars** %s, align 8, !dbg !11411
  %frameMap = getelementptr inbounds %struct.SpeedControlVars, %struct.SpeedControlVars* %34, i32 0, i32 0, !dbg !11412
  %35 = load float*, float** %frameMap, align 8, !dbg !11412
  %36 = load float, float* %nr, align 4, !dbg !11413
  %conv21 = fptosi float %36 to i32, !dbg !11414
  %idxprom = sext i32 %conv21 to i64, !dbg !11411
  %arrayidx = getelementptr inbounds float, float* %35, i64 %idxprom, !dbg !11411
  %37 = load float, float* %arrayidx, align 4, !dbg !11411
  %add22 = fadd float %conv20, %37, !dbg !11415
  store float %add22, float* %f_cfra, align 4, !dbg !11416
  %38 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11417
  %39 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11418
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 33, !dbg !11419
  %40 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !11419
  %41 = load float, float* %f_cfra, align 4, !dbg !11420
  %call23 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %38, %struct.Sequence* %40, float %41), !dbg !11421
  store %struct.ImBuf* %call23, %struct.ImBuf** %child_ibuf, align 8, !dbg !11422
  %42 = load %struct.ImBuf*, %struct.ImBuf** %child_ibuf, align 8, !dbg !11423
  %tobool24 = icmp ne %struct.ImBuf* %42, null, !dbg !11423
  br i1 %tobool24, label %if.then25, label %if.end34, !dbg !11425

if.then25:                                        ; preds = %sw.bb18
  %43 = load %struct.ImBuf*, %struct.ImBuf** %child_ibuf, align 8, !dbg !11426
  store %struct.ImBuf* %43, %struct.ImBuf** %ibuf, align 8, !dbg !11428
  %44 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11429
  %tobool26 = icmp ne %struct.ImBuf* %44, null, !dbg !11429
  br i1 %tobool26, label %land.lhs.true27, label %if.end33, !dbg !11431

land.lhs.true27:                                  ; preds = %if.then25
  %45 = load i8, i8* %use_preprocess, align 1, !dbg !11432
  %conv28 = zext i8 %45 to i32, !dbg !11432
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !11432
  br i1 %tobool29, label %if.then30, label %if.end33, !dbg !11433

if.then30:                                        ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %i31, metadata !11434, metadata !DIExpression()), !dbg !11436
  %46 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11437
  %call32 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %46), !dbg !11438
  store %struct.ImBuf* %call32, %struct.ImBuf** %i31, align 8, !dbg !11436
  %47 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11439
  call void @IMB_freeImBuf(%struct.ImBuf* %47), !dbg !11440
  %48 = load %struct.ImBuf*, %struct.ImBuf** %i31, align 8, !dbg !11441
  store %struct.ImBuf* %48, %struct.ImBuf** %ibuf, align 8, !dbg !11442
  br label %if.end33, !dbg !11443

if.end33:                                         ; preds = %if.then30, %land.lhs.true27, %if.then25
  br label %if.end34, !dbg !11444

if.end34:                                         ; preds = %if.end33, %sw.bb18
  br label %sw.epilog, !dbg !11445

sw.bb35:                                          ; preds = %cond.end
  %49 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11446
  %50 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11448
  %51 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11449
  %start36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 8, !dbg !11450
  %52 = load i32, i32* %start36, align 4, !dbg !11450
  %conv37 = sitofp i32 %52 to float, !dbg !11449
  %53 = load float, float* %nr, align 4, !dbg !11451
  %add38 = fadd float %conv37, %53, !dbg !11452
  %call39 = call %struct.ImBuf* @seq_render_effect_strip_impl(%struct.SeqRenderData* %49, %struct.Sequence* %50, float %add38), !dbg !11453
  store %struct.ImBuf* %call39, %struct.ImBuf** %ibuf, align 8, !dbg !11454
  br label %sw.epilog, !dbg !11455

sw.bb40:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.StripElem** %s_elem, metadata !11456, metadata !DIExpression()), !dbg !11458
  %54 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11459
  %55 = load float, float* %cfra.addr, align 4, !dbg !11460
  %conv41 = fptosi float %55 to i32, !dbg !11460
  %call42 = call %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence* %54, i32 %conv41), !dbg !11461
  store %struct.StripElem* %call42, %struct.StripElem** %s_elem, align 8, !dbg !11458
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !11462, metadata !DIExpression()), !dbg !11463
  %56 = load %struct.StripElem*, %struct.StripElem** %s_elem, align 8, !dbg !11464
  %tobool43 = icmp ne %struct.StripElem* %56, null, !dbg !11464
  br i1 %tobool43, label %if.then44, label %if.end52, !dbg !11466

if.then44:                                        ; preds = %sw.bb40
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !11467
  %57 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11469
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %57, i32 0, i32 24, !dbg !11470
  %58 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !11470
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %58, i32 0, i32 7, !dbg !11471
  %arraydecay45 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !11469
  %59 = load %struct.StripElem*, %struct.StripElem** %s_elem, align 8, !dbg !11472
  %name46 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %59, i32 0, i32 0, !dbg !11473
  %arraydecay47 = getelementptr inbounds [256 x i8], [256 x i8]* %name46, i64 0, i64 0, !dbg !11472
  call void @BLI_join_dirfile(i8* %arraydecay, i64 1024, i8* %arraydecay45, i8* %arraydecay47), !dbg !11474
  %arraydecay48 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !11475
  %60 = load %struct.Main*, %struct.Main** getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 0), align 8, !dbg !11476
  %name49 = getelementptr inbounds %struct.Main, %struct.Main* %60, i32 0, i32 2, !dbg !11477
  %arraydecay50 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name49, i64 0, i64 0, !dbg !11478
  %call51 = call zeroext i8 @BLI_path_abs(i8* %arraydecay48, i8* %arraydecay50), !dbg !11479
  br label %if.end52, !dbg !11480

if.end52:                                         ; preds = %if.then44, %sw.bb40
  store i32 1, i32* %flag, align 4, !dbg !11481
  %61 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11482
  %alpha_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %61, i32 0, i32 49, !dbg !11484
  %62 = load i8, i8* %alpha_mode, align 4, !dbg !11484
  %conv53 = zext i8 %62 to i32, !dbg !11482
  %cmp54 = icmp eq i32 %conv53, 1, !dbg !11485
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !11486

if.then56:                                        ; preds = %if.end52
  %63 = load i32, i32* %flag, align 4, !dbg !11487
  %or = or i32 %63, 4096, !dbg !11487
  store i32 %or, i32* %flag, align 4, !dbg !11487
  br label %if.end57, !dbg !11488

if.end57:                                         ; preds = %if.then56, %if.end52
  %64 = load %struct.StripElem*, %struct.StripElem** %s_elem, align 8, !dbg !11489
  %tobool58 = icmp ne %struct.StripElem* %64, null, !dbg !11489
  br i1 %tobool58, label %land.lhs.true59, label %if.end73, !dbg !11491

land.lhs.true59:                                  ; preds = %if.end57
  %arraydecay60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !11492
  %65 = load i32, i32* %flag, align 4, !dbg !11493
  %66 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11494
  %strip61 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 24, !dbg !11495
  %67 = load %struct.Strip*, %struct.Strip** %strip61, align 8, !dbg !11495
  %colorspace_settings = getelementptr inbounds %struct.Strip, %struct.Strip* %67, i32 0, i32 12, !dbg !11496
  %name62 = getelementptr inbounds %struct.ColorManagedColorspaceSettings, %struct.ColorManagedColorspaceSettings* %colorspace_settings, i32 0, i32 0, !dbg !11497
  %arraydecay63 = getelementptr inbounds [64 x i8], [64 x i8]* %name62, i64 0, i64 0, !dbg !11494
  %call64 = call %struct.ImBuf* @IMB_loadiffname(i8* %arraydecay60, i32 %65, i8* %arraydecay63), !dbg !11498
  store %struct.ImBuf* %call64, %struct.ImBuf** %ibuf, align 8, !dbg !11499
  %tobool65 = icmp ne %struct.ImBuf* %call64, null, !dbg !11499
  br i1 %tobool65, label %if.then66, label %if.end73, !dbg !11500

if.then66:                                        ; preds = %land.lhs.true59
  %68 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11501
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %68, i32 0, i32 9, !dbg !11504
  %69 = load float*, float** %rect_float, align 8, !dbg !11504
  %tobool67 = icmp ne float* %69, null, !dbg !11501
  br i1 %tobool67, label %land.lhs.true68, label %if.end71, !dbg !11505

land.lhs.true68:                                  ; preds = %if.then66
  %70 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11506
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %70, i32 0, i32 8, !dbg !11507
  %71 = load i32*, i32** %rect, align 8, !dbg !11507
  %tobool69 = icmp ne i32* %71, null, !dbg !11506
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !11508

if.then70:                                        ; preds = %land.lhs.true68
  %72 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11509
  call void @imb_freerectImBuf(%struct.ImBuf* %72), !dbg !11510
  br label %if.end71, !dbg !11510

if.end71:                                         ; preds = %if.then70, %land.lhs.true68, %if.then66
  %73 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11511
  %scene72 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %73, i32 0, i32 2, !dbg !11512
  %74 = load %struct.Scene*, %struct.Scene** %scene72, align 8, !dbg !11512
  %75 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11513
  call void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %74, %struct.ImBuf* %75, i8 zeroext 0), !dbg !11514
  %76 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11515
  %77 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11516
  %78 = load float, float* %nr, align 4, !dbg !11517
  %79 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11518
  call void @copy_to_ibuf_still(%struct.SeqRenderData* %76, %struct.Sequence* %77, float %78, %struct.ImBuf* %79), !dbg !11519
  %80 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11520
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %80, i32 0, i32 2, !dbg !11521
  %81 = load i32, i32* %x, align 8, !dbg !11521
  %82 = load %struct.StripElem*, %struct.StripElem** %s_elem, align 8, !dbg !11522
  %orig_width = getelementptr inbounds %struct.StripElem, %struct.StripElem* %82, i32 0, i32 1, !dbg !11523
  store i32 %81, i32* %orig_width, align 4, !dbg !11524
  %83 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11525
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %83, i32 0, i32 3, !dbg !11526
  %84 = load i32, i32* %y, align 4, !dbg !11526
  %85 = load %struct.StripElem*, %struct.StripElem** %s_elem, align 8, !dbg !11527
  %orig_height = getelementptr inbounds %struct.StripElem, %struct.StripElem* %85, i32 0, i32 2, !dbg !11528
  store i32 %84, i32* %orig_height, align 4, !dbg !11529
  br label %if.end73, !dbg !11530

if.end73:                                         ; preds = %if.end71, %land.lhs.true59, %if.end57
  br label %sw.epilog, !dbg !11531

sw.bb74:                                          ; preds = %cond.end
  %86 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11532
  call void @seq_open_anim_file(%struct.Sequence* %86), !dbg !11534
  %87 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11535
  %anim = getelementptr inbounds %struct.Sequence, %struct.Sequence* %87, i32 0, i32 30, !dbg !11537
  %88 = load %struct.anim*, %struct.anim** %anim, align 8, !dbg !11537
  %tobool75 = icmp ne %struct.anim* %88, null, !dbg !11535
  br i1 %tobool75, label %if.then76, label %if.end112, !dbg !11538

if.then76:                                        ; preds = %sw.bb74
  %89 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11539
  %anim77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %89, i32 0, i32 30, !dbg !11541
  %90 = load %struct.anim*, %struct.anim** %anim77, align 8, !dbg !11541
  %91 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11542
  %anim_preseek = getelementptr inbounds %struct.Sequence, %struct.Sequence* %91, i32 0, i32 20, !dbg !11543
  %92 = load i16, i16* %anim_preseek, align 4, !dbg !11543
  %conv78 = sext i16 %92 to i32, !dbg !11542
  call void @IMB_anim_set_preseek(%struct.anim* %90, i32 %conv78), !dbg !11544
  %93 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11545
  %anim79 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %93, i32 0, i32 30, !dbg !11546
  %94 = load %struct.anim*, %struct.anim** %anim79, align 8, !dbg !11546
  %95 = load float, float* %nr, align 4, !dbg !11547
  %96 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11548
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %96, i32 0, i32 44, !dbg !11549
  %97 = load i32, i32* %anim_startofs, align 8, !dbg !11549
  %conv80 = sitofp i32 %97 to float, !dbg !11548
  %add81 = fadd float %95, %conv80, !dbg !11550
  %conv82 = fptosi float %add81 to i32, !dbg !11547
  %98 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11551
  %strip83 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %98, i32 0, i32 24, !dbg !11552
  %99 = load %struct.Strip*, %struct.Strip** %strip83, align 8, !dbg !11552
  %proxy = getelementptr inbounds %struct.Strip, %struct.Strip* %99, i32 0, i32 8, !dbg !11553
  %100 = load %struct.StripProxy*, %struct.StripProxy** %proxy, align 8, !dbg !11553
  %tobool84 = icmp ne %struct.StripProxy* %100, null, !dbg !11551
  br i1 %tobool84, label %cond.true85, label %cond.false89, !dbg !11551

cond.true85:                                      ; preds = %if.then76
  %101 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11554
  %strip86 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %101, i32 0, i32 24, !dbg !11555
  %102 = load %struct.Strip*, %struct.Strip** %strip86, align 8, !dbg !11555
  %proxy87 = getelementptr inbounds %struct.Strip, %struct.Strip* %102, i32 0, i32 8, !dbg !11556
  %103 = load %struct.StripProxy*, %struct.StripProxy** %proxy87, align 8, !dbg !11556
  %tc = getelementptr inbounds %struct.StripProxy, %struct.StripProxy* %103, i32 0, i32 3, !dbg !11557
  %104 = load i16, i16* %tc, align 8, !dbg !11557
  %conv88 = sext i16 %104 to i32, !dbg !11554
  br label %cond.end90, !dbg !11551

cond.false89:                                     ; preds = %if.then76
  br label %cond.end90, !dbg !11551

cond.end90:                                       ; preds = %cond.false89, %cond.true85
  %cond91 = phi i32 [ %conv88, %cond.true85 ], [ 1, %cond.false89 ], !dbg !11551
  %105 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11558
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %105, i32 0, i32 5, !dbg !11559
  %106 = load i32, i32* %preview_render_size, align 8, !dbg !11559
  %call92 = call i32 @seq_rendersize_to_proxysize(i32 %106), !dbg !11560
  %call93 = call %struct.ImBuf* @IMB_anim_absolute(%struct.anim* %94, i32 %conv82, i32 %cond91, i32 %call92), !dbg !11561
  store %struct.ImBuf* %call93, %struct.ImBuf** %ibuf, align 8, !dbg !11562
  %107 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11563
  %tobool94 = icmp ne %struct.ImBuf* %107, null, !dbg !11563
  br i1 %tobool94, label %if.then95, label %if.end111, !dbg !11565

if.then95:                                        ; preds = %cond.end90
  %108 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11566
  %scene96 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %108, i32 0, i32 2, !dbg !11568
  %109 = load %struct.Scene*, %struct.Scene** %scene96, align 8, !dbg !11568
  %110 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11569
  call void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %109, %struct.ImBuf* %110, i8 zeroext 0), !dbg !11570
  %111 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11571
  %rect_float97 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %111, i32 0, i32 9, !dbg !11573
  %112 = load float*, float** %rect_float97, align 8, !dbg !11573
  %tobool98 = icmp ne float* %112, null, !dbg !11571
  br i1 %tobool98, label %land.lhs.true99, label %if.end103, !dbg !11574

land.lhs.true99:                                  ; preds = %if.then95
  %113 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11575
  %rect100 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %113, i32 0, i32 8, !dbg !11576
  %114 = load i32*, i32** %rect100, align 8, !dbg !11576
  %tobool101 = icmp ne i32* %114, null, !dbg !11575
  br i1 %tobool101, label %if.then102, label %if.end103, !dbg !11577

if.then102:                                       ; preds = %land.lhs.true99
  %115 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11578
  call void @imb_freerectImBuf(%struct.ImBuf* %115), !dbg !11580
  br label %if.end103, !dbg !11581

if.end103:                                        ; preds = %if.then102, %land.lhs.true99, %if.then95
  %116 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11582
  %x104 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %116, i32 0, i32 2, !dbg !11583
  %117 = load i32, i32* %x104, align 8, !dbg !11583
  %118 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11584
  %strip105 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 24, !dbg !11585
  %119 = load %struct.Strip*, %struct.Strip** %strip105, align 8, !dbg !11585
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %119, i32 0, i32 6, !dbg !11586
  %120 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !11586
  %orig_width106 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %120, i32 0, i32 1, !dbg !11587
  store i32 %117, i32* %orig_width106, align 4, !dbg !11588
  %121 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11589
  %y107 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %121, i32 0, i32 3, !dbg !11590
  %122 = load i32, i32* %y107, align 4, !dbg !11590
  %123 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11591
  %strip108 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %123, i32 0, i32 24, !dbg !11592
  %124 = load %struct.Strip*, %struct.Strip** %strip108, align 8, !dbg !11592
  %stripdata109 = getelementptr inbounds %struct.Strip, %struct.Strip* %124, i32 0, i32 6, !dbg !11593
  %125 = load %struct.StripElem*, %struct.StripElem** %stripdata109, align 8, !dbg !11593
  %orig_height110 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %125, i32 0, i32 2, !dbg !11594
  store i32 %122, i32* %orig_height110, align 4, !dbg !11595
  br label %if.end111, !dbg !11596

if.end111:                                        ; preds = %if.end103, %cond.end90
  br label %if.end112, !dbg !11597

if.end112:                                        ; preds = %if.end111, %sw.bb74
  %126 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11598
  %127 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11599
  %128 = load float, float* %nr, align 4, !dbg !11600
  %129 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11601
  call void @copy_to_ibuf_still(%struct.SeqRenderData* %126, %struct.Sequence* %127, float %128, %struct.ImBuf* %129), !dbg !11602
  br label %sw.epilog, !dbg !11603

sw.bb113:                                         ; preds = %cond.end
  %130 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11604
  %131 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11606
  %132 = load float, float* %nr, align 4, !dbg !11607
  %call114 = call %struct.ImBuf* @seq_render_scene_strip(%struct.SeqRenderData* %130, %struct.Sequence* %131, float %132), !dbg !11608
  store %struct.ImBuf* %call114, %struct.ImBuf** %ibuf, align 8, !dbg !11609
  %133 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11610
  %bmain = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %133, i32 0, i32 1, !dbg !11611
  %134 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !11611
  %135 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11612
  %scene115 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %135, i32 0, i32 2, !dbg !11613
  %136 = load %struct.Scene*, %struct.Scene** %scene115, align 8, !dbg !11613
  %137 = load float, float* %cfra.addr, align 4, !dbg !11614
  call void @BKE_animsys_evaluate_all_animation(%struct.Main* %134, %struct.Scene* %136, float %137), !dbg !11615
  %138 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11616
  %139 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11617
  %140 = load float, float* %nr, align 4, !dbg !11618
  %141 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11619
  call void @copy_to_ibuf_still(%struct.SeqRenderData* %138, %struct.Sequence* %139, float %140, %struct.ImBuf* %141), !dbg !11620
  br label %sw.epilog, !dbg !11621

sw.bb116:                                         ; preds = %cond.end
  %142 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11622
  %143 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11624
  %144 = load float, float* %nr, align 4, !dbg !11625
  %call117 = call %struct.ImBuf* @seq_render_movieclip_strip(%struct.SeqRenderData* %142, %struct.Sequence* %143, float %144), !dbg !11626
  store %struct.ImBuf* %call117, %struct.ImBuf** %ibuf, align 8, !dbg !11627
  %145 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11628
  %tobool118 = icmp ne %struct.ImBuf* %145, null, !dbg !11628
  br i1 %tobool118, label %if.then119, label %if.end127, !dbg !11630

if.then119:                                       ; preds = %sw.bb116
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %i120, metadata !11631, metadata !DIExpression()), !dbg !11633
  %146 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11634
  %call121 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %146), !dbg !11635
  store %struct.ImBuf* %call121, %struct.ImBuf** %i120, align 8, !dbg !11633
  %147 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11636
  call void @IMB_freeImBuf(%struct.ImBuf* %147), !dbg !11637
  %148 = load %struct.ImBuf*, %struct.ImBuf** %i120, align 8, !dbg !11638
  store %struct.ImBuf* %148, %struct.ImBuf** %ibuf, align 8, !dbg !11639
  %149 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11640
  %rect_float122 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %149, i32 0, i32 9, !dbg !11642
  %150 = load float*, float** %rect_float122, align 8, !dbg !11642
  %tobool123 = icmp ne float* %150, null, !dbg !11640
  br i1 %tobool123, label %if.then124, label %if.end126, !dbg !11643

if.then124:                                       ; preds = %if.then119
  %151 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11644
  %scene125 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %151, i32 0, i32 2, !dbg !11645
  %152 = load %struct.Scene*, %struct.Scene** %scene125, align 8, !dbg !11645
  %153 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11646
  call void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %152, %struct.ImBuf* %153, i8 zeroext 0), !dbg !11647
  br label %if.end126, !dbg !11647

if.end126:                                        ; preds = %if.then124, %if.then119
  %154 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11648
  %155 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11649
  %156 = load float, float* %nr, align 4, !dbg !11650
  %157 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11651
  call void @copy_to_ibuf_still(%struct.SeqRenderData* %154, %struct.Sequence* %155, float %156, %struct.ImBuf* %157), !dbg !11652
  br label %if.end127, !dbg !11653

if.end127:                                        ; preds = %if.end126, %sw.bb116
  br label %sw.epilog, !dbg !11654

sw.bb128:                                         ; preds = %cond.end
  %158 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11655
  %159 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11657
  %160 = load float, float* %nr, align 4, !dbg !11658
  %call129 = call %struct.ImBuf* @seq_render_mask_strip(%struct.SeqRenderData* %158, %struct.Sequence* %159, float %160), !dbg !11659
  store %struct.ImBuf* %call129, %struct.ImBuf** %ibuf, align 8, !dbg !11660
  %161 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11661
  %162 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11662
  %163 = load float, float* %nr, align 4, !dbg !11663
  %164 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11664
  call void @copy_to_ibuf_still(%struct.SeqRenderData* %161, %struct.Sequence* %162, float %163, %struct.ImBuf* %164), !dbg !11665
  br label %sw.epilog, !dbg !11666

sw.epilog:                                        ; preds = %cond.end, %sw.bb128, %if.end127, %sw.bb113, %if.end112, %if.end73, %sw.bb35, %if.end34, %if.end17
  %165 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11667
  %tobool130 = icmp ne %struct.ImBuf* %165, null, !dbg !11667
  br i1 %tobool130, label %if.then131, label %if.end133, !dbg !11669

if.then131:                                       ; preds = %sw.epilog
  %166 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11670
  %scene132 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %166, i32 0, i32 2, !dbg !11671
  %167 = load %struct.Scene*, %struct.Scene** %scene132, align 8, !dbg !11671
  %168 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11672
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %167, %struct.ImBuf* %168), !dbg !11673
  br label %if.end133, !dbg !11673

if.end133:                                        ; preds = %if.then131, %sw.epilog
  %169 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !11674
  ret %struct.ImBuf* %169, !dbg !11675
}

declare dso_local void @BKE_sequencer_preprocessed_cache_put(%struct.SeqRenderData*, %struct.Sequence*, float, i32, %struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @input_preprocess(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra, %struct.ImBuf* %ibuf, i8 zeroext %is_proxy_image, i8 zeroext %is_preprocessed) #0 !dbg !11676 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %is_proxy_image.addr = alloca i8, align 1
  %is_preprocessed.addr = alloca i8, align 1
  %scene = alloca %struct.Scene*, align 8
  %mul = alloca float, align 4
  %c = alloca %struct.StripCrop, align 4
  %t = alloca %struct.StripTransform, align 4
  %sx = alloca i32, align 4
  %sy = alloca i32, align 4
  %dx = alloca i32, align 4
  %dy = alloca i32, align 4
  %f = alloca double, align 8
  %xscale = alloca double, align 8
  %yscale = alloca double, align 8
  %i = alloca %struct.ImBuf*, align 8
  %ibuf_new = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !11679, metadata !DIExpression()), !dbg !11680
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !11681, metadata !DIExpression()), !dbg !11682
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !11683, metadata !DIExpression()), !dbg !11684
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !11685, metadata !DIExpression()), !dbg !11686
  store i8 %is_proxy_image, i8* %is_proxy_image.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_proxy_image.addr, metadata !11687, metadata !DIExpression()), !dbg !11688
  store i8 %is_preprocessed, i8* %is_preprocessed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_preprocessed.addr, metadata !11689, metadata !DIExpression()), !dbg !11690
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !11691, metadata !DIExpression()), !dbg !11692
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11693
  %scene1 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %0, i32 0, i32 2, !dbg !11694
  %1 = load %struct.Scene*, %struct.Scene** %scene1, align 8, !dbg !11694
  store %struct.Scene* %1, %struct.Scene** %scene, align 8, !dbg !11692
  call void @llvm.dbg.declare(metadata float* %mul, metadata !11695, metadata !DIExpression()), !dbg !11696
  %2 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11697
  %call = call %struct.ImBuf* @IMB_makeSingleUser(%struct.ImBuf* %2), !dbg !11698
  store %struct.ImBuf* %call, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11699
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11700
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 5, !dbg !11702
  %4 = load i32, i32* %flag, align 8, !dbg !11702
  %and = and i32 %4, 16, !dbg !11703
  %tobool = icmp ne i32 %and, 0, !dbg !11703
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11704

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11705
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !11705
  %6 = load i32, i32* %type, align 4, !dbg !11705
  %cmp = icmp eq i32 %6, 3, !dbg !11705
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !11705

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11705
  %type2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !11705
  %8 = load i32, i32* %type2, align 4, !dbg !11705
  %cmp3 = icmp eq i32 %8, 6, !dbg !11705
  br i1 %cmp3, label %if.end, label %if.then, !dbg !11706

if.then:                                          ; preds = %lor.lhs.false
  %9 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11707
  call void @IMB_filtery(%struct.ImBuf* %9), !dbg !11709
  br label %if.end, !dbg !11710

if.end:                                           ; preds = %if.then, %lor.lhs.false, %land.lhs.true, %entry
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11711
  %flag4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 5, !dbg !11713
  %11 = load i32, i32* %flag4, align 8, !dbg !11713
  %and5 = and i32 %11, 196608, !dbg !11714
  %tobool6 = icmp ne i32 %and5, 0, !dbg !11714
  br i1 %tobool6, label %if.then7, label %if.end141, !dbg !11715

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.StripCrop* %c, metadata !11716, metadata !DIExpression()), !dbg !11718
  %12 = bitcast %struct.StripCrop* %c to i8*, !dbg !11718
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 16, i1 false), !dbg !11718
  call void @llvm.dbg.declare(metadata %struct.StripTransform* %t, metadata !11719, metadata !DIExpression()), !dbg !11720
  %13 = bitcast %struct.StripTransform* %t to i8*, !dbg !11720
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 8, i1 false), !dbg !11720
  call void @llvm.dbg.declare(metadata i32* %sx, metadata !11721, metadata !DIExpression()), !dbg !11722
  call void @llvm.dbg.declare(metadata i32* %sy, metadata !11723, metadata !DIExpression()), !dbg !11724
  call void @llvm.dbg.declare(metadata i32* %dx, metadata !11725, metadata !DIExpression()), !dbg !11726
  call void @llvm.dbg.declare(metadata i32* %dy, metadata !11727, metadata !DIExpression()), !dbg !11728
  %14 = load i8, i8* %is_proxy_image.addr, align 1, !dbg !11729
  %tobool8 = icmp ne i8 %14, 0, !dbg !11729
  br i1 %tobool8, label %if.then9, label %if.end19, !dbg !11731

if.then9:                                         ; preds = %if.then7
  call void @llvm.dbg.declare(metadata double* %f, metadata !11732, metadata !DIExpression()), !dbg !11734
  %15 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11735
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %15, i32 0, i32 5, !dbg !11736
  %16 = load i32, i32* %preview_render_size, align 8, !dbg !11736
  %call10 = call double @seq_rendersize_to_scale_factor(i32 %16), !dbg !11737
  store double %call10, double* %f, align 8, !dbg !11734
  %17 = load double, double* %f, align 8, !dbg !11738
  %cmp11 = fcmp une double %17, 1.000000e+00, !dbg !11740
  br i1 %cmp11, label %if.then12, label %if.end18, !dbg !11741

if.then12:                                        ; preds = %if.then9
  %18 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11742
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11744
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %19, i32 0, i32 2, !dbg !11745
  %20 = load i32, i32* %x, align 8, !dbg !11745
  %conv = sitofp i32 %20 to double, !dbg !11744
  %21 = load double, double* %f, align 8, !dbg !11746
  %div = fdiv double %conv, %21, !dbg !11747
  %conv13 = fptoui double %div to i32, !dbg !11744
  %22 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11748
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %22, i32 0, i32 3, !dbg !11749
  %23 = load i32, i32* %y, align 4, !dbg !11749
  %conv14 = sitofp i32 %23 to double, !dbg !11748
  %24 = load double, double* %f, align 8, !dbg !11750
  %div15 = fdiv double %conv14, %24, !dbg !11751
  %conv16 = fptoui double %div15 to i32, !dbg !11748
  %call17 = call %struct.ImBuf* @IMB_scalefastImBuf(%struct.ImBuf* %18, i32 %conv13, i32 %conv16), !dbg !11752
  br label %if.end18, !dbg !11753

if.end18:                                         ; preds = %if.then12, %if.then9
  br label %if.end19, !dbg !11754

if.end19:                                         ; preds = %if.end18, %if.then7
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11755
  %flag20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 5, !dbg !11757
  %26 = load i32, i32* %flag20, align 8, !dbg !11757
  %and21 = and i32 %26, 131072, !dbg !11758
  %tobool22 = icmp ne i32 %and21, 0, !dbg !11758
  br i1 %tobool22, label %land.lhs.true23, label %if.end28, !dbg !11759

land.lhs.true23:                                  ; preds = %if.end19
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11760
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 24, !dbg !11761
  %28 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !11761
  %crop = getelementptr inbounds %struct.Strip, %struct.Strip* %28, i32 0, i32 9, !dbg !11762
  %29 = load %struct.StripCrop*, %struct.StripCrop** %crop, align 8, !dbg !11762
  %tobool24 = icmp ne %struct.StripCrop* %29, null, !dbg !11760
  br i1 %tobool24, label %if.then25, label %if.end28, !dbg !11763

if.then25:                                        ; preds = %land.lhs.true23
  %30 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11764
  %strip26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 24, !dbg !11766
  %31 = load %struct.Strip*, %struct.Strip** %strip26, align 8, !dbg !11766
  %crop27 = getelementptr inbounds %struct.Strip, %struct.Strip* %31, i32 0, i32 9, !dbg !11767
  %32 = load %struct.StripCrop*, %struct.StripCrop** %crop27, align 8, !dbg !11767
  %33 = bitcast %struct.StripCrop* %c to i8*, !dbg !11768
  %34 = bitcast %struct.StripCrop* %32 to i8*, !dbg !11768
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 16, i1 false), !dbg !11768
  br label %if.end28, !dbg !11769

if.end28:                                         ; preds = %if.then25, %land.lhs.true23, %if.end19
  %35 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11770
  %flag29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 5, !dbg !11772
  %36 = load i32, i32* %flag29, align 8, !dbg !11772
  %and30 = and i32 %36, 65536, !dbg !11773
  %tobool31 = icmp ne i32 %and30, 0, !dbg !11773
  br i1 %tobool31, label %land.lhs.true32, label %if.end38, !dbg !11774

land.lhs.true32:                                  ; preds = %if.end28
  %37 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11775
  %strip33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 24, !dbg !11776
  %38 = load %struct.Strip*, %struct.Strip** %strip33, align 8, !dbg !11776
  %transform = getelementptr inbounds %struct.Strip, %struct.Strip* %38, i32 0, i32 10, !dbg !11777
  %39 = load %struct.StripTransform*, %struct.StripTransform** %transform, align 8, !dbg !11777
  %tobool34 = icmp ne %struct.StripTransform* %39, null, !dbg !11775
  br i1 %tobool34, label %if.then35, label %if.end38, !dbg !11778

if.then35:                                        ; preds = %land.lhs.true32
  %40 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11779
  %strip36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 24, !dbg !11781
  %41 = load %struct.Strip*, %struct.Strip** %strip36, align 8, !dbg !11781
  %transform37 = getelementptr inbounds %struct.Strip, %struct.Strip* %41, i32 0, i32 10, !dbg !11782
  %42 = load %struct.StripTransform*, %struct.StripTransform** %transform37, align 8, !dbg !11782
  %43 = bitcast %struct.StripTransform* %t to i8*, !dbg !11783
  %44 = bitcast %struct.StripTransform* %42 to i8*, !dbg !11783
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %44, i64 8, i1 false), !dbg !11783
  br label %if.end38, !dbg !11784

if.end38:                                         ; preds = %if.then35, %land.lhs.true32, %if.end28
  %45 = load i8, i8* %is_preprocessed.addr, align 1, !dbg !11785
  %tobool39 = icmp ne i8 %45, 0, !dbg !11785
  br i1 %tobool39, label %if.then40, label %if.end86, !dbg !11787

if.then40:                                        ; preds = %if.end38
  call void @llvm.dbg.declare(metadata double* %xscale, metadata !11788, metadata !DIExpression()), !dbg !11790
  %46 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11791
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %46, i32 0, i32 22, !dbg !11792
  %xsch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 33, !dbg !11793
  %47 = load i32, i32* %xsch, align 4, !dbg !11793
  %tobool41 = icmp ne i32 %47, 0, !dbg !11791
  br i1 %tobool41, label %cond.true, label %cond.false, !dbg !11791

cond.true:                                        ; preds = %if.then40
  %48 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11794
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %48, i32 0, i32 3, !dbg !11795
  %49 = load i32, i32* %rectx, align 8, !dbg !11795
  %conv42 = sitofp i32 %49 to double, !dbg !11796
  %50 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11797
  %r43 = getelementptr inbounds %struct.Scene, %struct.Scene* %50, i32 0, i32 22, !dbg !11798
  %xsch44 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r43, i32 0, i32 33, !dbg !11799
  %51 = load i32, i32* %xsch44, align 4, !dbg !11799
  %conv45 = sitofp i32 %51 to double, !dbg !11800
  %div46 = fdiv double %conv42, %conv45, !dbg !11801
  br label %cond.end, !dbg !11791

cond.false:                                       ; preds = %if.then40
  br label %cond.end, !dbg !11791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %div46, %cond.true ], [ 1.000000e+00, %cond.false ], !dbg !11791
  store double %cond, double* %xscale, align 8, !dbg !11790
  call void @llvm.dbg.declare(metadata double* %yscale, metadata !11802, metadata !DIExpression()), !dbg !11803
  %52 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11804
  %r47 = getelementptr inbounds %struct.Scene, %struct.Scene* %52, i32 0, i32 22, !dbg !11805
  %ysch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r47, i32 0, i32 34, !dbg !11806
  %53 = load i32, i32* %ysch, align 8, !dbg !11806
  %tobool48 = icmp ne i32 %53, 0, !dbg !11804
  br i1 %tobool48, label %cond.true49, label %cond.false55, !dbg !11804

cond.true49:                                      ; preds = %cond.end
  %54 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11807
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %54, i32 0, i32 4, !dbg !11808
  %55 = load i32, i32* %recty, align 4, !dbg !11808
  %conv50 = sitofp i32 %55 to double, !dbg !11809
  %56 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11810
  %r51 = getelementptr inbounds %struct.Scene, %struct.Scene* %56, i32 0, i32 22, !dbg !11811
  %ysch52 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r51, i32 0, i32 34, !dbg !11812
  %57 = load i32, i32* %ysch52, align 8, !dbg !11812
  %conv53 = sitofp i32 %57 to double, !dbg !11813
  %div54 = fdiv double %conv50, %conv53, !dbg !11814
  br label %cond.end56, !dbg !11804

cond.false55:                                     ; preds = %cond.end
  br label %cond.end56, !dbg !11804

cond.end56:                                       ; preds = %cond.false55, %cond.true49
  %cond57 = phi double [ %div54, %cond.true49 ], [ 1.000000e+00, %cond.false55 ], !dbg !11804
  store double %cond57, double* %yscale, align 8, !dbg !11803
  %58 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11815
  %flag58 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %58, i32 0, i32 5, !dbg !11817
  %59 = load i32, i32* %flag58, align 8, !dbg !11817
  %and59 = and i32 %59, 65536, !dbg !11818
  %tobool60 = icmp ne i32 %and59, 0, !dbg !11818
  br i1 %tobool60, label %if.then61, label %if.end68, !dbg !11819

if.then61:                                        ; preds = %cond.end56
  %60 = load double, double* %xscale, align 8, !dbg !11820
  %xofs = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 0, !dbg !11822
  %61 = load i32, i32* %xofs, align 4, !dbg !11823
  %conv62 = sitofp i32 %61 to double, !dbg !11823
  %mul63 = fmul double %conv62, %60, !dbg !11823
  %conv64 = fptosi double %mul63 to i32, !dbg !11823
  store i32 %conv64, i32* %xofs, align 4, !dbg !11823
  %62 = load double, double* %yscale, align 8, !dbg !11824
  %yofs = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 1, !dbg !11825
  %63 = load i32, i32* %yofs, align 4, !dbg !11826
  %conv65 = sitofp i32 %63 to double, !dbg !11826
  %mul66 = fmul double %conv65, %62, !dbg !11826
  %conv67 = fptosi double %mul66 to i32, !dbg !11826
  store i32 %conv67, i32* %yofs, align 4, !dbg !11826
  br label %if.end68, !dbg !11827

if.end68:                                         ; preds = %if.then61, %cond.end56
  %64 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11828
  %flag69 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 5, !dbg !11830
  %65 = load i32, i32* %flag69, align 8, !dbg !11830
  %and70 = and i32 %65, 131072, !dbg !11831
  %tobool71 = icmp ne i32 %and70, 0, !dbg !11831
  br i1 %tobool71, label %if.then72, label %if.end85, !dbg !11832

if.then72:                                        ; preds = %if.end68
  %66 = load double, double* %xscale, align 8, !dbg !11833
  %left = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 2, !dbg !11835
  %67 = load i32, i32* %left, align 4, !dbg !11836
  %conv73 = sitofp i32 %67 to double, !dbg !11836
  %mul74 = fmul double %conv73, %66, !dbg !11836
  %conv75 = fptosi double %mul74 to i32, !dbg !11836
  store i32 %conv75, i32* %left, align 4, !dbg !11836
  %68 = load double, double* %xscale, align 8, !dbg !11837
  %right = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 3, !dbg !11838
  %69 = load i32, i32* %right, align 4, !dbg !11839
  %conv76 = sitofp i32 %69 to double, !dbg !11839
  %mul77 = fmul double %conv76, %68, !dbg !11839
  %conv78 = fptosi double %mul77 to i32, !dbg !11839
  store i32 %conv78, i32* %right, align 4, !dbg !11839
  %70 = load double, double* %yscale, align 8, !dbg !11840
  %top = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 0, !dbg !11841
  %71 = load i32, i32* %top, align 4, !dbg !11842
  %conv79 = sitofp i32 %71 to double, !dbg !11842
  %mul80 = fmul double %conv79, %70, !dbg !11842
  %conv81 = fptosi double %mul80 to i32, !dbg !11842
  store i32 %conv81, i32* %top, align 4, !dbg !11842
  %72 = load double, double* %yscale, align 8, !dbg !11843
  %bottom = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 1, !dbg !11844
  %73 = load i32, i32* %bottom, align 4, !dbg !11845
  %conv82 = sitofp i32 %73 to double, !dbg !11845
  %mul83 = fmul double %conv82, %72, !dbg !11845
  %conv84 = fptosi double %mul83 to i32, !dbg !11845
  store i32 %conv84, i32* %bottom, align 4, !dbg !11845
  br label %if.end85, !dbg !11846

if.end85:                                         ; preds = %if.then72, %if.end68
  br label %if.end86, !dbg !11847

if.end86:                                         ; preds = %if.end85, %if.end38
  %74 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11848
  %x87 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %74, i32 0, i32 2, !dbg !11849
  %75 = load i32, i32* %x87, align 8, !dbg !11849
  %left88 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 2, !dbg !11850
  %76 = load i32, i32* %left88, align 4, !dbg !11850
  %sub = sub nsw i32 %75, %76, !dbg !11851
  %right89 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 3, !dbg !11852
  %77 = load i32, i32* %right89, align 4, !dbg !11852
  %sub90 = sub nsw i32 %sub, %77, !dbg !11853
  store i32 %sub90, i32* %sx, align 4, !dbg !11854
  %78 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11855
  %y91 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %78, i32 0, i32 3, !dbg !11856
  %79 = load i32, i32* %y91, align 4, !dbg !11856
  %top92 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 0, !dbg !11857
  %80 = load i32, i32* %top92, align 4, !dbg !11857
  %sub93 = sub nsw i32 %79, %80, !dbg !11858
  %bottom94 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 1, !dbg !11859
  %81 = load i32, i32* %bottom94, align 4, !dbg !11859
  %sub95 = sub nsw i32 %sub93, %81, !dbg !11860
  store i32 %sub95, i32* %sy, align 4, !dbg !11861
  %82 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11862
  %flag96 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %82, i32 0, i32 5, !dbg !11864
  %83 = load i32, i32* %flag96, align 8, !dbg !11864
  %and97 = and i32 %83, 65536, !dbg !11865
  %tobool98 = icmp ne i32 %and97, 0, !dbg !11865
  br i1 %tobool98, label %if.then99, label %if.else109, !dbg !11866

if.then99:                                        ; preds = %if.end86
  %84 = load i8, i8* %is_preprocessed.addr, align 1, !dbg !11867
  %tobool100 = icmp ne i8 %84, 0, !dbg !11867
  br i1 %tobool100, label %if.then101, label %if.else, !dbg !11870

if.then101:                                       ; preds = %if.then99
  %85 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11871
  %rectx102 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %85, i32 0, i32 3, !dbg !11873
  %86 = load i32, i32* %rectx102, align 8, !dbg !11873
  store i32 %86, i32* %dx, align 4, !dbg !11874
  %87 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !11875
  %recty103 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %87, i32 0, i32 4, !dbg !11876
  %88 = load i32, i32* %recty103, align 4, !dbg !11876
  store i32 %88, i32* %dy, align 4, !dbg !11877
  br label %if.end108, !dbg !11878

if.else:                                          ; preds = %if.then99
  %89 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11879
  %r104 = getelementptr inbounds %struct.Scene, %struct.Scene* %89, i32 0, i32 22, !dbg !11881
  %xsch105 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r104, i32 0, i32 33, !dbg !11882
  %90 = load i32, i32* %xsch105, align 4, !dbg !11882
  store i32 %90, i32* %dx, align 4, !dbg !11883
  %91 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11884
  %r106 = getelementptr inbounds %struct.Scene, %struct.Scene* %91, i32 0, i32 22, !dbg !11885
  %ysch107 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r106, i32 0, i32 34, !dbg !11886
  %92 = load i32, i32* %ysch107, align 8, !dbg !11886
  store i32 %92, i32* %dy, align 4, !dbg !11887
  br label %if.end108

if.end108:                                        ; preds = %if.else, %if.then101
  br label %if.end110, !dbg !11888

if.else109:                                       ; preds = %if.end86
  %93 = load i32, i32* %sx, align 4, !dbg !11889
  store i32 %93, i32* %dx, align 4, !dbg !11891
  %94 = load i32, i32* %sy, align 4, !dbg !11892
  store i32 %94, i32* %dy, align 4, !dbg !11893
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %if.end108
  %top111 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 0, !dbg !11894
  %95 = load i32, i32* %top111, align 4, !dbg !11894
  %bottom112 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 1, !dbg !11896
  %96 = load i32, i32* %bottom112, align 4, !dbg !11896
  %add = add nsw i32 %95, %96, !dbg !11897
  %97 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11898
  %y113 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %97, i32 0, i32 3, !dbg !11899
  %98 = load i32, i32* %y113, align 4, !dbg !11899
  %cmp114 = icmp sge i32 %add, %98, !dbg !11900
  br i1 %cmp114, label %if.then131, label %lor.lhs.false116, !dbg !11901

lor.lhs.false116:                                 ; preds = %if.end110
  %left117 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 2, !dbg !11902
  %99 = load i32, i32* %left117, align 4, !dbg !11902
  %right118 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 3, !dbg !11903
  %100 = load i32, i32* %right118, align 4, !dbg !11903
  %add119 = add nsw i32 %99, %100, !dbg !11904
  %101 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11905
  %x120 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %101, i32 0, i32 2, !dbg !11906
  %102 = load i32, i32* %x120, align 8, !dbg !11906
  %cmp121 = icmp sge i32 %add119, %102, !dbg !11907
  br i1 %cmp121, label %if.then131, label %lor.lhs.false123, !dbg !11908

lor.lhs.false123:                                 ; preds = %lor.lhs.false116
  %xofs124 = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 0, !dbg !11909
  %103 = load i32, i32* %xofs124, align 4, !dbg !11909
  %104 = load i32, i32* %dx, align 4, !dbg !11910
  %cmp125 = icmp sge i32 %103, %104, !dbg !11911
  br i1 %cmp125, label %if.then131, label %lor.lhs.false127, !dbg !11912

lor.lhs.false127:                                 ; preds = %lor.lhs.false123
  %yofs128 = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 1, !dbg !11913
  %105 = load i32, i32* %yofs128, align 4, !dbg !11913
  %106 = load i32, i32* %dy, align 4, !dbg !11914
  %cmp129 = icmp sge i32 %105, %106, !dbg !11915
  br i1 %cmp129, label %if.then131, label %if.else132, !dbg !11916

if.then131:                                       ; preds = %lor.lhs.false127, %lor.lhs.false123, %lor.lhs.false116, %if.end110
  %107 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11917
  call void @make_black_ibuf(%struct.ImBuf* %107), !dbg !11919
  br label %if.end140, !dbg !11920

if.else132:                                       ; preds = %lor.lhs.false127
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %i, metadata !11921, metadata !DIExpression()), !dbg !11923
  %108 = load i32, i32* %dx, align 4, !dbg !11924
  %109 = load i32, i32* %dy, align 4, !dbg !11925
  %110 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11926
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %110, i32 0, i32 9, !dbg !11927
  %111 = load float*, float** %rect_float, align 8, !dbg !11927
  %tobool133 = icmp ne float* %111, null, !dbg !11926
  %112 = zext i1 %tobool133 to i64, !dbg !11926
  %cond134 = select i1 %tobool133, i32 32, i32 1, !dbg !11926
  %call135 = call %struct.ImBuf* @IMB_allocImBuf(i32 %108, i32 %109, i8 zeroext 32, i32 %cond134), !dbg !11928
  store %struct.ImBuf* %call135, %struct.ImBuf** %i, align 8, !dbg !11923
  %113 = load %struct.ImBuf*, %struct.ImBuf** %i, align 8, !dbg !11929
  %114 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11930
  %xofs136 = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 0, !dbg !11931
  %115 = load i32, i32* %xofs136, align 4, !dbg !11931
  %yofs137 = getelementptr inbounds %struct.StripTransform, %struct.StripTransform* %t, i32 0, i32 1, !dbg !11932
  %116 = load i32, i32* %yofs137, align 4, !dbg !11932
  %left138 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 2, !dbg !11933
  %117 = load i32, i32* %left138, align 4, !dbg !11933
  %bottom139 = getelementptr inbounds %struct.StripCrop, %struct.StripCrop* %c, i32 0, i32 1, !dbg !11934
  %118 = load i32, i32* %bottom139, align 4, !dbg !11934
  %119 = load i32, i32* %sx, align 4, !dbg !11935
  %120 = load i32, i32* %sy, align 4, !dbg !11936
  call void @IMB_rectcpy(%struct.ImBuf* %113, %struct.ImBuf* %114, i32 %115, i32 %116, i32 %117, i32 %118, i32 %119, i32 %120), !dbg !11937
  %121 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11938
  %122 = load %struct.ImBuf*, %struct.ImBuf** %i, align 8, !dbg !11939
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %121, %struct.ImBuf* %122), !dbg !11940
  %123 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11941
  call void @IMB_freeImBuf(%struct.ImBuf* %123), !dbg !11942
  %124 = load %struct.ImBuf*, %struct.ImBuf** %i, align 8, !dbg !11943
  store %struct.ImBuf* %124, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11944
  br label %if.end140

if.end140:                                        ; preds = %if.else132, %if.then131
  br label %if.end141, !dbg !11945

if.end141:                                        ; preds = %if.end140, %if.end
  %125 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11946
  %flag142 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %125, i32 0, i32 5, !dbg !11948
  %126 = load i32, i32* %flag142, align 8, !dbg !11948
  %and143 = and i32 %126, 2048, !dbg !11949
  %tobool144 = icmp ne i32 %and143, 0, !dbg !11949
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !11950

if.then145:                                       ; preds = %if.end141
  %127 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11951
  call void @IMB_flipx(%struct.ImBuf* %127), !dbg !11953
  br label %if.end146, !dbg !11954

if.end146:                                        ; preds = %if.then145, %if.end141
  %128 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11955
  %flag147 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %128, i32 0, i32 5, !dbg !11957
  %129 = load i32, i32* %flag147, align 8, !dbg !11957
  %and148 = and i32 %129, 4096, !dbg !11958
  %tobool149 = icmp ne i32 %and148, 0, !dbg !11958
  br i1 %tobool149, label %if.then150, label %if.end151, !dbg !11959

if.then150:                                       ; preds = %if.end146
  %130 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11960
  call void @IMB_flipy(%struct.ImBuf* %130), !dbg !11962
  br label %if.end151, !dbg !11963

if.end151:                                        ; preds = %if.then150, %if.end146
  %131 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11964
  %sat = getelementptr inbounds %struct.Sequence, %struct.Sequence* %131, i32 0, i32 17, !dbg !11966
  %132 = load float, float* %sat, align 8, !dbg !11966
  %cmp152 = fcmp une float %132, 1.000000e+00, !dbg !11967
  br i1 %cmp152, label %if.then154, label %if.end156, !dbg !11968

if.then154:                                       ; preds = %if.end151
  %133 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11969
  %134 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11971
  %sat155 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %134, i32 0, i32 17, !dbg !11972
  %135 = load float, float* %sat155, align 8, !dbg !11972
  call void @IMB_saturation(%struct.ImBuf* %133, float %135), !dbg !11973
  br label %if.end156, !dbg !11974

if.end156:                                        ; preds = %if.then154, %if.end151
  %136 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11975
  %mul157 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %136, i32 0, i32 18, !dbg !11976
  %137 = load float, float* %mul157, align 4, !dbg !11976
  store float %137, float* %mul, align 4, !dbg !11977
  %138 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11978
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %138, i32 0, i32 46, !dbg !11980
  %139 = load i32, i32* %blend_mode, align 8, !dbg !11980
  %cmp158 = icmp eq i32 %139, 0, !dbg !11981
  br i1 %cmp158, label %if.then160, label %if.end163, !dbg !11982

if.then160:                                       ; preds = %if.end156
  %140 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11983
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %140, i32 0, i32 47, !dbg !11985
  %141 = load float, float* %blend_opacity, align 4, !dbg !11985
  %div161 = fdiv float %141, 1.000000e+02, !dbg !11986
  %142 = load float, float* %mul, align 4, !dbg !11987
  %mul162 = fmul float %142, %div161, !dbg !11987
  store float %mul162, float* %mul, align 4, !dbg !11987
  br label %if.end163, !dbg !11988

if.end163:                                        ; preds = %if.then160, %if.end156
  %143 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !11989
  %flag164 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %143, i32 0, i32 5, !dbg !11991
  %144 = load i32, i32* %flag164, align 8, !dbg !11991
  %and165 = and i32 %144, 8192, !dbg !11992
  %tobool166 = icmp ne i32 %and165, 0, !dbg !11992
  br i1 %tobool166, label %if.then167, label %if.end175, !dbg !11993

if.then167:                                       ; preds = %if.end163
  %145 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !11994
  %rect_float168 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %145, i32 0, i32 9, !dbg !11997
  %146 = load float*, float** %rect_float168, align 8, !dbg !11997
  %tobool169 = icmp ne float* %146, null, !dbg !11994
  br i1 %tobool169, label %if.end171, label %if.then170, !dbg !11998

if.then170:                                       ; preds = %if.then167
  %147 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !11999
  %148 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12001
  call void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %147, %struct.ImBuf* %148, i8 zeroext 1), !dbg !12002
  br label %if.end171, !dbg !12003

if.end171:                                        ; preds = %if.then170, %if.then167
  %149 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12004
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %149, i32 0, i32 8, !dbg !12006
  %150 = load i32*, i32** %rect, align 8, !dbg !12006
  %tobool172 = icmp ne i32* %150, null, !dbg !12004
  br i1 %tobool172, label %if.then173, label %if.end174, !dbg !12007

if.then173:                                       ; preds = %if.end171
  %151 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12008
  call void @imb_freerectImBuf(%struct.ImBuf* %151), !dbg !12010
  br label %if.end174, !dbg !12011

if.end174:                                        ; preds = %if.then173, %if.end171
  br label %if.end175, !dbg !12012

if.end175:                                        ; preds = %if.end174, %if.end163
  %152 = load float, float* %mul, align 4, !dbg !12013
  %cmp176 = fcmp une float %152, 1.000000e+00, !dbg !12015
  br i1 %cmp176, label %if.then178, label %if.end179, !dbg !12016

if.then178:                                       ; preds = %if.end175
  %153 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12017
  %154 = load float, float* %mul, align 4, !dbg !12019
  call void @multibuf(%struct.ImBuf* %153, float %154), !dbg !12020
  br label %if.end179, !dbg !12021

if.end179:                                        ; preds = %if.then178, %if.end175
  %155 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12022
  %x180 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %155, i32 0, i32 2, !dbg !12024
  %156 = load i32, i32* %x180, align 8, !dbg !12024
  %157 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12025
  %rectx181 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %157, i32 0, i32 3, !dbg !12026
  %158 = load i32, i32* %rectx181, align 8, !dbg !12026
  %cmp182 = icmp ne i32 %156, %158, !dbg !12027
  br i1 %cmp182, label %if.then189, label %lor.lhs.false184, !dbg !12028

lor.lhs.false184:                                 ; preds = %if.end179
  %159 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12029
  %y185 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %159, i32 0, i32 3, !dbg !12030
  %160 = load i32, i32* %y185, align 4, !dbg !12030
  %161 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12031
  %recty186 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %161, i32 0, i32 4, !dbg !12032
  %162 = load i32, i32* %recty186, align 4, !dbg !12032
  %cmp187 = icmp ne i32 %160, %162, !dbg !12033
  br i1 %cmp187, label %if.then189, label %if.end210, !dbg !12034

if.then189:                                       ; preds = %lor.lhs.false184, %if.end179
  %163 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12035
  %r190 = getelementptr inbounds %struct.Scene, %struct.Scene* %163, i32 0, i32 22, !dbg !12038
  %mode = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r190, i32 0, i32 47, !dbg !12039
  %164 = load i32, i32* %mode, align 8, !dbg !12039
  %and191 = and i32 %164, 1, !dbg !12040
  %tobool192 = icmp ne i32 %and191, 0, !dbg !12040
  br i1 %tobool192, label %if.then193, label %if.else201, !dbg !12041

if.then193:                                       ; preds = %if.then189
  %165 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12042
  %166 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12044
  %rectx194 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %166, i32 0, i32 3, !dbg !12045
  %167 = load i32, i32* %rectx194, align 8, !dbg !12045
  %conv195 = trunc i32 %167 to i16, !dbg !12046
  %conv196 = sext i16 %conv195 to i32, !dbg !12046
  %168 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12047
  %recty197 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %168, i32 0, i32 4, !dbg !12048
  %169 = load i32, i32* %recty197, align 4, !dbg !12048
  %conv198 = trunc i32 %169 to i16, !dbg !12049
  %conv199 = sext i16 %conv198 to i32, !dbg !12049
  %call200 = call %struct.ImBuf* @IMB_scaleImBuf(%struct.ImBuf* %165, i32 %conv196, i32 %conv199), !dbg !12050
  br label %if.end209, !dbg !12051

if.else201:                                       ; preds = %if.then189
  %170 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12052
  %171 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12054
  %rectx202 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %171, i32 0, i32 3, !dbg !12055
  %172 = load i32, i32* %rectx202, align 8, !dbg !12055
  %conv203 = trunc i32 %172 to i16, !dbg !12056
  %conv204 = sext i16 %conv203 to i32, !dbg !12056
  %173 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12057
  %recty205 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %173, i32 0, i32 4, !dbg !12058
  %174 = load i32, i32* %recty205, align 4, !dbg !12058
  %conv206 = trunc i32 %174 to i16, !dbg !12059
  %conv207 = sext i16 %conv206 to i32, !dbg !12059
  %call208 = call %struct.ImBuf* @IMB_scalefastImBuf(%struct.ImBuf* %170, i32 %conv204, i32 %conv207), !dbg !12060
  br label %if.end209

if.end209:                                        ; preds = %if.else201, %if.then193
  br label %if.end210, !dbg !12061

if.end210:                                        ; preds = %if.end209, %lor.lhs.false184
  %175 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12062
  %modifiers = getelementptr inbounds %struct.Sequence, %struct.Sequence* %175, i32 0, i32 51, !dbg !12064
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %modifiers, i32 0, i32 0, !dbg !12065
  %176 = load i8*, i8** %first, align 8, !dbg !12065
  %tobool211 = icmp ne i8* %176, null, !dbg !12062
  br i1 %tobool211, label %if.then212, label %if.end219, !dbg !12066

if.then212:                                       ; preds = %if.end210
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf_new, metadata !12067, metadata !DIExpression()), !dbg !12069
  %177 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12070
  %178 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12071
  %179 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12072
  %180 = load float, float* %cfra.addr, align 4, !dbg !12073
  %conv213 = fptosi float %180 to i32, !dbg !12073
  %call214 = call %struct.ImBuf* @BKE_sequence_modifier_apply_stack(%struct.SeqRenderData* %177, %struct.Sequence* %178, %struct.ImBuf* %179, i32 %conv213), !dbg !12074
  store %struct.ImBuf* %call214, %struct.ImBuf** %ibuf_new, align 8, !dbg !12069
  %181 = load %struct.ImBuf*, %struct.ImBuf** %ibuf_new, align 8, !dbg !12075
  %182 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12077
  %cmp215 = icmp ne %struct.ImBuf* %181, %182, !dbg !12078
  br i1 %cmp215, label %if.then217, label %if.end218, !dbg !12079

if.then217:                                       ; preds = %if.then212
  %183 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12080
  call void @IMB_freeImBuf(%struct.ImBuf* %183), !dbg !12082
  %184 = load %struct.ImBuf*, %struct.ImBuf** %ibuf_new, align 8, !dbg !12083
  store %struct.ImBuf* %184, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12084
  br label %if.end218, !dbg !12085

if.end218:                                        ; preds = %if.then217, %if.then212
  br label %if.end219, !dbg !12086

if.end219:                                        ; preds = %if.end218, %if.end210
  %185 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12087
  ret %struct.ImBuf* %185, !dbg !12088
}

declare dso_local void @BKE_sequencer_cache_put(%struct.SeqRenderData*, %struct.Sequence*, float, i32, %struct.ImBuf*) #2

declare dso_local %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_rendersize_to_proxysize(i32 %size) #0 !dbg !12089 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !12092, metadata !DIExpression()), !dbg !12093
  %0 = load i32, i32* %size.addr, align 4, !dbg !12094
  %cmp = icmp sge i32 %0, 100, !dbg !12096
  br i1 %cmp, label %if.then, label %if.end, !dbg !12097

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12098
  br label %return, !dbg !12098

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4, !dbg !12100
  %cmp1 = icmp sge i32 %1, 99, !dbg !12102
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !12103

if.then2:                                         ; preds = %if.end
  store i32 8, i32* %retval, align 4, !dbg !12104
  br label %return, !dbg !12104

if.end3:                                          ; preds = %if.end
  %2 = load i32, i32* %size.addr, align 4, !dbg !12106
  %cmp4 = icmp sge i32 %2, 75, !dbg !12108
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !12109

if.then5:                                         ; preds = %if.end3
  store i32 4, i32* %retval, align 4, !dbg !12110
  br label %return, !dbg !12110

if.end6:                                          ; preds = %if.end3
  %3 = load i32, i32* %size.addr, align 4, !dbg !12112
  %cmp7 = icmp sge i32 %3, 50, !dbg !12114
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !12115

if.then8:                                         ; preds = %if.end6
  store i32 2, i32* %retval, align 4, !dbg !12116
  br label %return, !dbg !12116

if.end9:                                          ; preds = %if.end6
  store i32 1, i32* %retval, align 4, !dbg !12118
  br label %return, !dbg !12118

return:                                           ; preds = %if.end9, %if.then8, %if.then5, %if.then2, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !12119
  ret i32 %4, !dbg !12119
}

declare dso_local i32 @IMB_anim_index_get_frame_index(%struct.anim*, i32, i32) #2

declare dso_local %struct.ImBuf* @IMB_anim_absolute(%struct.anim*, i32, i32, i32) #2

declare dso_local i32 @BLI_exists(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_effect_strip_impl(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra) #0 !dbg !12120 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %scene = alloca %struct.Scene*, align 8
  %fac = alloca float, align 4
  %facf = alloca float, align 4
  %early_out = alloca i32, align 4
  %i = alloca i32, align 4
  %sh = alloca %struct.SeqEffectHandle, align 8
  %fcu = alloca %struct.FCurve*, align 8
  %ibuf = alloca [3 x %struct.ImBuf*], align 16
  %input = alloca [3 x %struct.Sequence*], align 16
  %out = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12121, metadata !DIExpression()), !dbg !12122
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12123, metadata !DIExpression()), !dbg !12124
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !12125, metadata !DIExpression()), !dbg !12126
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !12127, metadata !DIExpression()), !dbg !12128
  %0 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12129
  %scene1 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %0, i32 0, i32 2, !dbg !12130
  %1 = load %struct.Scene*, %struct.Scene** %scene1, align 8, !dbg !12130
  store %struct.Scene* %1, %struct.Scene** %scene, align 8, !dbg !12128
  call void @llvm.dbg.declare(metadata float* %fac, metadata !12131, metadata !DIExpression()), !dbg !12132
  call void @llvm.dbg.declare(metadata float* %facf, metadata !12133, metadata !DIExpression()), !dbg !12134
  call void @llvm.dbg.declare(metadata i32* %early_out, metadata !12135, metadata !DIExpression()), !dbg !12136
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12137, metadata !DIExpression()), !dbg !12138
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !12139, metadata !DIExpression()), !dbg !12140
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12141
  call void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret %sh, %struct.Sequence* %2), !dbg !12142
  call void @llvm.dbg.declare(metadata %struct.FCurve** %fcu, metadata !12143, metadata !DIExpression()), !dbg !12144
  store %struct.FCurve* null, %struct.FCurve** %fcu, align 8, !dbg !12144
  call void @llvm.dbg.declare(metadata [3 x %struct.ImBuf*]* %ibuf, metadata !12145, metadata !DIExpression()), !dbg !12147
  call void @llvm.dbg.declare(metadata [3 x %struct.Sequence*]* %input, metadata !12148, metadata !DIExpression()), !dbg !12150
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %out, metadata !12151, metadata !DIExpression()), !dbg !12152
  store %struct.ImBuf* null, %struct.ImBuf** %out, align 8, !dbg !12152
  %arrayidx = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 2, !dbg !12153
  store %struct.ImBuf* null, %struct.ImBuf** %arrayidx, align 16, !dbg !12154
  %arrayidx2 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12155
  store %struct.ImBuf* null, %struct.ImBuf** %arrayidx2, align 8, !dbg !12156
  %arrayidx3 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12157
  store %struct.ImBuf* null, %struct.ImBuf** %arrayidx3, align 16, !dbg !12158
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12159
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 33, !dbg !12160
  %4 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !12160
  %arrayidx4 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 0, !dbg !12161
  store %struct.Sequence* %4, %struct.Sequence** %arrayidx4, align 16, !dbg !12162
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12163
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 34, !dbg !12164
  %6 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !12164
  %arrayidx5 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 1, !dbg !12165
  store %struct.Sequence* %6, %struct.Sequence** %arrayidx5, align 8, !dbg !12166
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12167
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 35, !dbg !12168
  %8 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !12168
  %arrayidx6 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 2, !dbg !12169
  store %struct.Sequence* %8, %struct.Sequence** %arrayidx6, align 16, !dbg !12170
  %execute = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 10, !dbg !12171
  %9 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %execute, align 8, !dbg !12171
  %tobool = icmp ne %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)* %9, null, !dbg !12173
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !12174

land.lhs.true:                                    ; preds = %entry
  %execute_slice = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 12, !dbg !12175
  %10 = load void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)*, void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)** %execute_slice, align 8, !dbg !12175
  %tobool7 = icmp ne void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)* %10, null, !dbg !12176
  br i1 %tobool7, label %land.lhs.true8, label %if.then, !dbg !12177

land.lhs.true8:                                   ; preds = %land.lhs.true
  %init_execution = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 11, !dbg !12178
  %11 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %init_execution, align 8, !dbg !12178
  %tobool9 = icmp ne %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)* %11, null, !dbg !12179
  br i1 %tobool9, label %if.end, label %if.then, !dbg !12180

if.then:                                          ; preds = %land.lhs.true8, %land.lhs.true
  %12 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12181
  %rectx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %12, i32 0, i32 3, !dbg !12183
  %13 = load i32, i32* %rectx, align 8, !dbg !12183
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12184
  %recty = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %14, i32 0, i32 4, !dbg !12185
  %15 = load i32, i32* %recty, align 4, !dbg !12185
  %call = call %struct.ImBuf* @IMB_allocImBuf(i32 %13, i32 %15, i8 zeroext 32, i32 1), !dbg !12186
  store %struct.ImBuf* %call, %struct.ImBuf** %out, align 8, !dbg !12187
  %16 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !12188
  store %struct.ImBuf* %16, %struct.ImBuf** %retval, align 8, !dbg !12189
  br label %return, !dbg !12189

if.end:                                           ; preds = %land.lhs.true8, %entry
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12190
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 5, !dbg !12192
  %18 = load i32, i32* %flag, align 8, !dbg !12192
  %and = and i32 %18, 4194304, !dbg !12193
  %tobool10 = icmp ne i32 %and, 0, !dbg !12193
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !12194

if.then11:                                        ; preds = %if.end
  %get_default_fac = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 9, !dbg !12195
  %19 = load void (%struct.Sequence*, float, float*, float*)*, void (%struct.Sequence*, float, float*, float*)** %get_default_fac, align 8, !dbg !12195
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12197
  %21 = load float, float* %cfra.addr, align 4, !dbg !12198
  call void %19(%struct.Sequence* %20, float %21, float* %fac, float* %facf), !dbg !12199
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12200
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %22, i32 0, i32 22, !dbg !12202
  %mode = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 47, !dbg !12203
  %23 = load i32, i32* %mode, align 8, !dbg !12203
  %and12 = and i32 %23, 64, !dbg !12204
  %cmp = icmp eq i32 %and12, 0, !dbg !12205
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !12206

if.then13:                                        ; preds = %if.then11
  %24 = load float, float* %fac, align 4, !dbg !12207
  store float %24, float* %facf, align 4, !dbg !12208
  br label %if.end14, !dbg !12209

if.end14:                                         ; preds = %if.then13, %if.then11
  br label %if.end28, !dbg !12210

if.else:                                          ; preds = %if.end
  %25 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12211
  %id = getelementptr inbounds %struct.Scene, %struct.Scene* %25, i32 0, i32 0, !dbg !12213
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12214
  %27 = bitcast %struct.Sequence* %26 to i8*, !dbg !12214
  %call15 = call %struct.FCurve* @id_data_find_fcurve(%struct.ID* %id, i8* %27, %struct.StructRNA* @RNA_Sequence, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i64 0, i64 0), i32 0, i8* null), !dbg !12215
  store %struct.FCurve* %call15, %struct.FCurve** %fcu, align 8, !dbg !12216
  %28 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !12217
  %tobool16 = icmp ne %struct.FCurve* %28, null, !dbg !12217
  br i1 %tobool16, label %if.then17, label %if.else26, !dbg !12219

if.then17:                                        ; preds = %if.else
  %29 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !12220
  %30 = load float, float* %cfra.addr, align 4, !dbg !12222
  %call18 = call float @evaluate_fcurve(%struct.FCurve* %29, float %30), !dbg !12223
  store float %call18, float* %facf, align 4, !dbg !12224
  store float %call18, float* %fac, align 4, !dbg !12225
  %31 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12226
  %r19 = getelementptr inbounds %struct.Scene, %struct.Scene* %31, i32 0, i32 22, !dbg !12228
  %mode20 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r19, i32 0, i32 47, !dbg !12229
  %32 = load i32, i32* %mode20, align 8, !dbg !12229
  %and21 = and i32 %32, 64, !dbg !12230
  %tobool22 = icmp ne i32 %and21, 0, !dbg !12230
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !12231

if.then23:                                        ; preds = %if.then17
  %33 = load %struct.FCurve*, %struct.FCurve** %fcu, align 8, !dbg !12232
  %34 = load float, float* %cfra.addr, align 4, !dbg !12234
  %add = fadd float %34, 5.000000e-01, !dbg !12235
  %call24 = call float @evaluate_fcurve(%struct.FCurve* %33, float %add), !dbg !12236
  store float %call24, float* %facf, align 4, !dbg !12237
  br label %if.end25, !dbg !12238

if.end25:                                         ; preds = %if.then23, %if.then17
  br label %if.end27, !dbg !12239

if.else26:                                        ; preds = %if.else
  %35 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12240
  %effect_fader = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 31, !dbg !12242
  %36 = load float, float* %effect_fader, align 8, !dbg !12242
  store float %36, float* %facf, align 4, !dbg !12243
  store float %36, float* %fac, align 4, !dbg !12244
  br label %if.end27

if.end27:                                         ; preds = %if.else26, %if.end25
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end14
  %early_out29 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 7, !dbg !12245
  %37 = load i32 (%struct.Sequence*, float, float)*, i32 (%struct.Sequence*, float, float)** %early_out29, align 8, !dbg !12245
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12246
  %39 = load float, float* %fac, align 4, !dbg !12247
  %40 = load float, float* %facf, align 4, !dbg !12248
  %call30 = call i32 %37(%struct.Sequence* %38, float %39, float %40), !dbg !12249
  store i32 %call30, i32* %early_out, align 4, !dbg !12250
  %41 = load i32, i32* %early_out, align 4, !dbg !12251
  switch i32 %41, label %sw.epilog [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb33
    i32 1, label %sw.bb64
    i32 2, label %sw.bb84
  ], !dbg !12252

sw.bb:                                            ; preds = %if.end28
  %execute31 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 10, !dbg !12253
  %42 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %execute31, align 8, !dbg !12253
  %43 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12255
  %44 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12256
  %45 = load float, float* %cfra.addr, align 4, !dbg !12257
  %46 = load float, float* %fac, align 4, !dbg !12258
  %47 = load float, float* %facf, align 4, !dbg !12259
  %call32 = call %struct.ImBuf* %42(%struct.SeqRenderData* %43, %struct.Sequence* %44, float %45, float %46, float %47, %struct.ImBuf* null, %struct.ImBuf* null, %struct.ImBuf* null), !dbg !12260
  store %struct.ImBuf* %call32, %struct.ImBuf** %out, align 8, !dbg !12261
  br label %sw.epilog, !dbg !12262

sw.bb33:                                          ; preds = %if.end28
  store i32 0, i32* %i, align 4, !dbg !12263
  br label %for.cond, !dbg !12265

for.cond:                                         ; preds = %for.inc, %sw.bb33
  %48 = load i32, i32* %i, align 4, !dbg !12266
  %cmp34 = icmp slt i32 %48, 3, !dbg !12268
  br i1 %cmp34, label %for.body, label %for.end, !dbg !12269

for.body:                                         ; preds = %for.cond
  %49 = load i32, i32* %i, align 4, !dbg !12270
  %idxprom = sext i32 %49 to i64, !dbg !12273
  %arrayidx35 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 %idxprom, !dbg !12273
  %50 = load %struct.Sequence*, %struct.Sequence** %arrayidx35, align 8, !dbg !12273
  %tobool36 = icmp ne %struct.Sequence* %50, null, !dbg !12273
  br i1 %tobool36, label %if.then37, label %if.end43, !dbg !12274

if.then37:                                        ; preds = %for.body
  %51 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12275
  %52 = load i32, i32* %i, align 4, !dbg !12276
  %idxprom38 = sext i32 %52 to i64, !dbg !12277
  %arrayidx39 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 %idxprom38, !dbg !12277
  %53 = load %struct.Sequence*, %struct.Sequence** %arrayidx39, align 8, !dbg !12277
  %54 = load float, float* %cfra.addr, align 4, !dbg !12278
  %call40 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %51, %struct.Sequence* %53, float %54), !dbg !12279
  %55 = load i32, i32* %i, align 4, !dbg !12280
  %idxprom41 = sext i32 %55 to i64, !dbg !12281
  %arrayidx42 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 %idxprom41, !dbg !12281
  store %struct.ImBuf* %call40, %struct.ImBuf** %arrayidx42, align 8, !dbg !12282
  br label %if.end43, !dbg !12281

if.end43:                                         ; preds = %if.then37, %for.body
  br label %for.inc, !dbg !12283

for.inc:                                          ; preds = %if.end43
  %56 = load i32, i32* %i, align 4, !dbg !12284
  %inc = add nsw i32 %56, 1, !dbg !12284
  store i32 %inc, i32* %i, align 4, !dbg !12284
  br label %for.cond, !dbg !12285, !llvm.loop !12286

for.end:                                          ; preds = %for.cond
  %arrayidx44 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12288
  %57 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx44, align 16, !dbg !12288
  %tobool45 = icmp ne %struct.ImBuf* %57, null, !dbg !12288
  br i1 %tobool45, label %land.lhs.true46, label %if.end63, !dbg !12290

land.lhs.true46:                                  ; preds = %for.end
  %arrayidx47 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12291
  %58 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx47, align 8, !dbg !12291
  %tobool48 = icmp ne %struct.ImBuf* %58, null, !dbg !12291
  br i1 %tobool48, label %if.then49, label %if.end63, !dbg !12292

if.then49:                                        ; preds = %land.lhs.true46
  %multithreaded = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 0, !dbg !12293
  %59 = load i8, i8* %multithreaded, align 8, !dbg !12293
  %tobool50 = icmp ne i8 %59, 0, !dbg !12296
  br i1 %tobool50, label %if.then51, label %if.else56, !dbg !12297

if.then51:                                        ; preds = %if.then49
  %60 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12298
  %61 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12299
  %62 = load float, float* %cfra.addr, align 4, !dbg !12300
  %63 = load float, float* %fac, align 4, !dbg !12301
  %64 = load float, float* %facf, align 4, !dbg !12302
  %arrayidx52 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12303
  %65 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx52, align 16, !dbg !12303
  %arrayidx53 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12304
  %66 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx53, align 8, !dbg !12304
  %arrayidx54 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 2, !dbg !12305
  %67 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx54, align 16, !dbg !12305
  %call55 = call %struct.ImBuf* @seq_render_effect_execute_threaded(%struct.SeqEffectHandle* %sh, %struct.SeqRenderData* %60, %struct.Sequence* %61, float %62, float %63, float %64, %struct.ImBuf* %65, %struct.ImBuf* %66, %struct.ImBuf* %67), !dbg !12306
  store %struct.ImBuf* %call55, %struct.ImBuf** %out, align 8, !dbg !12307
  br label %if.end62, !dbg !12308

if.else56:                                        ; preds = %if.then49
  %execute57 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 10, !dbg !12309
  %68 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %execute57, align 8, !dbg !12309
  %69 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12310
  %70 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12311
  %71 = load float, float* %cfra.addr, align 4, !dbg !12312
  %72 = load float, float* %fac, align 4, !dbg !12313
  %73 = load float, float* %facf, align 4, !dbg !12314
  %arrayidx58 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12315
  %74 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx58, align 16, !dbg !12315
  %arrayidx59 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12316
  %75 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx59, align 8, !dbg !12316
  %arrayidx60 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 2, !dbg !12317
  %76 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx60, align 16, !dbg !12317
  %call61 = call %struct.ImBuf* %68(%struct.SeqRenderData* %69, %struct.Sequence* %70, float %71, float %72, float %73, %struct.ImBuf* %74, %struct.ImBuf* %75, %struct.ImBuf* %76), !dbg !12318
  store %struct.ImBuf* %call61, %struct.ImBuf** %out, align 8, !dbg !12319
  br label %if.end62

if.end62:                                         ; preds = %if.else56, %if.then51
  br label %if.end63, !dbg !12320

if.end63:                                         ; preds = %if.end62, %land.lhs.true46, %for.end
  br label %sw.epilog, !dbg !12321

sw.bb64:                                          ; preds = %if.end28
  %arrayidx65 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 0, !dbg !12322
  %77 = load %struct.Sequence*, %struct.Sequence** %arrayidx65, align 16, !dbg !12322
  %tobool66 = icmp ne %struct.Sequence* %77, null, !dbg !12322
  br i1 %tobool66, label %if.then67, label %if.end71, !dbg !12324

if.then67:                                        ; preds = %sw.bb64
  %78 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12325
  %arrayidx68 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 0, !dbg !12327
  %79 = load %struct.Sequence*, %struct.Sequence** %arrayidx68, align 16, !dbg !12327
  %80 = load float, float* %cfra.addr, align 4, !dbg !12328
  %call69 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %78, %struct.Sequence* %79, float %80), !dbg !12329
  %arrayidx70 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12330
  store %struct.ImBuf* %call69, %struct.ImBuf** %arrayidx70, align 16, !dbg !12331
  br label %if.end71, !dbg !12332

if.end71:                                         ; preds = %if.then67, %sw.bb64
  %arrayidx72 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12333
  %81 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx72, align 16, !dbg !12333
  %tobool73 = icmp ne %struct.ImBuf* %81, null, !dbg !12333
  br i1 %tobool73, label %if.then74, label %if.end83, !dbg !12335

if.then74:                                        ; preds = %if.end71
  %82 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12336
  %83 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12339
  %84 = load float, float* %cfra.addr, align 4, !dbg !12340
  %call75 = call zeroext i8 @BKE_sequencer_input_have_to_preprocess(%struct.SeqRenderData* %82, %struct.Sequence* %83, float %84), !dbg !12341
  %tobool76 = icmp ne i8 %call75, 0, !dbg !12341
  br i1 %tobool76, label %if.then77, label %if.else80, !dbg !12342

if.then77:                                        ; preds = %if.then74
  %arrayidx78 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12343
  %85 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx78, align 16, !dbg !12343
  %call79 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %85), !dbg !12345
  store %struct.ImBuf* %call79, %struct.ImBuf** %out, align 8, !dbg !12346
  br label %if.end82, !dbg !12347

if.else80:                                        ; preds = %if.then74
  %arrayidx81 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 0, !dbg !12348
  %86 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx81, align 16, !dbg !12348
  store %struct.ImBuf* %86, %struct.ImBuf** %out, align 8, !dbg !12350
  %87 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !12351
  call void @IMB_refImBuf(%struct.ImBuf* %87), !dbg !12352
  br label %if.end82

if.end82:                                         ; preds = %if.else80, %if.then77
  br label %if.end83, !dbg !12353

if.end83:                                         ; preds = %if.end82, %if.end71
  br label %sw.epilog, !dbg !12354

sw.bb84:                                          ; preds = %if.end28
  %arrayidx85 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 1, !dbg !12355
  %88 = load %struct.Sequence*, %struct.Sequence** %arrayidx85, align 8, !dbg !12355
  %tobool86 = icmp ne %struct.Sequence* %88, null, !dbg !12355
  br i1 %tobool86, label %if.then87, label %if.end91, !dbg !12357

if.then87:                                        ; preds = %sw.bb84
  %89 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12358
  %arrayidx88 = getelementptr inbounds [3 x %struct.Sequence*], [3 x %struct.Sequence*]* %input, i64 0, i64 1, !dbg !12360
  %90 = load %struct.Sequence*, %struct.Sequence** %arrayidx88, align 8, !dbg !12360
  %91 = load float, float* %cfra.addr, align 4, !dbg !12361
  %call89 = call %struct.ImBuf* @seq_render_strip(%struct.SeqRenderData* %89, %struct.Sequence* %90, float %91), !dbg !12362
  %arrayidx90 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12363
  store %struct.ImBuf* %call89, %struct.ImBuf** %arrayidx90, align 8, !dbg !12364
  br label %if.end91, !dbg !12365

if.end91:                                         ; preds = %if.then87, %sw.bb84
  %arrayidx92 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12366
  %92 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx92, align 8, !dbg !12366
  %tobool93 = icmp ne %struct.ImBuf* %92, null, !dbg !12366
  br i1 %tobool93, label %if.then94, label %if.end103, !dbg !12368

if.then94:                                        ; preds = %if.end91
  %93 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12369
  %94 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12372
  %95 = load float, float* %cfra.addr, align 4, !dbg !12373
  %call95 = call zeroext i8 @BKE_sequencer_input_have_to_preprocess(%struct.SeqRenderData* %93, %struct.Sequence* %94, float %95), !dbg !12374
  %tobool96 = icmp ne i8 %call95, 0, !dbg !12374
  br i1 %tobool96, label %if.then97, label %if.else100, !dbg !12375

if.then97:                                        ; preds = %if.then94
  %arrayidx98 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12376
  %96 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx98, align 8, !dbg !12376
  %call99 = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %96), !dbg !12378
  store %struct.ImBuf* %call99, %struct.ImBuf** %out, align 8, !dbg !12379
  br label %if.end102, !dbg !12380

if.else100:                                       ; preds = %if.then94
  %arrayidx101 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 1, !dbg !12381
  %97 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx101, align 8, !dbg !12381
  store %struct.ImBuf* %97, %struct.ImBuf** %out, align 8, !dbg !12383
  %98 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !12384
  call void @IMB_refImBuf(%struct.ImBuf* %98), !dbg !12385
  br label %if.end102

if.end102:                                        ; preds = %if.else100, %if.then97
  br label %if.end103, !dbg !12386

if.end103:                                        ; preds = %if.end102, %if.end91
  br label %sw.epilog, !dbg !12387

sw.epilog:                                        ; preds = %if.end28, %if.end103, %if.end83, %if.end63, %sw.bb
  store i32 0, i32* %i, align 4, !dbg !12388
  br label %for.cond104, !dbg !12390

for.cond104:                                      ; preds = %for.inc109, %sw.epilog
  %99 = load i32, i32* %i, align 4, !dbg !12391
  %cmp105 = icmp slt i32 %99, 3, !dbg !12393
  br i1 %cmp105, label %for.body106, label %for.end111, !dbg !12394

for.body106:                                      ; preds = %for.cond104
  %100 = load i32, i32* %i, align 4, !dbg !12395
  %idxprom107 = sext i32 %100 to i64, !dbg !12397
  %arrayidx108 = getelementptr inbounds [3 x %struct.ImBuf*], [3 x %struct.ImBuf*]* %ibuf, i64 0, i64 %idxprom107, !dbg !12397
  %101 = load %struct.ImBuf*, %struct.ImBuf** %arrayidx108, align 8, !dbg !12397
  call void @IMB_freeImBuf(%struct.ImBuf* %101), !dbg !12398
  br label %for.inc109, !dbg !12399

for.inc109:                                       ; preds = %for.body106
  %102 = load i32, i32* %i, align 4, !dbg !12400
  %inc110 = add nsw i32 %102, 1, !dbg !12400
  store i32 %inc110, i32* %i, align 4, !dbg !12400
  br label %for.cond104, !dbg !12401, !llvm.loop !12402

for.end111:                                       ; preds = %for.cond104
  %103 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !12404
  %cmp112 = icmp eq %struct.ImBuf* %103, null, !dbg !12406
  br i1 %cmp112, label %if.then113, label %if.end117, !dbg !12407

if.then113:                                       ; preds = %for.end111
  %104 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12408
  %rectx114 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %104, i32 0, i32 3, !dbg !12410
  %105 = load i32, i32* %rectx114, align 8, !dbg !12410
  %106 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12411
  %recty115 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %106, i32 0, i32 4, !dbg !12412
  %107 = load i32, i32* %recty115, align 4, !dbg !12412
  %call116 = call %struct.ImBuf* @IMB_allocImBuf(i32 %105, i32 %107, i8 zeroext 32, i32 1), !dbg !12413
  store %struct.ImBuf* %call116, %struct.ImBuf** %out, align 8, !dbg !12414
  br label %if.end117, !dbg !12415

if.end117:                                        ; preds = %if.then113, %for.end111
  %108 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !12416
  store %struct.ImBuf* %108, %struct.ImBuf** %retval, align 8, !dbg !12417
  br label %return, !dbg !12417

return:                                           ; preds = %if.end117, %if.then
  %109 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !12418
  ret %struct.ImBuf* %109, !dbg !12418
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_to_ibuf_still(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %nr, %struct.ImBuf* %ibuf) #0 !dbg !12419 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %nr.addr = alloca float, align 4
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12422, metadata !DIExpression()), !dbg !12423
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12424, metadata !DIExpression()), !dbg !12425
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !12426, metadata !DIExpression()), !dbg !12427
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !12428, metadata !DIExpression()), !dbg !12429
  %0 = load float, float* %nr.addr, align 4, !dbg !12430
  %cmp = fcmp oeq float %0, 0.000000e+00, !dbg !12432
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12433

lor.lhs.false:                                    ; preds = %entry
  %1 = load float, float* %nr.addr, align 4, !dbg !12434
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12435
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 7, !dbg !12436
  %3 = load i32, i32* %len, align 8, !dbg !12436
  %sub = sub nsw i32 %3, 1, !dbg !12437
  %conv = sitofp i32 %sub to float, !dbg !12435
  %cmp1 = fcmp oeq float %1, %conv, !dbg !12438
  br i1 %cmp1, label %if.then, label %if.end18, !dbg !12439

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12440
  %call = call %struct.ImBuf* @IMB_dupImBuf(%struct.ImBuf* %4), !dbg !12442
  store %struct.ImBuf* %call, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12443
  %5 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12444
  %tobool = icmp ne %struct.ImBuf* %5, null, !dbg !12444
  br i1 %tobool, label %if.then3, label %if.end, !dbg !12446

if.then3:                                         ; preds = %if.then
  %6 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12447
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %6, i32 0, i32 2, !dbg !12449
  %7 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12449
  %8 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12450
  call void @sequencer_imbuf_assign_spaces(%struct.Scene* %7, %struct.ImBuf* %8), !dbg !12451
  br label %if.end, !dbg !12452

if.end:                                           ; preds = %if.then3, %if.then
  %9 = load float, float* %nr.addr, align 4, !dbg !12453
  %cmp4 = fcmp oeq float %9, 0.000000e+00, !dbg !12455
  br i1 %cmp4, label %if.then6, label %if.end8, !dbg !12456

if.then6:                                         ; preds = %if.end
  %10 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12457
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12459
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12460
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 8, !dbg !12461
  %13 = load i32, i32* %start, align 4, !dbg !12461
  %conv7 = sitofp i32 %13 to float, !dbg !12460
  %14 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12462
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %10, %struct.Sequence* %11, float %conv7, i32 2, %struct.ImBuf* %14), !dbg !12463
  br label %if.end8, !dbg !12464

if.end8:                                          ; preds = %if.then6, %if.end
  %15 = load float, float* %nr.addr, align 4, !dbg !12465
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12467
  %len9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 7, !dbg !12468
  %17 = load i32, i32* %len9, align 8, !dbg !12468
  %sub10 = sub nsw i32 %17, 1, !dbg !12469
  %conv11 = sitofp i32 %sub10 to float, !dbg !12467
  %cmp12 = fcmp oeq float %15, %conv11, !dbg !12470
  br i1 %cmp12, label %if.then14, label %if.end17, !dbg !12471

if.then14:                                        ; preds = %if.end8
  %18 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12472
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12474
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12475
  %start15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 8, !dbg !12476
  %21 = load i32, i32* %start15, align 4, !dbg !12476
  %conv16 = sitofp i32 %21 to float, !dbg !12475
  %22 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12477
  call void @BKE_sequencer_cache_put(%struct.SeqRenderData* %18, %struct.Sequence* %19, float %conv16, i32 3, %struct.ImBuf* %22), !dbg !12478
  br label %if.end17, !dbg !12479

if.end17:                                         ; preds = %if.then14, %if.end8
  %23 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !12480
  call void @IMB_freeImBuf(%struct.ImBuf* %23), !dbg !12481
  br label %if.end18, !dbg !12482

if.end18:                                         ; preds = %if.end17, %lor.lhs.false
  ret void, !dbg !12483
}

declare dso_local void @IMB_anim_set_preseek(%struct.anim*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_scene_strip(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %nr) #0 !dbg !12484 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %nr.addr = alloca float, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  %frame = alloca float, align 4
  %oldcfra = alloca float, align 4
  %camera = alloca %struct.Object*, align 8
  %oldmarkers = alloca %struct.ListBase, align 8
  %is_rendering = alloca i8, align 1
  %is_background = alloca i8, align 1
  %do_seq_gl = alloca i8, align 1
  %do_seq = alloca i32, align 4
  %have_comp = alloca i8, align 1
  %scene4 = alloca %struct.Scene*, align 8
  %is_thread_main = alloca i32, align 4
  %err_out = alloca [256 x i8], align 16
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %re = alloca %struct.Render*, align 8
  %rres = alloca %struct.RenderResult, align 8
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12485, metadata !DIExpression()), !dbg !12486
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12487, metadata !DIExpression()), !dbg !12488
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !12489, metadata !DIExpression()), !dbg !12490
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !12491, metadata !DIExpression()), !dbg !12492
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !12492
  call void @llvm.dbg.declare(metadata float* %frame, metadata !12493, metadata !DIExpression()), !dbg !12494
  call void @llvm.dbg.declare(metadata float* %oldcfra, metadata !12495, metadata !DIExpression()), !dbg !12496
  call void @llvm.dbg.declare(metadata %struct.Object** %camera, metadata !12497, metadata !DIExpression()), !dbg !12500
  call void @llvm.dbg.declare(metadata %struct.ListBase* %oldmarkers, metadata !12501, metadata !DIExpression()), !dbg !12502
  call void @llvm.dbg.declare(metadata i8* %is_rendering, metadata !12503, metadata !DIExpression()), !dbg !12504
  %0 = load i8, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 13), align 2, !dbg !12505
  store i8 %0, i8* %is_rendering, align 1, !dbg !12504
  call void @llvm.dbg.declare(metadata i8* %is_background, metadata !12506, metadata !DIExpression()), !dbg !12507
  %1 = load i8, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 8), align 1, !dbg !12508
  store i8 %1, i8* %is_background, align 1, !dbg !12507
  call void @llvm.dbg.declare(metadata i8* %do_seq_gl, metadata !12509, metadata !DIExpression()), !dbg !12510
  %2 = load i8, i8* %is_rendering, align 1, !dbg !12511
  %conv = zext i8 %2 to i32, !dbg !12511
  %tobool = icmp ne i32 %conv, 0, !dbg !12511
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12511

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !12511

cond.false:                                       ; preds = %entry
  %3 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12512
  %scene = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %3, i32 0, i32 2, !dbg !12513
  %4 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !12513
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %4, i32 0, i32 22, !dbg !12514
  %seq_flag = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 93, !dbg !12515
  %5 = load i8, i8* %seq_flag, align 2, !dbg !12515
  %conv1 = zext i8 %5 to i32, !dbg !12512
  %and = and i32 %conv1, 1, !dbg !12516
  %cmp = icmp ne i32 %and, 0, !dbg !12517
  %conv2 = zext i1 %cmp to i32, !dbg !12517
  br label %cond.end, !dbg !12511

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv2, %cond.false ], !dbg !12511
  %conv3 = trunc i32 %cond to i8, !dbg !12511
  store i8 %conv3, i8* %do_seq_gl, align 1, !dbg !12510
  call void @llvm.dbg.declare(metadata i32* %do_seq, metadata !12518, metadata !DIExpression()), !dbg !12519
  call void @llvm.dbg.declare(metadata i8* %have_comp, metadata !12520, metadata !DIExpression()), !dbg !12521
  store i8 0, i8* %have_comp, align 1, !dbg !12521
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene4, metadata !12522, metadata !DIExpression()), !dbg !12523
  call void @llvm.dbg.declare(metadata i32* %is_thread_main, metadata !12524, metadata !DIExpression()), !dbg !12525
  %call = call i32 @BLI_thread_is_main(), !dbg !12526
  store i32 %call, i32* %is_thread_main, align 4, !dbg !12525
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12527
  %scene5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 26, !dbg !12529
  %7 = load %struct.Scene*, %struct.Scene** %scene5, align 8, !dbg !12529
  %cmp6 = icmp eq %struct.Scene* %7, null, !dbg !12530
  br i1 %cmp6, label %if.then, label %if.end, !dbg !12531

if.then:                                          ; preds = %cond.end
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !12532
  br label %return, !dbg !12532

if.end:                                           ; preds = %cond.end
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12534
  %scene8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 26, !dbg !12535
  %9 = load %struct.Scene*, %struct.Scene** %scene8, align 8, !dbg !12535
  store %struct.Scene* %9, %struct.Scene** %scene4, align 8, !dbg !12536
  %10 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12537
  %r9 = getelementptr inbounds %struct.Scene, %struct.Scene* %10, i32 0, i32 22, !dbg !12538
  %sfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r9, i32 0, i32 6, !dbg !12539
  %11 = load i32, i32* %sfra, align 4, !dbg !12539
  %conv10 = sitofp i32 %11 to float, !dbg !12537
  %12 = load float, float* %nr.addr, align 4, !dbg !12540
  %add = fadd float %conv10, %12, !dbg !12541
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12542
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 44, !dbg !12543
  %14 = load i32, i32* %anim_startofs, align 8, !dbg !12543
  %conv11 = sitofp i32 %14 to float, !dbg !12542
  %add12 = fadd float %add, %conv11, !dbg !12544
  store float %add12, float* %frame, align 4, !dbg !12545
  %15 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12546
  %r13 = getelementptr inbounds %struct.Scene, %struct.Scene* %15, i32 0, i32 22, !dbg !12547
  %scemode = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r13, i32 0, i32 46, !dbg !12548
  %16 = load i32, i32* %scemode, align 4, !dbg !12548
  %and14 = and i32 %16, 64, !dbg !12549
  %tobool15 = icmp ne i32 %and14, 0, !dbg !12549
  br i1 %tobool15, label %land.lhs.true, label %land.end, !dbg !12550

land.lhs.true:                                    ; preds = %if.end
  %17 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12551
  %use_nodes = getelementptr inbounds %struct.Scene, %struct.Scene* %17, i32 0, i32 16, !dbg !12552
  %18 = load i8, i8* %use_nodes, align 2, !dbg !12552
  %conv16 = zext i8 %18 to i32, !dbg !12551
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !12551
  br i1 %tobool17, label %land.rhs, label %land.end, !dbg !12553

land.rhs:                                         ; preds = %land.lhs.true
  %19 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12554
  %nodetree = getelementptr inbounds %struct.Scene, %struct.Scene* %19, i32 0, i32 18, !dbg !12555
  %20 = load %struct.bNodeTree*, %struct.bNodeTree** %nodetree, align 8, !dbg !12555
  %tobool18 = icmp ne %struct.bNodeTree* %20, null, !dbg !12553
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %21 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %tobool18, %land.rhs ], !dbg !12556
  %land.ext = zext i1 %21 to i32, !dbg !12553
  %conv19 = trunc i32 %land.ext to i8, !dbg !12557
  store i8 %conv19, i8* %have_comp, align 1, !dbg !12558
  %22 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12559
  %r20 = getelementptr inbounds %struct.Scene, %struct.Scene* %22, i32 0, i32 22, !dbg !12560
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r20, i32 0, i32 5, !dbg !12561
  %23 = load i32, i32* %cfra, align 8, !dbg !12561
  %conv21 = sitofp i32 %23 to float, !dbg !12559
  store float %conv21, float* %oldcfra, align 4, !dbg !12562
  %24 = load float, float* %frame, align 4, !dbg !12563
  %conv22 = fptosi float %24 to i32, !dbg !12563
  %25 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12564
  %r23 = getelementptr inbounds %struct.Scene, %struct.Scene* %25, i32 0, i32 22, !dbg !12565
  %cfra24 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r23, i32 0, i32 5, !dbg !12566
  store i32 %conv22, i32* %cfra24, align 8, !dbg !12567
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12568
  %scene_camera = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 27, !dbg !12570
  %27 = load %struct.Object*, %struct.Object** %scene_camera, align 8, !dbg !12570
  %tobool25 = icmp ne %struct.Object* %27, null, !dbg !12568
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !12571

if.then26:                                        ; preds = %land.end
  %28 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12572
  %scene_camera27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 27, !dbg !12574
  %29 = load %struct.Object*, %struct.Object** %scene_camera27, align 8, !dbg !12574
  store %struct.Object* %29, %struct.Object** %camera, align 8, !dbg !12575
  br label %if.end30, !dbg !12576

if.else:                                          ; preds = %land.end
  %30 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12577
  %call28 = call i32 @BKE_scene_camera_switch_update(%struct.Scene* %30), !dbg !12579
  %31 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12580
  %camera29 = getelementptr inbounds %struct.Scene, %struct.Scene* %31, i32 0, i32 2, !dbg !12581
  %32 = load %struct.Object*, %struct.Object** %camera29, align 8, !dbg !12581
  store %struct.Object* %32, %struct.Object** %camera, align 8, !dbg !12582
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then26
  %33 = load i8, i8* %have_comp, align 1, !dbg !12583
  %conv31 = zext i8 %33 to i32, !dbg !12583
  %cmp32 = icmp eq i32 %conv31, 0, !dbg !12585
  br i1 %cmp32, label %land.lhs.true34, label %if.end41, !dbg !12586

land.lhs.true34:                                  ; preds = %if.end30
  %34 = load %struct.Object*, %struct.Object** %camera, align 8, !dbg !12587
  %cmp35 = icmp eq %struct.Object* %34, null, !dbg !12588
  br i1 %cmp35, label %if.then37, label %if.end41, !dbg !12589

if.then37:                                        ; preds = %land.lhs.true34
  %35 = load float, float* %oldcfra, align 4, !dbg !12590
  %conv38 = fptosi float %35 to i32, !dbg !12590
  %36 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12592
  %r39 = getelementptr inbounds %struct.Scene, %struct.Scene* %36, i32 0, i32 22, !dbg !12593
  %cfra40 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r39, i32 0, i32 5, !dbg !12594
  store i32 %conv38, i32* %cfra40, align 8, !dbg !12595
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !12596
  br label %return, !dbg !12596

if.end41:                                         ; preds = %land.lhs.true34, %if.end30
  %37 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12597
  %r42 = getelementptr inbounds %struct.Scene, %struct.Scene* %37, i32 0, i32 22, !dbg !12598
  %scemode43 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r42, i32 0, i32 46, !dbg !12599
  %38 = load i32, i32* %scemode43, align 4, !dbg !12599
  %and44 = and i32 %38, 1, !dbg !12600
  store i32 %and44, i32* %do_seq, align 4, !dbg !12601
  %39 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12602
  %r45 = getelementptr inbounds %struct.Scene, %struct.Scene* %39, i32 0, i32 22, !dbg !12603
  %scemode46 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r45, i32 0, i32 46, !dbg !12604
  %40 = load i32, i32* %scemode46, align 4, !dbg !12605
  %and47 = and i32 %40, -2, !dbg !12605
  store i32 %and47, i32* %scemode46, align 4, !dbg !12605
  %41 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12606
  %markers = getelementptr inbounds %struct.Scene, %struct.Scene* %41, i32 0, i32 24, !dbg !12607
  %42 = bitcast %struct.ListBase* %oldmarkers to i8*, !dbg !12607
  %43 = bitcast %struct.ListBase* %markers to i8*, !dbg !12607
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false), !dbg !12607
  %44 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12608
  %markers48 = getelementptr inbounds %struct.Scene, %struct.Scene* %44, i32 0, i32 24, !dbg !12609
  call void @BLI_listbase_clear(%struct.ListBase* %markers48), !dbg !12610
  %45 = load %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)*, %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)** @sequencer_view3d_cb, align 8, !dbg !12611
  %tobool49 = icmp ne %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)* %45, null, !dbg !12611
  br i1 %tobool49, label %land.lhs.true50, label %if.else98, !dbg !12613

land.lhs.true50:                                  ; preds = %if.end41
  %46 = load i8, i8* %do_seq_gl, align 1, !dbg !12614
  %conv51 = zext i8 %46 to i32, !dbg !12614
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !12614
  br i1 %tobool52, label %land.lhs.true53, label %if.else98, !dbg !12615

land.lhs.true53:                                  ; preds = %land.lhs.true50
  %47 = load %struct.Object*, %struct.Object** %camera, align 8, !dbg !12616
  %tobool54 = icmp ne %struct.Object* %47, null, !dbg !12616
  br i1 %tobool54, label %land.lhs.true55, label %if.else98, !dbg !12617

land.lhs.true55:                                  ; preds = %land.lhs.true53
  %48 = load i32, i32* %is_thread_main, align 4, !dbg !12618
  %tobool56 = icmp ne i32 %48, 0, !dbg !12618
  br i1 %tobool56, label %if.then57, label %if.else98, !dbg !12619

if.then57:                                        ; preds = %land.lhs.true55
  call void @llvm.dbg.declare(metadata [256 x i8]* %err_out, metadata !12620, metadata !DIExpression()), !dbg !12622
  %49 = bitcast [256 x i8]* %err_out to i8*, !dbg !12622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %49, i8* align 16 getelementptr inbounds ([256 x i8], [256 x i8]* @__const.seq_render_scene_strip.err_out, i32 0, i32 0), i64 256, i1 false), !dbg !12622
  call void @llvm.dbg.declare(metadata i32* %width, metadata !12623, metadata !DIExpression()), !dbg !12624
  %50 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12625
  %r58 = getelementptr inbounds %struct.Scene, %struct.Scene* %50, i32 0, i32 22, !dbg !12626
  %xsch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r58, i32 0, i32 33, !dbg !12627
  %51 = load i32, i32* %xsch, align 4, !dbg !12627
  %52 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12628
  %r59 = getelementptr inbounds %struct.Scene, %struct.Scene* %52, i32 0, i32 22, !dbg !12629
  %size = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r59, i32 0, i32 30, !dbg !12630
  %53 = load i16, i16* %size, align 2, !dbg !12630
  %conv60 = sext i16 %53 to i32, !dbg !12628
  %mul = mul nsw i32 %51, %conv60, !dbg !12631
  %div = sdiv i32 %mul, 100, !dbg !12632
  store i32 %div, i32* %width, align 4, !dbg !12624
  call void @llvm.dbg.declare(metadata i32* %height, metadata !12633, metadata !DIExpression()), !dbg !12634
  %54 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12635
  %r61 = getelementptr inbounds %struct.Scene, %struct.Scene* %54, i32 0, i32 22, !dbg !12636
  %ysch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r61, i32 0, i32 34, !dbg !12637
  %55 = load i32, i32* %ysch, align 8, !dbg !12637
  %56 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12638
  %r62 = getelementptr inbounds %struct.Scene, %struct.Scene* %56, i32 0, i32 22, !dbg !12639
  %size63 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r62, i32 0, i32 30, !dbg !12640
  %57 = load i16, i16* %size63, align 2, !dbg !12640
  %conv64 = sext i16 %57 to i32, !dbg !12638
  %mul65 = mul nsw i32 %55, %conv64, !dbg !12641
  %div66 = sdiv i32 %mul65, 100, !dbg !12642
  store i32 %div66, i32* %height, align 4, !dbg !12634
  %58 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12643
  %scene67 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %58, i32 0, i32 2, !dbg !12645
  %59 = load %struct.Scene*, %struct.Scene** %scene67, align 8, !dbg !12645
  %r68 = getelementptr inbounds %struct.Scene, %struct.Scene* %59, i32 0, i32 22, !dbg !12646
  %seq_prev_type = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r68, i32 0, i32 91, !dbg !12647
  %60 = load i8, i8* %seq_prev_type, align 8, !dbg !12647
  %conv69 = zext i8 %60 to i32, !dbg !12643
  %cmp70 = icmp eq i32 %conv69, 0, !dbg !12648
  br i1 %cmp70, label %if.then72, label %if.end76, !dbg !12649

if.then72:                                        ; preds = %if.then57
  %61 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12650
  %scene73 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %61, i32 0, i32 2, !dbg !12651
  %62 = load %struct.Scene*, %struct.Scene** %scene73, align 8, !dbg !12651
  %r74 = getelementptr inbounds %struct.Scene, %struct.Scene* %62, i32 0, i32 22, !dbg !12652
  %seq_prev_type75 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r74, i32 0, i32 91, !dbg !12653
  store i8 3, i8* %seq_prev_type75, align 8, !dbg !12654
  br label %if.end76, !dbg !12650

if.end76:                                         ; preds = %if.then72, %if.then57
  %63 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12655
  %eval_ctx = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %63, i32 0, i32 0, !dbg !12656
  %64 = load %struct.EvaluationContext*, %struct.EvaluationContext** %eval_ctx, align 8, !dbg !12656
  %65 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12657
  %bmain = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %65, i32 0, i32 1, !dbg !12658
  %66 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !12658
  %67 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12659
  %68 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12660
  %lay = getelementptr inbounds %struct.Scene, %struct.Scene* %68, i32 0, i32 12, !dbg !12661
  %69 = load i32, i32* %lay, align 8, !dbg !12661
  call void @BKE_scene_update_for_newframe(%struct.EvaluationContext* %64, %struct.Main* %66, %struct.Scene* %67, i32 %69), !dbg !12662
  %70 = load %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)*, %struct.ImBuf* (%struct.Scene*, %struct.Object*, i32, i32, i32, i32, i8, i8, i32, i8*)** @sequencer_view3d_cb, align 8, !dbg !12663
  %71 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12664
  %72 = load %struct.Object*, %struct.Object** %camera, align 8, !dbg !12665
  %73 = load i32, i32* %width, align 4, !dbg !12666
  %74 = load i32, i32* %height, align 4, !dbg !12667
  %75 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12668
  %scene77 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %75, i32 0, i32 2, !dbg !12669
  %76 = load %struct.Scene*, %struct.Scene** %scene77, align 8, !dbg !12669
  %r78 = getelementptr inbounds %struct.Scene, %struct.Scene* %76, i32 0, i32 22, !dbg !12670
  %seq_prev_type79 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r78, i32 0, i32 91, !dbg !12671
  %77 = load i8, i8* %seq_prev_type79, align 8, !dbg !12671
  %conv80 = zext i8 %77 to i32, !dbg !12668
  %78 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12672
  %scene81 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %78, i32 0, i32 2, !dbg !12673
  %79 = load %struct.Scene*, %struct.Scene** %scene81, align 8, !dbg !12673
  %r82 = getelementptr inbounds %struct.Scene, %struct.Scene* %79, i32 0, i32 22, !dbg !12674
  %seq_flag83 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r82, i32 0, i32 93, !dbg !12675
  %80 = load i8, i8* %seq_flag83, align 2, !dbg !12675
  %conv84 = zext i8 %80 to i32, !dbg !12672
  %and85 = and i32 %conv84, 4, !dbg !12676
  %cmp86 = icmp ne i32 %and85, 0, !dbg !12677
  %conv87 = zext i1 %cmp86 to i32, !dbg !12677
  %conv88 = trunc i32 %conv87 to i8, !dbg !12678
  %81 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12679
  %r89 = getelementptr inbounds %struct.Scene, %struct.Scene* %81, i32 0, i32 22, !dbg !12680
  %alphamode = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r89, i32 0, i32 53, !dbg !12681
  %82 = load i16, i16* %alphamode, align 8, !dbg !12681
  %conv90 = sext i16 %82 to i32, !dbg !12679
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %err_out, i64 0, i64 0, !dbg !12682
  %call91 = call %struct.ImBuf* %70(%struct.Scene* %71, %struct.Object* %72, i32 %73, i32 %74, i32 1, i32 %conv80, i8 zeroext %conv88, i8 zeroext 1, i32 %conv90, i8* %arraydecay), !dbg !12663
  store %struct.ImBuf* %call91, %struct.ImBuf** %ibuf, align 8, !dbg !12683
  %83 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12684
  %cmp92 = icmp eq %struct.ImBuf* %83, null, !dbg !12686
  br i1 %cmp92, label %if.then94, label %if.end97, !dbg !12687

if.then94:                                        ; preds = %if.end76
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !12688
  %arraydecay95 = getelementptr inbounds [256 x i8], [256 x i8]* %err_out, i64 0, i64 0, !dbg !12690
  %call96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.42, i64 0, i64 0), i8* %arraydecay95), !dbg !12691
  br label %if.end97, !dbg !12692

if.end97:                                         ; preds = %if.then94, %if.end76
  br label %if.end160, !dbg !12693

if.else98:                                        ; preds = %land.lhs.true55, %land.lhs.true53, %land.lhs.true50, %if.end41
  call void @llvm.dbg.declare(metadata %struct.Render** %re, metadata !12694, metadata !DIExpression()), !dbg !12699
  %85 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12700
  %id = getelementptr inbounds %struct.Scene, %struct.Scene* %85, i32 0, i32 0, !dbg !12701
  %name = getelementptr inbounds %struct.ID, %struct.ID* %id, i32 0, i32 4, !dbg !12702
  %arraydecay99 = getelementptr inbounds [66 x i8], [66 x i8]* %name, i64 0, i64 0, !dbg !12700
  %call100 = call %struct.Render* @RE_GetRender(i8* %arraydecay99), !dbg !12703
  store %struct.Render* %call100, %struct.Render** %re, align 8, !dbg !12699
  call void @llvm.dbg.declare(metadata %struct.RenderResult* %rres, metadata !12704, metadata !DIExpression()), !dbg !12706
  %86 = load i32, i32* %is_thread_main, align 4, !dbg !12707
  %tobool101 = icmp ne i32 %86, 0, !dbg !12707
  br i1 %tobool101, label %lor.lhs.false, label %if.then108, !dbg !12709

lor.lhs.false:                                    ; preds = %if.else98
  %87 = load i8, i8* %is_rendering, align 1, !dbg !12710
  %conv102 = zext i8 %87 to i32, !dbg !12710
  %cmp103 = icmp eq i32 %conv102, 0, !dbg !12711
  br i1 %cmp103, label %if.then108, label %lor.lhs.false105, !dbg !12712

lor.lhs.false105:                                 ; preds = %lor.lhs.false
  %88 = load i8, i8* %is_background, align 1, !dbg !12713
  %conv106 = zext i8 %88 to i32, !dbg !12713
  %tobool107 = icmp ne i32 %conv106, 0, !dbg !12713
  br i1 %tobool107, label %if.then108, label %if.end123, !dbg !12714

if.then108:                                       ; preds = %lor.lhs.false105, %lor.lhs.false, %if.else98
  %89 = load %struct.Render*, %struct.Render** %re, align 8, !dbg !12715
  %cmp109 = icmp eq %struct.Render* %89, null, !dbg !12718
  br i1 %cmp109, label %if.then111, label %if.end116, !dbg !12719

if.then111:                                       ; preds = %if.then108
  %90 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12720
  %id112 = getelementptr inbounds %struct.Scene, %struct.Scene* %90, i32 0, i32 0, !dbg !12721
  %name113 = getelementptr inbounds %struct.ID, %struct.ID* %id112, i32 0, i32 4, !dbg !12722
  %arraydecay114 = getelementptr inbounds [66 x i8], [66 x i8]* %name113, i64 0, i64 0, !dbg !12720
  %call115 = call %struct.Render* @RE_NewRender(i8* %arraydecay114), !dbg !12723
  store %struct.Render* %call115, %struct.Render** %re, align 8, !dbg !12724
  br label %if.end116, !dbg !12725

if.end116:                                        ; preds = %if.then111, %if.then108
  %91 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12726
  %eval_ctx117 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %91, i32 0, i32 0, !dbg !12727
  %92 = load %struct.EvaluationContext*, %struct.EvaluationContext** %eval_ctx117, align 8, !dbg !12727
  %93 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12728
  %bmain118 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %93, i32 0, i32 1, !dbg !12729
  %94 = load %struct.Main*, %struct.Main** %bmain118, align 8, !dbg !12729
  %95 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12730
  %96 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12731
  %lay119 = getelementptr inbounds %struct.Scene, %struct.Scene* %96, i32 0, i32 12, !dbg !12732
  %97 = load i32, i32* %lay119, align 8, !dbg !12732
  call void @BKE_scene_update_for_newframe(%struct.EvaluationContext* %92, %struct.Main* %94, %struct.Scene* %95, i32 %97), !dbg !12733
  %98 = load %struct.Render*, %struct.Render** %re, align 8, !dbg !12734
  %99 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12735
  %bmain120 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %99, i32 0, i32 1, !dbg !12736
  %100 = load %struct.Main*, %struct.Main** %bmain120, align 8, !dbg !12736
  %101 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12737
  %102 = load %struct.Object*, %struct.Object** %camera, align 8, !dbg !12738
  %103 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12739
  %lay121 = getelementptr inbounds %struct.Scene, %struct.Scene* %103, i32 0, i32 12, !dbg !12740
  %104 = load i32, i32* %lay121, align 8, !dbg !12740
  %105 = load float, float* %frame, align 4, !dbg !12741
  %conv122 = fptosi float %105 to i32, !dbg !12741
  call void @RE_BlenderFrame(%struct.Render* %98, %struct.Main* %100, %struct.Scene* %101, %struct.SceneRenderLayer* null, %struct.Object* %102, i32 %104, i32 %conv122, i8 zeroext 0), !dbg !12742
  %106 = load i8, i8* %is_rendering, align 1, !dbg !12743
  store i8 %106, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 13), align 2, !dbg !12744
  br label %if.end123, !dbg !12745

if.end123:                                        ; preds = %if.end116, %lor.lhs.false105
  %107 = load %struct.Render*, %struct.Render** %re, align 8, !dbg !12746
  call void @RE_AcquireResultImage(%struct.Render* %107, %struct.RenderResult* %rres), !dbg !12747
  %rectf = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 7, !dbg !12748
  %108 = load float*, float** %rectf, align 8, !dbg !12748
  %tobool124 = icmp ne float* %108, null, !dbg !12750
  br i1 %tobool124, label %if.then125, label %if.else146, !dbg !12751

if.then125:                                       ; preds = %if.end123
  %rectx = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 2, !dbg !12752
  %109 = load i32, i32* %rectx, align 8, !dbg !12752
  %recty = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 3, !dbg !12754
  %110 = load i32, i32* %recty, align 4, !dbg !12754
  %call126 = call %struct.ImBuf* @IMB_allocImBuf(i32 %109, i32 %110, i8 zeroext 32, i32 32), !dbg !12755
  store %struct.ImBuf* %call126, %struct.ImBuf** %ibuf, align 8, !dbg !12756
  %111 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12757
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %111, i32 0, i32 9, !dbg !12758
  %112 = load float*, float** %rect_float, align 8, !dbg !12758
  %113 = bitcast float* %112 to i8*, !dbg !12759
  %rectf127 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 7, !dbg !12760
  %114 = load float*, float** %rectf127, align 8, !dbg !12760
  %115 = bitcast float* %114 to i8*, !dbg !12759
  %rectx128 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 2, !dbg !12761
  %116 = load i32, i32* %rectx128, align 8, !dbg !12761
  %conv129 = sext i32 %116 to i64, !dbg !12762
  %mul130 = mul i64 16, %conv129, !dbg !12763
  %recty131 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 3, !dbg !12764
  %117 = load i32, i32* %recty131, align 4, !dbg !12764
  %conv132 = sext i32 %117 to i64, !dbg !12765
  %mul133 = mul i64 %mul130, %conv132, !dbg !12766
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %113, i8* align 4 %115, i64 %mul133, i1 false), !dbg !12759
  %rectz = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 8, !dbg !12767
  %118 = load float*, float** %rectz, align 8, !dbg !12767
  %tobool134 = icmp ne float* %118, null, !dbg !12769
  br i1 %tobool134, label %if.then135, label %if.end144, !dbg !12770

if.then135:                                       ; preds = %if.then125
  %119 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12771
  %call136 = call zeroext i8 @addzbuffloatImBuf(%struct.ImBuf* %119), !dbg !12773
  %120 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12774
  %zbuf_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %120, i32 0, i32 17, !dbg !12775
  %121 = load float*, float** %zbuf_float, align 8, !dbg !12775
  %122 = bitcast float* %121 to i8*, !dbg !12776
  %rectz137 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 8, !dbg !12777
  %123 = load float*, float** %rectz137, align 8, !dbg !12777
  %124 = bitcast float* %123 to i8*, !dbg !12776
  %rectx138 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 2, !dbg !12778
  %125 = load i32, i32* %rectx138, align 8, !dbg !12778
  %conv139 = sext i32 %125 to i64, !dbg !12779
  %mul140 = mul i64 4, %conv139, !dbg !12780
  %recty141 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 3, !dbg !12781
  %126 = load i32, i32* %recty141, align 4, !dbg !12781
  %conv142 = sext i32 %126 to i64, !dbg !12782
  %mul143 = mul i64 %mul140, %conv142, !dbg !12783
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %122, i8* align 4 %124, i64 %mul143, i1 false), !dbg !12776
  br label %if.end144, !dbg !12784

if.end144:                                        ; preds = %if.then135, %if.then125
  %127 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12785
  %scene145 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %127, i32 0, i32 2, !dbg !12786
  %128 = load %struct.Scene*, %struct.Scene** %scene145, align 8, !dbg !12786
  %129 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12787
  call void @BKE_sequencer_imbuf_to_sequencer_space(%struct.Scene* %128, %struct.ImBuf* %129, i8 zeroext 0), !dbg !12788
  br label %if.end159, !dbg !12789

if.else146:                                       ; preds = %if.end123
  %rect32 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 6, !dbg !12790
  %130 = load i32*, i32** %rect32, align 8, !dbg !12790
  %tobool147 = icmp ne i32* %130, null, !dbg !12792
  br i1 %tobool147, label %if.then148, label %if.end158, !dbg !12793

if.then148:                                       ; preds = %if.else146
  %rectx149 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 2, !dbg !12794
  %131 = load i32, i32* %rectx149, align 8, !dbg !12794
  %recty150 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 3, !dbg !12796
  %132 = load i32, i32* %recty150, align 4, !dbg !12796
  %call151 = call %struct.ImBuf* @IMB_allocImBuf(i32 %131, i32 %132, i8 zeroext 32, i32 1), !dbg !12797
  store %struct.ImBuf* %call151, %struct.ImBuf** %ibuf, align 8, !dbg !12798
  %133 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12799
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %133, i32 0, i32 8, !dbg !12800
  %134 = load i32*, i32** %rect, align 8, !dbg !12800
  %135 = bitcast i32* %134 to i8*, !dbg !12801
  %rect32152 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 6, !dbg !12802
  %136 = load i32*, i32** %rect32152, align 8, !dbg !12802
  %137 = bitcast i32* %136 to i8*, !dbg !12801
  %rectx153 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 2, !dbg !12803
  %138 = load i32, i32* %rectx153, align 8, !dbg !12803
  %mul154 = mul nsw i32 4, %138, !dbg !12804
  %recty155 = getelementptr inbounds %struct.RenderResult, %struct.RenderResult* %rres, i32 0, i32 3, !dbg !12805
  %139 = load i32, i32* %recty155, align 4, !dbg !12805
  %mul156 = mul nsw i32 %mul154, %139, !dbg !12806
  %conv157 = sext i32 %mul156 to i64, !dbg !12807
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %135, i8* align 4 %137, i64 %conv157, i1 false), !dbg !12801
  br label %if.end158, !dbg !12808

if.end158:                                        ; preds = %if.then148, %if.else146
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.end144
  %140 = load %struct.Render*, %struct.Render** %re, align 8, !dbg !12809
  call void @RE_ReleaseResultImage(%struct.Render* %140), !dbg !12810
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.end97
  %141 = load i32, i32* %do_seq, align 4, !dbg !12811
  %142 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12812
  %r161 = getelementptr inbounds %struct.Scene, %struct.Scene* %142, i32 0, i32 22, !dbg !12813
  %scemode162 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r161, i32 0, i32 46, !dbg !12814
  %143 = load i32, i32* %scemode162, align 4, !dbg !12815
  %or = or i32 %143, %141, !dbg !12815
  store i32 %or, i32* %scemode162, align 4, !dbg !12815
  %144 = load float, float* %oldcfra, align 4, !dbg !12816
  %conv163 = fptosi float %144 to i32, !dbg !12816
  %145 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12817
  %r164 = getelementptr inbounds %struct.Scene, %struct.Scene* %145, i32 0, i32 22, !dbg !12818
  %cfra165 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r164, i32 0, i32 5, !dbg !12819
  store i32 %conv163, i32* %cfra165, align 8, !dbg !12820
  %146 = load float, float* %frame, align 4, !dbg !12821
  %147 = load float, float* %oldcfra, align 4, !dbg !12823
  %cmp166 = fcmp une float %146, %147, !dbg !12824
  br i1 %cmp166, label %if.then168, label %if.end172, !dbg !12825

if.then168:                                       ; preds = %if.end160
  %148 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12826
  %eval_ctx169 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %148, i32 0, i32 0, !dbg !12828
  %149 = load %struct.EvaluationContext*, %struct.EvaluationContext** %eval_ctx169, align 8, !dbg !12828
  %150 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12829
  %bmain170 = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %150, i32 0, i32 1, !dbg !12830
  %151 = load %struct.Main*, %struct.Main** %bmain170, align 8, !dbg !12830
  %152 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12831
  %153 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12832
  %lay171 = getelementptr inbounds %struct.Scene, %struct.Scene* %153, i32 0, i32 12, !dbg !12833
  %154 = load i32, i32* %lay171, align 8, !dbg !12833
  call void @BKE_scene_update_for_newframe(%struct.EvaluationContext* %149, %struct.Main* %151, %struct.Scene* %152, i32 %154), !dbg !12834
  br label %if.end172, !dbg !12835

if.end172:                                        ; preds = %if.then168, %if.end160
  %155 = load %struct.Scene*, %struct.Scene** %scene4, align 8, !dbg !12836
  %markers173 = getelementptr inbounds %struct.Scene, %struct.Scene* %155, i32 0, i32 24, !dbg !12837
  %156 = bitcast %struct.ListBase* %markers173 to i8*, !dbg !12838
  %157 = bitcast %struct.ListBase* %oldmarkers to i8*, !dbg !12838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 16, i1 false), !dbg !12838
  %158 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12839
  store %struct.ImBuf* %158, %struct.ImBuf** %retval, align 8, !dbg !12840
  br label %return, !dbg !12840

return:                                           ; preds = %if.end172, %if.then37, %if.then
  %159 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !12841
  ret %struct.ImBuf* %159, !dbg !12841
}

declare dso_local void @BKE_animsys_evaluate_all_animation(%struct.Main*, %struct.Scene*, float) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_movieclip_strip(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %nr) #0 !dbg !12842 {
entry:
  %retval = alloca %struct.ImBuf*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %nr.addr = alloca float, align 4
  %ibuf = alloca %struct.ImBuf*, align 8
  %user = alloca %struct.MovieClipUser, align 4
  %tloc = alloca [2 x float], align 4
  %tscale = alloca float, align 4
  %tangle = alloca float, align 4
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12843, metadata !DIExpression()), !dbg !12844
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12845, metadata !DIExpression()), !dbg !12846
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !12847, metadata !DIExpression()), !dbg !12848
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf, metadata !12849, metadata !DIExpression()), !dbg !12850
  store %struct.ImBuf* null, %struct.ImBuf** %ibuf, align 8, !dbg !12850
  call void @llvm.dbg.declare(metadata %struct.MovieClipUser* %user, metadata !12851, metadata !DIExpression()), !dbg !12858
  call void @llvm.dbg.declare(metadata [2 x float]* %tloc, metadata !12859, metadata !DIExpression()), !dbg !12860
  call void @llvm.dbg.declare(metadata float* %tscale, metadata !12861, metadata !DIExpression()), !dbg !12862
  call void @llvm.dbg.declare(metadata float* %tangle, metadata !12863, metadata !DIExpression()), !dbg !12864
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12865
  %clip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 28, !dbg !12867
  %1 = load %struct.MovieClip*, %struct.MovieClip** %clip, align 8, !dbg !12867
  %tobool = icmp ne %struct.MovieClip* %1, null, !dbg !12865
  br i1 %tobool, label %if.end, label %if.then, !dbg !12868

if.then:                                          ; preds = %entry
  store %struct.ImBuf* null, %struct.ImBuf** %retval, align 8, !dbg !12869
  br label %return, !dbg !12869

if.end:                                           ; preds = %entry
  %2 = bitcast %struct.MovieClipUser* %user to i8*, !dbg !12871
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 8, i1 false), !dbg !12871
  %3 = load float, float* %nr.addr, align 4, !dbg !12872
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12873
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 44, !dbg !12874
  %5 = load i32, i32* %anim_startofs, align 8, !dbg !12874
  %conv = sitofp i32 %5 to float, !dbg !12873
  %add = fadd float %3, %conv, !dbg !12875
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12876
  %clip1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 28, !dbg !12877
  %7 = load %struct.MovieClip*, %struct.MovieClip** %clip1, align 8, !dbg !12877
  %start_frame = getelementptr inbounds %struct.MovieClip, %struct.MovieClip* %7, i32 0, i32 16, !dbg !12878
  %8 = load i32, i32* %start_frame, align 8, !dbg !12878
  %conv2 = sitofp i32 %8 to float, !dbg !12876
  %add3 = fadd float %add, %conv2, !dbg !12879
  %conv4 = fptosi float %add3 to i32, !dbg !12872
  call void @BKE_movieclip_user_set_frame(%struct.MovieClipUser* %user, i32 %conv4), !dbg !12880
  %render_size = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12881
  store i16 0, i16* %render_size, align 4, !dbg !12882
  %9 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12883
  %preview_render_size = getelementptr inbounds %struct.SeqRenderData, %struct.SeqRenderData* %9, i32 0, i32 5, !dbg !12884
  %10 = load i32, i32* %preview_render_size, align 8, !dbg !12884
  %call = call i32 @seq_rendersize_to_proxysize(i32 %10), !dbg !12885
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 8, label %sw.bb6
    i32 4, label %sw.bb8
    i32 2, label %sw.bb10
    i32 1, label %sw.bb12
  ], !dbg !12886

sw.bb:                                            ; preds = %if.end
  %render_size5 = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12887
  store i16 0, i16* %render_size5, align 4, !dbg !12889
  br label %sw.epilog, !dbg !12890

sw.bb6:                                           ; preds = %if.end
  %render_size7 = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12891
  store i16 4, i16* %render_size7, align 4, !dbg !12892
  br label %sw.epilog, !dbg !12893

sw.bb8:                                           ; preds = %if.end
  %render_size9 = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12894
  store i16 3, i16* %render_size9, align 4, !dbg !12895
  br label %sw.epilog, !dbg !12896

sw.bb10:                                          ; preds = %if.end
  %render_size11 = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12897
  store i16 2, i16* %render_size11, align 4, !dbg !12898
  br label %sw.epilog, !dbg !12899

sw.bb12:                                          ; preds = %if.end
  %render_size13 = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 1, !dbg !12900
  store i16 1, i16* %render_size13, align 4, !dbg !12901
  br label %sw.epilog, !dbg !12902

sw.epilog:                                        ; preds = %if.end, %sw.bb12, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12903
  %clip_flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 23, !dbg !12905
  %12 = load i32, i32* %clip_flag, align 4, !dbg !12905
  %and = and i32 %12, 1, !dbg !12906
  %tobool14 = icmp ne i32 %and, 0, !dbg !12906
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !12907

if.then15:                                        ; preds = %sw.epilog
  %render_flag = getelementptr inbounds %struct.MovieClipUser, %struct.MovieClipUser* %user, i32 0, i32 2, !dbg !12908
  store i16 1, i16* %render_flag, align 2, !dbg !12910
  br label %if.end16, !dbg !12911

if.end16:                                         ; preds = %if.then15, %sw.epilog
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12912
  %clip_flag17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 23, !dbg !12914
  %14 = load i32, i32* %clip_flag17, align 4, !dbg !12914
  %and18 = and i32 %14, 2, !dbg !12915
  %tobool19 = icmp ne i32 %and18, 0, !dbg !12915
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !12916

if.then20:                                        ; preds = %if.end16
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12917
  %clip21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 28, !dbg !12919
  %16 = load %struct.MovieClip*, %struct.MovieClip** %clip21, align 8, !dbg !12919
  %arraydecay = getelementptr inbounds [2 x float], [2 x float]* %tloc, i64 0, i64 0, !dbg !12920
  %call22 = call %struct.ImBuf* @BKE_movieclip_get_stable_ibuf(%struct.MovieClip* %16, %struct.MovieClipUser* %user, float* %arraydecay, float* %tscale, float* %tangle, i32 0), !dbg !12921
  store %struct.ImBuf* %call22, %struct.ImBuf** %ibuf, align 8, !dbg !12922
  br label %if.end25, !dbg !12923

if.else:                                          ; preds = %if.end16
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12924
  %clip23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 28, !dbg !12926
  %18 = load %struct.MovieClip*, %struct.MovieClip** %clip23, align 8, !dbg !12926
  %call24 = call %struct.ImBuf* @BKE_movieclip_get_ibuf_flag(%struct.MovieClip* %18, %struct.MovieClipUser* %user, i32 0, i32 1), !dbg !12927
  store %struct.ImBuf* %call24, %struct.ImBuf** %ibuf, align 8, !dbg !12928
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then20
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf, align 8, !dbg !12929
  store %struct.ImBuf* %19, %struct.ImBuf** %retval, align 8, !dbg !12930
  br label %return, !dbg !12930

return:                                           ; preds = %if.end25, %if.then
  %20 = load %struct.ImBuf*, %struct.ImBuf** %retval, align 8, !dbg !12931
  ret %struct.ImBuf* %20, !dbg !12931
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_mask_strip(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %nr) #0 !dbg !12932 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %nr.addr = alloca float, align 4
  %make_float = alloca i8, align 1
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12933, metadata !DIExpression()), !dbg !12934
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12935, metadata !DIExpression()), !dbg !12936
  store float %nr, float* %nr.addr, align 4
  call void @llvm.dbg.declare(metadata float* %nr.addr, metadata !12937, metadata !DIExpression()), !dbg !12938
  call void @llvm.dbg.declare(metadata i8* %make_float, metadata !12939, metadata !DIExpression()), !dbg !12940
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12941
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 5, !dbg !12942
  %1 = load i32, i32* %flag, align 8, !dbg !12942
  %and = and i32 %1, 8192, !dbg !12943
  %cmp = icmp ne i32 %and, 0, !dbg !12944
  %conv = zext i1 %cmp to i32, !dbg !12944
  %conv1 = trunc i32 %conv to i8, !dbg !12945
  store i8 %conv1, i8* %make_float, align 1, !dbg !12940
  %2 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12946
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12947
  %mask = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 29, !dbg !12948
  %4 = load %struct.Mask*, %struct.Mask** %mask, align 8, !dbg !12948
  %5 = load float, float* %nr.addr, align 4, !dbg !12949
  %6 = load i8, i8* %make_float, align 1, !dbg !12950
  %call = call %struct.ImBuf* @seq_render_mask(%struct.SeqRenderData* %2, %struct.Mask* %4, float %5, i8 zeroext %6), !dbg !12951
  ret %struct.ImBuf* %call, !dbg !12952
}

declare dso_local %struct.FCurve* @id_data_find_fcurve(%struct.ID*, i8*, %struct.StructRNA*, i8*, i32, i8*) #2

declare dso_local float @evaluate_fcurve(%struct.FCurve*, float) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_effect_execute_threaded(%struct.SeqEffectHandle* %sh, %struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra, float %facf0, float %facf1, %struct.ImBuf* %ibuf1, %struct.ImBuf* %ibuf2, %struct.ImBuf* %ibuf3) #0 !dbg !12953 {
entry:
  %sh.addr = alloca %struct.SeqEffectHandle*, align 8
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %facf0.addr = alloca float, align 4
  %facf1.addr = alloca float, align 4
  %ibuf1.addr = alloca %struct.ImBuf*, align 8
  %ibuf2.addr = alloca %struct.ImBuf*, align 8
  %ibuf3.addr = alloca %struct.ImBuf*, align 8
  %init_data = alloca %struct.RenderEffectInitData, align 8
  %out = alloca %struct.ImBuf*, align 8
  store %struct.SeqEffectHandle* %sh, %struct.SeqEffectHandle** %sh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle** %sh.addr, metadata !12956, metadata !DIExpression()), !dbg !12957
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !12958, metadata !DIExpression()), !dbg !12959
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !12960, metadata !DIExpression()), !dbg !12961
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !12962, metadata !DIExpression()), !dbg !12963
  store float %facf0, float* %facf0.addr, align 4
  call void @llvm.dbg.declare(metadata float* %facf0.addr, metadata !12964, metadata !DIExpression()), !dbg !12965
  store float %facf1, float* %facf1.addr, align 4
  call void @llvm.dbg.declare(metadata float* %facf1.addr, metadata !12966, metadata !DIExpression()), !dbg !12967
  store %struct.ImBuf* %ibuf1, %struct.ImBuf** %ibuf1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf1.addr, metadata !12968, metadata !DIExpression()), !dbg !12969
  store %struct.ImBuf* %ibuf2, %struct.ImBuf** %ibuf2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf2.addr, metadata !12970, metadata !DIExpression()), !dbg !12971
  store %struct.ImBuf* %ibuf3, %struct.ImBuf** %ibuf3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf3.addr, metadata !12972, metadata !DIExpression()), !dbg !12973
  call void @llvm.dbg.declare(metadata %struct.RenderEffectInitData* %init_data, metadata !12974, metadata !DIExpression()), !dbg !12975
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %out, metadata !12976, metadata !DIExpression()), !dbg !12977
  %0 = load %struct.SeqEffectHandle*, %struct.SeqEffectHandle** %sh.addr, align 8, !dbg !12978
  %init_execution = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %0, i32 0, i32 11, !dbg !12979
  %1 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %init_execution, align 8, !dbg !12979
  %2 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12980
  %3 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !12981
  %4 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !12982
  %5 = load %struct.ImBuf*, %struct.ImBuf** %ibuf3.addr, align 8, !dbg !12983
  %call = call %struct.ImBuf* %1(%struct.SeqRenderData* %2, %struct.ImBuf* %3, %struct.ImBuf* %4, %struct.ImBuf* %5), !dbg !12978
  store %struct.ImBuf* %call, %struct.ImBuf** %out, align 8, !dbg !12977
  %6 = load %struct.SeqEffectHandle*, %struct.SeqEffectHandle** %sh.addr, align 8, !dbg !12984
  %sh1 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 0, !dbg !12985
  store %struct.SeqEffectHandle* %6, %struct.SeqEffectHandle** %sh1, align 8, !dbg !12986
  %7 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !12987
  %context2 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 1, !dbg !12988
  store %struct.SeqRenderData* %7, %struct.SeqRenderData** %context2, align 8, !dbg !12989
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !12990
  %seq3 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 2, !dbg !12991
  store %struct.Sequence* %8, %struct.Sequence** %seq3, align 8, !dbg !12992
  %9 = load float, float* %cfra.addr, align 4, !dbg !12993
  %cfra4 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 3, !dbg !12994
  store float %9, float* %cfra4, align 8, !dbg !12995
  %10 = load float, float* %facf0.addr, align 4, !dbg !12996
  %facf05 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 4, !dbg !12997
  store float %10, float* %facf05, align 4, !dbg !12998
  %11 = load float, float* %facf1.addr, align 4, !dbg !12999
  %facf16 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 5, !dbg !13000
  store float %11, float* %facf16, align 8, !dbg !13001
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !13002
  %ibuf17 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 6, !dbg !13003
  store %struct.ImBuf* %12, %struct.ImBuf** %ibuf17, align 8, !dbg !13004
  %13 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !13005
  %ibuf28 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 7, !dbg !13006
  store %struct.ImBuf* %13, %struct.ImBuf** %ibuf28, align 8, !dbg !13007
  %14 = load %struct.ImBuf*, %struct.ImBuf** %ibuf3.addr, align 8, !dbg !13008
  %ibuf39 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 8, !dbg !13009
  store %struct.ImBuf* %14, %struct.ImBuf** %ibuf39, align 8, !dbg !13010
  %15 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13011
  %out10 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %init_data, i32 0, i32 9, !dbg !13012
  store %struct.ImBuf* %15, %struct.ImBuf** %out10, align 8, !dbg !13013
  %16 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13014
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %16, i32 0, i32 3, !dbg !13015
  %17 = load i32, i32* %y, align 4, !dbg !13015
  %18 = bitcast %struct.RenderEffectInitData* %init_data to i8*, !dbg !13016
  call void @IMB_processor_apply_threaded(i32 %17, i32 80, i8* %18, void (i8*, i32, i32, i8*)* @render_effect_execute_init_handle, i8* (i8*)* @render_effect_execute_do_thread), !dbg !13017
  %19 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13018
  ret %struct.ImBuf* %19, !dbg !13019
}

declare dso_local void @IMB_refImBuf(%struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @render_effect_execute_init_handle(i8* %handle_v, i32 %start_line, i32 %tot_line, i8* %init_data_v) #0 !dbg !13020 {
entry:
  %handle_v.addr = alloca i8*, align 8
  %start_line.addr = alloca i32, align 4
  %tot_line.addr = alloca i32, align 4
  %init_data_v.addr = alloca i8*, align 8
  %handle = alloca %struct.RenderEffectThread*, align 8
  %init_data = alloca %struct.RenderEffectInitData*, align 8
  store i8* %handle_v, i8** %handle_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handle_v.addr, metadata !13021, metadata !DIExpression()), !dbg !13022
  store i32 %start_line, i32* %start_line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_line.addr, metadata !13023, metadata !DIExpression()), !dbg !13024
  store i32 %tot_line, i32* %tot_line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tot_line.addr, metadata !13025, metadata !DIExpression()), !dbg !13026
  store i8* %init_data_v, i8** %init_data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %init_data_v.addr, metadata !13027, metadata !DIExpression()), !dbg !13028
  call void @llvm.dbg.declare(metadata %struct.RenderEffectThread** %handle, metadata !13029, metadata !DIExpression()), !dbg !13030
  %0 = load i8*, i8** %handle_v.addr, align 8, !dbg !13031
  %1 = bitcast i8* %0 to %struct.RenderEffectThread*, !dbg !13032
  store %struct.RenderEffectThread* %1, %struct.RenderEffectThread** %handle, align 8, !dbg !13030
  call void @llvm.dbg.declare(metadata %struct.RenderEffectInitData** %init_data, metadata !13033, metadata !DIExpression()), !dbg !13034
  %2 = load i8*, i8** %init_data_v.addr, align 8, !dbg !13035
  %3 = bitcast i8* %2 to %struct.RenderEffectInitData*, !dbg !13036
  store %struct.RenderEffectInitData* %3, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13034
  %4 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13037
  %sh = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %4, i32 0, i32 0, !dbg !13038
  %5 = load %struct.SeqEffectHandle*, %struct.SeqEffectHandle** %sh, align 8, !dbg !13038
  %6 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13039
  %sh1 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %6, i32 0, i32 0, !dbg !13040
  store %struct.SeqEffectHandle* %5, %struct.SeqEffectHandle** %sh1, align 8, !dbg !13041
  %7 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13042
  %context = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %7, i32 0, i32 1, !dbg !13043
  %8 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context, align 8, !dbg !13043
  %9 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13044
  %context2 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %9, i32 0, i32 1, !dbg !13045
  store %struct.SeqRenderData* %8, %struct.SeqRenderData** %context2, align 8, !dbg !13046
  %10 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13047
  %seq = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %10, i32 0, i32 2, !dbg !13048
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13048
  %12 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13049
  %seq3 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %12, i32 0, i32 2, !dbg !13050
  store %struct.Sequence* %11, %struct.Sequence** %seq3, align 8, !dbg !13051
  %13 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13052
  %cfra = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %13, i32 0, i32 3, !dbg !13053
  %14 = load float, float* %cfra, align 8, !dbg !13053
  %15 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13054
  %cfra4 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %15, i32 0, i32 3, !dbg !13055
  store float %14, float* %cfra4, align 8, !dbg !13056
  %16 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13057
  %facf0 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %16, i32 0, i32 4, !dbg !13058
  %17 = load float, float* %facf0, align 4, !dbg !13058
  %18 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13059
  %facf05 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %18, i32 0, i32 4, !dbg !13060
  store float %17, float* %facf05, align 4, !dbg !13061
  %19 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13062
  %facf1 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %19, i32 0, i32 5, !dbg !13063
  %20 = load float, float* %facf1, align 8, !dbg !13063
  %21 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13064
  %facf16 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %21, i32 0, i32 5, !dbg !13065
  store float %20, float* %facf16, align 8, !dbg !13066
  %22 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13067
  %ibuf1 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %22, i32 0, i32 6, !dbg !13068
  %23 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1, align 8, !dbg !13068
  %24 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13069
  %ibuf17 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %24, i32 0, i32 6, !dbg !13070
  store %struct.ImBuf* %23, %struct.ImBuf** %ibuf17, align 8, !dbg !13071
  %25 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13072
  %ibuf2 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %25, i32 0, i32 7, !dbg !13073
  %26 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2, align 8, !dbg !13073
  %27 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13074
  %ibuf28 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %27, i32 0, i32 7, !dbg !13075
  store %struct.ImBuf* %26, %struct.ImBuf** %ibuf28, align 8, !dbg !13076
  %28 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13077
  %ibuf3 = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %28, i32 0, i32 8, !dbg !13078
  %29 = load %struct.ImBuf*, %struct.ImBuf** %ibuf3, align 8, !dbg !13078
  %30 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13079
  %ibuf39 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %30, i32 0, i32 8, !dbg !13080
  store %struct.ImBuf* %29, %struct.ImBuf** %ibuf39, align 8, !dbg !13081
  %31 = load %struct.RenderEffectInitData*, %struct.RenderEffectInitData** %init_data, align 8, !dbg !13082
  %out = getelementptr inbounds %struct.RenderEffectInitData, %struct.RenderEffectInitData* %31, i32 0, i32 9, !dbg !13083
  %32 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13083
  %33 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13084
  %out10 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %33, i32 0, i32 9, !dbg !13085
  store %struct.ImBuf* %32, %struct.ImBuf** %out10, align 8, !dbg !13086
  %34 = load i32, i32* %start_line.addr, align 4, !dbg !13087
  %35 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13088
  %start_line11 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %35, i32 0, i32 10, !dbg !13089
  store i32 %34, i32* %start_line11, align 8, !dbg !13090
  %36 = load i32, i32* %tot_line.addr, align 4, !dbg !13091
  %37 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %handle, align 8, !dbg !13092
  %tot_line12 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %37, i32 0, i32 11, !dbg !13093
  store i32 %36, i32* %tot_line12, align 4, !dbg !13094
  ret void, !dbg !13095
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @render_effect_execute_do_thread(i8* %thread_data_v) #0 !dbg !13096 {
entry:
  %thread_data_v.addr = alloca i8*, align 8
  %thread_data = alloca %struct.RenderEffectThread*, align 8
  store i8* %thread_data_v, i8** %thread_data_v.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %thread_data_v.addr, metadata !13097, metadata !DIExpression()), !dbg !13098
  call void @llvm.dbg.declare(metadata %struct.RenderEffectThread** %thread_data, metadata !13099, metadata !DIExpression()), !dbg !13100
  %0 = load i8*, i8** %thread_data_v.addr, align 8, !dbg !13101
  %1 = bitcast i8* %0 to %struct.RenderEffectThread*, !dbg !13102
  store %struct.RenderEffectThread* %1, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13100
  %2 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13103
  %sh = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %2, i32 0, i32 0, !dbg !13104
  %3 = load %struct.SeqEffectHandle*, %struct.SeqEffectHandle** %sh, align 8, !dbg !13104
  %execute_slice = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %3, i32 0, i32 12, !dbg !13105
  %4 = load void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)*, void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)** %execute_slice, align 8, !dbg !13105
  %5 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13106
  %context = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %5, i32 0, i32 1, !dbg !13107
  %6 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context, align 8, !dbg !13107
  %7 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13108
  %seq = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %7, i32 0, i32 2, !dbg !13109
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13109
  %9 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13110
  %cfra = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %9, i32 0, i32 3, !dbg !13111
  %10 = load float, float* %cfra, align 8, !dbg !13111
  %11 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13112
  %facf0 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %11, i32 0, i32 4, !dbg !13113
  %12 = load float, float* %facf0, align 4, !dbg !13113
  %13 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13114
  %facf1 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %13, i32 0, i32 5, !dbg !13115
  %14 = load float, float* %facf1, align 8, !dbg !13115
  %15 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13116
  %ibuf1 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %15, i32 0, i32 6, !dbg !13117
  %16 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1, align 8, !dbg !13117
  %17 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13118
  %ibuf2 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %17, i32 0, i32 7, !dbg !13119
  %18 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2, align 8, !dbg !13119
  %19 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13120
  %ibuf3 = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %19, i32 0, i32 8, !dbg !13121
  %20 = load %struct.ImBuf*, %struct.ImBuf** %ibuf3, align 8, !dbg !13121
  %21 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13122
  %start_line = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %21, i32 0, i32 10, !dbg !13123
  %22 = load i32, i32* %start_line, align 8, !dbg !13123
  %23 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13124
  %tot_line = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %23, i32 0, i32 11, !dbg !13125
  %24 = load i32, i32* %tot_line, align 4, !dbg !13125
  %25 = load %struct.RenderEffectThread*, %struct.RenderEffectThread** %thread_data, align 8, !dbg !13126
  %out = getelementptr inbounds %struct.RenderEffectThread, %struct.RenderEffectThread* %25, i32 0, i32 9, !dbg !13127
  %26 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13127
  call void %4(%struct.SeqRenderData* %6, %struct.Sequence* %8, float %10, float %12, float %14, %struct.ImBuf* %16, %struct.ImBuf* %18, %struct.ImBuf* %20, i32 %22, i32 %24, %struct.ImBuf* %26), !dbg !13103
  ret i8* null, !dbg !13128
}

declare dso_local i32 @BLI_thread_is_main() #2

declare dso_local i32 @BKE_scene_camera_switch_update(%struct.Scene*) #2

declare dso_local void @BKE_scene_update_for_newframe(%struct.EvaluationContext*, %struct.Main*, %struct.Scene*, i32) #2

declare dso_local %struct.Render* @RE_GetRender(i8*) #2

declare dso_local %struct.Render* @RE_NewRender(i8*) #2

declare dso_local void @RE_BlenderFrame(%struct.Render*, %struct.Main*, %struct.Scene*, %struct.SceneRenderLayer*, %struct.Object*, i32, i32, i8 zeroext) #2

declare dso_local void @RE_AcquireResultImage(%struct.Render*, %struct.RenderResult*) #2

declare dso_local zeroext i8 @addzbuffloatImBuf(%struct.ImBuf*) #2

declare dso_local void @RE_ReleaseResultImage(%struct.Render*) #2

declare dso_local void @BKE_movieclip_user_set_frame(%struct.MovieClipUser*, i32) #2

declare dso_local %struct.ImBuf* @BKE_movieclip_get_stable_ibuf(%struct.MovieClip*, %struct.MovieClipUser*, float*, float*, float*, i32) #2

declare dso_local %struct.ImBuf* @BKE_movieclip_get_ibuf_flag(%struct.MovieClip*, %struct.MovieClipUser*, i32, i32) #2

declare dso_local %struct.ImBuf* @IMB_makeSingleUser(%struct.ImBuf*) #2

declare dso_local void @IMB_filtery(%struct.ImBuf*) #2

; Function Attrs: noinline nounwind uwtable
define internal double @seq_rendersize_to_scale_factor(i32 %size) #0 !dbg !13129 {
entry:
  %retval = alloca double, align 8
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !13132, metadata !DIExpression()), !dbg !13133
  %0 = load i32, i32* %size.addr, align 4, !dbg !13134
  %cmp = icmp sge i32 %0, 99, !dbg !13136
  br i1 %cmp, label %if.then, label %if.end, !dbg !13137

if.then:                                          ; preds = %entry
  store double 1.000000e+00, double* %retval, align 8, !dbg !13138
  br label %return, !dbg !13138

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4, !dbg !13140
  %cmp1 = icmp sge i32 %1, 75, !dbg !13142
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !13143

if.then2:                                         ; preds = %if.end
  store double 7.500000e-01, double* %retval, align 8, !dbg !13144
  br label %return, !dbg !13144

if.end3:                                          ; preds = %if.end
  %2 = load i32, i32* %size.addr, align 4, !dbg !13146
  %cmp4 = icmp sge i32 %2, 50, !dbg !13148
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !13149

if.then5:                                         ; preds = %if.end3
  store double 5.000000e-01, double* %retval, align 8, !dbg !13150
  br label %return, !dbg !13150

if.end6:                                          ; preds = %if.end3
  store double 2.500000e-01, double* %retval, align 8, !dbg !13152
  br label %return, !dbg !13152

return:                                           ; preds = %if.end6, %if.then5, %if.then2, %if.then
  %3 = load double, double* %retval, align 8, !dbg !13153
  ret double %3, !dbg !13153
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_black_ibuf(%struct.ImBuf* %ibuf) #0 !dbg !13154 {
entry:
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %rect = alloca i32*, align 8
  %rect_float = alloca float*, align 8
  %tot = alloca i32, align 4
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !13157, metadata !DIExpression()), !dbg !13158
  call void @llvm.dbg.declare(metadata i32** %rect, metadata !13159, metadata !DIExpression()), !dbg !13160
  call void @llvm.dbg.declare(metadata float** %rect_float, metadata !13161, metadata !DIExpression()), !dbg !13162
  call void @llvm.dbg.declare(metadata i32* %tot, metadata !13163, metadata !DIExpression()), !dbg !13164
  %0 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13165
  %cmp = icmp eq %struct.ImBuf* %0, null, !dbg !13167
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13168

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13169
  %rect1 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %1, i32 0, i32 8, !dbg !13170
  %2 = load i32*, i32** %rect1, align 8, !dbg !13170
  %cmp2 = icmp eq i32* %2, null, !dbg !13171
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !13172

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13173
  %rect_float3 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %3, i32 0, i32 9, !dbg !13174
  %4 = load float*, float** %rect_float3, align 8, !dbg !13174
  %cmp4 = icmp eq float* %4, null, !dbg !13175
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13176

if.then:                                          ; preds = %land.lhs.true, %entry
  br label %if.end16, !dbg !13177

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %5 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13179
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %5, i32 0, i32 2, !dbg !13180
  %6 = load i32, i32* %x, align 8, !dbg !13180
  %7 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13181
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %7, i32 0, i32 3, !dbg !13182
  %8 = load i32, i32* %y, align 4, !dbg !13182
  %mul = mul nsw i32 %6, %8, !dbg !13183
  store i32 %mul, i32* %tot, align 4, !dbg !13184
  %9 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13185
  %rect5 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %9, i32 0, i32 8, !dbg !13186
  %10 = load i32*, i32** %rect5, align 8, !dbg !13186
  store i32* %10, i32** %rect, align 8, !dbg !13187
  %11 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13188
  %rect_float6 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %11, i32 0, i32 9, !dbg !13189
  %12 = load float*, float** %rect_float6, align 8, !dbg !13189
  store float* %12, float** %rect_float, align 8, !dbg !13190
  %13 = load i32*, i32** %rect, align 8, !dbg !13191
  %tobool = icmp ne i32* %13, null, !dbg !13191
  br i1 %tobool, label %if.then7, label %if.end10, !dbg !13193

if.then7:                                         ; preds = %if.end
  %14 = load i32*, i32** %rect, align 8, !dbg !13194
  %15 = bitcast i32* %14 to i8*, !dbg !13196
  %16 = load i32, i32* %tot, align 4, !dbg !13197
  %conv = sext i32 %16 to i64, !dbg !13197
  %mul8 = mul i64 %conv, 1, !dbg !13198
  %mul9 = mul i64 %mul8, 4, !dbg !13199
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %mul9, i1 false), !dbg !13196
  br label %if.end10, !dbg !13200

if.end10:                                         ; preds = %if.then7, %if.end
  %17 = load float*, float** %rect_float, align 8, !dbg !13201
  %tobool11 = icmp ne float* %17, null, !dbg !13201
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !13203

if.then12:                                        ; preds = %if.end10
  %18 = load float*, float** %rect_float, align 8, !dbg !13204
  %19 = bitcast float* %18 to i8*, !dbg !13206
  %20 = load i32, i32* %tot, align 4, !dbg !13207
  %conv13 = sext i32 %20 to i64, !dbg !13207
  %mul14 = mul i64 %conv13, 4, !dbg !13208
  %mul15 = mul i64 %mul14, 4, !dbg !13209
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %mul15, i1 false), !dbg !13206
  br label %if.end16, !dbg !13210

if.end16:                                         ; preds = %if.then, %if.then12, %if.end10
  ret void, !dbg !13211
}

declare dso_local void @IMB_rectcpy(%struct.ImBuf*, %struct.ImBuf*, i32, i32, i32, i32, i32, i32) #2

declare dso_local void @IMB_flipx(%struct.ImBuf*) #2

declare dso_local void @IMB_flipy(%struct.ImBuf*) #2

declare dso_local void @IMB_saturation(%struct.ImBuf*, float) #2

; Function Attrs: noinline nounwind uwtable
define internal void @multibuf(%struct.ImBuf* %ibuf, float %fmul) #0 !dbg !13212 {
entry:
  %ibuf.addr = alloca %struct.ImBuf*, align 8
  %fmul.addr = alloca float, align 4
  %rt = alloca i8*, align 8
  %rt_float = alloca float*, align 8
  %a = alloca i32, align 4
  %mul = alloca i32, align 4
  %icol = alloca i32, align 4
  store %struct.ImBuf* %ibuf, %struct.ImBuf** %ibuf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf.addr, metadata !13215, metadata !DIExpression()), !dbg !13216
  store float %fmul, float* %fmul.addr, align 4
  call void @llvm.dbg.declare(metadata float* %fmul.addr, metadata !13217, metadata !DIExpression()), !dbg !13218
  call void @llvm.dbg.declare(metadata i8** %rt, metadata !13219, metadata !DIExpression()), !dbg !13220
  call void @llvm.dbg.declare(metadata float** %rt_float, metadata !13221, metadata !DIExpression()), !dbg !13222
  call void @llvm.dbg.declare(metadata i32* %a, metadata !13223, metadata !DIExpression()), !dbg !13224
  call void @llvm.dbg.declare(metadata i32* %mul, metadata !13225, metadata !DIExpression()), !dbg !13226
  call void @llvm.dbg.declare(metadata i32* %icol, metadata !13227, metadata !DIExpression()), !dbg !13228
  %0 = load float, float* %fmul.addr, align 4, !dbg !13229
  %mul1 = fmul float 2.560000e+02, %0, !dbg !13230
  %conv = fptosi float %mul1 to i32, !dbg !13231
  store i32 %conv, i32* %mul, align 4, !dbg !13232
  %1 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13233
  %rect = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %1, i32 0, i32 8, !dbg !13234
  %2 = load i32*, i32** %rect, align 8, !dbg !13234
  %3 = bitcast i32* %2 to i8*, !dbg !13235
  store i8* %3, i8** %rt, align 8, !dbg !13236
  %4 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13237
  %rect_float = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %4, i32 0, i32 9, !dbg !13238
  %5 = load float*, float** %rect_float, align 8, !dbg !13238
  store float* %5, float** %rt_float, align 8, !dbg !13239
  %6 = load i8*, i8** %rt, align 8, !dbg !13240
  %tobool = icmp ne i8* %6, null, !dbg !13240
  br i1 %tobool, label %if.then, label %if.end47, !dbg !13242

if.then:                                          ; preds = %entry
  %7 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13243
  %x = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %7, i32 0, i32 2, !dbg !13245
  %8 = load i32, i32* %x, align 8, !dbg !13245
  %9 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13246
  %y = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %9, i32 0, i32 3, !dbg !13247
  %10 = load i32, i32* %y, align 4, !dbg !13247
  %mul2 = mul nsw i32 %8, %10, !dbg !13248
  store i32 %mul2, i32* %a, align 4, !dbg !13249
  br label %while.cond, !dbg !13250

while.cond:                                       ; preds = %if.end46, %if.then
  %11 = load i32, i32* %a, align 4, !dbg !13251
  %dec = add nsw i32 %11, -1, !dbg !13251
  store i32 %dec, i32* %a, align 4, !dbg !13251
  %tobool3 = icmp ne i32 %11, 0, !dbg !13250
  br i1 %tobool3, label %while.body, label %while.end, !dbg !13250

while.body:                                       ; preds = %while.cond
  %12 = load i32, i32* %mul, align 4, !dbg !13252
  %13 = load i8*, i8** %rt, align 8, !dbg !13254
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 0, !dbg !13254
  %14 = load i8, i8* %arrayidx, align 1, !dbg !13254
  %conv4 = zext i8 %14 to i32, !dbg !13254
  %mul5 = mul nsw i32 %12, %conv4, !dbg !13255
  %shr = ashr i32 %mul5, 8, !dbg !13256
  store i32 %shr, i32* %icol, align 4, !dbg !13257
  %15 = load i32, i32* %icol, align 4, !dbg !13258
  %cmp = icmp sgt i32 %15, 254, !dbg !13260
  br i1 %cmp, label %if.then7, label %if.else, !dbg !13261

if.then7:                                         ; preds = %while.body
  %16 = load i8*, i8** %rt, align 8, !dbg !13262
  %arrayidx8 = getelementptr inbounds i8, i8* %16, i64 0, !dbg !13262
  store i8 -1, i8* %arrayidx8, align 1, !dbg !13263
  br label %if.end, !dbg !13262

if.else:                                          ; preds = %while.body
  %17 = load i32, i32* %icol, align 4, !dbg !13264
  %conv9 = trunc i32 %17 to i8, !dbg !13264
  %18 = load i8*, i8** %rt, align 8, !dbg !13265
  %arrayidx10 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !13265
  store i8 %conv9, i8* %arrayidx10, align 1, !dbg !13266
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %19 = load i32, i32* %mul, align 4, !dbg !13267
  %20 = load i8*, i8** %rt, align 8, !dbg !13268
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i64 1, !dbg !13268
  %21 = load i8, i8* %arrayidx11, align 1, !dbg !13268
  %conv12 = zext i8 %21 to i32, !dbg !13268
  %mul13 = mul nsw i32 %19, %conv12, !dbg !13269
  %shr14 = ashr i32 %mul13, 8, !dbg !13270
  store i32 %shr14, i32* %icol, align 4, !dbg !13271
  %22 = load i32, i32* %icol, align 4, !dbg !13272
  %cmp15 = icmp sgt i32 %22, 254, !dbg !13274
  br i1 %cmp15, label %if.then17, label %if.else19, !dbg !13275

if.then17:                                        ; preds = %if.end
  %23 = load i8*, i8** %rt, align 8, !dbg !13276
  %arrayidx18 = getelementptr inbounds i8, i8* %23, i64 1, !dbg !13276
  store i8 -1, i8* %arrayidx18, align 1, !dbg !13277
  br label %if.end22, !dbg !13276

if.else19:                                        ; preds = %if.end
  %24 = load i32, i32* %icol, align 4, !dbg !13278
  %conv20 = trunc i32 %24 to i8, !dbg !13278
  %25 = load i8*, i8** %rt, align 8, !dbg !13279
  %arrayidx21 = getelementptr inbounds i8, i8* %25, i64 1, !dbg !13279
  store i8 %conv20, i8* %arrayidx21, align 1, !dbg !13280
  br label %if.end22

if.end22:                                         ; preds = %if.else19, %if.then17
  %26 = load i32, i32* %mul, align 4, !dbg !13281
  %27 = load i8*, i8** %rt, align 8, !dbg !13282
  %arrayidx23 = getelementptr inbounds i8, i8* %27, i64 2, !dbg !13282
  %28 = load i8, i8* %arrayidx23, align 1, !dbg !13282
  %conv24 = zext i8 %28 to i32, !dbg !13282
  %mul25 = mul nsw i32 %26, %conv24, !dbg !13283
  %shr26 = ashr i32 %mul25, 8, !dbg !13284
  store i32 %shr26, i32* %icol, align 4, !dbg !13285
  %29 = load i32, i32* %icol, align 4, !dbg !13286
  %cmp27 = icmp sgt i32 %29, 254, !dbg !13288
  br i1 %cmp27, label %if.then29, label %if.else31, !dbg !13289

if.then29:                                        ; preds = %if.end22
  %30 = load i8*, i8** %rt, align 8, !dbg !13290
  %arrayidx30 = getelementptr inbounds i8, i8* %30, i64 2, !dbg !13290
  store i8 -1, i8* %arrayidx30, align 1, !dbg !13291
  br label %if.end34, !dbg !13290

if.else31:                                        ; preds = %if.end22
  %31 = load i32, i32* %icol, align 4, !dbg !13292
  %conv32 = trunc i32 %31 to i8, !dbg !13292
  %32 = load i8*, i8** %rt, align 8, !dbg !13293
  %arrayidx33 = getelementptr inbounds i8, i8* %32, i64 2, !dbg !13293
  store i8 %conv32, i8* %arrayidx33, align 1, !dbg !13294
  br label %if.end34

if.end34:                                         ; preds = %if.else31, %if.then29
  %33 = load i32, i32* %mul, align 4, !dbg !13295
  %34 = load i8*, i8** %rt, align 8, !dbg !13296
  %arrayidx35 = getelementptr inbounds i8, i8* %34, i64 3, !dbg !13296
  %35 = load i8, i8* %arrayidx35, align 1, !dbg !13296
  %conv36 = zext i8 %35 to i32, !dbg !13296
  %mul37 = mul nsw i32 %33, %conv36, !dbg !13297
  %shr38 = ashr i32 %mul37, 8, !dbg !13298
  store i32 %shr38, i32* %icol, align 4, !dbg !13299
  %36 = load i32, i32* %icol, align 4, !dbg !13300
  %cmp39 = icmp sgt i32 %36, 254, !dbg !13302
  br i1 %cmp39, label %if.then41, label %if.else43, !dbg !13303

if.then41:                                        ; preds = %if.end34
  %37 = load i8*, i8** %rt, align 8, !dbg !13304
  %arrayidx42 = getelementptr inbounds i8, i8* %37, i64 3, !dbg !13304
  store i8 -1, i8* %arrayidx42, align 1, !dbg !13305
  br label %if.end46, !dbg !13304

if.else43:                                        ; preds = %if.end34
  %38 = load i32, i32* %icol, align 4, !dbg !13306
  %conv44 = trunc i32 %38 to i8, !dbg !13306
  %39 = load i8*, i8** %rt, align 8, !dbg !13307
  %arrayidx45 = getelementptr inbounds i8, i8* %39, i64 3, !dbg !13307
  store i8 %conv44, i8* %arrayidx45, align 1, !dbg !13308
  br label %if.end46

if.end46:                                         ; preds = %if.else43, %if.then41
  %40 = load i8*, i8** %rt, align 8, !dbg !13309
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 4, !dbg !13309
  store i8* %add.ptr, i8** %rt, align 8, !dbg !13309
  br label %while.cond, !dbg !13250, !llvm.loop !13310

while.end:                                        ; preds = %while.cond
  br label %if.end47, !dbg !13312

if.end47:                                         ; preds = %while.end, %entry
  %41 = load float*, float** %rt_float, align 8, !dbg !13313
  %tobool48 = icmp ne float* %41, null, !dbg !13313
  br i1 %tobool48, label %if.then49, label %if.end67, !dbg !13315

if.then49:                                        ; preds = %if.end47
  %42 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13316
  %x50 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %42, i32 0, i32 2, !dbg !13318
  %43 = load i32, i32* %x50, align 8, !dbg !13318
  %44 = load %struct.ImBuf*, %struct.ImBuf** %ibuf.addr, align 8, !dbg !13319
  %y51 = getelementptr inbounds %struct.ImBuf, %struct.ImBuf* %44, i32 0, i32 3, !dbg !13320
  %45 = load i32, i32* %y51, align 4, !dbg !13320
  %mul52 = mul nsw i32 %43, %45, !dbg !13321
  store i32 %mul52, i32* %a, align 4, !dbg !13322
  br label %while.cond53, !dbg !13323

while.cond53:                                     ; preds = %while.body56, %if.then49
  %46 = load i32, i32* %a, align 4, !dbg !13324
  %dec54 = add nsw i32 %46, -1, !dbg !13324
  store i32 %dec54, i32* %a, align 4, !dbg !13324
  %tobool55 = icmp ne i32 %46, 0, !dbg !13323
  br i1 %tobool55, label %while.body56, label %while.end66, !dbg !13323

while.body56:                                     ; preds = %while.cond53
  %47 = load float, float* %fmul.addr, align 4, !dbg !13325
  %48 = load float*, float** %rt_float, align 8, !dbg !13327
  %arrayidx57 = getelementptr inbounds float, float* %48, i64 0, !dbg !13327
  %49 = load float, float* %arrayidx57, align 4, !dbg !13328
  %mul58 = fmul float %49, %47, !dbg !13328
  store float %mul58, float* %arrayidx57, align 4, !dbg !13328
  %50 = load float, float* %fmul.addr, align 4, !dbg !13329
  %51 = load float*, float** %rt_float, align 8, !dbg !13330
  %arrayidx59 = getelementptr inbounds float, float* %51, i64 1, !dbg !13330
  %52 = load float, float* %arrayidx59, align 4, !dbg !13331
  %mul60 = fmul float %52, %50, !dbg !13331
  store float %mul60, float* %arrayidx59, align 4, !dbg !13331
  %53 = load float, float* %fmul.addr, align 4, !dbg !13332
  %54 = load float*, float** %rt_float, align 8, !dbg !13333
  %arrayidx61 = getelementptr inbounds float, float* %54, i64 2, !dbg !13333
  %55 = load float, float* %arrayidx61, align 4, !dbg !13334
  %mul62 = fmul float %55, %53, !dbg !13334
  store float %mul62, float* %arrayidx61, align 4, !dbg !13334
  %56 = load float, float* %fmul.addr, align 4, !dbg !13335
  %57 = load float*, float** %rt_float, align 8, !dbg !13336
  %arrayidx63 = getelementptr inbounds float, float* %57, i64 3, !dbg !13336
  %58 = load float, float* %arrayidx63, align 4, !dbg !13337
  %mul64 = fmul float %58, %56, !dbg !13337
  store float %mul64, float* %arrayidx63, align 4, !dbg !13337
  %59 = load float*, float** %rt_float, align 8, !dbg !13338
  %add.ptr65 = getelementptr inbounds float, float* %59, i64 4, !dbg !13338
  store float* %add.ptr65, float** %rt_float, align 8, !dbg !13338
  br label %while.cond53, !dbg !13323, !llvm.loop !13339

while.end66:                                      ; preds = %while.cond53
  br label %if.end67, !dbg !13341

if.end67:                                         ; preds = %while.end66, %if.end47
  ret void, !dbg !13342
}

declare dso_local %struct.ImBuf* @IMB_scaleImBuf(%struct.ImBuf*, i32, i32) #2

declare dso_local %struct.ImBuf* @BKE_sequence_modifier_apply_stack(%struct.SeqRenderData*, %struct.Sequence*, %struct.ImBuf*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_shown_sequences(%struct.ListBase* %seqbasep, i32 %cfra, i32 %chanshown, %struct.Sequence** %seq_arr_out) #0 !dbg !13343 {
entry:
  %retval = alloca i32, align 4
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %cfra.addr = alloca i32, align 4
  %chanshown.addr = alloca i32, align 4
  %seq_arr_out.addr = alloca %struct.Sequence**, align 8
  %seq_arr = alloca [33 x %struct.Sequence*], align 16
  %b = alloca i32, align 4
  %cnt = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !13346, metadata !DIExpression()), !dbg !13347
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !13348, metadata !DIExpression()), !dbg !13349
  store i32 %chanshown, i32* %chanshown.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chanshown.addr, metadata !13350, metadata !DIExpression()), !dbg !13351
  store %struct.Sequence** %seq_arr_out, %struct.Sequence*** %seq_arr_out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_arr_out.addr, metadata !13352, metadata !DIExpression()), !dbg !13353
  call void @llvm.dbg.declare(metadata [33 x %struct.Sequence*]* %seq_arr, metadata !13354, metadata !DIExpression()), !dbg !13355
  call void @llvm.dbg.declare(metadata i32* %b, metadata !13356, metadata !DIExpression()), !dbg !13357
  %0 = load i32, i32* %chanshown.addr, align 4, !dbg !13358
  store i32 %0, i32* %b, align 4, !dbg !13357
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !13359, metadata !DIExpression()), !dbg !13360
  store i32 0, i32* %cnt, align 4, !dbg !13360
  %1 = load i32, i32* %b, align 4, !dbg !13361
  %cmp = icmp sgt i32 %1, 32, !dbg !13363
  br i1 %cmp, label %if.then, label %if.end, !dbg !13364

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !13365
  br label %return, !dbg !13365

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 0, !dbg !13367
  %2 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !13369
  %3 = load i32, i32* %cfra.addr, align 4, !dbg !13370
  %4 = load i32, i32* %chanshown.addr, align 4, !dbg !13371
  %call = call i32 @evaluate_seq_frame_gen(%struct.Sequence** %arraydecay, %struct.ListBase* %2, i32 %3, i32 %4), !dbg !13372
  %tobool = icmp ne i32 %call, 0, !dbg !13372
  br i1 %tobool, label %if.then1, label %if.end10, !dbg !13373

if.then1:                                         ; preds = %if.end
  %5 = load i32, i32* %b, align 4, !dbg !13374
  %cmp2 = icmp eq i32 %5, 0, !dbg !13377
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !13378

if.then3:                                         ; preds = %if.then1
  store i32 32, i32* %b, align 4, !dbg !13379
  br label %if.end4, !dbg !13381

if.end4:                                          ; preds = %if.then3, %if.then1
  br label %for.cond, !dbg !13382

for.cond:                                         ; preds = %for.inc, %if.end4
  %6 = load i32, i32* %b, align 4, !dbg !13383
  %cmp5 = icmp sgt i32 %6, 0, !dbg !13386
  br i1 %cmp5, label %for.body, label %for.end, !dbg !13387

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %b, align 4, !dbg !13388
  %idxprom = sext i32 %7 to i64, !dbg !13391
  %arrayidx = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom, !dbg !13391
  %8 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !13391
  %call6 = call zeroext i8 @video_seq_is_rendered(%struct.Sequence* %8), !dbg !13392
  %tobool7 = icmp ne i8 %call6, 0, !dbg !13392
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !13393

if.then8:                                         ; preds = %for.body
  br label %for.end, !dbg !13394

if.end9:                                          ; preds = %for.body
  br label %for.inc, !dbg !13396

for.inc:                                          ; preds = %if.end9
  %9 = load i32, i32* %b, align 4, !dbg !13397
  %dec = add nsw i32 %9, -1, !dbg !13397
  store i32 %dec, i32* %b, align 4, !dbg !13397
  br label %for.cond, !dbg !13398, !llvm.loop !13399

for.end:                                          ; preds = %if.then8, %for.cond
  br label %if.end10, !dbg !13401

if.end10:                                         ; preds = %for.end, %if.end
  %10 = load i32, i32* %b, align 4, !dbg !13402
  store i32 %10, i32* %chanshown.addr, align 4, !dbg !13403
  br label %for.cond11, !dbg !13404

for.cond11:                                       ; preds = %for.inc25, %if.end10
  %11 = load i32, i32* %b, align 4, !dbg !13405
  %cmp12 = icmp sgt i32 %11, 0, !dbg !13408
  br i1 %cmp12, label %for.body13, label %for.end27, !dbg !13409

for.body13:                                       ; preds = %for.cond11
  %12 = load i32, i32* %b, align 4, !dbg !13410
  %idxprom14 = sext i32 %12 to i64, !dbg !13413
  %arrayidx15 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom14, !dbg !13413
  %13 = load %struct.Sequence*, %struct.Sequence** %arrayidx15, align 8, !dbg !13413
  %call16 = call zeroext i8 @video_seq_is_rendered(%struct.Sequence* %13), !dbg !13414
  %tobool17 = icmp ne i8 %call16, 0, !dbg !13414
  br i1 %tobool17, label %if.then18, label %if.end24, !dbg !13415

if.then18:                                        ; preds = %for.body13
  %14 = load i32, i32* %b, align 4, !dbg !13416
  %idxprom19 = sext i32 %14 to i64, !dbg !13419
  %arrayidx20 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom19, !dbg !13419
  %15 = load %struct.Sequence*, %struct.Sequence** %arrayidx20, align 8, !dbg !13419
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 46, !dbg !13420
  %16 = load i32, i32* %blend_mode, align 8, !dbg !13420
  %cmp21 = icmp eq i32 %16, 0, !dbg !13421
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !13422

if.then22:                                        ; preds = %if.then18
  br label %for.end27, !dbg !13423

if.end23:                                         ; preds = %if.then18
  br label %if.end24, !dbg !13425

if.end24:                                         ; preds = %if.end23, %for.body13
  br label %for.inc25, !dbg !13426

for.inc25:                                        ; preds = %if.end24
  %17 = load i32, i32* %b, align 4, !dbg !13427
  %dec26 = add nsw i32 %17, -1, !dbg !13427
  store i32 %dec26, i32* %b, align 4, !dbg !13427
  br label %for.cond11, !dbg !13428, !llvm.loop !13429

for.end27:                                        ; preds = %if.then22, %for.cond11
  br label %for.cond28, !dbg !13431

for.cond28:                                       ; preds = %for.inc42, %for.end27
  %18 = load i32, i32* %b, align 4, !dbg !13432
  %19 = load i32, i32* %chanshown.addr, align 4, !dbg !13435
  %cmp29 = icmp sle i32 %18, %19, !dbg !13436
  br i1 %cmp29, label %land.rhs, label %land.end, !dbg !13437

land.rhs:                                         ; preds = %for.cond28
  %20 = load i32, i32* %b, align 4, !dbg !13438
  %cmp30 = icmp sge i32 %20, 0, !dbg !13439
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond28
  %21 = phi i1 [ false, %for.cond28 ], [ %cmp30, %land.rhs ], !dbg !13440
  br i1 %21, label %for.body31, label %for.end44, !dbg !13441

for.body31:                                       ; preds = %land.end
  %22 = load i32, i32* %b, align 4, !dbg !13442
  %idxprom32 = sext i32 %22 to i64, !dbg !13445
  %arrayidx33 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom32, !dbg !13445
  %23 = load %struct.Sequence*, %struct.Sequence** %arrayidx33, align 8, !dbg !13445
  %call34 = call zeroext i8 @video_seq_is_rendered(%struct.Sequence* %23), !dbg !13446
  %tobool35 = icmp ne i8 %call34, 0, !dbg !13446
  br i1 %tobool35, label %if.then36, label %if.end41, !dbg !13447

if.then36:                                        ; preds = %for.body31
  %24 = load i32, i32* %b, align 4, !dbg !13448
  %idxprom37 = sext i32 %24 to i64, !dbg !13450
  %arrayidx38 = getelementptr inbounds [33 x %struct.Sequence*], [33 x %struct.Sequence*]* %seq_arr, i64 0, i64 %idxprom37, !dbg !13450
  %25 = load %struct.Sequence*, %struct.Sequence** %arrayidx38, align 8, !dbg !13450
  %26 = load %struct.Sequence**, %struct.Sequence*** %seq_arr_out.addr, align 8, !dbg !13451
  %27 = load i32, i32* %cnt, align 4, !dbg !13452
  %inc = add nsw i32 %27, 1, !dbg !13452
  store i32 %inc, i32* %cnt, align 4, !dbg !13452
  %idxprom39 = sext i32 %27 to i64, !dbg !13451
  %arrayidx40 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %26, i64 %idxprom39, !dbg !13451
  store %struct.Sequence* %25, %struct.Sequence** %arrayidx40, align 8, !dbg !13453
  br label %if.end41, !dbg !13454

if.end41:                                         ; preds = %if.then36, %for.body31
  br label %for.inc42, !dbg !13455

for.inc42:                                        ; preds = %if.end41
  %28 = load i32, i32* %b, align 4, !dbg !13456
  %inc43 = add nsw i32 %28, 1, !dbg !13456
  store i32 %inc43, i32* %b, align 4, !dbg !13456
  br label %for.cond28, !dbg !13457, !llvm.loop !13458

for.end44:                                        ; preds = %land.end
  %29 = load i32, i32* %cnt, align 4, !dbg !13460
  store i32 %29, i32* %retval, align 4, !dbg !13461
  br label %return, !dbg !13461

return:                                           ; preds = %for.end44, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !13462
  ret i32 %30, !dbg !13462
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_get_early_out_for_blend_mode(%struct.Sequence* %seq) #0 !dbg !13463 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %sh = alloca %struct.SeqEffectHandle, align 8
  %facf = alloca float, align 4
  %early_out = alloca i32, align 4
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !13464, metadata !DIExpression()), !dbg !13465
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !13466, metadata !DIExpression()), !dbg !13467
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13468
  call void @BKE_sequence_get_blend(%struct.SeqEffectHandle* sret %sh, %struct.Sequence* %0), !dbg !13469
  call void @llvm.dbg.declare(metadata float* %facf, metadata !13470, metadata !DIExpression()), !dbg !13471
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13472
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 47, !dbg !13473
  %2 = load float, float* %blend_opacity, align 4, !dbg !13473
  %div = fdiv float %2, 1.000000e+02, !dbg !13474
  store float %div, float* %facf, align 4, !dbg !13471
  call void @llvm.dbg.declare(metadata i32* %early_out, metadata !13475, metadata !DIExpression()), !dbg !13476
  %early_out1 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 7, !dbg !13477
  %3 = load i32 (%struct.Sequence*, float, float)*, i32 (%struct.Sequence*, float, float)** %early_out1, align 8, !dbg !13477
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13478
  %5 = load float, float* %facf, align 4, !dbg !13479
  %6 = load float, float* %facf, align 4, !dbg !13480
  %call = call i32 %3(%struct.Sequence* %4, float %5, float %6), !dbg !13481
  store i32 %call, i32* %early_out, align 4, !dbg !13476
  %7 = load i32, i32* %early_out, align 4, !dbg !13482
  %cmp = icmp eq i32 %7, 0, !dbg !13482
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13482

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32, i32* %early_out, align 4, !dbg !13482
  %cmp2 = icmp eq i32 %8, -1, !dbg !13482
  br i1 %cmp2, label %if.then, label %if.end, !dbg !13484

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load i32, i32* %early_out, align 4, !dbg !13485
  store i32 %9, i32* %retval, align 4, !dbg !13487
  br label %return, !dbg !13487

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13488
  %call3 = call zeroext i8 @seq_must_swap_input_in_blend_mode(%struct.Sequence* %10), !dbg !13490
  %tobool = icmp ne i8 %call3, 0, !dbg !13490
  br i1 %tobool, label %if.then4, label %if.end11, !dbg !13491

if.then4:                                         ; preds = %if.end
  %11 = load i32, i32* %early_out, align 4, !dbg !13492
  %cmp5 = icmp eq i32 %11, 2, !dbg !13495
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !13496

if.then6:                                         ; preds = %if.then4
  store i32 1, i32* %retval, align 4, !dbg !13497
  br label %return, !dbg !13497

if.else:                                          ; preds = %if.then4
  %12 = load i32, i32* %early_out, align 4, !dbg !13499
  %cmp7 = icmp eq i32 %12, 1, !dbg !13501
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !13502

if.then8:                                         ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !13503
  br label %return, !dbg !13503

if.end9:                                          ; preds = %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9
  br label %if.end11, !dbg !13505

if.end11:                                         ; preds = %if.end10, %if.end
  %13 = load i32, i32* %early_out, align 4, !dbg !13506
  store i32 %13, i32* %retval, align 4, !dbg !13507
  br label %return, !dbg !13507

return:                                           ; preds = %if.end11, %if.then8, %if.then6, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !13508
  ret i32 %14, !dbg !13508
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ImBuf* @seq_render_strip_stack_apply_effect(%struct.SeqRenderData* %context, %struct.Sequence* %seq, float %cfra, %struct.ImBuf* %ibuf1, %struct.ImBuf* %ibuf2) #0 !dbg !13509 {
entry:
  %context.addr = alloca %struct.SeqRenderData*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cfra.addr = alloca float, align 4
  %ibuf1.addr = alloca %struct.ImBuf*, align 8
  %ibuf2.addr = alloca %struct.ImBuf*, align 8
  %out = alloca %struct.ImBuf*, align 8
  %sh = alloca %struct.SeqEffectHandle, align 8
  %facf = alloca float, align 4
  %swap_input = alloca i32, align 4
  store %struct.SeqRenderData* %context, %struct.SeqRenderData** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SeqRenderData** %context.addr, metadata !13512, metadata !DIExpression()), !dbg !13513
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !13514, metadata !DIExpression()), !dbg !13515
  store float %cfra, float* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata float* %cfra.addr, metadata !13516, metadata !DIExpression()), !dbg !13517
  store %struct.ImBuf* %ibuf1, %struct.ImBuf** %ibuf1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf1.addr, metadata !13518, metadata !DIExpression()), !dbg !13519
  store %struct.ImBuf* %ibuf2, %struct.ImBuf** %ibuf2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %ibuf2.addr, metadata !13520, metadata !DIExpression()), !dbg !13521
  call void @llvm.dbg.declare(metadata %struct.ImBuf** %out, metadata !13522, metadata !DIExpression()), !dbg !13523
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !13524, metadata !DIExpression()), !dbg !13525
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13526
  call void @BKE_sequence_get_blend(%struct.SeqEffectHandle* sret %sh, %struct.Sequence* %0), !dbg !13527
  call void @llvm.dbg.declare(metadata float* %facf, metadata !13528, metadata !DIExpression()), !dbg !13529
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13530
  %blend_opacity = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 47, !dbg !13531
  %2 = load float, float* %blend_opacity, align 4, !dbg !13531
  %div = fdiv float %2, 1.000000e+02, !dbg !13532
  store float %div, float* %facf, align 4, !dbg !13529
  call void @llvm.dbg.declare(metadata i32* %swap_input, metadata !13533, metadata !DIExpression()), !dbg !13534
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13535
  %call = call zeroext i8 @seq_must_swap_input_in_blend_mode(%struct.Sequence* %3), !dbg !13536
  %conv = zext i8 %call to i32, !dbg !13536
  store i32 %conv, i32* %swap_input, align 4, !dbg !13534
  %4 = load i32, i32* %swap_input, align 4, !dbg !13537
  %tobool = icmp ne i32 %4, 0, !dbg !13537
  br i1 %tobool, label %if.then, label %if.else5, !dbg !13539

if.then:                                          ; preds = %entry
  %multithreaded = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 0, !dbg !13540
  %5 = load i8, i8* %multithreaded, align 8, !dbg !13540
  %tobool1 = icmp ne i8 %5, 0, !dbg !13543
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !13544

if.then2:                                         ; preds = %if.then
  %6 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !13545
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13546
  %8 = load float, float* %cfra.addr, align 4, !dbg !13547
  %9 = load float, float* %facf, align 4, !dbg !13548
  %10 = load float, float* %facf, align 4, !dbg !13549
  %11 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !13550
  %12 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !13551
  %call3 = call %struct.ImBuf* @seq_render_effect_execute_threaded(%struct.SeqEffectHandle* %sh, %struct.SeqRenderData* %6, %struct.Sequence* %7, float %8, float %9, float %10, %struct.ImBuf* %11, %struct.ImBuf* %12, %struct.ImBuf* null), !dbg !13552
  store %struct.ImBuf* %call3, %struct.ImBuf** %out, align 8, !dbg !13553
  br label %if.end, !dbg !13554

if.else:                                          ; preds = %if.then
  %execute = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 10, !dbg !13555
  %13 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %execute, align 8, !dbg !13555
  %14 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !13556
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13557
  %16 = load float, float* %cfra.addr, align 4, !dbg !13558
  %17 = load float, float* %facf, align 4, !dbg !13559
  %18 = load float, float* %facf, align 4, !dbg !13560
  %19 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !13561
  %20 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !13562
  %call4 = call %struct.ImBuf* %13(%struct.SeqRenderData* %14, %struct.Sequence* %15, float %16, float %17, float %18, %struct.ImBuf* %19, %struct.ImBuf* %20, %struct.ImBuf* null), !dbg !13563
  store %struct.ImBuf* %call4, %struct.ImBuf** %out, align 8, !dbg !13564
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end14, !dbg !13565

if.else5:                                         ; preds = %entry
  %multithreaded6 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 0, !dbg !13566
  %21 = load i8, i8* %multithreaded6, align 8, !dbg !13566
  %tobool7 = icmp ne i8 %21, 0, !dbg !13569
  br i1 %tobool7, label %if.then8, label %if.else10, !dbg !13570

if.then8:                                         ; preds = %if.else5
  %22 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !13571
  %23 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13572
  %24 = load float, float* %cfra.addr, align 4, !dbg !13573
  %25 = load float, float* %facf, align 4, !dbg !13574
  %26 = load float, float* %facf, align 4, !dbg !13575
  %27 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !13576
  %28 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !13577
  %call9 = call %struct.ImBuf* @seq_render_effect_execute_threaded(%struct.SeqEffectHandle* %sh, %struct.SeqRenderData* %22, %struct.Sequence* %23, float %24, float %25, float %26, %struct.ImBuf* %27, %struct.ImBuf* %28, %struct.ImBuf* null), !dbg !13578
  store %struct.ImBuf* %call9, %struct.ImBuf** %out, align 8, !dbg !13579
  br label %if.end13, !dbg !13580

if.else10:                                        ; preds = %if.else5
  %execute11 = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 10, !dbg !13581
  %29 = load %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)** %execute11, align 8, !dbg !13581
  %30 = load %struct.SeqRenderData*, %struct.SeqRenderData** %context.addr, align 8, !dbg !13582
  %31 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13583
  %32 = load float, float* %cfra.addr, align 4, !dbg !13584
  %33 = load float, float* %facf, align 4, !dbg !13585
  %34 = load float, float* %facf, align 4, !dbg !13586
  %35 = load %struct.ImBuf*, %struct.ImBuf** %ibuf1.addr, align 8, !dbg !13587
  %36 = load %struct.ImBuf*, %struct.ImBuf** %ibuf2.addr, align 8, !dbg !13588
  %call12 = call %struct.ImBuf* %29(%struct.SeqRenderData* %30, %struct.Sequence* %31, float %32, float %33, float %34, %struct.ImBuf* %35, %struct.ImBuf* %36, %struct.ImBuf* null), !dbg !13589
  store %struct.ImBuf* %call12, %struct.ImBuf** %out, align 8, !dbg !13590
  br label %if.end13

if.end13:                                         ; preds = %if.else10, %if.then8
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %37 = load %struct.ImBuf*, %struct.ImBuf** %out, align 8, !dbg !13591
  ret %struct.ImBuf* %37, !dbg !13592
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @video_seq_is_rendered(%struct.Sequence* %seq) #0 !dbg !13593 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !13594, metadata !DIExpression()), !dbg !13595
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13596
  %tobool = icmp ne %struct.Sequence* %0, null, !dbg !13596
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !13597

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13598
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 5, !dbg !13599
  %2 = load i32, i32* %flag, align 8, !dbg !13599
  %and = and i32 %2, 32, !dbg !13600
  %tobool1 = icmp ne i32 %and, 0, !dbg !13600
  br i1 %tobool1, label %land.end, label %land.rhs, !dbg !13601

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13602
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 6, !dbg !13603
  %4 = load i32, i32* %type, align 4, !dbg !13603
  %cmp = icmp ne i32 %4, 4, !dbg !13604
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ], !dbg !13605
  %land.ext = zext i1 %5 to i32, !dbg !13601
  %conv = trunc i32 %land.ext to i8, !dbg !13606
  ret i8 %conv, !dbg !13607
}

declare dso_local void @BKE_sequence_get_blend(%struct.SeqEffectHandle* sret, %struct.Sequence*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @seq_must_swap_input_in_blend_mode(%struct.Sequence* %seq) #0 !dbg !13608 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %swap_input = alloca i8, align 1
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !13609, metadata !DIExpression()), !dbg !13610
  call void @llvm.dbg.declare(metadata i8* %swap_input, metadata !13611, metadata !DIExpression()), !dbg !13612
  store i8 0, i8* %swap_input, align 1, !dbg !13612
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13613
  %blend_mode = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 46, !dbg !13613
  %1 = load i32, i32* %blend_mode, align 8, !dbg !13613
  %cmp = icmp eq i32 %1, 11, !dbg !13613
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13613

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13613
  %blend_mode1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 46, !dbg !13613
  %3 = load i32, i32* %blend_mode1, align 8, !dbg !13613
  %cmp2 = icmp eq i32 %3, 12, !dbg !13613
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !13613

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13613
  %blend_mode4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 46, !dbg !13613
  %5 = load i32, i32* %blend_mode4, align 8, !dbg !13613
  %cmp5 = icmp eq i32 %5, 15, !dbg !13613
  br i1 %cmp5, label %if.then, label %if.end, !dbg !13615

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i8 1, i8* %swap_input, align 1, !dbg !13616
  br label %if.end, !dbg !13618

if.end:                                           ; preds = %if.then, %lor.lhs.false3
  %6 = load i8, i8* %swap_input, align 1, !dbg !13619
  ret i8 %6, !dbg !13620
}

declare dso_local void @BKE_sequencer_cache_cleanup_sequence(%struct.Sequence*) #2

declare dso_local void @BKE_sequencer_preprocessed_cache_cleanup_sequence(%struct.Sequence*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sequence_do_invalidate_dependent(%struct.Sequence* %seq, %struct.ListBase* %seqbase) #0 !dbg !13621 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %seqbase.addr = alloca %struct.ListBase*, align 8
  %cur = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !13624, metadata !DIExpression()), !dbg !13625
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbase.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbase.addr, metadata !13626, metadata !DIExpression()), !dbg !13627
  call void @llvm.dbg.declare(metadata %struct.Sequence** %cur, metadata !13628, metadata !DIExpression()), !dbg !13629
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbase.addr, align 8, !dbg !13630
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !13632
  %1 = load i8*, i8** %first, align 8, !dbg !13632
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !13630
  store %struct.Sequence* %2, %struct.Sequence** %cur, align 8, !dbg !13633
  br label %for.cond, !dbg !13634

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13635
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !13637
  br i1 %tobool, label %for.body, label %for.end, !dbg !13637

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13638
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13641
  %cmp = icmp eq %struct.Sequence* %4, %5, !dbg !13642
  br i1 %cmp, label %if.then, label %if.end, !dbg !13643

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !13644

if.end:                                           ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13645
  %7 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13647
  %call = call zeroext i8 @BKE_sequence_check_depend(%struct.Sequence* %6, %struct.Sequence* %7), !dbg !13648
  %tobool1 = icmp ne i8 %call, 0, !dbg !13648
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !13649

if.then2:                                         ; preds = %if.end
  %8 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13650
  call void @BKE_sequencer_cache_cleanup_sequence(%struct.Sequence* %8), !dbg !13652
  %9 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13653
  call void @BKE_sequencer_preprocessed_cache_cleanup_sequence(%struct.Sequence* %9), !dbg !13654
  br label %if.end3, !dbg !13655

if.end3:                                          ; preds = %if.then2, %if.end
  %10 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13656
  %seqbase4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 36, !dbg !13658
  %first5 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase4, i32 0, i32 0, !dbg !13659
  %11 = load i8*, i8** %first5, align 8, !dbg !13659
  %tobool6 = icmp ne i8* %11, null, !dbg !13656
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !13660

if.then7:                                         ; preds = %if.end3
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !13661
  %13 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13662
  %seqbase8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 36, !dbg !13663
  call void @sequence_do_invalidate_dependent(%struct.Sequence* %12, %struct.ListBase* %seqbase8), !dbg !13664
  br label %if.end9, !dbg !13664

if.end9:                                          ; preds = %if.then7, %if.end3
  br label %for.inc, !dbg !13665

for.inc:                                          ; preds = %if.end9, %if.then
  %14 = load %struct.Sequence*, %struct.Sequence** %cur, align 8, !dbg !13666
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 0, !dbg !13667
  %15 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !13667
  store %struct.Sequence* %15, %struct.Sequence** %cur, align 8, !dbg !13668
  br label %for.cond, !dbg !13669, !llvm.loop !13670

for.end:                                          ; preds = %for.cond
  ret void, !dbg !13672
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @shuffle_seq_time_offset_test(%struct.ListBase* %seqbasep, i8 zeroext %dir) #0 !dbg !13673 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %dir.addr = alloca i8, align 1
  %offset = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %seq_other = alloca %struct.Sequence*, align 8
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !13676, metadata !DIExpression()), !dbg !13677
  store i8 %dir, i8* %dir.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %dir.addr, metadata !13678, metadata !DIExpression()), !dbg !13679
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !13680, metadata !DIExpression()), !dbg !13681
  store i32 0, i32* %offset, align 4, !dbg !13681
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !13682, metadata !DIExpression()), !dbg !13683
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_other, metadata !13684, metadata !DIExpression()), !dbg !13685
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !13686
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !13688
  %1 = load i8*, i8** %first, align 8, !dbg !13688
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !13686
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !13689
  br label %for.cond, !dbg !13690

for.cond:                                         ; preds = %for.inc20, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13691
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !13693
  br i1 %tobool, label %for.body, label %for.end22, !dbg !13693

for.body:                                         ; preds = %for.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13694
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 2, !dbg !13697
  %5 = load i8*, i8** %tmp, align 8, !dbg !13697
  %tobool1 = icmp ne i8* %5, null, !dbg !13694
  br i1 %tobool1, label %if.then, label %if.end19, !dbg !13698

if.then:                                          ; preds = %for.body
  %6 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !13699
  %first2 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %6, i32 0, i32 0, !dbg !13702
  %7 = load i8*, i8** %first2, align 8, !dbg !13702
  %8 = bitcast i8* %7 to %struct.Sequence*, !dbg !13699
  store %struct.Sequence* %8, %struct.Sequence** %seq_other, align 8, !dbg !13703
  br label %for.cond3, !dbg !13704

for.cond3:                                        ; preds = %for.inc, %if.then
  %9 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13705
  %tobool4 = icmp ne %struct.Sequence* %9, null, !dbg !13707
  br i1 %tobool4, label %for.body5, label %for.end, !dbg !13707

for.body5:                                        ; preds = %for.cond3
  %10 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13708
  %tmp6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 2, !dbg !13711
  %11 = load i8*, i8** %tmp6, align 8, !dbg !13711
  %tobool7 = icmp ne i8* %11, null, !dbg !13708
  br i1 %tobool7, label %if.end18, label %land.lhs.true, !dbg !13712

land.lhs.true:                                    ; preds = %for.body5
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13713
  %13 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13714
  %call = call zeroext i8 @seq_overlap(%struct.Sequence* %12, %struct.Sequence* %13), !dbg !13715
  %conv = zext i8 %call to i32, !dbg !13715
  %tobool8 = icmp ne i32 %conv, 0, !dbg !13715
  br i1 %tobool8, label %if.then9, label %if.end18, !dbg !13716

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i8, i8* %dir.addr, align 1, !dbg !13717
  %conv10 = zext i8 %14 to i32, !dbg !13717
  %cmp = icmp eq i32 %conv10, 76, !dbg !13720
  br i1 %cmp, label %if.then12, label %if.else, !dbg !13721

if.then12:                                        ; preds = %if.then9
  %15 = load i32, i32* %offset, align 4, !dbg !13722
  %16 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13724
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 15, !dbg !13725
  %17 = load i32, i32* %startdisp, align 8, !dbg !13725
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13726
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 16, !dbg !13727
  %19 = load i32, i32* %enddisp, align 4, !dbg !13727
  %sub = sub nsw i32 %17, %19, !dbg !13728
  %call13 = call i32 @min_ii(i32 %15, i32 %sub), !dbg !13729
  store i32 %call13, i32* %offset, align 4, !dbg !13730
  br label %if.end, !dbg !13731

if.else:                                          ; preds = %if.then9
  %20 = load i32, i32* %offset, align 4, !dbg !13732
  %21 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13734
  %enddisp14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 16, !dbg !13735
  %22 = load i32, i32* %enddisp14, align 4, !dbg !13735
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13736
  %startdisp15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 15, !dbg !13737
  %24 = load i32, i32* %startdisp15, align 8, !dbg !13737
  %sub16 = sub nsw i32 %22, %24, !dbg !13738
  %call17 = call i32 @max_ii(i32 %20, i32 %sub16), !dbg !13739
  store i32 %call17, i32* %offset, align 4, !dbg !13740
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  br label %if.end18, !dbg !13741

if.end18:                                         ; preds = %if.end, %land.lhs.true, %for.body5
  br label %for.inc, !dbg !13742

for.inc:                                          ; preds = %if.end18
  %25 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !13743
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 0, !dbg !13744
  %26 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !13744
  store %struct.Sequence* %26, %struct.Sequence** %seq_other, align 8, !dbg !13745
  br label %for.cond3, !dbg !13746, !llvm.loop !13747

for.end:                                          ; preds = %for.cond3
  br label %if.end19, !dbg !13749

if.end19:                                         ; preds = %for.end, %for.body
  br label %for.inc20, !dbg !13750

for.inc20:                                        ; preds = %if.end19
  %27 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !13751
  %next21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 0, !dbg !13752
  %28 = load %struct.Sequence*, %struct.Sequence** %next21, align 8, !dbg !13752
  store %struct.Sequence* %28, %struct.Sequence** %seq, align 8, !dbg !13753
  br label %for.cond, !dbg !13754, !llvm.loop !13755

for.end22:                                        ; preds = %for.cond
  %29 = load i32, i32* %offset, align 4, !dbg !13757
  ret i32 %29, !dbg !13758
}

declare dso_local void @sound_mute_scene_sound(i8*, i8 zeroext) #2

declare dso_local void @sound_update_scene_sound(i8*, %struct.bSound*) #2

declare dso_local i64 @BLI_strescape(i8*, i8*, i64) #2

declare dso_local i8* @BLI_strncpy_utf8(i8*, i8*, i64) #2

declare dso_local i32 @BLI_utf8_invalid_strip(i8*, i32) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #3

declare dso_local void @sound_cache(%struct.bSound*) #2

declare dso_local void @BKE_sequence_modifier_list_copy(%struct.Sequence*, %struct.Sequence*) #2

declare dso_local void @id_us_plus(%struct.ID*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2026, !2027, !2028}
!llvm.ident = !{!2029}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "sequencer_view3d_cb", scope: !2, file: !3, line: 101, type: !2022, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !121, globals: !2003, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "blender/source/blender/blenkernel/intern/sequencer.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !15, !44, !73, !82, !90, !94, !98, !103, !110, !118}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 201, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "blender/source/blender/imbuf/IMB_colormanagement.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14}
!9 = !DIEnumerator(name: "COLOR_ROLE_SCENE_LINEAR", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "COLOR_ROLE_COLOR_PICKING", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "COLOR_ROLE_TEXTURE_PAINTING", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "COLOR_ROLE_DEFAULT_SEQUENCER", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "COLOR_ROLE_DEFAULT_BYTE", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "COLOR_ROLE_DEFAULT_FLOAT", value: 5, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 404, baseType: !7, size: 32, elements: !17)
!16 = !DIFile(filename: "blender/source/blender/makesdna/DNA_sequence_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!17 = !{!18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43}
!18 = !DIEnumerator(name: "SEQ_TYPE_IMAGE", value: 0, isUnsigned: true)
!19 = !DIEnumerator(name: "SEQ_TYPE_META", value: 1, isUnsigned: true)
!20 = !DIEnumerator(name: "SEQ_TYPE_SCENE", value: 2, isUnsigned: true)
!21 = !DIEnumerator(name: "SEQ_TYPE_MOVIE", value: 3, isUnsigned: true)
!22 = !DIEnumerator(name: "SEQ_TYPE_SOUND_RAM", value: 4, isUnsigned: true)
!23 = !DIEnumerator(name: "SEQ_TYPE_SOUND_HD", value: 5, isUnsigned: true)
!24 = !DIEnumerator(name: "SEQ_TYPE_MOVIECLIP", value: 6, isUnsigned: true)
!25 = !DIEnumerator(name: "SEQ_TYPE_MASK", value: 7, isUnsigned: true)
!26 = !DIEnumerator(name: "SEQ_TYPE_EFFECT", value: 8, isUnsigned: true)
!27 = !DIEnumerator(name: "SEQ_TYPE_CROSS", value: 8, isUnsigned: true)
!28 = !DIEnumerator(name: "SEQ_TYPE_ADD", value: 9, isUnsigned: true)
!29 = !DIEnumerator(name: "SEQ_TYPE_SUB", value: 10, isUnsigned: true)
!30 = !DIEnumerator(name: "SEQ_TYPE_ALPHAOVER", value: 11, isUnsigned: true)
!31 = !DIEnumerator(name: "SEQ_TYPE_ALPHAUNDER", value: 12, isUnsigned: true)
!32 = !DIEnumerator(name: "SEQ_TYPE_GAMCROSS", value: 13, isUnsigned: true)
!33 = !DIEnumerator(name: "SEQ_TYPE_MUL", value: 14, isUnsigned: true)
!34 = !DIEnumerator(name: "SEQ_TYPE_OVERDROP", value: 15, isUnsigned: true)
!35 = !DIEnumerator(name: "SEQ_TYPE_WIPE", value: 25, isUnsigned: true)
!36 = !DIEnumerator(name: "SEQ_TYPE_GLOW", value: 26, isUnsigned: true)
!37 = !DIEnumerator(name: "SEQ_TYPE_TRANSFORM", value: 27, isUnsigned: true)
!38 = !DIEnumerator(name: "SEQ_TYPE_COLOR", value: 28, isUnsigned: true)
!39 = !DIEnumerator(name: "SEQ_TYPE_SPEED", value: 29, isUnsigned: true)
!40 = !DIEnumerator(name: "SEQ_TYPE_MULTICAM", value: 30, isUnsigned: true)
!41 = !DIEnumerator(name: "SEQ_TYPE_ADJUSTMENT", value: 31, isUnsigned: true)
!42 = !DIEnumerator(name: "SEQ_TYPE_GAUSSIAN_BLUR", value: 40, isUnsigned: true)
!43 = !DIEnumerator(name: "SEQ_TYPE_EFFECT_MAX", value: 40, isUnsigned: true)
!44 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 335, baseType: !45, size: 32, elements: !46)
!45 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!46 = !{!47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72}
!47 = !DIEnumerator(name: "SEQ_LEFTSEL", value: 2)
!48 = !DIEnumerator(name: "SEQ_RIGHTSEL", value: 4)
!49 = !DIEnumerator(name: "SEQ_OVERLAP", value: 8)
!50 = !DIEnumerator(name: "SEQ_FILTERY", value: 16)
!51 = !DIEnumerator(name: "SEQ_MUTE", value: 32)
!52 = !DIEnumerator(name: "SEQ_MAKE_PREMUL", value: 64)
!53 = !DIEnumerator(name: "SEQ_REVERSE_FRAMES", value: 128)
!54 = !DIEnumerator(name: "SEQ_IPO_FRAME_LOCKED", value: 256)
!55 = !DIEnumerator(name: "SEQ_EFFECT_NOT_LOADED", value: 512)
!56 = !DIEnumerator(name: "SEQ_FLAG_DELETE", value: 1024)
!57 = !DIEnumerator(name: "SEQ_FLIPX", value: 2048)
!58 = !DIEnumerator(name: "SEQ_FLIPY", value: 4096)
!59 = !DIEnumerator(name: "SEQ_MAKE_FLOAT", value: 8192)
!60 = !DIEnumerator(name: "SEQ_LOCK", value: 16384)
!61 = !DIEnumerator(name: "SEQ_USE_PROXY", value: 32768)
!62 = !DIEnumerator(name: "SEQ_USE_TRANSFORM", value: 65536)
!63 = !DIEnumerator(name: "SEQ_USE_CROP", value: 131072)
!64 = !DIEnumerator(name: "SEQ_USE_PROXY_CUSTOM_DIR", value: 524288)
!65 = !DIEnumerator(name: "SEQ_USE_PROXY_CUSTOM_FILE", value: 2097152)
!66 = !DIEnumerator(name: "SEQ_USE_EFFECT_DEFAULT_FADE", value: 4194304)
!67 = !DIEnumerator(name: "SEQ_USE_LINEAR_MODIFIERS", value: 8388608)
!68 = !DIEnumerator(name: "SEQ_AUDIO_VOLUME_ANIMATED", value: 16777216)
!69 = !DIEnumerator(name: "SEQ_AUDIO_PITCH_ANIMATED", value: 33554432)
!70 = !DIEnumerator(name: "SEQ_AUDIO_PAN_ANIMATED", value: 67108864)
!71 = !DIEnumerator(name: "SEQ_AUDIO_DRAW_WAVEFORM", value: 134217728)
!72 = !DIEnumerator(name: "SEQ_INVALID_EFFECT", value: -2147483648)
!73 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "IMB_Timecode_Type", file: !74, line: 207, baseType: !7, size: 32, elements: !75)
!74 = !DIFile(filename: "blender/source/blender/imbuf/IMB_imbuf.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!75 = !{!76, !77, !78, !79, !80, !81}
!76 = !DIEnumerator(name: "IMB_TC_NONE", value: 0, isUnsigned: true)
!77 = !DIEnumerator(name: "IMB_TC_RECORD_RUN", value: 1, isUnsigned: true)
!78 = !DIEnumerator(name: "IMB_TC_FREE_RUN", value: 2, isUnsigned: true)
!79 = !DIEnumerator(name: "IMB_TC_INTERPOLATED_REC_DATE_FREE_RUN", value: 4, isUnsigned: true)
!80 = !DIEnumerator(name: "IMB_TC_RECORD_RUN_NO_GAPS", value: 8, isUnsigned: true)
!81 = !DIEnumerator(name: "IMB_TC_MAX_SLOT", value: 4, isUnsigned: true)
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "IMB_Proxy_Size", file: !74, line: 224, baseType: !7, size: 32, elements: !83)
!83 = !{!84, !85, !86, !87, !88, !89}
!84 = !DIEnumerator(name: "IMB_PROXY_NONE", value: 0, isUnsigned: true)
!85 = !DIEnumerator(name: "IMB_PROXY_25", value: 1, isUnsigned: true)
!86 = !DIEnumerator(name: "IMB_PROXY_50", value: 2, isUnsigned: true)
!87 = !DIEnumerator(name: "IMB_PROXY_75", value: 4, isUnsigned: true)
!88 = !DIEnumerator(name: "IMB_PROXY_100", value: 8, isUnsigned: true)
!89 = !DIEnumerator(name: "IMB_PROXY_MAX_SLOT", value: 4, isUnsigned: true)
!90 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 466, baseType: !7, size: 32, elements: !91)
!91 = !{!92, !93}
!92 = !DIEnumerator(name: "SEQUENCE_MASK_INPUT_STRIP", value: 0, isUnsigned: true)
!93 = !DIEnumerator(name: "SEQUENCE_MASK_INPUT_ID", value: 1, isUnsigned: true)
!94 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 398, baseType: !7, size: 32, elements: !95)
!95 = !{!96, !97}
!96 = !DIEnumerator(name: "SEQ_ALPHA_STRAIGHT", value: 0, isUnsigned: true)
!97 = !DIEnumerator(name: "SEQ_ALPHA_PREMUL", value: 1, isUnsigned: true)
!98 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !99, line: 172, baseType: !7, size: 32, elements: !100)
!99 = !DIFile(filename: "blender/source/blender/makesdna/DNA_image_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!100 = !{!101, !102}
!101 = !DIEnumerator(name: "IMA_ALPHA_STRAIGHT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "IMA_ALPHA_PREMUL", value: 1, isUnsigned: true)
!103 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !104, line: 247, baseType: !7, size: 32, elements: !105)
!104 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_sequencer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!105 = !{!106, !107, !108, !109}
!106 = !DIEnumerator(name: "SEQ_STRIPELEM_IBUF", value: 0, isUnsigned: true)
!107 = !DIEnumerator(name: "SEQ_STRIPELEM_IBUF_COMP", value: 1, isUnsigned: true)
!108 = !DIEnumerator(name: "SEQ_STRIPELEM_IBUF_STARTSTILL", value: 2, isUnsigned: true)
!109 = !DIEnumerator(name: "SEQ_STRIPELEM_IBUF_ENDSTILL", value: 3, isUnsigned: true)
!110 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !111, line: 154, baseType: !7, size: 32, elements: !112)
!111 = !DIFile(filename: "blender/source/blender/makesdna/DNA_movieclip_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!112 = !{!113, !114, !115, !116, !117}
!113 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_SIZE_FULL", value: 0, isUnsigned: true)
!114 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_SIZE_25", value: 1, isUnsigned: true)
!115 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_SIZE_50", value: 2, isUnsigned: true)
!116 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_SIZE_75", value: 3, isUnsigned: true)
!117 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_SIZE_100", value: 4, isUnsigned: true)
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !111, line: 163, baseType: !7, size: 32, elements: !119)
!119 = !{!120}
!120 = !DIEnumerator(name: "MCLIP_PROXY_RENDER_UNDISTORT", value: 1, isUnsigned: true)
!121 = !{!122, !129, !193, !45, !194, !204, !7, !1739, !123, !498, !1740, !1742, !1744, !1746, !1755, !157, !1756, !1770, !1765, !144, !742, !1843, !1852, !1988, !2002}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !124, size: 64)
!124 = !DIDerivedType(tag: DW_TAG_typedef, name: "ID", file: !125, line: 130, baseType: !126)
!125 = !DIFile(filename: "blender/source/blender/makesdna/DNA_ID.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ID", file: !125, line: 117, size: 960, elements: !127)
!127 = !{!128, !130, !131, !133, !152, !156, !158, !159, !160, !161}
!128 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !126, file: !125, line: 118, baseType: !129, size: 64)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !126, file: !125, line: 118, baseType: !129, size: 64, offset: 64)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "newid", scope: !126, file: !125, line: 119, baseType: !132, size: 64, offset: 128)
!132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !126, size: 64)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "lib", scope: !126, file: !125, line: 120, baseType: !134, size: 64, offset: 192)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64)
!135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Library", file: !125, line: 136, size: 17600, elements: !136)
!136 = !{!137, !138, !139, !142, !147, !148, !149}
!137 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !135, file: !125, line: 137, baseType: !124, size: 960)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "idblock", scope: !135, file: !125, line: 138, baseType: !123, size: 64, offset: 960)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "filedata", scope: !135, file: !125, line: 139, baseType: !140, size: 64, offset: 1024)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileData", file: !125, line: 43, flags: DIFlagFwdDecl)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !135, file: !125, line: 140, baseType: !143, size: 8192, offset: 1088)
!143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 8192, elements: !145)
!144 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!145 = !{!146}
!146 = !DISubrange(count: 1024)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "filepath", scope: !135, file: !125, line: 141, baseType: !143, size: 8192, offset: 9280)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !135, file: !125, line: 148, baseType: !134, size: 64, offset: 17472)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !135, file: !125, line: 150, baseType: !150, size: 64, offset: 17536)
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64)
!151 = !DICompositeType(tag: DW_TAG_structure_type, name: "PackedFile", file: !125, line: 45, flags: DIFlagFwdDecl)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !126, file: !125, line: 121, baseType: !153, size: 528, offset: 256)
!153 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 528, elements: !154)
!154 = !{!155}
!155 = !DISubrange(count: 66)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !126, file: !125, line: 126, baseType: !157, size: 16, offset: 784)
!157 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "us", scope: !126, file: !125, line: 127, baseType: !45, size: 32, offset: 800)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "icon_id", scope: !126, file: !125, line: 128, baseType: !45, size: 32, offset: 832)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !126, file: !125, line: 128, baseType: !45, size: 32, offset: 864)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !126, file: !125, line: 129, baseType: !162, size: 64, offset: 896)
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !163, size: 64)
!163 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDProperty", file: !125, line: 75, baseType: !164)
!164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDProperty", file: !125, line: 62, size: 1024, elements: !165)
!165 = !{!166, !168, !169, !170, !171, !172, !176, !177, !191, !192}
!166 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !164, file: !125, line: 63, baseType: !167, size: 64)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !164, size: 64)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !164, file: !125, line: 63, baseType: !167, size: 64, offset: 64)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !164, file: !125, line: 64, baseType: !144, size: 8, offset: 128)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "subtype", scope: !164, file: !125, line: 64, baseType: !144, size: 8, offset: 136)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !164, file: !125, line: 65, baseType: !157, size: 16, offset: 144)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !164, file: !125, line: 66, baseType: !173, size: 512, offset: 160)
!173 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 512, elements: !174)
!174 = !{!175}
!175 = !DISubrange(count: 64)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "saved", scope: !164, file: !125, line: 67, baseType: !45, size: 32, offset: 672)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !164, file: !125, line: 69, baseType: !178, size: 256, offset: 704)
!178 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDPropertyData", file: !125, line: 60, baseType: !179)
!179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDPropertyData", file: !125, line: 48, size: 256, elements: !180)
!180 = !{!181, !182, !189, !190}
!181 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !179, file: !125, line: 49, baseType: !129, size: 64)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !179, file: !125, line: 58, baseType: !183, size: 128, offset: 64)
!183 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBase", file: !184, line: 71, baseType: !185)
!184 = !DIFile(filename: "blender/source/blender/makesdna/DNA_listBase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBase", file: !184, line: 69, size: 128, elements: !186)
!186 = !{!187, !188}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !185, file: !184, line: 70, baseType: !129, size: 64)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !185, file: !184, line: 70, baseType: !129, size: 64, offset: 64)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !179, file: !125, line: 59, baseType: !45, size: 32, offset: 192)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "val2", scope: !179, file: !125, line: 59, baseType: !45, size: 32, offset: 224)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !164, file: !125, line: 70, baseType: !45, size: 32, offset: 960)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "totallen", scope: !164, file: !125, line: 74, baseType: !45, size: 32, offset: 992)
!193 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!195 = !DIDerivedType(tag: DW_TAG_typedef, name: "MetaStack", file: !16, line: 198, baseType: !196)
!196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MetaStack", file: !16, line: 192, size: 320, elements: !197)
!197 = !{!198, !200, !201, !203, !1738}
!198 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !196, file: !16, line: 193, baseType: !199, size: 64)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !196, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !196, file: !16, line: 193, baseType: !199, size: 64, offset: 64)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "oldbasep", scope: !196, file: !16, line: 194, baseType: !202, size: 64, offset: 128)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!203 = !DIDerivedType(tag: DW_TAG_member, name: "parseq", scope: !196, file: !16, line: 195, baseType: !204, size: 64, offset: 192)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64)
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sequence", file: !16, line: 190, baseType: !206)
!206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Sequence", file: !16, line: 126, size: 2816, elements: !207)
!207 = !{!208, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !309, !312, !1679, !1680, !1681, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737}
!208 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !206, file: !16, line: 127, baseType: !209, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !206, size: 64)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !206, file: !16, line: 127, baseType: !209, size: 64, offset: 64)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "tmp", scope: !206, file: !16, line: 128, baseType: !129, size: 64, offset: 128)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "lib", scope: !206, file: !16, line: 129, baseType: !129, size: 64, offset: 192)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !206, file: !16, line: 130, baseType: !173, size: 512, offset: 256)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !206, file: !16, line: 132, baseType: !45, size: 32, offset: 768)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !206, file: !16, line: 132, baseType: !45, size: 32, offset: 800)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !206, file: !16, line: 133, baseType: !45, size: 32, offset: 832)
!217 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !206, file: !16, line: 134, baseType: !45, size: 32, offset: 864)
!218 = !DIDerivedType(tag: DW_TAG_member, name: "startofs", scope: !206, file: !16, line: 134, baseType: !45, size: 32, offset: 896)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "endofs", scope: !206, file: !16, line: 134, baseType: !45, size: 32, offset: 928)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "startstill", scope: !206, file: !16, line: 135, baseType: !45, size: 32, offset: 960)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "endstill", scope: !206, file: !16, line: 135, baseType: !45, size: 32, offset: 992)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !206, file: !16, line: 136, baseType: !45, size: 32, offset: 1024)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !206, file: !16, line: 136, baseType: !45, size: 32, offset: 1056)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "startdisp", scope: !206, file: !16, line: 137, baseType: !45, size: 32, offset: 1088)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "enddisp", scope: !206, file: !16, line: 137, baseType: !45, size: 32, offset: 1120)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "sat", scope: !206, file: !16, line: 138, baseType: !193, size: 32, offset: 1152)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "mul", scope: !206, file: !16, line: 139, baseType: !193, size: 32, offset: 1184)
!228 = !DIDerivedType(tag: DW_TAG_member, name: "handsize", scope: !206, file: !16, line: 139, baseType: !193, size: 32, offset: 1216)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "anim_preseek", scope: !206, file: !16, line: 141, baseType: !157, size: 16, offset: 1248)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "streamindex", scope: !206, file: !16, line: 142, baseType: !157, size: 16, offset: 1264)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "multicam_source", scope: !206, file: !16, line: 143, baseType: !45, size: 32, offset: 1280)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "clip_flag", scope: !206, file: !16, line: 144, baseType: !45, size: 32, offset: 1312)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "strip", scope: !206, file: !16, line: 146, baseType: !234, size: 64, offset: 1344)
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64)
!235 = !DIDerivedType(tag: DW_TAG_typedef, name: "Strip", file: !16, line: 114, baseType: !236)
!236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Strip", file: !16, line: 99, size: 7232, elements: !237)
!237 = !{!238, !240, !241, !242, !243, !244, !245, !256, !260, !274, !283, !290, !303}
!238 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !236, file: !16, line: 100, baseType: !239, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !236, size: 64)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !236, file: !16, line: 100, baseType: !239, size: 64, offset: 64)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "us", scope: !236, file: !16, line: 101, baseType: !45, size: 32, offset: 128)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !236, file: !16, line: 101, baseType: !45, size: 32, offset: 160)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "startstill", scope: !236, file: !16, line: 102, baseType: !45, size: 32, offset: 192)
!244 = !DIDerivedType(tag: DW_TAG_member, name: "endstill", scope: !236, file: !16, line: 102, baseType: !45, size: 32, offset: 224)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "stripdata", scope: !236, file: !16, line: 103, baseType: !246, size: 64, offset: 256)
!246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !247, size: 64)
!247 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripElem", file: !16, line: 59, baseType: !248)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripElem", file: !16, line: 56, size: 2112, elements: !249)
!249 = !{!250, !254, !255}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !248, file: !16, line: 57, baseType: !251, size: 2048)
!251 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 2048, elements: !252)
!252 = !{!253}
!253 = !DISubrange(count: 256)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "orig_width", scope: !248, file: !16, line: 58, baseType: !45, size: 32, offset: 2048)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "orig_height", scope: !248, file: !16, line: 58, baseType: !45, size: 32, offset: 2080)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !236, file: !16, line: 106, baseType: !257, size: 6144, offset: 320)
!257 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 6144, elements: !258)
!258 = !{!259}
!259 = !DISubrange(count: 768)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "proxy", scope: !236, file: !16, line: 107, baseType: !261, size: 64, offset: 6464)
!261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !262, size: 64)
!262 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripProxy", file: !16, line: 97, baseType: !263)
!263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripProxy", file: !16, line: 83, size: 8320, elements: !264)
!264 = !{!265, !266, !267, !270, !271, !272, !273}
!265 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !263, file: !16, line: 84, baseType: !257, size: 6144)
!266 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !263, file: !16, line: 87, baseType: !251, size: 2048, offset: 6144)
!267 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !263, file: !16, line: 88, baseType: !268, size: 64, offset: 8192)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!269 = !DICompositeType(tag: DW_TAG_structure_type, name: "anim", file: !16, line: 88, flags: DIFlagFwdDecl)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "tc", scope: !263, file: !16, line: 90, baseType: !157, size: 16, offset: 8256)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !263, file: !16, line: 92, baseType: !157, size: 16, offset: 8272)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "build_size_flags", scope: !263, file: !16, line: 93, baseType: !157, size: 16, offset: 8288)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "build_tc_flags", scope: !263, file: !16, line: 95, baseType: !157, size: 16, offset: 8304)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "crop", scope: !236, file: !16, line: 108, baseType: !275, size: 64, offset: 6528)
!275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !276, size: 64)
!276 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripCrop", file: !16, line: 66, baseType: !277)
!277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripCrop", file: !16, line: 61, size: 128, elements: !278)
!278 = !{!279, !280, !281, !282}
!279 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !277, file: !16, line: 62, baseType: !45, size: 32)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "bottom", scope: !277, file: !16, line: 63, baseType: !45, size: 32, offset: 32)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !277, file: !16, line: 64, baseType: !45, size: 32, offset: 64)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !277, file: !16, line: 65, baseType: !45, size: 32, offset: 96)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "transform", scope: !236, file: !16, line: 109, baseType: !284, size: 64, offset: 6592)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !285, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripTransform", file: !16, line: 71, baseType: !286)
!286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripTransform", file: !16, line: 68, size: 64, elements: !287)
!287 = !{!288, !289}
!288 = !DIDerivedType(tag: DW_TAG_member, name: "xofs", scope: !286, file: !16, line: 69, baseType: !45, size: 32)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "yofs", scope: !286, file: !16, line: 70, baseType: !45, size: 32, offset: 32)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "color_balance", scope: !236, file: !16, line: 110, baseType: !291, size: 64, offset: 6656)
!291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !292, size: 64)
!292 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripColorBalance", file: !16, line: 81, baseType: !293)
!293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripColorBalance", file: !16, line: 73, size: 352, elements: !294)
!294 = !{!295, !299, !300, !301, !302}
!295 = !DIDerivedType(tag: DW_TAG_member, name: "lift", scope: !293, file: !16, line: 74, baseType: !296, size: 96)
!296 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 96, elements: !297)
!297 = !{!298}
!298 = !DISubrange(count: 3)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "gamma", scope: !293, file: !16, line: 75, baseType: !296, size: 96, offset: 96)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "gain", scope: !293, file: !16, line: 76, baseType: !296, size: 96, offset: 192)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !293, file: !16, line: 77, baseType: !45, size: 32, offset: 288)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !293, file: !16, line: 78, baseType: !45, size: 32, offset: 320)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !236, file: !16, line: 113, baseType: !304, size: 512, offset: 6720)
!304 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedColorspaceSettings", file: !305, line: 182, baseType: !306)
!305 = !DIFile(filename: "blender/source/blender/makesdna/DNA_color_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedColorspaceSettings", file: !305, line: 180, size: 512, elements: !307)
!307 = !{!308}
!308 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !306, file: !305, line: 181, baseType: !173, size: 512)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !206, file: !16, line: 148, baseType: !310, size: 64, offset: 1408)
!310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !311, size: 64)
!311 = !DICompositeType(tag: DW_TAG_structure_type, name: "Ipo", file: !16, line: 49, flags: DIFlagFwdDecl)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !206, file: !16, line: 151, baseType: !313, size: 64, offset: 1472)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64)
!314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Scene", file: !315, line: 1216, size: 39680, elements: !316)
!315 = !DIFile(filename: "blender/source/blender/makesdna/DNA_scene_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!316 = !{!317, !318, !388, !663, !666, !667, !668, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !694, !697, !720, !1068, !1071, !1352, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1374, !1375, !1376, !1377, !1378, !1386, !1453, !1460, !1461, !1468, !1671, !1672, !1673, !1674, !1675, !1676}
!317 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !314, file: !315, line: 1217, baseType: !124, size: 960)
!318 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !314, file: !315, line: 1218, baseType: !319, size: 64, offset: 960)
!319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !320, size: 64)
!320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AnimData", file: !321, line: 838, size: 768, elements: !322)
!321 = !DIFile(filename: "blender/source/blender/makesdna/DNA_anim_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!322 = !{!323, !338, !339, !349, !350, !381, !382, !383, !384, !385, !386, !387}
!323 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !320, file: !321, line: 840, baseType: !324, size: 64)
!324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !325, size: 64)
!325 = !DIDerivedType(tag: DW_TAG_typedef, name: "bAction", file: !326, line: 499, baseType: !327)
!326 = !DIFile(filename: "blender/source/blender/makesdna/DNA_action_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bAction", file: !326, line: 486, size: 1600, elements: !328)
!328 = !{!329, !330, !331, !332, !333, !334, !335, !336, !337}
!329 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !327, file: !326, line: 487, baseType: !124, size: 960)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "curves", scope: !327, file: !326, line: 489, baseType: !183, size: 128, offset: 960)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "chanbase", scope: !327, file: !326, line: 490, baseType: !183, size: 128, offset: 1088)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !327, file: !326, line: 491, baseType: !183, size: 128, offset: 1216)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !327, file: !326, line: 492, baseType: !183, size: 128, offset: 1344)
!334 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !327, file: !326, line: 494, baseType: !45, size: 32, offset: 1472)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "active_marker", scope: !327, file: !326, line: 495, baseType: !45, size: 32, offset: 1504)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "idroot", scope: !327, file: !326, line: 497, baseType: !45, size: 32, offset: 1536)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !327, file: !326, line: 498, baseType: !45, size: 32, offset: 1568)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "tmpact", scope: !320, file: !321, line: 844, baseType: !324, size: 64, offset: 64)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "remap", scope: !320, file: !321, line: 848, baseType: !340, size: 64, offset: 128)
!340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !341, size: 64)
!341 = !DIDerivedType(tag: DW_TAG_typedef, name: "AnimMapper", file: !321, line: 549, baseType: !342)
!342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AnimMapper", file: !321, line: 544, size: 320, elements: !343)
!343 = !{!344, !346, !347, !348}
!344 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !342, file: !321, line: 545, baseType: !345, size: 64)
!345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !342, size: 64)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !342, file: !321, line: 545, baseType: !345, size: 64, offset: 64)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !342, file: !321, line: 547, baseType: !324, size: 64, offset: 128)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "mappings", scope: !342, file: !321, line: 548, baseType: !183, size: 128, offset: 192)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "nla_tracks", scope: !320, file: !321, line: 851, baseType: !183, size: 128, offset: 192)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "actstrip", scope: !320, file: !321, line: 853, baseType: !351, size: 64, offset: 320)
!351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !352, size: 64)
!352 = !DIDerivedType(tag: DW_TAG_typedef, name: "NlaStrip", file: !321, line: 594, baseType: !353)
!353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "NlaStrip", file: !321, line: 561, size: 1664, elements: !354)
!354 = !{!355, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !353, file: !321, line: 562, baseType: !356, size: 64)
!356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !353, size: 64)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !353, file: !321, line: 562, baseType: !356, size: 64, offset: 64)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "strips", scope: !353, file: !321, line: 564, baseType: !183, size: 128, offset: 128)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "act", scope: !353, file: !321, line: 565, baseType: !324, size: 64, offset: 256)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "remap", scope: !353, file: !321, line: 566, baseType: !340, size: 64, offset: 320)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "fcurves", scope: !353, file: !321, line: 568, baseType: !183, size: 128, offset: 384)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "modifiers", scope: !353, file: !321, line: 569, baseType: !183, size: 128, offset: 512)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !353, file: !321, line: 571, baseType: !173, size: 512, offset: 640)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "influence", scope: !353, file: !321, line: 573, baseType: !193, size: 32, offset: 1152)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "strip_time", scope: !353, file: !321, line: 574, baseType: !193, size: 32, offset: 1184)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !353, file: !321, line: 576, baseType: !193, size: 32, offset: 1216)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !353, file: !321, line: 576, baseType: !193, size: 32, offset: 1248)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "actstart", scope: !353, file: !321, line: 577, baseType: !193, size: 32, offset: 1280)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "actend", scope: !353, file: !321, line: 577, baseType: !193, size: 32, offset: 1312)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "repeat", scope: !353, file: !321, line: 579, baseType: !193, size: 32, offset: 1344)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !353, file: !321, line: 580, baseType: !193, size: 32, offset: 1376)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "blendin", scope: !353, file: !321, line: 582, baseType: !193, size: 32, offset: 1408)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "blendout", scope: !353, file: !321, line: 582, baseType: !193, size: 32, offset: 1440)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "blendmode", scope: !353, file: !321, line: 583, baseType: !157, size: 16, offset: 1472)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "extendmode", scope: !353, file: !321, line: 585, baseType: !157, size: 16, offset: 1488)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !353, file: !321, line: 586, baseType: !157, size: 16, offset: 1504)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !353, file: !321, line: 588, baseType: !157, size: 16, offset: 1520)
!378 = !DIDerivedType(tag: DW_TAG_member, name: "speaker_handle", scope: !353, file: !321, line: 590, baseType: !129, size: 64, offset: 1536)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !353, file: !321, line: 592, baseType: !45, size: 32, offset: 1600)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !353, file: !321, line: 593, baseType: !45, size: 32, offset: 1632)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "drivers", scope: !320, file: !321, line: 858, baseType: !183, size: 128, offset: 384)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "overrides", scope: !320, file: !321, line: 859, baseType: !183, size: 128, offset: 512)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !320, file: !321, line: 862, baseType: !45, size: 32, offset: 640)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "recalc", scope: !320, file: !321, line: 863, baseType: !45, size: 32, offset: 672)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "act_blendmode", scope: !320, file: !321, line: 866, baseType: !157, size: 16, offset: 704)
!386 = !DIDerivedType(tag: DW_TAG_member, name: "act_extendmode", scope: !320, file: !321, line: 867, baseType: !157, size: 16, offset: 720)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "act_influence", scope: !320, file: !321, line: 868, baseType: !193, size: 32, offset: 736)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !314, file: !315, line: 1220, baseType: !389, size: 64, offset: 1024)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64)
!390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Object", file: !391, line: 115, size: 11392, elements: !392)
!391 = !DIFile(filename: "blender/source/blender/makesdna/DNA_object_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !420, !422, !423, !465, !466, !470, !471, !487, !488, !489, !490, !491, !492, !493, !497, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !513, !514, !515, !516, !517, !518, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !578, !579, !580, !581, !582, !583, !584, !585, !586, !589, !592, !596, !597, !598, !599, !600, !603, !606, !609, !610, !616, !617, !618, !619, !620, !621, !622, !625, !628, !632, !651, !652}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !390, file: !391, line: 116, baseType: !124, size: 960)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !390, file: !391, line: 117, baseType: !319, size: 64, offset: 960)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt", scope: !390, file: !391, line: 119, baseType: !396, size: 64, offset: 1024)
!396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !397, size: 64)
!397 = !DICompositeType(tag: DW_TAG_structure_type, name: "SculptSession", file: !391, line: 57, flags: DIFlagFwdDecl)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !390, file: !391, line: 121, baseType: !157, size: 16, offset: 1088)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "partype", scope: !390, file: !391, line: 121, baseType: !157, size: 16, offset: 1104)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "par1", scope: !390, file: !391, line: 122, baseType: !45, size: 32, offset: 1120)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "par2", scope: !390, file: !391, line: 122, baseType: !45, size: 32, offset: 1152)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "par3", scope: !390, file: !391, line: 122, baseType: !45, size: 32, offset: 1184)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "parsubstr", scope: !390, file: !391, line: 123, baseType: !173, size: 512, offset: 1216)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !390, file: !391, line: 124, baseType: !389, size: 64, offset: 1728)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "track", scope: !390, file: !391, line: 124, baseType: !389, size: 64, offset: 1792)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "proxy", scope: !390, file: !391, line: 127, baseType: !389, size: 64, offset: 1856)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "proxy_group", scope: !390, file: !391, line: 127, baseType: !389, size: 64, offset: 1920)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "proxy_from", scope: !390, file: !391, line: 127, baseType: !389, size: 64, offset: 1984)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !390, file: !391, line: 128, baseType: !310, size: 64, offset: 2048)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !390, file: !391, line: 130, baseType: !411, size: 64, offset: 2112)
!411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !412, size: 64)
!412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BoundBox", file: !391, line: 97, size: 832, elements: !413)
!413 = !{!414, !418, !419}
!414 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !412, file: !391, line: 98, baseType: !415, size: 768)
!415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 768, elements: !416)
!416 = !{!417, !298}
!417 = !DISubrange(count: 8)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !412, file: !391, line: 99, baseType: !45, size: 32, offset: 768)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !412, file: !391, line: 99, baseType: !45, size: 32, offset: 800)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !390, file: !391, line: 131, baseType: !421, size: 64, offset: 2176)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !327, size: 64)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "poselib", scope: !390, file: !391, line: 132, baseType: !421, size: 64, offset: 2240)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "pose", scope: !390, file: !391, line: 133, baseType: !424, size: 64, offset: 2304)
!424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !425, size: 64)
!425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bPose", file: !326, line: 334, size: 1728, elements: !426)
!426 = !{!427, !428, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !464}
!427 = !DIDerivedType(tag: DW_TAG_member, name: "chanbase", scope: !425, file: !326, line: 335, baseType: !183, size: 128)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "chanhash", scope: !425, file: !326, line: 336, baseType: !429, size: 64, offset: 128)
!429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !430, size: 64)
!430 = !DICompositeType(tag: DW_TAG_structure_type, name: "GHash", file: !431, line: 51, flags: DIFlagFwdDecl)
!431 = !DIFile(filename: "blender/source/blender/makesdna/DNA_curve_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!432 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !425, file: !326, line: 338, baseType: !157, size: 16, offset: 192)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !425, file: !326, line: 338, baseType: !157, size: 16, offset: 208)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "proxy_layer", scope: !425, file: !326, line: 339, baseType: !7, size: 32, offset: 224)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !425, file: !326, line: 340, baseType: !45, size: 32, offset: 256)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "ctime", scope: !425, file: !326, line: 342, baseType: !193, size: 32, offset: 288)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "stride_offset", scope: !425, file: !326, line: 343, baseType: !296, size: 96, offset: 320)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "cyclic_offset", scope: !425, file: !326, line: 344, baseType: !296, size: 96, offset: 416)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "agroups", scope: !425, file: !326, line: 347, baseType: !183, size: 128, offset: 512)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "active_group", scope: !425, file: !326, line: 349, baseType: !45, size: 32, offset: 640)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "iksolver", scope: !425, file: !326, line: 350, baseType: !45, size: 32, offset: 672)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "ikdata", scope: !425, file: !326, line: 351, baseType: !129, size: 64, offset: 704)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "ikparam", scope: !425, file: !326, line: 352, baseType: !129, size: 64, offset: 768)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "avs", scope: !425, file: !326, line: 354, baseType: !445, size: 384, offset: 832)
!445 = !DIDerivedType(tag: DW_TAG_typedef, name: "bAnimVizSettings", file: !326, line: 116, baseType: !446)
!446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bAnimVizSettings", file: !326, line: 94, size: 384, elements: !447)
!447 = !{!448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463}
!448 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_sf", scope: !446, file: !326, line: 96, baseType: !45, size: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_ef", scope: !446, file: !326, line: 96, baseType: !45, size: 32, offset: 32)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_bc", scope: !446, file: !326, line: 97, baseType: !45, size: 32, offset: 64)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_ac", scope: !446, file: !326, line: 97, baseType: !45, size: 32, offset: 96)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_type", scope: !446, file: !326, line: 99, baseType: !157, size: 16, offset: 128)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_step", scope: !446, file: !326, line: 100, baseType: !157, size: 16, offset: 144)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "ghost_flag", scope: !446, file: !326, line: 102, baseType: !157, size: 16, offset: 160)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "recalc", scope: !446, file: !326, line: 105, baseType: !157, size: 16, offset: 176)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "path_type", scope: !446, file: !326, line: 108, baseType: !157, size: 16, offset: 192)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "path_step", scope: !446, file: !326, line: 109, baseType: !157, size: 16, offset: 208)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "path_viewflag", scope: !446, file: !326, line: 111, baseType: !157, size: 16, offset: 224)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "path_bakeflag", scope: !446, file: !326, line: 112, baseType: !157, size: 16, offset: 240)
!460 = !DIDerivedType(tag: DW_TAG_member, name: "path_sf", scope: !446, file: !326, line: 114, baseType: !45, size: 32, offset: 256)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "path_ef", scope: !446, file: !326, line: 114, baseType: !45, size: 32, offset: 288)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "path_bc", scope: !446, file: !326, line: 115, baseType: !45, size: 32, offset: 320)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "path_ac", scope: !446, file: !326, line: 115, baseType: !45, size: 32, offset: 352)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "proxy_act_bone", scope: !425, file: !326, line: 355, baseType: !173, size: 512, offset: 1216)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !390, file: !391, line: 134, baseType: !129, size: 64, offset: 2368)
!466 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !390, file: !391, line: 136, baseType: !467, size: 64, offset: 2432)
!467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !468, size: 64)
!468 = !DICompositeType(tag: DW_TAG_structure_type, name: "bGPdata", file: !469, line: 45, flags: DIFlagFwdDecl)
!469 = !DIFile(filename: "blender/source/blender/makesdna/DNA_tracking_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!470 = !DIDerivedType(tag: DW_TAG_member, name: "avs", scope: !390, file: !391, line: 138, baseType: !445, size: 384, offset: 2496)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "mpath", scope: !390, file: !391, line: 139, baseType: !472, size: 64, offset: 2880)
!472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!473 = !DIDerivedType(tag: DW_TAG_typedef, name: "bMotionPath", file: !326, line: 80, baseType: !474)
!474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bMotionPath", file: !326, line: 72, size: 192, elements: !475)
!475 = !{!476, !483, !484, !485, !486}
!476 = !DIDerivedType(tag: DW_TAG_member, name: "points", scope: !474, file: !326, line: 73, baseType: !477, size: 64)
!477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !478, size: 64)
!478 = !DIDerivedType(tag: DW_TAG_typedef, name: "bMotionPathVert", file: !326, line: 59, baseType: !479)
!479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bMotionPathVert", file: !326, line: 56, size: 128, elements: !480)
!480 = !{!481, !482}
!481 = !DIDerivedType(tag: DW_TAG_member, name: "co", scope: !479, file: !326, line: 57, baseType: !296, size: 96)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !479, file: !326, line: 58, baseType: !45, size: 32, offset: 96)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !474, file: !326, line: 74, baseType: !45, size: 32, offset: 64)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !474, file: !326, line: 76, baseType: !45, size: 32, offset: 96)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !474, file: !326, line: 77, baseType: !45, size: 32, offset: 128)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !474, file: !326, line: 79, baseType: !45, size: 32, offset: 160)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "constraintChannels", scope: !390, file: !391, line: 141, baseType: !183, size: 128, offset: 2944)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "effect", scope: !390, file: !391, line: 142, baseType: !183, size: 128, offset: 3072)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "defbase", scope: !390, file: !391, line: 143, baseType: !183, size: 128, offset: 3200)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "modifiers", scope: !390, file: !391, line: 144, baseType: !183, size: 128, offset: 3328)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !390, file: !391, line: 146, baseType: !45, size: 32, offset: 3456)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "restore_mode", scope: !390, file: !391, line: 147, baseType: !45, size: 32, offset: 3488)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "mat", scope: !390, file: !391, line: 150, baseType: !494, size: 64, offset: 3520)
!494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !495, size: 64)
!495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !496, size: 64)
!496 = !DICompositeType(tag: DW_TAG_structure_type, name: "Material", file: !431, line: 46, flags: DIFlagFwdDecl)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "matbits", scope: !390, file: !391, line: 151, baseType: !498, size: 64, offset: 3584)
!498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !144, size: 64)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "totcol", scope: !390, file: !391, line: 152, baseType: !45, size: 32, offset: 3648)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "actcol", scope: !390, file: !391, line: 153, baseType: !45, size: 32, offset: 3680)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !390, file: !391, line: 156, baseType: !296, size: 96, offset: 3712)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "dloc", scope: !390, file: !391, line: 156, baseType: !296, size: 96, offset: 3808)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "orig", scope: !390, file: !391, line: 156, baseType: !296, size: 96, offset: 3904)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !390, file: !391, line: 157, baseType: !296, size: 96, offset: 4000)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "dsize", scope: !390, file: !391, line: 158, baseType: !296, size: 96, offset: 4096)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "dscale", scope: !390, file: !391, line: 159, baseType: !296, size: 96, offset: 4192)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "rot", scope: !390, file: !391, line: 160, baseType: !296, size: 96, offset: 4288)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "drot", scope: !390, file: !391, line: 160, baseType: !296, size: 96, offset: 4384)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "quat", scope: !390, file: !391, line: 161, baseType: !510, size: 128, offset: 4480)
!510 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 128, elements: !511)
!511 = !{!512}
!512 = !DISubrange(count: 4)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "dquat", scope: !390, file: !391, line: 161, baseType: !510, size: 128, offset: 4608)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "rotAxis", scope: !390, file: !391, line: 162, baseType: !296, size: 96, offset: 4736)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "drotAxis", scope: !390, file: !391, line: 162, baseType: !296, size: 96, offset: 4832)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "rotAngle", scope: !390, file: !391, line: 163, baseType: !193, size: 32, offset: 4928)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "drotAngle", scope: !390, file: !391, line: 163, baseType: !193, size: 32, offset: 4960)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "obmat", scope: !390, file: !391, line: 164, baseType: !519, size: 512, offset: 4992)
!519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 512, elements: !520)
!520 = !{!512, !512}
!521 = !DIDerivedType(tag: DW_TAG_member, name: "parentinv", scope: !390, file: !391, line: 165, baseType: !519, size: 512, offset: 5504)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "constinv", scope: !390, file: !391, line: 166, baseType: !519, size: 512, offset: 6016)
!523 = !DIDerivedType(tag: DW_TAG_member, name: "imat", scope: !390, file: !391, line: 167, baseType: !519, size: 512, offset: 6528)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "imat_ren", scope: !390, file: !391, line: 176, baseType: !519, size: 512, offset: 7040)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !390, file: !391, line: 178, baseType: !7, size: 32, offset: 7552)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !390, file: !391, line: 180, baseType: !157, size: 16, offset: 7584)
!527 = !DIDerivedType(tag: DW_TAG_member, name: "colbits", scope: !390, file: !391, line: 181, baseType: !157, size: 16, offset: 7600)
!528 = !DIDerivedType(tag: DW_TAG_member, name: "transflag", scope: !390, file: !391, line: 183, baseType: !157, size: 16, offset: 7616)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "protectflag", scope: !390, file: !391, line: 183, baseType: !157, size: 16, offset: 7632)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "trackflag", scope: !390, file: !391, line: 184, baseType: !157, size: 16, offset: 7648)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "upflag", scope: !390, file: !391, line: 184, baseType: !157, size: 16, offset: 7664)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "nlaflag", scope: !390, file: !391, line: 185, baseType: !157, size: 16, offset: 7680)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "ipoflag", scope: !390, file: !391, line: 186, baseType: !157, size: 16, offset: 7696)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "scaflag", scope: !390, file: !391, line: 187, baseType: !157, size: 16, offset: 7712)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "scavisflag", scope: !390, file: !391, line: 188, baseType: !144, size: 8, offset: 7728)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "depsflag", scope: !390, file: !391, line: 189, baseType: !144, size: 8, offset: 7736)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "dupon", scope: !390, file: !391, line: 192, baseType: !45, size: 32, offset: 7744)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "dupoff", scope: !390, file: !391, line: 192, baseType: !45, size: 32, offset: 7776)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "dupsta", scope: !390, file: !391, line: 192, baseType: !45, size: 32, offset: 7808)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "dupend", scope: !390, file: !391, line: 192, baseType: !45, size: 32, offset: 7840)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !390, file: !391, line: 194, baseType: !45, size: 32, offset: 7872)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "mass", scope: !390, file: !391, line: 202, baseType: !193, size: 32, offset: 7904)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "damping", scope: !390, file: !391, line: 202, baseType: !193, size: 32, offset: 7936)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "inertia", scope: !390, file: !391, line: 202, baseType: !193, size: 32, offset: 7968)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "formfactor", scope: !390, file: !391, line: 211, baseType: !193, size: 32, offset: 8000)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "rdamping", scope: !390, file: !391, line: 212, baseType: !193, size: 32, offset: 8032)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "margin", scope: !390, file: !391, line: 213, baseType: !193, size: 32, offset: 8064)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "max_vel", scope: !390, file: !391, line: 214, baseType: !193, size: 32, offset: 8096)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "min_vel", scope: !390, file: !391, line: 215, baseType: !193, size: 32, offset: 8128)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "obstacleRad", scope: !390, file: !391, line: 216, baseType: !193, size: 32, offset: 8160)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "step_height", scope: !390, file: !391, line: 219, baseType: !193, size: 32, offset: 8192)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "jump_speed", scope: !390, file: !391, line: 220, baseType: !193, size: 32, offset: 8224)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "fall_speed", scope: !390, file: !391, line: 221, baseType: !193, size: 32, offset: 8256)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "col_group", scope: !390, file: !391, line: 224, baseType: !555, size: 16, offset: 8288)
!555 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!556 = !DIDerivedType(tag: DW_TAG_member, name: "col_mask", scope: !390, file: !391, line: 224, baseType: !555, size: 16, offset: 8304)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "rotmode", scope: !390, file: !391, line: 226, baseType: !157, size: 16, offset: 8320)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "boundtype", scope: !390, file: !391, line: 228, baseType: !144, size: 8, offset: 8336)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "collision_boundtype", scope: !390, file: !391, line: 229, baseType: !144, size: 8, offset: 8344)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "dtx", scope: !390, file: !391, line: 231, baseType: !157, size: 16, offset: 8352)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "dt", scope: !390, file: !391, line: 232, baseType: !144, size: 8, offset: 8368)
!562 = !DIDerivedType(tag: DW_TAG_member, name: "empty_drawtype", scope: !390, file: !391, line: 233, baseType: !144, size: 8, offset: 8376)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "empty_drawsize", scope: !390, file: !391, line: 234, baseType: !193, size: 32, offset: 8384)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "dupfacesca", scope: !390, file: !391, line: 235, baseType: !193, size: 32, offset: 8416)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "prop", scope: !390, file: !391, line: 237, baseType: !183, size: 128, offset: 8448)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "sensors", scope: !390, file: !391, line: 238, baseType: !183, size: 128, offset: 8576)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "controllers", scope: !390, file: !391, line: 239, baseType: !183, size: 128, offset: 8704)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "actuators", scope: !390, file: !391, line: 240, baseType: !183, size: 128, offset: 8832)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !390, file: !391, line: 242, baseType: !193, size: 32, offset: 8960)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !390, file: !391, line: 244, baseType: !157, size: 16, offset: 8992)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "actdef", scope: !390, file: !391, line: 245, baseType: !555, size: 16, offset: 9008)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "col", scope: !390, file: !391, line: 246, baseType: !510, size: 128, offset: 9024)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "gameflag", scope: !390, file: !391, line: 248, baseType: !45, size: 32, offset: 9152)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "gameflag2", scope: !390, file: !391, line: 249, baseType: !45, size: 32, offset: 9184)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "bsoft", scope: !390, file: !391, line: 251, baseType: !576, size: 64, offset: 9216)
!576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !577, size: 64)
!577 = !DICompositeType(tag: DW_TAG_structure_type, name: "BulletSoftBody", file: !391, line: 251, flags: DIFlagFwdDecl)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "restrictflag", scope: !390, file: !391, line: 253, baseType: !144, size: 8, offset: 9280)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "recalc", scope: !390, file: !391, line: 254, baseType: !144, size: 8, offset: 9288)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "softflag", scope: !390, file: !391, line: 255, baseType: !157, size: 16, offset: 9296)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "anisotropicFriction", scope: !390, file: !391, line: 256, baseType: !296, size: 96, offset: 9312)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "constraints", scope: !390, file: !391, line: 258, baseType: !183, size: 128, offset: 9408)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "nlastrips", scope: !390, file: !391, line: 259, baseType: !183, size: 128, offset: 9536)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "hooks", scope: !390, file: !391, line: 260, baseType: !183, size: 128, offset: 9664)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "particlesystem", scope: !390, file: !391, line: 261, baseType: !183, size: 128, offset: 9792)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "pd", scope: !390, file: !391, line: 263, baseType: !587, size: 64, offset: 9920)
!587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !588, size: 64)
!588 = !DICompositeType(tag: DW_TAG_structure_type, name: "PartDeflect", file: !391, line: 52, flags: DIFlagFwdDecl)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "soft", scope: !390, file: !391, line: 264, baseType: !590, size: 64, offset: 9984)
!590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !591, size: 64)
!591 = !DICompositeType(tag: DW_TAG_structure_type, name: "SoftBody", file: !391, line: 53, flags: DIFlagFwdDecl)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "dup_group", scope: !390, file: !391, line: 265, baseType: !593, size: 64, offset: 10048)
!593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !594, size: 64)
!594 = !DICompositeType(tag: DW_TAG_structure_type, name: "Group", file: !595, line: 43, flags: DIFlagFwdDecl)
!595 = !DIFile(filename: "blender/source/blender/makesdna/DNA_freestyle_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!596 = !DIDerivedType(tag: DW_TAG_member, name: "body_type", scope: !390, file: !391, line: 267, baseType: !144, size: 8, offset: 10112)
!597 = !DIDerivedType(tag: DW_TAG_member, name: "shapeflag", scope: !390, file: !391, line: 268, baseType: !144, size: 8, offset: 10120)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "shapenr", scope: !390, file: !391, line: 269, baseType: !157, size: 16, offset: 10128)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "smoothresh", scope: !390, file: !391, line: 270, baseType: !193, size: 32, offset: 10144)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "fluidsimSettings", scope: !390, file: !391, line: 272, baseType: !601, size: 64, offset: 10176)
!601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !602, size: 64)
!602 = !DICompositeType(tag: DW_TAG_structure_type, name: "FluidsimSettings", file: !391, line: 54, flags: DIFlagFwdDecl)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "curve_cache", scope: !390, file: !391, line: 275, baseType: !604, size: 64, offset: 10240)
!604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !605, size: 64)
!605 = !DICompositeType(tag: DW_TAG_structure_type, name: "CurveCache", file: !391, line: 275, flags: DIFlagFwdDecl)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "derivedDeform", scope: !390, file: !391, line: 277, baseType: !607, size: 64, offset: 10304)
!607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !608, size: 64)
!608 = !DICompositeType(tag: DW_TAG_structure_type, name: "DerivedMesh", file: !391, line: 56, flags: DIFlagFwdDecl)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "derivedFinal", scope: !390, file: !391, line: 277, baseType: !607, size: 64, offset: 10368)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "lastDataMask", scope: !390, file: !391, line: 278, baseType: !611, size: 64, offset: 10432)
!611 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !612, line: 27, baseType: !613)
!612 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!613 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !614, line: 45, baseType: !615)
!614 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!615 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "customdata_mask", scope: !390, file: !391, line: 279, baseType: !611, size: 64, offset: 10496)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !390, file: !391, line: 280, baseType: !7, size: 32, offset: 10560)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "init_state", scope: !390, file: !391, line: 281, baseType: !7, size: 32, offset: 10592)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "gpulamp", scope: !390, file: !391, line: 283, baseType: !183, size: 128, offset: 10624)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "pc_ids", scope: !390, file: !391, line: 284, baseType: !183, size: 128, offset: 10752)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "duplilist", scope: !390, file: !391, line: 285, baseType: !202, size: 64, offset: 10880)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "rigidbody_object", scope: !390, file: !391, line: 287, baseType: !623, size: 64, offset: 10944)
!623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !624, size: 64)
!624 = !DICompositeType(tag: DW_TAG_structure_type, name: "RigidBodyOb", file: !391, line: 59, flags: DIFlagFwdDecl)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "rigidbody_constraint", scope: !390, file: !391, line: 288, baseType: !626, size: 64, offset: 11008)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !627, size: 64)
!627 = !DICompositeType(tag: DW_TAG_structure_type, name: "RigidBodyCon", file: !391, line: 288, flags: DIFlagFwdDecl)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "ima_ofs", scope: !390, file: !391, line: 290, baseType: !629, size: 64, offset: 11072)
!629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 64, elements: !630)
!630 = !{!631}
!631 = !DISubrange(count: 2)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "iuser", scope: !390, file: !391, line: 291, baseType: !633, size: 64, offset: 11136)
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !634, size: 64)
!634 = !DIDerivedType(tag: DW_TAG_typedef, name: "ImageUser", file: !99, line: 65, baseType: !635)
!635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImageUser", file: !99, line: 50, size: 320, elements: !636)
!636 = !{!637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650}
!637 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !635, file: !99, line: 51, baseType: !313, size: 64)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !635, file: !99, line: 53, baseType: !45, size: 32, offset: 64)
!639 = !DIDerivedType(tag: DW_TAG_member, name: "frames", scope: !635, file: !99, line: 54, baseType: !45, size: 32, offset: 96)
!640 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !635, file: !99, line: 55, baseType: !45, size: 32, offset: 128)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !635, file: !99, line: 55, baseType: !45, size: 32, offset: 160)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "fie_ima", scope: !635, file: !99, line: 56, baseType: !144, size: 8, offset: 192)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "cycl", scope: !635, file: !99, line: 56, baseType: !144, size: 8, offset: 200)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !635, file: !99, line: 57, baseType: !144, size: 8, offset: 208)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !635, file: !99, line: 57, baseType: !144, size: 8, offset: 216)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "multi_index", scope: !635, file: !99, line: 59, baseType: !157, size: 16, offset: 224)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "layer", scope: !635, file: !99, line: 59, baseType: !157, size: 16, offset: 240)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !635, file: !99, line: 59, baseType: !157, size: 16, offset: 256)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !635, file: !99, line: 61, baseType: !157, size: 16, offset: 272)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !635, file: !99, line: 63, baseType: !45, size: 32, offset: 288)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "lodlevels", scope: !390, file: !391, line: 293, baseType: !183, size: 128, offset: 11200)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "currentlod", scope: !390, file: !391, line: 294, baseType: !653, size: 64, offset: 11328)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!654 = !DIDerivedType(tag: DW_TAG_typedef, name: "LodLevel", file: !391, line: 113, baseType: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "LodLevel", file: !391, line: 108, size: 256, elements: !656)
!656 = !{!657, !659, !660, !661, !662}
!657 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !655, file: !391, line: 109, baseType: !658, size: 64)
!658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !655, file: !391, line: 109, baseType: !658, size: 64, offset: 64)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !655, file: !391, line: 110, baseType: !389, size: 64, offset: 128)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !655, file: !391, line: 111, baseType: !45, size: 32, offset: 192)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !655, file: !391, line: 112, baseType: !193, size: 32, offset: 224)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "world", scope: !314, file: !315, line: 1221, baseType: !664, size: 64, offset: 1088)
!664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!665 = !DICompositeType(tag: DW_TAG_structure_type, name: "World", file: !315, line: 52, flags: DIFlagFwdDecl)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !314, file: !315, line: 1223, baseType: !313, size: 64, offset: 1152)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !314, file: !315, line: 1225, baseType: !183, size: 128, offset: 1216)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "basact", scope: !314, file: !315, line: 1226, baseType: !669, size: 64, offset: 1344)
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !670, size: 64)
!670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Base", file: !315, line: 69, size: 320, elements: !671)
!671 = !{!672, !673, !674, !675, !676, !677, !678, !679}
!672 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !670, file: !315, line: 70, baseType: !669, size: 64)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !670, file: !315, line: 70, baseType: !669, size: 64, offset: 64)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !670, file: !315, line: 71, baseType: !7, size: 32, offset: 128)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "selcol", scope: !670, file: !315, line: 71, baseType: !7, size: 32, offset: 160)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !670, file: !315, line: 72, baseType: !45, size: 32, offset: 192)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "sx", scope: !670, file: !315, line: 73, baseType: !157, size: 16, offset: 224)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "sy", scope: !670, file: !315, line: 73, baseType: !157, size: 16, offset: 240)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !670, file: !315, line: 74, baseType: !389, size: 64, offset: 256)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "obedit", scope: !314, file: !315, line: 1227, baseType: !389, size: 64, offset: 1408)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "cursor", scope: !314, file: !315, line: 1229, baseType: !296, size: 96, offset: 1472)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "twcent", scope: !314, file: !315, line: 1230, baseType: !296, size: 96, offset: 1568)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "twmin", scope: !314, file: !315, line: 1231, baseType: !296, size: 96, offset: 1664)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "twmax", scope: !314, file: !315, line: 1231, baseType: !296, size: 96, offset: 1760)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !314, file: !315, line: 1233, baseType: !7, size: 32, offset: 1856)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "layact", scope: !314, file: !315, line: 1234, baseType: !45, size: 32, offset: 1888)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "lay_updated", scope: !314, file: !315, line: 1235, baseType: !7, size: 32, offset: 1920)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !314, file: !315, line: 1237, baseType: !157, size: 16, offset: 1952)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "use_nodes", scope: !314, file: !315, line: 1239, baseType: !144, size: 8, offset: 1968)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !314, file: !315, line: 1240, baseType: !691, size: 8, offset: 1976)
!691 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 8, elements: !692)
!692 = !{!693}
!693 = !DISubrange(count: 1)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "nodetree", scope: !314, file: !315, line: 1242, baseType: !695, size: 64, offset: 1984)
!695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!696 = !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeTree", file: !315, line: 57, flags: DIFlagFwdDecl)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "ed", scope: !314, file: !315, line: 1244, baseType: !698, size: 64, offset: 2048)
!698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Editing", file: !16, line: 200, size: 17024, elements: !700)
!700 = !{!701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711}
!701 = !DIDerivedType(tag: DW_TAG_member, name: "seqbasep", scope: !699, file: !16, line: 201, baseType: !202, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "seqbase", scope: !699, file: !16, line: 202, baseType: !183, size: 128, offset: 64)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "metastack", scope: !699, file: !16, line: 203, baseType: !183, size: 128, offset: 192)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "act_seq", scope: !699, file: !16, line: 206, baseType: !204, size: 64, offset: 320)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "act_imagedir", scope: !699, file: !16, line: 207, baseType: !143, size: 8192, offset: 384)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "act_sounddir", scope: !699, file: !16, line: 208, baseType: !143, size: 8192, offset: 8576)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "over_ofs", scope: !699, file: !16, line: 210, baseType: !45, size: 32, offset: 16768)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "over_cfra", scope: !699, file: !16, line: 210, baseType: !45, size: 32, offset: 16800)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "over_flag", scope: !699, file: !16, line: 211, baseType: !45, size: 32, offset: 16832)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !699, file: !16, line: 211, baseType: !45, size: 32, offset: 16864)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "over_border", scope: !699, file: !16, line: 212, baseType: !712, size: 128, offset: 16896)
!712 = !DIDerivedType(tag: DW_TAG_typedef, name: "rctf", file: !713, line: 95, baseType: !714)
!713 = !DIFile(filename: "blender/source/blender/makesdna/DNA_vec_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rctf", file: !713, line: 92, size: 128, elements: !715)
!715 = !{!716, !717, !718, !719}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "xmin", scope: !714, file: !713, line: 93, baseType: !193, size: 32)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "xmax", scope: !714, file: !713, line: 93, baseType: !193, size: 32, offset: 32)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "ymin", scope: !714, file: !713, line: 94, baseType: !193, size: 32, offset: 64)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "ymax", scope: !714, file: !713, line: 94, baseType: !193, size: 32, offset: 96)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "toolsettings", scope: !314, file: !315, line: 1246, baseType: !721, size: 64, offset: 2112)
!721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !722, size: 64)
!722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ToolSettings", file: !315, line: 1067, size: 5184, elements: !723)
!723 = !{!724, !755, !756, !771, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !793, !940, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !989, !990, !991, !992, !993, !994, !995, !996, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1051}
!724 = !DIDerivedType(tag: DW_TAG_member, name: "vpaint", scope: !722, file: !315, line: 1068, baseType: !725, size: 64)
!725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !726, size: 64)
!726 = !DIDerivedType(tag: DW_TAG_typedef, name: "VPaint", file: !315, line: 934, baseType: !727)
!727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VPaint", file: !315, line: 925, size: 576, elements: !728)
!728 = !{!729, !746, !747, !748, !749, !751, !754}
!729 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !727, file: !315, line: 926, baseType: !730, size: 320)
!730 = !DIDerivedType(tag: DW_TAG_typedef, name: "Paint", file: !315, line: 830, baseType: !731)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Paint", file: !315, line: 813, size: 320, elements: !732)
!732 = !{!733, !736, !739, !740, !743, !744, !745}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !731, file: !315, line: 814, baseType: !734, size: 64)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = !DICompositeType(tag: DW_TAG_structure_type, name: "Brush", file: !315, line: 51, flags: DIFlagFwdDecl)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "palette", scope: !731, file: !315, line: 815, baseType: !737, size: 64, offset: 64)
!737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !738, size: 64)
!738 = !DICompositeType(tag: DW_TAG_structure_type, name: "Palette", file: !315, line: 815, flags: DIFlagFwdDecl)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "paint_cursor", scope: !731, file: !315, line: 818, baseType: !129, size: 64, offset: 128)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "paint_cursor_col", scope: !731, file: !315, line: 819, baseType: !741, size: 32, offset: 192)
!741 = !DICompositeType(tag: DW_TAG_array_type, baseType: !742, size: 32, elements: !511)
!742 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !731, file: !315, line: 822, baseType: !45, size: 32, offset: 224)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "num_input_samples", scope: !731, file: !315, line: 826, baseType: !45, size: 32, offset: 256)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "symmetry_flags", scope: !731, file: !315, line: 829, baseType: !45, size: 32, offset: 288)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !727, file: !315, line: 928, baseType: !157, size: 16, offset: 320)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !727, file: !315, line: 928, baseType: !157, size: 16, offset: 336)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "tot", scope: !727, file: !315, line: 929, baseType: !45, size: 32, offset: 352)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "vpaint_prev", scope: !727, file: !315, line: 930, baseType: !750, size: 64, offset: 384)
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "wpaint_prev", scope: !727, file: !315, line: 931, baseType: !752, size: 64, offset: 448)
!752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !753, size: 64)
!753 = !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformVert", file: !315, line: 931, flags: DIFlagFwdDecl)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !727, file: !315, line: 933, baseType: !129, size: 64, offset: 512)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "wpaint", scope: !722, file: !315, line: 1069, baseType: !725, size: 64, offset: 64)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt", scope: !722, file: !315, line: 1070, baseType: !757, size: 64, offset: 128)
!757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !758, size: 64)
!758 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sculpt", file: !315, line: 916, baseType: !759)
!759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Sculpt", file: !315, line: 891, size: 704, elements: !760)
!760 = !{!761, !762, !763, !765, !766, !767, !768, !769, !770}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !759, file: !315, line: 892, baseType: !730, size: 320)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !759, file: !315, line: 896, baseType: !45, size: 32, offset: 320)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "radial_symm", scope: !759, file: !315, line: 900, baseType: !764, size: 96, offset: 352)
!764 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 96, elements: !297)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "detail_size", scope: !759, file: !315, line: 903, baseType: !193, size: 32, offset: 448)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "symmetrize_direction", scope: !759, file: !315, line: 906, baseType: !45, size: 32, offset: 480)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "gravity_factor", scope: !759, file: !315, line: 909, baseType: !193, size: 32, offset: 512)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "constant_detail", scope: !759, file: !315, line: 912, baseType: !193, size: 32, offset: 544)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "gravity_object", scope: !759, file: !315, line: 914, baseType: !389, size: 64, offset: 576)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !759, file: !315, line: 915, baseType: !129, size: 64, offset: 640)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "uvsculpt", scope: !722, file: !315, line: 1071, baseType: !772, size: 64, offset: 192)
!772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !773, size: 64)
!773 = !DIDerivedType(tag: DW_TAG_typedef, name: "UvSculpt", file: !315, line: 920, baseType: !774)
!774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UvSculpt", file: !315, line: 918, size: 320, elements: !775)
!775 = !{!776}
!776 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !774, file: !315, line: 919, baseType: !730, size: 320)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "vgroup_weight", scope: !722, file: !315, line: 1075, baseType: !193, size: 32, offset: 256)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "doublimit", scope: !722, file: !315, line: 1077, baseType: !193, size: 32, offset: 288)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "normalsize", scope: !722, file: !315, line: 1078, baseType: !193, size: 32, offset: 320)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "automerge", scope: !722, file: !315, line: 1079, baseType: !157, size: 16, offset: 352)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !722, file: !315, line: 1082, baseType: !157, size: 16, offset: 368)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "unwrapper", scope: !722, file: !315, line: 1085, baseType: !144, size: 8, offset: 384)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "uvcalc_flag", scope: !722, file: !315, line: 1086, baseType: !144, size: 8, offset: 392)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "uv_flag", scope: !722, file: !315, line: 1087, baseType: !144, size: 8, offset: 400)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "uv_selectmode", scope: !722, file: !315, line: 1088, baseType: !144, size: 8, offset: 408)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "uvcalc_margin", scope: !722, file: !315, line: 1090, baseType: !193, size: 32, offset: 416)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "autoik_chainlen", scope: !722, file: !315, line: 1093, baseType: !157, size: 16, offset: 448)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "gpencil_flags", scope: !722, file: !315, line: 1096, baseType: !144, size: 8, offset: 464)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !722, file: !315, line: 1098, baseType: !790, size: 40, offset: 472)
!790 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 40, elements: !791)
!791 = !{!792}
!792 = !DISubrange(count: 5)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "imapaint", scope: !722, file: !315, line: 1101, baseType: !794, size: 832, offset: 512)
!794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImagePaintSettings", file: !315, line: 836, size: 832, elements: !795)
!795 = !{!796, !797, !798, !799, !800, !801, !803, !804, !805, !936, !937, !938, !939}
!796 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !794, file: !315, line: 837, baseType: !730, size: 320)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !794, file: !315, line: 839, baseType: !157, size: 16, offset: 320)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "missing_data", scope: !794, file: !315, line: 839, baseType: !157, size: 16, offset: 336)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "seam_bleed", scope: !794, file: !315, line: 842, baseType: !157, size: 16, offset: 352)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "normal_angle", scope: !794, file: !315, line: 842, baseType: !157, size: 16, offset: 368)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "screen_grab_size", scope: !794, file: !315, line: 843, baseType: !802, size: 32, offset: 384)
!802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !157, size: 32, elements: !630)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !794, file: !315, line: 845, baseType: !45, size: 32, offset: 416)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !794, file: !315, line: 847, baseType: !129, size: 64, offset: 448)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "stencil", scope: !794, file: !315, line: 848, baseType: !806, size: 64, offset: 512)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Image", file: !99, line: 77, size: 15424, elements: !808)
!808 = !{!809, !810, !811, !814, !817, !818, !880, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !930}
!809 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !807, file: !99, line: 78, baseType: !124, size: 960)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !807, file: !99, line: 80, baseType: !143, size: 8192, offset: 960)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !807, file: !99, line: 82, baseType: !812, size: 64, offset: 9152)
!812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !813, size: 64)
!813 = !DICompositeType(tag: DW_TAG_structure_type, name: "MovieCache", file: !99, line: 43, flags: DIFlagFwdDecl)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "gputexture", scope: !807, file: !99, line: 83, baseType: !815, size: 64, offset: 9216)
!815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !816, size: 64)
!816 = !DICompositeType(tag: DW_TAG_structure_type, name: "GPUTexture", file: !125, line: 46, flags: DIFlagFwdDecl)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !807, file: !99, line: 86, baseType: !268, size: 64, offset: 9280)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "rr", scope: !807, file: !99, line: 87, baseType: !819, size: 64, offset: 9344)
!819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !820, size: 64)
!820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderResult", file: !821, line: 110, size: 1152, elements: !822)
!821 = !DIFile(filename: "blender/source/blender/render/extern/include/RE_pipeline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!822 = !{!823, !824, !825, !826, !827, !828, !829, !831, !833, !834, !842, !843, !844, !845, !847, !876, !877, !878, !879}
!823 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !820, file: !821, line: 111, baseType: !819, size: 64)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !820, file: !821, line: 111, baseType: !819, size: 64, offset: 64)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "rectx", scope: !820, file: !821, line: 114, baseType: !45, size: 32, offset: 128)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "recty", scope: !820, file: !821, line: 114, baseType: !45, size: 32, offset: 160)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "crop", scope: !820, file: !821, line: 115, baseType: !157, size: 16, offset: 192)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "sample_nr", scope: !820, file: !821, line: 115, baseType: !157, size: 16, offset: 208)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "rect32", scope: !820, file: !821, line: 118, baseType: !830, size: 64, offset: 256)
!830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "rectf", scope: !820, file: !821, line: 120, baseType: !832, size: 64, offset: 320)
!832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !193, size: 64)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "rectz", scope: !820, file: !821, line: 122, baseType: !832, size: 64, offset: 384)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "tilerect", scope: !820, file: !821, line: 125, baseType: !835, size: 128, offset: 448)
!835 = !DIDerivedType(tag: DW_TAG_typedef, name: "rcti", file: !713, line: 89, baseType: !836)
!836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcti", file: !713, line: 86, size: 128, elements: !837)
!837 = !{!838, !839, !840, !841}
!838 = !DIDerivedType(tag: DW_TAG_member, name: "xmin", scope: !836, file: !713, line: 87, baseType: !45, size: 32)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "xmax", scope: !836, file: !713, line: 87, baseType: !45, size: 32, offset: 32)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "ymin", scope: !836, file: !713, line: 88, baseType: !45, size: 32, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "ymax", scope: !836, file: !713, line: 88, baseType: !45, size: 32, offset: 96)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "xof", scope: !820, file: !821, line: 127, baseType: !45, size: 32, offset: 576)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "yof", scope: !820, file: !821, line: 127, baseType: !45, size: 32, offset: 608)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !820, file: !821, line: 130, baseType: !183, size: 128, offset: 640)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "renrect", scope: !820, file: !821, line: 133, baseType: !846, size: 128, offset: 768)
!846 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !835)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "renlay", scope: !820, file: !821, line: 134, baseType: !848, size: 64, offset: 896)
!848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !849, size: 64)
!849 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !850)
!850 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderLayer", file: !821, line: 108, baseType: !851)
!851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderLayer", file: !821, line: 85, size: 1600, elements: !852)
!852 = !{!853, !855, !856, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !851, file: !821, line: 86, baseType: !854, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !851, size: 64)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !851, file: !821, line: 86, baseType: !854, size: 64, offset: 64)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !851, file: !821, line: 89, baseType: !857, size: 592, offset: 128)
!857 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 592, elements: !858)
!858 = !{!859}
!859 = !DISubrange(count: 74)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !851, file: !821, line: 90, baseType: !7, size: 32, offset: 736)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "lay_zmask", scope: !851, file: !821, line: 90, baseType: !7, size: 32, offset: 768)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "lay_exclude", scope: !851, file: !821, line: 90, baseType: !7, size: 32, offset: 800)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "layflag", scope: !851, file: !821, line: 91, baseType: !45, size: 32, offset: 832)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "passflag", scope: !851, file: !821, line: 91, baseType: !45, size: 32, offset: 864)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "pass_xor", scope: !851, file: !821, line: 91, baseType: !45, size: 32, offset: 896)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "mat_override", scope: !851, file: !821, line: 93, baseType: !495, size: 64, offset: 960)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "light_override", scope: !851, file: !821, line: 94, baseType: !593, size: 64, offset: 1024)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "rectf", scope: !851, file: !821, line: 96, baseType: !832, size: 64, offset: 1088)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "acolrect", scope: !851, file: !821, line: 97, baseType: !832, size: 64, offset: 1152)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "scolrect", scope: !851, file: !821, line: 98, baseType: !832, size: 64, offset: 1216)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "display_buffer", scope: !851, file: !821, line: 99, baseType: !830, size: 64, offset: 1280)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "rectx", scope: !851, file: !821, line: 101, baseType: !45, size: 32, offset: 1344)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "recty", scope: !851, file: !821, line: 101, baseType: !45, size: 32, offset: 1376)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "exrhandle", scope: !851, file: !821, line: 104, baseType: !129, size: 64, offset: 1408)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "passes", scope: !851, file: !821, line: 106, baseType: !183, size: 128, offset: 1472)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "do_exr_tile", scope: !820, file: !821, line: 137, baseType: !45, size: 32, offset: 960)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !820, file: !821, line: 140, baseType: !45, size: 32, offset: 992)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "have_combined", scope: !820, file: !821, line: 143, baseType: !45, size: 32, offset: 1024)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !820, file: !821, line: 146, baseType: !498, size: 64, offset: 1088)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "renders", scope: !807, file: !99, line: 89, baseType: !881, size: 512, offset: 9408)
!881 = !DICompositeType(tag: DW_TAG_array_type, baseType: !819, size: 512, elements: !882)
!882 = !{!417}
!883 = !DIDerivedType(tag: DW_TAG_member, name: "render_slot", scope: !807, file: !99, line: 90, baseType: !157, size: 16, offset: 9920)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "last_render_slot", scope: !807, file: !99, line: 90, baseType: !157, size: 16, offset: 9936)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !807, file: !99, line: 92, baseType: !157, size: 16, offset: 9952)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !807, file: !99, line: 92, baseType: !157, size: 16, offset: 9968)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !807, file: !99, line: 93, baseType: !157, size: 16, offset: 9984)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !807, file: !99, line: 93, baseType: !157, size: 16, offset: 10000)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "lastframe", scope: !807, file: !99, line: 94, baseType: !45, size: 32, offset: 10016)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "tpageflag", scope: !807, file: !99, line: 97, baseType: !157, size: 16, offset: 10048)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "totbind", scope: !807, file: !99, line: 97, baseType: !157, size: 16, offset: 10064)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "xrep", scope: !807, file: !99, line: 98, baseType: !157, size: 16, offset: 10080)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "yrep", scope: !807, file: !99, line: 98, baseType: !157, size: 16, offset: 10096)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "twsta", scope: !807, file: !99, line: 99, baseType: !157, size: 16, offset: 10112)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "twend", scope: !807, file: !99, line: 99, baseType: !157, size: 16, offset: 10128)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "bindcode", scope: !807, file: !99, line: 100, baseType: !7, size: 32, offset: 10144)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "repbind", scope: !807, file: !99, line: 101, baseType: !750, size: 64, offset: 10176)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !807, file: !99, line: 103, baseType: !150, size: 64, offset: 10240)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "preview", scope: !807, file: !99, line: 104, baseType: !900, size: 64, offset: 10304)
!900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !901, size: 64)
!901 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PreviewImage", file: !125, line: 159, size: 448, elements: !902)
!902 = !{!903, !905, !906, !907, !908, !910}
!903 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !901, file: !125, line: 161, baseType: !904, size: 64)
!904 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !630)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !901, file: !125, line: 162, baseType: !904, size: 64, offset: 64)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !901, file: !125, line: 163, baseType: !802, size: 32, offset: 128)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "changed_timestamp", scope: !901, file: !125, line: 164, baseType: !802, size: 32, offset: 160)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "rect", scope: !901, file: !125, line: 165, baseType: !909, size: 128, offset: 192)
!909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !750, size: 128, elements: !630)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "gputexture", scope: !901, file: !125, line: 166, baseType: !911, size: 128, offset: 320)
!911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !815, size: 128, elements: !630)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "lastupdate", scope: !807, file: !99, line: 107, baseType: !193, size: 32, offset: 10368)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "lastused", scope: !807, file: !99, line: 108, baseType: !45, size: 32, offset: 10400)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "animspeed", scope: !807, file: !99, line: 109, baseType: !157, size: 16, offset: 10432)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !807, file: !99, line: 110, baseType: !157, size: 16, offset: 10448)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "gen_x", scope: !807, file: !99, line: 113, baseType: !45, size: 32, offset: 10464)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "gen_y", scope: !807, file: !99, line: 113, baseType: !45, size: 32, offset: 10496)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "gen_type", scope: !807, file: !99, line: 114, baseType: !144, size: 8, offset: 10528)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "gen_flag", scope: !807, file: !99, line: 114, baseType: !144, size: 8, offset: 10536)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "gen_depth", scope: !807, file: !99, line: 115, baseType: !157, size: 16, offset: 10544)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "gen_color", scope: !807, file: !99, line: 116, baseType: !510, size: 128, offset: 10560)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "aspx", scope: !807, file: !99, line: 119, baseType: !193, size: 32, offset: 10688)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "aspy", scope: !807, file: !99, line: 119, baseType: !193, size: 32, offset: 10720)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !807, file: !99, line: 122, baseType: !304, size: 512, offset: 10752)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "alpha_mode", scope: !807, file: !99, line: 123, baseType: !144, size: 8, offset: 11264)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !807, file: !99, line: 125, baseType: !927, size: 56, offset: 11272)
!927 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 56, elements: !928)
!928 = !{!929}
!929 = !DISubrange(count: 7)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "render_slots", scope: !807, file: !99, line: 126, baseType: !931, size: 4096, offset: 11328)
!931 = !DICompositeType(tag: DW_TAG_array_type, baseType: !932, size: 4096, elements: !882)
!932 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderSlot", file: !99, line: 69, baseType: !933)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderSlot", file: !99, line: 67, size: 512, elements: !934)
!934 = !{!935}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !933, file: !99, line: 68, baseType: !173, size: 512)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !794, file: !315, line: 849, baseType: !806, size: 64, offset: 576)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "canvas", scope: !794, file: !315, line: 850, baseType: !806, size: 64, offset: 640)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "stencil_col", scope: !794, file: !315, line: 851, baseType: !296, size: 96, offset: 704)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !794, file: !315, line: 852, baseType: !193, size: 32, offset: 800)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "particle", scope: !722, file: !315, line: 1104, baseType: !941, size: 1344, offset: 1344)
!941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ParticleEditSettings", file: !315, line: 867, size: 1344, elements: !942)
!942 = !{!943, !944, !945, !946, !947, !958, !959, !960, !961, !962, !963, !964, !965, !966}
!943 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !941, file: !315, line: 868, baseType: !157, size: 16)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "totrekey", scope: !941, file: !315, line: 869, baseType: !157, size: 16, offset: 16)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "totaddkey", scope: !941, file: !315, line: 870, baseType: !157, size: 16, offset: 32)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "brushtype", scope: !941, file: !315, line: 871, baseType: !157, size: 16, offset: 48)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !941, file: !315, line: 873, baseType: !948, size: 896, offset: 64)
!948 = !DICompositeType(tag: DW_TAG_array_type, baseType: !949, size: 896, elements: !928)
!949 = !DIDerivedType(tag: DW_TAG_typedef, name: "ParticleBrushData", file: !315, line: 864, baseType: !950)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ParticleBrushData", file: !315, line: 859, size: 128, elements: !951)
!951 = !{!952, !953, !954, !955, !956, !957}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !950, file: !315, line: 860, baseType: !157, size: 16)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !950, file: !315, line: 861, baseType: !157, size: 16, offset: 16)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "invert", scope: !950, file: !315, line: 861, baseType: !157, size: 16, offset: 32)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !950, file: !315, line: 861, baseType: !157, size: 16, offset: 48)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !950, file: !315, line: 862, baseType: !45, size: 32, offset: 64)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "strength", scope: !950, file: !315, line: 863, baseType: !193, size: 32, offset: 96)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !941, file: !315, line: 874, baseType: !129, size: 64, offset: 960)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "emitterdist", scope: !941, file: !315, line: 876, baseType: !193, size: 32, offset: 1024)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !941, file: !315, line: 876, baseType: !193, size: 32, offset: 1056)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !941, file: !315, line: 878, baseType: !45, size: 32, offset: 1088)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "edittype", scope: !941, file: !315, line: 879, baseType: !45, size: 32, offset: 1120)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "draw_step", scope: !941, file: !315, line: 881, baseType: !45, size: 32, offset: 1152)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "fade_frames", scope: !941, file: !315, line: 881, baseType: !45, size: 32, offset: 1184)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !941, file: !315, line: 883, baseType: !313, size: 64, offset: 1216)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !941, file: !315, line: 884, baseType: !389, size: 64, offset: 1280)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_size", scope: !722, file: !315, line: 1107, baseType: !193, size: 32, offset: 2688)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "select_thresh", scope: !722, file: !315, line: 1110, baseType: !193, size: 32, offset: 2720)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "autokey_mode", scope: !722, file: !315, line: 1113, baseType: !157, size: 16, offset: 2752)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "autokey_flag", scope: !722, file: !315, line: 1113, baseType: !157, size: 16, offset: 2768)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "multires_subdiv_type", scope: !722, file: !315, line: 1116, baseType: !144, size: 8, offset: 2784)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !722, file: !315, line: 1117, baseType: !691, size: 8, offset: 2792)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_resolution", scope: !722, file: !315, line: 1120, baseType: !157, size: 16, offset: 2800)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_threshold_internal", scope: !722, file: !315, line: 1121, baseType: !193, size: 32, offset: 2816)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_threshold_external", scope: !722, file: !315, line: 1122, baseType: !193, size: 32, offset: 2848)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_length_ratio", scope: !722, file: !315, line: 1123, baseType: !193, size: 32, offset: 2880)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_length_limit", scope: !722, file: !315, line: 1124, baseType: !193, size: 32, offset: 2912)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_angle_limit", scope: !722, file: !315, line: 1125, baseType: !193, size: 32, offset: 2944)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_correlation_limit", scope: !722, file: !315, line: 1126, baseType: !193, size: 32, offset: 2976)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_symmetry_limit", scope: !722, file: !315, line: 1127, baseType: !193, size: 32, offset: 3008)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_angle_weight", scope: !722, file: !315, line: 1128, baseType: !193, size: 32, offset: 3040)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_length_weight", scope: !722, file: !315, line: 1129, baseType: !193, size: 32, offset: 3072)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_distance_weight", scope: !722, file: !315, line: 1130, baseType: !193, size: 32, offset: 3104)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_options", scope: !722, file: !315, line: 1131, baseType: !157, size: 16, offset: 3136)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_postpro", scope: !722, file: !315, line: 1132, baseType: !144, size: 8, offset: 3152)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_postpro_passes", scope: !722, file: !315, line: 1133, baseType: !144, size: 8, offset: 3160)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_subdivisions", scope: !722, file: !315, line: 1134, baseType: !988, size: 24, offset: 3168)
!988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 24, elements: !297)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_multi_level", scope: !722, file: !315, line: 1135, baseType: !144, size: 8, offset: 3192)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_template", scope: !722, file: !315, line: 1138, baseType: !389, size: 64, offset: 3200)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "bone_sketching", scope: !722, file: !315, line: 1139, baseType: !144, size: 8, offset: 3264)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "bone_sketching_convert", scope: !722, file: !315, line: 1140, baseType: !144, size: 8, offset: 3272)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_subdivision_number", scope: !722, file: !315, line: 1141, baseType: !144, size: 8, offset: 3280)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_options", scope: !722, file: !315, line: 1142, baseType: !144, size: 8, offset: 3288)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_roll", scope: !722, file: !315, line: 1143, baseType: !144, size: 8, offset: 3296)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_side_string", scope: !722, file: !315, line: 1144, baseType: !997, size: 64, offset: 3304)
!997 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 64, elements: !882)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_num_string", scope: !722, file: !315, line: 1145, baseType: !997, size: 64, offset: 3368)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "edge_mode", scope: !722, file: !315, line: 1148, baseType: !144, size: 8, offset: 3432)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "edge_mode_live_unwrap", scope: !722, file: !315, line: 1149, baseType: !144, size: 8, offset: 3440)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "snap_mode", scope: !722, file: !315, line: 1152, baseType: !144, size: 8, offset: 3448)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "snap_node_mode", scope: !722, file: !315, line: 1152, baseType: !144, size: 8, offset: 3456)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "snap_uv_mode", scope: !722, file: !315, line: 1153, baseType: !144, size: 8, offset: 3464)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "snap_flag", scope: !722, file: !315, line: 1154, baseType: !157, size: 16, offset: 3472)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "snap_target", scope: !722, file: !315, line: 1154, baseType: !157, size: 16, offset: 3488)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "proportional", scope: !722, file: !315, line: 1155, baseType: !157, size: 16, offset: 3504)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "prop_mode", scope: !722, file: !315, line: 1155, baseType: !157, size: 16, offset: 3520)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_objects", scope: !722, file: !315, line: 1156, baseType: !144, size: 8, offset: 3536)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_mask", scope: !722, file: !315, line: 1157, baseType: !144, size: 8, offset: 3544)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "auto_normalize", scope: !722, file: !315, line: 1159, baseType: !144, size: 8, offset: 3552)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "multipaint", scope: !722, file: !315, line: 1160, baseType: !144, size: 8, offset: 3560)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "weightuser", scope: !722, file: !315, line: 1161, baseType: !144, size: 8, offset: 3568)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "vgroupsubset", scope: !722, file: !315, line: 1162, baseType: !144, size: 8, offset: 3576)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "use_uv_sculpt", scope: !722, file: !315, line: 1165, baseType: !45, size: 32, offset: 3584)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "uv_sculpt_settings", scope: !722, file: !315, line: 1166, baseType: !45, size: 32, offset: 3616)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "uv_sculpt_tool", scope: !722, file: !315, line: 1167, baseType: !45, size: 32, offset: 3648)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "uv_relax_method", scope: !722, file: !315, line: 1168, baseType: !45, size: 32, offset: 3680)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_settings", scope: !722, file: !315, line: 1171, baseType: !157, size: 16, offset: 3712)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "pad5", scope: !722, file: !315, line: 1171, baseType: !157, size: 16, offset: 3728)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_size", scope: !722, file: !315, line: 1172, baseType: !45, size: 32, offset: 3744)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_unprojected_radius", scope: !722, file: !315, line: 1173, baseType: !193, size: 32, offset: 3776)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_alpha", scope: !722, file: !315, line: 1174, baseType: !193, size: 32, offset: 3808)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "unified_paint_settings", scope: !722, file: !315, line: 1177, baseType: !1024, size: 1024, offset: 3840)
!1024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UnifiedPaintSettings", file: !315, line: 963, size: 1024, elements: !1025)
!1025 = !{!1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1049, !1050}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1024, file: !315, line: 965, baseType: !45, size: 32)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "unprojected_radius", scope: !1024, file: !315, line: 968, baseType: !193, size: 32, offset: 32)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "alpha", scope: !1024, file: !315, line: 971, baseType: !193, size: 32, offset: 64)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1024, file: !315, line: 974, baseType: !193, size: 32, offset: 96)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "rgb", scope: !1024, file: !315, line: 977, baseType: !296, size: 96, offset: 128)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "secondary_rgb", scope: !1024, file: !315, line: 979, baseType: !296, size: 96, offset: 224)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1024, file: !315, line: 982, baseType: !45, size: 32, offset: 320)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "last_rake", scope: !1024, file: !315, line: 987, baseType: !629, size: 64, offset: 352)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "brush_rotation", scope: !1024, file: !315, line: 989, baseType: !193, size: 32, offset: 416)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "draw_anchored", scope: !1024, file: !315, line: 994, baseType: !45, size: 32, offset: 448)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "anchored_size", scope: !1024, file: !315, line: 995, baseType: !45, size: 32, offset: 480)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "draw_inverted", scope: !1024, file: !315, line: 997, baseType: !144, size: 8, offset: 512)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1024, file: !315, line: 998, baseType: !927, size: 56, offset: 520)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "overlap_factor", scope: !1024, file: !315, line: 1000, baseType: !193, size: 32, offset: 576)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "anchored_initial_mouse", scope: !1024, file: !315, line: 1003, baseType: !629, size: 64, offset: 608)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "stroke_active", scope: !1024, file: !315, line: 1006, baseType: !45, size: 32, offset: 672)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "size_pressure_value", scope: !1024, file: !315, line: 1009, baseType: !193, size: 32, offset: 704)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "tex_mouse", scope: !1024, file: !315, line: 1012, baseType: !629, size: 64, offset: 736)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "mask_tex_mouse", scope: !1024, file: !315, line: 1015, baseType: !629, size: 64, offset: 800)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "do_linear_conversion", scope: !1024, file: !315, line: 1018, baseType: !45, size: 32, offset: 864)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1024, file: !315, line: 1019, baseType: !1047, size: 64, offset: 896)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = !DICompositeType(tag: DW_TAG_structure_type, name: "ColorSpace", file: !315, line: 63, flags: DIFlagFwdDecl)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "pixel_radius", scope: !1024, file: !315, line: 1023, baseType: !193, size: 32, offset: 960)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !1024, file: !315, line: 1024, baseType: !45, size: 32, offset: 992)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "statvis", scope: !722, file: !315, line: 1179, baseType: !1052, size: 320, offset: 4864)
!1052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MeshStatVis", file: !315, line: 1043, size: 320, elements: !1053)
!1053 = !{!1054, !1055, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067}
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1052, file: !315, line: 1044, baseType: !144, size: 8)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "_pad1", scope: !1052, file: !315, line: 1045, baseType: !1056, size: 16, offset: 8)
!1056 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 16, elements: !630)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_axis", scope: !1052, file: !315, line: 1048, baseType: !144, size: 8, offset: 24)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_min", scope: !1052, file: !315, line: 1049, baseType: !193, size: 32, offset: 32)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_max", scope: !1052, file: !315, line: 1049, baseType: !193, size: 32, offset: 64)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_min", scope: !1052, file: !315, line: 1052, baseType: !193, size: 32, offset: 96)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_max", scope: !1052, file: !315, line: 1052, baseType: !193, size: 32, offset: 128)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_samples", scope: !1052, file: !315, line: 1053, baseType: !144, size: 8, offset: 160)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "_pad2", scope: !1052, file: !315, line: 1054, baseType: !988, size: 24, offset: 168)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "distort_min", scope: !1052, file: !315, line: 1057, baseType: !193, size: 32, offset: 192)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "distort_max", scope: !1052, file: !315, line: 1057, baseType: !193, size: 32, offset: 224)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "sharp_min", scope: !1052, file: !315, line: 1060, baseType: !193, size: 32, offset: 256)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "sharp_max", scope: !1052, file: !315, line: 1060, baseType: !193, size: 32, offset: 288)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "stats", scope: !314, file: !315, line: 1247, baseType: !1069, size: 64, offset: 2176)
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DICompositeType(tag: DW_TAG_structure_type, name: "SceneStats", file: !315, line: 60, flags: DIFlagFwdDecl)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !314, file: !315, line: 1251, baseType: !1072, size: 31872, offset: 2240)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderData", file: !315, line: 403, size: 31872, elements: !1073)
!1073 = !{!1074, !1149, !1169, !1178, !1198, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1328, !1329, !1330, !1334, !1350, !1351}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "im_format", scope: !1072, file: !315, line: 404, baseType: !1075, size: 1984)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImageFormatData", file: !315, line: 259, size: 1984, elements: !1076)
!1076 = !{!1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1094, !1144}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "imtype", scope: !1075, file: !315, line: 260, baseType: !144, size: 8)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !1075, file: !315, line: 263, baseType: !144, size: 8, offset: 8)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !1075, file: !315, line: 266, baseType: !144, size: 8, offset: 16)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1075, file: !315, line: 267, baseType: !144, size: 8, offset: 24)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1075, file: !315, line: 269, baseType: !144, size: 8, offset: 32)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "compress", scope: !1075, file: !315, line: 270, baseType: !144, size: 8, offset: 40)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "exr_codec", scope: !1075, file: !315, line: 276, baseType: !144, size: 8, offset: 48)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_flag", scope: !1075, file: !315, line: 279, baseType: !144, size: 8, offset: 56)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_white", scope: !1075, file: !315, line: 280, baseType: !157, size: 16, offset: 64)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_black", scope: !1075, file: !315, line: 280, baseType: !157, size: 16, offset: 80)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_gamma", scope: !1075, file: !315, line: 281, baseType: !193, size: 32, offset: 96)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_flag", scope: !1075, file: !315, line: 284, baseType: !144, size: 8, offset: 128)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_codec", scope: !1075, file: !315, line: 285, baseType: !144, size: 8, offset: 136)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1075, file: !315, line: 287, baseType: !1091, size: 48, offset: 144)
!1091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 48, elements: !1092)
!1092 = !{!1093}
!1093 = !DISubrange(count: 6)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "view_settings", scope: !1075, file: !315, line: 290, baseType: !1095, size: 1280, offset: 192)
!1095 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedViewSettings", file: !305, line: 174, baseType: !1096)
!1096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedViewSettings", file: !305, line: 166, size: 1280, elements: !1097)
!1097 = !{!1098, !1099, !1100, !1101, !1102, !1103, !1104, !1143}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1096, file: !305, line: 167, baseType: !45, size: 32)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1096, file: !305, line: 167, baseType: !45, size: 32, offset: 32)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "look", scope: !1096, file: !305, line: 168, baseType: !173, size: 512, offset: 64)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "view_transform", scope: !1096, file: !305, line: 169, baseType: !173, size: 512, offset: 576)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "exposure", scope: !1096, file: !305, line: 170, baseType: !193, size: 32, offset: 1088)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "gamma", scope: !1096, file: !305, line: 171, baseType: !193, size: 32, offset: 1120)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "curve_mapping", scope: !1096, file: !305, line: 172, baseType: !1105, size: 64, offset: 1152)
!1105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1106, size: 64)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMapping", file: !305, line: 72, size: 3072, elements: !1107)
!1107 = !{!1108, !1109, !1110, !1111, !1112, !1113, !1114, !1139, !1140, !1141, !1142}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1106, file: !305, line: 73, baseType: !45, size: 32)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !1106, file: !305, line: 73, baseType: !45, size: 32, offset: 32)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "preset", scope: !1106, file: !305, line: 74, baseType: !45, size: 32, offset: 64)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "changed_timestamp", scope: !1106, file: !305, line: 75, baseType: !45, size: 32, offset: 96)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "curr", scope: !1106, file: !305, line: 77, baseType: !712, size: 128, offset: 128)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "clipr", scope: !1106, file: !305, line: 77, baseType: !712, size: 128, offset: 256)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "cm", scope: !1106, file: !305, line: 79, baseType: !1115, size: 2304, offset: 384)
!1115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1116, size: 2304, elements: !511)
!1116 = !DIDerivedType(tag: DW_TAG_typedef, name: "CurveMap", file: !305, line: 67, baseType: !1117)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMap", file: !305, line: 55, size: 576, elements: !1118)
!1118 = !{!1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1135, !1136, !1137, !1138}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "totpoint", scope: !1117, file: !305, line: 56, baseType: !157, size: 16)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1117, file: !305, line: 56, baseType: !157, size: 16, offset: 16)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !1117, file: !305, line: 58, baseType: !193, size: 32, offset: 32)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "mintable", scope: !1117, file: !305, line: 59, baseType: !193, size: 32, offset: 64)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "maxtable", scope: !1117, file: !305, line: 59, baseType: !193, size: 32, offset: 96)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "ext_in", scope: !1117, file: !305, line: 60, baseType: !629, size: 64, offset: 128)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "ext_out", scope: !1117, file: !305, line: 60, baseType: !629, size: 64, offset: 192)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "curve", scope: !1117, file: !305, line: 61, baseType: !1127, size: 64, offset: 256)
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_typedef, name: "CurveMapPoint", file: !305, line: 47, baseType: !1129)
!1129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMapPoint", file: !305, line: 44, size: 96, elements: !1130)
!1130 = !{!1131, !1132, !1133, !1134}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1129, file: !305, line: 45, baseType: !193, size: 32)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1129, file: !305, line: 45, baseType: !193, size: 32, offset: 32)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1129, file: !305, line: 46, baseType: !157, size: 16, offset: 64)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "shorty", scope: !1129, file: !305, line: 46, baseType: !157, size: 16, offset: 80)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !1117, file: !305, line: 62, baseType: !1127, size: 64, offset: 320)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "premultable", scope: !1117, file: !305, line: 64, baseType: !1127, size: 64, offset: 384)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "premul_ext_in", scope: !1117, file: !305, line: 65, baseType: !629, size: 64, offset: 448)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "premul_ext_out", scope: !1117, file: !305, line: 66, baseType: !629, size: 64, offset: 512)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "black", scope: !1106, file: !305, line: 80, baseType: !296, size: 96, offset: 2688)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "white", scope: !1106, file: !305, line: 80, baseType: !296, size: 96, offset: 2784)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "bwmul", scope: !1106, file: !305, line: 81, baseType: !296, size: 96, offset: 2880)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "sample", scope: !1106, file: !305, line: 83, baseType: !296, size: 96, offset: 2976)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1096, file: !305, line: 173, baseType: !129, size: 64, offset: 1216)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "display_settings", scope: !1075, file: !315, line: 291, baseType: !1145, size: 512, offset: 1472)
!1145 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedDisplaySettings", file: !305, line: 178, baseType: !1146)
!1146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedDisplaySettings", file: !305, line: 176, size: 512, elements: !1147)
!1147 = !{!1148}
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "display_device", scope: !1146, file: !305, line: 177, baseType: !173, size: 512)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "avicodecdata", scope: !1072, file: !315, line: 406, baseType: !1150, size: 64, offset: 1984)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AviCodecData", file: !315, line: 80, size: 1472, elements: !1152)
!1152 = !{!1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "lpFormat", scope: !1151, file: !315, line: 81, baseType: !129, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "lpParms", scope: !1151, file: !315, line: 82, baseType: !129, size: 64, offset: 64)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "cbFormat", scope: !1151, file: !315, line: 83, baseType: !7, size: 32, offset: 128)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "cbParms", scope: !1151, file: !315, line: 84, baseType: !7, size: 32, offset: 160)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "fccType", scope: !1151, file: !315, line: 86, baseType: !7, size: 32, offset: 192)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "fccHandler", scope: !1151, file: !315, line: 87, baseType: !7, size: 32, offset: 224)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "dwKeyFrameEvery", scope: !1151, file: !315, line: 88, baseType: !7, size: 32, offset: 256)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "dwQuality", scope: !1151, file: !315, line: 89, baseType: !7, size: 32, offset: 288)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "dwBytesPerSecond", scope: !1151, file: !315, line: 90, baseType: !7, size: 32, offset: 320)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "dwFlags", scope: !1151, file: !315, line: 91, baseType: !7, size: 32, offset: 352)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "dwInterleaveEvery", scope: !1151, file: !315, line: 92, baseType: !7, size: 32, offset: 384)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1151, file: !315, line: 93, baseType: !7, size: 32, offset: 416)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "avicodecname", scope: !1151, file: !315, line: 95, baseType: !1166, size: 1024, offset: 448)
!1166 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1024, elements: !1167)
!1167 = !{!1168}
!1168 = !DISubrange(count: 128)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecdata", scope: !1072, file: !315, line: 407, baseType: !1170, size: 64, offset: 2048)
!1170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1171, size: 64)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "QuicktimeCodecData", file: !315, line: 98, size: 1216, elements: !1172)
!1172 = !{!1173, !1174, !1175, !1176, !1177}
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "cdParms", scope: !1171, file: !315, line: 100, baseType: !129, size: 64)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1171, file: !315, line: 101, baseType: !129, size: 64, offset: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "cdSize", scope: !1171, file: !315, line: 103, baseType: !7, size: 32, offset: 128)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1171, file: !315, line: 104, baseType: !7, size: 32, offset: 160)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecname", scope: !1171, file: !315, line: 106, baseType: !1166, size: 1024, offset: 192)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecsettings", scope: !1072, file: !315, line: 408, baseType: !1179, size: 512, offset: 2112)
!1179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "QuicktimeCodecSettings", file: !315, line: 109, size: 512, elements: !1180)
!1180 = !{!1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "codecType", scope: !1179, file: !315, line: 111, baseType: !45, size: 32)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "codecSpatialQuality", scope: !1179, file: !315, line: 112, baseType: !45, size: 32, offset: 32)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !1179, file: !315, line: 115, baseType: !45, size: 32, offset: 64)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "codecFlags", scope: !1179, file: !315, line: 116, baseType: !45, size: 32, offset: 96)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "colorDepth", scope: !1179, file: !315, line: 117, baseType: !45, size: 32, offset: 128)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "codecTemporalQuality", scope: !1179, file: !315, line: 118, baseType: !45, size: 32, offset: 160)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "minSpatialQuality", scope: !1179, file: !315, line: 119, baseType: !45, size: 32, offset: 192)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "minTemporalQuality", scope: !1179, file: !315, line: 120, baseType: !45, size: 32, offset: 224)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "keyFrameRate", scope: !1179, file: !315, line: 121, baseType: !45, size: 32, offset: 256)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "bitRate", scope: !1179, file: !315, line: 122, baseType: !45, size: 32, offset: 288)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "audiocodecType", scope: !1179, file: !315, line: 125, baseType: !45, size: 32, offset: 320)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "audioSampleRate", scope: !1179, file: !315, line: 126, baseType: !45, size: 32, offset: 352)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "audioBitDepth", scope: !1179, file: !315, line: 127, baseType: !157, size: 16, offset: 384)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "audioChannels", scope: !1179, file: !315, line: 128, baseType: !157, size: 16, offset: 400)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "audioCodecFlags", scope: !1179, file: !315, line: 129, baseType: !45, size: 32, offset: 416)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "audioBitRate", scope: !1179, file: !315, line: 130, baseType: !45, size: 32, offset: 448)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1179, file: !315, line: 131, baseType: !45, size: 32, offset: 480)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "ffcodecdata", scope: !1072, file: !315, line: 409, baseType: !1199, size: 576, offset: 2624)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFMpegCodecData", file: !315, line: 134, size: 576, elements: !1200)
!1200 = !{!1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217}
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1199, file: !315, line: 135, baseType: !45, size: 32)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !1199, file: !315, line: 136, baseType: !45, size: 32, offset: 32)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "audio_codec", scope: !1199, file: !315, line: 137, baseType: !45, size: 32, offset: 64)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "video_bitrate", scope: !1199, file: !315, line: 138, baseType: !45, size: 32, offset: 96)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "audio_bitrate", scope: !1199, file: !315, line: 139, baseType: !45, size: 32, offset: 128)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "audio_mixrate", scope: !1199, file: !315, line: 140, baseType: !45, size: 32, offset: 160)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "audio_channels", scope: !1199, file: !315, line: 141, baseType: !45, size: 32, offset: 192)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "audio_pad", scope: !1199, file: !315, line: 142, baseType: !45, size: 32, offset: 224)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "audio_volume", scope: !1199, file: !315, line: 143, baseType: !193, size: 32, offset: 256)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "gop_size", scope: !1199, file: !315, line: 144, baseType: !45, size: 32, offset: 288)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1199, file: !315, line: 145, baseType: !45, size: 32, offset: 320)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_rate", scope: !1199, file: !315, line: 147, baseType: !45, size: 32, offset: 352)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_rate", scope: !1199, file: !315, line: 148, baseType: !45, size: 32, offset: 384)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "rc_buffer_size", scope: !1199, file: !315, line: 149, baseType: !45, size: 32, offset: 416)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "mux_packet_size", scope: !1199, file: !315, line: 150, baseType: !45, size: 32, offset: 448)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "mux_rate", scope: !1199, file: !315, line: 151, baseType: !45, size: 32, offset: 480)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !1199, file: !315, line: 152, baseType: !162, size: 64, offset: 512)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "cfra", scope: !1072, file: !315, line: 411, baseType: !45, size: 32, offset: 3200)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !1072, file: !315, line: 411, baseType: !45, size: 32, offset: 3232)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "efra", scope: !1072, file: !315, line: 411, baseType: !45, size: 32, offset: 3264)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "subframe", scope: !1072, file: !315, line: 412, baseType: !193, size: 32, offset: 3296)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "psfra", scope: !1072, file: !315, line: 413, baseType: !45, size: 32, offset: 3328)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "pefra", scope: !1072, file: !315, line: 413, baseType: !45, size: 32, offset: 3360)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "images", scope: !1072, file: !315, line: 415, baseType: !45, size: 32, offset: 3392)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "framapto", scope: !1072, file: !315, line: 415, baseType: !45, size: 32, offset: 3424)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1072, file: !315, line: 416, baseType: !157, size: 16, offset: 3456)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "threads", scope: !1072, file: !315, line: 416, baseType: !157, size: 16, offset: 3472)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "framelen", scope: !1072, file: !315, line: 418, baseType: !193, size: 32, offset: 3488)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "blurfac", scope: !1072, file: !315, line: 418, baseType: !193, size: 32, offset: 3520)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "edgeR", scope: !1072, file: !315, line: 421, baseType: !193, size: 32, offset: 3552)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "edgeG", scope: !1072, file: !315, line: 421, baseType: !193, size: 32, offset: 3584)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "edgeB", scope: !1072, file: !315, line: 421, baseType: !193, size: 32, offset: 3616)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "fullscreen", scope: !1072, file: !315, line: 425, baseType: !157, size: 16, offset: 3648)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "xplay", scope: !1072, file: !315, line: 425, baseType: !157, size: 16, offset: 3664)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "yplay", scope: !1072, file: !315, line: 425, baseType: !157, size: 16, offset: 3680)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "freqplay", scope: !1072, file: !315, line: 426, baseType: !157, size: 16, offset: 3696)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !1072, file: !315, line: 428, baseType: !157, size: 16, offset: 3712)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "attrib", scope: !1072, file: !315, line: 428, baseType: !157, size: 16, offset: 3728)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "frame_step", scope: !1072, file: !315, line: 431, baseType: !45, size: 32, offset: 3744)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "stereomode", scope: !1072, file: !315, line: 433, baseType: !157, size: 16, offset: 3776)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "dimensionspreset", scope: !1072, file: !315, line: 435, baseType: !157, size: 16, offset: 3792)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "filtertype", scope: !1072, file: !315, line: 437, baseType: !157, size: 16, offset: 3808)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1072, file: !315, line: 439, baseType: !157, size: 16, offset: 3824)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "maximsize", scope: !1072, file: !315, line: 441, baseType: !157, size: 16, offset: 3840)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "pad6", scope: !1072, file: !315, line: 443, baseType: !157, size: 16, offset: 3856)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "xsch", scope: !1072, file: !315, line: 449, baseType: !45, size: 32, offset: 3872)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "ysch", scope: !1072, file: !315, line: 453, baseType: !45, size: 32, offset: 3904)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "xparts", scope: !1072, file: !315, line: 458, baseType: !157, size: 16, offset: 3936)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "yparts", scope: !1072, file: !315, line: 462, baseType: !157, size: 16, offset: 3952)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "tilex", scope: !1072, file: !315, line: 467, baseType: !45, size: 32, offset: 3968)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "tiley", scope: !1072, file: !315, line: 467, baseType: !45, size: 32, offset: 4000)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !1072, file: !315, line: 469, baseType: !157, size: 16, offset: 4032)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "imtype", scope: !1072, file: !315, line: 469, baseType: !157, size: 16, offset: 4048)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "subimtype", scope: !1072, file: !315, line: 469, baseType: !157, size: 16, offset: 4064)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1072, file: !315, line: 469, baseType: !157, size: 16, offset: 4080)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "displaymode", scope: !1072, file: !315, line: 474, baseType: !157, size: 16, offset: 4096)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "use_lock_interface", scope: !1072, file: !315, line: 475, baseType: !144, size: 8, offset: 4112)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "pad7", scope: !1072, file: !315, line: 476, baseType: !144, size: 8, offset: 4120)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "scemode", scope: !1072, file: !315, line: 481, baseType: !45, size: 32, offset: 4128)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1072, file: !315, line: 486, baseType: !45, size: 32, offset: 4160)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "raytrace_options", scope: !1072, file: !315, line: 491, baseType: !45, size: 32, offset: 4192)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "raytrace_structure", scope: !1072, file: !315, line: 496, baseType: !157, size: 16, offset: 4224)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1072, file: !315, line: 498, baseType: !157, size: 16, offset: 4240)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "ocres", scope: !1072, file: !315, line: 501, baseType: !157, size: 16, offset: 4256)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !1072, file: !315, line: 502, baseType: !157, size: 16, offset: 4272)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "alphamode", scope: !1072, file: !315, line: 508, baseType: !157, size: 16, offset: 4288)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "osa", scope: !1072, file: !315, line: 513, baseType: !157, size: 16, offset: 4304)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "frs_sec", scope: !1072, file: !315, line: 515, baseType: !157, size: 16, offset: 4320)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "edgeint", scope: !1072, file: !315, line: 515, baseType: !157, size: 16, offset: 4336)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "safety", scope: !1072, file: !315, line: 519, baseType: !712, size: 128, offset: 4352)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "border", scope: !1072, file: !315, line: 519, baseType: !712, size: 128, offset: 4480)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "disprect", scope: !1072, file: !315, line: 520, baseType: !835, size: 128, offset: 4608)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !1072, file: !315, line: 523, baseType: !183, size: 128, offset: 4736)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "actlay", scope: !1072, file: !315, line: 524, baseType: !157, size: 16, offset: 4864)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "mblur_samples", scope: !1072, file: !315, line: 527, baseType: !157, size: 16, offset: 4880)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "xasp", scope: !1072, file: !315, line: 532, baseType: !193, size: 32, offset: 4896)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "yasp", scope: !1072, file: !315, line: 532, baseType: !193, size: 32, offset: 4928)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "frs_sec_base", scope: !1072, file: !315, line: 534, baseType: !193, size: 32, offset: 4960)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "gauss", scope: !1072, file: !315, line: 538, baseType: !193, size: 32, offset: 4992)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "color_mgt_flag", scope: !1072, file: !315, line: 542, baseType: !45, size: 32, offset: 5024)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "postgamma", scope: !1072, file: !315, line: 545, baseType: !193, size: 32, offset: 5056)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "posthue", scope: !1072, file: !315, line: 545, baseType: !193, size: 32, offset: 5088)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "postsat", scope: !1072, file: !315, line: 545, baseType: !193, size: 32, offset: 5120)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "dither_intensity", scope: !1072, file: !315, line: 548, baseType: !193, size: 32, offset: 5152)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "bake_osa", scope: !1072, file: !315, line: 551, baseType: !157, size: 16, offset: 5184)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "bake_filter", scope: !1072, file: !315, line: 551, baseType: !157, size: 16, offset: 5200)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "bake_mode", scope: !1072, file: !315, line: 551, baseType: !157, size: 16, offset: 5216)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "bake_flag", scope: !1072, file: !315, line: 551, baseType: !157, size: 16, offset: 5232)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "bake_normal_space", scope: !1072, file: !315, line: 552, baseType: !157, size: 16, offset: 5248)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "bake_quad_split", scope: !1072, file: !315, line: 552, baseType: !157, size: 16, offset: 5264)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "bake_maxdist", scope: !1072, file: !315, line: 553, baseType: !193, size: 32, offset: 5280)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "bake_biasdist", scope: !1072, file: !315, line: 553, baseType: !193, size: 32, offset: 5312)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "bake_samples", scope: !1072, file: !315, line: 554, baseType: !157, size: 16, offset: 5344)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "bake_pad", scope: !1072, file: !315, line: 554, baseType: !157, size: 16, offset: 5360)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "bake_user_scale", scope: !1072, file: !315, line: 555, baseType: !193, size: 32, offset: 5376)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "bake_pad1", scope: !1072, file: !315, line: 555, baseType: !193, size: 32, offset: 5408)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "pic", scope: !1072, file: !315, line: 558, baseType: !143, size: 8192, offset: 5440)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "stamp", scope: !1072, file: !315, line: 561, baseType: !45, size: 32, offset: 13632)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "stamp_font_id", scope: !1072, file: !315, line: 562, baseType: !157, size: 16, offset: 13664)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1072, file: !315, line: 562, baseType: !157, size: 16, offset: 13680)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "stamp_udata", scope: !1072, file: !315, line: 565, baseType: !257, size: 6144, offset: 13696)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "fg_stamp", scope: !1072, file: !315, line: 568, baseType: !510, size: 128, offset: 19840)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "bg_stamp", scope: !1072, file: !315, line: 569, baseType: !510, size: 128, offset: 19968)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "seq_prev_type", scope: !1072, file: !315, line: 572, baseType: !144, size: 8, offset: 20096)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "seq_rend_type", scope: !1072, file: !315, line: 573, baseType: !144, size: 8, offset: 20104)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "seq_flag", scope: !1072, file: !315, line: 574, baseType: !144, size: 8, offset: 20112)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "pad5", scope: !1072, file: !315, line: 575, baseType: !790, size: 40, offset: 20120)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_flag", scope: !1072, file: !315, line: 578, baseType: !45, size: 32, offset: 20160)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_subsurf", scope: !1072, file: !315, line: 579, baseType: !157, size: 16, offset: 20192)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_shadowsamples", scope: !1072, file: !315, line: 580, baseType: !157, size: 16, offset: 20208)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_particles", scope: !1072, file: !315, line: 581, baseType: !193, size: 32, offset: 20224)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_aosss", scope: !1072, file: !315, line: 582, baseType: !193, size: 32, offset: 20256)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "cineonwhite", scope: !1072, file: !315, line: 585, baseType: !157, size: 16, offset: 20288)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "cineonblack", scope: !1072, file: !315, line: 585, baseType: !157, size: 16, offset: 20304)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "cineongamma", scope: !1072, file: !315, line: 586, baseType: !193, size: 32, offset: 20320)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_preset", scope: !1072, file: !315, line: 589, baseType: !157, size: 16, offset: 20352)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_depth", scope: !1072, file: !315, line: 589, baseType: !157, size: 16, offset: 20368)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "rpad3", scope: !1072, file: !315, line: 590, baseType: !45, size: 32, offset: 20384)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "domeres", scope: !1072, file: !315, line: 593, baseType: !157, size: 16, offset: 20416)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "domemode", scope: !1072, file: !315, line: 593, baseType: !157, size: 16, offset: 20432)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "domeangle", scope: !1072, file: !315, line: 594, baseType: !157, size: 16, offset: 20448)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "dometilt", scope: !1072, file: !315, line: 594, baseType: !157, size: 16, offset: 20464)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "domeresbuf", scope: !1072, file: !315, line: 595, baseType: !193, size: 32, offset: 20480)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1072, file: !315, line: 596, baseType: !193, size: 32, offset: 20512)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "dometext", scope: !1072, file: !315, line: 597, baseType: !1326, size: 64, offset: 20544)
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1327, size: 64)
!1327 = !DICompositeType(tag: DW_TAG_structure_type, name: "Text", file: !595, line: 44, flags: DIFlagFwdDecl)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "line_thickness_mode", scope: !1072, file: !315, line: 600, baseType: !45, size: 32, offset: 20608)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "unit_line_thickness", scope: !1072, file: !315, line: 601, baseType: !193, size: 32, offset: 20640)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "engine", scope: !1072, file: !315, line: 604, baseType: !1331, size: 256, offset: 20672)
!1331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 256, elements: !1332)
!1332 = !{!1333}
!1333 = !DISubrange(count: 32)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "bake", scope: !1072, file: !315, line: 607, baseType: !1335, size: 10880, offset: 20928)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BakeData", file: !315, line: 364, size: 10880, elements: !1336)
!1336 = !{!1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "im_format", scope: !1335, file: !315, line: 365, baseType: !1075, size: 1984)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "filepath", scope: !1335, file: !315, line: 367, baseType: !143, size: 8192, offset: 1984)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1335, file: !315, line: 369, baseType: !157, size: 16, offset: 10176)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1335, file: !315, line: 369, baseType: !157, size: 16, offset: 10192)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "margin", scope: !1335, file: !315, line: 370, baseType: !157, size: 16, offset: 10208)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1335, file: !315, line: 370, baseType: !157, size: 16, offset: 10224)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "cage_extrusion", scope: !1335, file: !315, line: 372, baseType: !193, size: 32, offset: 10240)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1335, file: !315, line: 373, baseType: !193, size: 32, offset: 10272)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "normal_swizzle", scope: !1335, file: !315, line: 375, baseType: !988, size: 24, offset: 10304)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "normal_space", scope: !1335, file: !315, line: 376, baseType: !144, size: 8, offset: 10328)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "save_mode", scope: !1335, file: !315, line: 378, baseType: !144, size: 8, offset: 10336)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1335, file: !315, line: 379, baseType: !988, size: 24, offset: 10344)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "cage", scope: !1335, file: !315, line: 381, baseType: !173, size: 512, offset: 10368)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "preview_start_resolution", scope: !1072, file: !315, line: 609, baseType: !45, size: 32, offset: 31808)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1072, file: !315, line: 610, baseType: !45, size: 32, offset: 31840)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "audio", scope: !314, file: !315, line: 1252, baseType: !1353, size: 256, offset: 34112)
!1353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AudioData", file: !315, line: 158, size: 256, elements: !1354)
!1354 = !{!1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "mixrate", scope: !1353, file: !315, line: 159, baseType: !45, size: 32)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "main", scope: !1353, file: !315, line: 160, baseType: !193, size: 32, offset: 32)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "speed_of_sound", scope: !1353, file: !315, line: 161, baseType: !193, size: 32, offset: 64)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "doppler_factor", scope: !1353, file: !315, line: 162, baseType: !193, size: 32, offset: 96)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "distance_model", scope: !1353, file: !315, line: 163, baseType: !45, size: 32, offset: 128)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1353, file: !315, line: 164, baseType: !157, size: 16, offset: 160)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1353, file: !315, line: 165, baseType: !157, size: 16, offset: 176)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "volume", scope: !1353, file: !315, line: 166, baseType: !193, size: 32, offset: 192)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1353, file: !315, line: 167, baseType: !193, size: 32, offset: 224)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !314, file: !315, line: 1254, baseType: !183, size: 128, offset: 34368)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "transform_spaces", scope: !314, file: !315, line: 1255, baseType: !183, size: 128, offset: 34496)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scene", scope: !314, file: !315, line: 1257, baseType: !129, size: 64, offset: 34624)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scene_handle", scope: !314, file: !315, line: 1258, baseType: !129, size: 64, offset: 34688)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scrub_handle", scope: !314, file: !315, line: 1259, baseType: !129, size: 64, offset: 34752)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "speaker_handles", scope: !314, file: !315, line: 1260, baseType: !129, size: 64, offset: 34816)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "fps_info", scope: !314, file: !315, line: 1262, baseType: !129, size: 64, offset: 34880)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "theDag", scope: !314, file: !315, line: 1265, baseType: !1372, size: 64, offset: 34944)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = !DICompositeType(tag: DW_TAG_structure_type, name: "DagForest", file: !315, line: 1265, flags: DIFlagFwdDecl)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "dagflags", scope: !314, file: !315, line: 1266, baseType: !157, size: 16, offset: 35008)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "recalc", scope: !314, file: !315, line: 1267, baseType: !157, size: 16, offset: 35024)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "active_keyingset", scope: !314, file: !315, line: 1270, baseType: !45, size: 32, offset: 35040)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "keyingsets", scope: !314, file: !315, line: 1271, baseType: !183, size: 128, offset: 35072)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "framing", scope: !314, file: !315, line: 1274, baseType: !1379, size: 128, offset: 35200)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameFraming", file: !315, line: 650, size: 128, elements: !1380)
!1380 = !{!1381, !1382, !1383, !1384, !1385}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "col", scope: !1379, file: !315, line: 651, baseType: !296, size: 96)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1379, file: !315, line: 652, baseType: !144, size: 8, offset: 96)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1379, file: !315, line: 652, baseType: !144, size: 8, offset: 104)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1379, file: !315, line: 652, baseType: !144, size: 8, offset: 112)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1379, file: !315, line: 652, baseType: !144, size: 8, offset: 120)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "gm", scope: !314, file: !315, line: 1275, baseType: !1387, size: 1472, offset: 35328)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameData", file: !315, line: 676, size: 1472, elements: !1388)
!1388 = !{!1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1401, !1411, !1412, !1413, !1414, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "framing", scope: !1387, file: !315, line: 679, baseType: !1379, size: 128)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "playerflag", scope: !1387, file: !315, line: 680, baseType: !157, size: 16, offset: 128)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "xplay", scope: !1387, file: !315, line: 680, baseType: !157, size: 16, offset: 144)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "yplay", scope: !1387, file: !315, line: 680, baseType: !157, size: 16, offset: 160)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "freqplay", scope: !1387, file: !315, line: 680, baseType: !157, size: 16, offset: 176)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !1387, file: !315, line: 681, baseType: !157, size: 16, offset: 192)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "attrib", scope: !1387, file: !315, line: 681, baseType: !157, size: 16, offset: 208)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "rt1", scope: !1387, file: !315, line: 681, baseType: !157, size: 16, offset: 224)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "rt2", scope: !1387, file: !315, line: 681, baseType: !157, size: 16, offset: 240)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "aasamples", scope: !1387, file: !315, line: 682, baseType: !157, size: 16, offset: 256)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !1387, file: !315, line: 682, baseType: !1400, size: 48, offset: 272)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !157, size: 48, elements: !297)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "dome", scope: !1387, file: !315, line: 685, baseType: !1402, size: 192, offset: 320)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameDome", file: !315, line: 633, size: 192, elements: !1403)
!1403 = !{!1404, !1405, !1406, !1407, !1408, !1409, !1410}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "res", scope: !1402, file: !315, line: 634, baseType: !157, size: 16)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1402, file: !315, line: 634, baseType: !157, size: 16, offset: 16)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "angle", scope: !1402, file: !315, line: 635, baseType: !157, size: 16, offset: 32)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "tilt", scope: !1402, file: !315, line: 635, baseType: !157, size: 16, offset: 48)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "resbuf", scope: !1402, file: !315, line: 636, baseType: !193, size: 32, offset: 64)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1402, file: !315, line: 636, baseType: !193, size: 32, offset: 96)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "warptext", scope: !1402, file: !315, line: 637, baseType: !1326, size: 64, offset: 128)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "stereoflag", scope: !1387, file: !315, line: 686, baseType: !157, size: 16, offset: 512)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "stereomode", scope: !1387, file: !315, line: 686, baseType: !157, size: 16, offset: 528)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "eyeseparation", scope: !1387, file: !315, line: 687, baseType: !193, size: 32, offset: 544)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "recastData", scope: !1387, file: !315, line: 688, baseType: !1415, size: 448, offset: 576)
!1415 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecastData", file: !315, line: 674, baseType: !1416)
!1416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RecastData", file: !315, line: 659, size: 448, elements: !1417)
!1417 = !{!1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "cellsize", scope: !1416, file: !315, line: 660, baseType: !193, size: 32)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "cellheight", scope: !1416, file: !315, line: 661, baseType: !193, size: 32, offset: 32)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "agentmaxslope", scope: !1416, file: !315, line: 662, baseType: !193, size: 32, offset: 64)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "agentmaxclimb", scope: !1416, file: !315, line: 663, baseType: !193, size: 32, offset: 96)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "agentheight", scope: !1416, file: !315, line: 664, baseType: !193, size: 32, offset: 128)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "agentradius", scope: !1416, file: !315, line: 665, baseType: !193, size: 32, offset: 160)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "edgemaxlen", scope: !1416, file: !315, line: 666, baseType: !193, size: 32, offset: 192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "edgemaxerror", scope: !1416, file: !315, line: 667, baseType: !193, size: 32, offset: 224)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "regionminsize", scope: !1416, file: !315, line: 668, baseType: !193, size: 32, offset: 256)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "regionmergesize", scope: !1416, file: !315, line: 669, baseType: !193, size: 32, offset: 288)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "vertsperpoly", scope: !1416, file: !315, line: 670, baseType: !45, size: 32, offset: 320)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "detailsampledist", scope: !1416, file: !315, line: 671, baseType: !193, size: 32, offset: 352)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "detailsamplemaxerror", scope: !1416, file: !315, line: 672, baseType: !193, size: 32, offset: 384)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1416, file: !315, line: 673, baseType: !157, size: 16, offset: 416)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1416, file: !315, line: 673, baseType: !157, size: 16, offset: 432)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "gravity", scope: !1387, file: !315, line: 692, baseType: !193, size: 32, offset: 1024)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "activityBoxRadius", scope: !1387, file: !315, line: 697, baseType: !193, size: 32, offset: 1056)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1387, file: !315, line: 703, baseType: !45, size: 32, offset: 1088)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1387, file: !315, line: 704, baseType: !157, size: 16, offset: 1120)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "matmode", scope: !1387, file: !315, line: 704, baseType: !157, size: 16, offset: 1136)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "occlusionRes", scope: !1387, file: !315, line: 705, baseType: !157, size: 16, offset: 1152)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "physicsEngine", scope: !1387, file: !315, line: 706, baseType: !157, size: 16, offset: 1168)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "exitkey", scope: !1387, file: !315, line: 707, baseType: !157, size: 16, offset: 1184)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "vsync", scope: !1387, file: !315, line: 708, baseType: !157, size: 16, offset: 1200)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "ticrate", scope: !1387, file: !315, line: 709, baseType: !157, size: 16, offset: 1216)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "maxlogicstep", scope: !1387, file: !315, line: 709, baseType: !157, size: 16, offset: 1232)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "physubstep", scope: !1387, file: !315, line: 709, baseType: !157, size: 16, offset: 1248)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "maxphystep", scope: !1387, file: !315, line: 709, baseType: !157, size: 16, offset: 1264)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "obstacleSimulation", scope: !1387, file: !315, line: 710, baseType: !157, size: 16, offset: 1280)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "raster_storage", scope: !1387, file: !315, line: 711, baseType: !157, size: 16, offset: 1296)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "levelHeight", scope: !1387, file: !315, line: 712, baseType: !193, size: 32, offset: 1312)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "deactivationtime", scope: !1387, file: !315, line: 713, baseType: !193, size: 32, offset: 1344)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "lineardeactthreshold", scope: !1387, file: !315, line: 713, baseType: !193, size: 32, offset: 1376)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "angulardeactthreshold", scope: !1387, file: !315, line: 713, baseType: !193, size: 32, offset: 1408)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1387, file: !315, line: 713, baseType: !193, size: 32, offset: 1440)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "unit", scope: !314, file: !315, line: 1278, baseType: !1454, size: 64, offset: 36800)
!1454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UnitSettings", file: !315, line: 1197, size: 64, elements: !1455)
!1455 = !{!1456, !1457, !1458, !1459}
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "scale_length", scope: !1454, file: !315, line: 1199, baseType: !193, size: 32)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "system", scope: !1454, file: !315, line: 1200, baseType: !144, size: 8, offset: 32)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "system_rotation", scope: !1454, file: !315, line: 1201, baseType: !144, size: 8, offset: 40)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1454, file: !315, line: 1202, baseType: !157, size: 16, offset: 48)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !314, file: !315, line: 1281, baseType: !467, size: 64, offset: 36864)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "physics_settings", scope: !314, file: !315, line: 1284, baseType: !1462, size: 192, offset: 36928)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PhysicsSettings", file: !315, line: 1208, size: 192, elements: !1463)
!1463 = !{!1464, !1465, !1466, !1467}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "gravity", scope: !1462, file: !315, line: 1209, baseType: !296, size: 96)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1462, file: !315, line: 1210, baseType: !45, size: 32, offset: 96)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "quick_cache_step", scope: !1462, file: !315, line: 1210, baseType: !45, size: 32, offset: 128)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !1462, file: !315, line: 1210, baseType: !45, size: 32, offset: 160)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "clip", scope: !314, file: !315, line: 1287, baseType: !1469, size: 64, offset: 37120)
!1469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1470, size: 64)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClip", file: !111, line: 64, size: 19136, elements: !1471)
!1471 = !{!1472, !1473, !1474, !1475, !1476, !1477, !1479, !1480, !1481, !1482, !1485, !1486, !1657, !1658, !1666, !1667, !1668, !1669, !1670}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1470, file: !111, line: 65, baseType: !124, size: 960)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !1470, file: !111, line: 66, baseType: !319, size: 64, offset: 960)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1470, file: !111, line: 68, baseType: !143, size: 8192, offset: 1024)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !1470, file: !111, line: 70, baseType: !45, size: 32, offset: 9216)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "lastframe", scope: !1470, file: !111, line: 71, baseType: !45, size: 32, offset: 9248)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "lastsize", scope: !1470, file: !111, line: 72, baseType: !1478, size: 64, offset: 9280)
!1478 = !DICompositeType(tag: DW_TAG_array_type, baseType: !45, size: 64, elements: !630)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "aspx", scope: !1470, file: !111, line: 74, baseType: !193, size: 32, offset: 9344)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "aspy", scope: !1470, file: !111, line: 74, baseType: !193, size: 32, offset: 9376)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !1470, file: !111, line: 76, baseType: !268, size: 64, offset: 9408)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !1470, file: !111, line: 77, baseType: !1483, size: 64, offset: 9472)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1484, size: 64)
!1484 = !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClipCache", file: !111, line: 77, flags: DIFlagFwdDecl)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !1470, file: !111, line: 78, baseType: !467, size: 64, offset: 9536)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "tracking", scope: !1470, file: !111, line: 80, baseType: !1487, size: 2624, offset: 9600)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTracking", file: !469, line: 340, size: 2624, elements: !1488)
!1488 = !{!1489, !1517, !1535, !1536, !1537, !1552, !1610, !1611, !1637, !1638, !1639, !1640, !1646}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "settings", scope: !1487, file: !469, line: 341, baseType: !1490, size: 576)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingSettings", file: !469, line: 251, baseType: !1491)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingSettings", file: !469, line: 207, size: 576, elements: !1492)
!1492 = !{!1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1491, file: !469, line: 208, baseType: !45, size: 32)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "default_motion_model", scope: !1491, file: !469, line: 211, baseType: !157, size: 16, offset: 32)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "default_algorithm_flag", scope: !1491, file: !469, line: 212, baseType: !157, size: 16, offset: 48)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "default_minimum_correlation", scope: !1491, file: !469, line: 213, baseType: !193, size: 32, offset: 64)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "default_pattern_size", scope: !1491, file: !469, line: 214, baseType: !157, size: 16, offset: 96)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "default_search_size", scope: !1491, file: !469, line: 215, baseType: !157, size: 16, offset: 112)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "default_frames_limit", scope: !1491, file: !469, line: 216, baseType: !157, size: 16, offset: 128)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "default_margin", scope: !1491, file: !469, line: 217, baseType: !157, size: 16, offset: 144)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "default_pattern_match", scope: !1491, file: !469, line: 218, baseType: !157, size: 16, offset: 160)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "default_flag", scope: !1491, file: !469, line: 219, baseType: !157, size: 16, offset: 176)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "default_weight", scope: !1491, file: !469, line: 220, baseType: !193, size: 32, offset: 192)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "motion_flag", scope: !1491, file: !469, line: 222, baseType: !157, size: 16, offset: 224)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "speed", scope: !1491, file: !469, line: 225, baseType: !157, size: 16, offset: 240)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "keyframe1", scope: !1491, file: !469, line: 228, baseType: !45, size: 32, offset: 256)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "keyframe2", scope: !1491, file: !469, line: 229, baseType: !45, size: 32, offset: 288)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "reconstruction_flag", scope: !1491, file: !469, line: 233, baseType: !45, size: 32, offset: 320)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "refine_camera_intrinsics", scope: !1491, file: !469, line: 236, baseType: !157, size: 16, offset: 352)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1491, file: !469, line: 236, baseType: !157, size: 16, offset: 368)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "dist", scope: !1491, file: !469, line: 241, baseType: !193, size: 32, offset: 384)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "clean_frames", scope: !1491, file: !469, line: 244, baseType: !45, size: 32, offset: 416)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "clean_action", scope: !1491, file: !469, line: 244, baseType: !45, size: 32, offset: 448)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "clean_error", scope: !1491, file: !469, line: 245, baseType: !193, size: 32, offset: 480)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "object_distance", scope: !1491, file: !469, line: 248, baseType: !193, size: 32, offset: 512)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1491, file: !469, line: 250, baseType: !45, size: 32, offset: 544)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !1487, file: !469, line: 342, baseType: !1518, size: 448, offset: 576)
!1518 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingCamera", file: !469, line: 79, baseType: !1519)
!1519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingCamera", file: !469, line: 61, size: 448, elements: !1520)
!1520 = !{!1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534}
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "intrinsics", scope: !1519, file: !469, line: 62, baseType: !129, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "distortion_model", scope: !1519, file: !469, line: 64, baseType: !157, size: 16, offset: 64)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1519, file: !469, line: 65, baseType: !157, size: 16, offset: 80)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "sensor_width", scope: !1519, file: !469, line: 67, baseType: !193, size: 32, offset: 96)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "pixel_aspect", scope: !1519, file: !469, line: 68, baseType: !193, size: 32, offset: 128)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "focal", scope: !1519, file: !469, line: 69, baseType: !193, size: 32, offset: 160)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "units", scope: !1519, file: !469, line: 70, baseType: !157, size: 16, offset: 192)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1519, file: !469, line: 71, baseType: !157, size: 16, offset: 208)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "principal", scope: !1519, file: !469, line: 72, baseType: !629, size: 64, offset: 224)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "k1", scope: !1519, file: !469, line: 75, baseType: !193, size: 32, offset: 288)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "k2", scope: !1519, file: !469, line: 75, baseType: !193, size: 32, offset: 320)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "k3", scope: !1519, file: !469, line: 75, baseType: !193, size: 32, offset: 352)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "division_k1", scope: !1519, file: !469, line: 78, baseType: !193, size: 32, offset: 384)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "division_k2", scope: !1519, file: !469, line: 78, baseType: !193, size: 32, offset: 416)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "tracks", scope: !1487, file: !469, line: 343, baseType: !183, size: 128, offset: 1024)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "plane_tracks", scope: !1487, file: !469, line: 344, baseType: !183, size: 128, offset: 1152)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "reconstruction", scope: !1487, file: !469, line: 345, baseType: !1538, size: 192, offset: 1280)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingReconstruction", file: !469, line: 278, baseType: !1539)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingReconstruction", file: !469, line: 270, size: 192, elements: !1540)
!1540 = !{!1541, !1542, !1543, !1544, !1545}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1539, file: !469, line: 271, baseType: !45, size: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1539, file: !469, line: 273, baseType: !193, size: 32, offset: 32)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "last_camera", scope: !1539, file: !469, line: 275, baseType: !45, size: 32, offset: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "camnr", scope: !1539, file: !469, line: 276, baseType: !45, size: 32, offset: 96)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "cameras", scope: !1539, file: !469, line: 277, baseType: !1546, size: 64, offset: 128)
!1546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1547, size: 64)
!1547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieReconstructedCamera", file: !469, line: 55, size: 576, elements: !1548)
!1548 = !{!1549, !1550, !1551}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1547, file: !469, line: 56, baseType: !45, size: 32)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1547, file: !469, line: 57, baseType: !193, size: 32, offset: 32)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "mat", scope: !1547, file: !469, line: 58, baseType: !519, size: 512, offset: 64)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "stabilization", scope: !1487, file: !469, line: 346, baseType: !1553, size: 384, offset: 1472)
!1553 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingStabilization", file: !469, line: 268, baseType: !1554)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingStabilization", file: !469, line: 253, size: 384, elements: !1555)
!1555 = !{!1556, !1557, !1558, !1559, !1560, !1604, !1605, !1606, !1607, !1608, !1609}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1554, file: !469, line: 254, baseType: !45, size: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "tot_track", scope: !1554, file: !469, line: 255, baseType: !45, size: 32, offset: 32)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "act_track", scope: !1554, file: !469, line: 255, baseType: !45, size: 32, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "maxscale", scope: !1554, file: !469, line: 258, baseType: !193, size: 32, offset: 96)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "rot_track", scope: !1554, file: !469, line: 259, baseType: !1561, size: 64, offset: 128)
!1561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1562, size: 64)
!1562 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingTrack", file: !469, line: 164, baseType: !1563)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingTrack", file: !469, line: 108, size: 1664, elements: !1564)
!1564 = !{!1565, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1563, file: !469, line: 109, baseType: !1566, size: 64)
!1566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1563, size: 64)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1563, file: !469, line: 109, baseType: !1566, size: 64, offset: 64)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1563, file: !469, line: 111, baseType: !173, size: 512, offset: 128)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "pat_min", scope: !1563, file: !469, line: 119, baseType: !629, size: 64, offset: 640)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "pat_max", scope: !1563, file: !469, line: 119, baseType: !629, size: 64, offset: 704)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "search_min", scope: !1563, file: !469, line: 125, baseType: !629, size: 64, offset: 768)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "search_max", scope: !1563, file: !469, line: 125, baseType: !629, size: 64, offset: 832)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1563, file: !469, line: 127, baseType: !629, size: 64, offset: 896)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "markersnr", scope: !1563, file: !469, line: 130, baseType: !45, size: 32, offset: 960)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "last_marker", scope: !1563, file: !469, line: 131, baseType: !45, size: 32, offset: 992)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !1563, file: !469, line: 132, baseType: !1577, size: 64, offset: 1024)
!1577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1578, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingMarker", file: !469, line: 106, baseType: !1579)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingMarker", file: !469, line: 81, size: 512, elements: !1580)
!1580 = !{!1581, !1582, !1585, !1586, !1587, !1588}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !1579, file: !469, line: 82, baseType: !629, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_corners", scope: !1579, file: !469, line: 97, baseType: !1583, size: 256, offset: 64)
!1583 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 256, elements: !1584)
!1584 = !{!512, !631}
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "search_min", scope: !1579, file: !469, line: 102, baseType: !629, size: 64, offset: 320)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "search_max", scope: !1579, file: !469, line: 102, baseType: !629, size: 64, offset: 384)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1579, file: !469, line: 104, baseType: !45, size: 32, offset: 448)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1579, file: !469, line: 105, baseType: !45, size: 32, offset: 480)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "bundle_pos", scope: !1563, file: !469, line: 135, baseType: !296, size: 96, offset: 1088)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1563, file: !469, line: 136, baseType: !193, size: 32, offset: 1184)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1563, file: !469, line: 139, baseType: !45, size: 32, offset: 1216)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "pat_flag", scope: !1563, file: !469, line: 139, baseType: !45, size: 32, offset: 1248)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "search_flag", scope: !1563, file: !469, line: 139, baseType: !45, size: 32, offset: 1280)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "color", scope: !1563, file: !469, line: 140, baseType: !296, size: 96, offset: 1312)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "frames_limit", scope: !1563, file: !469, line: 143, baseType: !157, size: 16, offset: 1408)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "margin", scope: !1563, file: !469, line: 144, baseType: !157, size: 16, offset: 1424)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_match", scope: !1563, file: !469, line: 145, baseType: !157, size: 16, offset: 1440)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "motion_model", scope: !1563, file: !469, line: 148, baseType: !157, size: 16, offset: 1456)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "algorithm_flag", scope: !1563, file: !469, line: 149, baseType: !45, size: 32, offset: 1472)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "minimum_correlation", scope: !1563, file: !469, line: 150, baseType: !193, size: 32, offset: 1504)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !1563, file: !469, line: 152, baseType: !467, size: 64, offset: 1536)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1563, file: !469, line: 163, baseType: !193, size: 32, offset: 1600)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1563, file: !469, line: 163, baseType: !193, size: 32, offset: 1632)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "locinf", scope: !1554, file: !469, line: 261, baseType: !193, size: 32, offset: 192)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "scaleinf", scope: !1554, file: !469, line: 261, baseType: !193, size: 32, offset: 224)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "rotinf", scope: !1554, file: !469, line: 261, baseType: !193, size: 32, offset: 256)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1554, file: !469, line: 263, baseType: !45, size: 32, offset: 288)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !1554, file: !469, line: 266, baseType: !45, size: 32, offset: 320)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1554, file: !469, line: 267, baseType: !193, size: 32, offset: 352)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "act_track", scope: !1487, file: !469, line: 347, baseType: !1561, size: 64, offset: 1856)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "act_plane_track", scope: !1487, file: !469, line: 348, baseType: !1612, size: 64, offset: 1920)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingPlaneTrack", file: !469, line: 205, baseType: !1614)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingPlaneTrack", file: !469, line: 186, size: 1024, elements: !1615)
!1615 = !{!1616, !1618, !1619, !1620, !1622, !1623, !1624, !1632, !1633, !1634, !1635, !1636}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1614, file: !469, line: 187, baseType: !1617, size: 64)
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1614, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1614, file: !469, line: 187, baseType: !1617, size: 64, offset: 64)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1614, file: !469, line: 189, baseType: !173, size: 512, offset: 128)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "point_tracks", scope: !1614, file: !469, line: 191, baseType: !1621, size: 64, offset: 640)
!1621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "point_tracksnr", scope: !1614, file: !469, line: 193, baseType: !45, size: 32, offset: 704)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1614, file: !469, line: 193, baseType: !45, size: 32, offset: 736)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !1614, file: !469, line: 195, baseType: !1625, size: 64, offset: 768)
!1625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1626, size: 64)
!1626 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingPlaneMarker", file: !469, line: 184, baseType: !1627)
!1627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingPlaneMarker", file: !469, line: 166, size: 320, elements: !1628)
!1628 = !{!1629, !1630, !1631}
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "corners", scope: !1627, file: !469, line: 180, baseType: !1583, size: 256)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1627, file: !469, line: 182, baseType: !45, size: 32, offset: 256)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1627, file: !469, line: 183, baseType: !45, size: 32, offset: 288)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "markersnr", scope: !1614, file: !469, line: 196, baseType: !45, size: 32, offset: 832)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1614, file: !469, line: 198, baseType: !45, size: 32, offset: 864)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !1614, file: !469, line: 200, baseType: !806, size: 64, offset: 896)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "image_opacity", scope: !1614, file: !469, line: 201, baseType: !193, size: 32, offset: 960)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "last_marker", scope: !1614, file: !469, line: 204, baseType: !45, size: 32, offset: 992)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1487, file: !469, line: 350, baseType: !183, size: 128, offset: 1984)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "objectnr", scope: !1487, file: !469, line: 351, baseType: !45, size: 32, offset: 2112)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "tot_object", scope: !1487, file: !469, line: 351, baseType: !45, size: 32, offset: 2144)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "stats", scope: !1487, file: !469, line: 353, baseType: !1641, size: 64, offset: 2176)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingStats", file: !469, line: 297, baseType: !1643)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingStats", file: !469, line: 295, size: 2048, elements: !1644)
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "message", scope: !1643, file: !469, line: 296, baseType: !251, size: 2048)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "dopesheet", scope: !1487, file: !469, line: 355, baseType: !1647, size: 384, offset: 2240)
!1647 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingDopesheet", file: !469, line: 338, baseType: !1648)
!1648 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingDopesheet", file: !469, line: 322, size: 384, elements: !1649)
!1649 = !{!1650, !1651, !1652, !1653, !1654, !1655, !1656}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !1648, file: !469, line: 323, baseType: !45, size: 32)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "sort_method", scope: !1648, file: !469, line: 325, baseType: !157, size: 16, offset: 32)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1648, file: !469, line: 326, baseType: !157, size: 16, offset: 48)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "coverage_segments", scope: !1648, file: !469, line: 331, baseType: !183, size: 128, offset: 64)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1648, file: !469, line: 334, baseType: !183, size: 128, offset: 192)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "tot_channel", scope: !1648, file: !469, line: 335, baseType: !45, size: 32, offset: 320)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1648, file: !469, line: 337, baseType: !45, size: 32, offset: 352)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "tracking_context", scope: !1470, file: !111, line: 81, baseType: !129, size: 64, offset: 12224)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "proxy", scope: !1470, file: !111, line: 85, baseType: !1659, size: 6208, offset: 12288)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClipProxy", file: !111, line: 55, size: 6208, elements: !1660)
!1660 = !{!1661, !1662, !1663, !1664, !1665}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !1659, file: !111, line: 56, baseType: !257, size: 6144)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "tc", scope: !1659, file: !111, line: 58, baseType: !157, size: 16, offset: 6144)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1659, file: !111, line: 59, baseType: !157, size: 16, offset: 6160)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "build_size_flag", scope: !1659, file: !111, line: 60, baseType: !157, size: 16, offset: 6176)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "build_tc_flag", scope: !1659, file: !111, line: 61, baseType: !157, size: 16, offset: 6192)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1470, file: !111, line: 86, baseType: !45, size: 32, offset: 18496)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1470, file: !111, line: 88, baseType: !45, size: 32, offset: 18528)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1470, file: !111, line: 90, baseType: !45, size: 32, offset: 18560)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "frame_offset", scope: !1470, file: !111, line: 94, baseType: !45, size: 32, offset: 18592)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !1470, file: !111, line: 100, baseType: !304, size: 512, offset: 18624)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "customdata_mask", scope: !314, file: !315, line: 1289, baseType: !611, size: 64, offset: 37184)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "customdata_mask_modal", scope: !314, file: !315, line: 1290, baseType: !611, size: 64, offset: 37248)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "view_settings", scope: !314, file: !315, line: 1293, baseType: !1095, size: 1280, offset: 37312)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "display_settings", scope: !314, file: !315, line: 1294, baseType: !1145, size: 512, offset: 38592)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "sequencer_colorspace_settings", scope: !314, file: !315, line: 1295, baseType: !304, size: 512, offset: 39104)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "rigidbody_world", scope: !314, file: !315, line: 1298, baseType: !1677, size: 64, offset: 39616)
!1677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1678, size: 64)
!1678 = !DICompositeType(tag: DW_TAG_structure_type, name: "RigidBodyWorld", file: !315, line: 1298, flags: DIFlagFwdDecl)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "scene_camera", scope: !206, file: !16, line: 152, baseType: !389, size: 64, offset: 1536)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "clip", scope: !206, file: !16, line: 153, baseType: !1469, size: 64, offset: 1600)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !206, file: !16, line: 154, baseType: !1682, size: 64, offset: 1664)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Mask", file: !1684, line: 46, size: 1344, elements: !1685)
!1684 = !DIFile(filename: "blender/source/blender/makesdna/DNA_mask_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1685 = !{!1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1683, file: !1684, line: 47, baseType: !124, size: 960)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !1683, file: !1684, line: 48, baseType: !319, size: 64, offset: 960)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "masklayers", scope: !1683, file: !1684, line: 49, baseType: !183, size: 128, offset: 1024)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "masklay_act", scope: !1683, file: !1684, line: 50, baseType: !45, size: 32, offset: 1152)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "masklay_tot", scope: !1683, file: !1684, line: 51, baseType: !45, size: 32, offset: 1184)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !1683, file: !1684, line: 53, baseType: !45, size: 32, offset: 1216)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "efra", scope: !1683, file: !1684, line: 53, baseType: !45, size: 32, offset: 1248)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1683, file: !1684, line: 55, baseType: !45, size: 32, offset: 1280)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1683, file: !1684, line: 56, baseType: !45, size: 32, offset: 1312)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !206, file: !16, line: 156, baseType: !268, size: 64, offset: 1728)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "effect_fader", scope: !206, file: !16, line: 158, baseType: !193, size: 32, offset: 1792)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "speed_fader", scope: !206, file: !16, line: 159, baseType: !193, size: 32, offset: 1824)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "seq1", scope: !206, file: !16, line: 162, baseType: !209, size: 64, offset: 1856)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "seq2", scope: !206, file: !16, line: 162, baseType: !209, size: 64, offset: 1920)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "seq3", scope: !206, file: !16, line: 162, baseType: !209, size: 64, offset: 1984)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "seqbase", scope: !206, file: !16, line: 164, baseType: !183, size: 128, offset: 2048)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "sound", scope: !206, file: !16, line: 166, baseType: !1703, size: 64, offset: 2176)
!1703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1704, size: 64)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bSound", file: !1705, line: 46, size: 9856, elements: !1706)
!1705 = !DIFile(filename: "blender/source/blender/makesdna/DNA_sound_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1706 = !{!1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1704, file: !1705, line: 47, baseType: !124, size: 960)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1704, file: !1705, line: 52, baseType: !143, size: 8192, offset: 960)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !1704, file: !1705, line: 57, baseType: !150, size: 64, offset: 9152)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "handle", scope: !1704, file: !1705, line: 62, baseType: !129, size: 64, offset: 9216)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "newpackedfile", scope: !1704, file: !1705, line: 67, baseType: !150, size: 64, offset: 9280)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !1704, file: !1705, line: 68, baseType: !310, size: 64, offset: 9344)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "volume", scope: !1704, file: !1705, line: 69, baseType: !193, size: 32, offset: 9408)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "attenuation", scope: !1704, file: !1705, line: 70, baseType: !193, size: 32, offset: 9440)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pitch", scope: !1704, file: !1705, line: 71, baseType: !193, size: 32, offset: 9472)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "min_gain", scope: !1704, file: !1705, line: 72, baseType: !193, size: 32, offset: 9504)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "max_gain", scope: !1704, file: !1705, line: 73, baseType: !193, size: 32, offset: 9536)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !1704, file: !1705, line: 74, baseType: !193, size: 32, offset: 9568)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1704, file: !1705, line: 75, baseType: !45, size: 32, offset: 9600)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1704, file: !1705, line: 76, baseType: !45, size: 32, offset: 9632)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !1704, file: !1705, line: 85, baseType: !129, size: 64, offset: 9664)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "waveform", scope: !1704, file: !1705, line: 90, baseType: !129, size: 64, offset: 9728)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "playback_handle", scope: !1704, file: !1705, line: 96, baseType: !129, size: 64, offset: 9792)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "scene_sound", scope: !206, file: !16, line: 167, baseType: !129, size: 64, offset: 2240)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "volume", scope: !206, file: !16, line: 168, baseType: !193, size: 32, offset: 2304)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "pitch", scope: !206, file: !16, line: 170, baseType: !193, size: 32, offset: 2336)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "pan", scope: !206, file: !16, line: 170, baseType: !193, size: 32, offset: 2368)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "strobe", scope: !206, file: !16, line: 171, baseType: !193, size: 32, offset: 2400)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "effectdata", scope: !206, file: !16, line: 173, baseType: !129, size: 64, offset: 2432)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "anim_startofs", scope: !206, file: !16, line: 175, baseType: !45, size: 32, offset: 2496)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "anim_endofs", scope: !206, file: !16, line: 176, baseType: !45, size: 32, offset: 2528)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "blend_mode", scope: !206, file: !16, line: 179, baseType: !45, size: 32, offset: 2560)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "blend_opacity", scope: !206, file: !16, line: 180, baseType: !193, size: 32, offset: 2592)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !206, file: !16, line: 183, baseType: !45, size: 32, offset: 2624)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "alpha_mode", scope: !206, file: !16, line: 185, baseType: !144, size: 8, offset: 2656)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !206, file: !16, line: 186, baseType: !988, size: 24, offset: 2664)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "modifiers", scope: !206, file: !16, line: 189, baseType: !183, size: 128, offset: 2688)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "disp_range", scope: !196, file: !16, line: 197, baseType: !1478, size: 64, offset: 256)
!1739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !157, size: 64)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_typedef, name: "bSound", file: !1705, line: 100, baseType: !1704)
!1742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1743, size: 64)
!1743 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieClip", file: !111, line: 101, baseType: !1470)
!1744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1745, size: 64)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "Scene", file: !315, line: 1299, baseType: !314)
!1746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1747, size: 64)
!1747 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqUniqueInfo", file: !3, line: 964, baseType: !1748)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqUniqueInfo", file: !3, line: 958, size: 1152, elements: !1749)
!1749 = !{!1750, !1751, !1752, !1753, !1754}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1748, file: !3, line: 959, baseType: !204, size: 64)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "name_src", scope: !1748, file: !3, line: 960, baseType: !173, size: 512, offset: 64)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "name_dest", scope: !1748, file: !3, line: 961, baseType: !173, size: 512, offset: 576)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1748, file: !3, line: 962, baseType: !45, size: 32, offset: 1088)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "match", scope: !1748, file: !3, line: 963, baseType: !45, size: 32, offset: 1120)
!1755 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1757, size: 64)
!1757 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorBalanceThread", file: !3, line: 1830, baseType: !1758)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorBalanceThread", file: !3, line: 1820, size: 512, elements: !1759)
!1759 = !{!1760, !1761, !1762, !1763, !1764, !1766, !1767, !1768, !1769}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !1758, file: !3, line: 1821, baseType: !291, size: 64)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "mul", scope: !1758, file: !3, line: 1822, baseType: !193, size: 32, offset: 64)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1758, file: !3, line: 1824, baseType: !45, size: 32, offset: 96)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1758, file: !3, line: 1824, baseType: !45, size: 32, offset: 128)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "rect", scope: !1758, file: !3, line: 1826, baseType: !1765, size: 64, offset: 192)
!1765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !742, size: 64)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "mask_rect", scope: !1758, file: !3, line: 1826, baseType: !1765, size: 64, offset: 256)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "rect_float", scope: !1758, file: !3, line: 1827, baseType: !832, size: 64, offset: 320)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "mask_rect_float", scope: !1758, file: !3, line: 1827, baseType: !832, size: 64, offset: 384)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "make_float", scope: !1758, file: !3, line: 1829, baseType: !742, size: 8, offset: 448)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorBalanceInitData", file: !3, line: 1818, baseType: !1772)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorBalanceInitData", file: !3, line: 1812, size: 320, elements: !1773)
!1773 = !{!1774, !1775, !1840, !1841, !1842}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !1772, file: !3, line: 1813, baseType: !291, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf", scope: !1772, file: !3, line: 1814, baseType: !1776, size: 64, offset: 64)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_typedef, name: "ImBuf", file: !1778, line: 141, baseType: !1779)
!1778 = !DIFile(filename: "blender/source/blender/imbuf/IMB_imbuf_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImBuf", file: !1778, line: 70, size: 19840, elements: !1780)
!1780 = !{!1781, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1794, !1795, !1796, !1797, !1798, !1800, !1801, !1802, !1803, !1807, !1808, !1809, !1810, !1811, !1814, !1815, !1816, !1817, !1818, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1831, !1832, !1833}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1779, file: !1778, line: 71, baseType: !1782, size: 64)
!1782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1779, file: !1778, line: 71, baseType: !1782, size: 64, offset: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1779, file: !1778, line: 74, baseType: !45, size: 32, offset: 128)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1779, file: !1778, line: 74, baseType: !45, size: 32, offset: 160)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !1779, file: !1778, line: 79, baseType: !742, size: 8, offset: 192)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1779, file: !1778, line: 80, baseType: !45, size: 32, offset: 224)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1779, file: !1778, line: 83, baseType: !45, size: 32, offset: 256)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "mall", scope: !1779, file: !1778, line: 84, baseType: !45, size: 32, offset: 288)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "rect", scope: !1779, file: !1778, line: 87, baseType: !750, size: 64, offset: 320)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "rect_float", scope: !1779, file: !1778, line: 88, baseType: !832, size: 64, offset: 384)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ppm", scope: !1779, file: !1778, line: 93, baseType: !1793, size: 128, offset: 448)
!1793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1755, size: 128, elements: !630)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "tilex", scope: !1779, file: !1778, line: 96, baseType: !45, size: 32, offset: 576)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "tiley", scope: !1779, file: !1778, line: 96, baseType: !45, size: 32, offset: 608)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "xtiles", scope: !1779, file: !1778, line: 97, baseType: !45, size: 32, offset: 640)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "ytiles", scope: !1779, file: !1778, line: 97, baseType: !45, size: 32, offset: 672)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "tiles", scope: !1779, file: !1778, line: 98, baseType: !1799, size: 64, offset: 704)
!1799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !750, size: 64)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "zbuf", scope: !1779, file: !1778, line: 101, baseType: !830, size: 64, offset: 768)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "zbuf_float", scope: !1779, file: !1778, line: 102, baseType: !832, size: 64, offset: 832)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "dither", scope: !1779, file: !1778, line: 105, baseType: !193, size: 32, offset: 896)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "mipmap", scope: !1779, file: !1778, line: 108, baseType: !1804, size: 1280, offset: 960)
!1804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1782, size: 1280, elements: !1805)
!1805 = !{!1806}
!1806 = !DISubrange(count: 20)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "miptot", scope: !1779, file: !1778, line: 109, baseType: !45, size: 32, offset: 2240)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "miplevel", scope: !1779, file: !1778, line: 109, baseType: !45, size: 32, offset: 2272)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1779, file: !1778, line: 112, baseType: !45, size: 32, offset: 2304)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "userflags", scope: !1779, file: !1778, line: 113, baseType: !45, size: 32, offset: 2336)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1779, file: !1778, line: 114, baseType: !1812, size: 64, offset: 2368)
!1812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1813, size: 64)
!1813 = !DICompositeType(tag: DW_TAG_structure_type, name: "ImMetaData", file: !1778, line: 50, flags: DIFlagFwdDecl)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "userdata", scope: !1779, file: !1778, line: 115, baseType: !129, size: 64, offset: 2432)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "ftype", scope: !1779, file: !1778, line: 118, baseType: !45, size: 32, offset: 2496)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1779, file: !1778, line: 119, baseType: !143, size: 8192, offset: 2528)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "cachename", scope: !1779, file: !1778, line: 120, baseType: !143, size: 8192, offset: 10720)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "c_handle", scope: !1779, file: !1778, line: 123, baseType: !1819, size: 64, offset: 18944)
!1819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1820, size: 64)
!1820 = !DICompositeType(tag: DW_TAG_structure_type, name: "MEM_CacheLimiterHandle_s", file: !1778, line: 123, flags: DIFlagFwdDecl)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "refcounter", scope: !1779, file: !1778, line: 124, baseType: !45, size: 32, offset: 19008)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "encodedbuffer", scope: !1779, file: !1778, line: 127, baseType: !1765, size: 64, offset: 19072)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "encodedsize", scope: !1779, file: !1778, line: 128, baseType: !7, size: 32, offset: 19136)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "encodedbuffersize", scope: !1779, file: !1778, line: 129, baseType: !7, size: 32, offset: 19168)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "rect_colorspace", scope: !1779, file: !1778, line: 132, baseType: !1047, size: 64, offset: 19200)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "float_colorspace", scope: !1779, file: !1778, line: 133, baseType: !1047, size: 64, offset: 19264)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "display_buffer_flags", scope: !1779, file: !1778, line: 134, baseType: !750, size: 64, offset: 19328)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "colormanage_cache", scope: !1779, file: !1778, line: 135, baseType: !1829, size: 64, offset: 19392)
!1829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1830, size: 64)
!1830 = !DICompositeType(tag: DW_TAG_structure_type, name: "ColormanageCache", file: !1778, line: 135, flags: DIFlagFwdDecl)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "colormanage_flag", scope: !1779, file: !1778, line: 136, baseType: !45, size: 32, offset: 19456)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "invalid_rect", scope: !1779, file: !1778, line: 137, baseType: !835, size: 128, offset: 19488)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "dds_data", scope: !1779, file: !1778, line: 140, baseType: !1834, size: 192, offset: 19648)
!1834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DDSData", file: !1778, line: 55, size: 192, elements: !1835)
!1835 = !{!1836, !1837, !1838, !1839}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "fourcc", scope: !1834, file: !1778, line: 56, baseType: !7, size: 32)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "nummipmaps", scope: !1834, file: !1778, line: 57, baseType: !7, size: 32, offset: 32)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1834, file: !1778, line: 58, baseType: !1765, size: 64, offset: 64)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1834, file: !1778, line: 59, baseType: !7, size: 32, offset: 128)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "mul", scope: !1772, file: !3, line: 1815, baseType: !193, size: 32, offset: 128)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !1772, file: !3, line: 1816, baseType: !1776, size: 64, offset: 192)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "make_float", scope: !1772, file: !3, line: 1817, baseType: !742, size: 8, offset: 256)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "SpeedControlVars", file: !16, line: 252, baseType: !1845)
!1845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SpeedControlVars", file: !16, line: 246, size: 192, elements: !1846)
!1846 = !{!1847, !1848, !1849, !1850, !1851}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "frameMap", scope: !1845, file: !16, line: 247, baseType: !832, size: 64)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "globalSpeed", scope: !1845, file: !16, line: 248, baseType: !193, size: 32, offset: 64)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1845, file: !16, line: 249, baseType: !45, size: 32, offset: 96)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1845, file: !16, line: 250, baseType: !45, size: 32, offset: 128)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "lastValidFrame", scope: !1845, file: !16, line: 251, baseType: !45, size: 32, offset: 160)
!1852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1853, size: 64)
!1853 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderEffectThread", file: !3, line: 2196, baseType: !1854)
!1854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderEffectThread", file: !3, line: 2187, size: 640, elements: !1855)
!1855 = !{!1856, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "sh", scope: !1854, file: !3, line: 2188, baseType: !1857, size: 64)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64)
!1858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqEffectHandle", file: !104, line: 118, size: 768, elements: !1859)
!1859 = !{!1860, !1861, !1862, !1866, !1870, !1871, !1875, !1876, !1880, !1884, !1888, !1969, !1973}
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "multithreaded", scope: !1858, file: !104, line: 119, baseType: !742, size: 8)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "supports_mask", scope: !1858, file: !104, line: 120, baseType: !742, size: 8, offset: 8)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1858, file: !104, line: 124, baseType: !1863, size: 64, offset: 64)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = !DISubroutineType(types: !1865)
!1865 = !{null, !209}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "num_inputs", scope: !1858, file: !104, line: 128, baseType: !1867, size: 64, offset: 128)
!1867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!1868 = !DISubroutineType(types: !1869)
!1869 = !{!45}
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "load", scope: !1858, file: !104, line: 132, baseType: !1863, size: 64, offset: 192)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "copy", scope: !1858, file: !104, line: 135, baseType: !1872, size: 64, offset: 256)
!1872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1873, size: 64)
!1873 = !DISubroutineType(types: !1874)
!1874 = !{null, !209, !209}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1858, file: !104, line: 138, baseType: !1863, size: 64, offset: 320)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "early_out", scope: !1858, file: !104, line: 144, baseType: !1877, size: 64, offset: 384)
!1877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1878, size: 64)
!1878 = !DISubroutineType(types: !1879)
!1879 = !{!45, !209, !193, !193}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "store_icu_yrange", scope: !1858, file: !104, line: 147, baseType: !1881, size: 64, offset: 448)
!1881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1882, size: 64)
!1882 = !DISubroutineType(types: !1883)
!1883 = !{null, !209, !157, !832, !832}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "get_default_fac", scope: !1858, file: !104, line: 150, baseType: !1885, size: 64, offset: 512)
!1885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1886, size: 64)
!1886 = !DISubroutineType(types: !1887)
!1887 = !{null, !209, !193, !832, !832}
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1858, file: !104, line: 157, baseType: !1889, size: 64, offset: 576)
!1889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1890, size: 64)
!1890 = !DISubroutineType(types: !1891)
!1891 = !{!1782, !1892, !209, !193, !193, !193, !1782, !1782, !1782}
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1894)
!1894 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqRenderData", file: !104, line: 103, baseType: !1895)
!1895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqRenderData", file: !104, line: 92, size: 384, elements: !1896)
!1896 = !{!1897, !1903, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968}
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "eval_ctx", scope: !1895, file: !104, line: 93, baseType: !1898, size: 64)
!1898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "EvaluationContext", file: !1900, line: 58, size: 32, elements: !1901)
!1900 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_depsgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1901 = !{!1902}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1899, file: !1900, line: 59, baseType: !45, size: 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "bmain", scope: !1895, file: !104, line: 94, baseType: !1904, size: 64, offset: 64)
!1904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1905, size: 64)
!1905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Main", file: !1906, line: 53, size: 15232, elements: !1907)
!1906 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_main.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1907 = !{!1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958}
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1905, file: !1906, line: 54, baseType: !1904, size: 64)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1905, file: !1906, line: 54, baseType: !1904, size: 64, offset: 64)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1905, file: !1906, line: 55, baseType: !143, size: 8192, offset: 128)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "versionfile", scope: !1905, file: !1906, line: 56, baseType: !157, size: 16, offset: 8320)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "subversionfile", scope: !1905, file: !1906, line: 56, baseType: !157, size: 16, offset: 8336)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "minversionfile", scope: !1905, file: !1906, line: 57, baseType: !157, size: 16, offset: 8352)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "minsubversionfile", scope: !1905, file: !1906, line: 57, baseType: !157, size: 16, offset: 8368)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "build_commit_timestamp", scope: !1905, file: !1906, line: 58, baseType: !611, size: 64, offset: 8384)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "build_hash", scope: !1905, file: !1906, line: 59, baseType: !1917, size: 128, offset: 8448)
!1917 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 128, elements: !1918)
!1918 = !{!1919}
!1919 = !DISubrange(count: 16)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "recovered", scope: !1905, file: !1906, line: 60, baseType: !157, size: 16, offset: 8576)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "curlib", scope: !1905, file: !1906, line: 62, baseType: !134, size: 64, offset: 8640)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !1905, file: !1906, line: 63, baseType: !183, size: 128, offset: 8704)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "library", scope: !1905, file: !1906, line: 64, baseType: !183, size: 128, offset: 8832)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1905, file: !1906, line: 65, baseType: !183, size: 128, offset: 8960)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "mesh", scope: !1905, file: !1906, line: 66, baseType: !183, size: 128, offset: 9088)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "curve", scope: !1905, file: !1906, line: 67, baseType: !183, size: 128, offset: 9216)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mball", scope: !1905, file: !1906, line: 68, baseType: !183, size: 128, offset: 9344)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mat", scope: !1905, file: !1906, line: 69, baseType: !183, size: 128, offset: 9472)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "tex", scope: !1905, file: !1906, line: 70, baseType: !183, size: 128, offset: 9600)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !1905, file: !1906, line: 71, baseType: !183, size: 128, offset: 9728)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "latt", scope: !1905, file: !1906, line: 72, baseType: !183, size: 128, offset: 9856)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "lamp", scope: !1905, file: !1906, line: 73, baseType: !183, size: 128, offset: 9984)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !1905, file: !1906, line: 74, baseType: !183, size: 128, offset: 10112)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !1905, file: !1906, line: 75, baseType: !183, size: 128, offset: 10240)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1905, file: !1906, line: 76, baseType: !183, size: 128, offset: 10368)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "world", scope: !1905, file: !1906, line: 77, baseType: !183, size: 128, offset: 10496)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "screen", scope: !1905, file: !1906, line: 78, baseType: !183, size: 128, offset: 10624)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "script", scope: !1905, file: !1906, line: 79, baseType: !183, size: 128, offset: 10752)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "vfont", scope: !1905, file: !1906, line: 80, baseType: !183, size: 128, offset: 10880)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !1905, file: !1906, line: 81, baseType: !183, size: 128, offset: 11008)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "speaker", scope: !1905, file: !1906, line: 82, baseType: !183, size: 128, offset: 11136)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "sound", scope: !1905, file: !1906, line: 83, baseType: !183, size: 128, offset: 11264)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !1905, file: !1906, line: 84, baseType: !183, size: 128, offset: 11392)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "armature", scope: !1905, file: !1906, line: 85, baseType: !183, size: 128, offset: 11520)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !1905, file: !1906, line: 86, baseType: !183, size: 128, offset: 11648)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "nodetree", scope: !1905, file: !1906, line: 87, baseType: !183, size: 128, offset: 11776)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !1905, file: !1906, line: 88, baseType: !183, size: 128, offset: 11904)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "particle", scope: !1905, file: !1906, line: 89, baseType: !183, size: 128, offset: 12032)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "palettes", scope: !1905, file: !1906, line: 90, baseType: !183, size: 128, offset: 12160)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "paintcurves", scope: !1905, file: !1906, line: 91, baseType: !183, size: 128, offset: 12288)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "wm", scope: !1905, file: !1906, line: 92, baseType: !183, size: 128, offset: 12416)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "gpencil", scope: !1905, file: !1906, line: 93, baseType: !183, size: 128, offset: 12544)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "movieclip", scope: !1905, file: !1906, line: 94, baseType: !183, size: 128, offset: 12672)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !1905, file: !1906, line: 95, baseType: !183, size: 128, offset: 12800)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "linestyle", scope: !1905, file: !1906, line: 96, baseType: !183, size: 128, offset: 12928)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "id_tag_update", scope: !1905, file: !1906, line: 98, baseType: !251, size: 2048, offset: 13056)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "eval_ctx", scope: !1905, file: !1906, line: 101, baseType: !1898, size: 64, offset: 15104)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1905, file: !1906, line: 103, baseType: !1959, size: 64, offset: 15168)
!1959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1960, size: 64)
!1960 = !DICompositeType(tag: DW_TAG_structure_type, name: "MainLock", file: !1906, line: 51, flags: DIFlagFwdDecl)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !1895, file: !104, line: 95, baseType: !313, size: 64, offset: 128)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "rectx", scope: !1895, file: !104, line: 96, baseType: !45, size: 32, offset: 192)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "recty", scope: !1895, file: !104, line: 97, baseType: !45, size: 32, offset: 224)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "preview_render_size", scope: !1895, file: !104, line: 98, baseType: !45, size: 32, offset: 256)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "motion_blur_samples", scope: !1895, file: !104, line: 99, baseType: !45, size: 32, offset: 288)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "motion_blur_shutter", scope: !1895, file: !104, line: 100, baseType: !193, size: 32, offset: 320)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "skip_cache", scope: !1895, file: !104, line: 101, baseType: !742, size: 8, offset: 352)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "is_proxy_render", scope: !1895, file: !104, line: 102, baseType: !742, size: 8, offset: 360)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "init_execution", scope: !1858, file: !104, line: 160, baseType: !1970, size: 64, offset: 640)
!1970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1971, size: 64)
!1971 = !DISubroutineType(types: !1972)
!1972 = !{!1782, !1892, !1782, !1782, !1782}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "execute_slice", scope: !1858, file: !104, line: 163, baseType: !1974, size: 64, offset: 704)
!1974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1975, size: 64)
!1975 = !DISubroutineType(types: !1976)
!1976 = !{null, !1892, !209, !193, !193, !193, !1782, !1782, !1782, !45, !45, !1782}
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1854, file: !3, line: 2189, baseType: !1892, size: 64, offset: 64)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1854, file: !3, line: 2190, baseType: !204, size: 64, offset: 128)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "cfra", scope: !1854, file: !3, line: 2191, baseType: !193, size: 32, offset: 192)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "facf0", scope: !1854, file: !3, line: 2191, baseType: !193, size: 32, offset: 224)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "facf1", scope: !1854, file: !3, line: 2191, baseType: !193, size: 32, offset: 256)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf1", scope: !1854, file: !3, line: 2192, baseType: !1776, size: 64, offset: 320)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf2", scope: !1854, file: !3, line: 2192, baseType: !1776, size: 64, offset: 384)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf3", scope: !1854, file: !3, line: 2192, baseType: !1776, size: 64, offset: 448)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !1854, file: !3, line: 2194, baseType: !1776, size: 64, offset: 512)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "start_line", scope: !1854, file: !3, line: 2195, baseType: !45, size: 32, offset: 576)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "tot_line", scope: !1854, file: !3, line: 2195, baseType: !45, size: 32, offset: 608)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1989, size: 64)
!1989 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderEffectInitData", file: !3, line: 2185, baseType: !1990)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderEffectInitData", file: !3, line: 2177, size: 576, elements: !1991)
!1991 = !{!1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "sh", scope: !1990, file: !3, line: 2178, baseType: !1857, size: 64)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1990, file: !3, line: 2179, baseType: !1892, size: 64, offset: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1990, file: !3, line: 2180, baseType: !204, size: 64, offset: 128)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "cfra", scope: !1990, file: !3, line: 2181, baseType: !193, size: 32, offset: 192)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "facf0", scope: !1990, file: !3, line: 2181, baseType: !193, size: 32, offset: 224)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "facf1", scope: !1990, file: !3, line: 2181, baseType: !193, size: 32, offset: 256)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf1", scope: !1990, file: !3, line: 2182, baseType: !1776, size: 64, offset: 320)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf2", scope: !1990, file: !3, line: 2182, baseType: !1776, size: 64, offset: 384)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf3", scope: !1990, file: !3, line: 2182, baseType: !1776, size: 64, offset: 448)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !1990, file: !3, line: 2184, baseType: !1776, size: 64, offset: 512)
!2002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !204, size: 64)
!2003 = !{!0, !2004, !2006, !2008, !2010, !2012, !2014, !2017, !2019}
!2004 = !DIGlobalVariableExpression(var: !2005, expr: !DIExpression())
!2005 = distinct !DIGlobalVariable(name: "seqbase_clipboard", scope: !2, file: !3, line: 99, type: !183, isLocal: false, isDefinition: true)
!2006 = !DIGlobalVariableExpression(var: !2007, expr: !DIExpression())
!2007 = distinct !DIGlobalVariable(name: "seqbase_clipboard_frame", scope: !2, file: !3, line: 100, type: !45, isLocal: false, isDefinition: true)
!2008 = !DIGlobalVariableExpression(var: !2009, expr: !DIExpression())
!2009 = distinct !DIGlobalVariable(name: "running_threads", scope: !2, file: !3, line: 3128, type: !183, isLocal: true, isDefinition: true)
!2010 = !DIGlobalVariableExpression(var: !2011, expr: !DIExpression())
!2011 = distinct !DIGlobalVariable(name: "prefetch_wait", scope: !2, file: !3, line: 3129, type: !183, isLocal: true, isDefinition: true)
!2012 = !DIGlobalVariableExpression(var: !2013, expr: !DIExpression())
!2013 = distinct !DIGlobalVariable(name: "prefetch_done", scope: !2, file: !3, line: 3130, type: !183, isLocal: true, isDefinition: true)
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "seq_thread_shutdown", scope: !2, file: !3, line: 3158, type: !2016, isLocal: true, isDefinition: true)
!2016 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !742)
!2017 = !DIGlobalVariableExpression(var: !2018, expr: !DIExpression())
!2018 = distinct !DIGlobalVariable(name: "monoton_cfra", scope: !2, file: !3, line: 3160, type: !45, isLocal: true, isDefinition: true)
!2019 = !DIGlobalVariableExpression(var: !2020, expr: !DIExpression())
!2020 = distinct !DIGlobalVariable(name: "seq_last_given_monoton_cfra", scope: !2, file: !3, line: 3159, type: !2021, isLocal: true, isDefinition: true)
!2021 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !45)
!2022 = !DIDerivedType(tag: DW_TAG_typedef, name: "SequencerDrawView", file: !104, line: 385, baseType: !2023)
!2023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2024, size: 64)
!2024 = !DISubroutineType(types: !2025)
!2025 = !{!1782, !313, !389, !45, !45, !7, !45, !742, !742, !45, !498}
!2026 = !{i32 7, !"Dwarf Version", i32 4}
!2027 = !{i32 2, !"Debug Info Version", i32 3}
!2028 = !{i32 1, !"wchar_size", i32 4}
!2029 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2030 = distinct !DISubprogram(name: "BKE_sequencer_base_recursive_apply", scope: !3, file: !3, line: 116, type: !2031, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2031 = !DISubroutineType(types: !2032)
!2032 = !{!45, !202, !2033, !129}
!2033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2034 = !DISubroutineType(types: !2035)
!2035 = !{!45, !204, !129}
!2036 = !{}
!2037 = !DILocalVariable(name: "seqbase", arg: 1, scope: !2030, file: !3, line: 116, type: !202)
!2038 = !DILocation(line: 116, column: 50, scope: !2030)
!2039 = !DILocalVariable(name: "apply_func", arg: 2, scope: !2030, file: !3, line: 116, type: !2033)
!2040 = !DILocation(line: 116, column: 65, scope: !2030)
!2041 = !DILocalVariable(name: "arg", arg: 3, scope: !2030, file: !3, line: 116, type: !129)
!2042 = !DILocation(line: 116, column: 107, scope: !2030)
!2043 = !DILocalVariable(name: "iseq", scope: !2030, file: !3, line: 118, type: !204)
!2044 = !DILocation(line: 118, column: 12, scope: !2030)
!2045 = !DILocation(line: 119, column: 14, scope: !2046)
!2046 = distinct !DILexicalBlock(scope: !2030, file: !3, line: 119, column: 2)
!2047 = !DILocation(line: 119, column: 23, scope: !2046)
!2048 = !DILocation(line: 119, column: 12, scope: !2046)
!2049 = !DILocation(line: 119, column: 7, scope: !2046)
!2050 = !DILocation(line: 119, column: 30, scope: !2051)
!2051 = distinct !DILexicalBlock(scope: !2046, file: !3, line: 119, column: 2)
!2052 = !DILocation(line: 119, column: 2, scope: !2046)
!2053 = !DILocation(line: 120, column: 37, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2055, file: !3, line: 120, column: 7)
!2055 = distinct !DILexicalBlock(scope: !2051, file: !3, line: 119, column: 55)
!2056 = !DILocation(line: 120, column: 43, scope: !2054)
!2057 = !DILocation(line: 120, column: 55, scope: !2054)
!2058 = !DILocation(line: 120, column: 7, scope: !2054)
!2059 = !DILocation(line: 120, column: 60, scope: !2054)
!2060 = !DILocation(line: 120, column: 7, scope: !2055)
!2061 = !DILocation(line: 121, column: 4, scope: !2054)
!2062 = !DILocation(line: 122, column: 2, scope: !2055)
!2063 = !DILocation(line: 119, column: 43, scope: !2051)
!2064 = !DILocation(line: 119, column: 49, scope: !2051)
!2065 = !DILocation(line: 119, column: 41, scope: !2051)
!2066 = !DILocation(line: 119, column: 2, scope: !2051)
!2067 = distinct !{!2067, !2052, !2068}
!2068 = !DILocation(line: 122, column: 2, scope: !2046)
!2069 = !DILocation(line: 123, column: 2, scope: !2030)
!2070 = !DILocation(line: 124, column: 1, scope: !2030)
!2071 = distinct !DISubprogram(name: "BKE_sequencer_recursive_apply", scope: !3, file: !3, line: 126, type: !2072, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2072 = !DISubroutineType(types: !2073)
!2073 = !{!45, !204, !2033, !129}
!2074 = !DILocalVariable(name: "seq", arg: 1, scope: !2071, file: !3, line: 126, type: !204)
!2075 = !DILocation(line: 126, column: 45, scope: !2071)
!2076 = !DILocalVariable(name: "apply_func", arg: 2, scope: !2071, file: !3, line: 126, type: !2033)
!2077 = !DILocation(line: 126, column: 56, scope: !2071)
!2078 = !DILocalVariable(name: "arg", arg: 3, scope: !2071, file: !3, line: 126, type: !129)
!2079 = !DILocation(line: 126, column: 95, scope: !2071)
!2080 = !DILocalVariable(name: "ret", scope: !2071, file: !3, line: 128, type: !45)
!2081 = !DILocation(line: 128, column: 6, scope: !2071)
!2082 = !DILocation(line: 128, column: 12, scope: !2071)
!2083 = !DILocation(line: 128, column: 23, scope: !2071)
!2084 = !DILocation(line: 128, column: 28, scope: !2071)
!2085 = !DILocation(line: 130, column: 6, scope: !2086)
!2086 = distinct !DILexicalBlock(scope: !2071, file: !3, line: 130, column: 6)
!2087 = !DILocation(line: 130, column: 10, scope: !2086)
!2088 = !DILocation(line: 130, column: 6, scope: !2071)
!2089 = !DILocation(line: 131, column: 3, scope: !2086)
!2090 = !DILocation(line: 133, column: 6, scope: !2091)
!2091 = distinct !DILexicalBlock(scope: !2071, file: !3, line: 133, column: 6)
!2092 = !DILocation(line: 133, column: 10, scope: !2091)
!2093 = !DILocation(line: 133, column: 13, scope: !2091)
!2094 = !DILocation(line: 133, column: 18, scope: !2091)
!2095 = !DILocation(line: 133, column: 26, scope: !2091)
!2096 = !DILocation(line: 133, column: 6, scope: !2071)
!2097 = !DILocation(line: 134, column: 45, scope: !2091)
!2098 = !DILocation(line: 134, column: 50, scope: !2091)
!2099 = !DILocation(line: 134, column: 59, scope: !2091)
!2100 = !DILocation(line: 134, column: 71, scope: !2091)
!2101 = !DILocation(line: 134, column: 9, scope: !2091)
!2102 = !DILocation(line: 134, column: 7, scope: !2091)
!2103 = !DILocation(line: 134, column: 3, scope: !2091)
!2104 = !DILocation(line: 136, column: 9, scope: !2071)
!2105 = !DILocation(line: 136, column: 2, scope: !2071)
!2106 = !DILocation(line: 137, column: 1, scope: !2071)
!2107 = distinct !DISubprogram(name: "BKE_sequence_free", scope: !3, file: !3, line: 237, type: !2108, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2108 = !DISubroutineType(types: !2109)
!2109 = !{null, !1744, !204}
!2110 = !DILocalVariable(name: "scene", arg: 1, scope: !2107, file: !3, line: 237, type: !1744)
!2111 = !DILocation(line: 237, column: 31, scope: !2107)
!2112 = !DILocalVariable(name: "seq", arg: 2, scope: !2107, file: !3, line: 237, type: !204)
!2113 = !DILocation(line: 237, column: 48, scope: !2107)
!2114 = !DILocation(line: 239, column: 23, scope: !2107)
!2115 = !DILocation(line: 239, column: 30, scope: !2107)
!2116 = !DILocation(line: 239, column: 2, scope: !2107)
!2117 = !DILocation(line: 240, column: 1, scope: !2107)
!2118 = distinct !DISubprogram(name: "BKE_sequence_free_ex", scope: !3, file: !3, line: 183, type: !2119, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2119 = !DISubroutineType(types: !2120)
!2120 = !{null, !1744, !204, !2121}
!2121 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !742)
!2122 = !DILocalVariable(name: "scene", arg: 1, scope: !2118, file: !3, line: 183, type: !1744)
!2123 = !DILocation(line: 183, column: 41, scope: !2118)
!2124 = !DILocalVariable(name: "seq", arg: 2, scope: !2118, file: !3, line: 183, type: !204)
!2125 = !DILocation(line: 183, column: 58, scope: !2118)
!2126 = !DILocalVariable(name: "do_cache", arg: 3, scope: !2118, file: !3, line: 183, type: !2121)
!2127 = !DILocation(line: 183, column: 74, scope: !2118)
!2128 = !DILocation(line: 185, column: 6, scope: !2129)
!2129 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 185, column: 6)
!2130 = !DILocation(line: 185, column: 11, scope: !2129)
!2131 = !DILocation(line: 185, column: 6, scope: !2118)
!2132 = !DILocation(line: 186, column: 18, scope: !2129)
!2133 = !DILocation(line: 186, column: 23, scope: !2129)
!2134 = !DILocation(line: 186, column: 3, scope: !2129)
!2135 = !DILocation(line: 188, column: 6, scope: !2136)
!2136 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 188, column: 6)
!2137 = !DILocation(line: 188, column: 11, scope: !2136)
!2138 = !DILocation(line: 188, column: 6, scope: !2118)
!2139 = !DILocation(line: 189, column: 17, scope: !2140)
!2140 = distinct !DILexicalBlock(scope: !2136, file: !3, line: 188, column: 17)
!2141 = !DILocation(line: 189, column: 22, scope: !2140)
!2142 = !DILocation(line: 189, column: 3, scope: !2140)
!2143 = !DILocation(line: 190, column: 3, scope: !2140)
!2144 = !DILocation(line: 190, column: 8, scope: !2140)
!2145 = !DILocation(line: 190, column: 13, scope: !2140)
!2146 = !DILocation(line: 191, column: 2, scope: !2140)
!2147 = !DILocation(line: 193, column: 6, scope: !2148)
!2148 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 193, column: 6)
!2149 = !DILocation(line: 193, column: 11, scope: !2148)
!2150 = !DILocation(line: 193, column: 16, scope: !2148)
!2151 = !DILocation(line: 193, column: 6, scope: !2118)
!2152 = !DILocalVariable(name: "sh", scope: !2153, file: !3, line: 194, type: !1858)
!2153 = distinct !DILexicalBlock(scope: !2148, file: !3, line: 193, column: 35)
!2154 = !DILocation(line: 194, column: 26, scope: !2153)
!2155 = !DILocation(line: 194, column: 55, scope: !2153)
!2156 = !DILocation(line: 194, column: 31, scope: !2153)
!2157 = !DILocation(line: 196, column: 6, scope: !2153)
!2158 = !DILocation(line: 196, column: 11, scope: !2153)
!2159 = !DILocation(line: 196, column: 3, scope: !2153)
!2160 = !DILocation(line: 197, column: 2, scope: !2153)
!2161 = !DILocation(line: 199, column: 6, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 199, column: 6)
!2163 = !DILocation(line: 199, column: 11, scope: !2162)
!2164 = !DILocation(line: 199, column: 6, scope: !2118)
!2165 = !DILocation(line: 200, column: 10, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2162, file: !3, line: 199, column: 18)
!2167 = !DILocation(line: 200, column: 15, scope: !2166)
!2168 = !DILocation(line: 200, column: 23, scope: !2166)
!2169 = !DILocation(line: 200, column: 25, scope: !2166)
!2170 = !DILocation(line: 201, column: 2, scope: !2166)
!2171 = !DILocation(line: 206, column: 6, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 206, column: 6)
!2173 = !DILocation(line: 206, column: 6, scope: !2118)
!2174 = !DILocalVariable(name: "ed", scope: !2175, file: !3, line: 207, type: !2176)
!2175 = distinct !DILexicalBlock(scope: !2172, file: !3, line: 206, column: 13)
!2176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2177, size: 64)
!2177 = !DIDerivedType(tag: DW_TAG_typedef, name: "Editing", file: !16, line: 213, baseType: !699)
!2178 = !DILocation(line: 207, column: 12, scope: !2175)
!2179 = !DILocation(line: 207, column: 17, scope: !2175)
!2180 = !DILocation(line: 207, column: 24, scope: !2175)
!2181 = !DILocation(line: 209, column: 7, scope: !2182)
!2182 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 209, column: 7)
!2183 = !DILocation(line: 209, column: 11, scope: !2182)
!2184 = !DILocation(line: 209, column: 22, scope: !2182)
!2185 = !DILocation(line: 209, column: 19, scope: !2182)
!2186 = !DILocation(line: 209, column: 7, scope: !2175)
!2187 = !DILocation(line: 210, column: 4, scope: !2182)
!2188 = !DILocation(line: 210, column: 8, scope: !2182)
!2189 = !DILocation(line: 210, column: 16, scope: !2182)
!2190 = !DILocation(line: 212, column: 7, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 212, column: 7)
!2192 = !DILocation(line: 212, column: 12, scope: !2191)
!2193 = !DILocation(line: 212, column: 24, scope: !2191)
!2194 = !DILocation(line: 212, column: 27, scope: !2191)
!2195 = !DILocation(line: 212, column: 7, scope: !2175)
!2196 = !DILocation(line: 213, column: 29, scope: !2191)
!2197 = !DILocation(line: 213, column: 36, scope: !2191)
!2198 = !DILocation(line: 213, column: 41, scope: !2191)
!2199 = !DILocation(line: 213, column: 4, scope: !2191)
!2200 = !DILocation(line: 215, column: 21, scope: !2175)
!2201 = !DILocation(line: 215, column: 28, scope: !2175)
!2202 = !DILocation(line: 215, column: 3, scope: !2175)
!2203 = !DILocation(line: 216, column: 2, scope: !2175)
!2204 = !DILocation(line: 219, column: 30, scope: !2118)
!2205 = !DILocation(line: 219, column: 2, scope: !2118)
!2206 = !DILocation(line: 228, column: 6, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 228, column: 6)
!2208 = !DILocation(line: 228, column: 6, scope: !2118)
!2209 = !DILocation(line: 229, column: 7, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2211, file: !3, line: 229, column: 7)
!2211 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 228, column: 16)
!2212 = !DILocation(line: 229, column: 7, scope: !2211)
!2213 = !DILocation(line: 230, column: 34, scope: !2214)
!2214 = distinct !DILexicalBlock(scope: !2210, file: !3, line: 229, column: 14)
!2215 = !DILocation(line: 230, column: 41, scope: !2214)
!2216 = !DILocation(line: 230, column: 4, scope: !2214)
!2217 = !DILocation(line: 231, column: 3, scope: !2214)
!2218 = !DILocation(line: 232, column: 2, scope: !2211)
!2219 = !DILocation(line: 234, column: 2, scope: !2118)
!2220 = !DILocation(line: 234, column: 12, scope: !2118)
!2221 = !DILocation(line: 235, column: 1, scope: !2118)
!2222 = distinct !DISubprogram(name: "BKE_sequencer_editing_get", scope: !3, file: !3, line: 257, type: !2223, scopeLine: 258, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2223 = !DISubroutineType(types: !2224)
!2224 = !{!698, !1744, !742}
!2225 = !DILocalVariable(name: "scene", arg: 1, scope: !2222, file: !3, line: 257, type: !1744)
!2226 = !DILocation(line: 257, column: 43, scope: !2222)
!2227 = !DILocalVariable(name: "alloc", arg: 2, scope: !2222, file: !3, line: 257, type: !742)
!2228 = !DILocation(line: 257, column: 55, scope: !2222)
!2229 = !DILocation(line: 259, column: 6, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2222, file: !3, line: 259, column: 6)
!2231 = !DILocation(line: 259, column: 6, scope: !2222)
!2232 = !DILocation(line: 260, column: 32, scope: !2233)
!2233 = distinct !DILexicalBlock(scope: !2230, file: !3, line: 259, column: 13)
!2234 = !DILocation(line: 260, column: 3, scope: !2233)
!2235 = !DILocation(line: 261, column: 2, scope: !2233)
!2236 = !DILocation(line: 262, column: 9, scope: !2222)
!2237 = !DILocation(line: 262, column: 16, scope: !2222)
!2238 = !DILocation(line: 262, column: 2, scope: !2222)
!2239 = distinct !DISubprogram(name: "BKE_sequencer_editing_ensure", scope: !3, file: !3, line: 400, type: !2240, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!698, !1744}
!2242 = !DILocalVariable(name: "scene", arg: 1, scope: !2239, file: !3, line: 400, type: !1744)
!2243 = !DILocation(line: 400, column: 46, scope: !2239)
!2244 = !DILocation(line: 402, column: 6, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2239, file: !3, line: 402, column: 6)
!2246 = !DILocation(line: 402, column: 13, scope: !2245)
!2247 = !DILocation(line: 402, column: 16, scope: !2245)
!2248 = !DILocation(line: 402, column: 6, scope: !2239)
!2249 = !DILocalVariable(name: "ed", scope: !2250, file: !3, line: 403, type: !2176)
!2250 = distinct !DILexicalBlock(scope: !2245, file: !3, line: 402, column: 25)
!2251 = !DILocation(line: 403, column: 12, scope: !2250)
!2252 = !DILocation(line: 405, column: 20, scope: !2250)
!2253 = !DILocation(line: 405, column: 8, scope: !2250)
!2254 = !DILocation(line: 405, column: 15, scope: !2250)
!2255 = !DILocation(line: 405, column: 18, scope: !2250)
!2256 = !DILocation(line: 405, column: 6, scope: !2250)
!2257 = !DILocation(line: 406, column: 19, scope: !2250)
!2258 = !DILocation(line: 406, column: 23, scope: !2250)
!2259 = !DILocation(line: 406, column: 3, scope: !2250)
!2260 = !DILocation(line: 406, column: 7, scope: !2250)
!2261 = !DILocation(line: 406, column: 16, scope: !2250)
!2262 = !DILocation(line: 407, column: 2, scope: !2250)
!2263 = !DILocation(line: 409, column: 9, scope: !2239)
!2264 = !DILocation(line: 409, column: 16, scope: !2239)
!2265 = !DILocation(line: 409, column: 2, scope: !2239)
!2266 = distinct !DISubprogram(name: "BKE_sequencer_free_clipboard", scope: !3, file: !3, line: 265, type: !2267, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2267 = !DISubroutineType(types: !2268)
!2268 = !{null}
!2269 = !DILocalVariable(name: "seq", scope: !2266, file: !3, line: 267, type: !204)
!2270 = !DILocation(line: 267, column: 12, scope: !2266)
!2271 = !DILocalVariable(name: "nseq", scope: !2266, file: !3, line: 267, type: !204)
!2272 = !DILocation(line: 267, column: 18, scope: !2266)
!2273 = !DILocation(line: 269, column: 2, scope: !2266)
!2274 = !DILocation(line: 271, column: 31, scope: !2275)
!2275 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 271, column: 2)
!2276 = !DILocation(line: 271, column: 13, scope: !2275)
!2277 = !DILocation(line: 271, column: 11, scope: !2275)
!2278 = !DILocation(line: 271, column: 7, scope: !2275)
!2279 = !DILocation(line: 271, column: 38, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2275, file: !3, line: 271, column: 2)
!2281 = !DILocation(line: 271, column: 2, scope: !2275)
!2282 = !DILocation(line: 272, column: 10, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 271, column: 55)
!2284 = !DILocation(line: 272, column: 15, scope: !2283)
!2285 = !DILocation(line: 272, column: 8, scope: !2283)
!2286 = !DILocation(line: 273, column: 35, scope: !2283)
!2287 = !DILocation(line: 273, column: 3, scope: !2283)
!2288 = !DILocation(line: 274, column: 2, scope: !2283)
!2289 = !DILocation(line: 271, column: 49, scope: !2280)
!2290 = !DILocation(line: 271, column: 47, scope: !2280)
!2291 = !DILocation(line: 271, column: 2, scope: !2280)
!2292 = distinct !{!2292, !2281, !2293}
!2293 = !DILocation(line: 274, column: 2, scope: !2275)
!2294 = !DILocation(line: 275, column: 2, scope: !2266)
!2295 = !DILocation(line: 276, column: 1, scope: !2266)
!2296 = distinct !DISubprogram(name: "BKE_sequencer_base_clipboard_pointers_free", scope: !3, file: !3, line: 372, type: !2297, scopeLine: 373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2297 = !DISubroutineType(types: !2298)
!2298 = !{null, !202}
!2299 = !DILocalVariable(name: "seqbase", arg: 1, scope: !2296, file: !3, line: 372, type: !202)
!2300 = !DILocation(line: 372, column: 59, scope: !2296)
!2301 = !DILocalVariable(name: "seq", scope: !2296, file: !3, line: 374, type: !204)
!2302 = !DILocation(line: 374, column: 12, scope: !2296)
!2303 = !DILocation(line: 375, column: 13, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2296, file: !3, line: 375, column: 2)
!2305 = !DILocation(line: 375, column: 22, scope: !2304)
!2306 = !DILocation(line: 375, column: 11, scope: !2304)
!2307 = !DILocation(line: 375, column: 7, scope: !2304)
!2308 = !DILocation(line: 375, column: 29, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 375, column: 2)
!2310 = !DILocation(line: 375, column: 2, scope: !2304)
!2311 = !DILocation(line: 376, column: 40, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2309, file: !3, line: 375, column: 51)
!2313 = !DILocation(line: 376, column: 3, scope: !2312)
!2314 = !DILocation(line: 377, column: 47, scope: !2312)
!2315 = !DILocation(line: 377, column: 52, scope: !2312)
!2316 = !DILocation(line: 377, column: 3, scope: !2312)
!2317 = !DILocation(line: 378, column: 2, scope: !2312)
!2318 = !DILocation(line: 375, column: 40, scope: !2309)
!2319 = !DILocation(line: 375, column: 45, scope: !2309)
!2320 = !DILocation(line: 375, column: 38, scope: !2309)
!2321 = !DILocation(line: 375, column: 2, scope: !2309)
!2322 = distinct !{!2322, !2310, !2323}
!2323 = !DILocation(line: 378, column: 2, scope: !2304)
!2324 = !DILocation(line: 379, column: 1, scope: !2296)
!2325 = distinct !DISubprogram(name: "seq_free_sequence_recurse", scope: !3, file: !3, line: 244, type: !2108, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2326 = !DILocalVariable(name: "scene", arg: 1, scope: !2325, file: !3, line: 244, type: !1744)
!2327 = !DILocation(line: 244, column: 46, scope: !2325)
!2328 = !DILocalVariable(name: "seq", arg: 2, scope: !2325, file: !3, line: 244, type: !204)
!2329 = !DILocation(line: 244, column: 63, scope: !2325)
!2330 = !DILocalVariable(name: "iseq", scope: !2325, file: !3, line: 246, type: !204)
!2331 = !DILocation(line: 246, column: 12, scope: !2325)
!2332 = !DILocalVariable(name: "iseq_next", scope: !2325, file: !3, line: 246, type: !204)
!2333 = !DILocation(line: 246, column: 19, scope: !2325)
!2334 = !DILocation(line: 248, column: 14, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2325, file: !3, line: 248, column: 2)
!2336 = !DILocation(line: 248, column: 19, scope: !2335)
!2337 = !DILocation(line: 248, column: 27, scope: !2335)
!2338 = !DILocation(line: 248, column: 12, scope: !2335)
!2339 = !DILocation(line: 248, column: 7, scope: !2335)
!2340 = !DILocation(line: 248, column: 34, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2335, file: !3, line: 248, column: 2)
!2342 = !DILocation(line: 248, column: 2, scope: !2335)
!2343 = !DILocation(line: 249, column: 15, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2341, file: !3, line: 248, column: 58)
!2345 = !DILocation(line: 249, column: 21, scope: !2344)
!2346 = !DILocation(line: 249, column: 13, scope: !2344)
!2347 = !DILocation(line: 250, column: 29, scope: !2344)
!2348 = !DILocation(line: 250, column: 36, scope: !2344)
!2349 = !DILocation(line: 250, column: 3, scope: !2344)
!2350 = !DILocation(line: 251, column: 2, scope: !2344)
!2351 = !DILocation(line: 248, column: 47, scope: !2341)
!2352 = !DILocation(line: 248, column: 45, scope: !2341)
!2353 = !DILocation(line: 248, column: 2, scope: !2341)
!2354 = distinct !{!2354, !2342, !2355}
!2355 = !DILocation(line: 251, column: 2, scope: !2335)
!2356 = !DILocation(line: 253, column: 23, scope: !2325)
!2357 = !DILocation(line: 253, column: 30, scope: !2325)
!2358 = !DILocation(line: 253, column: 2, scope: !2325)
!2359 = !DILocation(line: 254, column: 1, scope: !2325)
!2360 = distinct !DISubprogram(name: "BLI_listbase_clear", scope: !2361, file: !2361, line: 89, type: !2362, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2361 = !DIFile(filename: "blender/source/blender/blenlib/BLI_listbase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2362 = !DISubroutineType(types: !2363)
!2363 = !{null, !2364}
!2364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64)
!2365 = !DILocalVariable(name: "lb", arg: 1, scope: !2360, file: !2361, line: 89, type: !2364)
!2366 = !DILocation(line: 89, column: 53, scope: !2360)
!2367 = !DILocation(line: 89, column: 71, scope: !2360)
!2368 = !DILocation(line: 89, column: 75, scope: !2360)
!2369 = !DILocation(line: 89, column: 80, scope: !2360)
!2370 = !DILocation(line: 89, column: 59, scope: !2360)
!2371 = !DILocation(line: 89, column: 63, scope: !2360)
!2372 = !DILocation(line: 89, column: 69, scope: !2360)
!2373 = !DILocation(line: 89, column: 93, scope: !2360)
!2374 = distinct !DISubprogram(name: "BKE_sequence_clipboard_pointers_free", scope: !3, file: !3, line: 346, type: !2375, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{null, !204}
!2377 = !DILocalVariable(name: "seq", arg: 1, scope: !2374, file: !3, line: 346, type: !204)
!2378 = !DILocation(line: 346, column: 53, scope: !2374)
!2379 = !DILocation(line: 348, column: 32, scope: !2374)
!2380 = !DILocation(line: 348, column: 37, scope: !2374)
!2381 = !DILocation(line: 348, column: 24, scope: !2374)
!2382 = !DILocation(line: 348, column: 2, scope: !2374)
!2383 = !DILocation(line: 349, column: 32, scope: !2374)
!2384 = !DILocation(line: 349, column: 37, scope: !2374)
!2385 = !DILocation(line: 349, column: 24, scope: !2374)
!2386 = !DILocation(line: 349, column: 2, scope: !2374)
!2387 = !DILocation(line: 350, column: 32, scope: !2374)
!2388 = !DILocation(line: 350, column: 37, scope: !2374)
!2389 = !DILocation(line: 350, column: 24, scope: !2374)
!2390 = !DILocation(line: 350, column: 2, scope: !2374)
!2391 = !DILocation(line: 351, column: 32, scope: !2374)
!2392 = !DILocation(line: 351, column: 37, scope: !2374)
!2393 = !DILocation(line: 351, column: 24, scope: !2374)
!2394 = !DILocation(line: 351, column: 2, scope: !2374)
!2395 = !DILocation(line: 352, column: 32, scope: !2374)
!2396 = !DILocation(line: 352, column: 37, scope: !2374)
!2397 = !DILocation(line: 352, column: 24, scope: !2374)
!2398 = !DILocation(line: 352, column: 2, scope: !2374)
!2399 = !DILocation(line: 353, column: 1, scope: !2374)
!2400 = distinct !DISubprogram(name: "seqclipboard_ptr_free", scope: !3, file: !3, line: 285, type: !2401, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2401 = !DISubroutineType(types: !2402)
!2402 = !{null, !122}
!2403 = !DILocalVariable(name: "id_pt", arg: 1, scope: !2400, file: !3, line: 285, type: !122)
!2404 = !DILocation(line: 285, column: 40, scope: !2400)
!2405 = !DILocation(line: 287, column: 6, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2400, file: !3, line: 287, column: 6)
!2407 = !DILocation(line: 287, column: 6, scope: !2400)
!2408 = !DILocation(line: 289, column: 3, scope: !2409)
!2409 = distinct !DILexicalBlock(scope: !2406, file: !3, line: 287, column: 13)
!2410 = !DILocation(line: 289, column: 13, scope: !2409)
!2411 = !DILocation(line: 290, column: 3, scope: !2409)
!2412 = !DILocation(line: 290, column: 9, scope: !2409)
!2413 = !DILocation(line: 291, column: 2, scope: !2409)
!2414 = !DILocation(line: 292, column: 1, scope: !2400)
!2415 = distinct !DISubprogram(name: "BKE_sequence_clipboard_pointers_store", scope: !3, file: !3, line: 354, type: !2375, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2416 = !DILocalVariable(name: "seq", arg: 1, scope: !2415, file: !3, line: 354, type: !204)
!2417 = !DILocation(line: 354, column: 54, scope: !2415)
!2418 = !DILocation(line: 356, column: 33, scope: !2415)
!2419 = !DILocation(line: 356, column: 38, scope: !2415)
!2420 = !DILocation(line: 356, column: 25, scope: !2415)
!2421 = !DILocation(line: 356, column: 2, scope: !2415)
!2422 = !DILocation(line: 357, column: 33, scope: !2415)
!2423 = !DILocation(line: 357, column: 38, scope: !2415)
!2424 = !DILocation(line: 357, column: 25, scope: !2415)
!2425 = !DILocation(line: 357, column: 2, scope: !2415)
!2426 = !DILocation(line: 358, column: 33, scope: !2415)
!2427 = !DILocation(line: 358, column: 38, scope: !2415)
!2428 = !DILocation(line: 358, column: 25, scope: !2415)
!2429 = !DILocation(line: 358, column: 2, scope: !2415)
!2430 = !DILocation(line: 359, column: 33, scope: !2415)
!2431 = !DILocation(line: 359, column: 38, scope: !2415)
!2432 = !DILocation(line: 359, column: 25, scope: !2415)
!2433 = !DILocation(line: 359, column: 2, scope: !2415)
!2434 = !DILocation(line: 360, column: 33, scope: !2415)
!2435 = !DILocation(line: 360, column: 38, scope: !2415)
!2436 = !DILocation(line: 360, column: 25, scope: !2415)
!2437 = !DILocation(line: 360, column: 2, scope: !2415)
!2438 = !DILocation(line: 361, column: 1, scope: !2415)
!2439 = distinct !DISubprogram(name: "seqclipboard_ptr_store", scope: !3, file: !3, line: 293, type: !2401, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2440 = !DILocalVariable(name: "id_pt", arg: 1, scope: !2439, file: !3, line: 293, type: !122)
!2441 = !DILocation(line: 293, column: 41, scope: !2439)
!2442 = !DILocation(line: 295, column: 6, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 295, column: 6)
!2444 = !DILocation(line: 295, column: 6, scope: !2439)
!2445 = !DILocalVariable(name: "id_prev", scope: !2446, file: !3, line: 296, type: !123)
!2446 = distinct !DILexicalBlock(scope: !2443, file: !3, line: 295, column: 13)
!2447 = !DILocation(line: 296, column: 7, scope: !2446)
!2448 = !DILocation(line: 296, column: 17, scope: !2446)
!2449 = !DILocation(line: 297, column: 11, scope: !2446)
!2450 = !DILocation(line: 297, column: 25, scope: !2446)
!2451 = !DILocation(line: 297, column: 3, scope: !2446)
!2452 = !DILocation(line: 297, column: 9, scope: !2446)
!2453 = !DILocation(line: 298, column: 18, scope: !2446)
!2454 = !DILocation(line: 298, column: 3, scope: !2446)
!2455 = !DILocation(line: 298, column: 10, scope: !2446)
!2456 = !DILocation(line: 298, column: 16, scope: !2446)
!2457 = !DILocation(line: 299, column: 2, scope: !2446)
!2458 = !DILocation(line: 300, column: 1, scope: !2439)
!2459 = distinct !DISubprogram(name: "BKE_sequence_clipboard_pointers_restore", scope: !3, file: !3, line: 362, type: !2460, scopeLine: 363, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2460 = !DISubroutineType(types: !2461)
!2461 = !{null, !204, !2462}
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = !DIDerivedType(tag: DW_TAG_typedef, name: "Main", file: !1906, line: 104, baseType: !1905)
!2464 = !DILocalVariable(name: "seq", arg: 1, scope: !2459, file: !3, line: 362, type: !204)
!2465 = !DILocation(line: 362, column: 56, scope: !2459)
!2466 = !DILocalVariable(name: "bmain", arg: 2, scope: !2459, file: !3, line: 362, type: !2462)
!2467 = !DILocation(line: 362, column: 67, scope: !2459)
!2468 = !DILocation(line: 364, column: 27, scope: !2459)
!2469 = !DILocation(line: 364, column: 42, scope: !2459)
!2470 = !DILocation(line: 364, column: 47, scope: !2459)
!2471 = !DILocation(line: 364, column: 34, scope: !2459)
!2472 = !DILocation(line: 364, column: 2, scope: !2459)
!2473 = !DILocation(line: 365, column: 27, scope: !2459)
!2474 = !DILocation(line: 365, column: 42, scope: !2459)
!2475 = !DILocation(line: 365, column: 47, scope: !2459)
!2476 = !DILocation(line: 365, column: 34, scope: !2459)
!2477 = !DILocation(line: 365, column: 2, scope: !2459)
!2478 = !DILocation(line: 366, column: 27, scope: !2459)
!2479 = !DILocation(line: 366, column: 42, scope: !2459)
!2480 = !DILocation(line: 366, column: 47, scope: !2459)
!2481 = !DILocation(line: 366, column: 34, scope: !2459)
!2482 = !DILocation(line: 366, column: 2, scope: !2459)
!2483 = !DILocation(line: 367, column: 27, scope: !2459)
!2484 = !DILocation(line: 367, column: 42, scope: !2459)
!2485 = !DILocation(line: 367, column: 47, scope: !2459)
!2486 = !DILocation(line: 367, column: 34, scope: !2459)
!2487 = !DILocation(line: 367, column: 2, scope: !2459)
!2488 = !DILocation(line: 368, column: 27, scope: !2459)
!2489 = !DILocation(line: 368, column: 42, scope: !2459)
!2490 = !DILocation(line: 368, column: 47, scope: !2459)
!2491 = !DILocation(line: 368, column: 34, scope: !2459)
!2492 = !DILocation(line: 368, column: 2, scope: !2459)
!2493 = !DILocation(line: 369, column: 1, scope: !2459)
!2494 = distinct !DISubprogram(name: "seqclipboard_ptr_restore", scope: !3, file: !3, line: 301, type: !2495, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2495 = !DISubroutineType(types: !2496)
!2496 = !{null, !2462, !122}
!2497 = !DILocalVariable(name: "bmain", arg: 1, scope: !2494, file: !3, line: 301, type: !2462)
!2498 = !DILocation(line: 301, column: 44, scope: !2494)
!2499 = !DILocalVariable(name: "id_pt", arg: 2, scope: !2494, file: !3, line: 301, type: !122)
!2500 = !DILocation(line: 301, column: 56, scope: !2494)
!2501 = !DILocation(line: 303, column: 6, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 303, column: 6)
!2503 = !DILocation(line: 303, column: 6, scope: !2494)
!2504 = !DILocalVariable(name: "lb", scope: !2505, file: !3, line: 304, type: !2506)
!2505 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 303, column: 13)
!2506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2507, size: 64)
!2507 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !183)
!2508 = !DILocation(line: 304, column: 19, scope: !2505)
!2509 = !DILocation(line: 304, column: 38, scope: !2505)
!2510 = !DILocation(line: 304, column: 45, scope: !2505)
!2511 = !DILocation(line: 304, column: 24, scope: !2505)
!2512 = !DILocalVariable(name: "id_restore", scope: !2505, file: !3, line: 305, type: !129)
!2513 = !DILocation(line: 305, column: 9, scope: !2505)
!2514 = !DILocation(line: 308, column: 21, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2505, file: !3, line: 308, column: 7)
!2516 = !DILocation(line: 308, column: 26, scope: !2515)
!2517 = !DILocation(line: 308, column: 34, scope: !2515)
!2518 = !DILocation(line: 308, column: 25, scope: !2515)
!2519 = !DILocation(line: 308, column: 7, scope: !2515)
!2520 = !DILocation(line: 308, column: 41, scope: !2515)
!2521 = !DILocation(line: 308, column: 7, scope: !2505)
!2522 = !DILocation(line: 310, column: 18, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2515, file: !3, line: 308, column: 48)
!2524 = !DILocation(line: 310, column: 26, scope: !2523)
!2525 = !DILocation(line: 310, column: 17, scope: !2523)
!2526 = !DILocation(line: 310, column: 15, scope: !2523)
!2527 = !DILocation(line: 311, column: 3, scope: !2523)
!2528 = !DILocation(line: 314, column: 32, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2515, file: !3, line: 312, column: 8)
!2530 = !DILocation(line: 314, column: 37, scope: !2529)
!2531 = !DILocation(line: 314, column: 45, scope: !2529)
!2532 = !DILocation(line: 314, column: 36, scope: !2529)
!2533 = !DILocation(line: 314, column: 50, scope: !2529)
!2534 = !DILocation(line: 314, column: 17, scope: !2529)
!2535 = !DILocation(line: 314, column: 15, scope: !2529)
!2536 = !DILocation(line: 317, column: 7, scope: !2537)
!2537 = distinct !DILexicalBlock(scope: !2505, file: !3, line: 317, column: 7)
!2538 = !DILocation(line: 317, column: 18, scope: !2537)
!2539 = !DILocation(line: 317, column: 7, scope: !2505)
!2540 = !DILocation(line: 319, column: 12, scope: !2541)
!2541 = distinct !DILexicalBlock(scope: !2537, file: !3, line: 317, column: 27)
!2542 = !DILocation(line: 319, column: 4, scope: !2541)
!2543 = !DILocation(line: 322, column: 34, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 321, column: 5)
!2545 = distinct !DILexicalBlock(scope: !2541, file: !3, line: 319, column: 29)
!2546 = !DILocation(line: 322, column: 49, scope: !2544)
!2547 = !DILocation(line: 322, column: 57, scope: !2544)
!2548 = !DILocation(line: 322, column: 38, scope: !2544)
!2549 = !DILocation(line: 322, column: 19, scope: !2544)
!2550 = !DILocation(line: 322, column: 17, scope: !2544)
!2551 = !DILocation(line: 323, column: 10, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 323, column: 10)
!2553 = !DILocation(line: 323, column: 21, scope: !2552)
!2554 = !DILocation(line: 323, column: 10, scope: !2544)
!2555 = !DILocation(line: 324, column: 35, scope: !2556)
!2556 = distinct !DILexicalBlock(scope: !2552, file: !3, line: 323, column: 30)
!2557 = !DILocation(line: 324, column: 53, scope: !2556)
!2558 = !DILocation(line: 324, column: 61, scope: !2556)
!2559 = !DILocation(line: 324, column: 42, scope: !2556)
!2560 = !DILocation(line: 324, column: 20, scope: !2556)
!2561 = !DILocation(line: 324, column: 18, scope: !2556)
!2562 = !DILocation(line: 325, column: 24, scope: !2556)
!2563 = !DILocation(line: 325, column: 8, scope: !2556)
!2564 = !DILocation(line: 325, column: 16, scope: !2556)
!2565 = !DILocation(line: 325, column: 22, scope: !2556)
!2566 = !DILocation(line: 326, column: 6, scope: !2556)
!2567 = !DILocation(line: 327, column: 6, scope: !2544)
!2568 = !DILocation(line: 331, column: 34, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 330, column: 5)
!2570 = !DILocation(line: 331, column: 52, scope: !2569)
!2571 = !DILocation(line: 331, column: 60, scope: !2569)
!2572 = !DILocation(line: 331, column: 38, scope: !2569)
!2573 = !DILocation(line: 331, column: 19, scope: !2569)
!2574 = !DILocation(line: 331, column: 17, scope: !2569)
!2575 = !DILocation(line: 332, column: 10, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 332, column: 10)
!2577 = !DILocation(line: 332, column: 21, scope: !2576)
!2578 = !DILocation(line: 332, column: 10, scope: !2569)
!2579 = !DILocation(line: 333, column: 43, scope: !2580)
!2580 = distinct !DILexicalBlock(scope: !2576, file: !3, line: 332, column: 30)
!2581 = !DILocation(line: 333, column: 64, scope: !2580)
!2582 = !DILocation(line: 333, column: 72, scope: !2580)
!2583 = !DILocation(line: 333, column: 50, scope: !2580)
!2584 = !DILocation(line: 333, column: 20, scope: !2580)
!2585 = !DILocation(line: 333, column: 18, scope: !2580)
!2586 = !DILocation(line: 334, column: 24, scope: !2580)
!2587 = !DILocation(line: 334, column: 8, scope: !2580)
!2588 = !DILocation(line: 334, column: 16, scope: !2580)
!2589 = !DILocation(line: 334, column: 22, scope: !2580)
!2590 = !DILocation(line: 335, column: 6, scope: !2580)
!2591 = !DILocation(line: 336, column: 6, scope: !2569)
!2592 = !DILocation(line: 339, column: 3, scope: !2541)
!2593 = !DILocation(line: 341, column: 11, scope: !2505)
!2594 = !DILocation(line: 341, column: 3, scope: !2505)
!2595 = !DILocation(line: 341, column: 9, scope: !2505)
!2596 = !DILocation(line: 342, column: 2, scope: !2505)
!2597 = !DILocation(line: 343, column: 1, scope: !2494)
!2598 = distinct !DISubprogram(name: "BKE_sequencer_base_clipboard_pointers_store", scope: !3, file: !3, line: 380, type: !2297, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2599 = !DILocalVariable(name: "seqbase", arg: 1, scope: !2598, file: !3, line: 380, type: !202)
!2600 = !DILocation(line: 380, column: 60, scope: !2598)
!2601 = !DILocalVariable(name: "seq", scope: !2598, file: !3, line: 382, type: !204)
!2602 = !DILocation(line: 382, column: 12, scope: !2598)
!2603 = !DILocation(line: 383, column: 13, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2598, file: !3, line: 383, column: 2)
!2605 = !DILocation(line: 383, column: 22, scope: !2604)
!2606 = !DILocation(line: 383, column: 11, scope: !2604)
!2607 = !DILocation(line: 383, column: 7, scope: !2604)
!2608 = !DILocation(line: 383, column: 29, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2604, file: !3, line: 383, column: 2)
!2610 = !DILocation(line: 383, column: 2, scope: !2604)
!2611 = !DILocation(line: 384, column: 41, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2609, file: !3, line: 383, column: 51)
!2613 = !DILocation(line: 384, column: 3, scope: !2612)
!2614 = !DILocation(line: 385, column: 48, scope: !2612)
!2615 = !DILocation(line: 385, column: 53, scope: !2612)
!2616 = !DILocation(line: 385, column: 3, scope: !2612)
!2617 = !DILocation(line: 386, column: 2, scope: !2612)
!2618 = !DILocation(line: 383, column: 40, scope: !2609)
!2619 = !DILocation(line: 383, column: 45, scope: !2609)
!2620 = !DILocation(line: 383, column: 38, scope: !2609)
!2621 = !DILocation(line: 383, column: 2, scope: !2609)
!2622 = distinct !{!2622, !2610, !2623}
!2623 = !DILocation(line: 386, column: 2, scope: !2604)
!2624 = !DILocation(line: 387, column: 1, scope: !2598)
!2625 = distinct !DISubprogram(name: "BKE_sequencer_base_clipboard_pointers_restore", scope: !3, file: !3, line: 388, type: !2626, scopeLine: 389, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{null, !202, !2462}
!2628 = !DILocalVariable(name: "seqbase", arg: 1, scope: !2625, file: !3, line: 388, type: !202)
!2629 = !DILocation(line: 388, column: 62, scope: !2625)
!2630 = !DILocalVariable(name: "bmain", arg: 2, scope: !2625, file: !3, line: 388, type: !2462)
!2631 = !DILocation(line: 388, column: 77, scope: !2625)
!2632 = !DILocalVariable(name: "seq", scope: !2625, file: !3, line: 390, type: !204)
!2633 = !DILocation(line: 390, column: 12, scope: !2625)
!2634 = !DILocation(line: 391, column: 13, scope: !2635)
!2635 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 391, column: 2)
!2636 = !DILocation(line: 391, column: 22, scope: !2635)
!2637 = !DILocation(line: 391, column: 11, scope: !2635)
!2638 = !DILocation(line: 391, column: 7, scope: !2635)
!2639 = !DILocation(line: 391, column: 29, scope: !2640)
!2640 = distinct !DILexicalBlock(scope: !2635, file: !3, line: 391, column: 2)
!2641 = !DILocation(line: 391, column: 2, scope: !2635)
!2642 = !DILocation(line: 392, column: 43, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2640, file: !3, line: 391, column: 51)
!2644 = !DILocation(line: 392, column: 48, scope: !2643)
!2645 = !DILocation(line: 392, column: 3, scope: !2643)
!2646 = !DILocation(line: 393, column: 50, scope: !2643)
!2647 = !DILocation(line: 393, column: 55, scope: !2643)
!2648 = !DILocation(line: 393, column: 64, scope: !2643)
!2649 = !DILocation(line: 393, column: 3, scope: !2643)
!2650 = !DILocation(line: 394, column: 2, scope: !2643)
!2651 = !DILocation(line: 391, column: 40, scope: !2640)
!2652 = !DILocation(line: 391, column: 45, scope: !2640)
!2653 = !DILocation(line: 391, column: 38, scope: !2640)
!2654 = !DILocation(line: 391, column: 2, scope: !2640)
!2655 = distinct !{!2655, !2641, !2656}
!2656 = !DILocation(line: 394, column: 2, scope: !2635)
!2657 = !DILocation(line: 395, column: 1, scope: !2625)
!2658 = distinct !DISubprogram(name: "BKE_sequencer_editing_free", scope: !3, file: !3, line: 412, type: !2659, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2659 = !DISubroutineType(types: !2660)
!2660 = !{null, !1744}
!2661 = !DILocalVariable(name: "scene", arg: 1, scope: !2658, file: !3, line: 412, type: !1744)
!2662 = !DILocation(line: 412, column: 40, scope: !2658)
!2663 = !DILocalVariable(name: "ed", scope: !2658, file: !3, line: 414, type: !2176)
!2664 = !DILocation(line: 414, column: 11, scope: !2658)
!2665 = !DILocation(line: 414, column: 16, scope: !2658)
!2666 = !DILocation(line: 414, column: 23, scope: !2658)
!2667 = !DILocalVariable(name: "seq", scope: !2658, file: !3, line: 415, type: !204)
!2668 = !DILocation(line: 415, column: 12, scope: !2658)
!2669 = !DILocation(line: 417, column: 6, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 417, column: 6)
!2671 = !DILocation(line: 417, column: 9, scope: !2670)
!2672 = !DILocation(line: 417, column: 6, scope: !2658)
!2673 = !DILocation(line: 418, column: 3, scope: !2670)
!2674 = !DILocation(line: 421, column: 2, scope: !2658)
!2675 = !DILocalVariable(name: "iter_macro", scope: !2676, file: !3, line: 423, type: !2677)
!2676 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 423, column: 2)
!2677 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqIterator", file: !104, line: 63, baseType: !2678)
!2678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqIterator", file: !104, line: 57, size: 256, elements: !2679)
!2679 = !{!2680, !2682, !2683, !2684, !2685}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !2678, file: !104, line: 58, baseType: !2681, size: 64)
!2681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !209, size: 64)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "tot", scope: !2678, file: !104, line: 59, baseType: !45, size: 32, offset: 64)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !2678, file: !104, line: 59, baseType: !45, size: 32, offset: 96)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2678, file: !104, line: 61, baseType: !209, size: 64, offset: 128)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "valid", scope: !2678, file: !104, line: 62, baseType: !45, size: 32, offset: 192)
!2686 = !DILocation(line: 423, column: 2, scope: !2676)
!2687 = !DILocation(line: 423, column: 2, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !2676, file: !3, line: 423, column: 2)
!2689 = !DILocation(line: 423, column: 2, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !2688, file: !3, line: 423, column: 2)
!2691 = !DILocation(line: 423, column: 2, scope: !2692)
!2692 = distinct !DILexicalBlock(scope: !2690, file: !3, line: 423, column: 2)
!2693 = !DILocation(line: 426, column: 24, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2692, file: !3, line: 424, column: 2)
!2695 = !DILocation(line: 426, column: 31, scope: !2694)
!2696 = !DILocation(line: 426, column: 3, scope: !2694)
!2697 = !DILocation(line: 428, column: 2, scope: !2692)
!2698 = distinct !{!2698, !2687, !2699}
!2699 = !DILocation(line: 428, column: 2, scope: !2688)
!2700 = !DILocation(line: 428, column: 2, scope: !2676)
!2701 = !DILocation(line: 430, column: 17, scope: !2658)
!2702 = !DILocation(line: 430, column: 21, scope: !2658)
!2703 = !DILocation(line: 430, column: 2, scope: !2658)
!2704 = !DILocation(line: 432, column: 2, scope: !2658)
!2705 = !DILocation(line: 432, column: 12, scope: !2658)
!2706 = !DILocation(line: 434, column: 2, scope: !2658)
!2707 = !DILocation(line: 434, column: 9, scope: !2658)
!2708 = !DILocation(line: 434, column: 12, scope: !2658)
!2709 = !DILocation(line: 435, column: 1, scope: !2658)
!2710 = distinct !DISubprogram(name: "BKE_sequence_iterator_begin", scope: !3, file: !3, line: 603, type: !2711, scopeLine: 604, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2711 = !DISubroutineType(types: !2712)
!2712 = !{null, !2176, !2713, !742}
!2713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2677, size: 64)
!2714 = !DILocalVariable(name: "ed", arg: 1, scope: !2710, file: !3, line: 603, type: !2176)
!2715 = !DILocation(line: 603, column: 43, scope: !2710)
!2716 = !DILocalVariable(name: "iter", arg: 2, scope: !2710, file: !3, line: 603, type: !2713)
!2717 = !DILocation(line: 603, column: 60, scope: !2710)
!2718 = !DILocalVariable(name: "use_pointer", arg: 3, scope: !2710, file: !3, line: 603, type: !742)
!2719 = !DILocation(line: 603, column: 71, scope: !2710)
!2720 = !DILocation(line: 605, column: 9, scope: !2710)
!2721 = !DILocation(line: 605, column: 2, scope: !2710)
!2722 = !DILocation(line: 606, column: 12, scope: !2710)
!2723 = !DILocation(line: 606, column: 17, scope: !2710)
!2724 = !DILocation(line: 606, column: 23, scope: !2710)
!2725 = !DILocation(line: 606, column: 31, scope: !2710)
!2726 = !DILocation(line: 606, column: 37, scope: !2710)
!2727 = !DILocation(line: 606, column: 42, scope: !2710)
!2728 = !DILocation(line: 606, column: 2, scope: !2710)
!2729 = !DILocation(line: 608, column: 6, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2710, file: !3, line: 608, column: 6)
!2731 = !DILocation(line: 608, column: 12, scope: !2730)
!2732 = !DILocation(line: 608, column: 6, scope: !2710)
!2733 = !DILocation(line: 609, column: 3, scope: !2734)
!2734 = distinct !DILexicalBlock(scope: !2730, file: !3, line: 608, column: 17)
!2735 = !DILocation(line: 609, column: 9, scope: !2734)
!2736 = !DILocation(line: 609, column: 13, scope: !2734)
!2737 = !DILocation(line: 610, column: 15, scope: !2734)
!2738 = !DILocation(line: 610, column: 21, scope: !2734)
!2739 = !DILocation(line: 610, column: 27, scope: !2734)
!2740 = !DILocation(line: 610, column: 33, scope: !2734)
!2741 = !DILocation(line: 610, column: 3, scope: !2734)
!2742 = !DILocation(line: 610, column: 9, scope: !2734)
!2743 = !DILocation(line: 610, column: 13, scope: !2734)
!2744 = !DILocation(line: 611, column: 3, scope: !2734)
!2745 = !DILocation(line: 611, column: 9, scope: !2734)
!2746 = !DILocation(line: 611, column: 15, scope: !2734)
!2747 = !DILocation(line: 612, column: 2, scope: !2734)
!2748 = !DILocation(line: 613, column: 1, scope: !2710)
!2749 = distinct !DISubprogram(name: "BKE_sequence_iterator_next", scope: !3, file: !3, line: 615, type: !2750, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{null, !2713}
!2752 = !DILocalVariable(name: "iter", arg: 1, scope: !2749, file: !3, line: 615, type: !2713)
!2753 = !DILocation(line: 615, column: 46, scope: !2749)
!2754 = !DILocation(line: 617, column: 8, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 617, column: 6)
!2756 = !DILocation(line: 617, column: 14, scope: !2755)
!2757 = !DILocation(line: 617, column: 6, scope: !2755)
!2758 = !DILocation(line: 617, column: 20, scope: !2755)
!2759 = !DILocation(line: 617, column: 26, scope: !2755)
!2760 = !DILocation(line: 617, column: 18, scope: !2755)
!2761 = !DILocation(line: 617, column: 6, scope: !2749)
!2762 = !DILocation(line: 618, column: 15, scope: !2755)
!2763 = !DILocation(line: 618, column: 21, scope: !2755)
!2764 = !DILocation(line: 618, column: 27, scope: !2755)
!2765 = !DILocation(line: 618, column: 33, scope: !2755)
!2766 = !DILocation(line: 618, column: 3, scope: !2755)
!2767 = !DILocation(line: 618, column: 9, scope: !2755)
!2768 = !DILocation(line: 618, column: 13, scope: !2755)
!2769 = !DILocation(line: 620, column: 3, scope: !2755)
!2770 = !DILocation(line: 620, column: 9, scope: !2755)
!2771 = !DILocation(line: 620, column: 15, scope: !2755)
!2772 = !DILocation(line: 621, column: 1, scope: !2749)
!2773 = distinct !DISubprogram(name: "BKE_sequence_iterator_end", scope: !3, file: !3, line: 623, type: !2750, scopeLine: 624, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2774 = !DILocalVariable(name: "iter", arg: 1, scope: !2773, file: !3, line: 623, type: !2713)
!2775 = !DILocation(line: 623, column: 45, scope: !2773)
!2776 = !DILocation(line: 625, column: 6, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2773, file: !3, line: 625, column: 6)
!2778 = !DILocation(line: 625, column: 12, scope: !2777)
!2779 = !DILocation(line: 625, column: 6, scope: !2773)
!2780 = !DILocation(line: 626, column: 3, scope: !2777)
!2781 = !DILocation(line: 626, column: 13, scope: !2777)
!2782 = !DILocation(line: 626, column: 19, scope: !2777)
!2783 = !DILocation(line: 628, column: 2, scope: !2773)
!2784 = !DILocation(line: 628, column: 8, scope: !2773)
!2785 = !DILocation(line: 628, column: 14, scope: !2773)
!2786 = !DILocation(line: 629, column: 1, scope: !2773)
!2787 = distinct !DISubprogram(name: "BKE_sequencer_imbuf_to_sequencer_space", scope: !3, file: !3, line: 446, type: !2788, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2788 = !DISubroutineType(types: !2789)
!2789 = !{null, !1744, !1776, !742}
!2790 = !DILocalVariable(name: "scene", arg: 1, scope: !2787, file: !3, line: 446, type: !1744)
!2791 = !DILocation(line: 446, column: 52, scope: !2787)
!2792 = !DILocalVariable(name: "ibuf", arg: 2, scope: !2787, file: !3, line: 446, type: !1776)
!2793 = !DILocation(line: 446, column: 66, scope: !2787)
!2794 = !DILocalVariable(name: "make_float", arg: 3, scope: !2787, file: !3, line: 446, type: !742)
!2795 = !DILocation(line: 446, column: 77, scope: !2787)
!2796 = !DILocalVariable(name: "from_colorspace", scope: !2787, file: !3, line: 448, type: !2797)
!2797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2798, size: 64)
!2798 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !144)
!2799 = !DILocation(line: 448, column: 14, scope: !2787)
!2800 = !DILocation(line: 448, column: 32, scope: !2787)
!2801 = !DILocalVariable(name: "to_colorspace", scope: !2787, file: !3, line: 449, type: !2797)
!2802 = !DILocation(line: 449, column: 14, scope: !2787)
!2803 = !DILocation(line: 449, column: 30, scope: !2787)
!2804 = !DILocation(line: 449, column: 37, scope: !2787)
!2805 = !DILocation(line: 449, column: 67, scope: !2787)
!2806 = !DILocalVariable(name: "float_colorspace", scope: !2787, file: !3, line: 450, type: !2797)
!2807 = !DILocation(line: 450, column: 14, scope: !2787)
!2808 = !DILocation(line: 450, column: 74, scope: !2787)
!2809 = !DILocation(line: 450, column: 33, scope: !2787)
!2810 = !DILocation(line: 452, column: 7, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2787, file: !3, line: 452, column: 6)
!2812 = !DILocation(line: 452, column: 13, scope: !2811)
!2813 = !DILocation(line: 452, column: 6, scope: !2787)
!2814 = !DILocation(line: 453, column: 7, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2816, file: !3, line: 453, column: 7)
!2816 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 452, column: 25)
!2817 = !DILocation(line: 453, column: 13, scope: !2815)
!2818 = !DILocation(line: 453, column: 7, scope: !2816)
!2819 = !DILocalVariable(name: "byte_colorspace", scope: !2820, file: !3, line: 454, type: !2797)
!2820 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 453, column: 19)
!2821 = !DILocation(line: 454, column: 16, scope: !2820)
!2822 = !DILocation(line: 454, column: 74, scope: !2820)
!2823 = !DILocation(line: 454, column: 34, scope: !2820)
!2824 = !DILocation(line: 455, column: 8, scope: !2825)
!2825 = distinct !DILexicalBlock(scope: !2820, file: !3, line: 455, column: 8)
!2826 = !DILocation(line: 455, column: 19, scope: !2825)
!2827 = !DILocation(line: 455, column: 23, scope: !2825)
!2828 = !DILocation(line: 455, column: 8, scope: !2820)
!2829 = !DILocation(line: 469, column: 25, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2825, file: !3, line: 455, column: 62)
!2831 = !DILocation(line: 469, column: 5, scope: !2830)
!2832 = !DILocation(line: 470, column: 4, scope: !2830)
!2833 = !DILocation(line: 472, column: 5, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2825, file: !3, line: 471, column: 9)
!2835 = !DILocation(line: 474, column: 3, scope: !2820)
!2836 = !DILocation(line: 476, column: 4, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 475, column: 8)
!2838 = !DILocation(line: 478, column: 2, scope: !2816)
!2839 = !DILocation(line: 480, column: 6, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2787, file: !3, line: 480, column: 6)
!2841 = !DILocation(line: 480, column: 22, scope: !2840)
!2842 = !DILocation(line: 480, column: 25, scope: !2840)
!2843 = !DILocation(line: 480, column: 44, scope: !2840)
!2844 = !DILocation(line: 480, column: 6, scope: !2787)
!2845 = !DILocation(line: 481, column: 7, scope: !2846)
!2846 = distinct !DILexicalBlock(scope: !2847, file: !3, line: 481, column: 7)
!2847 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 480, column: 53)
!2848 = !DILocation(line: 481, column: 13, scope: !2846)
!2849 = !DILocation(line: 481, column: 7, scope: !2847)
!2850 = !DILocation(line: 482, column: 22, scope: !2846)
!2851 = !DILocation(line: 482, column: 4, scope: !2846)
!2852 = !DILocation(line: 484, column: 8, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2847, file: !3, line: 484, column: 7)
!2854 = !DILocation(line: 484, column: 7, scope: !2847)
!2855 = !DILocation(line: 485, column: 43, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2853, file: !3, line: 484, column: 48)
!2857 = !DILocation(line: 485, column: 49, scope: !2856)
!2858 = !DILocation(line: 485, column: 61, scope: !2856)
!2859 = !DILocation(line: 485, column: 67, scope: !2856)
!2860 = !DILocation(line: 485, column: 70, scope: !2856)
!2861 = !DILocation(line: 485, column: 76, scope: !2856)
!2862 = !DILocation(line: 485, column: 79, scope: !2856)
!2863 = !DILocation(line: 485, column: 85, scope: !2856)
!2864 = !DILocation(line: 486, column: 43, scope: !2856)
!2865 = !DILocation(line: 486, column: 60, scope: !2856)
!2866 = !DILocation(line: 485, column: 4, scope: !2856)
!2867 = !DILocation(line: 487, column: 34, scope: !2856)
!2868 = !DILocation(line: 487, column: 41, scope: !2856)
!2869 = !DILocation(line: 487, column: 4, scope: !2856)
!2870 = !DILocation(line: 488, column: 3, scope: !2856)
!2871 = !DILocation(line: 489, column: 2, scope: !2847)
!2872 = !DILocation(line: 490, column: 1, scope: !2787)
!2873 = distinct !DISubprogram(name: "sequencer_imbuf_assign_spaces", scope: !3, file: !3, line: 439, type: !2874, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2874 = !DISubroutineType(types: !2875)
!2875 = !{null, !1744, !1776}
!2876 = !DILocalVariable(name: "scene", arg: 1, scope: !2873, file: !3, line: 439, type: !1744)
!2877 = !DILocation(line: 439, column: 50, scope: !2873)
!2878 = !DILocalVariable(name: "ibuf", arg: 2, scope: !2873, file: !3, line: 439, type: !1776)
!2879 = !DILocation(line: 439, column: 64, scope: !2873)
!2880 = !DILocation(line: 441, column: 6, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2873, file: !3, line: 441, column: 6)
!2882 = !DILocation(line: 441, column: 12, scope: !2881)
!2883 = !DILocation(line: 441, column: 6, scope: !2873)
!2884 = !DILocation(line: 442, column: 47, scope: !2885)
!2885 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 441, column: 24)
!2886 = !DILocation(line: 442, column: 53, scope: !2885)
!2887 = !DILocation(line: 442, column: 60, scope: !2885)
!2888 = !DILocation(line: 442, column: 90, scope: !2885)
!2889 = !DILocation(line: 442, column: 3, scope: !2885)
!2890 = !DILocation(line: 443, column: 2, scope: !2885)
!2891 = !DILocation(line: 444, column: 1, scope: !2873)
!2892 = distinct !DISubprogram(name: "BKE_sequencer_imbuf_from_sequencer_space", scope: !3, file: !3, line: 492, type: !2874, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2893 = !DILocalVariable(name: "scene", arg: 1, scope: !2892, file: !3, line: 492, type: !1744)
!2894 = !DILocation(line: 492, column: 54, scope: !2892)
!2895 = !DILocalVariable(name: "ibuf", arg: 2, scope: !2892, file: !3, line: 492, type: !1776)
!2896 = !DILocation(line: 492, column: 68, scope: !2892)
!2897 = !DILocalVariable(name: "from_colorspace", scope: !2892, file: !3, line: 494, type: !2797)
!2898 = !DILocation(line: 494, column: 14, scope: !2892)
!2899 = !DILocation(line: 494, column: 32, scope: !2892)
!2900 = !DILocation(line: 494, column: 39, scope: !2892)
!2901 = !DILocation(line: 494, column: 69, scope: !2892)
!2902 = !DILocalVariable(name: "to_colorspace", scope: !2892, file: !3, line: 495, type: !2797)
!2903 = !DILocation(line: 495, column: 14, scope: !2892)
!2904 = !DILocation(line: 495, column: 30, scope: !2892)
!2905 = !DILocation(line: 497, column: 7, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 497, column: 6)
!2907 = !DILocation(line: 497, column: 13, scope: !2906)
!2908 = !DILocation(line: 497, column: 6, scope: !2892)
!2909 = !DILocation(line: 498, column: 3, scope: !2906)
!2910 = !DILocation(line: 500, column: 6, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 500, column: 6)
!2912 = !DILocation(line: 500, column: 20, scope: !2911)
!2913 = !DILocation(line: 500, column: 23, scope: !2911)
!2914 = !DILocation(line: 500, column: 40, scope: !2911)
!2915 = !DILocation(line: 500, column: 6, scope: !2892)
!2916 = !DILocation(line: 501, column: 42, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 500, column: 49)
!2918 = !DILocation(line: 501, column: 48, scope: !2917)
!2919 = !DILocation(line: 501, column: 60, scope: !2917)
!2920 = !DILocation(line: 501, column: 66, scope: !2917)
!2921 = !DILocation(line: 501, column: 69, scope: !2917)
!2922 = !DILocation(line: 501, column: 75, scope: !2917)
!2923 = !DILocation(line: 501, column: 78, scope: !2917)
!2924 = !DILocation(line: 501, column: 84, scope: !2917)
!2925 = !DILocation(line: 502, column: 42, scope: !2917)
!2926 = !DILocation(line: 502, column: 59, scope: !2917)
!2927 = !DILocation(line: 501, column: 3, scope: !2917)
!2928 = !DILocation(line: 503, column: 47, scope: !2917)
!2929 = !DILocation(line: 503, column: 53, scope: !2917)
!2930 = !DILocation(line: 503, column: 3, scope: !2917)
!2931 = !DILocation(line: 504, column: 2, scope: !2917)
!2932 = !DILocation(line: 505, column: 1, scope: !2892)
!2933 = distinct !DISubprogram(name: "BKE_sequencer_pixel_from_sequencer_space_v4", scope: !3, file: !3, line: 507, type: !2934, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2934 = !DISubroutineType(types: !2935)
!2935 = !{null, !313, !832}
!2936 = !DILocalVariable(name: "scene", arg: 1, scope: !2933, file: !3, line: 507, type: !313)
!2937 = !DILocation(line: 507, column: 64, scope: !2933)
!2938 = !DILocalVariable(name: "pixel", arg: 2, scope: !2933, file: !3, line: 507, type: !832)
!2939 = !DILocation(line: 507, column: 77, scope: !2933)
!2940 = !DILocalVariable(name: "from_colorspace", scope: !2933, file: !3, line: 509, type: !2797)
!2941 = !DILocation(line: 509, column: 14, scope: !2933)
!2942 = !DILocation(line: 509, column: 32, scope: !2933)
!2943 = !DILocation(line: 509, column: 39, scope: !2933)
!2944 = !DILocation(line: 509, column: 69, scope: !2933)
!2945 = !DILocalVariable(name: "to_colorspace", scope: !2933, file: !3, line: 510, type: !2797)
!2946 = !DILocation(line: 510, column: 14, scope: !2933)
!2947 = !DILocation(line: 510, column: 30, scope: !2933)
!2948 = !DILocation(line: 512, column: 6, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2933, file: !3, line: 512, column: 6)
!2950 = !DILocation(line: 512, column: 20, scope: !2949)
!2951 = !DILocation(line: 512, column: 23, scope: !2949)
!2952 = !DILocation(line: 512, column: 40, scope: !2949)
!2953 = !DILocation(line: 512, column: 6, scope: !2933)
!2954 = !DILocation(line: 513, column: 36, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 512, column: 49)
!2956 = !DILocation(line: 513, column: 43, scope: !2955)
!2957 = !DILocation(line: 513, column: 60, scope: !2955)
!2958 = !DILocation(line: 513, column: 3, scope: !2955)
!2959 = !DILocation(line: 514, column: 2, scope: !2955)
!2960 = !DILocation(line: 517, column: 24, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 515, column: 7)
!2962 = !DILocation(line: 517, column: 31, scope: !2961)
!2963 = !DILocation(line: 517, column: 3, scope: !2961)
!2964 = !DILocation(line: 519, column: 1, scope: !2933)
!2965 = distinct !DISubprogram(name: "srgb_to_linearrgb_v4", scope: !2966, file: !2966, line: 53, type: !2967, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2966 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_color_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2967 = !DISubroutineType(types: !2968)
!2968 = !{null, !832, !2969}
!2969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2970, size: 64)
!2970 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !193)
!2971 = !DILocalVariable(name: "linear", arg: 1, scope: !2965, file: !2966, line: 53, type: !832)
!2972 = !DILocation(line: 53, column: 41, scope: !2965)
!2973 = !DILocalVariable(name: "srgb", arg: 2, scope: !2965, file: !2966, line: 53, type: !2969)
!2974 = !DILocation(line: 53, column: 64, scope: !2965)
!2975 = !DILocation(line: 55, column: 26, scope: !2965)
!2976 = !DILocation(line: 55, column: 34, scope: !2965)
!2977 = !DILocation(line: 55, column: 2, scope: !2965)
!2978 = !DILocation(line: 56, column: 14, scope: !2965)
!2979 = !DILocation(line: 56, column: 2, scope: !2965)
!2980 = !DILocation(line: 56, column: 12, scope: !2965)
!2981 = !DILocation(line: 57, column: 1, scope: !2965)
!2982 = distinct !DISubprogram(name: "BKE_sequencer_new_render_data", scope: !3, file: !3, line: 523, type: !2983, scopeLine: 526, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!2983 = !DISubroutineType(types: !2984)
!2984 = !{!1894, !2985, !2462, !1744, !45, !45, !45}
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2986, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_typedef, name: "EvaluationContext", file: !1900, line: 60, baseType: !1899)
!2987 = !DILocalVariable(name: "eval_ctx", arg: 1, scope: !2982, file: !3, line: 523, type: !2985)
!2988 = !DILocation(line: 523, column: 64, scope: !2982)
!2989 = !DILocalVariable(name: "bmain", arg: 2, scope: !2982, file: !3, line: 524, type: !2462)
!2990 = !DILocation(line: 524, column: 51, scope: !2982)
!2991 = !DILocalVariable(name: "scene", arg: 3, scope: !2982, file: !3, line: 524, type: !1744)
!2992 = !DILocation(line: 524, column: 65, scope: !2982)
!2993 = !DILocalVariable(name: "rectx", arg: 4, scope: !2982, file: !3, line: 524, type: !45)
!2994 = !DILocation(line: 524, column: 76, scope: !2982)
!2995 = !DILocalVariable(name: "recty", arg: 5, scope: !2982, file: !3, line: 524, type: !45)
!2996 = !DILocation(line: 524, column: 87, scope: !2982)
!2997 = !DILocalVariable(name: "preview_render_size", arg: 6, scope: !2982, file: !3, line: 525, type: !45)
!2998 = !DILocation(line: 525, column: 49, scope: !2982)
!2999 = !DILocalVariable(name: "rval", scope: !2982, file: !3, line: 527, type: !1894)
!3000 = !DILocation(line: 527, column: 16, scope: !2982)
!3001 = !DILocation(line: 529, column: 15, scope: !2982)
!3002 = !DILocation(line: 529, column: 7, scope: !2982)
!3003 = !DILocation(line: 529, column: 13, scope: !2982)
!3004 = !DILocation(line: 530, column: 15, scope: !2982)
!3005 = !DILocation(line: 530, column: 7, scope: !2982)
!3006 = !DILocation(line: 530, column: 13, scope: !2982)
!3007 = !DILocation(line: 531, column: 15, scope: !2982)
!3008 = !DILocation(line: 531, column: 7, scope: !2982)
!3009 = !DILocation(line: 531, column: 13, scope: !2982)
!3010 = !DILocation(line: 532, column: 15, scope: !2982)
!3011 = !DILocation(line: 532, column: 7, scope: !2982)
!3012 = !DILocation(line: 532, column: 13, scope: !2982)
!3013 = !DILocation(line: 533, column: 29, scope: !2982)
!3014 = !DILocation(line: 533, column: 7, scope: !2982)
!3015 = !DILocation(line: 533, column: 27, scope: !2982)
!3016 = !DILocation(line: 534, column: 7, scope: !2982)
!3017 = !DILocation(line: 534, column: 27, scope: !2982)
!3018 = !DILocation(line: 535, column: 7, scope: !2982)
!3019 = !DILocation(line: 535, column: 27, scope: !2982)
!3020 = !DILocation(line: 536, column: 18, scope: !2982)
!3021 = !DILocation(line: 536, column: 7, scope: !2982)
!3022 = !DILocation(line: 536, column: 16, scope: !2982)
!3023 = !DILocation(line: 537, column: 7, scope: !2982)
!3024 = !DILocation(line: 537, column: 18, scope: !2982)
!3025 = !DILocation(line: 538, column: 7, scope: !2982)
!3026 = !DILocation(line: 538, column: 23, scope: !2982)
!3027 = !DILocation(line: 540, column: 2, scope: !2982)
!3028 = distinct !DISubprogram(name: "seq_array", scope: !3, file: !3, line: 578, type: !3029, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3029 = !DISubroutineType(types: !3030)
!3030 = !{null, !2176, !3031, !830, !742}
!3031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2002, size: 64)
!3032 = !DILocalVariable(name: "ed", arg: 1, scope: !3028, file: !3, line: 578, type: !2176)
!3033 = !DILocation(line: 578, column: 32, scope: !3028)
!3034 = !DILocalVariable(name: "seqarray", arg: 2, scope: !3028, file: !3, line: 578, type: !3031)
!3035 = !DILocation(line: 578, column: 48, scope: !3028)
!3036 = !DILocalVariable(name: "tot", arg: 3, scope: !3028, file: !3, line: 578, type: !830)
!3037 = !DILocation(line: 578, column: 63, scope: !3028)
!3038 = !DILocalVariable(name: "use_pointer", arg: 4, scope: !3028, file: !3, line: 578, type: !742)
!3039 = !DILocation(line: 578, column: 73, scope: !3028)
!3040 = !DILocalVariable(name: "array", scope: !3028, file: !3, line: 580, type: !2002)
!3041 = !DILocation(line: 580, column: 13, scope: !3028)
!3042 = !DILocation(line: 582, column: 3, scope: !3028)
!3043 = !DILocation(line: 582, column: 12, scope: !3028)
!3044 = !DILocation(line: 583, column: 3, scope: !3028)
!3045 = !DILocation(line: 583, column: 7, scope: !3028)
!3046 = !DILocation(line: 585, column: 6, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 585, column: 6)
!3048 = !DILocation(line: 585, column: 9, scope: !3047)
!3049 = !DILocation(line: 585, column: 6, scope: !3028)
!3050 = !DILocation(line: 586, column: 3, scope: !3047)
!3051 = !DILocation(line: 588, column: 6, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 588, column: 6)
!3053 = !DILocation(line: 588, column: 6, scope: !3028)
!3054 = !DILocation(line: 589, column: 13, scope: !3052)
!3055 = !DILocation(line: 589, column: 17, scope: !3052)
!3056 = !DILocation(line: 589, column: 27, scope: !3052)
!3057 = !DILocation(line: 589, column: 3, scope: !3052)
!3058 = !DILocation(line: 591, column: 14, scope: !3052)
!3059 = !DILocation(line: 591, column: 18, scope: !3052)
!3060 = !DILocation(line: 591, column: 27, scope: !3052)
!3061 = !DILocation(line: 591, column: 3, scope: !3052)
!3062 = !DILocation(line: 593, column: 7, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 593, column: 6)
!3064 = !DILocation(line: 593, column: 6, scope: !3063)
!3065 = !DILocation(line: 593, column: 11, scope: !3063)
!3066 = !DILocation(line: 593, column: 6, scope: !3028)
!3067 = !DILocation(line: 594, column: 3, scope: !3063)
!3068 = !DILocation(line: 596, column: 22, scope: !3028)
!3069 = !DILocation(line: 596, column: 57, scope: !3028)
!3070 = !DILocation(line: 596, column: 56, scope: !3028)
!3071 = !DILocation(line: 596, column: 55, scope: !3028)
!3072 = !DILocation(line: 596, column: 53, scope: !3028)
!3073 = !DILocation(line: 596, column: 20, scope: !3028)
!3074 = !DILocation(line: 596, column: 3, scope: !3028)
!3075 = !DILocation(line: 596, column: 12, scope: !3028)
!3076 = !DILocation(line: 597, column: 6, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 597, column: 6)
!3078 = !DILocation(line: 597, column: 6, scope: !3028)
!3079 = !DILocation(line: 598, column: 19, scope: !3077)
!3080 = !DILocation(line: 598, column: 23, scope: !3077)
!3081 = !DILocation(line: 598, column: 3, scope: !3077)
!3082 = !DILocation(line: 600, column: 20, scope: !3077)
!3083 = !DILocation(line: 600, column: 24, scope: !3077)
!3084 = !DILocation(line: 600, column: 3, scope: !3077)
!3085 = !DILocation(line: 601, column: 1, scope: !3028)
!3086 = distinct !DISubprogram(name: "BKE_sequence_calc_disp", scope: !3, file: !3, line: 674, type: !2108, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3087 = !DILocalVariable(name: "scene", arg: 1, scope: !3086, file: !3, line: 674, type: !1744)
!3088 = !DILocation(line: 674, column: 36, scope: !3086)
!3089 = !DILocalVariable(name: "seq", arg: 2, scope: !3086, file: !3, line: 674, type: !204)
!3090 = !DILocation(line: 674, column: 53, scope: !3086)
!3091 = !DILocation(line: 676, column: 6, scope: !3092)
!3092 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 676, column: 6)
!3093 = !DILocation(line: 676, column: 11, scope: !3092)
!3094 = !DILocation(line: 676, column: 20, scope: !3092)
!3095 = !DILocation(line: 676, column: 23, scope: !3092)
!3096 = !DILocation(line: 676, column: 28, scope: !3092)
!3097 = !DILocation(line: 676, column: 6, scope: !3086)
!3098 = !DILocation(line: 677, column: 3, scope: !3092)
!3099 = !DILocation(line: 677, column: 8, scope: !3092)
!3100 = !DILocation(line: 677, column: 19, scope: !3092)
!3101 = !DILocation(line: 678, column: 6, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 678, column: 6)
!3103 = !DILocation(line: 678, column: 11, scope: !3102)
!3104 = !DILocation(line: 678, column: 18, scope: !3102)
!3105 = !DILocation(line: 678, column: 21, scope: !3102)
!3106 = !DILocation(line: 678, column: 26, scope: !3102)
!3107 = !DILocation(line: 678, column: 6, scope: !3086)
!3108 = !DILocation(line: 679, column: 3, scope: !3102)
!3109 = !DILocation(line: 679, column: 8, scope: !3102)
!3110 = !DILocation(line: 679, column: 17, scope: !3102)
!3111 = !DILocation(line: 681, column: 19, scope: !3086)
!3112 = !DILocation(line: 681, column: 24, scope: !3086)
!3113 = !DILocation(line: 681, column: 32, scope: !3086)
!3114 = !DILocation(line: 681, column: 37, scope: !3086)
!3115 = !DILocation(line: 681, column: 30, scope: !3086)
!3116 = !DILocation(line: 681, column: 48, scope: !3086)
!3117 = !DILocation(line: 681, column: 53, scope: !3086)
!3118 = !DILocation(line: 681, column: 46, scope: !3086)
!3119 = !DILocation(line: 681, column: 2, scope: !3086)
!3120 = !DILocation(line: 681, column: 7, scope: !3086)
!3121 = !DILocation(line: 681, column: 17, scope: !3086)
!3122 = !DILocation(line: 682, column: 17, scope: !3086)
!3123 = !DILocation(line: 682, column: 22, scope: !3086)
!3124 = !DILocation(line: 682, column: 30, scope: !3086)
!3125 = !DILocation(line: 682, column: 35, scope: !3086)
!3126 = !DILocation(line: 682, column: 28, scope: !3086)
!3127 = !DILocation(line: 682, column: 41, scope: !3086)
!3128 = !DILocation(line: 682, column: 46, scope: !3086)
!3129 = !DILocation(line: 682, column: 39, scope: !3086)
!3130 = !DILocation(line: 682, column: 55, scope: !3086)
!3131 = !DILocation(line: 682, column: 60, scope: !3086)
!3132 = !DILocation(line: 682, column: 53, scope: !3086)
!3133 = !DILocation(line: 682, column: 2, scope: !3086)
!3134 = !DILocation(line: 682, column: 7, scope: !3086)
!3135 = !DILocation(line: 682, column: 15, scope: !3086)
!3136 = !DILocation(line: 684, column: 2, scope: !3086)
!3137 = !DILocation(line: 684, column: 7, scope: !3086)
!3138 = !DILocation(line: 684, column: 16, scope: !3086)
!3139 = !DILocation(line: 685, column: 6, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 685, column: 6)
!3141 = !DILocation(line: 685, column: 11, scope: !3140)
!3142 = !DILocation(line: 685, column: 21, scope: !3140)
!3143 = !DILocation(line: 685, column: 26, scope: !3140)
!3144 = !DILocation(line: 685, column: 19, scope: !3140)
!3145 = !DILocation(line: 685, column: 36, scope: !3140)
!3146 = !DILocation(line: 685, column: 6, scope: !3086)
!3147 = !DILocation(line: 686, column: 34, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 685, column: 42)
!3149 = !DILocation(line: 686, column: 39, scope: !3148)
!3150 = !DILocation(line: 686, column: 49, scope: !3148)
!3151 = !DILocation(line: 686, column: 54, scope: !3148)
!3152 = !DILocation(line: 686, column: 47, scope: !3148)
!3153 = !DILocation(line: 686, column: 33, scope: !3148)
!3154 = !DILocation(line: 686, column: 31, scope: !3148)
!3155 = !DILocation(line: 686, column: 19, scope: !3148)
!3156 = !DILocation(line: 686, column: 3, scope: !3148)
!3157 = !DILocation(line: 686, column: 8, scope: !3148)
!3158 = !DILocation(line: 686, column: 17, scope: !3148)
!3159 = !DILocation(line: 687, column: 2, scope: !3148)
!3160 = !DILocation(line: 688, column: 11, scope: !3161)
!3161 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 688, column: 11)
!3162 = !DILocation(line: 688, column: 16, scope: !3161)
!3163 = !DILocation(line: 688, column: 26, scope: !3161)
!3164 = !DILocation(line: 688, column: 31, scope: !3161)
!3165 = !DILocation(line: 688, column: 24, scope: !3161)
!3166 = !DILocation(line: 688, column: 41, scope: !3161)
!3167 = !DILocation(line: 688, column: 11, scope: !3140)
!3168 = !DILocation(line: 689, column: 28, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3161, file: !3, line: 688, column: 48)
!3170 = !DILocation(line: 689, column: 33, scope: !3169)
!3171 = !DILocation(line: 689, column: 43, scope: !3169)
!3172 = !DILocation(line: 689, column: 48, scope: !3169)
!3173 = !DILocation(line: 689, column: 41, scope: !3169)
!3174 = !DILocation(line: 689, column: 59, scope: !3169)
!3175 = !DILocation(line: 689, column: 19, scope: !3169)
!3176 = !DILocation(line: 689, column: 3, scope: !3169)
!3177 = !DILocation(line: 689, column: 8, scope: !3169)
!3178 = !DILocation(line: 689, column: 17, scope: !3169)
!3179 = !DILocation(line: 690, column: 2, scope: !3169)
!3180 = !DILocation(line: 692, column: 6, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 692, column: 6)
!3182 = !DILocation(line: 692, column: 6, scope: !3086)
!3183 = !DILocation(line: 693, column: 37, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 692, column: 59)
!3185 = !DILocation(line: 693, column: 44, scope: !3184)
!3186 = !DILocation(line: 693, column: 3, scope: !3184)
!3187 = !DILocation(line: 694, column: 2, scope: !3184)
!3188 = !DILocation(line: 695, column: 11, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 695, column: 11)
!3190 = !DILocation(line: 695, column: 16, scope: !3189)
!3191 = !DILocation(line: 695, column: 21, scope: !3189)
!3192 = !DILocation(line: 695, column: 11, scope: !3181)
!3193 = !DILocation(line: 696, column: 37, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3189, file: !3, line: 695, column: 39)
!3195 = !DILocation(line: 696, column: 44, scope: !3194)
!3196 = !DILocation(line: 696, column: 3, scope: !3194)
!3197 = !DILocation(line: 697, column: 2, scope: !3194)
!3198 = !DILocation(line: 698, column: 1, scope: !3086)
!3199 = distinct !DISubprogram(name: "BKE_sequencer_update_sound_bounds", scope: !3, file: !3, line: 3935, type: !2108, scopeLine: 3936, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3200 = !DILocalVariable(name: "scene", arg: 1, scope: !3199, file: !3, line: 3935, type: !1744)
!3201 = !DILocation(line: 3935, column: 47, scope: !3199)
!3202 = !DILocalVariable(name: "seq", arg: 2, scope: !3199, file: !3, line: 3935, type: !204)
!3203 = !DILocation(line: 3935, column: 64, scope: !3199)
!3204 = !DILocation(line: 3937, column: 6, scope: !3205)
!3205 = distinct !DILexicalBlock(scope: !3199, file: !3, line: 3937, column: 6)
!3206 = !DILocation(line: 3937, column: 11, scope: !3205)
!3207 = !DILocation(line: 3937, column: 16, scope: !3205)
!3208 = !DILocation(line: 3937, column: 6, scope: !3199)
!3209 = !DILocation(line: 3938, column: 7, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3211, file: !3, line: 3938, column: 7)
!3211 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 3937, column: 35)
!3212 = !DILocation(line: 3938, column: 12, scope: !3210)
!3213 = !DILocation(line: 3938, column: 7, scope: !3211)
!3214 = !DILocalVariable(name: "startofs", scope: !3215, file: !3, line: 3940, type: !45)
!3215 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 3938, column: 25)
!3216 = !DILocation(line: 3940, column: 8, scope: !3215)
!3217 = !DILocation(line: 3940, column: 19, scope: !3215)
!3218 = !DILocation(line: 3940, column: 24, scope: !3215)
!3219 = !DILocation(line: 3940, column: 35, scope: !3215)
!3220 = !DILocation(line: 3940, column: 40, scope: !3215)
!3221 = !DILocation(line: 3940, column: 33, scope: !3215)
!3222 = !DILocation(line: 3940, column: 56, scope: !3215)
!3223 = !DILocation(line: 3940, column: 61, scope: !3215)
!3224 = !DILocation(line: 3940, column: 68, scope: !3215)
!3225 = !DILocation(line: 3940, column: 70, scope: !3215)
!3226 = !DILocation(line: 3940, column: 54, scope: !3215)
!3227 = !DILocation(line: 3942, column: 27, scope: !3215)
!3228 = !DILocation(line: 3942, column: 34, scope: !3215)
!3229 = !DILocation(line: 3942, column: 39, scope: !3215)
!3230 = !DILocation(line: 3942, column: 52, scope: !3215)
!3231 = !DILocation(line: 3942, column: 57, scope: !3215)
!3232 = !DILocation(line: 3942, column: 68, scope: !3215)
!3233 = !DILocation(line: 3942, column: 73, scope: !3215)
!3234 = !DILocation(line: 3942, column: 82, scope: !3215)
!3235 = !DILocation(line: 3942, column: 4, scope: !3215)
!3236 = !DILocation(line: 3943, column: 3, scope: !3215)
!3237 = !DILocation(line: 3944, column: 2, scope: !3211)
!3238 = !DILocation(line: 3946, column: 35, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 3945, column: 7)
!3240 = !DILocation(line: 3946, column: 42, scope: !3239)
!3241 = !DILocation(line: 3946, column: 3, scope: !3239)
!3242 = !DILocation(line: 3949, column: 1, scope: !3199)
!3243 = distinct !DISubprogram(name: "seq_update_sound_bounds_recursive", scope: !3, file: !3, line: 669, type: !2108, scopeLine: 670, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3244 = !DILocalVariable(name: "scene", arg: 1, scope: !3243, file: !3, line: 669, type: !1744)
!3245 = !DILocation(line: 669, column: 54, scope: !3243)
!3246 = !DILocalVariable(name: "metaseq", arg: 2, scope: !3243, file: !3, line: 669, type: !204)
!3247 = !DILocation(line: 669, column: 71, scope: !3243)
!3248 = !DILocation(line: 671, column: 40, scope: !3243)
!3249 = !DILocation(line: 671, column: 47, scope: !3243)
!3250 = !DILocation(line: 671, column: 70, scope: !3243)
!3251 = !DILocation(line: 671, column: 56, scope: !3243)
!3252 = !DILocation(line: 671, column: 92, scope: !3243)
!3253 = !DILocation(line: 671, column: 80, scope: !3243)
!3254 = !DILocation(line: 671, column: 2, scope: !3243)
!3255 = !DILocation(line: 672, column: 1, scope: !3243)
!3256 = distinct !DISubprogram(name: "BKE_sequence_calc", scope: !3, file: !3, line: 700, type: !2108, scopeLine: 701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3257 = !DILocalVariable(name: "scene", arg: 1, scope: !3256, file: !3, line: 700, type: !1744)
!3258 = !DILocation(line: 700, column: 31, scope: !3256)
!3259 = !DILocalVariable(name: "seq", arg: 2, scope: !3256, file: !3, line: 700, type: !204)
!3260 = !DILocation(line: 700, column: 48, scope: !3256)
!3261 = !DILocalVariable(name: "seqm", scope: !3256, file: !3, line: 702, type: !204)
!3262 = !DILocation(line: 702, column: 12, scope: !3256)
!3263 = !DILocalVariable(name: "min", scope: !3256, file: !3, line: 703, type: !45)
!3264 = !DILocation(line: 703, column: 6, scope: !3256)
!3265 = !DILocalVariable(name: "max", scope: !3256, file: !3, line: 703, type: !45)
!3266 = !DILocation(line: 703, column: 11, scope: !3256)
!3267 = !DILocation(line: 706, column: 9, scope: !3256)
!3268 = !DILocation(line: 706, column: 14, scope: !3256)
!3269 = !DILocation(line: 706, column: 22, scope: !3256)
!3270 = !DILocation(line: 706, column: 7, scope: !3256)
!3271 = !DILocation(line: 707, column: 2, scope: !3256)
!3272 = !DILocation(line: 707, column: 9, scope: !3256)
!3273 = !DILocation(line: 708, column: 7, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3275, file: !3, line: 708, column: 7)
!3275 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 707, column: 15)
!3276 = !DILocation(line: 708, column: 13, scope: !3274)
!3277 = !DILocation(line: 708, column: 21, scope: !3274)
!3278 = !DILocation(line: 708, column: 7, scope: !3275)
!3279 = !DILocation(line: 708, column: 46, scope: !3274)
!3280 = !DILocation(line: 708, column: 53, scope: !3274)
!3281 = !DILocation(line: 708, column: 28, scope: !3274)
!3282 = !DILocation(line: 709, column: 10, scope: !3275)
!3283 = !DILocation(line: 709, column: 16, scope: !3275)
!3284 = !DILocation(line: 709, column: 8, scope: !3275)
!3285 = distinct !{!3285, !3271, !3286}
!3286 = !DILocation(line: 710, column: 2, scope: !3256)
!3287 = !DILocation(line: 714, column: 6, scope: !3288)
!3288 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 714, column: 6)
!3289 = !DILocation(line: 714, column: 11, scope: !3288)
!3290 = !DILocation(line: 714, column: 16, scope: !3288)
!3291 = !DILocation(line: 714, column: 6, scope: !3256)
!3292 = !DILocation(line: 716, column: 7, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3294, file: !3, line: 716, column: 7)
!3294 = distinct !DILexicalBlock(scope: !3288, file: !3, line: 714, column: 35)
!3295 = !DILocation(line: 716, column: 12, scope: !3293)
!3296 = !DILocation(line: 716, column: 17, scope: !3293)
!3297 = !DILocation(line: 716, column: 7, scope: !3294)
!3298 = !DILocation(line: 717, column: 16, scope: !3293)
!3299 = !DILocation(line: 717, column: 21, scope: !3293)
!3300 = !DILocation(line: 717, column: 4, scope: !3293)
!3301 = !DILocation(line: 717, column: 9, scope: !3293)
!3302 = !DILocation(line: 717, column: 14, scope: !3293)
!3303 = !DILocation(line: 718, column: 7, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3294, file: !3, line: 718, column: 7)
!3305 = !DILocation(line: 718, column: 12, scope: !3304)
!3306 = !DILocation(line: 718, column: 17, scope: !3304)
!3307 = !DILocation(line: 718, column: 7, scope: !3294)
!3308 = !DILocation(line: 719, column: 16, scope: !3304)
!3309 = !DILocation(line: 719, column: 21, scope: !3304)
!3310 = !DILocation(line: 719, column: 4, scope: !3304)
!3311 = !DILocation(line: 719, column: 9, scope: !3304)
!3312 = !DILocation(line: 719, column: 14, scope: !3304)
!3313 = !DILocation(line: 728, column: 7, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3294, file: !3, line: 728, column: 7)
!3315 = !DILocation(line: 728, column: 12, scope: !3314)
!3316 = !DILocation(line: 728, column: 7, scope: !3294)
!3317 = !DILocation(line: 731, column: 52, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3314, file: !3, line: 728, column: 18)
!3319 = !DILocation(line: 731, column: 57, scope: !3318)
!3320 = !DILocation(line: 731, column: 66, scope: !3318)
!3321 = !DILocation(line: 731, column: 34, scope: !3318)
!3322 = !DILocation(line: 731, column: 39, scope: !3318)
!3323 = !DILocation(line: 731, column: 50, scope: !3318)
!3324 = !DILocation(line: 731, column: 20, scope: !3318)
!3325 = !DILocation(line: 731, column: 25, scope: !3318)
!3326 = !DILocation(line: 731, column: 32, scope: !3318)
!3327 = !DILocation(line: 731, column: 4, scope: !3318)
!3328 = !DILocation(line: 731, column: 9, scope: !3318)
!3329 = !DILocation(line: 731, column: 18, scope: !3318)
!3330 = !DILocation(line: 732, column: 42, scope: !3318)
!3331 = !DILocation(line: 732, column: 47, scope: !3318)
!3332 = !DILocation(line: 732, column: 53, scope: !3318)
!3333 = !DILocation(line: 732, column: 64, scope: !3318)
!3334 = !DILocation(line: 732, column: 69, scope: !3318)
!3335 = !DILocation(line: 732, column: 75, scope: !3318)
!3336 = !DILocation(line: 732, column: 86, scope: !3318)
!3337 = !DILocation(line: 732, column: 91, scope: !3318)
!3338 = !DILocation(line: 732, column: 97, scope: !3318)
!3339 = !DILocation(line: 732, column: 34, scope: !3318)
!3340 = !DILocation(line: 732, column: 17, scope: !3318)
!3341 = !DILocation(line: 732, column: 22, scope: !3318)
!3342 = !DILocation(line: 732, column: 32, scope: !3318)
!3343 = !DILocation(line: 732, column: 4, scope: !3318)
!3344 = !DILocation(line: 732, column: 9, scope: !3318)
!3345 = !DILocation(line: 732, column: 15, scope: !3318)
!3346 = !DILocation(line: 733, column: 42, scope: !3318)
!3347 = !DILocation(line: 733, column: 47, scope: !3318)
!3348 = !DILocation(line: 733, column: 53, scope: !3318)
!3349 = !DILocation(line: 733, column: 64, scope: !3318)
!3350 = !DILocation(line: 733, column: 69, scope: !3318)
!3351 = !DILocation(line: 733, column: 75, scope: !3318)
!3352 = !DILocation(line: 733, column: 86, scope: !3318)
!3353 = !DILocation(line: 733, column: 91, scope: !3318)
!3354 = !DILocation(line: 733, column: 97, scope: !3318)
!3355 = !DILocation(line: 733, column: 34, scope: !3318)
!3356 = !DILocation(line: 733, column: 4, scope: !3318)
!3357 = !DILocation(line: 733, column: 9, scope: !3318)
!3358 = !DILocation(line: 733, column: 32, scope: !3318)
!3359 = !DILocation(line: 736, column: 8, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 736, column: 8)
!3361 = !DILocation(line: 736, column: 13, scope: !3360)
!3362 = !DILocation(line: 736, column: 23, scope: !3360)
!3363 = !DILocation(line: 736, column: 28, scope: !3360)
!3364 = !DILocation(line: 736, column: 21, scope: !3360)
!3365 = !DILocation(line: 736, column: 8, scope: !3318)
!3366 = !DILocation(line: 738, column: 18, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 736, column: 39)
!3368 = !DILocation(line: 738, column: 23, scope: !3367)
!3369 = !DILocation(line: 738, column: 5, scope: !3367)
!3370 = !DILocation(line: 738, column: 10, scope: !3367)
!3371 = !DILocation(line: 738, column: 16, scope: !3367)
!3372 = !DILocation(line: 739, column: 20, scope: !3367)
!3373 = !DILocation(line: 739, column: 25, scope: !3367)
!3374 = !DILocation(line: 739, column: 5, scope: !3367)
!3375 = !DILocation(line: 739, column: 10, scope: !3367)
!3376 = !DILocation(line: 739, column: 18, scope: !3367)
!3377 = !DILocation(line: 740, column: 22, scope: !3367)
!3378 = !DILocation(line: 740, column: 27, scope: !3367)
!3379 = !DILocation(line: 740, column: 5, scope: !3367)
!3380 = !DILocation(line: 740, column: 10, scope: !3367)
!3381 = !DILocation(line: 740, column: 20, scope: !3367)
!3382 = !DILocation(line: 741, column: 5, scope: !3367)
!3383 = !DILocation(line: 741, column: 10, scope: !3367)
!3384 = !DILocation(line: 741, column: 15, scope: !3367)
!3385 = !DILocation(line: 742, column: 4, scope: !3367)
!3386 = !DILocation(line: 744, column: 5, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 743, column: 9)
!3388 = !DILocation(line: 744, column: 10, scope: !3387)
!3389 = !DILocation(line: 744, column: 15, scope: !3387)
!3390 = !DILocation(line: 747, column: 15, scope: !3318)
!3391 = !DILocation(line: 747, column: 20, scope: !3318)
!3392 = !DILocation(line: 747, column: 30, scope: !3318)
!3393 = !DILocation(line: 747, column: 35, scope: !3318)
!3394 = !DILocation(line: 747, column: 28, scope: !3318)
!3395 = !DILocation(line: 747, column: 4, scope: !3318)
!3396 = !DILocation(line: 747, column: 9, scope: !3318)
!3397 = !DILocation(line: 747, column: 13, scope: !3318)
!3398 = !DILocation(line: 748, column: 3, scope: !3318)
!3399 = !DILocation(line: 750, column: 27, scope: !3400)
!3400 = distinct !DILexicalBlock(scope: !3314, file: !3, line: 749, column: 8)
!3401 = !DILocation(line: 750, column: 34, scope: !3400)
!3402 = !DILocation(line: 750, column: 4, scope: !3400)
!3403 = !DILocation(line: 752, column: 2, scope: !3294)
!3404 = !DILocation(line: 754, column: 7, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 754, column: 7)
!3406 = distinct !DILexicalBlock(scope: !3288, file: !3, line: 753, column: 7)
!3407 = !DILocation(line: 754, column: 12, scope: !3405)
!3408 = !DILocation(line: 754, column: 17, scope: !3405)
!3409 = !DILocation(line: 754, column: 7, scope: !3406)
!3410 = !DILocation(line: 755, column: 11, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 754, column: 35)
!3412 = !DILocation(line: 755, column: 16, scope: !3411)
!3413 = !DILocation(line: 755, column: 24, scope: !3411)
!3414 = !DILocation(line: 755, column: 9, scope: !3411)
!3415 = !DILocation(line: 756, column: 8, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3411, file: !3, line: 756, column: 8)
!3417 = !DILocation(line: 756, column: 8, scope: !3411)
!3418 = !DILocation(line: 757, column: 9, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 756, column: 14)
!3420 = !DILocation(line: 758, column: 9, scope: !3419)
!3421 = !DILocation(line: 759, column: 5, scope: !3419)
!3422 = !DILocation(line: 759, column: 12, scope: !3419)
!3423 = !DILocation(line: 760, column: 10, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 760, column: 10)
!3425 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 759, column: 18)
!3426 = !DILocation(line: 760, column: 16, scope: !3424)
!3427 = !DILocation(line: 760, column: 28, scope: !3424)
!3428 = !DILocation(line: 760, column: 26, scope: !3424)
!3429 = !DILocation(line: 760, column: 10, scope: !3425)
!3430 = !DILocation(line: 760, column: 39, scope: !3424)
!3431 = !DILocation(line: 760, column: 45, scope: !3424)
!3432 = !DILocation(line: 760, column: 37, scope: !3424)
!3433 = !DILocation(line: 760, column: 33, scope: !3424)
!3434 = !DILocation(line: 761, column: 10, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 761, column: 10)
!3436 = !DILocation(line: 761, column: 16, scope: !3435)
!3437 = !DILocation(line: 761, column: 26, scope: !3435)
!3438 = !DILocation(line: 761, column: 24, scope: !3435)
!3439 = !DILocation(line: 761, column: 10, scope: !3425)
!3440 = !DILocation(line: 761, column: 37, scope: !3435)
!3441 = !DILocation(line: 761, column: 43, scope: !3435)
!3442 = !DILocation(line: 761, column: 35, scope: !3435)
!3443 = !DILocation(line: 761, column: 31, scope: !3435)
!3444 = !DILocation(line: 762, column: 13, scope: !3425)
!3445 = !DILocation(line: 762, column: 19, scope: !3425)
!3446 = !DILocation(line: 762, column: 11, scope: !3425)
!3447 = distinct !{!3447, !3421, !3448}
!3448 = !DILocation(line: 763, column: 5, scope: !3419)
!3449 = !DILocation(line: 764, column: 18, scope: !3419)
!3450 = !DILocation(line: 764, column: 24, scope: !3419)
!3451 = !DILocation(line: 764, column: 29, scope: !3419)
!3452 = !DILocation(line: 764, column: 22, scope: !3419)
!3453 = !DILocation(line: 764, column: 5, scope: !3419)
!3454 = !DILocation(line: 764, column: 10, scope: !3419)
!3455 = !DILocation(line: 764, column: 16, scope: !3419)
!3456 = !DILocation(line: 765, column: 16, scope: !3419)
!3457 = !DILocation(line: 765, column: 22, scope: !3419)
!3458 = !DILocation(line: 765, column: 20, scope: !3419)
!3459 = !DILocation(line: 765, column: 5, scope: !3419)
!3460 = !DILocation(line: 765, column: 10, scope: !3419)
!3461 = !DILocation(line: 765, column: 14, scope: !3419)
!3462 = !DILocation(line: 766, column: 17, scope: !3419)
!3463 = !DILocation(line: 766, column: 22, scope: !3419)
!3464 = !DILocation(line: 766, column: 5, scope: !3419)
!3465 = !DILocation(line: 766, column: 10, scope: !3419)
!3466 = !DILocation(line: 766, column: 14, scope: !3419)
!3467 = !DILocation(line: 767, column: 17, scope: !3419)
!3468 = !DILocation(line: 767, column: 22, scope: !3419)
!3469 = !DILocation(line: 767, column: 5, scope: !3419)
!3470 = !DILocation(line: 767, column: 10, scope: !3419)
!3471 = !DILocation(line: 767, column: 14, scope: !3419)
!3472 = !DILocation(line: 768, column: 4, scope: !3419)
!3473 = !DILocation(line: 769, column: 38, scope: !3411)
!3474 = !DILocation(line: 769, column: 45, scope: !3411)
!3475 = !DILocation(line: 769, column: 4, scope: !3411)
!3476 = !DILocation(line: 770, column: 3, scope: !3411)
!3477 = !DILocation(line: 771, column: 26, scope: !3406)
!3478 = !DILocation(line: 771, column: 33, scope: !3406)
!3479 = !DILocation(line: 771, column: 3, scope: !3406)
!3480 = !DILocation(line: 773, column: 1, scope: !3256)
!3481 = distinct !DISubprogram(name: "max_iii", scope: !3482, file: !3482, line: 233, type: !3483, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3482 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_base_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!3483 = !DISubroutineType(types: !3484)
!3484 = !{!45, !45, !45, !45}
!3485 = !DILocalVariable(name: "a", arg: 1, scope: !3481, file: !3482, line: 233, type: !45)
!3486 = !DILocation(line: 233, column: 25, scope: !3481)
!3487 = !DILocalVariable(name: "b", arg: 2, scope: !3481, file: !3482, line: 233, type: !45)
!3488 = !DILocation(line: 233, column: 32, scope: !3481)
!3489 = !DILocalVariable(name: "c", arg: 3, scope: !3481, file: !3482, line: 233, type: !45)
!3490 = !DILocation(line: 233, column: 39, scope: !3481)
!3491 = !DILocation(line: 235, column: 23, scope: !3481)
!3492 = !DILocation(line: 235, column: 26, scope: !3481)
!3493 = !DILocation(line: 235, column: 16, scope: !3481)
!3494 = !DILocation(line: 235, column: 30, scope: !3481)
!3495 = !DILocation(line: 235, column: 9, scope: !3481)
!3496 = !DILocation(line: 235, column: 2, scope: !3481)
!3497 = distinct !DISubprogram(name: "min_iii", scope: !3482, file: !3482, line: 229, type: !3483, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3498 = !DILocalVariable(name: "a", arg: 1, scope: !3497, file: !3482, line: 229, type: !45)
!3499 = !DILocation(line: 229, column: 25, scope: !3497)
!3500 = !DILocalVariable(name: "b", arg: 2, scope: !3497, file: !3482, line: 229, type: !45)
!3501 = !DILocation(line: 229, column: 32, scope: !3497)
!3502 = !DILocalVariable(name: "c", arg: 3, scope: !3497, file: !3482, line: 229, type: !45)
!3503 = !DILocation(line: 229, column: 39, scope: !3497)
!3504 = !DILocation(line: 231, column: 23, scope: !3497)
!3505 = !DILocation(line: 231, column: 26, scope: !3497)
!3506 = !DILocation(line: 231, column: 16, scope: !3497)
!3507 = !DILocation(line: 231, column: 30, scope: !3497)
!3508 = !DILocation(line: 231, column: 9, scope: !3497)
!3509 = !DILocation(line: 231, column: 2, scope: !3497)
!3510 = distinct !DISubprogram(name: "BKE_sequence_reload_new_file", scope: !3, file: !3, line: 776, type: !2119, scopeLine: 777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3511 = !DILocalVariable(name: "scene", arg: 1, scope: !3510, file: !3, line: 776, type: !1744)
!3512 = !DILocation(line: 776, column: 42, scope: !3510)
!3513 = !DILocalVariable(name: "seq", arg: 2, scope: !3510, file: !3, line: 776, type: !204)
!3514 = !DILocation(line: 776, column: 59, scope: !3510)
!3515 = !DILocalVariable(name: "lock_range", arg: 3, scope: !3510, file: !3, line: 776, type: !2121)
!3516 = !DILocation(line: 776, column: 75, scope: !3510)
!3517 = !DILocalVariable(name: "str", scope: !3510, file: !3, line: 778, type: !143)
!3518 = !DILocation(line: 778, column: 7, scope: !3510)
!3519 = !DILocalVariable(name: "prev_startdisp", scope: !3510, file: !3, line: 779, type: !45)
!3520 = !DILocation(line: 779, column: 6, scope: !3510)
!3521 = !DILocalVariable(name: "prev_enddisp", scope: !3510, file: !3, line: 779, type: !45)
!3522 = !DILocation(line: 779, column: 26, scope: !3510)
!3523 = !DILocation(line: 782, column: 6, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 782, column: 6)
!3525 = !DILocation(line: 784, column: 78, scope: !3524)
!3526 = !DILocation(line: 782, column: 6, scope: !3510)
!3527 = !DILocation(line: 786, column: 3, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 785, column: 2)
!3529 = !DILocation(line: 789, column: 6, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 789, column: 6)
!3531 = !DILocation(line: 789, column: 6, scope: !3510)
!3532 = !DILocation(line: 791, column: 26, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 789, column: 18)
!3534 = !DILocation(line: 791, column: 33, scope: !3533)
!3535 = !DILocation(line: 791, column: 3, scope: !3533)
!3536 = !DILocation(line: 792, column: 20, scope: !3533)
!3537 = !DILocation(line: 792, column: 25, scope: !3533)
!3538 = !DILocation(line: 792, column: 18, scope: !3533)
!3539 = !DILocation(line: 793, column: 18, scope: !3533)
!3540 = !DILocation(line: 793, column: 23, scope: !3533)
!3541 = !DILocation(line: 793, column: 16, scope: !3533)
!3542 = !DILocation(line: 794, column: 2, scope: !3533)
!3543 = !DILocation(line: 796, column: 10, scope: !3510)
!3544 = !DILocation(line: 796, column: 15, scope: !3510)
!3545 = !DILocation(line: 796, column: 2, scope: !3510)
!3546 = !DILocalVariable(name: "olen", scope: !3547, file: !3, line: 800, type: !3549)
!3547 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 798, column: 3)
!3548 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 796, column: 21)
!3549 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3550, line: 46, baseType: !615)
!3550 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3551 = !DILocation(line: 800, column: 11, scope: !3547)
!3552 = !DILocation(line: 800, column: 18, scope: !3547)
!3553 = !DILocation(line: 800, column: 33, scope: !3547)
!3554 = !DILocation(line: 800, column: 38, scope: !3547)
!3555 = !DILocation(line: 800, column: 45, scope: !3547)
!3556 = !DILocation(line: 800, column: 56, scope: !3547)
!3557 = !DILocation(line: 802, column: 15, scope: !3547)
!3558 = !DILocation(line: 802, column: 4, scope: !3547)
!3559 = !DILocation(line: 802, column: 9, scope: !3547)
!3560 = !DILocation(line: 802, column: 13, scope: !3547)
!3561 = !DILocation(line: 803, column: 16, scope: !3547)
!3562 = !DILocation(line: 803, column: 21, scope: !3547)
!3563 = !DILocation(line: 803, column: 4, scope: !3547)
!3564 = !DILocation(line: 803, column: 9, scope: !3547)
!3565 = !DILocation(line: 803, column: 13, scope: !3547)
!3566 = !DILocation(line: 804, column: 16, scope: !3547)
!3567 = !DILocation(line: 804, column: 21, scope: !3547)
!3568 = !DILocation(line: 804, column: 4, scope: !3547)
!3569 = !DILocation(line: 804, column: 9, scope: !3547)
!3570 = !DILocation(line: 804, column: 13, scope: !3547)
!3571 = !DILocation(line: 805, column: 8, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 805, column: 8)
!3573 = !DILocation(line: 805, column: 13, scope: !3572)
!3574 = !DILocation(line: 805, column: 17, scope: !3572)
!3575 = !DILocation(line: 805, column: 8, scope: !3547)
!3576 = !DILocation(line: 806, column: 5, scope: !3577)
!3577 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 805, column: 22)
!3578 = !DILocation(line: 806, column: 10, scope: !3577)
!3579 = !DILocation(line: 806, column: 14, scope: !3577)
!3580 = !DILocation(line: 807, column: 4, scope: !3577)
!3581 = !DILocation(line: 808, column: 4, scope: !3547)
!3582 = !DILocation(line: 811, column: 21, scope: !3548)
!3583 = !DILocation(line: 811, column: 39, scope: !3548)
!3584 = !DILocation(line: 811, column: 44, scope: !3548)
!3585 = !DILocation(line: 811, column: 51, scope: !3548)
!3586 = !DILocation(line: 812, column: 21, scope: !3548)
!3587 = !DILocation(line: 812, column: 26, scope: !3548)
!3588 = !DILocation(line: 812, column: 33, scope: !3548)
!3589 = !DILocation(line: 812, column: 44, scope: !3548)
!3590 = !DILocation(line: 811, column: 4, scope: !3548)
!3591 = !DILocation(line: 813, column: 17, scope: !3548)
!3592 = !DILocation(line: 813, column: 24, scope: !3548)
!3593 = !DILocation(line: 813, column: 30, scope: !3548)
!3594 = !DILocation(line: 813, column: 22, scope: !3548)
!3595 = !DILocation(line: 813, column: 4, scope: !3548)
!3596 = !DILocation(line: 815, column: 8, scope: !3597)
!3597 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 815, column: 8)
!3598 = !DILocation(line: 815, column: 13, scope: !3597)
!3599 = !DILocation(line: 815, column: 8, scope: !3548)
!3600 = !DILocation(line: 815, column: 33, scope: !3597)
!3601 = !DILocation(line: 815, column: 38, scope: !3597)
!3602 = !DILocation(line: 815, column: 19, scope: !3597)
!3603 = !DILocation(line: 817, column: 25, scope: !3548)
!3604 = !DILocation(line: 817, column: 42, scope: !3548)
!3605 = !DILocation(line: 817, column: 47, scope: !3548)
!3606 = !DILocation(line: 817, column: 52, scope: !3548)
!3607 = !DILocation(line: 817, column: 41, scope: !3548)
!3608 = !DILocation(line: 817, column: 38, scope: !3548)
!3609 = !DILocation(line: 818, column: 25, scope: !3548)
!3610 = !DILocation(line: 818, column: 30, scope: !3548)
!3611 = !DILocation(line: 818, column: 43, scope: !3548)
!3612 = !DILocation(line: 818, column: 48, scope: !3548)
!3613 = !DILocation(line: 818, column: 55, scope: !3548)
!3614 = !DILocation(line: 818, column: 75, scope: !3548)
!3615 = !DILocation(line: 817, column: 16, scope: !3548)
!3616 = !DILocation(line: 817, column: 4, scope: !3548)
!3617 = !DILocation(line: 817, column: 9, scope: !3548)
!3618 = !DILocation(line: 817, column: 14, scope: !3548)
!3619 = !DILocation(line: 820, column: 9, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 820, column: 8)
!3621 = !DILocation(line: 820, column: 14, scope: !3620)
!3622 = !DILocation(line: 820, column: 8, scope: !3548)
!3623 = !DILocation(line: 821, column: 5, scope: !3624)
!3624 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 820, column: 20)
!3625 = !DILocation(line: 824, column: 37, scope: !3548)
!3626 = !DILocation(line: 824, column: 42, scope: !3548)
!3627 = !DILocation(line: 824, column: 48, scope: !3548)
!3628 = !DILocation(line: 824, column: 53, scope: !3548)
!3629 = !DILocation(line: 824, column: 60, scope: !3548)
!3630 = !DILocation(line: 824, column: 68, scope: !3548)
!3631 = !DILocation(line: 824, column: 73, scope: !3548)
!3632 = !DILocation(line: 824, column: 80, scope: !3548)
!3633 = !DILocation(line: 824, column: 87, scope: !3548)
!3634 = !DILocation(line: 824, column: 15, scope: !3548)
!3635 = !DILocation(line: 824, column: 4, scope: !3548)
!3636 = !DILocation(line: 824, column: 9, scope: !3548)
!3637 = !DILocation(line: 824, column: 13, scope: !3548)
!3638 = !DILocation(line: 826, column: 45, scope: !3548)
!3639 = !DILocation(line: 826, column: 50, scope: !3548)
!3640 = !DILocation(line: 826, column: 24, scope: !3548)
!3641 = !DILocation(line: 826, column: 4, scope: !3548)
!3642 = !DILocation(line: 826, column: 9, scope: !3548)
!3643 = !DILocation(line: 826, column: 22, scope: !3548)
!3644 = !DILocation(line: 828, column: 16, scope: !3548)
!3645 = !DILocation(line: 828, column: 21, scope: !3548)
!3646 = !DILocation(line: 828, column: 4, scope: !3548)
!3647 = !DILocation(line: 828, column: 9, scope: !3548)
!3648 = !DILocation(line: 828, column: 13, scope: !3548)
!3649 = !DILocation(line: 829, column: 16, scope: !3548)
!3650 = !DILocation(line: 829, column: 21, scope: !3548)
!3651 = !DILocation(line: 829, column: 4, scope: !3548)
!3652 = !DILocation(line: 829, column: 9, scope: !3548)
!3653 = !DILocation(line: 829, column: 13, scope: !3548)
!3654 = !DILocation(line: 830, column: 8, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 830, column: 8)
!3656 = !DILocation(line: 830, column: 13, scope: !3655)
!3657 = !DILocation(line: 830, column: 17, scope: !3655)
!3658 = !DILocation(line: 830, column: 8, scope: !3548)
!3659 = !DILocation(line: 831, column: 5, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3655, file: !3, line: 830, column: 22)
!3661 = !DILocation(line: 831, column: 10, scope: !3660)
!3662 = !DILocation(line: 831, column: 14, scope: !3660)
!3663 = !DILocation(line: 832, column: 4, scope: !3660)
!3664 = !DILocation(line: 833, column: 4, scope: !3548)
!3665 = !DILocation(line: 835, column: 8, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 835, column: 8)
!3667 = !DILocation(line: 835, column: 13, scope: !3666)
!3668 = !DILocation(line: 835, column: 18, scope: !3666)
!3669 = !DILocation(line: 835, column: 8, scope: !3548)
!3670 = !DILocation(line: 836, column: 5, scope: !3666)
!3671 = !DILocation(line: 838, column: 42, scope: !3548)
!3672 = !DILocation(line: 838, column: 47, scope: !3548)
!3673 = !DILocation(line: 838, column: 15, scope: !3548)
!3674 = !DILocation(line: 838, column: 4, scope: !3548)
!3675 = !DILocation(line: 838, column: 9, scope: !3548)
!3676 = !DILocation(line: 838, column: 13, scope: !3548)
!3677 = !DILocation(line: 840, column: 16, scope: !3548)
!3678 = !DILocation(line: 840, column: 21, scope: !3548)
!3679 = !DILocation(line: 840, column: 4, scope: !3548)
!3680 = !DILocation(line: 840, column: 9, scope: !3548)
!3681 = !DILocation(line: 840, column: 13, scope: !3548)
!3682 = !DILocation(line: 841, column: 16, scope: !3548)
!3683 = !DILocation(line: 841, column: 21, scope: !3548)
!3684 = !DILocation(line: 841, column: 4, scope: !3548)
!3685 = !DILocation(line: 841, column: 9, scope: !3548)
!3686 = !DILocation(line: 841, column: 13, scope: !3548)
!3687 = !DILocation(line: 842, column: 8, scope: !3688)
!3688 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 842, column: 8)
!3689 = !DILocation(line: 842, column: 13, scope: !3688)
!3690 = !DILocation(line: 842, column: 17, scope: !3688)
!3691 = !DILocation(line: 842, column: 8, scope: !3548)
!3692 = !DILocation(line: 843, column: 5, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3688, file: !3, line: 842, column: 22)
!3694 = !DILocation(line: 843, column: 10, scope: !3693)
!3695 = !DILocation(line: 843, column: 14, scope: !3693)
!3696 = !DILocation(line: 844, column: 4, scope: !3693)
!3697 = !DILocation(line: 845, column: 4, scope: !3548)
!3698 = !DILocation(line: 847, column: 8, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 847, column: 8)
!3700 = !DILocation(line: 847, column: 13, scope: !3699)
!3701 = !DILocation(line: 847, column: 18, scope: !3699)
!3702 = !DILocation(line: 847, column: 8, scope: !3548)
!3703 = !DILocation(line: 848, column: 5, scope: !3699)
!3704 = !DILocation(line: 849, column: 37, scope: !3548)
!3705 = !DILocation(line: 849, column: 42, scope: !3548)
!3706 = !DILocation(line: 849, column: 15, scope: !3548)
!3707 = !DILocation(line: 849, column: 4, scope: !3548)
!3708 = !DILocation(line: 849, column: 9, scope: !3548)
!3709 = !DILocation(line: 849, column: 13, scope: !3548)
!3710 = !DILocation(line: 850, column: 16, scope: !3548)
!3711 = !DILocation(line: 850, column: 21, scope: !3548)
!3712 = !DILocation(line: 850, column: 4, scope: !3548)
!3713 = !DILocation(line: 850, column: 9, scope: !3548)
!3714 = !DILocation(line: 850, column: 13, scope: !3548)
!3715 = !DILocation(line: 851, column: 16, scope: !3548)
!3716 = !DILocation(line: 851, column: 21, scope: !3548)
!3717 = !DILocation(line: 851, column: 4, scope: !3548)
!3718 = !DILocation(line: 851, column: 9, scope: !3548)
!3719 = !DILocation(line: 851, column: 13, scope: !3548)
!3720 = !DILocation(line: 852, column: 8, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 852, column: 8)
!3722 = !DILocation(line: 852, column: 13, scope: !3721)
!3723 = !DILocation(line: 852, column: 17, scope: !3721)
!3724 = !DILocation(line: 852, column: 8, scope: !3548)
!3725 = !DILocation(line: 853, column: 5, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 852, column: 22)
!3727 = !DILocation(line: 853, column: 10, scope: !3726)
!3728 = !DILocation(line: 853, column: 14, scope: !3726)
!3729 = !DILocation(line: 854, column: 4, scope: !3726)
!3730 = !DILocation(line: 855, column: 4, scope: !3548)
!3731 = !DILocation(line: 867, column: 4, scope: !3548)
!3732 = !DILocation(line: 872, column: 16, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 871, column: 3)
!3734 = !DILocation(line: 872, column: 21, scope: !3733)
!3735 = !DILocation(line: 872, column: 15, scope: !3733)
!3736 = !DILocation(line: 872, column: 30, scope: !3733)
!3737 = !DILocation(line: 872, column: 35, scope: !3733)
!3738 = !DILocation(line: 872, column: 42, scope: !3733)
!3739 = !DILocation(line: 872, column: 44, scope: !3733)
!3740 = !DILocation(line: 872, column: 51, scope: !3733)
!3741 = !DILocation(line: 872, column: 56, scope: !3733)
!3742 = !DILocation(line: 872, column: 63, scope: !3733)
!3743 = !DILocation(line: 872, column: 65, scope: !3733)
!3744 = !DILocation(line: 872, column: 49, scope: !3733)
!3745 = !DILocation(line: 872, column: 70, scope: !3733)
!3746 = !DILocation(line: 872, column: 4, scope: !3733)
!3747 = !DILocation(line: 872, column: 9, scope: !3733)
!3748 = !DILocation(line: 872, column: 13, scope: !3733)
!3749 = !DILocation(line: 873, column: 16, scope: !3733)
!3750 = !DILocation(line: 873, column: 21, scope: !3733)
!3751 = !DILocation(line: 873, column: 4, scope: !3733)
!3752 = !DILocation(line: 873, column: 9, scope: !3733)
!3753 = !DILocation(line: 873, column: 13, scope: !3733)
!3754 = !DILocation(line: 874, column: 16, scope: !3733)
!3755 = !DILocation(line: 874, column: 21, scope: !3733)
!3756 = !DILocation(line: 874, column: 4, scope: !3733)
!3757 = !DILocation(line: 874, column: 9, scope: !3733)
!3758 = !DILocation(line: 874, column: 13, scope: !3733)
!3759 = !DILocation(line: 875, column: 8, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3733, file: !3, line: 875, column: 8)
!3761 = !DILocation(line: 875, column: 13, scope: !3760)
!3762 = !DILocation(line: 875, column: 17, scope: !3760)
!3763 = !DILocation(line: 875, column: 8, scope: !3733)
!3764 = !DILocation(line: 876, column: 5, scope: !3765)
!3765 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 875, column: 22)
!3766 = !DILocation(line: 876, column: 10, scope: !3765)
!3767 = !DILocation(line: 876, column: 14, scope: !3765)
!3768 = !DILocation(line: 877, column: 4, scope: !3765)
!3769 = !DILocation(line: 878, column: 4, scope: !3733)
!3770 = !DILocation(line: 882, column: 17, scope: !3510)
!3771 = !DILocation(line: 882, column: 2, scope: !3510)
!3772 = !DILocation(line: 884, column: 6, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 884, column: 6)
!3774 = !DILocation(line: 884, column: 6, scope: !3510)
!3775 = !DILocation(line: 885, column: 34, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 884, column: 18)
!3777 = !DILocation(line: 885, column: 39, scope: !3776)
!3778 = !DILocation(line: 885, column: 3, scope: !3776)
!3779 = !DILocation(line: 886, column: 35, scope: !3776)
!3780 = !DILocation(line: 886, column: 40, scope: !3776)
!3781 = !DILocation(line: 886, column: 3, scope: !3776)
!3782 = !DILocation(line: 887, column: 27, scope: !3776)
!3783 = !DILocation(line: 887, column: 3, scope: !3776)
!3784 = !DILocation(line: 888, column: 2, scope: !3776)
!3785 = !DILocation(line: 890, column: 20, scope: !3510)
!3786 = !DILocation(line: 890, column: 27, scope: !3510)
!3787 = !DILocation(line: 890, column: 2, scope: !3510)
!3788 = !DILocation(line: 891, column: 1, scope: !3510)
!3789 = distinct !DISubprogram(name: "free_proxy_seq", scope: !3, file: !3, line: 143, type: !2375, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3790 = !DILocalVariable(name: "seq", arg: 1, scope: !3789, file: !3, line: 143, type: !204)
!3791 = !DILocation(line: 143, column: 38, scope: !3789)
!3792 = !DILocation(line: 145, column: 6, scope: !3793)
!3793 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 145, column: 6)
!3794 = !DILocation(line: 145, column: 11, scope: !3793)
!3795 = !DILocation(line: 145, column: 17, scope: !3793)
!3796 = !DILocation(line: 145, column: 20, scope: !3793)
!3797 = !DILocation(line: 145, column: 25, scope: !3793)
!3798 = !DILocation(line: 145, column: 32, scope: !3793)
!3799 = !DILocation(line: 145, column: 38, scope: !3793)
!3800 = !DILocation(line: 145, column: 41, scope: !3793)
!3801 = !DILocation(line: 145, column: 46, scope: !3793)
!3802 = !DILocation(line: 145, column: 53, scope: !3793)
!3803 = !DILocation(line: 145, column: 60, scope: !3793)
!3804 = !DILocation(line: 145, column: 6, scope: !3789)
!3805 = !DILocation(line: 146, column: 17, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3793, file: !3, line: 145, column: 66)
!3807 = !DILocation(line: 146, column: 22, scope: !3806)
!3808 = !DILocation(line: 146, column: 29, scope: !3806)
!3809 = !DILocation(line: 146, column: 36, scope: !3806)
!3810 = !DILocation(line: 146, column: 3, scope: !3806)
!3811 = !DILocation(line: 147, column: 3, scope: !3806)
!3812 = !DILocation(line: 147, column: 8, scope: !3806)
!3813 = !DILocation(line: 147, column: 15, scope: !3806)
!3814 = !DILocation(line: 147, column: 22, scope: !3806)
!3815 = !DILocation(line: 147, column: 27, scope: !3806)
!3816 = !DILocation(line: 148, column: 2, scope: !3806)
!3817 = !DILocation(line: 149, column: 1, scope: !3789)
!3818 = distinct !DISubprogram(name: "BKE_sequence_tx_set_final_left", scope: !3, file: !3, line: 3531, type: !3819, scopeLine: 3532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3819 = !DISubroutineType(types: !3820)
!3820 = !{null, !204, !45}
!3821 = !DILocalVariable(name: "seq", arg: 1, scope: !3818, file: !3, line: 3531, type: !204)
!3822 = !DILocation(line: 3531, column: 47, scope: !3818)
!3823 = !DILocalVariable(name: "val", arg: 2, scope: !3818, file: !3, line: 3531, type: !45)
!3824 = !DILocation(line: 3531, column: 56, scope: !3818)
!3825 = !DILocation(line: 3533, column: 6, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 3533, column: 6)
!3827 = !DILocation(line: 3533, column: 13, scope: !3826)
!3828 = !DILocation(line: 3533, column: 19, scope: !3826)
!3829 = !DILocation(line: 3533, column: 10, scope: !3826)
!3830 = !DILocation(line: 3533, column: 6, scope: !3818)
!3831 = !DILocation(line: 3534, column: 25, scope: !3832)
!3832 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 3533, column: 26)
!3833 = !DILocation(line: 3534, column: 32, scope: !3832)
!3834 = !DILocation(line: 3534, column: 38, scope: !3832)
!3835 = !DILocation(line: 3534, column: 29, scope: !3832)
!3836 = !DILocation(line: 3534, column: 21, scope: !3832)
!3837 = !DILocation(line: 3534, column: 3, scope: !3832)
!3838 = !DILocation(line: 3534, column: 8, scope: !3832)
!3839 = !DILocation(line: 3534, column: 19, scope: !3832)
!3840 = !DILocation(line: 3535, column: 3, scope: !3832)
!3841 = !DILocation(line: 3535, column: 8, scope: !3832)
!3842 = !DILocation(line: 3535, column: 17, scope: !3832)
!3843 = !DILocation(line: 3536, column: 2, scope: !3832)
!3844 = !DILocation(line: 3538, column: 23, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 3537, column: 7)
!3846 = !DILocation(line: 3538, column: 30, scope: !3845)
!3847 = !DILocation(line: 3538, column: 36, scope: !3845)
!3848 = !DILocation(line: 3538, column: 27, scope: !3845)
!3849 = !DILocation(line: 3538, column: 19, scope: !3845)
!3850 = !DILocation(line: 3538, column: 3, scope: !3845)
!3851 = !DILocation(line: 3538, column: 8, scope: !3845)
!3852 = !DILocation(line: 3538, column: 17, scope: !3845)
!3853 = !DILocation(line: 3539, column: 3, scope: !3845)
!3854 = !DILocation(line: 3539, column: 8, scope: !3845)
!3855 = !DILocation(line: 3539, column: 19, scope: !3845)
!3856 = !DILocation(line: 3541, column: 1, scope: !3818)
!3857 = distinct !DISubprogram(name: "BKE_sequence_tx_set_final_right", scope: !3, file: !3, line: 3543, type: !3819, scopeLine: 3544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3858 = !DILocalVariable(name: "seq", arg: 1, scope: !3857, file: !3, line: 3543, type: !204)
!3859 = !DILocation(line: 3543, column: 48, scope: !3857)
!3860 = !DILocalVariable(name: "val", arg: 2, scope: !3857, file: !3, line: 3543, type: !45)
!3861 = !DILocation(line: 3543, column: 57, scope: !3857)
!3862 = !DILocation(line: 3545, column: 6, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3857, file: !3, line: 3545, column: 6)
!3864 = !DILocation(line: 3545, column: 13, scope: !3863)
!3865 = !DILocation(line: 3545, column: 19, scope: !3863)
!3866 = !DILocation(line: 3545, column: 28, scope: !3863)
!3867 = !DILocation(line: 3545, column: 34, scope: !3863)
!3868 = !DILocation(line: 3545, column: 25, scope: !3863)
!3869 = !DILocation(line: 3545, column: 10, scope: !3863)
!3870 = !DILocation(line: 3545, column: 6, scope: !3857)
!3871 = !DILocation(line: 3546, column: 23, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3863, file: !3, line: 3545, column: 39)
!3873 = !DILocation(line: 3546, column: 30, scope: !3872)
!3874 = !DILocation(line: 3546, column: 35, scope: !3872)
!3875 = !DILocation(line: 3546, column: 44, scope: !3872)
!3876 = !DILocation(line: 3546, column: 50, scope: !3872)
!3877 = !DILocation(line: 3546, column: 41, scope: !3872)
!3878 = !DILocation(line: 3546, column: 27, scope: !3872)
!3879 = !DILocation(line: 3546, column: 19, scope: !3872)
!3880 = !DILocation(line: 3546, column: 3, scope: !3872)
!3881 = !DILocation(line: 3546, column: 8, scope: !3872)
!3882 = !DILocation(line: 3546, column: 17, scope: !3872)
!3883 = !DILocation(line: 3547, column: 3, scope: !3872)
!3884 = !DILocation(line: 3547, column: 8, scope: !3872)
!3885 = !DILocation(line: 3547, column: 15, scope: !3872)
!3886 = !DILocation(line: 3548, column: 2, scope: !3872)
!3887 = !DILocation(line: 3550, column: 21, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3863, file: !3, line: 3549, column: 7)
!3889 = !DILocation(line: 3550, column: 29, scope: !3888)
!3890 = !DILocation(line: 3550, column: 35, scope: !3888)
!3891 = !DILocation(line: 3550, column: 44, scope: !3888)
!3892 = !DILocation(line: 3550, column: 50, scope: !3888)
!3893 = !DILocation(line: 3550, column: 41, scope: !3888)
!3894 = !DILocation(line: 3550, column: 25, scope: !3888)
!3895 = !DILocation(line: 3550, column: 17, scope: !3888)
!3896 = !DILocation(line: 3550, column: 3, scope: !3888)
!3897 = !DILocation(line: 3550, column: 8, scope: !3888)
!3898 = !DILocation(line: 3550, column: 15, scope: !3888)
!3899 = !DILocation(line: 3551, column: 3, scope: !3888)
!3900 = !DILocation(line: 3551, column: 8, scope: !3888)
!3901 = !DILocation(line: 3551, column: 17, scope: !3888)
!3902 = !DILocation(line: 3553, column: 1, scope: !3857)
!3903 = distinct !DISubprogram(name: "BKE_sequence_single_fix", scope: !3, file: !3, line: 3665, type: !2375, scopeLine: 3666, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3904 = !DILocalVariable(name: "seq", arg: 1, scope: !3903, file: !3, line: 3665, type: !204)
!3905 = !DILocation(line: 3665, column: 40, scope: !3903)
!3906 = !DILocalVariable(name: "left", scope: !3903, file: !3, line: 3667, type: !45)
!3907 = !DILocation(line: 3667, column: 6, scope: !3903)
!3908 = !DILocalVariable(name: "start", scope: !3903, file: !3, line: 3667, type: !45)
!3909 = !DILocation(line: 3667, column: 12, scope: !3903)
!3910 = !DILocalVariable(name: "offset", scope: !3903, file: !3, line: 3667, type: !45)
!3911 = !DILocation(line: 3667, column: 19, scope: !3903)
!3912 = !DILocation(line: 3668, column: 33, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 3668, column: 6)
!3914 = !DILocation(line: 3668, column: 7, scope: !3913)
!3915 = !DILocation(line: 3668, column: 6, scope: !3903)
!3916 = !DILocation(line: 3669, column: 3, scope: !3913)
!3917 = !DILocation(line: 3673, column: 40, scope: !3903)
!3918 = !DILocation(line: 3673, column: 9, scope: !3903)
!3919 = !DILocation(line: 3673, column: 7, scope: !3903)
!3920 = !DILocation(line: 3674, column: 10, scope: !3903)
!3921 = !DILocation(line: 3674, column: 15, scope: !3903)
!3922 = !DILocation(line: 3674, column: 8, scope: !3903)
!3923 = !DILocation(line: 3675, column: 6, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 3675, column: 6)
!3925 = !DILocation(line: 3675, column: 15, scope: !3924)
!3926 = !DILocation(line: 3675, column: 12, scope: !3924)
!3927 = !DILocation(line: 3675, column: 6, scope: !3903)
!3928 = !DILocation(line: 3676, column: 12, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 3675, column: 21)
!3930 = !DILocation(line: 3676, column: 19, scope: !3929)
!3931 = !DILocation(line: 3676, column: 17, scope: !3929)
!3932 = !DILocation(line: 3676, column: 10, scope: !3929)
!3933 = !DILocation(line: 3677, column: 34, scope: !3929)
!3934 = !DILocation(line: 3677, column: 70, scope: !3929)
!3935 = !DILocation(line: 3677, column: 39, scope: !3929)
!3936 = !DILocation(line: 3677, column: 84, scope: !3929)
!3937 = !DILocation(line: 3677, column: 82, scope: !3929)
!3938 = !DILocation(line: 3677, column: 3, scope: !3929)
!3939 = !DILocation(line: 3678, column: 35, scope: !3929)
!3940 = !DILocation(line: 3678, column: 72, scope: !3929)
!3941 = !DILocation(line: 3678, column: 40, scope: !3929)
!3942 = !DILocation(line: 3678, column: 86, scope: !3929)
!3943 = !DILocation(line: 3678, column: 84, scope: !3929)
!3944 = !DILocation(line: 3678, column: 3, scope: !3929)
!3945 = !DILocation(line: 3679, column: 17, scope: !3929)
!3946 = !DILocation(line: 3679, column: 3, scope: !3929)
!3947 = !DILocation(line: 3679, column: 8, scope: !3929)
!3948 = !DILocation(line: 3679, column: 14, scope: !3929)
!3949 = !DILocation(line: 3680, column: 2, scope: !3929)
!3950 = !DILocation(line: 3681, column: 1, scope: !3903)
!3951 = distinct !DISubprogram(name: "BKE_sequencer_sort", scope: !3, file: !3, line: 893, type: !2659, scopeLine: 894, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!3952 = !DILocalVariable(name: "scene", arg: 1, scope: !3951, file: !3, line: 893, type: !1744)
!3953 = !DILocation(line: 893, column: 32, scope: !3951)
!3954 = !DILocalVariable(name: "seqbase", scope: !3951, file: !3, line: 896, type: !183)
!3955 = !DILocation(line: 896, column: 11, scope: !3951)
!3956 = !DILocalVariable(name: "effbase", scope: !3951, file: !3, line: 896, type: !183)
!3957 = !DILocation(line: 896, column: 20, scope: !3951)
!3958 = !DILocalVariable(name: "ed", scope: !3951, file: !3, line: 897, type: !2176)
!3959 = !DILocation(line: 897, column: 11, scope: !3951)
!3960 = !DILocation(line: 897, column: 42, scope: !3951)
!3961 = !DILocation(line: 897, column: 16, scope: !3951)
!3962 = !DILocalVariable(name: "seq", scope: !3951, file: !3, line: 898, type: !204)
!3963 = !DILocation(line: 898, column: 12, scope: !3951)
!3964 = !DILocalVariable(name: "seqt", scope: !3951, file: !3, line: 898, type: !204)
!3965 = !DILocation(line: 898, column: 18, scope: !3951)
!3966 = !DILocation(line: 901, column: 6, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 901, column: 6)
!3968 = !DILocation(line: 901, column: 9, scope: !3967)
!3969 = !DILocation(line: 901, column: 6, scope: !3951)
!3970 = !DILocation(line: 902, column: 3, scope: !3967)
!3971 = !DILocation(line: 904, column: 2, scope: !3951)
!3972 = !DILocation(line: 905, column: 2, scope: !3951)
!3973 = !DILocation(line: 907, column: 2, scope: !3951)
!3974 = !DILocation(line: 907, column: 28, scope: !3951)
!3975 = !DILocation(line: 907, column: 32, scope: !3951)
!3976 = !DILocation(line: 907, column: 16, scope: !3951)
!3977 = !DILocation(line: 907, column: 14, scope: !3951)
!3978 = !DILocation(line: 909, column: 7, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 909, column: 7)
!3980 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 907, column: 44)
!3981 = !DILocation(line: 909, column: 12, scope: !3979)
!3982 = !DILocation(line: 909, column: 17, scope: !3979)
!3983 = !DILocation(line: 909, column: 7, scope: !3980)
!3984 = !DILocation(line: 910, column: 19, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 909, column: 36)
!3986 = !DILocation(line: 910, column: 11, scope: !3985)
!3987 = !DILocation(line: 910, column: 9, scope: !3985)
!3988 = !DILocation(line: 911, column: 4, scope: !3985)
!3989 = !DILocation(line: 911, column: 11, scope: !3985)
!3990 = !DILocation(line: 912, column: 9, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3992, file: !3, line: 912, column: 9)
!3992 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 911, column: 17)
!3993 = !DILocation(line: 912, column: 15, scope: !3991)
!3994 = !DILocation(line: 912, column: 26, scope: !3991)
!3995 = !DILocation(line: 912, column: 31, scope: !3991)
!3996 = !DILocation(line: 912, column: 23, scope: !3991)
!3997 = !DILocation(line: 912, column: 9, scope: !3992)
!3998 = !DILocation(line: 913, column: 37, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3991, file: !3, line: 912, column: 40)
!4000 = !DILocation(line: 913, column: 43, scope: !3999)
!4001 = !DILocation(line: 913, column: 6, scope: !3999)
!4002 = !DILocation(line: 914, column: 6, scope: !3999)
!4003 = !DILocation(line: 916, column: 12, scope: !3992)
!4004 = !DILocation(line: 916, column: 18, scope: !3992)
!4005 = !DILocation(line: 916, column: 10, scope: !3992)
!4006 = distinct !{!4006, !3988, !4007}
!4007 = !DILocation(line: 917, column: 4, scope: !3985)
!4008 = !DILocation(line: 918, column: 8, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !3985, file: !3, line: 918, column: 8)
!4010 = !DILocation(line: 918, column: 13, scope: !4009)
!4011 = !DILocation(line: 918, column: 8, scope: !3985)
!4012 = !DILocation(line: 919, column: 27, scope: !4009)
!4013 = !DILocation(line: 919, column: 5, scope: !4009)
!4014 = !DILocation(line: 920, column: 3, scope: !3985)
!4015 = !DILocation(line: 922, column: 19, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 921, column: 8)
!4017 = !DILocation(line: 922, column: 11, scope: !4016)
!4018 = !DILocation(line: 922, column: 9, scope: !4016)
!4019 = !DILocation(line: 923, column: 4, scope: !4016)
!4020 = !DILocation(line: 923, column: 11, scope: !4016)
!4021 = !DILocation(line: 924, column: 9, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4023, file: !3, line: 924, column: 9)
!4023 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 923, column: 17)
!4024 = !DILocation(line: 924, column: 15, scope: !4022)
!4025 = !DILocation(line: 924, column: 26, scope: !4022)
!4026 = !DILocation(line: 924, column: 31, scope: !4022)
!4027 = !DILocation(line: 924, column: 23, scope: !4022)
!4028 = !DILocation(line: 924, column: 9, scope: !4023)
!4029 = !DILocation(line: 925, column: 37, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 924, column: 40)
!4031 = !DILocation(line: 925, column: 43, scope: !4030)
!4032 = !DILocation(line: 925, column: 6, scope: !4030)
!4033 = !DILocation(line: 926, column: 6, scope: !4030)
!4034 = !DILocation(line: 928, column: 12, scope: !4023)
!4035 = !DILocation(line: 928, column: 18, scope: !4023)
!4036 = !DILocation(line: 928, column: 10, scope: !4023)
!4037 = distinct !{!4037, !4019, !4038}
!4038 = !DILocation(line: 929, column: 4, scope: !4016)
!4039 = !DILocation(line: 930, column: 8, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 930, column: 8)
!4041 = !DILocation(line: 930, column: 13, scope: !4040)
!4042 = !DILocation(line: 930, column: 8, scope: !4016)
!4043 = !DILocation(line: 931, column: 27, scope: !4040)
!4044 = !DILocation(line: 931, column: 5, scope: !4040)
!4045 = distinct !{!4045, !3973, !4046}
!4046 = !DILocation(line: 933, column: 2, scope: !3951)
!4047 = !DILocation(line: 935, column: 2, scope: !3951)
!4048 = !DILocation(line: 936, column: 4, scope: !3951)
!4049 = !DILocation(line: 936, column: 8, scope: !3951)
!4050 = !DILocation(line: 936, column: 20, scope: !3951)
!4051 = !DILocation(line: 937, column: 1, scope: !3951)
!4052 = distinct !DISubprogram(name: "BKE_sequencer_clear_scene_in_allseqs", scope: !3, file: !3, line: 946, type: !4053, scopeLine: 947, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4053 = !DISubroutineType(types: !4054)
!4054 = !{null, !2462, !1744}
!4055 = !DILocalVariable(name: "bmain", arg: 1, scope: !4052, file: !3, line: 946, type: !2462)
!4056 = !DILocation(line: 946, column: 49, scope: !4052)
!4057 = !DILocalVariable(name: "scene", arg: 2, scope: !4052, file: !3, line: 946, type: !1744)
!4058 = !DILocation(line: 946, column: 63, scope: !4052)
!4059 = !DILocalVariable(name: "scene_iter", scope: !4052, file: !3, line: 948, type: !1744)
!4060 = !DILocation(line: 948, column: 9, scope: !4052)
!4061 = !DILocation(line: 951, column: 20, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4052, file: !3, line: 951, column: 2)
!4063 = !DILocation(line: 951, column: 27, scope: !4062)
!4064 = !DILocation(line: 951, column: 33, scope: !4062)
!4065 = !DILocation(line: 951, column: 18, scope: !4062)
!4066 = !DILocation(line: 951, column: 7, scope: !4062)
!4067 = !DILocation(line: 951, column: 40, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 951, column: 2)
!4069 = !DILocation(line: 951, column: 2, scope: !4062)
!4070 = !DILocation(line: 952, column: 7, scope: !4071)
!4071 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 952, column: 7)
!4072 = distinct !DILexicalBlock(scope: !4068, file: !3, line: 951, column: 86)
!4073 = !DILocation(line: 952, column: 21, scope: !4071)
!4074 = !DILocation(line: 952, column: 18, scope: !4071)
!4075 = !DILocation(line: 952, column: 27, scope: !4071)
!4076 = !DILocation(line: 952, column: 30, scope: !4071)
!4077 = !DILocation(line: 952, column: 42, scope: !4071)
!4078 = !DILocation(line: 952, column: 7, scope: !4072)
!4079 = !DILocation(line: 953, column: 40, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4071, file: !3, line: 952, column: 46)
!4081 = !DILocation(line: 953, column: 52, scope: !4080)
!4082 = !DILocation(line: 953, column: 56, scope: !4080)
!4083 = !DILocation(line: 953, column: 92, scope: !4080)
!4084 = !DILocation(line: 953, column: 4, scope: !4080)
!4085 = !DILocation(line: 954, column: 3, scope: !4080)
!4086 = !DILocation(line: 955, column: 2, scope: !4072)
!4087 = !DILocation(line: 951, column: 65, scope: !4068)
!4088 = !DILocation(line: 951, column: 77, scope: !4068)
!4089 = !DILocation(line: 951, column: 80, scope: !4068)
!4090 = !DILocation(line: 951, column: 63, scope: !4068)
!4091 = !DILocation(line: 951, column: 2, scope: !4068)
!4092 = distinct !{!4092, !4069, !4093}
!4093 = !DILocation(line: 955, column: 2, scope: !4062)
!4094 = !DILocation(line: 956, column: 1, scope: !4052)
!4095 = distinct !DISubprogram(name: "clear_scene_in_allseqs_cb", scope: !3, file: !3, line: 939, type: !2034, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4096 = !DILocalVariable(name: "seq", arg: 1, scope: !4095, file: !3, line: 939, type: !204)
!4097 = !DILocation(line: 939, column: 48, scope: !4095)
!4098 = !DILocalVariable(name: "arg_pt", arg: 2, scope: !4095, file: !3, line: 939, type: !129)
!4099 = !DILocation(line: 939, column: 59, scope: !4095)
!4100 = !DILocation(line: 941, column: 6, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 941, column: 6)
!4102 = !DILocation(line: 941, column: 11, scope: !4101)
!4103 = !DILocation(line: 941, column: 29, scope: !4101)
!4104 = !DILocation(line: 941, column: 20, scope: !4101)
!4105 = !DILocation(line: 941, column: 17, scope: !4101)
!4106 = !DILocation(line: 941, column: 6, scope: !4095)
!4107 = !DILocation(line: 942, column: 3, scope: !4101)
!4108 = !DILocation(line: 942, column: 8, scope: !4101)
!4109 = !DILocation(line: 942, column: 14, scope: !4101)
!4110 = !DILocation(line: 943, column: 2, scope: !4095)
!4111 = distinct !DISubprogram(name: "BKE_sequence_base_unique_name_recursive", scope: !3, file: !3, line: 986, type: !4112, scopeLine: 987, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4112 = !DISubroutineType(types: !4113)
!4113 = !{null, !202, !204}
!4114 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !4111, file: !3, line: 986, type: !202)
!4115 = !DILocation(line: 986, column: 56, scope: !4111)
!4116 = !DILocalVariable(name: "seq", arg: 2, scope: !4111, file: !3, line: 986, type: !204)
!4117 = !DILocation(line: 986, column: 76, scope: !4111)
!4118 = !DILocalVariable(name: "sui", scope: !4111, file: !3, line: 988, type: !1747)
!4119 = !DILocation(line: 988, column: 16, scope: !4111)
!4120 = !DILocalVariable(name: "dot", scope: !4111, file: !3, line: 989, type: !498)
!4121 = !DILocation(line: 989, column: 8, scope: !4111)
!4122 = !DILocation(line: 990, column: 12, scope: !4111)
!4123 = !DILocation(line: 990, column: 6, scope: !4111)
!4124 = !DILocation(line: 990, column: 10, scope: !4111)
!4125 = !DILocation(line: 991, column: 18, scope: !4111)
!4126 = !DILocation(line: 991, column: 14, scope: !4111)
!4127 = !DILocation(line: 991, column: 28, scope: !4111)
!4128 = !DILocation(line: 991, column: 33, scope: !4111)
!4129 = !DILocation(line: 991, column: 38, scope: !4111)
!4130 = !DILocation(line: 991, column: 2, scope: !4111)
!4131 = !DILocation(line: 992, column: 18, scope: !4111)
!4132 = !DILocation(line: 992, column: 14, scope: !4111)
!4133 = !DILocation(line: 992, column: 29, scope: !4111)
!4134 = !DILocation(line: 992, column: 34, scope: !4111)
!4135 = !DILocation(line: 992, column: 39, scope: !4111)
!4136 = !DILocation(line: 992, column: 2, scope: !4111)
!4137 = !DILocation(line: 994, column: 6, scope: !4111)
!4138 = !DILocation(line: 994, column: 12, scope: !4111)
!4139 = !DILocation(line: 995, column: 6, scope: !4111)
!4140 = !DILocation(line: 995, column: 12, scope: !4111)
!4141 = !DILocation(line: 998, column: 25, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4111, file: !3, line: 998, column: 6)
!4143 = !DILocation(line: 998, column: 21, scope: !4142)
!4144 = !DILocation(line: 998, column: 13, scope: !4142)
!4145 = !DILocation(line: 998, column: 11, scope: !4142)
!4146 = !DILocation(line: 998, column: 6, scope: !4111)
!4147 = !DILocation(line: 999, column: 4, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 998, column: 42)
!4149 = !DILocation(line: 999, column: 8, scope: !4148)
!4150 = !DILocation(line: 1000, column: 6, scope: !4148)
!4151 = !DILocation(line: 1002, column: 8, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 1002, column: 7)
!4153 = !DILocation(line: 1002, column: 7, scope: !4152)
!4154 = !DILocation(line: 1002, column: 7, scope: !4148)
!4155 = !DILocation(line: 1003, column: 21, scope: !4152)
!4156 = !DILocation(line: 1003, column: 16, scope: !4152)
!4157 = !DILocation(line: 1003, column: 26, scope: !4152)
!4158 = !DILocation(line: 1003, column: 8, scope: !4152)
!4159 = !DILocation(line: 1003, column: 14, scope: !4152)
!4160 = !DILocation(line: 1003, column: 4, scope: !4152)
!4161 = !DILocation(line: 1004, column: 2, scope: !4148)
!4162 = !DILocation(line: 1006, column: 2, scope: !4111)
!4163 = !DILocation(line: 1006, column: 13, scope: !4111)
!4164 = !DILocation(line: 1007, column: 7, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4111, file: !3, line: 1006, column: 20)
!4166 = !DILocation(line: 1007, column: 13, scope: !4165)
!4167 = !DILocation(line: 1008, column: 23, scope: !4165)
!4168 = !DILocation(line: 1008, column: 3, scope: !4165)
!4169 = !DILocation(line: 1009, column: 38, scope: !4165)
!4170 = !DILocation(line: 1009, column: 82, scope: !4165)
!4171 = !DILocation(line: 1009, column: 3, scope: !4165)
!4172 = distinct !{!4172, !4162, !4173}
!4173 = !DILocation(line: 1010, column: 2, scope: !4111)
!4174 = !DILocation(line: 1012, column: 14, scope: !4111)
!4175 = !DILocation(line: 1012, column: 19, scope: !4111)
!4176 = !DILocation(line: 1012, column: 24, scope: !4111)
!4177 = !DILocation(line: 1012, column: 33, scope: !4111)
!4178 = !DILocation(line: 1012, column: 29, scope: !4111)
!4179 = !DILocation(line: 1012, column: 2, scope: !4111)
!4180 = !DILocation(line: 1013, column: 1, scope: !4111)
!4181 = distinct !DISubprogram(name: "seqbase_unique_name", scope: !3, file: !3, line: 966, type: !4182, scopeLine: 967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4182 = !DISubroutineType(types: !4183)
!4183 = !{null, !202, !1746}
!4184 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !4181, file: !3, line: 966, type: !202)
!4185 = !DILocation(line: 966, column: 43, scope: !4181)
!4186 = !DILocalVariable(name: "sui", arg: 2, scope: !4181, file: !3, line: 966, type: !1746)
!4187 = !DILocation(line: 966, column: 68, scope: !4181)
!4188 = !DILocalVariable(name: "seq", scope: !4181, file: !3, line: 968, type: !204)
!4189 = !DILocation(line: 968, column: 12, scope: !4181)
!4190 = !DILocation(line: 969, column: 13, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 969, column: 2)
!4192 = !DILocation(line: 969, column: 23, scope: !4191)
!4193 = !DILocation(line: 969, column: 11, scope: !4191)
!4194 = !DILocation(line: 969, column: 7, scope: !4191)
!4195 = !DILocation(line: 969, column: 30, scope: !4196)
!4196 = distinct !DILexicalBlock(scope: !4191, file: !3, line: 969, column: 2)
!4197 = !DILocation(line: 969, column: 2, scope: !4191)
!4198 = !DILocation(line: 970, column: 8, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 970, column: 7)
!4200 = distinct !DILexicalBlock(scope: !4196, file: !3, line: 969, column: 52)
!4201 = !DILocation(line: 970, column: 13, scope: !4199)
!4202 = !DILocation(line: 970, column: 20, scope: !4199)
!4203 = !DILocation(line: 970, column: 17, scope: !4199)
!4204 = !DILocation(line: 970, column: 25, scope: !4199)
!4205 = !DILocation(line: 970, column: 28, scope: !4199)
!4206 = !DILocation(line: 970, column: 7, scope: !4200)
!4207 = !DILocation(line: 972, column: 17, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 970, column: 66)
!4209 = !DILocation(line: 972, column: 22, scope: !4208)
!4210 = !DILocation(line: 973, column: 17, scope: !4208)
!4211 = !DILocation(line: 973, column: 22, scope: !4208)
!4212 = !DILocation(line: 973, column: 32, scope: !4208)
!4213 = !DILocation(line: 973, column: 37, scope: !4208)
!4214 = !DILocation(line: 973, column: 42, scope: !4208)
!4215 = !DILocation(line: 972, column: 4, scope: !4208)
!4216 = !DILocation(line: 974, column: 4, scope: !4208)
!4217 = !DILocation(line: 974, column: 9, scope: !4208)
!4218 = !DILocation(line: 974, column: 15, scope: !4208)
!4219 = !DILocation(line: 975, column: 3, scope: !4208)
!4220 = !DILocation(line: 976, column: 2, scope: !4200)
!4221 = !DILocation(line: 969, column: 41, scope: !4196)
!4222 = !DILocation(line: 969, column: 46, scope: !4196)
!4223 = !DILocation(line: 969, column: 39, scope: !4196)
!4224 = !DILocation(line: 969, column: 2, scope: !4196)
!4225 = distinct !{!4225, !4197, !4226}
!4226 = !DILocation(line: 976, column: 2, scope: !4191)
!4227 = !DILocation(line: 977, column: 1, scope: !4181)
!4228 = distinct !DISubprogram(name: "seqbase_unique_name_recursive_cb", scope: !3, file: !3, line: 979, type: !2034, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4229 = !DILocalVariable(name: "seq", arg: 1, scope: !4228, file: !3, line: 979, type: !204)
!4230 = !DILocation(line: 979, column: 55, scope: !4228)
!4231 = !DILocalVariable(name: "arg_pt", arg: 2, scope: !4228, file: !3, line: 979, type: !129)
!4232 = !DILocation(line: 979, column: 66, scope: !4228)
!4233 = !DILocation(line: 981, column: 6, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 981, column: 6)
!4235 = !DILocation(line: 981, column: 11, scope: !4234)
!4236 = !DILocation(line: 981, column: 19, scope: !4234)
!4237 = !DILocation(line: 981, column: 6, scope: !4228)
!4238 = !DILocation(line: 982, column: 24, scope: !4234)
!4239 = !DILocation(line: 982, column: 29, scope: !4234)
!4240 = !DILocation(line: 982, column: 55, scope: !4234)
!4241 = !DILocation(line: 982, column: 38, scope: !4234)
!4242 = !DILocation(line: 982, column: 3, scope: !4234)
!4243 = !DILocation(line: 983, column: 2, scope: !4228)
!4244 = distinct !DISubprogram(name: "BKE_sequence_give_name", scope: !3, file: !3, line: 1046, type: !4245, scopeLine: 1047, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4245 = !DISubroutineType(types: !4246)
!4246 = !{!2797, !204}
!4247 = !DILocalVariable(name: "seq", arg: 1, scope: !4244, file: !3, line: 1046, type: !204)
!4248 = !DILocation(line: 1046, column: 46, scope: !4244)
!4249 = !DILocalVariable(name: "name", scope: !4244, file: !3, line: 1048, type: !2797)
!4250 = !DILocation(line: 1048, column: 14, scope: !4244)
!4251 = !DILocation(line: 1048, column: 42, scope: !4244)
!4252 = !DILocation(line: 1048, column: 47, scope: !4244)
!4253 = !DILocation(line: 1048, column: 21, scope: !4244)
!4254 = !DILocation(line: 1050, column: 7, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 1050, column: 6)
!4256 = !DILocation(line: 1050, column: 6, scope: !4244)
!4257 = !DILocation(line: 1051, column: 7, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !4259, file: !3, line: 1051, column: 7)
!4259 = distinct !DILexicalBlock(scope: !4255, file: !3, line: 1050, column: 13)
!4260 = !DILocation(line: 1051, column: 12, scope: !4258)
!4261 = !DILocation(line: 1051, column: 17, scope: !4258)
!4262 = !DILocation(line: 1051, column: 7, scope: !4259)
!4263 = !DILocation(line: 1052, column: 11, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 1051, column: 36)
!4265 = !DILocation(line: 1052, column: 16, scope: !4264)
!4266 = !DILocation(line: 1052, column: 23, scope: !4264)
!4267 = !DILocation(line: 1052, column: 4, scope: !4264)
!4268 = !DILocation(line: 1055, column: 4, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 1054, column: 8)
!4270 = !DILocation(line: 1058, column: 9, scope: !4244)
!4271 = !DILocation(line: 1058, column: 2, scope: !4244)
!4272 = !DILocation(line: 1059, column: 1, scope: !4244)
!4273 = distinct !DISubprogram(name: "give_seqname_by_type", scope: !3, file: !3, line: 1015, type: !4274, scopeLine: 1016, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4274 = !DISubroutineType(types: !4275)
!4275 = !{!2797, !45}
!4276 = !DILocalVariable(name: "type", arg: 1, scope: !4273, file: !3, line: 1015, type: !45)
!4277 = !DILocation(line: 1015, column: 45, scope: !4273)
!4278 = !DILocation(line: 1017, column: 10, scope: !4273)
!4279 = !DILocation(line: 1017, column: 2, scope: !4273)
!4280 = !DILocation(line: 1018, column: 32, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 1017, column: 16)
!4282 = !DILocation(line: 1019, column: 32, scope: !4281)
!4283 = !DILocation(line: 1020, column: 32, scope: !4281)
!4284 = !DILocation(line: 1021, column: 32, scope: !4281)
!4285 = !DILocation(line: 1022, column: 32, scope: !4281)
!4286 = !DILocation(line: 1023, column: 32, scope: !4281)
!4287 = !DILocation(line: 1024, column: 32, scope: !4281)
!4288 = !DILocation(line: 1025, column: 32, scope: !4281)
!4289 = !DILocation(line: 1026, column: 32, scope: !4281)
!4290 = !DILocation(line: 1027, column: 32, scope: !4281)
!4291 = !DILocation(line: 1028, column: 32, scope: !4281)
!4292 = !DILocation(line: 1029, column: 32, scope: !4281)
!4293 = !DILocation(line: 1030, column: 32, scope: !4281)
!4294 = !DILocation(line: 1031, column: 32, scope: !4281)
!4295 = !DILocation(line: 1032, column: 32, scope: !4281)
!4296 = !DILocation(line: 1033, column: 32, scope: !4281)
!4297 = !DILocation(line: 1034, column: 32, scope: !4281)
!4298 = !DILocation(line: 1035, column: 32, scope: !4281)
!4299 = !DILocation(line: 1036, column: 32, scope: !4281)
!4300 = !DILocation(line: 1037, column: 32, scope: !4281)
!4301 = !DILocation(line: 1038, column: 32, scope: !4281)
!4302 = !DILocation(line: 1039, column: 32, scope: !4281)
!4303 = !DILocation(line: 1040, column: 32, scope: !4281)
!4304 = !DILocation(line: 1042, column: 4, scope: !4281)
!4305 = !DILocation(line: 1044, column: 1, scope: !4273)
!4306 = distinct !DISubprogram(name: "BKE_sequencer_give_stripelem", scope: !3, file: !3, line: 1162, type: !4307, scopeLine: 1163, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4307 = !DISubroutineType(types: !4308)
!4308 = !{!4309, !204, !45}
!4309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !248, size: 64)
!4310 = !DILocalVariable(name: "seq", arg: 1, scope: !4306, file: !3, line: 1162, type: !204)
!4311 = !DILocation(line: 1162, column: 51, scope: !4306)
!4312 = !DILocalVariable(name: "cfra", arg: 2, scope: !4306, file: !3, line: 1162, type: !45)
!4313 = !DILocation(line: 1162, column: 60, scope: !4306)
!4314 = !DILocalVariable(name: "se", scope: !4306, file: !3, line: 1164, type: !246)
!4315 = !DILocation(line: 1164, column: 13, scope: !4306)
!4316 = !DILocation(line: 1164, column: 18, scope: !4306)
!4317 = !DILocation(line: 1164, column: 23, scope: !4306)
!4318 = !DILocation(line: 1164, column: 30, scope: !4306)
!4319 = !DILocation(line: 1166, column: 6, scope: !4320)
!4320 = distinct !DILexicalBlock(scope: !4306, file: !3, line: 1166, column: 6)
!4321 = !DILocation(line: 1166, column: 11, scope: !4320)
!4322 = !DILocation(line: 1166, column: 16, scope: !4320)
!4323 = !DILocation(line: 1166, column: 6, scope: !4306)
!4324 = !DILocalVariable(name: "nr", scope: !4325, file: !3, line: 1171, type: !45)
!4325 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1166, column: 35)
!4326 = !DILocation(line: 1171, column: 7, scope: !4325)
!4327 = !DILocation(line: 1171, column: 39, scope: !4325)
!4328 = !DILocation(line: 1171, column: 44, scope: !4325)
!4329 = !DILocation(line: 1171, column: 18, scope: !4325)
!4330 = !DILocation(line: 1171, column: 12, scope: !4325)
!4331 = !DILocation(line: 1173, column: 7, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 1173, column: 7)
!4333 = !DILocation(line: 1173, column: 10, scope: !4332)
!4334 = !DILocation(line: 1173, column: 16, scope: !4332)
!4335 = !DILocation(line: 1173, column: 19, scope: !4332)
!4336 = !DILocation(line: 1173, column: 22, scope: !4332)
!4337 = !DILocation(line: 1173, column: 7, scope: !4325)
!4338 = !DILocation(line: 1174, column: 4, scope: !4332)
!4339 = !DILocation(line: 1176, column: 9, scope: !4325)
!4340 = !DILocation(line: 1176, column: 14, scope: !4325)
!4341 = !DILocation(line: 1176, column: 19, scope: !4325)
!4342 = !DILocation(line: 1176, column: 12, scope: !4325)
!4343 = !DILocation(line: 1176, column: 6, scope: !4325)
!4344 = !DILocation(line: 1177, column: 2, scope: !4325)
!4345 = !DILocation(line: 1178, column: 9, scope: !4306)
!4346 = !DILocation(line: 1178, column: 2, scope: !4306)
!4347 = !DILocation(line: 1179, column: 1, scope: !4306)
!4348 = distinct !DISubprogram(name: "give_stripelem_index", scope: !3, file: !3, line: 1127, type: !4349, scopeLine: 1128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4349 = !DISubroutineType(types: !4350)
!4350 = !{!193, !204, !193}
!4351 = !DILocalVariable(name: "seq", arg: 1, scope: !4348, file: !3, line: 1127, type: !204)
!4352 = !DILocation(line: 1127, column: 45, scope: !4348)
!4353 = !DILocalVariable(name: "cfra", arg: 2, scope: !4348, file: !3, line: 1127, type: !193)
!4354 = !DILocation(line: 1127, column: 56, scope: !4348)
!4355 = !DILocalVariable(name: "nr", scope: !4348, file: !3, line: 1129, type: !193)
!4356 = !DILocation(line: 1129, column: 8, scope: !4348)
!4357 = !DILocalVariable(name: "sta", scope: !4348, file: !3, line: 1130, type: !45)
!4358 = !DILocation(line: 1130, column: 6, scope: !4348)
!4359 = !DILocation(line: 1130, column: 12, scope: !4348)
!4360 = !DILocation(line: 1130, column: 17, scope: !4348)
!4361 = !DILocalVariable(name: "end", scope: !4348, file: !3, line: 1131, type: !45)
!4362 = !DILocation(line: 1131, column: 6, scope: !4348)
!4363 = !DILocation(line: 1131, column: 12, scope: !4348)
!4364 = !DILocation(line: 1131, column: 17, scope: !4348)
!4365 = !DILocation(line: 1131, column: 25, scope: !4348)
!4366 = !DILocation(line: 1131, column: 30, scope: !4348)
!4367 = !DILocation(line: 1131, column: 23, scope: !4348)
!4368 = !DILocation(line: 1131, column: 34, scope: !4348)
!4369 = !DILocation(line: 1133, column: 6, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1133, column: 6)
!4371 = !DILocation(line: 1133, column: 11, scope: !4370)
!4372 = !DILocation(line: 1133, column: 16, scope: !4370)
!4373 = !DILocation(line: 1133, column: 6, scope: !4348)
!4374 = !DILocation(line: 1134, column: 9, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 1133, column: 35)
!4376 = !DILocation(line: 1134, column: 14, scope: !4375)
!4377 = !DILocation(line: 1134, column: 7, scope: !4375)
!4378 = !DILocation(line: 1135, column: 2, scope: !4375)
!4379 = !DILocation(line: 1137, column: 6, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1137, column: 6)
!4381 = !DILocation(line: 1137, column: 12, scope: !4380)
!4382 = !DILocation(line: 1137, column: 10, scope: !4380)
!4383 = !DILocation(line: 1137, column: 6, scope: !4348)
!4384 = !DILocation(line: 1138, column: 3, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 1137, column: 17)
!4386 = !DILocation(line: 1141, column: 6, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1141, column: 6)
!4388 = !DILocation(line: 1141, column: 11, scope: !4387)
!4389 = !DILocation(line: 1141, column: 16, scope: !4387)
!4390 = !DILocation(line: 1141, column: 6, scope: !4348)
!4391 = !DILocation(line: 1143, column: 7, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1143, column: 7)
!4393 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1141, column: 38)
!4394 = !DILocation(line: 1143, column: 15, scope: !4392)
!4395 = !DILocation(line: 1143, column: 12, scope: !4392)
!4396 = !DILocation(line: 1143, column: 7, scope: !4393)
!4397 = !DILocation(line: 1143, column: 25, scope: !4392)
!4398 = !DILocation(line: 1143, column: 31, scope: !4392)
!4399 = !DILocation(line: 1143, column: 29, scope: !4392)
!4400 = !DILocation(line: 1143, column: 23, scope: !4392)
!4401 = !DILocation(line: 1143, column: 20, scope: !4392)
!4402 = !DILocation(line: 1144, column: 12, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 1144, column: 12)
!4404 = !DILocation(line: 1144, column: 20, scope: !4403)
!4405 = !DILocation(line: 1144, column: 17, scope: !4403)
!4406 = !DILocation(line: 1144, column: 12, scope: !4392)
!4407 = !DILocation(line: 1144, column: 28, scope: !4403)
!4408 = !DILocation(line: 1144, column: 25, scope: !4403)
!4409 = !DILocation(line: 1145, column: 13, scope: !4403)
!4410 = !DILocation(line: 1145, column: 19, scope: !4403)
!4411 = !DILocation(line: 1145, column: 17, scope: !4403)
!4412 = !DILocation(line: 1145, column: 11, scope: !4403)
!4413 = !DILocation(line: 1146, column: 2, scope: !4393)
!4414 = !DILocation(line: 1148, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 1148, column: 7)
!4416 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1147, column: 7)
!4417 = !DILocation(line: 1148, column: 15, scope: !4415)
!4418 = !DILocation(line: 1148, column: 12, scope: !4415)
!4419 = !DILocation(line: 1148, column: 7, scope: !4416)
!4420 = !DILocation(line: 1148, column: 23, scope: !4415)
!4421 = !DILocation(line: 1148, column: 20, scope: !4415)
!4422 = !DILocation(line: 1149, column: 12, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 1149, column: 12)
!4424 = !DILocation(line: 1149, column: 20, scope: !4423)
!4425 = !DILocation(line: 1149, column: 17, scope: !4423)
!4426 = !DILocation(line: 1149, column: 12, scope: !4415)
!4427 = !DILocation(line: 1149, column: 30, scope: !4423)
!4428 = !DILocation(line: 1149, column: 36, scope: !4423)
!4429 = !DILocation(line: 1149, column: 34, scope: !4423)
!4430 = !DILocation(line: 1149, column: 28, scope: !4423)
!4431 = !DILocation(line: 1149, column: 25, scope: !4423)
!4432 = !DILocation(line: 1150, column: 13, scope: !4423)
!4433 = !DILocation(line: 1150, column: 20, scope: !4423)
!4434 = !DILocation(line: 1150, column: 18, scope: !4423)
!4435 = !DILocation(line: 1150, column: 11, scope: !4423)
!4436 = !DILocation(line: 1153, column: 6, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1153, column: 6)
!4438 = !DILocation(line: 1153, column: 11, scope: !4437)
!4439 = !DILocation(line: 1153, column: 18, scope: !4437)
!4440 = !DILocation(line: 1153, column: 6, scope: !4348)
!4441 = !DILocation(line: 1153, column: 26, scope: !4437)
!4442 = !DILocation(line: 1153, column: 31, scope: !4437)
!4443 = !DILocation(line: 1153, column: 38, scope: !4437)
!4444 = !DILocation(line: 1155, column: 6, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 1155, column: 6)
!4446 = !DILocation(line: 1155, column: 11, scope: !4445)
!4447 = !DILocation(line: 1155, column: 18, scope: !4445)
!4448 = !DILocation(line: 1155, column: 6, scope: !4348)
!4449 = !DILocation(line: 1156, column: 23, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 1155, column: 26)
!4451 = !DILocation(line: 1156, column: 15, scope: !4450)
!4452 = !DILocation(line: 1156, column: 35, scope: !4450)
!4453 = !DILocation(line: 1156, column: 40, scope: !4450)
!4454 = !DILocation(line: 1156, column: 27, scope: !4450)
!4455 = !DILocation(line: 1156, column: 9, scope: !4450)
!4456 = !DILocation(line: 1156, column: 6, scope: !4450)
!4457 = !DILocation(line: 1157, column: 2, scope: !4450)
!4458 = !DILocation(line: 1159, column: 9, scope: !4348)
!4459 = !DILocation(line: 1159, column: 2, scope: !4348)
!4460 = !DILocation(line: 1160, column: 1, scope: !4348)
!4461 = distinct !DISubprogram(name: "BKE_sequencer_evaluate_frame", scope: !3, file: !3, line: 1237, type: !4462, scopeLine: 1238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4462 = !DISubroutineType(types: !4463)
!4463 = !{!45, !1744, !45}
!4464 = !DILocalVariable(name: "scene", arg: 1, scope: !4461, file: !3, line: 1237, type: !1744)
!4465 = !DILocation(line: 1237, column: 41, scope: !4461)
!4466 = !DILocalVariable(name: "cfra", arg: 2, scope: !4461, file: !3, line: 1237, type: !45)
!4467 = !DILocation(line: 1237, column: 52, scope: !4461)
!4468 = !DILocalVariable(name: "ed", scope: !4461, file: !3, line: 1239, type: !2176)
!4469 = !DILocation(line: 1239, column: 11, scope: !4461)
!4470 = !DILocation(line: 1239, column: 42, scope: !4461)
!4471 = !DILocation(line: 1239, column: 16, scope: !4461)
!4472 = !DILocalVariable(name: "seq_arr", scope: !4461, file: !3, line: 1240, type: !4473)
!4473 = !DICompositeType(tag: DW_TAG_array_type, baseType: !204, size: 2112, elements: !4474)
!4474 = !{!4475}
!4475 = !DISubrange(count: 33)
!4476 = !DILocation(line: 1240, column: 12, scope: !4461)
!4477 = !DILocation(line: 1242, column: 6, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1242, column: 6)
!4479 = !DILocation(line: 1242, column: 9, scope: !4478)
!4480 = !DILocation(line: 1242, column: 6, scope: !4461)
!4481 = !DILocation(line: 1243, column: 3, scope: !4478)
!4482 = !DILocation(line: 1245, column: 32, scope: !4461)
!4483 = !DILocation(line: 1245, column: 41, scope: !4461)
!4484 = !DILocation(line: 1245, column: 45, scope: !4461)
!4485 = !DILocation(line: 1245, column: 55, scope: !4461)
!4486 = !DILocation(line: 1245, column: 9, scope: !4461)
!4487 = !DILocation(line: 1245, column: 2, scope: !4461)
!4488 = !DILocation(line: 1246, column: 1, scope: !4461)
!4489 = distinct !DISubprogram(name: "evaluate_seq_frame_gen", scope: !3, file: !3, line: 1181, type: !4490, scopeLine: 1182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4490 = !DISubroutineType(types: !4491)
!4491 = !{!45, !2002, !202, !45, !45}
!4492 = !DILocalVariable(name: "seq_arr", arg: 1, scope: !4489, file: !3, line: 1181, type: !2002)
!4493 = !DILocation(line: 1181, column: 46, scope: !4489)
!4494 = !DILocalVariable(name: "seqbase", arg: 2, scope: !4489, file: !3, line: 1181, type: !202)
!4495 = !DILocation(line: 1181, column: 65, scope: !4489)
!4496 = !DILocalVariable(name: "cfra", arg: 3, scope: !4489, file: !3, line: 1181, type: !45)
!4497 = !DILocation(line: 1181, column: 78, scope: !4489)
!4498 = !DILocalVariable(name: "chanshown", arg: 4, scope: !4489, file: !3, line: 1181, type: !45)
!4499 = !DILocation(line: 1181, column: 88, scope: !4489)
!4500 = !DILocalVariable(name: "seq", scope: !4489, file: !3, line: 1183, type: !204)
!4501 = !DILocation(line: 1183, column: 12, scope: !4489)
!4502 = !DILocalVariable(name: "effect_inputs", scope: !4489, file: !3, line: 1184, type: !4473)
!4503 = !DILocation(line: 1184, column: 12, scope: !4489)
!4504 = !DILocalVariable(name: "i", scope: !4489, file: !3, line: 1185, type: !45)
!4505 = !DILocation(line: 1185, column: 6, scope: !4489)
!4506 = !DILocalVariable(name: "totseq", scope: !4489, file: !3, line: 1185, type: !45)
!4507 = !DILocation(line: 1185, column: 9, scope: !4489)
!4508 = !DILocalVariable(name: "num_effect_inputs", scope: !4489, file: !3, line: 1185, type: !45)
!4509 = !DILocation(line: 1185, column: 21, scope: !4489)
!4510 = !DILocation(line: 1187, column: 9, scope: !4489)
!4511 = !DILocation(line: 1187, column: 2, scope: !4489)
!4512 = !DILocation(line: 1189, column: 8, scope: !4489)
!4513 = !DILocation(line: 1189, column: 17, scope: !4489)
!4514 = !DILocation(line: 1189, column: 6, scope: !4489)
!4515 = !DILocation(line: 1190, column: 2, scope: !4489)
!4516 = !DILocation(line: 1190, column: 9, scope: !4489)
!4517 = !DILocation(line: 1191, column: 7, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 1191, column: 7)
!4519 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 1190, column: 14)
!4520 = !DILocation(line: 1191, column: 12, scope: !4518)
!4521 = !DILocation(line: 1191, column: 25, scope: !4518)
!4522 = !DILocation(line: 1191, column: 22, scope: !4518)
!4523 = !DILocation(line: 1191, column: 30, scope: !4518)
!4524 = !DILocation(line: 1191, column: 33, scope: !4518)
!4525 = !DILocation(line: 1191, column: 38, scope: !4518)
!4526 = !DILocation(line: 1191, column: 48, scope: !4518)
!4527 = !DILocation(line: 1191, column: 46, scope: !4518)
!4528 = !DILocation(line: 1191, column: 7, scope: !4519)
!4529 = !DILocation(line: 1192, column: 9, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4531, file: !3, line: 1192, column: 8)
!4531 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 1191, column: 54)
!4532 = !DILocation(line: 1192, column: 14, scope: !4530)
!4533 = !DILocation(line: 1192, column: 19, scope: !4530)
!4534 = !DILocation(line: 1192, column: 8, scope: !4531)
!4535 = !DILocation(line: 1193, column: 9, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1193, column: 9)
!4537 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 1192, column: 39)
!4538 = !DILocation(line: 1193, column: 14, scope: !4536)
!4539 = !DILocation(line: 1193, column: 9, scope: !4537)
!4540 = !DILocation(line: 1194, column: 43, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 1193, column: 20)
!4542 = !DILocation(line: 1194, column: 48, scope: !4541)
!4543 = !DILocation(line: 1194, column: 37, scope: !4541)
!4544 = !DILocation(line: 1194, column: 6, scope: !4541)
!4545 = !DILocation(line: 1194, column: 41, scope: !4541)
!4546 = !DILocation(line: 1195, column: 5, scope: !4541)
!4547 = !DILocation(line: 1197, column: 9, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1197, column: 9)
!4549 = !DILocation(line: 1197, column: 14, scope: !4548)
!4550 = !DILocation(line: 1197, column: 9, scope: !4537)
!4551 = !DILocation(line: 1198, column: 43, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 1197, column: 20)
!4553 = !DILocation(line: 1198, column: 48, scope: !4552)
!4554 = !DILocation(line: 1198, column: 37, scope: !4552)
!4555 = !DILocation(line: 1198, column: 6, scope: !4552)
!4556 = !DILocation(line: 1198, column: 41, scope: !4552)
!4557 = !DILocation(line: 1199, column: 5, scope: !4552)
!4558 = !DILocation(line: 1201, column: 9, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1201, column: 9)
!4560 = !DILocation(line: 1201, column: 14, scope: !4559)
!4561 = !DILocation(line: 1201, column: 9, scope: !4537)
!4562 = !DILocation(line: 1202, column: 43, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 1201, column: 20)
!4564 = !DILocation(line: 1202, column: 48, scope: !4563)
!4565 = !DILocation(line: 1202, column: 37, scope: !4563)
!4566 = !DILocation(line: 1202, column: 6, scope: !4563)
!4567 = !DILocation(line: 1202, column: 41, scope: !4563)
!4568 = !DILocation(line: 1203, column: 5, scope: !4563)
!4569 = !DILocation(line: 1204, column: 4, scope: !4537)
!4570 = !DILocation(line: 1206, column: 28, scope: !4531)
!4571 = !DILocation(line: 1206, column: 4, scope: !4531)
!4572 = !DILocation(line: 1206, column: 12, scope: !4531)
!4573 = !DILocation(line: 1206, column: 17, scope: !4531)
!4574 = !DILocation(line: 1206, column: 26, scope: !4531)
!4575 = !DILocation(line: 1207, column: 10, scope: !4531)
!4576 = !DILocation(line: 1208, column: 3, scope: !4531)
!4577 = !DILocation(line: 1209, column: 9, scope: !4519)
!4578 = !DILocation(line: 1209, column: 14, scope: !4519)
!4579 = !DILocation(line: 1209, column: 7, scope: !4519)
!4580 = distinct !{!4580, !4515, !4581}
!4581 = !DILocation(line: 1210, column: 2, scope: !4489)
!4582 = !DILocation(line: 1216, column: 9, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 1216, column: 2)
!4584 = !DILocation(line: 1216, column: 7, scope: !4583)
!4585 = !DILocation(line: 1216, column: 14, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 1216, column: 2)
!4587 = !DILocation(line: 1216, column: 18, scope: !4586)
!4588 = !DILocation(line: 1216, column: 16, scope: !4586)
!4589 = !DILocation(line: 1216, column: 2, scope: !4583)
!4590 = !DILocation(line: 1217, column: 23, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4586, file: !3, line: 1216, column: 42)
!4592 = !DILocation(line: 1217, column: 9, scope: !4591)
!4593 = !DILocation(line: 1217, column: 7, scope: !4591)
!4594 = !DILocation(line: 1222, column: 7, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 1222, column: 7)
!4596 = !DILocation(line: 1222, column: 15, scope: !4595)
!4597 = !DILocation(line: 1222, column: 20, scope: !4595)
!4598 = !DILocation(line: 1222, column: 29, scope: !4595)
!4599 = !DILocation(line: 1222, column: 32, scope: !4595)
!4600 = !DILocation(line: 1222, column: 40, scope: !4595)
!4601 = !DILocation(line: 1222, column: 45, scope: !4595)
!4602 = !DILocation(line: 1222, column: 55, scope: !4595)
!4603 = !DILocation(line: 1222, column: 60, scope: !4595)
!4604 = !DILocation(line: 1222, column: 7, scope: !4591)
!4605 = !DILocation(line: 1223, column: 4, scope: !4606)
!4606 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 1222, column: 79)
!4607 = !DILocation(line: 1228, column: 7, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 1228, column: 7)
!4609 = !DILocation(line: 1228, column: 17, scope: !4608)
!4610 = !DILocation(line: 1228, column: 22, scope: !4608)
!4611 = !DILocation(line: 1228, column: 25, scope: !4608)
!4612 = !DILocation(line: 1228, column: 38, scope: !4608)
!4613 = !DILocation(line: 1228, column: 43, scope: !4608)
!4614 = !DILocation(line: 1228, column: 35, scope: !4608)
!4615 = !DILocation(line: 1228, column: 7, scope: !4591)
!4616 = !DILocation(line: 1229, column: 4, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 1228, column: 52)
!4618 = !DILocation(line: 1231, column: 3, scope: !4591)
!4619 = !DILocation(line: 1231, column: 11, scope: !4591)
!4620 = !DILocation(line: 1231, column: 16, scope: !4591)
!4621 = !DILocation(line: 1231, column: 25, scope: !4591)
!4622 = !DILocation(line: 1232, column: 2, scope: !4591)
!4623 = !DILocation(line: 1216, column: 38, scope: !4586)
!4624 = !DILocation(line: 1216, column: 2, scope: !4586)
!4625 = distinct !{!4625, !4589, !4626}
!4626 = !DILocation(line: 1232, column: 2, scope: !4583)
!4627 = !DILocation(line: 1234, column: 9, scope: !4489)
!4628 = !DILocation(line: 1234, column: 2, scope: !4489)
!4629 = distinct !DISubprogram(name: "BKE_sequencer_proxy_rebuild_context", scope: !3, file: !3, line: 1532, type: !4630, scopeLine: 1533, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4630 = !DISubroutineType(types: !4631)
!4631 = !{!4632, !2462, !1744, !204}
!4632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4633, size: 64)
!4633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqIndexBuildContext", file: !3, line: 1295, size: 448, elements: !4634)
!4634 = !{!4635, !4638, !4639, !4640, !4641, !4642, !4643, !4644}
!4635 = !DIDerivedType(tag: DW_TAG_member, name: "index_context", scope: !4633, file: !3, line: 1296, baseType: !4636, size: 64)
!4636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4637, size: 64)
!4637 = !DICompositeType(tag: DW_TAG_structure_type, name: "IndexBuildContext", file: !74, line: 239, flags: DIFlagFwdDecl)
!4638 = !DIDerivedType(tag: DW_TAG_member, name: "tc_flags", scope: !4633, file: !3, line: 1298, baseType: !45, size: 32, offset: 64)
!4639 = !DIDerivedType(tag: DW_TAG_member, name: "size_flags", scope: !4633, file: !3, line: 1299, baseType: !45, size: 32, offset: 96)
!4640 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !4633, file: !3, line: 1300, baseType: !45, size: 32, offset: 128)
!4641 = !DIDerivedType(tag: DW_TAG_member, name: "bmain", scope: !4633, file: !3, line: 1302, baseType: !2462, size: 64, offset: 192)
!4642 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !4633, file: !3, line: 1303, baseType: !1744, size: 64, offset: 256)
!4643 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4633, file: !3, line: 1304, baseType: !204, size: 64, offset: 320)
!4644 = !DIDerivedType(tag: DW_TAG_member, name: "orig_seq", scope: !4633, file: !3, line: 1304, baseType: !204, size: 64, offset: 384)
!4645 = !DILocalVariable(name: "bmain", arg: 1, scope: !4629, file: !3, line: 1532, type: !2462)
!4646 = !DILocation(line: 1532, column: 65, scope: !4629)
!4647 = !DILocalVariable(name: "scene", arg: 2, scope: !4629, file: !3, line: 1532, type: !1744)
!4648 = !DILocation(line: 1532, column: 79, scope: !4629)
!4649 = !DILocalVariable(name: "seq", arg: 3, scope: !4629, file: !3, line: 1532, type: !204)
!4650 = !DILocation(line: 1532, column: 96, scope: !4629)
!4651 = !DILocalVariable(name: "context", scope: !4629, file: !3, line: 1534, type: !4652)
!4652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4653, size: 64)
!4653 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqIndexBuildContext", file: !3, line: 1305, baseType: !4633)
!4654 = !DILocation(line: 1534, column: 24, scope: !4629)
!4655 = !DILocalVariable(name: "nseq", scope: !4629, file: !3, line: 1535, type: !204)
!4656 = !DILocation(line: 1535, column: 12, scope: !4629)
!4657 = !DILocation(line: 1537, column: 7, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1537, column: 6)
!4659 = !DILocation(line: 1537, column: 12, scope: !4658)
!4660 = !DILocation(line: 1537, column: 18, scope: !4658)
!4661 = !DILocation(line: 1537, column: 22, scope: !4658)
!4662 = !DILocation(line: 1537, column: 27, scope: !4658)
!4663 = !DILocation(line: 1537, column: 34, scope: !4658)
!4664 = !DILocation(line: 1537, column: 6, scope: !4629)
!4665 = !DILocation(line: 1538, column: 3, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 1537, column: 41)
!4667 = !DILocation(line: 1541, column: 8, scope: !4668)
!4668 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1541, column: 6)
!4669 = !DILocation(line: 1541, column: 13, scope: !4668)
!4670 = !DILocation(line: 1541, column: 18, scope: !4668)
!4671 = !DILocation(line: 1541, column: 6, scope: !4629)
!4672 = !DILocation(line: 1542, column: 3, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 1541, column: 36)
!4674 = !DILocation(line: 1545, column: 12, scope: !4629)
!4675 = !DILocation(line: 1545, column: 10, scope: !4629)
!4676 = !DILocation(line: 1547, column: 38, scope: !4629)
!4677 = !DILocation(line: 1547, column: 45, scope: !4629)
!4678 = !DILocation(line: 1547, column: 52, scope: !4629)
!4679 = !DILocation(line: 1547, column: 9, scope: !4629)
!4680 = !DILocation(line: 1547, column: 7, scope: !4629)
!4681 = !DILocation(line: 1549, column: 24, scope: !4629)
!4682 = !DILocation(line: 1549, column: 30, scope: !4629)
!4683 = !DILocation(line: 1549, column: 37, scope: !4629)
!4684 = !DILocation(line: 1549, column: 44, scope: !4629)
!4685 = !DILocation(line: 1549, column: 2, scope: !4629)
!4686 = !DILocation(line: 1549, column: 11, scope: !4629)
!4687 = !DILocation(line: 1549, column: 22, scope: !4629)
!4688 = !DILocation(line: 1550, column: 24, scope: !4629)
!4689 = !DILocation(line: 1550, column: 30, scope: !4629)
!4690 = !DILocation(line: 1550, column: 37, scope: !4629)
!4691 = !DILocation(line: 1550, column: 44, scope: !4629)
!4692 = !DILocation(line: 1550, column: 2, scope: !4629)
!4693 = !DILocation(line: 1550, column: 11, scope: !4629)
!4694 = !DILocation(line: 1550, column: 22, scope: !4629)
!4695 = !DILocation(line: 1551, column: 24, scope: !4629)
!4696 = !DILocation(line: 1551, column: 30, scope: !4629)
!4697 = !DILocation(line: 1551, column: 37, scope: !4629)
!4698 = !DILocation(line: 1551, column: 44, scope: !4629)
!4699 = !DILocation(line: 1551, column: 2, scope: !4629)
!4700 = !DILocation(line: 1551, column: 11, scope: !4629)
!4701 = !DILocation(line: 1551, column: 22, scope: !4629)
!4702 = !DILocation(line: 1553, column: 19, scope: !4629)
!4703 = !DILocation(line: 1553, column: 2, scope: !4629)
!4704 = !DILocation(line: 1553, column: 11, scope: !4629)
!4705 = !DILocation(line: 1553, column: 17, scope: !4629)
!4706 = !DILocation(line: 1554, column: 19, scope: !4629)
!4707 = !DILocation(line: 1554, column: 2, scope: !4629)
!4708 = !DILocation(line: 1554, column: 11, scope: !4629)
!4709 = !DILocation(line: 1554, column: 17, scope: !4629)
!4710 = !DILocation(line: 1555, column: 22, scope: !4629)
!4711 = !DILocation(line: 1555, column: 2, scope: !4629)
!4712 = !DILocation(line: 1555, column: 11, scope: !4629)
!4713 = !DILocation(line: 1555, column: 20, scope: !4629)
!4714 = !DILocation(line: 1556, column: 17, scope: !4629)
!4715 = !DILocation(line: 1556, column: 2, scope: !4629)
!4716 = !DILocation(line: 1556, column: 11, scope: !4629)
!4717 = !DILocation(line: 1556, column: 15, scope: !4629)
!4718 = !DILocation(line: 1558, column: 6, scope: !4719)
!4719 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1558, column: 6)
!4720 = !DILocation(line: 1558, column: 12, scope: !4719)
!4721 = !DILocation(line: 1558, column: 17, scope: !4719)
!4722 = !DILocation(line: 1558, column: 6, scope: !4629)
!4723 = !DILocation(line: 1559, column: 22, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4719, file: !3, line: 1558, column: 36)
!4725 = !DILocation(line: 1559, column: 3, scope: !4724)
!4726 = !DILocation(line: 1561, column: 7, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 1561, column: 7)
!4728 = !DILocation(line: 1561, column: 13, scope: !4727)
!4729 = !DILocation(line: 1561, column: 7, scope: !4724)
!4730 = !DILocation(line: 1562, column: 60, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4727, file: !3, line: 1561, column: 19)
!4732 = !DILocation(line: 1562, column: 66, scope: !4731)
!4733 = !DILocation(line: 1563, column: 12, scope: !4731)
!4734 = !DILocation(line: 1563, column: 21, scope: !4731)
!4735 = !DILocation(line: 1563, column: 31, scope: !4731)
!4736 = !DILocation(line: 1563, column: 40, scope: !4731)
!4737 = !DILocation(line: 1563, column: 52, scope: !4731)
!4738 = !DILocation(line: 1563, column: 61, scope: !4731)
!4739 = !DILocation(line: 1562, column: 29, scope: !4731)
!4740 = !DILocation(line: 1562, column: 4, scope: !4731)
!4741 = !DILocation(line: 1562, column: 13, scope: !4731)
!4742 = !DILocation(line: 1562, column: 27, scope: !4731)
!4743 = !DILocation(line: 1564, column: 3, scope: !4731)
!4744 = !DILocation(line: 1565, column: 2, scope: !4724)
!4745 = !DILocation(line: 1567, column: 9, scope: !4629)
!4746 = !DILocation(line: 1567, column: 2, scope: !4629)
!4747 = !DILocation(line: 1568, column: 1, scope: !4629)
!4748 = distinct !DISubprogram(name: "BKE_sequence_dupli_recursive", scope: !3, file: !3, line: 4654, type: !4749, scopeLine: 4655, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4749 = !DISubroutineType(types: !4750)
!4750 = !{!209, !1744, !1744, !204, !45}
!4751 = !DILocalVariable(name: "scene", arg: 1, scope: !4748, file: !3, line: 4654, type: !1744)
!4752 = !DILocation(line: 4654, column: 47, scope: !4748)
!4753 = !DILocalVariable(name: "scene_to", arg: 2, scope: !4748, file: !3, line: 4654, type: !1744)
!4754 = !DILocation(line: 4654, column: 61, scope: !4748)
!4755 = !DILocalVariable(name: "seq", arg: 3, scope: !4748, file: !3, line: 4654, type: !204)
!4756 = !DILocation(line: 4654, column: 81, scope: !4748)
!4757 = !DILocalVariable(name: "dupe_flag", arg: 4, scope: !4748, file: !3, line: 4654, type: !45)
!4758 = !DILocation(line: 4654, column: 90, scope: !4748)
!4759 = !DILocalVariable(name: "seqn", scope: !4748, file: !3, line: 4656, type: !204)
!4760 = !DILocation(line: 4656, column: 12, scope: !4748)
!4761 = !DILocation(line: 4656, column: 29, scope: !4748)
!4762 = !DILocation(line: 4656, column: 36, scope: !4748)
!4763 = !DILocation(line: 4656, column: 46, scope: !4748)
!4764 = !DILocation(line: 4656, column: 51, scope: !4748)
!4765 = !DILocation(line: 4656, column: 19, scope: !4748)
!4766 = !DILocation(line: 4657, column: 6, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 4657, column: 6)
!4768 = !DILocation(line: 4657, column: 11, scope: !4767)
!4769 = !DILocation(line: 4657, column: 16, scope: !4767)
!4770 = !DILocation(line: 4657, column: 6, scope: !4748)
!4771 = !DILocalVariable(name: "s", scope: !4772, file: !3, line: 4658, type: !204)
!4772 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 4657, column: 34)
!4773 = !DILocation(line: 4658, column: 13, scope: !4772)
!4774 = !DILocation(line: 4659, column: 12, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 4659, column: 3)
!4776 = !DILocation(line: 4659, column: 17, scope: !4775)
!4777 = !DILocation(line: 4659, column: 25, scope: !4775)
!4778 = !DILocation(line: 4659, column: 10, scope: !4775)
!4779 = !DILocation(line: 4659, column: 8, scope: !4775)
!4780 = !DILocation(line: 4659, column: 32, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4775, file: !3, line: 4659, column: 3)
!4782 = !DILocation(line: 4659, column: 3, scope: !4775)
!4783 = !DILocalVariable(name: "n", scope: !4784, file: !3, line: 4660, type: !204)
!4784 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 4659, column: 48)
!4785 = !DILocation(line: 4660, column: 14, scope: !4784)
!4786 = !DILocation(line: 4660, column: 47, scope: !4784)
!4787 = !DILocation(line: 4660, column: 54, scope: !4784)
!4788 = !DILocation(line: 4660, column: 64, scope: !4784)
!4789 = !DILocation(line: 4660, column: 67, scope: !4784)
!4790 = !DILocation(line: 4660, column: 18, scope: !4784)
!4791 = !DILocation(line: 4661, column: 8, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 4661, column: 8)
!4793 = !DILocation(line: 4661, column: 8, scope: !4784)
!4794 = !DILocation(line: 4662, column: 18, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 4661, column: 11)
!4796 = !DILocation(line: 4662, column: 24, scope: !4795)
!4797 = !DILocation(line: 4662, column: 33, scope: !4795)
!4798 = !DILocation(line: 4662, column: 5, scope: !4795)
!4799 = !DILocation(line: 4663, column: 4, scope: !4795)
!4800 = !DILocation(line: 4664, column: 3, scope: !4784)
!4801 = !DILocation(line: 4659, column: 39, scope: !4781)
!4802 = !DILocation(line: 4659, column: 42, scope: !4781)
!4803 = !DILocation(line: 4659, column: 37, scope: !4781)
!4804 = !DILocation(line: 4659, column: 3, scope: !4781)
!4805 = distinct !{!4805, !4782, !4806}
!4806 = !DILocation(line: 4664, column: 3, scope: !4775)
!4807 = !DILocation(line: 4665, column: 2, scope: !4772)
!4808 = !DILocation(line: 4666, column: 9, scope: !4748)
!4809 = !DILocation(line: 4666, column: 2, scope: !4748)
!4810 = distinct !DISubprogram(name: "seq_open_anim_file", scope: !3, file: !3, line: 1340, type: !2375, scopeLine: 1341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4811 = !DILocalVariable(name: "seq", arg: 1, scope: !4810, file: !3, line: 1340, type: !204)
!4812 = !DILocation(line: 1340, column: 42, scope: !4810)
!4813 = !DILocalVariable(name: "name", scope: !4810, file: !3, line: 1342, type: !143)
!4814 = !DILocation(line: 1342, column: 7, scope: !4810)
!4815 = !DILocalVariable(name: "proxy", scope: !4810, file: !3, line: 1343, type: !261)
!4816 = !DILocation(line: 1343, column: 14, scope: !4810)
!4817 = !DILocation(line: 1345, column: 6, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 1345, column: 6)
!4819 = !DILocation(line: 1345, column: 11, scope: !4818)
!4820 = !DILocation(line: 1345, column: 16, scope: !4818)
!4821 = !DILocation(line: 1345, column: 6, scope: !4810)
!4822 = !DILocation(line: 1346, column: 3, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 1345, column: 25)
!4824 = !DILocation(line: 1349, column: 19, scope: !4810)
!4825 = !DILocation(line: 1350, column: 19, scope: !4810)
!4826 = !DILocation(line: 1350, column: 24, scope: !4810)
!4827 = !DILocation(line: 1350, column: 31, scope: !4810)
!4828 = !DILocation(line: 1350, column: 36, scope: !4810)
!4829 = !DILocation(line: 1350, column: 41, scope: !4810)
!4830 = !DILocation(line: 1350, column: 48, scope: !4810)
!4831 = !DILocation(line: 1350, column: 59, scope: !4810)
!4832 = !DILocation(line: 1349, column: 2, scope: !4810)
!4833 = !DILocation(line: 1351, column: 15, scope: !4810)
!4834 = !DILocation(line: 1351, column: 23, scope: !4810)
!4835 = !DILocation(line: 1351, column: 29, scope: !4810)
!4836 = !DILocation(line: 1351, column: 21, scope: !4810)
!4837 = !DILocation(line: 1351, column: 2, scope: !4810)
!4838 = !DILocation(line: 1353, column: 23, scope: !4810)
!4839 = !DILocation(line: 1353, column: 41, scope: !4810)
!4840 = !DILocation(line: 1353, column: 46, scope: !4810)
!4841 = !DILocation(line: 1353, column: 51, scope: !4810)
!4842 = !DILocation(line: 1353, column: 40, scope: !4810)
!4843 = !DILocation(line: 1353, column: 37, scope: !4810)
!4844 = !DILocation(line: 1354, column: 23, scope: !4810)
!4845 = !DILocation(line: 1354, column: 28, scope: !4810)
!4846 = !DILocation(line: 1354, column: 41, scope: !4810)
!4847 = !DILocation(line: 1354, column: 46, scope: !4810)
!4848 = !DILocation(line: 1354, column: 53, scope: !4810)
!4849 = !DILocation(line: 1354, column: 73, scope: !4810)
!4850 = !DILocation(line: 1353, column: 14, scope: !4810)
!4851 = !DILocation(line: 1353, column: 2, scope: !4810)
!4852 = !DILocation(line: 1353, column: 7, scope: !4810)
!4853 = !DILocation(line: 1353, column: 12, scope: !4810)
!4854 = !DILocation(line: 1356, column: 6, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 1356, column: 6)
!4856 = !DILocation(line: 1356, column: 11, scope: !4855)
!4857 = !DILocation(line: 1356, column: 16, scope: !4855)
!4858 = !DILocation(line: 1356, column: 6, scope: !4810)
!4859 = !DILocation(line: 1357, column: 3, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 1356, column: 25)
!4861 = !DILocation(line: 1360, column: 10, scope: !4810)
!4862 = !DILocation(line: 1360, column: 15, scope: !4810)
!4863 = !DILocation(line: 1360, column: 22, scope: !4810)
!4864 = !DILocation(line: 1360, column: 8, scope: !4810)
!4865 = !DILocation(line: 1362, column: 6, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 1362, column: 6)
!4867 = !DILocation(line: 1362, column: 12, scope: !4866)
!4868 = !DILocation(line: 1362, column: 6, scope: !4810)
!4869 = !DILocation(line: 1363, column: 3, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1362, column: 21)
!4871 = !DILocation(line: 1366, column: 6, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 1366, column: 6)
!4873 = !DILocation(line: 1366, column: 11, scope: !4872)
!4874 = !DILocation(line: 1366, column: 16, scope: !4872)
!4875 = !DILocation(line: 1366, column: 6, scope: !4810)
!4876 = !DILocalVariable(name: "dir", scope: !4877, file: !3, line: 1367, type: !143)
!4877 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 1366, column: 44)
!4878 = !DILocation(line: 1367, column: 8, scope: !4877)
!4879 = !DILocation(line: 1368, column: 15, scope: !4877)
!4880 = !DILocation(line: 1368, column: 20, scope: !4877)
!4881 = !DILocation(line: 1368, column: 25, scope: !4877)
!4882 = !DILocation(line: 1368, column: 32, scope: !4877)
!4883 = !DILocation(line: 1368, column: 39, scope: !4877)
!4884 = !DILocation(line: 1368, column: 3, scope: !4877)
!4885 = !DILocation(line: 1369, column: 16, scope: !4877)
!4886 = !DILocation(line: 1369, column: 23, scope: !4877)
!4887 = !DILocation(line: 1369, column: 29, scope: !4877)
!4888 = !DILocation(line: 1369, column: 21, scope: !4877)
!4889 = !DILocation(line: 1369, column: 3, scope: !4877)
!4890 = !DILocation(line: 1371, column: 26, scope: !4877)
!4891 = !DILocation(line: 1371, column: 31, scope: !4877)
!4892 = !DILocation(line: 1371, column: 37, scope: !4877)
!4893 = !DILocation(line: 1371, column: 3, scope: !4877)
!4894 = !DILocation(line: 1372, column: 2, scope: !4877)
!4895 = !DILocation(line: 1373, column: 1, scope: !4810)
!4896 = distinct !DISubprogram(name: "BKE_sequencer_proxy_rebuild", scope: !3, file: !3, line: 1570, type: !4897, scopeLine: 1571, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!4897 = !DISubroutineType(types: !4898)
!4898 = !{null, !4652, !1739, !1739, !832}
!4899 = !DILocalVariable(name: "context", arg: 1, scope: !4896, file: !3, line: 1570, type: !4652)
!4900 = !DILocation(line: 1570, column: 56, scope: !4896)
!4901 = !DILocalVariable(name: "stop", arg: 2, scope: !4896, file: !3, line: 1570, type: !1739)
!4902 = !DILocation(line: 1570, column: 72, scope: !4896)
!4903 = !DILocalVariable(name: "do_update", arg: 3, scope: !4896, file: !3, line: 1570, type: !1739)
!4904 = !DILocation(line: 1570, column: 85, scope: !4896)
!4905 = !DILocalVariable(name: "progress", arg: 4, scope: !4896, file: !3, line: 1570, type: !832)
!4906 = !DILocation(line: 1570, column: 103, scope: !4896)
!4907 = !DILocalVariable(name: "render_context", scope: !4896, file: !3, line: 1572, type: !1894)
!4908 = !DILocation(line: 1572, column: 16, scope: !4896)
!4909 = !DILocalVariable(name: "seq", scope: !4896, file: !3, line: 1573, type: !204)
!4910 = !DILocation(line: 1573, column: 12, scope: !4896)
!4911 = !DILocation(line: 1573, column: 18, scope: !4896)
!4912 = !DILocation(line: 1573, column: 27, scope: !4896)
!4913 = !DILocalVariable(name: "scene", scope: !4896, file: !3, line: 1574, type: !1744)
!4914 = !DILocation(line: 1574, column: 9, scope: !4896)
!4915 = !DILocation(line: 1574, column: 17, scope: !4896)
!4916 = !DILocation(line: 1574, column: 26, scope: !4896)
!4917 = !DILocalVariable(name: "bmain", scope: !4896, file: !3, line: 1575, type: !2462)
!4918 = !DILocation(line: 1575, column: 8, scope: !4896)
!4919 = !DILocation(line: 1575, column: 16, scope: !4896)
!4920 = !DILocation(line: 1575, column: 25, scope: !4896)
!4921 = !DILocalVariable(name: "cfra", scope: !4896, file: !3, line: 1576, type: !45)
!4922 = !DILocation(line: 1576, column: 6, scope: !4896)
!4923 = !DILocation(line: 1578, column: 6, scope: !4924)
!4924 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1578, column: 6)
!4925 = !DILocation(line: 1578, column: 11, scope: !4924)
!4926 = !DILocation(line: 1578, column: 16, scope: !4924)
!4927 = !DILocation(line: 1578, column: 6, scope: !4896)
!4928 = !DILocation(line: 1579, column: 7, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 1579, column: 7)
!4930 = distinct !DILexicalBlock(scope: !4924, file: !3, line: 1578, column: 35)
!4931 = !DILocation(line: 1579, column: 16, scope: !4929)
!4932 = !DILocation(line: 1579, column: 7, scope: !4930)
!4933 = !DILocation(line: 1580, column: 27, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 1579, column: 31)
!4935 = !DILocation(line: 1580, column: 36, scope: !4934)
!4936 = !DILocation(line: 1580, column: 51, scope: !4934)
!4937 = !DILocation(line: 1580, column: 57, scope: !4934)
!4938 = !DILocation(line: 1580, column: 68, scope: !4934)
!4939 = !DILocation(line: 1580, column: 4, scope: !4934)
!4940 = !DILocation(line: 1581, column: 3, scope: !4934)
!4941 = !DILocation(line: 1583, column: 3, scope: !4930)
!4942 = !DILocation(line: 1586, column: 8, scope: !4943)
!4943 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1586, column: 6)
!4944 = !DILocation(line: 1586, column: 13, scope: !4943)
!4945 = !DILocation(line: 1586, column: 18, scope: !4943)
!4946 = !DILocation(line: 1586, column: 6, scope: !4896)
!4947 = !DILocation(line: 1587, column: 3, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4943, file: !3, line: 1586, column: 36)
!4949 = !DILocation(line: 1591, column: 6, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1591, column: 6)
!4951 = !DILocation(line: 1591, column: 11, scope: !4950)
!4952 = !DILocation(line: 1591, column: 16, scope: !4950)
!4953 = !DILocation(line: 1591, column: 6, scope: !4896)
!4954 = !DILocation(line: 1592, column: 3, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 1591, column: 45)
!4956 = !DILocation(line: 1597, column: 49, scope: !4896)
!4957 = !DILocation(line: 1597, column: 56, scope: !4896)
!4958 = !DILocation(line: 1597, column: 66, scope: !4896)
!4959 = !DILocation(line: 1597, column: 73, scope: !4896)
!4960 = !DILocation(line: 1597, column: 82, scope: !4896)
!4961 = !DILocation(line: 1598, column: 39, scope: !4896)
!4962 = !DILocation(line: 1598, column: 46, scope: !4896)
!4963 = !DILocation(line: 1598, column: 48, scope: !4896)
!4964 = !DILocation(line: 1598, column: 63, scope: !4896)
!4965 = !DILocation(line: 1598, column: 70, scope: !4896)
!4966 = !DILocation(line: 1598, column: 72, scope: !4896)
!4967 = !DILocation(line: 1598, column: 55, scope: !4896)
!4968 = !DILocation(line: 1598, column: 53, scope: !4896)
!4969 = !DILocation(line: 1598, column: 78, scope: !4896)
!4970 = !DILocation(line: 1598, column: 87, scope: !4896)
!4971 = !DILocation(line: 1598, column: 38, scope: !4896)
!4972 = !DILocation(line: 1599, column: 39, scope: !4896)
!4973 = !DILocation(line: 1599, column: 46, scope: !4896)
!4974 = !DILocation(line: 1599, column: 48, scope: !4896)
!4975 = !DILocation(line: 1599, column: 63, scope: !4896)
!4976 = !DILocation(line: 1599, column: 70, scope: !4896)
!4977 = !DILocation(line: 1599, column: 72, scope: !4896)
!4978 = !DILocation(line: 1599, column: 55, scope: !4896)
!4979 = !DILocation(line: 1599, column: 53, scope: !4896)
!4980 = !DILocation(line: 1599, column: 78, scope: !4896)
!4981 = !DILocation(line: 1599, column: 87, scope: !4896)
!4982 = !DILocation(line: 1599, column: 38, scope: !4896)
!4983 = !DILocation(line: 1597, column: 19, scope: !4896)
!4984 = !DILocation(line: 1600, column: 17, scope: !4896)
!4985 = !DILocation(line: 1600, column: 28, scope: !4896)
!4986 = !DILocation(line: 1601, column: 17, scope: !4896)
!4987 = !DILocation(line: 1601, column: 33, scope: !4896)
!4988 = !DILocation(line: 1603, column: 14, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1603, column: 2)
!4990 = !DILocation(line: 1603, column: 19, scope: !4989)
!4991 = !DILocation(line: 1603, column: 31, scope: !4989)
!4992 = !DILocation(line: 1603, column: 36, scope: !4989)
!4993 = !DILocation(line: 1603, column: 29, scope: !4989)
!4994 = !DILocation(line: 1603, column: 12, scope: !4989)
!4995 = !DILocation(line: 1603, column: 7, scope: !4989)
!4996 = !DILocation(line: 1603, column: 49, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1603, column: 2)
!4998 = !DILocation(line: 1603, column: 56, scope: !4997)
!4999 = !DILocation(line: 1603, column: 61, scope: !4997)
!5000 = !DILocation(line: 1603, column: 71, scope: !4997)
!5001 = !DILocation(line: 1603, column: 76, scope: !4997)
!5002 = !DILocation(line: 1603, column: 69, scope: !4997)
!5003 = !DILocation(line: 1603, column: 54, scope: !4997)
!5004 = !DILocation(line: 1603, column: 2, scope: !4989)
!5005 = !DILocation(line: 1604, column: 7, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1604, column: 7)
!5007 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 1603, column: 94)
!5008 = !DILocation(line: 1604, column: 16, scope: !5006)
!5009 = !DILocation(line: 1604, column: 27, scope: !5006)
!5010 = !DILocation(line: 1604, column: 7, scope: !5007)
!5011 = !DILocation(line: 1605, column: 43, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5006, file: !3, line: 1604, column: 43)
!5013 = !DILocation(line: 1605, column: 48, scope: !5012)
!5014 = !DILocation(line: 1605, column: 4, scope: !5012)
!5015 = !DILocation(line: 1606, column: 3, scope: !5012)
!5016 = !DILocation(line: 1607, column: 7, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1607, column: 7)
!5018 = !DILocation(line: 1607, column: 16, scope: !5017)
!5019 = !DILocation(line: 1607, column: 27, scope: !5017)
!5020 = !DILocation(line: 1607, column: 7, scope: !5007)
!5021 = !DILocation(line: 1608, column: 43, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 1607, column: 43)
!5023 = !DILocation(line: 1608, column: 48, scope: !5022)
!5024 = !DILocation(line: 1608, column: 4, scope: !5022)
!5025 = !DILocation(line: 1609, column: 3, scope: !5022)
!5026 = !DILocation(line: 1610, column: 7, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1610, column: 7)
!5028 = !DILocation(line: 1610, column: 16, scope: !5027)
!5029 = !DILocation(line: 1610, column: 27, scope: !5027)
!5030 = !DILocation(line: 1610, column: 7, scope: !5007)
!5031 = !DILocation(line: 1611, column: 43, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 1610, column: 43)
!5033 = !DILocation(line: 1611, column: 48, scope: !5032)
!5034 = !DILocation(line: 1611, column: 4, scope: !5032)
!5035 = !DILocation(line: 1612, column: 3, scope: !5032)
!5036 = !DILocation(line: 1613, column: 7, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1613, column: 7)
!5038 = !DILocation(line: 1613, column: 16, scope: !5037)
!5039 = !DILocation(line: 1613, column: 27, scope: !5037)
!5040 = !DILocation(line: 1613, column: 7, scope: !5007)
!5041 = !DILocation(line: 1614, column: 43, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 1613, column: 44)
!5043 = !DILocation(line: 1614, column: 48, scope: !5042)
!5044 = !DILocation(line: 1614, column: 4, scope: !5042)
!5045 = !DILocation(line: 1615, column: 3, scope: !5042)
!5046 = !DILocation(line: 1617, column: 24, scope: !5007)
!5047 = !DILocation(line: 1617, column: 31, scope: !5007)
!5048 = !DILocation(line: 1617, column: 36, scope: !5007)
!5049 = !DILocation(line: 1617, column: 29, scope: !5007)
!5050 = !DILocation(line: 1617, column: 48, scope: !5007)
!5051 = !DILocation(line: 1617, column: 53, scope: !5007)
!5052 = !DILocation(line: 1617, column: 46, scope: !5007)
!5053 = !DILocation(line: 1617, column: 15, scope: !5007)
!5054 = !DILocation(line: 1617, column: 68, scope: !5007)
!5055 = !DILocation(line: 1617, column: 73, scope: !5007)
!5056 = !DILocation(line: 1617, column: 83, scope: !5007)
!5057 = !DILocation(line: 1617, column: 88, scope: !5007)
!5058 = !DILocation(line: 1617, column: 81, scope: !5007)
!5059 = !DILocation(line: 1617, column: 99, scope: !5007)
!5060 = !DILocation(line: 1617, column: 104, scope: !5007)
!5061 = !DILocation(line: 1617, column: 97, scope: !5007)
!5062 = !DILocation(line: 1617, column: 116, scope: !5007)
!5063 = !DILocation(line: 1617, column: 121, scope: !5007)
!5064 = !DILocation(line: 1617, column: 114, scope: !5007)
!5065 = !DILocation(line: 1617, column: 67, scope: !5007)
!5066 = !DILocation(line: 1617, column: 65, scope: !5007)
!5067 = !DILocation(line: 1617, column: 4, scope: !5007)
!5068 = !DILocation(line: 1617, column: 13, scope: !5007)
!5069 = !DILocation(line: 1618, column: 4, scope: !5007)
!5070 = !DILocation(line: 1618, column: 14, scope: !5007)
!5071 = !DILocation(line: 1620, column: 8, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 1620, column: 7)
!5073 = !DILocation(line: 1620, column: 7, scope: !5072)
!5074 = !DILocation(line: 1620, column: 13, scope: !5072)
!5075 = !DILocation(line: 1620, column: 18, scope: !5072)
!5076 = !DILocation(line: 1620, column: 16, scope: !5072)
!5077 = !DILocation(line: 1620, column: 7, scope: !5007)
!5078 = !DILocation(line: 1621, column: 4, scope: !5072)
!5079 = !DILocation(line: 1622, column: 2, scope: !5007)
!5080 = !DILocation(line: 1603, column: 90, scope: !4997)
!5081 = !DILocation(line: 1603, column: 2, scope: !4997)
!5082 = distinct !{!5082, !5004, !5083}
!5083 = !DILocation(line: 1622, column: 2, scope: !4989)
!5084 = !DILocation(line: 1623, column: 1, scope: !4896)
!5085 = distinct !DISubprogram(name: "seq_proxy_build_frame", scope: !3, file: !3, line: 1492, type: !5086, scopeLine: 1493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5086 = !DISubroutineType(types: !5087)
!5087 = !{null, !1892, !204, !45, !45}
!5088 = !DILocalVariable(name: "context", arg: 1, scope: !5085, file: !3, line: 1492, type: !1892)
!5089 = !DILocation(line: 1492, column: 56, scope: !5085)
!5090 = !DILocalVariable(name: "seq", arg: 2, scope: !5085, file: !3, line: 1492, type: !204)
!5091 = !DILocation(line: 1492, column: 75, scope: !5085)
!5092 = !DILocalVariable(name: "cfra", arg: 3, scope: !5085, file: !3, line: 1492, type: !45)
!5093 = !DILocation(line: 1492, column: 84, scope: !5085)
!5094 = !DILocalVariable(name: "proxy_render_size", arg: 4, scope: !5085, file: !3, line: 1492, type: !45)
!5095 = !DILocation(line: 1492, column: 94, scope: !5085)
!5096 = !DILocalVariable(name: "name", scope: !5085, file: !3, line: 1494, type: !5097)
!5097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 14336, elements: !5098)
!5098 = !{!5099}
!5099 = !DISubrange(count: 1792)
!5100 = !DILocation(line: 1494, column: 7, scope: !5085)
!5101 = !DILocalVariable(name: "quality", scope: !5085, file: !3, line: 1495, type: !45)
!5102 = !DILocation(line: 1495, column: 6, scope: !5085)
!5103 = !DILocalVariable(name: "rectx", scope: !5085, file: !3, line: 1496, type: !45)
!5104 = !DILocation(line: 1496, column: 6, scope: !5085)
!5105 = !DILocalVariable(name: "recty", scope: !5085, file: !3, line: 1496, type: !45)
!5106 = !DILocation(line: 1496, column: 13, scope: !5085)
!5107 = !DILocalVariable(name: "ok", scope: !5085, file: !3, line: 1497, type: !45)
!5108 = !DILocation(line: 1497, column: 6, scope: !5085)
!5109 = !DILocalVariable(name: "ibuf", scope: !5085, file: !3, line: 1498, type: !1776)
!5110 = !DILocation(line: 1498, column: 9, scope: !5085)
!5111 = !DILocation(line: 1500, column: 27, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 1500, column: 6)
!5113 = !DILocation(line: 1500, column: 32, scope: !5112)
!5114 = !DILocation(line: 1500, column: 38, scope: !5112)
!5115 = !DILocation(line: 1500, column: 57, scope: !5112)
!5116 = !DILocation(line: 1500, column: 7, scope: !5112)
!5117 = !DILocation(line: 1500, column: 6, scope: !5085)
!5118 = !DILocation(line: 1501, column: 3, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 1500, column: 64)
!5120 = !DILocation(line: 1504, column: 26, scope: !5085)
!5121 = !DILocation(line: 1504, column: 35, scope: !5085)
!5122 = !DILocation(line: 1504, column: 40, scope: !5085)
!5123 = !DILocation(line: 1504, column: 9, scope: !5085)
!5124 = !DILocation(line: 1504, column: 7, scope: !5085)
!5125 = !DILocation(line: 1506, column: 11, scope: !5085)
!5126 = !DILocation(line: 1506, column: 31, scope: !5085)
!5127 = !DILocation(line: 1506, column: 37, scope: !5085)
!5128 = !DILocation(line: 1506, column: 29, scope: !5085)
!5129 = !DILocation(line: 1506, column: 40, scope: !5085)
!5130 = !DILocation(line: 1506, column: 8, scope: !5085)
!5131 = !DILocation(line: 1507, column: 11, scope: !5085)
!5132 = !DILocation(line: 1507, column: 31, scope: !5085)
!5133 = !DILocation(line: 1507, column: 37, scope: !5085)
!5134 = !DILocation(line: 1507, column: 29, scope: !5085)
!5135 = !DILocation(line: 1507, column: 40, scope: !5085)
!5136 = !DILocation(line: 1507, column: 8, scope: !5085)
!5137 = !DILocation(line: 1509, column: 6, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 1509, column: 6)
!5139 = !DILocation(line: 1509, column: 12, scope: !5138)
!5140 = !DILocation(line: 1509, column: 17, scope: !5138)
!5141 = !DILocation(line: 1509, column: 14, scope: !5138)
!5142 = !DILocation(line: 1509, column: 23, scope: !5138)
!5143 = !DILocation(line: 1509, column: 26, scope: !5138)
!5144 = !DILocation(line: 1509, column: 32, scope: !5138)
!5145 = !DILocation(line: 1509, column: 37, scope: !5138)
!5146 = !DILocation(line: 1509, column: 34, scope: !5138)
!5147 = !DILocation(line: 1509, column: 6, scope: !5085)
!5148 = !DILocation(line: 1510, column: 22, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5138, file: !3, line: 1509, column: 44)
!5150 = !DILocation(line: 1510, column: 35, scope: !5149)
!5151 = !DILocation(line: 1510, column: 28, scope: !5149)
!5152 = !DILocation(line: 1510, column: 49, scope: !5149)
!5153 = !DILocation(line: 1510, column: 42, scope: !5149)
!5154 = !DILocation(line: 1510, column: 3, scope: !5149)
!5155 = !DILocation(line: 1511, column: 2, scope: !5149)
!5156 = !DILocation(line: 1515, column: 12, scope: !5085)
!5157 = !DILocation(line: 1515, column: 17, scope: !5085)
!5158 = !DILocation(line: 1515, column: 24, scope: !5085)
!5159 = !DILocation(line: 1515, column: 31, scope: !5085)
!5160 = !DILocation(line: 1515, column: 10, scope: !5085)
!5161 = !DILocation(line: 1516, column: 22, scope: !5085)
!5162 = !DILocation(line: 1516, column: 20, scope: !5085)
!5163 = !DILocation(line: 1516, column: 2, scope: !5085)
!5164 = !DILocation(line: 1516, column: 8, scope: !5085)
!5165 = !DILocation(line: 1516, column: 14, scope: !5085)
!5166 = !DILocation(line: 1519, column: 6, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 1519, column: 6)
!5168 = !DILocation(line: 1519, column: 12, scope: !5167)
!5169 = !DILocation(line: 1519, column: 19, scope: !5167)
!5170 = !DILocation(line: 1519, column: 6, scope: !5085)
!5171 = !DILocation(line: 1520, column: 3, scope: !5167)
!5172 = !DILocation(line: 1520, column: 9, scope: !5167)
!5173 = !DILocation(line: 1520, column: 16, scope: !5167)
!5174 = !DILocation(line: 1522, column: 25, scope: !5085)
!5175 = !DILocation(line: 1522, column: 2, scope: !5085)
!5176 = !DILocation(line: 1524, column: 19, scope: !5085)
!5177 = !DILocation(line: 1524, column: 25, scope: !5085)
!5178 = !DILocation(line: 1524, column: 7, scope: !5085)
!5179 = !DILocation(line: 1524, column: 5, scope: !5085)
!5180 = !DILocation(line: 1525, column: 6, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 1525, column: 6)
!5182 = !DILocation(line: 1525, column: 9, scope: !5181)
!5183 = !DILocation(line: 1525, column: 6, scope: !5085)
!5184 = !DILocation(line: 1526, column: 10, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 1525, column: 15)
!5186 = !DILocation(line: 1526, column: 3, scope: !5185)
!5187 = !DILocation(line: 1527, column: 2, scope: !5185)
!5188 = !DILocation(line: 1529, column: 16, scope: !5085)
!5189 = !DILocation(line: 1529, column: 2, scope: !5085)
!5190 = !DILocation(line: 1530, column: 1, scope: !5085)
!5191 = distinct !DISubprogram(name: "BKE_sequencer_proxy_rebuild_finish", scope: !3, file: !3, line: 1625, type: !5192, scopeLine: 1626, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5192 = !DISubroutineType(types: !5193)
!5193 = !{null, !4652, !742}
!5194 = !DILocalVariable(name: "context", arg: 1, scope: !5191, file: !3, line: 1625, type: !4652)
!5195 = !DILocation(line: 1625, column: 63, scope: !5191)
!5196 = !DILocalVariable(name: "stop", arg: 2, scope: !5191, file: !3, line: 1625, type: !742)
!5197 = !DILocation(line: 1625, column: 77, scope: !5191)
!5198 = !DILocation(line: 1627, column: 6, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 1627, column: 6)
!5200 = !DILocation(line: 1627, column: 15, scope: !5199)
!5201 = !DILocation(line: 1627, column: 6, scope: !5191)
!5202 = !DILocation(line: 1628, column: 26, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5199, file: !3, line: 1627, column: 30)
!5204 = !DILocation(line: 1628, column: 35, scope: !5203)
!5205 = !DILocation(line: 1628, column: 40, scope: !5203)
!5206 = !DILocation(line: 1628, column: 3, scope: !5203)
!5207 = !DILocation(line: 1629, column: 26, scope: !5203)
!5208 = !DILocation(line: 1629, column: 35, scope: !5203)
!5209 = !DILocation(line: 1629, column: 45, scope: !5203)
!5210 = !DILocation(line: 1629, column: 3, scope: !5203)
!5211 = !DILocation(line: 1630, column: 33, scope: !5203)
!5212 = !DILocation(line: 1630, column: 42, scope: !5203)
!5213 = !DILocation(line: 1630, column: 57, scope: !5203)
!5214 = !DILocation(line: 1630, column: 3, scope: !5203)
!5215 = !DILocation(line: 1631, column: 2, scope: !5203)
!5216 = !DILocation(line: 1633, column: 34, scope: !5191)
!5217 = !DILocation(line: 1633, column: 43, scope: !5191)
!5218 = !DILocation(line: 1633, column: 2, scope: !5191)
!5219 = !DILocation(line: 1635, column: 2, scope: !5191)
!5220 = !DILocation(line: 1635, column: 12, scope: !5191)
!5221 = !DILocation(line: 1636, column: 1, scope: !5191)
!5222 = distinct !DISubprogram(name: "BKE_sequencer_render_mask_input", scope: !3, file: !3, line: 1892, type: !5223, scopeLine: 1893, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5223 = !DISubroutineType(types: !5224)
!5224 = !{!1782, !1892, !45, !204, !5225, !45, !742}
!5225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5226, size: 64)
!5226 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mask", file: !1684, line: 57, baseType: !1683)
!5227 = !DILocalVariable(name: "context", arg: 1, scope: !5222, file: !3, line: 1892, type: !1892)
!5228 = !DILocation(line: 1892, column: 61, scope: !5222)
!5229 = !DILocalVariable(name: "mask_input_type", arg: 2, scope: !5222, file: !3, line: 1892, type: !45)
!5230 = !DILocation(line: 1892, column: 74, scope: !5222)
!5231 = !DILocalVariable(name: "mask_sequence", arg: 3, scope: !5222, file: !3, line: 1892, type: !204)
!5232 = !DILocation(line: 1892, column: 101, scope: !5222)
!5233 = !DILocalVariable(name: "mask_id", arg: 4, scope: !5222, file: !3, line: 1892, type: !5225)
!5234 = !DILocation(line: 1892, column: 122, scope: !5222)
!5235 = !DILocalVariable(name: "cfra", arg: 5, scope: !5222, file: !3, line: 1892, type: !45)
!5236 = !DILocation(line: 1892, column: 135, scope: !5222)
!5237 = !DILocalVariable(name: "make_float", arg: 6, scope: !5222, file: !3, line: 1892, type: !742)
!5238 = !DILocation(line: 1892, column: 146, scope: !5222)
!5239 = !DILocalVariable(name: "mask_input", scope: !5222, file: !3, line: 1894, type: !1776)
!5240 = !DILocation(line: 1894, column: 9, scope: !5222)
!5241 = !DILocation(line: 1896, column: 6, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 1896, column: 6)
!5243 = !DILocation(line: 1896, column: 22, scope: !5242)
!5244 = !DILocation(line: 1896, column: 6, scope: !5222)
!5245 = !DILocation(line: 1897, column: 7, scope: !5246)
!5246 = distinct !DILexicalBlock(scope: !5247, file: !3, line: 1897, column: 7)
!5247 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 1896, column: 52)
!5248 = !DILocation(line: 1897, column: 7, scope: !5247)
!5249 = !DILocation(line: 1898, column: 34, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !5246, file: !3, line: 1897, column: 22)
!5251 = !DILocation(line: 1898, column: 43, scope: !5250)
!5252 = !DILocation(line: 1898, column: 58, scope: !5250)
!5253 = !DILocation(line: 1898, column: 17, scope: !5250)
!5254 = !DILocation(line: 1898, column: 15, scope: !5250)
!5255 = !DILocation(line: 1900, column: 8, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 1900, column: 8)
!5257 = !DILocation(line: 1900, column: 8, scope: !5250)
!5258 = !DILocation(line: 1901, column: 10, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5260, file: !3, line: 1901, column: 9)
!5260 = distinct !DILexicalBlock(scope: !5256, file: !3, line: 1900, column: 20)
!5261 = !DILocation(line: 1901, column: 22, scope: !5259)
!5262 = !DILocation(line: 1901, column: 9, scope: !5260)
!5263 = !DILocation(line: 1902, column: 26, scope: !5259)
!5264 = !DILocation(line: 1902, column: 6, scope: !5259)
!5265 = !DILocation(line: 1903, column: 4, scope: !5260)
!5266 = !DILocation(line: 1905, column: 10, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 1905, column: 9)
!5268 = distinct !DILexicalBlock(scope: !5256, file: !3, line: 1904, column: 9)
!5269 = !DILocation(line: 1905, column: 22, scope: !5267)
!5270 = !DILocation(line: 1905, column: 9, scope: !5268)
!5271 = !DILocation(line: 1906, column: 26, scope: !5267)
!5272 = !DILocation(line: 1906, column: 6, scope: !5267)
!5273 = !DILocation(line: 1908, column: 3, scope: !5250)
!5274 = !DILocation(line: 1909, column: 2, scope: !5247)
!5275 = !DILocation(line: 1910, column: 11, scope: !5276)
!5276 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 1910, column: 11)
!5277 = !DILocation(line: 1910, column: 27, scope: !5276)
!5278 = !DILocation(line: 1910, column: 11, scope: !5242)
!5279 = !DILocation(line: 1911, column: 32, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 1910, column: 54)
!5281 = !DILocation(line: 1911, column: 41, scope: !5280)
!5282 = !DILocation(line: 1911, column: 50, scope: !5280)
!5283 = !DILocation(line: 1911, column: 56, scope: !5280)
!5284 = !DILocation(line: 1911, column: 16, scope: !5280)
!5285 = !DILocation(line: 1911, column: 14, scope: !5280)
!5286 = !DILocation(line: 1912, column: 2, scope: !5280)
!5287 = !DILocation(line: 1914, column: 9, scope: !5222)
!5288 = !DILocation(line: 1914, column: 2, scope: !5222)
!5289 = distinct !DISubprogram(name: "seq_render_strip", scope: !3, file: !3, line: 2825, type: !5290, scopeLine: 2826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5290 = !DISubroutineType(types: !5291)
!5291 = !{!1776, !1892, !204, !193}
!5292 = !DILocalVariable(name: "context", arg: 1, scope: !5289, file: !3, line: 2825, type: !1892)
!5293 = !DILocation(line: 2825, column: 53, scope: !5289)
!5294 = !DILocalVariable(name: "seq", arg: 2, scope: !5289, file: !3, line: 2825, type: !204)
!5295 = !DILocation(line: 2825, column: 72, scope: !5289)
!5296 = !DILocalVariable(name: "cfra", arg: 3, scope: !5289, file: !3, line: 2825, type: !193)
!5297 = !DILocation(line: 2825, column: 83, scope: !5289)
!5298 = !DILocalVariable(name: "ibuf", scope: !5289, file: !3, line: 2827, type: !1776)
!5299 = !DILocation(line: 2827, column: 9, scope: !5289)
!5300 = !DILocalVariable(name: "use_preprocess", scope: !5289, file: !3, line: 2828, type: !742)
!5301 = !DILocation(line: 2828, column: 7, scope: !5289)
!5302 = !DILocalVariable(name: "is_proxy_image", scope: !5289, file: !3, line: 2829, type: !742)
!5303 = !DILocation(line: 2829, column: 7, scope: !5289)
!5304 = !DILocalVariable(name: "nr", scope: !5289, file: !3, line: 2830, type: !193)
!5305 = !DILocation(line: 2830, column: 8, scope: !5289)
!5306 = !DILocation(line: 2830, column: 34, scope: !5289)
!5307 = !DILocation(line: 2830, column: 39, scope: !5289)
!5308 = !DILocation(line: 2830, column: 13, scope: !5289)
!5309 = !DILocalVariable(name: "type", scope: !5289, file: !3, line: 2832, type: !45)
!5310 = !DILocation(line: 2832, column: 6, scope: !5289)
!5311 = !DILocation(line: 2832, column: 14, scope: !5289)
!5312 = !DILocation(line: 2832, column: 19, scope: !5289)
!5313 = !DILocation(line: 2832, column: 24, scope: !5289)
!5314 = !DILocation(line: 2832, column: 42, scope: !5289)
!5315 = !DILocation(line: 2832, column: 45, scope: !5289)
!5316 = !DILocation(line: 2832, column: 50, scope: !5289)
!5317 = !DILocation(line: 2832, column: 55, scope: !5289)
!5318 = !DILocation(line: 2832, column: 13, scope: !5289)
!5319 = !DILocation(line: 2832, column: 94, scope: !5289)
!5320 = !DILocation(line: 2832, column: 99, scope: !5289)
!5321 = !DILocalVariable(name: "is_preprocessed", scope: !5289, file: !3, line: 2833, type: !742)
!5322 = !DILocation(line: 2833, column: 7, scope: !5289)
!5323 = !DILocation(line: 2833, column: 26, scope: !5289)
!5324 = !DILocation(line: 2833, column: 25, scope: !5289)
!5325 = !DILocation(line: 2835, column: 33, scope: !5289)
!5326 = !DILocation(line: 2835, column: 42, scope: !5289)
!5327 = !DILocation(line: 2835, column: 47, scope: !5289)
!5328 = !DILocation(line: 2835, column: 9, scope: !5289)
!5329 = !DILocation(line: 2835, column: 7, scope: !5289)
!5330 = !DILocation(line: 2837, column: 6, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2837, column: 6)
!5332 = !DILocation(line: 2837, column: 11, scope: !5331)
!5333 = !DILocation(line: 2837, column: 6, scope: !5289)
!5334 = !DILocation(line: 2838, column: 31, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5331, file: !3, line: 2837, column: 20)
!5336 = !DILocation(line: 2838, column: 40, scope: !5335)
!5337 = !DILocation(line: 2838, column: 45, scope: !5335)
!5338 = !DILocation(line: 2838, column: 10, scope: !5335)
!5339 = !DILocation(line: 2838, column: 8, scope: !5335)
!5340 = !DILocation(line: 2840, column: 7, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5335, file: !3, line: 2840, column: 7)
!5342 = !DILocation(line: 2840, column: 12, scope: !5341)
!5343 = !DILocation(line: 2840, column: 7, scope: !5335)
!5344 = !DILocation(line: 2841, column: 48, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5341, file: !3, line: 2840, column: 21)
!5346 = !DILocation(line: 2841, column: 57, scope: !5345)
!5347 = !DILocation(line: 2841, column: 62, scope: !5345)
!5348 = !DILocation(line: 2841, column: 11, scope: !5345)
!5349 = !DILocation(line: 2841, column: 9, scope: !5345)
!5350 = !DILocation(line: 2843, column: 8, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2843, column: 8)
!5352 = !DILocation(line: 2843, column: 13, scope: !5351)
!5353 = !DILocation(line: 2843, column: 8, scope: !5345)
!5354 = !DILocation(line: 2845, column: 9, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 2845, column: 9)
!5356 = distinct !DILexicalBlock(scope: !5351, file: !3, line: 2843, column: 22)
!5357 = !DILocation(line: 2845, column: 14, scope: !5355)
!5358 = !DILocation(line: 2845, column: 22, scope: !5355)
!5359 = !DILocation(line: 2845, column: 25, scope: !5355)
!5360 = !DILocation(line: 2845, column: 30, scope: !5355)
!5361 = !DILocation(line: 2845, column: 35, scope: !5355)
!5362 = !DILocation(line: 2845, column: 9, scope: !5356)
!5363 = !DILocation(line: 2846, column: 29, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5355, file: !3, line: 2845, column: 58)
!5365 = !DILocation(line: 2846, column: 38, scope: !5364)
!5366 = !DILocation(line: 2846, column: 43, scope: !5364)
!5367 = !DILocation(line: 2846, column: 13, scope: !5364)
!5368 = !DILocation(line: 2846, column: 11, scope: !5364)
!5369 = !DILocation(line: 2847, column: 24, scope: !5364)
!5370 = !DILocation(line: 2847, column: 29, scope: !5364)
!5371 = !DILocation(line: 2847, column: 23, scope: !5364)
!5372 = !DILocation(line: 2847, column: 21, scope: !5364)
!5373 = !DILocation(line: 2848, column: 5, scope: !5364)
!5374 = !DILocation(line: 2850, column: 9, scope: !5375)
!5375 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 2850, column: 9)
!5376 = !DILocation(line: 2850, column: 14, scope: !5375)
!5377 = !DILocation(line: 2850, column: 9, scope: !5356)
!5378 = !DILocation(line: 2851, column: 38, scope: !5375)
!5379 = !DILocation(line: 2851, column: 47, scope: !5375)
!5380 = !DILocation(line: 2851, column: 52, scope: !5375)
!5381 = !DILocation(line: 2851, column: 13, scope: !5375)
!5382 = !DILocation(line: 2851, column: 11, scope: !5375)
!5383 = !DILocation(line: 2851, column: 6, scope: !5375)
!5384 = !DILocation(line: 2853, column: 9, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 2853, column: 9)
!5386 = !DILocation(line: 2853, column: 9, scope: !5356)
!5387 = !DILocation(line: 2854, column: 10, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 2854, column: 10)
!5389 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 2853, column: 15)
!5390 = !DILocation(line: 2854, column: 10, scope: !5389)
!5391 = !DILocation(line: 2855, column: 25, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5388, file: !3, line: 2854, column: 63)
!5393 = !DILocation(line: 2855, column: 34, scope: !5392)
!5394 = !DILocation(line: 2855, column: 54, scope: !5392)
!5395 = !DILocation(line: 2855, column: 24, scope: !5392)
!5396 = !DILocation(line: 2855, column: 22, scope: !5392)
!5397 = !DILocation(line: 2856, column: 6, scope: !5392)
!5398 = !DILocation(line: 2857, column: 43, scope: !5389)
!5399 = !DILocation(line: 2857, column: 52, scope: !5389)
!5400 = !DILocation(line: 2857, column: 57, scope: !5389)
!5401 = !DILocation(line: 2857, column: 83, scope: !5389)
!5402 = !DILocation(line: 2857, column: 6, scope: !5389)
!5403 = !DILocation(line: 2858, column: 5, scope: !5389)
!5404 = !DILocation(line: 2859, column: 4, scope: !5356)
!5405 = !DILocation(line: 2860, column: 3, scope: !5345)
!5406 = !DILocation(line: 2862, column: 7, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5335, file: !3, line: 2862, column: 7)
!5408 = !DILocation(line: 2862, column: 7, scope: !5335)
!5409 = !DILocation(line: 2863, column: 60, scope: !5407)
!5410 = !DILocation(line: 2863, column: 69, scope: !5407)
!5411 = !DILocation(line: 2863, column: 74, scope: !5407)
!5412 = !DILocation(line: 2863, column: 21, scope: !5407)
!5413 = !DILocation(line: 2863, column: 19, scope: !5407)
!5414 = !DILocation(line: 2863, column: 4, scope: !5407)
!5415 = !DILocation(line: 2864, column: 2, scope: !5335)
!5416 = !DILocation(line: 2872, column: 6, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2872, column: 6)
!5418 = !DILocation(line: 2872, column: 11, scope: !5417)
!5419 = !DILocation(line: 2872, column: 6, scope: !5289)
!5420 = !DILocation(line: 2873, column: 25, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 2872, column: 20)
!5422 = !DILocation(line: 2873, column: 34, scope: !5421)
!5423 = !DILocation(line: 2873, column: 41, scope: !5421)
!5424 = !DILocation(line: 2873, column: 50, scope: !5421)
!5425 = !DILocation(line: 2873, column: 10, scope: !5421)
!5426 = !DILocation(line: 2873, column: 8, scope: !5421)
!5427 = !DILocation(line: 2874, column: 33, scope: !5421)
!5428 = !DILocation(line: 2874, column: 42, scope: !5421)
!5429 = !DILocation(line: 2874, column: 49, scope: !5421)
!5430 = !DILocation(line: 2874, column: 3, scope: !5421)
!5431 = !DILocation(line: 2875, column: 2, scope: !5421)
!5432 = !DILocation(line: 2877, column: 6, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2877, column: 6)
!5434 = !DILocation(line: 2877, column: 15, scope: !5433)
!5435 = !DILocation(line: 2877, column: 31, scope: !5433)
!5436 = !DILocation(line: 2877, column: 40, scope: !5433)
!5437 = !DILocation(line: 2878, column: 7, scope: !5433)
!5438 = !DILocation(line: 2878, column: 13, scope: !5433)
!5439 = !DILocation(line: 2878, column: 18, scope: !5433)
!5440 = !DILocation(line: 2878, column: 27, scope: !5433)
!5441 = !DILocation(line: 2878, column: 15, scope: !5433)
!5442 = !DILocation(line: 2878, column: 33, scope: !5433)
!5443 = !DILocation(line: 2878, column: 36, scope: !5433)
!5444 = !DILocation(line: 2878, column: 42, scope: !5433)
!5445 = !DILocation(line: 2878, column: 47, scope: !5433)
!5446 = !DILocation(line: 2878, column: 56, scope: !5433)
!5447 = !DILocation(line: 2878, column: 44, scope: !5433)
!5448 = !DILocation(line: 2877, column: 6, scope: !5289)
!5449 = !DILocation(line: 2880, column: 18, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 2879, column: 2)
!5451 = !DILocation(line: 2881, column: 2, scope: !5450)
!5452 = !DILocation(line: 2883, column: 6, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 2883, column: 6)
!5454 = !DILocation(line: 2883, column: 6, scope: !5289)
!5455 = !DILocation(line: 2884, column: 27, scope: !5453)
!5456 = !DILocation(line: 2884, column: 36, scope: !5453)
!5457 = !DILocation(line: 2884, column: 41, scope: !5453)
!5458 = !DILocation(line: 2884, column: 47, scope: !5453)
!5459 = !DILocation(line: 2884, column: 53, scope: !5453)
!5460 = !DILocation(line: 2884, column: 69, scope: !5453)
!5461 = !DILocation(line: 2884, column: 10, scope: !5453)
!5462 = !DILocation(line: 2884, column: 8, scope: !5453)
!5463 = !DILocation(line: 2884, column: 3, scope: !5453)
!5464 = !DILocation(line: 2886, column: 26, scope: !5289)
!5465 = !DILocation(line: 2886, column: 35, scope: !5289)
!5466 = !DILocation(line: 2886, column: 40, scope: !5289)
!5467 = !DILocation(line: 2886, column: 66, scope: !5289)
!5468 = !DILocation(line: 2886, column: 2, scope: !5289)
!5469 = !DILocation(line: 2888, column: 9, scope: !5289)
!5470 = !DILocation(line: 2888, column: 2, scope: !5289)
!5471 = distinct !DISubprogram(name: "seq_render_mask", scope: !3, file: !3, line: 2404, type: !5472, scopeLine: 2405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5472 = !DISubroutineType(types: !5473)
!5473 = !{!1776, !1892, !5225, !193, !742}
!5474 = !DILocalVariable(name: "context", arg: 1, scope: !5471, file: !3, line: 2404, type: !1892)
!5475 = !DILocation(line: 2404, column: 52, scope: !5471)
!5476 = !DILocalVariable(name: "mask", arg: 2, scope: !5471, file: !3, line: 2404, type: !5225)
!5477 = !DILocation(line: 2404, column: 67, scope: !5471)
!5478 = !DILocalVariable(name: "nr", arg: 3, scope: !5471, file: !3, line: 2404, type: !193)
!5479 = !DILocation(line: 2404, column: 79, scope: !5471)
!5480 = !DILocalVariable(name: "make_float", arg: 4, scope: !5471, file: !3, line: 2404, type: !742)
!5481 = !DILocation(line: 2404, column: 88, scope: !5471)
!5482 = !DILocalVariable(name: "ibuf", scope: !5471, file: !3, line: 2407, type: !1776)
!5483 = !DILocation(line: 2407, column: 9, scope: !5471)
!5484 = !DILocalVariable(name: "maskbuf", scope: !5471, file: !3, line: 2408, type: !832)
!5485 = !DILocation(line: 2408, column: 9, scope: !5471)
!5486 = !DILocalVariable(name: "i", scope: !5471, file: !3, line: 2409, type: !45)
!5487 = !DILocation(line: 2409, column: 6, scope: !5471)
!5488 = !DILocation(line: 2411, column: 7, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5471, file: !3, line: 2411, column: 6)
!5490 = !DILocation(line: 2411, column: 6, scope: !5471)
!5491 = !DILocation(line: 2412, column: 3, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5489, file: !3, line: 2411, column: 13)
!5493 = !DILocalVariable(name: "mask_temp", scope: !5494, file: !3, line: 2415, type: !5225)
!5494 = distinct !DILexicalBlock(scope: !5489, file: !3, line: 2414, column: 7)
!5495 = !DILocation(line: 2415, column: 9, scope: !5494)
!5496 = !DILocalVariable(name: "mr_handle", scope: !5494, file: !3, line: 2416, type: !5497)
!5497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5498, size: 64)
!5498 = !DIDerivedType(tag: DW_TAG_typedef, name: "MaskRasterHandle", file: !5499, line: 233, baseType: !5500)
!5499 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_mask.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!5500 = !DICompositeType(tag: DW_TAG_structure_type, name: "MaskRasterHandle", file: !5499, line: 232, flags: DIFlagFwdDecl)
!5501 = !DILocation(line: 2416, column: 21, scope: !5494)
!5502 = !DILocation(line: 2418, column: 35, scope: !5494)
!5503 = !DILocation(line: 2418, column: 15, scope: !5494)
!5504 = !DILocation(line: 2418, column: 13, scope: !5494)
!5505 = !DILocation(line: 2420, column: 21, scope: !5494)
!5506 = !DILocation(line: 2420, column: 32, scope: !5494)
!5507 = !DILocation(line: 2420, column: 38, scope: !5494)
!5508 = !DILocation(line: 2420, column: 45, scope: !5494)
!5509 = !DILocation(line: 2420, column: 43, scope: !5494)
!5510 = !DILocation(line: 2420, column: 3, scope: !5494)
!5511 = !DILocation(line: 2422, column: 13, scope: !5494)
!5512 = !DILocation(line: 2422, column: 41, scope: !5494)
!5513 = !DILocation(line: 2422, column: 50, scope: !5494)
!5514 = !DILocation(line: 2422, column: 39, scope: !5494)
!5515 = !DILocation(line: 2422, column: 58, scope: !5494)
!5516 = !DILocation(line: 2422, column: 67, scope: !5494)
!5517 = !DILocation(line: 2422, column: 56, scope: !5494)
!5518 = !DILocation(line: 2422, column: 11, scope: !5494)
!5519 = !DILocation(line: 2424, column: 15, scope: !5494)
!5520 = !DILocation(line: 2424, column: 13, scope: !5494)
!5521 = !DILocation(line: 2426, column: 33, scope: !5494)
!5522 = !DILocation(line: 2426, column: 44, scope: !5494)
!5523 = !DILocation(line: 2426, column: 55, scope: !5494)
!5524 = !DILocation(line: 2426, column: 64, scope: !5494)
!5525 = !DILocation(line: 2426, column: 71, scope: !5494)
!5526 = !DILocation(line: 2426, column: 80, scope: !5494)
!5527 = !DILocation(line: 2426, column: 3, scope: !5494)
!5528 = !DILocation(line: 2428, column: 23, scope: !5494)
!5529 = !DILocation(line: 2428, column: 3, scope: !5494)
!5530 = !DILocation(line: 2429, column: 3, scope: !5494)
!5531 = !DILocation(line: 2429, column: 13, scope: !5494)
!5532 = !DILocation(line: 2431, column: 28, scope: !5494)
!5533 = !DILocation(line: 2431, column: 39, scope: !5494)
!5534 = !DILocation(line: 2431, column: 48, scope: !5494)
!5535 = !DILocation(line: 2431, column: 55, scope: !5494)
!5536 = !DILocation(line: 2431, column: 64, scope: !5494)
!5537 = !DILocation(line: 2431, column: 71, scope: !5494)
!5538 = !DILocation(line: 2431, column: 3, scope: !5494)
!5539 = !DILocation(line: 2433, column: 33, scope: !5494)
!5540 = !DILocation(line: 2433, column: 3, scope: !5494)
!5541 = !DILocation(line: 2437, column: 6, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5471, file: !3, line: 2437, column: 6)
!5543 = !DILocation(line: 2437, column: 6, scope: !5471)
!5544 = !DILocalVariable(name: "fp_src", scope: !5545, file: !3, line: 2439, type: !2969)
!5545 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 2437, column: 18)
!5546 = !DILocation(line: 2439, column: 16, scope: !5545)
!5547 = !DILocalVariable(name: "fp_dst", scope: !5545, file: !3, line: 2440, type: !832)
!5548 = !DILocation(line: 2440, column: 10, scope: !5545)
!5549 = !DILocation(line: 2442, column: 25, scope: !5545)
!5550 = !DILocation(line: 2442, column: 34, scope: !5545)
!5551 = !DILocation(line: 2442, column: 41, scope: !5545)
!5552 = !DILocation(line: 2442, column: 50, scope: !5545)
!5553 = !DILocation(line: 2442, column: 10, scope: !5545)
!5554 = !DILocation(line: 2442, column: 8, scope: !5545)
!5555 = !DILocation(line: 2444, column: 12, scope: !5545)
!5556 = !DILocation(line: 2444, column: 10, scope: !5545)
!5557 = !DILocation(line: 2445, column: 12, scope: !5545)
!5558 = !DILocation(line: 2445, column: 18, scope: !5545)
!5559 = !DILocation(line: 2445, column: 10, scope: !5545)
!5560 = !DILocation(line: 2446, column: 7, scope: !5545)
!5561 = !DILocation(line: 2446, column: 16, scope: !5545)
!5562 = !DILocation(line: 2446, column: 24, scope: !5545)
!5563 = !DILocation(line: 2446, column: 33, scope: !5545)
!5564 = !DILocation(line: 2446, column: 22, scope: !5545)
!5565 = !DILocation(line: 2446, column: 5, scope: !5545)
!5566 = !DILocation(line: 2447, column: 3, scope: !5545)
!5567 = !DILocation(line: 2447, column: 10, scope: !5545)
!5568 = !DILocation(line: 2448, column: 41, scope: !5569)
!5569 = distinct !DILexicalBlock(scope: !5545, file: !3, line: 2447, column: 15)
!5570 = !DILocation(line: 2448, column: 40, scope: !5569)
!5571 = !DILocation(line: 2448, column: 28, scope: !5569)
!5572 = !DILocation(line: 2448, column: 38, scope: !5569)
!5573 = !DILocation(line: 2448, column: 16, scope: !5569)
!5574 = !DILocation(line: 2448, column: 26, scope: !5569)
!5575 = !DILocation(line: 2448, column: 4, scope: !5569)
!5576 = !DILocation(line: 2448, column: 14, scope: !5569)
!5577 = !DILocation(line: 2449, column: 4, scope: !5569)
!5578 = !DILocation(line: 2449, column: 14, scope: !5569)
!5579 = !DILocation(line: 2451, column: 11, scope: !5569)
!5580 = !DILocation(line: 2452, column: 11, scope: !5569)
!5581 = distinct !{!5581, !5566, !5582}
!5582 = !DILocation(line: 2453, column: 3, scope: !5545)
!5583 = !DILocation(line: 2454, column: 2, scope: !5545)
!5584 = !DILocalVariable(name: "fp_src", scope: !5585, file: !3, line: 2457, type: !2969)
!5585 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 2455, column: 7)
!5586 = !DILocation(line: 2457, column: 16, scope: !5585)
!5587 = !DILocalVariable(name: "ub_dst", scope: !5585, file: !3, line: 2458, type: !1765)
!5588 = !DILocation(line: 2458, column: 18, scope: !5585)
!5589 = !DILocation(line: 2460, column: 25, scope: !5585)
!5590 = !DILocation(line: 2460, column: 34, scope: !5585)
!5591 = !DILocation(line: 2460, column: 41, scope: !5585)
!5592 = !DILocation(line: 2460, column: 50, scope: !5585)
!5593 = !DILocation(line: 2460, column: 10, scope: !5585)
!5594 = !DILocation(line: 2460, column: 8, scope: !5585)
!5595 = !DILocation(line: 2462, column: 12, scope: !5585)
!5596 = !DILocation(line: 2462, column: 10, scope: !5585)
!5597 = !DILocation(line: 2463, column: 29, scope: !5585)
!5598 = !DILocation(line: 2463, column: 35, scope: !5585)
!5599 = !DILocation(line: 2463, column: 12, scope: !5585)
!5600 = !DILocation(line: 2463, column: 10, scope: !5585)
!5601 = !DILocation(line: 2464, column: 7, scope: !5585)
!5602 = !DILocation(line: 2464, column: 16, scope: !5585)
!5603 = !DILocation(line: 2464, column: 24, scope: !5585)
!5604 = !DILocation(line: 2464, column: 33, scope: !5585)
!5605 = !DILocation(line: 2464, column: 22, scope: !5585)
!5606 = !DILocation(line: 2464, column: 5, scope: !5585)
!5607 = !DILocation(line: 2465, column: 3, scope: !5585)
!5608 = !DILocation(line: 2465, column: 10, scope: !5585)
!5609 = !DILocation(line: 2466, column: 57, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 2465, column: 15)
!5611 = !DILocation(line: 2466, column: 56, scope: !5610)
!5612 = !DILocation(line: 2466, column: 64, scope: !5610)
!5613 = !DILocation(line: 2466, column: 40, scope: !5610)
!5614 = !DILocation(line: 2466, column: 28, scope: !5610)
!5615 = !DILocation(line: 2466, column: 38, scope: !5610)
!5616 = !DILocation(line: 2466, column: 16, scope: !5610)
!5617 = !DILocation(line: 2466, column: 26, scope: !5610)
!5618 = !DILocation(line: 2466, column: 4, scope: !5610)
!5619 = !DILocation(line: 2466, column: 14, scope: !5610)
!5620 = !DILocation(line: 2467, column: 4, scope: !5610)
!5621 = !DILocation(line: 2467, column: 14, scope: !5610)
!5622 = !DILocation(line: 2469, column: 11, scope: !5610)
!5623 = !DILocation(line: 2470, column: 11, scope: !5610)
!5624 = distinct !{!5624, !5607, !5625}
!5625 = !DILocation(line: 2471, column: 3, scope: !5585)
!5626 = !DILocation(line: 2474, column: 2, scope: !5471)
!5627 = !DILocation(line: 2474, column: 12, scope: !5471)
!5628 = !DILocation(line: 2476, column: 9, scope: !5471)
!5629 = !DILocation(line: 2476, column: 2, scope: !5471)
!5630 = !DILocation(line: 2477, column: 1, scope: !5471)
!5631 = distinct !DISubprogram(name: "BKE_sequencer_color_balance_apply", scope: !3, file: !3, line: 1917, type: !5632, scopeLine: 1918, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5632 = !DISubroutineType(types: !5633)
!5633 = !{null, !291, !1776, !193, !742, !1776}
!5634 = !DILocalVariable(name: "cb", arg: 1, scope: !5631, file: !3, line: 1917, type: !291)
!5635 = !DILocation(line: 1917, column: 59, scope: !5631)
!5636 = !DILocalVariable(name: "ibuf", arg: 2, scope: !5631, file: !3, line: 1917, type: !1776)
!5637 = !DILocation(line: 1917, column: 70, scope: !5631)
!5638 = !DILocalVariable(name: "mul", arg: 3, scope: !5631, file: !3, line: 1917, type: !193)
!5639 = !DILocation(line: 1917, column: 82, scope: !5631)
!5640 = !DILocalVariable(name: "make_float", arg: 4, scope: !5631, file: !3, line: 1917, type: !742)
!5641 = !DILocation(line: 1917, column: 92, scope: !5631)
!5642 = !DILocalVariable(name: "mask_input", arg: 5, scope: !5631, file: !3, line: 1917, type: !1776)
!5643 = !DILocation(line: 1917, column: 111, scope: !5631)
!5644 = !DILocalVariable(name: "init_data", scope: !5631, file: !3, line: 1919, type: !1771)
!5645 = !DILocation(line: 1919, column: 23, scope: !5631)
!5646 = !DILocation(line: 1921, column: 7, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 1921, column: 6)
!5648 = !DILocation(line: 1921, column: 13, scope: !5647)
!5649 = !DILocation(line: 1921, column: 24, scope: !5647)
!5650 = !DILocation(line: 1921, column: 27, scope: !5647)
!5651 = !DILocation(line: 1921, column: 6, scope: !5631)
!5652 = !DILocation(line: 1922, column: 25, scope: !5647)
!5653 = !DILocation(line: 1922, column: 3, scope: !5647)
!5654 = !DILocation(line: 1924, column: 17, scope: !5631)
!5655 = !DILocation(line: 1924, column: 12, scope: !5631)
!5656 = !DILocation(line: 1924, column: 15, scope: !5631)
!5657 = !DILocation(line: 1925, column: 19, scope: !5631)
!5658 = !DILocation(line: 1925, column: 12, scope: !5631)
!5659 = !DILocation(line: 1925, column: 17, scope: !5631)
!5660 = !DILocation(line: 1926, column: 18, scope: !5631)
!5661 = !DILocation(line: 1926, column: 12, scope: !5631)
!5662 = !DILocation(line: 1926, column: 16, scope: !5631)
!5663 = !DILocation(line: 1927, column: 25, scope: !5631)
!5664 = !DILocation(line: 1927, column: 12, scope: !5631)
!5665 = !DILocation(line: 1927, column: 23, scope: !5631)
!5666 = !DILocation(line: 1928, column: 19, scope: !5631)
!5667 = !DILocation(line: 1928, column: 12, scope: !5631)
!5668 = !DILocation(line: 1928, column: 17, scope: !5631)
!5669 = !DILocation(line: 1930, column: 31, scope: !5631)
!5670 = !DILocation(line: 1930, column: 37, scope: !5631)
!5671 = !DILocation(line: 1930, column: 68, scope: !5631)
!5672 = !DILocation(line: 1930, column: 2, scope: !5631)
!5673 = !DILocation(line: 1937, column: 6, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 1937, column: 6)
!5675 = !DILocation(line: 1937, column: 12, scope: !5674)
!5676 = !DILocation(line: 1937, column: 23, scope: !5674)
!5677 = !DILocation(line: 1937, column: 26, scope: !5674)
!5678 = !DILocation(line: 1937, column: 32, scope: !5674)
!5679 = !DILocation(line: 1937, column: 6, scope: !5631)
!5680 = !DILocation(line: 1938, column: 21, scope: !5674)
!5681 = !DILocation(line: 1938, column: 3, scope: !5674)
!5682 = !DILocation(line: 1939, column: 1, scope: !5631)
!5683 = distinct !DISubprogram(name: "color_balance_init_handle", scope: !3, file: !3, line: 1832, type: !5684, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5684 = !DISubroutineType(types: !5685)
!5685 = !{null, !129, !45, !45, !129}
!5686 = !DILocalVariable(name: "handle_v", arg: 1, scope: !5683, file: !3, line: 1832, type: !129)
!5687 = !DILocation(line: 1832, column: 45, scope: !5683)
!5688 = !DILocalVariable(name: "start_line", arg: 2, scope: !5683, file: !3, line: 1832, type: !45)
!5689 = !DILocation(line: 1832, column: 59, scope: !5683)
!5690 = !DILocalVariable(name: "tot_line", arg: 3, scope: !5683, file: !3, line: 1832, type: !45)
!5691 = !DILocation(line: 1832, column: 75, scope: !5683)
!5692 = !DILocalVariable(name: "init_data_v", arg: 4, scope: !5683, file: !3, line: 1832, type: !129)
!5693 = !DILocation(line: 1832, column: 91, scope: !5683)
!5694 = !DILocalVariable(name: "handle", scope: !5683, file: !3, line: 1834, type: !1756)
!5695 = !DILocation(line: 1834, column: 22, scope: !5683)
!5696 = !DILocation(line: 1834, column: 54, scope: !5683)
!5697 = !DILocation(line: 1834, column: 31, scope: !5683)
!5698 = !DILocalVariable(name: "init_data", scope: !5683, file: !3, line: 1835, type: !1770)
!5699 = !DILocation(line: 1835, column: 24, scope: !5683)
!5700 = !DILocation(line: 1835, column: 61, scope: !5683)
!5701 = !DILocation(line: 1835, column: 36, scope: !5683)
!5702 = !DILocalVariable(name: "ibuf", scope: !5683, file: !3, line: 1836, type: !1776)
!5703 = !DILocation(line: 1836, column: 9, scope: !5683)
!5704 = !DILocation(line: 1836, column: 16, scope: !5683)
!5705 = !DILocation(line: 1836, column: 27, scope: !5683)
!5706 = !DILocalVariable(name: "mask", scope: !5683, file: !3, line: 1837, type: !1776)
!5707 = !DILocation(line: 1837, column: 9, scope: !5683)
!5708 = !DILocation(line: 1837, column: 16, scope: !5683)
!5709 = !DILocation(line: 1837, column: 27, scope: !5683)
!5710 = !DILocalVariable(name: "offset", scope: !5683, file: !3, line: 1839, type: !45)
!5711 = !DILocation(line: 1839, column: 6, scope: !5683)
!5712 = !DILocation(line: 1839, column: 19, scope: !5683)
!5713 = !DILocation(line: 1839, column: 17, scope: !5683)
!5714 = !DILocation(line: 1839, column: 32, scope: !5683)
!5715 = !DILocation(line: 1839, column: 38, scope: !5683)
!5716 = !DILocation(line: 1839, column: 30, scope: !5683)
!5717 = !DILocation(line: 1841, column: 9, scope: !5683)
!5718 = !DILocation(line: 1841, column: 2, scope: !5683)
!5719 = !DILocation(line: 1843, column: 15, scope: !5683)
!5720 = !DILocation(line: 1843, column: 26, scope: !5683)
!5721 = !DILocation(line: 1843, column: 2, scope: !5683)
!5722 = !DILocation(line: 1843, column: 10, scope: !5683)
!5723 = !DILocation(line: 1843, column: 13, scope: !5683)
!5724 = !DILocation(line: 1844, column: 16, scope: !5683)
!5725 = !DILocation(line: 1844, column: 27, scope: !5683)
!5726 = !DILocation(line: 1844, column: 2, scope: !5683)
!5727 = !DILocation(line: 1844, column: 10, scope: !5683)
!5728 = !DILocation(line: 1844, column: 14, scope: !5683)
!5729 = !DILocation(line: 1845, column: 18, scope: !5683)
!5730 = !DILocation(line: 1845, column: 24, scope: !5683)
!5731 = !DILocation(line: 1845, column: 2, scope: !5683)
!5732 = !DILocation(line: 1845, column: 10, scope: !5683)
!5733 = !DILocation(line: 1845, column: 16, scope: !5683)
!5734 = !DILocation(line: 1846, column: 19, scope: !5683)
!5735 = !DILocation(line: 1846, column: 2, scope: !5683)
!5736 = !DILocation(line: 1846, column: 10, scope: !5683)
!5737 = !DILocation(line: 1846, column: 17, scope: !5683)
!5738 = !DILocation(line: 1847, column: 23, scope: !5683)
!5739 = !DILocation(line: 1847, column: 34, scope: !5683)
!5740 = !DILocation(line: 1847, column: 2, scope: !5683)
!5741 = !DILocation(line: 1847, column: 10, scope: !5683)
!5742 = !DILocation(line: 1847, column: 21, scope: !5683)
!5743 = !DILocation(line: 1849, column: 6, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1849, column: 6)
!5745 = !DILocation(line: 1849, column: 12, scope: !5744)
!5746 = !DILocation(line: 1849, column: 6, scope: !5683)
!5747 = !DILocation(line: 1850, column: 36, scope: !5744)
!5748 = !DILocation(line: 1850, column: 42, scope: !5744)
!5749 = !DILocation(line: 1850, column: 18, scope: !5744)
!5750 = !DILocation(line: 1850, column: 49, scope: !5744)
!5751 = !DILocation(line: 1850, column: 47, scope: !5744)
!5752 = !DILocation(line: 1850, column: 3, scope: !5744)
!5753 = !DILocation(line: 1850, column: 11, scope: !5744)
!5754 = !DILocation(line: 1850, column: 16, scope: !5744)
!5755 = !DILocation(line: 1852, column: 6, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1852, column: 6)
!5757 = !DILocation(line: 1852, column: 12, scope: !5756)
!5758 = !DILocation(line: 1852, column: 6, scope: !5683)
!5759 = !DILocation(line: 1853, column: 24, scope: !5756)
!5760 = !DILocation(line: 1853, column: 30, scope: !5756)
!5761 = !DILocation(line: 1853, column: 43, scope: !5756)
!5762 = !DILocation(line: 1853, column: 41, scope: !5756)
!5763 = !DILocation(line: 1853, column: 3, scope: !5756)
!5764 = !DILocation(line: 1853, column: 11, scope: !5756)
!5765 = !DILocation(line: 1853, column: 22, scope: !5756)
!5766 = !DILocation(line: 1855, column: 6, scope: !5767)
!5767 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1855, column: 6)
!5768 = !DILocation(line: 1855, column: 6, scope: !5683)
!5769 = !DILocation(line: 1856, column: 7, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1856, column: 7)
!5771 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1855, column: 12)
!5772 = !DILocation(line: 1856, column: 13, scope: !5770)
!5773 = !DILocation(line: 1856, column: 7, scope: !5771)
!5774 = !DILocation(line: 1857, column: 42, scope: !5770)
!5775 = !DILocation(line: 1857, column: 48, scope: !5770)
!5776 = !DILocation(line: 1857, column: 24, scope: !5770)
!5777 = !DILocation(line: 1857, column: 55, scope: !5770)
!5778 = !DILocation(line: 1857, column: 53, scope: !5770)
!5779 = !DILocation(line: 1857, column: 4, scope: !5770)
!5780 = !DILocation(line: 1857, column: 12, scope: !5770)
!5781 = !DILocation(line: 1857, column: 22, scope: !5770)
!5782 = !DILocation(line: 1859, column: 7, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1859, column: 7)
!5784 = !DILocation(line: 1859, column: 13, scope: !5783)
!5785 = !DILocation(line: 1859, column: 7, scope: !5771)
!5786 = !DILocation(line: 1860, column: 30, scope: !5783)
!5787 = !DILocation(line: 1860, column: 36, scope: !5783)
!5788 = !DILocation(line: 1860, column: 49, scope: !5783)
!5789 = !DILocation(line: 1860, column: 47, scope: !5783)
!5790 = !DILocation(line: 1860, column: 4, scope: !5783)
!5791 = !DILocation(line: 1860, column: 12, scope: !5783)
!5792 = !DILocation(line: 1860, column: 28, scope: !5783)
!5793 = !DILocation(line: 1861, column: 2, scope: !5771)
!5794 = !DILocation(line: 1863, column: 3, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1862, column: 7)
!5796 = !DILocation(line: 1863, column: 11, scope: !5795)
!5797 = !DILocation(line: 1863, column: 21, scope: !5795)
!5798 = !DILocation(line: 1864, column: 3, scope: !5795)
!5799 = !DILocation(line: 1864, column: 11, scope: !5795)
!5800 = !DILocation(line: 1864, column: 27, scope: !5795)
!5801 = !DILocation(line: 1866, column: 1, scope: !5683)
!5802 = distinct !DISubprogram(name: "color_balance_do_thread", scope: !3, file: !3, line: 1868, type: !5803, scopeLine: 1869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5803 = !DISubroutineType(types: !5804)
!5804 = !{!129, !129}
!5805 = !DILocalVariable(name: "thread_data_v", arg: 1, scope: !5802, file: !3, line: 1868, type: !129)
!5806 = !DILocation(line: 1868, column: 44, scope: !5802)
!5807 = !DILocalVariable(name: "thread_data", scope: !5802, file: !3, line: 1870, type: !1756)
!5808 = !DILocation(line: 1870, column: 22, scope: !5802)
!5809 = !DILocation(line: 1870, column: 59, scope: !5802)
!5810 = !DILocation(line: 1870, column: 36, scope: !5802)
!5811 = !DILocalVariable(name: "cb", scope: !5802, file: !3, line: 1871, type: !291)
!5812 = !DILocation(line: 1871, column: 21, scope: !5802)
!5813 = !DILocation(line: 1871, column: 26, scope: !5802)
!5814 = !DILocation(line: 1871, column: 39, scope: !5802)
!5815 = !DILocalVariable(name: "width", scope: !5802, file: !3, line: 1872, type: !45)
!5816 = !DILocation(line: 1872, column: 6, scope: !5802)
!5817 = !DILocation(line: 1872, column: 14, scope: !5802)
!5818 = !DILocation(line: 1872, column: 27, scope: !5802)
!5819 = !DILocalVariable(name: "height", scope: !5802, file: !3, line: 1872, type: !45)
!5820 = !DILocation(line: 1872, column: 34, scope: !5802)
!5821 = !DILocation(line: 1872, column: 43, scope: !5802)
!5822 = !DILocation(line: 1872, column: 56, scope: !5802)
!5823 = !DILocalVariable(name: "rect", scope: !5802, file: !3, line: 1873, type: !1765)
!5824 = !DILocation(line: 1873, column: 17, scope: !5802)
!5825 = !DILocation(line: 1873, column: 24, scope: !5802)
!5826 = !DILocation(line: 1873, column: 37, scope: !5802)
!5827 = !DILocalVariable(name: "mask_rect", scope: !5802, file: !3, line: 1874, type: !1765)
!5828 = !DILocation(line: 1874, column: 17, scope: !5802)
!5829 = !DILocation(line: 1874, column: 29, scope: !5802)
!5830 = !DILocation(line: 1874, column: 42, scope: !5802)
!5831 = !DILocalVariable(name: "rect_float", scope: !5802, file: !3, line: 1875, type: !832)
!5832 = !DILocation(line: 1875, column: 9, scope: !5802)
!5833 = !DILocation(line: 1875, column: 22, scope: !5802)
!5834 = !DILocation(line: 1875, column: 35, scope: !5802)
!5835 = !DILocalVariable(name: "mask_rect_float", scope: !5802, file: !3, line: 1876, type: !832)
!5836 = !DILocation(line: 1876, column: 9, scope: !5802)
!5837 = !DILocation(line: 1876, column: 27, scope: !5802)
!5838 = !DILocation(line: 1876, column: 40, scope: !5802)
!5839 = !DILocalVariable(name: "mul", scope: !5802, file: !3, line: 1877, type: !193)
!5840 = !DILocation(line: 1877, column: 8, scope: !5802)
!5841 = !DILocation(line: 1877, column: 14, scope: !5802)
!5842 = !DILocation(line: 1877, column: 27, scope: !5802)
!5843 = !DILocation(line: 1879, column: 6, scope: !5844)
!5844 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 1879, column: 6)
!5845 = !DILocation(line: 1879, column: 6, scope: !5802)
!5846 = !DILocation(line: 1880, column: 29, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 1879, column: 18)
!5848 = !DILocation(line: 1880, column: 33, scope: !5847)
!5849 = !DILocation(line: 1880, column: 45, scope: !5847)
!5850 = !DILocation(line: 1880, column: 62, scope: !5847)
!5851 = !DILocation(line: 1880, column: 69, scope: !5847)
!5852 = !DILocation(line: 1880, column: 77, scope: !5847)
!5853 = !DILocation(line: 1880, column: 3, scope: !5847)
!5854 = !DILocation(line: 1881, column: 2, scope: !5847)
!5855 = !DILocation(line: 1882, column: 11, scope: !5856)
!5856 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 1882, column: 11)
!5857 = !DILocation(line: 1882, column: 24, scope: !5856)
!5858 = !DILocation(line: 1882, column: 11, scope: !5844)
!5859 = !DILocation(line: 1883, column: 28, scope: !5860)
!5860 = distinct !DILexicalBlock(scope: !5856, file: !3, line: 1882, column: 36)
!5861 = !DILocation(line: 1883, column: 32, scope: !5860)
!5862 = !DILocation(line: 1883, column: 38, scope: !5860)
!5863 = !DILocation(line: 1883, column: 50, scope: !5860)
!5864 = !DILocation(line: 1883, column: 61, scope: !5860)
!5865 = !DILocation(line: 1883, column: 68, scope: !5860)
!5866 = !DILocation(line: 1883, column: 76, scope: !5860)
!5867 = !DILocation(line: 1883, column: 3, scope: !5860)
!5868 = !DILocation(line: 1884, column: 2, scope: !5860)
!5869 = !DILocation(line: 1886, column: 27, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5856, file: !3, line: 1885, column: 7)
!5871 = !DILocation(line: 1886, column: 31, scope: !5870)
!5872 = !DILocation(line: 1886, column: 37, scope: !5870)
!5873 = !DILocation(line: 1886, column: 48, scope: !5870)
!5874 = !DILocation(line: 1886, column: 55, scope: !5870)
!5875 = !DILocation(line: 1886, column: 63, scope: !5870)
!5876 = !DILocation(line: 1886, column: 3, scope: !5870)
!5877 = !DILocation(line: 1889, column: 2, scope: !5802)
!5878 = distinct !DISubprogram(name: "BKE_sequencer_input_have_to_preprocess", scope: !3, file: !3, line: 1959, type: !5879, scopeLine: 1960, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5879 = !DISubroutineType(types: !5880)
!5880 = !{!742, !1892, !204, !193}
!5881 = !DILocalVariable(name: "context", arg: 1, scope: !5878, file: !3, line: 1959, type: !1892)
!5882 = !DILocation(line: 1959, column: 66, scope: !5878)
!5883 = !DILocalVariable(name: "seq", arg: 2, scope: !5878, file: !3, line: 1959, type: !204)
!5884 = !DILocation(line: 1959, column: 85, scope: !5878)
!5885 = !DILocalVariable(name: "UNUSED_cfra", arg: 3, scope: !5878, file: !3, line: 1959, type: !193)
!5886 = !DILocation(line: 1959, column: 96, scope: !5878)
!5887 = !DILocalVariable(name: "mul", scope: !5878, file: !3, line: 1961, type: !193)
!5888 = !DILocation(line: 1961, column: 8, scope: !5878)
!5889 = !DILocation(line: 1963, column: 6, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1963, column: 6)
!5891 = !DILocation(line: 1963, column: 15, scope: !5890)
!5892 = !DILocation(line: 1963, column: 6, scope: !5878)
!5893 = !DILocation(line: 1964, column: 3, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 1963, column: 32)
!5895 = !DILocation(line: 1967, column: 6, scope: !5896)
!5896 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1967, column: 6)
!5897 = !DILocation(line: 1967, column: 11, scope: !5896)
!5898 = !DILocation(line: 1967, column: 16, scope: !5896)
!5899 = !DILocation(line: 1967, column: 6, scope: !5878)
!5900 = !DILocation(line: 1968, column: 3, scope: !5901)
!5901 = distinct !DILexicalBlock(scope: !5896, file: !3, line: 1967, column: 109)
!5902 = !DILocation(line: 1971, column: 8, scope: !5878)
!5903 = !DILocation(line: 1971, column: 13, scope: !5878)
!5904 = !DILocation(line: 1971, column: 6, scope: !5878)
!5905 = !DILocation(line: 1973, column: 6, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1973, column: 6)
!5907 = !DILocation(line: 1973, column: 11, scope: !5906)
!5908 = !DILocation(line: 1973, column: 22, scope: !5906)
!5909 = !DILocation(line: 1973, column: 6, scope: !5878)
!5910 = !DILocation(line: 1974, column: 10, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1973, column: 44)
!5912 = !DILocation(line: 1974, column: 15, scope: !5911)
!5913 = !DILocation(line: 1974, column: 29, scope: !5911)
!5914 = !DILocation(line: 1974, column: 7, scope: !5911)
!5915 = !DILocation(line: 1975, column: 2, scope: !5911)
!5916 = !DILocation(line: 1977, column: 6, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1977, column: 6)
!5918 = !DILocation(line: 1977, column: 10, scope: !5917)
!5919 = !DILocation(line: 1977, column: 6, scope: !5878)
!5920 = !DILocation(line: 1978, column: 3, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5917, file: !3, line: 1977, column: 19)
!5922 = !DILocation(line: 1981, column: 6, scope: !5923)
!5923 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1981, column: 6)
!5924 = !DILocation(line: 1981, column: 11, scope: !5923)
!5925 = !DILocation(line: 1981, column: 15, scope: !5923)
!5926 = !DILocation(line: 1981, column: 6, scope: !5878)
!5927 = !DILocation(line: 1982, column: 3, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 1981, column: 24)
!5929 = !DILocation(line: 1985, column: 6, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1985, column: 6)
!5931 = !DILocation(line: 1985, column: 11, scope: !5930)
!5932 = !DILocation(line: 1985, column: 21, scope: !5930)
!5933 = !DILocation(line: 1985, column: 6, scope: !5878)
!5934 = !DILocation(line: 1986, column: 3, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 1985, column: 28)
!5936 = !DILocation(line: 1989, column: 2, scope: !5878)
!5937 = !DILocation(line: 1990, column: 1, scope: !5878)
!5938 = distinct !DISubprogram(name: "BKE_sequencer_give_ibuf", scope: !3, file: !3, line: 3096, type: !5939, scopeLine: 3097, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5939 = !DISubroutineType(types: !5940)
!5940 = !{!1782, !1892, !193, !45}
!5941 = !DILocalVariable(name: "context", arg: 1, scope: !5938, file: !3, line: 3096, type: !1892)
!5942 = !DILocation(line: 3096, column: 53, scope: !5938)
!5943 = !DILocalVariable(name: "cfra", arg: 2, scope: !5938, file: !3, line: 3096, type: !193)
!5944 = !DILocation(line: 3096, column: 68, scope: !5938)
!5945 = !DILocalVariable(name: "chanshown", arg: 3, scope: !5938, file: !3, line: 3096, type: !45)
!5946 = !DILocation(line: 3096, column: 78, scope: !5938)
!5947 = !DILocalVariable(name: "ed", scope: !5938, file: !3, line: 3098, type: !2176)
!5948 = !DILocation(line: 3098, column: 11, scope: !5938)
!5949 = !DILocation(line: 3098, column: 42, scope: !5938)
!5950 = !DILocation(line: 3098, column: 51, scope: !5938)
!5951 = !DILocation(line: 3098, column: 16, scope: !5938)
!5952 = !DILocalVariable(name: "seqbasep", scope: !5938, file: !3, line: 3099, type: !202)
!5953 = !DILocation(line: 3099, column: 12, scope: !5938)
!5954 = !DILocation(line: 3101, column: 6, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 3101, column: 6)
!5956 = !DILocation(line: 3101, column: 9, scope: !5955)
!5957 = !DILocation(line: 3101, column: 6, scope: !5938)
!5958 = !DILocation(line: 3101, column: 18, scope: !5955)
!5959 = !DILocation(line: 3103, column: 7, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 3103, column: 6)
!5961 = !DILocation(line: 3103, column: 17, scope: !5960)
!5962 = !DILocation(line: 3103, column: 22, scope: !5960)
!5963 = !DILocation(line: 3103, column: 49, scope: !5960)
!5964 = !DILocation(line: 3103, column: 53, scope: !5960)
!5965 = !DILocation(line: 3103, column: 26, scope: !5960)
!5966 = !DILocation(line: 3103, column: 6, scope: !5938)
!5967 = !DILocalVariable(name: "count", scope: !5968, file: !3, line: 3104, type: !45)
!5968 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 3103, column: 65)
!5969 = !DILocation(line: 3104, column: 7, scope: !5968)
!5970 = !DILocation(line: 3104, column: 30, scope: !5968)
!5971 = !DILocation(line: 3104, column: 34, scope: !5968)
!5972 = !DILocation(line: 3104, column: 15, scope: !5968)
!5973 = !DILocation(line: 3105, column: 18, scope: !5968)
!5974 = !DILocation(line: 3105, column: 26, scope: !5968)
!5975 = !DILocation(line: 3105, column: 24, scope: !5968)
!5976 = !DILocation(line: 3105, column: 11, scope: !5968)
!5977 = !DILocation(line: 3105, column: 9, scope: !5968)
!5978 = !DILocation(line: 3106, column: 42, scope: !5968)
!5979 = !DILocation(line: 3106, column: 46, scope: !5968)
!5980 = !DILocation(line: 3106, column: 57, scope: !5968)
!5981 = !DILocation(line: 3106, column: 28, scope: !5968)
!5982 = !DILocation(line: 3106, column: 15, scope: !5968)
!5983 = !DILocation(line: 3106, column: 66, scope: !5968)
!5984 = !DILocation(line: 3106, column: 12, scope: !5968)
!5985 = !DILocation(line: 3107, column: 2, scope: !5968)
!5986 = !DILocation(line: 3109, column: 14, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 3108, column: 7)
!5988 = !DILocation(line: 3109, column: 18, scope: !5987)
!5989 = !DILocation(line: 3109, column: 12, scope: !5987)
!5990 = !DILocation(line: 3112, column: 32, scope: !5938)
!5991 = !DILocation(line: 3112, column: 41, scope: !5938)
!5992 = !DILocation(line: 3112, column: 51, scope: !5938)
!5993 = !DILocation(line: 3112, column: 57, scope: !5938)
!5994 = !DILocation(line: 3112, column: 9, scope: !5938)
!5995 = !DILocation(line: 3112, column: 2, scope: !5938)
!5996 = !DILocation(line: 3113, column: 1, scope: !5938)
!5997 = distinct !DISubprogram(name: "BLI_listbase_is_empty", scope: !2361, file: !2361, line: 88, type: !5998, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!5998 = !DISubroutineType(types: !5999)
!5999 = !{!742, !6000}
!6000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6001, size: 64)
!6001 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !185)
!6002 = !DILocalVariable(name: "lb", arg: 1, scope: !5997, file: !2361, line: 88, type: !6000)
!6003 = !DILocation(line: 88, column: 62, scope: !5997)
!6004 = !DILocation(line: 88, column: 76, scope: !5997)
!6005 = !DILocation(line: 88, column: 80, scope: !5997)
!6006 = !DILocation(line: 88, column: 86, scope: !5997)
!6007 = !DILocation(line: 88, column: 75, scope: !5997)
!6008 = !DILocation(line: 88, column: 68, scope: !5997)
!6009 = distinct !DISubprogram(name: "max_ii", scope: !3482, file: !3482, line: 215, type: !6010, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6010 = !DISubroutineType(types: !6011)
!6011 = !{!45, !45, !45}
!6012 = !DILocalVariable(name: "a", arg: 1, scope: !6009, file: !3482, line: 215, type: !45)
!6013 = !DILocation(line: 215, column: 24, scope: !6009)
!6014 = !DILocalVariable(name: "b", arg: 2, scope: !6009, file: !3482, line: 215, type: !45)
!6015 = !DILocation(line: 215, column: 31, scope: !6009)
!6016 = !DILocation(line: 217, column: 10, scope: !6009)
!6017 = !DILocation(line: 217, column: 14, scope: !6009)
!6018 = !DILocation(line: 217, column: 12, scope: !6009)
!6019 = !DILocation(line: 217, column: 9, scope: !6009)
!6020 = !DILocation(line: 217, column: 19, scope: !6009)
!6021 = !DILocation(line: 217, column: 23, scope: !6009)
!6022 = !DILocation(line: 217, column: 2, scope: !6009)
!6023 = distinct !DISubprogram(name: "seq_render_strip_stack", scope: !3, file: !3, line: 2952, type: !6024, scopeLine: 2953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6024 = !DISubroutineType(types: !6025)
!6025 = !{!1776, !1892, !202, !193, !45}
!6026 = !DILocalVariable(name: "context", arg: 1, scope: !6023, file: !3, line: 2952, type: !1892)
!6027 = !DILocation(line: 2952, column: 59, scope: !6023)
!6028 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !6023, file: !3, line: 2952, type: !202)
!6029 = !DILocation(line: 2952, column: 78, scope: !6023)
!6030 = !DILocalVariable(name: "cfra", arg: 3, scope: !6023, file: !3, line: 2952, type: !193)
!6031 = !DILocation(line: 2952, column: 94, scope: !6023)
!6032 = !DILocalVariable(name: "chanshown", arg: 4, scope: !6023, file: !3, line: 2952, type: !45)
!6033 = !DILocation(line: 2952, column: 104, scope: !6023)
!6034 = !DILocalVariable(name: "seq_arr", scope: !6023, file: !3, line: 2954, type: !4473)
!6035 = !DILocation(line: 2954, column: 12, scope: !6023)
!6036 = !DILocalVariable(name: "count", scope: !6023, file: !3, line: 2955, type: !45)
!6037 = !DILocation(line: 2955, column: 6, scope: !6023)
!6038 = !DILocalVariable(name: "i", scope: !6023, file: !3, line: 2956, type: !45)
!6039 = !DILocation(line: 2956, column: 6, scope: !6023)
!6040 = !DILocalVariable(name: "out", scope: !6023, file: !3, line: 2957, type: !1776)
!6041 = !DILocation(line: 2957, column: 9, scope: !6023)
!6042 = !DILocation(line: 2959, column: 30, scope: !6023)
!6043 = !DILocation(line: 2959, column: 40, scope: !6023)
!6044 = !DILocation(line: 2959, column: 46, scope: !6023)
!6045 = !DILocation(line: 2959, column: 57, scope: !6023)
!6046 = !DILocation(line: 2959, column: 10, scope: !6023)
!6047 = !DILocation(line: 2959, column: 8, scope: !6023)
!6048 = !DILocation(line: 2961, column: 6, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2961, column: 6)
!6050 = !DILocation(line: 2961, column: 12, scope: !6049)
!6051 = !DILocation(line: 2961, column: 6, scope: !6023)
!6052 = !DILocation(line: 2962, column: 3, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 2961, column: 18)
!6054 = !DILocation(line: 2973, column: 32, scope: !6023)
!6055 = !DILocation(line: 2973, column: 49, scope: !6023)
!6056 = !DILocation(line: 2973, column: 55, scope: !6023)
!6057 = !DILocation(line: 2973, column: 41, scope: !6023)
!6058 = !DILocation(line: 2973, column: 62, scope: !6023)
!6059 = !DILocation(line: 2973, column: 8, scope: !6023)
!6060 = !DILocation(line: 2973, column: 6, scope: !6023)
!6061 = !DILocation(line: 2975, column: 6, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2975, column: 6)
!6063 = !DILocation(line: 2975, column: 6, scope: !6023)
!6064 = !DILocation(line: 2976, column: 10, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 2975, column: 11)
!6066 = !DILocation(line: 2976, column: 3, scope: !6065)
!6067 = !DILocation(line: 2979, column: 6, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2979, column: 6)
!6069 = !DILocation(line: 2979, column: 12, scope: !6068)
!6070 = !DILocation(line: 2979, column: 6, scope: !6023)
!6071 = !DILocalVariable(name: "seq", scope: !6072, file: !3, line: 2980, type: !204)
!6072 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 2979, column: 18)
!6073 = !DILocation(line: 2980, column: 13, scope: !6072)
!6074 = !DILocation(line: 2980, column: 19, scope: !6072)
!6075 = !DILocation(line: 2985, column: 7, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 2985, column: 7)
!6077 = !DILocation(line: 2985, column: 7, scope: !6072)
!6078 = !DILocalVariable(name: "early_out", scope: !6079, file: !3, line: 2986, type: !45)
!6079 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 2985, column: 85)
!6080 = !DILocation(line: 2986, column: 8, scope: !6079)
!6081 = !DILocation(line: 2987, column: 8, scope: !6082)
!6082 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2987, column: 8)
!6083 = !DILocation(line: 2987, column: 13, scope: !6082)
!6084 = !DILocation(line: 2987, column: 24, scope: !6082)
!6085 = !DILocation(line: 2987, column: 8, scope: !6079)
!6086 = !DILocation(line: 2988, column: 15, scope: !6087)
!6087 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 2987, column: 46)
!6088 = !DILocation(line: 2989, column: 4, scope: !6087)
!6089 = !DILocation(line: 2991, column: 50, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 2990, column: 9)
!6091 = !DILocation(line: 2991, column: 17, scope: !6090)
!6092 = !DILocation(line: 2991, column: 15, scope: !6090)
!6093 = !DILocation(line: 2994, column: 8, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2994, column: 8)
!6095 = !DILocation(line: 2994, column: 8, scope: !6079)
!6096 = !DILocation(line: 2995, column: 28, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2994, column: 60)
!6098 = !DILocation(line: 2995, column: 37, scope: !6097)
!6099 = !DILocation(line: 2995, column: 42, scope: !6097)
!6100 = !DILocation(line: 2995, column: 11, scope: !6097)
!6101 = !DILocation(line: 2995, column: 9, scope: !6097)
!6102 = !DILocation(line: 2996, column: 4, scope: !6097)
!6103 = !DILocation(line: 2997, column: 13, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2997, column: 13)
!6105 = !DILocation(line: 2997, column: 23, scope: !6104)
!6106 = !DILocation(line: 2997, column: 13, scope: !6094)
!6107 = !DILocation(line: 2998, column: 26, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6104, file: !3, line: 2997, column: 45)
!6109 = !DILocation(line: 2998, column: 35, scope: !6108)
!6110 = !DILocation(line: 2998, column: 42, scope: !6108)
!6111 = !DILocation(line: 2998, column: 51, scope: !6108)
!6112 = !DILocation(line: 2998, column: 11, scope: !6108)
!6113 = !DILocation(line: 2998, column: 9, scope: !6108)
!6114 = !DILocation(line: 2999, column: 4, scope: !6108)
!6115 = !DILocation(line: 3001, column: 28, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6104, file: !3, line: 3000, column: 9)
!6117 = !DILocation(line: 3001, column: 37, scope: !6116)
!6118 = !DILocation(line: 3001, column: 42, scope: !6116)
!6119 = !DILocation(line: 3001, column: 11, scope: !6116)
!6120 = !DILocation(line: 3001, column: 9, scope: !6116)
!6121 = !DILocation(line: 3003, column: 9, scope: !6122)
!6122 = distinct !DILexicalBlock(scope: !6116, file: !3, line: 3003, column: 9)
!6123 = !DILocation(line: 3003, column: 19, scope: !6122)
!6124 = !DILocation(line: 3003, column: 9, scope: !6116)
!6125 = !DILocalVariable(name: "ibuf1", scope: !6126, file: !3, line: 3004, type: !1776)
!6126 = distinct !DILexicalBlock(scope: !6122, file: !3, line: 3003, column: 39)
!6127 = !DILocation(line: 3004, column: 13, scope: !6126)
!6128 = !DILocation(line: 3004, column: 36, scope: !6126)
!6129 = !DILocation(line: 3004, column: 45, scope: !6126)
!6130 = !DILocation(line: 3004, column: 52, scope: !6126)
!6131 = !DILocation(line: 3004, column: 61, scope: !6126)
!6132 = !DILocation(line: 3005, column: 36, scope: !6126)
!6133 = !DILocation(line: 3005, column: 41, scope: !6126)
!6134 = !DILocation(line: 3004, column: 21, scope: !6126)
!6135 = !DILocalVariable(name: "ibuf2", scope: !6126, file: !3, line: 3006, type: !1776)
!6136 = !DILocation(line: 3006, column: 13, scope: !6126)
!6137 = !DILocation(line: 3006, column: 21, scope: !6126)
!6138 = !DILocation(line: 3008, column: 48, scope: !6126)
!6139 = !DILocation(line: 3008, column: 57, scope: !6126)
!6140 = !DILocation(line: 3008, column: 62, scope: !6126)
!6141 = !DILocation(line: 3008, column: 68, scope: !6126)
!6142 = !DILocation(line: 3008, column: 75, scope: !6126)
!6143 = !DILocation(line: 3008, column: 12, scope: !6126)
!6144 = !DILocation(line: 3008, column: 10, scope: !6126)
!6145 = !DILocation(line: 3010, column: 20, scope: !6126)
!6146 = !DILocation(line: 3010, column: 6, scope: !6126)
!6147 = !DILocation(line: 3011, column: 20, scope: !6126)
!6148 = !DILocation(line: 3011, column: 6, scope: !6126)
!6149 = !DILocation(line: 3012, column: 5, scope: !6126)
!6150 = !DILocation(line: 3014, column: 3, scope: !6079)
!6151 = !DILocation(line: 3016, column: 27, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 3015, column: 8)
!6153 = !DILocation(line: 3016, column: 36, scope: !6152)
!6154 = !DILocation(line: 3016, column: 41, scope: !6152)
!6155 = !DILocation(line: 3016, column: 10, scope: !6152)
!6156 = !DILocation(line: 3016, column: 8, scope: !6152)
!6157 = !DILocation(line: 3019, column: 27, scope: !6072)
!6158 = !DILocation(line: 3019, column: 36, scope: !6072)
!6159 = !DILocation(line: 3019, column: 41, scope: !6072)
!6160 = !DILocation(line: 3019, column: 72, scope: !6072)
!6161 = !DILocation(line: 3019, column: 3, scope: !6072)
!6162 = !DILocation(line: 3021, column: 10, scope: !6072)
!6163 = !DILocation(line: 3021, column: 3, scope: !6072)
!6164 = !DILocation(line: 3024, column: 11, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 3024, column: 2)
!6166 = !DILocation(line: 3024, column: 17, scope: !6165)
!6167 = !DILocation(line: 3024, column: 9, scope: !6165)
!6168 = !DILocation(line: 3024, column: 7, scope: !6165)
!6169 = !DILocation(line: 3024, column: 22, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6165, file: !3, line: 3024, column: 2)
!6171 = !DILocation(line: 3024, column: 24, scope: !6170)
!6172 = !DILocation(line: 3024, column: 2, scope: !6165)
!6173 = !DILocalVariable(name: "early_out", scope: !6174, file: !3, line: 3025, type: !45)
!6174 = distinct !DILexicalBlock(scope: !6170, file: !3, line: 3024, column: 35)
!6175 = !DILocation(line: 3025, column: 7, scope: !6174)
!6176 = !DILocalVariable(name: "seq", scope: !6174, file: !3, line: 3026, type: !204)
!6177 = !DILocation(line: 3026, column: 13, scope: !6174)
!6178 = !DILocation(line: 3026, column: 27, scope: !6174)
!6179 = !DILocation(line: 3026, column: 19, scope: !6174)
!6180 = !DILocation(line: 3028, column: 33, scope: !6174)
!6181 = !DILocation(line: 3028, column: 42, scope: !6174)
!6182 = !DILocation(line: 3028, column: 47, scope: !6174)
!6183 = !DILocation(line: 3028, column: 9, scope: !6174)
!6184 = !DILocation(line: 3028, column: 7, scope: !6174)
!6185 = !DILocation(line: 3030, column: 7, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3030, column: 7)
!6187 = !DILocation(line: 3030, column: 7, scope: !6174)
!6188 = !DILocation(line: 3031, column: 4, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6186, file: !3, line: 3030, column: 12)
!6190 = !DILocation(line: 3033, column: 7, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3033, column: 7)
!6192 = !DILocation(line: 3033, column: 12, scope: !6191)
!6193 = !DILocation(line: 3033, column: 23, scope: !6191)
!6194 = !DILocation(line: 3033, column: 7, scope: !6174)
!6195 = !DILocation(line: 3034, column: 27, scope: !6196)
!6196 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 3033, column: 45)
!6197 = !DILocation(line: 3034, column: 36, scope: !6196)
!6198 = !DILocation(line: 3034, column: 41, scope: !6196)
!6199 = !DILocation(line: 3034, column: 10, scope: !6196)
!6200 = !DILocation(line: 3034, column: 8, scope: !6196)
!6201 = !DILocation(line: 3035, column: 4, scope: !6196)
!6202 = !DILocation(line: 3038, column: 48, scope: !6174)
!6203 = !DILocation(line: 3038, column: 15, scope: !6174)
!6204 = !DILocation(line: 3038, column: 13, scope: !6174)
!6205 = !DILocation(line: 3040, column: 11, scope: !6174)
!6206 = !DILocation(line: 3040, column: 3, scope: !6174)
!6207 = !DILocation(line: 3043, column: 28, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3040, column: 22)
!6209 = !DILocation(line: 3043, column: 37, scope: !6208)
!6210 = !DILocation(line: 3043, column: 42, scope: !6208)
!6211 = !DILocation(line: 3043, column: 11, scope: !6208)
!6212 = !DILocation(line: 3043, column: 9, scope: !6208)
!6213 = !DILocation(line: 3044, column: 5, scope: !6208)
!6214 = !DILocation(line: 3046, column: 9, scope: !6215)
!6215 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 3046, column: 9)
!6216 = !DILocation(line: 3046, column: 11, scope: !6215)
!6217 = !DILocation(line: 3046, column: 9, scope: !6208)
!6218 = !DILocation(line: 3047, column: 27, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6215, file: !3, line: 3046, column: 17)
!6220 = !DILocation(line: 3047, column: 36, scope: !6219)
!6221 = !DILocation(line: 3047, column: 43, scope: !6219)
!6222 = !DILocation(line: 3047, column: 52, scope: !6219)
!6223 = !DILocation(line: 3047, column: 12, scope: !6219)
!6224 = !DILocation(line: 3047, column: 10, scope: !6219)
!6225 = !DILocation(line: 3048, column: 5, scope: !6219)
!6226 = !DILocation(line: 3049, column: 5, scope: !6208)
!6227 = !DILocation(line: 3051, column: 9, scope: !6228)
!6228 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 3051, column: 9)
!6229 = !DILocation(line: 3051, column: 11, scope: !6228)
!6230 = !DILocation(line: 3051, column: 9, scope: !6208)
!6231 = !DILocalVariable(name: "ibuf1", scope: !6232, file: !3, line: 3052, type: !1776)
!6232 = distinct !DILexicalBlock(scope: !6228, file: !3, line: 3051, column: 17)
!6233 = !DILocation(line: 3052, column: 13, scope: !6232)
!6234 = !DILocation(line: 3052, column: 36, scope: !6232)
!6235 = !DILocation(line: 3052, column: 45, scope: !6232)
!6236 = !DILocation(line: 3052, column: 52, scope: !6232)
!6237 = !DILocation(line: 3052, column: 61, scope: !6232)
!6238 = !DILocation(line: 3052, column: 21, scope: !6232)
!6239 = !DILocalVariable(name: "ibuf2", scope: !6232, file: !3, line: 3053, type: !1776)
!6240 = !DILocation(line: 3053, column: 13, scope: !6232)
!6241 = !DILocation(line: 3053, column: 38, scope: !6232)
!6242 = !DILocation(line: 3053, column: 47, scope: !6232)
!6243 = !DILocation(line: 3053, column: 52, scope: !6232)
!6244 = !DILocation(line: 3053, column: 21, scope: !6232)
!6245 = !DILocation(line: 3055, column: 48, scope: !6232)
!6246 = !DILocation(line: 3055, column: 57, scope: !6232)
!6247 = !DILocation(line: 3055, column: 62, scope: !6232)
!6248 = !DILocation(line: 3055, column: 68, scope: !6232)
!6249 = !DILocation(line: 3055, column: 75, scope: !6232)
!6250 = !DILocation(line: 3055, column: 12, scope: !6232)
!6251 = !DILocation(line: 3055, column: 10, scope: !6232)
!6252 = !DILocation(line: 3057, column: 20, scope: !6232)
!6253 = !DILocation(line: 3057, column: 6, scope: !6232)
!6254 = !DILocation(line: 3058, column: 20, scope: !6232)
!6255 = !DILocation(line: 3058, column: 6, scope: !6232)
!6256 = !DILocation(line: 3059, column: 5, scope: !6232)
!6257 = !DILocation(line: 3061, column: 5, scope: !6208)
!6258 = !DILocation(line: 3063, column: 7, scope: !6259)
!6259 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 3063, column: 7)
!6260 = !DILocation(line: 3063, column: 7, scope: !6174)
!6261 = !DILocation(line: 3064, column: 4, scope: !6262)
!6262 = distinct !DILexicalBlock(scope: !6259, file: !3, line: 3063, column: 12)
!6263 = !DILocation(line: 3066, column: 2, scope: !6174)
!6264 = !DILocation(line: 3024, column: 31, scope: !6170)
!6265 = !DILocation(line: 3024, column: 2, scope: !6170)
!6266 = distinct !{!6266, !6172, !6267}
!6267 = !DILocation(line: 3066, column: 2, scope: !6165)
!6268 = !DILocation(line: 3068, column: 26, scope: !6023)
!6269 = !DILocation(line: 3068, column: 43, scope: !6023)
!6270 = !DILocation(line: 3068, column: 35, scope: !6023)
!6271 = !DILocation(line: 3068, column: 47, scope: !6023)
!6272 = !DILocation(line: 3068, column: 78, scope: !6023)
!6273 = !DILocation(line: 3068, column: 2, scope: !6023)
!6274 = !DILocation(line: 3070, column: 3, scope: !6023)
!6275 = !DILocation(line: 3072, column: 2, scope: !6023)
!6276 = !DILocation(line: 3072, column: 9, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 3072, column: 2)
!6278 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 3072, column: 2)
!6279 = !DILocation(line: 3072, column: 13, scope: !6277)
!6280 = !DILocation(line: 3072, column: 11, scope: !6277)
!6281 = !DILocation(line: 3072, column: 2, scope: !6278)
!6282 = !DILocalVariable(name: "seq", scope: !6283, file: !3, line: 3073, type: !204)
!6283 = distinct !DILexicalBlock(scope: !6277, file: !3, line: 3072, column: 25)
!6284 = !DILocation(line: 3073, column: 13, scope: !6283)
!6285 = !DILocation(line: 3073, column: 27, scope: !6283)
!6286 = !DILocation(line: 3073, column: 19, scope: !6283)
!6287 = !DILocation(line: 3075, column: 40, scope: !6288)
!6288 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 3075, column: 7)
!6289 = !DILocation(line: 3075, column: 7, scope: !6288)
!6290 = !DILocation(line: 3075, column: 45, scope: !6288)
!6291 = !DILocation(line: 3075, column: 7, scope: !6283)
!6292 = !DILocalVariable(name: "ibuf1", scope: !6293, file: !3, line: 3076, type: !1776)
!6293 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 3075, column: 65)
!6294 = !DILocation(line: 3076, column: 11, scope: !6293)
!6295 = !DILocation(line: 3076, column: 19, scope: !6293)
!6296 = !DILocalVariable(name: "ibuf2", scope: !6293, file: !3, line: 3077, type: !1776)
!6297 = !DILocation(line: 3077, column: 11, scope: !6293)
!6298 = !DILocation(line: 3077, column: 36, scope: !6293)
!6299 = !DILocation(line: 3077, column: 45, scope: !6293)
!6300 = !DILocation(line: 3077, column: 50, scope: !6293)
!6301 = !DILocation(line: 3077, column: 19, scope: !6293)
!6302 = !DILocation(line: 3079, column: 46, scope: !6293)
!6303 = !DILocation(line: 3079, column: 55, scope: !6293)
!6304 = !DILocation(line: 3079, column: 60, scope: !6293)
!6305 = !DILocation(line: 3079, column: 66, scope: !6293)
!6306 = !DILocation(line: 3079, column: 73, scope: !6293)
!6307 = !DILocation(line: 3079, column: 10, scope: !6293)
!6308 = !DILocation(line: 3079, column: 8, scope: !6293)
!6309 = !DILocation(line: 3081, column: 18, scope: !6293)
!6310 = !DILocation(line: 3081, column: 4, scope: !6293)
!6311 = !DILocation(line: 3082, column: 18, scope: !6293)
!6312 = !DILocation(line: 3082, column: 4, scope: !6293)
!6313 = !DILocation(line: 3083, column: 3, scope: !6293)
!6314 = !DILocation(line: 3085, column: 27, scope: !6283)
!6315 = !DILocation(line: 3085, column: 44, scope: !6283)
!6316 = !DILocation(line: 3085, column: 36, scope: !6283)
!6317 = !DILocation(line: 3085, column: 48, scope: !6283)
!6318 = !DILocation(line: 3085, column: 79, scope: !6283)
!6319 = !DILocation(line: 3085, column: 3, scope: !6283)
!6320 = !DILocation(line: 3086, column: 2, scope: !6283)
!6321 = !DILocation(line: 3072, column: 21, scope: !6277)
!6322 = !DILocation(line: 3072, column: 2, scope: !6277)
!6323 = distinct !{!6323, !6281, !6324}
!6324 = !DILocation(line: 3086, column: 2, scope: !6278)
!6325 = !DILocation(line: 3088, column: 9, scope: !6023)
!6326 = !DILocation(line: 3088, column: 2, scope: !6023)
!6327 = !DILocation(line: 3089, column: 1, scope: !6023)
!6328 = distinct !DISubprogram(name: "BKE_sequencer_give_ibuf_seqbase", scope: !3, file: !3, line: 3115, type: !6329, scopeLine: 3116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6329 = !DISubroutineType(types: !6330)
!6330 = !{!1782, !1892, !193, !45, !202}
!6331 = !DILocalVariable(name: "context", arg: 1, scope: !6328, file: !3, line: 3115, type: !1892)
!6332 = !DILocation(line: 3115, column: 61, scope: !6328)
!6333 = !DILocalVariable(name: "cfra", arg: 2, scope: !6328, file: !3, line: 3115, type: !193)
!6334 = !DILocation(line: 3115, column: 76, scope: !6328)
!6335 = !DILocalVariable(name: "chanshown", arg: 3, scope: !6328, file: !3, line: 3115, type: !45)
!6336 = !DILocation(line: 3115, column: 86, scope: !6328)
!6337 = !DILocalVariable(name: "seqbasep", arg: 4, scope: !6328, file: !3, line: 3115, type: !202)
!6338 = !DILocation(line: 3115, column: 107, scope: !6328)
!6339 = !DILocation(line: 3117, column: 32, scope: !6328)
!6340 = !DILocation(line: 3117, column: 41, scope: !6328)
!6341 = !DILocation(line: 3117, column: 51, scope: !6328)
!6342 = !DILocation(line: 3117, column: 57, scope: !6328)
!6343 = !DILocation(line: 3117, column: 9, scope: !6328)
!6344 = !DILocation(line: 3117, column: 2, scope: !6328)
!6345 = distinct !DISubprogram(name: "BKE_sequencer_give_ibuf_direct", scope: !3, file: !3, line: 3121, type: !6346, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6346 = !DISubroutineType(types: !6347)
!6347 = !{!1782, !1892, !193, !204}
!6348 = !DILocalVariable(name: "context", arg: 1, scope: !6345, file: !3, line: 3121, type: !1892)
!6349 = !DILocation(line: 3121, column: 60, scope: !6345)
!6350 = !DILocalVariable(name: "cfra", arg: 2, scope: !6345, file: !3, line: 3121, type: !193)
!6351 = !DILocation(line: 3121, column: 75, scope: !6345)
!6352 = !DILocalVariable(name: "seq", arg: 3, scope: !6345, file: !3, line: 3121, type: !204)
!6353 = !DILocation(line: 3121, column: 91, scope: !6345)
!6354 = !DILocation(line: 3123, column: 26, scope: !6345)
!6355 = !DILocation(line: 3123, column: 35, scope: !6345)
!6356 = !DILocation(line: 3123, column: 40, scope: !6345)
!6357 = !DILocation(line: 3123, column: 9, scope: !6345)
!6358 = !DILocation(line: 3123, column: 2, scope: !6345)
!6359 = distinct !DISubprogram(name: "BKE_sequencer_give_ibuf_prefetch_request", scope: !3, file: !3, line: 3190, type: !6360, scopeLine: 3191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6360 = !DISubroutineType(types: !6361)
!6361 = !{null, !1892, !193, !45}
!6362 = !DILocalVariable(name: "context", arg: 1, scope: !6359, file: !3, line: 3190, type: !1892)
!6363 = !DILocation(line: 3190, column: 68, scope: !6359)
!6364 = !DILocalVariable(name: "cfra", arg: 2, scope: !6359, file: !3, line: 3190, type: !193)
!6365 = !DILocation(line: 3190, column: 83, scope: !6359)
!6366 = !DILocalVariable(name: "chanshown", arg: 3, scope: !6359, file: !3, line: 3190, type: !45)
!6367 = !DILocation(line: 3190, column: 93, scope: !6359)
!6368 = !DILocalVariable(name: "e", scope: !6359, file: !3, line: 3192, type: !6369)
!6369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6370, size: 64)
!6370 = !DIDerivedType(tag: DW_TAG_typedef, name: "PrefetchQueueElem", file: !3, line: 3188, baseType: !6371)
!6371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PrefetchQueueElem", file: !3, line: 3176, size: 384, elements: !6372)
!6372 = !{!6373, !6375, !6376, !6377, !6378, !6379, !6380, !6381, !6382}
!6373 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6371, file: !3, line: 3177, baseType: !6374, size: 64)
!6374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6371, size: 64)
!6375 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !6371, file: !3, line: 3177, baseType: !6374, size: 64, offset: 64)
!6376 = !DIDerivedType(tag: DW_TAG_member, name: "rectx", scope: !6371, file: !3, line: 3179, baseType: !45, size: 32, offset: 128)
!6377 = !DIDerivedType(tag: DW_TAG_member, name: "recty", scope: !6371, file: !3, line: 3180, baseType: !45, size: 32, offset: 160)
!6378 = !DIDerivedType(tag: DW_TAG_member, name: "cfra", scope: !6371, file: !3, line: 3181, baseType: !193, size: 32, offset: 192)
!6379 = !DIDerivedType(tag: DW_TAG_member, name: "chanshown", scope: !6371, file: !3, line: 3182, baseType: !45, size: 32, offset: 224)
!6380 = !DIDerivedType(tag: DW_TAG_member, name: "preview_render_size", scope: !6371, file: !3, line: 3183, baseType: !45, size: 32, offset: 256)
!6381 = !DIDerivedType(tag: DW_TAG_member, name: "monoton_cfra", scope: !6371, file: !3, line: 3185, baseType: !45, size: 32, offset: 288)
!6382 = !DIDerivedType(tag: DW_TAG_member, name: "ibuf", scope: !6371, file: !3, line: 3187, baseType: !1776, size: 64, offset: 320)
!6383 = !DILocation(line: 3192, column: 21, scope: !6359)
!6384 = !DILocation(line: 3193, column: 6, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 3193, column: 6)
!6386 = !DILocation(line: 3193, column: 6, scope: !6359)
!6387 = !DILocation(line: 3194, column: 3, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 3193, column: 27)
!6389 = !DILocation(line: 3197, column: 6, scope: !6359)
!6390 = !DILocation(line: 3197, column: 4, scope: !6359)
!6391 = !DILocation(line: 3198, column: 13, scope: !6359)
!6392 = !DILocation(line: 3198, column: 22, scope: !6359)
!6393 = !DILocation(line: 3198, column: 2, scope: !6359)
!6394 = !DILocation(line: 3198, column: 5, scope: !6359)
!6395 = !DILocation(line: 3198, column: 11, scope: !6359)
!6396 = !DILocation(line: 3199, column: 13, scope: !6359)
!6397 = !DILocation(line: 3199, column: 22, scope: !6359)
!6398 = !DILocation(line: 3199, column: 2, scope: !6359)
!6399 = !DILocation(line: 3199, column: 5, scope: !6359)
!6400 = !DILocation(line: 3199, column: 11, scope: !6359)
!6401 = !DILocation(line: 3200, column: 12, scope: !6359)
!6402 = !DILocation(line: 3200, column: 2, scope: !6359)
!6403 = !DILocation(line: 3200, column: 5, scope: !6359)
!6404 = !DILocation(line: 3200, column: 10, scope: !6359)
!6405 = !DILocation(line: 3201, column: 17, scope: !6359)
!6406 = !DILocation(line: 3201, column: 2, scope: !6359)
!6407 = !DILocation(line: 3201, column: 5, scope: !6359)
!6408 = !DILocation(line: 3201, column: 15, scope: !6359)
!6409 = !DILocation(line: 3202, column: 27, scope: !6359)
!6410 = !DILocation(line: 3202, column: 36, scope: !6359)
!6411 = !DILocation(line: 3202, column: 2, scope: !6359)
!6412 = !DILocation(line: 3202, column: 5, scope: !6359)
!6413 = !DILocation(line: 3202, column: 25, scope: !6359)
!6414 = !DILocation(line: 3203, column: 32, scope: !6359)
!6415 = !DILocation(line: 3203, column: 2, scope: !6359)
!6416 = !DILocation(line: 3203, column: 5, scope: !6359)
!6417 = !DILocation(line: 3203, column: 18, scope: !6359)
!6418 = !DILocation(line: 3207, column: 30, scope: !6359)
!6419 = !DILocation(line: 3207, column: 2, scope: !6359)
!6420 = !DILocation(line: 3215, column: 1, scope: !6359)
!6421 = distinct !DISubprogram(name: "BKE_sequencer_give_ibuf_threaded", scope: !3, file: !3, line: 3217, type: !5939, scopeLine: 3218, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6422 = !DILocalVariable(name: "context", arg: 1, scope: !6421, file: !3, line: 3217, type: !1892)
!6423 = !DILocation(line: 3217, column: 62, scope: !6421)
!6424 = !DILocalVariable(name: "cfra", arg: 2, scope: !6421, file: !3, line: 3217, type: !193)
!6425 = !DILocation(line: 3217, column: 77, scope: !6421)
!6426 = !DILocalVariable(name: "chanshown", arg: 3, scope: !6421, file: !3, line: 3217, type: !45)
!6427 = !DILocation(line: 3217, column: 87, scope: !6421)
!6428 = !DILocalVariable(name: "e", scope: !6421, file: !3, line: 3219, type: !6369)
!6429 = !DILocation(line: 3219, column: 21, scope: !6421)
!6430 = !DILocalVariable(name: "found_something", scope: !6421, file: !3, line: 3220, type: !742)
!6431 = !DILocation(line: 3220, column: 7, scope: !6421)
!6432 = !DILocation(line: 3222, column: 6, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6421, file: !3, line: 3222, column: 6)
!6434 = !DILocation(line: 3222, column: 6, scope: !6421)
!6435 = !DILocation(line: 3223, column: 34, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6433, file: !3, line: 3222, column: 27)
!6437 = !DILocation(line: 3223, column: 43, scope: !6436)
!6438 = !DILocation(line: 3223, column: 49, scope: !6436)
!6439 = !DILocation(line: 3223, column: 10, scope: !6436)
!6440 = !DILocation(line: 3223, column: 3, scope: !6436)
!6441 = !DILocation(line: 3226, column: 2, scope: !6421)
!6442 = !DILocation(line: 3226, column: 10, scope: !6421)
!6443 = !DILocation(line: 3226, column: 9, scope: !6421)
!6444 = !DILocalVariable(name: "success", scope: !6445, file: !3, line: 3227, type: !742)
!6445 = distinct !DILexicalBlock(scope: !6421, file: !3, line: 3226, column: 13)
!6446 = !DILocation(line: 3227, column: 8, scope: !6445)
!6447 = !DILocation(line: 3232, column: 26, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 3232, column: 3)
!6449 = !DILocation(line: 3232, column: 12, scope: !6448)
!6450 = !DILocation(line: 3232, column: 10, scope: !6448)
!6451 = !DILocation(line: 3232, column: 8, scope: !6448)
!6452 = !DILocation(line: 3232, column: 33, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 3232, column: 3)
!6454 = !DILocation(line: 3232, column: 3, scope: !6448)
!6455 = !DILocation(line: 3233, column: 8, scope: !6456)
!6456 = distinct !DILexicalBlock(scope: !6457, file: !3, line: 3233, column: 8)
!6457 = distinct !DILexicalBlock(scope: !6453, file: !3, line: 3232, column: 49)
!6458 = !DILocation(line: 3233, column: 16, scope: !6456)
!6459 = !DILocation(line: 3233, column: 19, scope: !6456)
!6460 = !DILocation(line: 3233, column: 13, scope: !6456)
!6461 = !DILocation(line: 3233, column: 24, scope: !6456)
!6462 = !DILocation(line: 3234, column: 8, scope: !6456)
!6463 = !DILocation(line: 3234, column: 21, scope: !6456)
!6464 = !DILocation(line: 3234, column: 24, scope: !6456)
!6465 = !DILocation(line: 3234, column: 18, scope: !6456)
!6466 = !DILocation(line: 3234, column: 34, scope: !6456)
!6467 = !DILocation(line: 3235, column: 8, scope: !6456)
!6468 = !DILocation(line: 3235, column: 17, scope: !6456)
!6469 = !DILocation(line: 3235, column: 26, scope: !6456)
!6470 = !DILocation(line: 3235, column: 29, scope: !6456)
!6471 = !DILocation(line: 3235, column: 23, scope: !6456)
!6472 = !DILocation(line: 3235, column: 35, scope: !6456)
!6473 = !DILocation(line: 3236, column: 8, scope: !6456)
!6474 = !DILocation(line: 3236, column: 17, scope: !6456)
!6475 = !DILocation(line: 3236, column: 26, scope: !6456)
!6476 = !DILocation(line: 3236, column: 29, scope: !6456)
!6477 = !DILocation(line: 3236, column: 23, scope: !6456)
!6478 = !DILocation(line: 3236, column: 35, scope: !6456)
!6479 = !DILocation(line: 3237, column: 8, scope: !6456)
!6480 = !DILocation(line: 3237, column: 17, scope: !6456)
!6481 = !DILocation(line: 3237, column: 40, scope: !6456)
!6482 = !DILocation(line: 3237, column: 43, scope: !6456)
!6483 = !DILocation(line: 3237, column: 37, scope: !6456)
!6484 = !DILocation(line: 3233, column: 8, scope: !6457)
!6485 = !DILocation(line: 3239, column: 13, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6456, file: !3, line: 3238, column: 4)
!6487 = !DILocation(line: 3240, column: 21, scope: !6486)
!6488 = !DILocation(line: 3241, column: 5, scope: !6486)
!6489 = !DILocation(line: 3243, column: 3, scope: !6457)
!6490 = !DILocation(line: 3232, column: 40, scope: !6453)
!6491 = !DILocation(line: 3232, column: 43, scope: !6453)
!6492 = !DILocation(line: 3232, column: 38, scope: !6453)
!6493 = !DILocation(line: 3232, column: 3, scope: !6453)
!6494 = distinct !{!6494, !6454, !6495}
!6495 = !DILocation(line: 3243, column: 3, scope: !6448)
!6496 = !DILocation(line: 3245, column: 8, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 3245, column: 7)
!6498 = !DILocation(line: 3245, column: 7, scope: !6445)
!6499 = !DILocation(line: 3246, column: 27, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 3246, column: 4)
!6501 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 3245, column: 11)
!6502 = !DILocation(line: 3246, column: 13, scope: !6500)
!6503 = !DILocation(line: 3246, column: 11, scope: !6500)
!6504 = !DILocation(line: 3246, column: 9, scope: !6500)
!6505 = !DILocation(line: 3246, column: 34, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 3246, column: 4)
!6507 = !DILocation(line: 3246, column: 4, scope: !6500)
!6508 = !DILocation(line: 3247, column: 9, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 3247, column: 9)
!6510 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 3246, column: 50)
!6511 = !DILocation(line: 3247, column: 17, scope: !6509)
!6512 = !DILocation(line: 3247, column: 20, scope: !6509)
!6513 = !DILocation(line: 3247, column: 14, scope: !6509)
!6514 = !DILocation(line: 3247, column: 25, scope: !6509)
!6515 = !DILocation(line: 3248, column: 9, scope: !6509)
!6516 = !DILocation(line: 3248, column: 22, scope: !6509)
!6517 = !DILocation(line: 3248, column: 25, scope: !6509)
!6518 = !DILocation(line: 3248, column: 19, scope: !6509)
!6519 = !DILocation(line: 3248, column: 35, scope: !6509)
!6520 = !DILocation(line: 3249, column: 9, scope: !6509)
!6521 = !DILocation(line: 3249, column: 18, scope: !6509)
!6522 = !DILocation(line: 3249, column: 27, scope: !6509)
!6523 = !DILocation(line: 3249, column: 30, scope: !6509)
!6524 = !DILocation(line: 3249, column: 24, scope: !6509)
!6525 = !DILocation(line: 3249, column: 36, scope: !6509)
!6526 = !DILocation(line: 3250, column: 9, scope: !6509)
!6527 = !DILocation(line: 3250, column: 18, scope: !6509)
!6528 = !DILocation(line: 3250, column: 27, scope: !6509)
!6529 = !DILocation(line: 3250, column: 30, scope: !6509)
!6530 = !DILocation(line: 3250, column: 24, scope: !6509)
!6531 = !DILocation(line: 3250, column: 36, scope: !6509)
!6532 = !DILocation(line: 3251, column: 9, scope: !6509)
!6533 = !DILocation(line: 3251, column: 18, scope: !6509)
!6534 = !DILocation(line: 3251, column: 41, scope: !6509)
!6535 = !DILocation(line: 3251, column: 44, scope: !6509)
!6536 = !DILocation(line: 3251, column: 38, scope: !6509)
!6537 = !DILocation(line: 3247, column: 9, scope: !6510)
!6538 = !DILocation(line: 3253, column: 22, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6509, file: !3, line: 3252, column: 5)
!6540 = !DILocation(line: 3254, column: 6, scope: !6539)
!6541 = !DILocation(line: 3256, column: 4, scope: !6510)
!6542 = !DILocation(line: 3246, column: 41, scope: !6506)
!6543 = !DILocation(line: 3246, column: 44, scope: !6506)
!6544 = !DILocation(line: 3246, column: 39, scope: !6506)
!6545 = !DILocation(line: 3246, column: 4, scope: !6506)
!6546 = distinct !{!6546, !6507, !6547}
!6547 = !DILocation(line: 3256, column: 4, scope: !6500)
!6548 = !DILocation(line: 3257, column: 3, scope: !6501)
!6549 = !DILocation(line: 3259, column: 8, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 3259, column: 7)
!6551 = !DILocation(line: 3259, column: 7, scope: !6445)
!6552 = !DILocalVariable(name: "tslot", scope: !6553, file: !3, line: 3260, type: !6554)
!6553 = distinct !DILexicalBlock(scope: !6550, file: !3, line: 3259, column: 11)
!6554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6555, size: 64)
!6555 = !DIDerivedType(tag: DW_TAG_typedef, name: "PrefetchThread", file: !3, line: 3174, baseType: !6556)
!6556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PrefetchThread", file: !3, line: 3162, size: 320, elements: !6557)
!6557 = !{!6558, !6560, !6561, !6562, !6563, !6568}
!6558 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6556, file: !3, line: 3163, baseType: !6559, size: 64)
!6559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6556, size: 64)
!6560 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !6556, file: !3, line: 3163, baseType: !6559, size: 64, offset: 64)
!6561 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !6556, file: !3, line: 3165, baseType: !1744, size: 64, offset: 128)
!6562 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !6556, file: !3, line: 3166, baseType: !6374, size: 64, offset: 192)
!6563 = !DIDerivedType(tag: DW_TAG_member, name: "pthread", scope: !6556, file: !3, line: 3168, baseType: !6564, size: 32, offset: 256)
!6564 = !DIDerivedType(tag: DW_TAG_typedef, name: "spec_null_thread_t", file: !6565, line: 8, baseType: !6566)
!6565 = !DIFile(filename: "include/spec_pthread.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!6566 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !612, line: 26, baseType: !6567)
!6567 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !614, line: 42, baseType: !7)
!6568 = !DIDerivedType(tag: DW_TAG_member, name: "running", scope: !6556, file: !3, line: 3172, baseType: !45, size: 32, offset: 288)
!6569 = !DILocation(line: 3260, column: 20, scope: !6553)
!6570 = !DILocation(line: 3262, column: 33, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3262, column: 4)
!6572 = !DILocation(line: 3262, column: 17, scope: !6571)
!6573 = !DILocation(line: 3262, column: 15, scope: !6571)
!6574 = !DILocation(line: 3262, column: 9, scope: !6571)
!6575 = !DILocation(line: 3263, column: 9, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 3262, column: 4)
!6577 = !DILocation(line: 3262, column: 4, scope: !6571)
!6578 = !DILocation(line: 3266, column: 9, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 3266, column: 9)
!6580 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 3265, column: 4)
!6581 = !DILocation(line: 3266, column: 16, scope: !6579)
!6582 = !DILocation(line: 3266, column: 24, scope: !6579)
!6583 = !DILocation(line: 3267, column: 9, scope: !6579)
!6584 = !DILocation(line: 3267, column: 17, scope: !6579)
!6585 = !DILocation(line: 3267, column: 24, scope: !6579)
!6586 = !DILocation(line: 3267, column: 33, scope: !6579)
!6587 = !DILocation(line: 3267, column: 14, scope: !6579)
!6588 = !DILocation(line: 3267, column: 38, scope: !6579)
!6589 = !DILocation(line: 3268, column: 9, scope: !6579)
!6590 = !DILocation(line: 3268, column: 22, scope: !6579)
!6591 = !DILocation(line: 3268, column: 29, scope: !6579)
!6592 = !DILocation(line: 3268, column: 38, scope: !6579)
!6593 = !DILocation(line: 3268, column: 19, scope: !6579)
!6594 = !DILocation(line: 3268, column: 48, scope: !6579)
!6595 = !DILocation(line: 3269, column: 9, scope: !6579)
!6596 = !DILocation(line: 3269, column: 18, scope: !6579)
!6597 = !DILocation(line: 3269, column: 27, scope: !6579)
!6598 = !DILocation(line: 3269, column: 34, scope: !6579)
!6599 = !DILocation(line: 3269, column: 43, scope: !6579)
!6600 = !DILocation(line: 3269, column: 24, scope: !6579)
!6601 = !DILocation(line: 3269, column: 49, scope: !6579)
!6602 = !DILocation(line: 3270, column: 9, scope: !6579)
!6603 = !DILocation(line: 3270, column: 18, scope: !6579)
!6604 = !DILocation(line: 3270, column: 27, scope: !6579)
!6605 = !DILocation(line: 3270, column: 34, scope: !6579)
!6606 = !DILocation(line: 3270, column: 43, scope: !6579)
!6607 = !DILocation(line: 3270, column: 24, scope: !6579)
!6608 = !DILocation(line: 3270, column: 49, scope: !6579)
!6609 = !DILocation(line: 3271, column: 9, scope: !6579)
!6610 = !DILocation(line: 3271, column: 18, scope: !6579)
!6611 = !DILocation(line: 3271, column: 41, scope: !6579)
!6612 = !DILocation(line: 3271, column: 48, scope: !6579)
!6613 = !DILocation(line: 3271, column: 57, scope: !6579)
!6614 = !DILocation(line: 3271, column: 38, scope: !6579)
!6615 = !DILocation(line: 3266, column: 9, scope: !6580)
!6616 = !DILocation(line: 3273, column: 22, scope: !6617)
!6617 = distinct !DILexicalBlock(scope: !6579, file: !3, line: 3272, column: 5)
!6618 = !DILocation(line: 3274, column: 6, scope: !6617)
!6619 = !DILocation(line: 3276, column: 4, scope: !6580)
!6620 = !DILocation(line: 3264, column: 17, scope: !6576)
!6621 = !DILocation(line: 3264, column: 24, scope: !6576)
!6622 = !DILocation(line: 3264, column: 15, scope: !6576)
!6623 = !DILocation(line: 3262, column: 4, scope: !6576)
!6624 = distinct !{!6624, !6577, !6625}
!6625 = !DILocation(line: 3276, column: 4, scope: !6571)
!6626 = !DILocation(line: 3277, column: 3, scope: !6553)
!6627 = !DILocation(line: 3281, column: 7, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 3281, column: 7)
!6629 = !DILocation(line: 3281, column: 7, scope: !6445)
!6630 = !DILocation(line: 3282, column: 34, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 3281, column: 10)
!6632 = !DILocation(line: 3282, column: 37, scope: !6631)
!6633 = !DILocation(line: 3282, column: 32, scope: !6631)
!6634 = !DILocation(line: 3283, column: 3, scope: !6631)
!6635 = !DILocation(line: 3289, column: 8, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 3289, column: 7)
!6637 = !DILocation(line: 3289, column: 7, scope: !6445)
!6638 = !DILocation(line: 3290, column: 6, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 3289, column: 17)
!6640 = !DILocation(line: 3292, column: 9, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6639, file: !3, line: 3292, column: 8)
!6642 = !DILocation(line: 3292, column: 8, scope: !6639)
!6643 = !DILocation(line: 3293, column: 13, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 3292, column: 26)
!6645 = !DILocation(line: 3293, column: 5, scope: !6644)
!6646 = !DILocation(line: 3294, column: 5, scope: !6644)
!6647 = !DILocation(line: 3301, column: 3, scope: !6639)
!6648 = distinct !{!6648, !6441, !6649}
!6649 = !DILocation(line: 3302, column: 2, scope: !6421)
!6650 = !DILocation(line: 3304, column: 9, scope: !6421)
!6651 = !DILocation(line: 3304, column: 13, scope: !6421)
!6652 = !DILocation(line: 3304, column: 16, scope: !6421)
!6653 = !DILocation(line: 3304, column: 2, scope: !6421)
!6654 = !DILocation(line: 3305, column: 1, scope: !6421)
!6655 = distinct !DISubprogram(name: "BKE_sequence_check_depend", scope: !3, file: !3, line: 3318, type: !6656, scopeLine: 3319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6656 = !DISubroutineType(types: !6657)
!6657 = !{!742, !204, !204}
!6658 = !DILocalVariable(name: "seq", arg: 1, scope: !6655, file: !3, line: 3318, type: !204)
!6659 = !DILocation(line: 3318, column: 42, scope: !6655)
!6660 = !DILocalVariable(name: "cur", arg: 2, scope: !6655, file: !3, line: 3318, type: !204)
!6661 = !DILocation(line: 3318, column: 57, scope: !6655)
!6662 = !DILocation(line: 3320, column: 6, scope: !6663)
!6663 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 3320, column: 6)
!6664 = !DILocation(line: 3320, column: 11, scope: !6663)
!6665 = !DILocation(line: 3320, column: 19, scope: !6663)
!6666 = !DILocation(line: 3320, column: 16, scope: !6663)
!6667 = !DILocation(line: 3320, column: 23, scope: !6663)
!6668 = !DILocation(line: 3320, column: 26, scope: !6663)
!6669 = !DILocation(line: 3320, column: 31, scope: !6663)
!6670 = !DILocation(line: 3320, column: 39, scope: !6663)
!6671 = !DILocation(line: 3320, column: 36, scope: !6663)
!6672 = !DILocation(line: 3320, column: 43, scope: !6663)
!6673 = !DILocation(line: 3320, column: 46, scope: !6663)
!6674 = !DILocation(line: 3320, column: 51, scope: !6663)
!6675 = !DILocation(line: 3320, column: 59, scope: !6663)
!6676 = !DILocation(line: 3320, column: 56, scope: !6663)
!6677 = !DILocation(line: 3320, column: 6, scope: !6655)
!6678 = !DILocation(line: 3321, column: 3, scope: !6663)
!6679 = !DILocation(line: 3324, column: 6, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 3324, column: 6)
!6681 = !DILocation(line: 3324, column: 11, scope: !6680)
!6682 = !DILocation(line: 3324, column: 21, scope: !6680)
!6683 = !DILocation(line: 3324, column: 26, scope: !6680)
!6684 = !DILocation(line: 3324, column: 19, scope: !6680)
!6685 = !DILocation(line: 3324, column: 36, scope: !6680)
!6686 = !DILocation(line: 3324, column: 39, scope: !6680)
!6687 = !DILocation(line: 3324, column: 44, scope: !6680)
!6688 = !DILocation(line: 3324, column: 56, scope: !6680)
!6689 = !DILocation(line: 3324, column: 61, scope: !6680)
!6690 = !DILocation(line: 3324, column: 54, scope: !6680)
!6691 = !DILocation(line: 3324, column: 6, scope: !6655)
!6692 = !DILocation(line: 3325, column: 3, scope: !6680)
!6693 = !DILocation(line: 3328, column: 6, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 3328, column: 6)
!6695 = !DILocation(line: 3328, column: 11, scope: !6694)
!6696 = !DILocation(line: 3328, column: 21, scope: !6694)
!6697 = !DILocation(line: 3328, column: 26, scope: !6694)
!6698 = !DILocation(line: 3328, column: 19, scope: !6694)
!6699 = !DILocation(line: 3328, column: 6, scope: !6655)
!6700 = !DILocation(line: 3329, column: 3, scope: !6694)
!6701 = !DILocation(line: 3334, column: 7, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 3334, column: 6)
!6703 = !DILocation(line: 3334, column: 12, scope: !6702)
!6704 = !DILocation(line: 3334, column: 17, scope: !6702)
!6705 = !DILocation(line: 3334, column: 36, scope: !6702)
!6706 = !DILocation(line: 3334, column: 41, scope: !6702)
!6707 = !DILocation(line: 3335, column: 8, scope: !6702)
!6708 = !DILocation(line: 3335, column: 13, scope: !6702)
!6709 = !DILocation(line: 3335, column: 24, scope: !6702)
!6710 = !DILocation(line: 3335, column: 46, scope: !6702)
!6711 = !DILocation(line: 3336, column: 8, scope: !6702)
!6712 = !DILocation(line: 3336, column: 13, scope: !6702)
!6713 = !DILocation(line: 3336, column: 24, scope: !6702)
!6714 = !DILocation(line: 3336, column: 42, scope: !6702)
!6715 = !DILocation(line: 3336, column: 45, scope: !6702)
!6716 = !DILocation(line: 3336, column: 50, scope: !6702)
!6717 = !DILocation(line: 3336, column: 64, scope: !6702)
!6718 = !DILocation(line: 3334, column: 6, scope: !6655)
!6719 = !DILocation(line: 3338, column: 3, scope: !6720)
!6720 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 3337, column: 2)
!6721 = !DILocation(line: 3341, column: 2, scope: !6655)
!6722 = !DILocation(line: 3342, column: 1, scope: !6655)
!6723 = distinct !DISubprogram(name: "BKE_sequence_invalidate_cache", scope: !3, file: !3, line: 3395, type: !2108, scopeLine: 3396, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6724 = !DILocalVariable(name: "scene", arg: 1, scope: !6723, file: !3, line: 3395, type: !1744)
!6725 = !DILocation(line: 3395, column: 43, scope: !6723)
!6726 = !DILocalVariable(name: "seq", arg: 2, scope: !6723, file: !3, line: 3395, type: !204)
!6727 = !DILocation(line: 3395, column: 60, scope: !6723)
!6728 = !DILocation(line: 3397, column: 28, scope: !6723)
!6729 = !DILocation(line: 3397, column: 35, scope: !6723)
!6730 = !DILocation(line: 3397, column: 2, scope: !6723)
!6731 = !DILocation(line: 3398, column: 1, scope: !6723)
!6732 = distinct !DISubprogram(name: "sequence_invalidate_cache", scope: !3, file: !3, line: 3362, type: !6733, scopeLine: 3363, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6733 = !DISubroutineType(types: !6734)
!6734 = !{null, !1744, !204, !742, !742}
!6735 = !DILocalVariable(name: "scene", arg: 1, scope: !6732, file: !3, line: 3362, type: !1744)
!6736 = !DILocation(line: 3362, column: 46, scope: !6732)
!6737 = !DILocalVariable(name: "seq", arg: 2, scope: !6732, file: !3, line: 3362, type: !204)
!6738 = !DILocation(line: 3362, column: 63, scope: !6732)
!6739 = !DILocalVariable(name: "invalidate_self", arg: 3, scope: !6732, file: !3, line: 3362, type: !742)
!6740 = !DILocation(line: 3362, column: 73, scope: !6732)
!6741 = !DILocalVariable(name: "invalidate_preprocess", arg: 4, scope: !6732, file: !3, line: 3362, type: !742)
!6742 = !DILocation(line: 3362, column: 95, scope: !6732)
!6743 = !DILocalVariable(name: "ed", scope: !6732, file: !3, line: 3364, type: !2176)
!6744 = !DILocation(line: 3364, column: 11, scope: !6732)
!6745 = !DILocation(line: 3364, column: 16, scope: !6732)
!6746 = !DILocation(line: 3364, column: 23, scope: !6732)
!6747 = !DILocation(line: 3367, column: 6, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3367, column: 6)
!6749 = !DILocation(line: 3367, column: 6, scope: !6732)
!6750 = !DILocation(line: 3368, column: 7, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6752, file: !3, line: 3368, column: 7)
!6752 = distinct !DILexicalBlock(scope: !6748, file: !3, line: 3367, column: 23)
!6753 = !DILocation(line: 3368, column: 12, scope: !6751)
!6754 = !DILocation(line: 3368, column: 7, scope: !6752)
!6755 = !DILocation(line: 3373, column: 18, scope: !6756)
!6756 = distinct !DILexicalBlock(scope: !6751, file: !3, line: 3368, column: 18)
!6757 = !DILocation(line: 3373, column: 23, scope: !6756)
!6758 = !DILocation(line: 3373, column: 4, scope: !6756)
!6759 = !DILocation(line: 3374, column: 4, scope: !6756)
!6760 = !DILocation(line: 3374, column: 9, scope: !6756)
!6761 = !DILocation(line: 3374, column: 14, scope: !6756)
!6762 = !DILocation(line: 3375, column: 3, scope: !6756)
!6763 = !DILocation(line: 3377, column: 40, scope: !6752)
!6764 = !DILocation(line: 3377, column: 3, scope: !6752)
!6765 = !DILocation(line: 3378, column: 2, scope: !6752)
!6766 = !DILocation(line: 3381, column: 6, scope: !6767)
!6767 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3381, column: 6)
!6768 = !DILocation(line: 3381, column: 11, scope: !6767)
!6769 = !DILocation(line: 3381, column: 22, scope: !6767)
!6770 = !DILocation(line: 3381, column: 25, scope: !6767)
!6771 = !DILocation(line: 3381, column: 30, scope: !6767)
!6772 = !DILocation(line: 3381, column: 35, scope: !6767)
!6773 = !DILocation(line: 3381, column: 6, scope: !6732)
!6774 = !DILocation(line: 3382, column: 41, scope: !6767)
!6775 = !DILocation(line: 3382, column: 48, scope: !6767)
!6776 = !DILocation(line: 3382, column: 3, scope: !6767)
!6777 = !DILocation(line: 3384, column: 6, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3384, column: 6)
!6779 = !DILocation(line: 3384, column: 6, scope: !6732)
!6780 = !DILocation(line: 3385, column: 53, scope: !6778)
!6781 = !DILocation(line: 3385, column: 3, scope: !6778)
!6782 = !DILocation(line: 3392, column: 35, scope: !6732)
!6783 = !DILocation(line: 3392, column: 41, scope: !6732)
!6784 = !DILocation(line: 3392, column: 45, scope: !6732)
!6785 = !DILocation(line: 3392, column: 2, scope: !6732)
!6786 = !DILocation(line: 3393, column: 1, scope: !6732)
!6787 = distinct !DISubprogram(name: "BKE_sequence_invalidate_dependent", scope: !3, file: !3, line: 3400, type: !2108, scopeLine: 3401, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6788 = !DILocalVariable(name: "scene", arg: 1, scope: !6787, file: !3, line: 3400, type: !1744)
!6789 = !DILocation(line: 3400, column: 47, scope: !6787)
!6790 = !DILocalVariable(name: "seq", arg: 2, scope: !6787, file: !3, line: 3400, type: !204)
!6791 = !DILocation(line: 3400, column: 64, scope: !6787)
!6792 = !DILocation(line: 3402, column: 28, scope: !6787)
!6793 = !DILocation(line: 3402, column: 35, scope: !6787)
!6794 = !DILocation(line: 3402, column: 2, scope: !6787)
!6795 = !DILocation(line: 3403, column: 1, scope: !6787)
!6796 = distinct !DISubprogram(name: "BKE_sequence_invalidate_cache_for_modifier", scope: !3, file: !3, line: 3405, type: !2108, scopeLine: 3406, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6797 = !DILocalVariable(name: "scene", arg: 1, scope: !6796, file: !3, line: 3405, type: !1744)
!6798 = !DILocation(line: 3405, column: 56, scope: !6796)
!6799 = !DILocalVariable(name: "seq", arg: 2, scope: !6796, file: !3, line: 3405, type: !204)
!6800 = !DILocation(line: 3405, column: 73, scope: !6796)
!6801 = !DILocation(line: 3407, column: 28, scope: !6796)
!6802 = !DILocation(line: 3407, column: 35, scope: !6796)
!6803 = !DILocation(line: 3407, column: 2, scope: !6796)
!6804 = !DILocation(line: 3408, column: 1, scope: !6796)
!6805 = distinct !DISubprogram(name: "BKE_sequencer_free_imbuf", scope: !3, file: !3, line: 3410, type: !6806, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6806 = !DISubroutineType(types: !6807)
!6807 = !{null, !1744, !202, !742}
!6808 = !DILocalVariable(name: "scene", arg: 1, scope: !6805, file: !3, line: 3410, type: !1744)
!6809 = !DILocation(line: 3410, column: 38, scope: !6805)
!6810 = !DILocalVariable(name: "seqbase", arg: 2, scope: !6805, file: !3, line: 3410, type: !202)
!6811 = !DILocation(line: 3410, column: 55, scope: !6805)
!6812 = !DILocalVariable(name: "for_render", arg: 3, scope: !6805, file: !3, line: 3410, type: !742)
!6813 = !DILocation(line: 3410, column: 69, scope: !6805)
!6814 = !DILocalVariable(name: "seq", scope: !6805, file: !3, line: 3412, type: !204)
!6815 = !DILocation(line: 3412, column: 12, scope: !6805)
!6816 = !DILocation(line: 3414, column: 2, scope: !6805)
!6817 = !DILocation(line: 3416, column: 13, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6805, file: !3, line: 3416, column: 2)
!6819 = !DILocation(line: 3416, column: 22, scope: !6818)
!6820 = !DILocation(line: 3416, column: 11, scope: !6818)
!6821 = !DILocation(line: 3416, column: 7, scope: !6818)
!6822 = !DILocation(line: 3416, column: 29, scope: !6823)
!6823 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 3416, column: 2)
!6824 = !DILocation(line: 3416, column: 2, scope: !6818)
!6825 = !DILocation(line: 3417, column: 7, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 3417, column: 7)
!6827 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 3416, column: 51)
!6828 = !DILocation(line: 3417, column: 18, scope: !6826)
!6829 = !DILocation(line: 3417, column: 21, scope: !6826)
!6830 = !DILocation(line: 3417, column: 29, scope: !6826)
!6831 = !DILocation(line: 3417, column: 34, scope: !6826)
!6832 = !DILocation(line: 3417, column: 26, scope: !6826)
!6833 = !DILocation(line: 3417, column: 44, scope: !6826)
!6834 = !DILocation(line: 3417, column: 47, scope: !6826)
!6835 = !DILocation(line: 3417, column: 55, scope: !6826)
!6836 = !DILocation(line: 3417, column: 60, scope: !6826)
!6837 = !DILocation(line: 3417, column: 52, scope: !6826)
!6838 = !DILocation(line: 3417, column: 7, scope: !6827)
!6839 = !DILocation(line: 3418, column: 4, scope: !6840)
!6840 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 3417, column: 69)
!6841 = !DILocation(line: 3421, column: 7, scope: !6842)
!6842 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 3421, column: 7)
!6843 = !DILocation(line: 3421, column: 12, scope: !6842)
!6844 = !DILocation(line: 3421, column: 7, scope: !6827)
!6845 = !DILocation(line: 3422, column: 8, scope: !6846)
!6846 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 3422, column: 8)
!6847 = distinct !DILexicalBlock(scope: !6842, file: !3, line: 3421, column: 19)
!6848 = !DILocation(line: 3422, column: 13, scope: !6846)
!6849 = !DILocation(line: 3422, column: 18, scope: !6846)
!6850 = !DILocation(line: 3422, column: 8, scope: !6847)
!6851 = !DILocation(line: 3423, column: 19, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6846, file: !3, line: 3422, column: 37)
!6853 = !DILocation(line: 3423, column: 5, scope: !6852)
!6854 = !DILocation(line: 3424, column: 4, scope: !6852)
!6855 = !DILocation(line: 3425, column: 8, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 3425, column: 8)
!6857 = !DILocation(line: 3425, column: 13, scope: !6856)
!6858 = !DILocation(line: 3425, column: 18, scope: !6856)
!6859 = !DILocation(line: 3425, column: 8, scope: !6847)
!6860 = !DILocation(line: 3426, column: 43, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 3425, column: 37)
!6862 = !DILocation(line: 3426, column: 50, scope: !6861)
!6863 = !DILocation(line: 3426, column: 5, scope: !6861)
!6864 = !DILocation(line: 3427, column: 4, scope: !6861)
!6865 = !DILocation(line: 3428, column: 3, scope: !6847)
!6866 = !DILocation(line: 3429, column: 7, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 3429, column: 7)
!6868 = !DILocation(line: 3429, column: 12, scope: !6867)
!6869 = !DILocation(line: 3429, column: 17, scope: !6867)
!6870 = !DILocation(line: 3429, column: 7, scope: !6827)
!6871 = !DILocation(line: 3430, column: 29, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 3429, column: 35)
!6873 = !DILocation(line: 3430, column: 37, scope: !6872)
!6874 = !DILocation(line: 3430, column: 42, scope: !6872)
!6875 = !DILocation(line: 3430, column: 51, scope: !6872)
!6876 = !DILocation(line: 3430, column: 4, scope: !6872)
!6877 = !DILocation(line: 3431, column: 3, scope: !6872)
!6878 = !DILocation(line: 3432, column: 7, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 3432, column: 7)
!6880 = !DILocation(line: 3432, column: 12, scope: !6879)
!6881 = !DILocation(line: 3432, column: 17, scope: !6879)
!6882 = !DILocation(line: 3432, column: 7, scope: !6827)
!6883 = !DILocation(line: 3435, column: 3, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6879, file: !3, line: 3432, column: 36)
!6885 = !DILocation(line: 3436, column: 2, scope: !6827)
!6886 = !DILocation(line: 3416, column: 40, scope: !6823)
!6887 = !DILocation(line: 3416, column: 45, scope: !6823)
!6888 = !DILocation(line: 3416, column: 38, scope: !6823)
!6889 = !DILocation(line: 3416, column: 2, scope: !6823)
!6890 = distinct !{!6890, !6824, !6891}
!6891 = !DILocation(line: 3436, column: 2, scope: !6818)
!6892 = !DILocation(line: 3438, column: 1, scope: !6805)
!6893 = distinct !DISubprogram(name: "free_anim_seq", scope: !3, file: !3, line: 3309, type: !2375, scopeLine: 3310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6894 = !DILocalVariable(name: "seq", arg: 1, scope: !6893, file: !3, line: 3309, type: !204)
!6895 = !DILocation(line: 3309, column: 37, scope: !6893)
!6896 = !DILocation(line: 3311, column: 6, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6893, file: !3, line: 3311, column: 6)
!6898 = !DILocation(line: 3311, column: 11, scope: !6897)
!6899 = !DILocation(line: 3311, column: 6, scope: !6893)
!6900 = !DILocation(line: 3312, column: 17, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 3311, column: 17)
!6902 = !DILocation(line: 3312, column: 22, scope: !6901)
!6903 = !DILocation(line: 3312, column: 3, scope: !6901)
!6904 = !DILocation(line: 3313, column: 3, scope: !6901)
!6905 = !DILocation(line: 3313, column: 8, scope: !6901)
!6906 = !DILocation(line: 3313, column: 13, scope: !6901)
!6907 = !DILocation(line: 3314, column: 2, scope: !6901)
!6908 = !DILocation(line: 3315, column: 1, scope: !6893)
!6909 = distinct !DISubprogram(name: "BKE_sequencer_update_changed_seq_and_deps", scope: !3, file: !3, line: 3483, type: !6910, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{null, !1744, !204, !45, !45}
!6912 = !DILocalVariable(name: "scene", arg: 1, scope: !6909, file: !3, line: 3483, type: !1744)
!6913 = !DILocation(line: 3483, column: 55, scope: !6909)
!6914 = !DILocalVariable(name: "changed_seq", arg: 2, scope: !6909, file: !3, line: 3483, type: !204)
!6915 = !DILocation(line: 3483, column: 72, scope: !6909)
!6916 = !DILocalVariable(name: "len_change", arg: 3, scope: !6909, file: !3, line: 3483, type: !45)
!6917 = !DILocation(line: 3483, column: 89, scope: !6909)
!6918 = !DILocalVariable(name: "ibuf_change", arg: 4, scope: !6909, file: !3, line: 3483, type: !45)
!6919 = !DILocation(line: 3483, column: 105, scope: !6909)
!6920 = !DILocalVariable(name: "ed", scope: !6909, file: !3, line: 3485, type: !2176)
!6921 = !DILocation(line: 3485, column: 11, scope: !6909)
!6922 = !DILocation(line: 3485, column: 42, scope: !6909)
!6923 = !DILocation(line: 3485, column: 16, scope: !6909)
!6924 = !DILocalVariable(name: "seq", scope: !6909, file: !3, line: 3486, type: !204)
!6925 = !DILocation(line: 3486, column: 12, scope: !6909)
!6926 = !DILocation(line: 3488, column: 6, scope: !6927)
!6927 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 3488, column: 6)
!6928 = !DILocation(line: 3488, column: 9, scope: !6927)
!6929 = !DILocation(line: 3488, column: 6, scope: !6909)
!6930 = !DILocation(line: 3488, column: 18, scope: !6927)
!6931 = !DILocation(line: 3490, column: 13, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 3490, column: 2)
!6933 = !DILocation(line: 3490, column: 17, scope: !6932)
!6934 = !DILocation(line: 3490, column: 25, scope: !6932)
!6935 = !DILocation(line: 3490, column: 11, scope: !6932)
!6936 = !DILocation(line: 3490, column: 7, scope: !6932)
!6937 = !DILocation(line: 3490, column: 32, scope: !6938)
!6938 = distinct !DILexicalBlock(scope: !6932, file: !3, line: 3490, column: 2)
!6939 = !DILocation(line: 3490, column: 2, scope: !6932)
!6940 = !DILocation(line: 3491, column: 29, scope: !6938)
!6941 = !DILocation(line: 3491, column: 36, scope: !6938)
!6942 = !DILocation(line: 3491, column: 41, scope: !6938)
!6943 = !DILocation(line: 3491, column: 54, scope: !6938)
!6944 = !DILocation(line: 3491, column: 66, scope: !6938)
!6945 = !DILocation(line: 3491, column: 3, scope: !6938)
!6946 = !DILocation(line: 3490, column: 43, scope: !6938)
!6947 = !DILocation(line: 3490, column: 48, scope: !6938)
!6948 = !DILocation(line: 3490, column: 41, scope: !6938)
!6949 = !DILocation(line: 3490, column: 2, scope: !6938)
!6950 = distinct !{!6950, !6939, !6951}
!6951 = !DILocation(line: 3491, column: 77, scope: !6932)
!6952 = !DILocation(line: 3492, column: 1, scope: !6909)
!6953 = distinct !DISubprogram(name: "update_changed_seq_recurs", scope: !3, file: !3, line: 3440, type: !6954, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!6954 = !DISubroutineType(types: !6955)
!6955 = !{!742, !1744, !204, !204, !45, !45}
!6956 = !DILocalVariable(name: "scene", arg: 1, scope: !6953, file: !3, line: 3440, type: !1744)
!6957 = !DILocation(line: 3440, column: 46, scope: !6953)
!6958 = !DILocalVariable(name: "seq", arg: 2, scope: !6953, file: !3, line: 3440, type: !204)
!6959 = !DILocation(line: 3440, column: 63, scope: !6953)
!6960 = !DILocalVariable(name: "changed_seq", arg: 3, scope: !6953, file: !3, line: 3440, type: !204)
!6961 = !DILocation(line: 3440, column: 78, scope: !6953)
!6962 = !DILocalVariable(name: "len_change", arg: 4, scope: !6953, file: !3, line: 3440, type: !45)
!6963 = !DILocation(line: 3440, column: 95, scope: !6953)
!6964 = !DILocalVariable(name: "ibuf_change", arg: 5, scope: !6953, file: !3, line: 3440, type: !45)
!6965 = !DILocation(line: 3440, column: 111, scope: !6953)
!6966 = !DILocalVariable(name: "subseq", scope: !6953, file: !3, line: 3442, type: !204)
!6967 = !DILocation(line: 3442, column: 12, scope: !6953)
!6968 = !DILocalVariable(name: "free_imbuf", scope: !6953, file: !3, line: 3443, type: !742)
!6969 = !DILocation(line: 3443, column: 7, scope: !6953)
!6970 = !DILocation(line: 3447, column: 6, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3447, column: 6)
!6972 = !DILocation(line: 3447, column: 10, scope: !6971)
!6973 = !DILocation(line: 3447, column: 6, scope: !6953)
!6974 = !DILocation(line: 3448, column: 3, scope: !6971)
!6975 = !DILocation(line: 3450, column: 6, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3450, column: 6)
!6977 = !DILocation(line: 3450, column: 13, scope: !6976)
!6978 = !DILocation(line: 3450, column: 10, scope: !6976)
!6979 = !DILocation(line: 3450, column: 6, scope: !6953)
!6980 = !DILocation(line: 3451, column: 14, scope: !6976)
!6981 = !DILocation(line: 3451, column: 3, scope: !6976)
!6982 = !DILocation(line: 3453, column: 16, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3453, column: 2)
!6984 = !DILocation(line: 3453, column: 21, scope: !6983)
!6985 = !DILocation(line: 3453, column: 29, scope: !6983)
!6986 = !DILocation(line: 3453, column: 14, scope: !6983)
!6987 = !DILocation(line: 3453, column: 7, scope: !6983)
!6988 = !DILocation(line: 3453, column: 36, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 3453, column: 2)
!6990 = !DILocation(line: 3453, column: 2, scope: !6983)
!6991 = !DILocation(line: 3454, column: 33, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 3454, column: 7)
!6993 = !DILocation(line: 3454, column: 40, scope: !6992)
!6994 = !DILocation(line: 3454, column: 48, scope: !6992)
!6995 = !DILocation(line: 3454, column: 61, scope: !6992)
!6996 = !DILocation(line: 3454, column: 73, scope: !6992)
!6997 = !DILocation(line: 3454, column: 7, scope: !6992)
!6998 = !DILocation(line: 3454, column: 7, scope: !6989)
!6999 = !DILocation(line: 3455, column: 15, scope: !6992)
!7000 = !DILocation(line: 3455, column: 4, scope: !6992)
!7001 = !DILocation(line: 3454, column: 84, scope: !6992)
!7002 = !DILocation(line: 3453, column: 53, scope: !6989)
!7003 = !DILocation(line: 3453, column: 61, scope: !6989)
!7004 = !DILocation(line: 3453, column: 51, scope: !6989)
!7005 = !DILocation(line: 3453, column: 2, scope: !6989)
!7006 = distinct !{!7006, !6990, !7007}
!7007 = !DILocation(line: 3455, column: 17, scope: !6983)
!7008 = !DILocation(line: 3457, column: 6, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3457, column: 6)
!7010 = !DILocation(line: 3457, column: 11, scope: !7009)
!7011 = !DILocation(line: 3457, column: 6, scope: !6953)
!7012 = !DILocation(line: 3458, column: 33, scope: !7013)
!7013 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 3458, column: 7)
!7014 = !DILocation(line: 3458, column: 40, scope: !7013)
!7015 = !DILocation(line: 3458, column: 45, scope: !7013)
!7016 = !DILocation(line: 3458, column: 51, scope: !7013)
!7017 = !DILocation(line: 3458, column: 64, scope: !7013)
!7018 = !DILocation(line: 3458, column: 76, scope: !7013)
!7019 = !DILocation(line: 3458, column: 7, scope: !7013)
!7020 = !DILocation(line: 3458, column: 7, scope: !7009)
!7021 = !DILocation(line: 3459, column: 15, scope: !7013)
!7022 = !DILocation(line: 3459, column: 4, scope: !7013)
!7023 = !DILocation(line: 3458, column: 87, scope: !7013)
!7024 = !DILocation(line: 3460, column: 6, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3460, column: 6)
!7026 = !DILocation(line: 3460, column: 11, scope: !7025)
!7027 = !DILocation(line: 3460, column: 16, scope: !7025)
!7028 = !DILocation(line: 3460, column: 20, scope: !7025)
!7029 = !DILocation(line: 3460, column: 25, scope: !7025)
!7030 = !DILocation(line: 3460, column: 33, scope: !7025)
!7031 = !DILocation(line: 3460, column: 38, scope: !7025)
!7032 = !DILocation(line: 3460, column: 30, scope: !7025)
!7033 = !DILocation(line: 3460, column: 6, scope: !6953)
!7034 = !DILocation(line: 3461, column: 33, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 3461, column: 7)
!7036 = !DILocation(line: 3461, column: 40, scope: !7035)
!7037 = !DILocation(line: 3461, column: 45, scope: !7035)
!7038 = !DILocation(line: 3461, column: 51, scope: !7035)
!7039 = !DILocation(line: 3461, column: 64, scope: !7035)
!7040 = !DILocation(line: 3461, column: 76, scope: !7035)
!7041 = !DILocation(line: 3461, column: 7, scope: !7035)
!7042 = !DILocation(line: 3461, column: 7, scope: !7025)
!7043 = !DILocation(line: 3462, column: 15, scope: !7035)
!7044 = !DILocation(line: 3462, column: 4, scope: !7035)
!7045 = !DILocation(line: 3461, column: 87, scope: !7035)
!7046 = !DILocation(line: 3463, column: 6, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3463, column: 6)
!7048 = !DILocation(line: 3463, column: 11, scope: !7047)
!7049 = !DILocation(line: 3463, column: 16, scope: !7047)
!7050 = !DILocation(line: 3463, column: 20, scope: !7047)
!7051 = !DILocation(line: 3463, column: 25, scope: !7047)
!7052 = !DILocation(line: 3463, column: 33, scope: !7047)
!7053 = !DILocation(line: 3463, column: 38, scope: !7047)
!7054 = !DILocation(line: 3463, column: 30, scope: !7047)
!7055 = !DILocation(line: 3463, column: 44, scope: !7047)
!7056 = !DILocation(line: 3463, column: 48, scope: !7047)
!7057 = !DILocation(line: 3463, column: 53, scope: !7047)
!7058 = !DILocation(line: 3463, column: 61, scope: !7047)
!7059 = !DILocation(line: 3463, column: 66, scope: !7047)
!7060 = !DILocation(line: 3463, column: 58, scope: !7047)
!7061 = !DILocation(line: 3463, column: 6, scope: !6953)
!7062 = !DILocation(line: 3464, column: 33, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7047, file: !3, line: 3464, column: 7)
!7064 = !DILocation(line: 3464, column: 40, scope: !7063)
!7065 = !DILocation(line: 3464, column: 45, scope: !7063)
!7066 = !DILocation(line: 3464, column: 51, scope: !7063)
!7067 = !DILocation(line: 3464, column: 64, scope: !7063)
!7068 = !DILocation(line: 3464, column: 76, scope: !7063)
!7069 = !DILocation(line: 3464, column: 7, scope: !7063)
!7070 = !DILocation(line: 3464, column: 7, scope: !7047)
!7071 = !DILocation(line: 3465, column: 15, scope: !7063)
!7072 = !DILocation(line: 3465, column: 4, scope: !7063)
!7073 = !DILocation(line: 3464, column: 87, scope: !7063)
!7074 = !DILocation(line: 3467, column: 6, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3467, column: 6)
!7076 = !DILocation(line: 3467, column: 6, scope: !6953)
!7077 = !DILocation(line: 3468, column: 7, scope: !7078)
!7078 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 3468, column: 7)
!7079 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 3467, column: 18)
!7080 = !DILocation(line: 3468, column: 7, scope: !7079)
!7081 = !DILocation(line: 3469, column: 8, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 3469, column: 8)
!7083 = distinct !DILexicalBlock(scope: !7078, file: !3, line: 3468, column: 20)
!7084 = !DILocation(line: 3469, column: 13, scope: !7082)
!7085 = !DILocation(line: 3469, column: 18, scope: !7082)
!7086 = !DILocation(line: 3469, column: 8, scope: !7083)
!7087 = !DILocation(line: 3470, column: 19, scope: !7082)
!7088 = !DILocation(line: 3470, column: 5, scope: !7082)
!7089 = !DILocation(line: 3471, column: 8, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 3471, column: 8)
!7091 = !DILocation(line: 3471, column: 13, scope: !7090)
!7092 = !DILocation(line: 3471, column: 18, scope: !7090)
!7093 = !DILocation(line: 3471, column: 8, scope: !7083)
!7094 = !DILocation(line: 3472, column: 43, scope: !7095)
!7095 = distinct !DILexicalBlock(scope: !7090, file: !3, line: 3471, column: 37)
!7096 = !DILocation(line: 3472, column: 50, scope: !7095)
!7097 = !DILocation(line: 3472, column: 5, scope: !7095)
!7098 = !DILocation(line: 3473, column: 4, scope: !7095)
!7099 = !DILocation(line: 3474, column: 3, scope: !7083)
!7100 = !DILocation(line: 3476, column: 7, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 3476, column: 7)
!7102 = !DILocation(line: 3476, column: 7, scope: !7079)
!7103 = !DILocation(line: 3477, column: 22, scope: !7101)
!7104 = !DILocation(line: 3477, column: 29, scope: !7101)
!7105 = !DILocation(line: 3477, column: 4, scope: !7101)
!7106 = !DILocation(line: 3478, column: 2, scope: !7079)
!7107 = !DILocation(line: 3480, column: 9, scope: !6953)
!7108 = !DILocation(line: 3480, column: 2, scope: !6953)
!7109 = !DILocation(line: 3481, column: 1, scope: !6953)
!7110 = distinct !DISubprogram(name: "BKE_sequence_tx_get_final_left", scope: !3, file: !3, line: 3509, type: !7111, scopeLine: 3510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7111 = !DISubroutineType(types: !7112)
!7112 = !{!45, !204, !742}
!7113 = !DILocalVariable(name: "seq", arg: 1, scope: !7110, file: !3, line: 3509, type: !204)
!7114 = !DILocation(line: 3509, column: 46, scope: !7110)
!7115 = !DILocalVariable(name: "metaclip", arg: 2, scope: !7110, file: !3, line: 3509, type: !742)
!7116 = !DILocation(line: 3509, column: 56, scope: !7110)
!7117 = !DILocation(line: 3511, column: 6, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3511, column: 6)
!7119 = !DILocation(line: 3511, column: 15, scope: !7118)
!7120 = !DILocation(line: 3511, column: 18, scope: !7118)
!7121 = !DILocation(line: 3511, column: 23, scope: !7118)
!7122 = !DILocation(line: 3511, column: 6, scope: !7110)
!7123 = !DILocation(line: 3513, column: 48, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 3511, column: 28)
!7125 = !DILocation(line: 3513, column: 17, scope: !7124)
!7126 = !DILocation(line: 3513, column: 104, scope: !7124)
!7127 = !DILocation(line: 3513, column: 109, scope: !7124)
!7128 = !DILocation(line: 3513, column: 92, scope: !7124)
!7129 = !DILocation(line: 3513, column: 61, scope: !7124)
!7130 = !DILocation(line: 3513, column: 10, scope: !7124)
!7131 = !DILocation(line: 3513, column: 3, scope: !7124)
!7132 = !DILocation(line: 3516, column: 11, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 3515, column: 7)
!7134 = !DILocation(line: 3516, column: 16, scope: !7133)
!7135 = !DILocation(line: 3516, column: 24, scope: !7133)
!7136 = !DILocation(line: 3516, column: 29, scope: !7133)
!7137 = !DILocation(line: 3516, column: 22, scope: !7133)
!7138 = !DILocation(line: 3516, column: 43, scope: !7133)
!7139 = !DILocation(line: 3516, column: 48, scope: !7133)
!7140 = !DILocation(line: 3516, column: 41, scope: !7133)
!7141 = !DILocation(line: 3516, column: 3, scope: !7133)
!7142 = !DILocation(line: 3519, column: 1, scope: !7110)
!7143 = distinct !DISubprogram(name: "BKE_sequence_tx_get_final_right", scope: !3, file: !3, line: 3520, type: !7111, scopeLine: 3521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7144 = !DILocalVariable(name: "seq", arg: 1, scope: !7143, file: !3, line: 3520, type: !204)
!7145 = !DILocation(line: 3520, column: 47, scope: !7143)
!7146 = !DILocalVariable(name: "metaclip", arg: 2, scope: !7143, file: !3, line: 3520, type: !742)
!7147 = !DILocation(line: 3520, column: 57, scope: !7143)
!7148 = !DILocation(line: 3522, column: 6, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7143, file: !3, line: 3522, column: 6)
!7150 = !DILocation(line: 3522, column: 15, scope: !7149)
!7151 = !DILocation(line: 3522, column: 18, scope: !7149)
!7152 = !DILocation(line: 3522, column: 23, scope: !7149)
!7153 = !DILocation(line: 3522, column: 6, scope: !7143)
!7154 = !DILocation(line: 3524, column: 49, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 3522, column: 28)
!7156 = !DILocation(line: 3524, column: 17, scope: !7155)
!7157 = !DILocation(line: 3524, column: 106, scope: !7155)
!7158 = !DILocation(line: 3524, column: 111, scope: !7155)
!7159 = !DILocation(line: 3524, column: 94, scope: !7155)
!7160 = !DILocation(line: 3524, column: 62, scope: !7155)
!7161 = !DILocation(line: 3524, column: 10, scope: !7155)
!7162 = !DILocation(line: 3524, column: 3, scope: !7155)
!7163 = !DILocation(line: 3527, column: 12, scope: !7164)
!7164 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 3526, column: 7)
!7165 = !DILocation(line: 3527, column: 17, scope: !7164)
!7166 = !DILocation(line: 3527, column: 25, scope: !7164)
!7167 = !DILocation(line: 3527, column: 30, scope: !7164)
!7168 = !DILocation(line: 3527, column: 23, scope: !7164)
!7169 = !DILocation(line: 3527, column: 37, scope: !7164)
!7170 = !DILocation(line: 3527, column: 42, scope: !7164)
!7171 = !DILocation(line: 3527, column: 35, scope: !7164)
!7172 = !DILocation(line: 3527, column: 54, scope: !7164)
!7173 = !DILocation(line: 3527, column: 59, scope: !7164)
!7174 = !DILocation(line: 3527, column: 52, scope: !7164)
!7175 = !DILocation(line: 3527, column: 3, scope: !7164)
!7176 = !DILocation(line: 3529, column: 1, scope: !7143)
!7177 = distinct !DISubprogram(name: "min_ii", scope: !3482, file: !3482, line: 211, type: !6010, scopeLine: 212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7178 = !DILocalVariable(name: "a", arg: 1, scope: !7177, file: !3482, line: 211, type: !45)
!7179 = !DILocation(line: 211, column: 24, scope: !7177)
!7180 = !DILocalVariable(name: "b", arg: 2, scope: !7177, file: !3482, line: 211, type: !45)
!7181 = !DILocation(line: 211, column: 31, scope: !7177)
!7182 = !DILocation(line: 213, column: 10, scope: !7177)
!7183 = !DILocation(line: 213, column: 14, scope: !7177)
!7184 = !DILocation(line: 213, column: 12, scope: !7177)
!7185 = !DILocation(line: 213, column: 9, scope: !7177)
!7186 = !DILocation(line: 213, column: 19, scope: !7177)
!7187 = !DILocation(line: 213, column: 23, scope: !7177)
!7188 = !DILocation(line: 213, column: 2, scope: !7177)
!7189 = distinct !DISubprogram(name: "BKE_sequence_single_check", scope: !3, file: !3, line: 3557, type: !7190, scopeLine: 3558, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7190 = !DISubroutineType(types: !7191)
!7191 = !{!742, !204}
!7192 = !DILocalVariable(name: "seq", arg: 1, scope: !7189, file: !3, line: 3557, type: !204)
!7193 = !DILocation(line: 3557, column: 42, scope: !7189)
!7194 = !DILocation(line: 3559, column: 11, scope: !7189)
!7195 = !DILocation(line: 3559, column: 16, scope: !7189)
!7196 = !DILocation(line: 3559, column: 20, scope: !7189)
!7197 = !DILocation(line: 3559, column: 26, scope: !7189)
!7198 = !DILocation(line: 3560, column: 11, scope: !7189)
!7199 = !DILocation(line: 3560, column: 16, scope: !7189)
!7200 = !DILocation(line: 3560, column: 21, scope: !7189)
!7201 = !DILocation(line: 3560, column: 39, scope: !7189)
!7202 = !DILocation(line: 3561, column: 13, scope: !7189)
!7203 = !DILocation(line: 3561, column: 18, scope: !7189)
!7204 = !DILocation(line: 3561, column: 23, scope: !7189)
!7205 = !DILocation(line: 3561, column: 42, scope: !7189)
!7206 = !DILocation(line: 3562, column: 47, scope: !7189)
!7207 = !DILocation(line: 3562, column: 52, scope: !7189)
!7208 = !DILocation(line: 3562, column: 12, scope: !7189)
!7209 = !DILocation(line: 3562, column: 58, scope: !7189)
!7210 = !DILocation(line: 0, scope: !7189)
!7211 = !DILocation(line: 3559, column: 9, scope: !7189)
!7212 = !DILocation(line: 3559, column: 2, scope: !7189)
!7213 = distinct !DISubprogram(name: "BKE_sequence_base_isolated_sel_check", scope: !3, file: !3, line: 3566, type: !7214, scopeLine: 3567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7214 = !DISubroutineType(types: !7215)
!7215 = !{!742, !202, !742}
!7216 = !DILocalVariable(name: "seqbase", arg: 1, scope: !7213, file: !3, line: 3566, type: !202)
!7217 = !DILocation(line: 3566, column: 53, scope: !7213)
!7218 = !DILocalVariable(name: "one_only", arg: 2, scope: !7213, file: !3, line: 3566, type: !742)
!7219 = !DILocation(line: 3566, column: 67, scope: !7213)
!7220 = !DILocalVariable(name: "seq", scope: !7213, file: !3, line: 3568, type: !204)
!7221 = !DILocation(line: 3568, column: 12, scope: !7213)
!7222 = !DILocalVariable(name: "ok", scope: !7213, file: !3, line: 3570, type: !742)
!7223 = !DILocation(line: 3570, column: 7, scope: !7213)
!7224 = !DILocalVariable(name: "first", scope: !7213, file: !3, line: 3572, type: !742)
!7225 = !DILocation(line: 3572, column: 7, scope: !7213)
!7226 = !DILocation(line: 3574, column: 13, scope: !7227)
!7227 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 3574, column: 2)
!7228 = !DILocation(line: 3574, column: 22, scope: !7227)
!7229 = !DILocation(line: 3574, column: 11, scope: !7227)
!7230 = !DILocation(line: 3574, column: 7, scope: !7227)
!7231 = !DILocation(line: 3574, column: 29, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7227, file: !3, line: 3574, column: 2)
!7233 = !DILocation(line: 3574, column: 2, scope: !7227)
!7234 = !DILocation(line: 3575, column: 7, scope: !7235)
!7235 = distinct !DILexicalBlock(scope: !7236, file: !3, line: 3575, column: 7)
!7236 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 3574, column: 51)
!7237 = !DILocation(line: 3575, column: 12, scope: !7235)
!7238 = !DILocation(line: 3575, column: 17, scope: !7235)
!7239 = !DILocation(line: 3575, column: 7, scope: !7236)
!7240 = !DILocation(line: 3576, column: 8, scope: !7241)
!7241 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 3576, column: 8)
!7242 = distinct !DILexicalBlock(scope: !7235, file: !3, line: 3575, column: 27)
!7243 = !DILocation(line: 3576, column: 8, scope: !7242)
!7244 = !DILocation(line: 3577, column: 8, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 3576, column: 18)
!7246 = !DILocation(line: 3578, column: 5, scope: !7245)
!7247 = !DILocation(line: 3581, column: 9, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 3581, column: 9)
!7249 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 3580, column: 9)
!7250 = !DILocation(line: 3581, column: 9, scope: !7249)
!7251 = !DILocation(line: 3582, column: 9, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 3581, column: 16)
!7253 = !DILocation(line: 3583, column: 6, scope: !7252)
!7254 = !DILocation(line: 3586, column: 12, scope: !7248)
!7255 = !DILocation(line: 3588, column: 3, scope: !7242)
!7256 = !DILocation(line: 3589, column: 2, scope: !7236)
!7257 = !DILocation(line: 3574, column: 40, scope: !7232)
!7258 = !DILocation(line: 3574, column: 45, scope: !7232)
!7259 = !DILocation(line: 3574, column: 38, scope: !7232)
!7260 = !DILocation(line: 3574, column: 2, scope: !7232)
!7261 = distinct !{!7261, !7233, !7262}
!7262 = !DILocation(line: 3589, column: 2, scope: !7227)
!7263 = !DILocation(line: 3591, column: 6, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 3591, column: 6)
!7265 = !DILocation(line: 3591, column: 9, scope: !7264)
!7266 = !DILocation(line: 3591, column: 6, scope: !7213)
!7267 = !DILocation(line: 3592, column: 3, scope: !7264)
!7268 = !DILocation(line: 3595, column: 13, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 3595, column: 2)
!7270 = !DILocation(line: 3595, column: 22, scope: !7269)
!7271 = !DILocation(line: 3595, column: 11, scope: !7269)
!7272 = !DILocation(line: 3595, column: 7, scope: !7269)
!7273 = !DILocation(line: 3595, column: 29, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7269, file: !3, line: 3595, column: 2)
!7275 = !DILocation(line: 3595, column: 2, scope: !7269)
!7276 = !DILocation(line: 3596, column: 8, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 3596, column: 7)
!7278 = distinct !DILexicalBlock(scope: !7274, file: !3, line: 3595, column: 51)
!7279 = !DILocation(line: 3596, column: 13, scope: !7277)
!7280 = !DILocation(line: 3596, column: 18, scope: !7277)
!7281 = !DILocation(line: 3596, column: 37, scope: !7277)
!7282 = !DILocation(line: 3596, column: 7, scope: !7278)
!7283 = !DILocation(line: 3597, column: 4, scope: !7277)
!7284 = !DILocation(line: 3599, column: 7, scope: !7285)
!7285 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 3599, column: 7)
!7286 = !DILocation(line: 3599, column: 12, scope: !7285)
!7287 = !DILocation(line: 3599, column: 17, scope: !7285)
!7288 = !DILocation(line: 3599, column: 7, scope: !7278)
!7289 = !DILocation(line: 3600, column: 9, scope: !7290)
!7290 = distinct !DILexicalBlock(scope: !7291, file: !3, line: 3600, column: 8)
!7291 = distinct !DILexicalBlock(scope: !7285, file: !3, line: 3599, column: 27)
!7292 = !DILocation(line: 3600, column: 14, scope: !7290)
!7293 = !DILocation(line: 3600, column: 19, scope: !7290)
!7294 = !DILocation(line: 3600, column: 23, scope: !7290)
!7295 = !DILocation(line: 3600, column: 28, scope: !7290)
!7296 = !DILocation(line: 3600, column: 34, scope: !7290)
!7297 = !DILocation(line: 3600, column: 39, scope: !7290)
!7298 = !DILocation(line: 3600, column: 49, scope: !7290)
!7299 = !DILocation(line: 3600, column: 55, scope: !7290)
!7300 = !DILocation(line: 3601, column: 9, scope: !7290)
!7301 = !DILocation(line: 3601, column: 14, scope: !7290)
!7302 = !DILocation(line: 3601, column: 19, scope: !7290)
!7303 = !DILocation(line: 3601, column: 23, scope: !7290)
!7304 = !DILocation(line: 3601, column: 28, scope: !7290)
!7305 = !DILocation(line: 3601, column: 34, scope: !7290)
!7306 = !DILocation(line: 3601, column: 39, scope: !7290)
!7307 = !DILocation(line: 3601, column: 49, scope: !7290)
!7308 = !DILocation(line: 3601, column: 55, scope: !7290)
!7309 = !DILocation(line: 3602, column: 9, scope: !7290)
!7310 = !DILocation(line: 3602, column: 14, scope: !7290)
!7311 = !DILocation(line: 3602, column: 19, scope: !7290)
!7312 = !DILocation(line: 3602, column: 23, scope: !7290)
!7313 = !DILocation(line: 3602, column: 28, scope: !7290)
!7314 = !DILocation(line: 3602, column: 34, scope: !7290)
!7315 = !DILocation(line: 3602, column: 39, scope: !7290)
!7316 = !DILocation(line: 3602, column: 49, scope: !7290)
!7317 = !DILocation(line: 3600, column: 8, scope: !7291)
!7318 = !DILocation(line: 3604, column: 5, scope: !7319)
!7319 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 3603, column: 4)
!7320 = !DILocation(line: 3606, column: 3, scope: !7291)
!7321 = !DILocation(line: 3608, column: 9, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7323, file: !3, line: 3608, column: 8)
!7323 = distinct !DILexicalBlock(scope: !7285, file: !3, line: 3607, column: 8)
!7324 = !DILocation(line: 3608, column: 14, scope: !7322)
!7325 = !DILocation(line: 3608, column: 19, scope: !7322)
!7326 = !DILocation(line: 3608, column: 23, scope: !7322)
!7327 = !DILocation(line: 3608, column: 28, scope: !7322)
!7328 = !DILocation(line: 3608, column: 34, scope: !7322)
!7329 = !DILocation(line: 3608, column: 39, scope: !7322)
!7330 = !DILocation(line: 3608, column: 50, scope: !7322)
!7331 = !DILocation(line: 3609, column: 9, scope: !7322)
!7332 = !DILocation(line: 3609, column: 14, scope: !7322)
!7333 = !DILocation(line: 3609, column: 19, scope: !7322)
!7334 = !DILocation(line: 3609, column: 23, scope: !7322)
!7335 = !DILocation(line: 3609, column: 28, scope: !7322)
!7336 = !DILocation(line: 3609, column: 34, scope: !7322)
!7337 = !DILocation(line: 3609, column: 39, scope: !7322)
!7338 = !DILocation(line: 3609, column: 50, scope: !7322)
!7339 = !DILocation(line: 3610, column: 9, scope: !7322)
!7340 = !DILocation(line: 3610, column: 14, scope: !7322)
!7341 = !DILocation(line: 3610, column: 19, scope: !7322)
!7342 = !DILocation(line: 3610, column: 23, scope: !7322)
!7343 = !DILocation(line: 3610, column: 28, scope: !7322)
!7344 = !DILocation(line: 3610, column: 34, scope: !7322)
!7345 = !DILocation(line: 3610, column: 39, scope: !7322)
!7346 = !DILocation(line: 3608, column: 8, scope: !7323)
!7347 = !DILocation(line: 3612, column: 5, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7322, file: !3, line: 3611, column: 4)
!7349 = !DILocation(line: 3615, column: 2, scope: !7278)
!7350 = !DILocation(line: 3595, column: 40, scope: !7274)
!7351 = !DILocation(line: 3595, column: 45, scope: !7274)
!7352 = !DILocation(line: 3595, column: 38, scope: !7274)
!7353 = !DILocation(line: 3595, column: 2, scope: !7274)
!7354 = distinct !{!7354, !7275, !7355}
!7355 = !DILocation(line: 3615, column: 2, scope: !7269)
!7356 = !DILocation(line: 3617, column: 2, scope: !7213)
!7357 = !DILocation(line: 3618, column: 1, scope: !7213)
!7358 = distinct !DISubprogram(name: "BKE_sequence_tx_handle_xlimits", scope: !3, file: !3, line: 3622, type: !7359, scopeLine: 3623, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7359 = !DISubroutineType(types: !7360)
!7360 = !{null, !204, !45, !45}
!7361 = !DILocalVariable(name: "seq", arg: 1, scope: !7358, file: !3, line: 3622, type: !204)
!7362 = !DILocation(line: 3622, column: 47, scope: !7358)
!7363 = !DILocalVariable(name: "leftflag", arg: 2, scope: !7358, file: !3, line: 3622, type: !45)
!7364 = !DILocation(line: 3622, column: 56, scope: !7358)
!7365 = !DILocalVariable(name: "rightflag", arg: 3, scope: !7358, file: !3, line: 3622, type: !45)
!7366 = !DILocation(line: 3622, column: 70, scope: !7358)
!7367 = !DILocation(line: 3624, column: 6, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 3624, column: 6)
!7369 = !DILocation(line: 3624, column: 6, scope: !7358)
!7370 = !DILocation(line: 3625, column: 38, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7372, file: !3, line: 3625, column: 7)
!7372 = distinct !DILexicalBlock(scope: !7368, file: !3, line: 3624, column: 16)
!7373 = !DILocation(line: 3625, column: 7, scope: !7371)
!7374 = !DILocation(line: 3625, column: 85, scope: !7371)
!7375 = !DILocation(line: 3625, column: 53, scope: !7371)
!7376 = !DILocation(line: 3625, column: 50, scope: !7371)
!7377 = !DILocation(line: 3625, column: 7, scope: !7372)
!7378 = !DILocation(line: 3626, column: 35, scope: !7379)
!7379 = distinct !DILexicalBlock(scope: !7371, file: !3, line: 3625, column: 98)
!7380 = !DILocation(line: 3626, column: 72, scope: !7379)
!7381 = !DILocation(line: 3626, column: 40, scope: !7379)
!7382 = !DILocation(line: 3626, column: 84, scope: !7379)
!7383 = !DILocation(line: 3626, column: 4, scope: !7379)
!7384 = !DILocation(line: 3627, column: 3, scope: !7379)
!7385 = !DILocation(line: 3629, column: 33, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7372, file: !3, line: 3629, column: 7)
!7387 = !DILocation(line: 3629, column: 7, scope: !7386)
!7388 = !DILocation(line: 3629, column: 38, scope: !7386)
!7389 = !DILocation(line: 3629, column: 7, scope: !7372)
!7390 = !DILocation(line: 3630, column: 39, scope: !7391)
!7391 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 3630, column: 8)
!7392 = distinct !DILexicalBlock(scope: !7386, file: !3, line: 3629, column: 44)
!7393 = !DILocation(line: 3630, column: 8, scope: !7391)
!7394 = !DILocation(line: 3630, column: 69, scope: !7391)
!7395 = !DILocation(line: 3630, column: 54, scope: !7391)
!7396 = !DILocation(line: 3630, column: 51, scope: !7391)
!7397 = !DILocation(line: 3630, column: 8, scope: !7392)
!7398 = !DILocation(line: 3631, column: 36, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7391, file: !3, line: 3630, column: 75)
!7400 = !DILocation(line: 3631, column: 56, scope: !7399)
!7401 = !DILocation(line: 3631, column: 41, scope: !7399)
!7402 = !DILocation(line: 3631, column: 61, scope: !7399)
!7403 = !DILocation(line: 3631, column: 5, scope: !7399)
!7404 = !DILocation(line: 3632, column: 4, scope: !7399)
!7405 = !DILocation(line: 3643, column: 3, scope: !7392)
!7406 = !DILocation(line: 3644, column: 2, scope: !7372)
!7407 = !DILocation(line: 3646, column: 6, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 3646, column: 6)
!7409 = !DILocation(line: 3646, column: 6, scope: !7358)
!7410 = !DILocation(line: 3647, column: 39, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 3647, column: 7)
!7412 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 3646, column: 17)
!7413 = !DILocation(line: 3647, column: 7, scope: !7411)
!7414 = !DILocation(line: 3647, column: 85, scope: !7411)
!7415 = !DILocation(line: 3647, column: 54, scope: !7411)
!7416 = !DILocation(line: 3647, column: 51, scope: !7411)
!7417 = !DILocation(line: 3647, column: 7, scope: !7412)
!7418 = !DILocation(line: 3648, column: 36, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 3647, column: 98)
!7420 = !DILocation(line: 3648, column: 72, scope: !7419)
!7421 = !DILocation(line: 3648, column: 41, scope: !7419)
!7422 = !DILocation(line: 3648, column: 84, scope: !7419)
!7423 = !DILocation(line: 3648, column: 4, scope: !7419)
!7424 = !DILocation(line: 3649, column: 3, scope: !7419)
!7425 = !DILocation(line: 3651, column: 33, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 3651, column: 7)
!7427 = !DILocation(line: 3651, column: 7, scope: !7426)
!7428 = !DILocation(line: 3651, column: 38, scope: !7426)
!7429 = !DILocation(line: 3651, column: 7, scope: !7412)
!7430 = !DILocation(line: 3652, column: 40, scope: !7431)
!7431 = distinct !DILexicalBlock(scope: !7432, file: !3, line: 3652, column: 8)
!7432 = distinct !DILexicalBlock(scope: !7426, file: !3, line: 3651, column: 44)
!7433 = !DILocation(line: 3652, column: 8, scope: !7431)
!7434 = !DILocation(line: 3652, column: 72, scope: !7431)
!7435 = !DILocation(line: 3652, column: 55, scope: !7431)
!7436 = !DILocation(line: 3652, column: 52, scope: !7431)
!7437 = !DILocation(line: 3652, column: 8, scope: !7432)
!7438 = !DILocation(line: 3653, column: 37, scope: !7439)
!7439 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 3652, column: 78)
!7440 = !DILocation(line: 3653, column: 59, scope: !7439)
!7441 = !DILocation(line: 3653, column: 42, scope: !7439)
!7442 = !DILocation(line: 3653, column: 64, scope: !7439)
!7443 = !DILocation(line: 3653, column: 5, scope: !7439)
!7444 = !DILocation(line: 3654, column: 4, scope: !7439)
!7445 = !DILocation(line: 3655, column: 3, scope: !7432)
!7446 = !DILocation(line: 3656, column: 2, scope: !7412)
!7447 = !DILocation(line: 3659, column: 6, scope: !7448)
!7448 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 3659, column: 6)
!7449 = !DILocation(line: 3659, column: 11, scope: !7448)
!7450 = !DILocation(line: 3659, column: 16, scope: !7448)
!7451 = !DILocation(line: 3659, column: 6, scope: !7358)
!7452 = !DILocation(line: 3660, column: 3, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7448, file: !3, line: 3659, column: 39)
!7454 = !DILocation(line: 3660, column: 8, scope: !7453)
!7455 = !DILocation(line: 3660, column: 19, scope: !7453)
!7456 = !DILocation(line: 3661, column: 3, scope: !7453)
!7457 = !DILocation(line: 3661, column: 8, scope: !7453)
!7458 = !DILocation(line: 3661, column: 17, scope: !7453)
!7459 = !DILocation(line: 3662, column: 2, scope: !7453)
!7460 = !DILocation(line: 3663, column: 1, scope: !7358)
!7461 = distinct !DISubprogram(name: "seq_tx_get_end", scope: !3, file: !3, line: 3504, type: !7462, scopeLine: 3505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7462 = !DISubroutineType(types: !7463)
!7463 = !{!45, !204}
!7464 = !DILocalVariable(name: "seq", arg: 1, scope: !7461, file: !3, line: 3504, type: !204)
!7465 = !DILocation(line: 3504, column: 37, scope: !7461)
!7466 = !DILocation(line: 3506, column: 9, scope: !7461)
!7467 = !DILocation(line: 3506, column: 14, scope: !7461)
!7468 = !DILocation(line: 3506, column: 22, scope: !7461)
!7469 = !DILocation(line: 3506, column: 27, scope: !7461)
!7470 = !DILocation(line: 3506, column: 20, scope: !7461)
!7471 = !DILocation(line: 3506, column: 2, scope: !7461)
!7472 = distinct !DISubprogram(name: "seq_tx_get_start", scope: !3, file: !3, line: 3500, type: !7462, scopeLine: 3501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7473 = !DILocalVariable(name: "seq", arg: 1, scope: !7472, file: !3, line: 3500, type: !204)
!7474 = !DILocation(line: 3500, column: 39, scope: !7472)
!7475 = !DILocation(line: 3502, column: 9, scope: !7472)
!7476 = !DILocation(line: 3502, column: 14, scope: !7472)
!7477 = !DILocation(line: 3502, column: 2, scope: !7472)
!7478 = distinct !DISubprogram(name: "BKE_sequence_tx_test", scope: !3, file: !3, line: 3683, type: !7190, scopeLine: 3684, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7479 = !DILocalVariable(name: "seq", arg: 1, scope: !7478, file: !3, line: 3683, type: !204)
!7480 = !DILocation(line: 3683, column: 37, scope: !7478)
!7481 = !DILocation(line: 3685, column: 10, scope: !7478)
!7482 = !DILocation(line: 3685, column: 15, scope: !7478)
!7483 = !DILocation(line: 3685, column: 20, scope: !7478)
!7484 = !DILocation(line: 3685, column: 39, scope: !7478)
!7485 = !DILocation(line: 3685, column: 78, scope: !7478)
!7486 = !DILocation(line: 3685, column: 83, scope: !7478)
!7487 = !DILocation(line: 3685, column: 43, scope: !7478)
!7488 = !DILocation(line: 3685, column: 89, scope: !7478)
!7489 = !DILocation(line: 3685, column: 9, scope: !7478)
!7490 = !DILocation(line: 3685, column: 2, scope: !7478)
!7491 = distinct !DISubprogram(name: "BKE_sequence_test_overlap", scope: !3, file: !3, line: 3694, type: !7492, scopeLine: 3695, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7492 = !DISubroutineType(types: !7493)
!7493 = !{!742, !202, !204}
!7494 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !7491, file: !3, line: 3694, type: !202)
!7495 = !DILocation(line: 3694, column: 42, scope: !7491)
!7496 = !DILocalVariable(name: "test", arg: 2, scope: !7491, file: !3, line: 3694, type: !204)
!7497 = !DILocation(line: 3694, column: 62, scope: !7491)
!7498 = !DILocalVariable(name: "seq", scope: !7491, file: !3, line: 3696, type: !204)
!7499 = !DILocation(line: 3696, column: 12, scope: !7491)
!7500 = !DILocation(line: 3698, column: 8, scope: !7491)
!7501 = !DILocation(line: 3698, column: 18, scope: !7491)
!7502 = !DILocation(line: 3698, column: 6, scope: !7491)
!7503 = !DILocation(line: 3699, column: 2, scope: !7491)
!7504 = !DILocation(line: 3699, column: 9, scope: !7491)
!7505 = !DILocation(line: 3700, column: 19, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7507, file: !3, line: 3700, column: 7)
!7507 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 3699, column: 14)
!7508 = !DILocation(line: 3700, column: 25, scope: !7506)
!7509 = !DILocation(line: 3700, column: 7, scope: !7506)
!7510 = !DILocation(line: 3700, column: 7, scope: !7507)
!7511 = !DILocation(line: 3701, column: 4, scope: !7506)
!7512 = !DILocation(line: 3703, column: 9, scope: !7507)
!7513 = !DILocation(line: 3703, column: 14, scope: !7507)
!7514 = !DILocation(line: 3703, column: 7, scope: !7507)
!7515 = distinct !{!7515, !7503, !7516}
!7516 = !DILocation(line: 3704, column: 2, scope: !7491)
!7517 = !DILocation(line: 3705, column: 2, scope: !7491)
!7518 = !DILocation(line: 3706, column: 1, scope: !7491)
!7519 = distinct !DISubprogram(name: "seq_overlap", scope: !3, file: !3, line: 3688, type: !6656, scopeLine: 3689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7520 = !DILocalVariable(name: "seq1", arg: 1, scope: !7519, file: !3, line: 3688, type: !204)
!7521 = !DILocation(line: 3688, column: 35, scope: !7519)
!7522 = !DILocalVariable(name: "seq2", arg: 2, scope: !7519, file: !3, line: 3688, type: !204)
!7523 = !DILocation(line: 3688, column: 51, scope: !7519)
!7524 = !DILocation(line: 3690, column: 10, scope: !7519)
!7525 = !DILocation(line: 3690, column: 18, scope: !7519)
!7526 = !DILocation(line: 3690, column: 15, scope: !7519)
!7527 = !DILocation(line: 3690, column: 23, scope: !7519)
!7528 = !DILocation(line: 3690, column: 26, scope: !7519)
!7529 = !DILocation(line: 3690, column: 32, scope: !7519)
!7530 = !DILocation(line: 3690, column: 43, scope: !7519)
!7531 = !DILocation(line: 3690, column: 49, scope: !7519)
!7532 = !DILocation(line: 3690, column: 40, scope: !7519)
!7533 = !DILocation(line: 3690, column: 57, scope: !7519)
!7534 = !DILocation(line: 3691, column: 12, scope: !7519)
!7535 = !DILocation(line: 3691, column: 18, scope: !7519)
!7536 = !DILocation(line: 3691, column: 29, scope: !7519)
!7537 = !DILocation(line: 3691, column: 35, scope: !7519)
!7538 = !DILocation(line: 3691, column: 26, scope: !7519)
!7539 = !DILocation(line: 3691, column: 46, scope: !7519)
!7540 = !DILocation(line: 3691, column: 50, scope: !7519)
!7541 = !DILocation(line: 3691, column: 56, scope: !7519)
!7542 = !DILocation(line: 3691, column: 69, scope: !7519)
!7543 = !DILocation(line: 3691, column: 75, scope: !7519)
!7544 = !DILocation(line: 3691, column: 66, scope: !7519)
!7545 = !DILocation(line: 3691, column: 85, scope: !7519)
!7546 = !DILocation(line: 0, scope: !7519)
!7547 = !DILocation(line: 3690, column: 9, scope: !7519)
!7548 = !DILocation(line: 3690, column: 2, scope: !7519)
!7549 = distinct !DISubprogram(name: "BKE_sequence_translate", scope: !3, file: !3, line: 3709, type: !7550, scopeLine: 3710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7550 = !DISubroutineType(types: !7551)
!7551 = !{null, !1744, !204, !45}
!7552 = !DILocalVariable(name: "evil_scene", arg: 1, scope: !7549, file: !3, line: 3709, type: !1744)
!7553 = !DILocation(line: 3709, column: 36, scope: !7549)
!7554 = !DILocalVariable(name: "seq", arg: 2, scope: !7549, file: !3, line: 3709, type: !204)
!7555 = !DILocation(line: 3709, column: 58, scope: !7549)
!7556 = !DILocalVariable(name: "delta", arg: 3, scope: !7549, file: !3, line: 3709, type: !45)
!7557 = !DILocation(line: 3709, column: 67, scope: !7549)
!7558 = !DILocation(line: 3711, column: 32, scope: !7549)
!7559 = !DILocation(line: 3711, column: 44, scope: !7549)
!7560 = !DILocation(line: 3711, column: 49, scope: !7549)
!7561 = !DILocation(line: 3711, column: 2, scope: !7549)
!7562 = !DILocation(line: 3712, column: 16, scope: !7549)
!7563 = !DILocation(line: 3712, column: 2, scope: !7549)
!7564 = !DILocation(line: 3712, column: 7, scope: !7549)
!7565 = !DILocation(line: 3712, column: 13, scope: !7549)
!7566 = !DILocation(line: 3714, column: 6, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7549, file: !3, line: 3714, column: 6)
!7568 = !DILocation(line: 3714, column: 11, scope: !7567)
!7569 = !DILocation(line: 3714, column: 16, scope: !7567)
!7570 = !DILocation(line: 3714, column: 6, scope: !7549)
!7571 = !DILocalVariable(name: "seq_child", scope: !7572, file: !3, line: 3715, type: !204)
!7572 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 3714, column: 34)
!7573 = !DILocation(line: 3715, column: 13, scope: !7572)
!7574 = !DILocation(line: 3716, column: 20, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 3716, column: 3)
!7576 = !DILocation(line: 3716, column: 25, scope: !7575)
!7577 = !DILocation(line: 3716, column: 33, scope: !7575)
!7578 = !DILocation(line: 3716, column: 18, scope: !7575)
!7579 = !DILocation(line: 3716, column: 8, scope: !7575)
!7580 = !DILocation(line: 3716, column: 40, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7575, file: !3, line: 3716, column: 3)
!7582 = !DILocation(line: 3716, column: 3, scope: !7575)
!7583 = !DILocation(line: 3717, column: 27, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 3716, column: 80)
!7585 = !DILocation(line: 3717, column: 39, scope: !7584)
!7586 = !DILocation(line: 3717, column: 50, scope: !7584)
!7587 = !DILocation(line: 3717, column: 4, scope: !7584)
!7588 = !DILocation(line: 3718, column: 3, scope: !7584)
!7589 = !DILocation(line: 3716, column: 63, scope: !7581)
!7590 = !DILocation(line: 3716, column: 74, scope: !7581)
!7591 = !DILocation(line: 3716, column: 61, scope: !7581)
!7592 = !DILocation(line: 3716, column: 3, scope: !7581)
!7593 = distinct !{!7593, !7582, !7594}
!7594 = !DILocation(line: 3718, column: 3, scope: !7575)
!7595 = !DILocation(line: 3719, column: 2, scope: !7572)
!7596 = !DILocation(line: 3721, column: 25, scope: !7549)
!7597 = !DILocation(line: 3721, column: 37, scope: !7549)
!7598 = !DILocation(line: 3721, column: 2, scope: !7549)
!7599 = !DILocation(line: 3722, column: 1, scope: !7549)
!7600 = distinct !DISubprogram(name: "BKE_sequencer_offset_animdata", scope: !3, file: !3, line: 4119, type: !7550, scopeLine: 4120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7601 = !DILocalVariable(name: "scene", arg: 1, scope: !7600, file: !3, line: 4119, type: !1744)
!7602 = !DILocation(line: 4119, column: 43, scope: !7600)
!7603 = !DILocalVariable(name: "seq", arg: 2, scope: !7600, file: !3, line: 4119, type: !204)
!7604 = !DILocation(line: 4119, column: 60, scope: !7600)
!7605 = !DILocalVariable(name: "ofs", arg: 3, scope: !7600, file: !3, line: 4119, type: !45)
!7606 = !DILocation(line: 4119, column: 69, scope: !7600)
!7607 = !DILocalVariable(name: "str", scope: !7600, file: !3, line: 4121, type: !7608)
!7608 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 1304, elements: !7609)
!7609 = !{!7610}
!7610 = !DISubrange(count: 163)
!7611 = !DILocation(line: 4121, column: 7, scope: !7600)
!7612 = !DILocalVariable(name: "str_len", scope: !7600, file: !3, line: 4122, type: !3549)
!7613 = !DILocation(line: 4122, column: 9, scope: !7600)
!7614 = !DILocalVariable(name: "fcu", scope: !7600, file: !3, line: 4123, type: !7615)
!7615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7616, size: 64)
!7616 = !DIDerivedType(tag: DW_TAG_typedef, name: "FCurve", file: !321, line: 463, baseType: !7617)
!7617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FCurve", file: !321, line: 433, size: 896, elements: !7618)
!7618 = !{!7619, !7621, !7622, !7645, !7657, !7658, !7681, !7689, !7690, !7691, !7692, !7693, !7694, !7695, !7696, !7697, !7698}
!7619 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7617, file: !321, line: 434, baseType: !7620, size: 64)
!7620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7617, size: 64)
!7621 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !7617, file: !321, line: 434, baseType: !7620, size: 64, offset: 64)
!7622 = !DIDerivedType(tag: DW_TAG_member, name: "grp", scope: !7617, file: !321, line: 437, baseType: !7623, size: 64, offset: 128)
!7623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7624, size: 64)
!7624 = !DIDerivedType(tag: DW_TAG_typedef, name: "bActionGroup", file: !326, line: 450, baseType: !7625)
!7625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bActionGroup", file: !326, line: 440, size: 960, elements: !7626)
!7626 = !{!7627, !7629, !7630, !7631, !7632, !7633, !7634}
!7627 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7625, file: !326, line: 441, baseType: !7628, size: 64)
!7628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7625, size: 64)
!7629 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !7625, file: !326, line: 441, baseType: !7628, size: 64, offset: 64)
!7630 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !7625, file: !326, line: 443, baseType: !183, size: 128, offset: 128)
!7631 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7625, file: !326, line: 445, baseType: !45, size: 32, offset: 256)
!7632 = !DIDerivedType(tag: DW_TAG_member, name: "customCol", scope: !7625, file: !326, line: 446, baseType: !45, size: 32, offset: 288)
!7633 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !7625, file: !326, line: 447, baseType: !173, size: 512, offset: 320)
!7634 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !7625, file: !326, line: 449, baseType: !7635, size: 128, offset: 832)
!7635 = !DIDerivedType(tag: DW_TAG_typedef, name: "ThemeWireColor", file: !7636, line: 347, baseType: !7637)
!7636 = !DIFile(filename: "blender/source/blender/makesdna/DNA_userdef_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!7637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ThemeWireColor", file: !7636, line: 340, size: 128, elements: !7638)
!7638 = !{!7639, !7641, !7642, !7643, !7644}
!7639 = !DIDerivedType(tag: DW_TAG_member, name: "solid", scope: !7637, file: !7636, line: 341, baseType: !7640, size: 32)
!7640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !144, size: 32, elements: !511)
!7641 = !DIDerivedType(tag: DW_TAG_member, name: "select", scope: !7637, file: !7636, line: 342, baseType: !7640, size: 32, offset: 32)
!7642 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !7637, file: !7636, line: 343, baseType: !7640, size: 32, offset: 64)
!7643 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7637, file: !7636, line: 345, baseType: !157, size: 16, offset: 96)
!7644 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !7637, file: !7636, line: 346, baseType: !157, size: 16, offset: 112)
!7645 = !DIDerivedType(tag: DW_TAG_member, name: "driver", scope: !7617, file: !321, line: 440, baseType: !7646, size: 64, offset: 192)
!7646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7647, size: 64)
!7647 = !DIDerivedType(tag: DW_TAG_typedef, name: "ChannelDriver", file: !321, line: 386, baseType: !7648)
!7648 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ChannelDriver", file: !321, line: 371, size: 2368, elements: !7649)
!7649 = !{!7650, !7651, !7652, !7653, !7654, !7655, !7656}
!7650 = !DIDerivedType(tag: DW_TAG_member, name: "variables", scope: !7648, file: !321, line: 372, baseType: !183, size: 128)
!7651 = !DIDerivedType(tag: DW_TAG_member, name: "expression", scope: !7648, file: !321, line: 377, baseType: !251, size: 2048, offset: 128)
!7652 = !DIDerivedType(tag: DW_TAG_member, name: "expr_comp", scope: !7648, file: !321, line: 378, baseType: !129, size: 64, offset: 2176)
!7653 = !DIDerivedType(tag: DW_TAG_member, name: "curval", scope: !7648, file: !321, line: 380, baseType: !193, size: 32, offset: 2240)
!7654 = !DIDerivedType(tag: DW_TAG_member, name: "influence", scope: !7648, file: !321, line: 381, baseType: !193, size: 32, offset: 2272)
!7655 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !7648, file: !321, line: 384, baseType: !45, size: 32, offset: 2304)
!7656 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7648, file: !321, line: 385, baseType: !45, size: 32, offset: 2336)
!7657 = !DIDerivedType(tag: DW_TAG_member, name: "modifiers", scope: !7617, file: !321, line: 442, baseType: !183, size: 128, offset: 256)
!7658 = !DIDerivedType(tag: DW_TAG_member, name: "bezt", scope: !7617, file: !321, line: 445, baseType: !7659, size: 64, offset: 384)
!7659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7660, size: 64)
!7660 = !DIDerivedType(tag: DW_TAG_typedef, name: "BezTriple", file: !431, line: 133, baseType: !7661)
!7661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BezTriple", file: !431, line: 117, size: 576, elements: !7662)
!7662 = !{!7663, !7666, !7667, !7668, !7669, !7670, !7671, !7672, !7673, !7674, !7675, !7676, !7677, !7678, !7679, !7680}
!7663 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7661, file: !431, line: 118, baseType: !7664, size: 288)
!7664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 288, elements: !7665)
!7665 = !{!298, !298}
!7666 = !DIDerivedType(tag: DW_TAG_member, name: "alfa", scope: !7661, file: !431, line: 119, baseType: !193, size: 32, offset: 288)
!7667 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !7661, file: !431, line: 119, baseType: !193, size: 32, offset: 320)
!7668 = !DIDerivedType(tag: DW_TAG_member, name: "radius", scope: !7661, file: !431, line: 119, baseType: !193, size: 32, offset: 352)
!7669 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !7661, file: !431, line: 121, baseType: !144, size: 8, offset: 384)
!7670 = !DIDerivedType(tag: DW_TAG_member, name: "h1", scope: !7661, file: !431, line: 123, baseType: !144, size: 8, offset: 392)
!7671 = !DIDerivedType(tag: DW_TAG_member, name: "h2", scope: !7661, file: !431, line: 123, baseType: !144, size: 8, offset: 400)
!7672 = !DIDerivedType(tag: DW_TAG_member, name: "f1", scope: !7661, file: !431, line: 124, baseType: !144, size: 8, offset: 408)
!7673 = !DIDerivedType(tag: DW_TAG_member, name: "f2", scope: !7661, file: !431, line: 124, baseType: !144, size: 8, offset: 416)
!7674 = !DIDerivedType(tag: DW_TAG_member, name: "f3", scope: !7661, file: !431, line: 124, baseType: !144, size: 8, offset: 424)
!7675 = !DIDerivedType(tag: DW_TAG_member, name: "hide", scope: !7661, file: !431, line: 126, baseType: !144, size: 8, offset: 432)
!7676 = !DIDerivedType(tag: DW_TAG_member, name: "easing", scope: !7661, file: !431, line: 128, baseType: !144, size: 8, offset: 440)
!7677 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !7661, file: !431, line: 129, baseType: !193, size: 32, offset: 448)
!7678 = !DIDerivedType(tag: DW_TAG_member, name: "amplitude", scope: !7661, file: !431, line: 130, baseType: !193, size: 32, offset: 480)
!7679 = !DIDerivedType(tag: DW_TAG_member, name: "period", scope: !7661, file: !431, line: 130, baseType: !193, size: 32, offset: 512)
!7680 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !7661, file: !431, line: 132, baseType: !7640, size: 32, offset: 544)
!7681 = !DIDerivedType(tag: DW_TAG_member, name: "fpt", scope: !7617, file: !321, line: 446, baseType: !7682, size: 64, offset: 448)
!7682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7683, size: 64)
!7683 = !DIDerivedType(tag: DW_TAG_typedef, name: "FPoint", file: !321, line: 430, baseType: !7684)
!7684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPoint", file: !321, line: 426, size: 128, elements: !7685)
!7685 = !{!7686, !7687, !7688}
!7686 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7684, file: !321, line: 427, baseType: !629, size: 64)
!7687 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7684, file: !321, line: 428, baseType: !45, size: 32, offset: 64)
!7688 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !7684, file: !321, line: 429, baseType: !45, size: 32, offset: 96)
!7689 = !DIDerivedType(tag: DW_TAG_member, name: "totvert", scope: !7617, file: !321, line: 447, baseType: !7, size: 32, offset: 512)
!7690 = !DIDerivedType(tag: DW_TAG_member, name: "curval", scope: !7617, file: !321, line: 450, baseType: !193, size: 32, offset: 544)
!7691 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7617, file: !321, line: 451, baseType: !157, size: 16, offset: 576)
!7692 = !DIDerivedType(tag: DW_TAG_member, name: "extend", scope: !7617, file: !321, line: 452, baseType: !157, size: 16, offset: 592)
!7693 = !DIDerivedType(tag: DW_TAG_member, name: "array_index", scope: !7617, file: !321, line: 455, baseType: !45, size: 32, offset: 608)
!7694 = !DIDerivedType(tag: DW_TAG_member, name: "rna_path", scope: !7617, file: !321, line: 456, baseType: !498, size: 64, offset: 640)
!7695 = !DIDerivedType(tag: DW_TAG_member, name: "color_mode", scope: !7617, file: !321, line: 459, baseType: !45, size: 32, offset: 704)
!7696 = !DIDerivedType(tag: DW_TAG_member, name: "color", scope: !7617, file: !321, line: 460, baseType: !296, size: 96, offset: 736)
!7697 = !DIDerivedType(tag: DW_TAG_member, name: "prev_norm_factor", scope: !7617, file: !321, line: 462, baseType: !193, size: 32, offset: 832)
!7698 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !7617, file: !321, line: 462, baseType: !193, size: 32, offset: 864)
!7699 = !DILocation(line: 4123, column: 10, scope: !7600)
!7700 = !DILocation(line: 4125, column: 6, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 4125, column: 6)
!7702 = !DILocation(line: 4125, column: 13, scope: !7701)
!7703 = !DILocation(line: 4125, column: 17, scope: !7701)
!7704 = !DILocation(line: 4125, column: 25, scope: !7701)
!7705 = !DILocation(line: 4125, column: 28, scope: !7701)
!7706 = !DILocation(line: 4125, column: 32, scope: !7701)
!7707 = !DILocation(line: 4125, column: 37, scope: !7701)
!7708 = !DILocation(line: 4125, column: 40, scope: !7701)
!7709 = !DILocation(line: 4125, column: 47, scope: !7701)
!7710 = !DILocation(line: 4125, column: 52, scope: !7701)
!7711 = !DILocation(line: 4125, column: 59, scope: !7701)
!7712 = !DILocation(line: 4125, column: 6, scope: !7600)
!7713 = !DILocation(line: 4126, column: 3, scope: !7701)
!7714 = !DILocation(line: 4128, column: 38, scope: !7600)
!7715 = !DILocation(line: 4128, column: 43, scope: !7600)
!7716 = !DILocation(line: 4128, column: 48, scope: !7600)
!7717 = !DILocation(line: 4128, column: 53, scope: !7600)
!7718 = !DILocation(line: 4128, column: 12, scope: !7600)
!7719 = !DILocation(line: 4128, column: 10, scope: !7600)
!7720 = !DILocation(line: 4130, column: 13, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 4130, column: 2)
!7722 = !DILocation(line: 4130, column: 20, scope: !7721)
!7723 = !DILocation(line: 4130, column: 25, scope: !7721)
!7724 = !DILocation(line: 4130, column: 33, scope: !7721)
!7725 = !DILocation(line: 4130, column: 40, scope: !7721)
!7726 = !DILocation(line: 4130, column: 11, scope: !7721)
!7727 = !DILocation(line: 4130, column: 7, scope: !7721)
!7728 = !DILocation(line: 4130, column: 47, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !7721, file: !3, line: 4130, column: 2)
!7730 = !DILocation(line: 4130, column: 2, scope: !7721)
!7731 = !DILocation(line: 4131, column: 7, scope: !7732)
!7732 = distinct !DILexicalBlock(scope: !7733, file: !3, line: 4131, column: 7)
!7733 = distinct !DILexicalBlock(scope: !7729, file: !3, line: 4130, column: 69)
!7734 = !DILocation(line: 4131, column: 7, scope: !7733)
!7735 = !DILocalVariable(name: "i", scope: !7736, file: !3, line: 4132, type: !7)
!7736 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 4131, column: 46)
!7737 = !DILocation(line: 4132, column: 17, scope: !7736)
!7738 = !DILocation(line: 4133, column: 8, scope: !7739)
!7739 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 4133, column: 8)
!7740 = !DILocation(line: 4133, column: 13, scope: !7739)
!7741 = !DILocation(line: 4133, column: 8, scope: !7736)
!7742 = !DILocation(line: 4134, column: 12, scope: !7743)
!7743 = distinct !DILexicalBlock(scope: !7744, file: !3, line: 4134, column: 5)
!7744 = distinct !DILexicalBlock(scope: !7739, file: !3, line: 4133, column: 19)
!7745 = !DILocation(line: 4134, column: 10, scope: !7743)
!7746 = !DILocation(line: 4134, column: 17, scope: !7747)
!7747 = distinct !DILexicalBlock(scope: !7743, file: !3, line: 4134, column: 5)
!7748 = !DILocation(line: 4134, column: 21, scope: !7747)
!7749 = !DILocation(line: 4134, column: 26, scope: !7747)
!7750 = !DILocation(line: 4134, column: 19, scope: !7747)
!7751 = !DILocation(line: 4134, column: 5, scope: !7743)
!7752 = !DILocalVariable(name: "bezt", scope: !7753, file: !3, line: 4135, type: !7659)
!7753 = distinct !DILexicalBlock(scope: !7747, file: !3, line: 4134, column: 40)
!7754 = !DILocation(line: 4135, column: 17, scope: !7753)
!7755 = !DILocation(line: 4135, column: 25, scope: !7753)
!7756 = !DILocation(line: 4135, column: 30, scope: !7753)
!7757 = !DILocation(line: 4135, column: 35, scope: !7753)
!7758 = !DILocation(line: 4136, column: 25, scope: !7753)
!7759 = !DILocation(line: 4136, column: 6, scope: !7753)
!7760 = !DILocation(line: 4136, column: 12, scope: !7753)
!7761 = !DILocation(line: 4136, column: 22, scope: !7753)
!7762 = !DILocation(line: 4137, column: 25, scope: !7753)
!7763 = !DILocation(line: 4137, column: 6, scope: !7753)
!7764 = !DILocation(line: 4137, column: 12, scope: !7753)
!7765 = !DILocation(line: 4137, column: 22, scope: !7753)
!7766 = !DILocation(line: 4138, column: 25, scope: !7753)
!7767 = !DILocation(line: 4138, column: 6, scope: !7753)
!7768 = !DILocation(line: 4138, column: 12, scope: !7753)
!7769 = !DILocation(line: 4138, column: 22, scope: !7753)
!7770 = !DILocation(line: 4139, column: 5, scope: !7753)
!7771 = !DILocation(line: 4134, column: 36, scope: !7747)
!7772 = !DILocation(line: 4134, column: 5, scope: !7747)
!7773 = distinct !{!7773, !7751, !7774}
!7774 = !DILocation(line: 4139, column: 5, scope: !7743)
!7775 = !DILocation(line: 4140, column: 4, scope: !7744)
!7776 = !DILocation(line: 4141, column: 8, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 4141, column: 8)
!7778 = !DILocation(line: 4141, column: 13, scope: !7777)
!7779 = !DILocation(line: 4141, column: 8, scope: !7736)
!7780 = !DILocation(line: 4142, column: 12, scope: !7781)
!7781 = distinct !DILexicalBlock(scope: !7782, file: !3, line: 4142, column: 5)
!7782 = distinct !DILexicalBlock(scope: !7777, file: !3, line: 4141, column: 18)
!7783 = !DILocation(line: 4142, column: 10, scope: !7781)
!7784 = !DILocation(line: 4142, column: 17, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 4142, column: 5)
!7786 = !DILocation(line: 4142, column: 21, scope: !7785)
!7787 = !DILocation(line: 4142, column: 26, scope: !7785)
!7788 = !DILocation(line: 4142, column: 19, scope: !7785)
!7789 = !DILocation(line: 4142, column: 5, scope: !7781)
!7790 = !DILocalVariable(name: "fpt", scope: !7791, file: !3, line: 4143, type: !7682)
!7791 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 4142, column: 40)
!7792 = !DILocation(line: 4143, column: 14, scope: !7791)
!7793 = !DILocation(line: 4143, column: 21, scope: !7791)
!7794 = !DILocation(line: 4143, column: 26, scope: !7791)
!7795 = !DILocation(line: 4143, column: 30, scope: !7791)
!7796 = !DILocation(line: 4144, column: 21, scope: !7791)
!7797 = !DILocation(line: 4144, column: 6, scope: !7791)
!7798 = !DILocation(line: 4144, column: 11, scope: !7791)
!7799 = !DILocation(line: 4144, column: 18, scope: !7791)
!7800 = !DILocation(line: 4145, column: 5, scope: !7791)
!7801 = !DILocation(line: 4142, column: 36, scope: !7785)
!7802 = !DILocation(line: 4142, column: 5, scope: !7785)
!7803 = distinct !{!7803, !7789, !7804}
!7804 = !DILocation(line: 4145, column: 5, scope: !7781)
!7805 = !DILocation(line: 4146, column: 4, scope: !7782)
!7806 = !DILocation(line: 4147, column: 3, scope: !7736)
!7807 = !DILocation(line: 4148, column: 2, scope: !7733)
!7808 = !DILocation(line: 4130, column: 58, scope: !7729)
!7809 = !DILocation(line: 4130, column: 63, scope: !7729)
!7810 = !DILocation(line: 4130, column: 56, scope: !7729)
!7811 = !DILocation(line: 4130, column: 2, scope: !7729)
!7812 = distinct !{!7812, !7730, !7813}
!7813 = !DILocation(line: 4148, column: 2, scope: !7721)
!7814 = !DILocation(line: 4149, column: 1, scope: !7600)
!7815 = distinct !DISubprogram(name: "BKE_sequence_sound_init", scope: !3, file: !3, line: 3724, type: !2108, scopeLine: 3725, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7816 = !DILocalVariable(name: "scene", arg: 1, scope: !7815, file: !3, line: 3724, type: !1744)
!7817 = !DILocation(line: 3724, column: 37, scope: !7815)
!7818 = !DILocalVariable(name: "seq", arg: 2, scope: !7815, file: !3, line: 3724, type: !204)
!7819 = !DILocation(line: 3724, column: 54, scope: !7815)
!7820 = !DILocation(line: 3726, column: 6, scope: !7821)
!7821 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 3726, column: 6)
!7822 = !DILocation(line: 3726, column: 11, scope: !7821)
!7823 = !DILocation(line: 3726, column: 16, scope: !7821)
!7824 = !DILocation(line: 3726, column: 6, scope: !7815)
!7825 = !DILocalVariable(name: "seq_child", scope: !7826, file: !3, line: 3727, type: !204)
!7826 = distinct !DILexicalBlock(scope: !7821, file: !3, line: 3726, column: 34)
!7827 = !DILocation(line: 3727, column: 13, scope: !7826)
!7828 = !DILocation(line: 3728, column: 20, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7826, file: !3, line: 3728, column: 3)
!7830 = !DILocation(line: 3728, column: 25, scope: !7829)
!7831 = !DILocation(line: 3728, column: 33, scope: !7829)
!7832 = !DILocation(line: 3728, column: 18, scope: !7829)
!7833 = !DILocation(line: 3728, column: 8, scope: !7829)
!7834 = !DILocation(line: 3728, column: 40, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 3728, column: 3)
!7836 = !DILocation(line: 3728, column: 3, scope: !7829)
!7837 = !DILocation(line: 3729, column: 28, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 3728, column: 80)
!7839 = !DILocation(line: 3729, column: 35, scope: !7838)
!7840 = !DILocation(line: 3729, column: 4, scope: !7838)
!7841 = !DILocation(line: 3730, column: 3, scope: !7838)
!7842 = !DILocation(line: 3728, column: 63, scope: !7835)
!7843 = !DILocation(line: 3728, column: 74, scope: !7835)
!7844 = !DILocation(line: 3728, column: 61, scope: !7835)
!7845 = !DILocation(line: 3728, column: 3, scope: !7835)
!7846 = distinct !{!7846, !7836, !7847}
!7847 = !DILocation(line: 3730, column: 3, scope: !7829)
!7848 = !DILocation(line: 3731, column: 2, scope: !7826)
!7849 = !DILocation(line: 3733, column: 7, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 3733, column: 7)
!7851 = distinct !DILexicalBlock(scope: !7821, file: !3, line: 3732, column: 7)
!7852 = !DILocation(line: 3733, column: 12, scope: !7850)
!7853 = !DILocation(line: 3733, column: 7, scope: !7851)
!7854 = !DILocation(line: 3734, column: 54, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 3733, column: 19)
!7856 = !DILocation(line: 3734, column: 61, scope: !7855)
!7857 = !DILocation(line: 3734, column: 23, scope: !7855)
!7858 = !DILocation(line: 3734, column: 4, scope: !7855)
!7859 = !DILocation(line: 3734, column: 9, scope: !7855)
!7860 = !DILocation(line: 3734, column: 21, scope: !7855)
!7861 = !DILocation(line: 3735, column: 3, scope: !7855)
!7862 = !DILocation(line: 3736, column: 7, scope: !7863)
!7863 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 3736, column: 7)
!7864 = !DILocation(line: 3736, column: 12, scope: !7863)
!7865 = !DILocation(line: 3736, column: 7, scope: !7851)
!7866 = !DILocation(line: 3737, column: 60, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7863, file: !3, line: 3736, column: 19)
!7868 = !DILocation(line: 3737, column: 67, scope: !7867)
!7869 = !DILocation(line: 3737, column: 23, scope: !7867)
!7870 = !DILocation(line: 3737, column: 4, scope: !7867)
!7871 = !DILocation(line: 3737, column: 9, scope: !7867)
!7872 = !DILocation(line: 3737, column: 21, scope: !7867)
!7873 = !DILocation(line: 3738, column: 3, scope: !7867)
!7874 = !DILocation(line: 3740, column: 1, scope: !7815)
!7875 = distinct !DISubprogram(name: "BKE_sequencer_foreground_frame_get", scope: !3, file: !3, line: 3742, type: !7876, scopeLine: 3743, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7876 = !DISubroutineType(types: !7877)
!7877 = !{!209, !1744, !45}
!7878 = !DILocalVariable(name: "scene", arg: 1, scope: !7875, file: !3, line: 3742, type: !1744)
!7879 = !DILocation(line: 3742, column: 53, scope: !7875)
!7880 = !DILocalVariable(name: "frame", arg: 2, scope: !7875, file: !3, line: 3742, type: !45)
!7881 = !DILocation(line: 3742, column: 64, scope: !7875)
!7882 = !DILocalVariable(name: "ed", scope: !7875, file: !3, line: 3744, type: !2176)
!7883 = !DILocation(line: 3744, column: 11, scope: !7875)
!7884 = !DILocation(line: 3744, column: 42, scope: !7875)
!7885 = !DILocation(line: 3744, column: 16, scope: !7875)
!7886 = !DILocalVariable(name: "seq", scope: !7875, file: !3, line: 3745, type: !204)
!7887 = !DILocation(line: 3745, column: 12, scope: !7875)
!7888 = !DILocalVariable(name: "best_seq", scope: !7875, file: !3, line: 3745, type: !204)
!7889 = !DILocation(line: 3745, column: 18, scope: !7875)
!7890 = !DILocalVariable(name: "best_machine", scope: !7875, file: !3, line: 3746, type: !45)
!7891 = !DILocation(line: 3746, column: 6, scope: !7875)
!7892 = !DILocation(line: 3748, column: 7, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 3748, column: 6)
!7894 = !DILocation(line: 3748, column: 6, scope: !7875)
!7895 = !DILocation(line: 3748, column: 11, scope: !7893)
!7896 = !DILocation(line: 3750, column: 13, scope: !7897)
!7897 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 3750, column: 2)
!7898 = !DILocation(line: 3750, column: 17, scope: !7897)
!7899 = !DILocation(line: 3750, column: 27, scope: !7897)
!7900 = !DILocation(line: 3750, column: 11, scope: !7897)
!7901 = !DILocation(line: 3750, column: 7, scope: !7897)
!7902 = !DILocation(line: 3750, column: 34, scope: !7903)
!7903 = distinct !DILexicalBlock(scope: !7897, file: !3, line: 3750, column: 2)
!7904 = !DILocation(line: 3750, column: 2, scope: !7897)
!7905 = !DILocation(line: 3751, column: 7, scope: !7906)
!7906 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 3751, column: 7)
!7907 = distinct !DILexicalBlock(scope: !7903, file: !3, line: 3750, column: 56)
!7908 = !DILocation(line: 3751, column: 12, scope: !7906)
!7909 = !DILocation(line: 3751, column: 17, scope: !7906)
!7910 = !DILocation(line: 3751, column: 28, scope: !7906)
!7911 = !DILocation(line: 3751, column: 31, scope: !7906)
!7912 = !DILocation(line: 3751, column: 36, scope: !7906)
!7913 = !DILocation(line: 3751, column: 48, scope: !7906)
!7914 = !DILocation(line: 3751, column: 46, scope: !7906)
!7915 = !DILocation(line: 3751, column: 54, scope: !7906)
!7916 = !DILocation(line: 3751, column: 57, scope: !7906)
!7917 = !DILocation(line: 3751, column: 62, scope: !7906)
!7918 = !DILocation(line: 3751, column: 73, scope: !7906)
!7919 = !DILocation(line: 3751, column: 70, scope: !7906)
!7920 = !DILocation(line: 3751, column: 7, scope: !7907)
!7921 = !DILocation(line: 3752, column: 4, scope: !7906)
!7922 = !DILocation(line: 3754, column: 7, scope: !7923)
!7923 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 3754, column: 7)
!7924 = !DILocation(line: 3754, column: 7, scope: !7907)
!7925 = !DILocation(line: 3755, column: 8, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7927, file: !3, line: 3755, column: 8)
!7927 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 3754, column: 103)
!7928 = !DILocation(line: 3755, column: 13, scope: !7926)
!7929 = !DILocation(line: 3755, column: 23, scope: !7926)
!7930 = !DILocation(line: 3755, column: 21, scope: !7926)
!7931 = !DILocation(line: 3755, column: 8, scope: !7927)
!7932 = !DILocation(line: 3756, column: 16, scope: !7933)
!7933 = distinct !DILexicalBlock(scope: !7926, file: !3, line: 3755, column: 37)
!7934 = !DILocation(line: 3756, column: 14, scope: !7933)
!7935 = !DILocation(line: 3757, column: 20, scope: !7933)
!7936 = !DILocation(line: 3757, column: 25, scope: !7933)
!7937 = !DILocation(line: 3757, column: 18, scope: !7933)
!7938 = !DILocation(line: 3758, column: 4, scope: !7933)
!7939 = !DILocation(line: 3759, column: 3, scope: !7927)
!7940 = !DILocation(line: 3760, column: 2, scope: !7907)
!7941 = !DILocation(line: 3750, column: 45, scope: !7903)
!7942 = !DILocation(line: 3750, column: 50, scope: !7903)
!7943 = !DILocation(line: 3750, column: 43, scope: !7903)
!7944 = !DILocation(line: 3750, column: 2, scope: !7903)
!7945 = distinct !{!7945, !7904, !7946}
!7946 = !DILocation(line: 3760, column: 2, scope: !7897)
!7947 = !DILocation(line: 3761, column: 9, scope: !7875)
!7948 = !DILocation(line: 3761, column: 2, scope: !7875)
!7949 = !DILocation(line: 3762, column: 1, scope: !7875)
!7950 = distinct !DISubprogram(name: "BKE_sequence_base_shuffle", scope: !3, file: !3, line: 3765, type: !7951, scopeLine: 3766, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!7951 = !DISubroutineType(types: !7952)
!7952 = !{!742, !202, !204, !1744}
!7953 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !7950, file: !3, line: 3765, type: !202)
!7954 = !DILocation(line: 3765, column: 42, scope: !7950)
!7955 = !DILocalVariable(name: "test", arg: 2, scope: !7950, file: !3, line: 3765, type: !204)
!7956 = !DILocation(line: 3765, column: 62, scope: !7950)
!7957 = !DILocalVariable(name: "evil_scene", arg: 3, scope: !7950, file: !3, line: 3765, type: !1744)
!7958 = !DILocation(line: 3765, column: 75, scope: !7950)
!7959 = !DILocalVariable(name: "orig_machine", scope: !7950, file: !3, line: 3767, type: !45)
!7960 = !DILocation(line: 3767, column: 6, scope: !7950)
!7961 = !DILocation(line: 3767, column: 21, scope: !7950)
!7962 = !DILocation(line: 3767, column: 27, scope: !7950)
!7963 = !DILocation(line: 3768, column: 2, scope: !7950)
!7964 = !DILocation(line: 3768, column: 8, scope: !7950)
!7965 = !DILocation(line: 3768, column: 15, scope: !7950)
!7966 = !DILocation(line: 3769, column: 20, scope: !7950)
!7967 = !DILocation(line: 3769, column: 32, scope: !7950)
!7968 = !DILocation(line: 3769, column: 2, scope: !7950)
!7969 = !DILocation(line: 3770, column: 2, scope: !7950)
!7970 = !DILocation(line: 3770, column: 35, scope: !7950)
!7971 = !DILocation(line: 3770, column: 45, scope: !7950)
!7972 = !DILocation(line: 3770, column: 9, scope: !7950)
!7973 = !DILocation(line: 3771, column: 7, scope: !7974)
!7974 = distinct !DILexicalBlock(scope: !7975, file: !3, line: 3771, column: 7)
!7975 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 3770, column: 53)
!7976 = !DILocation(line: 3771, column: 13, scope: !7974)
!7977 = !DILocation(line: 3771, column: 21, scope: !7974)
!7978 = !DILocation(line: 3771, column: 7, scope: !7975)
!7979 = !DILocation(line: 3772, column: 4, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 3771, column: 32)
!7981 = !DILocation(line: 3774, column: 3, scope: !7975)
!7982 = !DILocation(line: 3774, column: 9, scope: !7975)
!7983 = !DILocation(line: 3774, column: 16, scope: !7975)
!7984 = !DILocation(line: 3775, column: 21, scope: !7975)
!7985 = !DILocation(line: 3775, column: 33, scope: !7975)
!7986 = !DILocation(line: 3775, column: 3, scope: !7975)
!7987 = distinct !{!7987, !7969, !7988}
!7988 = !DILocation(line: 3776, column: 2, scope: !7950)
!7989 = !DILocation(line: 3779, column: 6, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 3779, column: 6)
!7991 = !DILocation(line: 3779, column: 12, scope: !7990)
!7992 = !DILocation(line: 3779, column: 20, scope: !7990)
!7993 = !DILocation(line: 3779, column: 6, scope: !7950)
!7994 = !DILocalVariable(name: "seq", scope: !7995, file: !3, line: 3783, type: !204)
!7995 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 3779, column: 31)
!7996 = !DILocation(line: 3783, column: 13, scope: !7995)
!7997 = !DILocalVariable(name: "new_frame", scope: !7995, file: !3, line: 3784, type: !45)
!7998 = !DILocation(line: 3784, column: 7, scope: !7995)
!7999 = !DILocation(line: 3784, column: 19, scope: !7995)
!8000 = !DILocation(line: 3784, column: 25, scope: !7995)
!8001 = !DILocation(line: 3786, column: 14, scope: !8002)
!8002 = distinct !DILexicalBlock(scope: !7995, file: !3, line: 3786, column: 3)
!8003 = !DILocation(line: 3786, column: 24, scope: !8002)
!8004 = !DILocation(line: 3786, column: 12, scope: !8002)
!8005 = !DILocation(line: 3786, column: 8, scope: !8002)
!8006 = !DILocation(line: 3786, column: 31, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !8002, file: !3, line: 3786, column: 3)
!8008 = !DILocation(line: 3786, column: 3, scope: !8002)
!8009 = !DILocation(line: 3787, column: 8, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 3787, column: 8)
!8011 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 3786, column: 53)
!8012 = !DILocation(line: 3787, column: 13, scope: !8010)
!8013 = !DILocation(line: 3787, column: 24, scope: !8010)
!8014 = !DILocation(line: 3787, column: 21, scope: !8010)
!8015 = !DILocation(line: 3787, column: 8, scope: !8011)
!8016 = !DILocation(line: 3788, column: 24, scope: !8010)
!8017 = !DILocation(line: 3788, column: 35, scope: !8010)
!8018 = !DILocation(line: 3788, column: 40, scope: !8010)
!8019 = !DILocation(line: 3788, column: 17, scope: !8010)
!8020 = !DILocation(line: 3788, column: 15, scope: !8010)
!8021 = !DILocation(line: 3788, column: 5, scope: !8010)
!8022 = !DILocation(line: 3789, column: 3, scope: !8011)
!8023 = !DILocation(line: 3786, column: 42, scope: !8007)
!8024 = !DILocation(line: 3786, column: 47, scope: !8007)
!8025 = !DILocation(line: 3786, column: 40, scope: !8007)
!8026 = !DILocation(line: 3786, column: 3, scope: !8007)
!8027 = distinct !{!8027, !8008, !8028}
!8028 = !DILocation(line: 3789, column: 3, scope: !8002)
!8029 = !DILocation(line: 3791, column: 19, scope: !7995)
!8030 = !DILocation(line: 3791, column: 3, scope: !7995)
!8031 = !DILocation(line: 3791, column: 9, scope: !7995)
!8032 = !DILocation(line: 3791, column: 17, scope: !7995)
!8033 = !DILocation(line: 3792, column: 15, scope: !7995)
!8034 = !DILocation(line: 3792, column: 28, scope: !7995)
!8035 = !DILocation(line: 3792, column: 34, scope: !7995)
!8036 = !DILocation(line: 3792, column: 42, scope: !7995)
!8037 = !DILocation(line: 3792, column: 48, scope: !7995)
!8038 = !DILocation(line: 3792, column: 40, scope: !7995)
!8039 = !DILocation(line: 3792, column: 25, scope: !7995)
!8040 = !DILocation(line: 3792, column: 13, scope: !7995)
!8041 = !DILocation(line: 3793, column: 26, scope: !7995)
!8042 = !DILocation(line: 3793, column: 38, scope: !7995)
!8043 = !DILocation(line: 3793, column: 44, scope: !7995)
!8044 = !DILocation(line: 3793, column: 56, scope: !7995)
!8045 = !DILocation(line: 3793, column: 62, scope: !7995)
!8046 = !DILocation(line: 3793, column: 54, scope: !7995)
!8047 = !DILocation(line: 3793, column: 3, scope: !7995)
!8048 = !DILocation(line: 3795, column: 21, scope: !7995)
!8049 = !DILocation(line: 3795, column: 33, scope: !7995)
!8050 = !DILocation(line: 3795, column: 3, scope: !7995)
!8051 = !DILocation(line: 3796, column: 3, scope: !7995)
!8052 = !DILocation(line: 3799, column: 3, scope: !8053)
!8053 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 3798, column: 7)
!8054 = !DILocation(line: 3801, column: 1, scope: !7950)
!8055 = distinct !DISubprogram(name: "BKE_sequence_base_shuffle_time", scope: !3, file: !3, line: 3850, type: !8056, scopeLine: 3851, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8056 = !DISubroutineType(types: !8057)
!8057 = !{!742, !202, !1744}
!8058 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !8055, file: !3, line: 3850, type: !202)
!8059 = !DILocation(line: 3850, column: 47, scope: !8055)
!8060 = !DILocalVariable(name: "evil_scene", arg: 2, scope: !8055, file: !3, line: 3850, type: !1744)
!8061 = !DILocation(line: 3850, column: 64, scope: !8055)
!8062 = !DILocalVariable(name: "seq", scope: !8055, file: !3, line: 3854, type: !204)
!8063 = !DILocation(line: 3854, column: 12, scope: !8055)
!8064 = !DILocalVariable(name: "offset_l", scope: !8055, file: !3, line: 3856, type: !45)
!8065 = !DILocation(line: 3856, column: 6, scope: !8055)
!8066 = !DILocation(line: 3856, column: 41, scope: !8055)
!8067 = !DILocation(line: 3856, column: 53, scope: !8055)
!8068 = !DILocation(line: 3856, column: 17, scope: !8055)
!8069 = !DILocalVariable(name: "offset_r", scope: !8055, file: !3, line: 3857, type: !45)
!8070 = !DILocation(line: 3857, column: 6, scope: !8055)
!8071 = !DILocation(line: 3857, column: 41, scope: !8055)
!8072 = !DILocation(line: 3857, column: 53, scope: !8055)
!8073 = !DILocation(line: 3857, column: 17, scope: !8055)
!8074 = !DILocalVariable(name: "offset", scope: !8055, file: !3, line: 3858, type: !45)
!8075 = !DILocation(line: 3858, column: 6, scope: !8055)
!8076 = !DILocation(line: 3858, column: 17, scope: !8055)
!8077 = !DILocation(line: 3858, column: 16, scope: !8055)
!8078 = !DILocation(line: 3858, column: 28, scope: !8055)
!8079 = !DILocation(line: 3858, column: 26, scope: !8055)
!8080 = !DILocation(line: 3858, column: 15, scope: !8055)
!8081 = !DILocation(line: 3858, column: 41, scope: !8055)
!8082 = !DILocation(line: 3858, column: 52, scope: !8055)
!8083 = !DILocation(line: 3860, column: 6, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8055, file: !3, line: 3860, column: 6)
!8085 = !DILocation(line: 3860, column: 6, scope: !8055)
!8086 = !DILocation(line: 3861, column: 14, scope: !8087)
!8087 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 3861, column: 3)
!8088 = distinct !DILexicalBlock(scope: !8084, file: !3, line: 3860, column: 14)
!8089 = !DILocation(line: 3861, column: 24, scope: !8087)
!8090 = !DILocation(line: 3861, column: 12, scope: !8087)
!8091 = !DILocation(line: 3861, column: 8, scope: !8087)
!8092 = !DILocation(line: 3861, column: 31, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8087, file: !3, line: 3861, column: 3)
!8094 = !DILocation(line: 3861, column: 3, scope: !8087)
!8095 = !DILocation(line: 3862, column: 8, scope: !8096)
!8096 = distinct !DILexicalBlock(scope: !8097, file: !3, line: 3862, column: 8)
!8097 = distinct !DILexicalBlock(scope: !8093, file: !3, line: 3861, column: 53)
!8098 = !DILocation(line: 3862, column: 13, scope: !8096)
!8099 = !DILocation(line: 3862, column: 8, scope: !8097)
!8100 = !DILocation(line: 3863, column: 28, scope: !8101)
!8101 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 3862, column: 18)
!8102 = !DILocation(line: 3863, column: 40, scope: !8101)
!8103 = !DILocation(line: 3863, column: 45, scope: !8101)
!8104 = !DILocation(line: 3863, column: 5, scope: !8101)
!8105 = !DILocation(line: 3864, column: 5, scope: !8101)
!8106 = !DILocation(line: 3864, column: 10, scope: !8101)
!8107 = !DILocation(line: 3864, column: 15, scope: !8101)
!8108 = !DILocation(line: 3865, column: 4, scope: !8101)
!8109 = !DILocation(line: 3866, column: 3, scope: !8097)
!8110 = !DILocation(line: 3861, column: 42, scope: !8093)
!8111 = !DILocation(line: 3861, column: 47, scope: !8093)
!8112 = !DILocation(line: 3861, column: 40, scope: !8093)
!8113 = !DILocation(line: 3861, column: 3, scope: !8093)
!8114 = distinct !{!8114, !8094, !8115}
!8115 = !DILocation(line: 3866, column: 3, scope: !8087)
!8116 = !DILocation(line: 3867, column: 2, scope: !8088)
!8117 = !DILocation(line: 3869, column: 9, scope: !8055)
!8118 = !DILocation(line: 3869, column: 2, scope: !8055)
!8119 = distinct !DISubprogram(name: "shuffle_seq_time_offset", scope: !3, file: !3, line: 3825, type: !8120, scopeLine: 3826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8120 = !DISubroutineType(types: !8121)
!8121 = !{!45, !1744, !202, !144}
!8122 = !DILocalVariable(name: "scene", arg: 1, scope: !8119, file: !3, line: 3825, type: !1744)
!8123 = !DILocation(line: 3825, column: 43, scope: !8119)
!8124 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !8119, file: !3, line: 3825, type: !202)
!8125 = !DILocation(line: 3825, column: 60, scope: !8119)
!8126 = !DILocalVariable(name: "dir", arg: 3, scope: !8119, file: !3, line: 3825, type: !144)
!8127 = !DILocation(line: 3825, column: 75, scope: !8119)
!8128 = !DILocalVariable(name: "ofs", scope: !8119, file: !3, line: 3827, type: !45)
!8129 = !DILocation(line: 3827, column: 6, scope: !8119)
!8130 = !DILocalVariable(name: "tot_ofs", scope: !8119, file: !3, line: 3828, type: !45)
!8131 = !DILocation(line: 3828, column: 6, scope: !8119)
!8132 = !DILocalVariable(name: "seq", scope: !8119, file: !3, line: 3829, type: !204)
!8133 = !DILocation(line: 3829, column: 12, scope: !8119)
!8134 = !DILocation(line: 3830, column: 2, scope: !8119)
!8135 = !DILocation(line: 3830, column: 46, scope: !8119)
!8136 = !DILocation(line: 3830, column: 56, scope: !8119)
!8137 = !DILocation(line: 3830, column: 17, scope: !8119)
!8138 = !DILocation(line: 3830, column: 15, scope: !8119)
!8139 = !DILocation(line: 3831, column: 14, scope: !8140)
!8140 = distinct !DILexicalBlock(scope: !8141, file: !3, line: 3831, column: 3)
!8141 = distinct !DILexicalBlock(scope: !8119, file: !3, line: 3830, column: 64)
!8142 = !DILocation(line: 3831, column: 24, scope: !8140)
!8143 = !DILocation(line: 3831, column: 12, scope: !8140)
!8144 = !DILocation(line: 3831, column: 8, scope: !8140)
!8145 = !DILocation(line: 3831, column: 31, scope: !8146)
!8146 = distinct !DILexicalBlock(scope: !8140, file: !3, line: 3831, column: 3)
!8147 = !DILocation(line: 3831, column: 3, scope: !8140)
!8148 = !DILocation(line: 3832, column: 8, scope: !8149)
!8149 = distinct !DILexicalBlock(scope: !8150, file: !3, line: 3832, column: 8)
!8150 = distinct !DILexicalBlock(scope: !8146, file: !3, line: 3831, column: 53)
!8151 = !DILocation(line: 3832, column: 13, scope: !8149)
!8152 = !DILocation(line: 3832, column: 8, scope: !8150)
!8153 = !DILocation(line: 3834, column: 25, scope: !8154)
!8154 = distinct !DILexicalBlock(scope: !8149, file: !3, line: 3832, column: 18)
!8155 = !DILocation(line: 3834, column: 5, scope: !8154)
!8156 = !DILocation(line: 3834, column: 10, scope: !8154)
!8157 = !DILocation(line: 3834, column: 20, scope: !8154)
!8158 = !DILocation(line: 3835, column: 25, scope: !8154)
!8159 = !DILocation(line: 3835, column: 5, scope: !8154)
!8160 = !DILocation(line: 3835, column: 10, scope: !8154)
!8161 = !DILocation(line: 3835, column: 18, scope: !8154)
!8162 = !DILocation(line: 3836, column: 4, scope: !8154)
!8163 = !DILocation(line: 3837, column: 3, scope: !8150)
!8164 = !DILocation(line: 3831, column: 42, scope: !8146)
!8165 = !DILocation(line: 3831, column: 47, scope: !8146)
!8166 = !DILocation(line: 3831, column: 40, scope: !8146)
!8167 = !DILocation(line: 3831, column: 3, scope: !8146)
!8168 = distinct !{!8168, !8147, !8169}
!8169 = !DILocation(line: 3837, column: 3, scope: !8140)
!8170 = !DILocation(line: 3839, column: 14, scope: !8141)
!8171 = !DILocation(line: 3839, column: 11, scope: !8141)
!8172 = distinct !{!8172, !8134, !8173}
!8173 = !DILocation(line: 3840, column: 2, scope: !8119)
!8174 = !DILocation(line: 3842, column: 13, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8119, file: !3, line: 3842, column: 2)
!8176 = !DILocation(line: 3842, column: 23, scope: !8175)
!8177 = !DILocation(line: 3842, column: 11, scope: !8175)
!8178 = !DILocation(line: 3842, column: 7, scope: !8175)
!8179 = !DILocation(line: 3842, column: 30, scope: !8180)
!8180 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 3842, column: 2)
!8181 = !DILocation(line: 3842, column: 2, scope: !8175)
!8182 = !DILocation(line: 3843, column: 7, scope: !8183)
!8183 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 3843, column: 7)
!8184 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 3842, column: 52)
!8185 = !DILocation(line: 3843, column: 12, scope: !8183)
!8186 = !DILocation(line: 3843, column: 7, scope: !8184)
!8187 = !DILocation(line: 3844, column: 27, scope: !8183)
!8188 = !DILocation(line: 3844, column: 34, scope: !8183)
!8189 = !DILocation(line: 3844, column: 4, scope: !8183)
!8190 = !DILocation(line: 3845, column: 2, scope: !8184)
!8191 = !DILocation(line: 3842, column: 41, scope: !8180)
!8192 = !DILocation(line: 3842, column: 46, scope: !8180)
!8193 = !DILocation(line: 3842, column: 39, scope: !8180)
!8194 = !DILocation(line: 3842, column: 2, scope: !8180)
!8195 = distinct !{!8195, !8181, !8196}
!8196 = !DILocation(line: 3845, column: 2, scope: !8175)
!8197 = !DILocation(line: 3847, column: 9, scope: !8119)
!8198 = !DILocation(line: 3847, column: 2, scope: !8119)
!8199 = distinct !DISubprogram(name: "BKE_sequencer_refresh_sound_length", scope: !3, file: !3, line: 3906, type: !2659, scopeLine: 3907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8200 = !DILocalVariable(name: "scene", arg: 1, scope: !8199, file: !3, line: 3906, type: !1744)
!8201 = !DILocation(line: 3906, column: 48, scope: !8199)
!8202 = !DILocation(line: 3913, column: 8, scope: !8199)
!8203 = !DILocation(line: 3915, column: 1, scope: !8199)
!8204 = distinct !DISubprogram(name: "BKE_sequencer_update_sound_bounds_all", scope: !3, file: !3, line: 3917, type: !2659, scopeLine: 3918, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8205 = !DILocalVariable(name: "scene", arg: 1, scope: !8204, file: !3, line: 3917, type: !1744)
!8206 = !DILocation(line: 3917, column: 51, scope: !8204)
!8207 = !DILocalVariable(name: "ed", scope: !8204, file: !3, line: 3919, type: !2176)
!8208 = !DILocation(line: 3919, column: 11, scope: !8204)
!8209 = !DILocation(line: 3919, column: 16, scope: !8204)
!8210 = !DILocation(line: 3919, column: 23, scope: !8204)
!8211 = !DILocation(line: 3921, column: 6, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8204, file: !3, line: 3921, column: 6)
!8213 = !DILocation(line: 3921, column: 6, scope: !8204)
!8214 = !DILocalVariable(name: "seq", scope: !8215, file: !3, line: 3922, type: !204)
!8215 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 3921, column: 10)
!8216 = !DILocation(line: 3922, column: 13, scope: !8215)
!8217 = !DILocation(line: 3924, column: 14, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 3924, column: 3)
!8219 = !DILocation(line: 3924, column: 18, scope: !8218)
!8220 = !DILocation(line: 3924, column: 26, scope: !8218)
!8221 = !DILocation(line: 3924, column: 12, scope: !8218)
!8222 = !DILocation(line: 3924, column: 8, scope: !8218)
!8223 = !DILocation(line: 3924, column: 33, scope: !8224)
!8224 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 3924, column: 3)
!8225 = !DILocation(line: 3924, column: 3, scope: !8218)
!8226 = !DILocation(line: 3925, column: 8, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 3925, column: 8)
!8228 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 3924, column: 55)
!8229 = !DILocation(line: 3925, column: 13, scope: !8227)
!8230 = !DILocation(line: 3925, column: 18, scope: !8227)
!8231 = !DILocation(line: 3925, column: 8, scope: !8228)
!8232 = !DILocation(line: 3926, column: 39, scope: !8233)
!8233 = distinct !DILexicalBlock(scope: !8227, file: !3, line: 3925, column: 36)
!8234 = !DILocation(line: 3926, column: 46, scope: !8233)
!8235 = !DILocation(line: 3926, column: 5, scope: !8233)
!8236 = !DILocation(line: 3927, column: 4, scope: !8233)
!8237 = !DILocation(line: 3928, column: 13, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8227, file: !3, line: 3928, column: 13)
!8239 = !DILocation(line: 3928, column: 13, scope: !8227)
!8240 = !DILocation(line: 3929, column: 39, scope: !8241)
!8241 = distinct !DILexicalBlock(scope: !8238, file: !3, line: 3928, column: 66)
!8242 = !DILocation(line: 3929, column: 46, scope: !8241)
!8243 = !DILocation(line: 3929, column: 5, scope: !8241)
!8244 = !DILocation(line: 3930, column: 4, scope: !8241)
!8245 = !DILocation(line: 3931, column: 3, scope: !8228)
!8246 = !DILocation(line: 3924, column: 44, scope: !8224)
!8247 = !DILocation(line: 3924, column: 49, scope: !8224)
!8248 = !DILocation(line: 3924, column: 42, scope: !8224)
!8249 = !DILocation(line: 3924, column: 3, scope: !8224)
!8250 = distinct !{!8250, !8225, !8251}
!8251 = !DILocation(line: 3931, column: 3, scope: !8218)
!8252 = !DILocation(line: 3932, column: 2, scope: !8215)
!8253 = !DILocation(line: 3933, column: 1, scope: !8204)
!8254 = distinct !DISubprogram(name: "BKE_sequencer_update_muting", scope: !3, file: !3, line: 3977, type: !8255, scopeLine: 3978, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8255 = !DISubroutineType(types: !8256)
!8256 = !{null, !2176}
!8257 = !DILocalVariable(name: "ed", arg: 1, scope: !8254, file: !3, line: 3977, type: !2176)
!8258 = !DILocation(line: 3977, column: 43, scope: !8254)
!8259 = !DILocation(line: 3979, column: 6, scope: !8260)
!8260 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 3979, column: 6)
!8261 = !DILocation(line: 3979, column: 6, scope: !8254)
!8262 = !DILocalVariable(name: "ms", scope: !8263, file: !3, line: 3981, type: !194)
!8263 = distinct !DILexicalBlock(scope: !8260, file: !3, line: 3979, column: 10)
!8264 = !DILocation(line: 3981, column: 14, scope: !8263)
!8265 = !DILocation(line: 3981, column: 19, scope: !8263)
!8266 = !DILocation(line: 3981, column: 23, scope: !8263)
!8267 = !DILocation(line: 3981, column: 33, scope: !8263)
!8268 = !DILocation(line: 3983, column: 7, scope: !8269)
!8269 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 3983, column: 7)
!8270 = !DILocation(line: 3983, column: 7, scope: !8263)
!8271 = !DILocation(line: 3984, column: 33, scope: !8269)
!8272 = !DILocation(line: 3984, column: 37, scope: !8269)
!8273 = !DILocation(line: 3984, column: 46, scope: !8269)
!8274 = !DILocation(line: 3984, column: 50, scope: !8269)
!8275 = !DILocation(line: 3984, column: 4, scope: !8269)
!8276 = !DILocation(line: 3986, column: 33, scope: !8269)
!8277 = !DILocation(line: 3986, column: 37, scope: !8269)
!8278 = !DILocation(line: 3986, column: 4, scope: !8269)
!8279 = !DILocation(line: 3987, column: 2, scope: !8263)
!8280 = !DILocation(line: 3988, column: 1, scope: !8254)
!8281 = distinct !DISubprogram(name: "seq_update_muting_recursive", scope: !3, file: !3, line: 3951, type: !8282, scopeLine: 3952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8282 = !DISubroutineType(types: !8283)
!8283 = !{null, !202, !204, !45}
!8284 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !8281, file: !3, line: 3951, type: !202)
!8285 = !DILocation(line: 3951, column: 51, scope: !8281)
!8286 = !DILocalVariable(name: "metaseq", arg: 2, scope: !8281, file: !3, line: 3951, type: !204)
!8287 = !DILocation(line: 3951, column: 71, scope: !8281)
!8288 = !DILocalVariable(name: "mute", arg: 3, scope: !8281, file: !3, line: 3951, type: !45)
!8289 = !DILocation(line: 3951, column: 84, scope: !8281)
!8290 = !DILocalVariable(name: "seq", scope: !8281, file: !3, line: 3953, type: !204)
!8291 = !DILocation(line: 3953, column: 12, scope: !8281)
!8292 = !DILocalVariable(name: "seqmute", scope: !8281, file: !3, line: 3954, type: !45)
!8293 = !DILocation(line: 3954, column: 6, scope: !8281)
!8294 = !DILocation(line: 3958, column: 13, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 3958, column: 2)
!8296 = !DILocation(line: 3958, column: 23, scope: !8295)
!8297 = !DILocation(line: 3958, column: 11, scope: !8295)
!8298 = !DILocation(line: 3958, column: 7, scope: !8295)
!8299 = !DILocation(line: 3958, column: 30, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 3958, column: 2)
!8301 = !DILocation(line: 3958, column: 2, scope: !8295)
!8302 = !DILocation(line: 3959, column: 14, scope: !8303)
!8303 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 3958, column: 52)
!8304 = !DILocation(line: 3959, column: 19, scope: !8303)
!8305 = !DILocation(line: 3959, column: 23, scope: !8303)
!8306 = !DILocation(line: 3959, column: 28, scope: !8303)
!8307 = !DILocation(line: 3959, column: 33, scope: !8303)
!8308 = !DILocation(line: 3959, column: 11, scope: !8303)
!8309 = !DILocation(line: 3961, column: 7, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8303, file: !3, line: 3961, column: 7)
!8311 = !DILocation(line: 3961, column: 12, scope: !8310)
!8312 = !DILocation(line: 3961, column: 17, scope: !8310)
!8313 = !DILocation(line: 3961, column: 7, scope: !8303)
!8314 = !DILocation(line: 3964, column: 8, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8316, file: !3, line: 3964, column: 8)
!8316 = distinct !DILexicalBlock(scope: !8310, file: !3, line: 3961, column: 35)
!8317 = !DILocation(line: 3964, column: 15, scope: !8315)
!8318 = !DILocation(line: 3964, column: 12, scope: !8315)
!8319 = !DILocation(line: 3964, column: 8, scope: !8316)
!8320 = !DILocation(line: 3965, column: 13, scope: !8315)
!8321 = !DILocation(line: 3965, column: 5, scope: !8315)
!8322 = !DILocation(line: 3967, column: 33, scope: !8316)
!8323 = !DILocation(line: 3967, column: 38, scope: !8316)
!8324 = !DILocation(line: 3967, column: 47, scope: !8316)
!8325 = !DILocation(line: 3967, column: 56, scope: !8316)
!8326 = !DILocation(line: 3967, column: 4, scope: !8316)
!8327 = !DILocation(line: 3968, column: 3, scope: !8316)
!8328 = !DILocation(line: 3969, column: 12, scope: !8329)
!8329 = distinct !DILexicalBlock(scope: !8310, file: !3, line: 3969, column: 12)
!8330 = !DILocation(line: 3969, column: 12, scope: !8310)
!8331 = !DILocation(line: 3970, column: 8, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 3970, column: 8)
!8333 = distinct !DILexicalBlock(scope: !8329, file: !3, line: 3969, column: 65)
!8334 = !DILocation(line: 3970, column: 13, scope: !8332)
!8335 = !DILocation(line: 3970, column: 8, scope: !8333)
!8336 = !DILocation(line: 3971, column: 28, scope: !8337)
!8337 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 3970, column: 26)
!8338 = !DILocation(line: 3971, column: 33, scope: !8337)
!8339 = !DILocation(line: 3971, column: 46, scope: !8337)
!8340 = !DILocation(line: 3971, column: 5, scope: !8337)
!8341 = !DILocation(line: 3972, column: 4, scope: !8337)
!8342 = !DILocation(line: 3973, column: 3, scope: !8333)
!8343 = !DILocation(line: 3974, column: 2, scope: !8303)
!8344 = !DILocation(line: 3958, column: 41, scope: !8300)
!8345 = !DILocation(line: 3958, column: 46, scope: !8300)
!8346 = !DILocation(line: 3958, column: 39, scope: !8300)
!8347 = !DILocation(line: 3958, column: 2, scope: !8300)
!8348 = distinct !{!8348, !8301, !8349}
!8349 = !DILocation(line: 3974, column: 2, scope: !8295)
!8350 = !DILocation(line: 3975, column: 1, scope: !8281)
!8351 = distinct !DISubprogram(name: "BKE_sequencer_update_sound", scope: !3, file: !3, line: 4006, type: !8352, scopeLine: 4007, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8352 = !DISubroutineType(types: !8353)
!8353 = !{null, !1744, !1740}
!8354 = !DILocalVariable(name: "scene", arg: 1, scope: !8351, file: !3, line: 4006, type: !1744)
!8355 = !DILocation(line: 4006, column: 40, scope: !8351)
!8356 = !DILocalVariable(name: "sound", arg: 2, scope: !8351, file: !3, line: 4006, type: !1740)
!8357 = !DILocation(line: 4006, column: 55, scope: !8351)
!8358 = !DILocation(line: 4008, column: 6, scope: !8359)
!8359 = distinct !DILexicalBlock(scope: !8351, file: !3, line: 4008, column: 6)
!8360 = !DILocation(line: 4008, column: 13, scope: !8359)
!8361 = !DILocation(line: 4008, column: 6, scope: !8351)
!8362 = !DILocation(line: 4009, column: 30, scope: !8363)
!8363 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 4008, column: 17)
!8364 = !DILocation(line: 4009, column: 38, scope: !8363)
!8365 = !DILocation(line: 4009, column: 45, scope: !8363)
!8366 = !DILocation(line: 4009, column: 49, scope: !8363)
!8367 = !DILocation(line: 4009, column: 58, scope: !8363)
!8368 = !DILocation(line: 4009, column: 3, scope: !8363)
!8369 = !DILocation(line: 4010, column: 2, scope: !8363)
!8370 = !DILocation(line: 4011, column: 1, scope: !8351)
!8371 = distinct !DISubprogram(name: "seq_update_sound_recursive", scope: !3, file: !3, line: 3990, type: !8372, scopeLine: 3991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8372 = !DISubroutineType(types: !8373)
!8373 = !{null, !1744, !202, !1740}
!8374 = !DILocalVariable(name: "scene", arg: 1, scope: !8371, file: !3, line: 3990, type: !1744)
!8375 = !DILocation(line: 3990, column: 47, scope: !8371)
!8376 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !8371, file: !3, line: 3990, type: !202)
!8377 = !DILocation(line: 3990, column: 64, scope: !8371)
!8378 = !DILocalVariable(name: "sound", arg: 3, scope: !8371, file: !3, line: 3990, type: !1740)
!8379 = !DILocation(line: 3990, column: 82, scope: !8371)
!8380 = !DILocalVariable(name: "seq", scope: !8371, file: !3, line: 3992, type: !204)
!8381 = !DILocation(line: 3992, column: 12, scope: !8371)
!8382 = !DILocation(line: 3994, column: 13, scope: !8383)
!8383 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 3994, column: 2)
!8384 = !DILocation(line: 3994, column: 23, scope: !8383)
!8385 = !DILocation(line: 3994, column: 11, scope: !8383)
!8386 = !DILocation(line: 3994, column: 7, scope: !8383)
!8387 = !DILocation(line: 3994, column: 30, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8383, file: !3, line: 3994, column: 2)
!8389 = !DILocation(line: 3994, column: 2, scope: !8383)
!8390 = !DILocation(line: 3995, column: 7, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8392, file: !3, line: 3995, column: 7)
!8392 = distinct !DILexicalBlock(scope: !8388, file: !3, line: 3994, column: 52)
!8393 = !DILocation(line: 3995, column: 12, scope: !8391)
!8394 = !DILocation(line: 3995, column: 17, scope: !8391)
!8395 = !DILocation(line: 3995, column: 7, scope: !8392)
!8396 = !DILocation(line: 3996, column: 31, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 3995, column: 35)
!8398 = !DILocation(line: 3996, column: 39, scope: !8397)
!8399 = !DILocation(line: 3996, column: 44, scope: !8397)
!8400 = !DILocation(line: 3996, column: 53, scope: !8397)
!8401 = !DILocation(line: 3996, column: 4, scope: !8397)
!8402 = !DILocation(line: 3997, column: 3, scope: !8397)
!8403 = !DILocation(line: 3998, column: 12, scope: !8404)
!8404 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 3998, column: 12)
!8405 = !DILocation(line: 3998, column: 17, scope: !8404)
!8406 = !DILocation(line: 3998, column: 22, scope: !8404)
!8407 = !DILocation(line: 3998, column: 12, scope: !8391)
!8408 = !DILocation(line: 3999, column: 8, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 3999, column: 8)
!8410 = distinct !DILexicalBlock(scope: !8404, file: !3, line: 3998, column: 45)
!8411 = !DILocation(line: 3999, column: 13, scope: !8409)
!8412 = !DILocation(line: 3999, column: 25, scope: !8409)
!8413 = !DILocation(line: 3999, column: 28, scope: !8409)
!8414 = !DILocation(line: 3999, column: 37, scope: !8409)
!8415 = !DILocation(line: 3999, column: 42, scope: !8409)
!8416 = !DILocation(line: 3999, column: 34, scope: !8409)
!8417 = !DILocation(line: 3999, column: 8, scope: !8410)
!8418 = !DILocation(line: 4000, column: 30, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !8409, file: !3, line: 3999, column: 49)
!8420 = !DILocation(line: 4000, column: 35, scope: !8419)
!8421 = !DILocation(line: 4000, column: 48, scope: !8419)
!8422 = !DILocation(line: 4000, column: 5, scope: !8419)
!8423 = !DILocation(line: 4001, column: 4, scope: !8419)
!8424 = !DILocation(line: 4002, column: 3, scope: !8410)
!8425 = !DILocation(line: 4003, column: 2, scope: !8392)
!8426 = !DILocation(line: 3994, column: 41, scope: !8388)
!8427 = !DILocation(line: 3994, column: 46, scope: !8388)
!8428 = !DILocation(line: 3994, column: 39, scope: !8388)
!8429 = !DILocation(line: 3994, column: 2, scope: !8388)
!8430 = distinct !{!8430, !8389, !8431}
!8431 = !DILocation(line: 4003, column: 2, scope: !8383)
!8432 = !DILocation(line: 4004, column: 1, scope: !8371)
!8433 = distinct !DISubprogram(name: "BKE_sequence_seqbase", scope: !3, file: !3, line: 4014, type: !8434, scopeLine: 4015, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8434 = !DISubroutineType(types: !8435)
!8435 = !{!2364, !202, !204}
!8436 = !DILocalVariable(name: "seqbase", arg: 1, scope: !8433, file: !3, line: 4014, type: !202)
!8437 = !DILocation(line: 4014, column: 42, scope: !8433)
!8438 = !DILocalVariable(name: "seq", arg: 2, scope: !8433, file: !3, line: 4014, type: !204)
!8439 = !DILocation(line: 4014, column: 61, scope: !8433)
!8440 = !DILocalVariable(name: "iseq", scope: !8433, file: !3, line: 4016, type: !204)
!8441 = !DILocation(line: 4016, column: 12, scope: !8433)
!8442 = !DILocalVariable(name: "lb", scope: !8433, file: !3, line: 4017, type: !202)
!8443 = !DILocation(line: 4017, column: 12, scope: !8433)
!8444 = !DILocation(line: 4019, column: 14, scope: !8445)
!8445 = distinct !DILexicalBlock(scope: !8433, file: !3, line: 4019, column: 2)
!8446 = !DILocation(line: 4019, column: 23, scope: !8445)
!8447 = !DILocation(line: 4019, column: 12, scope: !8445)
!8448 = !DILocation(line: 4019, column: 7, scope: !8445)
!8449 = !DILocation(line: 4019, column: 30, scope: !8450)
!8450 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 4019, column: 2)
!8451 = !DILocation(line: 4019, column: 2, scope: !8445)
!8452 = !DILocation(line: 4020, column: 7, scope: !8453)
!8453 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 4020, column: 7)
!8454 = distinct !DILexicalBlock(scope: !8450, file: !3, line: 4019, column: 55)
!8455 = !DILocation(line: 4020, column: 14, scope: !8453)
!8456 = !DILocation(line: 4020, column: 11, scope: !8453)
!8457 = !DILocation(line: 4020, column: 7, scope: !8454)
!8458 = !DILocation(line: 4021, column: 11, scope: !8459)
!8459 = distinct !DILexicalBlock(scope: !8453, file: !3, line: 4020, column: 20)
!8460 = !DILocation(line: 4021, column: 4, scope: !8459)
!8461 = !DILocation(line: 4023, column: 12, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8453, file: !3, line: 4023, column: 12)
!8463 = !DILocation(line: 4023, column: 18, scope: !8462)
!8464 = !DILocation(line: 4023, column: 26, scope: !8462)
!8465 = !DILocation(line: 4023, column: 32, scope: !8462)
!8466 = !DILocation(line: 4023, column: 63, scope: !8462)
!8467 = !DILocation(line: 4023, column: 69, scope: !8462)
!8468 = !DILocation(line: 4023, column: 78, scope: !8462)
!8469 = !DILocation(line: 4023, column: 41, scope: !8462)
!8470 = !DILocation(line: 4023, column: 39, scope: !8462)
!8471 = !DILocation(line: 4023, column: 12, scope: !8453)
!8472 = !DILocation(line: 4024, column: 11, scope: !8473)
!8473 = distinct !DILexicalBlock(scope: !8462, file: !3, line: 4023, column: 85)
!8474 = !DILocation(line: 4024, column: 4, scope: !8473)
!8475 = !DILocation(line: 4026, column: 2, scope: !8454)
!8476 = !DILocation(line: 4019, column: 43, scope: !8450)
!8477 = !DILocation(line: 4019, column: 49, scope: !8450)
!8478 = !DILocation(line: 4019, column: 41, scope: !8450)
!8479 = !DILocation(line: 4019, column: 2, scope: !8450)
!8480 = distinct !{!8480, !8451, !8481}
!8481 = !DILocation(line: 4026, column: 2, scope: !8445)
!8482 = !DILocation(line: 4028, column: 2, scope: !8433)
!8483 = !DILocation(line: 4029, column: 1, scope: !8433)
!8484 = distinct !DISubprogram(name: "BKE_sequence_metastrip", scope: !3, file: !3, line: 4031, type: !8485, scopeLine: 4032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8485 = !DISubroutineType(types: !8486)
!8486 = !{!209, !202, !204, !204}
!8487 = !DILocalVariable(name: "seqbase", arg: 1, scope: !8484, file: !3, line: 4031, type: !202)
!8488 = !DILocation(line: 4031, column: 44, scope: !8484)
!8489 = !DILocalVariable(name: "meta", arg: 2, scope: !8484, file: !3, line: 4031, type: !204)
!8490 = !DILocation(line: 4031, column: 63, scope: !8484)
!8491 = !DILocalVariable(name: "seq", arg: 3, scope: !8484, file: !3, line: 4031, type: !204)
!8492 = !DILocation(line: 4031, column: 79, scope: !8484)
!8493 = !DILocalVariable(name: "iseq", scope: !8484, file: !3, line: 4033, type: !204)
!8494 = !DILocation(line: 4033, column: 12, scope: !8484)
!8495 = !DILocation(line: 4035, column: 14, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8484, file: !3, line: 4035, column: 2)
!8497 = !DILocation(line: 4035, column: 23, scope: !8496)
!8498 = !DILocation(line: 4035, column: 12, scope: !8496)
!8499 = !DILocation(line: 4035, column: 7, scope: !8496)
!8500 = !DILocation(line: 4035, column: 30, scope: !8501)
!8501 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 4035, column: 2)
!8502 = !DILocation(line: 4035, column: 2, scope: !8496)
!8503 = !DILocalVariable(name: "rval", scope: !8504, file: !3, line: 4036, type: !204)
!8504 = distinct !DILexicalBlock(scope: !8501, file: !3, line: 4035, column: 55)
!8505 = !DILocation(line: 4036, column: 13, scope: !8504)
!8506 = !DILocation(line: 4038, column: 7, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 4038, column: 7)
!8508 = !DILocation(line: 4038, column: 14, scope: !8507)
!8509 = !DILocation(line: 4038, column: 11, scope: !8507)
!8510 = !DILocation(line: 4038, column: 7, scope: !8504)
!8511 = !DILocation(line: 4039, column: 11, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 4038, column: 20)
!8513 = !DILocation(line: 4039, column: 4, scope: !8512)
!8514 = !DILocation(line: 4041, column: 12, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 4041, column: 12)
!8516 = !DILocation(line: 4041, column: 18, scope: !8515)
!8517 = !DILocation(line: 4041, column: 26, scope: !8515)
!8518 = !DILocation(line: 4041, column: 32, scope: !8515)
!8519 = !DILocation(line: 4042, column: 44, scope: !8515)
!8520 = !DILocation(line: 4042, column: 50, scope: !8515)
!8521 = !DILocation(line: 4042, column: 59, scope: !8515)
!8522 = !DILocation(line: 4042, column: 65, scope: !8515)
!8523 = !DILocation(line: 4042, column: 20, scope: !8515)
!8524 = !DILocation(line: 4042, column: 18, scope: !8515)
!8525 = !DILocation(line: 4041, column: 12, scope: !8507)
!8526 = !DILocation(line: 4044, column: 11, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8515, file: !3, line: 4043, column: 3)
!8528 = !DILocation(line: 4044, column: 4, scope: !8527)
!8529 = !DILocation(line: 4046, column: 2, scope: !8504)
!8530 = !DILocation(line: 4035, column: 43, scope: !8501)
!8531 = !DILocation(line: 4035, column: 49, scope: !8501)
!8532 = !DILocation(line: 4035, column: 41, scope: !8501)
!8533 = !DILocation(line: 4035, column: 2, scope: !8501)
!8534 = distinct !{!8534, !8502, !8535}
!8535 = !DILocation(line: 4046, column: 2, scope: !8496)
!8536 = !DILocation(line: 4048, column: 2, scope: !8484)
!8537 = !DILocation(line: 4049, column: 1, scope: !8484)
!8538 = distinct !DISubprogram(name: "BKE_sequence_swap", scope: !3, file: !3, line: 4051, type: !8539, scopeLine: 4052, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8539 = !DISubroutineType(types: !8540)
!8540 = !{!45, !204, !204, !8541}
!8541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2797, size: 64)
!8542 = !DILocalVariable(name: "seq_a", arg: 1, scope: !8538, file: !3, line: 4051, type: !204)
!8543 = !DILocation(line: 4051, column: 33, scope: !8538)
!8544 = !DILocalVariable(name: "seq_b", arg: 2, scope: !8538, file: !3, line: 4051, type: !204)
!8545 = !DILocation(line: 4051, column: 50, scope: !8538)
!8546 = !DILocalVariable(name: "error_str", arg: 3, scope: !8538, file: !3, line: 4051, type: !8541)
!8547 = !DILocation(line: 4051, column: 70, scope: !8538)
!8548 = !DILocalVariable(name: "name", scope: !8538, file: !3, line: 4053, type: !173)
!8549 = !DILocation(line: 4053, column: 7, scope: !8538)
!8550 = !DILocation(line: 4055, column: 6, scope: !8551)
!8551 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4055, column: 6)
!8552 = !DILocation(line: 4055, column: 13, scope: !8551)
!8553 = !DILocation(line: 4055, column: 20, scope: !8551)
!8554 = !DILocation(line: 4055, column: 27, scope: !8551)
!8555 = !DILocation(line: 4055, column: 17, scope: !8551)
!8556 = !DILocation(line: 4055, column: 6, scope: !8538)
!8557 = !DILocation(line: 4056, column: 4, scope: !8558)
!8558 = distinct !DILexicalBlock(scope: !8551, file: !3, line: 4055, column: 32)
!8559 = !DILocation(line: 4056, column: 14, scope: !8558)
!8560 = !DILocation(line: 4057, column: 3, scope: !8558)
!8561 = !DILocation(line: 4061, column: 6, scope: !8562)
!8562 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4061, column: 6)
!8563 = !DILocation(line: 4061, column: 13, scope: !8562)
!8564 = !DILocation(line: 4061, column: 21, scope: !8562)
!8565 = !DILocation(line: 4061, column: 28, scope: !8562)
!8566 = !DILocation(line: 4061, column: 18, scope: !8562)
!8567 = !DILocation(line: 4061, column: 6, scope: !8538)
!8568 = !DILocation(line: 4062, column: 7, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 4062, column: 7)
!8570 = distinct !DILexicalBlock(scope: !8562, file: !3, line: 4061, column: 34)
!8571 = !DILocation(line: 4062, column: 14, scope: !8569)
!8572 = !DILocation(line: 4062, column: 19, scope: !8569)
!8573 = !DILocation(line: 4062, column: 41, scope: !8569)
!8574 = !DILocation(line: 4062, column: 44, scope: !8569)
!8575 = !DILocation(line: 4062, column: 51, scope: !8569)
!8576 = !DILocation(line: 4062, column: 56, scope: !8569)
!8577 = !DILocation(line: 4062, column: 7, scope: !8570)
!8578 = !DILocation(line: 4063, column: 5, scope: !8579)
!8579 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 4062, column: 79)
!8580 = !DILocation(line: 4063, column: 15, scope: !8579)
!8581 = !DILocation(line: 4064, column: 4, scope: !8579)
!8582 = !DILocation(line: 4068, column: 8, scope: !8583)
!8583 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 4068, column: 7)
!8584 = !DILocation(line: 4068, column: 15, scope: !8583)
!8585 = !DILocation(line: 4068, column: 20, scope: !8583)
!8586 = !DILocation(line: 4068, column: 43, scope: !8583)
!8587 = !DILocation(line: 4068, column: 50, scope: !8583)
!8588 = !DILocation(line: 4068, column: 55, scope: !8583)
!8589 = !DILocation(line: 4068, column: 39, scope: !8583)
!8590 = !DILocation(line: 4068, column: 7, scope: !8570)
!8591 = !DILocation(line: 4069, column: 5, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8583, file: !3, line: 4068, column: 75)
!8593 = !DILocation(line: 4069, column: 15, scope: !8592)
!8594 = !DILocation(line: 4070, column: 4, scope: !8592)
!8595 = !DILocation(line: 4073, column: 8, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 4073, column: 7)
!8597 = !DILocation(line: 4073, column: 15, scope: !8596)
!8598 = !DILocation(line: 4073, column: 20, scope: !8596)
!8599 = !DILocation(line: 4073, column: 39, scope: !8596)
!8600 = !DILocation(line: 4073, column: 43, scope: !8596)
!8601 = !DILocation(line: 4073, column: 50, scope: !8596)
!8602 = !DILocation(line: 4073, column: 55, scope: !8596)
!8603 = !DILocation(line: 4073, column: 7, scope: !8570)
!8604 = !DILocation(line: 4074, column: 43, scope: !8605)
!8605 = distinct !DILexicalBlock(scope: !8606, file: !3, line: 4074, column: 8)
!8606 = distinct !DILexicalBlock(scope: !8596, file: !3, line: 4073, column: 75)
!8607 = !DILocation(line: 4074, column: 50, scope: !8605)
!8608 = !DILocation(line: 4074, column: 8, scope: !8605)
!8609 = !DILocation(line: 4074, column: 94, scope: !8605)
!8610 = !DILocation(line: 4074, column: 101, scope: !8605)
!8611 = !DILocation(line: 4074, column: 59, scope: !8605)
!8612 = !DILocation(line: 4074, column: 56, scope: !8605)
!8613 = !DILocation(line: 4074, column: 8, scope: !8606)
!8614 = !DILocation(line: 4075, column: 6, scope: !8615)
!8615 = distinct !DILexicalBlock(scope: !8605, file: !3, line: 4074, column: 108)
!8616 = !DILocation(line: 4075, column: 16, scope: !8615)
!8617 = !DILocation(line: 4076, column: 5, scope: !8615)
!8618 = !DILocation(line: 4078, column: 3, scope: !8606)
!8619 = !DILocation(line: 4079, column: 2, scope: !8570)
!8620 = !DILocalVariable(name: "sw_ap", scope: !8621, file: !3, line: 4081, type: !205)
!8621 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4081, column: 2)
!8622 = !DILocation(line: 4081, column: 2, scope: !8621)
!8623 = !DILocation(line: 4084, column: 14, scope: !8538)
!8624 = !DILocation(line: 4084, column: 20, scope: !8538)
!8625 = !DILocation(line: 4084, column: 27, scope: !8538)
!8626 = !DILocation(line: 4084, column: 32, scope: !8538)
!8627 = !DILocation(line: 4084, column: 2, scope: !8538)
!8628 = !DILocation(line: 4085, column: 14, scope: !8538)
!8629 = !DILocation(line: 4085, column: 21, scope: !8538)
!8630 = !DILocation(line: 4085, column: 26, scope: !8538)
!8631 = !DILocation(line: 4085, column: 31, scope: !8538)
!8632 = !DILocation(line: 4085, column: 38, scope: !8538)
!8633 = !DILocation(line: 4085, column: 43, scope: !8538)
!8634 = !DILocation(line: 4085, column: 2, scope: !8538)
!8635 = !DILocation(line: 4086, column: 14, scope: !8538)
!8636 = !DILocation(line: 4086, column: 21, scope: !8538)
!8637 = !DILocation(line: 4086, column: 26, scope: !8538)
!8638 = !DILocation(line: 4086, column: 31, scope: !8538)
!8639 = !DILocation(line: 4086, column: 2, scope: !8538)
!8640 = !DILocalVariable(name: "sw_ap", scope: !8641, file: !3, line: 4089, type: !45)
!8641 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4089, column: 2)
!8642 = !DILocation(line: 4089, column: 2, scope: !8641)
!8643 = !DILocalVariable(name: "sw_ap", scope: !8644, file: !3, line: 4090, type: !193)
!8644 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4090, column: 2)
!8645 = !DILocation(line: 4090, column: 2, scope: !8644)
!8646 = !DILocalVariable(name: "sw_ap", scope: !8647, file: !3, line: 4093, type: !204)
!8647 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4093, column: 2)
!8648 = !DILocation(line: 4093, column: 2, scope: !8647)
!8649 = !DILocalVariable(name: "sw_ap", scope: !8650, file: !3, line: 4094, type: !204)
!8650 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4094, column: 2)
!8651 = !DILocation(line: 4094, column: 2, scope: !8650)
!8652 = !DILocalVariable(name: "sw_ap", scope: !8653, file: !3, line: 4095, type: !45)
!8653 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4095, column: 2)
!8654 = !DILocation(line: 4095, column: 2, scope: !8653)
!8655 = !DILocalVariable(name: "sw_ap", scope: !8656, file: !3, line: 4096, type: !45)
!8656 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4096, column: 2)
!8657 = !DILocation(line: 4096, column: 2, scope: !8656)
!8658 = !DILocalVariable(name: "sw_ap", scope: !8659, file: !3, line: 4097, type: !45)
!8659 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4097, column: 2)
!8660 = !DILocation(line: 4097, column: 2, scope: !8659)
!8661 = !DILocalVariable(name: "sw_ap", scope: !8662, file: !3, line: 4098, type: !45)
!8662 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4098, column: 2)
!8663 = !DILocation(line: 4098, column: 2, scope: !8662)
!8664 = !DILocalVariable(name: "sw_ap", scope: !8665, file: !3, line: 4099, type: !45)
!8665 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4099, column: 2)
!8666 = !DILocation(line: 4099, column: 2, scope: !8665)
!8667 = !DILocalVariable(name: "sw_ap", scope: !8668, file: !3, line: 4100, type: !45)
!8668 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4100, column: 2)
!8669 = !DILocation(line: 4100, column: 2, scope: !8668)
!8670 = !DILocalVariable(name: "sw_ap", scope: !8671, file: !3, line: 4101, type: !45)
!8671 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4101, column: 2)
!8672 = !DILocation(line: 4101, column: 2, scope: !8671)
!8673 = !DILocalVariable(name: "sw_ap", scope: !8674, file: !3, line: 4102, type: !45)
!8674 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 4102, column: 2)
!8675 = !DILocation(line: 4102, column: 2, scope: !8674)
!8676 = !DILocation(line: 4104, column: 2, scope: !8538)
!8677 = !DILocation(line: 4105, column: 1, scope: !8538)
!8678 = distinct !DISubprogram(name: "sequencer_rna_path_prefix", scope: !3, file: !3, line: 4110, type: !8679, scopeLine: 4111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8679 = !DISubroutineType(types: !8680)
!8680 = !{!3549, !498, !2797}
!8681 = !DILocalVariable(name: "str", arg: 1, scope: !8678, file: !3, line: 4110, type: !498)
!8682 = !DILocation(line: 4110, column: 46, scope: !8678)
!8683 = !DILocalVariable(name: "name", arg: 2, scope: !8678, file: !3, line: 4110, type: !2797)
!8684 = !DILocation(line: 4110, column: 83, scope: !8678)
!8685 = !DILocalVariable(name: "name_esc", scope: !8678, file: !3, line: 4112, type: !1166)
!8686 = !DILocation(line: 4112, column: 7, scope: !8678)
!8687 = !DILocation(line: 4114, column: 16, scope: !8678)
!8688 = !DILocation(line: 4114, column: 26, scope: !8678)
!8689 = !DILocation(line: 4114, column: 2, scope: !8678)
!8690 = !DILocation(line: 4115, column: 22, scope: !8678)
!8691 = !DILocation(line: 4115, column: 88, scope: !8678)
!8692 = !DILocation(line: 4115, column: 9, scope: !8678)
!8693 = !DILocation(line: 4115, column: 2, scope: !8678)
!8694 = distinct !DISubprogram(name: "BKE_sequencer_dupe_animdata", scope: !3, file: !3, line: 4151, type: !8695, scopeLine: 4152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8695 = !DISubroutineType(types: !8696)
!8696 = !{null, !1744, !2797, !2797}
!8697 = !DILocalVariable(name: "scene", arg: 1, scope: !8694, file: !3, line: 4151, type: !1744)
!8698 = !DILocation(line: 4151, column: 41, scope: !8694)
!8699 = !DILocalVariable(name: "name_src", arg: 2, scope: !8694, file: !3, line: 4151, type: !2797)
!8700 = !DILocation(line: 4151, column: 60, scope: !8694)
!8701 = !DILocalVariable(name: "name_dst", arg: 3, scope: !8694, file: !3, line: 4151, type: !2797)
!8702 = !DILocation(line: 4151, column: 82, scope: !8694)
!8703 = !DILocalVariable(name: "str_from", scope: !8694, file: !3, line: 4153, type: !7608)
!8704 = !DILocation(line: 4153, column: 7, scope: !8694)
!8705 = !DILocalVariable(name: "str_from_len", scope: !8694, file: !3, line: 4154, type: !3549)
!8706 = !DILocation(line: 4154, column: 9, scope: !8694)
!8707 = !DILocalVariable(name: "fcu", scope: !8694, file: !3, line: 4155, type: !7615)
!8708 = !DILocation(line: 4155, column: 10, scope: !8694)
!8709 = !DILocalVariable(name: "fcu_last", scope: !8694, file: !3, line: 4156, type: !7615)
!8710 = !DILocation(line: 4156, column: 10, scope: !8694)
!8711 = !DILocalVariable(name: "fcu_cpy", scope: !8694, file: !3, line: 4157, type: !7615)
!8712 = !DILocation(line: 4157, column: 10, scope: !8694)
!8713 = !DILocalVariable(name: "lb", scope: !8694, file: !3, line: 4158, type: !183)
!8714 = !DILocation(line: 4158, column: 11, scope: !8694)
!8715 = !DILocation(line: 4160, column: 6, scope: !8716)
!8716 = distinct !DILexicalBlock(scope: !8694, file: !3, line: 4160, column: 6)
!8717 = !DILocation(line: 4160, column: 13, scope: !8716)
!8718 = !DILocation(line: 4160, column: 17, scope: !8716)
!8719 = !DILocation(line: 4160, column: 25, scope: !8716)
!8720 = !DILocation(line: 4160, column: 28, scope: !8716)
!8721 = !DILocation(line: 4160, column: 35, scope: !8716)
!8722 = !DILocation(line: 4160, column: 40, scope: !8716)
!8723 = !DILocation(line: 4160, column: 47, scope: !8716)
!8724 = !DILocation(line: 4160, column: 6, scope: !8694)
!8725 = !DILocation(line: 4161, column: 3, scope: !8716)
!8726 = !DILocation(line: 4163, column: 43, scope: !8694)
!8727 = !DILocation(line: 4163, column: 53, scope: !8694)
!8728 = !DILocation(line: 4163, column: 17, scope: !8694)
!8729 = !DILocation(line: 4163, column: 15, scope: !8694)
!8730 = !DILocation(line: 4165, column: 13, scope: !8694)
!8731 = !DILocation(line: 4165, column: 20, scope: !8694)
!8732 = !DILocation(line: 4165, column: 25, scope: !8694)
!8733 = !DILocation(line: 4165, column: 33, scope: !8694)
!8734 = !DILocation(line: 4165, column: 40, scope: !8694)
!8735 = !DILocation(line: 4165, column: 11, scope: !8694)
!8736 = !DILocation(line: 4167, column: 13, scope: !8737)
!8737 = distinct !DILexicalBlock(scope: !8694, file: !3, line: 4167, column: 2)
!8738 = !DILocation(line: 4167, column: 20, scope: !8737)
!8739 = !DILocation(line: 4167, column: 25, scope: !8737)
!8740 = !DILocation(line: 4167, column: 33, scope: !8737)
!8741 = !DILocation(line: 4167, column: 40, scope: !8737)
!8742 = !DILocation(line: 4167, column: 11, scope: !8737)
!8743 = !DILocation(line: 4167, column: 7, scope: !8737)
!8744 = !DILocation(line: 4167, column: 47, scope: !8745)
!8745 = distinct !DILexicalBlock(scope: !8737, file: !3, line: 4167, column: 2)
!8746 = !DILocation(line: 4167, column: 51, scope: !8745)
!8747 = !DILocation(line: 4167, column: 54, scope: !8745)
!8748 = !DILocation(line: 4167, column: 59, scope: !8745)
!8749 = !DILocation(line: 4167, column: 67, scope: !8745)
!8750 = !DILocation(line: 4167, column: 64, scope: !8745)
!8751 = !DILocation(line: 0, scope: !8745)
!8752 = !DILocation(line: 4167, column: 2, scope: !8737)
!8753 = !DILocation(line: 4168, column: 7, scope: !8754)
!8754 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 4168, column: 7)
!8755 = distinct !DILexicalBlock(scope: !8745, file: !3, line: 4167, column: 94)
!8756 = !DILocation(line: 4168, column: 7, scope: !8755)
!8757 = !DILocation(line: 4169, column: 26, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8754, file: !3, line: 4168, column: 56)
!8759 = !DILocation(line: 4169, column: 14, scope: !8758)
!8760 = !DILocation(line: 4169, column: 12, scope: !8758)
!8761 = !DILocation(line: 4170, column: 21, scope: !8758)
!8762 = !DILocation(line: 4170, column: 4, scope: !8758)
!8763 = !DILocation(line: 4171, column: 3, scope: !8758)
!8764 = !DILocation(line: 4172, column: 2, scope: !8755)
!8765 = !DILocation(line: 4167, column: 83, scope: !8745)
!8766 = !DILocation(line: 4167, column: 88, scope: !8745)
!8767 = !DILocation(line: 4167, column: 81, scope: !8745)
!8768 = !DILocation(line: 4167, column: 2, scope: !8745)
!8769 = distinct !{!8769, !8752, !8770}
!8770 = !DILocation(line: 4172, column: 2, scope: !8737)
!8771 = !DILocation(line: 4175, column: 33, scope: !8694)
!8772 = !DILocation(line: 4175, column: 40, scope: !8694)
!8773 = !DILocation(line: 4175, column: 44, scope: !8694)
!8774 = !DILocation(line: 4175, column: 51, scope: !8694)
!8775 = !DILocation(line: 4175, column: 95, scope: !8694)
!8776 = !DILocation(line: 4175, column: 105, scope: !8694)
!8777 = !DILocation(line: 4175, column: 2, scope: !8694)
!8778 = !DILocation(line: 4178, column: 22, scope: !8694)
!8779 = !DILocation(line: 4178, column: 29, scope: !8694)
!8780 = !DILocation(line: 4178, column: 34, scope: !8694)
!8781 = !DILocation(line: 4178, column: 42, scope: !8694)
!8782 = !DILocation(line: 4178, column: 2, scope: !8694)
!8783 = !DILocation(line: 4179, column: 1, scope: !8694)
!8784 = distinct !DISubprogram(name: "BKE_sequence_get_by_name", scope: !3, file: !3, line: 4212, type: !8785, scopeLine: 4213, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8785 = !DISubroutineType(types: !8786)
!8786 = !{!209, !202, !2797, !742}
!8787 = !DILocalVariable(name: "seqbase", arg: 1, scope: !8784, file: !3, line: 4212, type: !202)
!8788 = !DILocation(line: 4212, column: 46, scope: !8784)
!8789 = !DILocalVariable(name: "name", arg: 2, scope: !8784, file: !3, line: 4212, type: !2797)
!8790 = !DILocation(line: 4212, column: 67, scope: !8784)
!8791 = !DILocalVariable(name: "recursive", arg: 3, scope: !8784, file: !3, line: 4212, type: !742)
!8792 = !DILocation(line: 4212, column: 78, scope: !8784)
!8793 = !DILocalVariable(name: "iseq", scope: !8784, file: !3, line: 4214, type: !204)
!8794 = !DILocation(line: 4214, column: 12, scope: !8784)
!8795 = !DILocalVariable(name: "rseq", scope: !8784, file: !3, line: 4215, type: !204)
!8796 = !DILocation(line: 4215, column: 12, scope: !8784)
!8797 = !DILocation(line: 4217, column: 14, scope: !8798)
!8798 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 4217, column: 2)
!8799 = !DILocation(line: 4217, column: 23, scope: !8798)
!8800 = !DILocation(line: 4217, column: 12, scope: !8798)
!8801 = !DILocation(line: 4217, column: 7, scope: !8798)
!8802 = !DILocation(line: 4217, column: 30, scope: !8803)
!8803 = distinct !DILexicalBlock(scope: !8798, file: !3, line: 4217, column: 2)
!8804 = !DILocation(line: 4217, column: 2, scope: !8798)
!8805 = !DILocation(line: 4218, column: 7, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 4218, column: 7)
!8807 = distinct !DILexicalBlock(scope: !8803, file: !3, line: 4217, column: 55)
!8808 = !DILocation(line: 4218, column: 7, scope: !8807)
!8809 = !DILocation(line: 4219, column: 11, scope: !8806)
!8810 = !DILocation(line: 4219, column: 4, scope: !8806)
!8811 = !DILocation(line: 4220, column: 12, scope: !8812)
!8812 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 4220, column: 12)
!8813 = !DILocation(line: 4220, column: 22, scope: !8812)
!8814 = !DILocation(line: 4220, column: 26, scope: !8812)
!8815 = !DILocation(line: 4220, column: 32, scope: !8812)
!8816 = !DILocation(line: 4220, column: 40, scope: !8812)
!8817 = !DILocation(line: 4220, column: 25, scope: !8812)
!8818 = !DILocation(line: 4220, column: 47, scope: !8812)
!8819 = !DILocation(line: 4220, column: 84, scope: !8812)
!8820 = !DILocation(line: 4220, column: 90, scope: !8812)
!8821 = !DILocation(line: 4220, column: 99, scope: !8812)
!8822 = !DILocation(line: 4220, column: 58, scope: !8812)
!8823 = !DILocation(line: 4220, column: 56, scope: !8812)
!8824 = !DILocation(line: 4220, column: 12, scope: !8806)
!8825 = !DILocation(line: 4221, column: 11, scope: !8826)
!8826 = distinct !DILexicalBlock(scope: !8812, file: !3, line: 4220, column: 110)
!8827 = !DILocation(line: 4221, column: 4, scope: !8826)
!8828 = !DILocation(line: 4223, column: 2, scope: !8807)
!8829 = !DILocation(line: 4217, column: 43, scope: !8803)
!8830 = !DILocation(line: 4217, column: 49, scope: !8803)
!8831 = !DILocation(line: 4217, column: 41, scope: !8803)
!8832 = !DILocation(line: 4217, column: 2, scope: !8803)
!8833 = distinct !{!8833, !8804, !8834}
!8834 = !DILocation(line: 4223, column: 2, scope: !8798)
!8835 = !DILocation(line: 4225, column: 2, scope: !8784)
!8836 = !DILocation(line: 4226, column: 1, scope: !8784)
!8837 = distinct !DISubprogram(name: "BKE_sequencer_from_elem", scope: !3, file: !3, line: 4232, type: !8838, scopeLine: 4233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8838 = !DISubroutineType(types: !8839)
!8839 = !{!209, !202, !246}
!8840 = !DILocalVariable(name: "seqbase", arg: 1, scope: !8837, file: !3, line: 4232, type: !202)
!8841 = !DILocation(line: 4232, column: 45, scope: !8837)
!8842 = !DILocalVariable(name: "se", arg: 2, scope: !8837, file: !3, line: 4232, type: !246)
!8843 = !DILocation(line: 4232, column: 65, scope: !8837)
!8844 = !DILocalVariable(name: "iseq", scope: !8837, file: !3, line: 4234, type: !204)
!8845 = !DILocation(line: 4234, column: 12, scope: !8837)
!8846 = !DILocation(line: 4236, column: 14, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !8837, file: !3, line: 4236, column: 2)
!8848 = !DILocation(line: 4236, column: 23, scope: !8847)
!8849 = !DILocation(line: 4236, column: 12, scope: !8847)
!8850 = !DILocation(line: 4236, column: 7, scope: !8847)
!8851 = !DILocation(line: 4236, column: 30, scope: !8852)
!8852 = distinct !DILexicalBlock(scope: !8847, file: !3, line: 4236, column: 2)
!8853 = !DILocation(line: 4236, column: 2, scope: !8847)
!8854 = !DILocalVariable(name: "seq_found", scope: !8855, file: !3, line: 4237, type: !204)
!8855 = distinct !DILexicalBlock(scope: !8852, file: !3, line: 4236, column: 55)
!8856 = !DILocation(line: 4237, column: 13, scope: !8855)
!8857 = !DILocation(line: 4238, column: 8, scope: !8858)
!8858 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 4238, column: 7)
!8859 = !DILocation(line: 4238, column: 14, scope: !8858)
!8860 = !DILocation(line: 4238, column: 20, scope: !8858)
!8861 = !DILocation(line: 4238, column: 23, scope: !8858)
!8862 = !DILocation(line: 4238, column: 29, scope: !8858)
!8863 = !DILocation(line: 4238, column: 36, scope: !8858)
!8864 = !DILocation(line: 4238, column: 47, scope: !8858)
!8865 = !DILocation(line: 4239, column: 8, scope: !8858)
!8866 = !DILocation(line: 4238, column: 7, scope: !8855)
!8867 = !DILocation(line: 4241, column: 4, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 4240, column: 3)
!8869 = !DILocation(line: 4243, column: 50, scope: !8870)
!8870 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 4243, column: 12)
!8871 = !DILocation(line: 4243, column: 56, scope: !8870)
!8872 = !DILocation(line: 4243, column: 65, scope: !8870)
!8873 = !DILocation(line: 4243, column: 25, scope: !8870)
!8874 = !DILocation(line: 4243, column: 23, scope: !8870)
!8875 = !DILocation(line: 4243, column: 12, scope: !8858)
!8876 = !DILocation(line: 4244, column: 11, scope: !8877)
!8877 = distinct !DILexicalBlock(scope: !8870, file: !3, line: 4243, column: 71)
!8878 = !DILocation(line: 4244, column: 9, scope: !8877)
!8879 = !DILocation(line: 4245, column: 4, scope: !8877)
!8880 = !DILocation(line: 4247, column: 2, scope: !8855)
!8881 = !DILocation(line: 4236, column: 43, scope: !8852)
!8882 = !DILocation(line: 4236, column: 49, scope: !8852)
!8883 = !DILocation(line: 4236, column: 41, scope: !8852)
!8884 = !DILocation(line: 4236, column: 2, scope: !8852)
!8885 = distinct !{!8885, !8853, !8886}
!8886 = !DILocation(line: 4247, column: 2, scope: !8847)
!8887 = !DILocation(line: 4249, column: 9, scope: !8837)
!8888 = !DILocation(line: 4249, column: 2, scope: !8837)
!8889 = distinct !DISubprogram(name: "BKE_sequencer_active_get", scope: !3, file: !3, line: 4252, type: !8890, scopeLine: 4253, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8890 = !DISubroutineType(types: !8891)
!8891 = !{!209, !1744}
!8892 = !DILocalVariable(name: "scene", arg: 1, scope: !8889, file: !3, line: 4252, type: !1744)
!8893 = !DILocation(line: 4252, column: 43, scope: !8889)
!8894 = !DILocalVariable(name: "ed", scope: !8889, file: !3, line: 4254, type: !2176)
!8895 = !DILocation(line: 4254, column: 11, scope: !8889)
!8896 = !DILocation(line: 4254, column: 42, scope: !8889)
!8897 = !DILocation(line: 4254, column: 16, scope: !8889)
!8898 = !DILocation(line: 4256, column: 6, scope: !8899)
!8899 = distinct !DILexicalBlock(scope: !8889, file: !3, line: 4256, column: 6)
!8900 = !DILocation(line: 4256, column: 9, scope: !8899)
!8901 = !DILocation(line: 4256, column: 6, scope: !8889)
!8902 = !DILocation(line: 4257, column: 3, scope: !8899)
!8903 = !DILocation(line: 4259, column: 9, scope: !8889)
!8904 = !DILocation(line: 4259, column: 13, scope: !8889)
!8905 = !DILocation(line: 4259, column: 2, scope: !8889)
!8906 = !DILocation(line: 4260, column: 1, scope: !8889)
!8907 = distinct !DISubprogram(name: "BKE_sequencer_active_set", scope: !3, file: !3, line: 4262, type: !2108, scopeLine: 4263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8908 = !DILocalVariable(name: "scene", arg: 1, scope: !8907, file: !3, line: 4262, type: !1744)
!8909 = !DILocation(line: 4262, column: 38, scope: !8907)
!8910 = !DILocalVariable(name: "seq", arg: 2, scope: !8907, file: !3, line: 4262, type: !204)
!8911 = !DILocation(line: 4262, column: 55, scope: !8907)
!8912 = !DILocalVariable(name: "ed", scope: !8907, file: !3, line: 4264, type: !2176)
!8913 = !DILocation(line: 4264, column: 11, scope: !8907)
!8914 = !DILocation(line: 4264, column: 42, scope: !8907)
!8915 = !DILocation(line: 4264, column: 16, scope: !8907)
!8916 = !DILocation(line: 4266, column: 6, scope: !8917)
!8917 = distinct !DILexicalBlock(scope: !8907, file: !3, line: 4266, column: 6)
!8918 = !DILocation(line: 4266, column: 9, scope: !8917)
!8919 = !DILocation(line: 4266, column: 6, scope: !8907)
!8920 = !DILocation(line: 4267, column: 3, scope: !8917)
!8921 = !DILocation(line: 4269, column: 16, scope: !8907)
!8922 = !DILocation(line: 4269, column: 2, scope: !8907)
!8923 = !DILocation(line: 4269, column: 6, scope: !8907)
!8924 = !DILocation(line: 4269, column: 14, scope: !8907)
!8925 = !DILocation(line: 4270, column: 1, scope: !8907)
!8926 = distinct !DISubprogram(name: "BKE_sequencer_active_get_pair", scope: !3, file: !3, line: 4272, type: !8927, scopeLine: 4273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!8927 = !DISubroutineType(types: !8928)
!8928 = !{!45, !1744, !2002, !2002}
!8929 = !DILocalVariable(name: "scene", arg: 1, scope: !8926, file: !3, line: 4272, type: !1744)
!8930 = !DILocation(line: 4272, column: 42, scope: !8926)
!8931 = !DILocalVariable(name: "seq_act", arg: 2, scope: !8926, file: !3, line: 4272, type: !2002)
!8932 = !DILocation(line: 4272, column: 60, scope: !8926)
!8933 = !DILocalVariable(name: "seq_other", arg: 3, scope: !8926, file: !3, line: 4272, type: !2002)
!8934 = !DILocation(line: 4272, column: 80, scope: !8926)
!8935 = !DILocalVariable(name: "ed", scope: !8926, file: !3, line: 4274, type: !2176)
!8936 = !DILocation(line: 4274, column: 11, scope: !8926)
!8937 = !DILocation(line: 4274, column: 42, scope: !8926)
!8938 = !DILocation(line: 4274, column: 16, scope: !8926)
!8939 = !DILocation(line: 4276, column: 38, scope: !8926)
!8940 = !DILocation(line: 4276, column: 13, scope: !8926)
!8941 = !DILocation(line: 4276, column: 3, scope: !8926)
!8942 = !DILocation(line: 4276, column: 11, scope: !8926)
!8943 = !DILocation(line: 4278, column: 7, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8926, file: !3, line: 4278, column: 6)
!8945 = !DILocation(line: 4278, column: 6, scope: !8944)
!8946 = !DILocation(line: 4278, column: 15, scope: !8944)
!8947 = !DILocation(line: 4278, column: 6, scope: !8926)
!8948 = !DILocation(line: 4279, column: 3, scope: !8949)
!8949 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 4278, column: 24)
!8950 = !DILocalVariable(name: "seq", scope: !8951, file: !3, line: 4282, type: !204)
!8951 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 4281, column: 7)
!8952 = !DILocation(line: 4282, column: 13, scope: !8951)
!8953 = !DILocation(line: 4284, column: 4, scope: !8951)
!8954 = !DILocation(line: 4284, column: 14, scope: !8951)
!8955 = !DILocation(line: 4286, column: 14, scope: !8956)
!8956 = distinct !DILexicalBlock(scope: !8951, file: !3, line: 4286, column: 3)
!8957 = !DILocation(line: 4286, column: 18, scope: !8956)
!8958 = !DILocation(line: 4286, column: 28, scope: !8956)
!8959 = !DILocation(line: 4286, column: 12, scope: !8956)
!8960 = !DILocation(line: 4286, column: 8, scope: !8956)
!8961 = !DILocation(line: 4286, column: 35, scope: !8962)
!8962 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 4286, column: 3)
!8963 = !DILocation(line: 4286, column: 3, scope: !8956)
!8964 = !DILocation(line: 4287, column: 8, scope: !8965)
!8965 = distinct !DILexicalBlock(scope: !8966, file: !3, line: 4287, column: 8)
!8966 = distinct !DILexicalBlock(scope: !8962, file: !3, line: 4286, column: 57)
!8967 = !DILocation(line: 4287, column: 13, scope: !8965)
!8968 = !DILocation(line: 4287, column: 18, scope: !8965)
!8969 = !DILocation(line: 4287, column: 27, scope: !8965)
!8970 = !DILocation(line: 4287, column: 31, scope: !8965)
!8971 = !DILocation(line: 4287, column: 40, scope: !8965)
!8972 = !DILocation(line: 4287, column: 39, scope: !8965)
!8973 = !DILocation(line: 4287, column: 35, scope: !8965)
!8974 = !DILocation(line: 4287, column: 8, scope: !8966)
!8975 = !DILocation(line: 4288, column: 10, scope: !8976)
!8976 = distinct !DILexicalBlock(scope: !8977, file: !3, line: 4288, column: 9)
!8977 = distinct !DILexicalBlock(scope: !8965, file: !3, line: 4287, column: 51)
!8978 = !DILocation(line: 4288, column: 9, scope: !8976)
!8979 = !DILocation(line: 4288, column: 9, scope: !8977)
!8980 = !DILocation(line: 4289, column: 6, scope: !8981)
!8981 = distinct !DILexicalBlock(scope: !8976, file: !3, line: 4288, column: 21)
!8982 = !DILocation(line: 4292, column: 19, scope: !8983)
!8983 = distinct !DILexicalBlock(scope: !8976, file: !3, line: 4291, column: 10)
!8984 = !DILocation(line: 4292, column: 7, scope: !8983)
!8985 = !DILocation(line: 4292, column: 17, scope: !8983)
!8986 = !DILocation(line: 4294, column: 4, scope: !8977)
!8987 = !DILocation(line: 4295, column: 3, scope: !8966)
!8988 = !DILocation(line: 4286, column: 46, scope: !8962)
!8989 = !DILocation(line: 4286, column: 51, scope: !8962)
!8990 = !DILocation(line: 4286, column: 44, scope: !8962)
!8991 = !DILocation(line: 4286, column: 3, scope: !8962)
!8992 = distinct !{!8992, !8963, !8993}
!8993 = !DILocation(line: 4295, column: 3, scope: !8956)
!8994 = !DILocation(line: 4297, column: 12, scope: !8951)
!8995 = !DILocation(line: 4297, column: 11, scope: !8951)
!8996 = !DILocation(line: 4297, column: 22, scope: !8951)
!8997 = !DILocation(line: 4297, column: 3, scope: !8951)
!8998 = !DILocation(line: 4299, column: 1, scope: !8926)
!8999 = distinct !DISubprogram(name: "BKE_sequencer_mask_get", scope: !3, file: !3, line: 4301, type: !9000, scopeLine: 4302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9000 = !DISubroutineType(types: !9001)
!9001 = !{!1682, !1744}
!9002 = !DILocalVariable(name: "scene", arg: 1, scope: !8999, file: !3, line: 4301, type: !1744)
!9003 = !DILocation(line: 4301, column: 37, scope: !8999)
!9004 = !DILocalVariable(name: "seq_act", scope: !8999, file: !3, line: 4303, type: !204)
!9005 = !DILocation(line: 4303, column: 12, scope: !8999)
!9006 = !DILocation(line: 4303, column: 47, scope: !8999)
!9007 = !DILocation(line: 4303, column: 22, scope: !8999)
!9008 = !DILocation(line: 4305, column: 6, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !8999, file: !3, line: 4305, column: 6)
!9010 = !DILocation(line: 4305, column: 14, scope: !9009)
!9011 = !DILocation(line: 4305, column: 17, scope: !9009)
!9012 = !DILocation(line: 4305, column: 26, scope: !9009)
!9013 = !DILocation(line: 4305, column: 31, scope: !9009)
!9014 = !DILocation(line: 4305, column: 6, scope: !8999)
!9015 = !DILocation(line: 4306, column: 10, scope: !9016)
!9016 = distinct !DILexicalBlock(scope: !9009, file: !3, line: 4305, column: 49)
!9017 = !DILocation(line: 4306, column: 19, scope: !9016)
!9018 = !DILocation(line: 4306, column: 3, scope: !9016)
!9019 = !DILocation(line: 4309, column: 3, scope: !9020)
!9020 = distinct !DILexicalBlock(scope: !9009, file: !3, line: 4308, column: 7)
!9021 = !DILocation(line: 4311, column: 1, scope: !8999)
!9022 = distinct !DISubprogram(name: "BKE_sequence_alloc", scope: !3, file: !3, line: 4343, type: !9023, scopeLine: 4344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9023 = !DISubroutineType(types: !9024)
!9024 = !{!209, !202, !45, !45}
!9025 = !DILocalVariable(name: "lb", arg: 1, scope: !9022, file: !3, line: 4343, type: !202)
!9026 = !DILocation(line: 4343, column: 40, scope: !9022)
!9027 = !DILocalVariable(name: "cfra", arg: 2, scope: !9022, file: !3, line: 4343, type: !45)
!9028 = !DILocation(line: 4343, column: 48, scope: !9022)
!9029 = !DILocalVariable(name: "machine", arg: 3, scope: !9022, file: !3, line: 4343, type: !45)
!9030 = !DILocation(line: 4343, column: 58, scope: !9022)
!9031 = !DILocalVariable(name: "seq", scope: !9022, file: !3, line: 4345, type: !204)
!9032 = !DILocation(line: 4345, column: 12, scope: !9022)
!9033 = !DILocation(line: 4347, column: 8, scope: !9022)
!9034 = !DILocation(line: 4347, column: 6, scope: !9022)
!9035 = !DILocation(line: 4348, column: 14, scope: !9022)
!9036 = !DILocation(line: 4348, column: 18, scope: !9022)
!9037 = !DILocation(line: 4348, column: 2, scope: !9022)
!9038 = !DILocation(line: 4350, column: 14, scope: !9022)
!9039 = !DILocation(line: 4350, column: 19, scope: !9022)
!9040 = !DILocation(line: 4350, column: 2, scope: !9022)
!9041 = !DILocation(line: 4350, column: 25, scope: !9022)
!9042 = !DILocation(line: 4351, column: 2, scope: !9022)
!9043 = !DILocation(line: 4351, column: 7, scope: !9022)
!9044 = !DILocation(line: 4351, column: 15, scope: !9022)
!9045 = !DILocation(line: 4353, column: 2, scope: !9022)
!9046 = !DILocation(line: 4353, column: 7, scope: !9022)
!9047 = !DILocation(line: 4353, column: 12, scope: !9022)
!9048 = !DILocation(line: 4354, column: 15, scope: !9022)
!9049 = !DILocation(line: 4354, column: 2, scope: !9022)
!9050 = !DILocation(line: 4354, column: 7, scope: !9022)
!9051 = !DILocation(line: 4354, column: 13, scope: !9022)
!9052 = !DILocation(line: 4355, column: 17, scope: !9022)
!9053 = !DILocation(line: 4355, column: 2, scope: !9022)
!9054 = !DILocation(line: 4355, column: 7, scope: !9022)
!9055 = !DILocation(line: 4355, column: 15, scope: !9022)
!9056 = !DILocation(line: 4356, column: 2, scope: !9022)
!9057 = !DILocation(line: 4356, column: 7, scope: !9022)
!9058 = !DILocation(line: 4356, column: 11, scope: !9022)
!9059 = !DILocation(line: 4357, column: 2, scope: !9022)
!9060 = !DILocation(line: 4357, column: 7, scope: !9022)
!9061 = !DILocation(line: 4357, column: 11, scope: !9022)
!9062 = !DILocation(line: 4358, column: 2, scope: !9022)
!9063 = !DILocation(line: 4358, column: 7, scope: !9022)
!9064 = !DILocation(line: 4358, column: 21, scope: !9022)
!9065 = !DILocation(line: 4359, column: 2, scope: !9022)
!9066 = !DILocation(line: 4359, column: 7, scope: !9022)
!9067 = !DILocation(line: 4359, column: 14, scope: !9022)
!9068 = !DILocation(line: 4360, column: 2, scope: !9022)
!9069 = !DILocation(line: 4360, column: 7, scope: !9022)
!9070 = !DILocation(line: 4360, column: 13, scope: !9022)
!9071 = !DILocation(line: 4361, column: 2, scope: !9022)
!9072 = !DILocation(line: 4361, column: 7, scope: !9022)
!9073 = !DILocation(line: 4361, column: 19, scope: !9022)
!9074 = !DILocation(line: 4363, column: 9, scope: !9022)
!9075 = !DILocation(line: 4363, column: 2, scope: !9022)
!9076 = distinct !DISubprogram(name: "BKE_sequence_alpha_mode_from_extension", scope: !3, file: !3, line: 4366, type: !2375, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9077 = !DILocalVariable(name: "seq", arg: 1, scope: !9076, file: !3, line: 4366, type: !204)
!9078 = !DILocation(line: 4366, column: 55, scope: !9076)
!9079 = !DILocation(line: 4368, column: 6, scope: !9080)
!9080 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 4368, column: 6)
!9081 = !DILocation(line: 4368, column: 11, scope: !9080)
!9082 = !DILocation(line: 4368, column: 17, scope: !9080)
!9083 = !DILocation(line: 4368, column: 20, scope: !9080)
!9084 = !DILocation(line: 4368, column: 25, scope: !9080)
!9085 = !DILocation(line: 4368, column: 32, scope: !9080)
!9086 = !DILocation(line: 4368, column: 6, scope: !9076)
!9087 = !DILocalVariable(name: "filename", scope: !9088, file: !3, line: 4369, type: !2797)
!9088 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 4368, column: 43)
!9089 = !DILocation(line: 4369, column: 15, scope: !9088)
!9090 = !DILocation(line: 4369, column: 26, scope: !9088)
!9091 = !DILocation(line: 4369, column: 31, scope: !9088)
!9092 = !DILocation(line: 4369, column: 38, scope: !9088)
!9093 = !DILocation(line: 4369, column: 49, scope: !9088)
!9094 = !DILocation(line: 4370, column: 60, scope: !9088)
!9095 = !DILocation(line: 4370, column: 21, scope: !9088)
!9096 = !DILocation(line: 4370, column: 3, scope: !9088)
!9097 = !DILocation(line: 4370, column: 8, scope: !9088)
!9098 = !DILocation(line: 4370, column: 19, scope: !9088)
!9099 = !DILocation(line: 4371, column: 2, scope: !9088)
!9100 = !DILocation(line: 4372, column: 1, scope: !9076)
!9101 = distinct !DISubprogram(name: "BKE_sequence_init_colorspace", scope: !3, file: !3, line: 4374, type: !2375, scopeLine: 4375, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9102 = !DILocalVariable(name: "seq", arg: 1, scope: !9101, file: !3, line: 4374, type: !204)
!9103 = !DILocation(line: 4374, column: 45, scope: !9101)
!9104 = !DILocation(line: 4376, column: 6, scope: !9105)
!9105 = distinct !DILexicalBlock(scope: !9101, file: !3, line: 4376, column: 6)
!9106 = !DILocation(line: 4376, column: 11, scope: !9105)
!9107 = !DILocation(line: 4376, column: 17, scope: !9105)
!9108 = !DILocation(line: 4376, column: 20, scope: !9105)
!9109 = !DILocation(line: 4376, column: 25, scope: !9105)
!9110 = !DILocation(line: 4376, column: 32, scope: !9105)
!9111 = !DILocation(line: 4376, column: 6, scope: !9101)
!9112 = !DILocalVariable(name: "name", scope: !9113, file: !3, line: 4377, type: !143)
!9113 = distinct !DILexicalBlock(scope: !9105, file: !3, line: 4376, column: 43)
!9114 = !DILocation(line: 4377, column: 8, scope: !9113)
!9115 = !DILocalVariable(name: "ibuf", scope: !9113, file: !3, line: 4378, type: !1776)
!9116 = !DILocation(line: 4378, column: 10, scope: !9113)
!9117 = !DILocation(line: 4380, column: 20, scope: !9113)
!9118 = !DILocation(line: 4380, column: 40, scope: !9113)
!9119 = !DILocation(line: 4380, column: 45, scope: !9113)
!9120 = !DILocation(line: 4380, column: 52, scope: !9113)
!9121 = !DILocation(line: 4380, column: 57, scope: !9113)
!9122 = !DILocation(line: 4380, column: 62, scope: !9113)
!9123 = !DILocation(line: 4380, column: 69, scope: !9113)
!9124 = !DILocation(line: 4380, column: 80, scope: !9113)
!9125 = !DILocation(line: 4380, column: 3, scope: !9113)
!9126 = !DILocation(line: 4381, column: 16, scope: !9113)
!9127 = !DILocation(line: 4381, column: 24, scope: !9113)
!9128 = !DILocation(line: 4381, column: 30, scope: !9113)
!9129 = !DILocation(line: 4381, column: 22, scope: !9113)
!9130 = !DILocation(line: 4381, column: 3, scope: !9113)
!9131 = !DILocation(line: 4384, column: 7, scope: !9132)
!9132 = distinct !DILexicalBlock(scope: !9113, file: !3, line: 4384, column: 7)
!9133 = !DILocation(line: 4384, column: 12, scope: !9132)
!9134 = !DILocation(line: 4384, column: 17, scope: !9132)
!9135 = !DILocation(line: 4384, column: 7, scope: !9113)
!9136 = !DILocation(line: 4385, column: 27, scope: !9137)
!9137 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 4384, column: 36)
!9138 = !DILocation(line: 4385, column: 64, scope: !9137)
!9139 = !DILocation(line: 4385, column: 69, scope: !9137)
!9140 = !DILocation(line: 4385, column: 76, scope: !9137)
!9141 = !DILocation(line: 4385, column: 96, scope: !9137)
!9142 = !DILocation(line: 4385, column: 11, scope: !9137)
!9143 = !DILocation(line: 4385, column: 9, scope: !9137)
!9144 = !DILocation(line: 4390, column: 4, scope: !9137)
!9145 = !DILocation(line: 4390, column: 9, scope: !9137)
!9146 = !DILocation(line: 4390, column: 20, scope: !9137)
!9147 = !DILocation(line: 4391, column: 8, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9137, file: !3, line: 4391, column: 8)
!9149 = !DILocation(line: 4391, column: 8, scope: !9137)
!9150 = !DILocation(line: 4392, column: 9, scope: !9151)
!9151 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 4392, column: 9)
!9152 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 4391, column: 14)
!9153 = !DILocation(line: 4392, column: 15, scope: !9151)
!9154 = !DILocation(line: 4392, column: 21, scope: !9151)
!9155 = !DILocation(line: 4392, column: 9, scope: !9152)
!9156 = !DILocation(line: 4393, column: 6, scope: !9151)
!9157 = !DILocation(line: 4393, column: 11, scope: !9151)
!9158 = !DILocation(line: 4393, column: 22, scope: !9151)
!9159 = !DILocation(line: 4395, column: 19, scope: !9152)
!9160 = !DILocation(line: 4395, column: 5, scope: !9152)
!9161 = !DILocation(line: 4396, column: 4, scope: !9152)
!9162 = !DILocation(line: 4397, column: 3, scope: !9137)
!9163 = !DILocation(line: 4398, column: 2, scope: !9113)
!9164 = !DILocation(line: 4399, column: 1, scope: !9101)
!9165 = distinct !DISubprogram(name: "BKE_sequencer_add_image_strip", scope: !3, file: !3, line: 4402, type: !9166, scopeLine: 4403, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9166 = !DISubroutineType(types: !9167)
!9167 = !{!209, !9168, !202, !9173}
!9168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9169, size: 64)
!9169 = !DIDerivedType(tag: DW_TAG_typedef, name: "bContext", file: !9170, line: 69, baseType: !9171)
!9170 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_context.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9171 = !DICompositeType(tag: DW_TAG_structure_type, name: "bContext", file: !9172, line: 40, flags: DIFlagFwdDecl)
!9172 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_animsys.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9174, size: 64)
!9174 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqLoadInfo", file: !104, line: 357, baseType: !9175)
!9175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqLoadInfo", file: !104, line: 343, size: 9024, elements: !9176)
!9176 = !{!9177, !9178, !9179, !9180, !9181, !9182, !9183, !9184, !9185, !9186, !9187}
!9177 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !9175, file: !104, line: 344, baseType: !45, size: 32)
!9178 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !9175, file: !104, line: 345, baseType: !45, size: 32, offset: 32)
!9179 = !DIDerivedType(tag: DW_TAG_member, name: "channel", scope: !9175, file: !104, line: 346, baseType: !45, size: 32, offset: 64)
!9180 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !9175, file: !104, line: 347, baseType: !45, size: 32, offset: 96)
!9181 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !9175, file: !104, line: 348, baseType: !45, size: 32, offset: 128)
!9182 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !9175, file: !104, line: 349, baseType: !45, size: 32, offset: 160)
!9183 = !DIDerivedType(tag: DW_TAG_member, name: "path", scope: !9175, file: !104, line: 350, baseType: !143, size: 8192, offset: 192)
!9184 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !9175, file: !104, line: 353, baseType: !173, size: 512, offset: 8384)
!9185 = !DIDerivedType(tag: DW_TAG_member, name: "seq_sound", scope: !9175, file: !104, line: 354, baseType: !209, size: 64, offset: 8896)
!9186 = !DIDerivedType(tag: DW_TAG_member, name: "tot_success", scope: !9175, file: !104, line: 355, baseType: !45, size: 32, offset: 8960)
!9187 = !DIDerivedType(tag: DW_TAG_member, name: "tot_error", scope: !9175, file: !104, line: 356, baseType: !45, size: 32, offset: 8992)
!9188 = !DILocalVariable(name: "C", arg: 1, scope: !9165, file: !3, line: 4402, type: !9168)
!9189 = !DILocation(line: 4402, column: 51, scope: !9165)
!9190 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !9165, file: !3, line: 4402, type: !202)
!9191 = !DILocation(line: 4402, column: 64, scope: !9165)
!9192 = !DILocalVariable(name: "seq_load", arg: 3, scope: !9165, file: !3, line: 4402, type: !9173)
!9193 = !DILocation(line: 4402, column: 87, scope: !9165)
!9194 = !DILocalVariable(name: "scene", scope: !9165, file: !3, line: 4404, type: !1744)
!9195 = !DILocation(line: 4404, column: 9, scope: !9165)
!9196 = !DILocation(line: 4404, column: 32, scope: !9165)
!9197 = !DILocation(line: 4404, column: 17, scope: !9165)
!9198 = !DILocalVariable(name: "seq", scope: !9165, file: !3, line: 4405, type: !204)
!9199 = !DILocation(line: 4405, column: 12, scope: !9165)
!9200 = !DILocalVariable(name: "strip", scope: !9165, file: !3, line: 4406, type: !234)
!9201 = !DILocation(line: 4406, column: 9, scope: !9165)
!9202 = !DILocation(line: 4408, column: 27, scope: !9165)
!9203 = !DILocation(line: 4408, column: 37, scope: !9165)
!9204 = !DILocation(line: 4408, column: 47, scope: !9165)
!9205 = !DILocation(line: 4408, column: 60, scope: !9165)
!9206 = !DILocation(line: 4408, column: 70, scope: !9165)
!9207 = !DILocation(line: 4408, column: 8, scope: !9165)
!9208 = !DILocation(line: 4408, column: 6, scope: !9165)
!9209 = !DILocation(line: 4409, column: 2, scope: !9165)
!9210 = !DILocation(line: 4409, column: 7, scope: !9165)
!9211 = !DILocation(line: 4409, column: 12, scope: !9165)
!9212 = !DILocation(line: 4410, column: 2, scope: !9165)
!9213 = !DILocation(line: 4410, column: 7, scope: !9165)
!9214 = !DILocation(line: 4410, column: 18, scope: !9165)
!9215 = !DILocation(line: 4413, column: 23, scope: !9165)
!9216 = !DILocation(line: 4413, column: 21, scope: !9165)
!9217 = !DILocation(line: 4413, column: 2, scope: !9165)
!9218 = !DILocation(line: 4413, column: 7, scope: !9165)
!9219 = !DILocation(line: 4413, column: 13, scope: !9165)
!9220 = !DILocation(line: 4415, column: 13, scope: !9165)
!9221 = !DILocation(line: 4415, column: 23, scope: !9165)
!9222 = !DILocation(line: 4415, column: 29, scope: !9165)
!9223 = !DILocation(line: 4415, column: 39, scope: !9165)
!9224 = !DILocation(line: 4415, column: 2, scope: !9165)
!9225 = !DILocation(line: 4415, column: 7, scope: !9165)
!9226 = !DILocation(line: 4415, column: 11, scope: !9165)
!9227 = !DILocation(line: 4416, column: 2, scope: !9165)
!9228 = !DILocation(line: 4416, column: 9, scope: !9165)
!9229 = !DILocation(line: 4416, column: 12, scope: !9165)
!9230 = !DILocation(line: 4417, column: 21, scope: !9165)
!9231 = !DILocation(line: 4417, column: 33, scope: !9165)
!9232 = !DILocation(line: 4417, column: 38, scope: !9165)
!9233 = !DILocation(line: 4417, column: 42, scope: !9165)
!9234 = !DILocation(line: 4417, column: 2, scope: !9165)
!9235 = !DILocation(line: 4417, column: 9, scope: !9165)
!9236 = !DILocation(line: 4417, column: 19, scope: !9165)
!9237 = !DILocation(line: 4418, column: 14, scope: !9165)
!9238 = !DILocation(line: 4418, column: 21, scope: !9165)
!9239 = !DILocation(line: 4418, column: 26, scope: !9165)
!9240 = !DILocation(line: 4418, column: 36, scope: !9165)
!9241 = !DILocation(line: 4418, column: 2, scope: !9165)
!9242 = !DILocation(line: 4420, column: 17, scope: !9165)
!9243 = !DILocation(line: 4420, column: 24, scope: !9165)
!9244 = !DILocation(line: 4420, column: 29, scope: !9165)
!9245 = !DILocation(line: 4420, column: 2, scope: !9165)
!9246 = !DILocation(line: 4422, column: 9, scope: !9165)
!9247 = !DILocation(line: 4422, column: 2, scope: !9165)
!9248 = distinct !DISubprogram(name: "seq_load_apply", scope: !3, file: !3, line: 4315, type: !9249, scopeLine: 4316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9249 = !DISubroutineType(types: !9250)
!9250 = !{null, !1744, !204, !9173}
!9251 = !DILocalVariable(name: "scene", arg: 1, scope: !9248, file: !3, line: 4315, type: !1744)
!9252 = !DILocation(line: 4315, column: 35, scope: !9248)
!9253 = !DILocalVariable(name: "seq", arg: 2, scope: !9248, file: !3, line: 4315, type: !204)
!9254 = !DILocation(line: 4315, column: 52, scope: !9248)
!9255 = !DILocalVariable(name: "seq_load", arg: 3, scope: !9248, file: !3, line: 4315, type: !9173)
!9256 = !DILocation(line: 4315, column: 70, scope: !9248)
!9257 = !DILocation(line: 4317, column: 6, scope: !9258)
!9258 = distinct !DILexicalBlock(scope: !9248, file: !3, line: 4317, column: 6)
!9259 = !DILocation(line: 4317, column: 6, scope: !9248)
!9260 = !DILocation(line: 4318, column: 20, scope: !9261)
!9261 = distinct !DILexicalBlock(scope: !9258, file: !3, line: 4317, column: 11)
!9262 = !DILocation(line: 4318, column: 25, scope: !9261)
!9263 = !DILocation(line: 4318, column: 30, scope: !9261)
!9264 = !DILocation(line: 4318, column: 35, scope: !9261)
!9265 = !DILocation(line: 4318, column: 45, scope: !9261)
!9266 = !DILocation(line: 4318, column: 3, scope: !9261)
!9267 = !DILocation(line: 4319, column: 26, scope: !9261)
!9268 = !DILocation(line: 4319, column: 31, scope: !9261)
!9269 = !DILocation(line: 4319, column: 36, scope: !9261)
!9270 = !DILocation(line: 4319, column: 48, scope: !9261)
!9271 = !DILocation(line: 4319, column: 53, scope: !9261)
!9272 = !DILocation(line: 4319, column: 58, scope: !9261)
!9273 = !DILocation(line: 4319, column: 41, scope: !9261)
!9274 = !DILocation(line: 4319, column: 3, scope: !9261)
!9275 = !DILocation(line: 4320, column: 44, scope: !9261)
!9276 = !DILocation(line: 4320, column: 51, scope: !9261)
!9277 = !DILocation(line: 4320, column: 55, scope: !9261)
!9278 = !DILocation(line: 4320, column: 64, scope: !9261)
!9279 = !DILocation(line: 4320, column: 3, scope: !9261)
!9280 = !DILocation(line: 4322, column: 7, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 4322, column: 7)
!9282 = !DILocation(line: 4322, column: 17, scope: !9281)
!9283 = !DILocation(line: 4322, column: 22, scope: !9281)
!9284 = !DILocation(line: 4322, column: 7, scope: !9261)
!9285 = !DILocation(line: 4323, column: 30, scope: !9286)
!9286 = distinct !DILexicalBlock(scope: !9281, file: !3, line: 4322, column: 48)
!9287 = !DILocation(line: 4323, column: 35, scope: !9286)
!9288 = !DILocation(line: 4323, column: 45, scope: !9286)
!9289 = !DILocation(line: 4323, column: 50, scope: !9286)
!9290 = !DILocation(line: 4323, column: 43, scope: !9286)
!9291 = !DILocation(line: 4323, column: 4, scope: !9286)
!9292 = !DILocation(line: 4323, column: 14, scope: !9286)
!9293 = !DILocation(line: 4323, column: 26, scope: !9286)
!9294 = !DILocation(line: 4324, column: 3, scope: !9286)
!9295 = !DILocation(line: 4326, column: 7, scope: !9296)
!9296 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 4326, column: 7)
!9297 = !DILocation(line: 4326, column: 17, scope: !9296)
!9298 = !DILocation(line: 4326, column: 22, scope: !9296)
!9299 = !DILocation(line: 4326, column: 7, scope: !9261)
!9300 = !DILocation(line: 4327, column: 4, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !9296, file: !3, line: 4326, column: 46)
!9302 = !DILocation(line: 4327, column: 14, scope: !9301)
!9303 = !DILocation(line: 4327, column: 19, scope: !9301)
!9304 = !DILocation(line: 4328, column: 29, scope: !9301)
!9305 = !DILocation(line: 4328, column: 36, scope: !9301)
!9306 = !DILocation(line: 4328, column: 4, scope: !9301)
!9307 = !DILocation(line: 4329, column: 3, scope: !9301)
!9308 = !DILocation(line: 4331, column: 7, scope: !9309)
!9309 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 4331, column: 7)
!9310 = !DILocation(line: 4331, column: 17, scope: !9309)
!9311 = !DILocation(line: 4331, column: 22, scope: !9309)
!9312 = !DILocation(line: 4331, column: 7, scope: !9261)
!9313 = !DILocation(line: 4332, column: 8, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !9315, file: !3, line: 4332, column: 8)
!9315 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 4331, column: 46)
!9316 = !DILocation(line: 4332, column: 13, scope: !9314)
!9317 = !DILocation(line: 4332, column: 8, scope: !9315)
!9318 = !DILocation(line: 4333, column: 17, scope: !9314)
!9319 = !DILocation(line: 4333, column: 22, scope: !9314)
!9320 = !DILocation(line: 4333, column: 5, scope: !9314)
!9321 = !DILocation(line: 4334, column: 3, scope: !9315)
!9322 = !DILocation(line: 4336, column: 3, scope: !9261)
!9323 = !DILocation(line: 4336, column: 13, scope: !9261)
!9324 = !DILocation(line: 4336, column: 24, scope: !9261)
!9325 = !DILocation(line: 4337, column: 2, scope: !9261)
!9326 = !DILocation(line: 4339, column: 3, scope: !9327)
!9327 = distinct !DILexicalBlock(scope: !9258, file: !3, line: 4338, column: 7)
!9328 = !DILocation(line: 4339, column: 13, scope: !9327)
!9329 = !DILocation(line: 4339, column: 22, scope: !9327)
!9330 = !DILocation(line: 4341, column: 1, scope: !9248)
!9331 = distinct !DISubprogram(name: "BKE_sequencer_add_sound_strip", scope: !3, file: !3, line: 4490, type: !9166, scopeLine: 4491, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9332 = !DILocalVariable(name: "C", arg: 1, scope: !9331, file: !3, line: 4490, type: !9168)
!9333 = !DILocation(line: 4490, column: 51, scope: !9331)
!9334 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !9331, file: !3, line: 4490, type: !202)
!9335 = !DILocation(line: 4490, column: 64, scope: !9331)
!9336 = !DILocalVariable(name: "seq_load", arg: 3, scope: !9331, file: !3, line: 4490, type: !9173)
!9337 = !DILocation(line: 4490, column: 87, scope: !9331)
!9338 = !DILocation(line: 4492, column: 9, scope: !9331)
!9339 = !DILocation(line: 4493, column: 9, scope: !9331)
!9340 = !DILocation(line: 4494, column: 9, scope: !9331)
!9341 = !DILocation(line: 4495, column: 2, scope: !9331)
!9342 = distinct !DISubprogram(name: "BKE_sequencer_add_movie_strip", scope: !3, file: !3, line: 4499, type: !9166, scopeLine: 4500, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9343 = !DILocalVariable(name: "C", arg: 1, scope: !9342, file: !3, line: 4499, type: !9168)
!9344 = !DILocation(line: 4499, column: 51, scope: !9342)
!9345 = !DILocalVariable(name: "seqbasep", arg: 2, scope: !9342, file: !3, line: 4499, type: !202)
!9346 = !DILocation(line: 4499, column: 64, scope: !9342)
!9347 = !DILocalVariable(name: "seq_load", arg: 3, scope: !9342, file: !3, line: 4499, type: !9173)
!9348 = !DILocation(line: 4499, column: 87, scope: !9342)
!9349 = !DILocalVariable(name: "scene", scope: !9342, file: !3, line: 4501, type: !1744)
!9350 = !DILocation(line: 4501, column: 9, scope: !9342)
!9351 = !DILocation(line: 4501, column: 32, scope: !9342)
!9352 = !DILocation(line: 4501, column: 17, scope: !9342)
!9353 = !DILocalVariable(name: "path", scope: !9342, file: !3, line: 4502, type: !143)
!9354 = !DILocation(line: 4502, column: 7, scope: !9342)
!9355 = !DILocalVariable(name: "seq", scope: !9342, file: !3, line: 4504, type: !204)
!9356 = !DILocation(line: 4504, column: 12, scope: !9342)
!9357 = !DILocalVariable(name: "strip", scope: !9342, file: !3, line: 4505, type: !234)
!9358 = !DILocation(line: 4505, column: 9, scope: !9342)
!9359 = !DILocalVariable(name: "se", scope: !9342, file: !3, line: 4506, type: !246)
!9360 = !DILocation(line: 4506, column: 13, scope: !9342)
!9361 = !DILocalVariable(name: "colorspace", scope: !9342, file: !3, line: 4507, type: !173)
!9362 = !DILocation(line: 4507, column: 7, scope: !9342)
!9363 = !DILocalVariable(name: "an", scope: !9342, file: !3, line: 4509, type: !268)
!9364 = !DILocation(line: 4509, column: 15, scope: !9342)
!9365 = !DILocation(line: 4511, column: 14, scope: !9342)
!9366 = !DILocation(line: 4511, column: 20, scope: !9342)
!9367 = !DILocation(line: 4511, column: 30, scope: !9342)
!9368 = !DILocation(line: 4511, column: 2, scope: !9342)
!9369 = !DILocation(line: 4512, column: 15, scope: !9342)
!9370 = !DILocation(line: 4512, column: 23, scope: !9342)
!9371 = !DILocation(line: 4512, column: 29, scope: !9342)
!9372 = !DILocation(line: 4512, column: 21, scope: !9342)
!9373 = !DILocation(line: 4512, column: 2, scope: !9342)
!9374 = !DILocation(line: 4514, column: 16, scope: !9342)
!9375 = !DILocation(line: 4514, column: 34, scope: !9342)
!9376 = !DILocation(line: 4514, column: 7, scope: !9342)
!9377 = !DILocation(line: 4514, column: 5, scope: !9342)
!9378 = !DILocation(line: 4516, column: 6, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 4516, column: 6)
!9380 = !DILocation(line: 4516, column: 9, scope: !9379)
!9381 = !DILocation(line: 4516, column: 6, scope: !9342)
!9382 = !DILocation(line: 4517, column: 3, scope: !9379)
!9383 = !DILocation(line: 4519, column: 27, scope: !9342)
!9384 = !DILocation(line: 4519, column: 37, scope: !9342)
!9385 = !DILocation(line: 4519, column: 47, scope: !9342)
!9386 = !DILocation(line: 4519, column: 60, scope: !9342)
!9387 = !DILocation(line: 4519, column: 70, scope: !9342)
!9388 = !DILocation(line: 4519, column: 8, scope: !9342)
!9389 = !DILocation(line: 4519, column: 6, scope: !9342)
!9390 = !DILocation(line: 4520, column: 2, scope: !9342)
!9391 = !DILocation(line: 4520, column: 7, scope: !9342)
!9392 = !DILocation(line: 4520, column: 12, scope: !9342)
!9393 = !DILocation(line: 4521, column: 2, scope: !9342)
!9394 = !DILocation(line: 4521, column: 7, scope: !9342)
!9395 = !DILocation(line: 4521, column: 18, scope: !9342)
!9396 = !DILocation(line: 4523, column: 14, scope: !9342)
!9397 = !DILocation(line: 4523, column: 2, scope: !9342)
!9398 = !DILocation(line: 4523, column: 7, scope: !9342)
!9399 = !DILocation(line: 4523, column: 12, scope: !9342)
!9400 = !DILocation(line: 4524, column: 43, scope: !9342)
!9401 = !DILocation(line: 4524, column: 22, scope: !9342)
!9402 = !DILocation(line: 4524, column: 2, scope: !9342)
!9403 = !DILocation(line: 4524, column: 7, scope: !9342)
!9404 = !DILocation(line: 4524, column: 20, scope: !9342)
!9405 = !DILocation(line: 4525, column: 14, scope: !9342)
!9406 = !DILocation(line: 4525, column: 19, scope: !9342)
!9407 = !DILocation(line: 4525, column: 24, scope: !9342)
!9408 = !DILocation(line: 4525, column: 2, scope: !9342)
!9409 = !DILocation(line: 4526, column: 43, scope: !9342)
!9410 = !DILocation(line: 4526, column: 50, scope: !9342)
!9411 = !DILocation(line: 4526, column: 54, scope: !9342)
!9412 = !DILocation(line: 4526, column: 63, scope: !9342)
!9413 = !DILocation(line: 4526, column: 2, scope: !9342)
!9414 = !DILocation(line: 4529, column: 23, scope: !9342)
!9415 = !DILocation(line: 4529, column: 21, scope: !9342)
!9416 = !DILocation(line: 4529, column: 2, scope: !9342)
!9417 = !DILocation(line: 4529, column: 7, scope: !9342)
!9418 = !DILocation(line: 4529, column: 13, scope: !9342)
!9419 = !DILocation(line: 4530, column: 35, scope: !9342)
!9420 = !DILocation(line: 4530, column: 13, scope: !9342)
!9421 = !DILocation(line: 4530, column: 2, scope: !9342)
!9422 = !DILocation(line: 4530, column: 7, scope: !9342)
!9423 = !DILocation(line: 4530, column: 11, scope: !9342)
!9424 = !DILocation(line: 4531, column: 2, scope: !9342)
!9425 = !DILocation(line: 4531, column: 9, scope: !9342)
!9426 = !DILocation(line: 4531, column: 12, scope: !9342)
!9427 = !DILocation(line: 4533, column: 14, scope: !9342)
!9428 = !DILocation(line: 4533, column: 19, scope: !9342)
!9429 = !DILocation(line: 4533, column: 26, scope: !9342)
!9430 = !DILocation(line: 4533, column: 46, scope: !9342)
!9431 = !DILocation(line: 4533, column: 52, scope: !9342)
!9432 = !DILocation(line: 4533, column: 2, scope: !9342)
!9433 = !DILocation(line: 4536, column: 26, scope: !9342)
!9434 = !DILocation(line: 4536, column: 24, scope: !9342)
!9435 = !DILocation(line: 4536, column: 2, scope: !9342)
!9436 = !DILocation(line: 4536, column: 9, scope: !9342)
!9437 = !DILocation(line: 4536, column: 19, scope: !9342)
!9438 = !DILocation(line: 4538, column: 20, scope: !9342)
!9439 = !DILocation(line: 4538, column: 30, scope: !9342)
!9440 = !DILocation(line: 4538, column: 36, scope: !9342)
!9441 = !DILocation(line: 4538, column: 43, scope: !9342)
!9442 = !DILocation(line: 4538, column: 48, scope: !9342)
!9443 = !DILocation(line: 4538, column: 52, scope: !9342)
!9444 = !DILocation(line: 4538, column: 2, scope: !9342)
!9445 = !DILocation(line: 4540, column: 25, scope: !9342)
!9446 = !DILocation(line: 4540, column: 32, scope: !9342)
!9447 = !DILocation(line: 4540, column: 2, scope: !9342)
!9448 = !DILocation(line: 4542, column: 6, scope: !9449)
!9449 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 4542, column: 6)
!9450 = !DILocation(line: 4542, column: 16, scope: !9449)
!9451 = !DILocation(line: 4542, column: 24, scope: !9449)
!9452 = !DILocation(line: 4542, column: 6, scope: !9342)
!9453 = !DILocation(line: 4543, column: 15, scope: !9449)
!9454 = !DILocation(line: 4543, column: 25, scope: !9449)
!9455 = !DILocation(line: 4543, column: 31, scope: !9449)
!9456 = !DILocation(line: 4543, column: 35, scope: !9449)
!9457 = !DILocation(line: 4543, column: 3, scope: !9449)
!9458 = !DILocation(line: 4545, column: 6, scope: !9459)
!9459 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 4545, column: 6)
!9460 = !DILocation(line: 4545, column: 16, scope: !9459)
!9461 = !DILocation(line: 4545, column: 21, scope: !9459)
!9462 = !DILocation(line: 4545, column: 6, scope: !9342)
!9463 = !DILocalVariable(name: "start_frame_back", scope: !9464, file: !3, line: 4546, type: !45)
!9464 = distinct !DILexicalBlock(scope: !9459, file: !3, line: 4545, column: 45)
!9465 = !DILocation(line: 4546, column: 7, scope: !9464)
!9466 = !DILocation(line: 4546, column: 26, scope: !9464)
!9467 = !DILocation(line: 4546, column: 36, scope: !9464)
!9468 = !DILocation(line: 4547, column: 3, scope: !9464)
!9469 = !DILocation(line: 4547, column: 13, scope: !9464)
!9470 = !DILocation(line: 4547, column: 20, scope: !9464)
!9471 = !DILocation(line: 4549, column: 55, scope: !9464)
!9472 = !DILocation(line: 4549, column: 58, scope: !9464)
!9473 = !DILocation(line: 4549, column: 68, scope: !9464)
!9474 = !DILocation(line: 4549, column: 25, scope: !9464)
!9475 = !DILocation(line: 4549, column: 3, scope: !9464)
!9476 = !DILocation(line: 4549, column: 13, scope: !9464)
!9477 = !DILocation(line: 4549, column: 23, scope: !9464)
!9478 = !DILocation(line: 4551, column: 27, scope: !9464)
!9479 = !DILocation(line: 4551, column: 3, scope: !9464)
!9480 = !DILocation(line: 4551, column: 13, scope: !9464)
!9481 = !DILocation(line: 4551, column: 25, scope: !9464)
!9482 = !DILocation(line: 4552, column: 3, scope: !9464)
!9483 = !DILocation(line: 4552, column: 13, scope: !9464)
!9484 = !DILocation(line: 4552, column: 20, scope: !9464)
!9485 = !DILocation(line: 4553, column: 2, scope: !9464)
!9486 = !DILocation(line: 4556, column: 17, scope: !9342)
!9487 = !DILocation(line: 4556, column: 24, scope: !9342)
!9488 = !DILocation(line: 4556, column: 29, scope: !9342)
!9489 = !DILocation(line: 4556, column: 2, scope: !9342)
!9490 = !DILocation(line: 4558, column: 9, scope: !9342)
!9491 = !DILocation(line: 4558, column: 2, scope: !9342)
!9492 = !DILocation(line: 4559, column: 1, scope: !9342)
!9493 = distinct !DISubprogram(name: "seq_dupli", scope: !3, file: !3, line: 4561, type: !9494, scopeLine: 4562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9494 = !DISubroutineType(types: !9495)
!9495 = !{!204, !1744, !1744, !204, !45}
!9496 = !DILocalVariable(name: "scene", arg: 1, scope: !9493, file: !3, line: 4561, type: !1744)
!9497 = !DILocation(line: 4561, column: 35, scope: !9493)
!9498 = !DILocalVariable(name: "scene_to", arg: 2, scope: !9493, file: !3, line: 4561, type: !1744)
!9499 = !DILocation(line: 4561, column: 49, scope: !9493)
!9500 = !DILocalVariable(name: "seq", arg: 3, scope: !9493, file: !3, line: 4561, type: !204)
!9501 = !DILocation(line: 4561, column: 69, scope: !9493)
!9502 = !DILocalVariable(name: "dupe_flag", arg: 4, scope: !9493, file: !3, line: 4561, type: !45)
!9503 = !DILocation(line: 4561, column: 78, scope: !9493)
!9504 = !DILocalVariable(name: "sce_audio", scope: !9493, file: !3, line: 4563, type: !1744)
!9505 = !DILocation(line: 4563, column: 9, scope: !9493)
!9506 = !DILocation(line: 4563, column: 21, scope: !9493)
!9507 = !DILocation(line: 4563, column: 32, scope: !9493)
!9508 = !DILocation(line: 4563, column: 43, scope: !9493)
!9509 = !DILocalVariable(name: "seqn", scope: !9493, file: !3, line: 4564, type: !204)
!9510 = !DILocation(line: 4564, column: 12, scope: !9493)
!9511 = !DILocation(line: 4564, column: 19, scope: !9493)
!9512 = !DILocation(line: 4564, column: 33, scope: !9493)
!9513 = !DILocation(line: 4566, column: 13, scope: !9493)
!9514 = !DILocation(line: 4566, column: 2, scope: !9493)
!9515 = !DILocation(line: 4566, column: 7, scope: !9493)
!9516 = !DILocation(line: 4566, column: 11, scope: !9493)
!9517 = !DILocation(line: 4567, column: 16, scope: !9493)
!9518 = !DILocation(line: 4567, column: 30, scope: !9493)
!9519 = !DILocation(line: 4567, column: 35, scope: !9493)
!9520 = !DILocation(line: 4567, column: 2, scope: !9493)
!9521 = !DILocation(line: 4567, column: 8, scope: !9493)
!9522 = !DILocation(line: 4567, column: 14, scope: !9493)
!9523 = !DILocation(line: 4571, column: 6, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4571, column: 6)
!9525 = !DILocation(line: 4571, column: 11, scope: !9524)
!9526 = !DILocation(line: 4571, column: 18, scope: !9524)
!9527 = !DILocation(line: 4571, column: 6, scope: !9493)
!9528 = !DILocation(line: 4572, column: 23, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !9524, file: !3, line: 4571, column: 24)
!9530 = !DILocation(line: 4572, column: 37, scope: !9529)
!9531 = !DILocation(line: 4572, column: 42, scope: !9529)
!9532 = !DILocation(line: 4572, column: 49, scope: !9529)
!9533 = !DILocation(line: 4572, column: 3, scope: !9529)
!9534 = !DILocation(line: 4572, column: 9, scope: !9529)
!9535 = !DILocation(line: 4572, column: 16, scope: !9529)
!9536 = !DILocation(line: 4572, column: 21, scope: !9529)
!9537 = !DILocation(line: 4573, column: 2, scope: !9529)
!9538 = !DILocation(line: 4575, column: 6, scope: !9539)
!9539 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4575, column: 6)
!9540 = !DILocation(line: 4575, column: 11, scope: !9539)
!9541 = !DILocation(line: 4575, column: 18, scope: !9539)
!9542 = !DILocation(line: 4575, column: 6, scope: !9493)
!9543 = !DILocation(line: 4576, column: 28, scope: !9544)
!9544 = distinct !DILexicalBlock(scope: !9539, file: !3, line: 4575, column: 29)
!9545 = !DILocation(line: 4576, column: 42, scope: !9544)
!9546 = !DILocation(line: 4576, column: 47, scope: !9544)
!9547 = !DILocation(line: 4576, column: 54, scope: !9544)
!9548 = !DILocation(line: 4576, column: 3, scope: !9544)
!9549 = !DILocation(line: 4576, column: 9, scope: !9544)
!9550 = !DILocation(line: 4576, column: 16, scope: !9544)
!9551 = !DILocation(line: 4576, column: 26, scope: !9544)
!9552 = !DILocation(line: 4577, column: 2, scope: !9544)
!9553 = !DILocation(line: 4579, column: 6, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4579, column: 6)
!9555 = !DILocation(line: 4579, column: 11, scope: !9554)
!9556 = !DILocation(line: 4579, column: 18, scope: !9554)
!9557 = !DILocation(line: 4579, column: 6, scope: !9493)
!9558 = !DILocation(line: 4580, column: 24, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9554, file: !3, line: 4579, column: 25)
!9560 = !DILocation(line: 4580, column: 38, scope: !9559)
!9561 = !DILocation(line: 4580, column: 43, scope: !9559)
!9562 = !DILocation(line: 4580, column: 50, scope: !9559)
!9563 = !DILocation(line: 4580, column: 3, scope: !9559)
!9564 = !DILocation(line: 4580, column: 9, scope: !9559)
!9565 = !DILocation(line: 4580, column: 16, scope: !9559)
!9566 = !DILocation(line: 4580, column: 22, scope: !9559)
!9567 = !DILocation(line: 4581, column: 3, scope: !9559)
!9568 = !DILocation(line: 4581, column: 9, scope: !9559)
!9569 = !DILocation(line: 4581, column: 16, scope: !9559)
!9570 = !DILocation(line: 4581, column: 23, scope: !9559)
!9571 = !DILocation(line: 4581, column: 28, scope: !9559)
!9572 = !DILocation(line: 4582, column: 2, scope: !9559)
!9573 = !DILocation(line: 4584, column: 6, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4584, column: 6)
!9575 = !DILocation(line: 4584, column: 12, scope: !9574)
!9576 = !DILocation(line: 4584, column: 22, scope: !9574)
!9577 = !DILocation(line: 4584, column: 6, scope: !9493)
!9578 = !DILocation(line: 4585, column: 23, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 4584, column: 29)
!9580 = !DILocation(line: 4585, column: 29, scope: !9579)
!9581 = !DILocation(line: 4585, column: 3, scope: !9579)
!9582 = !DILocation(line: 4587, column: 35, scope: !9579)
!9583 = !DILocation(line: 4587, column: 41, scope: !9579)
!9584 = !DILocation(line: 4587, column: 3, scope: !9579)
!9585 = !DILocation(line: 4588, column: 2, scope: !9579)
!9586 = !DILocation(line: 4590, column: 6, scope: !9587)
!9587 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4590, column: 6)
!9588 = !DILocation(line: 4590, column: 11, scope: !9587)
!9589 = !DILocation(line: 4590, column: 16, scope: !9587)
!9590 = !DILocation(line: 4590, column: 6, scope: !9493)
!9591 = !DILocation(line: 4591, column: 3, scope: !9592)
!9592 = distinct !DILexicalBlock(scope: !9587, file: !3, line: 4590, column: 34)
!9593 = !DILocation(line: 4591, column: 9, scope: !9592)
!9594 = !DILocation(line: 4591, column: 16, scope: !9592)
!9595 = !DILocation(line: 4591, column: 26, scope: !9592)
!9596 = !DILocation(line: 4593, column: 23, scope: !9592)
!9597 = !DILocation(line: 4593, column: 29, scope: !9592)
!9598 = !DILocation(line: 4593, column: 3, scope: !9592)
!9599 = !DILocation(line: 4596, column: 2, scope: !9592)
!9600 = !DILocation(line: 4597, column: 11, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9587, file: !3, line: 4597, column: 11)
!9602 = !DILocation(line: 4597, column: 16, scope: !9601)
!9603 = !DILocation(line: 4597, column: 21, scope: !9601)
!9604 = !DILocation(line: 4597, column: 11, scope: !9587)
!9605 = !DILocation(line: 4598, column: 3, scope: !9606)
!9606 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 4597, column: 40)
!9607 = !DILocation(line: 4598, column: 9, scope: !9606)
!9608 = !DILocation(line: 4598, column: 16, scope: !9606)
!9609 = !DILocation(line: 4598, column: 26, scope: !9606)
!9610 = !DILocation(line: 4599, column: 7, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9606, file: !3, line: 4599, column: 7)
!9612 = !DILocation(line: 4599, column: 12, scope: !9611)
!9613 = !DILocation(line: 4599, column: 7, scope: !9606)
!9614 = !DILocation(line: 4600, column: 61, scope: !9611)
!9615 = !DILocation(line: 4600, column: 72, scope: !9611)
!9616 = !DILocation(line: 4600, column: 24, scope: !9611)
!9617 = !DILocation(line: 4600, column: 4, scope: !9611)
!9618 = !DILocation(line: 4600, column: 10, scope: !9611)
!9619 = !DILocation(line: 4600, column: 22, scope: !9611)
!9620 = !DILocation(line: 4601, column: 2, scope: !9606)
!9621 = !DILocation(line: 4602, column: 11, scope: !9622)
!9622 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 4602, column: 11)
!9623 = !DILocation(line: 4602, column: 16, scope: !9622)
!9624 = !DILocation(line: 4602, column: 21, scope: !9622)
!9625 = !DILocation(line: 4602, column: 11, scope: !9601)
!9626 = !DILocation(line: 4604, column: 2, scope: !9627)
!9627 = distinct !DILexicalBlock(scope: !9622, file: !3, line: 4602, column: 44)
!9628 = !DILocation(line: 4605, column: 11, scope: !9629)
!9629 = distinct !DILexicalBlock(scope: !9622, file: !3, line: 4605, column: 11)
!9630 = !DILocation(line: 4605, column: 16, scope: !9629)
!9631 = !DILocation(line: 4605, column: 21, scope: !9629)
!9632 = !DILocation(line: 4605, column: 11, scope: !9622)
!9633 = !DILocation(line: 4607, column: 2, scope: !9634)
!9634 = distinct !DILexicalBlock(scope: !9629, file: !3, line: 4605, column: 39)
!9635 = !DILocation(line: 4608, column: 11, scope: !9636)
!9636 = distinct !DILexicalBlock(scope: !9629, file: !3, line: 4608, column: 11)
!9637 = !DILocation(line: 4608, column: 16, scope: !9636)
!9638 = !DILocation(line: 4608, column: 21, scope: !9636)
!9639 = !DILocation(line: 4608, column: 11, scope: !9629)
!9640 = !DILocation(line: 4610, column: 11, scope: !9641)
!9641 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 4608, column: 40)
!9642 = !DILocation(line: 4610, column: 25, scope: !9641)
!9643 = !DILocation(line: 4610, column: 30, scope: !9641)
!9644 = !DILocation(line: 4610, column: 37, scope: !9641)
!9645 = !DILocation(line: 4609, column: 3, scope: !9641)
!9646 = !DILocation(line: 4609, column: 9, scope: !9641)
!9647 = !DILocation(line: 4609, column: 16, scope: !9641)
!9648 = !DILocation(line: 4609, column: 26, scope: !9641)
!9649 = !DILocation(line: 4611, column: 3, scope: !9641)
!9650 = !DILocation(line: 4611, column: 9, scope: !9641)
!9651 = !DILocation(line: 4611, column: 14, scope: !9641)
!9652 = !DILocation(line: 4612, column: 2, scope: !9641)
!9653 = !DILocation(line: 4613, column: 11, scope: !9654)
!9654 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 4613, column: 11)
!9655 = !DILocation(line: 4613, column: 16, scope: !9654)
!9656 = !DILocation(line: 4613, column: 21, scope: !9654)
!9657 = !DILocation(line: 4613, column: 11, scope: !9636)
!9658 = !DILocation(line: 4615, column: 11, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9654, file: !3, line: 4613, column: 44)
!9660 = !DILocation(line: 4615, column: 25, scope: !9659)
!9661 = !DILocation(line: 4615, column: 30, scope: !9659)
!9662 = !DILocation(line: 4615, column: 37, scope: !9659)
!9663 = !DILocation(line: 4614, column: 3, scope: !9659)
!9664 = !DILocation(line: 4614, column: 9, scope: !9659)
!9665 = !DILocation(line: 4614, column: 16, scope: !9659)
!9666 = !DILocation(line: 4614, column: 26, scope: !9659)
!9667 = !DILocation(line: 4616, column: 7, scope: !9668)
!9668 = distinct !DILexicalBlock(scope: !9659, file: !3, line: 4616, column: 7)
!9669 = !DILocation(line: 4616, column: 12, scope: !9668)
!9670 = !DILocation(line: 4616, column: 7, scope: !9659)
!9671 = !DILocation(line: 4617, column: 55, scope: !9668)
!9672 = !DILocation(line: 4617, column: 66, scope: !9668)
!9673 = !DILocation(line: 4617, column: 24, scope: !9668)
!9674 = !DILocation(line: 4617, column: 4, scope: !9668)
!9675 = !DILocation(line: 4617, column: 10, scope: !9668)
!9676 = !DILocation(line: 4617, column: 22, scope: !9668)
!9677 = !DILocation(line: 4619, column: 20, scope: !9659)
!9678 = !DILocation(line: 4619, column: 26, scope: !9659)
!9679 = !DILocation(line: 4619, column: 14, scope: !9659)
!9680 = !DILocation(line: 4619, column: 3, scope: !9659)
!9681 = !DILocation(line: 4620, column: 2, scope: !9659)
!9682 = !DILocation(line: 4621, column: 11, scope: !9683)
!9683 = distinct !DILexicalBlock(scope: !9654, file: !3, line: 4621, column: 11)
!9684 = !DILocation(line: 4621, column: 16, scope: !9683)
!9685 = !DILocation(line: 4621, column: 21, scope: !9683)
!9686 = !DILocation(line: 4621, column: 11, scope: !9654)
!9687 = !DILocation(line: 4623, column: 11, scope: !9688)
!9688 = distinct !DILexicalBlock(scope: !9683, file: !3, line: 4621, column: 40)
!9689 = !DILocation(line: 4623, column: 25, scope: !9688)
!9690 = !DILocation(line: 4623, column: 30, scope: !9688)
!9691 = !DILocation(line: 4623, column: 37, scope: !9688)
!9692 = !DILocation(line: 4622, column: 3, scope: !9688)
!9693 = !DILocation(line: 4622, column: 9, scope: !9688)
!9694 = !DILocation(line: 4622, column: 16, scope: !9688)
!9695 = !DILocation(line: 4622, column: 26, scope: !9688)
!9696 = !DILocation(line: 4624, column: 2, scope: !9688)
!9697 = !DILocation(line: 4625, column: 11, scope: !9698)
!9698 = distinct !DILexicalBlock(scope: !9683, file: !3, line: 4625, column: 11)
!9699 = !DILocation(line: 4625, column: 16, scope: !9698)
!9700 = !DILocation(line: 4625, column: 21, scope: !9698)
!9701 = !DILocation(line: 4625, column: 11, scope: !9683)
!9702 = !DILocation(line: 4626, column: 7, scope: !9703)
!9703 = distinct !DILexicalBlock(scope: !9704, file: !3, line: 4626, column: 7)
!9704 = distinct !DILexicalBlock(scope: !9698, file: !3, line: 4625, column: 41)
!9705 = !DILocation(line: 4626, column: 12, scope: !9703)
!9706 = !DILocation(line: 4626, column: 17, scope: !9703)
!9707 = !DILocation(line: 4626, column: 20, scope: !9703)
!9708 = !DILocation(line: 4626, column: 25, scope: !9703)
!9709 = !DILocation(line: 4626, column: 31, scope: !9703)
!9710 = !DILocation(line: 4626, column: 7, scope: !9704)
!9711 = !DILocation(line: 4626, column: 49, scope: !9703)
!9712 = !DILocation(line: 4626, column: 54, scope: !9703)
!9713 = !DILocation(line: 4626, column: 60, scope: !9703)
!9714 = !DILocation(line: 4626, column: 36, scope: !9703)
!9715 = !DILocation(line: 4626, column: 42, scope: !9703)
!9716 = !DILocation(line: 4626, column: 47, scope: !9703)
!9717 = !DILocation(line: 4627, column: 7, scope: !9718)
!9718 = distinct !DILexicalBlock(scope: !9704, file: !3, line: 4627, column: 7)
!9719 = !DILocation(line: 4627, column: 12, scope: !9718)
!9720 = !DILocation(line: 4627, column: 17, scope: !9718)
!9721 = !DILocation(line: 4627, column: 20, scope: !9718)
!9722 = !DILocation(line: 4627, column: 25, scope: !9718)
!9723 = !DILocation(line: 4627, column: 31, scope: !9718)
!9724 = !DILocation(line: 4627, column: 7, scope: !9704)
!9725 = !DILocation(line: 4627, column: 49, scope: !9718)
!9726 = !DILocation(line: 4627, column: 54, scope: !9718)
!9727 = !DILocation(line: 4627, column: 60, scope: !9718)
!9728 = !DILocation(line: 4627, column: 36, scope: !9718)
!9729 = !DILocation(line: 4627, column: 42, scope: !9718)
!9730 = !DILocation(line: 4627, column: 47, scope: !9718)
!9731 = !DILocation(line: 4628, column: 7, scope: !9732)
!9732 = distinct !DILexicalBlock(scope: !9704, file: !3, line: 4628, column: 7)
!9733 = !DILocation(line: 4628, column: 12, scope: !9732)
!9734 = !DILocation(line: 4628, column: 17, scope: !9732)
!9735 = !DILocation(line: 4628, column: 20, scope: !9732)
!9736 = !DILocation(line: 4628, column: 25, scope: !9732)
!9737 = !DILocation(line: 4628, column: 31, scope: !9732)
!9738 = !DILocation(line: 4628, column: 7, scope: !9704)
!9739 = !DILocation(line: 4628, column: 49, scope: !9732)
!9740 = !DILocation(line: 4628, column: 54, scope: !9732)
!9741 = !DILocation(line: 4628, column: 60, scope: !9732)
!9742 = !DILocation(line: 4628, column: 36, scope: !9732)
!9743 = !DILocation(line: 4628, column: 42, scope: !9732)
!9744 = !DILocation(line: 4628, column: 47, scope: !9732)
!9745 = !DILocation(line: 4630, column: 7, scope: !9746)
!9746 = distinct !DILexicalBlock(scope: !9704, file: !3, line: 4630, column: 7)
!9747 = !DILocation(line: 4630, column: 12, scope: !9746)
!9748 = !DILocation(line: 4630, column: 17, scope: !9746)
!9749 = !DILocation(line: 4630, column: 7, scope: !9704)
!9750 = !DILocalVariable(name: "sh", scope: !9751, file: !3, line: 4631, type: !1858)
!9751 = distinct !DILexicalBlock(scope: !9746, file: !3, line: 4630, column: 36)
!9752 = !DILocation(line: 4631, column: 27, scope: !9751)
!9753 = !DILocation(line: 4632, column: 33, scope: !9751)
!9754 = !DILocation(line: 4632, column: 9, scope: !9751)
!9755 = !DILocation(line: 4633, column: 11, scope: !9756)
!9756 = distinct !DILexicalBlock(scope: !9751, file: !3, line: 4633, column: 8)
!9757 = !DILocation(line: 4633, column: 8, scope: !9756)
!9758 = !DILocation(line: 4633, column: 8, scope: !9751)
!9759 = !DILocation(line: 4634, column: 8, scope: !9756)
!9760 = !DILocation(line: 4634, column: 13, scope: !9756)
!9761 = !DILocation(line: 4634, column: 18, scope: !9756)
!9762 = !DILocation(line: 4634, column: 5, scope: !9756)
!9763 = !DILocation(line: 4635, column: 3, scope: !9751)
!9764 = !DILocation(line: 4637, column: 3, scope: !9704)
!9765 = !DILocation(line: 4637, column: 9, scope: !9704)
!9766 = !DILocation(line: 4637, column: 16, scope: !9704)
!9767 = !DILocation(line: 4637, column: 26, scope: !9704)
!9768 = !DILocation(line: 4639, column: 2, scope: !9704)
!9769 = !DILocation(line: 4645, column: 6, scope: !9770)
!9770 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4645, column: 6)
!9771 = !DILocation(line: 4645, column: 16, scope: !9770)
!9772 = !DILocation(line: 4645, column: 6, scope: !9493)
!9773 = !DILocation(line: 4646, column: 44, scope: !9770)
!9774 = !DILocation(line: 4646, column: 51, scope: !9770)
!9775 = !DILocation(line: 4646, column: 55, scope: !9770)
!9776 = !DILocation(line: 4646, column: 64, scope: !9770)
!9777 = !DILocation(line: 4646, column: 3, scope: !9770)
!9778 = !DILocation(line: 4648, column: 6, scope: !9779)
!9779 = distinct !DILexicalBlock(scope: !9493, file: !3, line: 4648, column: 6)
!9780 = !DILocation(line: 4648, column: 16, scope: !9779)
!9781 = !DILocation(line: 4648, column: 6, scope: !9493)
!9782 = !DILocation(line: 4649, column: 31, scope: !9779)
!9783 = !DILocation(line: 4649, column: 38, scope: !9779)
!9784 = !DILocation(line: 4649, column: 43, scope: !9779)
!9785 = !DILocation(line: 4649, column: 48, scope: !9779)
!9786 = !DILocation(line: 4649, column: 53, scope: !9779)
!9787 = !DILocation(line: 4649, column: 59, scope: !9779)
!9788 = !DILocation(line: 4649, column: 64, scope: !9779)
!9789 = !DILocation(line: 4649, column: 3, scope: !9779)
!9790 = !DILocation(line: 4651, column: 9, scope: !9493)
!9791 = !DILocation(line: 4651, column: 2, scope: !9493)
!9792 = distinct !DISubprogram(name: "BKE_sequence_base_dupli_recursive", scope: !3, file: !3, line: 4669, type: !9793, scopeLine: 4672, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9793 = !DISubroutineType(types: !9794)
!9794 = !{null, !1744, !1744, !202, !202, !45}
!9795 = !DILocalVariable(name: "scene", arg: 1, scope: !9792, file: !3, line: 4670, type: !1744)
!9796 = !DILocation(line: 4670, column: 16, scope: !9792)
!9797 = !DILocalVariable(name: "scene_to", arg: 2, scope: !9792, file: !3, line: 4670, type: !1744)
!9798 = !DILocation(line: 4670, column: 30, scope: !9792)
!9799 = !DILocalVariable(name: "nseqbase", arg: 3, scope: !9792, file: !3, line: 4670, type: !202)
!9800 = !DILocation(line: 4670, column: 50, scope: !9792)
!9801 = !DILocalVariable(name: "seqbase", arg: 4, scope: !9792, file: !3, line: 4670, type: !202)
!9802 = !DILocation(line: 4670, column: 70, scope: !9792)
!9803 = !DILocalVariable(name: "dupe_flag", arg: 5, scope: !9792, file: !3, line: 4671, type: !45)
!9804 = !DILocation(line: 4671, column: 13, scope: !9792)
!9805 = !DILocalVariable(name: "seq", scope: !9792, file: !3, line: 4673, type: !204)
!9806 = !DILocation(line: 4673, column: 12, scope: !9792)
!9807 = !DILocalVariable(name: "seqn", scope: !9792, file: !3, line: 4674, type: !204)
!9808 = !DILocation(line: 4674, column: 12, scope: !9792)
!9809 = !DILocalVariable(name: "last_seq", scope: !9792, file: !3, line: 4675, type: !204)
!9810 = !DILocation(line: 4675, column: 12, scope: !9792)
!9811 = !DILocation(line: 4675, column: 48, scope: !9792)
!9812 = !DILocation(line: 4675, column: 23, scope: !9792)
!9813 = !DILocalVariable(name: "dupe_flag_recursive", scope: !9792, file: !3, line: 4677, type: !45)
!9814 = !DILocation(line: 4677, column: 6, scope: !9792)
!9815 = !DILocation(line: 4677, column: 28, scope: !9792)
!9816 = !DILocation(line: 4677, column: 38, scope: !9792)
!9817 = !DILocation(line: 4679, column: 13, scope: !9818)
!9818 = distinct !DILexicalBlock(scope: !9792, file: !3, line: 4679, column: 2)
!9819 = !DILocation(line: 4679, column: 22, scope: !9818)
!9820 = !DILocation(line: 4679, column: 11, scope: !9818)
!9821 = !DILocation(line: 4679, column: 7, scope: !9818)
!9822 = !DILocation(line: 4679, column: 29, scope: !9823)
!9823 = distinct !DILexicalBlock(scope: !9818, file: !3, line: 4679, column: 2)
!9824 = !DILocation(line: 4679, column: 2, scope: !9818)
!9825 = !DILocation(line: 4680, column: 3, scope: !9826)
!9826 = distinct !DILexicalBlock(scope: !9823, file: !3, line: 4679, column: 51)
!9827 = !DILocation(line: 4680, column: 8, scope: !9826)
!9828 = !DILocation(line: 4680, column: 12, scope: !9826)
!9829 = !DILocation(line: 4681, column: 8, scope: !9830)
!9830 = distinct !DILexicalBlock(scope: !9826, file: !3, line: 4681, column: 7)
!9831 = !DILocation(line: 4681, column: 13, scope: !9830)
!9832 = !DILocation(line: 4681, column: 18, scope: !9830)
!9833 = !DILocation(line: 4681, column: 28, scope: !9830)
!9834 = !DILocation(line: 4681, column: 32, scope: !9830)
!9835 = !DILocation(line: 4681, column: 42, scope: !9830)
!9836 = !DILocation(line: 4681, column: 7, scope: !9826)
!9837 = !DILocation(line: 4682, column: 21, scope: !9838)
!9838 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 4681, column: 59)
!9839 = !DILocation(line: 4682, column: 28, scope: !9838)
!9840 = !DILocation(line: 4682, column: 38, scope: !9838)
!9841 = !DILocation(line: 4682, column: 43, scope: !9838)
!9842 = !DILocation(line: 4682, column: 11, scope: !9838)
!9843 = !DILocation(line: 4682, column: 9, scope: !9838)
!9844 = !DILocation(line: 4683, column: 8, scope: !9845)
!9845 = distinct !DILexicalBlock(scope: !9838, file: !3, line: 4683, column: 8)
!9846 = !DILocation(line: 4683, column: 8, scope: !9838)
!9847 = !DILocation(line: 4684, column: 9, scope: !9848)
!9848 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 4684, column: 9)
!9849 = distinct !DILexicalBlock(scope: !9845, file: !3, line: 4683, column: 14)
!9850 = !DILocation(line: 4684, column: 19, scope: !9848)
!9851 = !DILocation(line: 4684, column: 9, scope: !9849)
!9852 = !DILocation(line: 4685, column: 6, scope: !9853)
!9853 = distinct !DILexicalBlock(scope: !9848, file: !3, line: 4684, column: 39)
!9854 = !DILocation(line: 4685, column: 11, scope: !9853)
!9855 = !DILocation(line: 4685, column: 16, scope: !9853)
!9856 = !DILocation(line: 4686, column: 6, scope: !9853)
!9857 = !DILocation(line: 4686, column: 12, scope: !9853)
!9858 = !DILocation(line: 4686, column: 17, scope: !9853)
!9859 = !DILocation(line: 4687, column: 5, scope: !9853)
!9860 = !DILocation(line: 4689, column: 17, scope: !9849)
!9861 = !DILocation(line: 4689, column: 27, scope: !9849)
!9862 = !DILocation(line: 4689, column: 5, scope: !9849)
!9863 = !DILocation(line: 4690, column: 9, scope: !9864)
!9864 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 4690, column: 9)
!9865 = !DILocation(line: 4690, column: 14, scope: !9864)
!9866 = !DILocation(line: 4690, column: 19, scope: !9864)
!9867 = !DILocation(line: 4690, column: 9, scope: !9849)
!9868 = !DILocation(line: 4692, column: 14, scope: !9869)
!9869 = distinct !DILexicalBlock(scope: !9864, file: !3, line: 4690, column: 37)
!9870 = !DILocation(line: 4692, column: 21, scope: !9869)
!9871 = !DILocation(line: 4692, column: 32, scope: !9869)
!9872 = !DILocation(line: 4692, column: 38, scope: !9869)
!9873 = !DILocation(line: 4692, column: 48, scope: !9869)
!9874 = !DILocation(line: 4692, column: 53, scope: !9869)
!9875 = !DILocation(line: 4693, column: 14, scope: !9869)
!9876 = !DILocation(line: 4691, column: 6, scope: !9869)
!9877 = !DILocation(line: 4694, column: 5, scope: !9869)
!9878 = !DILocation(line: 4696, column: 9, scope: !9879)
!9879 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 4696, column: 9)
!9880 = !DILocation(line: 4696, column: 19, scope: !9879)
!9881 = !DILocation(line: 4696, column: 9, scope: !9849)
!9882 = !DILocation(line: 4697, column: 10, scope: !9883)
!9883 = distinct !DILexicalBlock(scope: !9884, file: !3, line: 4697, column: 10)
!9884 = distinct !DILexicalBlock(scope: !9879, file: !3, line: 4696, column: 39)
!9885 = !DILocation(line: 4697, column: 17, scope: !9883)
!9886 = !DILocation(line: 4697, column: 14, scope: !9883)
!9887 = !DILocation(line: 4697, column: 10, scope: !9884)
!9888 = !DILocation(line: 4698, column: 32, scope: !9889)
!9889 = distinct !DILexicalBlock(scope: !9883, file: !3, line: 4697, column: 27)
!9890 = !DILocation(line: 4698, column: 39, scope: !9889)
!9891 = !DILocation(line: 4698, column: 7, scope: !9889)
!9892 = !DILocation(line: 4699, column: 6, scope: !9889)
!9893 = !DILocation(line: 4700, column: 5, scope: !9884)
!9894 = !DILocation(line: 4701, column: 4, scope: !9849)
!9895 = !DILocation(line: 4702, column: 3, scope: !9838)
!9896 = !DILocation(line: 4703, column: 2, scope: !9826)
!9897 = !DILocation(line: 4679, column: 40, scope: !9823)
!9898 = !DILocation(line: 4679, column: 45, scope: !9823)
!9899 = !DILocation(line: 4679, column: 38, scope: !9823)
!9900 = !DILocation(line: 4679, column: 2, scope: !9823)
!9901 = distinct !{!9901, !9824, !9902}
!9902 = !DILocation(line: 4703, column: 2, scope: !9818)
!9903 = !DILocation(line: 4704, column: 1, scope: !9792)
!9904 = distinct !DISubprogram(name: "BKE_sequence_is_valid_check", scope: !3, file: !3, line: 4708, type: !7190, scopeLine: 4709, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9905 = !DILocalVariable(name: "seq", arg: 1, scope: !9904, file: !3, line: 4708, type: !204)
!9906 = !DILocation(line: 4708, column: 44, scope: !9904)
!9907 = !DILocation(line: 4710, column: 10, scope: !9904)
!9908 = !DILocation(line: 4710, column: 15, scope: !9904)
!9909 = !DILocation(line: 4710, column: 2, scope: !9904)
!9910 = !DILocation(line: 4712, column: 12, scope: !9911)
!9911 = distinct !DILexicalBlock(scope: !9904, file: !3, line: 4710, column: 21)
!9912 = !DILocation(line: 4712, column: 17, scope: !9911)
!9913 = !DILocation(line: 4712, column: 22, scope: !9911)
!9914 = !DILocation(line: 4712, column: 11, scope: !9911)
!9915 = !DILocation(line: 4712, column: 4, scope: !9911)
!9916 = !DILocation(line: 4714, column: 12, scope: !9911)
!9917 = !DILocation(line: 4714, column: 17, scope: !9911)
!9918 = !DILocation(line: 4714, column: 22, scope: !9911)
!9919 = !DILocation(line: 4714, column: 11, scope: !9911)
!9920 = !DILocation(line: 4714, column: 4, scope: !9911)
!9921 = !DILocation(line: 4716, column: 12, scope: !9911)
!9922 = !DILocation(line: 4716, column: 17, scope: !9911)
!9923 = !DILocation(line: 4716, column: 23, scope: !9911)
!9924 = !DILocation(line: 4716, column: 11, scope: !9911)
!9925 = !DILocation(line: 4716, column: 4, scope: !9911)
!9926 = !DILocation(line: 4718, column: 12, scope: !9911)
!9927 = !DILocation(line: 4718, column: 17, scope: !9911)
!9928 = !DILocation(line: 4718, column: 23, scope: !9911)
!9929 = !DILocation(line: 4718, column: 11, scope: !9911)
!9930 = !DILocation(line: 4718, column: 4, scope: !9911)
!9931 = !DILocation(line: 4721, column: 2, scope: !9904)
!9932 = !DILocation(line: 4722, column: 1, scope: !9904)
!9933 = distinct !DISubprogram(name: "seq_free_strip", scope: !3, file: !3, line: 151, type: !9934, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!9934 = !DISubroutineType(types: !9935)
!9935 = !{null, !234}
!9936 = !DILocalVariable(name: "strip", arg: 1, scope: !9933, file: !3, line: 151, type: !234)
!9937 = !DILocation(line: 151, column: 35, scope: !9933)
!9938 = !DILocation(line: 153, column: 2, scope: !9933)
!9939 = !DILocation(line: 153, column: 9, scope: !9933)
!9940 = !DILocation(line: 153, column: 11, scope: !9933)
!9941 = !DILocation(line: 154, column: 6, scope: !9942)
!9942 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 154, column: 6)
!9943 = !DILocation(line: 154, column: 13, scope: !9942)
!9944 = !DILocation(line: 154, column: 16, scope: !9942)
!9945 = !DILocation(line: 154, column: 6, scope: !9933)
!9946 = !DILocation(line: 155, column: 3, scope: !9942)
!9947 = !DILocation(line: 156, column: 6, scope: !9948)
!9948 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 156, column: 6)
!9949 = !DILocation(line: 156, column: 13, scope: !9948)
!9950 = !DILocation(line: 156, column: 16, scope: !9948)
!9951 = !DILocation(line: 156, column: 6, scope: !9933)
!9952 = !DILocation(line: 157, column: 3, scope: !9953)
!9953 = distinct !DILexicalBlock(scope: !9948, file: !3, line: 156, column: 21)
!9954 = !DILocation(line: 158, column: 3, scope: !9953)
!9955 = !DILocation(line: 161, column: 6, scope: !9956)
!9956 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 161, column: 6)
!9957 = !DILocation(line: 161, column: 13, scope: !9956)
!9958 = !DILocation(line: 161, column: 6, scope: !9933)
!9959 = !DILocation(line: 162, column: 3, scope: !9960)
!9960 = distinct !DILexicalBlock(scope: !9956, file: !3, line: 161, column: 24)
!9961 = !DILocation(line: 162, column: 13, scope: !9960)
!9962 = !DILocation(line: 162, column: 20, scope: !9960)
!9963 = !DILocation(line: 163, column: 2, scope: !9960)
!9964 = !DILocation(line: 165, column: 6, scope: !9965)
!9965 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 165, column: 6)
!9966 = !DILocation(line: 165, column: 13, scope: !9965)
!9967 = !DILocation(line: 165, column: 6, scope: !9933)
!9968 = !DILocation(line: 166, column: 7, scope: !9969)
!9969 = distinct !DILexicalBlock(scope: !9970, file: !3, line: 166, column: 7)
!9970 = distinct !DILexicalBlock(scope: !9965, file: !3, line: 165, column: 20)
!9971 = !DILocation(line: 166, column: 14, scope: !9969)
!9972 = !DILocation(line: 166, column: 21, scope: !9969)
!9973 = !DILocation(line: 166, column: 7, scope: !9970)
!9974 = !DILocation(line: 167, column: 18, scope: !9975)
!9975 = distinct !DILexicalBlock(scope: !9969, file: !3, line: 166, column: 27)
!9976 = !DILocation(line: 167, column: 25, scope: !9975)
!9977 = !DILocation(line: 167, column: 32, scope: !9975)
!9978 = !DILocation(line: 167, column: 4, scope: !9975)
!9979 = !DILocation(line: 168, column: 3, scope: !9975)
!9980 = !DILocation(line: 170, column: 3, scope: !9970)
!9981 = !DILocation(line: 170, column: 13, scope: !9970)
!9982 = !DILocation(line: 170, column: 20, scope: !9970)
!9983 = !DILocation(line: 171, column: 2, scope: !9970)
!9984 = !DILocation(line: 172, column: 6, scope: !9985)
!9985 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 172, column: 6)
!9986 = !DILocation(line: 172, column: 13, scope: !9985)
!9987 = !DILocation(line: 172, column: 6, scope: !9933)
!9988 = !DILocation(line: 173, column: 3, scope: !9989)
!9989 = distinct !DILexicalBlock(scope: !9985, file: !3, line: 172, column: 19)
!9990 = !DILocation(line: 173, column: 13, scope: !9989)
!9991 = !DILocation(line: 173, column: 20, scope: !9989)
!9992 = !DILocation(line: 174, column: 2, scope: !9989)
!9993 = !DILocation(line: 175, column: 6, scope: !9994)
!9994 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 175, column: 6)
!9995 = !DILocation(line: 175, column: 13, scope: !9994)
!9996 = !DILocation(line: 175, column: 6, scope: !9933)
!9997 = !DILocation(line: 176, column: 3, scope: !9998)
!9998 = distinct !DILexicalBlock(scope: !9994, file: !3, line: 175, column: 24)
!9999 = !DILocation(line: 176, column: 13, scope: !9998)
!10000 = !DILocation(line: 176, column: 20, scope: !9998)
!10001 = !DILocation(line: 177, column: 2, scope: !9998)
!10002 = !DILocation(line: 179, column: 2, scope: !9933)
!10003 = !DILocation(line: 179, column: 12, scope: !9933)
!10004 = !DILocation(line: 180, column: 1, scope: !9933)
!10005 = distinct !DISubprogram(name: "seq_free_animdata", scope: !3, file: !3, line: 4182, type: !2108, scopeLine: 4183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10006 = !DILocalVariable(name: "scene", arg: 1, scope: !10005, file: !3, line: 4182, type: !1744)
!10007 = !DILocation(line: 4182, column: 38, scope: !10005)
!10008 = !DILocalVariable(name: "seq", arg: 2, scope: !10005, file: !3, line: 4182, type: !204)
!10009 = !DILocation(line: 4182, column: 55, scope: !10005)
!10010 = !DILocalVariable(name: "str", scope: !10005, file: !3, line: 4184, type: !7608)
!10011 = !DILocation(line: 4184, column: 7, scope: !10005)
!10012 = !DILocalVariable(name: "str_len", scope: !10005, file: !3, line: 4185, type: !3549)
!10013 = !DILocation(line: 4185, column: 9, scope: !10005)
!10014 = !DILocalVariable(name: "fcu", scope: !10005, file: !3, line: 4186, type: !7615)
!10015 = !DILocation(line: 4186, column: 10, scope: !10005)
!10016 = !DILocation(line: 4188, column: 6, scope: !10017)
!10017 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 4188, column: 6)
!10018 = !DILocation(line: 4188, column: 13, scope: !10017)
!10019 = !DILocation(line: 4188, column: 17, scope: !10017)
!10020 = !DILocation(line: 4188, column: 25, scope: !10017)
!10021 = !DILocation(line: 4188, column: 28, scope: !10017)
!10022 = !DILocation(line: 4188, column: 35, scope: !10017)
!10023 = !DILocation(line: 4188, column: 40, scope: !10017)
!10024 = !DILocation(line: 4188, column: 47, scope: !10017)
!10025 = !DILocation(line: 4188, column: 6, scope: !10005)
!10026 = !DILocation(line: 4189, column: 3, scope: !10017)
!10027 = !DILocation(line: 4191, column: 38, scope: !10005)
!10028 = !DILocation(line: 4191, column: 43, scope: !10005)
!10029 = !DILocation(line: 4191, column: 48, scope: !10005)
!10030 = !DILocation(line: 4191, column: 53, scope: !10005)
!10031 = !DILocation(line: 4191, column: 12, scope: !10005)
!10032 = !DILocation(line: 4191, column: 10, scope: !10005)
!10033 = !DILocation(line: 4193, column: 8, scope: !10005)
!10034 = !DILocation(line: 4193, column: 15, scope: !10005)
!10035 = !DILocation(line: 4193, column: 20, scope: !10005)
!10036 = !DILocation(line: 4193, column: 28, scope: !10005)
!10037 = !DILocation(line: 4193, column: 35, scope: !10005)
!10038 = !DILocation(line: 4193, column: 6, scope: !10005)
!10039 = !DILocation(line: 4195, column: 2, scope: !10005)
!10040 = !DILocation(line: 4195, column: 9, scope: !10005)
!10041 = !DILocation(line: 4196, column: 7, scope: !10042)
!10042 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 4196, column: 7)
!10043 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 4195, column: 14)
!10044 = !DILocation(line: 4196, column: 7, scope: !10043)
!10045 = !DILocalVariable(name: "next_fcu", scope: !10046, file: !3, line: 4197, type: !7615)
!10046 = distinct !DILexicalBlock(scope: !10042, file: !3, line: 4196, column: 46)
!10047 = !DILocation(line: 4197, column: 12, scope: !10046)
!10048 = !DILocation(line: 4197, column: 23, scope: !10046)
!10049 = !DILocation(line: 4197, column: 28, scope: !10046)
!10050 = !DILocation(line: 4199, column: 17, scope: !10046)
!10051 = !DILocation(line: 4199, column: 24, scope: !10046)
!10052 = !DILocation(line: 4199, column: 29, scope: !10046)
!10053 = !DILocation(line: 4199, column: 37, scope: !10046)
!10054 = !DILocation(line: 4199, column: 45, scope: !10046)
!10055 = !DILocation(line: 4199, column: 4, scope: !10046)
!10056 = !DILocation(line: 4200, column: 16, scope: !10046)
!10057 = !DILocation(line: 4200, column: 4, scope: !10046)
!10058 = !DILocation(line: 4202, column: 10, scope: !10046)
!10059 = !DILocation(line: 4202, column: 8, scope: !10046)
!10060 = !DILocation(line: 4203, column: 3, scope: !10046)
!10061 = !DILocation(line: 4205, column: 10, scope: !10062)
!10062 = distinct !DILexicalBlock(scope: !10042, file: !3, line: 4204, column: 8)
!10063 = !DILocation(line: 4205, column: 15, scope: !10062)
!10064 = !DILocation(line: 4205, column: 8, scope: !10062)
!10065 = distinct !{!10065, !10039, !10066}
!10066 = !DILocation(line: 4207, column: 2, scope: !10005)
!10067 = !DILocation(line: 4208, column: 1, scope: !10005)
!10068 = distinct !DISubprogram(name: "srgb_to_linearrgb_v3_v3", scope: !2966, file: !2966, line: 39, type: !2967, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10069 = !DILocalVariable(name: "linear", arg: 1, scope: !10068, file: !2966, line: 39, type: !832)
!10070 = !DILocation(line: 39, column: 44, scope: !10068)
!10071 = !DILocalVariable(name: "srgb", arg: 2, scope: !10068, file: !2966, line: 39, type: !2969)
!10072 = !DILocation(line: 39, column: 67, scope: !10068)
!10073 = !DILocation(line: 41, column: 32, scope: !10068)
!10074 = !DILocation(line: 41, column: 14, scope: !10068)
!10075 = !DILocation(line: 41, column: 2, scope: !10068)
!10076 = !DILocation(line: 41, column: 12, scope: !10068)
!10077 = !DILocation(line: 42, column: 32, scope: !10068)
!10078 = !DILocation(line: 42, column: 14, scope: !10068)
!10079 = !DILocation(line: 42, column: 2, scope: !10068)
!10080 = !DILocation(line: 42, column: 12, scope: !10068)
!10081 = !DILocation(line: 43, column: 32, scope: !10068)
!10082 = !DILocation(line: 43, column: 14, scope: !10068)
!10083 = !DILocation(line: 43, column: 2, scope: !10068)
!10084 = !DILocation(line: 43, column: 12, scope: !10068)
!10085 = !DILocation(line: 44, column: 1, scope: !10068)
!10086 = distinct !DISubprogram(name: "seq_count", scope: !3, file: !3, line: 551, type: !10087, scopeLine: 552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10087 = !DISubroutineType(types: !10088)
!10088 = !{null, !202, !830}
!10089 = !DILocalVariable(name: "seqbase", arg: 1, scope: !10086, file: !3, line: 551, type: !202)
!10090 = !DILocation(line: 551, column: 33, scope: !10086)
!10091 = !DILocalVariable(name: "tot", arg: 2, scope: !10086, file: !3, line: 551, type: !830)
!10092 = !DILocation(line: 551, column: 47, scope: !10086)
!10093 = !DILocalVariable(name: "seq", scope: !10086, file: !3, line: 553, type: !204)
!10094 = !DILocation(line: 553, column: 12, scope: !10086)
!10095 = !DILocation(line: 555, column: 13, scope: !10096)
!10096 = distinct !DILexicalBlock(scope: !10086, file: !3, line: 555, column: 2)
!10097 = !DILocation(line: 555, column: 22, scope: !10096)
!10098 = !DILocation(line: 555, column: 11, scope: !10096)
!10099 = !DILocation(line: 555, column: 7, scope: !10096)
!10100 = !DILocation(line: 555, column: 29, scope: !10101)
!10101 = distinct !DILexicalBlock(scope: !10096, file: !3, line: 555, column: 2)
!10102 = !DILocation(line: 555, column: 2, scope: !10096)
!10103 = !DILocation(line: 556, column: 5, scope: !10104)
!10104 = distinct !DILexicalBlock(scope: !10101, file: !3, line: 555, column: 51)
!10105 = !DILocation(line: 556, column: 9, scope: !10104)
!10106 = !DILocation(line: 558, column: 7, scope: !10107)
!10107 = distinct !DILexicalBlock(scope: !10104, file: !3, line: 558, column: 7)
!10108 = !DILocation(line: 558, column: 12, scope: !10107)
!10109 = !DILocation(line: 558, column: 20, scope: !10107)
!10110 = !DILocation(line: 558, column: 7, scope: !10104)
!10111 = !DILocation(line: 559, column: 15, scope: !10107)
!10112 = !DILocation(line: 559, column: 20, scope: !10107)
!10113 = !DILocation(line: 559, column: 29, scope: !10107)
!10114 = !DILocation(line: 559, column: 4, scope: !10107)
!10115 = !DILocation(line: 560, column: 2, scope: !10104)
!10116 = !DILocation(line: 555, column: 40, scope: !10101)
!10117 = !DILocation(line: 555, column: 45, scope: !10101)
!10118 = !DILocation(line: 555, column: 38, scope: !10101)
!10119 = !DILocation(line: 555, column: 2, scope: !10101)
!10120 = distinct !{!10120, !10102, !10121}
!10121 = !DILocation(line: 560, column: 2, scope: !10096)
!10122 = !DILocation(line: 561, column: 1, scope: !10086)
!10123 = distinct !DISubprogram(name: "seq_build_array", scope: !3, file: !3, line: 563, type: !10124, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10124 = !DISubroutineType(types: !10125)
!10125 = !{null, !202, !3031, !45}
!10126 = !DILocalVariable(name: "seqbase", arg: 1, scope: !10123, file: !3, line: 563, type: !202)
!10127 = !DILocation(line: 563, column: 39, scope: !10123)
!10128 = !DILocalVariable(name: "array", arg: 2, scope: !10123, file: !3, line: 563, type: !3031)
!10129 = !DILocation(line: 563, column: 60, scope: !10123)
!10130 = !DILocalVariable(name: "depth", arg: 3, scope: !10123, file: !3, line: 563, type: !45)
!10131 = !DILocation(line: 563, column: 71, scope: !10123)
!10132 = !DILocalVariable(name: "seq", scope: !10123, file: !3, line: 565, type: !204)
!10133 = !DILocation(line: 565, column: 12, scope: !10123)
!10134 = !DILocation(line: 567, column: 13, scope: !10135)
!10135 = distinct !DILexicalBlock(scope: !10123, file: !3, line: 567, column: 2)
!10136 = !DILocation(line: 567, column: 22, scope: !10135)
!10137 = !DILocation(line: 567, column: 11, scope: !10135)
!10138 = !DILocation(line: 567, column: 7, scope: !10135)
!10139 = !DILocation(line: 567, column: 29, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10135, file: !3, line: 567, column: 2)
!10141 = !DILocation(line: 567, column: 2, scope: !10135)
!10142 = !DILocation(line: 568, column: 16, scope: !10143)
!10143 = distinct !DILexicalBlock(scope: !10140, file: !3, line: 567, column: 51)
!10144 = !DILocation(line: 568, column: 3, scope: !10143)
!10145 = !DILocation(line: 568, column: 8, scope: !10143)
!10146 = !DILocation(line: 568, column: 14, scope: !10143)
!10147 = !DILocation(line: 570, column: 7, scope: !10148)
!10148 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 570, column: 7)
!10149 = !DILocation(line: 570, column: 12, scope: !10148)
!10150 = !DILocation(line: 570, column: 20, scope: !10148)
!10151 = !DILocation(line: 570, column: 7, scope: !10143)
!10152 = !DILocation(line: 571, column: 21, scope: !10148)
!10153 = !DILocation(line: 571, column: 26, scope: !10148)
!10154 = !DILocation(line: 571, column: 35, scope: !10148)
!10155 = !DILocation(line: 571, column: 42, scope: !10148)
!10156 = !DILocation(line: 571, column: 48, scope: !10148)
!10157 = !DILocation(line: 571, column: 4, scope: !10148)
!10158 = !DILocation(line: 573, column: 13, scope: !10143)
!10159 = !DILocation(line: 573, column: 5, scope: !10143)
!10160 = !DILocation(line: 573, column: 4, scope: !10143)
!10161 = !DILocation(line: 573, column: 11, scope: !10143)
!10162 = !DILocation(line: 574, column: 5, scope: !10143)
!10163 = !DILocation(line: 574, column: 11, scope: !10143)
!10164 = !DILocation(line: 575, column: 2, scope: !10143)
!10165 = !DILocation(line: 567, column: 40, scope: !10140)
!10166 = !DILocation(line: 567, column: 45, scope: !10140)
!10167 = !DILocation(line: 567, column: 38, scope: !10140)
!10168 = !DILocation(line: 567, column: 2, scope: !10140)
!10169 = distinct !{!10169, !10141, !10170}
!10170 = !DILocation(line: 575, column: 2, scope: !10135)
!10171 = !DILocation(line: 576, column: 1, scope: !10123)
!10172 = distinct !DISubprogram(name: "seq_update_sound_bounds_recursive_rec", scope: !3, file: !3, line: 641, type: !6910, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10173 = !DILocalVariable(name: "scene", arg: 1, scope: !10172, file: !3, line: 641, type: !1744)
!10174 = !DILocation(line: 641, column: 58, scope: !10172)
!10175 = !DILocalVariable(name: "metaseq", arg: 2, scope: !10172, file: !3, line: 641, type: !204)
!10176 = !DILocation(line: 641, column: 75, scope: !10172)
!10177 = !DILocalVariable(name: "start", arg: 3, scope: !10172, file: !3, line: 641, type: !45)
!10178 = !DILocation(line: 641, column: 88, scope: !10172)
!10179 = !DILocalVariable(name: "end", arg: 4, scope: !10172, file: !3, line: 641, type: !45)
!10180 = !DILocation(line: 641, column: 99, scope: !10172)
!10181 = !DILocalVariable(name: "seq", scope: !10172, file: !3, line: 643, type: !204)
!10182 = !DILocation(line: 643, column: 12, scope: !10172)
!10183 = !DILocation(line: 647, column: 13, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10172, file: !3, line: 647, column: 2)
!10185 = !DILocation(line: 647, column: 22, scope: !10184)
!10186 = !DILocation(line: 647, column: 30, scope: !10184)
!10187 = !DILocation(line: 647, column: 11, scope: !10184)
!10188 = !DILocation(line: 647, column: 7, scope: !10184)
!10189 = !DILocation(line: 647, column: 37, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 647, column: 2)
!10191 = !DILocation(line: 647, column: 2, scope: !10184)
!10192 = !DILocation(line: 648, column: 7, scope: !10193)
!10193 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 648, column: 7)
!10194 = distinct !DILexicalBlock(scope: !10190, file: !3, line: 647, column: 59)
!10195 = !DILocation(line: 648, column: 12, scope: !10193)
!10196 = !DILocation(line: 648, column: 17, scope: !10193)
!10197 = !DILocation(line: 648, column: 7, scope: !10194)
!10198 = !DILocation(line: 649, column: 42, scope: !10199)
!10199 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 648, column: 35)
!10200 = !DILocation(line: 649, column: 49, scope: !10199)
!10201 = !DILocation(line: 649, column: 61, scope: !10199)
!10202 = !DILocation(line: 649, column: 82, scope: !10199)
!10203 = !DILocation(line: 649, column: 68, scope: !10199)
!10204 = !DILocation(line: 649, column: 54, scope: !10199)
!10205 = !DILocation(line: 650, column: 49, scope: !10199)
!10206 = !DILocation(line: 650, column: 66, scope: !10199)
!10207 = !DILocation(line: 650, column: 54, scope: !10199)
!10208 = !DILocation(line: 650, column: 42, scope: !10199)
!10209 = !DILocation(line: 649, column: 4, scope: !10199)
!10210 = !DILocation(line: 651, column: 3, scope: !10199)
!10211 = !DILocation(line: 652, column: 12, scope: !10212)
!10212 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 652, column: 12)
!10213 = !DILocation(line: 652, column: 12, scope: !10193)
!10214 = !DILocation(line: 653, column: 8, scope: !10215)
!10215 = distinct !DILexicalBlock(scope: !10216, file: !3, line: 653, column: 8)
!10216 = distinct !DILexicalBlock(scope: !10212, file: !3, line: 652, column: 65)
!10217 = !DILocation(line: 653, column: 13, scope: !10215)
!10218 = !DILocation(line: 653, column: 8, scope: !10216)
!10219 = !DILocalVariable(name: "startofs", scope: !10220, file: !3, line: 654, type: !45)
!10220 = distinct !DILexicalBlock(scope: !10215, file: !3, line: 653, column: 26)
!10221 = !DILocation(line: 654, column: 9, scope: !10220)
!10222 = !DILocation(line: 654, column: 20, scope: !10220)
!10223 = !DILocation(line: 654, column: 25, scope: !10220)
!10224 = !DILocalVariable(name: "endofs", scope: !10220, file: !3, line: 655, type: !45)
!10225 = !DILocation(line: 655, column: 9, scope: !10220)
!10226 = !DILocation(line: 655, column: 18, scope: !10220)
!10227 = !DILocation(line: 655, column: 23, scope: !10220)
!10228 = !DILocation(line: 656, column: 9, scope: !10229)
!10229 = distinct !DILexicalBlock(scope: !10220, file: !3, line: 656, column: 9)
!10230 = !DILocation(line: 656, column: 14, scope: !10229)
!10231 = !DILocation(line: 656, column: 25, scope: !10229)
!10232 = !DILocation(line: 656, column: 30, scope: !10229)
!10233 = !DILocation(line: 656, column: 23, scope: !10229)
!10234 = !DILocation(line: 656, column: 38, scope: !10229)
!10235 = !DILocation(line: 656, column: 36, scope: !10229)
!10236 = !DILocation(line: 656, column: 9, scope: !10220)
!10237 = !DILocation(line: 657, column: 17, scope: !10229)
!10238 = !DILocation(line: 657, column: 25, scope: !10229)
!10239 = !DILocation(line: 657, column: 30, scope: !10229)
!10240 = !DILocation(line: 657, column: 23, scope: !10229)
!10241 = !DILocation(line: 657, column: 15, scope: !10229)
!10242 = !DILocation(line: 657, column: 6, scope: !10229)
!10243 = !DILocation(line: 659, column: 9, scope: !10244)
!10244 = distinct !DILexicalBlock(scope: !10220, file: !3, line: 659, column: 9)
!10245 = !DILocation(line: 659, column: 14, scope: !10244)
!10246 = !DILocation(line: 659, column: 22, scope: !10244)
!10247 = !DILocation(line: 659, column: 27, scope: !10244)
!10248 = !DILocation(line: 659, column: 20, scope: !10244)
!10249 = !DILocation(line: 659, column: 33, scope: !10244)
!10250 = !DILocation(line: 659, column: 38, scope: !10244)
!10251 = !DILocation(line: 659, column: 31, scope: !10244)
!10252 = !DILocation(line: 659, column: 47, scope: !10244)
!10253 = !DILocation(line: 659, column: 45, scope: !10244)
!10254 = !DILocation(line: 659, column: 9, scope: !10220)
!10255 = !DILocation(line: 660, column: 15, scope: !10244)
!10256 = !DILocation(line: 660, column: 20, scope: !10244)
!10257 = !DILocation(line: 660, column: 28, scope: !10244)
!10258 = !DILocation(line: 660, column: 33, scope: !10244)
!10259 = !DILocation(line: 660, column: 26, scope: !10244)
!10260 = !DILocation(line: 660, column: 39, scope: !10244)
!10261 = !DILocation(line: 660, column: 37, scope: !10244)
!10262 = !DILocation(line: 660, column: 13, scope: !10244)
!10263 = !DILocation(line: 660, column: 6, scope: !10244)
!10264 = !DILocation(line: 662, column: 28, scope: !10220)
!10265 = !DILocation(line: 662, column: 35, scope: !10220)
!10266 = !DILocation(line: 662, column: 40, scope: !10220)
!10267 = !DILocation(line: 662, column: 53, scope: !10220)
!10268 = !DILocation(line: 662, column: 58, scope: !10220)
!10269 = !DILocation(line: 662, column: 66, scope: !10220)
!10270 = !DILocation(line: 662, column: 64, scope: !10220)
!10271 = !DILocation(line: 663, column: 28, scope: !10220)
!10272 = !DILocation(line: 663, column: 33, scope: !10220)
!10273 = !DILocation(line: 663, column: 41, scope: !10220)
!10274 = !DILocation(line: 663, column: 46, scope: !10220)
!10275 = !DILocation(line: 663, column: 39, scope: !10220)
!10276 = !DILocation(line: 663, column: 52, scope: !10220)
!10277 = !DILocation(line: 663, column: 50, scope: !10220)
!10278 = !DILocation(line: 663, column: 60, scope: !10220)
!10279 = !DILocation(line: 663, column: 71, scope: !10220)
!10280 = !DILocation(line: 663, column: 76, scope: !10220)
!10281 = !DILocation(line: 663, column: 69, scope: !10220)
!10282 = !DILocation(line: 662, column: 5, scope: !10220)
!10283 = !DILocation(line: 664, column: 4, scope: !10220)
!10284 = !DILocation(line: 665, column: 3, scope: !10216)
!10285 = !DILocation(line: 666, column: 2, scope: !10194)
!10286 = !DILocation(line: 647, column: 48, scope: !10190)
!10287 = !DILocation(line: 647, column: 53, scope: !10190)
!10288 = !DILocation(line: 647, column: 46, scope: !10190)
!10289 = !DILocation(line: 647, column: 2, scope: !10190)
!10290 = distinct !{!10290, !10191, !10291}
!10291 = !DILocation(line: 666, column: 2, scope: !10184)
!10292 = !DILocation(line: 667, column: 1, scope: !10172)
!10293 = distinct !DISubprogram(name: "metaseq_start", scope: !3, file: !3, line: 631, type: !7462, scopeLine: 632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10294 = !DILocalVariable(name: "metaseq", arg: 1, scope: !10293, file: !3, line: 631, type: !204)
!10295 = !DILocation(line: 631, column: 36, scope: !10293)
!10296 = !DILocation(line: 633, column: 9, scope: !10293)
!10297 = !DILocation(line: 633, column: 18, scope: !10293)
!10298 = !DILocation(line: 633, column: 26, scope: !10293)
!10299 = !DILocation(line: 633, column: 35, scope: !10293)
!10300 = !DILocation(line: 633, column: 24, scope: !10293)
!10301 = !DILocation(line: 633, column: 2, scope: !10293)
!10302 = distinct !DISubprogram(name: "metaseq_end", scope: !3, file: !3, line: 636, type: !7462, scopeLine: 637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10303 = !DILocalVariable(name: "metaseq", arg: 1, scope: !10302, file: !3, line: 636, type: !204)
!10304 = !DILocation(line: 636, column: 34, scope: !10302)
!10305 = !DILocation(line: 638, column: 9, scope: !10302)
!10306 = !DILocation(line: 638, column: 18, scope: !10302)
!10307 = !DILocation(line: 638, column: 26, scope: !10302)
!10308 = !DILocation(line: 638, column: 35, scope: !10302)
!10309 = !DILocation(line: 638, column: 24, scope: !10302)
!10310 = !DILocation(line: 638, column: 41, scope: !10302)
!10311 = !DILocation(line: 638, column: 50, scope: !10302)
!10312 = !DILocation(line: 638, column: 39, scope: !10302)
!10313 = !DILocation(line: 638, column: 2, scope: !10302)
!10314 = distinct !DISubprogram(name: "seq_proxy_get_fname", scope: !3, file: !3, line: 1376, type: !10315, scopeLine: 1377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10315 = !DISubroutineType(types: !10316)
!10316 = !{!742, !204, !45, !45, !498}
!10317 = !DILocalVariable(name: "seq", arg: 1, scope: !10314, file: !3, line: 1376, type: !204)
!10318 = !DILocation(line: 1376, column: 43, scope: !10314)
!10319 = !DILocalVariable(name: "cfra", arg: 2, scope: !10314, file: !3, line: 1376, type: !45)
!10320 = !DILocation(line: 1376, column: 52, scope: !10314)
!10321 = !DILocalVariable(name: "render_size", arg: 3, scope: !10314, file: !3, line: 1376, type: !45)
!10322 = !DILocation(line: 1376, column: 62, scope: !10314)
!10323 = !DILocalVariable(name: "name", arg: 4, scope: !10314, file: !3, line: 1376, type: !498)
!10324 = !DILocation(line: 1376, column: 81, scope: !10314)
!10325 = !DILocalVariable(name: "frameno", scope: !10314, file: !3, line: 1378, type: !45)
!10326 = !DILocation(line: 1378, column: 6, scope: !10314)
!10327 = !DILocalVariable(name: "dir", scope: !10314, file: !3, line: 1379, type: !5097)
!10328 = !DILocation(line: 1379, column: 7, scope: !10314)
!10329 = !DILocation(line: 1381, column: 7, scope: !10330)
!10330 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 1381, column: 6)
!10331 = !DILocation(line: 1381, column: 12, scope: !10330)
!10332 = !DILocation(line: 1381, column: 19, scope: !10330)
!10333 = !DILocation(line: 1381, column: 6, scope: !10314)
!10334 = !DILocation(line: 1382, column: 3, scope: !10335)
!10335 = distinct !DILexicalBlock(scope: !10330, file: !3, line: 1381, column: 26)
!10336 = !DILocation(line: 1393, column: 6, scope: !10337)
!10337 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 1393, column: 6)
!10338 = !DILocation(line: 1393, column: 11, scope: !10337)
!10339 = !DILocation(line: 1393, column: 16, scope: !10337)
!10340 = !DILocation(line: 1393, column: 6, scope: !10314)
!10341 = !DILocation(line: 1394, column: 15, scope: !10342)
!10342 = distinct !DILexicalBlock(scope: !10337, file: !3, line: 1393, column: 74)
!10343 = !DILocation(line: 1394, column: 20, scope: !10342)
!10344 = !DILocation(line: 1394, column: 25, scope: !10342)
!10345 = !DILocation(line: 1394, column: 32, scope: !10342)
!10346 = !DILocation(line: 1394, column: 39, scope: !10342)
!10347 = !DILocation(line: 1394, column: 3, scope: !10342)
!10348 = !DILocation(line: 1395, column: 2, scope: !10342)
!10349 = !DILocation(line: 1396, column: 11, scope: !10350)
!10350 = distinct !DILexicalBlock(scope: !10337, file: !3, line: 1396, column: 11)
!10351 = !DILocation(line: 1396, column: 16, scope: !10350)
!10352 = !DILocation(line: 1396, column: 21, scope: !10350)
!10353 = !DILocation(line: 1396, column: 11, scope: !10337)
!10354 = !DILocation(line: 1397, column: 16, scope: !10355)
!10355 = distinct !DILexicalBlock(scope: !10350, file: !3, line: 1396, column: 40)
!10356 = !DILocation(line: 1397, column: 51, scope: !10355)
!10357 = !DILocation(line: 1397, column: 56, scope: !10355)
!10358 = !DILocation(line: 1397, column: 63, scope: !10355)
!10359 = !DILocation(line: 1397, column: 3, scope: !10355)
!10360 = !DILocation(line: 1398, column: 2, scope: !10355)
!10361 = !DILocation(line: 1400, column: 3, scope: !10362)
!10362 = distinct !DILexicalBlock(scope: !10350, file: !3, line: 1399, column: 7)
!10363 = !DILocation(line: 1403, column: 6, scope: !10364)
!10364 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 1403, column: 6)
!10365 = !DILocation(line: 1403, column: 11, scope: !10364)
!10366 = !DILocation(line: 1403, column: 16, scope: !10364)
!10367 = !DILocation(line: 1403, column: 6, scope: !10314)
!10368 = !DILocation(line: 1404, column: 20, scope: !10369)
!10369 = distinct !DILexicalBlock(scope: !10364, file: !3, line: 1403, column: 45)
!10370 = !DILocation(line: 1405, column: 20, scope: !10369)
!10371 = !DILocation(line: 1405, column: 25, scope: !10369)
!10372 = !DILocation(line: 1405, column: 30, scope: !10369)
!10373 = !DILocation(line: 1405, column: 37, scope: !10369)
!10374 = !DILocation(line: 1405, column: 44, scope: !10369)
!10375 = !DILocation(line: 1404, column: 3, scope: !10369)
!10376 = !DILocation(line: 1406, column: 16, scope: !10369)
!10377 = !DILocation(line: 1406, column: 24, scope: !10369)
!10378 = !DILocation(line: 1406, column: 30, scope: !10369)
!10379 = !DILocation(line: 1406, column: 22, scope: !10369)
!10380 = !DILocation(line: 1406, column: 3, scope: !10369)
!10381 = !DILocation(line: 1408, column: 3, scope: !10369)
!10382 = !DILocation(line: 1413, column: 6, scope: !10383)
!10383 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 1413, column: 6)
!10384 = !DILocation(line: 1413, column: 11, scope: !10383)
!10385 = !DILocation(line: 1413, column: 16, scope: !10383)
!10386 = !DILocation(line: 1413, column: 6, scope: !10314)
!10387 = !DILocation(line: 1414, column: 16, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 1413, column: 35)
!10389 = !DILocation(line: 1414, column: 62, scope: !10388)
!10390 = !DILocation(line: 1414, column: 67, scope: !10388)
!10391 = !DILocation(line: 1415, column: 45, scope: !10388)
!10392 = !DILocation(line: 1415, column: 50, scope: !10388)
!10393 = !DILocation(line: 1415, column: 16, scope: !10388)
!10394 = !DILocation(line: 1415, column: 57, scope: !10388)
!10395 = !DILocation(line: 1414, column: 3, scope: !10388)
!10396 = !DILocation(line: 1416, column: 11, scope: !10388)
!10397 = !DILocation(line: 1417, column: 2, scope: !10388)
!10398 = !DILocation(line: 1419, column: 39, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !10383, file: !3, line: 1418, column: 7)
!10400 = !DILocation(line: 1419, column: 44, scope: !10399)
!10401 = !DILocation(line: 1419, column: 18, scope: !10399)
!10402 = !DILocation(line: 1419, column: 13, scope: !10399)
!10403 = !DILocation(line: 1419, column: 52, scope: !10399)
!10404 = !DILocation(line: 1419, column: 57, scope: !10399)
!10405 = !DILocation(line: 1419, column: 50, scope: !10399)
!10406 = !DILocation(line: 1419, column: 11, scope: !10399)
!10407 = !DILocation(line: 1420, column: 16, scope: !10399)
!10408 = !DILocation(line: 1420, column: 62, scope: !10399)
!10409 = !DILocation(line: 1420, column: 67, scope: !10399)
!10410 = !DILocation(line: 1420, column: 3, scope: !10399)
!10411 = !DILocation(line: 1423, column: 15, scope: !10314)
!10412 = !DILocation(line: 1423, column: 23, scope: !10314)
!10413 = !DILocation(line: 1423, column: 29, scope: !10314)
!10414 = !DILocation(line: 1423, column: 21, scope: !10314)
!10415 = !DILocation(line: 1423, column: 2, scope: !10314)
!10416 = !DILocation(line: 1424, column: 17, scope: !10314)
!10417 = !DILocation(line: 1424, column: 23, scope: !10314)
!10418 = !DILocation(line: 1424, column: 2, scope: !10314)
!10419 = !DILocation(line: 1426, column: 9, scope: !10314)
!10420 = !DILocation(line: 1426, column: 2, scope: !10314)
!10421 = !DILocation(line: 1428, column: 2, scope: !10314)
!10422 = !DILocation(line: 1429, column: 1, scope: !10314)
!10423 = distinct !DISubprogram(name: "color_balance_float_float", scope: !3, file: !3, line: 1788, type: !10424, scopeLine: 1789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10424 = !DISubroutineType(types: !10425)
!10425 = !{null, !291, !832, !832, !45, !45, !193}
!10426 = !DILocalVariable(name: "cb_", arg: 1, scope: !10423, file: !3, line: 1788, type: !291)
!10427 = !DILocation(line: 1788, column: 58, scope: !10423)
!10428 = !DILocalVariable(name: "rect_float", arg: 2, scope: !10423, file: !3, line: 1788, type: !832)
!10429 = !DILocation(line: 1788, column: 70, scope: !10423)
!10430 = !DILocalVariable(name: "mask_rect_float", arg: 3, scope: !10423, file: !3, line: 1788, type: !832)
!10431 = !DILocation(line: 1788, column: 89, scope: !10423)
!10432 = !DILocalVariable(name: "width", arg: 4, scope: !10423, file: !3, line: 1788, type: !45)
!10433 = !DILocation(line: 1788, column: 110, scope: !10423)
!10434 = !DILocalVariable(name: "height", arg: 5, scope: !10423, file: !3, line: 1788, type: !45)
!10435 = !DILocation(line: 1788, column: 121, scope: !10423)
!10436 = !DILocalVariable(name: "mul", arg: 6, scope: !10423, file: !3, line: 1788, type: !193)
!10437 = !DILocation(line: 1788, column: 135, scope: !10423)
!10438 = !DILocalVariable(name: "p", scope: !10423, file: !3, line: 1790, type: !832)
!10439 = !DILocation(line: 1790, column: 9, scope: !10423)
!10440 = !DILocation(line: 1790, column: 13, scope: !10423)
!10441 = !DILocalVariable(name: "e", scope: !10423, file: !3, line: 1791, type: !2969)
!10442 = !DILocation(line: 1791, column: 15, scope: !10423)
!10443 = !DILocation(line: 1791, column: 19, scope: !10423)
!10444 = !DILocation(line: 1791, column: 32, scope: !10423)
!10445 = !DILocation(line: 1791, column: 38, scope: !10423)
!10446 = !DILocation(line: 1791, column: 44, scope: !10423)
!10447 = !DILocation(line: 1791, column: 42, scope: !10423)
!10448 = !DILocation(line: 1791, column: 30, scope: !10423)
!10449 = !DILocalVariable(name: "m", scope: !10423, file: !3, line: 1792, type: !2969)
!10450 = !DILocation(line: 1792, column: 15, scope: !10423)
!10451 = !DILocation(line: 1792, column: 19, scope: !10423)
!10452 = !DILocalVariable(name: "cb", scope: !10423, file: !3, line: 1793, type: !292)
!10453 = !DILocation(line: 1793, column: 20, scope: !10423)
!10454 = !DILocation(line: 1793, column: 33, scope: !10423)
!10455 = !DILocation(line: 1793, column: 25, scope: !10423)
!10456 = !DILocation(line: 1795, column: 2, scope: !10423)
!10457 = !DILocation(line: 1795, column: 9, scope: !10423)
!10458 = !DILocation(line: 1795, column: 13, scope: !10423)
!10459 = !DILocation(line: 1795, column: 11, scope: !10423)
!10460 = !DILocalVariable(name: "c", scope: !10461, file: !3, line: 1796, type: !45)
!10461 = distinct !DILexicalBlock(scope: !10423, file: !3, line: 1795, column: 16)
!10462 = !DILocation(line: 1796, column: 7, scope: !10461)
!10463 = !DILocation(line: 1797, column: 10, scope: !10464)
!10464 = distinct !DILexicalBlock(scope: !10461, file: !3, line: 1797, column: 3)
!10465 = !DILocation(line: 1797, column: 8, scope: !10464)
!10466 = !DILocation(line: 1797, column: 15, scope: !10467)
!10467 = distinct !DILexicalBlock(scope: !10464, file: !3, line: 1797, column: 3)
!10468 = !DILocation(line: 1797, column: 17, scope: !10467)
!10469 = !DILocation(line: 1797, column: 3, scope: !10464)
!10470 = !DILocalVariable(name: "t", scope: !10471, file: !3, line: 1798, type: !193)
!10471 = distinct !DILexicalBlock(scope: !10467, file: !3, line: 1797, column: 27)
!10472 = !DILocation(line: 1798, column: 10, scope: !10471)
!10473 = !DILocation(line: 1798, column: 31, scope: !10471)
!10474 = !DILocation(line: 1798, column: 33, scope: !10471)
!10475 = !DILocation(line: 1798, column: 40, scope: !10471)
!10476 = !DILocation(line: 1798, column: 45, scope: !10471)
!10477 = !DILocation(line: 1798, column: 37, scope: !10471)
!10478 = !DILocation(line: 1798, column: 52, scope: !10471)
!10479 = !DILocation(line: 1798, column: 57, scope: !10471)
!10480 = !DILocation(line: 1798, column: 49, scope: !10471)
!10481 = !DILocation(line: 1798, column: 64, scope: !10471)
!10482 = !DILocation(line: 1798, column: 70, scope: !10471)
!10483 = !DILocation(line: 1798, column: 61, scope: !10471)
!10484 = !DILocation(line: 1798, column: 74, scope: !10471)
!10485 = !DILocation(line: 1798, column: 14, scope: !10471)
!10486 = !DILocation(line: 1800, column: 8, scope: !10487)
!10487 = distinct !DILexicalBlock(scope: !10471, file: !3, line: 1800, column: 8)
!10488 = !DILocation(line: 1800, column: 8, scope: !10471)
!10489 = !DILocation(line: 1801, column: 12, scope: !10487)
!10490 = !DILocation(line: 1801, column: 14, scope: !10487)
!10491 = !DILocation(line: 1801, column: 27, scope: !10487)
!10492 = !DILocation(line: 1801, column: 29, scope: !10487)
!10493 = !DILocation(line: 1801, column: 25, scope: !10487)
!10494 = !DILocation(line: 1801, column: 17, scope: !10487)
!10495 = !DILocation(line: 1801, column: 35, scope: !10487)
!10496 = !DILocation(line: 1801, column: 39, scope: !10487)
!10497 = !DILocation(line: 1801, column: 41, scope: !10487)
!10498 = !DILocation(line: 1801, column: 37, scope: !10487)
!10499 = !DILocation(line: 1801, column: 33, scope: !10487)
!10500 = !DILocation(line: 1801, column: 5, scope: !10487)
!10501 = !DILocation(line: 1801, column: 7, scope: !10487)
!10502 = !DILocation(line: 1801, column: 10, scope: !10487)
!10503 = !DILocation(line: 1803, column: 12, scope: !10487)
!10504 = !DILocation(line: 1803, column: 5, scope: !10487)
!10505 = !DILocation(line: 1803, column: 7, scope: !10487)
!10506 = !DILocation(line: 1803, column: 10, scope: !10487)
!10507 = !DILocation(line: 1804, column: 3, scope: !10471)
!10508 = !DILocation(line: 1797, column: 23, scope: !10467)
!10509 = !DILocation(line: 1797, column: 3, scope: !10467)
!10510 = distinct !{!10510, !10469, !10511}
!10511 = !DILocation(line: 1804, column: 3, scope: !10464)
!10512 = !DILocation(line: 1806, column: 5, scope: !10461)
!10513 = !DILocation(line: 1807, column: 7, scope: !10514)
!10514 = distinct !DILexicalBlock(scope: !10461, file: !3, line: 1807, column: 7)
!10515 = !DILocation(line: 1807, column: 7, scope: !10461)
!10516 = !DILocation(line: 1808, column: 6, scope: !10514)
!10517 = !DILocation(line: 1808, column: 4, scope: !10514)
!10518 = distinct !{!10518, !10456, !10519}
!10519 = !DILocation(line: 1809, column: 2, scope: !10423)
!10520 = !DILocation(line: 1810, column: 1, scope: !10423)
!10521 = distinct !DISubprogram(name: "color_balance_byte_float", scope: !3, file: !3, line: 1744, type: !10522, scopeLine: 1745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10522 = !DISubroutineType(types: !10523)
!10523 = !{null, !291, !1765, !832, !1765, !45, !45, !193}
!10524 = !DILocalVariable(name: "cb_", arg: 1, scope: !10521, file: !3, line: 1744, type: !291)
!10525 = !DILocation(line: 1744, column: 57, scope: !10521)
!10526 = !DILocalVariable(name: "rect", arg: 2, scope: !10521, file: !3, line: 1744, type: !1765)
!10527 = !DILocation(line: 1744, column: 77, scope: !10521)
!10528 = !DILocalVariable(name: "rect_float", arg: 3, scope: !10521, file: !3, line: 1744, type: !832)
!10529 = !DILocation(line: 1744, column: 90, scope: !10521)
!10530 = !DILocalVariable(name: "mask_rect", arg: 4, scope: !10521, file: !3, line: 1744, type: !1765)
!10531 = !DILocation(line: 1744, column: 117, scope: !10521)
!10532 = !DILocalVariable(name: "width", arg: 5, scope: !10521, file: !3, line: 1744, type: !45)
!10533 = !DILocation(line: 1744, column: 132, scope: !10521)
!10534 = !DILocalVariable(name: "height", arg: 6, scope: !10521, file: !3, line: 1744, type: !45)
!10535 = !DILocation(line: 1744, column: 143, scope: !10521)
!10536 = !DILocalVariable(name: "mul", arg: 7, scope: !10521, file: !3, line: 1744, type: !193)
!10537 = !DILocation(line: 1744, column: 157, scope: !10521)
!10538 = !DILocalVariable(name: "cb_tab", scope: !10521, file: !3, line: 1746, type: !10539)
!10539 = !DICompositeType(tag: DW_TAG_array_type, baseType: !193, size: 32768, elements: !10540)
!10540 = !{!512, !253}
!10541 = !DILocation(line: 1746, column: 8, scope: !10521)
!10542 = !DILocalVariable(name: "c", scope: !10521, file: !3, line: 1747, type: !45)
!10543 = !DILocation(line: 1747, column: 6, scope: !10521)
!10544 = !DILocalVariable(name: "i", scope: !10521, file: !3, line: 1747, type: !45)
!10545 = !DILocation(line: 1747, column: 9, scope: !10521)
!10546 = !DILocalVariable(name: "p", scope: !10521, file: !3, line: 1748, type: !1765)
!10547 = !DILocation(line: 1748, column: 17, scope: !10521)
!10548 = !DILocation(line: 1748, column: 21, scope: !10521)
!10549 = !DILocalVariable(name: "e", scope: !10521, file: !3, line: 1749, type: !1765)
!10550 = !DILocation(line: 1749, column: 17, scope: !10521)
!10551 = !DILocation(line: 1749, column: 21, scope: !10521)
!10552 = !DILocation(line: 1749, column: 25, scope: !10521)
!10553 = !DILocation(line: 1749, column: 31, scope: !10521)
!10554 = !DILocation(line: 1749, column: 37, scope: !10521)
!10555 = !DILocation(line: 1749, column: 35, scope: !10521)
!10556 = !DILocation(line: 1749, column: 23, scope: !10521)
!10557 = !DILocalVariable(name: "m", scope: !10521, file: !3, line: 1750, type: !1765)
!10558 = !DILocation(line: 1750, column: 17, scope: !10521)
!10559 = !DILocation(line: 1750, column: 21, scope: !10521)
!10560 = !DILocalVariable(name: "o", scope: !10521, file: !3, line: 1751, type: !832)
!10561 = !DILocation(line: 1751, column: 9, scope: !10521)
!10562 = !DILocalVariable(name: "cb", scope: !10521, file: !3, line: 1752, type: !292)
!10563 = !DILocation(line: 1752, column: 20, scope: !10521)
!10564 = !DILocation(line: 1754, column: 6, scope: !10521)
!10565 = !DILocation(line: 1754, column: 4, scope: !10521)
!10566 = !DILocation(line: 1756, column: 15, scope: !10521)
!10567 = !DILocation(line: 1756, column: 7, scope: !10521)
!10568 = !DILocation(line: 1758, column: 9, scope: !10569)
!10569 = distinct !DILexicalBlock(scope: !10521, file: !3, line: 1758, column: 2)
!10570 = !DILocation(line: 1758, column: 7, scope: !10569)
!10571 = !DILocation(line: 1758, column: 14, scope: !10572)
!10572 = distinct !DILexicalBlock(scope: !10569, file: !3, line: 1758, column: 2)
!10573 = !DILocation(line: 1758, column: 16, scope: !10572)
!10574 = !DILocation(line: 1758, column: 2, scope: !10569)
!10575 = !DILocation(line: 1759, column: 26, scope: !10576)
!10576 = distinct !DILexicalBlock(scope: !10572, file: !3, line: 1758, column: 26)
!10577 = !DILocation(line: 1759, column: 31, scope: !10576)
!10578 = !DILocation(line: 1759, column: 23, scope: !10576)
!10579 = !DILocation(line: 1759, column: 38, scope: !10576)
!10580 = !DILocation(line: 1759, column: 43, scope: !10576)
!10581 = !DILocation(line: 1759, column: 35, scope: !10576)
!10582 = !DILocation(line: 1759, column: 50, scope: !10576)
!10583 = !DILocation(line: 1759, column: 56, scope: !10576)
!10584 = !DILocation(line: 1759, column: 47, scope: !10576)
!10585 = !DILocation(line: 1759, column: 67, scope: !10576)
!10586 = !DILocation(line: 1759, column: 60, scope: !10576)
!10587 = !DILocation(line: 1759, column: 71, scope: !10576)
!10588 = !DILocation(line: 1759, column: 3, scope: !10576)
!10589 = !DILocation(line: 1760, column: 2, scope: !10576)
!10590 = !DILocation(line: 1758, column: 22, scope: !10572)
!10591 = !DILocation(line: 1758, column: 2, scope: !10572)
!10592 = distinct !{!10592, !10574, !10593}
!10593 = !DILocation(line: 1760, column: 2, scope: !10569)
!10594 = !DILocation(line: 1762, column: 9, scope: !10595)
!10595 = distinct !DILexicalBlock(scope: !10521, file: !3, line: 1762, column: 2)
!10596 = !DILocation(line: 1762, column: 7, scope: !10595)
!10597 = !DILocation(line: 1762, column: 14, scope: !10598)
!10598 = distinct !DILexicalBlock(scope: !10595, file: !3, line: 1762, column: 2)
!10599 = !DILocation(line: 1762, column: 16, scope: !10598)
!10600 = !DILocation(line: 1762, column: 2, scope: !10595)
!10601 = !DILocation(line: 1763, column: 26, scope: !10602)
!10602 = distinct !DILexicalBlock(scope: !10598, file: !3, line: 1762, column: 28)
!10603 = !DILocation(line: 1763, column: 19, scope: !10602)
!10604 = !DILocation(line: 1763, column: 29, scope: !10602)
!10605 = !DILocation(line: 1763, column: 3, scope: !10602)
!10606 = !DILocation(line: 1763, column: 13, scope: !10602)
!10607 = !DILocation(line: 1763, column: 16, scope: !10602)
!10608 = !DILocation(line: 1764, column: 2, scope: !10602)
!10609 = !DILocation(line: 1762, column: 24, scope: !10598)
!10610 = !DILocation(line: 1762, column: 2, scope: !10598)
!10611 = distinct !{!10611, !10600, !10612}
!10612 = !DILocation(line: 1764, column: 2, scope: !10595)
!10613 = !DILocation(line: 1766, column: 2, scope: !10521)
!10614 = !DILocation(line: 1766, column: 9, scope: !10521)
!10615 = !DILocation(line: 1766, column: 13, scope: !10521)
!10616 = !DILocation(line: 1766, column: 11, scope: !10521)
!10617 = !DILocation(line: 1767, column: 7, scope: !10618)
!10618 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 1767, column: 7)
!10619 = distinct !DILexicalBlock(scope: !10521, file: !3, line: 1766, column: 16)
!10620 = !DILocation(line: 1767, column: 7, scope: !10619)
!10621 = !DILocalVariable(name: "t", scope: !10622, file: !3, line: 1768, type: !296)
!10622 = distinct !DILexicalBlock(scope: !10618, file: !3, line: 1767, column: 10)
!10623 = !DILocation(line: 1768, column: 10, scope: !10622)
!10624 = !DILocation(line: 1768, column: 17, scope: !10622)
!10625 = !DILocation(line: 1768, column: 18, scope: !10622)
!10626 = !DILocation(line: 1768, column: 23, scope: !10622)
!10627 = !DILocation(line: 1768, column: 33, scope: !10622)
!10628 = !DILocation(line: 1768, column: 38, scope: !10622)
!10629 = !DILocation(line: 1768, column: 48, scope: !10622)
!10630 = !DILocation(line: 1768, column: 53, scope: !10622)
!10631 = !DILocation(line: 1770, column: 11, scope: !10622)
!10632 = !DILocation(line: 1770, column: 26, scope: !10622)
!10633 = !DILocation(line: 1770, column: 24, scope: !10622)
!10634 = !DILocation(line: 1770, column: 16, scope: !10622)
!10635 = !DILocation(line: 1770, column: 34, scope: !10622)
!10636 = !DILocation(line: 1770, column: 41, scope: !10622)
!10637 = !DILocation(line: 1770, column: 51, scope: !10622)
!10638 = !DILocation(line: 1770, column: 39, scope: !10622)
!10639 = !DILocation(line: 1770, column: 32, scope: !10622)
!10640 = !DILocation(line: 1770, column: 4, scope: !10622)
!10641 = !DILocation(line: 1770, column: 9, scope: !10622)
!10642 = !DILocation(line: 1771, column: 11, scope: !10622)
!10643 = !DILocation(line: 1771, column: 26, scope: !10622)
!10644 = !DILocation(line: 1771, column: 24, scope: !10622)
!10645 = !DILocation(line: 1771, column: 16, scope: !10622)
!10646 = !DILocation(line: 1771, column: 34, scope: !10622)
!10647 = !DILocation(line: 1771, column: 41, scope: !10622)
!10648 = !DILocation(line: 1771, column: 51, scope: !10622)
!10649 = !DILocation(line: 1771, column: 39, scope: !10622)
!10650 = !DILocation(line: 1771, column: 32, scope: !10622)
!10651 = !DILocation(line: 1771, column: 4, scope: !10622)
!10652 = !DILocation(line: 1771, column: 9, scope: !10622)
!10653 = !DILocation(line: 1772, column: 11, scope: !10622)
!10654 = !DILocation(line: 1772, column: 26, scope: !10622)
!10655 = !DILocation(line: 1772, column: 24, scope: !10622)
!10656 = !DILocation(line: 1772, column: 16, scope: !10622)
!10657 = !DILocation(line: 1772, column: 34, scope: !10622)
!10658 = !DILocation(line: 1772, column: 41, scope: !10622)
!10659 = !DILocation(line: 1772, column: 51, scope: !10622)
!10660 = !DILocation(line: 1772, column: 39, scope: !10622)
!10661 = !DILocation(line: 1772, column: 32, scope: !10622)
!10662 = !DILocation(line: 1772, column: 4, scope: !10622)
!10663 = !DILocation(line: 1772, column: 9, scope: !10622)
!10664 = !DILocation(line: 1774, column: 6, scope: !10622)
!10665 = !DILocation(line: 1775, column: 3, scope: !10622)
!10666 = !DILocation(line: 1777, column: 11, scope: !10667)
!10667 = distinct !DILexicalBlock(scope: !10618, file: !3, line: 1776, column: 8)
!10668 = !DILocation(line: 1777, column: 21, scope: !10667)
!10669 = !DILocation(line: 1777, column: 4, scope: !10667)
!10670 = !DILocation(line: 1777, column: 9, scope: !10667)
!10671 = !DILocation(line: 1778, column: 11, scope: !10667)
!10672 = !DILocation(line: 1778, column: 21, scope: !10667)
!10673 = !DILocation(line: 1778, column: 4, scope: !10667)
!10674 = !DILocation(line: 1778, column: 9, scope: !10667)
!10675 = !DILocation(line: 1779, column: 11, scope: !10667)
!10676 = !DILocation(line: 1779, column: 21, scope: !10667)
!10677 = !DILocation(line: 1779, column: 4, scope: !10667)
!10678 = !DILocation(line: 1779, column: 9, scope: !10667)
!10679 = !DILocation(line: 1782, column: 10, scope: !10619)
!10680 = !DILocation(line: 1782, column: 20, scope: !10619)
!10681 = !DILocation(line: 1782, column: 3, scope: !10619)
!10682 = !DILocation(line: 1782, column: 8, scope: !10619)
!10683 = !DILocation(line: 1784, column: 5, scope: !10619)
!10684 = !DILocation(line: 1784, column: 13, scope: !10619)
!10685 = distinct !{!10685, !10613, !10686}
!10686 = !DILocation(line: 1785, column: 2, scope: !10521)
!10687 = !DILocation(line: 1786, column: 1, scope: !10521)
!10688 = distinct !DISubprogram(name: "color_balance_byte_byte", scope: !3, file: !3, line: 1709, type: !10689, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10689 = !DISubroutineType(types: !10690)
!10690 = !{null, !291, !1765, !1765, !45, !45, !193}
!10691 = !DILocalVariable(name: "cb_", arg: 1, scope: !10688, file: !3, line: 1709, type: !291)
!10692 = !DILocation(line: 1709, column: 56, scope: !10688)
!10693 = !DILocalVariable(name: "rect", arg: 2, scope: !10688, file: !3, line: 1709, type: !1765)
!10694 = !DILocation(line: 1709, column: 76, scope: !10688)
!10695 = !DILocalVariable(name: "mask_rect", arg: 3, scope: !10688, file: !3, line: 1709, type: !1765)
!10696 = !DILocation(line: 1709, column: 97, scope: !10688)
!10697 = !DILocalVariable(name: "width", arg: 4, scope: !10688, file: !3, line: 1709, type: !45)
!10698 = !DILocation(line: 1709, column: 112, scope: !10688)
!10699 = !DILocalVariable(name: "height", arg: 5, scope: !10688, file: !3, line: 1709, type: !45)
!10700 = !DILocation(line: 1709, column: 123, scope: !10688)
!10701 = !DILocalVariable(name: "mul", arg: 6, scope: !10688, file: !3, line: 1709, type: !193)
!10702 = !DILocation(line: 1709, column: 137, scope: !10688)
!10703 = !DILocalVariable(name: "cp", scope: !10688, file: !3, line: 1712, type: !1765)
!10704 = !DILocation(line: 1712, column: 17, scope: !10688)
!10705 = !DILocation(line: 1712, column: 22, scope: !10688)
!10706 = !DILocalVariable(name: "e", scope: !10688, file: !3, line: 1713, type: !1765)
!10707 = !DILocation(line: 1713, column: 17, scope: !10688)
!10708 = !DILocation(line: 1713, column: 21, scope: !10688)
!10709 = !DILocation(line: 1713, column: 26, scope: !10688)
!10710 = !DILocation(line: 1713, column: 32, scope: !10688)
!10711 = !DILocation(line: 1713, column: 38, scope: !10688)
!10712 = !DILocation(line: 1713, column: 36, scope: !10688)
!10713 = !DILocation(line: 1713, column: 24, scope: !10688)
!10714 = !DILocalVariable(name: "m", scope: !10688, file: !3, line: 1714, type: !1765)
!10715 = !DILocation(line: 1714, column: 17, scope: !10688)
!10716 = !DILocation(line: 1714, column: 21, scope: !10688)
!10717 = !DILocalVariable(name: "cb", scope: !10688, file: !3, line: 1716, type: !292)
!10718 = !DILocation(line: 1716, column: 20, scope: !10688)
!10719 = !DILocation(line: 1716, column: 33, scope: !10688)
!10720 = !DILocation(line: 1716, column: 25, scope: !10688)
!10721 = !DILocation(line: 1718, column: 2, scope: !10688)
!10722 = !DILocation(line: 1718, column: 9, scope: !10688)
!10723 = !DILocation(line: 1718, column: 14, scope: !10688)
!10724 = !DILocation(line: 1718, column: 12, scope: !10688)
!10725 = !DILocalVariable(name: "p", scope: !10726, file: !3, line: 1719, type: !510)
!10726 = distinct !DILexicalBlock(scope: !10688, file: !3, line: 1718, column: 17)
!10727 = !DILocation(line: 1719, column: 9, scope: !10726)
!10728 = !DILocalVariable(name: "c", scope: !10726, file: !3, line: 1720, type: !45)
!10729 = !DILocation(line: 1720, column: 7, scope: !10726)
!10730 = !DILocation(line: 1722, column: 34, scope: !10726)
!10731 = !DILocation(line: 1722, column: 37, scope: !10726)
!10732 = !DILocation(line: 1722, column: 3, scope: !10726)
!10733 = !DILocation(line: 1724, column: 10, scope: !10734)
!10734 = distinct !DILexicalBlock(scope: !10726, file: !3, line: 1724, column: 3)
!10735 = !DILocation(line: 1724, column: 8, scope: !10734)
!10736 = !DILocation(line: 1724, column: 15, scope: !10737)
!10737 = distinct !DILexicalBlock(scope: !10734, file: !3, line: 1724, column: 3)
!10738 = !DILocation(line: 1724, column: 17, scope: !10737)
!10739 = !DILocation(line: 1724, column: 3, scope: !10734)
!10740 = !DILocalVariable(name: "t", scope: !10741, file: !3, line: 1725, type: !193)
!10741 = distinct !DILexicalBlock(scope: !10737, file: !3, line: 1724, column: 27)
!10742 = !DILocation(line: 1725, column: 10, scope: !10741)
!10743 = !DILocation(line: 1725, column: 33, scope: !10741)
!10744 = !DILocation(line: 1725, column: 31, scope: !10741)
!10745 = !DILocation(line: 1725, column: 40, scope: !10741)
!10746 = !DILocation(line: 1725, column: 45, scope: !10741)
!10747 = !DILocation(line: 1725, column: 37, scope: !10741)
!10748 = !DILocation(line: 1725, column: 52, scope: !10741)
!10749 = !DILocation(line: 1725, column: 57, scope: !10741)
!10750 = !DILocation(line: 1725, column: 49, scope: !10741)
!10751 = !DILocation(line: 1725, column: 64, scope: !10741)
!10752 = !DILocation(line: 1725, column: 70, scope: !10741)
!10753 = !DILocation(line: 1725, column: 61, scope: !10741)
!10754 = !DILocation(line: 1725, column: 74, scope: !10741)
!10755 = !DILocation(line: 1725, column: 14, scope: !10741)
!10756 = !DILocation(line: 1727, column: 8, scope: !10757)
!10757 = distinct !DILexicalBlock(scope: !10741, file: !3, line: 1727, column: 8)
!10758 = !DILocation(line: 1727, column: 8, scope: !10741)
!10759 = !DILocalVariable(name: "m_normal", scope: !10760, file: !3, line: 1728, type: !193)
!10760 = distinct !DILexicalBlock(scope: !10757, file: !3, line: 1727, column: 11)
!10761 = !DILocation(line: 1728, column: 11, scope: !10760)
!10762 = !DILocation(line: 1728, column: 30, scope: !10760)
!10763 = !DILocation(line: 1728, column: 32, scope: !10760)
!10764 = !DILocation(line: 1728, column: 22, scope: !10760)
!10765 = !DILocation(line: 1728, column: 35, scope: !10760)
!10766 = !DILocation(line: 1730, column: 14, scope: !10760)
!10767 = !DILocation(line: 1730, column: 12, scope: !10760)
!10768 = !DILocation(line: 1730, column: 27, scope: !10760)
!10769 = !DILocation(line: 1730, column: 25, scope: !10760)
!10770 = !DILocation(line: 1730, column: 17, scope: !10760)
!10771 = !DILocation(line: 1730, column: 39, scope: !10760)
!10772 = !DILocation(line: 1730, column: 43, scope: !10760)
!10773 = !DILocation(line: 1730, column: 41, scope: !10760)
!10774 = !DILocation(line: 1730, column: 37, scope: !10760)
!10775 = !DILocation(line: 1730, column: 7, scope: !10760)
!10776 = !DILocation(line: 1730, column: 5, scope: !10760)
!10777 = !DILocation(line: 1730, column: 10, scope: !10760)
!10778 = !DILocation(line: 1731, column: 4, scope: !10760)
!10779 = !DILocation(line: 1733, column: 12, scope: !10757)
!10780 = !DILocation(line: 1733, column: 7, scope: !10757)
!10781 = !DILocation(line: 1733, column: 5, scope: !10757)
!10782 = !DILocation(line: 1733, column: 10, scope: !10757)
!10783 = !DILocation(line: 1734, column: 3, scope: !10741)
!10784 = !DILocation(line: 1724, column: 23, scope: !10737)
!10785 = !DILocation(line: 1724, column: 3, scope: !10737)
!10786 = distinct !{!10786, !10739, !10787}
!10787 = !DILocation(line: 1734, column: 3, scope: !10734)
!10788 = !DILocation(line: 1736, column: 34, scope: !10726)
!10789 = !DILocation(line: 1736, column: 38, scope: !10726)
!10790 = !DILocation(line: 1736, column: 3, scope: !10726)
!10791 = !DILocation(line: 1738, column: 6, scope: !10726)
!10792 = !DILocation(line: 1739, column: 7, scope: !10793)
!10793 = distinct !DILexicalBlock(scope: !10726, file: !3, line: 1739, column: 7)
!10794 = !DILocation(line: 1739, column: 7, scope: !10726)
!10795 = !DILocation(line: 1740, column: 6, scope: !10793)
!10796 = !DILocation(line: 1740, column: 4, scope: !10793)
!10797 = distinct !{!10797, !10721, !10798}
!10798 = !DILocation(line: 1741, column: 2, scope: !10688)
!10799 = !DILocation(line: 1742, column: 1, scope: !10688)
!10800 = distinct !DISubprogram(name: "calc_cb", scope: !3, file: !3, line: 1640, type: !10801, scopeLine: 1641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10801 = !DISubroutineType(types: !10802)
!10802 = !{!292, !291}
!10803 = !DILocalVariable(name: "cb_", arg: 1, scope: !10800, file: !3, line: 1640, type: !291)
!10804 = !DILocation(line: 1640, column: 53, scope: !10800)
!10805 = !DILocalVariable(name: "cb", scope: !10800, file: !3, line: 1642, type: !292)
!10806 = !DILocation(line: 1642, column: 20, scope: !10800)
!10807 = !DILocation(line: 1642, column: 26, scope: !10800)
!10808 = !DILocation(line: 1642, column: 25, scope: !10800)
!10809 = !DILocalVariable(name: "c", scope: !10800, file: !3, line: 1643, type: !45)
!10810 = !DILocation(line: 1643, column: 6, scope: !10800)
!10811 = !DILocation(line: 1645, column: 9, scope: !10812)
!10812 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 1645, column: 2)
!10813 = !DILocation(line: 1645, column: 7, scope: !10812)
!10814 = !DILocation(line: 1645, column: 14, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10812, file: !3, line: 1645, column: 2)
!10816 = !DILocation(line: 1645, column: 16, scope: !10815)
!10817 = !DILocation(line: 1645, column: 2, scope: !10812)
!10818 = !DILocation(line: 1646, column: 26, scope: !10819)
!10819 = distinct !DILexicalBlock(scope: !10815, file: !3, line: 1645, column: 26)
!10820 = !DILocation(line: 1646, column: 31, scope: !10819)
!10821 = !DILocation(line: 1646, column: 23, scope: !10819)
!10822 = !DILocation(line: 1646, column: 21, scope: !10819)
!10823 = !DILocation(line: 1646, column: 6, scope: !10819)
!10824 = !DILocation(line: 1646, column: 11, scope: !10819)
!10825 = !DILocation(line: 1646, column: 3, scope: !10819)
!10826 = !DILocation(line: 1646, column: 14, scope: !10819)
!10827 = !DILocation(line: 1647, column: 2, scope: !10819)
!10828 = !DILocation(line: 1645, column: 22, scope: !10815)
!10829 = !DILocation(line: 1645, column: 2, scope: !10815)
!10830 = distinct !{!10830, !10817, !10831}
!10831 = !DILocation(line: 1647, column: 2, scope: !10812)
!10832 = !DILocation(line: 1649, column: 9, scope: !10833)
!10833 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 1649, column: 6)
!10834 = !DILocation(line: 1649, column: 14, scope: !10833)
!10835 = !DILocation(line: 1649, column: 6, scope: !10800)
!10836 = !DILocation(line: 1650, column: 10, scope: !10837)
!10837 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 1650, column: 3)
!10838 = distinct !DILexicalBlock(scope: !10833, file: !3, line: 1649, column: 48)
!10839 = !DILocation(line: 1650, column: 8, scope: !10837)
!10840 = !DILocation(line: 1650, column: 15, scope: !10841)
!10841 = distinct !DILexicalBlock(scope: !10837, file: !3, line: 1650, column: 3)
!10842 = !DILocation(line: 1650, column: 17, scope: !10841)
!10843 = !DILocation(line: 1650, column: 3, scope: !10837)
!10844 = !DILocation(line: 1653, column: 11, scope: !10845)
!10845 = distinct !DILexicalBlock(scope: !10846, file: !3, line: 1653, column: 8)
!10846 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 1650, column: 27)
!10847 = !DILocation(line: 1653, column: 16, scope: !10845)
!10848 = !DILocation(line: 1653, column: 8, scope: !10845)
!10849 = !DILocation(line: 1653, column: 19, scope: !10845)
!10850 = !DILocation(line: 1653, column: 8, scope: !10846)
!10851 = !DILocation(line: 1654, column: 25, scope: !10845)
!10852 = !DILocation(line: 1654, column: 30, scope: !10845)
!10853 = !DILocation(line: 1654, column: 22, scope: !10845)
!10854 = !DILocation(line: 1654, column: 33, scope: !10845)
!10855 = !DILocation(line: 1654, column: 18, scope: !10845)
!10856 = !DILocation(line: 1654, column: 46, scope: !10845)
!10857 = !DILocation(line: 1654, column: 8, scope: !10845)
!10858 = !DILocation(line: 1654, column: 13, scope: !10845)
!10859 = !DILocation(line: 1654, column: 5, scope: !10845)
!10860 = !DILocation(line: 1654, column: 16, scope: !10845)
!10861 = !DILocation(line: 1656, column: 27, scope: !10846)
!10862 = !DILocation(line: 1656, column: 32, scope: !10846)
!10863 = !DILocation(line: 1656, column: 24, scope: !10846)
!10864 = !DILocation(line: 1656, column: 22, scope: !10846)
!10865 = !DILocation(line: 1656, column: 7, scope: !10846)
!10866 = !DILocation(line: 1656, column: 12, scope: !10846)
!10867 = !DILocation(line: 1656, column: 4, scope: !10846)
!10868 = !DILocation(line: 1656, column: 15, scope: !10846)
!10869 = !DILocation(line: 1657, column: 3, scope: !10846)
!10870 = !DILocation(line: 1650, column: 23, scope: !10841)
!10871 = !DILocation(line: 1650, column: 3, scope: !10841)
!10872 = distinct !{!10872, !10843, !10873}
!10873 = !DILocation(line: 1657, column: 3, scope: !10837)
!10874 = !DILocation(line: 1658, column: 2, scope: !10838)
!10875 = !DILocation(line: 1660, column: 9, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 1660, column: 6)
!10877 = !DILocation(line: 1660, column: 14, scope: !10876)
!10878 = !DILocation(line: 1660, column: 6, scope: !10800)
!10879 = !DILocation(line: 1661, column: 10, scope: !10880)
!10880 = distinct !DILexicalBlock(scope: !10881, file: !3, line: 1661, column: 3)
!10881 = distinct !DILexicalBlock(scope: !10876, file: !3, line: 1660, column: 48)
!10882 = !DILocation(line: 1661, column: 8, scope: !10880)
!10883 = !DILocation(line: 1661, column: 15, scope: !10884)
!10884 = distinct !DILexicalBlock(scope: !10880, file: !3, line: 1661, column: 3)
!10885 = !DILocation(line: 1661, column: 17, scope: !10884)
!10886 = !DILocation(line: 1661, column: 3, scope: !10880)
!10887 = !DILocation(line: 1662, column: 11, scope: !10888)
!10888 = distinct !DILexicalBlock(scope: !10889, file: !3, line: 1662, column: 8)
!10889 = distinct !DILexicalBlock(scope: !10884, file: !3, line: 1661, column: 27)
!10890 = !DILocation(line: 1662, column: 16, scope: !10888)
!10891 = !DILocation(line: 1662, column: 8, scope: !10888)
!10892 = !DILocation(line: 1662, column: 19, scope: !10888)
!10893 = !DILocation(line: 1662, column: 8, scope: !10889)
!10894 = !DILocation(line: 1663, column: 28, scope: !10895)
!10895 = distinct !DILexicalBlock(scope: !10888, file: !3, line: 1662, column: 28)
!10896 = !DILocation(line: 1663, column: 33, scope: !10895)
!10897 = !DILocation(line: 1663, column: 25, scope: !10895)
!10898 = !DILocation(line: 1663, column: 23, scope: !10895)
!10899 = !DILocation(line: 1663, column: 8, scope: !10895)
!10900 = !DILocation(line: 1663, column: 13, scope: !10895)
!10901 = !DILocation(line: 1663, column: 5, scope: !10895)
!10902 = !DILocation(line: 1663, column: 16, scope: !10895)
!10903 = !DILocation(line: 1664, column: 4, scope: !10895)
!10904 = !DILocation(line: 1666, column: 8, scope: !10905)
!10905 = distinct !DILexicalBlock(scope: !10888, file: !3, line: 1665, column: 9)
!10906 = !DILocation(line: 1666, column: 13, scope: !10905)
!10907 = !DILocation(line: 1666, column: 5, scope: !10905)
!10908 = !DILocation(line: 1666, column: 16, scope: !10905)
!10909 = !DILocation(line: 1668, column: 3, scope: !10889)
!10910 = !DILocation(line: 1661, column: 23, scope: !10884)
!10911 = !DILocation(line: 1661, column: 3, scope: !10884)
!10912 = distinct !{!10912, !10886, !10913}
!10913 = !DILocation(line: 1668, column: 3, scope: !10880)
!10914 = !DILocation(line: 1669, column: 2, scope: !10881)
!10915 = !DILocation(line: 1671, column: 11, scope: !10916)
!10916 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 1671, column: 6)
!10917 = !DILocation(line: 1671, column: 16, scope: !10916)
!10918 = !DILocation(line: 1671, column: 6, scope: !10800)
!10919 = !DILocation(line: 1672, column: 10, scope: !10920)
!10920 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 1672, column: 3)
!10921 = distinct !DILexicalBlock(scope: !10916, file: !3, line: 1671, column: 52)
!10922 = !DILocation(line: 1672, column: 8, scope: !10920)
!10923 = !DILocation(line: 1672, column: 15, scope: !10924)
!10924 = distinct !DILexicalBlock(scope: !10920, file: !3, line: 1672, column: 3)
!10925 = !DILocation(line: 1672, column: 17, scope: !10924)
!10926 = !DILocation(line: 1672, column: 3, scope: !10920)
!10927 = !DILocation(line: 1673, column: 11, scope: !10928)
!10928 = distinct !DILexicalBlock(scope: !10929, file: !3, line: 1673, column: 8)
!10929 = distinct !DILexicalBlock(scope: !10924, file: !3, line: 1672, column: 27)
!10930 = !DILocation(line: 1673, column: 17, scope: !10928)
!10931 = !DILocation(line: 1673, column: 8, scope: !10928)
!10932 = !DILocation(line: 1673, column: 20, scope: !10928)
!10933 = !DILocation(line: 1673, column: 8, scope: !10929)
!10934 = !DILocation(line: 1674, column: 29, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !10928, file: !3, line: 1673, column: 29)
!10936 = !DILocation(line: 1674, column: 35, scope: !10935)
!10937 = !DILocation(line: 1674, column: 26, scope: !10935)
!10938 = !DILocation(line: 1674, column: 24, scope: !10935)
!10939 = !DILocation(line: 1674, column: 8, scope: !10935)
!10940 = !DILocation(line: 1674, column: 14, scope: !10935)
!10941 = !DILocation(line: 1674, column: 5, scope: !10935)
!10942 = !DILocation(line: 1674, column: 17, scope: !10935)
!10943 = !DILocation(line: 1675, column: 4, scope: !10935)
!10944 = !DILocation(line: 1677, column: 8, scope: !10945)
!10945 = distinct !DILexicalBlock(scope: !10928, file: !3, line: 1676, column: 9)
!10946 = !DILocation(line: 1677, column: 14, scope: !10945)
!10947 = !DILocation(line: 1677, column: 5, scope: !10945)
!10948 = !DILocation(line: 1677, column: 17, scope: !10945)
!10949 = !DILocation(line: 1679, column: 3, scope: !10929)
!10950 = !DILocation(line: 1672, column: 23, scope: !10924)
!10951 = !DILocation(line: 1672, column: 3, scope: !10924)
!10952 = distinct !{!10952, !10926, !10953}
!10953 = !DILocation(line: 1679, column: 3, scope: !10920)
!10954 = !DILocation(line: 1680, column: 2, scope: !10921)
!10955 = !DILocation(line: 1682, column: 2, scope: !10800)
!10956 = distinct !DISubprogram(name: "color_balance_fl", scope: !3, file: !3, line: 1686, type: !10957, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10957 = !DISubroutineType(types: !10958)
!10958 = !{!193, !193, !2970, !2970, !2970, !2970}
!10959 = !DILocalVariable(name: "in", arg: 1, scope: !10956, file: !3, line: 1686, type: !193)
!10960 = !DILocation(line: 1686, column: 38, scope: !10956)
!10961 = !DILocalVariable(name: "lift", arg: 2, scope: !10956, file: !3, line: 1686, type: !2970)
!10962 = !DILocation(line: 1686, column: 54, scope: !10956)
!10963 = !DILocalVariable(name: "gain", arg: 3, scope: !10956, file: !3, line: 1686, type: !2970)
!10964 = !DILocation(line: 1686, column: 72, scope: !10956)
!10965 = !DILocalVariable(name: "gamma", arg: 4, scope: !10956, file: !3, line: 1686, type: !2970)
!10966 = !DILocation(line: 1686, column: 90, scope: !10956)
!10967 = !DILocalVariable(name: "mul", arg: 5, scope: !10956, file: !3, line: 1686, type: !2970)
!10968 = !DILocation(line: 1686, column: 109, scope: !10956)
!10969 = !DILocalVariable(name: "x", scope: !10956, file: !3, line: 1688, type: !193)
!10970 = !DILocation(line: 1688, column: 8, scope: !10956)
!10971 = !DILocation(line: 1688, column: 15, scope: !10956)
!10972 = !DILocation(line: 1688, column: 18, scope: !10956)
!10973 = !DILocation(line: 1688, column: 28, scope: !10956)
!10974 = !DILocation(line: 1688, column: 26, scope: !10956)
!10975 = !DILocation(line: 1688, column: 34, scope: !10956)
!10976 = !DILocation(line: 1688, column: 44, scope: !10956)
!10977 = !DILocation(line: 1688, column: 42, scope: !10956)
!10978 = !DILocation(line: 1691, column: 6, scope: !10979)
!10979 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 1691, column: 6)
!10980 = !DILocation(line: 1691, column: 8, scope: !10979)
!10981 = !DILocation(line: 1691, column: 6, scope: !10956)
!10982 = !DILocation(line: 1692, column: 5, scope: !10979)
!10983 = !DILocation(line: 1692, column: 3, scope: !10979)
!10984 = !DILocation(line: 1694, column: 14, scope: !10956)
!10985 = !DILocation(line: 1694, column: 17, scope: !10956)
!10986 = !DILocation(line: 1694, column: 9, scope: !10956)
!10987 = !DILocation(line: 1694, column: 26, scope: !10956)
!10988 = !DILocation(line: 1694, column: 24, scope: !10956)
!10989 = !DILocation(line: 1694, column: 2, scope: !10956)
!10990 = distinct !DISubprogram(name: "make_cb_table_float", scope: !3, file: !3, line: 1697, type: !10991, scopeLine: 1699, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!10991 = !DISubroutineType(types: !10992)
!10992 = !{null, !193, !193, !193, !832, !193}
!10993 = !DILocalVariable(name: "lift", arg: 1, scope: !10990, file: !3, line: 1697, type: !193)
!10994 = !DILocation(line: 1697, column: 39, scope: !10990)
!10995 = !DILocalVariable(name: "gain", arg: 2, scope: !10990, file: !3, line: 1697, type: !193)
!10996 = !DILocation(line: 1697, column: 51, scope: !10990)
!10997 = !DILocalVariable(name: "gamma", arg: 3, scope: !10990, file: !3, line: 1697, type: !193)
!10998 = !DILocation(line: 1697, column: 63, scope: !10990)
!10999 = !DILocalVariable(name: "table", arg: 4, scope: !10990, file: !3, line: 1698, type: !832)
!11000 = !DILocation(line: 1698, column: 40, scope: !10990)
!11001 = !DILocalVariable(name: "mul", arg: 5, scope: !10990, file: !3, line: 1698, type: !193)
!11002 = !DILocation(line: 1698, column: 53, scope: !10990)
!11003 = !DILocalVariable(name: "y", scope: !10990, file: !3, line: 1700, type: !45)
!11004 = !DILocation(line: 1700, column: 6, scope: !10990)
!11005 = !DILocation(line: 1702, column: 9, scope: !11006)
!11006 = distinct !DILexicalBlock(scope: !10990, file: !3, line: 1702, column: 2)
!11007 = !DILocation(line: 1702, column: 7, scope: !11006)
!11008 = !DILocation(line: 1702, column: 14, scope: !11009)
!11009 = distinct !DILexicalBlock(scope: !11006, file: !3, line: 1702, column: 2)
!11010 = !DILocation(line: 1702, column: 16, scope: !11009)
!11011 = !DILocation(line: 1702, column: 2, scope: !11006)
!11012 = !DILocalVariable(name: "v", scope: !11013, file: !3, line: 1703, type: !193)
!11013 = distinct !DILexicalBlock(scope: !11009, file: !3, line: 1702, column: 28)
!11014 = !DILocation(line: 1703, column: 9, scope: !11013)
!11015 = !DILocation(line: 1703, column: 37, scope: !11013)
!11016 = !DILocation(line: 1703, column: 30, scope: !11013)
!11017 = !DILocation(line: 1703, column: 39, scope: !11013)
!11018 = !DILocation(line: 1703, column: 58, scope: !11013)
!11019 = !DILocation(line: 1703, column: 64, scope: !11013)
!11020 = !DILocation(line: 1703, column: 70, scope: !11013)
!11021 = !DILocation(line: 1703, column: 77, scope: !11013)
!11022 = !DILocation(line: 1703, column: 13, scope: !11013)
!11023 = !DILocation(line: 1705, column: 14, scope: !11013)
!11024 = !DILocation(line: 1705, column: 3, scope: !11013)
!11025 = !DILocation(line: 1705, column: 9, scope: !11013)
!11026 = !DILocation(line: 1705, column: 12, scope: !11013)
!11027 = !DILocation(line: 1706, column: 2, scope: !11013)
!11028 = !DILocation(line: 1702, column: 24, scope: !11009)
!11029 = !DILocation(line: 1702, column: 2, scope: !11009)
!11030 = distinct !{!11030, !11011, !11031}
!11031 = !DILocation(line: 1706, column: 2, scope: !11006)
!11032 = !DILocation(line: 1707, column: 1, scope: !10990)
!11033 = distinct !DISubprogram(name: "straight_uchar_to_premul_float", scope: !2966, file: !2966, line: 310, type: !11034, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11034 = !DISubroutineType(types: !11035)
!11035 = !{null, !832, !11036}
!11036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64)
!11037 = !DILocalVariable(name: "result", arg: 1, scope: !11033, file: !2966, line: 310, type: !832)
!11038 = !DILocation(line: 310, column: 51, scope: !11033)
!11039 = !DILocalVariable(name: "color", arg: 2, scope: !11033, file: !2966, line: 310, type: !11036)
!11040 = !DILocation(line: 310, column: 82, scope: !11033)
!11041 = !DILocalVariable(name: "alpha", scope: !11033, file: !2966, line: 312, type: !2970)
!11042 = !DILocation(line: 312, column: 14, scope: !11033)
!11043 = !DILocation(line: 312, column: 22, scope: !11033)
!11044 = !DILocation(line: 312, column: 31, scope: !11033)
!11045 = !DILocalVariable(name: "fac", scope: !11033, file: !2966, line: 313, type: !2970)
!11046 = !DILocation(line: 313, column: 14, scope: !11033)
!11047 = !DILocation(line: 313, column: 20, scope: !11033)
!11048 = !DILocation(line: 313, column: 26, scope: !11033)
!11049 = !DILocation(line: 315, column: 14, scope: !11033)
!11050 = !DILocation(line: 315, column: 25, scope: !11033)
!11051 = !DILocation(line: 315, column: 23, scope: !11033)
!11052 = !DILocation(line: 315, column: 2, scope: !11033)
!11053 = !DILocation(line: 315, column: 12, scope: !11033)
!11054 = !DILocation(line: 316, column: 14, scope: !11033)
!11055 = !DILocation(line: 316, column: 25, scope: !11033)
!11056 = !DILocation(line: 316, column: 23, scope: !11033)
!11057 = !DILocation(line: 316, column: 2, scope: !11033)
!11058 = !DILocation(line: 316, column: 12, scope: !11033)
!11059 = !DILocation(line: 317, column: 14, scope: !11033)
!11060 = !DILocation(line: 317, column: 25, scope: !11033)
!11061 = !DILocation(line: 317, column: 23, scope: !11033)
!11062 = !DILocation(line: 317, column: 2, scope: !11033)
!11063 = !DILocation(line: 317, column: 12, scope: !11033)
!11064 = !DILocation(line: 318, column: 14, scope: !11033)
!11065 = !DILocation(line: 318, column: 2, scope: !11033)
!11066 = !DILocation(line: 318, column: 12, scope: !11033)
!11067 = !DILocation(line: 319, column: 1, scope: !11033)
!11068 = distinct !DISubprogram(name: "premul_float_to_straight_uchar", scope: !2966, file: !2966, line: 321, type: !11069, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11069 = !DISubroutineType(types: !11070)
!11070 = !{null, !1765, !2969}
!11071 = !DILocalVariable(name: "result", arg: 1, scope: !11068, file: !2966, line: 321, type: !1765)
!11072 = !DILocation(line: 321, column: 60, scope: !11068)
!11073 = !DILocalVariable(name: "color", arg: 2, scope: !11068, file: !2966, line: 321, type: !2969)
!11074 = !DILocation(line: 321, column: 80, scope: !11068)
!11075 = !DILocation(line: 323, column: 6, scope: !11076)
!11076 = distinct !DILexicalBlock(scope: !11068, file: !2966, line: 323, column: 6)
!11077 = !DILocation(line: 323, column: 15, scope: !11076)
!11078 = !DILocation(line: 323, column: 23, scope: !11076)
!11079 = !DILocation(line: 323, column: 26, scope: !11076)
!11080 = !DILocation(line: 323, column: 35, scope: !11076)
!11081 = !DILocation(line: 323, column: 6, scope: !11068)
!11082 = !DILocation(line: 324, column: 15, scope: !11083)
!11083 = distinct !DILexicalBlock(scope: !11076, file: !2966, line: 323, column: 44)
!11084 = !DILocation(line: 324, column: 3, scope: !11083)
!11085 = !DILocation(line: 324, column: 13, scope: !11083)
!11086 = !DILocation(line: 325, column: 15, scope: !11083)
!11087 = !DILocation(line: 325, column: 3, scope: !11083)
!11088 = !DILocation(line: 325, column: 13, scope: !11083)
!11089 = !DILocation(line: 326, column: 15, scope: !11083)
!11090 = !DILocation(line: 326, column: 3, scope: !11083)
!11091 = !DILocation(line: 326, column: 13, scope: !11083)
!11092 = !DILocation(line: 327, column: 15, scope: !11083)
!11093 = !DILocation(line: 327, column: 3, scope: !11083)
!11094 = !DILocation(line: 327, column: 13, scope: !11083)
!11095 = !DILocation(line: 328, column: 2, scope: !11083)
!11096 = !DILocalVariable(name: "alpha_inv", scope: !11097, file: !2966, line: 330, type: !2970)
!11097 = distinct !DILexicalBlock(scope: !11076, file: !2966, line: 329, column: 7)
!11098 = !DILocation(line: 330, column: 15, scope: !11097)
!11099 = !DILocation(line: 330, column: 34, scope: !11097)
!11100 = !DILocation(line: 330, column: 32, scope: !11097)
!11101 = !DILocation(line: 333, column: 15, scope: !11097)
!11102 = !DILocation(line: 333, column: 3, scope: !11097)
!11103 = !DILocation(line: 333, column: 13, scope: !11097)
!11104 = !DILocation(line: 334, column: 15, scope: !11097)
!11105 = !DILocation(line: 334, column: 3, scope: !11097)
!11106 = !DILocation(line: 334, column: 13, scope: !11097)
!11107 = !DILocation(line: 335, column: 15, scope: !11097)
!11108 = !DILocation(line: 335, column: 3, scope: !11097)
!11109 = !DILocation(line: 335, column: 13, scope: !11097)
!11110 = !DILocation(line: 336, column: 15, scope: !11097)
!11111 = !DILocation(line: 336, column: 3, scope: !11097)
!11112 = !DILocation(line: 336, column: 13, scope: !11097)
!11113 = !DILocation(line: 338, column: 1, scope: !11068)
!11114 = distinct !DISubprogram(name: "copy_from_ibuf_still", scope: !3, file: !3, line: 2130, type: !5290, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11115 = !DILocalVariable(name: "context", arg: 1, scope: !11114, file: !3, line: 2130, type: !1892)
!11116 = !DILocation(line: 2130, column: 57, scope: !11114)
!11117 = !DILocalVariable(name: "seq", arg: 2, scope: !11114, file: !3, line: 2130, type: !204)
!11118 = !DILocation(line: 2130, column: 76, scope: !11114)
!11119 = !DILocalVariable(name: "nr", arg: 3, scope: !11114, file: !3, line: 2130, type: !193)
!11120 = !DILocation(line: 2130, column: 87, scope: !11114)
!11121 = !DILocalVariable(name: "rval", scope: !11114, file: !3, line: 2132, type: !1776)
!11122 = !DILocation(line: 2132, column: 9, scope: !11114)
!11123 = !DILocalVariable(name: "ibuf", scope: !11114, file: !3, line: 2133, type: !1776)
!11124 = !DILocation(line: 2133, column: 9, scope: !11114)
!11125 = !DILocation(line: 2135, column: 6, scope: !11126)
!11126 = distinct !DILexicalBlock(scope: !11114, file: !3, line: 2135, column: 6)
!11127 = !DILocation(line: 2135, column: 9, scope: !11126)
!11128 = !DILocation(line: 2135, column: 6, scope: !11114)
!11129 = !DILocation(line: 2136, column: 34, scope: !11130)
!11130 = distinct !DILexicalBlock(scope: !11126, file: !3, line: 2135, column: 15)
!11131 = !DILocation(line: 2136, column: 43, scope: !11130)
!11132 = !DILocation(line: 2136, column: 48, scope: !11130)
!11133 = !DILocation(line: 2136, column: 53, scope: !11130)
!11134 = !DILocation(line: 2136, column: 10, scope: !11130)
!11135 = !DILocation(line: 2136, column: 8, scope: !11130)
!11136 = !DILocation(line: 2137, column: 2, scope: !11130)
!11137 = !DILocation(line: 2138, column: 11, scope: !11138)
!11138 = distinct !DILexicalBlock(scope: !11126, file: !3, line: 2138, column: 11)
!11139 = !DILocation(line: 2138, column: 17, scope: !11138)
!11140 = !DILocation(line: 2138, column: 22, scope: !11138)
!11141 = !DILocation(line: 2138, column: 26, scope: !11138)
!11142 = !DILocation(line: 2138, column: 14, scope: !11138)
!11143 = !DILocation(line: 2138, column: 11, scope: !11126)
!11144 = !DILocation(line: 2139, column: 34, scope: !11145)
!11145 = distinct !DILexicalBlock(scope: !11138, file: !3, line: 2138, column: 31)
!11146 = !DILocation(line: 2139, column: 43, scope: !11145)
!11147 = !DILocation(line: 2139, column: 48, scope: !11145)
!11148 = !DILocation(line: 2139, column: 53, scope: !11145)
!11149 = !DILocation(line: 2139, column: 10, scope: !11145)
!11150 = !DILocation(line: 2139, column: 8, scope: !11145)
!11151 = !DILocation(line: 2140, column: 2, scope: !11145)
!11152 = !DILocation(line: 2142, column: 6, scope: !11153)
!11153 = distinct !DILexicalBlock(scope: !11114, file: !3, line: 2142, column: 6)
!11154 = !DILocation(line: 2142, column: 6, scope: !11114)
!11155 = !DILocation(line: 2143, column: 23, scope: !11156)
!11156 = distinct !DILexicalBlock(scope: !11153, file: !3, line: 2142, column: 12)
!11157 = !DILocation(line: 2143, column: 10, scope: !11156)
!11158 = !DILocation(line: 2143, column: 8, scope: !11156)
!11159 = !DILocation(line: 2144, column: 17, scope: !11156)
!11160 = !DILocation(line: 2144, column: 3, scope: !11156)
!11161 = !DILocation(line: 2145, column: 2, scope: !11156)
!11162 = !DILocation(line: 2147, column: 9, scope: !11114)
!11163 = !DILocation(line: 2147, column: 2, scope: !11114)
!11164 = distinct !DISubprogram(name: "seq_proxy_fetch", scope: !3, file: !3, line: 1431, type: !11165, scopeLine: 1432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11165 = !DISubroutineType(types: !11166)
!11166 = !{!1776, !1892, !204, !45}
!11167 = !DILocalVariable(name: "context", arg: 1, scope: !11164, file: !3, line: 1431, type: !1892)
!11168 = !DILocation(line: 1431, column: 52, scope: !11164)
!11169 = !DILocalVariable(name: "seq", arg: 2, scope: !11164, file: !3, line: 1431, type: !204)
!11170 = !DILocation(line: 1431, column: 71, scope: !11164)
!11171 = !DILocalVariable(name: "cfra", arg: 3, scope: !11164, file: !3, line: 1431, type: !45)
!11172 = !DILocation(line: 1431, column: 80, scope: !11164)
!11173 = !DILocalVariable(name: "name", scope: !11164, file: !3, line: 1433, type: !5097)
!11174 = !DILocation(line: 1433, column: 7, scope: !11164)
!11175 = !DILocalVariable(name: "psize", scope: !11164, file: !3, line: 1434, type: !11176)
!11176 = !DIDerivedType(tag: DW_TAG_typedef, name: "IMB_Proxy_Size", file: !74, line: 231, baseType: !82)
!11177 = !DILocation(line: 1434, column: 17, scope: !11164)
!11178 = !DILocation(line: 1434, column: 53, scope: !11164)
!11179 = !DILocation(line: 1434, column: 62, scope: !11164)
!11180 = !DILocation(line: 1434, column: 25, scope: !11164)
!11181 = !DILocalVariable(name: "size_flags", scope: !11164, file: !3, line: 1435, type: !45)
!11182 = !DILocation(line: 1435, column: 6, scope: !11164)
!11183 = !DILocalVariable(name: "render_size", scope: !11164, file: !3, line: 1436, type: !45)
!11184 = !DILocation(line: 1436, column: 6, scope: !11164)
!11185 = !DILocation(line: 1436, column: 20, scope: !11164)
!11186 = !DILocation(line: 1436, column: 29, scope: !11164)
!11187 = !DILocation(line: 1439, column: 6, scope: !11188)
!11188 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1439, column: 6)
!11189 = !DILocation(line: 1439, column: 18, scope: !11188)
!11190 = !DILocation(line: 1439, column: 6, scope: !11164)
!11191 = !DILocation(line: 1440, column: 15, scope: !11192)
!11192 = distinct !DILexicalBlock(scope: !11188, file: !3, line: 1439, column: 25)
!11193 = !DILocation(line: 1441, column: 2, scope: !11192)
!11194 = !DILocation(line: 1443, column: 8, scope: !11195)
!11195 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1443, column: 6)
!11196 = !DILocation(line: 1443, column: 13, scope: !11195)
!11197 = !DILocation(line: 1443, column: 18, scope: !11195)
!11198 = !DILocation(line: 1443, column: 6, scope: !11164)
!11199 = !DILocation(line: 1444, column: 3, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11195, file: !3, line: 1443, column: 36)
!11201 = !DILocation(line: 1447, column: 15, scope: !11164)
!11202 = !DILocation(line: 1447, column: 20, scope: !11164)
!11203 = !DILocation(line: 1447, column: 27, scope: !11164)
!11204 = !DILocation(line: 1447, column: 34, scope: !11164)
!11205 = !DILocation(line: 1447, column: 13, scope: !11164)
!11206 = !DILocation(line: 1450, column: 6, scope: !11207)
!11207 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1450, column: 6)
!11208 = !DILocation(line: 1450, column: 12, scope: !11207)
!11209 = !DILocation(line: 1450, column: 30, scope: !11207)
!11210 = !DILocation(line: 1450, column: 35, scope: !11207)
!11211 = !DILocation(line: 1450, column: 48, scope: !11207)
!11212 = !DILocation(line: 1450, column: 46, scope: !11207)
!11213 = !DILocation(line: 1450, column: 58, scope: !11207)
!11214 = !DILocation(line: 1450, column: 55, scope: !11207)
!11215 = !DILocation(line: 1450, column: 6, scope: !11164)
!11216 = !DILocation(line: 1451, column: 3, scope: !11217)
!11217 = distinct !DILexicalBlock(scope: !11207, file: !3, line: 1450, column: 66)
!11218 = !DILocation(line: 1454, column: 6, scope: !11219)
!11219 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1454, column: 6)
!11220 = !DILocation(line: 1454, column: 11, scope: !11219)
!11221 = !DILocation(line: 1454, column: 16, scope: !11219)
!11222 = !DILocation(line: 1454, column: 6, scope: !11164)
!11223 = !DILocalVariable(name: "frameno", scope: !11224, file: !3, line: 1455, type: !45)
!11224 = distinct !DILexicalBlock(scope: !11219, file: !3, line: 1454, column: 45)
!11225 = !DILocation(line: 1455, column: 7, scope: !11224)
!11226 = !DILocation(line: 1455, column: 43, scope: !11224)
!11227 = !DILocation(line: 1455, column: 48, scope: !11224)
!11228 = !DILocation(line: 1455, column: 22, scope: !11224)
!11229 = !DILocation(line: 1455, column: 17, scope: !11224)
!11230 = !DILocation(line: 1455, column: 56, scope: !11224)
!11231 = !DILocation(line: 1455, column: 61, scope: !11224)
!11232 = !DILocation(line: 1455, column: 54, scope: !11224)
!11233 = !DILocation(line: 1456, column: 7, scope: !11234)
!11234 = distinct !DILexicalBlock(scope: !11224, file: !3, line: 1456, column: 7)
!11235 = !DILocation(line: 1456, column: 12, scope: !11234)
!11236 = !DILocation(line: 1456, column: 19, scope: !11234)
!11237 = !DILocation(line: 1456, column: 26, scope: !11234)
!11238 = !DILocation(line: 1456, column: 31, scope: !11234)
!11239 = !DILocation(line: 1456, column: 7, scope: !11224)
!11240 = !DILocation(line: 1457, column: 28, scope: !11241)
!11241 = distinct !DILexicalBlock(scope: !11242, file: !3, line: 1457, column: 8)
!11242 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 1456, column: 40)
!11243 = !DILocation(line: 1457, column: 33, scope: !11241)
!11244 = !DILocation(line: 1457, column: 39, scope: !11241)
!11245 = !DILocation(line: 1457, column: 52, scope: !11241)
!11246 = !DILocation(line: 1457, column: 8, scope: !11241)
!11247 = !DILocation(line: 1457, column: 58, scope: !11241)
!11248 = !DILocation(line: 1457, column: 8, scope: !11242)
!11249 = !DILocation(line: 1458, column: 5, scope: !11250)
!11250 = distinct !DILexicalBlock(scope: !11241, file: !3, line: 1457, column: 64)
!11251 = !DILocation(line: 1462, column: 39, scope: !11242)
!11252 = !DILocation(line: 1462, column: 30, scope: !11242)
!11253 = !DILocation(line: 1462, column: 4, scope: !11242)
!11254 = !DILocation(line: 1462, column: 9, scope: !11242)
!11255 = !DILocation(line: 1462, column: 16, scope: !11242)
!11256 = !DILocation(line: 1462, column: 23, scope: !11242)
!11257 = !DILocation(line: 1462, column: 28, scope: !11242)
!11258 = !DILocation(line: 1463, column: 3, scope: !11242)
!11259 = !DILocation(line: 1464, column: 7, scope: !11260)
!11260 = distinct !DILexicalBlock(scope: !11224, file: !3, line: 1464, column: 7)
!11261 = !DILocation(line: 1464, column: 12, scope: !11260)
!11262 = !DILocation(line: 1464, column: 19, scope: !11260)
!11263 = !DILocation(line: 1464, column: 26, scope: !11260)
!11264 = !DILocation(line: 1464, column: 31, scope: !11260)
!11265 = !DILocation(line: 1464, column: 7, scope: !11224)
!11266 = !DILocation(line: 1465, column: 4, scope: !11267)
!11267 = distinct !DILexicalBlock(scope: !11260, file: !3, line: 1464, column: 40)
!11268 = !DILocation(line: 1468, column: 22, scope: !11224)
!11269 = !DILocation(line: 1468, column: 3, scope: !11224)
!11270 = !DILocation(line: 1470, column: 44, scope: !11224)
!11271 = !DILocation(line: 1470, column: 49, scope: !11224)
!11272 = !DILocation(line: 1470, column: 55, scope: !11224)
!11273 = !DILocation(line: 1470, column: 60, scope: !11224)
!11274 = !DILocation(line: 1470, column: 67, scope: !11224)
!11275 = !DILocation(line: 1470, column: 74, scope: !11224)
!11276 = !DILocation(line: 1470, column: 78, scope: !11224)
!11277 = !DILocation(line: 1470, column: 13, scope: !11224)
!11278 = !DILocation(line: 1470, column: 11, scope: !11224)
!11279 = !DILocation(line: 1472, column: 28, scope: !11224)
!11280 = !DILocation(line: 1472, column: 33, scope: !11224)
!11281 = !DILocation(line: 1472, column: 40, scope: !11224)
!11282 = !DILocation(line: 1472, column: 47, scope: !11224)
!11283 = !DILocation(line: 1472, column: 53, scope: !11224)
!11284 = !DILocation(line: 1472, column: 10, scope: !11224)
!11285 = !DILocation(line: 1472, column: 3, scope: !11224)
!11286 = !DILocation(line: 1475, column: 26, scope: !11287)
!11287 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1475, column: 6)
!11288 = !DILocation(line: 1475, column: 31, scope: !11287)
!11289 = !DILocation(line: 1475, column: 37, scope: !11287)
!11290 = !DILocation(line: 1475, column: 50, scope: !11287)
!11291 = !DILocation(line: 1475, column: 6, scope: !11287)
!11292 = !DILocation(line: 1475, column: 56, scope: !11287)
!11293 = !DILocation(line: 1475, column: 6, scope: !11164)
!11294 = !DILocation(line: 1476, column: 3, scope: !11295)
!11295 = distinct !DILexicalBlock(scope: !11287, file: !3, line: 1475, column: 62)
!11296 = !DILocation(line: 1479, column: 17, scope: !11297)
!11297 = distinct !DILexicalBlock(scope: !11164, file: !3, line: 1479, column: 6)
!11298 = !DILocation(line: 1479, column: 6, scope: !11297)
!11299 = !DILocation(line: 1479, column: 6, scope: !11164)
!11300 = !DILocalVariable(name: "ibuf", scope: !11301, file: !3, line: 1480, type: !1776)
!11301 = distinct !DILexicalBlock(scope: !11297, file: !3, line: 1479, column: 24)
!11302 = !DILocation(line: 1480, column: 10, scope: !11301)
!11303 = !DILocation(line: 1480, column: 33, scope: !11301)
!11304 = !DILocation(line: 1480, column: 17, scope: !11301)
!11305 = !DILocation(line: 1482, column: 7, scope: !11306)
!11306 = distinct !DILexicalBlock(scope: !11301, file: !3, line: 1482, column: 7)
!11307 = !DILocation(line: 1482, column: 7, scope: !11301)
!11308 = !DILocation(line: 1483, column: 34, scope: !11306)
!11309 = !DILocation(line: 1483, column: 43, scope: !11306)
!11310 = !DILocation(line: 1483, column: 50, scope: !11306)
!11311 = !DILocation(line: 1483, column: 4, scope: !11306)
!11312 = !DILocation(line: 1485, column: 10, scope: !11301)
!11313 = !DILocation(line: 1485, column: 3, scope: !11301)
!11314 = !DILocation(line: 1488, column: 3, scope: !11315)
!11315 = distinct !DILexicalBlock(scope: !11297, file: !3, line: 1487, column: 7)
!11316 = !DILocation(line: 1490, column: 1, scope: !11164)
!11317 = distinct !DISubprogram(name: "do_render_strip_uncached", scope: !3, file: !3, line: 2658, type: !5290, scopeLine: 2659, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11318 = !DILocalVariable(name: "context", arg: 1, scope: !11317, file: !3, line: 2658, type: !1892)
!11319 = !DILocation(line: 2658, column: 61, scope: !11317)
!11320 = !DILocalVariable(name: "seq", arg: 2, scope: !11317, file: !3, line: 2658, type: !204)
!11321 = !DILocation(line: 2658, column: 80, scope: !11317)
!11322 = !DILocalVariable(name: "cfra", arg: 3, scope: !11317, file: !3, line: 2658, type: !193)
!11323 = !DILocation(line: 2658, column: 91, scope: !11317)
!11324 = !DILocalVariable(name: "ibuf", scope: !11317, file: !3, line: 2660, type: !1776)
!11325 = !DILocation(line: 2660, column: 9, scope: !11317)
!11326 = !DILocalVariable(name: "nr", scope: !11317, file: !3, line: 2661, type: !193)
!11327 = !DILocation(line: 2661, column: 8, scope: !11317)
!11328 = !DILocation(line: 2661, column: 34, scope: !11317)
!11329 = !DILocation(line: 2661, column: 39, scope: !11317)
!11330 = !DILocation(line: 2661, column: 13, scope: !11317)
!11331 = !DILocalVariable(name: "type", scope: !11317, file: !3, line: 2662, type: !45)
!11332 = !DILocation(line: 2662, column: 6, scope: !11317)
!11333 = !DILocation(line: 2662, column: 14, scope: !11317)
!11334 = !DILocation(line: 2662, column: 19, scope: !11317)
!11335 = !DILocation(line: 2662, column: 24, scope: !11317)
!11336 = !DILocation(line: 2662, column: 42, scope: !11317)
!11337 = !DILocation(line: 2662, column: 45, scope: !11317)
!11338 = !DILocation(line: 2662, column: 50, scope: !11317)
!11339 = !DILocation(line: 2662, column: 55, scope: !11317)
!11340 = !DILocation(line: 2662, column: 13, scope: !11317)
!11341 = !DILocation(line: 2662, column: 94, scope: !11317)
!11342 = !DILocation(line: 2662, column: 99, scope: !11317)
!11343 = !DILocalVariable(name: "use_preprocess", scope: !11317, file: !3, line: 2663, type: !742)
!11344 = !DILocation(line: 2663, column: 7, scope: !11317)
!11345 = !DILocation(line: 2663, column: 63, scope: !11317)
!11346 = !DILocation(line: 2663, column: 72, scope: !11317)
!11347 = !DILocation(line: 2663, column: 77, scope: !11317)
!11348 = !DILocation(line: 2663, column: 24, scope: !11317)
!11349 = !DILocalVariable(name: "name", scope: !11317, file: !3, line: 2664, type: !143)
!11350 = !DILocation(line: 2664, column: 7, scope: !11317)
!11351 = !DILocation(line: 2666, column: 10, scope: !11317)
!11352 = !DILocation(line: 2666, column: 2, scope: !11317)
!11353 = !DILocalVariable(name: "meta_ibuf", scope: !11354, file: !3, line: 2669, type: !1776)
!11354 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2668, column: 3)
!11355 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 2666, column: 16)
!11356 = !DILocation(line: 2669, column: 11, scope: !11354)
!11357 = !DILocation(line: 2671, column: 8, scope: !11358)
!11358 = distinct !DILexicalBlock(scope: !11354, file: !3, line: 2671, column: 8)
!11359 = !DILocation(line: 2671, column: 13, scope: !11358)
!11360 = !DILocation(line: 2671, column: 21, scope: !11358)
!11361 = !DILocation(line: 2671, column: 8, scope: !11354)
!11362 = !DILocation(line: 2672, column: 40, scope: !11358)
!11363 = !DILocation(line: 2672, column: 50, scope: !11358)
!11364 = !DILocation(line: 2672, column: 55, scope: !11358)
!11365 = !DILocation(line: 2672, column: 64, scope: !11358)
!11366 = !DILocation(line: 2672, column: 69, scope: !11358)
!11367 = !DILocation(line: 2672, column: 77, scope: !11358)
!11368 = !DILocation(line: 2672, column: 75, scope: !11358)
!11369 = !DILocation(line: 2672, column: 17, scope: !11358)
!11370 = !DILocation(line: 2672, column: 15, scope: !11358)
!11371 = !DILocation(line: 2672, column: 5, scope: !11358)
!11372 = !DILocation(line: 2674, column: 8, scope: !11373)
!11373 = distinct !DILexicalBlock(scope: !11354, file: !3, line: 2674, column: 8)
!11374 = !DILocation(line: 2674, column: 8, scope: !11354)
!11375 = !DILocation(line: 2675, column: 12, scope: !11376)
!11376 = distinct !DILexicalBlock(scope: !11373, file: !3, line: 2674, column: 19)
!11377 = !DILocation(line: 2675, column: 10, scope: !11376)
!11378 = !DILocation(line: 2676, column: 9, scope: !11379)
!11379 = distinct !DILexicalBlock(scope: !11376, file: !3, line: 2676, column: 9)
!11380 = !DILocation(line: 2676, column: 14, scope: !11379)
!11381 = !DILocation(line: 2676, column: 17, scope: !11379)
!11382 = !DILocation(line: 2676, column: 9, scope: !11376)
!11383 = !DILocalVariable(name: "i", scope: !11384, file: !3, line: 2677, type: !1776)
!11384 = distinct !DILexicalBlock(scope: !11379, file: !3, line: 2676, column: 33)
!11385 = !DILocation(line: 2677, column: 13, scope: !11384)
!11386 = !DILocation(line: 2677, column: 30, scope: !11384)
!11387 = !DILocation(line: 2677, column: 17, scope: !11384)
!11388 = !DILocation(line: 2679, column: 20, scope: !11384)
!11389 = !DILocation(line: 2679, column: 6, scope: !11384)
!11390 = !DILocation(line: 2681, column: 13, scope: !11384)
!11391 = !DILocation(line: 2681, column: 11, scope: !11384)
!11392 = !DILocation(line: 2682, column: 5, scope: !11384)
!11393 = !DILocation(line: 2683, column: 4, scope: !11376)
!11394 = !DILocation(line: 2685, column: 4, scope: !11354)
!11395 = !DILocalVariable(name: "child_ibuf", scope: !11396, file: !3, line: 2690, type: !1776)
!11396 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2689, column: 3)
!11397 = !DILocation(line: 2690, column: 11, scope: !11396)
!11398 = !DILocalVariable(name: "f_cfra", scope: !11396, file: !3, line: 2692, type: !193)
!11399 = !DILocation(line: 2692, column: 10, scope: !11396)
!11400 = !DILocalVariable(name: "s", scope: !11396, file: !3, line: 2693, type: !1843)
!11401 = !DILocation(line: 2693, column: 22, scope: !11396)
!11402 = !DILocation(line: 2693, column: 46, scope: !11396)
!11403 = !DILocation(line: 2693, column: 51, scope: !11396)
!11404 = !DILocation(line: 2693, column: 26, scope: !11396)
!11405 = !DILocation(line: 2695, column: 42, scope: !11396)
!11406 = !DILocation(line: 2695, column: 51, scope: !11396)
!11407 = !DILocation(line: 2695, column: 58, scope: !11396)
!11408 = !DILocation(line: 2695, column: 4, scope: !11396)
!11409 = !DILocation(line: 2698, column: 13, scope: !11396)
!11410 = !DILocation(line: 2698, column: 18, scope: !11396)
!11411 = !DILocation(line: 2698, column: 26, scope: !11396)
!11412 = !DILocation(line: 2698, column: 29, scope: !11396)
!11413 = !DILocation(line: 2698, column: 43, scope: !11396)
!11414 = !DILocation(line: 2698, column: 38, scope: !11396)
!11415 = !DILocation(line: 2698, column: 24, scope: !11396)
!11416 = !DILocation(line: 2698, column: 11, scope: !11396)
!11417 = !DILocation(line: 2700, column: 34, scope: !11396)
!11418 = !DILocation(line: 2700, column: 43, scope: !11396)
!11419 = !DILocation(line: 2700, column: 48, scope: !11396)
!11420 = !DILocation(line: 2700, column: 54, scope: !11396)
!11421 = !DILocation(line: 2700, column: 17, scope: !11396)
!11422 = !DILocation(line: 2700, column: 15, scope: !11396)
!11423 = !DILocation(line: 2702, column: 8, scope: !11424)
!11424 = distinct !DILexicalBlock(scope: !11396, file: !3, line: 2702, column: 8)
!11425 = !DILocation(line: 2702, column: 8, scope: !11396)
!11426 = !DILocation(line: 2703, column: 12, scope: !11427)
!11427 = distinct !DILexicalBlock(scope: !11424, file: !3, line: 2702, column: 20)
!11428 = !DILocation(line: 2703, column: 10, scope: !11427)
!11429 = !DILocation(line: 2704, column: 9, scope: !11430)
!11430 = distinct !DILexicalBlock(scope: !11427, file: !3, line: 2704, column: 9)
!11431 = !DILocation(line: 2704, column: 14, scope: !11430)
!11432 = !DILocation(line: 2704, column: 17, scope: !11430)
!11433 = !DILocation(line: 2704, column: 9, scope: !11427)
!11434 = !DILocalVariable(name: "i", scope: !11435, file: !3, line: 2705, type: !1776)
!11435 = distinct !DILexicalBlock(scope: !11430, file: !3, line: 2704, column: 33)
!11436 = !DILocation(line: 2705, column: 13, scope: !11435)
!11437 = !DILocation(line: 2705, column: 30, scope: !11435)
!11438 = !DILocation(line: 2705, column: 17, scope: !11435)
!11439 = !DILocation(line: 2707, column: 20, scope: !11435)
!11440 = !DILocation(line: 2707, column: 6, scope: !11435)
!11441 = !DILocation(line: 2709, column: 13, scope: !11435)
!11442 = !DILocation(line: 2709, column: 11, scope: !11435)
!11443 = !DILocation(line: 2710, column: 5, scope: !11435)
!11444 = !DILocation(line: 2711, column: 4, scope: !11427)
!11445 = !DILocation(line: 2712, column: 4, scope: !11396)
!11446 = !DILocation(line: 2717, column: 40, scope: !11447)
!11447 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2716, column: 3)
!11448 = !DILocation(line: 2717, column: 49, scope: !11447)
!11449 = !DILocation(line: 2717, column: 54, scope: !11447)
!11450 = !DILocation(line: 2717, column: 59, scope: !11447)
!11451 = !DILocation(line: 2717, column: 67, scope: !11447)
!11452 = !DILocation(line: 2717, column: 65, scope: !11447)
!11453 = !DILocation(line: 2717, column: 11, scope: !11447)
!11454 = !DILocation(line: 2717, column: 9, scope: !11447)
!11455 = !DILocation(line: 2718, column: 4, scope: !11447)
!11456 = !DILocalVariable(name: "s_elem", scope: !11457, file: !3, line: 2723, type: !246)
!11457 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2722, column: 3)
!11458 = !DILocation(line: 2723, column: 15, scope: !11457)
!11459 = !DILocation(line: 2723, column: 53, scope: !11457)
!11460 = !DILocation(line: 2723, column: 58, scope: !11457)
!11461 = !DILocation(line: 2723, column: 24, scope: !11457)
!11462 = !DILocalVariable(name: "flag", scope: !11457, file: !3, line: 2724, type: !45)
!11463 = !DILocation(line: 2724, column: 8, scope: !11457)
!11464 = !DILocation(line: 2726, column: 8, scope: !11465)
!11465 = distinct !DILexicalBlock(scope: !11457, file: !3, line: 2726, column: 8)
!11466 = !DILocation(line: 2726, column: 8, scope: !11457)
!11467 = !DILocation(line: 2727, column: 22, scope: !11468)
!11468 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 2726, column: 16)
!11469 = !DILocation(line: 2727, column: 42, scope: !11468)
!11470 = !DILocation(line: 2727, column: 47, scope: !11468)
!11471 = !DILocation(line: 2727, column: 54, scope: !11468)
!11472 = !DILocation(line: 2727, column: 59, scope: !11468)
!11473 = !DILocation(line: 2727, column: 67, scope: !11468)
!11474 = !DILocation(line: 2727, column: 5, scope: !11468)
!11475 = !DILocation(line: 2728, column: 18, scope: !11468)
!11476 = !DILocation(line: 2728, column: 26, scope: !11468)
!11477 = !DILocation(line: 2728, column: 32, scope: !11468)
!11478 = !DILocation(line: 2728, column: 24, scope: !11468)
!11479 = !DILocation(line: 2728, column: 5, scope: !11468)
!11480 = !DILocation(line: 2729, column: 4, scope: !11468)
!11481 = !DILocation(line: 2731, column: 9, scope: !11457)
!11482 = !DILocation(line: 2732, column: 8, scope: !11483)
!11483 = distinct !DILexicalBlock(scope: !11457, file: !3, line: 2732, column: 8)
!11484 = !DILocation(line: 2732, column: 13, scope: !11483)
!11485 = !DILocation(line: 2732, column: 24, scope: !11483)
!11486 = !DILocation(line: 2732, column: 8, scope: !11457)
!11487 = !DILocation(line: 2733, column: 10, scope: !11483)
!11488 = !DILocation(line: 2733, column: 5, scope: !11483)
!11489 = !DILocation(line: 2735, column: 8, scope: !11490)
!11490 = distinct !DILexicalBlock(scope: !11457, file: !3, line: 2735, column: 8)
!11491 = !DILocation(line: 2735, column: 15, scope: !11490)
!11492 = !DILocation(line: 2735, column: 42, scope: !11490)
!11493 = !DILocation(line: 2735, column: 48, scope: !11490)
!11494 = !DILocation(line: 2735, column: 54, scope: !11490)
!11495 = !DILocation(line: 2735, column: 59, scope: !11490)
!11496 = !DILocation(line: 2735, column: 66, scope: !11490)
!11497 = !DILocation(line: 2735, column: 86, scope: !11490)
!11498 = !DILocation(line: 2735, column: 26, scope: !11490)
!11499 = !DILocation(line: 2735, column: 24, scope: !11490)
!11500 = !DILocation(line: 2735, column: 8, scope: !11457)
!11501 = !DILocation(line: 2737, column: 9, scope: !11502)
!11502 = distinct !DILexicalBlock(scope: !11503, file: !3, line: 2737, column: 9)
!11503 = distinct !DILexicalBlock(scope: !11490, file: !3, line: 2735, column: 94)
!11504 = !DILocation(line: 2737, column: 15, scope: !11502)
!11505 = !DILocation(line: 2737, column: 26, scope: !11502)
!11506 = !DILocation(line: 2737, column: 29, scope: !11502)
!11507 = !DILocation(line: 2737, column: 35, scope: !11502)
!11508 = !DILocation(line: 2737, column: 9, scope: !11503)
!11509 = !DILocation(line: 2738, column: 24, scope: !11502)
!11510 = !DILocation(line: 2738, column: 6, scope: !11502)
!11511 = !DILocation(line: 2741, column: 44, scope: !11503)
!11512 = !DILocation(line: 2741, column: 53, scope: !11503)
!11513 = !DILocation(line: 2741, column: 60, scope: !11503)
!11514 = !DILocation(line: 2741, column: 5, scope: !11503)
!11515 = !DILocation(line: 2743, column: 24, scope: !11503)
!11516 = !DILocation(line: 2743, column: 33, scope: !11503)
!11517 = !DILocation(line: 2743, column: 38, scope: !11503)
!11518 = !DILocation(line: 2743, column: 42, scope: !11503)
!11519 = !DILocation(line: 2743, column: 5, scope: !11503)
!11520 = !DILocation(line: 2745, column: 27, scope: !11503)
!11521 = !DILocation(line: 2745, column: 33, scope: !11503)
!11522 = !DILocation(line: 2745, column: 5, scope: !11503)
!11523 = !DILocation(line: 2745, column: 13, scope: !11503)
!11524 = !DILocation(line: 2745, column: 25, scope: !11503)
!11525 = !DILocation(line: 2746, column: 27, scope: !11503)
!11526 = !DILocation(line: 2746, column: 33, scope: !11503)
!11527 = !DILocation(line: 2746, column: 5, scope: !11503)
!11528 = !DILocation(line: 2746, column: 13, scope: !11503)
!11529 = !DILocation(line: 2746, column: 25, scope: !11503)
!11530 = !DILocation(line: 2747, column: 4, scope: !11503)
!11531 = !DILocation(line: 2748, column: 4, scope: !11457)
!11532 = !DILocation(line: 2753, column: 23, scope: !11533)
!11533 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2752, column: 3)
!11534 = !DILocation(line: 2753, column: 4, scope: !11533)
!11535 = !DILocation(line: 2755, column: 8, scope: !11536)
!11536 = distinct !DILexicalBlock(scope: !11533, file: !3, line: 2755, column: 8)
!11537 = !DILocation(line: 2755, column: 13, scope: !11536)
!11538 = !DILocation(line: 2755, column: 8, scope: !11533)
!11539 = !DILocation(line: 2756, column: 26, scope: !11540)
!11540 = distinct !DILexicalBlock(scope: !11536, file: !3, line: 2755, column: 19)
!11541 = !DILocation(line: 2756, column: 31, scope: !11540)
!11542 = !DILocation(line: 2756, column: 37, scope: !11540)
!11543 = !DILocation(line: 2756, column: 42, scope: !11540)
!11544 = !DILocation(line: 2756, column: 5, scope: !11540)
!11545 = !DILocation(line: 2758, column: 30, scope: !11540)
!11546 = !DILocation(line: 2758, column: 35, scope: !11540)
!11547 = !DILocation(line: 2758, column: 41, scope: !11540)
!11548 = !DILocation(line: 2758, column: 46, scope: !11540)
!11549 = !DILocation(line: 2758, column: 51, scope: !11540)
!11550 = !DILocation(line: 2758, column: 44, scope: !11540)
!11551 = !DILocation(line: 2759, column: 30, scope: !11540)
!11552 = !DILocation(line: 2759, column: 35, scope: !11540)
!11553 = !DILocation(line: 2759, column: 42, scope: !11540)
!11554 = !DILocation(line: 2759, column: 50, scope: !11540)
!11555 = !DILocation(line: 2759, column: 55, scope: !11540)
!11556 = !DILocation(line: 2759, column: 62, scope: !11540)
!11557 = !DILocation(line: 2759, column: 69, scope: !11540)
!11558 = !DILocation(line: 2760, column: 58, scope: !11540)
!11559 = !DILocation(line: 2760, column: 67, scope: !11540)
!11560 = !DILocation(line: 2760, column: 30, scope: !11540)
!11561 = !DILocation(line: 2758, column: 12, scope: !11540)
!11562 = !DILocation(line: 2758, column: 10, scope: !11540)
!11563 = !DILocation(line: 2762, column: 9, scope: !11564)
!11564 = distinct !DILexicalBlock(scope: !11540, file: !3, line: 2762, column: 9)
!11565 = !DILocation(line: 2762, column: 9, scope: !11540)
!11566 = !DILocation(line: 2763, column: 45, scope: !11567)
!11567 = distinct !DILexicalBlock(scope: !11564, file: !3, line: 2762, column: 15)
!11568 = !DILocation(line: 2763, column: 54, scope: !11567)
!11569 = !DILocation(line: 2763, column: 61, scope: !11567)
!11570 = !DILocation(line: 2763, column: 6, scope: !11567)
!11571 = !DILocation(line: 2766, column: 10, scope: !11572)
!11572 = distinct !DILexicalBlock(scope: !11567, file: !3, line: 2766, column: 10)
!11573 = !DILocation(line: 2766, column: 16, scope: !11572)
!11574 = !DILocation(line: 2766, column: 27, scope: !11572)
!11575 = !DILocation(line: 2766, column: 30, scope: !11572)
!11576 = !DILocation(line: 2766, column: 36, scope: !11572)
!11577 = !DILocation(line: 2766, column: 10, scope: !11567)
!11578 = !DILocation(line: 2767, column: 25, scope: !11579)
!11579 = distinct !DILexicalBlock(scope: !11572, file: !3, line: 2766, column: 42)
!11580 = !DILocation(line: 2767, column: 7, scope: !11579)
!11581 = !DILocation(line: 2768, column: 6, scope: !11579)
!11582 = !DILocation(line: 2770, column: 42, scope: !11567)
!11583 = !DILocation(line: 2770, column: 48, scope: !11567)
!11584 = !DILocation(line: 2770, column: 6, scope: !11567)
!11585 = !DILocation(line: 2770, column: 11, scope: !11567)
!11586 = !DILocation(line: 2770, column: 18, scope: !11567)
!11587 = !DILocation(line: 2770, column: 29, scope: !11567)
!11588 = !DILocation(line: 2770, column: 40, scope: !11567)
!11589 = !DILocation(line: 2771, column: 43, scope: !11567)
!11590 = !DILocation(line: 2771, column: 49, scope: !11567)
!11591 = !DILocation(line: 2771, column: 6, scope: !11567)
!11592 = !DILocation(line: 2771, column: 11, scope: !11567)
!11593 = !DILocation(line: 2771, column: 18, scope: !11567)
!11594 = !DILocation(line: 2771, column: 29, scope: !11567)
!11595 = !DILocation(line: 2771, column: 41, scope: !11567)
!11596 = !DILocation(line: 2772, column: 5, scope: !11567)
!11597 = !DILocation(line: 2773, column: 4, scope: !11540)
!11598 = !DILocation(line: 2774, column: 23, scope: !11533)
!11599 = !DILocation(line: 2774, column: 32, scope: !11533)
!11600 = !DILocation(line: 2774, column: 37, scope: !11533)
!11601 = !DILocation(line: 2774, column: 41, scope: !11533)
!11602 = !DILocation(line: 2774, column: 4, scope: !11533)
!11603 = !DILocation(line: 2775, column: 4, scope: !11533)
!11604 = !DILocation(line: 2781, column: 34, scope: !11605)
!11605 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2779, column: 3)
!11606 = !DILocation(line: 2781, column: 43, scope: !11605)
!11607 = !DILocation(line: 2781, column: 48, scope: !11605)
!11608 = !DILocation(line: 2781, column: 11, scope: !11605)
!11609 = !DILocation(line: 2781, column: 9, scope: !11605)
!11610 = !DILocation(line: 2784, column: 39, scope: !11605)
!11611 = !DILocation(line: 2784, column: 48, scope: !11605)
!11612 = !DILocation(line: 2784, column: 55, scope: !11605)
!11613 = !DILocation(line: 2784, column: 64, scope: !11605)
!11614 = !DILocation(line: 2784, column: 71, scope: !11605)
!11615 = !DILocation(line: 2784, column: 4, scope: !11605)
!11616 = !DILocation(line: 2786, column: 23, scope: !11605)
!11617 = !DILocation(line: 2786, column: 32, scope: !11605)
!11618 = !DILocation(line: 2786, column: 37, scope: !11605)
!11619 = !DILocation(line: 2786, column: 41, scope: !11605)
!11620 = !DILocation(line: 2786, column: 4, scope: !11605)
!11621 = !DILocation(line: 2787, column: 4, scope: !11605)
!11622 = !DILocation(line: 2792, column: 38, scope: !11623)
!11623 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2791, column: 3)
!11624 = !DILocation(line: 2792, column: 47, scope: !11623)
!11625 = !DILocation(line: 2792, column: 52, scope: !11623)
!11626 = !DILocation(line: 2792, column: 11, scope: !11623)
!11627 = !DILocation(line: 2792, column: 9, scope: !11623)
!11628 = !DILocation(line: 2794, column: 8, scope: !11629)
!11629 = distinct !DILexicalBlock(scope: !11623, file: !3, line: 2794, column: 8)
!11630 = !DILocation(line: 2794, column: 8, scope: !11623)
!11631 = !DILocalVariable(name: "i", scope: !11632, file: !3, line: 2796, type: !1776)
!11632 = distinct !DILexicalBlock(scope: !11629, file: !3, line: 2794, column: 14)
!11633 = !DILocation(line: 2796, column: 12, scope: !11632)
!11634 = !DILocation(line: 2796, column: 29, scope: !11632)
!11635 = !DILocation(line: 2796, column: 16, scope: !11632)
!11636 = !DILocation(line: 2797, column: 19, scope: !11632)
!11637 = !DILocation(line: 2797, column: 5, scope: !11632)
!11638 = !DILocation(line: 2798, column: 12, scope: !11632)
!11639 = !DILocation(line: 2798, column: 10, scope: !11632)
!11640 = !DILocation(line: 2800, column: 9, scope: !11641)
!11641 = distinct !DILexicalBlock(scope: !11632, file: !3, line: 2800, column: 9)
!11642 = !DILocation(line: 2800, column: 15, scope: !11641)
!11643 = !DILocation(line: 2800, column: 9, scope: !11632)
!11644 = !DILocation(line: 2801, column: 45, scope: !11641)
!11645 = !DILocation(line: 2801, column: 54, scope: !11641)
!11646 = !DILocation(line: 2801, column: 61, scope: !11641)
!11647 = !DILocation(line: 2801, column: 6, scope: !11641)
!11648 = !DILocation(line: 2803, column: 24, scope: !11632)
!11649 = !DILocation(line: 2803, column: 33, scope: !11632)
!11650 = !DILocation(line: 2803, column: 38, scope: !11632)
!11651 = !DILocation(line: 2803, column: 42, scope: !11632)
!11652 = !DILocation(line: 2803, column: 5, scope: !11632)
!11653 = !DILocation(line: 2804, column: 4, scope: !11632)
!11654 = !DILocation(line: 2806, column: 4, scope: !11623)
!11655 = !DILocation(line: 2812, column: 33, scope: !11656)
!11656 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 2810, column: 3)
!11657 = !DILocation(line: 2812, column: 42, scope: !11656)
!11658 = !DILocation(line: 2812, column: 47, scope: !11656)
!11659 = !DILocation(line: 2812, column: 11, scope: !11656)
!11660 = !DILocation(line: 2812, column: 9, scope: !11656)
!11661 = !DILocation(line: 2814, column: 23, scope: !11656)
!11662 = !DILocation(line: 2814, column: 32, scope: !11656)
!11663 = !DILocation(line: 2814, column: 37, scope: !11656)
!11664 = !DILocation(line: 2814, column: 41, scope: !11656)
!11665 = !DILocation(line: 2814, column: 4, scope: !11656)
!11666 = !DILocation(line: 2815, column: 4, scope: !11656)
!11667 = !DILocation(line: 2819, column: 6, scope: !11668)
!11668 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 2819, column: 6)
!11669 = !DILocation(line: 2819, column: 6, scope: !11317)
!11670 = !DILocation(line: 2820, column: 33, scope: !11668)
!11671 = !DILocation(line: 2820, column: 42, scope: !11668)
!11672 = !DILocation(line: 2820, column: 49, scope: !11668)
!11673 = !DILocation(line: 2820, column: 3, scope: !11668)
!11674 = !DILocation(line: 2822, column: 9, scope: !11317)
!11675 = !DILocation(line: 2822, column: 2, scope: !11317)
!11676 = distinct !DISubprogram(name: "input_preprocess", scope: !3, file: !3, line: 1992, type: !11677, scopeLine: 1994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!11677 = !DISubroutineType(types: !11678)
!11678 = !{!1776, !1892, !204, !193, !1776, !2121, !2121}
!11679 = !DILocalVariable(name: "context", arg: 1, scope: !11676, file: !3, line: 1992, type: !1892)
!11680 = !DILocation(line: 1992, column: 53, scope: !11676)
!11681 = !DILocalVariable(name: "seq", arg: 2, scope: !11676, file: !3, line: 1992, type: !204)
!11682 = !DILocation(line: 1992, column: 72, scope: !11676)
!11683 = !DILocalVariable(name: "cfra", arg: 3, scope: !11676, file: !3, line: 1992, type: !193)
!11684 = !DILocation(line: 1992, column: 83, scope: !11676)
!11685 = !DILocalVariable(name: "ibuf", arg: 4, scope: !11676, file: !3, line: 1992, type: !1776)
!11686 = !DILocation(line: 1992, column: 96, scope: !11676)
!11687 = !DILocalVariable(name: "is_proxy_image", arg: 5, scope: !11676, file: !3, line: 1993, type: !2121)
!11688 = !DILocation(line: 1993, column: 43, scope: !11676)
!11689 = !DILocalVariable(name: "is_preprocessed", arg: 6, scope: !11676, file: !3, line: 1993, type: !2121)
!11690 = !DILocation(line: 1993, column: 70, scope: !11676)
!11691 = !DILocalVariable(name: "scene", scope: !11676, file: !3, line: 1995, type: !1744)
!11692 = !DILocation(line: 1995, column: 9, scope: !11676)
!11693 = !DILocation(line: 1995, column: 17, scope: !11676)
!11694 = !DILocation(line: 1995, column: 26, scope: !11676)
!11695 = !DILocalVariable(name: "mul", scope: !11676, file: !3, line: 1996, type: !193)
!11696 = !DILocation(line: 1996, column: 8, scope: !11676)
!11697 = !DILocation(line: 1998, column: 28, scope: !11676)
!11698 = !DILocation(line: 1998, column: 9, scope: !11676)
!11699 = !DILocation(line: 1998, column: 7, scope: !11676)
!11700 = !DILocation(line: 2000, column: 7, scope: !11701)
!11701 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2000, column: 6)
!11702 = !DILocation(line: 2000, column: 12, scope: !11701)
!11703 = !DILocation(line: 2000, column: 17, scope: !11701)
!11704 = !DILocation(line: 2000, column: 32, scope: !11701)
!11705 = !DILocation(line: 2001, column: 7, scope: !11701)
!11706 = !DILocation(line: 2000, column: 6, scope: !11676)
!11707 = !DILocation(line: 2003, column: 15, scope: !11708)
!11708 = distinct !DILexicalBlock(scope: !11701, file: !3, line: 2002, column: 2)
!11709 = !DILocation(line: 2003, column: 3, scope: !11708)
!11710 = !DILocation(line: 2004, column: 2, scope: !11708)
!11711 = !DILocation(line: 2006, column: 6, scope: !11712)
!11712 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2006, column: 6)
!11713 = !DILocation(line: 2006, column: 11, scope: !11712)
!11714 = !DILocation(line: 2006, column: 16, scope: !11712)
!11715 = !DILocation(line: 2006, column: 6, scope: !11676)
!11716 = !DILocalVariable(name: "c", scope: !11717, file: !3, line: 2007, type: !276)
!11717 = distinct !DILexicalBlock(scope: !11712, file: !3, line: 2006, column: 54)
!11718 = !DILocation(line: 2007, column: 13, scope: !11717)
!11719 = !DILocalVariable(name: "t", scope: !11717, file: !3, line: 2008, type: !285)
!11720 = !DILocation(line: 2008, column: 18, scope: !11717)
!11721 = !DILocalVariable(name: "sx", scope: !11717, file: !3, line: 2009, type: !45)
!11722 = !DILocation(line: 2009, column: 7, scope: !11717)
!11723 = !DILocalVariable(name: "sy", scope: !11717, file: !3, line: 2009, type: !45)
!11724 = !DILocation(line: 2009, column: 11, scope: !11717)
!11725 = !DILocalVariable(name: "dx", scope: !11717, file: !3, line: 2009, type: !45)
!11726 = !DILocation(line: 2009, column: 15, scope: !11717)
!11727 = !DILocalVariable(name: "dy", scope: !11717, file: !3, line: 2009, type: !45)
!11728 = !DILocation(line: 2009, column: 19, scope: !11717)
!11729 = !DILocation(line: 2011, column: 7, scope: !11730)
!11730 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2011, column: 7)
!11731 = !DILocation(line: 2011, column: 7, scope: !11717)
!11732 = !DILocalVariable(name: "f", scope: !11733, file: !3, line: 2012, type: !1755)
!11733 = distinct !DILexicalBlock(scope: !11730, file: !3, line: 2011, column: 23)
!11734 = !DILocation(line: 2012, column: 11, scope: !11733)
!11735 = !DILocation(line: 2012, column: 46, scope: !11733)
!11736 = !DILocation(line: 2012, column: 55, scope: !11733)
!11737 = !DILocation(line: 2012, column: 15, scope: !11733)
!11738 = !DILocation(line: 2014, column: 8, scope: !11739)
!11739 = distinct !DILexicalBlock(scope: !11733, file: !3, line: 2014, column: 8)
!11740 = !DILocation(line: 2014, column: 10, scope: !11739)
!11741 = !DILocation(line: 2014, column: 8, scope: !11733)
!11742 = !DILocation(line: 2015, column: 24, scope: !11743)
!11743 = distinct !DILexicalBlock(scope: !11739, file: !3, line: 2014, column: 18)
!11744 = !DILocation(line: 2015, column: 30, scope: !11743)
!11745 = !DILocation(line: 2015, column: 36, scope: !11743)
!11746 = !DILocation(line: 2015, column: 40, scope: !11743)
!11747 = !DILocation(line: 2015, column: 38, scope: !11743)
!11748 = !DILocation(line: 2015, column: 43, scope: !11743)
!11749 = !DILocation(line: 2015, column: 49, scope: !11743)
!11750 = !DILocation(line: 2015, column: 53, scope: !11743)
!11751 = !DILocation(line: 2015, column: 51, scope: !11743)
!11752 = !DILocation(line: 2015, column: 5, scope: !11743)
!11753 = !DILocation(line: 2016, column: 4, scope: !11743)
!11754 = !DILocation(line: 2017, column: 3, scope: !11733)
!11755 = !DILocation(line: 2019, column: 7, scope: !11756)
!11756 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2019, column: 7)
!11757 = !DILocation(line: 2019, column: 12, scope: !11756)
!11758 = !DILocation(line: 2019, column: 17, scope: !11756)
!11759 = !DILocation(line: 2019, column: 32, scope: !11756)
!11760 = !DILocation(line: 2019, column: 35, scope: !11756)
!11761 = !DILocation(line: 2019, column: 40, scope: !11756)
!11762 = !DILocation(line: 2019, column: 47, scope: !11756)
!11763 = !DILocation(line: 2019, column: 7, scope: !11717)
!11764 = !DILocation(line: 2020, column: 9, scope: !11765)
!11765 = distinct !DILexicalBlock(scope: !11756, file: !3, line: 2019, column: 53)
!11766 = !DILocation(line: 2020, column: 14, scope: !11765)
!11767 = !DILocation(line: 2020, column: 21, scope: !11765)
!11768 = !DILocation(line: 2020, column: 8, scope: !11765)
!11769 = !DILocation(line: 2021, column: 3, scope: !11765)
!11770 = !DILocation(line: 2022, column: 7, scope: !11771)
!11771 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2022, column: 7)
!11772 = !DILocation(line: 2022, column: 12, scope: !11771)
!11773 = !DILocation(line: 2022, column: 17, scope: !11771)
!11774 = !DILocation(line: 2022, column: 37, scope: !11771)
!11775 = !DILocation(line: 2022, column: 40, scope: !11771)
!11776 = !DILocation(line: 2022, column: 45, scope: !11771)
!11777 = !DILocation(line: 2022, column: 52, scope: !11771)
!11778 = !DILocation(line: 2022, column: 7, scope: !11717)
!11779 = !DILocation(line: 2023, column: 9, scope: !11780)
!11780 = distinct !DILexicalBlock(scope: !11771, file: !3, line: 2022, column: 63)
!11781 = !DILocation(line: 2023, column: 14, scope: !11780)
!11782 = !DILocation(line: 2023, column: 21, scope: !11780)
!11783 = !DILocation(line: 2023, column: 8, scope: !11780)
!11784 = !DILocation(line: 2024, column: 3, scope: !11780)
!11785 = !DILocation(line: 2026, column: 7, scope: !11786)
!11786 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2026, column: 7)
!11787 = !DILocation(line: 2026, column: 7, scope: !11717)
!11788 = !DILocalVariable(name: "xscale", scope: !11789, file: !3, line: 2027, type: !1755)
!11789 = distinct !DILexicalBlock(scope: !11786, file: !3, line: 2026, column: 24)
!11790 = !DILocation(line: 2027, column: 11, scope: !11789)
!11791 = !DILocation(line: 2027, column: 20, scope: !11789)
!11792 = !DILocation(line: 2027, column: 27, scope: !11789)
!11793 = !DILocation(line: 2027, column: 29, scope: !11789)
!11794 = !DILocation(line: 2027, column: 45, scope: !11789)
!11795 = !DILocation(line: 2027, column: 54, scope: !11789)
!11796 = !DILocation(line: 2027, column: 37, scope: !11789)
!11797 = !DILocation(line: 2027, column: 70, scope: !11789)
!11798 = !DILocation(line: 2027, column: 77, scope: !11789)
!11799 = !DILocation(line: 2027, column: 79, scope: !11789)
!11800 = !DILocation(line: 2027, column: 62, scope: !11789)
!11801 = !DILocation(line: 2027, column: 60, scope: !11789)
!11802 = !DILocalVariable(name: "yscale", scope: !11789, file: !3, line: 2028, type: !1755)
!11803 = !DILocation(line: 2028, column: 11, scope: !11789)
!11804 = !DILocation(line: 2028, column: 20, scope: !11789)
!11805 = !DILocation(line: 2028, column: 27, scope: !11789)
!11806 = !DILocation(line: 2028, column: 29, scope: !11789)
!11807 = !DILocation(line: 2028, column: 45, scope: !11789)
!11808 = !DILocation(line: 2028, column: 54, scope: !11789)
!11809 = !DILocation(line: 2028, column: 37, scope: !11789)
!11810 = !DILocation(line: 2028, column: 70, scope: !11789)
!11811 = !DILocation(line: 2028, column: 77, scope: !11789)
!11812 = !DILocation(line: 2028, column: 79, scope: !11789)
!11813 = !DILocation(line: 2028, column: 62, scope: !11789)
!11814 = !DILocation(line: 2028, column: 60, scope: !11789)
!11815 = !DILocation(line: 2029, column: 8, scope: !11816)
!11816 = distinct !DILexicalBlock(scope: !11789, file: !3, line: 2029, column: 8)
!11817 = !DILocation(line: 2029, column: 13, scope: !11816)
!11818 = !DILocation(line: 2029, column: 18, scope: !11816)
!11819 = !DILocation(line: 2029, column: 8, scope: !11789)
!11820 = !DILocation(line: 2030, column: 15, scope: !11821)
!11821 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 2029, column: 39)
!11822 = !DILocation(line: 2030, column: 7, scope: !11821)
!11823 = !DILocation(line: 2030, column: 12, scope: !11821)
!11824 = !DILocation(line: 2031, column: 15, scope: !11821)
!11825 = !DILocation(line: 2031, column: 7, scope: !11821)
!11826 = !DILocation(line: 2031, column: 12, scope: !11821)
!11827 = !DILocation(line: 2032, column: 4, scope: !11821)
!11828 = !DILocation(line: 2033, column: 8, scope: !11829)
!11829 = distinct !DILexicalBlock(scope: !11789, file: !3, line: 2033, column: 8)
!11830 = !DILocation(line: 2033, column: 13, scope: !11829)
!11831 = !DILocation(line: 2033, column: 18, scope: !11829)
!11832 = !DILocation(line: 2033, column: 8, scope: !11789)
!11833 = !DILocation(line: 2034, column: 15, scope: !11834)
!11834 = distinct !DILexicalBlock(scope: !11829, file: !3, line: 2033, column: 34)
!11835 = !DILocation(line: 2034, column: 7, scope: !11834)
!11836 = !DILocation(line: 2034, column: 12, scope: !11834)
!11837 = !DILocation(line: 2035, column: 16, scope: !11834)
!11838 = !DILocation(line: 2035, column: 7, scope: !11834)
!11839 = !DILocation(line: 2035, column: 13, scope: !11834)
!11840 = !DILocation(line: 2036, column: 14, scope: !11834)
!11841 = !DILocation(line: 2036, column: 7, scope: !11834)
!11842 = !DILocation(line: 2036, column: 11, scope: !11834)
!11843 = !DILocation(line: 2037, column: 17, scope: !11834)
!11844 = !DILocation(line: 2037, column: 7, scope: !11834)
!11845 = !DILocation(line: 2037, column: 14, scope: !11834)
!11846 = !DILocation(line: 2038, column: 4, scope: !11834)
!11847 = !DILocation(line: 2039, column: 3, scope: !11789)
!11848 = !DILocation(line: 2041, column: 8, scope: !11717)
!11849 = !DILocation(line: 2041, column: 14, scope: !11717)
!11850 = !DILocation(line: 2041, column: 20, scope: !11717)
!11851 = !DILocation(line: 2041, column: 16, scope: !11717)
!11852 = !DILocation(line: 2041, column: 29, scope: !11717)
!11853 = !DILocation(line: 2041, column: 25, scope: !11717)
!11854 = !DILocation(line: 2041, column: 6, scope: !11717)
!11855 = !DILocation(line: 2042, column: 8, scope: !11717)
!11856 = !DILocation(line: 2042, column: 14, scope: !11717)
!11857 = !DILocation(line: 2042, column: 20, scope: !11717)
!11858 = !DILocation(line: 2042, column: 16, scope: !11717)
!11859 = !DILocation(line: 2042, column: 28, scope: !11717)
!11860 = !DILocation(line: 2042, column: 24, scope: !11717)
!11861 = !DILocation(line: 2042, column: 6, scope: !11717)
!11862 = !DILocation(line: 2044, column: 7, scope: !11863)
!11863 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2044, column: 7)
!11864 = !DILocation(line: 2044, column: 12, scope: !11863)
!11865 = !DILocation(line: 2044, column: 17, scope: !11863)
!11866 = !DILocation(line: 2044, column: 7, scope: !11717)
!11867 = !DILocation(line: 2045, column: 8, scope: !11868)
!11868 = distinct !DILexicalBlock(scope: !11869, file: !3, line: 2045, column: 8)
!11869 = distinct !DILexicalBlock(scope: !11863, file: !3, line: 2044, column: 38)
!11870 = !DILocation(line: 2045, column: 8, scope: !11869)
!11871 = !DILocation(line: 2046, column: 10, scope: !11872)
!11872 = distinct !DILexicalBlock(scope: !11868, file: !3, line: 2045, column: 25)
!11873 = !DILocation(line: 2046, column: 19, scope: !11872)
!11874 = !DILocation(line: 2046, column: 8, scope: !11872)
!11875 = !DILocation(line: 2047, column: 10, scope: !11872)
!11876 = !DILocation(line: 2047, column: 19, scope: !11872)
!11877 = !DILocation(line: 2047, column: 8, scope: !11872)
!11878 = !DILocation(line: 2048, column: 4, scope: !11872)
!11879 = !DILocation(line: 2050, column: 10, scope: !11880)
!11880 = distinct !DILexicalBlock(scope: !11868, file: !3, line: 2049, column: 9)
!11881 = !DILocation(line: 2050, column: 17, scope: !11880)
!11882 = !DILocation(line: 2050, column: 19, scope: !11880)
!11883 = !DILocation(line: 2050, column: 8, scope: !11880)
!11884 = !DILocation(line: 2051, column: 10, scope: !11880)
!11885 = !DILocation(line: 2051, column: 17, scope: !11880)
!11886 = !DILocation(line: 2051, column: 19, scope: !11880)
!11887 = !DILocation(line: 2051, column: 8, scope: !11880)
!11888 = !DILocation(line: 2053, column: 3, scope: !11869)
!11889 = !DILocation(line: 2055, column: 9, scope: !11890)
!11890 = distinct !DILexicalBlock(scope: !11863, file: !3, line: 2054, column: 8)
!11891 = !DILocation(line: 2055, column: 7, scope: !11890)
!11892 = !DILocation(line: 2056, column: 9, scope: !11890)
!11893 = !DILocation(line: 2056, column: 7, scope: !11890)
!11894 = !DILocation(line: 2059, column: 9, scope: !11895)
!11895 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 2059, column: 7)
!11896 = !DILocation(line: 2059, column: 18, scope: !11895)
!11897 = !DILocation(line: 2059, column: 14, scope: !11895)
!11898 = !DILocation(line: 2059, column: 28, scope: !11895)
!11899 = !DILocation(line: 2059, column: 34, scope: !11895)
!11900 = !DILocation(line: 2059, column: 25, scope: !11895)
!11901 = !DILocation(line: 2059, column: 36, scope: !11895)
!11902 = !DILocation(line: 2060, column: 9, scope: !11895)
!11903 = !DILocation(line: 2060, column: 18, scope: !11895)
!11904 = !DILocation(line: 2060, column: 14, scope: !11895)
!11905 = !DILocation(line: 2060, column: 28, scope: !11895)
!11906 = !DILocation(line: 2060, column: 34, scope: !11895)
!11907 = !DILocation(line: 2060, column: 25, scope: !11895)
!11908 = !DILocation(line: 2060, column: 36, scope: !11895)
!11909 = !DILocation(line: 2061, column: 9, scope: !11895)
!11910 = !DILocation(line: 2061, column: 17, scope: !11895)
!11911 = !DILocation(line: 2061, column: 14, scope: !11895)
!11912 = !DILocation(line: 2061, column: 20, scope: !11895)
!11913 = !DILocation(line: 2061, column: 25, scope: !11895)
!11914 = !DILocation(line: 2061, column: 33, scope: !11895)
!11915 = !DILocation(line: 2061, column: 30, scope: !11895)
!11916 = !DILocation(line: 2059, column: 7, scope: !11717)
!11917 = !DILocation(line: 2063, column: 20, scope: !11918)
!11918 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 2062, column: 3)
!11919 = !DILocation(line: 2063, column: 4, scope: !11918)
!11920 = !DILocation(line: 2064, column: 3, scope: !11918)
!11921 = !DILocalVariable(name: "i", scope: !11922, file: !3, line: 2066, type: !1776)
!11922 = distinct !DILexicalBlock(scope: !11895, file: !3, line: 2065, column: 8)
!11923 = !DILocation(line: 2066, column: 11, scope: !11922)
!11924 = !DILocation(line: 2066, column: 30, scope: !11922)
!11925 = !DILocation(line: 2066, column: 34, scope: !11922)
!11926 = !DILocation(line: 2066, column: 42, scope: !11922)
!11927 = !DILocation(line: 2066, column: 48, scope: !11922)
!11928 = !DILocation(line: 2066, column: 15, scope: !11922)
!11929 = !DILocation(line: 2068, column: 16, scope: !11922)
!11930 = !DILocation(line: 2068, column: 19, scope: !11922)
!11931 = !DILocation(line: 2068, column: 27, scope: !11922)
!11932 = !DILocation(line: 2068, column: 35, scope: !11922)
!11933 = !DILocation(line: 2068, column: 43, scope: !11922)
!11934 = !DILocation(line: 2068, column: 51, scope: !11922)
!11935 = !DILocation(line: 2068, column: 59, scope: !11922)
!11936 = !DILocation(line: 2068, column: 63, scope: !11922)
!11937 = !DILocation(line: 2068, column: 4, scope: !11922)
!11938 = !DILocation(line: 2069, column: 34, scope: !11922)
!11939 = !DILocation(line: 2069, column: 41, scope: !11922)
!11940 = !DILocation(line: 2069, column: 4, scope: !11922)
!11941 = !DILocation(line: 2071, column: 18, scope: !11922)
!11942 = !DILocation(line: 2071, column: 4, scope: !11922)
!11943 = !DILocation(line: 2073, column: 11, scope: !11922)
!11944 = !DILocation(line: 2073, column: 9, scope: !11922)
!11945 = !DILocation(line: 2075, column: 2, scope: !11717)
!11946 = !DILocation(line: 2077, column: 6, scope: !11947)
!11947 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2077, column: 6)
!11948 = !DILocation(line: 2077, column: 11, scope: !11947)
!11949 = !DILocation(line: 2077, column: 16, scope: !11947)
!11950 = !DILocation(line: 2077, column: 6, scope: !11676)
!11951 = !DILocation(line: 2078, column: 13, scope: !11952)
!11952 = distinct !DILexicalBlock(scope: !11947, file: !3, line: 2077, column: 29)
!11953 = !DILocation(line: 2078, column: 3, scope: !11952)
!11954 = !DILocation(line: 2079, column: 2, scope: !11952)
!11955 = !DILocation(line: 2081, column: 6, scope: !11956)
!11956 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2081, column: 6)
!11957 = !DILocation(line: 2081, column: 11, scope: !11956)
!11958 = !DILocation(line: 2081, column: 16, scope: !11956)
!11959 = !DILocation(line: 2081, column: 6, scope: !11676)
!11960 = !DILocation(line: 2082, column: 13, scope: !11961)
!11961 = distinct !DILexicalBlock(scope: !11956, file: !3, line: 2081, column: 29)
!11962 = !DILocation(line: 2082, column: 3, scope: !11961)
!11963 = !DILocation(line: 2083, column: 2, scope: !11961)
!11964 = !DILocation(line: 2085, column: 6, scope: !11965)
!11965 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2085, column: 6)
!11966 = !DILocation(line: 2085, column: 11, scope: !11965)
!11967 = !DILocation(line: 2085, column: 15, scope: !11965)
!11968 = !DILocation(line: 2085, column: 6, scope: !11676)
!11969 = !DILocation(line: 2086, column: 18, scope: !11970)
!11970 = distinct !DILexicalBlock(scope: !11965, file: !3, line: 2085, column: 24)
!11971 = !DILocation(line: 2086, column: 24, scope: !11970)
!11972 = !DILocation(line: 2086, column: 29, scope: !11970)
!11973 = !DILocation(line: 2086, column: 3, scope: !11970)
!11974 = !DILocation(line: 2087, column: 2, scope: !11970)
!11975 = !DILocation(line: 2089, column: 8, scope: !11676)
!11976 = !DILocation(line: 2089, column: 13, scope: !11676)
!11977 = !DILocation(line: 2089, column: 6, scope: !11676)
!11978 = !DILocation(line: 2091, column: 6, scope: !11979)
!11979 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2091, column: 6)
!11980 = !DILocation(line: 2091, column: 11, scope: !11979)
!11981 = !DILocation(line: 2091, column: 22, scope: !11979)
!11982 = !DILocation(line: 2091, column: 6, scope: !11676)
!11983 = !DILocation(line: 2092, column: 10, scope: !11984)
!11984 = distinct !DILexicalBlock(scope: !11979, file: !3, line: 2091, column: 44)
!11985 = !DILocation(line: 2092, column: 15, scope: !11984)
!11986 = !DILocation(line: 2092, column: 29, scope: !11984)
!11987 = !DILocation(line: 2092, column: 7, scope: !11984)
!11988 = !DILocation(line: 2093, column: 2, scope: !11984)
!11989 = !DILocation(line: 2095, column: 6, scope: !11990)
!11990 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2095, column: 6)
!11991 = !DILocation(line: 2095, column: 11, scope: !11990)
!11992 = !DILocation(line: 2095, column: 16, scope: !11990)
!11993 = !DILocation(line: 2095, column: 6, scope: !11676)
!11994 = !DILocation(line: 2096, column: 8, scope: !11995)
!11995 = distinct !DILexicalBlock(scope: !11996, file: !3, line: 2096, column: 7)
!11996 = distinct !DILexicalBlock(scope: !11990, file: !3, line: 2095, column: 34)
!11997 = !DILocation(line: 2096, column: 14, scope: !11995)
!11998 = !DILocation(line: 2096, column: 7, scope: !11996)
!11999 = !DILocation(line: 2097, column: 43, scope: !12000)
!12000 = distinct !DILexicalBlock(scope: !11995, file: !3, line: 2096, column: 26)
!12001 = !DILocation(line: 2097, column: 50, scope: !12000)
!12002 = !DILocation(line: 2097, column: 4, scope: !12000)
!12003 = !DILocation(line: 2098, column: 3, scope: !12000)
!12004 = !DILocation(line: 2100, column: 7, scope: !12005)
!12005 = distinct !DILexicalBlock(scope: !11996, file: !3, line: 2100, column: 7)
!12006 = !DILocation(line: 2100, column: 13, scope: !12005)
!12007 = !DILocation(line: 2100, column: 7, scope: !11996)
!12008 = !DILocation(line: 2101, column: 22, scope: !12009)
!12009 = distinct !DILexicalBlock(scope: !12005, file: !3, line: 2100, column: 19)
!12010 = !DILocation(line: 2101, column: 4, scope: !12009)
!12011 = !DILocation(line: 2102, column: 3, scope: !12009)
!12012 = !DILocation(line: 2103, column: 2, scope: !11996)
!12013 = !DILocation(line: 2105, column: 6, scope: !12014)
!12014 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2105, column: 6)
!12015 = !DILocation(line: 2105, column: 10, scope: !12014)
!12016 = !DILocation(line: 2105, column: 6, scope: !11676)
!12017 = !DILocation(line: 2106, column: 12, scope: !12018)
!12018 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 2105, column: 19)
!12019 = !DILocation(line: 2106, column: 18, scope: !12018)
!12020 = !DILocation(line: 2106, column: 3, scope: !12018)
!12021 = !DILocation(line: 2107, column: 2, scope: !12018)
!12022 = !DILocation(line: 2109, column: 6, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2109, column: 6)
!12024 = !DILocation(line: 2109, column: 12, scope: !12023)
!12025 = !DILocation(line: 2109, column: 17, scope: !12023)
!12026 = !DILocation(line: 2109, column: 26, scope: !12023)
!12027 = !DILocation(line: 2109, column: 14, scope: !12023)
!12028 = !DILocation(line: 2109, column: 32, scope: !12023)
!12029 = !DILocation(line: 2109, column: 35, scope: !12023)
!12030 = !DILocation(line: 2109, column: 41, scope: !12023)
!12031 = !DILocation(line: 2109, column: 46, scope: !12023)
!12032 = !DILocation(line: 2109, column: 55, scope: !12023)
!12033 = !DILocation(line: 2109, column: 43, scope: !12023)
!12034 = !DILocation(line: 2109, column: 6, scope: !11676)
!12035 = !DILocation(line: 2110, column: 7, scope: !12036)
!12036 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 2110, column: 7)
!12037 = distinct !DILexicalBlock(scope: !12023, file: !3, line: 2109, column: 62)
!12038 = !DILocation(line: 2110, column: 14, scope: !12036)
!12039 = !DILocation(line: 2110, column: 16, scope: !12036)
!12040 = !DILocation(line: 2110, column: 21, scope: !12036)
!12041 = !DILocation(line: 2110, column: 7, scope: !12037)
!12042 = !DILocation(line: 2111, column: 19, scope: !12043)
!12043 = distinct !DILexicalBlock(scope: !12036, file: !3, line: 2110, column: 30)
!12044 = !DILocation(line: 2111, column: 32, scope: !12043)
!12045 = !DILocation(line: 2111, column: 41, scope: !12043)
!12046 = !DILocation(line: 2111, column: 25, scope: !12043)
!12047 = !DILocation(line: 2111, column: 55, scope: !12043)
!12048 = !DILocation(line: 2111, column: 64, scope: !12043)
!12049 = !DILocation(line: 2111, column: 48, scope: !12043)
!12050 = !DILocation(line: 2111, column: 4, scope: !12043)
!12051 = !DILocation(line: 2112, column: 3, scope: !12043)
!12052 = !DILocation(line: 2114, column: 23, scope: !12053)
!12053 = distinct !DILexicalBlock(scope: !12036, file: !3, line: 2113, column: 8)
!12054 = !DILocation(line: 2114, column: 36, scope: !12053)
!12055 = !DILocation(line: 2114, column: 45, scope: !12053)
!12056 = !DILocation(line: 2114, column: 29, scope: !12053)
!12057 = !DILocation(line: 2114, column: 59, scope: !12053)
!12058 = !DILocation(line: 2114, column: 68, scope: !12053)
!12059 = !DILocation(line: 2114, column: 52, scope: !12053)
!12060 = !DILocation(line: 2114, column: 4, scope: !12053)
!12061 = !DILocation(line: 2116, column: 2, scope: !12037)
!12062 = !DILocation(line: 2118, column: 6, scope: !12063)
!12063 = distinct !DILexicalBlock(scope: !11676, file: !3, line: 2118, column: 6)
!12064 = !DILocation(line: 2118, column: 11, scope: !12063)
!12065 = !DILocation(line: 2118, column: 21, scope: !12063)
!12066 = !DILocation(line: 2118, column: 6, scope: !11676)
!12067 = !DILocalVariable(name: "ibuf_new", scope: !12068, file: !3, line: 2119, type: !1776)
!12068 = distinct !DILexicalBlock(scope: !12063, file: !3, line: 2118, column: 28)
!12069 = !DILocation(line: 2119, column: 10, scope: !12068)
!12070 = !DILocation(line: 2119, column: 55, scope: !12068)
!12071 = !DILocation(line: 2119, column: 64, scope: !12068)
!12072 = !DILocation(line: 2119, column: 69, scope: !12068)
!12073 = !DILocation(line: 2119, column: 75, scope: !12068)
!12074 = !DILocation(line: 2119, column: 21, scope: !12068)
!12075 = !DILocation(line: 2121, column: 7, scope: !12076)
!12076 = distinct !DILexicalBlock(scope: !12068, file: !3, line: 2121, column: 7)
!12077 = !DILocation(line: 2121, column: 19, scope: !12076)
!12078 = !DILocation(line: 2121, column: 16, scope: !12076)
!12079 = !DILocation(line: 2121, column: 7, scope: !12068)
!12080 = !DILocation(line: 2122, column: 18, scope: !12081)
!12081 = distinct !DILexicalBlock(scope: !12076, file: !3, line: 2121, column: 25)
!12082 = !DILocation(line: 2122, column: 4, scope: !12081)
!12083 = !DILocation(line: 2123, column: 11, scope: !12081)
!12084 = !DILocation(line: 2123, column: 9, scope: !12081)
!12085 = !DILocation(line: 2124, column: 3, scope: !12081)
!12086 = !DILocation(line: 2125, column: 2, scope: !12068)
!12087 = !DILocation(line: 2127, column: 9, scope: !11676)
!12088 = !DILocation(line: 2127, column: 2, scope: !11676)
!12089 = distinct !DISubprogram(name: "seq_rendersize_to_proxysize", scope: !3, file: !3, line: 1309, type: !12090, scopeLine: 1310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12090 = !DISubroutineType(types: !12091)
!12091 = !{!11176, !45}
!12092 = !DILocalVariable(name: "size", arg: 1, scope: !12089, file: !3, line: 1309, type: !45)
!12093 = !DILocation(line: 1309, column: 55, scope: !12089)
!12094 = !DILocation(line: 1311, column: 6, scope: !12095)
!12095 = distinct !DILexicalBlock(scope: !12089, file: !3, line: 1311, column: 6)
!12096 = !DILocation(line: 1311, column: 11, scope: !12095)
!12097 = !DILocation(line: 1311, column: 6, scope: !12089)
!12098 = !DILocation(line: 1312, column: 3, scope: !12099)
!12099 = distinct !DILexicalBlock(scope: !12095, file: !3, line: 1311, column: 19)
!12100 = !DILocation(line: 1314, column: 6, scope: !12101)
!12101 = distinct !DILexicalBlock(scope: !12089, file: !3, line: 1314, column: 6)
!12102 = !DILocation(line: 1314, column: 11, scope: !12101)
!12103 = !DILocation(line: 1314, column: 6, scope: !12089)
!12104 = !DILocation(line: 1315, column: 3, scope: !12105)
!12105 = distinct !DILexicalBlock(scope: !12101, file: !3, line: 1314, column: 18)
!12106 = !DILocation(line: 1317, column: 6, scope: !12107)
!12107 = distinct !DILexicalBlock(scope: !12089, file: !3, line: 1317, column: 6)
!12108 = !DILocation(line: 1317, column: 11, scope: !12107)
!12109 = !DILocation(line: 1317, column: 6, scope: !12089)
!12110 = !DILocation(line: 1318, column: 3, scope: !12111)
!12111 = distinct !DILexicalBlock(scope: !12107, file: !3, line: 1317, column: 18)
!12112 = !DILocation(line: 1320, column: 6, scope: !12113)
!12113 = distinct !DILexicalBlock(scope: !12089, file: !3, line: 1320, column: 6)
!12114 = !DILocation(line: 1320, column: 11, scope: !12113)
!12115 = !DILocation(line: 1320, column: 6, scope: !12089)
!12116 = !DILocation(line: 1321, column: 3, scope: !12117)
!12117 = distinct !DILexicalBlock(scope: !12113, file: !3, line: 1320, column: 18)
!12118 = !DILocation(line: 1323, column: 2, scope: !12089)
!12119 = !DILocation(line: 1324, column: 1, scope: !12089)
!12120 = distinct !DISubprogram(name: "seq_render_effect_strip_impl", scope: !3, file: !3, line: 2254, type: !5290, scopeLine: 2255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12121 = !DILocalVariable(name: "context", arg: 1, scope: !12120, file: !3, line: 2254, type: !1892)
!12122 = !DILocation(line: 2254, column: 65, scope: !12120)
!12123 = !DILocalVariable(name: "seq", arg: 2, scope: !12120, file: !3, line: 2254, type: !204)
!12124 = !DILocation(line: 2254, column: 84, scope: !12120)
!12125 = !DILocalVariable(name: "cfra", arg: 3, scope: !12120, file: !3, line: 2254, type: !193)
!12126 = !DILocation(line: 2254, column: 95, scope: !12120)
!12127 = !DILocalVariable(name: "scene", scope: !12120, file: !3, line: 2256, type: !1744)
!12128 = !DILocation(line: 2256, column: 9, scope: !12120)
!12129 = !DILocation(line: 2256, column: 17, scope: !12120)
!12130 = !DILocation(line: 2256, column: 26, scope: !12120)
!12131 = !DILocalVariable(name: "fac", scope: !12120, file: !3, line: 2257, type: !193)
!12132 = !DILocation(line: 2257, column: 8, scope: !12120)
!12133 = !DILocalVariable(name: "facf", scope: !12120, file: !3, line: 2257, type: !193)
!12134 = !DILocation(line: 2257, column: 13, scope: !12120)
!12135 = !DILocalVariable(name: "early_out", scope: !12120, file: !3, line: 2258, type: !45)
!12136 = !DILocation(line: 2258, column: 6, scope: !12120)
!12137 = !DILocalVariable(name: "i", scope: !12120, file: !3, line: 2259, type: !45)
!12138 = !DILocation(line: 2259, column: 6, scope: !12120)
!12139 = !DILocalVariable(name: "sh", scope: !12120, file: !3, line: 2260, type: !1858)
!12140 = !DILocation(line: 2260, column: 25, scope: !12120)
!12141 = !DILocation(line: 2260, column: 54, scope: !12120)
!12142 = !DILocation(line: 2260, column: 30, scope: !12120)
!12143 = !DILocalVariable(name: "fcu", scope: !12120, file: !3, line: 2261, type: !7615)
!12144 = !DILocation(line: 2261, column: 10, scope: !12120)
!12145 = !DILocalVariable(name: "ibuf", scope: !12120, file: !3, line: 2262, type: !12146)
!12146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1776, size: 192, elements: !297)
!12147 = !DILocation(line: 2262, column: 9, scope: !12120)
!12148 = !DILocalVariable(name: "input", scope: !12120, file: !3, line: 2263, type: !12149)
!12149 = !DICompositeType(tag: DW_TAG_array_type, baseType: !204, size: 192, elements: !297)
!12150 = !DILocation(line: 2263, column: 12, scope: !12120)
!12151 = !DILocalVariable(name: "out", scope: !12120, file: !3, line: 2264, type: !1776)
!12152 = !DILocation(line: 2264, column: 9, scope: !12120)
!12153 = !DILocation(line: 2266, column: 22, scope: !12120)
!12154 = !DILocation(line: 2266, column: 30, scope: !12120)
!12155 = !DILocation(line: 2266, column: 12, scope: !12120)
!12156 = !DILocation(line: 2266, column: 20, scope: !12120)
!12157 = !DILocation(line: 2266, column: 2, scope: !12120)
!12158 = !DILocation(line: 2266, column: 10, scope: !12120)
!12159 = !DILocation(line: 2268, column: 13, scope: !12120)
!12160 = !DILocation(line: 2268, column: 18, scope: !12120)
!12161 = !DILocation(line: 2268, column: 2, scope: !12120)
!12162 = !DILocation(line: 2268, column: 11, scope: !12120)
!12163 = !DILocation(line: 2268, column: 35, scope: !12120)
!12164 = !DILocation(line: 2268, column: 40, scope: !12120)
!12165 = !DILocation(line: 2268, column: 24, scope: !12120)
!12166 = !DILocation(line: 2268, column: 33, scope: !12120)
!12167 = !DILocation(line: 2268, column: 57, scope: !12120)
!12168 = !DILocation(line: 2268, column: 62, scope: !12120)
!12169 = !DILocation(line: 2268, column: 46, scope: !12120)
!12170 = !DILocation(line: 2268, column: 55, scope: !12120)
!12171 = !DILocation(line: 2270, column: 10, scope: !12172)
!12172 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2270, column: 6)
!12173 = !DILocation(line: 2270, column: 7, scope: !12172)
!12174 = !DILocation(line: 2270, column: 18, scope: !12172)
!12175 = !DILocation(line: 2270, column: 26, scope: !12172)
!12176 = !DILocation(line: 2270, column: 23, scope: !12172)
!12177 = !DILocation(line: 2270, column: 40, scope: !12172)
!12178 = !DILocation(line: 2270, column: 46, scope: !12172)
!12179 = !DILocation(line: 2270, column: 43, scope: !12172)
!12180 = !DILocation(line: 2270, column: 6, scope: !12120)
!12181 = !DILocation(line: 2272, column: 24, scope: !12182)
!12182 = distinct !DILexicalBlock(scope: !12172, file: !3, line: 2270, column: 63)
!12183 = !DILocation(line: 2272, column: 33, scope: !12182)
!12184 = !DILocation(line: 2272, column: 40, scope: !12182)
!12185 = !DILocation(line: 2272, column: 49, scope: !12182)
!12186 = !DILocation(line: 2272, column: 9, scope: !12182)
!12187 = !DILocation(line: 2272, column: 7, scope: !12182)
!12188 = !DILocation(line: 2273, column: 10, scope: !12182)
!12189 = !DILocation(line: 2273, column: 3, scope: !12182)
!12190 = !DILocation(line: 2276, column: 6, scope: !12191)
!12191 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2276, column: 6)
!12192 = !DILocation(line: 2276, column: 11, scope: !12191)
!12193 = !DILocation(line: 2276, column: 16, scope: !12191)
!12194 = !DILocation(line: 2276, column: 6, scope: !12120)
!12195 = !DILocation(line: 2277, column: 6, scope: !12196)
!12196 = distinct !DILexicalBlock(scope: !12191, file: !3, line: 2276, column: 47)
!12197 = !DILocation(line: 2277, column: 22, scope: !12196)
!12198 = !DILocation(line: 2277, column: 27, scope: !12196)
!12199 = !DILocation(line: 2277, column: 3, scope: !12196)
!12200 = !DILocation(line: 2279, column: 8, scope: !12201)
!12201 = distinct !DILexicalBlock(scope: !12196, file: !3, line: 2279, column: 7)
!12202 = !DILocation(line: 2279, column: 15, scope: !12201)
!12203 = !DILocation(line: 2279, column: 17, scope: !12201)
!12204 = !DILocation(line: 2279, column: 22, scope: !12201)
!12205 = !DILocation(line: 2279, column: 34, scope: !12201)
!12206 = !DILocation(line: 2279, column: 7, scope: !12196)
!12207 = !DILocation(line: 2280, column: 11, scope: !12201)
!12208 = !DILocation(line: 2280, column: 9, scope: !12201)
!12209 = !DILocation(line: 2280, column: 4, scope: !12201)
!12210 = !DILocation(line: 2281, column: 2, scope: !12196)
!12211 = !DILocation(line: 2283, column: 30, scope: !12212)
!12212 = distinct !DILexicalBlock(scope: !12191, file: !3, line: 2282, column: 7)
!12213 = !DILocation(line: 2283, column: 37, scope: !12212)
!12214 = !DILocation(line: 2283, column: 41, scope: !12212)
!12215 = !DILocation(line: 2283, column: 9, scope: !12212)
!12216 = !DILocation(line: 2283, column: 7, scope: !12212)
!12217 = !DILocation(line: 2284, column: 7, scope: !12218)
!12218 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 2284, column: 7)
!12219 = !DILocation(line: 2284, column: 7, scope: !12212)
!12220 = !DILocation(line: 2285, column: 33, scope: !12221)
!12221 = distinct !DILexicalBlock(scope: !12218, file: !3, line: 2284, column: 12)
!12222 = !DILocation(line: 2285, column: 38, scope: !12221)
!12223 = !DILocation(line: 2285, column: 17, scope: !12221)
!12224 = !DILocation(line: 2285, column: 15, scope: !12221)
!12225 = !DILocation(line: 2285, column: 8, scope: !12221)
!12226 = !DILocation(line: 2286, column: 8, scope: !12227)
!12227 = distinct !DILexicalBlock(scope: !12221, file: !3, line: 2286, column: 8)
!12228 = !DILocation(line: 2286, column: 15, scope: !12227)
!12229 = !DILocation(line: 2286, column: 17, scope: !12227)
!12230 = !DILocation(line: 2286, column: 22, scope: !12227)
!12231 = !DILocation(line: 2286, column: 8, scope: !12221)
!12232 = !DILocation(line: 2287, column: 28, scope: !12233)
!12233 = distinct !DILexicalBlock(scope: !12227, file: !3, line: 2286, column: 34)
!12234 = !DILocation(line: 2287, column: 33, scope: !12233)
!12235 = !DILocation(line: 2287, column: 38, scope: !12233)
!12236 = !DILocation(line: 2287, column: 12, scope: !12233)
!12237 = !DILocation(line: 2287, column: 10, scope: !12233)
!12238 = !DILocation(line: 2288, column: 4, scope: !12233)
!12239 = !DILocation(line: 2289, column: 3, scope: !12221)
!12240 = !DILocation(line: 2291, column: 17, scope: !12241)
!12241 = distinct !DILexicalBlock(scope: !12218, file: !3, line: 2290, column: 8)
!12242 = !DILocation(line: 2291, column: 22, scope: !12241)
!12243 = !DILocation(line: 2291, column: 15, scope: !12241)
!12244 = !DILocation(line: 2291, column: 8, scope: !12241)
!12245 = !DILocation(line: 2295, column: 17, scope: !12120)
!12246 = !DILocation(line: 2295, column: 27, scope: !12120)
!12247 = !DILocation(line: 2295, column: 32, scope: !12120)
!12248 = !DILocation(line: 2295, column: 37, scope: !12120)
!12249 = !DILocation(line: 2295, column: 14, scope: !12120)
!12250 = !DILocation(line: 2295, column: 12, scope: !12120)
!12251 = !DILocation(line: 2297, column: 10, scope: !12120)
!12252 = !DILocation(line: 2297, column: 2, scope: !12120)
!12253 = !DILocation(line: 2299, column: 13, scope: !12254)
!12254 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2297, column: 21)
!12255 = !DILocation(line: 2299, column: 21, scope: !12254)
!12256 = !DILocation(line: 2299, column: 30, scope: !12254)
!12257 = !DILocation(line: 2299, column: 35, scope: !12254)
!12258 = !DILocation(line: 2299, column: 41, scope: !12254)
!12259 = !DILocation(line: 2299, column: 46, scope: !12254)
!12260 = !DILocation(line: 2299, column: 10, scope: !12254)
!12261 = !DILocation(line: 2299, column: 8, scope: !12254)
!12262 = !DILocation(line: 2300, column: 4, scope: !12254)
!12263 = !DILocation(line: 2302, column: 11, scope: !12264)
!12264 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2302, column: 4)
!12265 = !DILocation(line: 2302, column: 9, scope: !12264)
!12266 = !DILocation(line: 2302, column: 16, scope: !12267)
!12267 = distinct !DILexicalBlock(scope: !12264, file: !3, line: 2302, column: 4)
!12268 = !DILocation(line: 2302, column: 18, scope: !12267)
!12269 = !DILocation(line: 2302, column: 4, scope: !12264)
!12270 = !DILocation(line: 2303, column: 15, scope: !12271)
!12271 = distinct !DILexicalBlock(scope: !12272, file: !3, line: 2303, column: 9)
!12272 = distinct !DILexicalBlock(scope: !12267, file: !3, line: 2302, column: 28)
!12273 = !DILocation(line: 2303, column: 9, scope: !12271)
!12274 = !DILocation(line: 2303, column: 9, scope: !12272)
!12275 = !DILocation(line: 2304, column: 33, scope: !12271)
!12276 = !DILocation(line: 2304, column: 48, scope: !12271)
!12277 = !DILocation(line: 2304, column: 42, scope: !12271)
!12278 = !DILocation(line: 2304, column: 52, scope: !12271)
!12279 = !DILocation(line: 2304, column: 16, scope: !12271)
!12280 = !DILocation(line: 2304, column: 11, scope: !12271)
!12281 = !DILocation(line: 2304, column: 6, scope: !12271)
!12282 = !DILocation(line: 2304, column: 14, scope: !12271)
!12283 = !DILocation(line: 2305, column: 4, scope: !12272)
!12284 = !DILocation(line: 2302, column: 24, scope: !12267)
!12285 = !DILocation(line: 2302, column: 4, scope: !12267)
!12286 = distinct !{!12286, !12269, !12287}
!12287 = !DILocation(line: 2305, column: 4, scope: !12264)
!12288 = !DILocation(line: 2307, column: 8, scope: !12289)
!12289 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2307, column: 8)
!12290 = !DILocation(line: 2307, column: 16, scope: !12289)
!12291 = !DILocation(line: 2307, column: 19, scope: !12289)
!12292 = !DILocation(line: 2307, column: 8, scope: !12254)
!12293 = !DILocation(line: 2308, column: 12, scope: !12294)
!12294 = distinct !DILexicalBlock(scope: !12295, file: !3, line: 2308, column: 9)
!12295 = distinct !DILexicalBlock(scope: !12289, file: !3, line: 2307, column: 28)
!12296 = !DILocation(line: 2308, column: 9, scope: !12294)
!12297 = !DILocation(line: 2308, column: 9, scope: !12295)
!12298 = !DILocation(line: 2309, column: 52, scope: !12294)
!12299 = !DILocation(line: 2309, column: 61, scope: !12294)
!12300 = !DILocation(line: 2309, column: 66, scope: !12294)
!12301 = !DILocation(line: 2309, column: 72, scope: !12294)
!12302 = !DILocation(line: 2309, column: 77, scope: !12294)
!12303 = !DILocation(line: 2309, column: 83, scope: !12294)
!12304 = !DILocation(line: 2309, column: 92, scope: !12294)
!12305 = !DILocation(line: 2309, column: 101, scope: !12294)
!12306 = !DILocation(line: 2309, column: 12, scope: !12294)
!12307 = !DILocation(line: 2309, column: 10, scope: !12294)
!12308 = !DILocation(line: 2309, column: 6, scope: !12294)
!12309 = !DILocation(line: 2311, column: 15, scope: !12294)
!12310 = !DILocation(line: 2311, column: 23, scope: !12294)
!12311 = !DILocation(line: 2311, column: 32, scope: !12294)
!12312 = !DILocation(line: 2311, column: 37, scope: !12294)
!12313 = !DILocation(line: 2311, column: 43, scope: !12294)
!12314 = !DILocation(line: 2311, column: 48, scope: !12294)
!12315 = !DILocation(line: 2311, column: 54, scope: !12294)
!12316 = !DILocation(line: 2311, column: 63, scope: !12294)
!12317 = !DILocation(line: 2311, column: 72, scope: !12294)
!12318 = !DILocation(line: 2311, column: 12, scope: !12294)
!12319 = !DILocation(line: 2311, column: 10, scope: !12294)
!12320 = !DILocation(line: 2312, column: 4, scope: !12295)
!12321 = !DILocation(line: 2313, column: 4, scope: !12254)
!12322 = !DILocation(line: 2315, column: 8, scope: !12323)
!12323 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2315, column: 8)
!12324 = !DILocation(line: 2315, column: 8, scope: !12254)
!12325 = !DILocation(line: 2316, column: 32, scope: !12326)
!12326 = distinct !DILexicalBlock(scope: !12323, file: !3, line: 2315, column: 18)
!12327 = !DILocation(line: 2316, column: 41, scope: !12326)
!12328 = !DILocation(line: 2316, column: 51, scope: !12326)
!12329 = !DILocation(line: 2316, column: 15, scope: !12326)
!12330 = !DILocation(line: 2316, column: 5, scope: !12326)
!12331 = !DILocation(line: 2316, column: 13, scope: !12326)
!12332 = !DILocation(line: 2317, column: 4, scope: !12326)
!12333 = !DILocation(line: 2318, column: 8, scope: !12334)
!12334 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2318, column: 8)
!12335 = !DILocation(line: 2318, column: 8, scope: !12254)
!12336 = !DILocation(line: 2319, column: 48, scope: !12337)
!12337 = distinct !DILexicalBlock(scope: !12338, file: !3, line: 2319, column: 9)
!12338 = distinct !DILexicalBlock(scope: !12334, file: !3, line: 2318, column: 17)
!12339 = !DILocation(line: 2319, column: 57, scope: !12337)
!12340 = !DILocation(line: 2319, column: 62, scope: !12337)
!12341 = !DILocation(line: 2319, column: 9, scope: !12337)
!12342 = !DILocation(line: 2319, column: 9, scope: !12338)
!12343 = !DILocation(line: 2320, column: 25, scope: !12344)
!12344 = distinct !DILexicalBlock(scope: !12337, file: !3, line: 2319, column: 69)
!12345 = !DILocation(line: 2320, column: 12, scope: !12344)
!12346 = !DILocation(line: 2320, column: 10, scope: !12344)
!12347 = !DILocation(line: 2321, column: 5, scope: !12344)
!12348 = !DILocation(line: 2323, column: 12, scope: !12349)
!12349 = distinct !DILexicalBlock(scope: !12337, file: !3, line: 2322, column: 10)
!12350 = !DILocation(line: 2323, column: 10, scope: !12349)
!12351 = !DILocation(line: 2324, column: 19, scope: !12349)
!12352 = !DILocation(line: 2324, column: 6, scope: !12349)
!12353 = !DILocation(line: 2326, column: 4, scope: !12338)
!12354 = !DILocation(line: 2327, column: 4, scope: !12254)
!12355 = !DILocation(line: 2329, column: 8, scope: !12356)
!12356 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2329, column: 8)
!12357 = !DILocation(line: 2329, column: 8, scope: !12254)
!12358 = !DILocation(line: 2330, column: 32, scope: !12359)
!12359 = distinct !DILexicalBlock(scope: !12356, file: !3, line: 2329, column: 18)
!12360 = !DILocation(line: 2330, column: 41, scope: !12359)
!12361 = !DILocation(line: 2330, column: 51, scope: !12359)
!12362 = !DILocation(line: 2330, column: 15, scope: !12359)
!12363 = !DILocation(line: 2330, column: 5, scope: !12359)
!12364 = !DILocation(line: 2330, column: 13, scope: !12359)
!12365 = !DILocation(line: 2331, column: 4, scope: !12359)
!12366 = !DILocation(line: 2332, column: 8, scope: !12367)
!12367 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 2332, column: 8)
!12368 = !DILocation(line: 2332, column: 8, scope: !12254)
!12369 = !DILocation(line: 2333, column: 48, scope: !12370)
!12370 = distinct !DILexicalBlock(scope: !12371, file: !3, line: 2333, column: 9)
!12371 = distinct !DILexicalBlock(scope: !12367, file: !3, line: 2332, column: 17)
!12372 = !DILocation(line: 2333, column: 57, scope: !12370)
!12373 = !DILocation(line: 2333, column: 62, scope: !12370)
!12374 = !DILocation(line: 2333, column: 9, scope: !12370)
!12375 = !DILocation(line: 2333, column: 9, scope: !12371)
!12376 = !DILocation(line: 2334, column: 25, scope: !12377)
!12377 = distinct !DILexicalBlock(scope: !12370, file: !3, line: 2333, column: 69)
!12378 = !DILocation(line: 2334, column: 12, scope: !12377)
!12379 = !DILocation(line: 2334, column: 10, scope: !12377)
!12380 = !DILocation(line: 2335, column: 5, scope: !12377)
!12381 = !DILocation(line: 2337, column: 12, scope: !12382)
!12382 = distinct !DILexicalBlock(scope: !12370, file: !3, line: 2336, column: 10)
!12383 = !DILocation(line: 2337, column: 10, scope: !12382)
!12384 = !DILocation(line: 2338, column: 19, scope: !12382)
!12385 = !DILocation(line: 2338, column: 6, scope: !12382)
!12386 = !DILocation(line: 2340, column: 4, scope: !12371)
!12387 = !DILocation(line: 2341, column: 4, scope: !12254)
!12388 = !DILocation(line: 2344, column: 9, scope: !12389)
!12389 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2344, column: 2)
!12390 = !DILocation(line: 2344, column: 7, scope: !12389)
!12391 = !DILocation(line: 2344, column: 14, scope: !12392)
!12392 = distinct !DILexicalBlock(scope: !12389, file: !3, line: 2344, column: 2)
!12393 = !DILocation(line: 2344, column: 16, scope: !12392)
!12394 = !DILocation(line: 2344, column: 2, scope: !12389)
!12395 = !DILocation(line: 2345, column: 22, scope: !12396)
!12396 = distinct !DILexicalBlock(scope: !12392, file: !3, line: 2344, column: 26)
!12397 = !DILocation(line: 2345, column: 17, scope: !12396)
!12398 = !DILocation(line: 2345, column: 3, scope: !12396)
!12399 = !DILocation(line: 2346, column: 2, scope: !12396)
!12400 = !DILocation(line: 2344, column: 22, scope: !12392)
!12401 = !DILocation(line: 2344, column: 2, scope: !12392)
!12402 = distinct !{!12402, !12394, !12403}
!12403 = !DILocation(line: 2346, column: 2, scope: !12389)
!12404 = !DILocation(line: 2348, column: 6, scope: !12405)
!12405 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2348, column: 6)
!12406 = !DILocation(line: 2348, column: 10, scope: !12405)
!12407 = !DILocation(line: 2348, column: 6, scope: !12120)
!12408 = !DILocation(line: 2349, column: 24, scope: !12409)
!12409 = distinct !DILexicalBlock(scope: !12405, file: !3, line: 2348, column: 19)
!12410 = !DILocation(line: 2349, column: 33, scope: !12409)
!12411 = !DILocation(line: 2349, column: 40, scope: !12409)
!12412 = !DILocation(line: 2349, column: 49, scope: !12409)
!12413 = !DILocation(line: 2349, column: 9, scope: !12409)
!12414 = !DILocation(line: 2349, column: 7, scope: !12409)
!12415 = !DILocation(line: 2350, column: 2, scope: !12409)
!12416 = !DILocation(line: 2352, column: 9, scope: !12120)
!12417 = !DILocation(line: 2352, column: 2, scope: !12120)
!12418 = !DILocation(line: 2353, column: 1, scope: !12120)
!12419 = distinct !DISubprogram(name: "copy_to_ibuf_still", scope: !3, file: !3, line: 2150, type: !12420, scopeLine: 2151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12420 = !DISubroutineType(types: !12421)
!12421 = !{null, !1892, !204, !193, !1776}
!12422 = !DILocalVariable(name: "context", arg: 1, scope: !12419, file: !3, line: 2150, type: !1892)
!12423 = !DILocation(line: 2150, column: 53, scope: !12419)
!12424 = !DILocalVariable(name: "seq", arg: 2, scope: !12419, file: !3, line: 2150, type: !204)
!12425 = !DILocation(line: 2150, column: 72, scope: !12419)
!12426 = !DILocalVariable(name: "nr", arg: 3, scope: !12419, file: !3, line: 2150, type: !193)
!12427 = !DILocation(line: 2150, column: 83, scope: !12419)
!12428 = !DILocalVariable(name: "ibuf", arg: 4, scope: !12419, file: !3, line: 2150, type: !1776)
!12429 = !DILocation(line: 2150, column: 94, scope: !12419)
!12430 = !DILocation(line: 2153, column: 6, scope: !12431)
!12431 = distinct !DILexicalBlock(scope: !12419, file: !3, line: 2153, column: 6)
!12432 = !DILocation(line: 2153, column: 9, scope: !12431)
!12433 = !DILocation(line: 2153, column: 14, scope: !12431)
!12434 = !DILocation(line: 2153, column: 17, scope: !12431)
!12435 = !DILocation(line: 2153, column: 23, scope: !12431)
!12436 = !DILocation(line: 2153, column: 28, scope: !12431)
!12437 = !DILocation(line: 2153, column: 32, scope: !12431)
!12438 = !DILocation(line: 2153, column: 20, scope: !12431)
!12439 = !DILocation(line: 2153, column: 6, scope: !12419)
!12440 = !DILocation(line: 2157, column: 23, scope: !12441)
!12441 = distinct !DILexicalBlock(scope: !12431, file: !3, line: 2153, column: 37)
!12442 = !DILocation(line: 2157, column: 10, scope: !12441)
!12443 = !DILocation(line: 2157, column: 8, scope: !12441)
!12444 = !DILocation(line: 2159, column: 7, scope: !12445)
!12445 = distinct !DILexicalBlock(scope: !12441, file: !3, line: 2159, column: 7)
!12446 = !DILocation(line: 2159, column: 7, scope: !12441)
!12447 = !DILocation(line: 2160, column: 34, scope: !12448)
!12448 = distinct !DILexicalBlock(scope: !12445, file: !3, line: 2159, column: 13)
!12449 = !DILocation(line: 2160, column: 43, scope: !12448)
!12450 = !DILocation(line: 2160, column: 50, scope: !12448)
!12451 = !DILocation(line: 2160, column: 4, scope: !12448)
!12452 = !DILocation(line: 2161, column: 3, scope: !12448)
!12453 = !DILocation(line: 2163, column: 7, scope: !12454)
!12454 = distinct !DILexicalBlock(scope: !12441, file: !3, line: 2163, column: 7)
!12455 = !DILocation(line: 2163, column: 10, scope: !12454)
!12456 = !DILocation(line: 2163, column: 7, scope: !12441)
!12457 = !DILocation(line: 2164, column: 28, scope: !12458)
!12458 = distinct !DILexicalBlock(scope: !12454, file: !3, line: 2163, column: 16)
!12459 = !DILocation(line: 2164, column: 37, scope: !12458)
!12460 = !DILocation(line: 2164, column: 42, scope: !12458)
!12461 = !DILocation(line: 2164, column: 47, scope: !12458)
!12462 = !DILocation(line: 2164, column: 85, scope: !12458)
!12463 = !DILocation(line: 2164, column: 4, scope: !12458)
!12464 = !DILocation(line: 2165, column: 3, scope: !12458)
!12465 = !DILocation(line: 2167, column: 7, scope: !12466)
!12466 = distinct !DILexicalBlock(scope: !12441, file: !3, line: 2167, column: 7)
!12467 = !DILocation(line: 2167, column: 13, scope: !12466)
!12468 = !DILocation(line: 2167, column: 18, scope: !12466)
!12469 = !DILocation(line: 2167, column: 22, scope: !12466)
!12470 = !DILocation(line: 2167, column: 10, scope: !12466)
!12471 = !DILocation(line: 2167, column: 7, scope: !12441)
!12472 = !DILocation(line: 2168, column: 28, scope: !12473)
!12473 = distinct !DILexicalBlock(scope: !12466, file: !3, line: 2167, column: 27)
!12474 = !DILocation(line: 2168, column: 37, scope: !12473)
!12475 = !DILocation(line: 2168, column: 42, scope: !12473)
!12476 = !DILocation(line: 2168, column: 47, scope: !12473)
!12477 = !DILocation(line: 2168, column: 83, scope: !12473)
!12478 = !DILocation(line: 2168, column: 4, scope: !12473)
!12479 = !DILocation(line: 2169, column: 3, scope: !12473)
!12480 = !DILocation(line: 2171, column: 17, scope: !12441)
!12481 = !DILocation(line: 2171, column: 3, scope: !12441)
!12482 = !DILocation(line: 2172, column: 2, scope: !12441)
!12483 = !DILocation(line: 2173, column: 1, scope: !12419)
!12484 = distinct !DISubprogram(name: "seq_render_scene_strip", scope: !3, file: !3, line: 2486, type: !5290, scopeLine: 2487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12485 = !DILocalVariable(name: "context", arg: 1, scope: !12484, file: !3, line: 2486, type: !1892)
!12486 = !DILocation(line: 2486, column: 59, scope: !12484)
!12487 = !DILocalVariable(name: "seq", arg: 2, scope: !12484, file: !3, line: 2486, type: !204)
!12488 = !DILocation(line: 2486, column: 78, scope: !12484)
!12489 = !DILocalVariable(name: "nr", arg: 3, scope: !12484, file: !3, line: 2486, type: !193)
!12490 = !DILocation(line: 2486, column: 89, scope: !12484)
!12491 = !DILocalVariable(name: "ibuf", scope: !12484, file: !3, line: 2488, type: !1776)
!12492 = !DILocation(line: 2488, column: 9, scope: !12484)
!12493 = !DILocalVariable(name: "frame", scope: !12484, file: !3, line: 2489, type: !193)
!12494 = !DILocation(line: 2489, column: 8, scope: !12484)
!12495 = !DILocalVariable(name: "oldcfra", scope: !12484, file: !3, line: 2490, type: !193)
!12496 = !DILocation(line: 2490, column: 8, scope: !12484)
!12497 = !DILocalVariable(name: "camera", scope: !12484, file: !3, line: 2491, type: !12498)
!12498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12499, size: 64)
!12499 = !DIDerivedType(tag: DW_TAG_typedef, name: "Object", file: !391, line: 295, baseType: !390)
!12500 = !DILocation(line: 2491, column: 10, scope: !12484)
!12501 = !DILocalVariable(name: "oldmarkers", scope: !12484, file: !3, line: 2492, type: !183)
!12502 = !DILocation(line: 2492, column: 11, scope: !12484)
!12503 = !DILocalVariable(name: "is_rendering", scope: !12484, file: !3, line: 2525, type: !2121)
!12504 = !DILocation(line: 2525, column: 13, scope: !12484)
!12505 = !DILocation(line: 2525, column: 30, scope: !12484)
!12506 = !DILocalVariable(name: "is_background", scope: !12484, file: !3, line: 2526, type: !2121)
!12507 = !DILocation(line: 2526, column: 13, scope: !12484)
!12508 = !DILocation(line: 2526, column: 31, scope: !12484)
!12509 = !DILocalVariable(name: "do_seq_gl", scope: !12484, file: !3, line: 2527, type: !2121)
!12510 = !DILocation(line: 2527, column: 13, scope: !12484)
!12511 = !DILocation(line: 2527, column: 25, scope: !12484)
!12512 = !DILocation(line: 2529, column: 11, scope: !12484)
!12513 = !DILocation(line: 2529, column: 20, scope: !12484)
!12514 = !DILocation(line: 2529, column: 27, scope: !12484)
!12515 = !DILocation(line: 2529, column: 29, scope: !12484)
!12516 = !DILocation(line: 2529, column: 38, scope: !12484)
!12517 = !DILocation(line: 2529, column: 55, scope: !12484)
!12518 = !DILocalVariable(name: "do_seq", scope: !12484, file: !3, line: 2530, type: !45)
!12519 = !DILocation(line: 2530, column: 6, scope: !12484)
!12520 = !DILocalVariable(name: "have_comp", scope: !12484, file: !3, line: 2532, type: !742)
!12521 = !DILocation(line: 2532, column: 7, scope: !12484)
!12522 = !DILocalVariable(name: "scene", scope: !12484, file: !3, line: 2533, type: !1744)
!12523 = !DILocation(line: 2533, column: 9, scope: !12484)
!12524 = !DILocalVariable(name: "is_thread_main", scope: !12484, file: !3, line: 2534, type: !45)
!12525 = !DILocation(line: 2534, column: 6, scope: !12484)
!12526 = !DILocation(line: 2534, column: 23, scope: !12484)
!12527 = !DILocation(line: 2537, column: 6, scope: !12528)
!12528 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2537, column: 6)
!12529 = !DILocation(line: 2537, column: 11, scope: !12528)
!12530 = !DILocation(line: 2537, column: 17, scope: !12528)
!12531 = !DILocation(line: 2537, column: 6, scope: !12484)
!12532 = !DILocation(line: 2538, column: 3, scope: !12533)
!12533 = distinct !DILexicalBlock(scope: !12528, file: !3, line: 2537, column: 26)
!12534 = !DILocation(line: 2541, column: 10, scope: !12484)
!12535 = !DILocation(line: 2541, column: 15, scope: !12484)
!12536 = !DILocation(line: 2541, column: 8, scope: !12484)
!12537 = !DILocation(line: 2542, column: 10, scope: !12484)
!12538 = !DILocation(line: 2542, column: 17, scope: !12484)
!12539 = !DILocation(line: 2542, column: 19, scope: !12484)
!12540 = !DILocation(line: 2542, column: 26, scope: !12484)
!12541 = !DILocation(line: 2542, column: 24, scope: !12484)
!12542 = !DILocation(line: 2542, column: 31, scope: !12484)
!12543 = !DILocation(line: 2542, column: 36, scope: !12484)
!12544 = !DILocation(line: 2542, column: 29, scope: !12484)
!12545 = !DILocation(line: 2542, column: 8, scope: !12484)
!12546 = !DILocation(line: 2545, column: 15, scope: !12484)
!12547 = !DILocation(line: 2545, column: 22, scope: !12484)
!12548 = !DILocation(line: 2545, column: 24, scope: !12484)
!12549 = !DILocation(line: 2545, column: 32, scope: !12484)
!12550 = !DILocation(line: 2545, column: 44, scope: !12484)
!12551 = !DILocation(line: 2545, column: 47, scope: !12484)
!12552 = !DILocation(line: 2545, column: 54, scope: !12484)
!12553 = !DILocation(line: 2545, column: 64, scope: !12484)
!12554 = !DILocation(line: 2545, column: 67, scope: !12484)
!12555 = !DILocation(line: 2545, column: 74, scope: !12484)
!12556 = !DILocation(line: 0, scope: !12484)
!12557 = !DILocation(line: 2545, column: 14, scope: !12484)
!12558 = !DILocation(line: 2545, column: 12, scope: !12484)
!12559 = !DILocation(line: 2547, column: 12, scope: !12484)
!12560 = !DILocation(line: 2547, column: 19, scope: !12484)
!12561 = !DILocation(line: 2547, column: 21, scope: !12484)
!12562 = !DILocation(line: 2547, column: 10, scope: !12484)
!12563 = !DILocation(line: 2548, column: 18, scope: !12484)
!12564 = !DILocation(line: 2548, column: 2, scope: !12484)
!12565 = !DILocation(line: 2548, column: 9, scope: !12484)
!12566 = !DILocation(line: 2548, column: 11, scope: !12484)
!12567 = !DILocation(line: 2548, column: 16, scope: !12484)
!12568 = !DILocation(line: 2550, column: 6, scope: !12569)
!12569 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2550, column: 6)
!12570 = !DILocation(line: 2550, column: 11, scope: !12569)
!12571 = !DILocation(line: 2550, column: 6, scope: !12484)
!12572 = !DILocation(line: 2551, column: 12, scope: !12573)
!12573 = distinct !DILexicalBlock(scope: !12569, file: !3, line: 2550, column: 25)
!12574 = !DILocation(line: 2551, column: 17, scope: !12573)
!12575 = !DILocation(line: 2551, column: 10, scope: !12573)
!12576 = !DILocation(line: 2552, column: 2, scope: !12573)
!12577 = !DILocation(line: 2554, column: 34, scope: !12578)
!12578 = distinct !DILexicalBlock(scope: !12569, file: !3, line: 2553, column: 7)
!12579 = !DILocation(line: 2554, column: 3, scope: !12578)
!12580 = !DILocation(line: 2555, column: 12, scope: !12578)
!12581 = !DILocation(line: 2555, column: 19, scope: !12578)
!12582 = !DILocation(line: 2555, column: 10, scope: !12578)
!12583 = !DILocation(line: 2558, column: 6, scope: !12584)
!12584 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2558, column: 6)
!12585 = !DILocation(line: 2558, column: 16, scope: !12584)
!12586 = !DILocation(line: 2558, column: 25, scope: !12584)
!12587 = !DILocation(line: 2558, column: 28, scope: !12584)
!12588 = !DILocation(line: 2558, column: 35, scope: !12584)
!12589 = !DILocation(line: 2558, column: 6, scope: !12484)
!12590 = !DILocation(line: 2559, column: 19, scope: !12591)
!12591 = distinct !DILexicalBlock(scope: !12584, file: !3, line: 2558, column: 44)
!12592 = !DILocation(line: 2559, column: 3, scope: !12591)
!12593 = !DILocation(line: 2559, column: 10, scope: !12591)
!12594 = !DILocation(line: 2559, column: 12, scope: !12591)
!12595 = !DILocation(line: 2559, column: 17, scope: !12591)
!12596 = !DILocation(line: 2560, column: 3, scope: !12591)
!12597 = !DILocation(line: 2564, column: 11, scope: !12484)
!12598 = !DILocation(line: 2564, column: 18, scope: !12484)
!12599 = !DILocation(line: 2564, column: 20, scope: !12484)
!12600 = !DILocation(line: 2564, column: 28, scope: !12484)
!12601 = !DILocation(line: 2564, column: 9, scope: !12484)
!12602 = !DILocation(line: 2565, column: 2, scope: !12484)
!12603 = !DILocation(line: 2565, column: 9, scope: !12484)
!12604 = !DILocation(line: 2565, column: 11, scope: !12484)
!12605 = !DILocation(line: 2565, column: 19, scope: !12484)
!12606 = !DILocation(line: 2569, column: 15, scope: !12484)
!12607 = !DILocation(line: 2569, column: 22, scope: !12484)
!12608 = !DILocation(line: 2570, column: 22, scope: !12484)
!12609 = !DILocation(line: 2570, column: 29, scope: !12484)
!12610 = !DILocation(line: 2570, column: 2, scope: !12484)
!12611 = !DILocation(line: 2575, column: 7, scope: !12612)
!12612 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2575, column: 6)
!12613 = !DILocation(line: 2575, column: 27, scope: !12612)
!12614 = !DILocation(line: 2575, column: 30, scope: !12612)
!12615 = !DILocation(line: 2575, column: 40, scope: !12612)
!12616 = !DILocation(line: 2575, column: 43, scope: !12612)
!12617 = !DILocation(line: 2575, column: 51, scope: !12612)
!12618 = !DILocation(line: 2575, column: 54, scope: !12612)
!12619 = !DILocation(line: 2575, column: 6, scope: !12484)
!12620 = !DILocalVariable(name: "err_out", scope: !12621, file: !3, line: 2576, type: !251)
!12621 = distinct !DILexicalBlock(scope: !12612, file: !3, line: 2575, column: 70)
!12622 = !DILocation(line: 2576, column: 8, scope: !12621)
!12623 = !DILocalVariable(name: "width", scope: !12621, file: !3, line: 2577, type: !45)
!12624 = !DILocation(line: 2577, column: 7, scope: !12621)
!12625 = !DILocation(line: 2577, column: 16, scope: !12621)
!12626 = !DILocation(line: 2577, column: 23, scope: !12621)
!12627 = !DILocation(line: 2577, column: 25, scope: !12621)
!12628 = !DILocation(line: 2577, column: 32, scope: !12621)
!12629 = !DILocation(line: 2577, column: 39, scope: !12621)
!12630 = !DILocation(line: 2577, column: 41, scope: !12621)
!12631 = !DILocation(line: 2577, column: 30, scope: !12621)
!12632 = !DILocation(line: 2577, column: 47, scope: !12621)
!12633 = !DILocalVariable(name: "height", scope: !12621, file: !3, line: 2578, type: !45)
!12634 = !DILocation(line: 2578, column: 7, scope: !12621)
!12635 = !DILocation(line: 2578, column: 17, scope: !12621)
!12636 = !DILocation(line: 2578, column: 24, scope: !12621)
!12637 = !DILocation(line: 2578, column: 26, scope: !12621)
!12638 = !DILocation(line: 2578, column: 33, scope: !12621)
!12639 = !DILocation(line: 2578, column: 40, scope: !12621)
!12640 = !DILocation(line: 2578, column: 42, scope: !12621)
!12641 = !DILocation(line: 2578, column: 31, scope: !12621)
!12642 = !DILocation(line: 2578, column: 48, scope: !12621)
!12643 = !DILocation(line: 2582, column: 7, scope: !12644)
!12644 = distinct !DILexicalBlock(scope: !12621, file: !3, line: 2582, column: 7)
!12645 = !DILocation(line: 2582, column: 16, scope: !12644)
!12646 = !DILocation(line: 2582, column: 23, scope: !12644)
!12647 = !DILocation(line: 2582, column: 25, scope: !12644)
!12648 = !DILocation(line: 2582, column: 39, scope: !12644)
!12649 = !DILocation(line: 2582, column: 7, scope: !12621)
!12650 = !DILocation(line: 2583, column: 4, scope: !12644)
!12651 = !DILocation(line: 2583, column: 13, scope: !12644)
!12652 = !DILocation(line: 2583, column: 20, scope: !12644)
!12653 = !DILocation(line: 2583, column: 22, scope: !12644)
!12654 = !DILocation(line: 2583, column: 36, scope: !12644)
!12655 = !DILocation(line: 2586, column: 33, scope: !12621)
!12656 = !DILocation(line: 2586, column: 42, scope: !12621)
!12657 = !DILocation(line: 2586, column: 52, scope: !12621)
!12658 = !DILocation(line: 2586, column: 61, scope: !12621)
!12659 = !DILocation(line: 2586, column: 68, scope: !12621)
!12660 = !DILocation(line: 2586, column: 75, scope: !12621)
!12661 = !DILocation(line: 2586, column: 82, scope: !12621)
!12662 = !DILocation(line: 2586, column: 3, scope: !12621)
!12663 = !DILocation(line: 2587, column: 10, scope: !12621)
!12664 = !DILocation(line: 2587, column: 30, scope: !12621)
!12665 = !DILocation(line: 2587, column: 37, scope: !12621)
!12666 = !DILocation(line: 2587, column: 45, scope: !12621)
!12667 = !DILocation(line: 2587, column: 52, scope: !12621)
!12668 = !DILocation(line: 2588, column: 30, scope: !12621)
!12669 = !DILocation(line: 2588, column: 39, scope: !12621)
!12670 = !DILocation(line: 2588, column: 46, scope: !12621)
!12671 = !DILocation(line: 2588, column: 48, scope: !12621)
!12672 = !DILocation(line: 2589, column: 31, scope: !12621)
!12673 = !DILocation(line: 2589, column: 40, scope: !12621)
!12674 = !DILocation(line: 2589, column: 47, scope: !12621)
!12675 = !DILocation(line: 2589, column: 49, scope: !12621)
!12676 = !DILocation(line: 2589, column: 58, scope: !12621)
!12677 = !DILocation(line: 2589, column: 77, scope: !12621)
!12678 = !DILocation(line: 2589, column: 30, scope: !12621)
!12679 = !DILocation(line: 2590, column: 36, scope: !12621)
!12680 = !DILocation(line: 2590, column: 43, scope: !12621)
!12681 = !DILocation(line: 2590, column: 45, scope: !12621)
!12682 = !DILocation(line: 2590, column: 56, scope: !12621)
!12683 = !DILocation(line: 2587, column: 8, scope: !12621)
!12684 = !DILocation(line: 2591, column: 7, scope: !12685)
!12685 = distinct !DILexicalBlock(scope: !12621, file: !3, line: 2591, column: 7)
!12686 = !DILocation(line: 2591, column: 12, scope: !12685)
!12687 = !DILocation(line: 2591, column: 7, scope: !12621)
!12688 = !DILocation(line: 2592, column: 12, scope: !12689)
!12689 = distinct !DILexicalBlock(scope: !12685, file: !3, line: 2591, column: 21)
!12690 = !DILocation(line: 2592, column: 80, scope: !12689)
!12691 = !DILocation(line: 2592, column: 4, scope: !12689)
!12692 = !DILocation(line: 2593, column: 3, scope: !12689)
!12693 = !DILocation(line: 2594, column: 2, scope: !12621)
!12694 = !DILocalVariable(name: "re", scope: !12695, file: !3, line: 2596, type: !12696)
!12695 = distinct !DILexicalBlock(scope: !12612, file: !3, line: 2595, column: 7)
!12696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12697, size: 64)
!12697 = !DIDerivedType(tag: DW_TAG_typedef, name: "Render", file: !821, line: 58, baseType: !12698)
!12698 = !DICompositeType(tag: DW_TAG_structure_type, name: "Render", file: !821, line: 58, flags: DIFlagFwdDecl)
!12699 = !DILocation(line: 2596, column: 11, scope: !12695)
!12700 = !DILocation(line: 2596, column: 29, scope: !12695)
!12701 = !DILocation(line: 2596, column: 36, scope: !12695)
!12702 = !DILocation(line: 2596, column: 39, scope: !12695)
!12703 = !DILocation(line: 2596, column: 16, scope: !12695)
!12704 = !DILocalVariable(name: "rres", scope: !12695, file: !3, line: 2597, type: !12705)
!12705 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderResult", file: !821, line: 148, baseType: !820)
!12706 = !DILocation(line: 2597, column: 16, scope: !12695)
!12707 = !DILocation(line: 2607, column: 8, scope: !12708)
!12708 = distinct !DILexicalBlock(scope: !12695, file: !3, line: 2607, column: 7)
!12709 = !DILocation(line: 2607, column: 23, scope: !12708)
!12710 = !DILocation(line: 2607, column: 26, scope: !12708)
!12711 = !DILocation(line: 2607, column: 39, scope: !12708)
!12712 = !DILocation(line: 2607, column: 48, scope: !12708)
!12713 = !DILocation(line: 2607, column: 51, scope: !12708)
!12714 = !DILocation(line: 2607, column: 7, scope: !12695)
!12715 = !DILocation(line: 2608, column: 8, scope: !12716)
!12716 = distinct !DILexicalBlock(scope: !12717, file: !3, line: 2608, column: 8)
!12717 = distinct !DILexicalBlock(scope: !12708, file: !3, line: 2607, column: 66)
!12718 = !DILocation(line: 2608, column: 11, scope: !12716)
!12719 = !DILocation(line: 2608, column: 8, scope: !12717)
!12720 = !DILocation(line: 2609, column: 23, scope: !12716)
!12721 = !DILocation(line: 2609, column: 30, scope: !12716)
!12722 = !DILocation(line: 2609, column: 33, scope: !12716)
!12723 = !DILocation(line: 2609, column: 10, scope: !12716)
!12724 = !DILocation(line: 2609, column: 8, scope: !12716)
!12725 = !DILocation(line: 2609, column: 5, scope: !12716)
!12726 = !DILocation(line: 2611, column: 34, scope: !12717)
!12727 = !DILocation(line: 2611, column: 43, scope: !12717)
!12728 = !DILocation(line: 2611, column: 53, scope: !12717)
!12729 = !DILocation(line: 2611, column: 62, scope: !12717)
!12730 = !DILocation(line: 2611, column: 69, scope: !12717)
!12731 = !DILocation(line: 2611, column: 76, scope: !12717)
!12732 = !DILocation(line: 2611, column: 83, scope: !12717)
!12733 = !DILocation(line: 2611, column: 4, scope: !12717)
!12734 = !DILocation(line: 2612, column: 20, scope: !12717)
!12735 = !DILocation(line: 2612, column: 24, scope: !12717)
!12736 = !DILocation(line: 2612, column: 33, scope: !12717)
!12737 = !DILocation(line: 2612, column: 40, scope: !12717)
!12738 = !DILocation(line: 2612, column: 53, scope: !12717)
!12739 = !DILocation(line: 2612, column: 61, scope: !12717)
!12740 = !DILocation(line: 2612, column: 68, scope: !12717)
!12741 = !DILocation(line: 2612, column: 73, scope: !12717)
!12742 = !DILocation(line: 2612, column: 4, scope: !12717)
!12743 = !DILocation(line: 2615, column: 21, scope: !12717)
!12744 = !DILocation(line: 2615, column: 19, scope: !12717)
!12745 = !DILocation(line: 2616, column: 3, scope: !12717)
!12746 = !DILocation(line: 2618, column: 25, scope: !12695)
!12747 = !DILocation(line: 2618, column: 3, scope: !12695)
!12748 = !DILocation(line: 2620, column: 12, scope: !12749)
!12749 = distinct !DILexicalBlock(scope: !12695, file: !3, line: 2620, column: 7)
!12750 = !DILocation(line: 2620, column: 7, scope: !12749)
!12751 = !DILocation(line: 2620, column: 7, scope: !12695)
!12752 = !DILocation(line: 2621, column: 31, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12749, file: !3, line: 2620, column: 19)
!12754 = !DILocation(line: 2621, column: 43, scope: !12753)
!12755 = !DILocation(line: 2621, column: 11, scope: !12753)
!12756 = !DILocation(line: 2621, column: 9, scope: !12753)
!12757 = !DILocation(line: 2622, column: 11, scope: !12753)
!12758 = !DILocation(line: 2622, column: 17, scope: !12753)
!12759 = !DILocation(line: 2622, column: 4, scope: !12753)
!12760 = !DILocation(line: 2622, column: 34, scope: !12753)
!12761 = !DILocation(line: 2622, column: 66, scope: !12753)
!12762 = !DILocation(line: 2622, column: 61, scope: !12753)
!12763 = !DILocation(line: 2622, column: 59, scope: !12753)
!12764 = !DILocation(line: 2622, column: 79, scope: !12753)
!12765 = !DILocation(line: 2622, column: 74, scope: !12753)
!12766 = !DILocation(line: 2622, column: 72, scope: !12753)
!12767 = !DILocation(line: 2623, column: 13, scope: !12768)
!12768 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 2623, column: 8)
!12769 = !DILocation(line: 2623, column: 8, scope: !12768)
!12770 = !DILocation(line: 2623, column: 8, scope: !12753)
!12771 = !DILocation(line: 2624, column: 23, scope: !12772)
!12772 = distinct !DILexicalBlock(scope: !12768, file: !3, line: 2623, column: 20)
!12773 = !DILocation(line: 2624, column: 5, scope: !12772)
!12774 = !DILocation(line: 2625, column: 12, scope: !12772)
!12775 = !DILocation(line: 2625, column: 18, scope: !12772)
!12776 = !DILocation(line: 2625, column: 5, scope: !12772)
!12777 = !DILocation(line: 2625, column: 35, scope: !12772)
!12778 = !DILocation(line: 2625, column: 63, scope: !12772)
!12779 = !DILocation(line: 2625, column: 58, scope: !12772)
!12780 = !DILocation(line: 2625, column: 56, scope: !12772)
!12781 = !DILocation(line: 2625, column: 76, scope: !12772)
!12782 = !DILocation(line: 2625, column: 71, scope: !12772)
!12783 = !DILocation(line: 2625, column: 69, scope: !12772)
!12784 = !DILocation(line: 2626, column: 4, scope: !12772)
!12785 = !DILocation(line: 2629, column: 43, scope: !12753)
!12786 = !DILocation(line: 2629, column: 52, scope: !12753)
!12787 = !DILocation(line: 2629, column: 59, scope: !12753)
!12788 = !DILocation(line: 2629, column: 4, scope: !12753)
!12789 = !DILocation(line: 2630, column: 3, scope: !12753)
!12790 = !DILocation(line: 2631, column: 17, scope: !12791)
!12791 = distinct !DILexicalBlock(scope: !12749, file: !3, line: 2631, column: 12)
!12792 = !DILocation(line: 2631, column: 12, scope: !12791)
!12793 = !DILocation(line: 2631, column: 12, scope: !12749)
!12794 = !DILocation(line: 2632, column: 31, scope: !12795)
!12795 = distinct !DILexicalBlock(scope: !12791, file: !3, line: 2631, column: 25)
!12796 = !DILocation(line: 2632, column: 43, scope: !12795)
!12797 = !DILocation(line: 2632, column: 11, scope: !12795)
!12798 = !DILocation(line: 2632, column: 9, scope: !12795)
!12799 = !DILocation(line: 2633, column: 11, scope: !12795)
!12800 = !DILocation(line: 2633, column: 17, scope: !12795)
!12801 = !DILocation(line: 2633, column: 4, scope: !12795)
!12802 = !DILocation(line: 2633, column: 28, scope: !12795)
!12803 = !DILocation(line: 2633, column: 45, scope: !12795)
!12804 = !DILocation(line: 2633, column: 38, scope: !12795)
!12805 = !DILocation(line: 2633, column: 58, scope: !12795)
!12806 = !DILocation(line: 2633, column: 51, scope: !12795)
!12807 = !DILocation(line: 2633, column: 36, scope: !12795)
!12808 = !DILocation(line: 2634, column: 3, scope: !12795)
!12809 = !DILocation(line: 2636, column: 25, scope: !12695)
!12810 = !DILocation(line: 2636, column: 3, scope: !12695)
!12811 = !DILocation(line: 2642, column: 22, scope: !12484)
!12812 = !DILocation(line: 2642, column: 2, scope: !12484)
!12813 = !DILocation(line: 2642, column: 9, scope: !12484)
!12814 = !DILocation(line: 2642, column: 11, scope: !12484)
!12815 = !DILocation(line: 2642, column: 19, scope: !12484)
!12816 = !DILocation(line: 2644, column: 18, scope: !12484)
!12817 = !DILocation(line: 2644, column: 2, scope: !12484)
!12818 = !DILocation(line: 2644, column: 9, scope: !12484)
!12819 = !DILocation(line: 2644, column: 11, scope: !12484)
!12820 = !DILocation(line: 2644, column: 16, scope: !12484)
!12821 = !DILocation(line: 2646, column: 6, scope: !12822)
!12822 = distinct !DILexicalBlock(scope: !12484, file: !3, line: 2646, column: 6)
!12823 = !DILocation(line: 2646, column: 15, scope: !12822)
!12824 = !DILocation(line: 2646, column: 12, scope: !12822)
!12825 = !DILocation(line: 2646, column: 6, scope: !12484)
!12826 = !DILocation(line: 2647, column: 33, scope: !12827)
!12827 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 2646, column: 24)
!12828 = !DILocation(line: 2647, column: 42, scope: !12827)
!12829 = !DILocation(line: 2647, column: 52, scope: !12827)
!12830 = !DILocation(line: 2647, column: 61, scope: !12827)
!12831 = !DILocation(line: 2647, column: 68, scope: !12827)
!12832 = !DILocation(line: 2647, column: 75, scope: !12827)
!12833 = !DILocation(line: 2647, column: 82, scope: !12827)
!12834 = !DILocation(line: 2647, column: 3, scope: !12827)
!12835 = !DILocation(line: 2648, column: 2, scope: !12827)
!12836 = !DILocation(line: 2652, column: 2, scope: !12484)
!12837 = !DILocation(line: 2652, column: 9, scope: !12484)
!12838 = !DILocation(line: 2652, column: 19, scope: !12484)
!12839 = !DILocation(line: 2655, column: 9, scope: !12484)
!12840 = !DILocation(line: 2655, column: 2, scope: !12484)
!12841 = !DILocation(line: 2656, column: 1, scope: !12484)
!12842 = distinct !DISubprogram(name: "seq_render_movieclip_strip", scope: !3, file: !3, line: 2355, type: !5290, scopeLine: 2356, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12843 = !DILocalVariable(name: "context", arg: 1, scope: !12842, file: !3, line: 2355, type: !1892)
!12844 = !DILocation(line: 2355, column: 63, scope: !12842)
!12845 = !DILocalVariable(name: "seq", arg: 2, scope: !12842, file: !3, line: 2355, type: !204)
!12846 = !DILocation(line: 2355, column: 82, scope: !12842)
!12847 = !DILocalVariable(name: "nr", arg: 3, scope: !12842, file: !3, line: 2355, type: !193)
!12848 = !DILocation(line: 2355, column: 93, scope: !12842)
!12849 = !DILocalVariable(name: "ibuf", scope: !12842, file: !3, line: 2357, type: !1776)
!12850 = !DILocation(line: 2357, column: 9, scope: !12842)
!12851 = !DILocalVariable(name: "user", scope: !12842, file: !3, line: 2358, type: !12852)
!12852 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieClipUser", file: !111, line: 53, baseType: !12853)
!12853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClipUser", file: !111, line: 50, size: 64, elements: !12854)
!12854 = !{!12855, !12856, !12857}
!12855 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !12853, file: !111, line: 51, baseType: !45, size: 32)
!12856 = !DIDerivedType(tag: DW_TAG_member, name: "render_size", scope: !12853, file: !111, line: 52, baseType: !157, size: 16, offset: 32)
!12857 = !DIDerivedType(tag: DW_TAG_member, name: "render_flag", scope: !12853, file: !111, line: 52, baseType: !157, size: 16, offset: 48)
!12858 = !DILocation(line: 2358, column: 16, scope: !12842)
!12859 = !DILocalVariable(name: "tloc", scope: !12842, file: !3, line: 2359, type: !629)
!12860 = !DILocation(line: 2359, column: 8, scope: !12842)
!12861 = !DILocalVariable(name: "tscale", scope: !12842, file: !3, line: 2359, type: !193)
!12862 = !DILocation(line: 2359, column: 17, scope: !12842)
!12863 = !DILocalVariable(name: "tangle", scope: !12842, file: !3, line: 2359, type: !193)
!12864 = !DILocation(line: 2359, column: 25, scope: !12842)
!12865 = !DILocation(line: 2361, column: 7, scope: !12866)
!12866 = distinct !DILexicalBlock(scope: !12842, file: !3, line: 2361, column: 6)
!12867 = !DILocation(line: 2361, column: 12, scope: !12866)
!12868 = !DILocation(line: 2361, column: 6, scope: !12842)
!12869 = !DILocation(line: 2362, column: 3, scope: !12870)
!12870 = distinct !DILexicalBlock(scope: !12866, file: !3, line: 2361, column: 18)
!12871 = !DILocation(line: 2365, column: 2, scope: !12842)
!12872 = !DILocation(line: 2367, column: 38, scope: !12842)
!12873 = !DILocation(line: 2367, column: 43, scope: !12842)
!12874 = !DILocation(line: 2367, column: 48, scope: !12842)
!12875 = !DILocation(line: 2367, column: 41, scope: !12842)
!12876 = !DILocation(line: 2367, column: 64, scope: !12842)
!12877 = !DILocation(line: 2367, column: 69, scope: !12842)
!12878 = !DILocation(line: 2367, column: 75, scope: !12842)
!12879 = !DILocation(line: 2367, column: 62, scope: !12842)
!12880 = !DILocation(line: 2367, column: 2, scope: !12842)
!12881 = !DILocation(line: 2369, column: 7, scope: !12842)
!12882 = !DILocation(line: 2369, column: 19, scope: !12842)
!12883 = !DILocation(line: 2371, column: 38, scope: !12842)
!12884 = !DILocation(line: 2371, column: 47, scope: !12842)
!12885 = !DILocation(line: 2371, column: 10, scope: !12842)
!12886 = !DILocation(line: 2371, column: 2, scope: !12842)
!12887 = !DILocation(line: 2373, column: 9, scope: !12888)
!12888 = distinct !DILexicalBlock(scope: !12842, file: !3, line: 2371, column: 69)
!12889 = !DILocation(line: 2373, column: 21, scope: !12888)
!12890 = !DILocation(line: 2374, column: 4, scope: !12888)
!12891 = !DILocation(line: 2376, column: 9, scope: !12888)
!12892 = !DILocation(line: 2376, column: 21, scope: !12888)
!12893 = !DILocation(line: 2377, column: 4, scope: !12888)
!12894 = !DILocation(line: 2379, column: 9, scope: !12888)
!12895 = !DILocation(line: 2379, column: 21, scope: !12888)
!12896 = !DILocation(line: 2380, column: 4, scope: !12888)
!12897 = !DILocation(line: 2382, column: 9, scope: !12888)
!12898 = !DILocation(line: 2382, column: 21, scope: !12888)
!12899 = !DILocation(line: 2383, column: 4, scope: !12888)
!12900 = !DILocation(line: 2385, column: 9, scope: !12888)
!12901 = !DILocation(line: 2385, column: 21, scope: !12888)
!12902 = !DILocation(line: 2386, column: 4, scope: !12888)
!12903 = !DILocation(line: 2389, column: 6, scope: !12904)
!12904 = distinct !DILexicalBlock(scope: !12842, file: !3, line: 2389, column: 6)
!12905 = !DILocation(line: 2389, column: 11, scope: !12904)
!12906 = !DILocation(line: 2389, column: 21, scope: !12904)
!12907 = !DILocation(line: 2389, column: 6, scope: !12842)
!12908 = !DILocation(line: 2390, column: 8, scope: !12909)
!12909 = distinct !DILexicalBlock(scope: !12904, file: !3, line: 2389, column: 57)
!12910 = !DILocation(line: 2390, column: 20, scope: !12909)
!12911 = !DILocation(line: 2391, column: 2, scope: !12909)
!12912 = !DILocation(line: 2393, column: 6, scope: !12913)
!12913 = distinct !DILexicalBlock(scope: !12842, file: !3, line: 2393, column: 6)
!12914 = !DILocation(line: 2393, column: 11, scope: !12913)
!12915 = !DILocation(line: 2393, column: 21, scope: !12913)
!12916 = !DILocation(line: 2393, column: 6, scope: !12842)
!12917 = !DILocation(line: 2394, column: 40, scope: !12918)
!12918 = distinct !DILexicalBlock(scope: !12913, file: !3, line: 2393, column: 56)
!12919 = !DILocation(line: 2394, column: 45, scope: !12918)
!12920 = !DILocation(line: 2394, column: 58, scope: !12918)
!12921 = !DILocation(line: 2394, column: 10, scope: !12918)
!12922 = !DILocation(line: 2394, column: 8, scope: !12918)
!12923 = !DILocation(line: 2395, column: 2, scope: !12918)
!12924 = !DILocation(line: 2397, column: 38, scope: !12925)
!12925 = distinct !DILexicalBlock(scope: !12913, file: !3, line: 2396, column: 7)
!12926 = !DILocation(line: 2397, column: 43, scope: !12925)
!12927 = !DILocation(line: 2397, column: 10, scope: !12925)
!12928 = !DILocation(line: 2397, column: 8, scope: !12925)
!12929 = !DILocation(line: 2400, column: 9, scope: !12842)
!12930 = !DILocation(line: 2400, column: 2, scope: !12842)
!12931 = !DILocation(line: 2401, column: 1, scope: !12842)
!12932 = distinct !DISubprogram(name: "seq_render_mask_strip", scope: !3, file: !3, line: 2479, type: !5290, scopeLine: 2480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12933 = !DILocalVariable(name: "context", arg: 1, scope: !12932, file: !3, line: 2479, type: !1892)
!12934 = !DILocation(line: 2479, column: 58, scope: !12932)
!12935 = !DILocalVariable(name: "seq", arg: 2, scope: !12932, file: !3, line: 2479, type: !204)
!12936 = !DILocation(line: 2479, column: 77, scope: !12932)
!12937 = !DILocalVariable(name: "nr", arg: 3, scope: !12932, file: !3, line: 2479, type: !193)
!12938 = !DILocation(line: 2479, column: 88, scope: !12932)
!12939 = !DILocalVariable(name: "make_float", scope: !12932, file: !3, line: 2481, type: !742)
!12940 = !DILocation(line: 2481, column: 7, scope: !12932)
!12941 = !DILocation(line: 2481, column: 21, scope: !12932)
!12942 = !DILocation(line: 2481, column: 26, scope: !12932)
!12943 = !DILocation(line: 2481, column: 31, scope: !12932)
!12944 = !DILocation(line: 2481, column: 49, scope: !12932)
!12945 = !DILocation(line: 2481, column: 20, scope: !12932)
!12946 = !DILocation(line: 2483, column: 25, scope: !12932)
!12947 = !DILocation(line: 2483, column: 34, scope: !12932)
!12948 = !DILocation(line: 2483, column: 39, scope: !12932)
!12949 = !DILocation(line: 2483, column: 45, scope: !12932)
!12950 = !DILocation(line: 2483, column: 49, scope: !12932)
!12951 = !DILocation(line: 2483, column: 9, scope: !12932)
!12952 = !DILocation(line: 2483, column: 2, scope: !12932)
!12953 = distinct !DISubprogram(name: "seq_render_effect_execute_threaded", scope: !3, file: !3, line: 2230, type: !12954, scopeLine: 2233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!12954 = !DISubroutineType(types: !12955)
!12955 = !{!1776, !1857, !1892, !204, !193, !193, !193, !1776, !1776, !1776}
!12956 = !DILocalVariable(name: "sh", arg: 1, scope: !12953, file: !3, line: 2230, type: !1857)
!12957 = !DILocation(line: 2230, column: 74, scope: !12953)
!12958 = !DILocalVariable(name: "context", arg: 2, scope: !12953, file: !3, line: 2230, type: !1892)
!12959 = !DILocation(line: 2230, column: 99, scope: !12953)
!12960 = !DILocalVariable(name: "seq", arg: 3, scope: !12953, file: !3, line: 2230, type: !204)
!12961 = !DILocation(line: 2230, column: 118, scope: !12953)
!12962 = !DILocalVariable(name: "cfra", arg: 4, scope: !12953, file: !3, line: 2231, type: !193)
!12963 = !DILocation(line: 2231, column: 56, scope: !12953)
!12964 = !DILocalVariable(name: "facf0", arg: 5, scope: !12953, file: !3, line: 2231, type: !193)
!12965 = !DILocation(line: 2231, column: 68, scope: !12953)
!12966 = !DILocalVariable(name: "facf1", arg: 6, scope: !12953, file: !3, line: 2231, type: !193)
!12967 = !DILocation(line: 2231, column: 81, scope: !12953)
!12968 = !DILocalVariable(name: "ibuf1", arg: 7, scope: !12953, file: !3, line: 2232, type: !1776)
!12969 = !DILocation(line: 2232, column: 57, scope: !12953)
!12970 = !DILocalVariable(name: "ibuf2", arg: 8, scope: !12953, file: !3, line: 2232, type: !1776)
!12971 = !DILocation(line: 2232, column: 71, scope: !12953)
!12972 = !DILocalVariable(name: "ibuf3", arg: 9, scope: !12953, file: !3, line: 2232, type: !1776)
!12973 = !DILocation(line: 2232, column: 85, scope: !12953)
!12974 = !DILocalVariable(name: "init_data", scope: !12953, file: !3, line: 2234, type: !1989)
!12975 = !DILocation(line: 2234, column: 23, scope: !12953)
!12976 = !DILocalVariable(name: "out", scope: !12953, file: !3, line: 2235, type: !1776)
!12977 = !DILocation(line: 2235, column: 9, scope: !12953)
!12978 = !DILocation(line: 2235, column: 15, scope: !12953)
!12979 = !DILocation(line: 2235, column: 19, scope: !12953)
!12980 = !DILocation(line: 2235, column: 34, scope: !12953)
!12981 = !DILocation(line: 2235, column: 43, scope: !12953)
!12982 = !DILocation(line: 2235, column: 50, scope: !12953)
!12983 = !DILocation(line: 2235, column: 57, scope: !12953)
!12984 = !DILocation(line: 2237, column: 17, scope: !12953)
!12985 = !DILocation(line: 2237, column: 12, scope: !12953)
!12986 = !DILocation(line: 2237, column: 15, scope: !12953)
!12987 = !DILocation(line: 2238, column: 22, scope: !12953)
!12988 = !DILocation(line: 2238, column: 12, scope: !12953)
!12989 = !DILocation(line: 2238, column: 20, scope: !12953)
!12990 = !DILocation(line: 2239, column: 18, scope: !12953)
!12991 = !DILocation(line: 2239, column: 12, scope: !12953)
!12992 = !DILocation(line: 2239, column: 16, scope: !12953)
!12993 = !DILocation(line: 2240, column: 19, scope: !12953)
!12994 = !DILocation(line: 2240, column: 12, scope: !12953)
!12995 = !DILocation(line: 2240, column: 17, scope: !12953)
!12996 = !DILocation(line: 2241, column: 20, scope: !12953)
!12997 = !DILocation(line: 2241, column: 12, scope: !12953)
!12998 = !DILocation(line: 2241, column: 18, scope: !12953)
!12999 = !DILocation(line: 2242, column: 20, scope: !12953)
!13000 = !DILocation(line: 2242, column: 12, scope: !12953)
!13001 = !DILocation(line: 2242, column: 18, scope: !12953)
!13002 = !DILocation(line: 2243, column: 20, scope: !12953)
!13003 = !DILocation(line: 2243, column: 12, scope: !12953)
!13004 = !DILocation(line: 2243, column: 18, scope: !12953)
!13005 = !DILocation(line: 2244, column: 20, scope: !12953)
!13006 = !DILocation(line: 2244, column: 12, scope: !12953)
!13007 = !DILocation(line: 2244, column: 18, scope: !12953)
!13008 = !DILocation(line: 2245, column: 20, scope: !12953)
!13009 = !DILocation(line: 2245, column: 12, scope: !12953)
!13010 = !DILocation(line: 2245, column: 18, scope: !12953)
!13011 = !DILocation(line: 2246, column: 18, scope: !12953)
!13012 = !DILocation(line: 2246, column: 12, scope: !12953)
!13013 = !DILocation(line: 2246, column: 16, scope: !12953)
!13014 = !DILocation(line: 2248, column: 31, scope: !12953)
!13015 = !DILocation(line: 2248, column: 36, scope: !12953)
!13016 = !DILocation(line: 2248, column: 67, scope: !12953)
!13017 = !DILocation(line: 2248, column: 2, scope: !12953)
!13018 = !DILocation(line: 2251, column: 9, scope: !12953)
!13019 = !DILocation(line: 2251, column: 2, scope: !12953)
!13020 = distinct !DISubprogram(name: "render_effect_execute_init_handle", scope: !3, file: !3, line: 2198, type: !5684, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13021 = !DILocalVariable(name: "handle_v", arg: 1, scope: !13020, file: !3, line: 2198, type: !129)
!13022 = !DILocation(line: 2198, column: 53, scope: !13020)
!13023 = !DILocalVariable(name: "start_line", arg: 2, scope: !13020, file: !3, line: 2198, type: !45)
!13024 = !DILocation(line: 2198, column: 67, scope: !13020)
!13025 = !DILocalVariable(name: "tot_line", arg: 3, scope: !13020, file: !3, line: 2198, type: !45)
!13026 = !DILocation(line: 2198, column: 83, scope: !13020)
!13027 = !DILocalVariable(name: "init_data_v", arg: 4, scope: !13020, file: !3, line: 2198, type: !129)
!13028 = !DILocation(line: 2198, column: 99, scope: !13020)
!13029 = !DILocalVariable(name: "handle", scope: !13020, file: !3, line: 2200, type: !1852)
!13030 = !DILocation(line: 2200, column: 22, scope: !13020)
!13031 = !DILocation(line: 2200, column: 54, scope: !13020)
!13032 = !DILocation(line: 2200, column: 31, scope: !13020)
!13033 = !DILocalVariable(name: "init_data", scope: !13020, file: !3, line: 2201, type: !1988)
!13034 = !DILocation(line: 2201, column: 24, scope: !13020)
!13035 = !DILocation(line: 2201, column: 61, scope: !13020)
!13036 = !DILocation(line: 2201, column: 36, scope: !13020)
!13037 = !DILocation(line: 2203, column: 15, scope: !13020)
!13038 = !DILocation(line: 2203, column: 26, scope: !13020)
!13039 = !DILocation(line: 2203, column: 2, scope: !13020)
!13040 = !DILocation(line: 2203, column: 10, scope: !13020)
!13041 = !DILocation(line: 2203, column: 13, scope: !13020)
!13042 = !DILocation(line: 2204, column: 20, scope: !13020)
!13043 = !DILocation(line: 2204, column: 31, scope: !13020)
!13044 = !DILocation(line: 2204, column: 2, scope: !13020)
!13045 = !DILocation(line: 2204, column: 10, scope: !13020)
!13046 = !DILocation(line: 2204, column: 18, scope: !13020)
!13047 = !DILocation(line: 2205, column: 16, scope: !13020)
!13048 = !DILocation(line: 2205, column: 27, scope: !13020)
!13049 = !DILocation(line: 2205, column: 2, scope: !13020)
!13050 = !DILocation(line: 2205, column: 10, scope: !13020)
!13051 = !DILocation(line: 2205, column: 14, scope: !13020)
!13052 = !DILocation(line: 2206, column: 17, scope: !13020)
!13053 = !DILocation(line: 2206, column: 28, scope: !13020)
!13054 = !DILocation(line: 2206, column: 2, scope: !13020)
!13055 = !DILocation(line: 2206, column: 10, scope: !13020)
!13056 = !DILocation(line: 2206, column: 15, scope: !13020)
!13057 = !DILocation(line: 2207, column: 18, scope: !13020)
!13058 = !DILocation(line: 2207, column: 29, scope: !13020)
!13059 = !DILocation(line: 2207, column: 2, scope: !13020)
!13060 = !DILocation(line: 2207, column: 10, scope: !13020)
!13061 = !DILocation(line: 2207, column: 16, scope: !13020)
!13062 = !DILocation(line: 2208, column: 18, scope: !13020)
!13063 = !DILocation(line: 2208, column: 29, scope: !13020)
!13064 = !DILocation(line: 2208, column: 2, scope: !13020)
!13065 = !DILocation(line: 2208, column: 10, scope: !13020)
!13066 = !DILocation(line: 2208, column: 16, scope: !13020)
!13067 = !DILocation(line: 2209, column: 18, scope: !13020)
!13068 = !DILocation(line: 2209, column: 29, scope: !13020)
!13069 = !DILocation(line: 2209, column: 2, scope: !13020)
!13070 = !DILocation(line: 2209, column: 10, scope: !13020)
!13071 = !DILocation(line: 2209, column: 16, scope: !13020)
!13072 = !DILocation(line: 2210, column: 18, scope: !13020)
!13073 = !DILocation(line: 2210, column: 29, scope: !13020)
!13074 = !DILocation(line: 2210, column: 2, scope: !13020)
!13075 = !DILocation(line: 2210, column: 10, scope: !13020)
!13076 = !DILocation(line: 2210, column: 16, scope: !13020)
!13077 = !DILocation(line: 2211, column: 18, scope: !13020)
!13078 = !DILocation(line: 2211, column: 29, scope: !13020)
!13079 = !DILocation(line: 2211, column: 2, scope: !13020)
!13080 = !DILocation(line: 2211, column: 10, scope: !13020)
!13081 = !DILocation(line: 2211, column: 16, scope: !13020)
!13082 = !DILocation(line: 2212, column: 16, scope: !13020)
!13083 = !DILocation(line: 2212, column: 27, scope: !13020)
!13084 = !DILocation(line: 2212, column: 2, scope: !13020)
!13085 = !DILocation(line: 2212, column: 10, scope: !13020)
!13086 = !DILocation(line: 2212, column: 14, scope: !13020)
!13087 = !DILocation(line: 2214, column: 23, scope: !13020)
!13088 = !DILocation(line: 2214, column: 2, scope: !13020)
!13089 = !DILocation(line: 2214, column: 10, scope: !13020)
!13090 = !DILocation(line: 2214, column: 21, scope: !13020)
!13091 = !DILocation(line: 2215, column: 21, scope: !13020)
!13092 = !DILocation(line: 2215, column: 2, scope: !13020)
!13093 = !DILocation(line: 2215, column: 10, scope: !13020)
!13094 = !DILocation(line: 2215, column: 19, scope: !13020)
!13095 = !DILocation(line: 2216, column: 1, scope: !13020)
!13096 = distinct !DISubprogram(name: "render_effect_execute_do_thread", scope: !3, file: !3, line: 2218, type: !5803, scopeLine: 2219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13097 = !DILocalVariable(name: "thread_data_v", arg: 1, scope: !13096, file: !3, line: 2218, type: !129)
!13098 = !DILocation(line: 2218, column: 52, scope: !13096)
!13099 = !DILocalVariable(name: "thread_data", scope: !13096, file: !3, line: 2220, type: !1852)
!13100 = !DILocation(line: 2220, column: 22, scope: !13096)
!13101 = !DILocation(line: 2220, column: 59, scope: !13096)
!13102 = !DILocation(line: 2220, column: 36, scope: !13096)
!13103 = !DILocation(line: 2222, column: 2, scope: !13096)
!13104 = !DILocation(line: 2222, column: 15, scope: !13096)
!13105 = !DILocation(line: 2222, column: 19, scope: !13096)
!13106 = !DILocation(line: 2222, column: 33, scope: !13096)
!13107 = !DILocation(line: 2222, column: 46, scope: !13096)
!13108 = !DILocation(line: 2222, column: 55, scope: !13096)
!13109 = !DILocation(line: 2222, column: 68, scope: !13096)
!13110 = !DILocation(line: 2222, column: 73, scope: !13096)
!13111 = !DILocation(line: 2222, column: 86, scope: !13096)
!13112 = !DILocation(line: 2223, column: 33, scope: !13096)
!13113 = !DILocation(line: 2223, column: 46, scope: !13096)
!13114 = !DILocation(line: 2223, column: 53, scope: !13096)
!13115 = !DILocation(line: 2223, column: 66, scope: !13096)
!13116 = !DILocation(line: 2223, column: 73, scope: !13096)
!13117 = !DILocation(line: 2223, column: 86, scope: !13096)
!13118 = !DILocation(line: 2224, column: 33, scope: !13096)
!13119 = !DILocation(line: 2224, column: 46, scope: !13096)
!13120 = !DILocation(line: 2224, column: 53, scope: !13096)
!13121 = !DILocation(line: 2224, column: 66, scope: !13096)
!13122 = !DILocation(line: 2224, column: 73, scope: !13096)
!13123 = !DILocation(line: 2224, column: 86, scope: !13096)
!13124 = !DILocation(line: 2225, column: 33, scope: !13096)
!13125 = !DILocation(line: 2225, column: 46, scope: !13096)
!13126 = !DILocation(line: 2225, column: 56, scope: !13096)
!13127 = !DILocation(line: 2225, column: 69, scope: !13096)
!13128 = !DILocation(line: 2227, column: 2, scope: !13096)
!13129 = distinct !DISubprogram(name: "seq_rendersize_to_scale_factor", scope: !3, file: !3, line: 1326, type: !13130, scopeLine: 1327, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13130 = !DISubroutineType(types: !13131)
!13131 = !{!1755, !45}
!13132 = !DILocalVariable(name: "size", arg: 1, scope: !13129, file: !3, line: 1326, type: !45)
!13133 = !DILocation(line: 1326, column: 50, scope: !13129)
!13134 = !DILocation(line: 1328, column: 6, scope: !13135)
!13135 = distinct !DILexicalBlock(scope: !13129, file: !3, line: 1328, column: 6)
!13136 = !DILocation(line: 1328, column: 11, scope: !13135)
!13137 = !DILocation(line: 1328, column: 6, scope: !13129)
!13138 = !DILocation(line: 1329, column: 3, scope: !13139)
!13139 = distinct !DILexicalBlock(scope: !13135, file: !3, line: 1328, column: 18)
!13140 = !DILocation(line: 1331, column: 6, scope: !13141)
!13141 = distinct !DILexicalBlock(scope: !13129, file: !3, line: 1331, column: 6)
!13142 = !DILocation(line: 1331, column: 11, scope: !13141)
!13143 = !DILocation(line: 1331, column: 6, scope: !13129)
!13144 = !DILocation(line: 1332, column: 3, scope: !13145)
!13145 = distinct !DILexicalBlock(scope: !13141, file: !3, line: 1331, column: 18)
!13146 = !DILocation(line: 1334, column: 6, scope: !13147)
!13147 = distinct !DILexicalBlock(scope: !13129, file: !3, line: 1334, column: 6)
!13148 = !DILocation(line: 1334, column: 11, scope: !13147)
!13149 = !DILocation(line: 1334, column: 6, scope: !13129)
!13150 = !DILocation(line: 1335, column: 3, scope: !13151)
!13151 = distinct !DILexicalBlock(scope: !13147, file: !3, line: 1334, column: 18)
!13152 = !DILocation(line: 1337, column: 2, scope: !13129)
!13153 = !DILocation(line: 1338, column: 1, scope: !13129)
!13154 = distinct !DISubprogram(name: "make_black_ibuf", scope: !3, file: !3, line: 1063, type: !13155, scopeLine: 1064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13155 = !DISubroutineType(types: !13156)
!13156 = !{null, !1776}
!13157 = !DILocalVariable(name: "ibuf", arg: 1, scope: !13154, file: !3, line: 1063, type: !1776)
!13158 = !DILocation(line: 1063, column: 36, scope: !13154)
!13159 = !DILocalVariable(name: "rect", scope: !13154, file: !3, line: 1065, type: !750)
!13160 = !DILocation(line: 1065, column: 16, scope: !13154)
!13161 = !DILocalVariable(name: "rect_float", scope: !13154, file: !3, line: 1066, type: !832)
!13162 = !DILocation(line: 1066, column: 9, scope: !13154)
!13163 = !DILocalVariable(name: "tot", scope: !13154, file: !3, line: 1067, type: !45)
!13164 = !DILocation(line: 1067, column: 6, scope: !13154)
!13165 = !DILocation(line: 1069, column: 6, scope: !13166)
!13166 = distinct !DILexicalBlock(scope: !13154, file: !3, line: 1069, column: 6)
!13167 = !DILocation(line: 1069, column: 11, scope: !13166)
!13168 = !DILocation(line: 1069, column: 19, scope: !13166)
!13169 = !DILocation(line: 1069, column: 23, scope: !13166)
!13170 = !DILocation(line: 1069, column: 29, scope: !13166)
!13171 = !DILocation(line: 1069, column: 34, scope: !13166)
!13172 = !DILocation(line: 1069, column: 42, scope: !13166)
!13173 = !DILocation(line: 1069, column: 45, scope: !13166)
!13174 = !DILocation(line: 1069, column: 51, scope: !13166)
!13175 = !DILocation(line: 1069, column: 62, scope: !13166)
!13176 = !DILocation(line: 1069, column: 6, scope: !13154)
!13177 = !DILocation(line: 1070, column: 3, scope: !13178)
!13178 = distinct !DILexicalBlock(scope: !13166, file: !3, line: 1069, column: 72)
!13179 = !DILocation(line: 1073, column: 8, scope: !13154)
!13180 = !DILocation(line: 1073, column: 14, scope: !13154)
!13181 = !DILocation(line: 1073, column: 18, scope: !13154)
!13182 = !DILocation(line: 1073, column: 24, scope: !13154)
!13183 = !DILocation(line: 1073, column: 16, scope: !13154)
!13184 = !DILocation(line: 1073, column: 6, scope: !13154)
!13185 = !DILocation(line: 1075, column: 9, scope: !13154)
!13186 = !DILocation(line: 1075, column: 15, scope: !13154)
!13187 = !DILocation(line: 1075, column: 7, scope: !13154)
!13188 = !DILocation(line: 1076, column: 15, scope: !13154)
!13189 = !DILocation(line: 1076, column: 21, scope: !13154)
!13190 = !DILocation(line: 1076, column: 13, scope: !13154)
!13191 = !DILocation(line: 1078, column: 6, scope: !13192)
!13192 = distinct !DILexicalBlock(scope: !13154, file: !3, line: 1078, column: 6)
!13193 = !DILocation(line: 1078, column: 6, scope: !13154)
!13194 = !DILocation(line: 1079, column: 10, scope: !13195)
!13195 = distinct !DILexicalBlock(scope: !13192, file: !3, line: 1078, column: 12)
!13196 = !DILocation(line: 1079, column: 3, scope: !13195)
!13197 = !DILocation(line: 1079, column: 19, scope: !13195)
!13198 = !DILocation(line: 1079, column: 23, scope: !13195)
!13199 = !DILocation(line: 1079, column: 38, scope: !13195)
!13200 = !DILocation(line: 1080, column: 2, scope: !13195)
!13201 = !DILocation(line: 1082, column: 6, scope: !13202)
!13202 = distinct !DILexicalBlock(scope: !13154, file: !3, line: 1082, column: 6)
!13203 = !DILocation(line: 1082, column: 6, scope: !13154)
!13204 = !DILocation(line: 1083, column: 10, scope: !13205)
!13205 = distinct !DILexicalBlock(scope: !13202, file: !3, line: 1082, column: 18)
!13206 = !DILocation(line: 1083, column: 3, scope: !13205)
!13207 = !DILocation(line: 1083, column: 25, scope: !13205)
!13208 = !DILocation(line: 1083, column: 29, scope: !13205)
!13209 = !DILocation(line: 1083, column: 45, scope: !13205)
!13210 = !DILocation(line: 1084, column: 2, scope: !13205)
!13211 = !DILocation(line: 1085, column: 1, scope: !13154)
!13212 = distinct !DISubprogram(name: "multibuf", scope: !3, file: !3, line: 1087, type: !13213, scopeLine: 1088, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13213 = !DISubroutineType(types: !13214)
!13214 = !{null, !1776, !193}
!13215 = !DILocalVariable(name: "ibuf", arg: 1, scope: !13212, file: !3, line: 1087, type: !1776)
!13216 = !DILocation(line: 1087, column: 29, scope: !13212)
!13217 = !DILocalVariable(name: "fmul", arg: 2, scope: !13212, file: !3, line: 1087, type: !193)
!13218 = !DILocation(line: 1087, column: 41, scope: !13212)
!13219 = !DILocalVariable(name: "rt", scope: !13212, file: !3, line: 1089, type: !498)
!13220 = !DILocation(line: 1089, column: 8, scope: !13212)
!13221 = !DILocalVariable(name: "rt_float", scope: !13212, file: !3, line: 1090, type: !832)
!13222 = !DILocation(line: 1090, column: 9, scope: !13212)
!13223 = !DILocalVariable(name: "a", scope: !13212, file: !3, line: 1092, type: !45)
!13224 = !DILocation(line: 1092, column: 6, scope: !13212)
!13225 = !DILocalVariable(name: "mul", scope: !13212, file: !3, line: 1092, type: !45)
!13226 = !DILocation(line: 1092, column: 9, scope: !13212)
!13227 = !DILocalVariable(name: "icol", scope: !13212, file: !3, line: 1092, type: !45)
!13228 = !DILocation(line: 1092, column: 14, scope: !13212)
!13229 = !DILocation(line: 1094, column: 23, scope: !13212)
!13230 = !DILocation(line: 1094, column: 21, scope: !13212)
!13231 = !DILocation(line: 1094, column: 8, scope: !13212)
!13232 = !DILocation(line: 1094, column: 6, scope: !13212)
!13233 = !DILocation(line: 1095, column: 15, scope: !13212)
!13234 = !DILocation(line: 1095, column: 21, scope: !13212)
!13235 = !DILocation(line: 1095, column: 7, scope: !13212)
!13236 = !DILocation(line: 1095, column: 5, scope: !13212)
!13237 = !DILocation(line: 1096, column: 13, scope: !13212)
!13238 = !DILocation(line: 1096, column: 19, scope: !13212)
!13239 = !DILocation(line: 1096, column: 11, scope: !13212)
!13240 = !DILocation(line: 1098, column: 6, scope: !13241)
!13241 = distinct !DILexicalBlock(scope: !13212, file: !3, line: 1098, column: 6)
!13242 = !DILocation(line: 1098, column: 6, scope: !13212)
!13243 = !DILocation(line: 1099, column: 7, scope: !13244)
!13244 = distinct !DILexicalBlock(scope: !13241, file: !3, line: 1098, column: 10)
!13245 = !DILocation(line: 1099, column: 13, scope: !13244)
!13246 = !DILocation(line: 1099, column: 17, scope: !13244)
!13247 = !DILocation(line: 1099, column: 23, scope: !13244)
!13248 = !DILocation(line: 1099, column: 15, scope: !13244)
!13249 = !DILocation(line: 1099, column: 5, scope: !13244)
!13250 = !DILocation(line: 1100, column: 3, scope: !13244)
!13251 = !DILocation(line: 1100, column: 11, scope: !13244)
!13252 = !DILocation(line: 1102, column: 12, scope: !13253)
!13253 = distinct !DILexicalBlock(scope: !13244, file: !3, line: 1100, column: 15)
!13254 = !DILocation(line: 1102, column: 18, scope: !13253)
!13255 = !DILocation(line: 1102, column: 16, scope: !13253)
!13256 = !DILocation(line: 1102, column: 25, scope: !13253)
!13257 = !DILocation(line: 1102, column: 9, scope: !13253)
!13258 = !DILocation(line: 1103, column: 8, scope: !13259)
!13259 = distinct !DILexicalBlock(scope: !13253, file: !3, line: 1103, column: 8)
!13260 = !DILocation(line: 1103, column: 13, scope: !13259)
!13261 = !DILocation(line: 1103, column: 8, scope: !13253)
!13262 = !DILocation(line: 1103, column: 20, scope: !13259)
!13263 = !DILocation(line: 1103, column: 26, scope: !13259)
!13264 = !DILocation(line: 1103, column: 46, scope: !13259)
!13265 = !DILocation(line: 1103, column: 38, scope: !13259)
!13266 = !DILocation(line: 1103, column: 44, scope: !13259)
!13267 = !DILocation(line: 1104, column: 12, scope: !13253)
!13268 = !DILocation(line: 1104, column: 18, scope: !13253)
!13269 = !DILocation(line: 1104, column: 16, scope: !13253)
!13270 = !DILocation(line: 1104, column: 25, scope: !13253)
!13271 = !DILocation(line: 1104, column: 9, scope: !13253)
!13272 = !DILocation(line: 1105, column: 8, scope: !13273)
!13273 = distinct !DILexicalBlock(scope: !13253, file: !3, line: 1105, column: 8)
!13274 = !DILocation(line: 1105, column: 13, scope: !13273)
!13275 = !DILocation(line: 1105, column: 8, scope: !13253)
!13276 = !DILocation(line: 1105, column: 20, scope: !13273)
!13277 = !DILocation(line: 1105, column: 26, scope: !13273)
!13278 = !DILocation(line: 1105, column: 46, scope: !13273)
!13279 = !DILocation(line: 1105, column: 38, scope: !13273)
!13280 = !DILocation(line: 1105, column: 44, scope: !13273)
!13281 = !DILocation(line: 1106, column: 12, scope: !13253)
!13282 = !DILocation(line: 1106, column: 18, scope: !13253)
!13283 = !DILocation(line: 1106, column: 16, scope: !13253)
!13284 = !DILocation(line: 1106, column: 25, scope: !13253)
!13285 = !DILocation(line: 1106, column: 9, scope: !13253)
!13286 = !DILocation(line: 1107, column: 8, scope: !13287)
!13287 = distinct !DILexicalBlock(scope: !13253, file: !3, line: 1107, column: 8)
!13288 = !DILocation(line: 1107, column: 13, scope: !13287)
!13289 = !DILocation(line: 1107, column: 8, scope: !13253)
!13290 = !DILocation(line: 1107, column: 20, scope: !13287)
!13291 = !DILocation(line: 1107, column: 26, scope: !13287)
!13292 = !DILocation(line: 1107, column: 46, scope: !13287)
!13293 = !DILocation(line: 1107, column: 38, scope: !13287)
!13294 = !DILocation(line: 1107, column: 44, scope: !13287)
!13295 = !DILocation(line: 1108, column: 12, scope: !13253)
!13296 = !DILocation(line: 1108, column: 18, scope: !13253)
!13297 = !DILocation(line: 1108, column: 16, scope: !13253)
!13298 = !DILocation(line: 1108, column: 25, scope: !13253)
!13299 = !DILocation(line: 1108, column: 9, scope: !13253)
!13300 = !DILocation(line: 1109, column: 8, scope: !13301)
!13301 = distinct !DILexicalBlock(scope: !13253, file: !3, line: 1109, column: 8)
!13302 = !DILocation(line: 1109, column: 13, scope: !13301)
!13303 = !DILocation(line: 1109, column: 8, scope: !13253)
!13304 = !DILocation(line: 1109, column: 20, scope: !13301)
!13305 = !DILocation(line: 1109, column: 26, scope: !13301)
!13306 = !DILocation(line: 1109, column: 46, scope: !13301)
!13307 = !DILocation(line: 1109, column: 38, scope: !13301)
!13308 = !DILocation(line: 1109, column: 44, scope: !13301)
!13309 = !DILocation(line: 1111, column: 7, scope: !13253)
!13310 = distinct !{!13310, !13250, !13311}
!13311 = !DILocation(line: 1112, column: 3, scope: !13244)
!13312 = !DILocation(line: 1113, column: 2, scope: !13244)
!13313 = !DILocation(line: 1114, column: 6, scope: !13314)
!13314 = distinct !DILexicalBlock(scope: !13212, file: !3, line: 1114, column: 6)
!13315 = !DILocation(line: 1114, column: 6, scope: !13212)
!13316 = !DILocation(line: 1115, column: 7, scope: !13317)
!13317 = distinct !DILexicalBlock(scope: !13314, file: !3, line: 1114, column: 16)
!13318 = !DILocation(line: 1115, column: 13, scope: !13317)
!13319 = !DILocation(line: 1115, column: 17, scope: !13317)
!13320 = !DILocation(line: 1115, column: 23, scope: !13317)
!13321 = !DILocation(line: 1115, column: 15, scope: !13317)
!13322 = !DILocation(line: 1115, column: 5, scope: !13317)
!13323 = !DILocation(line: 1116, column: 3, scope: !13317)
!13324 = !DILocation(line: 1116, column: 11, scope: !13317)
!13325 = !DILocation(line: 1117, column: 19, scope: !13326)
!13326 = distinct !DILexicalBlock(scope: !13317, file: !3, line: 1116, column: 15)
!13327 = !DILocation(line: 1117, column: 4, scope: !13326)
!13328 = !DILocation(line: 1117, column: 16, scope: !13326)
!13329 = !DILocation(line: 1118, column: 19, scope: !13326)
!13330 = !DILocation(line: 1118, column: 4, scope: !13326)
!13331 = !DILocation(line: 1118, column: 16, scope: !13326)
!13332 = !DILocation(line: 1119, column: 19, scope: !13326)
!13333 = !DILocation(line: 1119, column: 4, scope: !13326)
!13334 = !DILocation(line: 1119, column: 16, scope: !13326)
!13335 = !DILocation(line: 1120, column: 19, scope: !13326)
!13336 = !DILocation(line: 1120, column: 4, scope: !13326)
!13337 = !DILocation(line: 1120, column: 16, scope: !13326)
!13338 = !DILocation(line: 1122, column: 13, scope: !13326)
!13339 = distinct !{!13339, !13323, !13340}
!13340 = !DILocation(line: 1123, column: 3, scope: !13317)
!13341 = !DILocation(line: 1124, column: 2, scope: !13317)
!13342 = !DILocation(line: 1125, column: 1, scope: !13212)
!13343 = distinct !DISubprogram(name: "get_shown_sequences", scope: !3, file: !3, line: 1253, type: !13344, scopeLine: 1254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13344 = !DISubroutineType(types: !13345)
!13345 = !{!45, !202, !45, !45, !2002}
!13346 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !13343, file: !3, line: 1253, type: !202)
!13347 = !DILocation(line: 1253, column: 42, scope: !13343)
!13348 = !DILocalVariable(name: "cfra", arg: 2, scope: !13343, file: !3, line: 1253, type: !45)
!13349 = !DILocation(line: 1253, column: 56, scope: !13343)
!13350 = !DILocalVariable(name: "chanshown", arg: 3, scope: !13343, file: !3, line: 1253, type: !45)
!13351 = !DILocation(line: 1253, column: 66, scope: !13343)
!13352 = !DILocalVariable(name: "seq_arr_out", arg: 4, scope: !13343, file: !3, line: 1253, type: !2002)
!13353 = !DILocation(line: 1253, column: 88, scope: !13343)
!13354 = !DILocalVariable(name: "seq_arr", scope: !13343, file: !3, line: 1255, type: !4473)
!13355 = !DILocation(line: 1255, column: 12, scope: !13343)
!13356 = !DILocalVariable(name: "b", scope: !13343, file: !3, line: 1256, type: !45)
!13357 = !DILocation(line: 1256, column: 6, scope: !13343)
!13358 = !DILocation(line: 1256, column: 10, scope: !13343)
!13359 = !DILocalVariable(name: "cnt", scope: !13343, file: !3, line: 1257, type: !45)
!13360 = !DILocation(line: 1257, column: 6, scope: !13343)
!13361 = !DILocation(line: 1259, column: 6, scope: !13362)
!13362 = distinct !DILexicalBlock(scope: !13343, file: !3, line: 1259, column: 6)
!13363 = !DILocation(line: 1259, column: 8, scope: !13362)
!13364 = !DILocation(line: 1259, column: 6, scope: !13343)
!13365 = !DILocation(line: 1260, column: 3, scope: !13366)
!13366 = distinct !DILexicalBlock(scope: !13362, file: !3, line: 1259, column: 18)
!13367 = !DILocation(line: 1263, column: 29, scope: !13368)
!13368 = distinct !DILexicalBlock(scope: !13343, file: !3, line: 1263, column: 6)
!13369 = !DILocation(line: 1263, column: 38, scope: !13368)
!13370 = !DILocation(line: 1263, column: 48, scope: !13368)
!13371 = !DILocation(line: 1263, column: 54, scope: !13368)
!13372 = !DILocation(line: 1263, column: 6, scope: !13368)
!13373 = !DILocation(line: 1263, column: 6, scope: !13343)
!13374 = !DILocation(line: 1264, column: 7, scope: !13375)
!13375 = distinct !DILexicalBlock(scope: !13376, file: !3, line: 1264, column: 7)
!13376 = distinct !DILexicalBlock(scope: !13368, file: !3, line: 1263, column: 66)
!13377 = !DILocation(line: 1264, column: 9, scope: !13375)
!13378 = !DILocation(line: 1264, column: 7, scope: !13376)
!13379 = !DILocation(line: 1265, column: 6, scope: !13380)
!13380 = distinct !DILexicalBlock(scope: !13375, file: !3, line: 1264, column: 15)
!13381 = !DILocation(line: 1266, column: 3, scope: !13380)
!13382 = !DILocation(line: 1267, column: 3, scope: !13376)
!13383 = !DILocation(line: 1267, column: 10, scope: !13384)
!13384 = distinct !DILexicalBlock(scope: !13385, file: !3, line: 1267, column: 3)
!13385 = distinct !DILexicalBlock(scope: !13376, file: !3, line: 1267, column: 3)
!13386 = !DILocation(line: 1267, column: 12, scope: !13384)
!13387 = !DILocation(line: 1267, column: 3, scope: !13385)
!13388 = !DILocation(line: 1268, column: 38, scope: !13389)
!13389 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 1268, column: 8)
!13390 = distinct !DILexicalBlock(scope: !13384, file: !3, line: 1267, column: 22)
!13391 = !DILocation(line: 1268, column: 30, scope: !13389)
!13392 = !DILocation(line: 1268, column: 8, scope: !13389)
!13393 = !DILocation(line: 1268, column: 8, scope: !13390)
!13394 = !DILocation(line: 1269, column: 5, scope: !13395)
!13395 = distinct !DILexicalBlock(scope: !13389, file: !3, line: 1268, column: 43)
!13396 = !DILocation(line: 1271, column: 3, scope: !13390)
!13397 = !DILocation(line: 1267, column: 18, scope: !13384)
!13398 = !DILocation(line: 1267, column: 3, scope: !13384)
!13399 = distinct !{!13399, !13387, !13400}
!13400 = !DILocation(line: 1271, column: 3, scope: !13385)
!13401 = !DILocation(line: 1272, column: 2, scope: !13376)
!13402 = !DILocation(line: 1274, column: 14, scope: !13343)
!13403 = !DILocation(line: 1274, column: 12, scope: !13343)
!13404 = !DILocation(line: 1276, column: 2, scope: !13343)
!13405 = !DILocation(line: 1276, column: 9, scope: !13406)
!13406 = distinct !DILexicalBlock(scope: !13407, file: !3, line: 1276, column: 2)
!13407 = distinct !DILexicalBlock(scope: !13343, file: !3, line: 1276, column: 2)
!13408 = !DILocation(line: 1276, column: 11, scope: !13406)
!13409 = !DILocation(line: 1276, column: 2, scope: !13407)
!13410 = !DILocation(line: 1277, column: 37, scope: !13411)
!13411 = distinct !DILexicalBlock(scope: !13412, file: !3, line: 1277, column: 7)
!13412 = distinct !DILexicalBlock(scope: !13406, file: !3, line: 1276, column: 21)
!13413 = !DILocation(line: 1277, column: 29, scope: !13411)
!13414 = !DILocation(line: 1277, column: 7, scope: !13411)
!13415 = !DILocation(line: 1277, column: 7, scope: !13412)
!13416 = !DILocation(line: 1278, column: 16, scope: !13417)
!13417 = distinct !DILexicalBlock(scope: !13418, file: !3, line: 1278, column: 8)
!13418 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 1277, column: 42)
!13419 = !DILocation(line: 1278, column: 8, scope: !13417)
!13420 = !DILocation(line: 1278, column: 20, scope: !13417)
!13421 = !DILocation(line: 1278, column: 31, scope: !13417)
!13422 = !DILocation(line: 1278, column: 8, scope: !13418)
!13423 = !DILocation(line: 1279, column: 5, scope: !13424)
!13424 = distinct !DILexicalBlock(scope: !13417, file: !3, line: 1278, column: 53)
!13425 = !DILocation(line: 1281, column: 3, scope: !13418)
!13426 = !DILocation(line: 1282, column: 2, scope: !13412)
!13427 = !DILocation(line: 1276, column: 17, scope: !13406)
!13428 = !DILocation(line: 1276, column: 2, scope: !13406)
!13429 = distinct !{!13429, !13409, !13430}
!13430 = !DILocation(line: 1282, column: 2, scope: !13407)
!13431 = !DILocation(line: 1284, column: 2, scope: !13343)
!13432 = !DILocation(line: 1284, column: 9, scope: !13433)
!13433 = distinct !DILexicalBlock(scope: !13434, file: !3, line: 1284, column: 2)
!13434 = distinct !DILexicalBlock(scope: !13343, file: !3, line: 1284, column: 2)
!13435 = !DILocation(line: 1284, column: 14, scope: !13433)
!13436 = !DILocation(line: 1284, column: 11, scope: !13433)
!13437 = !DILocation(line: 1284, column: 24, scope: !13433)
!13438 = !DILocation(line: 1284, column: 27, scope: !13433)
!13439 = !DILocation(line: 1284, column: 29, scope: !13433)
!13440 = !DILocation(line: 0, scope: !13433)
!13441 = !DILocation(line: 1284, column: 2, scope: !13434)
!13442 = !DILocation(line: 1285, column: 37, scope: !13443)
!13443 = distinct !DILexicalBlock(scope: !13444, file: !3, line: 1285, column: 7)
!13444 = distinct !DILexicalBlock(scope: !13433, file: !3, line: 1284, column: 40)
!13445 = !DILocation(line: 1285, column: 29, scope: !13443)
!13446 = !DILocation(line: 1285, column: 7, scope: !13443)
!13447 = !DILocation(line: 1285, column: 7, scope: !13444)
!13448 = !DILocation(line: 1286, column: 33, scope: !13449)
!13449 = distinct !DILexicalBlock(scope: !13443, file: !3, line: 1285, column: 42)
!13450 = !DILocation(line: 1286, column: 25, scope: !13449)
!13451 = !DILocation(line: 1286, column: 4, scope: !13449)
!13452 = !DILocation(line: 1286, column: 19, scope: !13449)
!13453 = !DILocation(line: 1286, column: 23, scope: !13449)
!13454 = !DILocation(line: 1287, column: 3, scope: !13449)
!13455 = !DILocation(line: 1288, column: 2, scope: !13444)
!13456 = !DILocation(line: 1284, column: 36, scope: !13433)
!13457 = !DILocation(line: 1284, column: 2, scope: !13433)
!13458 = distinct !{!13458, !13441, !13459}
!13459 = !DILocation(line: 1288, column: 2, scope: !13434)
!13460 = !DILocation(line: 1290, column: 9, scope: !13343)
!13461 = !DILocation(line: 1290, column: 2, scope: !13343)
!13462 = !DILocation(line: 1291, column: 1, scope: !13343)
!13463 = distinct !DISubprogram(name: "seq_get_early_out_for_blend_mode", scope: !3, file: !3, line: 2907, type: !7462, scopeLine: 2908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13464 = !DILocalVariable(name: "seq", arg: 1, scope: !13463, file: !3, line: 2907, type: !204)
!13465 = !DILocation(line: 2907, column: 55, scope: !13463)
!13466 = !DILocalVariable(name: "sh", scope: !13463, file: !3, line: 2909, type: !1858)
!13467 = !DILocation(line: 2909, column: 25, scope: !13463)
!13468 = !DILocation(line: 2909, column: 53, scope: !13463)
!13469 = !DILocation(line: 2909, column: 30, scope: !13463)
!13470 = !DILocalVariable(name: "facf", scope: !13463, file: !3, line: 2910, type: !193)
!13471 = !DILocation(line: 2910, column: 8, scope: !13463)
!13472 = !DILocation(line: 2910, column: 15, scope: !13463)
!13473 = !DILocation(line: 2910, column: 20, scope: !13463)
!13474 = !DILocation(line: 2910, column: 34, scope: !13463)
!13475 = !DILocalVariable(name: "early_out", scope: !13463, file: !3, line: 2911, type: !45)
!13476 = !DILocation(line: 2911, column: 6, scope: !13463)
!13477 = !DILocation(line: 2911, column: 21, scope: !13463)
!13478 = !DILocation(line: 2911, column: 31, scope: !13463)
!13479 = !DILocation(line: 2911, column: 36, scope: !13463)
!13480 = !DILocation(line: 2911, column: 42, scope: !13463)
!13481 = !DILocation(line: 2911, column: 18, scope: !13463)
!13482 = !DILocation(line: 2913, column: 6, scope: !13483)
!13483 = distinct !DILexicalBlock(scope: !13463, file: !3, line: 2913, column: 6)
!13484 = !DILocation(line: 2913, column: 6, scope: !13463)
!13485 = !DILocation(line: 2914, column: 10, scope: !13486)
!13486 = distinct !DILexicalBlock(scope: !13483, file: !3, line: 2913, column: 56)
!13487 = !DILocation(line: 2914, column: 3, scope: !13486)
!13488 = !DILocation(line: 2917, column: 40, scope: !13489)
!13489 = distinct !DILexicalBlock(scope: !13463, file: !3, line: 2917, column: 6)
!13490 = !DILocation(line: 2917, column: 6, scope: !13489)
!13491 = !DILocation(line: 2917, column: 6, scope: !13463)
!13492 = !DILocation(line: 2918, column: 7, scope: !13493)
!13493 = distinct !DILexicalBlock(scope: !13494, file: !3, line: 2918, column: 7)
!13494 = distinct !DILexicalBlock(scope: !13489, file: !3, line: 2917, column: 46)
!13495 = !DILocation(line: 2918, column: 17, scope: !13493)
!13496 = !DILocation(line: 2918, column: 7, scope: !13494)
!13497 = !DILocation(line: 2919, column: 4, scope: !13498)
!13498 = distinct !DILexicalBlock(scope: !13493, file: !3, line: 2918, column: 39)
!13499 = !DILocation(line: 2921, column: 12, scope: !13500)
!13500 = distinct !DILexicalBlock(scope: !13493, file: !3, line: 2921, column: 12)
!13501 = !DILocation(line: 2921, column: 22, scope: !13500)
!13502 = !DILocation(line: 2921, column: 12, scope: !13493)
!13503 = !DILocation(line: 2922, column: 4, scope: !13504)
!13504 = distinct !DILexicalBlock(scope: !13500, file: !3, line: 2921, column: 44)
!13505 = !DILocation(line: 2924, column: 2, scope: !13494)
!13506 = !DILocation(line: 2925, column: 9, scope: !13463)
!13507 = !DILocation(line: 2925, column: 2, scope: !13463)
!13508 = !DILocation(line: 2926, column: 1, scope: !13463)
!13509 = distinct !DISubprogram(name: "seq_render_strip_stack_apply_effect", scope: !3, file: !3, line: 2928, type: !13510, scopeLine: 2930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13510 = !DISubroutineType(types: !13511)
!13511 = !{!1776, !1892, !204, !193, !1776, !1776}
!13512 = !DILocalVariable(name: "context", arg: 1, scope: !13509, file: !3, line: 2928, type: !1892)
!13513 = !DILocation(line: 2928, column: 72, scope: !13509)
!13514 = !DILocalVariable(name: "seq", arg: 2, scope: !13509, file: !3, line: 2928, type: !204)
!13515 = !DILocation(line: 2928, column: 91, scope: !13509)
!13516 = !DILocalVariable(name: "cfra", arg: 3, scope: !13509, file: !3, line: 2929, type: !193)
!13517 = !DILocation(line: 2929, column: 57, scope: !13509)
!13518 = !DILocalVariable(name: "ibuf1", arg: 4, scope: !13509, file: !3, line: 2929, type: !1776)
!13519 = !DILocation(line: 2929, column: 70, scope: !13509)
!13520 = !DILocalVariable(name: "ibuf2", arg: 5, scope: !13509, file: !3, line: 2929, type: !1776)
!13521 = !DILocation(line: 2929, column: 84, scope: !13509)
!13522 = !DILocalVariable(name: "out", scope: !13509, file: !3, line: 2931, type: !1776)
!13523 = !DILocation(line: 2931, column: 9, scope: !13509)
!13524 = !DILocalVariable(name: "sh", scope: !13509, file: !3, line: 2932, type: !1858)
!13525 = !DILocation(line: 2932, column: 25, scope: !13509)
!13526 = !DILocation(line: 2932, column: 53, scope: !13509)
!13527 = !DILocation(line: 2932, column: 30, scope: !13509)
!13528 = !DILocalVariable(name: "facf", scope: !13509, file: !3, line: 2933, type: !193)
!13529 = !DILocation(line: 2933, column: 8, scope: !13509)
!13530 = !DILocation(line: 2933, column: 15, scope: !13509)
!13531 = !DILocation(line: 2933, column: 20, scope: !13509)
!13532 = !DILocation(line: 2933, column: 34, scope: !13509)
!13533 = !DILocalVariable(name: "swap_input", scope: !13509, file: !3, line: 2934, type: !45)
!13534 = !DILocation(line: 2934, column: 6, scope: !13509)
!13535 = !DILocation(line: 2934, column: 53, scope: !13509)
!13536 = !DILocation(line: 2934, column: 19, scope: !13509)
!13537 = !DILocation(line: 2936, column: 6, scope: !13538)
!13538 = distinct !DILexicalBlock(scope: !13509, file: !3, line: 2936, column: 6)
!13539 = !DILocation(line: 2936, column: 6, scope: !13509)
!13540 = !DILocation(line: 2937, column: 10, scope: !13541)
!13541 = distinct !DILexicalBlock(scope: !13542, file: !3, line: 2937, column: 7)
!13542 = distinct !DILexicalBlock(scope: !13538, file: !3, line: 2936, column: 18)
!13543 = !DILocation(line: 2937, column: 7, scope: !13541)
!13544 = !DILocation(line: 2937, column: 7, scope: !13542)
!13545 = !DILocation(line: 2938, column: 50, scope: !13541)
!13546 = !DILocation(line: 2938, column: 59, scope: !13541)
!13547 = !DILocation(line: 2938, column: 64, scope: !13541)
!13548 = !DILocation(line: 2938, column: 70, scope: !13541)
!13549 = !DILocation(line: 2938, column: 76, scope: !13541)
!13550 = !DILocation(line: 2938, column: 82, scope: !13541)
!13551 = !DILocation(line: 2938, column: 89, scope: !13541)
!13552 = !DILocation(line: 2938, column: 10, scope: !13541)
!13553 = !DILocation(line: 2938, column: 8, scope: !13541)
!13554 = !DILocation(line: 2938, column: 4, scope: !13541)
!13555 = !DILocation(line: 2940, column: 13, scope: !13541)
!13556 = !DILocation(line: 2940, column: 21, scope: !13541)
!13557 = !DILocation(line: 2940, column: 30, scope: !13541)
!13558 = !DILocation(line: 2940, column: 35, scope: !13541)
!13559 = !DILocation(line: 2940, column: 41, scope: !13541)
!13560 = !DILocation(line: 2940, column: 47, scope: !13541)
!13561 = !DILocation(line: 2940, column: 53, scope: !13541)
!13562 = !DILocation(line: 2940, column: 60, scope: !13541)
!13563 = !DILocation(line: 2940, column: 10, scope: !13541)
!13564 = !DILocation(line: 2940, column: 8, scope: !13541)
!13565 = !DILocation(line: 2941, column: 2, scope: !13542)
!13566 = !DILocation(line: 2943, column: 10, scope: !13567)
!13567 = distinct !DILexicalBlock(scope: !13568, file: !3, line: 2943, column: 7)
!13568 = distinct !DILexicalBlock(scope: !13538, file: !3, line: 2942, column: 7)
!13569 = !DILocation(line: 2943, column: 7, scope: !13567)
!13570 = !DILocation(line: 2943, column: 7, scope: !13568)
!13571 = !DILocation(line: 2944, column: 50, scope: !13567)
!13572 = !DILocation(line: 2944, column: 59, scope: !13567)
!13573 = !DILocation(line: 2944, column: 64, scope: !13567)
!13574 = !DILocation(line: 2944, column: 70, scope: !13567)
!13575 = !DILocation(line: 2944, column: 76, scope: !13567)
!13576 = !DILocation(line: 2944, column: 82, scope: !13567)
!13577 = !DILocation(line: 2944, column: 89, scope: !13567)
!13578 = !DILocation(line: 2944, column: 10, scope: !13567)
!13579 = !DILocation(line: 2944, column: 8, scope: !13567)
!13580 = !DILocation(line: 2944, column: 4, scope: !13567)
!13581 = !DILocation(line: 2946, column: 13, scope: !13567)
!13582 = !DILocation(line: 2946, column: 21, scope: !13567)
!13583 = !DILocation(line: 2946, column: 30, scope: !13567)
!13584 = !DILocation(line: 2946, column: 35, scope: !13567)
!13585 = !DILocation(line: 2946, column: 41, scope: !13567)
!13586 = !DILocation(line: 2946, column: 47, scope: !13567)
!13587 = !DILocation(line: 2946, column: 53, scope: !13567)
!13588 = !DILocation(line: 2946, column: 60, scope: !13567)
!13589 = !DILocation(line: 2946, column: 10, scope: !13567)
!13590 = !DILocation(line: 2946, column: 8, scope: !13567)
!13591 = !DILocation(line: 2949, column: 9, scope: !13509)
!13592 = !DILocation(line: 2949, column: 2, scope: !13509)
!13593 = distinct !DISubprogram(name: "video_seq_is_rendered", scope: !3, file: !3, line: 1248, type: !7190, scopeLine: 1249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13594 = !DILocalVariable(name: "seq", arg: 1, scope: !13593, file: !3, line: 1248, type: !204)
!13595 = !DILocation(line: 1248, column: 45, scope: !13593)
!13596 = !DILocation(line: 1250, column: 10, scope: !13593)
!13597 = !DILocation(line: 1250, column: 14, scope: !13593)
!13598 = !DILocation(line: 1250, column: 19, scope: !13593)
!13599 = !DILocation(line: 1250, column: 24, scope: !13593)
!13600 = !DILocation(line: 1250, column: 29, scope: !13593)
!13601 = !DILocation(line: 1250, column: 41, scope: !13593)
!13602 = !DILocation(line: 1250, column: 44, scope: !13593)
!13603 = !DILocation(line: 1250, column: 49, scope: !13593)
!13604 = !DILocation(line: 1250, column: 54, scope: !13593)
!13605 = !DILocation(line: 0, scope: !13593)
!13606 = !DILocation(line: 1250, column: 9, scope: !13593)
!13607 = !DILocation(line: 1250, column: 2, scope: !13593)
!13608 = distinct !DISubprogram(name: "seq_must_swap_input_in_blend_mode", scope: !3, file: !3, line: 2893, type: !7190, scopeLine: 2894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13609 = !DILocalVariable(name: "seq", arg: 1, scope: !13608, file: !3, line: 2893, type: !204)
!13610 = !DILocation(line: 2893, column: 57, scope: !13608)
!13611 = !DILocalVariable(name: "swap_input", scope: !13608, file: !3, line: 2895, type: !742)
!13612 = !DILocation(line: 2895, column: 7, scope: !13608)
!13613 = !DILocation(line: 2900, column: 6, scope: !13614)
!13614 = distinct !DILexicalBlock(scope: !13608, file: !3, line: 2900, column: 6)
!13615 = !DILocation(line: 2900, column: 6, scope: !13608)
!13616 = !DILocation(line: 2901, column: 14, scope: !13617)
!13617 = distinct !DILexicalBlock(scope: !13614, file: !3, line: 2900, column: 89)
!13618 = !DILocation(line: 2902, column: 2, scope: !13617)
!13619 = !DILocation(line: 2904, column: 9, scope: !13608)
!13620 = !DILocation(line: 2904, column: 2, scope: !13608)
!13621 = distinct !DISubprogram(name: "sequence_do_invalidate_dependent", scope: !3, file: !3, line: 3344, type: !13622, scopeLine: 3345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13622 = !DISubroutineType(types: !13623)
!13623 = !{null, !204, !202}
!13624 = !DILocalVariable(name: "seq", arg: 1, scope: !13621, file: !3, line: 3344, type: !204)
!13625 = !DILocation(line: 3344, column: 56, scope: !13621)
!13626 = !DILocalVariable(name: "seqbase", arg: 2, scope: !13621, file: !3, line: 3344, type: !202)
!13627 = !DILocation(line: 3344, column: 71, scope: !13621)
!13628 = !DILocalVariable(name: "cur", scope: !13621, file: !3, line: 3346, type: !204)
!13629 = !DILocation(line: 3346, column: 12, scope: !13621)
!13630 = !DILocation(line: 3348, column: 13, scope: !13631)
!13631 = distinct !DILexicalBlock(scope: !13621, file: !3, line: 3348, column: 2)
!13632 = !DILocation(line: 3348, column: 22, scope: !13631)
!13633 = !DILocation(line: 3348, column: 11, scope: !13631)
!13634 = !DILocation(line: 3348, column: 7, scope: !13631)
!13635 = !DILocation(line: 3348, column: 29, scope: !13636)
!13636 = distinct !DILexicalBlock(scope: !13631, file: !3, line: 3348, column: 2)
!13637 = !DILocation(line: 3348, column: 2, scope: !13631)
!13638 = !DILocation(line: 3349, column: 7, scope: !13639)
!13639 = distinct !DILexicalBlock(scope: !13640, file: !3, line: 3349, column: 7)
!13640 = distinct !DILexicalBlock(scope: !13636, file: !3, line: 3348, column: 51)
!13641 = !DILocation(line: 3349, column: 14, scope: !13639)
!13642 = !DILocation(line: 3349, column: 11, scope: !13639)
!13643 = !DILocation(line: 3349, column: 7, scope: !13640)
!13644 = !DILocation(line: 3350, column: 4, scope: !13639)
!13645 = !DILocation(line: 3352, column: 33, scope: !13646)
!13646 = distinct !DILexicalBlock(scope: !13640, file: !3, line: 3352, column: 7)
!13647 = !DILocation(line: 3352, column: 38, scope: !13646)
!13648 = !DILocation(line: 3352, column: 7, scope: !13646)
!13649 = !DILocation(line: 3352, column: 7, scope: !13640)
!13650 = !DILocation(line: 3353, column: 41, scope: !13651)
!13651 = distinct !DILexicalBlock(scope: !13646, file: !3, line: 3352, column: 44)
!13652 = !DILocation(line: 3353, column: 4, scope: !13651)
!13653 = !DILocation(line: 3354, column: 54, scope: !13651)
!13654 = !DILocation(line: 3354, column: 4, scope: !13651)
!13655 = !DILocation(line: 3355, column: 3, scope: !13651)
!13656 = !DILocation(line: 3357, column: 7, scope: !13657)
!13657 = distinct !DILexicalBlock(scope: !13640, file: !3, line: 3357, column: 7)
!13658 = !DILocation(line: 3357, column: 12, scope: !13657)
!13659 = !DILocation(line: 3357, column: 20, scope: !13657)
!13660 = !DILocation(line: 3357, column: 7, scope: !13640)
!13661 = !DILocation(line: 3358, column: 37, scope: !13657)
!13662 = !DILocation(line: 3358, column: 43, scope: !13657)
!13663 = !DILocation(line: 3358, column: 48, scope: !13657)
!13664 = !DILocation(line: 3358, column: 4, scope: !13657)
!13665 = !DILocation(line: 3359, column: 2, scope: !13640)
!13666 = !DILocation(line: 3348, column: 40, scope: !13636)
!13667 = !DILocation(line: 3348, column: 45, scope: !13636)
!13668 = !DILocation(line: 3348, column: 38, scope: !13636)
!13669 = !DILocation(line: 3348, column: 2, scope: !13636)
!13670 = distinct !{!13670, !13637, !13671}
!13671 = !DILocation(line: 3359, column: 2, scope: !13631)
!13672 = !DILocation(line: 3360, column: 1, scope: !13621)
!13673 = distinct !DISubprogram(name: "shuffle_seq_time_offset_test", scope: !3, file: !3, line: 3803, type: !13674, scopeLine: 3804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2036)
!13674 = !DISubroutineType(types: !13675)
!13675 = !{!45, !202, !144}
!13676 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !13673, file: !3, line: 3803, type: !202)
!13677 = !DILocation(line: 3803, column: 51, scope: !13673)
!13678 = !DILocalVariable(name: "dir", arg: 2, scope: !13673, file: !3, line: 3803, type: !144)
!13679 = !DILocation(line: 3803, column: 66, scope: !13673)
!13680 = !DILocalVariable(name: "offset", scope: !13673, file: !3, line: 3805, type: !45)
!13681 = !DILocation(line: 3805, column: 6, scope: !13673)
!13682 = !DILocalVariable(name: "seq", scope: !13673, file: !3, line: 3806, type: !204)
!13683 = !DILocation(line: 3806, column: 12, scope: !13673)
!13684 = !DILocalVariable(name: "seq_other", scope: !13673, file: !3, line: 3806, type: !204)
!13685 = !DILocation(line: 3806, column: 18, scope: !13673)
!13686 = !DILocation(line: 3808, column: 13, scope: !13687)
!13687 = distinct !DILexicalBlock(scope: !13673, file: !3, line: 3808, column: 2)
!13688 = !DILocation(line: 3808, column: 23, scope: !13687)
!13689 = !DILocation(line: 3808, column: 11, scope: !13687)
!13690 = !DILocation(line: 3808, column: 7, scope: !13687)
!13691 = !DILocation(line: 3808, column: 30, scope: !13692)
!13692 = distinct !DILexicalBlock(scope: !13687, file: !3, line: 3808, column: 2)
!13693 = !DILocation(line: 3808, column: 2, scope: !13687)
!13694 = !DILocation(line: 3809, column: 7, scope: !13695)
!13695 = distinct !DILexicalBlock(scope: !13696, file: !3, line: 3809, column: 7)
!13696 = distinct !DILexicalBlock(scope: !13692, file: !3, line: 3808, column: 52)
!13697 = !DILocation(line: 3809, column: 12, scope: !13695)
!13698 = !DILocation(line: 3809, column: 7, scope: !13696)
!13699 = !DILocation(line: 3810, column: 21, scope: !13700)
!13700 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 3810, column: 4)
!13701 = distinct !DILexicalBlock(scope: !13695, file: !3, line: 3809, column: 17)
!13702 = !DILocation(line: 3810, column: 31, scope: !13700)
!13703 = !DILocation(line: 3810, column: 19, scope: !13700)
!13704 = !DILocation(line: 3810, column: 9, scope: !13700)
!13705 = !DILocation(line: 3810, column: 38, scope: !13706)
!13706 = distinct !DILexicalBlock(scope: !13700, file: !3, line: 3810, column: 4)
!13707 = !DILocation(line: 3810, column: 4, scope: !13700)
!13708 = !DILocation(line: 3811, column: 10, scope: !13709)
!13709 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 3811, column: 9)
!13710 = distinct !DILexicalBlock(scope: !13706, file: !3, line: 3810, column: 78)
!13711 = !DILocation(line: 3811, column: 21, scope: !13709)
!13712 = !DILocation(line: 3811, column: 25, scope: !13709)
!13713 = !DILocation(line: 3811, column: 40, scope: !13709)
!13714 = !DILocation(line: 3811, column: 45, scope: !13709)
!13715 = !DILocation(line: 3811, column: 28, scope: !13709)
!13716 = !DILocation(line: 3811, column: 9, scope: !13710)
!13717 = !DILocation(line: 3812, column: 10, scope: !13718)
!13718 = distinct !DILexicalBlock(scope: !13719, file: !3, line: 3812, column: 10)
!13719 = distinct !DILexicalBlock(scope: !13709, file: !3, line: 3811, column: 57)
!13720 = !DILocation(line: 3812, column: 14, scope: !13718)
!13721 = !DILocation(line: 3812, column: 10, scope: !13719)
!13722 = !DILocation(line: 3813, column: 23, scope: !13723)
!13723 = distinct !DILexicalBlock(scope: !13718, file: !3, line: 3812, column: 22)
!13724 = !DILocation(line: 3813, column: 31, scope: !13723)
!13725 = !DILocation(line: 3813, column: 42, scope: !13723)
!13726 = !DILocation(line: 3813, column: 54, scope: !13723)
!13727 = !DILocation(line: 3813, column: 59, scope: !13723)
!13728 = !DILocation(line: 3813, column: 52, scope: !13723)
!13729 = !DILocation(line: 3813, column: 16, scope: !13723)
!13730 = !DILocation(line: 3813, column: 14, scope: !13723)
!13731 = !DILocation(line: 3814, column: 6, scope: !13723)
!13732 = !DILocation(line: 3816, column: 23, scope: !13733)
!13733 = distinct !DILexicalBlock(scope: !13718, file: !3, line: 3815, column: 11)
!13734 = !DILocation(line: 3816, column: 31, scope: !13733)
!13735 = !DILocation(line: 3816, column: 42, scope: !13733)
!13736 = !DILocation(line: 3816, column: 52, scope: !13733)
!13737 = !DILocation(line: 3816, column: 57, scope: !13733)
!13738 = !DILocation(line: 3816, column: 50, scope: !13733)
!13739 = !DILocation(line: 3816, column: 16, scope: !13733)
!13740 = !DILocation(line: 3816, column: 14, scope: !13733)
!13741 = !DILocation(line: 3818, column: 5, scope: !13719)
!13742 = !DILocation(line: 3819, column: 4, scope: !13710)
!13743 = !DILocation(line: 3810, column: 61, scope: !13706)
!13744 = !DILocation(line: 3810, column: 72, scope: !13706)
!13745 = !DILocation(line: 3810, column: 59, scope: !13706)
!13746 = !DILocation(line: 3810, column: 4, scope: !13706)
!13747 = distinct !{!13747, !13707, !13748}
!13748 = !DILocation(line: 3819, column: 4, scope: !13700)
!13749 = !DILocation(line: 3820, column: 3, scope: !13701)
!13750 = !DILocation(line: 3821, column: 2, scope: !13696)
!13751 = !DILocation(line: 3808, column: 41, scope: !13692)
!13752 = !DILocation(line: 3808, column: 46, scope: !13692)
!13753 = !DILocation(line: 3808, column: 39, scope: !13692)
!13754 = !DILocation(line: 3808, column: 2, scope: !13692)
!13755 = distinct !{!13755, !13693, !13756}
!13756 = !DILocation(line: 3821, column: 2, scope: !13687)
!13757 = !DILocation(line: 3822, column: 9, scope: !13673)
!13758 = !DILocation(line: 3822, column: 2, scope: !13673)
