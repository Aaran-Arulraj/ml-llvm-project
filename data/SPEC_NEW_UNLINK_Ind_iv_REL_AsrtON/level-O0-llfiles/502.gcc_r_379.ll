; ModuleID = 'tree-ssa-reassoc.c'
source_filename = "tree-ssa-reassoc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.anon = type { i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.VEC_oecount_heap = type { %struct.VEC_oecount_base }
%struct.VEC_oecount_base = type { i32, i32, [1 x %struct.oecount_s] }
%struct.oecount_s = type { i32, i32, %union.tree_node* }
%struct.VEC_operand_entry_t_heap = type { %struct.VEC_operand_entry_t_base }
%struct.VEC_operand_entry_t_base = type { i32, i32, [1 x %struct.operand_entry*] }
%struct.operand_entry = type { i32, %union.tree_node* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.sbitmap_iterator = type { i64*, i32, i32, i32, i64 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }

@.str = private unnamed_addr constant [26 x i8] c"Op %d -> rank: %d, tree: \00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"reassoc\00", align 1
@pass_reassoc = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_tree_ssa_reassoc, i32 ()* @execute_reassoc, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 68, i32 40, i32 0, i32 0, i32 0, i32 7 } }, align 8, !dbg !0
@flag_tree_reassoc = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@reassociate_stats = internal global %struct.anon zeroinitializer, align 4, !dbg !2275
@.str.2 = private unnamed_addr constant [19 x i8] c"operand entry pool\00", align 1
@operand_entry_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !2283
@bb_rank = internal global i64* null, align 8, !dbg !2306
@operand_rank = internal global %struct.pointer_map_t* null, align 8, !dbg !2308
@current_function_decl = external dso_local global %union.tree_node*, align 8
@broken_up_subtracts = internal global %struct.VEC_tree_heap* null, align 8, !dbg !2310
@.str.3 = private unnamed_addr constant [19 x i8] c"tree-ssa-reassoc.c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_associative_math = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@flag_var_tracking_assignments = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"Breaking up subtract \00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"Transforming \00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c" into \00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"swapping operands of \00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c" is now \00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"Rank for \00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c" is %ld\0A\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"Linearized: \00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"Merging constants\0A\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"Found & 0, removing all other ops\0A\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Found & -1, removing\0A\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"Found | -1, removing all other ops\0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"Found | 0, removing\0A\00", align 1
@mode_class = external dso_local constant [87 x i8], align 16
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_finite_math_only = external dso_local global i32, align 4
@flag_signed_zeros = external dso_local global i32, align 4
@.str.19 = private unnamed_addr constant [35 x i8] c"Found * 0, removing all other ops\0A\00", align 1
@flag_signaling_nans = external dso_local global i32, align 4
@.str.20 = private unnamed_addr constant [21 x i8] c"Found * 1, removing\0A\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"Found [|^+] 0, removing\0A\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"Equivalence: \00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c" & ~\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c" | ~\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c" -> 0\0A\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c" -> -1\0A\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.27 = private unnamed_addr constant [13 x i8] c" [&|minmax] \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c" ^ \00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c" -> nothing\0A\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c" + -\00", align 1
@.str.32 = private unnamed_addr constant [43 x i8] c"searching for un-distribute opportunities \00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c" %d\0A\00", align 1
@cvec = internal global %struct.VEC_oecount_heap* null, align 8, !dbg !2312
@.str.34 = private unnamed_addr constant [13 x i8] c"Candidates:\0A\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"  %u %s: \00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.37 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Building (\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c") %s \00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.42 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"Linearized\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"Constants eliminated\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"Ops eliminated\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"Statements rewritten\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_ops_vector(%struct._IO_FILE* %file, %struct.VEC_operand_entry_t_heap* %ops) #0 !dbg !2344 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap*, align 8
  %oe = alloca %struct.operand_entry*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2398, metadata !DIExpression()), !dbg !2399
  store %struct.VEC_operand_entry_t_heap* %ops, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap** %ops.addr, metadata !2400, metadata !DIExpression()), !dbg !2401
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !2402, metadata !DIExpression()), !dbg !2403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2404, metadata !DIExpression()), !dbg !2405
  store i32 0, i32* %i, align 4, !dbg !2406
  br label %for.cond, !dbg !2408

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !2409
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %0, null, !dbg !2409
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2409

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !2409
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %1, i32 0, i32 0, !dbg !2409
  br label %cond.end, !dbg !2409

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2409

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2409
  %2 = load i32, i32* %i, align 4, !dbg !2409
  %call = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond, i32 %2, %struct.operand_entry** %oe), !dbg !2409
  %tobool1 = icmp ne i32 %call, 0, !dbg !2411
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2411

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2412
  %4 = load i32, i32* %i, align 4, !dbg !2414
  %5 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !2415
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i32 0, i32 0, !dbg !2416
  %6 = load i32, i32* %rank, align 8, !dbg !2416
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6), !dbg !2417
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2418
  %8 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !2419
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %8, i32 0, i32 1, !dbg !2420
  %9 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !2420
  call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %9, i32 0), !dbg !2421
  br label %for.inc, !dbg !2422

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !2423
  %inc = add i32 %10, 1, !dbg !2423
  store i32 %inc, i32* %i, align 4, !dbg !2423
  br label %for.cond, !dbg !2424, !llvm.loop !2425

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2427
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_, %struct.operand_entry** %ptr) #0 !dbg !2428 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.operand_entry**, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !2434, metadata !DIExpression()), !dbg !2435
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2436, metadata !DIExpression()), !dbg !2435
  store %struct.operand_entry** %ptr, %struct.operand_entry*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry*** %ptr.addr, metadata !2437, metadata !DIExpression()), !dbg !2435
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !2438
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %0, null, !dbg !2438
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2438

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2438
  %2 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !2438
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %2, i32 0, i32 0, !dbg !2438
  %3 = load i32, i32* %num, align 8, !dbg !2438
  %cmp = icmp ult i32 %1, %3, !dbg !2438
  br i1 %cmp, label %if.then, label %if.else, !dbg !2435

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !2440
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %4, i32 0, i32 2, !dbg !2440
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2440
  %idxprom = zext i32 %5 to i64, !dbg !2440
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !2440
  %6 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !2440
  %7 = load %struct.operand_entry**, %struct.operand_entry*** %ptr.addr, align 8, !dbg !2440
  store %struct.operand_entry* %6, %struct.operand_entry** %7, align 8, !dbg !2440
  store i32 1, i32* %retval, align 4, !dbg !2440
  br label %return, !dbg !2440

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.operand_entry**, %struct.operand_entry*** %ptr.addr, align 8, !dbg !2442
  store %struct.operand_entry* null, %struct.operand_entry** %8, align 8, !dbg !2442
  store i32 0, i32* %retval, align 4, !dbg !2442
  br label %return, !dbg !2442

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2435
  ret i32 %9, !dbg !2435
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_ops_vector(%struct.VEC_operand_entry_t_heap* %ops) #0 !dbg !2444 {
entry:
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap*, align 8
  store %struct.VEC_operand_entry_t_heap* %ops, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap** %ops.addr, metadata !2447, metadata !DIExpression()), !dbg !2448
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2449
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !2450
  call void @dump_ops_vector(%struct._IO_FILE* %0, %struct.VEC_operand_entry_t_heap* %1), !dbg !2451
  ret void, !dbg !2452
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_tree_ssa_reassoc() #0 !dbg !2453 {
entry:
  %0 = load i32, i32* @flag_tree_reassoc, align 4, !dbg !2454
  %cmp = icmp ne i32 %0, 0, !dbg !2455
  %conv = zext i1 %cmp to i32, !dbg !2455
  %conv1 = trunc i32 %conv to i8, !dbg !2454
  ret i8 %conv1, !dbg !2456
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_reassoc() #0 !dbg !2457 {
entry:
  call void @init_reassoc(), !dbg !2458
  call void @do_reassoc(), !dbg !2459
  call void @repropagate_negates(), !dbg !2460
  call void @fini_reassoc(), !dbg !2461
  ret i32 0, !dbg !2462
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_reassoc() #0 !dbg !2463 {
entry:
  %i = alloca i32, align 4
  %rank = alloca i64, align 8
  %param = alloca %union.tree_node*, align 8
  %bbs = alloca i32*, align 8
  %def = alloca %union.tree_node*, align 8
  %def19 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2466, metadata !DIExpression()), !dbg !2467
  call void @llvm.dbg.declare(metadata i64* %rank, metadata !2468, metadata !DIExpression()), !dbg !2469
  store i64 2, i64* %rank, align 8, !dbg !2469
  call void @llvm.dbg.declare(metadata %union.tree_node** %param, metadata !2470, metadata !DIExpression()), !dbg !2471
  call void @llvm.dbg.declare(metadata i32** %bbs, metadata !2472, metadata !DIExpression()), !dbg !2473
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2474
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2474
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2474
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2474
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !2474
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !2474
  %add = add nsw i32 %2, 1, !dbg !2474
  %conv = sext i32 %add to i64, !dbg !2474
  %mul = mul i64 4, %conv, !dbg !2474
  %call = call i8* @xmalloc(i64 %mul), !dbg !2474
  %3 = bitcast i8* %call to i32*, !dbg !2474
  store i32* %3, i32** %bbs, align 8, !dbg !2473
  call void @loop_optimizer_init(i32 16), !dbg !2475
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.anon* @reassociate_stats to i8*), i8 0, i64 16, i1 false), !dbg !2476
  %call1 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 16, i64 30), !dbg !2477
  store %struct.alloc_pool_def* %call1, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !2478
  %4 = load i32*, i32** %bbs, align 8, !dbg !2479
  %call2 = call i32 @pre_and_rev_post_order_compute(i32* null, i32* %4, i8 zeroext 0), !dbg !2480
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2481
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2481
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !2481
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !2481
  %x_last_basic_block5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 5, !dbg !2481
  %7 = load i32, i32* %x_last_basic_block5, align 8, !dbg !2481
  %add6 = add nsw i32 %7, 1, !dbg !2481
  %conv7 = sext i32 %add6 to i64, !dbg !2481
  %call8 = call i8* @xcalloc(i64 %conv7, i64 8), !dbg !2481
  %8 = bitcast i8* %call8 to i64*, !dbg !2481
  store i64* %8, i64** @bb_rank, align 8, !dbg !2482
  %call9 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !2483
  store %struct.pointer_map_t* %call9, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2484
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !2485
  %decl_non_common = bitcast %union.tree_node* %9 to %struct.tree_decl_non_common*, !dbg !2485
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !2485
  %10 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !2485
  store %union.tree_node* %10, %union.tree_node** %param, align 8, !dbg !2487
  br label %for.cond, !dbg !2488

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !2489
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !2491
  br i1 %tobool, label %for.body, label %for.end, !dbg !2491

for.body:                                         ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2492
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2492
  %13 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !2495
  %call11 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr10, %union.tree_node* %13), !dbg !2496
  %cmp = icmp ne %union.tree_node* %call11, null, !dbg !2497
  br i1 %cmp, label %if.then, label %if.end, !dbg !2498

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !2499, metadata !DIExpression()), !dbg !2501
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2502
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !2502
  %15 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !2503
  %call14 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr13, %union.tree_node* %15), !dbg !2504
  store %union.tree_node* %call14, %union.tree_node** %def, align 8, !dbg !2501
  %16 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !2505
  %17 = load i64, i64* %rank, align 8, !dbg !2506
  %inc = add nsw i64 %17, 1, !dbg !2506
  store i64 %inc, i64* %rank, align 8, !dbg !2506
  call void @insert_operand_rank(%union.tree_node* %16, i64 %inc), !dbg !2507
  br label %if.end, !dbg !2508

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2509

for.inc:                                          ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !2510
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !2510
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2510
  %19 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2510
  store %union.tree_node* %19, %union.tree_node** %param, align 8, !dbg !2511
  br label %for.cond, !dbg !2512, !llvm.loop !2513

for.end:                                          ; preds = %for.cond
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2515
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !2515
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 7, !dbg !2517
  %21 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !2517
  %cmp16 = icmp ne %union.tree_node* %21, null, !dbg !2518
  br i1 %cmp16, label %if.then18, label %if.end29, !dbg !2519

if.then18:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %def19, metadata !2520, metadata !DIExpression()), !dbg !2522
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2523
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !2523
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2524
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !2524
  %static_chain_decl22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 7, !dbg !2525
  %24 = load %union.tree_node*, %union.tree_node** %static_chain_decl22, align 8, !dbg !2525
  %call23 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr20, %union.tree_node* %24), !dbg !2526
  store %union.tree_node* %call23, %union.tree_node** %def19, align 8, !dbg !2522
  %25 = load %union.tree_node*, %union.tree_node** %def19, align 8, !dbg !2527
  %cmp24 = icmp ne %union.tree_node* %25, null, !dbg !2529
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !2530

if.then26:                                        ; preds = %if.then18
  %26 = load %union.tree_node*, %union.tree_node** %def19, align 8, !dbg !2531
  %27 = load i64, i64* %rank, align 8, !dbg !2532
  %inc27 = add nsw i64 %27, 1, !dbg !2532
  store i64 %inc27, i64* %rank, align 8, !dbg !2532
  call void @insert_operand_rank(%union.tree_node* %26, i64 %inc27), !dbg !2533
  br label %if.end28, !dbg !2533

if.end28:                                         ; preds = %if.then26, %if.then18
  br label %if.end29, !dbg !2534

if.end29:                                         ; preds = %if.end28, %for.end
  store i32 0, i32* %i, align 4, !dbg !2535
  br label %for.cond30, !dbg !2537

for.cond30:                                       ; preds = %for.inc39, %if.end29
  %28 = load i32, i32* %i, align 4, !dbg !2538
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2540
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !2540
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 1, !dbg !2540
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !2540
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 3, !dbg !2540
  %31 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2540
  %sub = sub nsw i32 %31, 2, !dbg !2541
  %cmp33 = icmp slt i32 %28, %sub, !dbg !2542
  br i1 %cmp33, label %for.body35, label %for.end41, !dbg !2543

for.body35:                                       ; preds = %for.cond30
  %32 = load i64, i64* %rank, align 8, !dbg !2544
  %inc36 = add nsw i64 %32, 1, !dbg !2544
  store i64 %inc36, i64* %rank, align 8, !dbg !2544
  %shl = shl i64 %inc36, 16, !dbg !2545
  %33 = load i64*, i64** @bb_rank, align 8, !dbg !2546
  %34 = load i32*, i32** %bbs, align 8, !dbg !2547
  %35 = load i32, i32* %i, align 4, !dbg !2548
  %idxprom = sext i32 %35 to i64, !dbg !2547
  %arrayidx = getelementptr inbounds i32, i32* %34, i64 %idxprom, !dbg !2547
  %36 = load i32, i32* %arrayidx, align 4, !dbg !2547
  %idxprom37 = sext i32 %36 to i64, !dbg !2546
  %arrayidx38 = getelementptr inbounds i64, i64* %33, i64 %idxprom37, !dbg !2546
  store i64 %shl, i64* %arrayidx38, align 8, !dbg !2549
  br label %for.inc39, !dbg !2546

for.inc39:                                        ; preds = %for.body35
  %37 = load i32, i32* %i, align 4, !dbg !2550
  %inc40 = add nsw i32 %37, 1, !dbg !2550
  store i32 %inc40, i32* %i, align 4, !dbg !2550
  br label %for.cond30, !dbg !2551, !llvm.loop !2552

for.end41:                                        ; preds = %for.cond30
  %38 = load i32*, i32** %bbs, align 8, !dbg !2554
  %39 = bitcast i32* %38 to i8*, !dbg !2554
  call void @free(i8* %39), !dbg !2555
  call void @calculate_dominance_info(i32 2), !dbg !2556
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !2557
  ret void, !dbg !2558
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_reassoc() #0 !dbg !2559 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2560
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2560
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2560
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2560
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2560
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2560
  call void @break_up_subtract_bb(%struct.basic_block_def* %2), !dbg !2561
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2562
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2562
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2562
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2562
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !2562
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2562
  call void @reassociate_bb(%struct.basic_block_def* %5), !dbg !2563
  ret void, !dbg !2564
}

; Function Attrs: noinline nounwind uwtable
define internal void @repropagate_negates() #0 !dbg !2565 {
entry:
  %i = alloca i32, align 4
  %negate = alloca %union.tree_node*, align 8
  %user = alloca %union.gimple_statement_d*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2566, metadata !DIExpression()), !dbg !2567
  store i32 0, i32* %i, align 4, !dbg !2567
  call void @llvm.dbg.declare(metadata %union.tree_node** %negate, metadata !2568, metadata !DIExpression()), !dbg !2569
  store i32 0, i32* %i, align 4, !dbg !2570
  br label %for.cond, !dbg !2572

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !2573
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !2573
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2573

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !2573
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !2573
  br label %cond.end, !dbg !2573

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2573

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2573
  %2 = load i32, i32* %i, align 4, !dbg !2573
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %negate), !dbg !2573
  %tobool1 = icmp ne i32 %call, 0, !dbg !2575
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2575

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %user, metadata !2576, metadata !DIExpression()), !dbg !2578
  %3 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2579
  %call2 = call %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %3), !dbg !2580
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %user, align 8, !dbg !2578
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2581
  %tobool3 = icmp ne %union.gimple_statement_d* %4, null, !dbg !2581
  br i1 %tobool3, label %land.lhs.true, label %if.end22, !dbg !2583

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2584
  %call4 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %5), !dbg !2585
  %conv = zext i8 %call4 to i32, !dbg !2585
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2585
  br i1 %tobool5, label %land.lhs.true6, label %if.end22, !dbg !2586

land.lhs.true6:                                   ; preds = %land.lhs.true
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2587
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %6), !dbg !2588
  %cmp = icmp eq i32 %call7, 63, !dbg !2589
  br i1 %cmp, label %if.then, label %if.end22, !dbg !2590

if.then:                                          ; preds = %land.lhs.true6
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2591
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !2594
  %8 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2595
  %cmp10 = icmp eq %union.tree_node* %call9, %8, !dbg !2596
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !2597

if.then12:                                        ; preds = %if.then
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2598
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2600
  %call13 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %10), !dbg !2601
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2602
  %call14 = call %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %11), !dbg !2603
  call void @swap_tree_operands(%union.gimple_statement_d* %9, %union.tree_node** %call13, %union.tree_node** %call14), !dbg !2604
  br label %if.end, !dbg !2605

if.end:                                           ; preds = %if.then12, %if.then
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2606
  %call15 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %12), !dbg !2608
  %13 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2609
  %cmp16 = icmp eq %union.tree_node* %call15, %13, !dbg !2610
  br i1 %cmp16, label %if.then18, label %if.end21, !dbg !2611

if.then18:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !2612, metadata !DIExpression()), !dbg !2614
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2615
  %call19 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %14), !dbg !2616
  store %union.tree_node* %call19, %union.tree_node** %rhs1, align 8, !dbg !2614
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !2617, metadata !DIExpression()), !dbg !2618
  %15 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2619
  %call20 = call %union.tree_node* @get_unary_op(%union.tree_node* %15, i32 79), !dbg !2620
  store %union.tree_node* %call20, %union.tree_node** %rhs2, align 8, !dbg !2618
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2621, metadata !DIExpression()), !dbg !2628
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2629
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %gsi, %union.gimple_statement_d* %16), !dbg !2630
  %17 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2631
  %18 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2632
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 64, %union.tree_node* %17, %union.tree_node* %18), !dbg !2633
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %user, align 8, !dbg !2634
  call void @update_stmt(%union.gimple_statement_d* %19), !dbg !2635
  br label %if.end21, !dbg !2636

if.end21:                                         ; preds = %if.then18, %if.end
  br label %if.end22, !dbg !2637

if.end22:                                         ; preds = %if.end21, %land.lhs.true6, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2638

for.inc:                                          ; preds = %if.end22
  %20 = load i32, i32* %i, align 4, !dbg !2639
  %inc = add i32 %20, 1, !dbg !2639
  store i32 %inc, i32* %i, align 4, !dbg !2639
  br label %for.cond, !dbg !2640, !llvm.loop !2641

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2643
}

; Function Attrs: noinline nounwind uwtable
define internal void @fini_reassoc() #0 !dbg !2644 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2645
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2645
  %1 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 0), align 4, !dbg !2646
  call void @statistics_counter_event(%struct.function* %add.ptr, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i64 0, i64 0), i32 %1), !dbg !2647
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2648
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !2648
  %3 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 1), align 4, !dbg !2649
  call void @statistics_counter_event(%struct.function* %add.ptr1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 %3), !dbg !2650
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2651
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !2651
  %5 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !2652
  call void @statistics_counter_event(%struct.function* %add.ptr2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0), i32 %5), !dbg !2653
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2654
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2654
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 3), align 4, !dbg !2655
  call void @statistics_counter_event(%struct.function* %add.ptr3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i64 0, i64 0), i32 %7), !dbg !2656
  %8 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2657
  call void @pointer_map_destroy(%struct.pointer_map_t* %8), !dbg !2658
  %9 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !2659
  call void @free_alloc_pool(%struct.alloc_pool_def* %9), !dbg !2660
  %10 = load i64*, i64** @bb_rank, align 8, !dbg !2661
  %11 = bitcast i64* %10 to i8*, !dbg !2661
  call void @free(i8* %11), !dbg !2662
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @broken_up_subtracts), !dbg !2663
  call void @free_dominance_info(i32 2), !dbg !2664
  call void @loop_optimizer_finalize(), !dbg !2665
  ret void, !dbg !2666
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @loop_optimizer_init(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_operand_rank(%union.tree_node* %e, i64 %rank) #0 !dbg !2667 {
entry:
  %e.addr = alloca %union.tree_node*, align 8
  %rank.addr = alloca i64, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %e, %union.tree_node** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e.addr, metadata !2670, metadata !DIExpression()), !dbg !2671
  store i64 %rank, i64* %rank.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rank.addr, metadata !2672, metadata !DIExpression()), !dbg !2673
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !2674, metadata !DIExpression()), !dbg !2675
  %0 = load i64, i64* %rank.addr, align 8, !dbg !2676
  %cmp = icmp sgt i64 %0, 0, !dbg !2676
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2676

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2676
  br label %cond.end, !dbg !2676

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2676

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2676
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2677
  %2 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !2678
  %3 = bitcast %union.tree_node* %2 to i8*, !dbg !2678
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %1, i8* %3), !dbg !2679
  store i8** %call, i8*** %slot, align 8, !dbg !2680
  %4 = load i8**, i8*** %slot, align 8, !dbg !2681
  %5 = load i8*, i8** %4, align 8, !dbg !2681
  %tobool = icmp ne i8* %5, null, !dbg !2681
  br i1 %tobool, label %cond.true1, label %cond.false2, !dbg !2681

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2681
  br label %cond.end3, !dbg !2681

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !2681

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !2681
  %6 = load i64, i64* %rank.addr, align 8, !dbg !2682
  %7 = inttoptr i64 %6 to i8*, !dbg !2683
  %8 = load i8**, i8*** %slot, align 8, !dbg !2684
  store i8* %7, i8** %8, align 8, !dbg !2685
  ret void, !dbg !2686
}

declare dso_local void @free(i8*) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @break_up_subtract_bb(%struct.basic_block_def* %bb) #0 !dbg !2687 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2690, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2692, metadata !DIExpression()), !dbg !2693
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !2694, metadata !DIExpression()), !dbg !2695
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2696
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !2698
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2698
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !2698
  br label %for.cond, !dbg !2699

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2700
  %tobool = icmp ne i8 %call, 0, !dbg !2702
  %lnot = xor i1 %tobool, true, !dbg !2702
  br i1 %lnot, label %for.body, label %for.end, !dbg !2703

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2704, metadata !DIExpression()), !dbg !2706
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2707
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !2706
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2708
  call void @gimple_set_visited(%union.gimple_statement_d* %3, i8 zeroext 0), !dbg !2709
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2710
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %4), !dbg !2712
  %conv = zext i8 %call2 to i32, !dbg !2712
  %tobool3 = icmp ne i32 %conv, 0, !dbg !2712
  br i1 %tobool3, label %land.lhs.true, label %if.end169, !dbg !2713

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2714
  %call4 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !2715
  %cmp = icmp eq i32 %call4, 64, !dbg !2716
  br i1 %cmp, label %if.then, label %if.end169, !dbg !2717

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !2718, metadata !DIExpression()), !dbg !2720
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2721
  %call6 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %6), !dbg !2722
  store %union.tree_node* %call6, %union.tree_node** %lhs, align 8, !dbg !2720
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !2723, metadata !DIExpression()), !dbg !2724
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2725
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !2726
  store %union.tree_node* %call7, %union.tree_node** %rhs1, align 8, !dbg !2724
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !2727, metadata !DIExpression()), !dbg !2728
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2729
  %call8 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %8), !dbg !2730
  store %union.tree_node* %call8, %union.tree_node** %rhs2, align 8, !dbg !2728
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2731
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !2731
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2731
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2731
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !2731
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !2731
  %bf.load = load i64, i64* %11, align 8, !dbg !2731
  %bf.clear = and i64 %bf.load, 65535, !dbg !2731
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2731
  %cmp9 = icmp eq i32 %bf.cast, 6, !dbg !2731
  br i1 %cmp9, label %lor.lhs.false28, label %lor.lhs.false, !dbg !2731

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2731
  %common11 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !2731
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !2731
  %13 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !2731
  %base13 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !2731
  %14 = bitcast %struct.tree_base* %base13 to i64*, !dbg !2731
  %bf.load14 = load i64, i64* %14, align 8, !dbg !2731
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !2731
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !2731
  %cmp17 = icmp eq i32 %bf.cast16, 7, !dbg !2731
  br i1 %cmp17, label %lor.lhs.false28, label %lor.lhs.false19, !dbg !2731

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2731
  %common20 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !2731
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !2731
  %16 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !2731
  %base22 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2731
  %17 = bitcast %struct.tree_base* %base22 to i64*, !dbg !2731
  %bf.load23 = load i64, i64* %17, align 8, !dbg !2731
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !2731
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !2731
  %cmp26 = icmp eq i32 %bf.cast25, 8, !dbg !2731
  br i1 %cmp26, label %lor.lhs.false28, label %land.lhs.true82, !dbg !2733

lor.lhs.false28:                                  ; preds = %lor.lhs.false19, %lor.lhs.false, %if.then
  %18 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2734
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !2734
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !2734
  %19 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !2734
  %base31 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !2734
  %20 = bitcast %struct.tree_base* %base31 to i64*, !dbg !2734
  %bf.load32 = load i64, i64* %20, align 8, !dbg !2734
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !2734
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !2734
  %cmp35 = icmp eq i32 %bf.cast34, 6, !dbg !2734
  br i1 %cmp35, label %lor.lhs.false55, label %lor.lhs.false37, !dbg !2734

lor.lhs.false37:                                  ; preds = %lor.lhs.false28
  %21 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2734
  %common38 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !2734
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !2734
  %22 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !2734
  %base40 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !2734
  %23 = bitcast %struct.tree_base* %base40 to i64*, !dbg !2734
  %bf.load41 = load i64, i64* %23, align 8, !dbg !2734
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !2734
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !2734
  %cmp44 = icmp eq i32 %bf.cast43, 7, !dbg !2734
  br i1 %cmp44, label %lor.lhs.false55, label %lor.lhs.false46, !dbg !2734

lor.lhs.false46:                                  ; preds = %lor.lhs.false37
  %24 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2734
  %common47 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !2734
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !2734
  %25 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !2734
  %base49 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !2734
  %26 = bitcast %struct.tree_base* %base49 to i64*, !dbg !2734
  %bf.load50 = load i64, i64* %26, align 8, !dbg !2734
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !2734
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !2734
  %cmp53 = icmp eq i32 %bf.cast52, 8, !dbg !2734
  br i1 %cmp53, label %lor.lhs.false55, label %land.lhs.true82, !dbg !2735

lor.lhs.false55:                                  ; preds = %lor.lhs.false46, %lor.lhs.false37, %lor.lhs.false28
  %27 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2736
  %common56 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !2736
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !2736
  %28 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !2736
  %base58 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !2736
  %29 = bitcast %struct.tree_base* %base58 to i64*, !dbg !2736
  %bf.load59 = load i64, i64* %29, align 8, !dbg !2736
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !2736
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !2736
  %cmp62 = icmp eq i32 %bf.cast61, 6, !dbg !2736
  br i1 %cmp62, label %if.end, label %lor.lhs.false64, !dbg !2736

lor.lhs.false64:                                  ; preds = %lor.lhs.false55
  %30 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2736
  %common65 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !2736
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !2736
  %31 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !2736
  %base67 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !2736
  %32 = bitcast %struct.tree_base* %base67 to i64*, !dbg !2736
  %bf.load68 = load i64, i64* %32, align 8, !dbg !2736
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !2736
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !2736
  %cmp71 = icmp eq i32 %bf.cast70, 7, !dbg !2736
  br i1 %cmp71, label %if.end, label %lor.lhs.false73, !dbg !2736

lor.lhs.false73:                                  ; preds = %lor.lhs.false64
  %33 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2736
  %common74 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !2736
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !2736
  %34 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !2736
  %base76 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !2736
  %35 = bitcast %struct.tree_base* %base76 to i64*, !dbg !2736
  %bf.load77 = load i64, i64* %35, align 8, !dbg !2736
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !2736
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !2736
  %cmp80 = icmp eq i32 %bf.cast79, 8, !dbg !2736
  br i1 %cmp80, label %if.end, label %land.lhs.true82, !dbg !2737

land.lhs.true82:                                  ; preds = %lor.lhs.false73, %lor.lhs.false46, %lor.lhs.false19
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2738
  %common83 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !2738
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !2738
  %37 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !2738
  %base85 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !2738
  %38 = bitcast %struct.tree_base* %base85 to i64*, !dbg !2738
  %bf.load86 = load i64, i64* %38, align 8, !dbg !2738
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !2738
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !2738
  %cmp89 = icmp eq i32 %bf.cast88, 9, !dbg !2738
  br i1 %cmp89, label %lor.lhs.false91, label %land.lhs.true111, !dbg !2739

lor.lhs.false91:                                  ; preds = %land.lhs.true82
  %39 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2740
  %common92 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !2740
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !2740
  %40 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !2740
  %base94 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !2740
  %41 = bitcast %struct.tree_base* %base94 to i64*, !dbg !2740
  %bf.load95 = load i64, i64* %41, align 8, !dbg !2740
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !2740
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !2740
  %cmp98 = icmp eq i32 %bf.cast97, 9, !dbg !2740
  br i1 %cmp98, label %lor.lhs.false100, label %land.lhs.true111, !dbg !2741

lor.lhs.false100:                                 ; preds = %lor.lhs.false91
  %42 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2742
  %common101 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !2742
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !2742
  %43 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !2742
  %base103 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !2742
  %44 = bitcast %struct.tree_base* %base103 to i64*, !dbg !2742
  %bf.load104 = load i64, i64* %44, align 8, !dbg !2742
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !2742
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !2742
  %cmp107 = icmp eq i32 %bf.cast106, 9, !dbg !2742
  br i1 %cmp107, label %lor.lhs.false109, label %land.lhs.true111, !dbg !2743

lor.lhs.false109:                                 ; preds = %lor.lhs.false100
  %45 = load i32, i32* @flag_associative_math, align 4, !dbg !2744
  %tobool110 = icmp ne i32 %45, 0, !dbg !2744
  br i1 %tobool110, label %if.end, label %land.lhs.true111, !dbg !2745

land.lhs.true111:                                 ; preds = %lor.lhs.false109, %lor.lhs.false100, %lor.lhs.false91, %land.lhs.true82
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2746
  %common112 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !2746
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !2746
  %47 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !2746
  %base114 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !2746
  %48 = bitcast %struct.tree_base* %base114 to i64*, !dbg !2746
  %bf.load115 = load i64, i64* %48, align 8, !dbg !2746
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !2746
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !2746
  %cmp118 = icmp eq i32 %bf.cast117, 11, !dbg !2746
  br i1 %cmp118, label %land.lhs.true120, label %if.then164, !dbg !2746

land.lhs.true120:                                 ; preds = %land.lhs.true111
  %49 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2746
  %common121 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !2746
  %type122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2, !dbg !2746
  %50 = load %union.tree_node*, %union.tree_node** %type122, align 8, !dbg !2746
  %base123 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !2746
  %51 = bitcast %struct.tree_base* %base123 to i64*, !dbg !2746
  %bf.load124 = load i64, i64* %51, align 8, !dbg !2746
  %bf.lshr = lshr i64 %bf.load124, 31, !dbg !2746
  %bf.clear125 = and i64 %bf.lshr, 1, !dbg !2746
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !2746
  %tobool127 = icmp ne i32 %bf.cast126, 0, !dbg !2746
  br i1 %tobool127, label %if.then164, label %lor.lhs.false128, !dbg !2747

lor.lhs.false128:                                 ; preds = %land.lhs.true120
  %52 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2748
  %common129 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !2748
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !2748
  %53 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !2748
  %base131 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !2748
  %54 = bitcast %struct.tree_base* %base131 to i64*, !dbg !2748
  %bf.load132 = load i64, i64* %54, align 8, !dbg !2748
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !2748
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !2748
  %cmp135 = icmp eq i32 %bf.cast134, 11, !dbg !2748
  br i1 %cmp135, label %land.lhs.true137, label %if.then164, !dbg !2748

land.lhs.true137:                                 ; preds = %lor.lhs.false128
  %55 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2748
  %common138 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !2748
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !2748
  %56 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !2748
  %base140 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !2748
  %57 = bitcast %struct.tree_base* %base140 to i64*, !dbg !2748
  %bf.load141 = load i64, i64* %57, align 8, !dbg !2748
  %bf.lshr142 = lshr i64 %bf.load141, 31, !dbg !2748
  %bf.clear143 = and i64 %bf.lshr142, 1, !dbg !2748
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !2748
  %tobool145 = icmp ne i32 %bf.cast144, 0, !dbg !2748
  br i1 %tobool145, label %if.then164, label %lor.lhs.false146, !dbg !2749

lor.lhs.false146:                                 ; preds = %land.lhs.true137
  %58 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2750
  %common147 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !2750
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !2750
  %59 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !2750
  %base149 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !2750
  %60 = bitcast %struct.tree_base* %base149 to i64*, !dbg !2750
  %bf.load150 = load i64, i64* %60, align 8, !dbg !2750
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !2750
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !2750
  %cmp153 = icmp eq i32 %bf.cast152, 11, !dbg !2750
  br i1 %cmp153, label %land.lhs.true155, label %if.then164, !dbg !2750

land.lhs.true155:                                 ; preds = %lor.lhs.false146
  %61 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2750
  %common156 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !2750
  %type157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2, !dbg !2750
  %62 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !2750
  %base158 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !2750
  %63 = bitcast %struct.tree_base* %base158 to i64*, !dbg !2750
  %bf.load159 = load i64, i64* %63, align 8, !dbg !2750
  %bf.lshr160 = lshr i64 %bf.load159, 31, !dbg !2750
  %bf.clear161 = and i64 %bf.lshr160, 1, !dbg !2750
  %bf.cast162 = trunc i64 %bf.clear161 to i32, !dbg !2750
  %tobool163 = icmp ne i32 %bf.cast162, 0, !dbg !2750
  br i1 %tobool163, label %if.then164, label %if.end, !dbg !2751

if.then164:                                       ; preds = %land.lhs.true155, %lor.lhs.false146, %land.lhs.true137, %lor.lhs.false128, %land.lhs.true120, %land.lhs.true111
  br label %for.inc, !dbg !2752

if.end:                                           ; preds = %land.lhs.true155, %lor.lhs.false109, %lor.lhs.false73, %lor.lhs.false64, %lor.lhs.false55
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2753
  %call165 = call zeroext i8 @should_break_up_subtract(%union.gimple_statement_d* %64), !dbg !2755
  %tobool166 = icmp ne i8 %call165, 0, !dbg !2755
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !2756

if.then167:                                       ; preds = %if.end
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2757
  call void @break_up_subtract(%union.gimple_statement_d* %65, %struct.gimple_stmt_iterator* %gsi), !dbg !2758
  br label %if.end168, !dbg !2758

if.end168:                                        ; preds = %if.then167, %if.end
  br label %if.end169, !dbg !2759

if.end169:                                        ; preds = %if.end168, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2760

for.inc:                                          ; preds = %if.end169, %if.then164
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2761
  br label %for.cond, !dbg !2762, !llvm.loop !2763

for.end:                                          ; preds = %for.cond
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2765
  %call170 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %66), !dbg !2767
  store %struct.basic_block_def* %call170, %struct.basic_block_def** %son, align 8, !dbg !2768
  br label %for.cond171, !dbg !2769

for.cond171:                                      ; preds = %for.inc174, %for.end
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2770
  %tobool172 = icmp ne %struct.basic_block_def* %67, null, !dbg !2772
  br i1 %tobool172, label %for.body173, label %for.end176, !dbg !2772

for.body173:                                      ; preds = %for.cond171
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2773
  call void @break_up_subtract_bb(%struct.basic_block_def* %68), !dbg !2774
  br label %for.inc174, !dbg !2774

for.inc174:                                       ; preds = %for.body173
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2775
  %call175 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %69), !dbg !2776
  store %struct.basic_block_def* %call175, %struct.basic_block_def** %son, align 8, !dbg !2777
  br label %for.cond171, !dbg !2778, !llvm.loop !2779

for.end176:                                       ; preds = %for.cond171
  ret void, !dbg !2781
}

; Function Attrs: noinline nounwind uwtable
define internal void @reassociate_bb(%struct.basic_block_def* %bb) #0 !dbg !2782 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %rhs_code = alloca i32, align 4
  %tmp17 = alloca %struct.gimple_stmt_iterator, align 8
  %ops = alloca %struct.VEC_operand_entry_t_heap*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2783, metadata !DIExpression()), !dbg !2784
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2785, metadata !DIExpression()), !dbg !2786
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !2787, metadata !DIExpression()), !dbg !2788
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2789
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !2791
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2791
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2791
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !2791
  br label %for.cond, !dbg !2792

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2793
  %tobool = icmp ne i8 %call, 0, !dbg !2795
  %lnot = xor i1 %tobool, true, !dbg !2795
  br i1 %lnot, label %for.body, label %for.end, !dbg !2796

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2797, metadata !DIExpression()), !dbg !2799
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2800
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !2799
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2801
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %3), !dbg !2803
  %tobool3 = icmp ne i8 %call2, 0, !dbg !2803
  br i1 %tobool3, label %if.then, label %if.end246, !dbg !2804

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !2805, metadata !DIExpression()), !dbg !2807
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !2808, metadata !DIExpression()), !dbg !2809
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !2812, metadata !DIExpression()), !dbg !2813
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2814
  %call4 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !2815
  store i32 %call4, i32* %rhs_code, align 4, !dbg !2813
  %5 = load i32, i32* %rhs_code, align 4, !dbg !2816
  %call5 = call i32 @get_gimple_rhs_class(i32 %5), !dbg !2818
  %cmp = icmp ne i32 %call5, 1, !dbg !2819
  br i1 %cmp, label %if.then6, label %if.end, !dbg !2820

if.then6:                                         ; preds = %if.then
  br label %for.inc, !dbg !2821

if.end:                                           ; preds = %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2822
  %call7 = call zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %6), !dbg !2824
  %tobool8 = icmp ne i8 %call7, 0, !dbg !2824
  br i1 %tobool8, label %if.then9, label %if.end24, !dbg !2825

if.then9:                                         ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2826
  %call10 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %7), !dbg !2829
  %call11 = call zeroext i8 @has_zero_uses(%union.tree_node* %call10), !dbg !2830
  %tobool12 = icmp ne i8 %call11, 0, !dbg !2830
  br i1 %tobool12, label %if.then13, label %if.end23, !dbg !2831

if.then13:                                        ; preds = %if.then9
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !2832
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2834
  call void @release_defs(%union.gimple_statement_d* %8), !dbg !2835
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2836
  %tobool15 = icmp ne i8 %call14, 0, !dbg !2836
  br i1 %tobool15, label %if.then16, label %if.end22, !dbg !2838

if.then16:                                        ; preds = %if.then13
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2839
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp17, %struct.basic_block_def* %9), !dbg !2841
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2841
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp17 to i8*, !dbg !2841
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !2841
  %call18 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2842
  %tobool19 = icmp ne i8 %call18, 0, !dbg !2842
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !2844

if.then20:                                        ; preds = %if.then16
  br label %for.end, !dbg !2845

if.end21:                                         ; preds = %if.then16
  br label %if.end22, !dbg !2846

if.end22:                                         ; preds = %if.end21, %if.then13
  br label %if.end23, !dbg !2847

if.end23:                                         ; preds = %if.end22, %if.then9
  br label %for.inc, !dbg !2848

if.end24:                                         ; preds = %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2849
  %call25 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %12), !dbg !2850
  store %union.tree_node* %call25, %union.tree_node** %lhs, align 8, !dbg !2851
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2852
  %call26 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !2853
  store %union.tree_node* %call26, %union.tree_node** %rhs1, align 8, !dbg !2854
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2855
  %call27 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %14), !dbg !2856
  store %union.tree_node* %call27, %union.tree_node** %rhs2, align 8, !dbg !2857
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2858
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !2858
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2858
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2858
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2858
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !2858
  %bf.load = load i64, i64* %17, align 8, !dbg !2858
  %bf.clear = and i64 %bf.load, 65535, !dbg !2858
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2858
  %cmp28 = icmp eq i32 %bf.cast, 6, !dbg !2858
  br i1 %cmp28, label %lor.lhs.false44, label %lor.lhs.false, !dbg !2858

lor.lhs.false:                                    ; preds = %if.end24
  %18 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2858
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !2858
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !2858
  %19 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !2858
  %base31 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !2858
  %20 = bitcast %struct.tree_base* %base31 to i64*, !dbg !2858
  %bf.load32 = load i64, i64* %20, align 8, !dbg !2858
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !2858
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !2858
  %cmp35 = icmp eq i32 %bf.cast34, 7, !dbg !2858
  br i1 %cmp35, label %lor.lhs.false44, label %lor.lhs.false36, !dbg !2858

lor.lhs.false36:                                  ; preds = %lor.lhs.false
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2858
  %common37 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !2858
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !2858
  %22 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !2858
  %base39 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !2858
  %23 = bitcast %struct.tree_base* %base39 to i64*, !dbg !2858
  %bf.load40 = load i64, i64* %23, align 8, !dbg !2858
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !2858
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !2858
  %cmp43 = icmp eq i32 %bf.cast42, 8, !dbg !2858
  br i1 %cmp43, label %lor.lhs.false44, label %land.lhs.true, !dbg !2860

lor.lhs.false44:                                  ; preds = %lor.lhs.false36, %lor.lhs.false, %if.end24
  %24 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2861
  %common45 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !2861
  %type46 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common45, i32 0, i32 2, !dbg !2861
  %25 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !2861
  %base47 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !2861
  %26 = bitcast %struct.tree_base* %base47 to i64*, !dbg !2861
  %bf.load48 = load i64, i64* %26, align 8, !dbg !2861
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !2861
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !2861
  %cmp51 = icmp eq i32 %bf.cast50, 6, !dbg !2861
  br i1 %cmp51, label %lor.lhs.false68, label %lor.lhs.false52, !dbg !2861

lor.lhs.false52:                                  ; preds = %lor.lhs.false44
  %27 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2861
  %common53 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !2861
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !2861
  %28 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !2861
  %base55 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !2861
  %29 = bitcast %struct.tree_base* %base55 to i64*, !dbg !2861
  %bf.load56 = load i64, i64* %29, align 8, !dbg !2861
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !2861
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !2861
  %cmp59 = icmp eq i32 %bf.cast58, 7, !dbg !2861
  br i1 %cmp59, label %lor.lhs.false68, label %lor.lhs.false60, !dbg !2861

lor.lhs.false60:                                  ; preds = %lor.lhs.false52
  %30 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2861
  %common61 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !2861
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !2861
  %31 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !2861
  %base63 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !2861
  %32 = bitcast %struct.tree_base* %base63 to i64*, !dbg !2861
  %bf.load64 = load i64, i64* %32, align 8, !dbg !2861
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !2861
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !2861
  %cmp67 = icmp eq i32 %bf.cast66, 8, !dbg !2861
  br i1 %cmp67, label %lor.lhs.false68, label %land.lhs.true, !dbg !2862

lor.lhs.false68:                                  ; preds = %lor.lhs.false60, %lor.lhs.false52, %lor.lhs.false44
  %33 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2863
  %common69 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !2863
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !2863
  %34 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !2863
  %base71 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !2863
  %35 = bitcast %struct.tree_base* %base71 to i64*, !dbg !2863
  %bf.load72 = load i64, i64* %35, align 8, !dbg !2863
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !2863
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !2863
  %cmp75 = icmp eq i32 %bf.cast74, 6, !dbg !2863
  br i1 %cmp75, label %if.end168, label %lor.lhs.false76, !dbg !2863

lor.lhs.false76:                                  ; preds = %lor.lhs.false68
  %36 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2863
  %common77 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !2863
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !2863
  %37 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !2863
  %base79 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !2863
  %38 = bitcast %struct.tree_base* %base79 to i64*, !dbg !2863
  %bf.load80 = load i64, i64* %38, align 8, !dbg !2863
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !2863
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !2863
  %cmp83 = icmp eq i32 %bf.cast82, 7, !dbg !2863
  br i1 %cmp83, label %if.end168, label %lor.lhs.false84, !dbg !2863

lor.lhs.false84:                                  ; preds = %lor.lhs.false76
  %39 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2863
  %common85 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !2863
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !2863
  %40 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !2863
  %base87 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !2863
  %41 = bitcast %struct.tree_base* %base87 to i64*, !dbg !2863
  %bf.load88 = load i64, i64* %41, align 8, !dbg !2863
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !2863
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !2863
  %cmp91 = icmp eq i32 %bf.cast90, 8, !dbg !2863
  br i1 %cmp91, label %if.end168, label %land.lhs.true, !dbg !2864

land.lhs.true:                                    ; preds = %lor.lhs.false84, %lor.lhs.false60, %lor.lhs.false36
  %42 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2865
  %common92 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !2865
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !2865
  %43 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !2865
  %base94 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !2865
  %44 = bitcast %struct.tree_base* %base94 to i64*, !dbg !2865
  %bf.load95 = load i64, i64* %44, align 8, !dbg !2865
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !2865
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !2865
  %cmp98 = icmp eq i32 %bf.cast97, 9, !dbg !2865
  br i1 %cmp98, label %lor.lhs.false99, label %land.lhs.true117, !dbg !2866

lor.lhs.false99:                                  ; preds = %land.lhs.true
  %45 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2867
  %common100 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !2867
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !2867
  %46 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !2867
  %base102 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !2867
  %47 = bitcast %struct.tree_base* %base102 to i64*, !dbg !2867
  %bf.load103 = load i64, i64* %47, align 8, !dbg !2867
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !2867
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !2867
  %cmp106 = icmp eq i32 %bf.cast105, 9, !dbg !2867
  br i1 %cmp106, label %lor.lhs.false107, label %land.lhs.true117, !dbg !2868

lor.lhs.false107:                                 ; preds = %lor.lhs.false99
  %48 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2869
  %common108 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !2869
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !2869
  %49 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !2869
  %base110 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !2869
  %50 = bitcast %struct.tree_base* %base110 to i64*, !dbg !2869
  %bf.load111 = load i64, i64* %50, align 8, !dbg !2869
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !2869
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !2869
  %cmp114 = icmp eq i32 %bf.cast113, 9, !dbg !2869
  br i1 %cmp114, label %lor.lhs.false115, label %land.lhs.true117, !dbg !2870

lor.lhs.false115:                                 ; preds = %lor.lhs.false107
  %51 = load i32, i32* @flag_associative_math, align 4, !dbg !2871
  %tobool116 = icmp ne i32 %51, 0, !dbg !2871
  br i1 %tobool116, label %if.end168, label %land.lhs.true117, !dbg !2872

land.lhs.true117:                                 ; preds = %lor.lhs.false115, %lor.lhs.false107, %lor.lhs.false99, %land.lhs.true
  %52 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2873
  %common118 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !2873
  %type119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2, !dbg !2873
  %53 = load %union.tree_node*, %union.tree_node** %type119, align 8, !dbg !2873
  %base120 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !2873
  %54 = bitcast %struct.tree_base* %base120 to i64*, !dbg !2873
  %bf.load121 = load i64, i64* %54, align 8, !dbg !2873
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !2873
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !2873
  %cmp124 = icmp eq i32 %bf.cast123, 11, !dbg !2873
  br i1 %cmp124, label %land.lhs.true125, label %if.then167, !dbg !2873

land.lhs.true125:                                 ; preds = %land.lhs.true117
  %55 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2873
  %common126 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !2873
  %type127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 2, !dbg !2873
  %56 = load %union.tree_node*, %union.tree_node** %type127, align 8, !dbg !2873
  %base128 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !2873
  %57 = bitcast %struct.tree_base* %base128 to i64*, !dbg !2873
  %bf.load129 = load i64, i64* %57, align 8, !dbg !2873
  %bf.lshr = lshr i64 %bf.load129, 31, !dbg !2873
  %bf.clear130 = and i64 %bf.lshr, 1, !dbg !2873
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !2873
  %tobool132 = icmp ne i32 %bf.cast131, 0, !dbg !2873
  br i1 %tobool132, label %if.then167, label %lor.lhs.false133, !dbg !2874

lor.lhs.false133:                                 ; preds = %land.lhs.true125
  %58 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2875
  %common134 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !2875
  %type135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 2, !dbg !2875
  %59 = load %union.tree_node*, %union.tree_node** %type135, align 8, !dbg !2875
  %base136 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !2875
  %60 = bitcast %struct.tree_base* %base136 to i64*, !dbg !2875
  %bf.load137 = load i64, i64* %60, align 8, !dbg !2875
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !2875
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !2875
  %cmp140 = icmp eq i32 %bf.cast139, 11, !dbg !2875
  br i1 %cmp140, label %land.lhs.true141, label %if.then167, !dbg !2875

land.lhs.true141:                                 ; preds = %lor.lhs.false133
  %61 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2875
  %common142 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !2875
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 2, !dbg !2875
  %62 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !2875
  %base144 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !2875
  %63 = bitcast %struct.tree_base* %base144 to i64*, !dbg !2875
  %bf.load145 = load i64, i64* %63, align 8, !dbg !2875
  %bf.lshr146 = lshr i64 %bf.load145, 31, !dbg !2875
  %bf.clear147 = and i64 %bf.lshr146, 1, !dbg !2875
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !2875
  %tobool149 = icmp ne i32 %bf.cast148, 0, !dbg !2875
  br i1 %tobool149, label %if.then167, label %lor.lhs.false150, !dbg !2876

lor.lhs.false150:                                 ; preds = %land.lhs.true141
  %64 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2877
  %common151 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !2877
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !2877
  %65 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !2877
  %base153 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !2877
  %66 = bitcast %struct.tree_base* %base153 to i64*, !dbg !2877
  %bf.load154 = load i64, i64* %66, align 8, !dbg !2877
  %bf.clear155 = and i64 %bf.load154, 65535, !dbg !2877
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !2877
  %cmp157 = icmp eq i32 %bf.cast156, 11, !dbg !2877
  br i1 %cmp157, label %land.lhs.true158, label %if.then167, !dbg !2877

land.lhs.true158:                                 ; preds = %lor.lhs.false150
  %67 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !2877
  %common159 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !2877
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !2877
  %68 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !2877
  %base161 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !2877
  %69 = bitcast %struct.tree_base* %base161 to i64*, !dbg !2877
  %bf.load162 = load i64, i64* %69, align 8, !dbg !2877
  %bf.lshr163 = lshr i64 %bf.load162, 31, !dbg !2877
  %bf.clear164 = and i64 %bf.lshr163, 1, !dbg !2877
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !2877
  %tobool166 = icmp ne i32 %bf.cast165, 0, !dbg !2877
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !2878

if.then167:                                       ; preds = %land.lhs.true158, %lor.lhs.false150, %land.lhs.true141, %lor.lhs.false133, %land.lhs.true125, %land.lhs.true117
  br label %for.inc, !dbg !2879

if.end168:                                        ; preds = %land.lhs.true158, %lor.lhs.false115, %lor.lhs.false84, %lor.lhs.false76, %lor.lhs.false68
  %70 = load i32, i32* %rhs_code, align 4, !dbg !2880
  %call169 = call zeroext i8 @associative_tree_code(i32 %70), !dbg !2882
  %tobool170 = icmp ne i8 %call169, 0, !dbg !2882
  br i1 %tobool170, label %if.then171, label %if.end245, !dbg !2883

if.then171:                                       ; preds = %if.end168
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2884, metadata !DIExpression()), !dbg !2886
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2886
  %71 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2887
  %base172 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !2887
  %72 = bitcast %struct.tree_base* %base172 to i64*, !dbg !2887
  %bf.load173 = load i64, i64* %72, align 8, !dbg !2887
  %bf.clear174 = and i64 %bf.load173, 65535, !dbg !2887
  %bf.cast175 = trunc i64 %bf.clear174 to i32, !dbg !2887
  %cmp176 = icmp eq i32 %bf.cast175, 141, !dbg !2889
  br i1 %cmp176, label %land.lhs.true177, label %if.end181, !dbg !2890

land.lhs.true177:                                 ; preds = %if.then171
  %73 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2891
  %call178 = call zeroext i8 @has_zero_uses(%union.tree_node* %73), !dbg !2892
  %conv = zext i8 %call178 to i32, !dbg !2892
  %tobool179 = icmp ne i32 %conv, 0, !dbg !2892
  br i1 %tobool179, label %if.then180, label %if.end181, !dbg !2893

if.then180:                                       ; preds = %land.lhs.true177
  br label %for.inc, !dbg !2894

if.end181:                                        ; preds = %land.lhs.true177, %if.then171
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2895
  call void @gimple_set_visited(%union.gimple_statement_d* %74, i8 zeroext 1), !dbg !2896
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2897
  call void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %ops, %union.gimple_statement_d* %75, i8 zeroext 1, i8 zeroext 1), !dbg !2898
  %76 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2899
  %tobool182 = icmp ne %struct.VEC_operand_entry_t_heap* %76, null, !dbg !2899
  br i1 %tobool182, label %cond.true, label %cond.false, !dbg !2899

cond.true:                                        ; preds = %if.end181
  %77 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2899
  %base183 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %77, i32 0, i32 0, !dbg !2899
  br label %cond.end, !dbg !2899

cond.false:                                       ; preds = %if.end181
  br label %cond.end, !dbg !2899

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base183, %cond.true ], [ null, %cond.false ], !dbg !2899
  %call184 = call %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %cond), !dbg !2899
  %78 = bitcast %struct.operand_entry** %call184 to i8*, !dbg !2899
  %79 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2900
  %tobool185 = icmp ne %struct.VEC_operand_entry_t_heap* %79, null, !dbg !2900
  br i1 %tobool185, label %cond.true186, label %cond.false188, !dbg !2900

cond.true186:                                     ; preds = %cond.end
  %80 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2900
  %base187 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %80, i32 0, i32 0, !dbg !2900
  br label %cond.end189, !dbg !2900

cond.false188:                                    ; preds = %cond.end
  br label %cond.end189, !dbg !2900

cond.end189:                                      ; preds = %cond.false188, %cond.true186
  %cond190 = phi %struct.VEC_operand_entry_t_base* [ %base187, %cond.true186 ], [ null, %cond.false188 ], !dbg !2900
  %call191 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond190), !dbg !2900
  %conv192 = zext i32 %call191 to i64, !dbg !2900
  call void @spec_qsort(i8* %78, i64 %conv192, i64 8, i32 (i8*, i8*)* @sort_by_operand_rank), !dbg !2901
  %81 = load i32, i32* %rhs_code, align 4, !dbg !2902
  call void @optimize_ops_list(i32 %81, %struct.VEC_operand_entry_t_heap** %ops), !dbg !2903
  %82 = load i32, i32* %rhs_code, align 4, !dbg !2904
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2906
  %call193 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %83), !dbg !2907
  %call194 = call zeroext i8 @undistribute_ops_list(i32 %82, %struct.VEC_operand_entry_t_heap** %ops, %struct.loop* %call193), !dbg !2908
  %tobool195 = icmp ne i8 %call194, 0, !dbg !2908
  br i1 %tobool195, label %if.then196, label %if.end212, !dbg !2909

if.then196:                                       ; preds = %cond.end189
  %84 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2910
  %tobool197 = icmp ne %struct.VEC_operand_entry_t_heap* %84, null, !dbg !2910
  br i1 %tobool197, label %cond.true198, label %cond.false200, !dbg !2910

cond.true198:                                     ; preds = %if.then196
  %85 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2910
  %base199 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %85, i32 0, i32 0, !dbg !2910
  br label %cond.end201, !dbg !2910

cond.false200:                                    ; preds = %if.then196
  br label %cond.end201, !dbg !2910

cond.end201:                                      ; preds = %cond.false200, %cond.true198
  %cond202 = phi %struct.VEC_operand_entry_t_base* [ %base199, %cond.true198 ], [ null, %cond.false200 ], !dbg !2910
  %call203 = call %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %cond202), !dbg !2910
  %86 = bitcast %struct.operand_entry** %call203 to i8*, !dbg !2910
  %87 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2912
  %tobool204 = icmp ne %struct.VEC_operand_entry_t_heap* %87, null, !dbg !2912
  br i1 %tobool204, label %cond.true205, label %cond.false207, !dbg !2912

cond.true205:                                     ; preds = %cond.end201
  %88 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2912
  %base206 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %88, i32 0, i32 0, !dbg !2912
  br label %cond.end208, !dbg !2912

cond.false207:                                    ; preds = %cond.end201
  br label %cond.end208, !dbg !2912

cond.end208:                                      ; preds = %cond.false207, %cond.true205
  %cond209 = phi %struct.VEC_operand_entry_t_base* [ %base206, %cond.true205 ], [ null, %cond.false207 ], !dbg !2912
  %call210 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond209), !dbg !2912
  %conv211 = zext i32 %call210 to i64, !dbg !2912
  call void @spec_qsort(i8* %86, i64 %conv211, i64 8, i32 (i8*, i8*)* @sort_by_operand_rank), !dbg !2913
  %89 = load i32, i32* %rhs_code, align 4, !dbg !2914
  call void @optimize_ops_list(i32 %89, %struct.VEC_operand_entry_t_heap** %ops), !dbg !2915
  br label %if.end212, !dbg !2916

if.end212:                                        ; preds = %cond.end208, %cond.end189
  %90 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2917
  %tobool213 = icmp ne %struct.VEC_operand_entry_t_heap* %90, null, !dbg !2917
  br i1 %tobool213, label %cond.true214, label %cond.false216, !dbg !2917

cond.true214:                                     ; preds = %if.end212
  %91 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2917
  %base215 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %91, i32 0, i32 0, !dbg !2917
  br label %cond.end217, !dbg !2917

cond.false216:                                    ; preds = %if.end212
  br label %cond.end217, !dbg !2917

cond.end217:                                      ; preds = %cond.false216, %cond.true214
  %cond218 = phi %struct.VEC_operand_entry_t_base* [ %base215, %cond.true214 ], [ null, %cond.false216 ], !dbg !2917
  %call219 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond218), !dbg !2917
  %cmp220 = icmp eq i32 %call219, 1, !dbg !2919
  br i1 %cmp220, label %if.then222, label %if.else, !dbg !2920

if.then222:                                       ; preds = %cond.end217
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2921
  %tobool223 = icmp ne %struct._IO_FILE* %92, null, !dbg !2921
  br i1 %tobool223, label %land.lhs.true224, label %if.end228, !dbg !2924

land.lhs.true224:                                 ; preds = %if.then222
  %93 = load i32, i32* @dump_flags, align 4, !dbg !2925
  %and = and i32 %93, 8, !dbg !2926
  %tobool225 = icmp ne i32 %and, 0, !dbg !2926
  br i1 %tobool225, label %if.then226, label %if.end228, !dbg !2927

if.then226:                                       ; preds = %land.lhs.true224
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2928
  %call227 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)), !dbg !2930
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2931
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2932
  call void @print_gimple_stmt(%struct._IO_FILE* %95, %union.gimple_statement_d* %96, i32 0, i32 0), !dbg !2933
  br label %if.end228, !dbg !2934

if.end228:                                        ; preds = %if.then226, %land.lhs.true224, %if.then222
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2935
  %call229 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %97), !dbg !2936
  store %union.tree_node* %call229, %union.tree_node** %rhs1, align 8, !dbg !2937
  %98 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2938
  %tobool230 = icmp ne %struct.VEC_operand_entry_t_heap* %98, null, !dbg !2938
  br i1 %tobool230, label %cond.true231, label %cond.false233, !dbg !2938

cond.true231:                                     ; preds = %if.end228
  %99 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2938
  %base232 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %99, i32 0, i32 0, !dbg !2938
  br label %cond.end234, !dbg !2938

cond.false233:                                    ; preds = %if.end228
  br label %cond.end234, !dbg !2938

cond.end234:                                      ; preds = %cond.false233, %cond.true231
  %cond235 = phi %struct.VEC_operand_entry_t_base* [ %base232, %cond.true231 ], [ null, %cond.false233 ], !dbg !2938
  %call236 = call %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond235), !dbg !2938
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call236, i32 0, i32 1, !dbg !2939
  %100 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !2939
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %100), !dbg !2940
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2941
  call void @update_stmt(%union.gimple_statement_d* %101), !dbg !2942
  %102 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !2943
  call void @remove_visited_stmt_chain(%union.tree_node* %102), !dbg !2944
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2945
  %tobool237 = icmp ne %struct._IO_FILE* %103, null, !dbg !2945
  br i1 %tobool237, label %land.lhs.true238, label %if.end243, !dbg !2947

land.lhs.true238:                                 ; preds = %cond.end234
  %104 = load i32, i32* @dump_flags, align 4, !dbg !2948
  %and239 = and i32 %104, 8, !dbg !2949
  %tobool240 = icmp ne i32 %and239, 0, !dbg !2949
  br i1 %tobool240, label %if.then241, label %if.end243, !dbg !2950

if.then241:                                       ; preds = %land.lhs.true238
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2951
  %call242 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)), !dbg !2953
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2954
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2955
  call void @print_gimple_stmt(%struct._IO_FILE* %106, %union.gimple_statement_d* %107, i32 0, i32 0), !dbg !2956
  br label %if.end243, !dbg !2957

if.end243:                                        ; preds = %if.then241, %land.lhs.true238, %cond.end234
  br label %if.end244, !dbg !2958

if.else:                                          ; preds = %cond.end217
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2959
  %109 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !2960
  call void @rewrite_expr_tree(%union.gimple_statement_d* %108, i32 0, %struct.VEC_operand_entry_t_heap* %109, i8 zeroext 0), !dbg !2961
  br label %if.end244

if.end244:                                        ; preds = %if.else, %if.end243
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops), !dbg !2962
  br label %if.end245, !dbg !2963

if.end245:                                        ; preds = %if.end244, %if.end168
  br label %if.end246, !dbg !2964

if.end246:                                        ; preds = %if.end245, %for.body
  br label %for.inc, !dbg !2965

for.inc:                                          ; preds = %if.end246, %if.then180, %if.then167, %if.end23, %if.then6
  call void @gsi_prev(%struct.gimple_stmt_iterator* %gsi), !dbg !2966
  br label %for.cond, !dbg !2967, !llvm.loop !2968

for.end:                                          ; preds = %if.then20, %for.cond
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2970
  %call247 = call %struct.basic_block_def* @first_dom_son(i32 2, %struct.basic_block_def* %110), !dbg !2972
  store %struct.basic_block_def* %call247, %struct.basic_block_def** %son, align 8, !dbg !2973
  br label %for.cond248, !dbg !2974

for.cond248:                                      ; preds = %for.inc251, %for.end
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2975
  %tobool249 = icmp ne %struct.basic_block_def* %111, null, !dbg !2977
  br i1 %tobool249, label %for.body250, label %for.end253, !dbg !2977

for.body250:                                      ; preds = %for.cond248
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2978
  call void @reassociate_bb(%struct.basic_block_def* %112), !dbg !2979
  br label %for.inc251, !dbg !2979

for.inc251:                                       ; preds = %for.body250
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !2980
  %call252 = call %struct.basic_block_def* @next_dom_son(i32 2, %struct.basic_block_def* %113), !dbg !2981
  store %struct.basic_block_def* %call252, %struct.basic_block_def** %son, align 8, !dbg !2982
  br label %for.cond248, !dbg !2983, !llvm.loop !2984

for.end253:                                       ; preds = %for.cond248
  ret void, !dbg !2986
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !2987 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2990, metadata !DIExpression()), !dbg !2991
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !2992, metadata !DIExpression()), !dbg !2993
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !2994, metadata !DIExpression()), !dbg !2995
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2996
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !2997
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !2998
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !2999
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3000
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3001
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3002
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3003
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3004
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3005
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3006
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3007
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3008
  ret void, !dbg !3009
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3010 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3013, metadata !DIExpression()), !dbg !3014
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3015
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3015
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3016
  %conv = zext i1 %cmp to i32, !dbg !3016
  %conv1 = trunc i32 %conv to i8, !dbg !3017
  ret i8 %conv1, !dbg !3018
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3019 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3022, metadata !DIExpression()), !dbg !3023
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3024
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3024
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3025
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3025
  ret %union.gimple_statement_d* %1, !dbg !3026
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) #0 !dbg !3027 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3030, metadata !DIExpression()), !dbg !3031
  store i8 %visited_p, i8* %visited_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visited_p.addr, metadata !3032, metadata !DIExpression()), !dbg !3033
  %0 = load i8, i8* %visited_p.addr, align 1, !dbg !3034
  %conv = zext i8 %0 to i32, !dbg !3035
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3036
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !3037
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3038
  %bf.load = load i32, i32* %2, align 8, !dbg !3039
  %bf.value = and i32 %conv, 1, !dbg !3039
  %bf.shl = shl i32 %bf.value, 9, !dbg !3039
  %bf.clear = and i32 %bf.load, -513, !dbg !3039
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3039
  store i32 %bf.set, i32* %2, align 8, !dbg !3039
  ret void, !dbg !3040
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !3041 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3045, metadata !DIExpression()), !dbg !3046
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3047
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3048
  %cmp = icmp eq i32 %call, 6, !dbg !3049
  %conv = zext i1 %cmp to i32, !dbg !3049
  %conv1 = trunc i32 %conv to i8, !dbg !3048
  ret i8 %conv1, !dbg !3050
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3051 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3054, metadata !DIExpression()), !dbg !3055
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3056, metadata !DIExpression()), !dbg !3057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3058
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3059
  store i32 %call, i32* %code, align 4, !dbg !3060
  %1 = load i32, i32* %code, align 4, !dbg !3061
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3063
  %cmp = icmp eq i32 %call1, 3, !dbg !3064
  br i1 %cmp, label %if.then, label %if.end, !dbg !3065

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3066
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3066
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !3066
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3066
  %bf.load = load i64, i64* %3, align 8, !dbg !3066
  %bf.clear = and i64 %bf.load, 65535, !dbg !3066
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3066
  store i32 %bf.cast, i32* %code, align 4, !dbg !3067
  br label %if.end, !dbg !3068

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !3069
  ret i32 %4, !dbg !3070
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3071 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3076
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3077
  ret %union.tree_node* %call, !dbg !3078
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !3079 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3080, metadata !DIExpression()), !dbg !3081
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3082
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3083
  ret %union.tree_node* %call, !dbg !3084
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !3085 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3086, metadata !DIExpression()), !dbg !3087
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3088
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !3090
  %cmp = icmp uge i32 %call, 3, !dbg !3091
  br i1 %cmp, label %if.then, label %if.else, !dbg !3092

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3093
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !3094
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !3095
  br label %return, !dbg !3095

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3096
  br label %return, !dbg !3096

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3097
  ret %union.tree_node* %2, !dbg !3097
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @should_break_up_subtract(%union.gimple_statement_d* %stmt) #0 !dbg !3098 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %binlhs = alloca %union.tree_node*, align 8
  %binrhs = alloca %union.tree_node*, align 8
  %immusestmt = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3101, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3103, metadata !DIExpression()), !dbg !3104
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3105
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !3106
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !3104
  call void @llvm.dbg.declare(metadata %union.tree_node** %binlhs, metadata !3107, metadata !DIExpression()), !dbg !3108
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3109
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !3110
  store %union.tree_node* %call1, %union.tree_node** %binlhs, align 8, !dbg !3108
  call void @llvm.dbg.declare(metadata %union.tree_node** %binrhs, metadata !3111, metadata !DIExpression()), !dbg !3112
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3113
  %call2 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %2), !dbg !3114
  store %union.tree_node* %call2, %union.tree_node** %binrhs, align 8, !dbg !3112
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %immusestmt, metadata !3115, metadata !DIExpression()), !dbg !3116
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3117, metadata !DIExpression()), !dbg !3118
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3119
  %call3 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %3), !dbg !3120
  store %struct.loop* %call3, %struct.loop** %loop, align 8, !dbg !3118
  %4 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3121
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3121
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3121
  %bf.load = load i64, i64* %5, align 8, !dbg !3121
  %bf.clear = and i64 %bf.load, 65535, !dbg !3121
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3121
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3123
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3124

land.lhs.true:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3125
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !3125
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3125
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3125
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3126
  %call4 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %7, i32 63, %struct.loop* %8), !dbg !3127
  %conv = zext i8 %call4 to i32, !dbg !3127
  %tobool = icmp ne i32 %conv, 0, !dbg !3127
  br i1 %tobool, label %if.then, label %if.end, !dbg !3128

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !3129
  br label %return, !dbg !3129

if.end:                                           ; preds = %land.lhs.true, %entry
  %9 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3130
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3130
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3130
  %bf.load6 = load i64, i64* %10, align 8, !dbg !3130
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !3130
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !3130
  %cmp9 = icmp eq i32 %bf.cast8, 141, !dbg !3132
  br i1 %cmp9, label %land.lhs.true11, label %if.end18, !dbg !3133

land.lhs.true11:                                  ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3134
  %ssa_name12 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !3134
  %def_stmt13 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name12, i32 0, i32 2, !dbg !3134
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt13, align 8, !dbg !3134
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3135
  %call14 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %12, i32 63, %struct.loop* %13), !dbg !3136
  %conv15 = zext i8 %call14 to i32, !dbg !3136
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !3136
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !3137

if.then17:                                        ; preds = %land.lhs.true11
  store i8 1, i8* %retval, align 1, !dbg !3138
  br label %return, !dbg !3138

if.end18:                                         ; preds = %land.lhs.true11, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3139
  %base19 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3139
  %15 = bitcast %struct.tree_base* %base19 to i64*, !dbg !3139
  %bf.load20 = load i64, i64* %15, align 8, !dbg !3139
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !3139
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3139
  %cmp23 = icmp eq i32 %bf.cast22, 141, !dbg !3141
  br i1 %cmp23, label %land.lhs.true25, label %if.end40, !dbg !3142

land.lhs.true25:                                  ; preds = %if.end18
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3143
  %call26 = call %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %16), !dbg !3144
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3145
  %tobool27 = icmp ne %union.gimple_statement_d* %call26, null, !dbg !3145
  br i1 %tobool27, label %land.lhs.true28, label %if.end40, !dbg !3146

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3147
  %call29 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %17), !dbg !3148
  %conv30 = zext i8 %call29 to i32, !dbg !3148
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !3148
  br i1 %tobool31, label %land.lhs.true32, label %if.end40, !dbg !3149

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3150
  %call33 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %18), !dbg !3151
  %cmp34 = icmp eq i32 %call33, 63, !dbg !3152
  br i1 %cmp34, label %if.then39, label %lor.lhs.false, !dbg !3153

lor.lhs.false:                                    ; preds = %land.lhs.true32
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3154
  %call36 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %19), !dbg !3155
  %cmp37 = icmp eq i32 %call36, 65, !dbg !3156
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !3157

if.then39:                                        ; preds = %lor.lhs.false, %land.lhs.true32
  store i8 1, i8* %retval, align 1, !dbg !3158
  br label %return, !dbg !3158

if.end40:                                         ; preds = %lor.lhs.false, %land.lhs.true28, %land.lhs.true25, %if.end18
  store i8 0, i8* %retval, align 1, !dbg !3159
  br label %return, !dbg !3159

return:                                           ; preds = %if.end40, %if.then39, %if.then17, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !3160
  ret i8 %20, !dbg !3160
}

; Function Attrs: noinline nounwind uwtable
define internal void @break_up_subtract(%union.gimple_statement_d* %stmt, %struct.gimple_stmt_iterator* %gsip) #0 !dbg !3161 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsip.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3165, metadata !DIExpression()), !dbg !3166
  store %struct.gimple_stmt_iterator* %gsip, %struct.gimple_stmt_iterator** %gsip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsip.addr, metadata !3167, metadata !DIExpression()), !dbg !3168
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !3169, metadata !DIExpression()), !dbg !3170
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3171
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !3172
  store %union.tree_node* %call, %union.tree_node** %rhs1, align 8, !dbg !3170
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !3173, metadata !DIExpression()), !dbg !3174
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3175
  %call1 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %1), !dbg !3176
  store %union.tree_node* %call1, %union.tree_node** %rhs2, align 8, !dbg !3174
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3177
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !3177
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3179

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !3180
  %and = and i32 %3, 8, !dbg !3181
  %tobool2 = icmp ne i32 %and, 0, !dbg !3181
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3182

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3183
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0)), !dbg !3185
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3186
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3187
  call void @print_gimple_stmt(%struct._IO_FILE* %5, %union.gimple_statement_d* %6, i32 0, i32 0), !dbg !3188
  br label %if.end, !dbg !3189

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !3190
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsip.addr, align 8, !dbg !3191
  %call4 = call %union.tree_node* @negate_value(%union.tree_node* %7, %struct.gimple_stmt_iterator* %8), !dbg !3192
  store %union.tree_node* %call4, %union.tree_node** %rhs2, align 8, !dbg !3193
  %9 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsip.addr, align 8, !dbg !3194
  %10 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !3195
  %11 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !3196
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %9, i32 63, %union.tree_node* %10, %union.tree_node* %11), !dbg !3197
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3198
  call void @update_stmt(%union.gimple_statement_d* %12), !dbg !3199
  ret void, !dbg !3200
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3201 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3204, metadata !DIExpression()), !dbg !3205
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3206
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3207
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3207
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3208
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3208
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3209
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3210
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3211
  ret void, !dbg !3212
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !3213 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3219, metadata !DIExpression()), !dbg !3220
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3221
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !3222
  %1 = load i32, i32* %flags, align 8, !dbg !3222
  %and = and i32 %1, 512, !dbg !3223
  %tobool = icmp ne i32 %and, 0, !dbg !3223
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !3224

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3225
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !3226
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !3227
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !3227
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !3225
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3228

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3229
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !3230
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !3231
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !3231
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !3232
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3232
  br label %cond.end, !dbg !3228

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !3228

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !3228
  ret %struct.gimple_seq_d* %cond, !dbg !3233
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !3234 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !3240, metadata !DIExpression()), !dbg !3241
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !3242
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !3242
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3242

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !3243
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !3244
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !3244
  br label %cond.end, !dbg !3242

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !3242
  ret %struct.gimple_seq_node_d* %cond, !dbg !3245
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3246 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3249, metadata !DIExpression()), !dbg !3250
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3251
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3252
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3253
  %bf.load = load i32, i32* %1, align 8, !dbg !3253
  %bf.clear = and i32 %bf.load, 255, !dbg !3253
  ret i32 %bf.clear, !dbg !3254
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !3255 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3256, metadata !DIExpression()), !dbg !3257
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3258, metadata !DIExpression()), !dbg !3259
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3260
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3261
  store i32 %call, i32* %code, align 4, !dbg !3259
  %1 = load i32, i32* %code, align 4, !dbg !3262
  %cmp = icmp eq i32 %1, 6, !dbg !3264
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3265

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !3266
  %cmp1 = icmp eq i32 %2, 1, !dbg !3267
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3268

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3269
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !3270
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3271
  %bf.load = load i32, i32* %4, align 8, !dbg !3271
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3271
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !3272
  br label %return, !dbg !3272

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !3273
  %cmp2 = icmp eq i32 %5, 8, !dbg !3275
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !3276

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !3277
  br label %return, !dbg !3277

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3278
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3279
  br label %return, !dbg !3279

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !3280
  ret i32 %6, !dbg !3280
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !3281 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3284, metadata !DIExpression()), !dbg !3285
  %0 = load i32, i32* %code.addr, align 4, !dbg !3286
  %idxprom = sext i32 %0 to i64, !dbg !3287
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !3287
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3287
  %conv = zext i8 %1 to i32, !dbg !3288
  ret i32 %conv, !dbg !3289
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3290 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3293, metadata !DIExpression()), !dbg !3294
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3295, metadata !DIExpression()), !dbg !3296
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3297
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3299
  %tobool = icmp ne i8 %call, 0, !dbg !3299
  br i1 %tobool, label %if.then, label %if.else, !dbg !3300

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3301
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !3303
  %2 = load i32, i32* %i.addr, align 4, !dbg !3304
  %idxprom = zext i32 %2 to i64, !dbg !3303
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3303
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3303
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3305
  br label %return, !dbg !3305

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3306
  br label %return, !dbg !3306

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3307
  ret %union.tree_node* %4, !dbg !3307
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !3308 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3309, metadata !DIExpression()), !dbg !3310
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3311
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3312
  %cmp = icmp uge i32 %call, 1, !dbg !3313
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3314

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3315
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3316
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3317
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3318
  %land.ext = zext i1 %2 to i32, !dbg !3314
  %conv = trunc i32 %land.ext to i8, !dbg !3312
  ret i8 %conv, !dbg !3319
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !3320 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3323, metadata !DIExpression()), !dbg !3324
  call void @llvm.dbg.declare(metadata i64* %off, metadata !3325, metadata !DIExpression()), !dbg !3326
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3327
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !3328
  %idxprom = zext i32 %call to i64, !dbg !3329
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !3329
  %1 = load i64, i64* %arrayidx, align 8, !dbg !3329
  store i64 %1, i64* %off, align 8, !dbg !3330
  %2 = load i64, i64* %off, align 8, !dbg !3331
  %cmp = icmp ne i64 %2, 0, !dbg !3331
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3331

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3331
  br label %cond.end, !dbg !3331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3331
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3332
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !3333
  %5 = load i64, i64* %off, align 8, !dbg !3334
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !3335
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !3336
  ret %union.tree_node** %6, !dbg !3337
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !3338 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3341, metadata !DIExpression()), !dbg !3342
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3343
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3344
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !3345
  ret i32 %call1, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !3347 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  %0 = load i32, i32* %code.addr, align 4, !dbg !3352
  %idxprom = zext i32 %0 to i64, !dbg !3353
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !3353
  %1 = load i32, i32* %arrayidx, align 4, !dbg !3353
  ret i32 %1, !dbg !3354
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !3355 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3358, metadata !DIExpression()), !dbg !3359
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3360
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3361
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !3362
  %1 = load i32, i32* %num_ops, align 4, !dbg !3362
  ret i32 %1, !dbg !3363
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !3364 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3368, metadata !DIExpression()), !dbg !3369
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3370, metadata !DIExpression()), !dbg !3371
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3372
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !3373
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !3371
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3374
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !3374
  br i1 %tobool, label %if.end, label %if.then, !dbg !3376

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3377
  br label %return, !dbg !3377

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3378
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !3379
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3379
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !3380
  br label %return, !dbg !3380

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3381
  ret %struct.loop* %4, !dbg !3381
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %stmt, i32 %code, %struct.loop* %loop) #0 !dbg !3382 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3387, metadata !DIExpression()), !dbg !3388
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3389, metadata !DIExpression()), !dbg !3390
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3391, metadata !DIExpression()), !dbg !3392
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3393
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !3394
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !3392
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3395
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !3397
  %cmp = icmp eq %struct.basic_block_def* %call1, null, !dbg !3398
  br i1 %cmp, label %if.then, label %if.end, !dbg !3399

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3400
  br label %return, !dbg !3400

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3401
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3403
  %call2 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %2, %struct.basic_block_def* %3), !dbg !3404
  %tobool = icmp ne i8 %call2, 0, !dbg !3404
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !3405

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3406
  br label %return, !dbg !3406

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3407
  %call5 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %4), !dbg !3409
  %conv = zext i8 %call5 to i32, !dbg !3409
  %tobool6 = icmp ne i32 %conv, 0, !dbg !3409
  br i1 %tobool6, label %land.lhs.true, label %if.end16, !dbg !3410

land.lhs.true:                                    ; preds = %if.end4
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3411
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !3412
  %6 = load i32, i32* %code.addr, align 4, !dbg !3413
  %cmp8 = icmp eq i32 %call7, %6, !dbg !3414
  br i1 %cmp8, label %land.lhs.true10, label %if.end16, !dbg !3415

land.lhs.true10:                                  ; preds = %land.lhs.true
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3416
  %call11 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %7), !dbg !3417
  %call12 = call zeroext i8 @has_single_use(%union.tree_node* %call11), !dbg !3418
  %conv13 = zext i8 %call12 to i32, !dbg !3418
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !3418
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3419

if.then15:                                        ; preds = %land.lhs.true10
  store i8 1, i8* %retval, align 1, !dbg !3420
  br label %return, !dbg !3420

if.end16:                                         ; preds = %land.lhs.true10, %land.lhs.true, %if.end4
  store i8 0, i8* %retval, align 1, !dbg !3421
  br label %return, !dbg !3421

return:                                           ; preds = %if.end16, %if.then15, %if.then3, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !3422
  ret i8 %8, !dbg !3422
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %lhs) #0 !dbg !3423 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %immuse = alloca %struct.ssa_use_operand_d*, align 8
  %immusestmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !3426, metadata !DIExpression()), !dbg !3427
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %immuse, metadata !3428, metadata !DIExpression()), !dbg !3429
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %immusestmt, metadata !3430, metadata !DIExpression()), !dbg !3431
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !3432
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3432
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3432
  %bf.load = load i64, i64* %1, align 8, !dbg !3432
  %bf.clear = and i64 %bf.load, 65535, !dbg !3432
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3432
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3434
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3435

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !3436
  %call = call zeroext i8 @single_imm_use(%union.tree_node* %2, %struct.ssa_use_operand_d** %immuse, %union.gimple_statement_d** %immusestmt), !dbg !3437
  %conv = zext i8 %call to i32, !dbg !3437
  %tobool = icmp ne i32 %conv, 0, !dbg !3437
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !3438

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3439
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %3), !dbg !3440
  %conv3 = zext i8 %call2 to i32, !dbg !3440
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !3440
  br i1 %tobool4, label %if.then, label %if.end, !dbg !3441

if.then:                                          ; preds = %land.lhs.true1
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3442
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %retval, align 8, !dbg !3443
  br label %return, !dbg !3443

if.end:                                           ; preds = %land.lhs.true1, %land.lhs.true, %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !3444
  br label %return, !dbg !3444

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !3445
  ret %union.gimple_statement_d* %5, !dbg !3445
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3446 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3449, metadata !DIExpression()), !dbg !3450
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3451
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3452
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3453
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3453
  ret %struct.basic_block_def* %1, !dbg !3454
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_single_use(%union.tree_node* %var) #0 !dbg !3455 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3461, metadata !DIExpression()), !dbg !3462
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !3463, metadata !DIExpression()), !dbg !3467
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3468
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3468
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3468
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3467
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3469
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3471
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3472
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3472
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3473
  br i1 %cmp, label %if.then, label %if.end, !dbg !3474

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3475
  br label %return, !dbg !3475

if.end:                                           ; preds = %entry
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3476
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3478
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !3479
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !3479
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !3480
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3480
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %4, %7, !dbg !3481
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !3482

if.then4:                                         ; preds = %if.end
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3483
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !3483
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !3483
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 2, !dbg !3483
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3483
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3483
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %10), !dbg !3484
  %tobool = icmp ne i8 %call, 0, !dbg !3485
  %lnot = xor i1 %tobool, true, !dbg !3485
  %lnot.ext = zext i1 %lnot to i32, !dbg !3485
  %conv = trunc i32 %lnot.ext to i8, !dbg !3485
  store i8 %conv, i8* %retval, align 1, !dbg !3486
  br label %return, !dbg !3486

if.end6:                                          ; preds = %if.end
  %11 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3487
  %tobool7 = icmp ne i32 %11, 0, !dbg !3487
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !3489

if.then8:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !3490
  br label %return, !dbg !3490

if.end9:                                          ; preds = %if.end6
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3491
  %call10 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null), !dbg !3492
  store i8 %call10, i8* %retval, align 1, !dbg !3493
  br label %return, !dbg !3493

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !3494
  ret i8 %13, !dbg !3494
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !3495 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3496, metadata !DIExpression()), !dbg !3497
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3498
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3499
  %cmp = icmp eq i32 %call, 2, !dbg !3500
  %conv = zext i1 %cmp to i32, !dbg !3500
  %conv1 = trunc i32 %conv to i8, !dbg !3499
  ret i8 %conv1, !dbg !3501
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_imm_use(%union.tree_node* %var, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #0 !dbg !3502 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3507, metadata !DIExpression()), !dbg !3508
  store %struct.ssa_use_operand_d** %use_p, %struct.ssa_use_operand_d*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d*** %use_p.addr, metadata !3509, metadata !DIExpression()), !dbg !3510
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !3511, metadata !DIExpression()), !dbg !3512
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !3513, metadata !DIExpression()), !dbg !3514
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3515
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3515
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3515
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3514
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3516
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3518
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3519
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3519
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3520
  br i1 %cmp, label %if.then, label %if.end, !dbg !3521

if.then:                                          ; preds = %entry
  br label %return_false, !dbg !3522

return_false:                                     ; preds = %if.then14, %if.else, %if.then
  call void @llvm.dbg.label(metadata !3523), !dbg !3525
  %4 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !3526
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %4, align 8, !dbg !3527
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !3528
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %5, align 8, !dbg !3529
  store i8 0, i8* %retval, align 1, !dbg !3530
  br label %return, !dbg !3530

if.end:                                           ; preds = %entry
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3531
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3533
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 1, !dbg !3534
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !3534
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !3535
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3535
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %6, %9, !dbg !3536
  br i1 %cmp3, label %if.then4, label %if.end12, !dbg !3537

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3538
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 1, !dbg !3538
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !3538
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !3538
  %stmt6 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3538
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !3538
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !3541
  %tobool = icmp ne i8 %call, 0, !dbg !3541
  br i1 %tobool, label %if.else, label %if.then7, !dbg !3542

if.then7:                                         ; preds = %if.then4
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3543
  %next8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %13, i32 0, i32 1, !dbg !3545
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next8, align 8, !dbg !3545
  %15 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !3546
  store %struct.ssa_use_operand_d* %14, %struct.ssa_use_operand_d** %15, align 8, !dbg !3547
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3548
  %next9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 1, !dbg !3549
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next9, align 8, !dbg !3549
  %loc10 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %17, i32 0, i32 2, !dbg !3550
  %stmt11 = bitcast %union.anon* %loc10 to %union.gimple_statement_d**, !dbg !3551
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt11, align 8, !dbg !3551
  %19 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !3552
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %19, align 8, !dbg !3553
  store i8 1, i8* %retval, align 1, !dbg !3554
  br label %return, !dbg !3554

if.else:                                          ; preds = %if.then4
  br label %return_false, !dbg !3555

if.end12:                                         ; preds = %if.end
  %20 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3556
  %tobool13 = icmp ne i32 %20, 0, !dbg !3556
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !3558

if.then14:                                        ; preds = %if.end12
  br label %return_false, !dbg !3559

if.end15:                                         ; preds = %if.end12
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3560
  %22 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !3561
  %23 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !3562
  %call16 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %21, %struct.ssa_use_operand_d** %22, %union.gimple_statement_d** %23), !dbg !3563
  store i8 %call16, i8* %retval, align 1, !dbg !3564
  br label %return, !dbg !3564

return:                                           ; preds = %if.end15, %if.then7, %return_false
  %24 = load i8, i8* %retval, align 1, !dbg !3565
  ret i8 %24, !dbg !3565
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @negate_value(%union.tree_node* %tonegate, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !3566 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tonegate.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %negatedefstmt = alloca %union.gimple_statement_d*, align 8
  %resultofnegate = alloca %union.tree_node*, align 8
  %gsi24 = alloca %struct.gimple_stmt_iterator, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp28 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %tonegate, %union.tree_node** %tonegate.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tonegate.addr, metadata !3569, metadata !DIExpression()), !dbg !3570
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !3571, metadata !DIExpression()), !dbg !3572
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %negatedefstmt, metadata !3573, metadata !DIExpression()), !dbg !3574
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3574
  call void @llvm.dbg.declare(metadata %union.tree_node** %resultofnegate, metadata !3575, metadata !DIExpression()), !dbg !3576
  %0 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3577
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3577
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3577
  %bf.load = load i64, i64* %1, align 8, !dbg !3577
  %bf.clear = and i64 %bf.load, 65535, !dbg !3577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3577
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3579
  br i1 %cmp, label %if.then, label %if.end, !dbg !3580

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3581
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !3581
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3581
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3581
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3582
  br label %if.end, !dbg !3583

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3584
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3584
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3584
  %bf.load2 = load i64, i64* %5, align 8, !dbg !3584
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3584
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3584
  %cmp5 = icmp eq i32 %bf.cast4, 141, !dbg !3586
  br i1 %cmp5, label %land.lhs.true, label %if.end31, !dbg !3587

land.lhs.true:                                    ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3588
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %6), !dbg !3589
  %conv = zext i8 %call to i32, !dbg !3589
  %tobool = icmp ne i32 %conv, 0, !dbg !3589
  br i1 %tobool, label %land.lhs.true6, label %if.end31, !dbg !3590

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3591
  %call7 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %7), !dbg !3591
  %base8 = bitcast %union.tree_node* %call7 to %struct.tree_base*, !dbg !3591
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3591
  %bf.load9 = load i64, i64* %8, align 8, !dbg !3591
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3591
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3591
  %cmp12 = icmp eq i32 %bf.cast11, 141, !dbg !3592
  br i1 %cmp12, label %land.lhs.true14, label %if.end31, !dbg !3593

land.lhs.true14:                                  ; preds = %land.lhs.true6
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3594
  %call15 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %9), !dbg !3595
  %call16 = call zeroext i8 @has_single_use(%union.tree_node* %call15), !dbg !3596
  %conv17 = zext i8 %call16 to i32, !dbg !3596
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !3596
  br i1 %tobool18, label %land.lhs.true19, label %if.end31, !dbg !3597

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3598
  %call20 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10), !dbg !3599
  %cmp21 = icmp eq i32 %call20, 63, !dbg !3600
  br i1 %cmp21, label %if.then23, label %if.end31, !dbg !3601

if.then23:                                        ; preds = %land.lhs.true19
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi24, metadata !3602, metadata !DIExpression()), !dbg !3604
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !3605, metadata !DIExpression()), !dbg !3606
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3607
  %call25 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11), !dbg !3608
  store %union.tree_node* %call25, %union.tree_node** %rhs1, align 8, !dbg !3606
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !3609, metadata !DIExpression()), !dbg !3610
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3611
  %call26 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %12), !dbg !3612
  store %union.tree_node* %call26, %union.tree_node** %rhs2, align 8, !dbg !3610
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3613
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %13), !dbg !3614
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi24 to i8*, !dbg !3614
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !3614
  %16 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !3615
  %call27 = call %union.tree_node* @negate_value(%union.tree_node* %16, %struct.gimple_stmt_iterator* %gsi24), !dbg !3616
  store %union.tree_node* %call27, %union.tree_node** %rhs1, align 8, !dbg !3617
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3618
  %18 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !3619
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %17, %union.tree_node* %18), !dbg !3620
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3621
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp28, %union.gimple_statement_d* %19), !dbg !3622
  %20 = bitcast %struct.gimple_stmt_iterator* %gsi24 to i8*, !dbg !3622
  %21 = bitcast %struct.gimple_stmt_iterator* %tmp28 to i8*, !dbg !3622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false), !dbg !3622
  %22 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !3623
  %call29 = call %union.tree_node* @negate_value(%union.tree_node* %22, %struct.gimple_stmt_iterator* %gsi24), !dbg !3624
  store %union.tree_node* %call29, %union.tree_node** %rhs2, align 8, !dbg !3625
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3626
  %24 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !3627
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %23, %union.tree_node* %24), !dbg !3628
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3629
  call void @update_stmt(%union.gimple_statement_d* %25), !dbg !3630
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %negatedefstmt, align 8, !dbg !3631
  %call30 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %26), !dbg !3632
  store %union.tree_node* %call30, %union.tree_node** %retval, align 8, !dbg !3633
  br label %return, !dbg !3633

if.end31:                                         ; preds = %land.lhs.true19, %land.lhs.true14, %land.lhs.true6, %land.lhs.true, %if.end
  %27 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3634
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !3634
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3634
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3634
  %29 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3634
  %call32 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %28, %union.tree_node* %29), !dbg !3634
  store %union.tree_node* %call32, %union.tree_node** %tonegate.addr, align 8, !dbg !3635
  %30 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3636
  %31 = load %union.tree_node*, %union.tree_node** %tonegate.addr, align 8, !dbg !3637
  %call33 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %30, %union.tree_node* %31, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !3638
  store %union.tree_node* %call33, %union.tree_node** %resultofnegate, align 8, !dbg !3639
  %32 = load %union.tree_node*, %union.tree_node** %resultofnegate, align 8, !dbg !3640
  %call34 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @broken_up_subtracts, %union.tree_node* %32), !dbg !3640
  %33 = load %union.tree_node*, %union.tree_node** %resultofnegate, align 8, !dbg !3641
  store %union.tree_node* %33, %union.tree_node** %retval, align 8, !dbg !3642
  br label %return, !dbg !3642

return:                                           ; preds = %if.end31, %if.then23
  %34 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3643
  ret %union.tree_node* %34, !dbg !3643
}

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !3644 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3647, metadata !DIExpression()), !dbg !3648
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3649
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3651
  %tobool = icmp ne i8 %call, 0, !dbg !3651
  br i1 %tobool, label %if.then, label %if.end, !dbg !3652

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3653
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !3655
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3656
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !3657
  br label %if.end, !dbg !3658

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3659
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !3660 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3663, metadata !DIExpression()), !dbg !3664
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !3665, metadata !DIExpression()), !dbg !3666
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3667
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !3668
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !3669
  ret void, !dbg !3670
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !3671 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3672, metadata !DIExpression()), !dbg !3673
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !3674, metadata !DIExpression()), !dbg !3675
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3676
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !3677
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !3678
  ret void, !dbg !3679
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !3680 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3684, metadata !DIExpression()), !dbg !3685
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !3686, metadata !DIExpression()), !dbg !3685
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3685
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !3685
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3685
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !3685
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !3685
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3685

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3685
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !3685
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !3685
  br label %cond.end, !dbg !3685

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3685
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !3685
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !3685
  ret %union.tree_node** %call1, !dbg !3685
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !3687 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3690, metadata !DIExpression()), !dbg !3691
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3692, metadata !DIExpression()), !dbg !3693
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !3694, metadata !DIExpression()), !dbg !3695
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3696
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3696
  %conv = zext i8 %call to i32, !dbg !3696
  %tobool = icmp ne i32 %conv, 0, !dbg !3696
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !3696

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !3696
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3696
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !3696
  %cmp = icmp ult i32 %1, %call1, !dbg !3696
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3696

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3696
  br label %cond.end, !dbg !3696

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3696

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3696
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !3697
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3698
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !3699
  %5 = load i32, i32* %i.addr, align 4, !dbg !3700
  %idxprom = zext i32 %5 to i64, !dbg !3699
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !3699
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !3701
  ret void, !dbg !3702
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !3703 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3706, metadata !DIExpression()), !dbg !3707
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3708, metadata !DIExpression()), !dbg !3707
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3709, metadata !DIExpression()), !dbg !3707
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3707
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !3707
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3707
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3707

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3707
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !3707
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !3707
  br label %cond.end, !dbg !3707

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3707

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3707
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3707
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !3707
  %tobool1 = icmp ne i32 %call, 0, !dbg !3707
  %lnot = xor i1 %tobool1, true, !dbg !3707
  %lnot.ext = zext i1 %lnot to i32, !dbg !3707
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3707
  %5 = load i32, i32* %extend, align 4, !dbg !3710
  %tobool2 = icmp ne i32 %5, 0, !dbg !3710
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3707

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3710
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !3710
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !3710
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3710
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !3710
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !3710
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3710
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !3710
  br label %if.end, !dbg !3710

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3707
  ret i32 %12, !dbg !3707
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !3712 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3716, metadata !DIExpression()), !dbg !3717
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !3718, metadata !DIExpression()), !dbg !3717
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !3719, metadata !DIExpression()), !dbg !3717
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3717
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !3717
  %1 = load i32, i32* %num, align 8, !dbg !3717
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3717
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !3717
  %3 = load i32, i32* %alloc, align 4, !dbg !3717
  %cmp = icmp ult i32 %1, %3, !dbg !3717
  %conv = zext i1 %cmp to i32, !dbg !3717
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3717
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !3717
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3717
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !3717
  %6 = load i32, i32* %num1, align 8, !dbg !3717
  %inc = add i32 %6, 1, !dbg !3717
  store i32 %inc, i32* %num1, align 8, !dbg !3717
  %idxprom = zext i32 %6 to i64, !dbg !3717
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3717
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !3717
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !3717
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !3717
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !3717
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !3717
  ret %union.tree_node** %9, !dbg !3717
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !3720 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3723, metadata !DIExpression()), !dbg !3724
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3725, metadata !DIExpression()), !dbg !3724
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3724
  %cmp = icmp sge i32 %0, 0, !dbg !3724
  %conv = zext i1 %cmp to i32, !dbg !3724
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3724
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !3724
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3724

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3724
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !3724
  %3 = load i32, i32* %alloc, align 4, !dbg !3724
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3724
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !3724
  %5 = load i32, i32* %num, align 8, !dbg !3724
  %sub = sub i32 %3, %5, !dbg !3724
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !3724
  %cmp1 = icmp uge i32 %sub, %6, !dbg !3724
  %conv2 = zext i1 %cmp1 to i32, !dbg !3724
  br label %cond.end, !dbg !3724

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !3724
  %tobool3 = icmp ne i32 %7, 0, !dbg !3724
  %lnot = xor i1 %tobool3, true, !dbg !3724
  %lnot.ext = zext i1 %lnot to i32, !dbg !3724
  br label %cond.end, !dbg !3724

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3724
  ret i32 %cond, !dbg !3724
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3726 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3727, metadata !DIExpression()), !dbg !3728
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3729, metadata !DIExpression()), !dbg !3730
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3731, metadata !DIExpression()), !dbg !3732
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3733
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3734
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3735
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3736
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !3737
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3738
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3739
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3740
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3741
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3742
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3743
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3744
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3745
  ret void, !dbg !3746
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %stmt) #0 !dbg !3747 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3748, metadata !DIExpression()), !dbg !3749
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3750
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3751
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3752
  %bf.load = load i32, i32* %1, align 8, !dbg !3752
  %bf.lshr = lshr i32 %bf.load, 9, !dbg !3752
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3752
  %conv = trunc i32 %bf.clear to i8, !dbg !3750
  ret i8 %conv, !dbg !3753
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !3754 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !3757, metadata !DIExpression()), !dbg !3758
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3759
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3759
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3759
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3758
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3760
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3762
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3763
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3763
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3764
  br i1 %cmp, label %if.then, label %if.end, !dbg !3765

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !3766
  br label %return, !dbg !3766

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3767
  %tobool = icmp ne i32 %4, 0, !dbg !3767
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !3769

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3770
  br label %return, !dbg !3770

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !3771
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !3772
  store i8 %call, i8* %retval, align 1, !dbg !3773
  br label %return, !dbg !3773

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !3774
  ret i8 %6, !dbg !3774
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @associative_tree_code(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %ops, %union.gimple_statement_d* %stmt, i8 zeroext %is_associative, i8 zeroext %set_visited) #0 !dbg !3775 {
entry:
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %is_associative.addr = alloca i8, align 1
  %set_visited.addr = alloca i8, align 1
  %binlhs = alloca %union.tree_node*, align 8
  %binrhs = alloca %union.tree_node*, align 8
  %binlhsdef = alloca %union.gimple_statement_d*, align 8
  %binrhsdef = alloca %union.gimple_statement_d*, align 8
  %binlhsisreassoc = alloca i8, align 1
  %binrhsisreassoc = alloca i8, align 1
  %rhscode = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %temp = alloca %union.tree_node*, align 8
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !3778, metadata !DIExpression()), !dbg !3779
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3780, metadata !DIExpression()), !dbg !3781
  store i8 %is_associative, i8* %is_associative.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_associative.addr, metadata !3782, metadata !DIExpression()), !dbg !3783
  store i8 %set_visited, i8* %set_visited.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %set_visited.addr, metadata !3784, metadata !DIExpression()), !dbg !3785
  call void @llvm.dbg.declare(metadata %union.tree_node** %binlhs, metadata !3786, metadata !DIExpression()), !dbg !3787
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3788
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !3789
  store %union.tree_node* %call, %union.tree_node** %binlhs, align 8, !dbg !3787
  call void @llvm.dbg.declare(metadata %union.tree_node** %binrhs, metadata !3790, metadata !DIExpression()), !dbg !3791
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3792
  %call1 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %1), !dbg !3793
  store %union.tree_node* %call1, %union.tree_node** %binrhs, align 8, !dbg !3791
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %binlhsdef, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %binrhsdef, metadata !3796, metadata !DIExpression()), !dbg !3797
  call void @llvm.dbg.declare(metadata i8* %binlhsisreassoc, metadata !3798, metadata !DIExpression()), !dbg !3799
  store i8 0, i8* %binlhsisreassoc, align 1, !dbg !3799
  call void @llvm.dbg.declare(metadata i8* %binrhsisreassoc, metadata !3800, metadata !DIExpression()), !dbg !3801
  store i8 0, i8* %binrhsisreassoc, align 1, !dbg !3801
  call void @llvm.dbg.declare(metadata i32* %rhscode, metadata !3802, metadata !DIExpression()), !dbg !3803
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3804
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !3805
  store i32 %call2, i32* %rhscode, align 4, !dbg !3803
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3806, metadata !DIExpression()), !dbg !3807
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3808
  %call3 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %3), !dbg !3809
  store %struct.loop* %call3, %struct.loop** %loop, align 8, !dbg !3807
  %4 = load i8, i8* %set_visited.addr, align 1, !dbg !3810
  %tobool = icmp ne i8 %4, 0, !dbg !3810
  br i1 %tobool, label %if.then, label %if.end, !dbg !3812

if.then:                                          ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3813
  call void @gimple_set_visited(%union.gimple_statement_d* %5, i8 zeroext 1), !dbg !3814
  br label %if.end, !dbg !3814

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3815
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3815
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3815
  %bf.load = load i64, i64* %7, align 8, !dbg !3815
  %bf.clear = and i64 %bf.load, 65535, !dbg !3815
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3815
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3817
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !3818

if.then4:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3819
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !3819
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3819
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3819
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %binlhsdef, align 8, !dbg !3821
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binlhsdef, align 8, !dbg !3822
  %11 = load i32, i32* %rhscode, align 4, !dbg !3823
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3824
  %call5 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %10, i32 %11, %struct.loop* %12), !dbg !3825
  store i8 %call5, i8* %binlhsisreassoc, align 1, !dbg !3826
  br label %if.end6, !dbg !3827

if.end6:                                          ; preds = %if.then4, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3828
  %base7 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3828
  %14 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3828
  %bf.load8 = load i64, i64* %14, align 8, !dbg !3828
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3828
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3828
  %cmp11 = icmp eq i32 %bf.cast10, 141, !dbg !3830
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !3831

if.then12:                                        ; preds = %if.end6
  %15 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3832
  %ssa_name13 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !3832
  %def_stmt14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name13, i32 0, i32 2, !dbg !3832
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt14, align 8, !dbg !3832
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %binrhsdef, align 8, !dbg !3834
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhsdef, align 8, !dbg !3835
  %18 = load i32, i32* %rhscode, align 4, !dbg !3836
  %19 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3837
  %call15 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %17, i32 %18, %struct.loop* %19), !dbg !3838
  store i8 %call15, i8* %binrhsisreassoc, align 1, !dbg !3839
  br label %if.end16, !dbg !3840

if.end16:                                         ; preds = %if.then12, %if.end6
  %20 = load i8, i8* %binlhsisreassoc, align 1, !dbg !3841
  %tobool17 = icmp ne i8 %20, 0, !dbg !3841
  br i1 %tobool17, label %if.else, label %if.then18, !dbg !3843

if.then18:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !3844, metadata !DIExpression()), !dbg !3846
  %21 = load i8, i8* %is_associative.addr, align 1, !dbg !3847
  %tobool19 = icmp ne i8 %21, 0, !dbg !3847
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !3849

if.then20:                                        ; preds = %if.then18
  %22 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !3850
  %23 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3852
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %22, %union.tree_node* %23), !dbg !3853
  br label %return, !dbg !3854

if.end21:                                         ; preds = %if.then18
  %24 = load i8, i8* %binrhsisreassoc, align 1, !dbg !3855
  %tobool22 = icmp ne i8 %24, 0, !dbg !3855
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !3857

if.then23:                                        ; preds = %if.end21
  %25 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !3858
  %26 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3860
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %25, %union.tree_node* %26), !dbg !3861
  %27 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !3862
  %28 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3863
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %27, %union.tree_node* %28), !dbg !3864
  br label %return, !dbg !3865

if.end24:                                         ; preds = %if.end21
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3866
  %tobool25 = icmp ne %struct._IO_FILE* %29, null, !dbg !3866
  br i1 %tobool25, label %land.lhs.true, label %if.end29, !dbg !3868

land.lhs.true:                                    ; preds = %if.end24
  %30 = load i32, i32* @dump_flags, align 4, !dbg !3869
  %and = and i32 %30, 8, !dbg !3870
  %tobool26 = icmp ne i32 %and, 0, !dbg !3870
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !3871

if.then27:                                        ; preds = %land.lhs.true
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3872
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0)), !dbg !3874
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3875
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3876
  call void @print_gimple_stmt(%struct._IO_FILE* %32, %union.gimple_statement_d* %33, i32 0, i32 0), !dbg !3877
  br label %if.end29, !dbg !3878

if.end29:                                         ; preds = %if.then27, %land.lhs.true, %if.end24
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3879
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3880
  %call30 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %35), !dbg !3881
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3882
  %call31 = call %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %36), !dbg !3883
  call void @swap_tree_operands(%union.gimple_statement_d* %34, %union.tree_node** %call30, %union.tree_node** %call31), !dbg !3884
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3885
  call void @update_stmt(%union.gimple_statement_d* %37), !dbg !3886
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3887
  %tobool32 = icmp ne %struct._IO_FILE* %38, null, !dbg !3887
  br i1 %tobool32, label %land.lhs.true33, label %if.end38, !dbg !3889

land.lhs.true33:                                  ; preds = %if.end29
  %39 = load i32, i32* @dump_flags, align 4, !dbg !3890
  %and34 = and i32 %39, 8, !dbg !3891
  %tobool35 = icmp ne i32 %and34, 0, !dbg !3891
  br i1 %tobool35, label %if.then36, label %if.end38, !dbg !3892

if.then36:                                        ; preds = %land.lhs.true33
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3893
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)), !dbg !3895
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3896
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3897
  call void @print_gimple_stmt(%struct._IO_FILE* %41, %union.gimple_statement_d* %42, i32 0, i32 0), !dbg !3898
  br label %if.end38, !dbg !3899

if.end38:                                         ; preds = %if.then36, %land.lhs.true33, %if.end29
  %43 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3900
  store %union.tree_node* %43, %union.tree_node** %temp, align 8, !dbg !3901
  %44 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3902
  store %union.tree_node* %44, %union.tree_node** %binlhs, align 8, !dbg !3903
  %45 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !3904
  store %union.tree_node* %45, %union.tree_node** %binrhs, align 8, !dbg !3905
  br label %if.end44, !dbg !3906

if.else:                                          ; preds = %if.end16
  %46 = load i8, i8* %binrhsisreassoc, align 1, !dbg !3907
  %tobool39 = icmp ne i8 %46, 0, !dbg !3907
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !3909

if.then40:                                        ; preds = %if.else
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3910
  call void @linearize_expr(%union.gimple_statement_d* %47), !dbg !3912
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3913
  %call41 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %48), !dbg !3914
  store %union.tree_node* %call41, %union.tree_node** %binlhs, align 8, !dbg !3915
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3916
  %call42 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %49), !dbg !3917
  store %union.tree_node* %call42, %union.tree_node** %binrhs, align 8, !dbg !3918
  br label %if.end43, !dbg !3919

if.end43:                                         ; preds = %if.then40, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end38
  %50 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3920
  %base45 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !3920
  %51 = bitcast %struct.tree_base* %base45 to i64*, !dbg !3920
  %bf.load46 = load i64, i64* %51, align 8, !dbg !3920
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !3920
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !3920
  %cmp49 = icmp ne i32 %bf.cast48, 141, !dbg !3920
  br i1 %cmp49, label %cond.false, label %lor.lhs.false, !dbg !3920

lor.lhs.false:                                    ; preds = %if.end44
  %52 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3920
  %ssa_name50 = bitcast %union.tree_node* %52 to %struct.tree_ssa_name*, !dbg !3920
  %def_stmt51 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name50, i32 0, i32 2, !dbg !3920
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt51, align 8, !dbg !3920
  %54 = load i32, i32* %rhscode, align 4, !dbg !3920
  %55 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3920
  %call52 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %53, i32 %54, %struct.loop* %55), !dbg !3920
  %tobool53 = icmp ne i8 %call52, 0, !dbg !3920
  br i1 %tobool53, label %cond.true, label %cond.false, !dbg !3920

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1693, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3920
  br label %cond.end, !dbg !3920

cond.false:                                       ; preds = %lor.lhs.false, %if.end44
  br label %cond.end, !dbg !3920

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3920
  %56 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !3921
  %57 = load %union.tree_node*, %union.tree_node** %binlhs, align 8, !dbg !3922
  %ssa_name54 = bitcast %union.tree_node* %57 to %struct.tree_ssa_name*, !dbg !3922
  %def_stmt55 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name54, i32 0, i32 2, !dbg !3922
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt55, align 8, !dbg !3922
  %59 = load i8, i8* %is_associative.addr, align 1, !dbg !3923
  %60 = load i8, i8* %set_visited.addr, align 1, !dbg !3924
  call void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %56, %union.gimple_statement_d* %58, i8 zeroext %59, i8 zeroext %60), !dbg !3925
  %61 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !3926
  %62 = load %union.tree_node*, %union.tree_node** %binrhs, align 8, !dbg !3927
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %61, %union.tree_node* %62), !dbg !3928
  br label %return, !dbg !3929

return:                                           ; preds = %cond.end, %if.then23, %if.then20
  ret void, !dbg !3929
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %vec_) #0 !dbg !3930 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !3935
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %0, null, !dbg !3935
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3935

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !3935
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %1, i32 0, i32 2, !dbg !3935
  %arraydecay = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 0, !dbg !3935
  br label %cond.end, !dbg !3935

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.operand_entry** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !3935
  ret %struct.operand_entry** %cond, !dbg !3935
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %vec_) #0 !dbg !3936 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !3940
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %0, null, !dbg !3940
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3940

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !3940
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %1, i32 0, i32 0, !dbg !3940
  %2 = load i32, i32* %num, align 8, !dbg !3940
  br label %cond.end, !dbg !3940

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3940
  ret i32 %cond, !dbg !3940
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sort_by_operand_rank(i8* %pa, i8* %pb) #0 !dbg !3941 {
entry:
  %retval = alloca i32, align 4
  %pa.addr = alloca i8*, align 8
  %pb.addr = alloca i8*, align 8
  %oea = alloca %struct.operand_entry*, align 8
  %oeb = alloca %struct.operand_entry*, align 8
  store i8* %pa, i8** %pa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pa.addr, metadata !3942, metadata !DIExpression()), !dbg !3943
  store i8* %pb, i8** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pb.addr, metadata !3944, metadata !DIExpression()), !dbg !3945
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oea, metadata !3946, metadata !DIExpression()), !dbg !3947
  %0 = load i8*, i8** %pa.addr, align 8, !dbg !3948
  %1 = bitcast i8* %0 to %struct.operand_entry**, !dbg !3949
  %2 = load %struct.operand_entry*, %struct.operand_entry** %1, align 8, !dbg !3950
  store %struct.operand_entry* %2, %struct.operand_entry** %oea, align 8, !dbg !3947
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oeb, metadata !3951, metadata !DIExpression()), !dbg !3952
  %3 = load i8*, i8** %pb.addr, align 8, !dbg !3953
  %4 = bitcast i8* %3 to %struct.operand_entry**, !dbg !3954
  %5 = load %struct.operand_entry*, %struct.operand_entry** %4, align 8, !dbg !3955
  store %struct.operand_entry* %5, %struct.operand_entry** %oeb, align 8, !dbg !3952
  %6 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3956
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %6, i32 0, i32 0, !dbg !3958
  %7 = load i32, i32* %rank, align 8, !dbg !3958
  %cmp = icmp eq i32 %7, 0, !dbg !3959
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3960

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3961
  %rank1 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %8, i32 0, i32 0, !dbg !3962
  %9 = load i32, i32* %rank1, align 8, !dbg !3962
  %cmp2 = icmp eq i32 %9, 0, !dbg !3963
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3964

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3965
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %10, i32 0, i32 1, !dbg !3966
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3966
  %call = call i32 @constant_type(%union.tree_node* %11), !dbg !3967
  %12 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3968
  %op3 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %12, i32 0, i32 1, !dbg !3969
  %13 = load %union.tree_node*, %union.tree_node** %op3, align 8, !dbg !3969
  %call4 = call i32 @constant_type(%union.tree_node* %13), !dbg !3970
  %sub = sub nsw i32 %call, %call4, !dbg !3971
  store i32 %sub, i32* %retval, align 4, !dbg !3972
  br label %return, !dbg !3972

if.end:                                           ; preds = %land.lhs.true, %entry
  %14 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3973
  %rank5 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %14, i32 0, i32 0, !dbg !3975
  %15 = load i32, i32* %rank5, align 8, !dbg !3975
  %16 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3976
  %rank6 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %16, i32 0, i32 0, !dbg !3977
  %17 = load i32, i32* %rank6, align 8, !dbg !3977
  %sub7 = sub i32 %15, %17, !dbg !3978
  %cmp8 = icmp eq i32 %sub7, 0, !dbg !3979
  br i1 %cmp8, label %land.lhs.true9, label %if.end25, !dbg !3980

land.lhs.true9:                                   ; preds = %if.end
  %18 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3981
  %op10 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i32 0, i32 1, !dbg !3981
  %19 = load %union.tree_node*, %union.tree_node** %op10, align 8, !dbg !3981
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3981
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !3981
  %bf.load = load i64, i64* %20, align 8, !dbg !3981
  %bf.clear = and i64 %bf.load, 65535, !dbg !3981
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3981
  %cmp11 = icmp eq i32 %bf.cast, 141, !dbg !3982
  br i1 %cmp11, label %land.lhs.true12, label %if.end25, !dbg !3983

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %21 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3984
  %op13 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %21, i32 0, i32 1, !dbg !3984
  %22 = load %union.tree_node*, %union.tree_node** %op13, align 8, !dbg !3984
  %base14 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !3984
  %23 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3984
  %bf.load15 = load i64, i64* %23, align 8, !dbg !3984
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3984
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3984
  %cmp18 = icmp eq i32 %bf.cast17, 141, !dbg !3985
  br i1 %cmp18, label %if.then19, label %if.end25, !dbg !3986

if.then19:                                        ; preds = %land.lhs.true12
  %24 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3987
  %op20 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %24, i32 0, i32 1, !dbg !3987
  %25 = load %union.tree_node*, %union.tree_node** %op20, align 8, !dbg !3987
  %ssa_name = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !3987
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3987
  %26 = load i32, i32* %version, align 8, !dbg !3987
  %27 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3988
  %op21 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %27, i32 0, i32 1, !dbg !3988
  %28 = load %union.tree_node*, %union.tree_node** %op21, align 8, !dbg !3988
  %ssa_name22 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !3988
  %version23 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name22, i32 0, i32 3, !dbg !3988
  %29 = load i32, i32* %version23, align 8, !dbg !3988
  %sub24 = sub i32 %26, %29, !dbg !3989
  store i32 %sub24, i32* %retval, align 4, !dbg !3990
  br label %return, !dbg !3990

if.end25:                                         ; preds = %land.lhs.true12, %land.lhs.true9, %if.end
  %30 = load %struct.operand_entry*, %struct.operand_entry** %oeb, align 8, !dbg !3991
  %rank26 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %30, i32 0, i32 0, !dbg !3992
  %31 = load i32, i32* %rank26, align 8, !dbg !3992
  %32 = load %struct.operand_entry*, %struct.operand_entry** %oea, align 8, !dbg !3993
  %rank27 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %32, i32 0, i32 0, !dbg !3994
  %33 = load i32, i32* %rank27, align 8, !dbg !3994
  %sub28 = sub i32 %31, %33, !dbg !3995
  store i32 %sub28, i32* %retval, align 4, !dbg !3996
  br label %return, !dbg !3996

return:                                           ; preds = %if.end25, %if.then19, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !3997
  ret i32 %34, !dbg !3997
}

; Function Attrs: noinline nounwind uwtable
define internal void @optimize_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) #0 !dbg !3998 {
entry:
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %length = alloca i32, align 4
  %i = alloca i32, align 4
  %oe = alloca %struct.operand_entry*, align 8
  %oelast = alloca %struct.operand_entry*, align 8
  %iterate = alloca i8, align 1
  %oelm1 = alloca %struct.operand_entry*, align 8
  %folded = alloca %union.tree_node*, align 8
  %done = alloca i8, align 1
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !4001, metadata !DIExpression()), !dbg !4002
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !4003, metadata !DIExpression()), !dbg !4004
  call void @llvm.dbg.declare(metadata i32* %length, metadata !4005, metadata !DIExpression()), !dbg !4006
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4007
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %0, align 8, !dbg !4007
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %1, null, !dbg !4007
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4007

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4007
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %2, align 8, !dbg !4007
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %3, i32 0, i32 0, !dbg !4007
  br label %cond.end, !dbg !4007

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4007

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4007
  %call = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond), !dbg !4007
  store i32 %call, i32* %length, align 4, !dbg !4006
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !4010, metadata !DIExpression()), !dbg !4011
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oelast, metadata !4012, metadata !DIExpression()), !dbg !4013
  store %struct.operand_entry* null, %struct.operand_entry** %oelast, align 8, !dbg !4013
  call void @llvm.dbg.declare(metadata i8* %iterate, metadata !4014, metadata !DIExpression()), !dbg !4015
  store i8 0, i8* %iterate, align 1, !dbg !4015
  %4 = load i32, i32* %length, align 4, !dbg !4016
  %cmp = icmp eq i32 %4, 1, !dbg !4018
  br i1 %cmp, label %if.then, label %if.end, !dbg !4019

if.then:                                          ; preds = %cond.end
  br label %if.end113, !dbg !4020

if.end:                                           ; preds = %cond.end
  %5 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4021
  %6 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %5, align 8, !dbg !4021
  %tobool1 = icmp ne %struct.VEC_operand_entry_t_heap* %6, null, !dbg !4021
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4021

cond.true2:                                       ; preds = %if.end
  %7 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4021
  %8 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %7, align 8, !dbg !4021
  %base3 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %8, i32 0, i32 0, !dbg !4021
  br label %cond.end5, !dbg !4021

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !4021

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_operand_entry_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4021
  %call7 = call %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond6), !dbg !4021
  store %struct.operand_entry* %call7, %struct.operand_entry** %oelast, align 8, !dbg !4022
  %9 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !4023
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %9, i32 0, i32 0, !dbg !4025
  %10 = load i32, i32* %rank, align 8, !dbg !4025
  %cmp8 = icmp eq i32 %10, 0, !dbg !4026
  br i1 %cmp8, label %land.lhs.true, label %if.end70, !dbg !4027

land.lhs.true:                                    ; preds = %cond.end5
  %11 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !4028
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %11, i32 0, i32 1, !dbg !4029
  %12 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4029
  %call9 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %12), !dbg !4030
  %conv = zext i8 %call9 to i32, !dbg !4030
  %tobool10 = icmp ne i32 %conv, 0, !dbg !4030
  br i1 %tobool10, label %if.then11, label %if.end70, !dbg !4031

if.then11:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oelm1, metadata !4032, metadata !DIExpression()), !dbg !4034
  %13 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4035
  %14 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %13, align 8, !dbg !4035
  %tobool12 = icmp ne %struct.VEC_operand_entry_t_heap* %14, null, !dbg !4035
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !4035

cond.true13:                                      ; preds = %if.then11
  %15 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4035
  %16 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %15, align 8, !dbg !4035
  %base14 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %16, i32 0, i32 0, !dbg !4035
  br label %cond.end16, !dbg !4035

cond.false15:                                     ; preds = %if.then11
  br label %cond.end16, !dbg !4035

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_operand_entry_t_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !4035
  %17 = load i32, i32* %length, align 4, !dbg !4035
  %sub = sub i32 %17, 2, !dbg !4035
  %call18 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond17, i32 %sub), !dbg !4035
  store %struct.operand_entry* %call18, %struct.operand_entry** %oelm1, align 8, !dbg !4034
  %18 = load %struct.operand_entry*, %struct.operand_entry** %oelm1, align 8, !dbg !4036
  %rank19 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i32 0, i32 0, !dbg !4038
  %19 = load i32, i32* %rank19, align 8, !dbg !4038
  %cmp20 = icmp eq i32 %19, 0, !dbg !4039
  br i1 %cmp20, label %land.lhs.true22, label %if.end69, !dbg !4040

land.lhs.true22:                                  ; preds = %cond.end16
  %20 = load %struct.operand_entry*, %struct.operand_entry** %oelm1, align 8, !dbg !4041
  %op23 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %20, i32 0, i32 1, !dbg !4042
  %21 = load %union.tree_node*, %union.tree_node** %op23, align 8, !dbg !4042
  %call24 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %21), !dbg !4043
  %conv25 = zext i8 %call24 to i32, !dbg !4043
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !4043
  br i1 %tobool26, label %land.lhs.true27, label %if.end69, !dbg !4044

land.lhs.true27:                                  ; preds = %land.lhs.true22
  %22 = load %struct.operand_entry*, %struct.operand_entry** %oelm1, align 8, !dbg !4045
  %op28 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %22, i32 0, i32 1, !dbg !4045
  %23 = load %union.tree_node*, %union.tree_node** %op28, align 8, !dbg !4045
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !4045
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4045
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4045
  %25 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !4046
  %op29 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %25, i32 0, i32 1, !dbg !4046
  %26 = load %union.tree_node*, %union.tree_node** %op29, align 8, !dbg !4046
  %common30 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !4046
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !4046
  %27 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !4046
  %call32 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %24, %union.tree_node* %27), !dbg !4047
  %conv33 = zext i8 %call32 to i32, !dbg !4047
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !4047
  br i1 %tobool34, label %if.then35, label %if.end69, !dbg !4048

if.then35:                                        ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded, metadata !4049, metadata !DIExpression()), !dbg !4051
  %28 = load i32, i32* %opcode.addr, align 4, !dbg !4052
  %29 = load %struct.operand_entry*, %struct.operand_entry** %oelm1, align 8, !dbg !4052
  %op36 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %29, i32 0, i32 1, !dbg !4052
  %30 = load %union.tree_node*, %union.tree_node** %op36, align 8, !dbg !4052
  %common37 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !4052
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !4052
  %31 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !4052
  %32 = load %struct.operand_entry*, %struct.operand_entry** %oelm1, align 8, !dbg !4052
  %op39 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %32, i32 0, i32 1, !dbg !4052
  %33 = load %union.tree_node*, %union.tree_node** %op39, align 8, !dbg !4052
  %34 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !4052
  %op40 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %34, i32 0, i32 1, !dbg !4052
  %35 = load %union.tree_node*, %union.tree_node** %op40, align 8, !dbg !4052
  %call41 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %28, %union.tree_node* %31, %union.tree_node* %33, %union.tree_node* %35), !dbg !4052
  store %union.tree_node* %call41, %union.tree_node** %folded, align 8, !dbg !4051
  %36 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !4053
  %tobool42 = icmp ne %union.tree_node* %36, null, !dbg !4053
  br i1 %tobool42, label %land.lhs.true43, label %if.end68, !dbg !4055

land.lhs.true43:                                  ; preds = %if.then35
  %37 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !4056
  %call44 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %37), !dbg !4057
  %conv45 = zext i8 %call44 to i32, !dbg !4057
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !4057
  br i1 %tobool46, label %if.then47, label %if.end68, !dbg !4058

if.then47:                                        ; preds = %land.lhs.true43
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4059
  %tobool48 = icmp ne %struct._IO_FILE* %38, null, !dbg !4059
  br i1 %tobool48, label %land.lhs.true49, label %if.end53, !dbg !4062

land.lhs.true49:                                  ; preds = %if.then47
  %39 = load i32, i32* @dump_flags, align 4, !dbg !4063
  %and = and i32 %39, 8, !dbg !4064
  %tobool50 = icmp ne i32 %and, 0, !dbg !4064
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !4065

if.then51:                                        ; preds = %land.lhs.true49
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4066
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i64 0, i64 0)), !dbg !4067
  br label %if.end53, !dbg !4067

if.end53:                                         ; preds = %if.then51, %land.lhs.true49, %if.then47
  %41 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4068
  %42 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %41, align 8, !dbg !4068
  %tobool54 = icmp ne %struct.VEC_operand_entry_t_heap* %42, null, !dbg !4068
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !4068

cond.true55:                                      ; preds = %if.end53
  %43 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4068
  %44 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %43, align 8, !dbg !4068
  %base56 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %44, i32 0, i32 0, !dbg !4068
  br label %cond.end58, !dbg !4068

cond.false57:                                     ; preds = %if.end53
  br label %cond.end58, !dbg !4068

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_operand_entry_t_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !4068
  %call60 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond59), !dbg !4068
  %45 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4069
  %46 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %45, align 8, !dbg !4069
  %tobool61 = icmp ne %struct.VEC_operand_entry_t_heap* %46, null, !dbg !4069
  br i1 %tobool61, label %cond.true62, label %cond.false64, !dbg !4069

cond.true62:                                      ; preds = %cond.end58
  %47 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4069
  %48 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %47, align 8, !dbg !4069
  %base63 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %48, i32 0, i32 0, !dbg !4069
  br label %cond.end65, !dbg !4069

cond.false64:                                     ; preds = %cond.end58
  br label %cond.end65, !dbg !4069

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi %struct.VEC_operand_entry_t_base* [ %base63, %cond.true62 ], [ null, %cond.false64 ], !dbg !4069
  %call67 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond66), !dbg !4069
  %49 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4070
  %50 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !4071
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %49, %union.tree_node* %50), !dbg !4072
  %51 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 1), align 4, !dbg !4073
  %inc = add nsw i32 %51, 1, !dbg !4073
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 1), align 4, !dbg !4073
  %52 = load i32, i32* %opcode.addr, align 4, !dbg !4074
  %53 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4075
  call void @optimize_ops_list(i32 %52, %struct.VEC_operand_entry_t_heap** %53), !dbg !4076
  br label %if.end113, !dbg !4077

if.end68:                                         ; preds = %land.lhs.true43, %if.then35
  br label %if.end69, !dbg !4078

if.end69:                                         ; preds = %if.end68, %land.lhs.true27, %land.lhs.true22, %cond.end16
  br label %if.end70, !dbg !4079

if.end70:                                         ; preds = %if.end69, %land.lhs.true, %cond.end5
  %54 = load i32, i32* %opcode.addr, align 4, !dbg !4080
  %55 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4081
  call void @eliminate_using_constants(i32 %54, %struct.VEC_operand_entry_t_heap** %55), !dbg !4082
  store %struct.operand_entry* null, %struct.operand_entry** %oelast, align 8, !dbg !4083
  store i32 0, i32* %i, align 4, !dbg !4084
  br label %for.cond, !dbg !4086

for.cond:                                         ; preds = %if.end95, %if.end94, %if.end70
  %56 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4087
  %57 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %56, align 8, !dbg !4087
  %tobool71 = icmp ne %struct.VEC_operand_entry_t_heap* %57, null, !dbg !4087
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !4087

cond.true72:                                      ; preds = %for.cond
  %58 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4087
  %59 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %58, align 8, !dbg !4087
  %base73 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %59, i32 0, i32 0, !dbg !4087
  br label %cond.end75, !dbg !4087

cond.false74:                                     ; preds = %for.cond
  br label %cond.end75, !dbg !4087

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_operand_entry_t_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !4087
  %60 = load i32, i32* %i, align 4, !dbg !4087
  %call77 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond76, i32 %60, %struct.operand_entry** %oe), !dbg !4087
  %tobool78 = icmp ne i32 %call77, 0, !dbg !4089
  br i1 %tobool78, label %for.body, label %for.end, !dbg !4089

for.body:                                         ; preds = %cond.end75
  call void @llvm.dbg.declare(metadata i8* %done, metadata !4090, metadata !DIExpression()), !dbg !4092
  store i8 0, i8* %done, align 1, !dbg !4092
  %61 = load i32, i32* %opcode.addr, align 4, !dbg !4093
  %62 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4095
  %63 = load i32, i32* %i, align 4, !dbg !4096
  %64 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4097
  %call79 = call zeroext i8 @eliminate_not_pairs(i32 %61, %struct.VEC_operand_entry_t_heap** %62, i32 %63, %struct.operand_entry* %64), !dbg !4098
  %tobool80 = icmp ne i8 %call79, 0, !dbg !4098
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !4099

if.then81:                                        ; preds = %for.body
  br label %if.end113, !dbg !4100

if.end82:                                         ; preds = %for.body
  %65 = load i32, i32* %opcode.addr, align 4, !dbg !4101
  %66 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4103
  %67 = load i32, i32* %i, align 4, !dbg !4104
  %68 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4105
  %69 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !4106
  %call83 = call zeroext i8 @eliminate_duplicate_pair(i32 %65, %struct.VEC_operand_entry_t_heap** %66, i8* %done, i32 %67, %struct.operand_entry* %68, %struct.operand_entry* %69), !dbg !4107
  %conv84 = zext i8 %call83 to i32, !dbg !4107
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !4107
  br i1 %tobool85, label %if.then91, label %lor.lhs.false, !dbg !4108

lor.lhs.false:                                    ; preds = %if.end82
  %70 = load i8, i8* %done, align 1, !dbg !4109
  %tobool86 = icmp ne i8 %70, 0, !dbg !4109
  br i1 %tobool86, label %if.end95, label %land.lhs.true87, !dbg !4110

land.lhs.true87:                                  ; preds = %lor.lhs.false
  %71 = load i32, i32* %opcode.addr, align 4, !dbg !4111
  %72 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4112
  %73 = load i32, i32* %i, align 4, !dbg !4113
  %74 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4114
  %call88 = call zeroext i8 @eliminate_plus_minus_pair(i32 %71, %struct.VEC_operand_entry_t_heap** %72, i32 %73, %struct.operand_entry* %74), !dbg !4115
  %conv89 = zext i8 %call88 to i32, !dbg !4115
  %tobool90 = icmp ne i32 %conv89, 0, !dbg !4115
  br i1 %tobool90, label %if.then91, label %if.end95, !dbg !4116

if.then91:                                        ; preds = %land.lhs.true87, %if.end82
  %75 = load i8, i8* %done, align 1, !dbg !4117
  %tobool92 = icmp ne i8 %75, 0, !dbg !4117
  br i1 %tobool92, label %if.then93, label %if.end94, !dbg !4120

if.then93:                                        ; preds = %if.then91
  br label %if.end113, !dbg !4121

if.end94:                                         ; preds = %if.then91
  store i8 1, i8* %iterate, align 1, !dbg !4122
  store %struct.operand_entry* null, %struct.operand_entry** %oelast, align 8, !dbg !4123
  br label %for.cond, !dbg !4124, !llvm.loop !4125

if.end95:                                         ; preds = %land.lhs.true87, %lor.lhs.false
  %76 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4127
  store %struct.operand_entry* %76, %struct.operand_entry** %oelast, align 8, !dbg !4128
  %77 = load i32, i32* %i, align 4, !dbg !4129
  %inc96 = add i32 %77, 1, !dbg !4129
  store i32 %inc96, i32* %i, align 4, !dbg !4129
  br label %for.cond, !dbg !4130, !llvm.loop !4125

for.end:                                          ; preds = %cond.end75
  %78 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4131
  %79 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %78, align 8, !dbg !4131
  %tobool97 = icmp ne %struct.VEC_operand_entry_t_heap* %79, null, !dbg !4131
  br i1 %tobool97, label %cond.true98, label %cond.false100, !dbg !4131

cond.true98:                                      ; preds = %for.end
  %80 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4131
  %81 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %80, align 8, !dbg !4131
  %base99 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %81, i32 0, i32 0, !dbg !4131
  br label %cond.end101, !dbg !4131

cond.false100:                                    ; preds = %for.end
  br label %cond.end101, !dbg !4131

cond.end101:                                      ; preds = %cond.false100, %cond.true98
  %cond102 = phi %struct.VEC_operand_entry_t_base* [ %base99, %cond.true98 ], [ null, %cond.false100 ], !dbg !4131
  %call103 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond102), !dbg !4131
  store i32 %call103, i32* %length, align 4, !dbg !4132
  %82 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4133
  %83 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %82, align 8, !dbg !4133
  %tobool104 = icmp ne %struct.VEC_operand_entry_t_heap* %83, null, !dbg !4133
  br i1 %tobool104, label %cond.true105, label %cond.false107, !dbg !4133

cond.true105:                                     ; preds = %cond.end101
  %84 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4133
  %85 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %84, align 8, !dbg !4133
  %base106 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %85, i32 0, i32 0, !dbg !4133
  br label %cond.end108, !dbg !4133

cond.false107:                                    ; preds = %cond.end101
  br label %cond.end108, !dbg !4133

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi %struct.VEC_operand_entry_t_base* [ %base106, %cond.true105 ], [ null, %cond.false107 ], !dbg !4133
  %call110 = call %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond109), !dbg !4133
  store %struct.operand_entry* %call110, %struct.operand_entry** %oelast, align 8, !dbg !4134
  %86 = load i8, i8* %iterate, align 1, !dbg !4135
  %tobool111 = icmp ne i8 %86, 0, !dbg !4135
  br i1 %tobool111, label %if.then112, label %if.end113, !dbg !4137

if.then112:                                       ; preds = %cond.end108
  %87 = load i32, i32* %opcode.addr, align 4, !dbg !4138
  %88 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4139
  call void @optimize_ops_list(i32 %87, %struct.VEC_operand_entry_t_heap** %88), !dbg !4140
  br label %if.end113, !dbg !4140

if.end113:                                        ; preds = %if.then, %cond.end65, %if.then81, %if.then93, %if.then112, %cond.end108
  ret void, !dbg !4141
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @undistribute_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, %struct.loop* %loop) #0 !dbg !4142 {
entry:
  %retval = alloca i8, align 1
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %length = alloca i32, align 4
  %oe1 = alloca %struct.operand_entry*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %candidates = alloca %struct.simple_bitmap_def*, align 8
  %candidates2 = alloca %struct.simple_bitmap_def*, align 8
  %nr_candidates = alloca i32, align 4
  %nr_candidates2 = alloca i32, align 4
  %sbi0 = alloca %struct.sbitmap_iterator, align 8
  %subops = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %ctable = alloca %struct.htab*, align 8
  %changed = alloca i8, align 1
  %dcode = alloca i32, align 4
  %oe1def = alloca %union.gimple_statement_d*, align 8
  %oedef = alloca %union.gimple_statement_d*, align 8
  %oecode = alloca i32, align 4
  %j61 = alloca i32, align 4
  %c = alloca %struct.oecount_s, align 8
  %slot = alloca i8**, align 8
  %idx = alloca i64, align 8
  %c145 = alloca %struct.oecount_s*, align 8
  %c186 = alloca %struct.oecount_s*, align 8
  %oedef203 = alloca %union.gimple_statement_d*, align 8
  %oecode204 = alloca i32, align 4
  %j205 = alloca i32, align 4
  %op206 = alloca %union.tree_node*, align 8
  %oe1260 = alloca %struct.operand_entry*, align 8
  %oe2 = alloca %struct.operand_entry*, align 8
  %tmpvar = alloca %union.tree_node*, align 8
  %prod = alloca %union.gimple_statement_d*, align 8
  %first = alloca i32, align 4
  %sum = alloca %union.gimple_statement_d*, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !4147, metadata !DIExpression()), !dbg !4148
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4149, metadata !DIExpression()), !dbg !4150
  call void @llvm.dbg.declare(metadata i32* %length, metadata !4151, metadata !DIExpression()), !dbg !4152
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4153
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %0, align 8, !dbg !4153
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %1, null, !dbg !4153
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4153

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4153
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %2, align 8, !dbg !4153
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %3, i32 0, i32 0, !dbg !4153
  br label %cond.end, !dbg !4153

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4153

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4153
  %call = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond), !dbg !4153
  store i32 %call, i32* %length, align 4, !dbg !4152
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe1, metadata !4154, metadata !DIExpression()), !dbg !4155
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4156, metadata !DIExpression()), !dbg !4157
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4158, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %candidates, metadata !4160, metadata !DIExpression()), !dbg !4172
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %candidates2, metadata !4173, metadata !DIExpression()), !dbg !4174
  call void @llvm.dbg.declare(metadata i32* %nr_candidates, metadata !4175, metadata !DIExpression()), !dbg !4176
  call void @llvm.dbg.declare(metadata i32* %nr_candidates2, metadata !4177, metadata !DIExpression()), !dbg !4178
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi0, metadata !4179, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %subops, metadata !4191, metadata !DIExpression()), !dbg !4192
  call void @llvm.dbg.declare(metadata %struct.htab** %ctable, metadata !4193, metadata !DIExpression()), !dbg !4194
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4195, metadata !DIExpression()), !dbg !4196
  store i8 0, i8* %changed, align 1, !dbg !4196
  %4 = load i32, i32* %length, align 4, !dbg !4197
  %cmp = icmp ule i32 %4, 1, !dbg !4199
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4200

lor.lhs.false:                                    ; preds = %cond.end
  %5 = load i32, i32* %opcode.addr, align 4, !dbg !4201
  %cmp1 = icmp ne i32 %5, 63, !dbg !4202
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4203

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !4204
  br label %return, !dbg !4204

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i32, i32* %length, align 4, !dbg !4205
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %6), !dbg !4206
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4207
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4208
  call void @sbitmap_zero(%struct.simple_bitmap_def* %7), !dbg !4209
  store i32 0, i32* %nr_candidates, align 4, !dbg !4210
  store i32 0, i32* %i, align 4, !dbg !4211
  br label %for.cond, !dbg !4213

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4214
  %9 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %8, align 8, !dbg !4214
  %tobool3 = icmp ne %struct.VEC_operand_entry_t_heap* %9, null, !dbg !4214
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !4214

cond.true4:                                       ; preds = %for.cond
  %10 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4214
  %11 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %10, align 8, !dbg !4214
  %base5 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %11, i32 0, i32 0, !dbg !4214
  br label %cond.end7, !dbg !4214

cond.false6:                                      ; preds = %for.cond
  br label %cond.end7, !dbg !4214

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_operand_entry_t_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !4214
  %12 = load i32, i32* %i, align 4, !dbg !4214
  %call9 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond8, i32 %12, %struct.operand_entry** %oe1), !dbg !4214
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4216
  br i1 %tobool10, label %for.body, label %for.end, !dbg !4216

for.body:                                         ; preds = %cond.end7
  call void @llvm.dbg.declare(metadata i32* %dcode, metadata !4217, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %oe1def, metadata !4220, metadata !DIExpression()), !dbg !4221
  %13 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4222
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %13, i32 0, i32 1, !dbg !4222
  %14 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4222
  %base11 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4222
  %15 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4222
  %bf.load = load i64, i64* %15, align 8, !dbg !4222
  %bf.clear = and i64 %bf.load, 65535, !dbg !4222
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4222
  %cmp12 = icmp ne i32 %bf.cast, 141, !dbg !4224
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !4225

if.then13:                                        ; preds = %for.body
  br label %for.inc, !dbg !4226

if.end14:                                         ; preds = %for.body
  %16 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4227
  %op15 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %16, i32 0, i32 1, !dbg !4227
  %17 = load %union.tree_node*, %union.tree_node** %op15, align 8, !dbg !4227
  %ssa_name = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !4227
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4227
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4227
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %oe1def, align 8, !dbg !4228
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oe1def, align 8, !dbg !4229
  %call16 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %19), !dbg !4231
  %tobool17 = icmp ne i8 %call16, 0, !dbg !4231
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !4232

if.then18:                                        ; preds = %if.end14
  br label %for.inc, !dbg !4233

if.end19:                                         ; preds = %if.end14
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oe1def, align 8, !dbg !4234
  %call20 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %20), !dbg !4235
  store i32 %call20, i32* %dcode, align 4, !dbg !4236
  %21 = load i32, i32* %dcode, align 4, !dbg !4237
  %cmp21 = icmp ne i32 %21, 65, !dbg !4239
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false23, !dbg !4240

land.lhs.true:                                    ; preds = %if.end19
  %22 = load i32, i32* %dcode, align 4, !dbg !4241
  %cmp22 = icmp ne i32 %22, 75, !dbg !4242
  br i1 %cmp22, label %if.then26, label %lor.lhs.false23, !dbg !4243

lor.lhs.false23:                                  ; preds = %land.lhs.true, %if.end19
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oe1def, align 8, !dbg !4244
  %24 = load i32, i32* %dcode, align 4, !dbg !4245
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4246
  %call24 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %23, i32 %24, %struct.loop* %25), !dbg !4247
  %tobool25 = icmp ne i8 %call24, 0, !dbg !4247
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !4248

if.then26:                                        ; preds = %lor.lhs.false23, %land.lhs.true
  br label %for.inc, !dbg !4249

if.end27:                                         ; preds = %lor.lhs.false23
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4250
  %27 = load i32, i32* %i, align 4, !dbg !4251
  call void @SET_BIT(%struct.simple_bitmap_def* %26, i32 %27), !dbg !4252
  %28 = load i32, i32* %nr_candidates, align 4, !dbg !4253
  %inc = add i32 %28, 1, !dbg !4253
  store i32 %inc, i32* %nr_candidates, align 4, !dbg !4253
  br label %for.inc, !dbg !4254

for.inc:                                          ; preds = %if.end27, %if.then26, %if.then18, %if.then13
  %29 = load i32, i32* %i, align 4, !dbg !4255
  %inc28 = add i32 %29, 1, !dbg !4255
  store i32 %inc28, i32* %i, align 4, !dbg !4255
  br label %for.cond, !dbg !4256, !llvm.loop !4257

for.end:                                          ; preds = %cond.end7
  %30 = load i32, i32* %nr_candidates, align 4, !dbg !4259
  %cmp29 = icmp ult i32 %30, 2, !dbg !4261
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !4262

if.then30:                                        ; preds = %for.end
  %31 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4263
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %31, i32 0, i32 0, !dbg !4263
  %32 = load i8*, i8** %popcount, align 8, !dbg !4263
  call void @free(i8* %32), !dbg !4263
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4263
  %34 = bitcast %struct.simple_bitmap_def* %33 to i8*, !dbg !4263
  call void @free(i8* %34), !dbg !4263
  store i8 0, i8* %retval, align 1, !dbg !4265
  br label %return, !dbg !4265

if.end31:                                         ; preds = %for.end
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4266
  %tobool32 = icmp ne %struct._IO_FILE* %35, null, !dbg !4266
  br i1 %tobool32, label %land.lhs.true33, label %if.end47, !dbg !4268

land.lhs.true33:                                  ; preds = %if.end31
  %36 = load i32, i32* @dump_flags, align 4, !dbg !4269
  %and = and i32 %36, 8, !dbg !4270
  %tobool34 = icmp ne i32 %and, 0, !dbg !4270
  br i1 %tobool34, label %if.then35, label %if.end47, !dbg !4271

if.then35:                                        ; preds = %land.lhs.true33
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4272
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.32, i64 0, i64 0)), !dbg !4274
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4275
  %39 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4276
  %40 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %39, align 8, !dbg !4276
  %tobool37 = icmp ne %struct.VEC_operand_entry_t_heap* %40, null, !dbg !4276
  br i1 %tobool37, label %cond.true38, label %cond.false40, !dbg !4276

cond.true38:                                      ; preds = %if.then35
  %41 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4276
  %42 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %41, align 8, !dbg !4276
  %base39 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %42, i32 0, i32 0, !dbg !4276
  br label %cond.end41, !dbg !4276

cond.false40:                                     ; preds = %if.then35
  br label %cond.end41, !dbg !4276

cond.end41:                                       ; preds = %cond.false40, %cond.true38
  %cond42 = phi %struct.VEC_operand_entry_t_base* [ %base39, %cond.true38 ], [ null, %cond.false40 ], !dbg !4276
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4276
  %call43 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %43), !dbg !4276
  %call44 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond42, i32 %call43), !dbg !4276
  %op45 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call44, i32 0, i32 1, !dbg !4277
  %44 = load %union.tree_node*, %union.tree_node** %op45, align 8, !dbg !4277
  call void @print_generic_expr(%struct._IO_FILE* %38, %union.tree_node* %44, i32 0), !dbg !4278
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4279
  %46 = load i32, i32* %nr_candidates, align 4, !dbg !4280
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i64 0, i64 0), i32 %46), !dbg !4281
  br label %if.end47, !dbg !4282

if.end47:                                         ; preds = %cond.end41, %land.lhs.true33, %if.end31
  store %struct.VEC_oecount_heap* null, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4283
  %call48 = call %struct.htab* @htab_create(i64 15, i32 (i8*)* @oecount_hash, i32 (i8*, i8*)* @oecount_eq, void (i8*)* null), !dbg !4284
  store %struct.htab* %call48, %struct.htab** %ctable, align 8, !dbg !4285
  %47 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4286
  %48 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %47, align 8, !dbg !4286
  %tobool49 = icmp ne %struct.VEC_operand_entry_t_heap* %48, null, !dbg !4286
  br i1 %tobool49, label %cond.true50, label %cond.false52, !dbg !4286

cond.true50:                                      ; preds = %if.end47
  %49 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4286
  %50 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %49, align 8, !dbg !4286
  %base51 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %50, i32 0, i32 0, !dbg !4286
  br label %cond.end53, !dbg !4286

cond.false52:                                     ; preds = %if.end47
  br label %cond.end53, !dbg !4286

cond.end53:                                       ; preds = %cond.false52, %cond.true50
  %cond54 = phi %struct.VEC_operand_entry_t_base* [ %base51, %cond.true50 ], [ null, %cond.false52 ], !dbg !4286
  %call55 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond54), !dbg !4286
  %conv = zext i32 %call55 to i64, !dbg !4286
  %call56 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4286
  %51 = bitcast i8* %call56 to %struct.VEC_operand_entry_t_heap**, !dbg !4286
  store %struct.VEC_operand_entry_t_heap** %51, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4287
  %52 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4288
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi0, %struct.simple_bitmap_def* %52, i32 0), !dbg !4288
  br label %for.cond57, !dbg !4288

for.cond57:                                       ; preds = %for.inc123, %cond.end53
  %call58 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi0, i32* %i), !dbg !4290
  %tobool59 = icmp ne i8 %call58, 0, !dbg !4288
  br i1 %tobool59, label %for.body60, label %for.end124, !dbg !4288

for.body60:                                       ; preds = %for.cond57
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %oedef, metadata !4292, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata i32* %oecode, metadata !4295, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.declare(metadata i32* %j61, metadata !4297, metadata !DIExpression()), !dbg !4298
  %53 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4299
  %54 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %53, align 8, !dbg !4299
  %tobool62 = icmp ne %struct.VEC_operand_entry_t_heap* %54, null, !dbg !4299
  br i1 %tobool62, label %cond.true63, label %cond.false65, !dbg !4299

cond.true63:                                      ; preds = %for.body60
  %55 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4299
  %56 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %55, align 8, !dbg !4299
  %base64 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %56, i32 0, i32 0, !dbg !4299
  br label %cond.end66, !dbg !4299

cond.false65:                                     ; preds = %for.body60
  br label %cond.end66, !dbg !4299

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi %struct.VEC_operand_entry_t_base* [ %base64, %cond.true63 ], [ null, %cond.false65 ], !dbg !4299
  %57 = load i32, i32* %i, align 4, !dbg !4299
  %call68 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond67, i32 %57), !dbg !4299
  %op69 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call68, i32 0, i32 1, !dbg !4299
  %58 = load %union.tree_node*, %union.tree_node** %op69, align 8, !dbg !4299
  %ssa_name70 = bitcast %union.tree_node* %58 to %struct.tree_ssa_name*, !dbg !4299
  %def_stmt71 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name70, i32 0, i32 2, !dbg !4299
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt71, align 8, !dbg !4299
  store %union.gimple_statement_d* %59, %union.gimple_statement_d** %oedef, align 8, !dbg !4300
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oedef, align 8, !dbg !4301
  %call72 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %60), !dbg !4302
  store i32 %call72, i32* %oecode, align 4, !dbg !4303
  %61 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4304
  %62 = load i32, i32* %i, align 4, !dbg !4305
  %idxprom = zext i32 %62 to i64, !dbg !4304
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %61, i64 %idxprom, !dbg !4304
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oedef, align 8, !dbg !4306
  %64 = load i32, i32* %oecode, align 4, !dbg !4307
  %call73 = call zeroext i8 @associative_tree_code(i32 %64), !dbg !4308
  call void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %arrayidx, %union.gimple_statement_d* %63, i8 zeroext %call73, i8 zeroext 0), !dbg !4309
  store i32 0, i32* %j61, align 4, !dbg !4310
  br label %for.cond74, !dbg !4312

for.cond74:                                       ; preds = %for.inc120, %cond.end66
  %65 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4313
  %66 = load i32, i32* %i, align 4, !dbg !4313
  %idxprom75 = zext i32 %66 to i64, !dbg !4313
  %arrayidx76 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %65, i64 %idxprom75, !dbg !4313
  %67 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx76, align 8, !dbg !4313
  %tobool77 = icmp ne %struct.VEC_operand_entry_t_heap* %67, null, !dbg !4313
  br i1 %tobool77, label %cond.true78, label %cond.false82, !dbg !4313

cond.true78:                                      ; preds = %for.cond74
  %68 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4313
  %69 = load i32, i32* %i, align 4, !dbg !4313
  %idxprom79 = zext i32 %69 to i64, !dbg !4313
  %arrayidx80 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %68, i64 %idxprom79, !dbg !4313
  %70 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx80, align 8, !dbg !4313
  %base81 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %70, i32 0, i32 0, !dbg !4313
  br label %cond.end83, !dbg !4313

cond.false82:                                     ; preds = %for.cond74
  br label %cond.end83, !dbg !4313

cond.end83:                                       ; preds = %cond.false82, %cond.true78
  %cond84 = phi %struct.VEC_operand_entry_t_base* [ %base81, %cond.true78 ], [ null, %cond.false82 ], !dbg !4313
  %71 = load i32, i32* %j61, align 4, !dbg !4313
  %call85 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond84, i32 %71, %struct.operand_entry** %oe1), !dbg !4313
  %tobool86 = icmp ne i32 %call85, 0, !dbg !4315
  br i1 %tobool86, label %for.body87, label %for.end122, !dbg !4315

for.body87:                                       ; preds = %cond.end83
  call void @llvm.dbg.declare(metadata %struct.oecount_s* %c, metadata !4316, metadata !DIExpression()), !dbg !4318
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4319, metadata !DIExpression()), !dbg !4320
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !4321, metadata !DIExpression()), !dbg !4322
  %72 = load i32, i32* %oecode, align 4, !dbg !4323
  %oecode88 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i32 0, i32 1, !dbg !4324
  store i32 %72, i32* %oecode88, align 4, !dbg !4325
  %cnt = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i32 0, i32 0, !dbg !4326
  store i32 1, i32* %cnt, align 8, !dbg !4327
  %73 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4328
  %op89 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %73, i32 0, i32 1, !dbg !4329
  %74 = load %union.tree_node*, %union.tree_node** %op89, align 8, !dbg !4329
  %op90 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i32 0, i32 2, !dbg !4330
  store %union.tree_node* %74, %union.tree_node** %op90, align 8, !dbg !4331
  %call91 = call %struct.oecount_s* @VEC_oecount_heap_safe_push(%struct.VEC_oecount_heap** @cvec, %struct.oecount_s* %c), !dbg !4332
  %75 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4333
  %tobool92 = icmp ne %struct.VEC_oecount_heap* %75, null, !dbg !4333
  br i1 %tobool92, label %cond.true93, label %cond.false95, !dbg !4333

cond.true93:                                      ; preds = %for.body87
  %76 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4333
  %base94 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %76, i32 0, i32 0, !dbg !4333
  br label %cond.end96, !dbg !4333

cond.false95:                                     ; preds = %for.body87
  br label %cond.end96, !dbg !4333

cond.end96:                                       ; preds = %cond.false95, %cond.true93
  %cond97 = phi %struct.VEC_oecount_base* [ %base94, %cond.true93 ], [ null, %cond.false95 ], !dbg !4333
  %call98 = call i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %cond97), !dbg !4333
  %add = add i32 %call98, 41, !dbg !4334
  %conv99 = zext i32 %add to i64, !dbg !4333
  store i64 %conv99, i64* %idx, align 8, !dbg !4335
  %77 = load %struct.htab*, %struct.htab** %ctable, align 8, !dbg !4336
  %78 = load i64, i64* %idx, align 8, !dbg !4337
  %79 = inttoptr i64 %78 to i8*, !dbg !4338
  %call100 = call i8** @htab_find_slot(%struct.htab* %77, i8* %79, i32 1), !dbg !4339
  store i8** %call100, i8*** %slot, align 8, !dbg !4340
  %80 = load i8**, i8*** %slot, align 8, !dbg !4341
  %81 = load i8*, i8** %80, align 8, !dbg !4343
  %tobool101 = icmp ne i8* %81, null, !dbg !4343
  br i1 %tobool101, label %if.else, label %if.then102, !dbg !4344

if.then102:                                       ; preds = %cond.end96
  %82 = load i64, i64* %idx, align 8, !dbg !4345
  %83 = inttoptr i64 %82 to i8*, !dbg !4347
  %84 = load i8**, i8*** %slot, align 8, !dbg !4348
  store i8* %83, i8** %84, align 8, !dbg !4349
  br label %if.end119, !dbg !4350

if.else:                                          ; preds = %cond.end96
  %85 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4351
  %tobool103 = icmp ne %struct.VEC_oecount_heap* %85, null, !dbg !4351
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !4351

cond.true104:                                     ; preds = %if.else
  %86 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4351
  %base105 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %86, i32 0, i32 0, !dbg !4351
  br label %cond.end107, !dbg !4351

cond.false106:                                    ; preds = %if.else
  br label %cond.end107, !dbg !4351

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_oecount_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !4351
  call void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %cond108), !dbg !4351
  %87 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4353
  %tobool109 = icmp ne %struct.VEC_oecount_heap* %87, null, !dbg !4353
  br i1 %tobool109, label %cond.true110, label %cond.false112, !dbg !4353

cond.true110:                                     ; preds = %cond.end107
  %88 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4353
  %base111 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %88, i32 0, i32 0, !dbg !4353
  br label %cond.end113, !dbg !4353

cond.false112:                                    ; preds = %cond.end107
  br label %cond.end113, !dbg !4353

cond.end113:                                      ; preds = %cond.false112, %cond.true110
  %cond114 = phi %struct.VEC_oecount_base* [ %base111, %cond.true110 ], [ null, %cond.false112 ], !dbg !4353
  %89 = load i8**, i8*** %slot, align 8, !dbg !4353
  %90 = load i8*, i8** %89, align 8, !dbg !4353
  %91 = ptrtoint i8* %90 to i64, !dbg !4353
  %sub = sub i64 %91, 42, !dbg !4353
  %conv115 = trunc i64 %sub to i32, !dbg !4353
  %call116 = call %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %cond114, i32 %conv115), !dbg !4353
  %cnt117 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call116, i32 0, i32 0, !dbg !4354
  %92 = load i32, i32* %cnt117, align 8, !dbg !4355
  %inc118 = add nsw i32 %92, 1, !dbg !4355
  store i32 %inc118, i32* %cnt117, align 8, !dbg !4355
  br label %if.end119

if.end119:                                        ; preds = %cond.end113, %if.then102
  br label %for.inc120, !dbg !4356

for.inc120:                                       ; preds = %if.end119
  %93 = load i32, i32* %j61, align 4, !dbg !4357
  %inc121 = add i32 %93, 1, !dbg !4357
  store i32 %inc121, i32* %j61, align 4, !dbg !4357
  br label %for.cond74, !dbg !4358, !llvm.loop !4359

for.end122:                                       ; preds = %cond.end83
  br label %for.inc123, !dbg !4361

for.inc123:                                       ; preds = %for.end122
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi0), !dbg !4290
  br label %for.cond57, !dbg !4290, !llvm.loop !4362

for.end124:                                       ; preds = %for.cond57
  %94 = load %struct.htab*, %struct.htab** %ctable, align 8, !dbg !4364
  call void @htab_delete(%struct.htab* %94), !dbg !4365
  %95 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4366
  %tobool125 = icmp ne %struct.VEC_oecount_heap* %95, null, !dbg !4366
  br i1 %tobool125, label %cond.true126, label %cond.false128, !dbg !4366

cond.true126:                                     ; preds = %for.end124
  %96 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4366
  %base127 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %96, i32 0, i32 0, !dbg !4366
  br label %cond.end129, !dbg !4366

cond.false128:                                    ; preds = %for.end124
  br label %cond.end129, !dbg !4366

cond.end129:                                      ; preds = %cond.false128, %cond.true126
  %cond130 = phi %struct.VEC_oecount_base* [ %base127, %cond.true126 ], [ null, %cond.false128 ], !dbg !4366
  %call131 = call %struct.oecount_s* @VEC_oecount_base_address(%struct.VEC_oecount_base* %cond130), !dbg !4366
  %97 = bitcast %struct.oecount_s* %call131 to i8*, !dbg !4366
  %98 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4367
  %tobool132 = icmp ne %struct.VEC_oecount_heap* %98, null, !dbg !4367
  br i1 %tobool132, label %cond.true133, label %cond.false135, !dbg !4367

cond.true133:                                     ; preds = %cond.end129
  %99 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4367
  %base134 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %99, i32 0, i32 0, !dbg !4367
  br label %cond.end136, !dbg !4367

cond.false135:                                    ; preds = %cond.end129
  br label %cond.end136, !dbg !4367

cond.end136:                                      ; preds = %cond.false135, %cond.true133
  %cond137 = phi %struct.VEC_oecount_base* [ %base134, %cond.true133 ], [ null, %cond.false135 ], !dbg !4367
  %call138 = call i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %cond137), !dbg !4367
  %conv139 = zext i32 %call138 to i64, !dbg !4367
  call void @spec_qsort(i8* %97, i64 %conv139, i64 16, i32 (i8*, i8*)* @oecount_cmp), !dbg !4368
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4369
  %tobool140 = icmp ne %struct._IO_FILE* %100, null, !dbg !4369
  br i1 %tobool140, label %land.lhs.true141, label %if.end175, !dbg !4371

land.lhs.true141:                                 ; preds = %cond.end136
  %101 = load i32, i32* @dump_flags, align 4, !dbg !4372
  %and142 = and i32 %101, 8, !dbg !4373
  %tobool143 = icmp ne i32 %and142, 0, !dbg !4373
  br i1 %tobool143, label %if.then144, label %if.end175, !dbg !4374

if.then144:                                       ; preds = %land.lhs.true141
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c145, metadata !4375, metadata !DIExpression()), !dbg !4378
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4379
  %call146 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i64 0, i64 0)), !dbg !4380
  store i32 0, i32* %j, align 4, !dbg !4381
  br label %for.cond147, !dbg !4383

for.cond147:                                      ; preds = %for.inc172, %if.then144
  %103 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4384
  %tobool148 = icmp ne %struct.VEC_oecount_heap* %103, null, !dbg !4384
  br i1 %tobool148, label %cond.true149, label %cond.false151, !dbg !4384

cond.true149:                                     ; preds = %for.cond147
  %104 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4384
  %base150 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %104, i32 0, i32 0, !dbg !4384
  br label %cond.end152, !dbg !4384

cond.false151:                                    ; preds = %for.cond147
  br label %cond.end152, !dbg !4384

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi %struct.VEC_oecount_base* [ %base150, %cond.true149 ], [ null, %cond.false151 ], !dbg !4384
  %105 = load i32, i32* %j, align 4, !dbg !4384
  %call154 = call i32 @VEC_oecount_base_iterate(%struct.VEC_oecount_base* %cond153, i32 %105, %struct.oecount_s** %c145), !dbg !4384
  %tobool155 = icmp ne i32 %call154, 0, !dbg !4386
  br i1 %tobool155, label %for.body156, label %for.end174, !dbg !4386

for.body156:                                      ; preds = %cond.end152
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4387
  %107 = load %struct.oecount_s*, %struct.oecount_s** %c145, align 8, !dbg !4389
  %cnt157 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %107, i32 0, i32 0, !dbg !4390
  %108 = load i32, i32* %cnt157, align 8, !dbg !4390
  %109 = load %struct.oecount_s*, %struct.oecount_s** %c145, align 8, !dbg !4391
  %oecode158 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %109, i32 0, i32 1, !dbg !4392
  %110 = load i32, i32* %oecode158, align 4, !dbg !4392
  %cmp159 = icmp eq i32 %110, 65, !dbg !4393
  br i1 %cmp159, label %cond.true161, label %cond.false162, !dbg !4391

cond.true161:                                     ; preds = %for.body156
  br label %cond.end167, !dbg !4391

cond.false162:                                    ; preds = %for.body156
  %111 = load %struct.oecount_s*, %struct.oecount_s** %c145, align 8, !dbg !4394
  %oecode163 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %111, i32 0, i32 1, !dbg !4395
  %112 = load i32, i32* %oecode163, align 4, !dbg !4395
  %cmp164 = icmp eq i32 %112, 75, !dbg !4396
  %113 = zext i1 %cmp164 to i64, !dbg !4394
  %cond166 = select i1 %cmp164, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), !dbg !4394
  br label %cond.end167, !dbg !4391

cond.end167:                                      ; preds = %cond.false162, %cond.true161
  %cond168 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), %cond.true161 ], [ %cond166, %cond.false162 ], !dbg !4391
  %call169 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %106, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i64 0, i64 0), i32 %108, i8* %cond168), !dbg !4397
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4398
  %115 = load %struct.oecount_s*, %struct.oecount_s** %c145, align 8, !dbg !4399
  %op170 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %115, i32 0, i32 2, !dbg !4400
  %116 = load %union.tree_node*, %union.tree_node** %op170, align 8, !dbg !4400
  call void @print_generic_expr(%struct._IO_FILE* %114, %union.tree_node* %116, i32 0), !dbg !4401
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4402
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !4403
  br label %for.inc172, !dbg !4404

for.inc172:                                       ; preds = %cond.end167
  %118 = load i32, i32* %j, align 4, !dbg !4405
  %inc173 = add i32 %118, 1, !dbg !4405
  store i32 %inc173, i32* %j, align 4, !dbg !4405
  br label %for.cond147, !dbg !4406, !llvm.loop !4407

for.end174:                                       ; preds = %cond.end152
  br label %if.end175, !dbg !4409

if.end175:                                        ; preds = %for.end174, %land.lhs.true141, %cond.end136
  %119 = load i32, i32* %length, align 4, !dbg !4410
  %call176 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %119), !dbg !4411
  store %struct.simple_bitmap_def* %call176, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4412
  br label %while.cond, !dbg !4413

while.cond:                                       ; preds = %cond.end348, %if.end175
  %120 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4414
  %tobool177 = icmp ne %struct.VEC_oecount_heap* %120, null, !dbg !4414
  br i1 %tobool177, label %cond.true178, label %cond.false180, !dbg !4414

cond.true178:                                     ; preds = %while.cond
  %121 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4414
  %base179 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %121, i32 0, i32 0, !dbg !4414
  br label %cond.end181, !dbg !4414

cond.false180:                                    ; preds = %while.cond
  br label %cond.end181, !dbg !4414

cond.end181:                                      ; preds = %cond.false180, %cond.true178
  %cond182 = phi %struct.VEC_oecount_base* [ %base179, %cond.true178 ], [ null, %cond.false180 ], !dbg !4414
  %call183 = call i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %cond182), !dbg !4414
  %cmp184 = icmp eq i32 %call183, 0, !dbg !4414
  %lnot = xor i1 %cmp184, true, !dbg !4415
  br i1 %lnot, label %while.body, label %while.end, !dbg !4413

while.body:                                       ; preds = %cond.end181
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c186, metadata !4416, metadata !DIExpression()), !dbg !4418
  %122 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4419
  %tobool187 = icmp ne %struct.VEC_oecount_heap* %122, null, !dbg !4419
  br i1 %tobool187, label %cond.true188, label %cond.false190, !dbg !4419

cond.true188:                                     ; preds = %while.body
  %123 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4419
  %base189 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %123, i32 0, i32 0, !dbg !4419
  br label %cond.end191, !dbg !4419

cond.false190:                                    ; preds = %while.body
  br label %cond.end191, !dbg !4419

cond.end191:                                      ; preds = %cond.false190, %cond.true188
  %cond192 = phi %struct.VEC_oecount_base* [ %base189, %cond.true188 ], [ null, %cond.false190 ], !dbg !4419
  %call193 = call %struct.oecount_s* @VEC_oecount_base_last(%struct.VEC_oecount_base* %cond192), !dbg !4419
  store %struct.oecount_s* %call193, %struct.oecount_s** %c186, align 8, !dbg !4418
  %124 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4420
  %cnt194 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %124, i32 0, i32 0, !dbg !4422
  %125 = load i32, i32* %cnt194, align 8, !dbg !4422
  %cmp195 = icmp slt i32 %125, 2, !dbg !4423
  br i1 %cmp195, label %if.then197, label %if.end198, !dbg !4424

if.then197:                                       ; preds = %cond.end191
  br label %while.end, !dbg !4425

if.end198:                                        ; preds = %cond.end191
  %126 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4426
  call void @sbitmap_zero(%struct.simple_bitmap_def* %126), !dbg !4427
  store i32 0, i32* %nr_candidates2, align 4, !dbg !4428
  %127 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4429
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi0, %struct.simple_bitmap_def* %127, i32 0), !dbg !4429
  br label %for.cond199, !dbg !4429

for.cond199:                                      ; preds = %for.inc255, %if.end198
  %call200 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi0, i32* %i), !dbg !4431
  %tobool201 = icmp ne i8 %call200, 0, !dbg !4429
  br i1 %tobool201, label %for.body202, label %for.end256, !dbg !4429

for.body202:                                      ; preds = %for.cond199
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %oedef203, metadata !4433, metadata !DIExpression()), !dbg !4435
  call void @llvm.dbg.declare(metadata i32* %oecode204, metadata !4436, metadata !DIExpression()), !dbg !4437
  call void @llvm.dbg.declare(metadata i32* %j205, metadata !4438, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.declare(metadata %union.tree_node** %op206, metadata !4440, metadata !DIExpression()), !dbg !4441
  %128 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4442
  %129 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %128, align 8, !dbg !4442
  %tobool207 = icmp ne %struct.VEC_operand_entry_t_heap* %129, null, !dbg !4442
  br i1 %tobool207, label %cond.true208, label %cond.false210, !dbg !4442

cond.true208:                                     ; preds = %for.body202
  %130 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4442
  %131 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %130, align 8, !dbg !4442
  %base209 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %131, i32 0, i32 0, !dbg !4442
  br label %cond.end211, !dbg !4442

cond.false210:                                    ; preds = %for.body202
  br label %cond.end211, !dbg !4442

cond.end211:                                      ; preds = %cond.false210, %cond.true208
  %cond212 = phi %struct.VEC_operand_entry_t_base* [ %base209, %cond.true208 ], [ null, %cond.false210 ], !dbg !4442
  %132 = load i32, i32* %i, align 4, !dbg !4442
  %call213 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond212, i32 %132), !dbg !4442
  %op214 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call213, i32 0, i32 1, !dbg !4443
  %133 = load %union.tree_node*, %union.tree_node** %op214, align 8, !dbg !4443
  store %union.tree_node* %133, %union.tree_node** %op206, align 8, !dbg !4441
  %134 = load %union.tree_node*, %union.tree_node** %op206, align 8, !dbg !4444
  %base215 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !4444
  %135 = bitcast %struct.tree_base* %base215 to i64*, !dbg !4444
  %bf.load216 = load i64, i64* %135, align 8, !dbg !4444
  %bf.clear217 = and i64 %bf.load216, 65535, !dbg !4444
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !4444
  %cmp219 = icmp ne i32 %bf.cast218, 141, !dbg !4446
  br i1 %cmp219, label %if.then221, label %if.end222, !dbg !4447

if.then221:                                       ; preds = %cond.end211
  br label %for.inc255, !dbg !4448

if.end222:                                        ; preds = %cond.end211
  %136 = load %union.tree_node*, %union.tree_node** %op206, align 8, !dbg !4449
  %ssa_name223 = bitcast %union.tree_node* %136 to %struct.tree_ssa_name*, !dbg !4449
  %def_stmt224 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name223, i32 0, i32 2, !dbg !4449
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt224, align 8, !dbg !4449
  store %union.gimple_statement_d* %137, %union.gimple_statement_d** %oedef203, align 8, !dbg !4450
  %138 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oedef203, align 8, !dbg !4451
  %call225 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %138), !dbg !4452
  store i32 %call225, i32* %oecode204, align 4, !dbg !4453
  %139 = load i32, i32* %oecode204, align 4, !dbg !4454
  %140 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4456
  %oecode226 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %140, i32 0, i32 1, !dbg !4457
  %141 = load i32, i32* %oecode226, align 4, !dbg !4457
  %cmp227 = icmp ne i32 %139, %141, !dbg !4458
  br i1 %cmp227, label %if.then229, label %if.end230, !dbg !4459

if.then229:                                       ; preds = %if.end222
  br label %for.inc255, !dbg !4460

if.end230:                                        ; preds = %if.end222
  store i32 0, i32* %j205, align 4, !dbg !4461
  br label %for.cond231, !dbg !4463

for.cond231:                                      ; preds = %for.inc252, %if.end230
  %142 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4464
  %143 = load i32, i32* %i, align 4, !dbg !4464
  %idxprom232 = zext i32 %143 to i64, !dbg !4464
  %arrayidx233 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %142, i64 %idxprom232, !dbg !4464
  %144 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx233, align 8, !dbg !4464
  %tobool234 = icmp ne %struct.VEC_operand_entry_t_heap* %144, null, !dbg !4464
  br i1 %tobool234, label %cond.true235, label %cond.false239, !dbg !4464

cond.true235:                                     ; preds = %for.cond231
  %145 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4464
  %146 = load i32, i32* %i, align 4, !dbg !4464
  %idxprom236 = zext i32 %146 to i64, !dbg !4464
  %arrayidx237 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %145, i64 %idxprom236, !dbg !4464
  %147 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx237, align 8, !dbg !4464
  %base238 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %147, i32 0, i32 0, !dbg !4464
  br label %cond.end240, !dbg !4464

cond.false239:                                    ; preds = %for.cond231
  br label %cond.end240, !dbg !4464

cond.end240:                                      ; preds = %cond.false239, %cond.true235
  %cond241 = phi %struct.VEC_operand_entry_t_base* [ %base238, %cond.true235 ], [ null, %cond.false239 ], !dbg !4464
  %148 = load i32, i32* %j205, align 4, !dbg !4464
  %call242 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond241, i32 %148, %struct.operand_entry** %oe1), !dbg !4464
  %tobool243 = icmp ne i32 %call242, 0, !dbg !4466
  br i1 %tobool243, label %for.body244, label %for.end254, !dbg !4466

for.body244:                                      ; preds = %cond.end240
  %149 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4467
  %op245 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %149, i32 0, i32 1, !dbg !4470
  %150 = load %union.tree_node*, %union.tree_node** %op245, align 8, !dbg !4470
  %151 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4471
  %op246 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %151, i32 0, i32 2, !dbg !4472
  %152 = load %union.tree_node*, %union.tree_node** %op246, align 8, !dbg !4472
  %cmp247 = icmp eq %union.tree_node* %150, %152, !dbg !4473
  br i1 %cmp247, label %if.then249, label %if.end251, !dbg !4474

if.then249:                                       ; preds = %for.body244
  %153 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4475
  %154 = load i32, i32* %i, align 4, !dbg !4477
  call void @SET_BIT(%struct.simple_bitmap_def* %153, i32 %154), !dbg !4478
  %155 = load i32, i32* %nr_candidates2, align 4, !dbg !4479
  %inc250 = add i32 %155, 1, !dbg !4479
  store i32 %inc250, i32* %nr_candidates2, align 4, !dbg !4479
  br label %for.end254, !dbg !4480

if.end251:                                        ; preds = %for.body244
  br label %for.inc252, !dbg !4481

for.inc252:                                       ; preds = %if.end251
  %156 = load i32, i32* %j205, align 4, !dbg !4482
  %inc253 = add i32 %156, 1, !dbg !4482
  store i32 %inc253, i32* %j205, align 4, !dbg !4482
  br label %for.cond231, !dbg !4483, !llvm.loop !4484

for.end254:                                       ; preds = %if.then249, %cond.end240
  br label %for.inc255, !dbg !4486

for.inc255:                                       ; preds = %for.end254, %if.then229, %if.then221
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi0), !dbg !4431
  br label %for.cond199, !dbg !4431, !llvm.loop !4487

for.end256:                                       ; preds = %for.cond199
  %157 = load i32, i32* %nr_candidates2, align 4, !dbg !4489
  %cmp257 = icmp uge i32 %157, 2, !dbg !4491
  br i1 %cmp257, label %if.then259, label %if.end343, !dbg !4492

if.then259:                                       ; preds = %for.end256
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe1260, metadata !4493, metadata !DIExpression()), !dbg !4495
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe2, metadata !4496, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmpvar, metadata !4498, metadata !DIExpression()), !dbg !4499
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %prod, metadata !4500, metadata !DIExpression()), !dbg !4501
  call void @llvm.dbg.declare(metadata i32* %first, metadata !4502, metadata !DIExpression()), !dbg !4503
  %158 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4504
  %call261 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %158), !dbg !4505
  store i32 %call261, i32* %first, align 4, !dbg !4503
  %159 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4506
  %160 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %159, align 8, !dbg !4506
  %tobool262 = icmp ne %struct.VEC_operand_entry_t_heap* %160, null, !dbg !4506
  br i1 %tobool262, label %cond.true263, label %cond.false265, !dbg !4506

cond.true263:                                     ; preds = %if.then259
  %161 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4506
  %162 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %161, align 8, !dbg !4506
  %base264 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %162, i32 0, i32 0, !dbg !4506
  br label %cond.end266, !dbg !4506

cond.false265:                                    ; preds = %if.then259
  br label %cond.end266, !dbg !4506

cond.end266:                                      ; preds = %cond.false265, %cond.true263
  %cond267 = phi %struct.VEC_operand_entry_t_base* [ %base264, %cond.true263 ], [ null, %cond.false265 ], !dbg !4506
  %163 = load i32, i32* %first, align 4, !dbg !4506
  %call268 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond267, i32 %163), !dbg !4506
  store %struct.operand_entry* %call268, %struct.operand_entry** %oe1260, align 8, !dbg !4507
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4508
  %tobool269 = icmp ne %struct._IO_FILE* %164, null, !dbg !4508
  br i1 %tobool269, label %land.lhs.true270, label %if.end276, !dbg !4510

land.lhs.true270:                                 ; preds = %cond.end266
  %165 = load i32, i32* @dump_flags, align 4, !dbg !4511
  %and271 = and i32 %165, 8, !dbg !4512
  %tobool272 = icmp ne i32 %and271, 0, !dbg !4512
  br i1 %tobool272, label %if.then273, label %if.end276, !dbg !4513

if.then273:                                       ; preds = %land.lhs.true270
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4514
  %call274 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0)), !dbg !4516
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4517
  %168 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4518
  %op275 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %168, i32 0, i32 1, !dbg !4519
  %169 = load %union.tree_node*, %union.tree_node** %op275, align 8, !dbg !4519
  call void @print_generic_expr(%struct._IO_FILE* %167, %union.tree_node* %169, i32 0), !dbg !4520
  br label %if.end276, !dbg !4521

if.end276:                                        ; preds = %if.then273, %land.lhs.true270, %cond.end266
  %170 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4522
  %op277 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %170, i32 0, i32 1, !dbg !4522
  %171 = load %union.tree_node*, %union.tree_node** %op277, align 8, !dbg !4522
  %common = bitcast %union.tree_node* %171 to %struct.tree_common*, !dbg !4522
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4522
  %172 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4522
  %call278 = call %union.tree_node* @create_tmp_var(%union.tree_node* %172, i8* null), !dbg !4523
  store %union.tree_node* %call278, %union.tree_node** %tmpvar, align 8, !dbg !4524
  %173 = load %union.tree_node*, %union.tree_node** %tmpvar, align 8, !dbg !4525
  %call279 = call zeroext i8 @add_referenced_var(%union.tree_node* %173), !dbg !4526
  %174 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4527
  %op280 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %174, i32 0, i32 1, !dbg !4528
  %175 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4529
  %oecode281 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %175, i32 0, i32 1, !dbg !4530
  %176 = load i32, i32* %oecode281, align 4, !dbg !4530
  %177 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4531
  %op282 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %177, i32 0, i32 2, !dbg !4532
  %178 = load %union.tree_node*, %union.tree_node** %op282, align 8, !dbg !4532
  call void @zero_one_operation(%union.tree_node** %op280, i32 %176, %union.tree_node* %178), !dbg !4533
  %179 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4534
  %180 = load i32, i32* %first, align 4, !dbg !4534
  %add283 = add nsw i32 %180, 1, !dbg !4534
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi0, %struct.simple_bitmap_def* %179, i32 %add283), !dbg !4534
  br label %for.cond284, !dbg !4534

for.cond284:                                      ; preds = %for.inc316, %if.end276
  %call285 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi0, i32* %i), !dbg !4536
  %tobool286 = icmp ne i8 %call285, 0, !dbg !4534
  br i1 %tobool286, label %for.body287, label %for.end317, !dbg !4534

for.body287:                                      ; preds = %for.cond284
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %sum, metadata !4538, metadata !DIExpression()), !dbg !4540
  %181 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4541
  %182 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %181, align 8, !dbg !4541
  %tobool288 = icmp ne %struct.VEC_operand_entry_t_heap* %182, null, !dbg !4541
  br i1 %tobool288, label %cond.true289, label %cond.false291, !dbg !4541

cond.true289:                                     ; preds = %for.body287
  %183 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4541
  %184 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %183, align 8, !dbg !4541
  %base290 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %184, i32 0, i32 0, !dbg !4541
  br label %cond.end292, !dbg !4541

cond.false291:                                    ; preds = %for.body287
  br label %cond.end292, !dbg !4541

cond.end292:                                      ; preds = %cond.false291, %cond.true289
  %cond293 = phi %struct.VEC_operand_entry_t_base* [ %base290, %cond.true289 ], [ null, %cond.false291 ], !dbg !4541
  %185 = load i32, i32* %i, align 4, !dbg !4541
  %call294 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond293, i32 %185), !dbg !4541
  store %struct.operand_entry* %call294, %struct.operand_entry** %oe2, align 8, !dbg !4542
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4543
  %tobool295 = icmp ne %struct._IO_FILE* %186, null, !dbg !4543
  br i1 %tobool295, label %land.lhs.true296, label %if.end302, !dbg !4545

land.lhs.true296:                                 ; preds = %cond.end292
  %187 = load i32, i32* @dump_flags, align 4, !dbg !4546
  %and297 = and i32 %187, 8, !dbg !4547
  %tobool298 = icmp ne i32 %and297, 0, !dbg !4547
  br i1 %tobool298, label %if.then299, label %if.end302, !dbg !4548

if.then299:                                       ; preds = %land.lhs.true296
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4549
  %call300 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %188, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i64 0, i64 0)), !dbg !4551
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4552
  %190 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4553
  %op301 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %190, i32 0, i32 1, !dbg !4554
  %191 = load %union.tree_node*, %union.tree_node** %op301, align 8, !dbg !4554
  call void @print_generic_expr(%struct._IO_FILE* %189, %union.tree_node* %191, i32 0), !dbg !4555
  br label %if.end302, !dbg !4556

if.end302:                                        ; preds = %if.then299, %land.lhs.true296, %cond.end292
  %192 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4557
  %op303 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %192, i32 0, i32 1, !dbg !4558
  %193 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4559
  %oecode304 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %193, i32 0, i32 1, !dbg !4560
  %194 = load i32, i32* %oecode304, align 4, !dbg !4560
  %195 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4561
  %op305 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %195, i32 0, i32 2, !dbg !4562
  %196 = load %union.tree_node*, %union.tree_node** %op305, align 8, !dbg !4562
  call void @zero_one_operation(%union.tree_node** %op303, i32 %194, %union.tree_node* %196), !dbg !4563
  %197 = load %union.tree_node*, %union.tree_node** %tmpvar, align 8, !dbg !4564
  %198 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4565
  %op306 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %198, i32 0, i32 1, !dbg !4566
  %199 = load %union.tree_node*, %union.tree_node** %op306, align 8, !dbg !4566
  %200 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4567
  %op307 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %200, i32 0, i32 1, !dbg !4568
  %201 = load %union.tree_node*, %union.tree_node** %op307, align 8, !dbg !4568
  %202 = load i32, i32* %opcode.addr, align 4, !dbg !4569
  %call308 = call %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %197, %union.tree_node* %199, %union.tree_node* %201, i32 %202), !dbg !4570
  store %union.gimple_statement_d* %call308, %union.gimple_statement_d** %sum, align 8, !dbg !4571
  %203 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4572
  %op309 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %203, i32 0, i32 1, !dbg !4572
  %204 = load %union.tree_node*, %union.tree_node** %op309, align 8, !dbg !4572
  %common310 = bitcast %union.tree_node* %204 to %struct.tree_common*, !dbg !4572
  %type311 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common310, i32 0, i32 2, !dbg !4572
  %205 = load %union.tree_node*, %union.tree_node** %type311, align 8, !dbg !4572
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4572
  %call312 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %205, %union.tree_node* %206), !dbg !4572
  %207 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4573
  %op313 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %207, i32 0, i32 1, !dbg !4574
  store %union.tree_node* %call312, %union.tree_node** %op313, align 8, !dbg !4575
  %208 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4576
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %208, i32 0, i32 0, !dbg !4577
  store i32 0, i32* %rank, align 8, !dbg !4578
  %209 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !4579
  %call314 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %209), !dbg !4580
  %210 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4581
  %op315 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %210, i32 0, i32 1, !dbg !4582
  store %union.tree_node* %call314, %union.tree_node** %op315, align 8, !dbg !4583
  br label %for.inc316, !dbg !4584

for.inc316:                                       ; preds = %if.end302
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi0), !dbg !4536
  br label %for.cond284, !dbg !4536, !llvm.loop !4585

for.end317:                                       ; preds = %for.cond284
  %211 = load %union.tree_node*, %union.tree_node** %tmpvar, align 8, !dbg !4587
  %212 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4588
  %op318 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %212, i32 0, i32 1, !dbg !4589
  %213 = load %union.tree_node*, %union.tree_node** %op318, align 8, !dbg !4589
  %214 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4590
  %op319 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %214, i32 0, i32 2, !dbg !4591
  %215 = load %union.tree_node*, %union.tree_node** %op319, align 8, !dbg !4591
  %216 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4592
  %oecode320 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %216, i32 0, i32 1, !dbg !4593
  %217 = load i32, i32* %oecode320, align 4, !dbg !4593
  %call321 = call %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %211, %union.tree_node* %213, %union.tree_node* %215, i32 %217), !dbg !4594
  store %union.gimple_statement_d* %call321, %union.gimple_statement_d** %prod, align 8, !dbg !4595
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4596
  %tobool322 = icmp ne %struct._IO_FILE* %218, null, !dbg !4596
  br i1 %tobool322, label %land.lhs.true323, label %if.end334, !dbg !4598

land.lhs.true323:                                 ; preds = %for.end317
  %219 = load i32, i32* @dump_flags, align 4, !dbg !4599
  %and324 = and i32 %219, 8, !dbg !4600
  %tobool325 = icmp ne i32 %and324, 0, !dbg !4600
  br i1 %tobool325, label %if.then326, label %if.end334, !dbg !4601

if.then326:                                       ; preds = %land.lhs.true323
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4602
  %221 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4604
  %oecode327 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %221, i32 0, i32 1, !dbg !4605
  %222 = load i32, i32* %oecode327, align 4, !dbg !4605
  %cmp328 = icmp eq i32 %222, 65, !dbg !4606
  %223 = zext i1 %cmp328 to i64, !dbg !4604
  %cond330 = select i1 %cmp328, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0), !dbg !4604
  %call331 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %220, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), i8* %cond330), !dbg !4607
  %224 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4608
  %225 = load %struct.oecount_s*, %struct.oecount_s** %c186, align 8, !dbg !4609
  %op332 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %225, i32 0, i32 2, !dbg !4610
  %226 = load %union.tree_node*, %union.tree_node** %op332, align 8, !dbg !4610
  call void @print_generic_expr(%struct._IO_FILE* %224, %union.tree_node* %226, i32 0), !dbg !4611
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4612
  %call333 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %227, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !4613
  br label %if.end334, !dbg !4614

if.end334:                                        ; preds = %if.then326, %land.lhs.true323, %for.end317
  %228 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prod, align 8, !dbg !4615
  %call335 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %228), !dbg !4616
  %229 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4617
  %op336 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %229, i32 0, i32 1, !dbg !4618
  store %union.tree_node* %call335, %union.tree_node** %op336, align 8, !dbg !4619
  %230 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4620
  %op337 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %230, i32 0, i32 1, !dbg !4621
  %231 = load %union.tree_node*, %union.tree_node** %op337, align 8, !dbg !4621
  %call338 = call i64 @get_rank(%union.tree_node* %231), !dbg !4622
  %conv339 = trunc i64 %call338 to i32, !dbg !4622
  %232 = load %struct.operand_entry*, %struct.operand_entry** %oe1260, align 8, !dbg !4623
  %rank340 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %232, i32 0, i32 0, !dbg !4624
  store i32 %conv339, i32* %rank340, align 8, !dbg !4625
  %233 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4626
  %234 = load i32, i32* %first, align 4, !dbg !4626
  %idxprom341 = sext i32 %234 to i64, !dbg !4626
  %arrayidx342 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %233, i64 %idxprom341, !dbg !4626
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %arrayidx342), !dbg !4626
  store i8 1, i8* %changed, align 1, !dbg !4627
  br label %if.end343, !dbg !4628

if.end343:                                        ; preds = %if.end334, %for.end256
  %235 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4629
  %tobool344 = icmp ne %struct.VEC_oecount_heap* %235, null, !dbg !4629
  br i1 %tobool344, label %cond.true345, label %cond.false347, !dbg !4629

cond.true345:                                     ; preds = %if.end343
  %236 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4629
  %base346 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %236, i32 0, i32 0, !dbg !4629
  br label %cond.end348, !dbg !4629

cond.false347:                                    ; preds = %if.end343
  br label %cond.end348, !dbg !4629

cond.end348:                                      ; preds = %cond.false347, %cond.true345
  %cond349 = phi %struct.VEC_oecount_base* [ %base346, %cond.true345 ], [ null, %cond.false347 ], !dbg !4629
  call void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %cond349), !dbg !4629
  br label %while.cond, !dbg !4413, !llvm.loop !4630

while.end:                                        ; preds = %if.then197, %cond.end181
  store i32 0, i32* %i, align 4, !dbg !4632
  br label %for.cond350, !dbg !4634

for.cond350:                                      ; preds = %for.inc363, %while.end
  %237 = load i32, i32* %i, align 4, !dbg !4635
  %238 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4637
  %239 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %238, align 8, !dbg !4637
  %tobool351 = icmp ne %struct.VEC_operand_entry_t_heap* %239, null, !dbg !4637
  br i1 %tobool351, label %cond.true352, label %cond.false354, !dbg !4637

cond.true352:                                     ; preds = %for.cond350
  %240 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !4637
  %241 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %240, align 8, !dbg !4637
  %base353 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %241, i32 0, i32 0, !dbg !4637
  br label %cond.end355, !dbg !4637

cond.false354:                                    ; preds = %for.cond350
  br label %cond.end355, !dbg !4637

cond.end355:                                      ; preds = %cond.false354, %cond.true352
  %cond356 = phi %struct.VEC_operand_entry_t_base* [ %base353, %cond.true352 ], [ null, %cond.false354 ], !dbg !4637
  %call357 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond356), !dbg !4637
  %cmp358 = icmp ult i32 %237, %call357, !dbg !4638
  br i1 %cmp358, label %for.body360, label %for.end365, !dbg !4639

for.body360:                                      ; preds = %cond.end355
  %242 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4640
  %243 = load i32, i32* %i, align 4, !dbg !4640
  %idxprom361 = zext i32 %243 to i64, !dbg !4640
  %arrayidx362 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %242, i64 %idxprom361, !dbg !4640
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %arrayidx362), !dbg !4640
  br label %for.inc363, !dbg !4640

for.inc363:                                       ; preds = %for.body360
  %244 = load i32, i32* %i, align 4, !dbg !4641
  %inc364 = add i32 %244, 1, !dbg !4641
  store i32 %inc364, i32* %i, align 4, !dbg !4641
  br label %for.cond350, !dbg !4642, !llvm.loop !4643

for.end365:                                       ; preds = %cond.end355
  %245 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %subops, align 8, !dbg !4645
  %246 = bitcast %struct.VEC_operand_entry_t_heap** %245 to i8*, !dbg !4645
  call void @free(i8* %246), !dbg !4646
  call void @VEC_oecount_heap_free(%struct.VEC_oecount_heap** @cvec), !dbg !4647
  %247 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4648
  %popcount366 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %247, i32 0, i32 0, !dbg !4648
  %248 = load i8*, i8** %popcount366, align 8, !dbg !4648
  call void @free(i8* %248), !dbg !4648
  %249 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates, align 8, !dbg !4648
  %250 = bitcast %struct.simple_bitmap_def* %249 to i8*, !dbg !4648
  call void @free(i8* %250), !dbg !4648
  %251 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4649
  %popcount367 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %251, i32 0, i32 0, !dbg !4649
  %252 = load i8*, i8** %popcount367, align 8, !dbg !4649
  call void @free(i8* %252), !dbg !4649
  %253 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %candidates2, align 8, !dbg !4649
  %254 = bitcast %struct.simple_bitmap_def* %253 to i8*, !dbg !4649
  call void @free(i8* %254), !dbg !4649
  %255 = load i8, i8* %changed, align 1, !dbg !4650
  store i8 %255, i8* %retval, align 1, !dbg !4651
  br label %return, !dbg !4651

return:                                           ; preds = %for.end365, %if.then30, %if.then
  %256 = load i8, i8* %retval, align 1, !dbg !4652
  ret i8 %256, !dbg !4652
}

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %vec_) #0 !dbg !4653 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !4656, metadata !DIExpression()), !dbg !4657
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !4657
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %0, null, !dbg !4657
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4657

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !4657
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %1, i32 0, i32 0, !dbg !4657
  %2 = load i32, i32* %num, align 8, !dbg !4657
  %tobool1 = icmp ne i32 %2, 0, !dbg !4657
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !4658
  %land.ext = zext i1 %3 to i32, !dbg !4657
  %4 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !4657
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %4, i32 0, i32 2, !dbg !4657
  %5 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !4657
  %num2 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %5, i32 0, i32 0, !dbg !4657
  %6 = load i32, i32* %num2, align 8, !dbg !4657
  %sub = sub i32 %6, 1, !dbg !4657
  %idxprom = zext i32 %sub to i64, !dbg !4657
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !4657
  %7 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !4657
  ret %struct.operand_entry* %7, !dbg !4657
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_visited_stmt_chain(%union.tree_node* %var) #0 !dbg !4659 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4662, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4666, metadata !DIExpression()), !dbg !4667
  br label %while.body, !dbg !4668

while.body:                                       ; preds = %entry, %if.end7
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4669
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4669
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4669
  %bf.load = load i64, i64* %1, align 8, !dbg !4669
  %bf.clear = and i64 %bf.load, 65535, !dbg !4669
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4669
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4672
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4673

lor.lhs.false:                                    ; preds = %while.body
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4674
  %call = call zeroext i8 @has_zero_uses(%union.tree_node* %2), !dbg !4675
  %tobool = icmp ne i8 %call, 0, !dbg !4675
  br i1 %tobool, label %if.end, label %if.then, !dbg !4676

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %return, !dbg !4677

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4678
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !4678
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4678
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4678
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !4679
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4680
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %5), !dbg !4682
  %tobool2 = icmp ne i8 %call1, 0, !dbg !4682
  br i1 %tobool2, label %lor.lhs.false3, label %if.then6, !dbg !4683

lor.lhs.false3:                                   ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4684
  %call4 = call zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %6), !dbg !4685
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4685
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !4686

if.then6:                                         ; preds = %lor.lhs.false3, %if.end
  br label %return, !dbg !4687

if.end7:                                          ; preds = %lor.lhs.false3
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4688
  %call8 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !4689
  store %union.tree_node* %call8, %union.tree_node** %var.addr, align 8, !dbg !4690
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4691
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %8), !dbg !4692
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4692
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4692
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4692
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4693
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4694
  call void @release_defs(%union.gimple_statement_d* %11), !dbg !4695
  br label %while.body, !dbg !4668, !llvm.loop !4696

return:                                           ; preds = %if.then6, %if.then
  ret void, !dbg !4698
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_expr_tree(%union.gimple_statement_d* %stmt, i32 %opindex, %struct.VEC_operand_entry_t_heap* %ops, i8 zeroext %moved) #0 !dbg !4699 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %opindex.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap*, align 8
  %moved.addr = alloca i8, align 1
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %oe = alloca %struct.operand_entry*, align 8
  %oe1 = alloca %struct.operand_entry*, align 8
  %oe2 = alloca %struct.operand_entry*, align 8
  %oe3 = alloca %struct.operand_entry*, align 8
  %temp = alloca %struct.operand_entry, align 8
  %temp73 = alloca %struct.operand_entry, align 8
  %oe195 = alloca %struct.operand_entry*, align 8
  %oe296 = alloca %struct.operand_entry*, align 8
  %gsinow = alloca %struct.gimple_stmt_iterator, align 8
  %gsirhs1 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %count = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp184 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4702, metadata !DIExpression()), !dbg !4703
  store i32 %opindex, i32* %opindex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opindex.addr, metadata !4704, metadata !DIExpression()), !dbg !4705
  store %struct.VEC_operand_entry_t_heap* %ops, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap** %ops.addr, metadata !4706, metadata !DIExpression()), !dbg !4707
  store i8 %moved, i8* %moved.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %moved.addr, metadata !4708, metadata !DIExpression()), !dbg !4709
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !4710, metadata !DIExpression()), !dbg !4711
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4712
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !4713
  store %union.tree_node* %call, %union.tree_node** %rhs1, align 8, !dbg !4711
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !4714, metadata !DIExpression()), !dbg !4715
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4716
  %call1 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %1), !dbg !4717
  store %union.tree_node* %call1, %union.tree_node** %rhs2, align 8, !dbg !4715
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !4718, metadata !DIExpression()), !dbg !4719
  %2 = load i32, i32* %opindex.addr, align 4, !dbg !4720
  %add = add i32 %2, 3, !dbg !4722
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4723
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %3, null, !dbg !4723
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4723

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4723
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %4, i32 0, i32 0, !dbg !4723
  br label %cond.end, !dbg !4723

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4723

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4723
  %call2 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond), !dbg !4723
  %cmp = icmp eq i32 %add, %call2, !dbg !4724
  br i1 %cmp, label %if.then, label %if.end83, !dbg !4725

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe1, metadata !4726, metadata !DIExpression()), !dbg !4728
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe2, metadata !4729, metadata !DIExpression()), !dbg !4730
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe3, metadata !4731, metadata !DIExpression()), !dbg !4732
  %5 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4733
  %tobool3 = icmp ne %struct.VEC_operand_entry_t_heap* %5, null, !dbg !4733
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !4733

cond.true4:                                       ; preds = %if.then
  %6 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4733
  %base5 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %6, i32 0, i32 0, !dbg !4733
  br label %cond.end7, !dbg !4733

cond.false6:                                      ; preds = %if.then
  br label %cond.end7, !dbg !4733

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_operand_entry_t_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !4733
  %7 = load i32, i32* %opindex.addr, align 4, !dbg !4733
  %call9 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond8, i32 %7), !dbg !4733
  store %struct.operand_entry* %call9, %struct.operand_entry** %oe1, align 8, !dbg !4734
  %8 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4735
  %tobool10 = icmp ne %struct.VEC_operand_entry_t_heap* %8, null, !dbg !4735
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !4735

cond.true11:                                      ; preds = %cond.end7
  %9 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4735
  %base12 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %9, i32 0, i32 0, !dbg !4735
  br label %cond.end14, !dbg !4735

cond.false13:                                     ; preds = %cond.end7
  br label %cond.end14, !dbg !4735

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_operand_entry_t_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !4735
  %10 = load i32, i32* %opindex.addr, align 4, !dbg !4735
  %add16 = add i32 %10, 1, !dbg !4735
  %call17 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond15, i32 %add16), !dbg !4735
  store %struct.operand_entry* %call17, %struct.operand_entry** %oe2, align 8, !dbg !4736
  %11 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4737
  %tobool18 = icmp ne %struct.VEC_operand_entry_t_heap* %11, null, !dbg !4737
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !4737

cond.true19:                                      ; preds = %cond.end14
  %12 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4737
  %base20 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %12, i32 0, i32 0, !dbg !4737
  br label %cond.end22, !dbg !4737

cond.false21:                                     ; preds = %cond.end14
  br label %cond.end22, !dbg !4737

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_operand_entry_t_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !4737
  %13 = load i32, i32* %opindex.addr, align 4, !dbg !4737
  %add24 = add i32 %13, 2, !dbg !4737
  %call25 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond23, i32 %add24), !dbg !4737
  store %struct.operand_entry* %call25, %struct.operand_entry** %oe3, align 8, !dbg !4738
  %14 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4739
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %14, i32 0, i32 0, !dbg !4741
  %15 = load i32, i32* %rank, align 8, !dbg !4741
  %16 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4742
  %rank26 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %16, i32 0, i32 0, !dbg !4743
  %17 = load i32, i32* %rank26, align 8, !dbg !4743
  %cmp27 = icmp eq i32 %15, %17, !dbg !4744
  br i1 %cmp27, label %land.lhs.true, label %lor.lhs.false, !dbg !4745

land.lhs.true:                                    ; preds = %cond.end22
  %18 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4746
  %rank28 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i32 0, i32 0, !dbg !4747
  %19 = load i32, i32* %rank28, align 8, !dbg !4747
  %20 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4748
  %rank29 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %20, i32 0, i32 0, !dbg !4749
  %21 = load i32, i32* %rank29, align 8, !dbg !4749
  %cmp30 = icmp ne i32 %19, %21, !dbg !4750
  br i1 %cmp30, label %if.then41, label %lor.lhs.false, !dbg !4751

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end22
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4752
  %23 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4753
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %23, i32 0, i32 1, !dbg !4754
  %24 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4754
  %call31 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %22, %union.tree_node* %24), !dbg !4755
  %conv = zext i8 %call31 to i32, !dbg !4755
  %tobool32 = icmp ne i32 %conv, 0, !dbg !4755
  br i1 %tobool32, label %land.lhs.true33, label %if.else, !dbg !4756

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4757
  %26 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4758
  %op34 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %26, i32 0, i32 1, !dbg !4759
  %27 = load %union.tree_node*, %union.tree_node** %op34, align 8, !dbg !4759
  %call35 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %25, %union.tree_node* %27), !dbg !4760
  %tobool36 = icmp ne i8 %call35, 0, !dbg !4760
  br i1 %tobool36, label %if.else, label %land.lhs.true37, !dbg !4761

land.lhs.true37:                                  ; preds = %land.lhs.true33
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4762
  %29 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4763
  %op38 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %29, i32 0, i32 1, !dbg !4764
  %30 = load %union.tree_node*, %union.tree_node** %op38, align 8, !dbg !4764
  %call39 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %28, %union.tree_node* %30), !dbg !4765
  %tobool40 = icmp ne i8 %call39, 0, !dbg !4765
  br i1 %tobool40, label %if.else, label %if.then41, !dbg !4766

if.then41:                                        ; preds = %land.lhs.true37, %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.operand_entry* %temp, metadata !4767, metadata !DIExpression()), !dbg !4769
  %31 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4770
  %32 = bitcast %struct.operand_entry* %temp to i8*, !dbg !4771
  %33 = bitcast %struct.operand_entry* %31 to i8*, !dbg !4771
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !4771
  %34 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4772
  %op42 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %34, i32 0, i32 1, !dbg !4773
  %35 = load %union.tree_node*, %union.tree_node** %op42, align 8, !dbg !4773
  %36 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4774
  %op43 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %36, i32 0, i32 1, !dbg !4775
  store %union.tree_node* %35, %union.tree_node** %op43, align 8, !dbg !4776
  %37 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4777
  %rank44 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %37, i32 0, i32 0, !dbg !4778
  %38 = load i32, i32* %rank44, align 8, !dbg !4778
  %39 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4779
  %rank45 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %39, i32 0, i32 0, !dbg !4780
  store i32 %38, i32* %rank45, align 8, !dbg !4781
  %op46 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp, i32 0, i32 1, !dbg !4782
  %40 = load %union.tree_node*, %union.tree_node** %op46, align 8, !dbg !4782
  %41 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4783
  %op47 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %41, i32 0, i32 1, !dbg !4784
  store %union.tree_node* %40, %union.tree_node** %op47, align 8, !dbg !4785
  %rank48 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp, i32 0, i32 0, !dbg !4786
  %42 = load i32, i32* %rank48, align 8, !dbg !4786
  %43 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4787
  %rank49 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %43, i32 0, i32 0, !dbg !4788
  store i32 %42, i32* %rank49, align 8, !dbg !4789
  br label %if.end82, !dbg !4790

if.else:                                          ; preds = %land.lhs.true37, %land.lhs.true33, %lor.lhs.false
  %44 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4791
  %rank50 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %44, i32 0, i32 0, !dbg !4793
  %45 = load i32, i32* %rank50, align 8, !dbg !4793
  %46 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4794
  %rank51 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %46, i32 0, i32 0, !dbg !4795
  %47 = load i32, i32* %rank51, align 8, !dbg !4795
  %cmp52 = icmp eq i32 %45, %47, !dbg !4796
  br i1 %cmp52, label %land.lhs.true54, label %lor.lhs.false59, !dbg !4797

land.lhs.true54:                                  ; preds = %if.else
  %48 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4798
  %rank55 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %48, i32 0, i32 0, !dbg !4799
  %49 = load i32, i32* %rank55, align 8, !dbg !4799
  %50 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4800
  %rank56 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %50, i32 0, i32 0, !dbg !4801
  %51 = load i32, i32* %rank56, align 8, !dbg !4801
  %cmp57 = icmp ne i32 %49, %51, !dbg !4802
  br i1 %cmp57, label %if.then72, label %lor.lhs.false59, !dbg !4803

lor.lhs.false59:                                  ; preds = %land.lhs.true54, %if.else
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4804
  %53 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4805
  %op60 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %53, i32 0, i32 1, !dbg !4806
  %54 = load %union.tree_node*, %union.tree_node** %op60, align 8, !dbg !4806
  %call61 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %52, %union.tree_node* %54), !dbg !4807
  %conv62 = zext i8 %call61 to i32, !dbg !4807
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !4807
  br i1 %tobool63, label %land.lhs.true64, label %if.end, !dbg !4808

land.lhs.true64:                                  ; preds = %lor.lhs.false59
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4809
  %56 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4810
  %op65 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %56, i32 0, i32 1, !dbg !4811
  %57 = load %union.tree_node*, %union.tree_node** %op65, align 8, !dbg !4811
  %call66 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %55, %union.tree_node* %57), !dbg !4812
  %tobool67 = icmp ne i8 %call66, 0, !dbg !4812
  br i1 %tobool67, label %if.end, label %land.lhs.true68, !dbg !4813

land.lhs.true68:                                  ; preds = %land.lhs.true64
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4814
  %59 = load %struct.operand_entry*, %struct.operand_entry** %oe3, align 8, !dbg !4815
  %op69 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %59, i32 0, i32 1, !dbg !4816
  %60 = load %union.tree_node*, %union.tree_node** %op69, align 8, !dbg !4816
  %call70 = call zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %58, %union.tree_node* %60), !dbg !4817
  %tobool71 = icmp ne i8 %call70, 0, !dbg !4817
  br i1 %tobool71, label %if.end, label %if.then72, !dbg !4818

if.then72:                                        ; preds = %land.lhs.true68, %land.lhs.true54
  call void @llvm.dbg.declare(metadata %struct.operand_entry* %temp73, metadata !4819, metadata !DIExpression()), !dbg !4821
  %61 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4822
  %62 = bitcast %struct.operand_entry* %temp73 to i8*, !dbg !4823
  %63 = bitcast %struct.operand_entry* %61 to i8*, !dbg !4823
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 16, i1 false), !dbg !4823
  %64 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4824
  %op74 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %64, i32 0, i32 1, !dbg !4825
  %65 = load %union.tree_node*, %union.tree_node** %op74, align 8, !dbg !4825
  %66 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4826
  %op75 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %66, i32 0, i32 1, !dbg !4827
  store %union.tree_node* %65, %union.tree_node** %op75, align 8, !dbg !4828
  %67 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4829
  %rank76 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %67, i32 0, i32 0, !dbg !4830
  %68 = load i32, i32* %rank76, align 8, !dbg !4830
  %69 = load %struct.operand_entry*, %struct.operand_entry** %oe2, align 8, !dbg !4831
  %rank77 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %69, i32 0, i32 0, !dbg !4832
  store i32 %68, i32* %rank77, align 8, !dbg !4833
  %op78 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp73, i32 0, i32 1, !dbg !4834
  %70 = load %union.tree_node*, %union.tree_node** %op78, align 8, !dbg !4834
  %71 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4835
  %op79 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %71, i32 0, i32 1, !dbg !4836
  store %union.tree_node* %70, %union.tree_node** %op79, align 8, !dbg !4837
  %rank80 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp73, i32 0, i32 0, !dbg !4838
  %72 = load i32, i32* %rank80, align 8, !dbg !4838
  %73 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4839
  %rank81 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %73, i32 0, i32 0, !dbg !4840
  store i32 %72, i32* %rank81, align 8, !dbg !4841
  br label %if.end, !dbg !4842

if.end:                                           ; preds = %if.then72, %land.lhs.true68, %land.lhs.true64, %lor.lhs.false59
  br label %if.end82

if.end82:                                         ; preds = %if.end, %if.then41
  br label %if.end83, !dbg !4843

if.end83:                                         ; preds = %if.end82, %cond.end
  %74 = load i32, i32* %opindex.addr, align 4, !dbg !4844
  %add84 = add i32 %74, 2, !dbg !4846
  %75 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4847
  %tobool85 = icmp ne %struct.VEC_operand_entry_t_heap* %75, null, !dbg !4847
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !4847

cond.true86:                                      ; preds = %if.end83
  %76 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4847
  %base87 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %76, i32 0, i32 0, !dbg !4847
  br label %cond.end89, !dbg !4847

cond.false88:                                     ; preds = %if.end83
  br label %cond.end89, !dbg !4847

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.VEC_operand_entry_t_base* [ %base87, %cond.true86 ], [ null, %cond.false88 ], !dbg !4847
  %call91 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond90), !dbg !4847
  %cmp92 = icmp eq i32 %add84, %call91, !dbg !4848
  br i1 %cmp92, label %if.then94, label %if.end145, !dbg !4849

if.then94:                                        ; preds = %cond.end89
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe195, metadata !4850, metadata !DIExpression()), !dbg !4852
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe296, metadata !4853, metadata !DIExpression()), !dbg !4854
  %77 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4855
  %tobool97 = icmp ne %struct.VEC_operand_entry_t_heap* %77, null, !dbg !4855
  br i1 %tobool97, label %cond.true98, label %cond.false100, !dbg !4855

cond.true98:                                      ; preds = %if.then94
  %78 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4855
  %base99 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %78, i32 0, i32 0, !dbg !4855
  br label %cond.end101, !dbg !4855

cond.false100:                                    ; preds = %if.then94
  br label %cond.end101, !dbg !4855

cond.end101:                                      ; preds = %cond.false100, %cond.true98
  %cond102 = phi %struct.VEC_operand_entry_t_base* [ %base99, %cond.true98 ], [ null, %cond.false100 ], !dbg !4855
  %79 = load i32, i32* %opindex.addr, align 4, !dbg !4855
  %call103 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond102, i32 %79), !dbg !4855
  store %struct.operand_entry* %call103, %struct.operand_entry** %oe195, align 8, !dbg !4856
  %80 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4857
  %tobool104 = icmp ne %struct.VEC_operand_entry_t_heap* %80, null, !dbg !4857
  br i1 %tobool104, label %cond.true105, label %cond.false107, !dbg !4857

cond.true105:                                     ; preds = %cond.end101
  %81 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4857
  %base106 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %81, i32 0, i32 0, !dbg !4857
  br label %cond.end108, !dbg !4857

cond.false107:                                    ; preds = %cond.end101
  br label %cond.end108, !dbg !4857

cond.end108:                                      ; preds = %cond.false107, %cond.true105
  %cond109 = phi %struct.VEC_operand_entry_t_base* [ %base106, %cond.true105 ], [ null, %cond.false107 ], !dbg !4857
  %82 = load i32, i32* %opindex.addr, align 4, !dbg !4857
  %add110 = add i32 %82, 1, !dbg !4857
  %call111 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond109, i32 %add110), !dbg !4857
  store %struct.operand_entry* %call111, %struct.operand_entry** %oe296, align 8, !dbg !4858
  %83 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4859
  %84 = load %struct.operand_entry*, %struct.operand_entry** %oe195, align 8, !dbg !4861
  %op112 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %84, i32 0, i32 1, !dbg !4862
  %85 = load %union.tree_node*, %union.tree_node** %op112, align 8, !dbg !4862
  %cmp113 = icmp ne %union.tree_node* %83, %85, !dbg !4863
  br i1 %cmp113, label %if.then119, label %lor.lhs.false115, !dbg !4864

lor.lhs.false115:                                 ; preds = %cond.end108
  %86 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !4865
  %87 = load %struct.operand_entry*, %struct.operand_entry** %oe296, align 8, !dbg !4866
  %op116 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %87, i32 0, i32 1, !dbg !4867
  %88 = load %union.tree_node*, %union.tree_node** %op116, align 8, !dbg !4867
  %cmp117 = icmp ne %union.tree_node* %86, %88, !dbg !4868
  br i1 %cmp117, label %if.then119, label %if.end144, !dbg !4869

if.then119:                                       ; preds = %lor.lhs.false115, %cond.end108
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4870
  %tobool120 = icmp ne %struct._IO_FILE* %89, null, !dbg !4870
  br i1 %tobool120, label %land.lhs.true121, label %if.end125, !dbg !4873

land.lhs.true121:                                 ; preds = %if.then119
  %90 = load i32, i32* @dump_flags, align 4, !dbg !4874
  %and = and i32 %90, 8, !dbg !4875
  %tobool122 = icmp ne i32 %and, 0, !dbg !4875
  br i1 %tobool122, label %if.then123, label %if.end125, !dbg !4876

if.then123:                                       ; preds = %land.lhs.true121
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4877
  %call124 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)), !dbg !4879
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4880
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4881
  call void @print_gimple_stmt(%struct._IO_FILE* %92, %union.gimple_statement_d* %93, i32 0, i32 0), !dbg !4882
  br label %if.end125, !dbg !4883

if.end125:                                        ; preds = %if.then123, %land.lhs.true121, %if.then119
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4884
  %95 = load %struct.operand_entry*, %struct.operand_entry** %oe195, align 8, !dbg !4885
  %op126 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %95, i32 0, i32 1, !dbg !4886
  %96 = load %union.tree_node*, %union.tree_node** %op126, align 8, !dbg !4886
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %94, %union.tree_node* %96), !dbg !4887
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4888
  %98 = load %struct.operand_entry*, %struct.operand_entry** %oe296, align 8, !dbg !4889
  %op127 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %98, i32 0, i32 1, !dbg !4890
  %99 = load %union.tree_node*, %union.tree_node** %op127, align 8, !dbg !4890
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %97, %union.tree_node* %99), !dbg !4891
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4892
  call void @update_stmt(%union.gimple_statement_d* %100), !dbg !4893
  %101 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4894
  %102 = load %struct.operand_entry*, %struct.operand_entry** %oe195, align 8, !dbg !4896
  %op128 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %102, i32 0, i32 1, !dbg !4897
  %103 = load %union.tree_node*, %union.tree_node** %op128, align 8, !dbg !4897
  %cmp129 = icmp ne %union.tree_node* %101, %103, !dbg !4898
  br i1 %cmp129, label %land.lhs.true131, label %if.end136, !dbg !4899

land.lhs.true131:                                 ; preds = %if.end125
  %104 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4900
  %105 = load %struct.operand_entry*, %struct.operand_entry** %oe296, align 8, !dbg !4901
  %op132 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %105, i32 0, i32 1, !dbg !4902
  %106 = load %union.tree_node*, %union.tree_node** %op132, align 8, !dbg !4902
  %cmp133 = icmp ne %union.tree_node* %104, %106, !dbg !4903
  br i1 %cmp133, label %if.then135, label %if.end136, !dbg !4904

if.then135:                                       ; preds = %land.lhs.true131
  %107 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4905
  call void @remove_visited_stmt_chain(%union.tree_node* %107), !dbg !4906
  br label %if.end136, !dbg !4906

if.end136:                                        ; preds = %if.then135, %land.lhs.true131, %if.end125
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4907
  %tobool137 = icmp ne %struct._IO_FILE* %108, null, !dbg !4907
  br i1 %tobool137, label %land.lhs.true138, label %if.end143, !dbg !4909

land.lhs.true138:                                 ; preds = %if.end136
  %109 = load i32, i32* @dump_flags, align 4, !dbg !4910
  %and139 = and i32 %109, 8, !dbg !4911
  %tobool140 = icmp ne i32 %and139, 0, !dbg !4911
  br i1 %tobool140, label %if.then141, label %if.end143, !dbg !4912

if.then141:                                       ; preds = %land.lhs.true138
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4913
  %call142 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)), !dbg !4915
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4916
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4917
  call void @print_gimple_stmt(%struct._IO_FILE* %111, %union.gimple_statement_d* %112, i32 0, i32 0), !dbg !4918
  br label %if.end143, !dbg !4919

if.end143:                                        ; preds = %if.then141, %land.lhs.true138, %if.end136
  br label %if.end144, !dbg !4920

if.end144:                                        ; preds = %if.end143, %lor.lhs.false115
  br label %return, !dbg !4921

if.end145:                                        ; preds = %cond.end89
  %113 = load i32, i32* %opindex.addr, align 4, !dbg !4922
  %add146 = add i32 %113, 2, !dbg !4922
  %114 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4922
  %tobool147 = icmp ne %struct.VEC_operand_entry_t_heap* %114, null, !dbg !4922
  br i1 %tobool147, label %cond.true148, label %cond.false150, !dbg !4922

cond.true148:                                     ; preds = %if.end145
  %115 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4922
  %base149 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %115, i32 0, i32 0, !dbg !4922
  br label %cond.end151, !dbg !4922

cond.false150:                                    ; preds = %if.end145
  br label %cond.end151, !dbg !4922

cond.end151:                                      ; preds = %cond.false150, %cond.true148
  %cond152 = phi %struct.VEC_operand_entry_t_base* [ %base149, %cond.true148 ], [ null, %cond.false150 ], !dbg !4922
  %call153 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond152), !dbg !4922
  %cmp154 = icmp ult i32 %add146, %call153, !dbg !4922
  br i1 %cmp154, label %cond.false157, label %cond.true156, !dbg !4922

cond.true156:                                     ; preds = %cond.end151
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1395, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4922
  br label %cond.end158, !dbg !4922

cond.false157:                                    ; preds = %cond.end151
  br label %cond.end158, !dbg !4922

cond.end158:                                      ; preds = %cond.false157, %cond.true156
  %cond159 = phi i32 [ 0, %cond.true156 ], [ 0, %cond.false157 ], !dbg !4922
  %116 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4923
  %tobool160 = icmp ne %struct.VEC_operand_entry_t_heap* %116, null, !dbg !4923
  br i1 %tobool160, label %cond.true161, label %cond.false163, !dbg !4923

cond.true161:                                     ; preds = %cond.end158
  %117 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4923
  %base162 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %117, i32 0, i32 0, !dbg !4923
  br label %cond.end164, !dbg !4923

cond.false163:                                    ; preds = %cond.end158
  br label %cond.end164, !dbg !4923

cond.end164:                                      ; preds = %cond.false163, %cond.true161
  %cond165 = phi %struct.VEC_operand_entry_t_base* [ %base162, %cond.true161 ], [ null, %cond.false163 ], !dbg !4923
  %118 = load i32, i32* %opindex.addr, align 4, !dbg !4923
  %call166 = call %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond165, i32 %118), !dbg !4923
  store %struct.operand_entry* %call166, %struct.operand_entry** %oe, align 8, !dbg !4924
  %119 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4925
  %op167 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %119, i32 0, i32 1, !dbg !4927
  %120 = load %union.tree_node*, %union.tree_node** %op167, align 8, !dbg !4927
  %121 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !4928
  %cmp168 = icmp ne %union.tree_node* %120, %121, !dbg !4929
  br i1 %cmp168, label %if.then170, label %if.end201, !dbg !4930

if.then170:                                       ; preds = %cond.end164
  %122 = load i8, i8* %moved.addr, align 1, !dbg !4931
  %tobool171 = icmp ne i8 %122, 0, !dbg !4931
  br i1 %tobool171, label %if.end185, label %if.then172, !dbg !4934

if.then172:                                       ; preds = %if.then170
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsinow, metadata !4935, metadata !DIExpression()), !dbg !4937
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsirhs1, metadata !4938, metadata !DIExpression()), !dbg !4939
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !4940, metadata !DIExpression()), !dbg !4941
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4942
  store %union.gimple_statement_d* %123, %union.gimple_statement_d** %stmt1, align 8, !dbg !4941
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !4943, metadata !DIExpression()), !dbg !4944
  call void @llvm.dbg.declare(metadata i32* %count, metadata !4945, metadata !DIExpression()), !dbg !4946
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4947
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %124), !dbg !4948
  %125 = bitcast %struct.gimple_stmt_iterator* %gsinow to i8*, !dbg !4948
  %126 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4948
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 24, i1 false), !dbg !4948
  %127 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4949
  %tobool173 = icmp ne %struct.VEC_operand_entry_t_heap* %127, null, !dbg !4949
  br i1 %tobool173, label %cond.true174, label %cond.false176, !dbg !4949

cond.true174:                                     ; preds = %if.then172
  %128 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !4949
  %base175 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %128, i32 0, i32 0, !dbg !4949
  br label %cond.end177, !dbg !4949

cond.false176:                                    ; preds = %if.then172
  br label %cond.end177, !dbg !4949

cond.end177:                                      ; preds = %cond.false176, %cond.true174
  %cond178 = phi %struct.VEC_operand_entry_t_base* [ %base175, %cond.true174 ], [ null, %cond.false176 ], !dbg !4949
  %call179 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond178), !dbg !4949
  %129 = load i32, i32* %opindex.addr, align 4, !dbg !4950
  %sub = sub i32 %call179, %129, !dbg !4951
  %sub180 = sub i32 %sub, 2, !dbg !4952
  store i32 %sub180, i32* %count, align 4, !dbg !4953
  br label %while.cond, !dbg !4954

while.cond:                                       ; preds = %while.body, %cond.end177
  %130 = load i32, i32* %count, align 4, !dbg !4955
  %dec = add i32 %130, -1, !dbg !4955
  store i32 %dec, i32* %count, align 4, !dbg !4955
  %cmp181 = icmp ne i32 %130, 0, !dbg !4956
  br i1 %cmp181, label %while.body, label %while.end, !dbg !4954

while.body:                                       ; preds = %while.cond
  %131 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !4957
  %call183 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %131), !dbg !4957
  %ssa_name = bitcast %union.tree_node* %call183 to %struct.tree_ssa_name*, !dbg !4957
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4957
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4957
  store %union.gimple_statement_d* %132, %union.gimple_statement_d** %stmt2, align 8, !dbg !4959
  %133 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4960
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp184, %union.gimple_statement_d* %133), !dbg !4961
  %134 = bitcast %struct.gimple_stmt_iterator* %gsirhs1 to i8*, !dbg !4961
  %135 = bitcast %struct.gimple_stmt_iterator* %tmp184 to i8*, !dbg !4961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 24, i1 false), !dbg !4961
  call void @gsi_move_before(%struct.gimple_stmt_iterator* %gsirhs1, %struct.gimple_stmt_iterator* %gsinow), !dbg !4962
  call void @gsi_prev(%struct.gimple_stmt_iterator* %gsinow), !dbg !4963
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !4964
  store %union.gimple_statement_d* %136, %union.gimple_statement_d** %stmt1, align 8, !dbg !4965
  br label %while.cond, !dbg !4954, !llvm.loop !4966

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %moved.addr, align 1, !dbg !4968
  br label %if.end185, !dbg !4969

if.end185:                                        ; preds = %while.end, %if.then170
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4970
  %tobool186 = icmp ne %struct._IO_FILE* %137, null, !dbg !4970
  br i1 %tobool186, label %land.lhs.true187, label %if.end192, !dbg !4972

land.lhs.true187:                                 ; preds = %if.end185
  %138 = load i32, i32* @dump_flags, align 4, !dbg !4973
  %and188 = and i32 %138, 8, !dbg !4974
  %tobool189 = icmp ne i32 %and188, 0, !dbg !4974
  br i1 %tobool189, label %if.then190, label %if.end192, !dbg !4975

if.then190:                                       ; preds = %land.lhs.true187
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4976
  %call191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)), !dbg !4978
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4979
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4980
  call void @print_gimple_stmt(%struct._IO_FILE* %140, %union.gimple_statement_d* %141, i32 0, i32 0), !dbg !4981
  br label %if.end192, !dbg !4982

if.end192:                                        ; preds = %if.then190, %land.lhs.true187, %if.end185
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4983
  %143 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !4984
  %op193 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %143, i32 0, i32 1, !dbg !4985
  %144 = load %union.tree_node*, %union.tree_node** %op193, align 8, !dbg !4985
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %142, %union.tree_node* %144), !dbg !4986
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4987
  call void @update_stmt(%union.gimple_statement_d* %145), !dbg !4988
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4989
  %tobool194 = icmp ne %struct._IO_FILE* %146, null, !dbg !4989
  br i1 %tobool194, label %land.lhs.true195, label %if.end200, !dbg !4991

land.lhs.true195:                                 ; preds = %if.end192
  %147 = load i32, i32* @dump_flags, align 4, !dbg !4992
  %and196 = and i32 %147, 8, !dbg !4993
  %tobool197 = icmp ne i32 %and196, 0, !dbg !4993
  br i1 %tobool197, label %if.then198, label %if.end200, !dbg !4994

if.then198:                                       ; preds = %land.lhs.true195
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4995
  %call199 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)), !dbg !4997
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4998
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4999
  call void @print_gimple_stmt(%struct._IO_FILE* %149, %union.gimple_statement_d* %150, i32 0, i32 0), !dbg !5000
  br label %if.end200, !dbg !5001

if.end200:                                        ; preds = %if.then198, %land.lhs.true195, %if.end192
  br label %if.end201, !dbg !5002

if.end201:                                        ; preds = %if.end200, %cond.end164
  %151 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !5003
  %ssa_name202 = bitcast %union.tree_node* %151 to %struct.tree_ssa_name*, !dbg !5003
  %def_stmt203 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name202, i32 0, i32 2, !dbg !5003
  %152 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt203, align 8, !dbg !5003
  %153 = load i32, i32* %opindex.addr, align 4, !dbg !5004
  %add204 = add i32 %153, 1, !dbg !5005
  %154 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops.addr, align 8, !dbg !5006
  %155 = load i8, i8* %moved.addr, align 1, !dbg !5007
  call void @rewrite_expr_tree(%union.gimple_statement_d* %152, i32 %add204, %struct.VEC_operand_entry_t_heap* %154, i8 zeroext %155), !dbg !5008
  br label %return, !dbg !5009

return:                                           ; preds = %if.end201, %if.end144
  ret void, !dbg !5009
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %vec_) #0 !dbg !5010 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  store %struct.VEC_operand_entry_t_heap** %vec_, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %vec_.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5015
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %0, align 8, !dbg !5015
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %1, null, !dbg !5015
  br i1 %tobool, label %if.then, label %if.end, !dbg !5014

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5015
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %2, align 8, !dbg !5015
  %4 = bitcast %struct.VEC_operand_entry_t_heap* %3 to i8*, !dbg !5015
  call void @free(i8* %4), !dbg !5015
  br label %if.end, !dbg !5015

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5014
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %5, align 8, !dbg !5014
  ret void, !dbg !5014
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !5017 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5020
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5021
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5021
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !5022
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !5022
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5023
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5024
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5025
  ret void, !dbg !5026
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !5027 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5028, metadata !DIExpression()), !dbg !5029
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5030
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5030
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5030

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5031
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !5032
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !5032
  br label %cond.end, !dbg !5030

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5030

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5030
  ret %struct.gimple_seq_node_d* %cond, !dbg !5033
}

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %op) #0 !dbg !5034 {
entry:
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %oe = alloca %struct.operand_entry*, align 8
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !5037, metadata !DIExpression()), !dbg !5038
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5039, metadata !DIExpression()), !dbg !5040
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !5041, metadata !DIExpression()), !dbg !5042
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !5043
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !5044
  %1 = bitcast i8* %call to %struct.operand_entry*, !dbg !5045
  store %struct.operand_entry* %1, %struct.operand_entry** %oe, align 8, !dbg !5042
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5046
  %3 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5047
  %op1 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i32 0, i32 1, !dbg !5048
  store %union.tree_node* %2, %union.tree_node** %op1, align 8, !dbg !5049
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5050
  %call2 = call i64 @get_rank(%union.tree_node* %4), !dbg !5051
  %conv = trunc i64 %call2 to i32, !dbg !5051
  %5 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5052
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i32 0, i32 0, !dbg !5053
  store i32 %conv, i32* %rank, align 8, !dbg !5054
  %6 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5055
  %7 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5055
  %call3 = call %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %6, %struct.operand_entry* %7), !dbg !5055
  ret void, !dbg !5056
}

declare dso_local void @swap_tree_operands(%union.gimple_statement_d*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5057 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5060, metadata !DIExpression()), !dbg !5061
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5062
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !5063
  ret %union.tree_node** %call, !dbg !5064
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5065 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5066, metadata !DIExpression()), !dbg !5067
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5068
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 2), !dbg !5069
  ret %union.tree_node** %call, !dbg !5070
}

; Function Attrs: noinline nounwind uwtable
define internal void @linearize_expr(%union.gimple_statement_d* %stmt) #0 !dbg !5071 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsinow = alloca %struct.gimple_stmt_iterator, align 8
  %gsirhs = alloca %struct.gimple_stmt_iterator, align 8
  %binlhs = alloca %union.gimple_statement_d*, align 8
  %binrhs = alloca %union.gimple_statement_d*, align 8
  %rhscode = alloca i32, align 4
  %newbinrhs = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5072, metadata !DIExpression()), !dbg !5073
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsinow, metadata !5074, metadata !DIExpression()), !dbg !5075
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsirhs, metadata !5076, metadata !DIExpression()), !dbg !5077
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %binlhs, metadata !5078, metadata !DIExpression()), !dbg !5079
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5080
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %0), !dbg !5080
  %ssa_name = bitcast %union.tree_node* %call to %struct.tree_ssa_name*, !dbg !5080
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5080
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5080
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %binlhs, align 8, !dbg !5079
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %binrhs, metadata !5081, metadata !DIExpression()), !dbg !5082
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5083
  %call1 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %2), !dbg !5083
  %ssa_name2 = bitcast %union.tree_node* %call1 to %struct.tree_ssa_name*, !dbg !5083
  %def_stmt3 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 2, !dbg !5083
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt3, align 8, !dbg !5083
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %binrhs, align 8, !dbg !5082
  call void @llvm.dbg.declare(metadata i32* %rhscode, metadata !5084, metadata !DIExpression()), !dbg !5085
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5086
  %call4 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !5087
  store i32 %call4, i32* %rhscode, align 4, !dbg !5085
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %newbinrhs, metadata !5088, metadata !DIExpression()), !dbg !5089
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %newbinrhs, align 8, !dbg !5089
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5090, metadata !DIExpression()), !dbg !5091
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5092
  %call5 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %5), !dbg !5093
  store %struct.loop* %call5, %struct.loop** %loop, align 8, !dbg !5091
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binlhs, align 8, !dbg !5094
  %7 = load i32, i32* %rhscode, align 4, !dbg !5094
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5094
  %call6 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %6, i32 %7, %struct.loop* %8), !dbg !5094
  %conv = zext i8 %call6 to i32, !dbg !5094
  %tobool = icmp ne i32 %conv, 0, !dbg !5094
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5094

land.lhs.true:                                    ; preds = %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5094
  %10 = load i32, i32* %rhscode, align 4, !dbg !5094
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5094
  %call7 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %9, i32 %10, %struct.loop* %11), !dbg !5094
  %conv8 = zext i8 %call7 to i32, !dbg !5094
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !5094
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !5094

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5094
  br label %cond.end, !dbg !5094

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5094

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5094
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5095
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %12), !dbg !5096
  %13 = bitcast %struct.gimple_stmt_iterator* %gsinow to i8*, !dbg !5096
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !5096
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5097
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp10, %union.gimple_statement_d* %15), !dbg !5098
  %16 = bitcast %struct.gimple_stmt_iterator* %gsirhs to i8*, !dbg !5098
  %17 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !5098
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !5098
  call void @gsi_move_before(%struct.gimple_stmt_iterator* %gsirhs, %struct.gimple_stmt_iterator* %gsinow), !dbg !5099
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5100
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5101
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %19), !dbg !5102
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %18, %union.tree_node* %call11), !dbg !5103
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5104
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binlhs, align 8, !dbg !5105
  %call12 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %21), !dbg !5106
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %20, %union.tree_node* %call12), !dbg !5107
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5108
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5109
  %call13 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %23), !dbg !5110
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %22, %union.tree_node* %call13), !dbg !5111
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5112
  %call14 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %24), !dbg !5112
  %base = bitcast %union.tree_node* %call14 to %struct.tree_base*, !dbg !5112
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !5112
  %bf.load = load i64, i64* %25, align 8, !dbg !5112
  %bf.clear = and i64 %bf.load, 65535, !dbg !5112
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5112
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5114
  br i1 %cmp, label %if.then, label %if.end, !dbg !5115

if.then:                                          ; preds = %cond.end
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5116
  %call16 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %26), !dbg !5116
  %ssa_name17 = bitcast %union.tree_node* %call16 to %struct.tree_ssa_name*, !dbg !5116
  %def_stmt18 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 2, !dbg !5116
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt18, align 8, !dbg !5116
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %newbinrhs, align 8, !dbg !5117
  br label %if.end, !dbg !5118

if.end:                                           ; preds = %if.then, %cond.end
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5119
  %tobool19 = icmp ne %struct._IO_FILE* %28, null, !dbg !5119
  br i1 %tobool19, label %land.lhs.true20, label %if.end24, !dbg !5121

land.lhs.true20:                                  ; preds = %if.end
  %29 = load i32, i32* @dump_flags, align 4, !dbg !5122
  %and = and i32 %29, 8, !dbg !5123
  %tobool21 = icmp ne i32 %and, 0, !dbg !5123
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !5124

if.then22:                                        ; preds = %land.lhs.true20
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5125
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0)), !dbg !5127
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5128
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5129
  call void @print_gimple_stmt(%struct._IO_FILE* %31, %union.gimple_statement_d* %32, i32 0, i32 0), !dbg !5130
  br label %if.end24, !dbg !5131

if.end24:                                         ; preds = %if.then22, %land.lhs.true20, %if.end
  %33 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 0), align 4, !dbg !5132
  %inc = add nsw i32 %33, 1, !dbg !5132
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 0), align 4, !dbg !5132
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5133
  call void @update_stmt(%union.gimple_statement_d* %34), !dbg !5134
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binlhs, align 8, !dbg !5135
  call void @update_stmt(%union.gimple_statement_d* %35), !dbg !5136
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5137
  call void @update_stmt(%union.gimple_statement_d* %36), !dbg !5138
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5139
  call void @gimple_set_visited(%union.gimple_statement_d* %37, i8 zeroext 1), !dbg !5140
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binlhs, align 8, !dbg !5141
  call void @gimple_set_visited(%union.gimple_statement_d* %38, i8 zeroext 1), !dbg !5142
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %binrhs, align 8, !dbg !5143
  call void @gimple_set_visited(%union.gimple_statement_d* %39, i8 zeroext 1), !dbg !5144
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newbinrhs, align 8, !dbg !5145
  %tobool25 = icmp ne %union.gimple_statement_d* %40, null, !dbg !5145
  br i1 %tobool25, label %land.lhs.true26, label %if.end31, !dbg !5147

land.lhs.true26:                                  ; preds = %if.end24
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newbinrhs, align 8, !dbg !5148
  %42 = load i32, i32* %rhscode, align 4, !dbg !5149
  %43 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5150
  %call27 = call zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %41, i32 %42, %struct.loop* %43), !dbg !5151
  %conv28 = zext i8 %call27 to i32, !dbg !5151
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !5151
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !5152

if.then30:                                        ; preds = %land.lhs.true26
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5153
  call void @linearize_expr(%union.gimple_statement_d* %44), !dbg !5154
  br label %if.end31, !dbg !5154

if.end31:                                         ; preds = %if.then30, %land.lhs.true26, %if.end24
  ret void, !dbg !5155
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_rank(%union.tree_node* %e) #0 !dbg !5156 {
entry:
  %retval = alloca i64, align 8
  %e.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %rank = alloca i64, align 8
  %maxrank = alloca i64, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %rhs = alloca %union.tree_node*, align 8
  store %union.tree_node* %e, %union.tree_node** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e.addr, metadata !5159, metadata !DIExpression()), !dbg !5160
  %0 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5161
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !5163
  %tobool = icmp ne i8 %call, 0, !dbg !5163
  br i1 %tobool, label %if.then, label %if.end, !dbg !5164

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8, !dbg !5165
  br label %return, !dbg !5165

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5166
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5166
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5166
  %bf.load = load i64, i64* %2, align 8, !dbg !5166
  %bf.clear = and i64 %bf.load, 65535, !dbg !5166
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5166
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5168
  br i1 %cmp, label %if.then1, label %if.end103, !dbg !5169

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5170, metadata !DIExpression()), !dbg !5172
  call void @llvm.dbg.declare(metadata i64* %rank, metadata !5173, metadata !DIExpression()), !dbg !5174
  call void @llvm.dbg.declare(metadata i64* %maxrank, metadata !5175, metadata !DIExpression()), !dbg !5176
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5177, metadata !DIExpression()), !dbg !5178
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5179, metadata !DIExpression()), !dbg !5180
  %3 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5181
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !5181
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5181
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5181
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5181
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5181
  %bf.load3 = load i64, i64* %5, align 8, !dbg !5181
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5181
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5181
  %cmp6 = icmp eq i32 %bf.cast5, 34, !dbg !5183
  br i1 %cmp6, label %land.lhs.true, label %if.end14, !dbg !5184

land.lhs.true:                                    ; preds = %if.then1
  %6 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5185
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5185
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5185
  %bf.load8 = load i64, i64* %7, align 8, !dbg !5185
  %bf.lshr = lshr i64 %bf.load8, 32, !dbg !5185
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !5185
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5185
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !5185
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !5186

if.then12:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5187
  %call13 = call i64 @find_operand_rank(%union.tree_node* %8), !dbg !5188
  store i64 %call13, i64* %retval, align 8, !dbg !5189
  br label %return, !dbg !5189

if.end14:                                         ; preds = %land.lhs.true, %if.then1
  %9 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5190
  %ssa_name15 = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !5190
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name15, i32 0, i32 2, !dbg !5190
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5190
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %stmt, align 8, !dbg !5191
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5192
  %call16 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %11), !dbg !5194
  %cmp17 = icmp eq %struct.basic_block_def* %call16, null, !dbg !5195
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !5196

if.then18:                                        ; preds = %if.end14
  store i64 0, i64* %retval, align 8, !dbg !5197
  br label %return, !dbg !5197

if.end19:                                         ; preds = %if.end14
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5198
  %call20 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %12), !dbg !5200
  %tobool21 = icmp ne i8 %call20, 0, !dbg !5200
  br i1 %tobool21, label %lor.lhs.false, label %if.then24, !dbg !5201

lor.lhs.false:                                    ; preds = %if.end19
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5202
  %call22 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %13), !dbg !5203
  %tobool23 = icmp ne %union.tree_node* %call22, null, !dbg !5203
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !5204

if.then24:                                        ; preds = %lor.lhs.false, %if.end19
  %14 = load i64*, i64** @bb_rank, align 8, !dbg !5205
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5206
  %call25 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %15), !dbg !5207
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call25, i32 0, i32 9, !dbg !5208
  %16 = load i32, i32* %index, align 8, !dbg !5208
  %idxprom = sext i32 %16 to i64, !dbg !5205
  %arrayidx = getelementptr inbounds i64, i64* %14, i64 %idxprom, !dbg !5205
  %17 = load i64, i64* %arrayidx, align 8, !dbg !5205
  store i64 %17, i64* %retval, align 8, !dbg !5209
  br label %return, !dbg !5209

if.end26:                                         ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5210
  %call27 = call i64 @find_operand_rank(%union.tree_node* %18), !dbg !5211
  store i64 %call27, i64* %rank, align 8, !dbg !5212
  %19 = load i64, i64* %rank, align 8, !dbg !5213
  %cmp28 = icmp ne i64 %19, -1, !dbg !5215
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !5216

if.then29:                                        ; preds = %if.end26
  %20 = load i64, i64* %rank, align 8, !dbg !5217
  store i64 %20, i64* %retval, align 8, !dbg !5218
  br label %return, !dbg !5218

if.end30:                                         ; preds = %if.end26
  store i64 0, i64* %rank, align 8, !dbg !5219
  %21 = load i64*, i64** @bb_rank, align 8, !dbg !5220
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5221
  %call31 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %22), !dbg !5222
  %index32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call31, i32 0, i32 9, !dbg !5223
  %23 = load i32, i32* %index32, align 8, !dbg !5223
  %idxprom33 = sext i32 %23 to i64, !dbg !5220
  %arrayidx34 = getelementptr inbounds i64, i64* %21, i64 %idxprom33, !dbg !5220
  %24 = load i64, i64* %arrayidx34, align 8, !dbg !5220
  store i64 %24, i64* %maxrank, align 8, !dbg !5224
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5225
  %call35 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %25), !dbg !5227
  %tobool36 = icmp ne i8 %call35, 0, !dbg !5227
  br i1 %tobool36, label %if.then37, label %if.else67, !dbg !5228

if.then37:                                        ; preds = %if.end30
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5229, metadata !DIExpression()), !dbg !5231
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5232
  %call38 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !5233
  store %union.tree_node* %call38, %union.tree_node** %rhs, align 8, !dbg !5231
  %27 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5234
  %call39 = call i32 @tree_operand_length(%union.tree_node* %27), !dbg !5234
  store i32 %call39, i32* %n, align 4, !dbg !5235
  %28 = load i32, i32* %n, align 4, !dbg !5236
  %cmp40 = icmp eq i32 %28, 0, !dbg !5238
  br i1 %cmp40, label %if.then41, label %if.else, !dbg !5239

if.then41:                                        ; preds = %if.then37
  %29 = load i64, i64* %rank, align 8, !dbg !5240
  %30 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5240
  %call42 = call i64 @get_rank(%union.tree_node* %30), !dbg !5240
  %cmp43 = icmp sgt i64 %29, %call42, !dbg !5240
  br i1 %cmp43, label %cond.true, label %cond.false, !dbg !5240

cond.true:                                        ; preds = %if.then41
  %31 = load i64, i64* %rank, align 8, !dbg !5240
  br label %cond.end, !dbg !5240

cond.false:                                       ; preds = %if.then41
  %32 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5240
  %call44 = call i64 @get_rank(%union.tree_node* %32), !dbg !5240
  br label %cond.end, !dbg !5240

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %31, %cond.true ], [ %call44, %cond.false ], !dbg !5240
  store i64 %cond, i64* %rank, align 8, !dbg !5241
  br label %if.end66, !dbg !5242

if.else:                                          ; preds = %if.then37
  store i32 0, i32* %i, align 4, !dbg !5243
  br label %for.cond, !dbg !5246

for.cond:                                         ; preds = %for.inc, %if.else
  %33 = load i32, i32* %i, align 4, !dbg !5247
  %34 = load i32, i32* %n, align 4, !dbg !5249
  %cmp45 = icmp slt i32 %33, %34, !dbg !5250
  br i1 %cmp45, label %land.lhs.true46, label %land.end, !dbg !5251

land.lhs.true46:                                  ; preds = %for.cond
  %35 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5252
  %exp = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !5252
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5252
  %36 = load i32, i32* %i, align 4, !dbg !5252
  %idxprom47 = sext i32 %36 to i64, !dbg !5252
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom47, !dbg !5252
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !5252
  %tobool49 = icmp ne %union.tree_node* %37, null, !dbg !5252
  br i1 %tobool49, label %land.rhs, label %land.end, !dbg !5253

land.rhs:                                         ; preds = %land.lhs.true46
  %38 = load i64, i64* %rank, align 8, !dbg !5254
  %39 = load i64, i64* %maxrank, align 8, !dbg !5255
  %cmp50 = icmp ne i64 %38, %39, !dbg !5256
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true46, %for.cond
  %40 = phi i1 [ false, %land.lhs.true46 ], [ false, %for.cond ], [ %cmp50, %land.rhs ], !dbg !5257
  br i1 %40, label %for.body, label %for.end, !dbg !5258

for.body:                                         ; preds = %land.end
  %41 = load i64, i64* %rank, align 8, !dbg !5259
  %42 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5259
  %exp51 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !5259
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !5259
  %43 = load i32, i32* %i, align 4, !dbg !5259
  %idxprom53 = sext i32 %43 to i64, !dbg !5259
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 %idxprom53, !dbg !5259
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8, !dbg !5259
  %call55 = call i64 @get_rank(%union.tree_node* %44), !dbg !5259
  %cmp56 = icmp sgt i64 %41, %call55, !dbg !5259
  br i1 %cmp56, label %cond.true57, label %cond.false58, !dbg !5259

cond.true57:                                      ; preds = %for.body
  %45 = load i64, i64* %rank, align 8, !dbg !5259
  br label %cond.end64, !dbg !5259

cond.false58:                                     ; preds = %for.body
  %46 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5259
  %exp59 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !5259
  %operands60 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp59, i32 0, i32 3, !dbg !5259
  %47 = load i32, i32* %i, align 4, !dbg !5259
  %idxprom61 = sext i32 %47 to i64, !dbg !5259
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands60, i64 0, i64 %idxprom61, !dbg !5259
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !5259
  %call63 = call i64 @get_rank(%union.tree_node* %48), !dbg !5259
  br label %cond.end64, !dbg !5259

cond.end64:                                       ; preds = %cond.false58, %cond.true57
  %cond65 = phi i64 [ %45, %cond.true57 ], [ %call63, %cond.false58 ], !dbg !5259
  store i64 %cond65, i64* %rank, align 8, !dbg !5260
  br label %for.inc, !dbg !5261

for.inc:                                          ; preds = %cond.end64
  %49 = load i32, i32* %i, align 4, !dbg !5262
  %inc = add nsw i32 %49, 1, !dbg !5262
  store i32 %inc, i32* %i, align 4, !dbg !5262
  br label %for.cond, !dbg !5263, !llvm.loop !5264

for.end:                                          ; preds = %land.end
  br label %if.end66

if.end66:                                         ; preds = %for.end, %cond.end
  br label %if.end93, !dbg !5266

if.else67:                                        ; preds = %if.end30
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5267
  %call68 = call i32 @gimple_num_ops(%union.gimple_statement_d* %50), !dbg !5269
  store i32 %call68, i32* %n, align 4, !dbg !5270
  store i32 1, i32* %i, align 4, !dbg !5271
  br label %for.cond69, !dbg !5273

for.cond69:                                       ; preds = %for.inc90, %if.else67
  %51 = load i32, i32* %i, align 4, !dbg !5274
  %52 = load i32, i32* %n, align 4, !dbg !5276
  %cmp70 = icmp slt i32 %51, %52, !dbg !5277
  br i1 %cmp70, label %land.rhs71, label %land.end73, !dbg !5278

land.rhs71:                                       ; preds = %for.cond69
  %53 = load i64, i64* %rank, align 8, !dbg !5279
  %54 = load i64, i64* %maxrank, align 8, !dbg !5280
  %cmp72 = icmp ne i64 %53, %54, !dbg !5281
  br label %land.end73

land.end73:                                       ; preds = %land.rhs71, %for.cond69
  %55 = phi i1 [ false, %for.cond69 ], [ %cmp72, %land.rhs71 ], !dbg !5282
  br i1 %55, label %for.body74, label %for.end92, !dbg !5283

for.body74:                                       ; preds = %land.end73
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5284
  %57 = load i32, i32* %i, align 4, !dbg !5284
  %call75 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %56, i32 %57), !dbg !5284
  %tobool76 = icmp ne %union.tree_node* %call75, null, !dbg !5284
  br i1 %tobool76, label %cond.false78, label %cond.true77, !dbg !5284

cond.true77:                                      ; preds = %for.body74
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 276, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5284
  br label %cond.end79, !dbg !5284

cond.false78:                                     ; preds = %for.body74
  br label %cond.end79, !dbg !5284

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !5284
  %58 = load i64, i64* %rank, align 8, !dbg !5286
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5286
  %60 = load i32, i32* %i, align 4, !dbg !5286
  %call81 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %59, i32 %60), !dbg !5286
  %call82 = call i64 @get_rank(%union.tree_node* %call81), !dbg !5286
  %cmp83 = icmp sgt i64 %58, %call82, !dbg !5286
  br i1 %cmp83, label %cond.true84, label %cond.false85, !dbg !5286

cond.true84:                                      ; preds = %cond.end79
  %61 = load i64, i64* %rank, align 8, !dbg !5286
  br label %cond.end88, !dbg !5286

cond.false85:                                     ; preds = %cond.end79
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5286
  %63 = load i32, i32* %i, align 4, !dbg !5286
  %call86 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %62, i32 %63), !dbg !5286
  %call87 = call i64 @get_rank(%union.tree_node* %call86), !dbg !5286
  br label %cond.end88, !dbg !5286

cond.end88:                                       ; preds = %cond.false85, %cond.true84
  %cond89 = phi i64 [ %61, %cond.true84 ], [ %call87, %cond.false85 ], !dbg !5286
  store i64 %cond89, i64* %rank, align 8, !dbg !5287
  br label %for.inc90, !dbg !5288

for.inc90:                                        ; preds = %cond.end88
  %64 = load i32, i32* %i, align 4, !dbg !5289
  %inc91 = add nsw i32 %64, 1, !dbg !5289
  store i32 %inc91, i32* %i, align 4, !dbg !5289
  br label %for.cond69, !dbg !5290, !llvm.loop !5291

for.end92:                                        ; preds = %land.end73
  br label %if.end93

if.end93:                                         ; preds = %for.end92, %if.end66
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5293
  %tobool94 = icmp ne %struct._IO_FILE* %65, null, !dbg !5293
  br i1 %tobool94, label %land.lhs.true95, label %if.end100, !dbg !5295

land.lhs.true95:                                  ; preds = %if.end93
  %66 = load i32, i32* @dump_flags, align 4, !dbg !5296
  %and = and i32 %66, 8, !dbg !5297
  %tobool96 = icmp ne i32 %and, 0, !dbg !5297
  br i1 %tobool96, label %if.then97, label %if.end100, !dbg !5298

if.then97:                                        ; preds = %land.lhs.true95
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5299
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)), !dbg !5301
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5302
  %69 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5303
  call void @print_generic_expr(%struct._IO_FILE* %68, %union.tree_node* %69, i32 0), !dbg !5304
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5305
  %71 = load i64, i64* %rank, align 8, !dbg !5306
  %add = add nsw i64 %71, 1, !dbg !5307
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i64 %add), !dbg !5308
  br label %if.end100, !dbg !5309

if.end100:                                        ; preds = %if.then97, %land.lhs.true95, %if.end93
  %72 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5310
  %73 = load i64, i64* %rank, align 8, !dbg !5311
  %add101 = add nsw i64 %73, 1, !dbg !5312
  call void @insert_operand_rank(%union.tree_node* %72, i64 %add101), !dbg !5313
  %74 = load i64, i64* %rank, align 8, !dbg !5314
  %add102 = add nsw i64 %74, 1, !dbg !5315
  store i64 %add102, i64* %retval, align 8, !dbg !5316
  br label %return, !dbg !5316

if.end103:                                        ; preds = %if.end
  store i64 0, i64* %retval, align 8, !dbg !5317
  br label %return, !dbg !5317

return:                                           ; preds = %if.end103, %if.end100, %if.then29, %if.then24, %if.then18, %if.then12, %if.then
  %75 = load i64, i64* %retval, align 8, !dbg !5318
  ret i64 %75, !dbg !5318
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %vec_, %struct.operand_entry* %obj_) #0 !dbg !5319 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %obj_.addr = alloca %struct.operand_entry*, align 8
  store %struct.VEC_operand_entry_t_heap** %vec_, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %vec_.addr, metadata !5322, metadata !DIExpression()), !dbg !5323
  store %struct.operand_entry* %obj_, %struct.operand_entry** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %obj_.addr, metadata !5324, metadata !DIExpression()), !dbg !5323
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5323
  %call = call i32 @VEC_operand_entry_t_heap_reserve(%struct.VEC_operand_entry_t_heap** %0, i32 1), !dbg !5323
  %1 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5323
  %2 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %1, align 8, !dbg !5323
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %2, null, !dbg !5323
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5323

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5323
  %4 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %3, align 8, !dbg !5323
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %4, i32 0, i32 0, !dbg !5323
  br label %cond.end, !dbg !5323

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5323

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5323
  %5 = load %struct.operand_entry*, %struct.operand_entry** %obj_.addr, align 8, !dbg !5323
  %call1 = call %struct.operand_entry** @VEC_operand_entry_t_base_quick_push(%struct.VEC_operand_entry_t_base* %cond, %struct.operand_entry* %5), !dbg !5323
  ret %struct.operand_entry** %call1, !dbg !5323
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @find_operand_rank(%union.tree_node* %e) #0 !dbg !5325 {
entry:
  %e.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %e, %union.tree_node** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5328, metadata !DIExpression()), !dbg !5329
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !5330
  %1 = load %union.tree_node*, %union.tree_node** %e.addr, align 8, !dbg !5331
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !5331
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !5332
  store i8** %call, i8*** %slot, align 8, !dbg !5329
  %3 = load i8**, i8*** %slot, align 8, !dbg !5333
  %tobool = icmp ne i8** %3, null, !dbg !5333
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5333

cond.true:                                        ; preds = %entry
  %4 = load i8**, i8*** %slot, align 8, !dbg !5334
  %5 = load i8*, i8** %4, align 8, !dbg !5335
  %6 = ptrtoint i8* %5 to i64, !dbg !5336
  br label %cond.end, !dbg !5333

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5333

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ -1, %cond.false ], !dbg !5333
  ret i64 %cond, !dbg !5337
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5338 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5339, metadata !DIExpression()), !dbg !5340
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5341
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5343
  %tobool = icmp ne i8 %call, 0, !dbg !5343
  br i1 %tobool, label %if.end, label %if.then, !dbg !5344

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5345
  br label %return, !dbg !5345

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5346
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5347
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5348
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5348
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5349
  br label %return, !dbg !5349

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5350
  ret %union.tree_node* %3, !dbg !5350
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !5351 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !5354, metadata !DIExpression()), !dbg !5355
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5356
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5356
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5356
  %bf.load = load i64, i64* %1, align 8, !dbg !5356
  %bf.clear = and i64 %bf.load, 65535, !dbg !5356
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5356
  %idxprom = sext i32 %bf.cast to i64, !dbg !5356
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5356
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5356
  %cmp = icmp eq i32 %2, 9, !dbg !5356
  br i1 %cmp, label %if.then, label %if.else, !dbg !5358

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5359
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5359
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5359
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5359
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !5359
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !5359
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !5359
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !5359
  %5 = load i64, i64* %low, align 8, !dbg !5359
  %conv = trunc i64 %5 to i32, !dbg !5359
  store i32 %conv, i32* %retval, align 4, !dbg !5360
  br label %return, !dbg !5360

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !5361
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5361
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5361
  %bf.load4 = load i64, i64* %7, align 8, !dbg !5361
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5361
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5361
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !5361
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !5361
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !5361
  %conv9 = zext i8 %8 to i32, !dbg !5361
  store i32 %conv9, i32* %retval, align 4, !dbg !5362
  br label %return, !dbg !5362

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5363
  ret i32 %9, !dbg !5363
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5364 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5365, metadata !DIExpression()), !dbg !5366
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5367
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5368
  %cmp = icmp uge i32 %call, 6, !dbg !5369
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5370

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5371
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5372
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5373
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5374
  %land.ext = zext i1 %2 to i32, !dbg !5370
  %conv = trunc i32 %land.ext to i8, !dbg !5368
  ret i8 %conv, !dbg !5375
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_operand_entry_t_heap_reserve(%struct.VEC_operand_entry_t_heap** %vec_, i32 %alloc_) #0 !dbg !5376 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_operand_entry_t_heap** %vec_, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %vec_.addr, metadata !5379, metadata !DIExpression()), !dbg !5380
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5381, metadata !DIExpression()), !dbg !5380
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5382, metadata !DIExpression()), !dbg !5380
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5380
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %0, align 8, !dbg !5380
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %1, null, !dbg !5380
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5380

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5380
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %2, align 8, !dbg !5380
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %3, i32 0, i32 0, !dbg !5380
  br label %cond.end, !dbg !5380

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5380

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5380
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5380
  %call = call i32 @VEC_operand_entry_t_base_space(%struct.VEC_operand_entry_t_base* %cond, i32 %4), !dbg !5380
  %tobool1 = icmp ne i32 %call, 0, !dbg !5380
  %lnot = xor i1 %tobool1, true, !dbg !5380
  %lnot.ext = zext i1 %lnot to i32, !dbg !5380
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5380
  %5 = load i32, i32* %extend, align 4, !dbg !5383
  %tobool2 = icmp ne i32 %5, 0, !dbg !5383
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5380

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5383
  %7 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %6, align 8, !dbg !5383
  %8 = bitcast %struct.VEC_operand_entry_t_heap* %7 to i8*, !dbg !5383
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5383
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5383
  %10 = bitcast i8* %call3 to %struct.VEC_operand_entry_t_heap*, !dbg !5383
  %11 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %vec_.addr, align 8, !dbg !5383
  store %struct.VEC_operand_entry_t_heap* %10, %struct.VEC_operand_entry_t_heap** %11, align 8, !dbg !5383
  br label %if.end, !dbg !5383

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5380
  ret i32 %12, !dbg !5380
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry** @VEC_operand_entry_t_base_quick_push(%struct.VEC_operand_entry_t_base* %vec_, %struct.operand_entry* %obj_) #0 !dbg !5385 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %obj_.addr = alloca %struct.operand_entry*, align 8
  %slot_ = alloca %struct.operand_entry**, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  store %struct.operand_entry* %obj_, %struct.operand_entry** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %obj_.addr, metadata !5390, metadata !DIExpression()), !dbg !5389
  call void @llvm.dbg.declare(metadata %struct.operand_entry*** %slot_, metadata !5391, metadata !DIExpression()), !dbg !5389
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5389
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %0, i32 0, i32 0, !dbg !5389
  %1 = load i32, i32* %num, align 8, !dbg !5389
  %2 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5389
  %alloc = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %2, i32 0, i32 1, !dbg !5389
  %3 = load i32, i32* %alloc, align 4, !dbg !5389
  %cmp = icmp ult i32 %1, %3, !dbg !5389
  %conv = zext i1 %cmp to i32, !dbg !5389
  %4 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5389
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %4, i32 0, i32 2, !dbg !5389
  %5 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5389
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %5, i32 0, i32 0, !dbg !5389
  %6 = load i32, i32* %num1, align 8, !dbg !5389
  %inc = add i32 %6, 1, !dbg !5389
  store i32 %inc, i32* %num1, align 8, !dbg !5389
  %idxprom = zext i32 %6 to i64, !dbg !5389
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !5389
  store %struct.operand_entry** %arrayidx, %struct.operand_entry*** %slot_, align 8, !dbg !5389
  %7 = load %struct.operand_entry*, %struct.operand_entry** %obj_.addr, align 8, !dbg !5389
  %8 = load %struct.operand_entry**, %struct.operand_entry*** %slot_, align 8, !dbg !5389
  store %struct.operand_entry* %7, %struct.operand_entry** %8, align 8, !dbg !5389
  %9 = load %struct.operand_entry**, %struct.operand_entry*** %slot_, align 8, !dbg !5389
  ret %struct.operand_entry** %9, !dbg !5389
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_operand_entry_t_base_space(%struct.VEC_operand_entry_t_base* %vec_, i32 %alloc_) #0 !dbg !5392 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !5395, metadata !DIExpression()), !dbg !5396
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5397, metadata !DIExpression()), !dbg !5396
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5396
  %cmp = icmp sge i32 %0, 0, !dbg !5396
  %conv = zext i1 %cmp to i32, !dbg !5396
  %1 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5396
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %1, null, !dbg !5396
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5396

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5396
  %alloc = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %2, i32 0, i32 1, !dbg !5396
  %3 = load i32, i32* %alloc, align 4, !dbg !5396
  %4 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5396
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %4, i32 0, i32 0, !dbg !5396
  %5 = load i32, i32* %num, align 8, !dbg !5396
  %sub = sub i32 %3, %5, !dbg !5396
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5396
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5396
  %conv2 = zext i1 %cmp1 to i32, !dbg !5396
  br label %cond.end, !dbg !5396

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5396
  %tobool3 = icmp ne i32 %7, 0, !dbg !5396
  %lnot = xor i1 %tobool3, true, !dbg !5396
  %lnot.ext = zext i1 %lnot to i32, !dbg !5396
  br label %cond.end, !dbg !5396

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5396
  ret i32 %cond, !dbg !5396
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5398 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5401, metadata !DIExpression()), !dbg !5402
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5403, metadata !DIExpression()), !dbg !5404
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5405
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5407
  %tobool = icmp ne i8 %call, 0, !dbg !5407
  br i1 %tobool, label %if.then, label %if.else, !dbg !5408

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5409
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5411
  %2 = load i32, i32* %i.addr, align 4, !dbg !5412
  %idx.ext = zext i32 %2 to i64, !dbg !5413
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !5413
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !5414
  br label %return, !dbg !5414

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5415
  br label %return, !dbg !5415

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5416
  ret %union.tree_node** %3, !dbg !5416
}

declare dso_local void @gsi_move_before(%struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @constant_type(%union.tree_node* %t) #0 !dbg !5417 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5420, metadata !DIExpression()), !dbg !5421
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5422
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5422
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5422
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5422
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5422
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5422
  %bf.load = load i64, i64* %2, align 8, !dbg !5422
  %bf.clear = and i64 %bf.load, 65535, !dbg !5422
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5422
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !5422
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5422

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5422
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5422
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !5422
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !5422
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5422
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5422
  %bf.load4 = load i64, i64* %5, align 8, !dbg !5422
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5422
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5422
  %cmp7 = icmp eq i32 %bf.cast6, 7, !dbg !5422
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !5422

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5422
  %common9 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5422
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !5422
  %7 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !5422
  %base11 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5422
  %8 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5422
  %bf.load12 = load i64, i64* %8, align 8, !dbg !5422
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5422
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5422
  %cmp15 = icmp eq i32 %bf.cast14, 8, !dbg !5422
  br i1 %cmp15, label %if.then, label %if.else, !dbg !5424

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %entry
  store i32 8, i32* %retval, align 4, !dbg !5425
  br label %return, !dbg !5425

if.else:                                          ; preds = %lor.lhs.false8
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5426
  %common16 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5426
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !5426
  %10 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !5426
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5426
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5426
  %bf.load19 = load i64, i64* %11, align 8, !dbg !5426
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5426
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5426
  %cmp22 = icmp eq i32 %bf.cast21, 9, !dbg !5426
  br i1 %cmp22, label %if.then23, label %if.else24, !dbg !5428

if.then23:                                        ; preds = %if.else
  store i32 4, i32* %retval, align 4, !dbg !5429
  br label %return, !dbg !5429

if.else24:                                        ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !5430
  br label %return, !dbg !5430

return:                                           ; preds = %if.else24, %if.then23, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !5431
  ret i32 %12, !dbg !5431
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_) #0 !dbg !5432 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !5435, metadata !DIExpression()), !dbg !5436
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5437, metadata !DIExpression()), !dbg !5436
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5436
  %tobool = icmp ne %struct.VEC_operand_entry_t_base* %0, null, !dbg !5436
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5436

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5436
  %2 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5436
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %2, i32 0, i32 0, !dbg !5436
  %3 = load i32, i32* %num, align 8, !dbg !5436
  %cmp = icmp ult i32 %1, %3, !dbg !5436
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5438
  %land.ext = zext i1 %4 to i32, !dbg !5436
  %5 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5436
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %5, i32 0, i32 2, !dbg !5436
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5436
  %idxprom = zext i32 %6 to i64, !dbg !5436
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !5436
  %7 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !5436
  ret %struct.operand_entry* %7, !dbg !5436
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %vec_) #0 !dbg !5439 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %obj_ = alloca %struct.operand_entry*, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !5442, metadata !DIExpression()), !dbg !5443
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %obj_, metadata !5444, metadata !DIExpression()), !dbg !5443
  %0 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5443
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %0, i32 0, i32 0, !dbg !5443
  %1 = load i32, i32* %num, align 8, !dbg !5443
  %2 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5443
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %2, i32 0, i32 2, !dbg !5443
  %3 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !5443
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %3, i32 0, i32 0, !dbg !5443
  %4 = load i32, i32* %num1, align 8, !dbg !5443
  %dec = add i32 %4, -1, !dbg !5443
  store i32 %dec, i32* %num1, align 8, !dbg !5443
  %idxprom = zext i32 %dec to i64, !dbg !5443
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !5443
  %5 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !5443
  store %struct.operand_entry* %5, %struct.operand_entry** %obj_, align 8, !dbg !5443
  %6 = load %struct.operand_entry*, %struct.operand_entry** %obj_, align 8, !dbg !5443
  ret %struct.operand_entry* %6, !dbg !5443
}

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_using_constants(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) #0 !dbg !5445 {
entry:
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %oelast = alloca %struct.operand_entry*, align 8
  %type = alloca %union.tree_node*, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !5446, metadata !DIExpression()), !dbg !5447
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !5448, metadata !DIExpression()), !dbg !5449
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oelast, metadata !5450, metadata !DIExpression()), !dbg !5451
  %0 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5452
  %1 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %0, align 8, !dbg !5452
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %1, null, !dbg !5452
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5452

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5452
  %3 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %2, align 8, !dbg !5452
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %3, i32 0, i32 0, !dbg !5452
  br label %cond.end, !dbg !5452

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5452

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5452
  %call = call %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond), !dbg !5452
  store %struct.operand_entry* %call, %struct.operand_entry** %oelast, align 8, !dbg !5451
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5453, metadata !DIExpression()), !dbg !5454
  %4 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5455
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %4, i32 0, i32 1, !dbg !5455
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5455
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5455
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5455
  %6 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5455
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !5454
  %7 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5456
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %7, i32 0, i32 0, !dbg !5458
  %8 = load i32, i32* %rank, align 8, !dbg !5458
  %cmp = icmp eq i32 %8, 0, !dbg !5459
  br i1 %cmp, label %land.lhs.true, label %if.end1423, !dbg !5460

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5461
  %base2 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5461
  %10 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5461
  %bf.load = load i64, i64* %10, align 8, !dbg !5461
  %bf.clear = and i64 %bf.load, 65535, !dbg !5461
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5461
  %cmp3 = icmp eq i32 %bf.cast, 6, !dbg !5461
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !5461

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5461
  %base4 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5461
  %12 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5461
  %bf.load5 = load i64, i64* %12, align 8, !dbg !5461
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5461
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5461
  %cmp8 = icmp eq i32 %bf.cast7, 7, !dbg !5461
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !5461

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5461
  %base10 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5461
  %14 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5461
  %bf.load11 = load i64, i64* %14, align 8, !dbg !5461
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !5461
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !5461
  %cmp14 = icmp eq i32 %bf.cast13, 8, !dbg !5461
  br i1 %cmp14, label %if.then, label %lor.lhs.false15, !dbg !5462

lor.lhs.false15:                                  ; preds = %lor.lhs.false9
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5463
  %base16 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5463
  %16 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5463
  %bf.load17 = load i64, i64* %16, align 8, !dbg !5463
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5463
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5463
  %cmp20 = icmp eq i32 %bf.cast19, 9, !dbg !5463
  br i1 %cmp20, label %if.then, label %lor.lhs.false21, !dbg !5463

lor.lhs.false21:                                  ; preds = %lor.lhs.false15
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5463
  %base22 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5463
  %18 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5463
  %bf.load23 = load i64, i64* %18, align 8, !dbg !5463
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5463
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5463
  %cmp26 = icmp eq i32 %bf.cast25, 13, !dbg !5463
  br i1 %cmp26, label %land.lhs.true33, label %lor.lhs.false27, !dbg !5463

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5463
  %base28 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5463
  %20 = bitcast %struct.tree_base* %base28 to i64*, !dbg !5463
  %bf.load29 = load i64, i64* %20, align 8, !dbg !5463
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !5463
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !5463
  %cmp32 = icmp eq i32 %bf.cast31, 14, !dbg !5463
  br i1 %cmp32, label %land.lhs.true33, label %if.end1423, !dbg !5463

land.lhs.true33:                                  ; preds = %lor.lhs.false27, %lor.lhs.false21
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5463
  %common34 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !5463
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !5463
  %22 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !5463
  %base36 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5463
  %23 = bitcast %struct.tree_base* %base36 to i64*, !dbg !5463
  %bf.load37 = load i64, i64* %23, align 8, !dbg !5463
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !5463
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !5463
  %cmp40 = icmp eq i32 %bf.cast39, 9, !dbg !5463
  br i1 %cmp40, label %if.then, label %if.end1423, !dbg !5464

if.then:                                          ; preds = %land.lhs.true33, %lor.lhs.false15, %lor.lhs.false9, %lor.lhs.false, %land.lhs.true
  %24 = load i32, i32* %opcode.addr, align 4, !dbg !5465
  switch i32 %24, label %sw.default [
    i32 89, label %sw.bb
    i32 87, label %sw.bb98
    i32 65, label %sw.bb162
    i32 88, label %sw.bb1348
    i32 63, label %sw.bb1348
    i32 64, label %sw.bb1348
  ], !dbg !5467

sw.bb:                                            ; preds = %if.then
  %25 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5468
  %op41 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %25, i32 0, i32 1, !dbg !5471
  %26 = load %union.tree_node*, %union.tree_node** %op41, align 8, !dbg !5471
  %call42 = call i32 @integer_zerop(%union.tree_node* %26), !dbg !5472
  %tobool43 = icmp ne i32 %call42, 0, !dbg !5472
  br i1 %tobool43, label %if.then44, label %if.else, !dbg !5473

if.then44:                                        ; preds = %sw.bb
  %27 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5474
  %28 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %27, align 8, !dbg !5474
  %tobool45 = icmp ne %struct.VEC_operand_entry_t_heap* %28, null, !dbg !5474
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !5474

cond.true46:                                      ; preds = %if.then44
  %29 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5474
  %30 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %29, align 8, !dbg !5474
  %base47 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %30, i32 0, i32 0, !dbg !5474
  br label %cond.end49, !dbg !5474

cond.false48:                                     ; preds = %if.then44
  br label %cond.end49, !dbg !5474

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_operand_entry_t_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !5474
  %call51 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond50), !dbg !5474
  %cmp52 = icmp ne i32 %call51, 1, !dbg !5477
  br i1 %cmp52, label %if.then53, label %if.end67, !dbg !5478

if.then53:                                        ; preds = %cond.end49
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5479
  %tobool54 = icmp ne %struct._IO_FILE* %31, null, !dbg !5479
  br i1 %tobool54, label %land.lhs.true55, label %if.end, !dbg !5482

land.lhs.true55:                                  ; preds = %if.then53
  %32 = load i32, i32* @dump_flags, align 4, !dbg !5483
  %and = and i32 %32, 8, !dbg !5484
  %tobool56 = icmp ne i32 %and, 0, !dbg !5484
  br i1 %tobool56, label %if.then57, label %if.end, !dbg !5485

if.then57:                                        ; preds = %land.lhs.true55
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5486
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i64 0, i64 0)), !dbg !5487
  br label %if.end, !dbg !5487

if.end:                                           ; preds = %if.then57, %land.lhs.true55, %if.then53
  %34 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5488
  %35 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %34, align 8, !dbg !5488
  %tobool59 = icmp ne %struct.VEC_operand_entry_t_heap* %35, null, !dbg !5488
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !5488

cond.true60:                                      ; preds = %if.end
  %36 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5488
  %37 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %36, align 8, !dbg !5488
  %base61 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %37, i32 0, i32 0, !dbg !5488
  br label %cond.end63, !dbg !5488

cond.false62:                                     ; preds = %if.end
  br label %cond.end63, !dbg !5488

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_operand_entry_t_base* [ %base61, %cond.true60 ], [ null, %cond.false62 ], !dbg !5488
  %call65 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond64), !dbg !5488
  %sub = sub i32 %call65, 1, !dbg !5489
  %38 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5490
  %add = add i32 %38, %sub, !dbg !5490
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5490
  %39 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5491
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %39), !dbg !5491
  %40 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5492
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %40, align 8, !dbg !5493
  %41 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5494
  %42 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5494
  %call66 = call %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %41, %struct.operand_entry* %42), !dbg !5494
  br label %if.end1423, !dbg !5495

if.end67:                                         ; preds = %cond.end49
  br label %if.end97, !dbg !5496

if.else:                                          ; preds = %sw.bb
  %43 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5497
  %op68 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %43, i32 0, i32 1, !dbg !5499
  %44 = load %union.tree_node*, %union.tree_node** %op68, align 8, !dbg !5499
  %call69 = call i32 @integer_all_onesp(%union.tree_node* %44), !dbg !5500
  %tobool70 = icmp ne i32 %call69, 0, !dbg !5500
  br i1 %tobool70, label %if.then71, label %if.end96, !dbg !5501

if.then71:                                        ; preds = %if.else
  %45 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5502
  %46 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %45, align 8, !dbg !5502
  %tobool72 = icmp ne %struct.VEC_operand_entry_t_heap* %46, null, !dbg !5502
  br i1 %tobool72, label %cond.true73, label %cond.false75, !dbg !5502

cond.true73:                                      ; preds = %if.then71
  %47 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5502
  %48 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %47, align 8, !dbg !5502
  %base74 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %48, i32 0, i32 0, !dbg !5502
  br label %cond.end76, !dbg !5502

cond.false75:                                     ; preds = %if.then71
  br label %cond.end76, !dbg !5502

cond.end76:                                       ; preds = %cond.false75, %cond.true73
  %cond77 = phi %struct.VEC_operand_entry_t_base* [ %base74, %cond.true73 ], [ null, %cond.false75 ], !dbg !5502
  %call78 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond77), !dbg !5502
  %cmp79 = icmp ne i32 %call78, 1, !dbg !5505
  br i1 %cmp79, label %if.then80, label %if.end95, !dbg !5506

if.then80:                                        ; preds = %cond.end76
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5507
  %tobool81 = icmp ne %struct._IO_FILE* %49, null, !dbg !5507
  br i1 %tobool81, label %land.lhs.true82, label %if.end87, !dbg !5510

land.lhs.true82:                                  ; preds = %if.then80
  %50 = load i32, i32* @dump_flags, align 4, !dbg !5511
  %and83 = and i32 %50, 8, !dbg !5512
  %tobool84 = icmp ne i32 %and83, 0, !dbg !5512
  br i1 %tobool84, label %if.then85, label %if.end87, !dbg !5513

if.then85:                                        ; preds = %land.lhs.true82
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5514
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0)), !dbg !5515
  br label %if.end87, !dbg !5515

if.end87:                                         ; preds = %if.then85, %land.lhs.true82, %if.then80
  %52 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5516
  %53 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %52, align 8, !dbg !5516
  %tobool88 = icmp ne %struct.VEC_operand_entry_t_heap* %53, null, !dbg !5516
  br i1 %tobool88, label %cond.true89, label %cond.false91, !dbg !5516

cond.true89:                                      ; preds = %if.end87
  %54 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5516
  %55 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %54, align 8, !dbg !5516
  %base90 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %55, i32 0, i32 0, !dbg !5516
  br label %cond.end92, !dbg !5516

cond.false91:                                     ; preds = %if.end87
  br label %cond.end92, !dbg !5516

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi %struct.VEC_operand_entry_t_base* [ %base90, %cond.true89 ], [ null, %cond.false91 ], !dbg !5516
  %call94 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond93), !dbg !5516
  %56 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5517
  %inc = add nsw i32 %56, 1, !dbg !5517
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5517
  br label %if.end95, !dbg !5518

if.end95:                                         ; preds = %cond.end92, %cond.end76
  br label %if.end96, !dbg !5519

if.end96:                                         ; preds = %if.end95, %if.else
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end67
  br label %sw.epilog, !dbg !5520

sw.bb98:                                          ; preds = %if.then
  %57 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5521
  %op99 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %57, i32 0, i32 1, !dbg !5523
  %58 = load %union.tree_node*, %union.tree_node** %op99, align 8, !dbg !5523
  %call100 = call i32 @integer_all_onesp(%union.tree_node* %58), !dbg !5524
  %tobool101 = icmp ne i32 %call100, 0, !dbg !5524
  br i1 %tobool101, label %if.then102, label %if.else130, !dbg !5525

if.then102:                                       ; preds = %sw.bb98
  %59 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5526
  %60 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %59, align 8, !dbg !5526
  %tobool103 = icmp ne %struct.VEC_operand_entry_t_heap* %60, null, !dbg !5526
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !5526

cond.true104:                                     ; preds = %if.then102
  %61 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5526
  %62 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %61, align 8, !dbg !5526
  %base105 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %62, i32 0, i32 0, !dbg !5526
  br label %cond.end107, !dbg !5526

cond.false106:                                    ; preds = %if.then102
  br label %cond.end107, !dbg !5526

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_operand_entry_t_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !5526
  %call109 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond108), !dbg !5526
  %cmp110 = icmp ne i32 %call109, 1, !dbg !5529
  br i1 %cmp110, label %if.then111, label %if.end129, !dbg !5530

if.then111:                                       ; preds = %cond.end107
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5531
  %tobool112 = icmp ne %struct._IO_FILE* %63, null, !dbg !5531
  br i1 %tobool112, label %land.lhs.true113, label %if.end118, !dbg !5534

land.lhs.true113:                                 ; preds = %if.then111
  %64 = load i32, i32* @dump_flags, align 4, !dbg !5535
  %and114 = and i32 %64, 8, !dbg !5536
  %tobool115 = icmp ne i32 %and114, 0, !dbg !5536
  br i1 %tobool115, label %if.then116, label %if.end118, !dbg !5537

if.then116:                                       ; preds = %land.lhs.true113
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5538
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0)), !dbg !5539
  br label %if.end118, !dbg !5539

if.end118:                                        ; preds = %if.then116, %land.lhs.true113, %if.then111
  %66 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5540
  %67 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %66, align 8, !dbg !5540
  %tobool119 = icmp ne %struct.VEC_operand_entry_t_heap* %67, null, !dbg !5540
  br i1 %tobool119, label %cond.true120, label %cond.false122, !dbg !5540

cond.true120:                                     ; preds = %if.end118
  %68 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5540
  %69 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %68, align 8, !dbg !5540
  %base121 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %69, i32 0, i32 0, !dbg !5540
  br label %cond.end123, !dbg !5540

cond.false122:                                    ; preds = %if.end118
  br label %cond.end123, !dbg !5540

cond.end123:                                      ; preds = %cond.false122, %cond.true120
  %cond124 = phi %struct.VEC_operand_entry_t_base* [ %base121, %cond.true120 ], [ null, %cond.false122 ], !dbg !5540
  %call125 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond124), !dbg !5540
  %sub126 = sub i32 %call125, 1, !dbg !5541
  %70 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5542
  %add127 = add i32 %70, %sub126, !dbg !5542
  store i32 %add127, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5542
  %71 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5543
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %71), !dbg !5543
  %72 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5544
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %72, align 8, !dbg !5545
  %73 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5546
  %74 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5546
  %call128 = call %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %73, %struct.operand_entry* %74), !dbg !5546
  br label %if.end1423, !dbg !5547

if.end129:                                        ; preds = %cond.end107
  br label %if.end161, !dbg !5548

if.else130:                                       ; preds = %sw.bb98
  %75 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5549
  %op131 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %75, i32 0, i32 1, !dbg !5551
  %76 = load %union.tree_node*, %union.tree_node** %op131, align 8, !dbg !5551
  %call132 = call i32 @integer_zerop(%union.tree_node* %76), !dbg !5552
  %tobool133 = icmp ne i32 %call132, 0, !dbg !5552
  br i1 %tobool133, label %if.then134, label %if.end160, !dbg !5553

if.then134:                                       ; preds = %if.else130
  %77 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5554
  %78 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %77, align 8, !dbg !5554
  %tobool135 = icmp ne %struct.VEC_operand_entry_t_heap* %78, null, !dbg !5554
  br i1 %tobool135, label %cond.true136, label %cond.false138, !dbg !5554

cond.true136:                                     ; preds = %if.then134
  %79 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5554
  %80 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %79, align 8, !dbg !5554
  %base137 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %80, i32 0, i32 0, !dbg !5554
  br label %cond.end139, !dbg !5554

cond.false138:                                    ; preds = %if.then134
  br label %cond.end139, !dbg !5554

cond.end139:                                      ; preds = %cond.false138, %cond.true136
  %cond140 = phi %struct.VEC_operand_entry_t_base* [ %base137, %cond.true136 ], [ null, %cond.false138 ], !dbg !5554
  %call141 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond140), !dbg !5554
  %cmp142 = icmp ne i32 %call141, 1, !dbg !5557
  br i1 %cmp142, label %if.then143, label %if.end159, !dbg !5558

if.then143:                                       ; preds = %cond.end139
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5559
  %tobool144 = icmp ne %struct._IO_FILE* %81, null, !dbg !5559
  br i1 %tobool144, label %land.lhs.true145, label %if.end150, !dbg !5562

land.lhs.true145:                                 ; preds = %if.then143
  %82 = load i32, i32* @dump_flags, align 4, !dbg !5563
  %and146 = and i32 %82, 8, !dbg !5564
  %tobool147 = icmp ne i32 %and146, 0, !dbg !5564
  br i1 %tobool147, label %if.then148, label %if.end150, !dbg !5565

if.then148:                                       ; preds = %land.lhs.true145
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5566
  %call149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)), !dbg !5567
  br label %if.end150, !dbg !5567

if.end150:                                        ; preds = %if.then148, %land.lhs.true145, %if.then143
  %84 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5568
  %85 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %84, align 8, !dbg !5568
  %tobool151 = icmp ne %struct.VEC_operand_entry_t_heap* %85, null, !dbg !5568
  br i1 %tobool151, label %cond.true152, label %cond.false154, !dbg !5568

cond.true152:                                     ; preds = %if.end150
  %86 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5568
  %87 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %86, align 8, !dbg !5568
  %base153 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %87, i32 0, i32 0, !dbg !5568
  br label %cond.end155, !dbg !5568

cond.false154:                                    ; preds = %if.end150
  br label %cond.end155, !dbg !5568

cond.end155:                                      ; preds = %cond.false154, %cond.true152
  %cond156 = phi %struct.VEC_operand_entry_t_base* [ %base153, %cond.true152 ], [ null, %cond.false154 ], !dbg !5568
  %call157 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond156), !dbg !5568
  %88 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5569
  %inc158 = add nsw i32 %88, 1, !dbg !5569
  store i32 %inc158, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5569
  br label %if.end159, !dbg !5570

if.end159:                                        ; preds = %cond.end155, %cond.end139
  br label %if.end160, !dbg !5571

if.end160:                                        ; preds = %if.end159, %if.else130
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.end129
  br label %sw.epilog, !dbg !5572

sw.bb162:                                         ; preds = %if.then
  %89 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5573
  %op163 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %89, i32 0, i32 1, !dbg !5575
  %90 = load %union.tree_node*, %union.tree_node** %op163, align 8, !dbg !5575
  %call164 = call i32 @integer_zerop(%union.tree_node* %90), !dbg !5576
  %tobool165 = icmp ne i32 %call164, 0, !dbg !5576
  br i1 %tobool165, label %if.then896, label %lor.lhs.false166, !dbg !5577

lor.lhs.false166:                                 ; preds = %sw.bb162
  %91 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5578
  %base167 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !5578
  %92 = bitcast %struct.tree_base* %base167 to i64*, !dbg !5578
  %bf.load168 = load i64, i64* %92, align 8, !dbg !5578
  %bf.clear169 = and i64 %bf.load168, 65535, !dbg !5578
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !5578
  %cmp171 = icmp eq i32 %bf.cast170, 9, !dbg !5578
  br i1 %cmp171, label %land.lhs.true192, label %lor.lhs.false172, !dbg !5578

lor.lhs.false172:                                 ; preds = %lor.lhs.false166
  %93 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5578
  %base173 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !5578
  %94 = bitcast %struct.tree_base* %base173 to i64*, !dbg !5578
  %bf.load174 = load i64, i64* %94, align 8, !dbg !5578
  %bf.clear175 = and i64 %bf.load174, 65535, !dbg !5578
  %bf.cast176 = trunc i64 %bf.clear175 to i32, !dbg !5578
  %cmp177 = icmp eq i32 %bf.cast176, 13, !dbg !5578
  br i1 %cmp177, label %land.lhs.true184, label %lor.lhs.false178, !dbg !5578

lor.lhs.false178:                                 ; preds = %lor.lhs.false172
  %95 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5578
  %base179 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !5578
  %96 = bitcast %struct.tree_base* %base179 to i64*, !dbg !5578
  %bf.load180 = load i64, i64* %96, align 8, !dbg !5578
  %bf.clear181 = and i64 %bf.load180, 65535, !dbg !5578
  %bf.cast182 = trunc i64 %bf.clear181 to i32, !dbg !5578
  %cmp183 = icmp eq i32 %bf.cast182, 14, !dbg !5578
  br i1 %cmp183, label %land.lhs.true184, label %if.else925, !dbg !5578

land.lhs.true184:                                 ; preds = %lor.lhs.false178, %lor.lhs.false172
  %97 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5578
  %common185 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !5578
  %type186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common185, i32 0, i32 2, !dbg !5578
  %98 = load %union.tree_node*, %union.tree_node** %type186, align 8, !dbg !5578
  %base187 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !5578
  %99 = bitcast %struct.tree_base* %base187 to i64*, !dbg !5578
  %bf.load188 = load i64, i64* %99, align 8, !dbg !5578
  %bf.clear189 = and i64 %bf.load188, 65535, !dbg !5578
  %bf.cast190 = trunc i64 %bf.clear189 to i32, !dbg !5578
  %cmp191 = icmp eq i32 %bf.cast190, 9, !dbg !5578
  br i1 %cmp191, label %land.lhs.true192, label %if.else925, !dbg !5579

land.lhs.true192:                                 ; preds = %land.lhs.true184, %lor.lhs.false166
  %100 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base193 = bitcast %union.tree_node* %100 to %struct.tree_base*, !dbg !5580
  %101 = bitcast %struct.tree_base* %base193 to i64*, !dbg !5580
  %bf.load194 = load i64, i64* %101, align 8, !dbg !5580
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !5580
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !5580
  %cmp197 = icmp eq i32 %bf.cast196, 14, !dbg !5580
  br i1 %cmp197, label %cond.true198, label %cond.false200, !dbg !5580

cond.true198:                                     ; preds = %land.lhs.true192
  %102 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call199 = call i32 @vector_type_mode(%union.tree_node* %102), !dbg !5580
  br label %cond.end204, !dbg !5580

cond.false200:                                    ; preds = %land.lhs.true192
  %103 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type201 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !5580
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type201, i32 0, i32 6, !dbg !5580
  %bf.load202 = load i32, i32* %mode, align 4, !dbg !5580
  %bf.lshr = lshr i32 %bf.load202, 16, !dbg !5580
  %bf.clear203 = and i32 %bf.lshr, 255, !dbg !5580
  br label %cond.end204, !dbg !5580

cond.end204:                                      ; preds = %cond.false200, %cond.true198
  %cond205 = phi i32 [ %call199, %cond.true198 ], [ %bf.clear203, %cond.false200 ], !dbg !5580
  %idxprom = zext i32 %cond205 to i64, !dbg !5580
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5580
  %104 = load i8, i8* %arrayidx, align 1, !dbg !5580
  %conv = zext i8 %104 to i32, !dbg !5580
  %cmp206 = icmp eq i32 %conv, 8, !dbg !5580
  br i1 %cmp206, label %land.lhs.true274, label %lor.lhs.false208, !dbg !5580

lor.lhs.false208:                                 ; preds = %cond.end204
  %105 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base209 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !5580
  %106 = bitcast %struct.tree_base* %base209 to i64*, !dbg !5580
  %bf.load210 = load i64, i64* %106, align 8, !dbg !5580
  %bf.clear211 = and i64 %bf.load210, 65535, !dbg !5580
  %bf.cast212 = trunc i64 %bf.clear211 to i32, !dbg !5580
  %cmp213 = icmp eq i32 %bf.cast212, 14, !dbg !5580
  br i1 %cmp213, label %cond.true215, label %cond.false217, !dbg !5580

cond.true215:                                     ; preds = %lor.lhs.false208
  %107 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call216 = call i32 @vector_type_mode(%union.tree_node* %107), !dbg !5580
  br label %cond.end223, !dbg !5580

cond.false217:                                    ; preds = %lor.lhs.false208
  %108 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type218 = bitcast %union.tree_node* %108 to %struct.tree_type*, !dbg !5580
  %mode219 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type218, i32 0, i32 6, !dbg !5580
  %bf.load220 = load i32, i32* %mode219, align 4, !dbg !5580
  %bf.lshr221 = lshr i32 %bf.load220, 16, !dbg !5580
  %bf.clear222 = and i32 %bf.lshr221, 255, !dbg !5580
  br label %cond.end223, !dbg !5580

cond.end223:                                      ; preds = %cond.false217, %cond.true215
  %cond224 = phi i32 [ %call216, %cond.true215 ], [ %bf.clear222, %cond.false217 ], !dbg !5580
  %idxprom225 = zext i32 %cond224 to i64, !dbg !5580
  %arrayidx226 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom225, !dbg !5580
  %109 = load i8, i8* %arrayidx226, align 1, !dbg !5580
  %conv227 = zext i8 %109 to i32, !dbg !5580
  %cmp228 = icmp eq i32 %conv227, 9, !dbg !5580
  br i1 %cmp228, label %land.lhs.true274, label %lor.lhs.false230, !dbg !5580

lor.lhs.false230:                                 ; preds = %cond.end223
  %110 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base231 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !5580
  %111 = bitcast %struct.tree_base* %base231 to i64*, !dbg !5580
  %bf.load232 = load i64, i64* %111, align 8, !dbg !5580
  %bf.clear233 = and i64 %bf.load232, 65535, !dbg !5580
  %bf.cast234 = trunc i64 %bf.clear233 to i32, !dbg !5580
  %cmp235 = icmp eq i32 %bf.cast234, 14, !dbg !5580
  br i1 %cmp235, label %cond.true237, label %cond.false239, !dbg !5580

cond.true237:                                     ; preds = %lor.lhs.false230
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call238 = call i32 @vector_type_mode(%union.tree_node* %112), !dbg !5580
  br label %cond.end245, !dbg !5580

cond.false239:                                    ; preds = %lor.lhs.false230
  %113 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type240 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !5580
  %mode241 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type240, i32 0, i32 6, !dbg !5580
  %bf.load242 = load i32, i32* %mode241, align 4, !dbg !5580
  %bf.lshr243 = lshr i32 %bf.load242, 16, !dbg !5580
  %bf.clear244 = and i32 %bf.lshr243, 255, !dbg !5580
  br label %cond.end245, !dbg !5580

cond.end245:                                      ; preds = %cond.false239, %cond.true237
  %cond246 = phi i32 [ %call238, %cond.true237 ], [ %bf.clear244, %cond.false239 ], !dbg !5580
  %idxprom247 = zext i32 %cond246 to i64, !dbg !5580
  %arrayidx248 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom247, !dbg !5580
  %114 = load i8, i8* %arrayidx248, align 1, !dbg !5580
  %conv249 = zext i8 %114 to i32, !dbg !5580
  %cmp250 = icmp eq i32 %conv249, 11, !dbg !5580
  br i1 %cmp250, label %land.lhs.true274, label %lor.lhs.false252, !dbg !5580

lor.lhs.false252:                                 ; preds = %cond.end245
  %115 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base253 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !5580
  %116 = bitcast %struct.tree_base* %base253 to i64*, !dbg !5580
  %bf.load254 = load i64, i64* %116, align 8, !dbg !5580
  %bf.clear255 = and i64 %bf.load254, 65535, !dbg !5580
  %bf.cast256 = trunc i64 %bf.clear255 to i32, !dbg !5580
  %cmp257 = icmp eq i32 %bf.cast256, 14, !dbg !5580
  br i1 %cmp257, label %cond.true259, label %cond.false261, !dbg !5580

cond.true259:                                     ; preds = %lor.lhs.false252
  %117 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call260 = call i32 @vector_type_mode(%union.tree_node* %117), !dbg !5580
  br label %cond.end267, !dbg !5580

cond.false261:                                    ; preds = %lor.lhs.false252
  %118 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type262 = bitcast %union.tree_node* %118 to %struct.tree_type*, !dbg !5580
  %mode263 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type262, i32 0, i32 6, !dbg !5580
  %bf.load264 = load i32, i32* %mode263, align 4, !dbg !5580
  %bf.lshr265 = lshr i32 %bf.load264, 16, !dbg !5580
  %bf.clear266 = and i32 %bf.lshr265, 255, !dbg !5580
  br label %cond.end267, !dbg !5580

cond.end267:                                      ; preds = %cond.false261, %cond.true259
  %cond268 = phi i32 [ %call260, %cond.true259 ], [ %bf.clear266, %cond.false261 ], !dbg !5580
  %idxprom269 = zext i32 %cond268 to i64, !dbg !5580
  %arrayidx270 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom269, !dbg !5580
  %119 = load i8, i8* %arrayidx270, align 1, !dbg !5580
  %conv271 = zext i8 %119 to i32, !dbg !5580
  %cmp272 = icmp eq i32 %conv271, 17, !dbg !5580
  br i1 %cmp272, label %land.lhs.true274, label %land.lhs.true539, !dbg !5580

land.lhs.true274:                                 ; preds = %cond.end267, %cond.end245, %cond.end223, %cond.end204
  %120 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base275 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !5580
  %121 = bitcast %struct.tree_base* %base275 to i64*, !dbg !5580
  %bf.load276 = load i64, i64* %121, align 8, !dbg !5580
  %bf.clear277 = and i64 %bf.load276, 65535, !dbg !5580
  %bf.cast278 = trunc i64 %bf.clear277 to i32, !dbg !5580
  %cmp279 = icmp eq i32 %bf.cast278, 14, !dbg !5580
  br i1 %cmp279, label %cond.true281, label %cond.false283, !dbg !5580

cond.true281:                                     ; preds = %land.lhs.true274
  %122 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call282 = call i32 @vector_type_mode(%union.tree_node* %122), !dbg !5580
  br label %cond.end289, !dbg !5580

cond.false283:                                    ; preds = %land.lhs.true274
  %123 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type284 = bitcast %union.tree_node* %123 to %struct.tree_type*, !dbg !5580
  %mode285 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type284, i32 0, i32 6, !dbg !5580
  %bf.load286 = load i32, i32* %mode285, align 4, !dbg !5580
  %bf.lshr287 = lshr i32 %bf.load286, 16, !dbg !5580
  %bf.clear288 = and i32 %bf.lshr287, 255, !dbg !5580
  br label %cond.end289, !dbg !5580

cond.end289:                                      ; preds = %cond.false283, %cond.true281
  %cond290 = phi i32 [ %call282, %cond.true281 ], [ %bf.clear288, %cond.false283 ], !dbg !5580
  %idxprom291 = zext i32 %cond290 to i64, !dbg !5580
  %arrayidx292 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom291, !dbg !5580
  %124 = load i8, i8* %arrayidx292, align 1, !dbg !5580
  %conv293 = zext i8 %124 to i32, !dbg !5580
  %cmp294 = icmp eq i32 %conv293, 8, !dbg !5580
  br i1 %cmp294, label %cond.true318, label %lor.lhs.false296, !dbg !5580

lor.lhs.false296:                                 ; preds = %cond.end289
  %125 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base297 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !5580
  %126 = bitcast %struct.tree_base* %base297 to i64*, !dbg !5580
  %bf.load298 = load i64, i64* %126, align 8, !dbg !5580
  %bf.clear299 = and i64 %bf.load298, 65535, !dbg !5580
  %bf.cast300 = trunc i64 %bf.clear299 to i32, !dbg !5580
  %cmp301 = icmp eq i32 %bf.cast300, 14, !dbg !5580
  br i1 %cmp301, label %cond.true303, label %cond.false305, !dbg !5580

cond.true303:                                     ; preds = %lor.lhs.false296
  %127 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call304 = call i32 @vector_type_mode(%union.tree_node* %127), !dbg !5580
  br label %cond.end311, !dbg !5580

cond.false305:                                    ; preds = %lor.lhs.false296
  %128 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type306 = bitcast %union.tree_node* %128 to %struct.tree_type*, !dbg !5580
  %mode307 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type306, i32 0, i32 6, !dbg !5580
  %bf.load308 = load i32, i32* %mode307, align 4, !dbg !5580
  %bf.lshr309 = lshr i32 %bf.load308, 16, !dbg !5580
  %bf.clear310 = and i32 %bf.lshr309, 255, !dbg !5580
  br label %cond.end311, !dbg !5580

cond.end311:                                      ; preds = %cond.false305, %cond.true303
  %cond312 = phi i32 [ %call304, %cond.true303 ], [ %bf.clear310, %cond.false305 ], !dbg !5580
  %idxprom313 = zext i32 %cond312 to i64, !dbg !5580
  %arrayidx314 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom313, !dbg !5580
  %129 = load i8, i8* %arrayidx314, align 1, !dbg !5580
  %conv315 = zext i8 %129 to i32, !dbg !5580
  %cmp316 = icmp eq i32 %conv315, 9, !dbg !5580
  br i1 %cmp316, label %cond.true318, label %cond.false335, !dbg !5580

cond.true318:                                     ; preds = %cond.end311, %cond.end289
  %130 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base319 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !5580
  %131 = bitcast %struct.tree_base* %base319 to i64*, !dbg !5580
  %bf.load320 = load i64, i64* %131, align 8, !dbg !5580
  %bf.clear321 = and i64 %bf.load320, 65535, !dbg !5580
  %bf.cast322 = trunc i64 %bf.clear321 to i32, !dbg !5580
  %cmp323 = icmp eq i32 %bf.cast322, 14, !dbg !5580
  br i1 %cmp323, label %cond.true325, label %cond.false327, !dbg !5580

cond.true325:                                     ; preds = %cond.true318
  %132 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call326 = call i32 @vector_type_mode(%union.tree_node* %132), !dbg !5580
  br label %cond.end333, !dbg !5580

cond.false327:                                    ; preds = %cond.true318
  %133 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type328 = bitcast %union.tree_node* %133 to %struct.tree_type*, !dbg !5580
  %mode329 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type328, i32 0, i32 6, !dbg !5580
  %bf.load330 = load i32, i32* %mode329, align 4, !dbg !5580
  %bf.lshr331 = lshr i32 %bf.load330, 16, !dbg !5580
  %bf.clear332 = and i32 %bf.lshr331, 255, !dbg !5580
  br label %cond.end333, !dbg !5580

cond.end333:                                      ; preds = %cond.false327, %cond.true325
  %cond334 = phi i32 [ %call326, %cond.true325 ], [ %bf.clear332, %cond.false327 ], !dbg !5580
  br label %cond.end355, !dbg !5580

cond.false335:                                    ; preds = %cond.end311
  %134 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base336 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !5580
  %135 = bitcast %struct.tree_base* %base336 to i64*, !dbg !5580
  %bf.load337 = load i64, i64* %135, align 8, !dbg !5580
  %bf.clear338 = and i64 %bf.load337, 65535, !dbg !5580
  %bf.cast339 = trunc i64 %bf.clear338 to i32, !dbg !5580
  %cmp340 = icmp eq i32 %bf.cast339, 14, !dbg !5580
  br i1 %cmp340, label %cond.true342, label %cond.false344, !dbg !5580

cond.true342:                                     ; preds = %cond.false335
  %136 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call343 = call i32 @vector_type_mode(%union.tree_node* %136), !dbg !5580
  br label %cond.end350, !dbg !5580

cond.false344:                                    ; preds = %cond.false335
  %137 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type345 = bitcast %union.tree_node* %137 to %struct.tree_type*, !dbg !5580
  %mode346 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type345, i32 0, i32 6, !dbg !5580
  %bf.load347 = load i32, i32* %mode346, align 4, !dbg !5580
  %bf.lshr348 = lshr i32 %bf.load347, 16, !dbg !5580
  %bf.clear349 = and i32 %bf.lshr348, 255, !dbg !5580
  br label %cond.end350, !dbg !5580

cond.end350:                                      ; preds = %cond.false344, %cond.true342
  %cond351 = phi i32 [ %call343, %cond.true342 ], [ %bf.clear349, %cond.false344 ], !dbg !5580
  %idxprom352 = zext i32 %cond351 to i64, !dbg !5580
  %arrayidx353 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom352, !dbg !5580
  %138 = load i8, i8* %arrayidx353, align 1, !dbg !5580
  %conv354 = zext i8 %138 to i32, !dbg !5580
  br label %cond.end355, !dbg !5580

cond.end355:                                      ; preds = %cond.end350, %cond.end333
  %cond356 = phi i32 [ %cond334, %cond.end333 ], [ %conv354, %cond.end350 ], !dbg !5580
  %idxprom357 = zext i32 %cond356 to i64, !dbg !5580
  %arrayidx358 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom357, !dbg !5580
  %139 = load i8, i8* %arrayidx358, align 1, !dbg !5580
  %conv359 = zext i8 %139 to i32, !dbg !5580
  %cmp360 = icmp eq i32 %conv359, 9, !dbg !5580
  br i1 %cmp360, label %cond.true362, label %cond.false447, !dbg !5580

cond.true362:                                     ; preds = %cond.end355
  %140 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base363 = bitcast %union.tree_node* %140 to %struct.tree_base*, !dbg !5580
  %141 = bitcast %struct.tree_base* %base363 to i64*, !dbg !5580
  %bf.load364 = load i64, i64* %141, align 8, !dbg !5580
  %bf.clear365 = and i64 %bf.load364, 65535, !dbg !5580
  %bf.cast366 = trunc i64 %bf.clear365 to i32, !dbg !5580
  %cmp367 = icmp eq i32 %bf.cast366, 14, !dbg !5580
  br i1 %cmp367, label %cond.true369, label %cond.false371, !dbg !5580

cond.true369:                                     ; preds = %cond.true362
  %142 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call370 = call i32 @vector_type_mode(%union.tree_node* %142), !dbg !5580
  br label %cond.end377, !dbg !5580

cond.false371:                                    ; preds = %cond.true362
  %143 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type372 = bitcast %union.tree_node* %143 to %struct.tree_type*, !dbg !5580
  %mode373 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type372, i32 0, i32 6, !dbg !5580
  %bf.load374 = load i32, i32* %mode373, align 4, !dbg !5580
  %bf.lshr375 = lshr i32 %bf.load374, 16, !dbg !5580
  %bf.clear376 = and i32 %bf.lshr375, 255, !dbg !5580
  br label %cond.end377, !dbg !5580

cond.end377:                                      ; preds = %cond.false371, %cond.true369
  %cond378 = phi i32 [ %call370, %cond.true369 ], [ %bf.clear376, %cond.false371 ], !dbg !5580
  %idxprom379 = zext i32 %cond378 to i64, !dbg !5580
  %arrayidx380 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom379, !dbg !5580
  %144 = load i8, i8* %arrayidx380, align 1, !dbg !5580
  %conv381 = zext i8 %144 to i32, !dbg !5580
  %cmp382 = icmp eq i32 %conv381, 8, !dbg !5580
  br i1 %cmp382, label %cond.true406, label %lor.lhs.false384, !dbg !5580

lor.lhs.false384:                                 ; preds = %cond.end377
  %145 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base385 = bitcast %union.tree_node* %145 to %struct.tree_base*, !dbg !5580
  %146 = bitcast %struct.tree_base* %base385 to i64*, !dbg !5580
  %bf.load386 = load i64, i64* %146, align 8, !dbg !5580
  %bf.clear387 = and i64 %bf.load386, 65535, !dbg !5580
  %bf.cast388 = trunc i64 %bf.clear387 to i32, !dbg !5580
  %cmp389 = icmp eq i32 %bf.cast388, 14, !dbg !5580
  br i1 %cmp389, label %cond.true391, label %cond.false393, !dbg !5580

cond.true391:                                     ; preds = %lor.lhs.false384
  %147 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call392 = call i32 @vector_type_mode(%union.tree_node* %147), !dbg !5580
  br label %cond.end399, !dbg !5580

cond.false393:                                    ; preds = %lor.lhs.false384
  %148 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type394 = bitcast %union.tree_node* %148 to %struct.tree_type*, !dbg !5580
  %mode395 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type394, i32 0, i32 6, !dbg !5580
  %bf.load396 = load i32, i32* %mode395, align 4, !dbg !5580
  %bf.lshr397 = lshr i32 %bf.load396, 16, !dbg !5580
  %bf.clear398 = and i32 %bf.lshr397, 255, !dbg !5580
  br label %cond.end399, !dbg !5580

cond.end399:                                      ; preds = %cond.false393, %cond.true391
  %cond400 = phi i32 [ %call392, %cond.true391 ], [ %bf.clear398, %cond.false393 ], !dbg !5580
  %idxprom401 = zext i32 %cond400 to i64, !dbg !5580
  %arrayidx402 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom401, !dbg !5580
  %149 = load i8, i8* %arrayidx402, align 1, !dbg !5580
  %conv403 = zext i8 %149 to i32, !dbg !5580
  %cmp404 = icmp eq i32 %conv403, 9, !dbg !5580
  br i1 %cmp404, label %cond.true406, label %cond.false423, !dbg !5580

cond.true406:                                     ; preds = %cond.end399, %cond.end377
  %150 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base407 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !5580
  %151 = bitcast %struct.tree_base* %base407 to i64*, !dbg !5580
  %bf.load408 = load i64, i64* %151, align 8, !dbg !5580
  %bf.clear409 = and i64 %bf.load408, 65535, !dbg !5580
  %bf.cast410 = trunc i64 %bf.clear409 to i32, !dbg !5580
  %cmp411 = icmp eq i32 %bf.cast410, 14, !dbg !5580
  br i1 %cmp411, label %cond.true413, label %cond.false415, !dbg !5580

cond.true413:                                     ; preds = %cond.true406
  %152 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call414 = call i32 @vector_type_mode(%union.tree_node* %152), !dbg !5580
  br label %cond.end421, !dbg !5580

cond.false415:                                    ; preds = %cond.true406
  %153 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type416 = bitcast %union.tree_node* %153 to %struct.tree_type*, !dbg !5580
  %mode417 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type416, i32 0, i32 6, !dbg !5580
  %bf.load418 = load i32, i32* %mode417, align 4, !dbg !5580
  %bf.lshr419 = lshr i32 %bf.load418, 16, !dbg !5580
  %bf.clear420 = and i32 %bf.lshr419, 255, !dbg !5580
  br label %cond.end421, !dbg !5580

cond.end421:                                      ; preds = %cond.false415, %cond.true413
  %cond422 = phi i32 [ %call414, %cond.true413 ], [ %bf.clear420, %cond.false415 ], !dbg !5580
  br label %cond.end443, !dbg !5580

cond.false423:                                    ; preds = %cond.end399
  %154 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base424 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !5580
  %155 = bitcast %struct.tree_base* %base424 to i64*, !dbg !5580
  %bf.load425 = load i64, i64* %155, align 8, !dbg !5580
  %bf.clear426 = and i64 %bf.load425, 65535, !dbg !5580
  %bf.cast427 = trunc i64 %bf.clear426 to i32, !dbg !5580
  %cmp428 = icmp eq i32 %bf.cast427, 14, !dbg !5580
  br i1 %cmp428, label %cond.true430, label %cond.false432, !dbg !5580

cond.true430:                                     ; preds = %cond.false423
  %156 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call431 = call i32 @vector_type_mode(%union.tree_node* %156), !dbg !5580
  br label %cond.end438, !dbg !5580

cond.false432:                                    ; preds = %cond.false423
  %157 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type433 = bitcast %union.tree_node* %157 to %struct.tree_type*, !dbg !5580
  %mode434 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type433, i32 0, i32 6, !dbg !5580
  %bf.load435 = load i32, i32* %mode434, align 4, !dbg !5580
  %bf.lshr436 = lshr i32 %bf.load435, 16, !dbg !5580
  %bf.clear437 = and i32 %bf.lshr436, 255, !dbg !5580
  br label %cond.end438, !dbg !5580

cond.end438:                                      ; preds = %cond.false432, %cond.true430
  %cond439 = phi i32 [ %call431, %cond.true430 ], [ %bf.clear437, %cond.false432 ], !dbg !5580
  %idxprom440 = zext i32 %cond439 to i64, !dbg !5580
  %arrayidx441 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom440, !dbg !5580
  %158 = load i8, i8* %arrayidx441, align 1, !dbg !5580
  %conv442 = zext i8 %158 to i32, !dbg !5580
  br label %cond.end443, !dbg !5580

cond.end443:                                      ; preds = %cond.end438, %cond.end421
  %cond444 = phi i32 [ %cond422, %cond.end421 ], [ %conv442, %cond.end438 ], !dbg !5580
  %sub445 = sub i32 %cond444, 42, !dbg !5580
  %add446 = add i32 %sub445, 4, !dbg !5580
  br label %cond.end531, !dbg !5580

cond.false447:                                    ; preds = %cond.end355
  %159 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base448 = bitcast %union.tree_node* %159 to %struct.tree_base*, !dbg !5580
  %160 = bitcast %struct.tree_base* %base448 to i64*, !dbg !5580
  %bf.load449 = load i64, i64* %160, align 8, !dbg !5580
  %bf.clear450 = and i64 %bf.load449, 65535, !dbg !5580
  %bf.cast451 = trunc i64 %bf.clear450 to i32, !dbg !5580
  %cmp452 = icmp eq i32 %bf.cast451, 14, !dbg !5580
  br i1 %cmp452, label %cond.true454, label %cond.false456, !dbg !5580

cond.true454:                                     ; preds = %cond.false447
  %161 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call455 = call i32 @vector_type_mode(%union.tree_node* %161), !dbg !5580
  br label %cond.end462, !dbg !5580

cond.false456:                                    ; preds = %cond.false447
  %162 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type457 = bitcast %union.tree_node* %162 to %struct.tree_type*, !dbg !5580
  %mode458 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type457, i32 0, i32 6, !dbg !5580
  %bf.load459 = load i32, i32* %mode458, align 4, !dbg !5580
  %bf.lshr460 = lshr i32 %bf.load459, 16, !dbg !5580
  %bf.clear461 = and i32 %bf.lshr460, 255, !dbg !5580
  br label %cond.end462, !dbg !5580

cond.end462:                                      ; preds = %cond.false456, %cond.true454
  %cond463 = phi i32 [ %call455, %cond.true454 ], [ %bf.clear461, %cond.false456 ], !dbg !5580
  %idxprom464 = zext i32 %cond463 to i64, !dbg !5580
  %arrayidx465 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom464, !dbg !5580
  %163 = load i8, i8* %arrayidx465, align 1, !dbg !5580
  %conv466 = zext i8 %163 to i32, !dbg !5580
  %cmp467 = icmp eq i32 %conv466, 8, !dbg !5580
  br i1 %cmp467, label %cond.true491, label %lor.lhs.false469, !dbg !5580

lor.lhs.false469:                                 ; preds = %cond.end462
  %164 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base470 = bitcast %union.tree_node* %164 to %struct.tree_base*, !dbg !5580
  %165 = bitcast %struct.tree_base* %base470 to i64*, !dbg !5580
  %bf.load471 = load i64, i64* %165, align 8, !dbg !5580
  %bf.clear472 = and i64 %bf.load471, 65535, !dbg !5580
  %bf.cast473 = trunc i64 %bf.clear472 to i32, !dbg !5580
  %cmp474 = icmp eq i32 %bf.cast473, 14, !dbg !5580
  br i1 %cmp474, label %cond.true476, label %cond.false478, !dbg !5580

cond.true476:                                     ; preds = %lor.lhs.false469
  %166 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call477 = call i32 @vector_type_mode(%union.tree_node* %166), !dbg !5580
  br label %cond.end484, !dbg !5580

cond.false478:                                    ; preds = %lor.lhs.false469
  %167 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type479 = bitcast %union.tree_node* %167 to %struct.tree_type*, !dbg !5580
  %mode480 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type479, i32 0, i32 6, !dbg !5580
  %bf.load481 = load i32, i32* %mode480, align 4, !dbg !5580
  %bf.lshr482 = lshr i32 %bf.load481, 16, !dbg !5580
  %bf.clear483 = and i32 %bf.lshr482, 255, !dbg !5580
  br label %cond.end484, !dbg !5580

cond.end484:                                      ; preds = %cond.false478, %cond.true476
  %cond485 = phi i32 [ %call477, %cond.true476 ], [ %bf.clear483, %cond.false478 ], !dbg !5580
  %idxprom486 = zext i32 %cond485 to i64, !dbg !5580
  %arrayidx487 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom486, !dbg !5580
  %168 = load i8, i8* %arrayidx487, align 1, !dbg !5580
  %conv488 = zext i8 %168 to i32, !dbg !5580
  %cmp489 = icmp eq i32 %conv488, 9, !dbg !5580
  br i1 %cmp489, label %cond.true491, label %cond.false508, !dbg !5580

cond.true491:                                     ; preds = %cond.end484, %cond.end462
  %169 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base492 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !5580
  %170 = bitcast %struct.tree_base* %base492 to i64*, !dbg !5580
  %bf.load493 = load i64, i64* %170, align 8, !dbg !5580
  %bf.clear494 = and i64 %bf.load493, 65535, !dbg !5580
  %bf.cast495 = trunc i64 %bf.clear494 to i32, !dbg !5580
  %cmp496 = icmp eq i32 %bf.cast495, 14, !dbg !5580
  br i1 %cmp496, label %cond.true498, label %cond.false500, !dbg !5580

cond.true498:                                     ; preds = %cond.true491
  %171 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call499 = call i32 @vector_type_mode(%union.tree_node* %171), !dbg !5580
  br label %cond.end506, !dbg !5580

cond.false500:                                    ; preds = %cond.true491
  %172 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type501 = bitcast %union.tree_node* %172 to %struct.tree_type*, !dbg !5580
  %mode502 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type501, i32 0, i32 6, !dbg !5580
  %bf.load503 = load i32, i32* %mode502, align 4, !dbg !5580
  %bf.lshr504 = lshr i32 %bf.load503, 16, !dbg !5580
  %bf.clear505 = and i32 %bf.lshr504, 255, !dbg !5580
  br label %cond.end506, !dbg !5580

cond.end506:                                      ; preds = %cond.false500, %cond.true498
  %cond507 = phi i32 [ %call499, %cond.true498 ], [ %bf.clear505, %cond.false500 ], !dbg !5580
  br label %cond.end528, !dbg !5580

cond.false508:                                    ; preds = %cond.end484
  %173 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %base509 = bitcast %union.tree_node* %173 to %struct.tree_base*, !dbg !5580
  %174 = bitcast %struct.tree_base* %base509 to i64*, !dbg !5580
  %bf.load510 = load i64, i64* %174, align 8, !dbg !5580
  %bf.clear511 = and i64 %bf.load510, 65535, !dbg !5580
  %bf.cast512 = trunc i64 %bf.clear511 to i32, !dbg !5580
  %cmp513 = icmp eq i32 %bf.cast512, 14, !dbg !5580
  br i1 %cmp513, label %cond.true515, label %cond.false517, !dbg !5580

cond.true515:                                     ; preds = %cond.false508
  %175 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %call516 = call i32 @vector_type_mode(%union.tree_node* %175), !dbg !5580
  br label %cond.end523, !dbg !5580

cond.false517:                                    ; preds = %cond.false508
  %176 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %type518 = bitcast %union.tree_node* %176 to %struct.tree_type*, !dbg !5580
  %mode519 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type518, i32 0, i32 6, !dbg !5580
  %bf.load520 = load i32, i32* %mode519, align 4, !dbg !5580
  %bf.lshr521 = lshr i32 %bf.load520, 16, !dbg !5580
  %bf.clear522 = and i32 %bf.lshr521, 255, !dbg !5580
  br label %cond.end523, !dbg !5580

cond.end523:                                      ; preds = %cond.false517, %cond.true515
  %cond524 = phi i32 [ %call516, %cond.true515 ], [ %bf.clear522, %cond.false517 ], !dbg !5580
  %idxprom525 = zext i32 %cond524 to i64, !dbg !5580
  %arrayidx526 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom525, !dbg !5580
  %177 = load i8, i8* %arrayidx526, align 1, !dbg !5580
  %conv527 = zext i8 %177 to i32, !dbg !5580
  br label %cond.end528, !dbg !5580

cond.end528:                                      ; preds = %cond.end523, %cond.end506
  %cond529 = phi i32 [ %cond507, %cond.end506 ], [ %conv527, %cond.end523 ], !dbg !5580
  %sub530 = sub i32 %cond529, 38, !dbg !5580
  br label %cond.end531, !dbg !5580

cond.end531:                                      ; preds = %cond.end528, %cond.end443
  %cond532 = phi i32 [ %add446, %cond.end443 ], [ %sub530, %cond.end528 ], !dbg !5580
  %idxprom533 = zext i32 %cond532 to i64, !dbg !5580
  %arrayidx534 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom533, !dbg !5580
  %178 = load %struct.real_format*, %struct.real_format** %arrayidx534, align 8, !dbg !5580
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %178, i32 0, i32 11, !dbg !5580
  %179 = load i8, i8* %has_nans, align 2, !dbg !5580
  %conv535 = zext i8 %179 to i32, !dbg !5580
  %tobool536 = icmp ne i32 %conv535, 0, !dbg !5580
  br i1 %tobool536, label %land.lhs.true537, label %land.lhs.true539, !dbg !5580

land.lhs.true537:                                 ; preds = %cond.end531
  %180 = load i32, i32* @flag_finite_math_only, align 4, !dbg !5580
  %tobool538 = icmp ne i32 %180, 0, !dbg !5580
  br i1 %tobool538, label %land.lhs.true539, label %if.else925, !dbg !5581

land.lhs.true539:                                 ; preds = %land.lhs.true537, %cond.end531, %cond.end267
  %181 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base540 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !5582
  %182 = bitcast %struct.tree_base* %base540 to i64*, !dbg !5582
  %bf.load541 = load i64, i64* %182, align 8, !dbg !5582
  %bf.clear542 = and i64 %bf.load541, 65535, !dbg !5582
  %bf.cast543 = trunc i64 %bf.clear542 to i32, !dbg !5582
  %cmp544 = icmp eq i32 %bf.cast543, 14, !dbg !5582
  br i1 %cmp544, label %cond.true546, label %cond.false548, !dbg !5582

cond.true546:                                     ; preds = %land.lhs.true539
  %183 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call547 = call i32 @vector_type_mode(%union.tree_node* %183), !dbg !5582
  br label %cond.end554, !dbg !5582

cond.false548:                                    ; preds = %land.lhs.true539
  %184 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type549 = bitcast %union.tree_node* %184 to %struct.tree_type*, !dbg !5582
  %mode550 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type549, i32 0, i32 6, !dbg !5582
  %bf.load551 = load i32, i32* %mode550, align 4, !dbg !5582
  %bf.lshr552 = lshr i32 %bf.load551, 16, !dbg !5582
  %bf.clear553 = and i32 %bf.lshr552, 255, !dbg !5582
  br label %cond.end554, !dbg !5582

cond.end554:                                      ; preds = %cond.false548, %cond.true546
  %cond555 = phi i32 [ %call547, %cond.true546 ], [ %bf.clear553, %cond.false548 ], !dbg !5582
  %idxprom556 = zext i32 %cond555 to i64, !dbg !5582
  %arrayidx557 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom556, !dbg !5582
  %185 = load i8, i8* %arrayidx557, align 1, !dbg !5582
  %conv558 = zext i8 %185 to i32, !dbg !5582
  %cmp559 = icmp eq i32 %conv558, 8, !dbg !5582
  br i1 %cmp559, label %land.lhs.true627, label %lor.lhs.false561, !dbg !5582

lor.lhs.false561:                                 ; preds = %cond.end554
  %186 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base562 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !5582
  %187 = bitcast %struct.tree_base* %base562 to i64*, !dbg !5582
  %bf.load563 = load i64, i64* %187, align 8, !dbg !5582
  %bf.clear564 = and i64 %bf.load563, 65535, !dbg !5582
  %bf.cast565 = trunc i64 %bf.clear564 to i32, !dbg !5582
  %cmp566 = icmp eq i32 %bf.cast565, 14, !dbg !5582
  br i1 %cmp566, label %cond.true568, label %cond.false570, !dbg !5582

cond.true568:                                     ; preds = %lor.lhs.false561
  %188 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call569 = call i32 @vector_type_mode(%union.tree_node* %188), !dbg !5582
  br label %cond.end576, !dbg !5582

cond.false570:                                    ; preds = %lor.lhs.false561
  %189 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type571 = bitcast %union.tree_node* %189 to %struct.tree_type*, !dbg !5582
  %mode572 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type571, i32 0, i32 6, !dbg !5582
  %bf.load573 = load i32, i32* %mode572, align 4, !dbg !5582
  %bf.lshr574 = lshr i32 %bf.load573, 16, !dbg !5582
  %bf.clear575 = and i32 %bf.lshr574, 255, !dbg !5582
  br label %cond.end576, !dbg !5582

cond.end576:                                      ; preds = %cond.false570, %cond.true568
  %cond577 = phi i32 [ %call569, %cond.true568 ], [ %bf.clear575, %cond.false570 ], !dbg !5582
  %idxprom578 = zext i32 %cond577 to i64, !dbg !5582
  %arrayidx579 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom578, !dbg !5582
  %190 = load i8, i8* %arrayidx579, align 1, !dbg !5582
  %conv580 = zext i8 %190 to i32, !dbg !5582
  %cmp581 = icmp eq i32 %conv580, 9, !dbg !5582
  br i1 %cmp581, label %land.lhs.true627, label %lor.lhs.false583, !dbg !5582

lor.lhs.false583:                                 ; preds = %cond.end576
  %191 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base584 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !5582
  %192 = bitcast %struct.tree_base* %base584 to i64*, !dbg !5582
  %bf.load585 = load i64, i64* %192, align 8, !dbg !5582
  %bf.clear586 = and i64 %bf.load585, 65535, !dbg !5582
  %bf.cast587 = trunc i64 %bf.clear586 to i32, !dbg !5582
  %cmp588 = icmp eq i32 %bf.cast587, 14, !dbg !5582
  br i1 %cmp588, label %cond.true590, label %cond.false592, !dbg !5582

cond.true590:                                     ; preds = %lor.lhs.false583
  %193 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call591 = call i32 @vector_type_mode(%union.tree_node* %193), !dbg !5582
  br label %cond.end598, !dbg !5582

cond.false592:                                    ; preds = %lor.lhs.false583
  %194 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type593 = bitcast %union.tree_node* %194 to %struct.tree_type*, !dbg !5582
  %mode594 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type593, i32 0, i32 6, !dbg !5582
  %bf.load595 = load i32, i32* %mode594, align 4, !dbg !5582
  %bf.lshr596 = lshr i32 %bf.load595, 16, !dbg !5582
  %bf.clear597 = and i32 %bf.lshr596, 255, !dbg !5582
  br label %cond.end598, !dbg !5582

cond.end598:                                      ; preds = %cond.false592, %cond.true590
  %cond599 = phi i32 [ %call591, %cond.true590 ], [ %bf.clear597, %cond.false592 ], !dbg !5582
  %idxprom600 = zext i32 %cond599 to i64, !dbg !5582
  %arrayidx601 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom600, !dbg !5582
  %195 = load i8, i8* %arrayidx601, align 1, !dbg !5582
  %conv602 = zext i8 %195 to i32, !dbg !5582
  %cmp603 = icmp eq i32 %conv602, 11, !dbg !5582
  br i1 %cmp603, label %land.lhs.true627, label %lor.lhs.false605, !dbg !5582

lor.lhs.false605:                                 ; preds = %cond.end598
  %196 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base606 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !5582
  %197 = bitcast %struct.tree_base* %base606 to i64*, !dbg !5582
  %bf.load607 = load i64, i64* %197, align 8, !dbg !5582
  %bf.clear608 = and i64 %bf.load607, 65535, !dbg !5582
  %bf.cast609 = trunc i64 %bf.clear608 to i32, !dbg !5582
  %cmp610 = icmp eq i32 %bf.cast609, 14, !dbg !5582
  br i1 %cmp610, label %cond.true612, label %cond.false614, !dbg !5582

cond.true612:                                     ; preds = %lor.lhs.false605
  %198 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call613 = call i32 @vector_type_mode(%union.tree_node* %198), !dbg !5582
  br label %cond.end620, !dbg !5582

cond.false614:                                    ; preds = %lor.lhs.false605
  %199 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type615 = bitcast %union.tree_node* %199 to %struct.tree_type*, !dbg !5582
  %mode616 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type615, i32 0, i32 6, !dbg !5582
  %bf.load617 = load i32, i32* %mode616, align 4, !dbg !5582
  %bf.lshr618 = lshr i32 %bf.load617, 16, !dbg !5582
  %bf.clear619 = and i32 %bf.lshr618, 255, !dbg !5582
  br label %cond.end620, !dbg !5582

cond.end620:                                      ; preds = %cond.false614, %cond.true612
  %cond621 = phi i32 [ %call613, %cond.true612 ], [ %bf.clear619, %cond.false614 ], !dbg !5582
  %idxprom622 = zext i32 %cond621 to i64, !dbg !5582
  %arrayidx623 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom622, !dbg !5582
  %200 = load i8, i8* %arrayidx623, align 1, !dbg !5582
  %conv624 = zext i8 %200 to i32, !dbg !5582
  %cmp625 = icmp eq i32 %conv624, 17, !dbg !5582
  br i1 %cmp625, label %land.lhs.true627, label %land.lhs.true892, !dbg !5582

land.lhs.true627:                                 ; preds = %cond.end620, %cond.end598, %cond.end576, %cond.end554
  %201 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base628 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !5582
  %202 = bitcast %struct.tree_base* %base628 to i64*, !dbg !5582
  %bf.load629 = load i64, i64* %202, align 8, !dbg !5582
  %bf.clear630 = and i64 %bf.load629, 65535, !dbg !5582
  %bf.cast631 = trunc i64 %bf.clear630 to i32, !dbg !5582
  %cmp632 = icmp eq i32 %bf.cast631, 14, !dbg !5582
  br i1 %cmp632, label %cond.true634, label %cond.false636, !dbg !5582

cond.true634:                                     ; preds = %land.lhs.true627
  %203 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call635 = call i32 @vector_type_mode(%union.tree_node* %203), !dbg !5582
  br label %cond.end642, !dbg !5582

cond.false636:                                    ; preds = %land.lhs.true627
  %204 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type637 = bitcast %union.tree_node* %204 to %struct.tree_type*, !dbg !5582
  %mode638 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type637, i32 0, i32 6, !dbg !5582
  %bf.load639 = load i32, i32* %mode638, align 4, !dbg !5582
  %bf.lshr640 = lshr i32 %bf.load639, 16, !dbg !5582
  %bf.clear641 = and i32 %bf.lshr640, 255, !dbg !5582
  br label %cond.end642, !dbg !5582

cond.end642:                                      ; preds = %cond.false636, %cond.true634
  %cond643 = phi i32 [ %call635, %cond.true634 ], [ %bf.clear641, %cond.false636 ], !dbg !5582
  %idxprom644 = zext i32 %cond643 to i64, !dbg !5582
  %arrayidx645 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom644, !dbg !5582
  %205 = load i8, i8* %arrayidx645, align 1, !dbg !5582
  %conv646 = zext i8 %205 to i32, !dbg !5582
  %cmp647 = icmp eq i32 %conv646, 8, !dbg !5582
  br i1 %cmp647, label %cond.true671, label %lor.lhs.false649, !dbg !5582

lor.lhs.false649:                                 ; preds = %cond.end642
  %206 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base650 = bitcast %union.tree_node* %206 to %struct.tree_base*, !dbg !5582
  %207 = bitcast %struct.tree_base* %base650 to i64*, !dbg !5582
  %bf.load651 = load i64, i64* %207, align 8, !dbg !5582
  %bf.clear652 = and i64 %bf.load651, 65535, !dbg !5582
  %bf.cast653 = trunc i64 %bf.clear652 to i32, !dbg !5582
  %cmp654 = icmp eq i32 %bf.cast653, 14, !dbg !5582
  br i1 %cmp654, label %cond.true656, label %cond.false658, !dbg !5582

cond.true656:                                     ; preds = %lor.lhs.false649
  %208 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call657 = call i32 @vector_type_mode(%union.tree_node* %208), !dbg !5582
  br label %cond.end664, !dbg !5582

cond.false658:                                    ; preds = %lor.lhs.false649
  %209 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type659 = bitcast %union.tree_node* %209 to %struct.tree_type*, !dbg !5582
  %mode660 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type659, i32 0, i32 6, !dbg !5582
  %bf.load661 = load i32, i32* %mode660, align 4, !dbg !5582
  %bf.lshr662 = lshr i32 %bf.load661, 16, !dbg !5582
  %bf.clear663 = and i32 %bf.lshr662, 255, !dbg !5582
  br label %cond.end664, !dbg !5582

cond.end664:                                      ; preds = %cond.false658, %cond.true656
  %cond665 = phi i32 [ %call657, %cond.true656 ], [ %bf.clear663, %cond.false658 ], !dbg !5582
  %idxprom666 = zext i32 %cond665 to i64, !dbg !5582
  %arrayidx667 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom666, !dbg !5582
  %210 = load i8, i8* %arrayidx667, align 1, !dbg !5582
  %conv668 = zext i8 %210 to i32, !dbg !5582
  %cmp669 = icmp eq i32 %conv668, 9, !dbg !5582
  br i1 %cmp669, label %cond.true671, label %cond.false688, !dbg !5582

cond.true671:                                     ; preds = %cond.end664, %cond.end642
  %211 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base672 = bitcast %union.tree_node* %211 to %struct.tree_base*, !dbg !5582
  %212 = bitcast %struct.tree_base* %base672 to i64*, !dbg !5582
  %bf.load673 = load i64, i64* %212, align 8, !dbg !5582
  %bf.clear674 = and i64 %bf.load673, 65535, !dbg !5582
  %bf.cast675 = trunc i64 %bf.clear674 to i32, !dbg !5582
  %cmp676 = icmp eq i32 %bf.cast675, 14, !dbg !5582
  br i1 %cmp676, label %cond.true678, label %cond.false680, !dbg !5582

cond.true678:                                     ; preds = %cond.true671
  %213 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call679 = call i32 @vector_type_mode(%union.tree_node* %213), !dbg !5582
  br label %cond.end686, !dbg !5582

cond.false680:                                    ; preds = %cond.true671
  %214 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type681 = bitcast %union.tree_node* %214 to %struct.tree_type*, !dbg !5582
  %mode682 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type681, i32 0, i32 6, !dbg !5582
  %bf.load683 = load i32, i32* %mode682, align 4, !dbg !5582
  %bf.lshr684 = lshr i32 %bf.load683, 16, !dbg !5582
  %bf.clear685 = and i32 %bf.lshr684, 255, !dbg !5582
  br label %cond.end686, !dbg !5582

cond.end686:                                      ; preds = %cond.false680, %cond.true678
  %cond687 = phi i32 [ %call679, %cond.true678 ], [ %bf.clear685, %cond.false680 ], !dbg !5582
  br label %cond.end708, !dbg !5582

cond.false688:                                    ; preds = %cond.end664
  %215 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base689 = bitcast %union.tree_node* %215 to %struct.tree_base*, !dbg !5582
  %216 = bitcast %struct.tree_base* %base689 to i64*, !dbg !5582
  %bf.load690 = load i64, i64* %216, align 8, !dbg !5582
  %bf.clear691 = and i64 %bf.load690, 65535, !dbg !5582
  %bf.cast692 = trunc i64 %bf.clear691 to i32, !dbg !5582
  %cmp693 = icmp eq i32 %bf.cast692, 14, !dbg !5582
  br i1 %cmp693, label %cond.true695, label %cond.false697, !dbg !5582

cond.true695:                                     ; preds = %cond.false688
  %217 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call696 = call i32 @vector_type_mode(%union.tree_node* %217), !dbg !5582
  br label %cond.end703, !dbg !5582

cond.false697:                                    ; preds = %cond.false688
  %218 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type698 = bitcast %union.tree_node* %218 to %struct.tree_type*, !dbg !5582
  %mode699 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type698, i32 0, i32 6, !dbg !5582
  %bf.load700 = load i32, i32* %mode699, align 4, !dbg !5582
  %bf.lshr701 = lshr i32 %bf.load700, 16, !dbg !5582
  %bf.clear702 = and i32 %bf.lshr701, 255, !dbg !5582
  br label %cond.end703, !dbg !5582

cond.end703:                                      ; preds = %cond.false697, %cond.true695
  %cond704 = phi i32 [ %call696, %cond.true695 ], [ %bf.clear702, %cond.false697 ], !dbg !5582
  %idxprom705 = zext i32 %cond704 to i64, !dbg !5582
  %arrayidx706 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom705, !dbg !5582
  %219 = load i8, i8* %arrayidx706, align 1, !dbg !5582
  %conv707 = zext i8 %219 to i32, !dbg !5582
  br label %cond.end708, !dbg !5582

cond.end708:                                      ; preds = %cond.end703, %cond.end686
  %cond709 = phi i32 [ %cond687, %cond.end686 ], [ %conv707, %cond.end703 ], !dbg !5582
  %idxprom710 = zext i32 %cond709 to i64, !dbg !5582
  %arrayidx711 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom710, !dbg !5582
  %220 = load i8, i8* %arrayidx711, align 1, !dbg !5582
  %conv712 = zext i8 %220 to i32, !dbg !5582
  %cmp713 = icmp eq i32 %conv712, 9, !dbg !5582
  br i1 %cmp713, label %cond.true715, label %cond.false800, !dbg !5582

cond.true715:                                     ; preds = %cond.end708
  %221 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base716 = bitcast %union.tree_node* %221 to %struct.tree_base*, !dbg !5582
  %222 = bitcast %struct.tree_base* %base716 to i64*, !dbg !5582
  %bf.load717 = load i64, i64* %222, align 8, !dbg !5582
  %bf.clear718 = and i64 %bf.load717, 65535, !dbg !5582
  %bf.cast719 = trunc i64 %bf.clear718 to i32, !dbg !5582
  %cmp720 = icmp eq i32 %bf.cast719, 14, !dbg !5582
  br i1 %cmp720, label %cond.true722, label %cond.false724, !dbg !5582

cond.true722:                                     ; preds = %cond.true715
  %223 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call723 = call i32 @vector_type_mode(%union.tree_node* %223), !dbg !5582
  br label %cond.end730, !dbg !5582

cond.false724:                                    ; preds = %cond.true715
  %224 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type725 = bitcast %union.tree_node* %224 to %struct.tree_type*, !dbg !5582
  %mode726 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type725, i32 0, i32 6, !dbg !5582
  %bf.load727 = load i32, i32* %mode726, align 4, !dbg !5582
  %bf.lshr728 = lshr i32 %bf.load727, 16, !dbg !5582
  %bf.clear729 = and i32 %bf.lshr728, 255, !dbg !5582
  br label %cond.end730, !dbg !5582

cond.end730:                                      ; preds = %cond.false724, %cond.true722
  %cond731 = phi i32 [ %call723, %cond.true722 ], [ %bf.clear729, %cond.false724 ], !dbg !5582
  %idxprom732 = zext i32 %cond731 to i64, !dbg !5582
  %arrayidx733 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom732, !dbg !5582
  %225 = load i8, i8* %arrayidx733, align 1, !dbg !5582
  %conv734 = zext i8 %225 to i32, !dbg !5582
  %cmp735 = icmp eq i32 %conv734, 8, !dbg !5582
  br i1 %cmp735, label %cond.true759, label %lor.lhs.false737, !dbg !5582

lor.lhs.false737:                                 ; preds = %cond.end730
  %226 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base738 = bitcast %union.tree_node* %226 to %struct.tree_base*, !dbg !5582
  %227 = bitcast %struct.tree_base* %base738 to i64*, !dbg !5582
  %bf.load739 = load i64, i64* %227, align 8, !dbg !5582
  %bf.clear740 = and i64 %bf.load739, 65535, !dbg !5582
  %bf.cast741 = trunc i64 %bf.clear740 to i32, !dbg !5582
  %cmp742 = icmp eq i32 %bf.cast741, 14, !dbg !5582
  br i1 %cmp742, label %cond.true744, label %cond.false746, !dbg !5582

cond.true744:                                     ; preds = %lor.lhs.false737
  %228 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call745 = call i32 @vector_type_mode(%union.tree_node* %228), !dbg !5582
  br label %cond.end752, !dbg !5582

cond.false746:                                    ; preds = %lor.lhs.false737
  %229 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type747 = bitcast %union.tree_node* %229 to %struct.tree_type*, !dbg !5582
  %mode748 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type747, i32 0, i32 6, !dbg !5582
  %bf.load749 = load i32, i32* %mode748, align 4, !dbg !5582
  %bf.lshr750 = lshr i32 %bf.load749, 16, !dbg !5582
  %bf.clear751 = and i32 %bf.lshr750, 255, !dbg !5582
  br label %cond.end752, !dbg !5582

cond.end752:                                      ; preds = %cond.false746, %cond.true744
  %cond753 = phi i32 [ %call745, %cond.true744 ], [ %bf.clear751, %cond.false746 ], !dbg !5582
  %idxprom754 = zext i32 %cond753 to i64, !dbg !5582
  %arrayidx755 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom754, !dbg !5582
  %230 = load i8, i8* %arrayidx755, align 1, !dbg !5582
  %conv756 = zext i8 %230 to i32, !dbg !5582
  %cmp757 = icmp eq i32 %conv756, 9, !dbg !5582
  br i1 %cmp757, label %cond.true759, label %cond.false776, !dbg !5582

cond.true759:                                     ; preds = %cond.end752, %cond.end730
  %231 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base760 = bitcast %union.tree_node* %231 to %struct.tree_base*, !dbg !5582
  %232 = bitcast %struct.tree_base* %base760 to i64*, !dbg !5582
  %bf.load761 = load i64, i64* %232, align 8, !dbg !5582
  %bf.clear762 = and i64 %bf.load761, 65535, !dbg !5582
  %bf.cast763 = trunc i64 %bf.clear762 to i32, !dbg !5582
  %cmp764 = icmp eq i32 %bf.cast763, 14, !dbg !5582
  br i1 %cmp764, label %cond.true766, label %cond.false768, !dbg !5582

cond.true766:                                     ; preds = %cond.true759
  %233 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call767 = call i32 @vector_type_mode(%union.tree_node* %233), !dbg !5582
  br label %cond.end774, !dbg !5582

cond.false768:                                    ; preds = %cond.true759
  %234 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type769 = bitcast %union.tree_node* %234 to %struct.tree_type*, !dbg !5582
  %mode770 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type769, i32 0, i32 6, !dbg !5582
  %bf.load771 = load i32, i32* %mode770, align 4, !dbg !5582
  %bf.lshr772 = lshr i32 %bf.load771, 16, !dbg !5582
  %bf.clear773 = and i32 %bf.lshr772, 255, !dbg !5582
  br label %cond.end774, !dbg !5582

cond.end774:                                      ; preds = %cond.false768, %cond.true766
  %cond775 = phi i32 [ %call767, %cond.true766 ], [ %bf.clear773, %cond.false768 ], !dbg !5582
  br label %cond.end796, !dbg !5582

cond.false776:                                    ; preds = %cond.end752
  %235 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base777 = bitcast %union.tree_node* %235 to %struct.tree_base*, !dbg !5582
  %236 = bitcast %struct.tree_base* %base777 to i64*, !dbg !5582
  %bf.load778 = load i64, i64* %236, align 8, !dbg !5582
  %bf.clear779 = and i64 %bf.load778, 65535, !dbg !5582
  %bf.cast780 = trunc i64 %bf.clear779 to i32, !dbg !5582
  %cmp781 = icmp eq i32 %bf.cast780, 14, !dbg !5582
  br i1 %cmp781, label %cond.true783, label %cond.false785, !dbg !5582

cond.true783:                                     ; preds = %cond.false776
  %237 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call784 = call i32 @vector_type_mode(%union.tree_node* %237), !dbg !5582
  br label %cond.end791, !dbg !5582

cond.false785:                                    ; preds = %cond.false776
  %238 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type786 = bitcast %union.tree_node* %238 to %struct.tree_type*, !dbg !5582
  %mode787 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type786, i32 0, i32 6, !dbg !5582
  %bf.load788 = load i32, i32* %mode787, align 4, !dbg !5582
  %bf.lshr789 = lshr i32 %bf.load788, 16, !dbg !5582
  %bf.clear790 = and i32 %bf.lshr789, 255, !dbg !5582
  br label %cond.end791, !dbg !5582

cond.end791:                                      ; preds = %cond.false785, %cond.true783
  %cond792 = phi i32 [ %call784, %cond.true783 ], [ %bf.clear790, %cond.false785 ], !dbg !5582
  %idxprom793 = zext i32 %cond792 to i64, !dbg !5582
  %arrayidx794 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom793, !dbg !5582
  %239 = load i8, i8* %arrayidx794, align 1, !dbg !5582
  %conv795 = zext i8 %239 to i32, !dbg !5582
  br label %cond.end796, !dbg !5582

cond.end796:                                      ; preds = %cond.end791, %cond.end774
  %cond797 = phi i32 [ %cond775, %cond.end774 ], [ %conv795, %cond.end791 ], !dbg !5582
  %sub798 = sub i32 %cond797, 42, !dbg !5582
  %add799 = add i32 %sub798, 4, !dbg !5582
  br label %cond.end884, !dbg !5582

cond.false800:                                    ; preds = %cond.end708
  %240 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base801 = bitcast %union.tree_node* %240 to %struct.tree_base*, !dbg !5582
  %241 = bitcast %struct.tree_base* %base801 to i64*, !dbg !5582
  %bf.load802 = load i64, i64* %241, align 8, !dbg !5582
  %bf.clear803 = and i64 %bf.load802, 65535, !dbg !5582
  %bf.cast804 = trunc i64 %bf.clear803 to i32, !dbg !5582
  %cmp805 = icmp eq i32 %bf.cast804, 14, !dbg !5582
  br i1 %cmp805, label %cond.true807, label %cond.false809, !dbg !5582

cond.true807:                                     ; preds = %cond.false800
  %242 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call808 = call i32 @vector_type_mode(%union.tree_node* %242), !dbg !5582
  br label %cond.end815, !dbg !5582

cond.false809:                                    ; preds = %cond.false800
  %243 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type810 = bitcast %union.tree_node* %243 to %struct.tree_type*, !dbg !5582
  %mode811 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type810, i32 0, i32 6, !dbg !5582
  %bf.load812 = load i32, i32* %mode811, align 4, !dbg !5582
  %bf.lshr813 = lshr i32 %bf.load812, 16, !dbg !5582
  %bf.clear814 = and i32 %bf.lshr813, 255, !dbg !5582
  br label %cond.end815, !dbg !5582

cond.end815:                                      ; preds = %cond.false809, %cond.true807
  %cond816 = phi i32 [ %call808, %cond.true807 ], [ %bf.clear814, %cond.false809 ], !dbg !5582
  %idxprom817 = zext i32 %cond816 to i64, !dbg !5582
  %arrayidx818 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom817, !dbg !5582
  %244 = load i8, i8* %arrayidx818, align 1, !dbg !5582
  %conv819 = zext i8 %244 to i32, !dbg !5582
  %cmp820 = icmp eq i32 %conv819, 8, !dbg !5582
  br i1 %cmp820, label %cond.true844, label %lor.lhs.false822, !dbg !5582

lor.lhs.false822:                                 ; preds = %cond.end815
  %245 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base823 = bitcast %union.tree_node* %245 to %struct.tree_base*, !dbg !5582
  %246 = bitcast %struct.tree_base* %base823 to i64*, !dbg !5582
  %bf.load824 = load i64, i64* %246, align 8, !dbg !5582
  %bf.clear825 = and i64 %bf.load824, 65535, !dbg !5582
  %bf.cast826 = trunc i64 %bf.clear825 to i32, !dbg !5582
  %cmp827 = icmp eq i32 %bf.cast826, 14, !dbg !5582
  br i1 %cmp827, label %cond.true829, label %cond.false831, !dbg !5582

cond.true829:                                     ; preds = %lor.lhs.false822
  %247 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call830 = call i32 @vector_type_mode(%union.tree_node* %247), !dbg !5582
  br label %cond.end837, !dbg !5582

cond.false831:                                    ; preds = %lor.lhs.false822
  %248 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type832 = bitcast %union.tree_node* %248 to %struct.tree_type*, !dbg !5582
  %mode833 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type832, i32 0, i32 6, !dbg !5582
  %bf.load834 = load i32, i32* %mode833, align 4, !dbg !5582
  %bf.lshr835 = lshr i32 %bf.load834, 16, !dbg !5582
  %bf.clear836 = and i32 %bf.lshr835, 255, !dbg !5582
  br label %cond.end837, !dbg !5582

cond.end837:                                      ; preds = %cond.false831, %cond.true829
  %cond838 = phi i32 [ %call830, %cond.true829 ], [ %bf.clear836, %cond.false831 ], !dbg !5582
  %idxprom839 = zext i32 %cond838 to i64, !dbg !5582
  %arrayidx840 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom839, !dbg !5582
  %249 = load i8, i8* %arrayidx840, align 1, !dbg !5582
  %conv841 = zext i8 %249 to i32, !dbg !5582
  %cmp842 = icmp eq i32 %conv841, 9, !dbg !5582
  br i1 %cmp842, label %cond.true844, label %cond.false861, !dbg !5582

cond.true844:                                     ; preds = %cond.end837, %cond.end815
  %250 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base845 = bitcast %union.tree_node* %250 to %struct.tree_base*, !dbg !5582
  %251 = bitcast %struct.tree_base* %base845 to i64*, !dbg !5582
  %bf.load846 = load i64, i64* %251, align 8, !dbg !5582
  %bf.clear847 = and i64 %bf.load846, 65535, !dbg !5582
  %bf.cast848 = trunc i64 %bf.clear847 to i32, !dbg !5582
  %cmp849 = icmp eq i32 %bf.cast848, 14, !dbg !5582
  br i1 %cmp849, label %cond.true851, label %cond.false853, !dbg !5582

cond.true851:                                     ; preds = %cond.true844
  %252 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call852 = call i32 @vector_type_mode(%union.tree_node* %252), !dbg !5582
  br label %cond.end859, !dbg !5582

cond.false853:                                    ; preds = %cond.true844
  %253 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type854 = bitcast %union.tree_node* %253 to %struct.tree_type*, !dbg !5582
  %mode855 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type854, i32 0, i32 6, !dbg !5582
  %bf.load856 = load i32, i32* %mode855, align 4, !dbg !5582
  %bf.lshr857 = lshr i32 %bf.load856, 16, !dbg !5582
  %bf.clear858 = and i32 %bf.lshr857, 255, !dbg !5582
  br label %cond.end859, !dbg !5582

cond.end859:                                      ; preds = %cond.false853, %cond.true851
  %cond860 = phi i32 [ %call852, %cond.true851 ], [ %bf.clear858, %cond.false853 ], !dbg !5582
  br label %cond.end881, !dbg !5582

cond.false861:                                    ; preds = %cond.end837
  %254 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %base862 = bitcast %union.tree_node* %254 to %struct.tree_base*, !dbg !5582
  %255 = bitcast %struct.tree_base* %base862 to i64*, !dbg !5582
  %bf.load863 = load i64, i64* %255, align 8, !dbg !5582
  %bf.clear864 = and i64 %bf.load863, 65535, !dbg !5582
  %bf.cast865 = trunc i64 %bf.clear864 to i32, !dbg !5582
  %cmp866 = icmp eq i32 %bf.cast865, 14, !dbg !5582
  br i1 %cmp866, label %cond.true868, label %cond.false870, !dbg !5582

cond.true868:                                     ; preds = %cond.false861
  %256 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %call869 = call i32 @vector_type_mode(%union.tree_node* %256), !dbg !5582
  br label %cond.end876, !dbg !5582

cond.false870:                                    ; preds = %cond.false861
  %257 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5582
  %type871 = bitcast %union.tree_node* %257 to %struct.tree_type*, !dbg !5582
  %mode872 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type871, i32 0, i32 6, !dbg !5582
  %bf.load873 = load i32, i32* %mode872, align 4, !dbg !5582
  %bf.lshr874 = lshr i32 %bf.load873, 16, !dbg !5582
  %bf.clear875 = and i32 %bf.lshr874, 255, !dbg !5582
  br label %cond.end876, !dbg !5582

cond.end876:                                      ; preds = %cond.false870, %cond.true868
  %cond877 = phi i32 [ %call869, %cond.true868 ], [ %bf.clear875, %cond.false870 ], !dbg !5582
  %idxprom878 = zext i32 %cond877 to i64, !dbg !5582
  %arrayidx879 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom878, !dbg !5582
  %258 = load i8, i8* %arrayidx879, align 1, !dbg !5582
  %conv880 = zext i8 %258 to i32, !dbg !5582
  br label %cond.end881, !dbg !5582

cond.end881:                                      ; preds = %cond.end876, %cond.end859
  %cond882 = phi i32 [ %cond860, %cond.end859 ], [ %conv880, %cond.end876 ], !dbg !5582
  %sub883 = sub i32 %cond882, 38, !dbg !5582
  br label %cond.end884, !dbg !5582

cond.end884:                                      ; preds = %cond.end881, %cond.end796
  %cond885 = phi i32 [ %add799, %cond.end796 ], [ %sub883, %cond.end881 ], !dbg !5582
  %idxprom886 = zext i32 %cond885 to i64, !dbg !5582
  %arrayidx887 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom886, !dbg !5582
  %259 = load %struct.real_format*, %struct.real_format** %arrayidx887, align 8, !dbg !5582
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %259, i32 0, i32 14, !dbg !5582
  %260 = load i8, i8* %has_signed_zero, align 1, !dbg !5582
  %conv888 = zext i8 %260 to i32, !dbg !5582
  %tobool889 = icmp ne i32 %conv888, 0, !dbg !5582
  br i1 %tobool889, label %land.lhs.true890, label %land.lhs.true892, !dbg !5582

land.lhs.true890:                                 ; preds = %cond.end884
  %261 = load i32, i32* @flag_signed_zeros, align 4, !dbg !5582
  %tobool891 = icmp ne i32 %261, 0, !dbg !5582
  br i1 %tobool891, label %if.else925, label %land.lhs.true892, !dbg !5583

land.lhs.true892:                                 ; preds = %land.lhs.true890, %cond.end884, %cond.end620
  %262 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5584
  %op893 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %262, i32 0, i32 1, !dbg !5585
  %263 = load %union.tree_node*, %union.tree_node** %op893, align 8, !dbg !5585
  %call894 = call i32 @real_zerop(%union.tree_node* %263), !dbg !5586
  %tobool895 = icmp ne i32 %call894, 0, !dbg !5586
  br i1 %tobool895, label %if.then896, label %if.else925, !dbg !5587

if.then896:                                       ; preds = %land.lhs.true892, %sw.bb162
  %264 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5588
  %265 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %264, align 8, !dbg !5588
  %tobool897 = icmp ne %struct.VEC_operand_entry_t_heap* %265, null, !dbg !5588
  br i1 %tobool897, label %cond.true898, label %cond.false900, !dbg !5588

cond.true898:                                     ; preds = %if.then896
  %266 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5588
  %267 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %266, align 8, !dbg !5588
  %base899 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %267, i32 0, i32 0, !dbg !5588
  br label %cond.end901, !dbg !5588

cond.false900:                                    ; preds = %if.then896
  br label %cond.end901, !dbg !5588

cond.end901:                                      ; preds = %cond.false900, %cond.true898
  %cond902 = phi %struct.VEC_operand_entry_t_base* [ %base899, %cond.true898 ], [ null, %cond.false900 ], !dbg !5588
  %call903 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond902), !dbg !5588
  %cmp904 = icmp ne i32 %call903, 1, !dbg !5591
  br i1 %cmp904, label %if.then906, label %if.end924, !dbg !5592

if.then906:                                       ; preds = %cond.end901
  %268 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5593
  %tobool907 = icmp ne %struct._IO_FILE* %268, null, !dbg !5593
  br i1 %tobool907, label %land.lhs.true908, label %if.end913, !dbg !5596

land.lhs.true908:                                 ; preds = %if.then906
  %269 = load i32, i32* @dump_flags, align 4, !dbg !5597
  %and909 = and i32 %269, 8, !dbg !5598
  %tobool910 = icmp ne i32 %and909, 0, !dbg !5598
  br i1 %tobool910, label %if.then911, label %if.end913, !dbg !5599

if.then911:                                       ; preds = %land.lhs.true908
  %270 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5600
  %call912 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %270, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i64 0, i64 0)), !dbg !5601
  br label %if.end913, !dbg !5601

if.end913:                                        ; preds = %if.then911, %land.lhs.true908, %if.then906
  %271 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5602
  %272 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %271, align 8, !dbg !5602
  %tobool914 = icmp ne %struct.VEC_operand_entry_t_heap* %272, null, !dbg !5602
  br i1 %tobool914, label %cond.true915, label %cond.false917, !dbg !5602

cond.true915:                                     ; preds = %if.end913
  %273 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5602
  %274 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %273, align 8, !dbg !5602
  %base916 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %274, i32 0, i32 0, !dbg !5602
  br label %cond.end918, !dbg !5602

cond.false917:                                    ; preds = %if.end913
  br label %cond.end918, !dbg !5602

cond.end918:                                      ; preds = %cond.false917, %cond.true915
  %cond919 = phi %struct.VEC_operand_entry_t_base* [ %base916, %cond.true915 ], [ null, %cond.false917 ], !dbg !5602
  %call920 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond919), !dbg !5602
  %sub921 = sub i32 %call920, 1, !dbg !5603
  %275 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5604
  %add922 = add i32 %275, %sub921, !dbg !5604
  store i32 %add922, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5604
  %276 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5605
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %276), !dbg !5605
  %277 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5606
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %277, align 8, !dbg !5607
  %278 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5608
  %279 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5608
  %call923 = call %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %278, %struct.operand_entry* %279), !dbg !5608
  br label %if.end1423, !dbg !5609

if.end924:                                        ; preds = %cond.end901
  br label %if.end1347, !dbg !5610

if.else925:                                       ; preds = %land.lhs.true892, %land.lhs.true890, %land.lhs.true537, %land.lhs.true184, %lor.lhs.false178
  %280 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5611
  %op926 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %280, i32 0, i32 1, !dbg !5613
  %281 = load %union.tree_node*, %union.tree_node** %op926, align 8, !dbg !5613
  %call927 = call i32 @integer_onep(%union.tree_node* %281), !dbg !5614
  %tobool928 = icmp ne i32 %call927, 0, !dbg !5614
  br i1 %tobool928, label %if.then1319, label %lor.lhs.false929, !dbg !5615

lor.lhs.false929:                                 ; preds = %if.else925
  %282 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5616
  %base930 = bitcast %union.tree_node* %282 to %struct.tree_base*, !dbg !5616
  %283 = bitcast %struct.tree_base* %base930 to i64*, !dbg !5616
  %bf.load931 = load i64, i64* %283, align 8, !dbg !5616
  %bf.clear932 = and i64 %bf.load931, 65535, !dbg !5616
  %bf.cast933 = trunc i64 %bf.clear932 to i32, !dbg !5616
  %cmp934 = icmp eq i32 %bf.cast933, 9, !dbg !5616
  br i1 %cmp934, label %land.lhs.true959, label %lor.lhs.false936, !dbg !5616

lor.lhs.false936:                                 ; preds = %lor.lhs.false929
  %284 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5616
  %base937 = bitcast %union.tree_node* %284 to %struct.tree_base*, !dbg !5616
  %285 = bitcast %struct.tree_base* %base937 to i64*, !dbg !5616
  %bf.load938 = load i64, i64* %285, align 8, !dbg !5616
  %bf.clear939 = and i64 %bf.load938, 65535, !dbg !5616
  %bf.cast940 = trunc i64 %bf.clear939 to i32, !dbg !5616
  %cmp941 = icmp eq i32 %bf.cast940, 13, !dbg !5616
  br i1 %cmp941, label %land.lhs.true950, label %lor.lhs.false943, !dbg !5616

lor.lhs.false943:                                 ; preds = %lor.lhs.false936
  %286 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5616
  %base944 = bitcast %union.tree_node* %286 to %struct.tree_base*, !dbg !5616
  %287 = bitcast %struct.tree_base* %base944 to i64*, !dbg !5616
  %bf.load945 = load i64, i64* %287, align 8, !dbg !5616
  %bf.clear946 = and i64 %bf.load945, 65535, !dbg !5616
  %bf.cast947 = trunc i64 %bf.clear946 to i32, !dbg !5616
  %cmp948 = icmp eq i32 %bf.cast947, 14, !dbg !5616
  br i1 %cmp948, label %land.lhs.true950, label %if.end1346, !dbg !5616

land.lhs.true950:                                 ; preds = %lor.lhs.false943, %lor.lhs.false936
  %288 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5616
  %common951 = bitcast %union.tree_node* %288 to %struct.tree_common*, !dbg !5616
  %type952 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common951, i32 0, i32 2, !dbg !5616
  %289 = load %union.tree_node*, %union.tree_node** %type952, align 8, !dbg !5616
  %base953 = bitcast %union.tree_node* %289 to %struct.tree_base*, !dbg !5616
  %290 = bitcast %struct.tree_base* %base953 to i64*, !dbg !5616
  %bf.load954 = load i64, i64* %290, align 8, !dbg !5616
  %bf.clear955 = and i64 %bf.load954, 65535, !dbg !5616
  %bf.cast956 = trunc i64 %bf.clear955 to i32, !dbg !5616
  %cmp957 = icmp eq i32 %bf.cast956, 9, !dbg !5616
  br i1 %cmp957, label %land.lhs.true959, label %if.end1346, !dbg !5617

land.lhs.true959:                                 ; preds = %land.lhs.true950, %lor.lhs.false929
  %291 = load i32, i32* @flag_signaling_nans, align 4, !dbg !5618
  %tobool960 = icmp ne i32 %291, 0, !dbg !5618
  br i1 %tobool960, label %land.lhs.true961, label %land.lhs.true1315, !dbg !5618

land.lhs.true961:                                 ; preds = %land.lhs.true959
  %292 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base962 = bitcast %union.tree_node* %292 to %struct.tree_base*, !dbg !5618
  %293 = bitcast %struct.tree_base* %base962 to i64*, !dbg !5618
  %bf.load963 = load i64, i64* %293, align 8, !dbg !5618
  %bf.clear964 = and i64 %bf.load963, 65535, !dbg !5618
  %bf.cast965 = trunc i64 %bf.clear964 to i32, !dbg !5618
  %cmp966 = icmp eq i32 %bf.cast965, 14, !dbg !5618
  br i1 %cmp966, label %cond.true968, label %cond.false970, !dbg !5618

cond.true968:                                     ; preds = %land.lhs.true961
  %294 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call969 = call i32 @vector_type_mode(%union.tree_node* %294), !dbg !5618
  br label %cond.end976, !dbg !5618

cond.false970:                                    ; preds = %land.lhs.true961
  %295 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type971 = bitcast %union.tree_node* %295 to %struct.tree_type*, !dbg !5618
  %mode972 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type971, i32 0, i32 6, !dbg !5618
  %bf.load973 = load i32, i32* %mode972, align 4, !dbg !5618
  %bf.lshr974 = lshr i32 %bf.load973, 16, !dbg !5618
  %bf.clear975 = and i32 %bf.lshr974, 255, !dbg !5618
  br label %cond.end976, !dbg !5618

cond.end976:                                      ; preds = %cond.false970, %cond.true968
  %cond977 = phi i32 [ %call969, %cond.true968 ], [ %bf.clear975, %cond.false970 ], !dbg !5618
  %idxprom978 = zext i32 %cond977 to i64, !dbg !5618
  %arrayidx979 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom978, !dbg !5618
  %296 = load i8, i8* %arrayidx979, align 1, !dbg !5618
  %conv980 = zext i8 %296 to i32, !dbg !5618
  %cmp981 = icmp eq i32 %conv980, 8, !dbg !5618
  br i1 %cmp981, label %land.lhs.true1049, label %lor.lhs.false983, !dbg !5618

lor.lhs.false983:                                 ; preds = %cond.end976
  %297 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base984 = bitcast %union.tree_node* %297 to %struct.tree_base*, !dbg !5618
  %298 = bitcast %struct.tree_base* %base984 to i64*, !dbg !5618
  %bf.load985 = load i64, i64* %298, align 8, !dbg !5618
  %bf.clear986 = and i64 %bf.load985, 65535, !dbg !5618
  %bf.cast987 = trunc i64 %bf.clear986 to i32, !dbg !5618
  %cmp988 = icmp eq i32 %bf.cast987, 14, !dbg !5618
  br i1 %cmp988, label %cond.true990, label %cond.false992, !dbg !5618

cond.true990:                                     ; preds = %lor.lhs.false983
  %299 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call991 = call i32 @vector_type_mode(%union.tree_node* %299), !dbg !5618
  br label %cond.end998, !dbg !5618

cond.false992:                                    ; preds = %lor.lhs.false983
  %300 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type993 = bitcast %union.tree_node* %300 to %struct.tree_type*, !dbg !5618
  %mode994 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type993, i32 0, i32 6, !dbg !5618
  %bf.load995 = load i32, i32* %mode994, align 4, !dbg !5618
  %bf.lshr996 = lshr i32 %bf.load995, 16, !dbg !5618
  %bf.clear997 = and i32 %bf.lshr996, 255, !dbg !5618
  br label %cond.end998, !dbg !5618

cond.end998:                                      ; preds = %cond.false992, %cond.true990
  %cond999 = phi i32 [ %call991, %cond.true990 ], [ %bf.clear997, %cond.false992 ], !dbg !5618
  %idxprom1000 = zext i32 %cond999 to i64, !dbg !5618
  %arrayidx1001 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1000, !dbg !5618
  %301 = load i8, i8* %arrayidx1001, align 1, !dbg !5618
  %conv1002 = zext i8 %301 to i32, !dbg !5618
  %cmp1003 = icmp eq i32 %conv1002, 9, !dbg !5618
  br i1 %cmp1003, label %land.lhs.true1049, label %lor.lhs.false1005, !dbg !5618

lor.lhs.false1005:                                ; preds = %cond.end998
  %302 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1006 = bitcast %union.tree_node* %302 to %struct.tree_base*, !dbg !5618
  %303 = bitcast %struct.tree_base* %base1006 to i64*, !dbg !5618
  %bf.load1007 = load i64, i64* %303, align 8, !dbg !5618
  %bf.clear1008 = and i64 %bf.load1007, 65535, !dbg !5618
  %bf.cast1009 = trunc i64 %bf.clear1008 to i32, !dbg !5618
  %cmp1010 = icmp eq i32 %bf.cast1009, 14, !dbg !5618
  br i1 %cmp1010, label %cond.true1012, label %cond.false1014, !dbg !5618

cond.true1012:                                    ; preds = %lor.lhs.false1005
  %304 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1013 = call i32 @vector_type_mode(%union.tree_node* %304), !dbg !5618
  br label %cond.end1020, !dbg !5618

cond.false1014:                                   ; preds = %lor.lhs.false1005
  %305 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1015 = bitcast %union.tree_node* %305 to %struct.tree_type*, !dbg !5618
  %mode1016 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1015, i32 0, i32 6, !dbg !5618
  %bf.load1017 = load i32, i32* %mode1016, align 4, !dbg !5618
  %bf.lshr1018 = lshr i32 %bf.load1017, 16, !dbg !5618
  %bf.clear1019 = and i32 %bf.lshr1018, 255, !dbg !5618
  br label %cond.end1020, !dbg !5618

cond.end1020:                                     ; preds = %cond.false1014, %cond.true1012
  %cond1021 = phi i32 [ %call1013, %cond.true1012 ], [ %bf.clear1019, %cond.false1014 ], !dbg !5618
  %idxprom1022 = zext i32 %cond1021 to i64, !dbg !5618
  %arrayidx1023 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1022, !dbg !5618
  %306 = load i8, i8* %arrayidx1023, align 1, !dbg !5618
  %conv1024 = zext i8 %306 to i32, !dbg !5618
  %cmp1025 = icmp eq i32 %conv1024, 11, !dbg !5618
  br i1 %cmp1025, label %land.lhs.true1049, label %lor.lhs.false1027, !dbg !5618

lor.lhs.false1027:                                ; preds = %cond.end1020
  %307 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1028 = bitcast %union.tree_node* %307 to %struct.tree_base*, !dbg !5618
  %308 = bitcast %struct.tree_base* %base1028 to i64*, !dbg !5618
  %bf.load1029 = load i64, i64* %308, align 8, !dbg !5618
  %bf.clear1030 = and i64 %bf.load1029, 65535, !dbg !5618
  %bf.cast1031 = trunc i64 %bf.clear1030 to i32, !dbg !5618
  %cmp1032 = icmp eq i32 %bf.cast1031, 14, !dbg !5618
  br i1 %cmp1032, label %cond.true1034, label %cond.false1036, !dbg !5618

cond.true1034:                                    ; preds = %lor.lhs.false1027
  %309 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1035 = call i32 @vector_type_mode(%union.tree_node* %309), !dbg !5618
  br label %cond.end1042, !dbg !5618

cond.false1036:                                   ; preds = %lor.lhs.false1027
  %310 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1037 = bitcast %union.tree_node* %310 to %struct.tree_type*, !dbg !5618
  %mode1038 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1037, i32 0, i32 6, !dbg !5618
  %bf.load1039 = load i32, i32* %mode1038, align 4, !dbg !5618
  %bf.lshr1040 = lshr i32 %bf.load1039, 16, !dbg !5618
  %bf.clear1041 = and i32 %bf.lshr1040, 255, !dbg !5618
  br label %cond.end1042, !dbg !5618

cond.end1042:                                     ; preds = %cond.false1036, %cond.true1034
  %cond1043 = phi i32 [ %call1035, %cond.true1034 ], [ %bf.clear1041, %cond.false1036 ], !dbg !5618
  %idxprom1044 = zext i32 %cond1043 to i64, !dbg !5618
  %arrayidx1045 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1044, !dbg !5618
  %311 = load i8, i8* %arrayidx1045, align 1, !dbg !5618
  %conv1046 = zext i8 %311 to i32, !dbg !5618
  %cmp1047 = icmp eq i32 %conv1046, 17, !dbg !5618
  br i1 %cmp1047, label %land.lhs.true1049, label %land.lhs.true1315, !dbg !5618

land.lhs.true1049:                                ; preds = %cond.end1042, %cond.end1020, %cond.end998, %cond.end976
  %312 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1050 = bitcast %union.tree_node* %312 to %struct.tree_base*, !dbg !5618
  %313 = bitcast %struct.tree_base* %base1050 to i64*, !dbg !5618
  %bf.load1051 = load i64, i64* %313, align 8, !dbg !5618
  %bf.clear1052 = and i64 %bf.load1051, 65535, !dbg !5618
  %bf.cast1053 = trunc i64 %bf.clear1052 to i32, !dbg !5618
  %cmp1054 = icmp eq i32 %bf.cast1053, 14, !dbg !5618
  br i1 %cmp1054, label %cond.true1056, label %cond.false1058, !dbg !5618

cond.true1056:                                    ; preds = %land.lhs.true1049
  %314 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1057 = call i32 @vector_type_mode(%union.tree_node* %314), !dbg !5618
  br label %cond.end1064, !dbg !5618

cond.false1058:                                   ; preds = %land.lhs.true1049
  %315 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1059 = bitcast %union.tree_node* %315 to %struct.tree_type*, !dbg !5618
  %mode1060 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1059, i32 0, i32 6, !dbg !5618
  %bf.load1061 = load i32, i32* %mode1060, align 4, !dbg !5618
  %bf.lshr1062 = lshr i32 %bf.load1061, 16, !dbg !5618
  %bf.clear1063 = and i32 %bf.lshr1062, 255, !dbg !5618
  br label %cond.end1064, !dbg !5618

cond.end1064:                                     ; preds = %cond.false1058, %cond.true1056
  %cond1065 = phi i32 [ %call1057, %cond.true1056 ], [ %bf.clear1063, %cond.false1058 ], !dbg !5618
  %idxprom1066 = zext i32 %cond1065 to i64, !dbg !5618
  %arrayidx1067 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1066, !dbg !5618
  %316 = load i8, i8* %arrayidx1067, align 1, !dbg !5618
  %conv1068 = zext i8 %316 to i32, !dbg !5618
  %cmp1069 = icmp eq i32 %conv1068, 8, !dbg !5618
  br i1 %cmp1069, label %cond.true1093, label %lor.lhs.false1071, !dbg !5618

lor.lhs.false1071:                                ; preds = %cond.end1064
  %317 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1072 = bitcast %union.tree_node* %317 to %struct.tree_base*, !dbg !5618
  %318 = bitcast %struct.tree_base* %base1072 to i64*, !dbg !5618
  %bf.load1073 = load i64, i64* %318, align 8, !dbg !5618
  %bf.clear1074 = and i64 %bf.load1073, 65535, !dbg !5618
  %bf.cast1075 = trunc i64 %bf.clear1074 to i32, !dbg !5618
  %cmp1076 = icmp eq i32 %bf.cast1075, 14, !dbg !5618
  br i1 %cmp1076, label %cond.true1078, label %cond.false1080, !dbg !5618

cond.true1078:                                    ; preds = %lor.lhs.false1071
  %319 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1079 = call i32 @vector_type_mode(%union.tree_node* %319), !dbg !5618
  br label %cond.end1086, !dbg !5618

cond.false1080:                                   ; preds = %lor.lhs.false1071
  %320 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1081 = bitcast %union.tree_node* %320 to %struct.tree_type*, !dbg !5618
  %mode1082 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1081, i32 0, i32 6, !dbg !5618
  %bf.load1083 = load i32, i32* %mode1082, align 4, !dbg !5618
  %bf.lshr1084 = lshr i32 %bf.load1083, 16, !dbg !5618
  %bf.clear1085 = and i32 %bf.lshr1084, 255, !dbg !5618
  br label %cond.end1086, !dbg !5618

cond.end1086:                                     ; preds = %cond.false1080, %cond.true1078
  %cond1087 = phi i32 [ %call1079, %cond.true1078 ], [ %bf.clear1085, %cond.false1080 ], !dbg !5618
  %idxprom1088 = zext i32 %cond1087 to i64, !dbg !5618
  %arrayidx1089 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1088, !dbg !5618
  %321 = load i8, i8* %arrayidx1089, align 1, !dbg !5618
  %conv1090 = zext i8 %321 to i32, !dbg !5618
  %cmp1091 = icmp eq i32 %conv1090, 9, !dbg !5618
  br i1 %cmp1091, label %cond.true1093, label %cond.false1110, !dbg !5618

cond.true1093:                                    ; preds = %cond.end1086, %cond.end1064
  %322 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1094 = bitcast %union.tree_node* %322 to %struct.tree_base*, !dbg !5618
  %323 = bitcast %struct.tree_base* %base1094 to i64*, !dbg !5618
  %bf.load1095 = load i64, i64* %323, align 8, !dbg !5618
  %bf.clear1096 = and i64 %bf.load1095, 65535, !dbg !5618
  %bf.cast1097 = trunc i64 %bf.clear1096 to i32, !dbg !5618
  %cmp1098 = icmp eq i32 %bf.cast1097, 14, !dbg !5618
  br i1 %cmp1098, label %cond.true1100, label %cond.false1102, !dbg !5618

cond.true1100:                                    ; preds = %cond.true1093
  %324 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1101 = call i32 @vector_type_mode(%union.tree_node* %324), !dbg !5618
  br label %cond.end1108, !dbg !5618

cond.false1102:                                   ; preds = %cond.true1093
  %325 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1103 = bitcast %union.tree_node* %325 to %struct.tree_type*, !dbg !5618
  %mode1104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1103, i32 0, i32 6, !dbg !5618
  %bf.load1105 = load i32, i32* %mode1104, align 4, !dbg !5618
  %bf.lshr1106 = lshr i32 %bf.load1105, 16, !dbg !5618
  %bf.clear1107 = and i32 %bf.lshr1106, 255, !dbg !5618
  br label %cond.end1108, !dbg !5618

cond.end1108:                                     ; preds = %cond.false1102, %cond.true1100
  %cond1109 = phi i32 [ %call1101, %cond.true1100 ], [ %bf.clear1107, %cond.false1102 ], !dbg !5618
  br label %cond.end1130, !dbg !5618

cond.false1110:                                   ; preds = %cond.end1086
  %326 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1111 = bitcast %union.tree_node* %326 to %struct.tree_base*, !dbg !5618
  %327 = bitcast %struct.tree_base* %base1111 to i64*, !dbg !5618
  %bf.load1112 = load i64, i64* %327, align 8, !dbg !5618
  %bf.clear1113 = and i64 %bf.load1112, 65535, !dbg !5618
  %bf.cast1114 = trunc i64 %bf.clear1113 to i32, !dbg !5618
  %cmp1115 = icmp eq i32 %bf.cast1114, 14, !dbg !5618
  br i1 %cmp1115, label %cond.true1117, label %cond.false1119, !dbg !5618

cond.true1117:                                    ; preds = %cond.false1110
  %328 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1118 = call i32 @vector_type_mode(%union.tree_node* %328), !dbg !5618
  br label %cond.end1125, !dbg !5618

cond.false1119:                                   ; preds = %cond.false1110
  %329 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1120 = bitcast %union.tree_node* %329 to %struct.tree_type*, !dbg !5618
  %mode1121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1120, i32 0, i32 6, !dbg !5618
  %bf.load1122 = load i32, i32* %mode1121, align 4, !dbg !5618
  %bf.lshr1123 = lshr i32 %bf.load1122, 16, !dbg !5618
  %bf.clear1124 = and i32 %bf.lshr1123, 255, !dbg !5618
  br label %cond.end1125, !dbg !5618

cond.end1125:                                     ; preds = %cond.false1119, %cond.true1117
  %cond1126 = phi i32 [ %call1118, %cond.true1117 ], [ %bf.clear1124, %cond.false1119 ], !dbg !5618
  %idxprom1127 = zext i32 %cond1126 to i64, !dbg !5618
  %arrayidx1128 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1127, !dbg !5618
  %330 = load i8, i8* %arrayidx1128, align 1, !dbg !5618
  %conv1129 = zext i8 %330 to i32, !dbg !5618
  br label %cond.end1130, !dbg !5618

cond.end1130:                                     ; preds = %cond.end1125, %cond.end1108
  %cond1131 = phi i32 [ %cond1109, %cond.end1108 ], [ %conv1129, %cond.end1125 ], !dbg !5618
  %idxprom1132 = zext i32 %cond1131 to i64, !dbg !5618
  %arrayidx1133 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1132, !dbg !5618
  %331 = load i8, i8* %arrayidx1133, align 1, !dbg !5618
  %conv1134 = zext i8 %331 to i32, !dbg !5618
  %cmp1135 = icmp eq i32 %conv1134, 9, !dbg !5618
  br i1 %cmp1135, label %cond.true1137, label %cond.false1222, !dbg !5618

cond.true1137:                                    ; preds = %cond.end1130
  %332 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1138 = bitcast %union.tree_node* %332 to %struct.tree_base*, !dbg !5618
  %333 = bitcast %struct.tree_base* %base1138 to i64*, !dbg !5618
  %bf.load1139 = load i64, i64* %333, align 8, !dbg !5618
  %bf.clear1140 = and i64 %bf.load1139, 65535, !dbg !5618
  %bf.cast1141 = trunc i64 %bf.clear1140 to i32, !dbg !5618
  %cmp1142 = icmp eq i32 %bf.cast1141, 14, !dbg !5618
  br i1 %cmp1142, label %cond.true1144, label %cond.false1146, !dbg !5618

cond.true1144:                                    ; preds = %cond.true1137
  %334 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1145 = call i32 @vector_type_mode(%union.tree_node* %334), !dbg !5618
  br label %cond.end1152, !dbg !5618

cond.false1146:                                   ; preds = %cond.true1137
  %335 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1147 = bitcast %union.tree_node* %335 to %struct.tree_type*, !dbg !5618
  %mode1148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1147, i32 0, i32 6, !dbg !5618
  %bf.load1149 = load i32, i32* %mode1148, align 4, !dbg !5618
  %bf.lshr1150 = lshr i32 %bf.load1149, 16, !dbg !5618
  %bf.clear1151 = and i32 %bf.lshr1150, 255, !dbg !5618
  br label %cond.end1152, !dbg !5618

cond.end1152:                                     ; preds = %cond.false1146, %cond.true1144
  %cond1153 = phi i32 [ %call1145, %cond.true1144 ], [ %bf.clear1151, %cond.false1146 ], !dbg !5618
  %idxprom1154 = zext i32 %cond1153 to i64, !dbg !5618
  %arrayidx1155 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1154, !dbg !5618
  %336 = load i8, i8* %arrayidx1155, align 1, !dbg !5618
  %conv1156 = zext i8 %336 to i32, !dbg !5618
  %cmp1157 = icmp eq i32 %conv1156, 8, !dbg !5618
  br i1 %cmp1157, label %cond.true1181, label %lor.lhs.false1159, !dbg !5618

lor.lhs.false1159:                                ; preds = %cond.end1152
  %337 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1160 = bitcast %union.tree_node* %337 to %struct.tree_base*, !dbg !5618
  %338 = bitcast %struct.tree_base* %base1160 to i64*, !dbg !5618
  %bf.load1161 = load i64, i64* %338, align 8, !dbg !5618
  %bf.clear1162 = and i64 %bf.load1161, 65535, !dbg !5618
  %bf.cast1163 = trunc i64 %bf.clear1162 to i32, !dbg !5618
  %cmp1164 = icmp eq i32 %bf.cast1163, 14, !dbg !5618
  br i1 %cmp1164, label %cond.true1166, label %cond.false1168, !dbg !5618

cond.true1166:                                    ; preds = %lor.lhs.false1159
  %339 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1167 = call i32 @vector_type_mode(%union.tree_node* %339), !dbg !5618
  br label %cond.end1174, !dbg !5618

cond.false1168:                                   ; preds = %lor.lhs.false1159
  %340 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1169 = bitcast %union.tree_node* %340 to %struct.tree_type*, !dbg !5618
  %mode1170 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1169, i32 0, i32 6, !dbg !5618
  %bf.load1171 = load i32, i32* %mode1170, align 4, !dbg !5618
  %bf.lshr1172 = lshr i32 %bf.load1171, 16, !dbg !5618
  %bf.clear1173 = and i32 %bf.lshr1172, 255, !dbg !5618
  br label %cond.end1174, !dbg !5618

cond.end1174:                                     ; preds = %cond.false1168, %cond.true1166
  %cond1175 = phi i32 [ %call1167, %cond.true1166 ], [ %bf.clear1173, %cond.false1168 ], !dbg !5618
  %idxprom1176 = zext i32 %cond1175 to i64, !dbg !5618
  %arrayidx1177 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1176, !dbg !5618
  %341 = load i8, i8* %arrayidx1177, align 1, !dbg !5618
  %conv1178 = zext i8 %341 to i32, !dbg !5618
  %cmp1179 = icmp eq i32 %conv1178, 9, !dbg !5618
  br i1 %cmp1179, label %cond.true1181, label %cond.false1198, !dbg !5618

cond.true1181:                                    ; preds = %cond.end1174, %cond.end1152
  %342 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1182 = bitcast %union.tree_node* %342 to %struct.tree_base*, !dbg !5618
  %343 = bitcast %struct.tree_base* %base1182 to i64*, !dbg !5618
  %bf.load1183 = load i64, i64* %343, align 8, !dbg !5618
  %bf.clear1184 = and i64 %bf.load1183, 65535, !dbg !5618
  %bf.cast1185 = trunc i64 %bf.clear1184 to i32, !dbg !5618
  %cmp1186 = icmp eq i32 %bf.cast1185, 14, !dbg !5618
  br i1 %cmp1186, label %cond.true1188, label %cond.false1190, !dbg !5618

cond.true1188:                                    ; preds = %cond.true1181
  %344 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1189 = call i32 @vector_type_mode(%union.tree_node* %344), !dbg !5618
  br label %cond.end1196, !dbg !5618

cond.false1190:                                   ; preds = %cond.true1181
  %345 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1191 = bitcast %union.tree_node* %345 to %struct.tree_type*, !dbg !5618
  %mode1192 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1191, i32 0, i32 6, !dbg !5618
  %bf.load1193 = load i32, i32* %mode1192, align 4, !dbg !5618
  %bf.lshr1194 = lshr i32 %bf.load1193, 16, !dbg !5618
  %bf.clear1195 = and i32 %bf.lshr1194, 255, !dbg !5618
  br label %cond.end1196, !dbg !5618

cond.end1196:                                     ; preds = %cond.false1190, %cond.true1188
  %cond1197 = phi i32 [ %call1189, %cond.true1188 ], [ %bf.clear1195, %cond.false1190 ], !dbg !5618
  br label %cond.end1218, !dbg !5618

cond.false1198:                                   ; preds = %cond.end1174
  %346 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1199 = bitcast %union.tree_node* %346 to %struct.tree_base*, !dbg !5618
  %347 = bitcast %struct.tree_base* %base1199 to i64*, !dbg !5618
  %bf.load1200 = load i64, i64* %347, align 8, !dbg !5618
  %bf.clear1201 = and i64 %bf.load1200, 65535, !dbg !5618
  %bf.cast1202 = trunc i64 %bf.clear1201 to i32, !dbg !5618
  %cmp1203 = icmp eq i32 %bf.cast1202, 14, !dbg !5618
  br i1 %cmp1203, label %cond.true1205, label %cond.false1207, !dbg !5618

cond.true1205:                                    ; preds = %cond.false1198
  %348 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1206 = call i32 @vector_type_mode(%union.tree_node* %348), !dbg !5618
  br label %cond.end1213, !dbg !5618

cond.false1207:                                   ; preds = %cond.false1198
  %349 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1208 = bitcast %union.tree_node* %349 to %struct.tree_type*, !dbg !5618
  %mode1209 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1208, i32 0, i32 6, !dbg !5618
  %bf.load1210 = load i32, i32* %mode1209, align 4, !dbg !5618
  %bf.lshr1211 = lshr i32 %bf.load1210, 16, !dbg !5618
  %bf.clear1212 = and i32 %bf.lshr1211, 255, !dbg !5618
  br label %cond.end1213, !dbg !5618

cond.end1213:                                     ; preds = %cond.false1207, %cond.true1205
  %cond1214 = phi i32 [ %call1206, %cond.true1205 ], [ %bf.clear1212, %cond.false1207 ], !dbg !5618
  %idxprom1215 = zext i32 %cond1214 to i64, !dbg !5618
  %arrayidx1216 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1215, !dbg !5618
  %350 = load i8, i8* %arrayidx1216, align 1, !dbg !5618
  %conv1217 = zext i8 %350 to i32, !dbg !5618
  br label %cond.end1218, !dbg !5618

cond.end1218:                                     ; preds = %cond.end1213, %cond.end1196
  %cond1219 = phi i32 [ %cond1197, %cond.end1196 ], [ %conv1217, %cond.end1213 ], !dbg !5618
  %sub1220 = sub i32 %cond1219, 42, !dbg !5618
  %add1221 = add i32 %sub1220, 4, !dbg !5618
  br label %cond.end1306, !dbg !5618

cond.false1222:                                   ; preds = %cond.end1130
  %351 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1223 = bitcast %union.tree_node* %351 to %struct.tree_base*, !dbg !5618
  %352 = bitcast %struct.tree_base* %base1223 to i64*, !dbg !5618
  %bf.load1224 = load i64, i64* %352, align 8, !dbg !5618
  %bf.clear1225 = and i64 %bf.load1224, 65535, !dbg !5618
  %bf.cast1226 = trunc i64 %bf.clear1225 to i32, !dbg !5618
  %cmp1227 = icmp eq i32 %bf.cast1226, 14, !dbg !5618
  br i1 %cmp1227, label %cond.true1229, label %cond.false1231, !dbg !5618

cond.true1229:                                    ; preds = %cond.false1222
  %353 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1230 = call i32 @vector_type_mode(%union.tree_node* %353), !dbg !5618
  br label %cond.end1237, !dbg !5618

cond.false1231:                                   ; preds = %cond.false1222
  %354 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1232 = bitcast %union.tree_node* %354 to %struct.tree_type*, !dbg !5618
  %mode1233 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1232, i32 0, i32 6, !dbg !5618
  %bf.load1234 = load i32, i32* %mode1233, align 4, !dbg !5618
  %bf.lshr1235 = lshr i32 %bf.load1234, 16, !dbg !5618
  %bf.clear1236 = and i32 %bf.lshr1235, 255, !dbg !5618
  br label %cond.end1237, !dbg !5618

cond.end1237:                                     ; preds = %cond.false1231, %cond.true1229
  %cond1238 = phi i32 [ %call1230, %cond.true1229 ], [ %bf.clear1236, %cond.false1231 ], !dbg !5618
  %idxprom1239 = zext i32 %cond1238 to i64, !dbg !5618
  %arrayidx1240 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1239, !dbg !5618
  %355 = load i8, i8* %arrayidx1240, align 1, !dbg !5618
  %conv1241 = zext i8 %355 to i32, !dbg !5618
  %cmp1242 = icmp eq i32 %conv1241, 8, !dbg !5618
  br i1 %cmp1242, label %cond.true1266, label %lor.lhs.false1244, !dbg !5618

lor.lhs.false1244:                                ; preds = %cond.end1237
  %356 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1245 = bitcast %union.tree_node* %356 to %struct.tree_base*, !dbg !5618
  %357 = bitcast %struct.tree_base* %base1245 to i64*, !dbg !5618
  %bf.load1246 = load i64, i64* %357, align 8, !dbg !5618
  %bf.clear1247 = and i64 %bf.load1246, 65535, !dbg !5618
  %bf.cast1248 = trunc i64 %bf.clear1247 to i32, !dbg !5618
  %cmp1249 = icmp eq i32 %bf.cast1248, 14, !dbg !5618
  br i1 %cmp1249, label %cond.true1251, label %cond.false1253, !dbg !5618

cond.true1251:                                    ; preds = %lor.lhs.false1244
  %358 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1252 = call i32 @vector_type_mode(%union.tree_node* %358), !dbg !5618
  br label %cond.end1259, !dbg !5618

cond.false1253:                                   ; preds = %lor.lhs.false1244
  %359 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1254 = bitcast %union.tree_node* %359 to %struct.tree_type*, !dbg !5618
  %mode1255 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1254, i32 0, i32 6, !dbg !5618
  %bf.load1256 = load i32, i32* %mode1255, align 4, !dbg !5618
  %bf.lshr1257 = lshr i32 %bf.load1256, 16, !dbg !5618
  %bf.clear1258 = and i32 %bf.lshr1257, 255, !dbg !5618
  br label %cond.end1259, !dbg !5618

cond.end1259:                                     ; preds = %cond.false1253, %cond.true1251
  %cond1260 = phi i32 [ %call1252, %cond.true1251 ], [ %bf.clear1258, %cond.false1253 ], !dbg !5618
  %idxprom1261 = zext i32 %cond1260 to i64, !dbg !5618
  %arrayidx1262 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1261, !dbg !5618
  %360 = load i8, i8* %arrayidx1262, align 1, !dbg !5618
  %conv1263 = zext i8 %360 to i32, !dbg !5618
  %cmp1264 = icmp eq i32 %conv1263, 9, !dbg !5618
  br i1 %cmp1264, label %cond.true1266, label %cond.false1283, !dbg !5618

cond.true1266:                                    ; preds = %cond.end1259, %cond.end1237
  %361 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1267 = bitcast %union.tree_node* %361 to %struct.tree_base*, !dbg !5618
  %362 = bitcast %struct.tree_base* %base1267 to i64*, !dbg !5618
  %bf.load1268 = load i64, i64* %362, align 8, !dbg !5618
  %bf.clear1269 = and i64 %bf.load1268, 65535, !dbg !5618
  %bf.cast1270 = trunc i64 %bf.clear1269 to i32, !dbg !5618
  %cmp1271 = icmp eq i32 %bf.cast1270, 14, !dbg !5618
  br i1 %cmp1271, label %cond.true1273, label %cond.false1275, !dbg !5618

cond.true1273:                                    ; preds = %cond.true1266
  %363 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1274 = call i32 @vector_type_mode(%union.tree_node* %363), !dbg !5618
  br label %cond.end1281, !dbg !5618

cond.false1275:                                   ; preds = %cond.true1266
  %364 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1276 = bitcast %union.tree_node* %364 to %struct.tree_type*, !dbg !5618
  %mode1277 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1276, i32 0, i32 6, !dbg !5618
  %bf.load1278 = load i32, i32* %mode1277, align 4, !dbg !5618
  %bf.lshr1279 = lshr i32 %bf.load1278, 16, !dbg !5618
  %bf.clear1280 = and i32 %bf.lshr1279, 255, !dbg !5618
  br label %cond.end1281, !dbg !5618

cond.end1281:                                     ; preds = %cond.false1275, %cond.true1273
  %cond1282 = phi i32 [ %call1274, %cond.true1273 ], [ %bf.clear1280, %cond.false1275 ], !dbg !5618
  br label %cond.end1303, !dbg !5618

cond.false1283:                                   ; preds = %cond.end1259
  %365 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %base1284 = bitcast %union.tree_node* %365 to %struct.tree_base*, !dbg !5618
  %366 = bitcast %struct.tree_base* %base1284 to i64*, !dbg !5618
  %bf.load1285 = load i64, i64* %366, align 8, !dbg !5618
  %bf.clear1286 = and i64 %bf.load1285, 65535, !dbg !5618
  %bf.cast1287 = trunc i64 %bf.clear1286 to i32, !dbg !5618
  %cmp1288 = icmp eq i32 %bf.cast1287, 14, !dbg !5618
  br i1 %cmp1288, label %cond.true1290, label %cond.false1292, !dbg !5618

cond.true1290:                                    ; preds = %cond.false1283
  %367 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %call1291 = call i32 @vector_type_mode(%union.tree_node* %367), !dbg !5618
  br label %cond.end1298, !dbg !5618

cond.false1292:                                   ; preds = %cond.false1283
  %368 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5618
  %type1293 = bitcast %union.tree_node* %368 to %struct.tree_type*, !dbg !5618
  %mode1294 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1293, i32 0, i32 6, !dbg !5618
  %bf.load1295 = load i32, i32* %mode1294, align 4, !dbg !5618
  %bf.lshr1296 = lshr i32 %bf.load1295, 16, !dbg !5618
  %bf.clear1297 = and i32 %bf.lshr1296, 255, !dbg !5618
  br label %cond.end1298, !dbg !5618

cond.end1298:                                     ; preds = %cond.false1292, %cond.true1290
  %cond1299 = phi i32 [ %call1291, %cond.true1290 ], [ %bf.clear1297, %cond.false1292 ], !dbg !5618
  %idxprom1300 = zext i32 %cond1299 to i64, !dbg !5618
  %arrayidx1301 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1300, !dbg !5618
  %369 = load i8, i8* %arrayidx1301, align 1, !dbg !5618
  %conv1302 = zext i8 %369 to i32, !dbg !5618
  br label %cond.end1303, !dbg !5618

cond.end1303:                                     ; preds = %cond.end1298, %cond.end1281
  %cond1304 = phi i32 [ %cond1282, %cond.end1281 ], [ %conv1302, %cond.end1298 ], !dbg !5618
  %sub1305 = sub i32 %cond1304, 38, !dbg !5618
  br label %cond.end1306, !dbg !5618

cond.end1306:                                     ; preds = %cond.end1303, %cond.end1218
  %cond1307 = phi i32 [ %add1221, %cond.end1218 ], [ %sub1305, %cond.end1303 ], !dbg !5618
  %idxprom1308 = zext i32 %cond1307 to i64, !dbg !5618
  %arrayidx1309 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom1308, !dbg !5618
  %370 = load %struct.real_format*, %struct.real_format** %arrayidx1309, align 8, !dbg !5618
  %has_nans1310 = getelementptr inbounds %struct.real_format, %struct.real_format* %370, i32 0, i32 11, !dbg !5618
  %371 = load i8, i8* %has_nans1310, align 2, !dbg !5618
  %conv1311 = zext i8 %371 to i32, !dbg !5618
  %tobool1312 = icmp ne i32 %conv1311, 0, !dbg !5618
  br i1 %tobool1312, label %land.lhs.true1313, label %land.lhs.true1315, !dbg !5618

land.lhs.true1313:                                ; preds = %cond.end1306
  %372 = load i32, i32* @flag_finite_math_only, align 4, !dbg !5618
  %tobool1314 = icmp ne i32 %372, 0, !dbg !5618
  br i1 %tobool1314, label %land.lhs.true1315, label %if.end1346, !dbg !5619

land.lhs.true1315:                                ; preds = %land.lhs.true1313, %cond.end1306, %cond.end1042, %land.lhs.true959
  %373 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5620
  %op1316 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %373, i32 0, i32 1, !dbg !5621
  %374 = load %union.tree_node*, %union.tree_node** %op1316, align 8, !dbg !5621
  %call1317 = call i32 @real_onep(%union.tree_node* %374), !dbg !5622
  %tobool1318 = icmp ne i32 %call1317, 0, !dbg !5622
  br i1 %tobool1318, label %if.then1319, label %if.end1346, !dbg !5623

if.then1319:                                      ; preds = %land.lhs.true1315, %if.else925
  %375 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5624
  %376 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %375, align 8, !dbg !5624
  %tobool1320 = icmp ne %struct.VEC_operand_entry_t_heap* %376, null, !dbg !5624
  br i1 %tobool1320, label %cond.true1321, label %cond.false1323, !dbg !5624

cond.true1321:                                    ; preds = %if.then1319
  %377 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5624
  %378 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %377, align 8, !dbg !5624
  %base1322 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %378, i32 0, i32 0, !dbg !5624
  br label %cond.end1324, !dbg !5624

cond.false1323:                                   ; preds = %if.then1319
  br label %cond.end1324, !dbg !5624

cond.end1324:                                     ; preds = %cond.false1323, %cond.true1321
  %cond1325 = phi %struct.VEC_operand_entry_t_base* [ %base1322, %cond.true1321 ], [ null, %cond.false1323 ], !dbg !5624
  %call1326 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond1325), !dbg !5624
  %cmp1327 = icmp ne i32 %call1326, 1, !dbg !5627
  br i1 %cmp1327, label %if.then1329, label %if.end1345, !dbg !5628

if.then1329:                                      ; preds = %cond.end1324
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5629
  %tobool1330 = icmp ne %struct._IO_FILE* %379, null, !dbg !5629
  br i1 %tobool1330, label %land.lhs.true1331, label %if.end1336, !dbg !5632

land.lhs.true1331:                                ; preds = %if.then1329
  %380 = load i32, i32* @dump_flags, align 4, !dbg !5633
  %and1332 = and i32 %380, 8, !dbg !5634
  %tobool1333 = icmp ne i32 %and1332, 0, !dbg !5634
  br i1 %tobool1333, label %if.then1334, label %if.end1336, !dbg !5635

if.then1334:                                      ; preds = %land.lhs.true1331
  %381 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5636
  %call1335 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %381, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)), !dbg !5637
  br label %if.end1336, !dbg !5637

if.end1336:                                       ; preds = %if.then1334, %land.lhs.true1331, %if.then1329
  %382 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5638
  %383 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %382, align 8, !dbg !5638
  %tobool1337 = icmp ne %struct.VEC_operand_entry_t_heap* %383, null, !dbg !5638
  br i1 %tobool1337, label %cond.true1338, label %cond.false1340, !dbg !5638

cond.true1338:                                    ; preds = %if.end1336
  %384 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5638
  %385 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %384, align 8, !dbg !5638
  %base1339 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %385, i32 0, i32 0, !dbg !5638
  br label %cond.end1341, !dbg !5638

cond.false1340:                                   ; preds = %if.end1336
  br label %cond.end1341, !dbg !5638

cond.end1341:                                     ; preds = %cond.false1340, %cond.true1338
  %cond1342 = phi %struct.VEC_operand_entry_t_base* [ %base1339, %cond.true1338 ], [ null, %cond.false1340 ], !dbg !5638
  %call1343 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond1342), !dbg !5638
  %386 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5639
  %inc1344 = add nsw i32 %386, 1, !dbg !5639
  store i32 %inc1344, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5639
  br label %if.end1423, !dbg !5640

if.end1345:                                       ; preds = %cond.end1324
  br label %if.end1346, !dbg !5641

if.end1346:                                       ; preds = %if.end1345, %land.lhs.true1315, %land.lhs.true1313, %land.lhs.true950, %lor.lhs.false943
  br label %if.end1347

if.end1347:                                       ; preds = %if.end1346, %if.end924
  br label %sw.epilog, !dbg !5642

sw.bb1348:                                        ; preds = %if.then, %if.then, %if.then
  %387 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5643
  %op1349 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %387, i32 0, i32 1, !dbg !5645
  %388 = load %union.tree_node*, %union.tree_node** %op1349, align 8, !dbg !5645
  %call1350 = call i32 @integer_zerop(%union.tree_node* %388), !dbg !5646
  %tobool1351 = icmp ne i32 %call1350, 0, !dbg !5646
  br i1 %tobool1351, label %if.then1395, label %lor.lhs.false1352, !dbg !5647

lor.lhs.false1352:                                ; preds = %sw.bb1348
  %389 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5648
  %base1353 = bitcast %union.tree_node* %389 to %struct.tree_base*, !dbg !5648
  %390 = bitcast %struct.tree_base* %base1353 to i64*, !dbg !5648
  %bf.load1354 = load i64, i64* %390, align 8, !dbg !5648
  %bf.clear1355 = and i64 %bf.load1354, 65535, !dbg !5648
  %bf.cast1356 = trunc i64 %bf.clear1355 to i32, !dbg !5648
  %cmp1357 = icmp eq i32 %bf.cast1356, 9, !dbg !5648
  br i1 %cmp1357, label %land.lhs.true1382, label %lor.lhs.false1359, !dbg !5648

lor.lhs.false1359:                                ; preds = %lor.lhs.false1352
  %391 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5648
  %base1360 = bitcast %union.tree_node* %391 to %struct.tree_base*, !dbg !5648
  %392 = bitcast %struct.tree_base* %base1360 to i64*, !dbg !5648
  %bf.load1361 = load i64, i64* %392, align 8, !dbg !5648
  %bf.clear1362 = and i64 %bf.load1361, 65535, !dbg !5648
  %bf.cast1363 = trunc i64 %bf.clear1362 to i32, !dbg !5648
  %cmp1364 = icmp eq i32 %bf.cast1363, 13, !dbg !5648
  br i1 %cmp1364, label %land.lhs.true1373, label %lor.lhs.false1366, !dbg !5648

lor.lhs.false1366:                                ; preds = %lor.lhs.false1359
  %393 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5648
  %base1367 = bitcast %union.tree_node* %393 to %struct.tree_base*, !dbg !5648
  %394 = bitcast %struct.tree_base* %base1367 to i64*, !dbg !5648
  %bf.load1368 = load i64, i64* %394, align 8, !dbg !5648
  %bf.clear1369 = and i64 %bf.load1368, 65535, !dbg !5648
  %bf.cast1370 = trunc i64 %bf.clear1369 to i32, !dbg !5648
  %cmp1371 = icmp eq i32 %bf.cast1370, 14, !dbg !5648
  br i1 %cmp1371, label %land.lhs.true1373, label %if.end1422, !dbg !5648

land.lhs.true1373:                                ; preds = %lor.lhs.false1366, %lor.lhs.false1359
  %395 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5648
  %common1374 = bitcast %union.tree_node* %395 to %struct.tree_common*, !dbg !5648
  %type1375 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1374, i32 0, i32 2, !dbg !5648
  %396 = load %union.tree_node*, %union.tree_node** %type1375, align 8, !dbg !5648
  %base1376 = bitcast %union.tree_node* %396 to %struct.tree_base*, !dbg !5648
  %397 = bitcast %struct.tree_base* %base1376 to i64*, !dbg !5648
  %bf.load1377 = load i64, i64* %397, align 8, !dbg !5648
  %bf.clear1378 = and i64 %bf.load1377, 65535, !dbg !5648
  %bf.cast1379 = trunc i64 %bf.clear1378 to i32, !dbg !5648
  %cmp1380 = icmp eq i32 %bf.cast1379, 9, !dbg !5648
  br i1 %cmp1380, label %land.lhs.true1382, label %if.end1422, !dbg !5649

land.lhs.true1382:                                ; preds = %land.lhs.true1373, %lor.lhs.false1352
  %398 = load i32, i32* %opcode.addr, align 4, !dbg !5650
  %cmp1383 = icmp eq i32 %398, 63, !dbg !5651
  br i1 %cmp1383, label %land.lhs.true1388, label %lor.lhs.false1385, !dbg !5652

lor.lhs.false1385:                                ; preds = %land.lhs.true1382
  %399 = load i32, i32* %opcode.addr, align 4, !dbg !5653
  %cmp1386 = icmp eq i32 %399, 64, !dbg !5654
  br i1 %cmp1386, label %land.lhs.true1388, label %if.end1422, !dbg !5655

land.lhs.true1388:                                ; preds = %lor.lhs.false1385, %land.lhs.true1382
  %400 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5656
  %401 = load %struct.operand_entry*, %struct.operand_entry** %oelast, align 8, !dbg !5657
  %op1389 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %401, i32 0, i32 1, !dbg !5658
  %402 = load %union.tree_node*, %union.tree_node** %op1389, align 8, !dbg !5658
  %403 = load i32, i32* %opcode.addr, align 4, !dbg !5659
  %cmp1390 = icmp eq i32 %403, 64, !dbg !5660
  %conv1391 = zext i1 %cmp1390 to i32, !dbg !5660
  %call1392 = call zeroext i8 @fold_real_zero_addition_p(%union.tree_node* %400, %union.tree_node* %402, i32 %conv1391), !dbg !5661
  %conv1393 = zext i8 %call1392 to i32, !dbg !5661
  %tobool1394 = icmp ne i32 %conv1393, 0, !dbg !5661
  br i1 %tobool1394, label %if.then1395, label %if.end1422, !dbg !5662

if.then1395:                                      ; preds = %land.lhs.true1388, %sw.bb1348
  %404 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5663
  %405 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %404, align 8, !dbg !5663
  %tobool1396 = icmp ne %struct.VEC_operand_entry_t_heap* %405, null, !dbg !5663
  br i1 %tobool1396, label %cond.true1397, label %cond.false1399, !dbg !5663

cond.true1397:                                    ; preds = %if.then1395
  %406 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5663
  %407 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %406, align 8, !dbg !5663
  %base1398 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %407, i32 0, i32 0, !dbg !5663
  br label %cond.end1400, !dbg !5663

cond.false1399:                                   ; preds = %if.then1395
  br label %cond.end1400, !dbg !5663

cond.end1400:                                     ; preds = %cond.false1399, %cond.true1397
  %cond1401 = phi %struct.VEC_operand_entry_t_base* [ %base1398, %cond.true1397 ], [ null, %cond.false1399 ], !dbg !5663
  %call1402 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond1401), !dbg !5663
  %cmp1403 = icmp ne i32 %call1402, 1, !dbg !5666
  br i1 %cmp1403, label %if.then1405, label %if.end1421, !dbg !5667

if.then1405:                                      ; preds = %cond.end1400
  %408 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5668
  %tobool1406 = icmp ne %struct._IO_FILE* %408, null, !dbg !5668
  br i1 %tobool1406, label %land.lhs.true1407, label %if.end1412, !dbg !5671

land.lhs.true1407:                                ; preds = %if.then1405
  %409 = load i32, i32* @dump_flags, align 4, !dbg !5672
  %and1408 = and i32 %409, 8, !dbg !5673
  %tobool1409 = icmp ne i32 %and1408, 0, !dbg !5673
  br i1 %tobool1409, label %if.then1410, label %if.end1412, !dbg !5674

if.then1410:                                      ; preds = %land.lhs.true1407
  %410 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5675
  %call1411 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %410, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i64 0, i64 0)), !dbg !5676
  br label %if.end1412, !dbg !5676

if.end1412:                                       ; preds = %if.then1410, %land.lhs.true1407, %if.then1405
  %411 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5677
  %412 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %411, align 8, !dbg !5677
  %tobool1413 = icmp ne %struct.VEC_operand_entry_t_heap* %412, null, !dbg !5677
  br i1 %tobool1413, label %cond.true1414, label %cond.false1416, !dbg !5677

cond.true1414:                                    ; preds = %if.end1412
  %413 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5677
  %414 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %413, align 8, !dbg !5677
  %base1415 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %414, i32 0, i32 0, !dbg !5677
  br label %cond.end1417, !dbg !5677

cond.false1416:                                   ; preds = %if.end1412
  br label %cond.end1417, !dbg !5677

cond.end1417:                                     ; preds = %cond.false1416, %cond.true1414
  %cond1418 = phi %struct.VEC_operand_entry_t_base* [ %base1415, %cond.true1414 ], [ null, %cond.false1416 ], !dbg !5677
  %call1419 = call %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond1418), !dbg !5677
  %415 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5678
  %inc1420 = add nsw i32 %415, 1, !dbg !5678
  store i32 %inc1420, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5678
  br label %if.end1423, !dbg !5679

if.end1421:                                       ; preds = %cond.end1400
  br label %if.end1422, !dbg !5680

if.end1422:                                       ; preds = %if.end1421, %land.lhs.true1388, %lor.lhs.false1385, %land.lhs.true1373, %lor.lhs.false1366
  br label %sw.epilog, !dbg !5681

sw.default:                                       ; preds = %if.then
  br label %sw.epilog, !dbg !5682

sw.epilog:                                        ; preds = %sw.default, %if.end1422, %if.end1347, %if.end161, %if.end97
  br label %if.end1423, !dbg !5683

if.end1423:                                       ; preds = %cond.end63, %cond.end123, %cond.end918, %cond.end1341, %cond.end1417, %sw.epilog, %land.lhs.true33, %lor.lhs.false27, %cond.end
  ret void, !dbg !5684
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eliminate_not_pairs(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %currindex, %struct.operand_entry* %curr) #0 !dbg !5685 {
entry:
  %retval = alloca i8, align 1
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %currindex.addr = alloca i32, align 4
  %curr.addr = alloca %struct.operand_entry*, align 8
  %notop = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %oe = alloca %struct.operand_entry*, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  store i32 %currindex, i32* %currindex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %currindex.addr, metadata !5692, metadata !DIExpression()), !dbg !5693
  store %struct.operand_entry* %curr, %struct.operand_entry** %curr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %curr.addr, metadata !5694, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.declare(metadata %union.tree_node** %notop, metadata !5696, metadata !DIExpression()), !dbg !5697
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5698, metadata !DIExpression()), !dbg !5699
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !5700, metadata !DIExpression()), !dbg !5701
  %0 = load i32, i32* %opcode.addr, align 4, !dbg !5702
  %cmp = icmp ne i32 %0, 87, !dbg !5704
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5705

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %opcode.addr, align 4, !dbg !5706
  %cmp1 = icmp ne i32 %1, 89, !dbg !5707
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !5708

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5709
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %2, i32 0, i32 1, !dbg !5709
  %3 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5709
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5709
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5709
  %bf.load = load i64, i64* %4, align 8, !dbg !5709
  %bf.clear = and i64 %bf.load, 65535, !dbg !5709
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5709
  %cmp2 = icmp ne i32 %bf.cast, 141, !dbg !5710
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5711

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5712
  br label %return, !dbg !5712

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5713
  %op3 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i32 0, i32 1, !dbg !5714
  %6 = load %union.tree_node*, %union.tree_node** %op3, align 8, !dbg !5714
  %call = call %union.tree_node* @get_unary_op(%union.tree_node* %6, i32 90), !dbg !5715
  store %union.tree_node* %call, %union.tree_node** %notop, align 8, !dbg !5716
  %7 = load %union.tree_node*, %union.tree_node** %notop, align 8, !dbg !5717
  %cmp4 = icmp eq %union.tree_node* %7, null, !dbg !5719
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !5720

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5721
  br label %return, !dbg !5721

if.end6:                                          ; preds = %if.end
  %8 = load i32, i32* %currindex.addr, align 4, !dbg !5722
  %add = add i32 %8, 1, !dbg !5724
  store i32 %add, i32* %i, align 4, !dbg !5725
  br label %for.cond, !dbg !5726

for.cond:                                         ; preds = %for.inc, %if.end6
  %9 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5727
  %10 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %9, align 8, !dbg !5727
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %10, null, !dbg !5727
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5727

cond.true:                                        ; preds = %for.cond
  %11 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5727
  %12 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %11, align 8, !dbg !5727
  %base7 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %12, i32 0, i32 0, !dbg !5727
  br label %cond.end, !dbg !5727

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base7, %cond.true ], [ null, %cond.false ], !dbg !5727
  %13 = load i32, i32* %i, align 4, !dbg !5727
  %call8 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond, i32 %13, %struct.operand_entry** %oe), !dbg !5727
  %tobool9 = icmp ne i32 %call8, 0, !dbg !5727
  br i1 %tobool9, label %land.rhs, label %land.end, !dbg !5729

land.rhs:                                         ; preds = %cond.end
  %14 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5730
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %14, i32 0, i32 0, !dbg !5731
  %15 = load i32, i32* %rank, align 8, !dbg !5731
  %16 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5732
  %rank10 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %16, i32 0, i32 0, !dbg !5733
  %17 = load i32, i32* %rank10, align 8, !dbg !5733
  %sub = sub i32 %17, 1, !dbg !5734
  %cmp11 = icmp uge i32 %15, %sub, !dbg !5735
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %18 = phi i1 [ false, %cond.end ], [ %cmp11, %land.rhs ], !dbg !5736
  br i1 %18, label %for.body, label %for.end, !dbg !5737

for.body:                                         ; preds = %land.end
  %19 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5738
  %op12 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %19, i32 0, i32 1, !dbg !5741
  %20 = load %union.tree_node*, %union.tree_node** %op12, align 8, !dbg !5741
  %21 = load %union.tree_node*, %union.tree_node** %notop, align 8, !dbg !5742
  %cmp13 = icmp eq %union.tree_node* %20, %21, !dbg !5743
  br i1 %cmp13, label %if.then14, label %if.end70, !dbg !5744

if.then14:                                        ; preds = %for.body
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5745
  %tobool15 = icmp ne %struct._IO_FILE* %22, null, !dbg !5745
  br i1 %tobool15, label %land.lhs.true16, label %if.end38, !dbg !5748

land.lhs.true16:                                  ; preds = %if.then14
  %23 = load i32, i32* @dump_flags, align 4, !dbg !5749
  %and = and i32 %23, 8, !dbg !5750
  %tobool17 = icmp ne i32 %and, 0, !dbg !5750
  br i1 %tobool17, label %if.then18, label %if.end38, !dbg !5751

if.then18:                                        ; preds = %land.lhs.true16
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5752
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !5754
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5755
  %26 = load %union.tree_node*, %union.tree_node** %notop, align 8, !dbg !5756
  call void @print_generic_expr(%struct._IO_FILE* %25, %union.tree_node* %26, i32 0), !dbg !5757
  %27 = load i32, i32* %opcode.addr, align 4, !dbg !5758
  %cmp20 = icmp eq i32 %27, 89, !dbg !5760
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !5761

if.then21:                                        ; preds = %if.then18
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5762
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0)), !dbg !5763
  br label %if.end27, !dbg !5763

if.else:                                          ; preds = %if.then18
  %29 = load i32, i32* %opcode.addr, align 4, !dbg !5764
  %cmp23 = icmp eq i32 %29, 87, !dbg !5766
  br i1 %cmp23, label %if.then24, label %if.end26, !dbg !5767

if.then24:                                        ; preds = %if.else
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5768
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0)), !dbg !5769
  br label %if.end26, !dbg !5769

if.end26:                                         ; preds = %if.then24, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then21
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5770
  %32 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5771
  %op28 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %32, i32 0, i32 1, !dbg !5772
  %33 = load %union.tree_node*, %union.tree_node** %op28, align 8, !dbg !5772
  call void @print_generic_expr(%struct._IO_FILE* %31, %union.tree_node* %33, i32 0), !dbg !5773
  %34 = load i32, i32* %opcode.addr, align 4, !dbg !5774
  %cmp29 = icmp eq i32 %34, 89, !dbg !5776
  br i1 %cmp29, label %if.then30, label %if.else32, !dbg !5777

if.then30:                                        ; preds = %if.end27
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5778
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0)), !dbg !5779
  br label %if.end37, !dbg !5779

if.else32:                                        ; preds = %if.end27
  %36 = load i32, i32* %opcode.addr, align 4, !dbg !5780
  %cmp33 = icmp eq i32 %36, 87, !dbg !5782
  br i1 %cmp33, label %if.then34, label %if.end36, !dbg !5783

if.then34:                                        ; preds = %if.else32
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5784
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0)), !dbg !5785
  br label %if.end36, !dbg !5785

if.end36:                                         ; preds = %if.then34, %if.else32
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then30
  br label %if.end38, !dbg !5786

if.end38:                                         ; preds = %if.end37, %land.lhs.true16, %if.then14
  %38 = load i32, i32* %opcode.addr, align 4, !dbg !5787
  %cmp39 = icmp eq i32 %38, 89, !dbg !5789
  br i1 %cmp39, label %if.then40, label %if.else44, !dbg !5790

if.then40:                                        ; preds = %if.end38
  %39 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5791
  %op41 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %39, i32 0, i32 1, !dbg !5791
  %40 = load %union.tree_node*, %union.tree_node** %op41, align 8, !dbg !5791
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !5791
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5791
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5791
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5791
  %call42 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %41, %union.tree_node* %42), !dbg !5791
  %43 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5792
  %op43 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %43, i32 0, i32 1, !dbg !5793
  store %union.tree_node* %call42, %union.tree_node** %op43, align 8, !dbg !5794
  br label %if.end59, !dbg !5792

if.else44:                                        ; preds = %if.end38
  %44 = load i32, i32* %opcode.addr, align 4, !dbg !5795
  %cmp45 = icmp eq i32 %44, 87, !dbg !5797
  br i1 %cmp45, label %if.then46, label %if.end58, !dbg !5798

if.then46:                                        ; preds = %if.else44
  %45 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5799
  %op47 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %45, i32 0, i32 1, !dbg !5799
  %46 = load %union.tree_node*, %union.tree_node** %op47, align 8, !dbg !5799
  %common48 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !5799
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !5799
  %47 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !5799
  %48 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5800
  %op50 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %48, i32 0, i32 1, !dbg !5800
  %49 = load %union.tree_node*, %union.tree_node** %op50, align 8, !dbg !5800
  %common51 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !5800
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !5800
  %50 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !5800
  %type53 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !5800
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type53, i32 0, i32 6, !dbg !5800
  %bf.load54 = load i32, i32* %precision, align 4, !dbg !5800
  %bf.clear55 = and i32 %bf.load54, 1023, !dbg !5800
  %call56 = call %union.tree_node* @build_low_bits_mask(%union.tree_node* %47, i32 %bf.clear55), !dbg !5801
  %51 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5802
  %op57 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %51, i32 0, i32 1, !dbg !5803
  store %union.tree_node* %call56, %union.tree_node** %op57, align 8, !dbg !5804
  br label %if.end58, !dbg !5802

if.end58:                                         ; preds = %if.then46, %if.else44
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then40
  %52 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5805
  %53 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %52, align 8, !dbg !5805
  %tobool60 = icmp ne %struct.VEC_operand_entry_t_heap* %53, null, !dbg !5805
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !5805

cond.true61:                                      ; preds = %if.end59
  %54 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5805
  %55 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %54, align 8, !dbg !5805
  %base62 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %55, i32 0, i32 0, !dbg !5805
  br label %cond.end64, !dbg !5805

cond.false63:                                     ; preds = %if.end59
  br label %cond.end64, !dbg !5805

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_operand_entry_t_base* [ %base62, %cond.true61 ], [ null, %cond.false63 ], !dbg !5805
  %call66 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond65), !dbg !5805
  %sub67 = sub i32 %call66, 1, !dbg !5806
  %56 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5807
  %add68 = add i32 %56, %sub67, !dbg !5807
  store i32 %add68, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5807
  %57 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5808
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %57), !dbg !5808
  %58 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5809
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %58, align 8, !dbg !5810
  %59 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5811
  %60 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5811
  %call69 = call %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %59, %struct.operand_entry* %60), !dbg !5811
  store i8 1, i8* %retval, align 1, !dbg !5812
  br label %return, !dbg !5812

if.end70:                                         ; preds = %for.body
  br label %for.inc, !dbg !5813

for.inc:                                          ; preds = %if.end70
  %61 = load i32, i32* %i, align 4, !dbg !5814
  %inc = add i32 %61, 1, !dbg !5814
  store i32 %inc, i32* %i, align 4, !dbg !5814
  br label %for.cond, !dbg !5815, !llvm.loop !5816

for.end:                                          ; preds = %land.end
  store i8 0, i8* %retval, align 1, !dbg !5818
  br label %return, !dbg !5818

return:                                           ; preds = %for.end, %cond.end64, %if.then5, %if.then
  %62 = load i8, i8* %retval, align 1, !dbg !5819
  ret i8 %62, !dbg !5819
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eliminate_duplicate_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i8* %all_done, i32 %i, %struct.operand_entry* %curr, %struct.operand_entry* %last) #0 !dbg !5820 {
entry:
  %retval = alloca i8, align 1
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %all_done.addr = alloca i8*, align 8
  %i.addr = alloca i32, align 4
  %curr.addr = alloca %struct.operand_entry*, align 8
  %last.addr = alloca %struct.operand_entry*, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !5823, metadata !DIExpression()), !dbg !5824
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !5825, metadata !DIExpression()), !dbg !5826
  store i8* %all_done, i8** %all_done.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %all_done.addr, metadata !5827, metadata !DIExpression()), !dbg !5828
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5829, metadata !DIExpression()), !dbg !5830
  store %struct.operand_entry* %curr, %struct.operand_entry** %curr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %curr.addr, metadata !5831, metadata !DIExpression()), !dbg !5832
  store %struct.operand_entry* %last, %struct.operand_entry** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %last.addr, metadata !5833, metadata !DIExpression()), !dbg !5834
  %0 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5835
  %tobool = icmp ne %struct.operand_entry* %0, null, !dbg !5835
  br i1 %tobool, label %land.lhs.true, label %if.end52, !dbg !5837

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5838
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i32 0, i32 1, !dbg !5839
  %2 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5839
  %3 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5840
  %op1 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i32 0, i32 1, !dbg !5841
  %4 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5841
  %cmp = icmp eq %union.tree_node* %2, %4, !dbg !5842
  br i1 %cmp, label %if.then, label %if.end52, !dbg !5843

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %opcode.addr, align 4, !dbg !5844
  switch i32 %5, label %sw.default [
    i32 81, label %sw.bb
    i32 80, label %sw.bb
    i32 87, label %sw.bb
    i32 89, label %sw.bb
    i32 88, label %sw.bb13
  ], !dbg !5846

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5847
  %tobool2 = icmp ne %struct._IO_FILE* %6, null, !dbg !5847
  br i1 %tobool2, label %land.lhs.true3, label %if.end, !dbg !5850

land.lhs.true3:                                   ; preds = %sw.bb
  %7 = load i32, i32* @dump_flags, align 4, !dbg !5851
  %and = and i32 %7, 8, !dbg !5852
  %tobool4 = icmp ne i32 %and, 0, !dbg !5852
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5853

if.then5:                                         ; preds = %land.lhs.true3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5854
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !5856
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5857
  %10 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5858
  %op6 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %10, i32 0, i32 1, !dbg !5859
  %11 = load %union.tree_node*, %union.tree_node** %op6, align 8, !dbg !5859
  call void @print_generic_expr(%struct._IO_FILE* %9, %union.tree_node* %11, i32 0), !dbg !5860
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5861
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0)), !dbg !5862
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5863
  %14 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5864
  %op8 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %14, i32 0, i32 1, !dbg !5865
  %15 = load %union.tree_node*, %union.tree_node** %op8, align 8, !dbg !5865
  call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %15, i32 0), !dbg !5866
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5867
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)), !dbg !5868
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5869
  %18 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5870
  %op10 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i32 0, i32 1, !dbg !5871
  %19 = load %union.tree_node*, %union.tree_node** %op10, align 8, !dbg !5871
  call void @print_generic_stmt(%struct._IO_FILE* %17, %union.tree_node* %19, i32 0), !dbg !5872
  br label %if.end, !dbg !5873

if.end:                                           ; preds = %if.then5, %land.lhs.true3, %sw.bb
  %20 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5874
  %21 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %20, align 8, !dbg !5874
  %tobool11 = icmp ne %struct.VEC_operand_entry_t_heap* %21, null, !dbg !5874
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !5874

cond.true:                                        ; preds = %if.end
  %22 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5874
  %23 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, align 8, !dbg !5874
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %23, i32 0, i32 0, !dbg !5874
  br label %cond.end, !dbg !5874

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5874

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5874
  %24 = load i32, i32* %i.addr, align 4, !dbg !5874
  %call12 = call %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond, i32 %24), !dbg !5874
  %25 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5875
  %inc = add nsw i32 %25, 1, !dbg !5875
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5875
  store i8 1, i8* %retval, align 1, !dbg !5876
  br label %return, !dbg !5876

sw.bb13:                                          ; preds = %if.then
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5877
  %tobool14 = icmp ne %struct._IO_FILE* %26, null, !dbg !5877
  br i1 %tobool14, label %land.lhs.true15, label %if.end24, !dbg !5879

land.lhs.true15:                                  ; preds = %sw.bb13
  %27 = load i32, i32* @dump_flags, align 4, !dbg !5880
  %and16 = and i32 %27, 8, !dbg !5881
  %tobool17 = icmp ne i32 %and16, 0, !dbg !5881
  br i1 %tobool17, label %if.then18, label %if.end24, !dbg !5882

if.then18:                                        ; preds = %land.lhs.true15
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5883
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !5885
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5886
  %30 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5887
  %op20 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %30, i32 0, i32 1, !dbg !5888
  %31 = load %union.tree_node*, %union.tree_node** %op20, align 8, !dbg !5888
  call void @print_generic_expr(%struct._IO_FILE* %29, %union.tree_node* %31, i32 0), !dbg !5889
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5890
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0)), !dbg !5891
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5892
  %34 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5893
  %op22 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %34, i32 0, i32 1, !dbg !5894
  %35 = load %union.tree_node*, %union.tree_node** %op22, align 8, !dbg !5894
  call void @print_generic_expr(%struct._IO_FILE* %33, %union.tree_node* %35, i32 0), !dbg !5895
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5896
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i64 0, i64 0)), !dbg !5897
  br label %if.end24, !dbg !5898

if.end24:                                         ; preds = %if.then18, %land.lhs.true15, %sw.bb13
  %37 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5899
  %add = add nsw i32 %37, 2, !dbg !5899
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !5899
  %38 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5900
  %39 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %38, align 8, !dbg !5900
  %tobool25 = icmp ne %struct.VEC_operand_entry_t_heap* %39, null, !dbg !5900
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !5900

cond.true26:                                      ; preds = %if.end24
  %40 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5900
  %41 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %40, align 8, !dbg !5900
  %base27 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %41, i32 0, i32 0, !dbg !5900
  br label %cond.end29, !dbg !5900

cond.false28:                                     ; preds = %if.end24
  br label %cond.end29, !dbg !5900

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_operand_entry_t_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !5900
  %call31 = call i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond30), !dbg !5900
  %cmp32 = icmp eq i32 %call31, 2, !dbg !5902
  br i1 %cmp32, label %if.then33, label %if.else, !dbg !5903

if.then33:                                        ; preds = %cond.end29
  %42 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5904
  call void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %42), !dbg !5904
  %43 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5906
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %43, align 8, !dbg !5907
  %44 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5908
  %45 = load %struct.operand_entry*, %struct.operand_entry** %last.addr, align 8, !dbg !5909
  %op34 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %45, i32 0, i32 1, !dbg !5909
  %46 = load %union.tree_node*, %union.tree_node** %op34, align 8, !dbg !5909
  %common = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !5909
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5909
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5909
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5909
  %call35 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %47, %union.tree_node* %48), !dbg !5909
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %44, %union.tree_node* %call35), !dbg !5910
  %49 = load i8*, i8** %all_done.addr, align 8, !dbg !5911
  store i8 1, i8* %49, align 1, !dbg !5912
  br label %if.end51, !dbg !5913

if.else:                                          ; preds = %cond.end29
  %50 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5914
  %51 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %50, align 8, !dbg !5914
  %tobool36 = icmp ne %struct.VEC_operand_entry_t_heap* %51, null, !dbg !5914
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !5914

cond.true37:                                      ; preds = %if.else
  %52 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5914
  %53 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %52, align 8, !dbg !5914
  %base38 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %53, i32 0, i32 0, !dbg !5914
  br label %cond.end40, !dbg !5914

cond.false39:                                     ; preds = %if.else
  br label %cond.end40, !dbg !5914

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_operand_entry_t_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !5914
  %54 = load i32, i32* %i.addr, align 4, !dbg !5914
  %sub = sub i32 %54, 1, !dbg !5914
  %call42 = call %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond41, i32 %sub), !dbg !5914
  %55 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5916
  %56 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %55, align 8, !dbg !5916
  %tobool43 = icmp ne %struct.VEC_operand_entry_t_heap* %56, null, !dbg !5916
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !5916

cond.true44:                                      ; preds = %cond.end40
  %57 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5916
  %58 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %57, align 8, !dbg !5916
  %base45 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %58, i32 0, i32 0, !dbg !5916
  br label %cond.end47, !dbg !5916

cond.false46:                                     ; preds = %cond.end40
  br label %cond.end47, !dbg !5916

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_operand_entry_t_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !5916
  %59 = load i32, i32* %i.addr, align 4, !dbg !5916
  %sub49 = sub i32 %59, 1, !dbg !5916
  %call50 = call %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond48, i32 %sub49), !dbg !5916
  br label %if.end51

if.end51:                                         ; preds = %cond.end47, %if.then33
  store i8 1, i8* %retval, align 1, !dbg !5917
  br label %return, !dbg !5917

sw.default:                                       ; preds = %if.then
  br label %sw.epilog, !dbg !5918

sw.epilog:                                        ; preds = %sw.default
  br label %if.end52, !dbg !5919

if.end52:                                         ; preds = %sw.epilog, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !5920
  br label %return, !dbg !5920

return:                                           ; preds = %if.end52, %if.end51, %cond.end
  %60 = load i8, i8* %retval, align 1, !dbg !5921
  ret i8 %60, !dbg !5921
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eliminate_plus_minus_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %currindex, %struct.operand_entry* %curr) #0 !dbg !5922 {
entry:
  %retval = alloca i8, align 1
  %opcode.addr = alloca i32, align 4
  %ops.addr = alloca %struct.VEC_operand_entry_t_heap**, align 8
  %currindex.addr = alloca i32, align 4
  %curr.addr = alloca %struct.operand_entry*, align 8
  %negateop = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %oe = alloca %struct.operand_entry*, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !5923, metadata !DIExpression()), !dbg !5924
  store %struct.VEC_operand_entry_t_heap** %ops, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_heap*** %ops.addr, metadata !5925, metadata !DIExpression()), !dbg !5926
  store i32 %currindex, i32* %currindex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %currindex.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  store %struct.operand_entry* %curr, %struct.operand_entry** %curr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %curr.addr, metadata !5929, metadata !DIExpression()), !dbg !5930
  call void @llvm.dbg.declare(metadata %union.tree_node** %negateop, metadata !5931, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5933, metadata !DIExpression()), !dbg !5934
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %oe, metadata !5935, metadata !DIExpression()), !dbg !5936
  %0 = load i32, i32* %opcode.addr, align 4, !dbg !5937
  %cmp = icmp ne i32 %0, 63, !dbg !5939
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5940

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5941
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i32 0, i32 1, !dbg !5941
  %2 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5941
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5941
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5941
  %bf.load = load i64, i64* %3, align 8, !dbg !5941
  %bf.clear = and i64 %bf.load, 65535, !dbg !5941
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5941
  %cmp1 = icmp ne i32 %bf.cast, 141, !dbg !5942
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5943

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !5944
  br label %return, !dbg !5944

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5945
  %op2 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %4, i32 0, i32 1, !dbg !5946
  %5 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5946
  %call = call %union.tree_node* @get_unary_op(%union.tree_node* %5, i32 79), !dbg !5947
  store %union.tree_node* %call, %union.tree_node** %negateop, align 8, !dbg !5948
  %6 = load %union.tree_node*, %union.tree_node** %negateop, align 8, !dbg !5949
  %cmp3 = icmp eq %union.tree_node* %6, null, !dbg !5951
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !5952

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5953
  br label %return, !dbg !5953

if.end5:                                          ; preds = %if.end
  %7 = load i32, i32* %currindex.addr, align 4, !dbg !5954
  %add = add i32 %7, 1, !dbg !5956
  store i32 %add, i32* %i, align 4, !dbg !5957
  br label %for.cond, !dbg !5958

for.cond:                                         ; preds = %for.inc, %if.end5
  %8 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5959
  %9 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %8, align 8, !dbg !5959
  %tobool = icmp ne %struct.VEC_operand_entry_t_heap* %9, null, !dbg !5959
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5959

cond.true:                                        ; preds = %for.cond
  %10 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5959
  %11 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %10, align 8, !dbg !5959
  %base6 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %11, i32 0, i32 0, !dbg !5959
  br label %cond.end, !dbg !5959

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base6, %cond.true ], [ null, %cond.false ], !dbg !5959
  %12 = load i32, i32* %i, align 4, !dbg !5959
  %call7 = call i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond, i32 %12, %struct.operand_entry** %oe), !dbg !5959
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5959
  br i1 %tobool8, label %land.rhs, label %land.end, !dbg !5961

land.rhs:                                         ; preds = %cond.end
  %13 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5962
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %13, i32 0, i32 0, !dbg !5963
  %14 = load i32, i32* %rank, align 8, !dbg !5963
  %15 = load %struct.operand_entry*, %struct.operand_entry** %curr.addr, align 8, !dbg !5964
  %rank9 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %15, i32 0, i32 0, !dbg !5965
  %16 = load i32, i32* %rank9, align 8, !dbg !5965
  %sub = sub i32 %16, 1, !dbg !5966
  %cmp10 = icmp uge i32 %14, %sub, !dbg !5967
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %17 = phi i1 [ false, %cond.end ], [ %cmp10, %land.rhs ], !dbg !5968
  br i1 %17, label %for.body, label %for.end, !dbg !5969

for.body:                                         ; preds = %land.end
  %18 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5970
  %op11 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i32 0, i32 1, !dbg !5973
  %19 = load %union.tree_node*, %union.tree_node** %op11, align 8, !dbg !5973
  %20 = load %union.tree_node*, %union.tree_node** %negateop, align 8, !dbg !5974
  %cmp12 = icmp eq %union.tree_node* %19, %20, !dbg !5975
  br i1 %cmp12, label %if.then13, label %if.end38, !dbg !5976

if.then13:                                        ; preds = %for.body
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5977
  %tobool14 = icmp ne %struct._IO_FILE* %21, null, !dbg !5977
  br i1 %tobool14, label %land.lhs.true, label %if.end21, !dbg !5980

land.lhs.true:                                    ; preds = %if.then13
  %22 = load i32, i32* @dump_flags, align 4, !dbg !5981
  %and = and i32 %22, 8, !dbg !5982
  %tobool15 = icmp ne i32 %and, 0, !dbg !5982
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !5983

if.then16:                                        ; preds = %land.lhs.true
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5984
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !5986
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5987
  %25 = load %union.tree_node*, %union.tree_node** %negateop, align 8, !dbg !5988
  call void @print_generic_expr(%struct._IO_FILE* %24, %union.tree_node* %25, i32 0), !dbg !5989
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5990
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)), !dbg !5991
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5992
  %28 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5993
  %op19 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %28, i32 0, i32 1, !dbg !5994
  %29 = load %union.tree_node*, %union.tree_node** %op19, align 8, !dbg !5994
  call void @print_generic_expr(%struct._IO_FILE* %27, %union.tree_node* %29, i32 0), !dbg !5995
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5996
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0)), !dbg !5997
  br label %if.end21, !dbg !5998

if.end21:                                         ; preds = %if.then16, %land.lhs.true, %if.then13
  %31 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5999
  %32 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %31, align 8, !dbg !5999
  %tobool22 = icmp ne %struct.VEC_operand_entry_t_heap* %32, null, !dbg !5999
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !5999

cond.true23:                                      ; preds = %if.end21
  %33 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !5999
  %34 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %33, align 8, !dbg !5999
  %base24 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %34, i32 0, i32 0, !dbg !5999
  br label %cond.end26, !dbg !5999

cond.false25:                                     ; preds = %if.end21
  br label %cond.end26, !dbg !5999

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_operand_entry_t_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !5999
  %35 = load i32, i32* %i, align 4, !dbg !5999
  %call28 = call %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond27, i32 %35), !dbg !5999
  %36 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !6000
  %37 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !6001
  %op29 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %37, i32 0, i32 1, !dbg !6001
  %38 = load %union.tree_node*, %union.tree_node** %op29, align 8, !dbg !6001
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !6001
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6001
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6001
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !6001
  %call30 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %39, %union.tree_node* %40), !dbg !6001
  call void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %36, %union.tree_node* %call30), !dbg !6002
  %41 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !6003
  %42 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %41, align 8, !dbg !6003
  %tobool31 = icmp ne %struct.VEC_operand_entry_t_heap* %42, null, !dbg !6003
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !6003

cond.true32:                                      ; preds = %cond.end26
  %43 = load %struct.VEC_operand_entry_t_heap**, %struct.VEC_operand_entry_t_heap*** %ops.addr, align 8, !dbg !6003
  %44 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %43, align 8, !dbg !6003
  %base33 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %44, i32 0, i32 0, !dbg !6003
  br label %cond.end35, !dbg !6003

cond.false34:                                     ; preds = %cond.end26
  br label %cond.end35, !dbg !6003

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_operand_entry_t_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !6003
  %45 = load i32, i32* %currindex.addr, align 4, !dbg !6003
  %call37 = call %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond36, i32 %45), !dbg !6003
  %46 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !6004
  %inc = add nsw i32 %46, 1, !dbg !6004
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i32 0, i32 2), align 4, !dbg !6004
  store i8 1, i8* %retval, align 1, !dbg !6005
  br label %return, !dbg !6005

if.end38:                                         ; preds = %for.body
  br label %for.inc, !dbg !6006

for.inc:                                          ; preds = %if.end38
  %47 = load i32, i32* %i, align 4, !dbg !6007
  %inc39 = add i32 %47, 1, !dbg !6007
  store i32 %inc39, i32* %i, align 4, !dbg !6007
  br label %for.cond, !dbg !6008, !llvm.loop !6009

for.end:                                          ; preds = %land.end
  store i8 0, i8* %retval, align 1, !dbg !6011
  br label %return, !dbg !6011

return:                                           ; preds = %for.end, %cond.end35, %if.then4, %if.then
  %48 = load i8, i8* %retval, align 1, !dbg !6012
  ret i8 %48, !dbg !6012
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @integer_all_onesp(%union.tree_node*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local i32 @real_zerop(%union.tree_node*) #2

declare dso_local i32 @integer_onep(%union.tree_node*) #2

declare dso_local i32 @real_onep(%union.tree_node*) #2

declare dso_local zeroext i8 @fold_real_zero_addition_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_unary_op(%union.tree_node* %name, i32 %opcode) #0 !dbg !6013 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %opcode.addr = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6016, metadata !DIExpression()), !dbg !6017
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !6018, metadata !DIExpression()), !dbg !6019
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6020, metadata !DIExpression()), !dbg !6021
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6022
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6022
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6022
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6022
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !6021
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6023
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %2), !dbg !6025
  %tobool = icmp ne i8 %call, 0, !dbg !6025
  br i1 %tobool, label %if.end, label %if.then, !dbg !6026

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6027
  br label %return, !dbg !6027

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6028
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !6030
  %4 = load i32, i32* %opcode.addr, align 4, !dbg !6031
  %cmp = icmp eq i32 %call1, %4, !dbg !6032
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !6033

if.then2:                                         ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6034
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !6035
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !6036
  br label %return, !dbg !6036

if.end4:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6037
  br label %return, !dbg !6037

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6038
  ret %union.tree_node* %6, !dbg !6038
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_low_bits_mask(%union.tree_node*, i32) #2

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_) #0 !dbg !6039 {
entry:
  %vec_.addr = alloca %struct.VEC_operand_entry_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.operand_entry**, align 8
  %obj_ = alloca %struct.operand_entry*, align 8
  store %struct.VEC_operand_entry_t_base* %vec_, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_operand_entry_t_base** %vec_.addr, metadata !6042, metadata !DIExpression()), !dbg !6043
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6044, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata %struct.operand_entry*** %slot_, metadata !6045, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata %struct.operand_entry** %obj_, metadata !6046, metadata !DIExpression()), !dbg !6043
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !6043
  %1 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !6043
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %1, i32 0, i32 0, !dbg !6043
  %2 = load i32, i32* %num, align 8, !dbg !6043
  %cmp = icmp ult i32 %0, %2, !dbg !6043
  %conv = zext i1 %cmp to i32, !dbg !6043
  %3 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !6043
  %vec = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %3, i32 0, i32 2, !dbg !6043
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !6043
  %idxprom = zext i32 %4 to i64, !dbg !6043
  %arrayidx = getelementptr inbounds [1 x %struct.operand_entry*], [1 x %struct.operand_entry*]* %vec, i64 0, i64 %idxprom, !dbg !6043
  store %struct.operand_entry** %arrayidx, %struct.operand_entry*** %slot_, align 8, !dbg !6043
  %5 = load %struct.operand_entry**, %struct.operand_entry*** %slot_, align 8, !dbg !6043
  %6 = load %struct.operand_entry*, %struct.operand_entry** %5, align 8, !dbg !6043
  store %struct.operand_entry* %6, %struct.operand_entry** %obj_, align 8, !dbg !6043
  %7 = load %struct.operand_entry**, %struct.operand_entry*** %slot_, align 8, !dbg !6043
  %8 = bitcast %struct.operand_entry** %7 to i8*, !dbg !6043
  %9 = load %struct.operand_entry**, %struct.operand_entry*** %slot_, align 8, !dbg !6043
  %add.ptr = getelementptr inbounds %struct.operand_entry*, %struct.operand_entry** %9, i64 1, !dbg !6043
  %10 = bitcast %struct.operand_entry** %add.ptr to i8*, !dbg !6043
  %11 = load %struct.VEC_operand_entry_t_base*, %struct.VEC_operand_entry_t_base** %vec_.addr, align 8, !dbg !6043
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %11, i32 0, i32 0, !dbg !6043
  %12 = load i32, i32* %num1, align 8, !dbg !6043
  %dec = add i32 %12, -1, !dbg !6043
  store i32 %dec, i32* %num1, align 8, !dbg !6043
  %13 = load i32, i32* %ix_.addr, align 4, !dbg !6043
  %sub = sub i32 %dec, %13, !dbg !6043
  %conv2 = zext i32 %sub to i64, !dbg !6043
  %mul = mul i64 %conv2, 8, !dbg !6043
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %mul, i1 false), !dbg !6043
  %14 = load %struct.operand_entry*, %struct.operand_entry** %obj_, align 8, !dbg !6043
  ret %struct.operand_entry* %14, !dbg !6043
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6047 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6050, metadata !DIExpression()), !dbg !6051
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6052, metadata !DIExpression()), !dbg !6053
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6054
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6056
  %1 = load i8*, i8** %popcount, align 8, !dbg !6056
  %tobool = icmp ne i8* %1, null, !dbg !6054
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6057

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6058, metadata !DIExpression()), !dbg !6060
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6061
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6061
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6061
  %div = udiv i32 %3, 64, !dbg !6061
  %idxprom = zext i32 %div to i64, !dbg !6061
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6061
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6061
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6061
  %rem = urem i32 %5, 64, !dbg !6061
  %sh_prom = zext i32 %rem to i64, !dbg !6061
  %shr = lshr i64 %4, %sh_prom, !dbg !6061
  %and = and i64 %shr, 1, !dbg !6061
  %conv = trunc i64 %and to i8, !dbg !6061
  store i8 %conv, i8* %oldbit, align 1, !dbg !6062
  %6 = load i8, i8* %oldbit, align 1, !dbg !6063
  %tobool1 = icmp ne i8 %6, 0, !dbg !6063
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6065

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6066
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6067
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6067
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6068
  %div4 = udiv i32 %9, 64, !dbg !6069
  %idxprom5 = zext i32 %div4 to i64, !dbg !6066
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6066
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6070
  %inc = add i8 %10, 1, !dbg !6070
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !6070
  br label %if.end, !dbg !6066

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6071

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6072
  %rem8 = urem i32 %11, 64, !dbg !6073
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6074
  %shl = shl i64 1, %sh_prom9, !dbg !6074
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6075
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6076
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6077
  %div11 = udiv i32 %13, 64, !dbg !6078
  %idxprom12 = zext i32 %div11 to i64, !dbg !6075
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6075
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6079
  %or = or i64 %14, %shl, !dbg !6079
  store i64 %or, i64* %arrayidx13, align 8, !dbg !6079
  ret void, !dbg !6080
}

declare dso_local i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @oecount_hash(i8* %p) #0 !dbg !6081 {
entry:
  %p.addr = alloca i8*, align 8
  %c = alloca %struct.oecount_s*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6082, metadata !DIExpression()), !dbg !6083
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c, metadata !6084, metadata !DIExpression()), !dbg !6085
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6086
  %tobool = icmp ne %struct.VEC_oecount_heap* %0, null, !dbg !6086
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6086

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6086
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %1, i32 0, i32 0, !dbg !6086
  br label %cond.end, !dbg !6086

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6086

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6086
  %2 = load i8*, i8** %p.addr, align 8, !dbg !6086
  %3 = ptrtoint i8* %2 to i64, !dbg !6086
  %sub = sub i64 %3, 42, !dbg !6086
  %conv = trunc i64 %sub to i32, !dbg !6086
  %call = call %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %cond, i32 %conv), !dbg !6086
  store %struct.oecount_s* %call, %struct.oecount_s** %c, align 8, !dbg !6085
  %4 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6087
  %5 = load %struct.oecount_s*, %struct.oecount_s** %c, align 8, !dbg !6088
  %op = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %5, i32 0, i32 2, !dbg !6089
  %6 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6089
  %7 = bitcast %union.tree_node* %6 to i8*, !dbg !6088
  %call1 = call i32 %4(i8* %7), !dbg !6087
  %8 = load %struct.oecount_s*, %struct.oecount_s** %c, align 8, !dbg !6090
  %oecode = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %8, i32 0, i32 1, !dbg !6091
  %9 = load i32, i32* %oecode, align 4, !dbg !6091
  %xor = xor i32 %call1, %9, !dbg !6092
  ret i32 %xor, !dbg !6093
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @oecount_eq(i8* %p1, i8* %p2) #0 !dbg !6094 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %c1 = alloca %struct.oecount_s*, align 8
  %c2 = alloca %struct.oecount_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6095, metadata !DIExpression()), !dbg !6096
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6097, metadata !DIExpression()), !dbg !6098
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c1, metadata !6099, metadata !DIExpression()), !dbg !6100
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6101
  %tobool = icmp ne %struct.VEC_oecount_heap* %0, null, !dbg !6101
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6101

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6101
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %1, i32 0, i32 0, !dbg !6101
  br label %cond.end, !dbg !6101

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6101

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6101
  %2 = load i8*, i8** %p1.addr, align 8, !dbg !6101
  %3 = ptrtoint i8* %2 to i64, !dbg !6101
  %sub = sub i64 %3, 42, !dbg !6101
  %conv = trunc i64 %sub to i32, !dbg !6101
  %call = call %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %cond, i32 %conv), !dbg !6101
  store %struct.oecount_s* %call, %struct.oecount_s** %c1, align 8, !dbg !6100
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c2, metadata !6102, metadata !DIExpression()), !dbg !6103
  %4 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6104
  %tobool1 = icmp ne %struct.VEC_oecount_heap* %4, null, !dbg !6104
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6104

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !6104
  %base3 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %5, i32 0, i32 0, !dbg !6104
  br label %cond.end5, !dbg !6104

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6104

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_oecount_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6104
  %6 = load i8*, i8** %p2.addr, align 8, !dbg !6104
  %7 = ptrtoint i8* %6 to i64, !dbg !6104
  %sub7 = sub i64 %7, 42, !dbg !6104
  %conv8 = trunc i64 %sub7 to i32, !dbg !6104
  %call9 = call %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %cond6, i32 %conv8), !dbg !6104
  store %struct.oecount_s* %call9, %struct.oecount_s** %c2, align 8, !dbg !6103
  %8 = load %struct.oecount_s*, %struct.oecount_s** %c1, align 8, !dbg !6105
  %oecode = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %8, i32 0, i32 1, !dbg !6106
  %9 = load i32, i32* %oecode, align 4, !dbg !6106
  %10 = load %struct.oecount_s*, %struct.oecount_s** %c2, align 8, !dbg !6107
  %oecode10 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %10, i32 0, i32 1, !dbg !6108
  %11 = load i32, i32* %oecode10, align 4, !dbg !6108
  %cmp = icmp eq i32 %9, %11, !dbg !6109
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6110

land.rhs:                                         ; preds = %cond.end5
  %12 = load %struct.oecount_s*, %struct.oecount_s** %c1, align 8, !dbg !6111
  %op = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %12, i32 0, i32 2, !dbg !6112
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6112
  %14 = load %struct.oecount_s*, %struct.oecount_s** %c2, align 8, !dbg !6113
  %op12 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %14, i32 0, i32 2, !dbg !6114
  %15 = load %union.tree_node*, %union.tree_node** %op12, align 8, !dbg !6114
  %cmp13 = icmp eq %union.tree_node* %13, %15, !dbg !6115
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end5
  %16 = phi i1 [ false, %cond.end5 ], [ %cmp13, %land.rhs ], !dbg !6116
  %land.ext = zext i1 %16 to i32, !dbg !6110
  ret i32 %land.ext, !dbg !6117
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_init(%struct.sbitmap_iterator* %i, %struct.simple_bitmap_def* %bmp, i32 %min) #0 !dbg !6118 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %bmp.addr = alloca %struct.simple_bitmap_def*, align 8
  %min.addr = alloca i32, align 4
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !6125, metadata !DIExpression()), !dbg !6126
  store %struct.simple_bitmap_def* %bmp, %struct.simple_bitmap_def** %bmp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %bmp.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  %0 = load i32, i32* %min.addr, align 4, !dbg !6131
  %div = udiv i32 %0, 64, !dbg !6132
  %1 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6133
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %1, i32 0, i32 2, !dbg !6134
  store i32 %div, i32* %word_num, align 4, !dbg !6135
  %2 = load i32, i32* %min.addr, align 4, !dbg !6136
  %3 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6137
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %3, i32 0, i32 3, !dbg !6138
  store i32 %2, i32* %bit_num, align 8, !dbg !6139
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !6140
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 2, !dbg !6141
  %5 = load i32, i32* %size, align 4, !dbg !6141
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6142
  %size1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !6143
  store i32 %5, i32* %size1, align 8, !dbg !6144
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !6145
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !6146
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 0, !dbg !6145
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6147
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 0, !dbg !6148
  store i64* %arraydecay, i64** %ptr, align 8, !dbg !6149
  %9 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6150
  %word_num2 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %9, i32 0, i32 2, !dbg !6152
  %10 = load i32, i32* %word_num2, align 4, !dbg !6152
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6153
  %size3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 1, !dbg !6154
  %12 = load i32, i32* %size3, align 8, !dbg !6154
  %cmp = icmp uge i32 %10, %12, !dbg !6155
  br i1 %cmp, label %if.then, label %if.else, !dbg !6156

if.then:                                          ; preds = %entry
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6157
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 4, !dbg !6158
  store i64 0, i64* %word, align 8, !dbg !6159
  br label %if.end, !dbg !6157

if.else:                                          ; preds = %entry
  %14 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6160
  %ptr4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %14, i32 0, i32 0, !dbg !6161
  %15 = load i64*, i64** %ptr4, align 8, !dbg !6161
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6162
  %word_num5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 2, !dbg !6163
  %17 = load i32, i32* %word_num5, align 4, !dbg !6163
  %idxprom = zext i32 %17 to i64, !dbg !6160
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %idxprom, !dbg !6160
  %18 = load i64, i64* %arrayidx, align 8, !dbg !6160
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6164
  %bit_num6 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !6165
  %20 = load i32, i32* %bit_num6, align 8, !dbg !6165
  %rem = urem i32 %20, 64, !dbg !6166
  %sh_prom = zext i32 %rem to i64, !dbg !6167
  %shr = lshr i64 %18, %sh_prom, !dbg !6167
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6168
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !6169
  store i64 %shr, i64* %word7, align 8, !dbg !6170
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6171
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %i, i32* %n) #0 !dbg !6172 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %n.addr = alloca i32*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !6176, metadata !DIExpression()), !dbg !6177
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !6178, metadata !DIExpression()), !dbg !6179
  br label %for.cond, !dbg !6180

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6181
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !6184
  %1 = load i64, i64* %word, align 8, !dbg !6184
  %cmp = icmp eq i64 %1, 0, !dbg !6185
  br i1 %cmp, label %for.body, label %for.end, !dbg !6186

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6187
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 2, !dbg !6189
  %3 = load i32, i32* %word_num, align 4, !dbg !6190
  %inc = add i32 %3, 1, !dbg !6190
  store i32 %inc, i32* %word_num, align 4, !dbg !6190
  %4 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6191
  %word_num1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %4, i32 0, i32 2, !dbg !6193
  %5 = load i32, i32* %word_num1, align 4, !dbg !6193
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6194
  %size = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !6195
  %7 = load i32, i32* %size, align 8, !dbg !6195
  %cmp2 = icmp uge i32 %5, %7, !dbg !6196
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6197

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6198
  br label %return, !dbg !6198

if.end:                                           ; preds = %for.body
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6199
  %word_num3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 2, !dbg !6200
  %9 = load i32, i32* %word_num3, align 4, !dbg !6200
  %mul = mul i32 %9, 64, !dbg !6201
  %10 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6202
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %10, i32 0, i32 3, !dbg !6203
  store i32 %mul, i32* %bit_num, align 8, !dbg !6204
  br label %for.inc, !dbg !6205

for.inc:                                          ; preds = %if.end
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6206
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 0, !dbg !6207
  %12 = load i64*, i64** %ptr, align 8, !dbg !6207
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6208
  %word_num4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 2, !dbg !6209
  %14 = load i32, i32* %word_num4, align 4, !dbg !6209
  %idxprom = zext i32 %14 to i64, !dbg !6206
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %idxprom, !dbg !6206
  %15 = load i64, i64* %arrayidx, align 8, !dbg !6206
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6210
  %word5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 4, !dbg !6211
  store i64 %15, i64* %word5, align 8, !dbg !6212
  br label %for.cond, !dbg !6213, !llvm.loop !6214

for.end:                                          ; preds = %for.cond
  br label %for.cond6, !dbg !6216

for.cond6:                                        ; preds = %for.inc12, %for.end
  %17 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6217
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %17, i32 0, i32 4, !dbg !6220
  %18 = load i64, i64* %word7, align 8, !dbg !6220
  %and = and i64 %18, 1, !dbg !6221
  %cmp8 = icmp eq i64 %and, 0, !dbg !6222
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !6223

for.body9:                                        ; preds = %for.cond6
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6224
  %bit_num10 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !6225
  %20 = load i32, i32* %bit_num10, align 8, !dbg !6226
  %inc11 = add i32 %20, 1, !dbg !6226
  store i32 %inc11, i32* %bit_num10, align 8, !dbg !6226
  br label %for.inc12, !dbg !6224

for.inc12:                                        ; preds = %for.body9
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6227
  %word13 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !6228
  %22 = load i64, i64* %word13, align 8, !dbg !6229
  %shr = lshr i64 %22, 1, !dbg !6229
  store i64 %shr, i64* %word13, align 8, !dbg !6229
  br label %for.cond6, !dbg !6230, !llvm.loop !6231

for.end14:                                        ; preds = %for.cond6
  %23 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6233
  %bit_num15 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %23, i32 0, i32 3, !dbg !6234
  %24 = load i32, i32* %bit_num15, align 8, !dbg !6234
  %25 = load i32*, i32** %n.addr, align 8, !dbg !6235
  store i32 %24, i32* %25, align 4, !dbg !6236
  store i8 1, i8* %retval, align 1, !dbg !6237
  br label %return, !dbg !6237

return:                                           ; preds = %for.end14, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !6238
  ret i8 %26, !dbg !6238
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.oecount_s* @VEC_oecount_heap_safe_push(%struct.VEC_oecount_heap** %vec_, %struct.oecount_s* %obj_) #0 !dbg !6239 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_heap**, align 8
  %obj_.addr = alloca %struct.oecount_s*, align 8
  store %struct.VEC_oecount_heap** %vec_, %struct.VEC_oecount_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_heap*** %vec_.addr, metadata !6243, metadata !DIExpression()), !dbg !6244
  store %struct.oecount_s* %obj_, %struct.oecount_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %obj_.addr, metadata !6245, metadata !DIExpression()), !dbg !6244
  %0 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6244
  %call = call i32 @VEC_oecount_heap_reserve(%struct.VEC_oecount_heap** %0, i32 1), !dbg !6244
  %1 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6244
  %2 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %1, align 8, !dbg !6244
  %tobool = icmp ne %struct.VEC_oecount_heap* %2, null, !dbg !6244
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6244

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6244
  %4 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %3, align 8, !dbg !6244
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %4, i32 0, i32 0, !dbg !6244
  br label %cond.end, !dbg !6244

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6244

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6244
  %5 = load %struct.oecount_s*, %struct.oecount_s** %obj_.addr, align 8, !dbg !6244
  %call1 = call %struct.oecount_s* @VEC_oecount_base_quick_push(%struct.VEC_oecount_base* %cond, %struct.oecount_s* %5), !dbg !6244
  ret %struct.oecount_s* %call1, !dbg !6244
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %vec_) #0 !dbg !6246 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6251, metadata !DIExpression()), !dbg !6252
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6252
  %tobool = icmp ne %struct.VEC_oecount_base* %0, null, !dbg !6252
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6252

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6252
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %1, i32 0, i32 0, !dbg !6252
  %2 = load i32, i32* %num, align 8, !dbg !6252
  br label %cond.end, !dbg !6252

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6252

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6252
  ret i32 %cond, !dbg !6252
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %vec_) #0 !dbg !6253 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6257, metadata !DIExpression()), !dbg !6258
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6258
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %0, i32 0, i32 0, !dbg !6258
  %1 = load i32, i32* %num, align 8, !dbg !6258
  %2 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6258
  %num1 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %2, i32 0, i32 0, !dbg !6258
  %3 = load i32, i32* %num1, align 8, !dbg !6258
  %dec = add i32 %3, -1, !dbg !6258
  store i32 %dec, i32* %num1, align 8, !dbg !6258
  ret void, !dbg !6258
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %vec_, i32 %ix_) #0 !dbg !6259 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6262, metadata !DIExpression()), !dbg !6263
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6264, metadata !DIExpression()), !dbg !6263
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6263
  %tobool = icmp ne %struct.VEC_oecount_base* %0, null, !dbg !6263
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6263

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6263
  %2 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6263
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %2, i32 0, i32 0, !dbg !6263
  %3 = load i32, i32* %num, align 8, !dbg !6263
  %cmp = icmp ult i32 %1, %3, !dbg !6263
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6265
  %land.ext = zext i1 %4 to i32, !dbg !6263
  %5 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6263
  %vec = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %5, i32 0, i32 2, !dbg !6263
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6263
  %idxprom = zext i32 %6 to i64, !dbg !6263
  %arrayidx = getelementptr inbounds [1 x %struct.oecount_s], [1 x %struct.oecount_s]* %vec, i64 0, i64 %idxprom, !dbg !6263
  ret %struct.oecount_s* %arrayidx, !dbg !6263
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_next(%struct.sbitmap_iterator* %i) #0 !dbg !6266 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !6269, metadata !DIExpression()), !dbg !6270
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6271
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !6272
  %1 = load i64, i64* %word, align 8, !dbg !6273
  %shr = lshr i64 %1, 1, !dbg !6273
  store i64 %shr, i64* %word, align 8, !dbg !6273
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !6274
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 3, !dbg !6275
  %3 = load i32, i32* %bit_num, align 8, !dbg !6276
  %inc = add i32 %3, 1, !dbg !6276
  store i32 %inc, i32* %bit_num, align 8, !dbg !6276
  ret void, !dbg !6277
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.oecount_s* @VEC_oecount_base_address(%struct.VEC_oecount_base* %vec_) #0 !dbg !6278 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6281, metadata !DIExpression()), !dbg !6282
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6282
  %tobool = icmp ne %struct.VEC_oecount_base* %0, null, !dbg !6282
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6282

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6282
  %vec = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %1, i32 0, i32 2, !dbg !6282
  %arraydecay = getelementptr inbounds [1 x %struct.oecount_s], [1 x %struct.oecount_s]* %vec, i64 0, i64 0, !dbg !6282
  br label %cond.end, !dbg !6282

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6282

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.oecount_s* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !6282
  ret %struct.oecount_s* %cond, !dbg !6282
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @oecount_cmp(i8* %p1, i8* %p2) #0 !dbg !6283 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %c1 = alloca %struct.oecount_s*, align 8
  %c2 = alloca %struct.oecount_s*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c1, metadata !6288, metadata !DIExpression()), !dbg !6289
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6290
  %1 = bitcast i8* %0 to %struct.oecount_s*, !dbg !6291
  store %struct.oecount_s* %1, %struct.oecount_s** %c1, align 8, !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %c2, metadata !6292, metadata !DIExpression()), !dbg !6293
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !6294
  %3 = bitcast i8* %2 to %struct.oecount_s*, !dbg !6295
  store %struct.oecount_s* %3, %struct.oecount_s** %c2, align 8, !dbg !6293
  %4 = load %struct.oecount_s*, %struct.oecount_s** %c1, align 8, !dbg !6296
  %cnt = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %4, i32 0, i32 0, !dbg !6297
  %5 = load i32, i32* %cnt, align 8, !dbg !6297
  %6 = load %struct.oecount_s*, %struct.oecount_s** %c2, align 8, !dbg !6298
  %cnt1 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %6, i32 0, i32 0, !dbg !6299
  %7 = load i32, i32* %cnt1, align 8, !dbg !6299
  %sub = sub nsw i32 %5, %7, !dbg !6300
  ret i32 %sub, !dbg !6301
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_oecount_base_iterate(%struct.VEC_oecount_base* %vec_, i32 %ix_, %struct.oecount_s** %ptr) #0 !dbg !6302 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.oecount_s**, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6306, metadata !DIExpression()), !dbg !6307
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6308, metadata !DIExpression()), !dbg !6307
  store %struct.oecount_s** %ptr, %struct.oecount_s*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oecount_s*** %ptr.addr, metadata !6309, metadata !DIExpression()), !dbg !6307
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6310
  %tobool = icmp ne %struct.VEC_oecount_base* %0, null, !dbg !6310
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6310

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6310
  %2 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6310
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %2, i32 0, i32 0, !dbg !6310
  %3 = load i32, i32* %num, align 8, !dbg !6310
  %cmp = icmp ult i32 %1, %3, !dbg !6310
  br i1 %cmp, label %if.then, label %if.else, !dbg !6307

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6312
  %vec = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %4, i32 0, i32 2, !dbg !6312
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6312
  %idxprom = zext i32 %5 to i64, !dbg !6312
  %arrayidx = getelementptr inbounds [1 x %struct.oecount_s], [1 x %struct.oecount_s]* %vec, i64 0, i64 %idxprom, !dbg !6312
  %6 = load %struct.oecount_s**, %struct.oecount_s*** %ptr.addr, align 8, !dbg !6312
  store %struct.oecount_s* %arrayidx, %struct.oecount_s** %6, align 8, !dbg !6312
  store i32 1, i32* %retval, align 4, !dbg !6312
  br label %return, !dbg !6312

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.oecount_s**, %struct.oecount_s*** %ptr.addr, align 8, !dbg !6314
  store %struct.oecount_s* null, %struct.oecount_s** %7, align 8, !dbg !6314
  store i32 0, i32* %retval, align 4, !dbg !6314
  br label %return, !dbg !6314

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !6307
  ret i32 %8, !dbg !6307
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.oecount_s* @VEC_oecount_base_last(%struct.VEC_oecount_base* %vec_) #0 !dbg !6316 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6317, metadata !DIExpression()), !dbg !6318
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6318
  %tobool = icmp ne %struct.VEC_oecount_base* %0, null, !dbg !6318
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6318

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6318
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %1, i32 0, i32 0, !dbg !6318
  %2 = load i32, i32* %num, align 8, !dbg !6318
  %tobool1 = icmp ne i32 %2, 0, !dbg !6318
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !6319
  %land.ext = zext i1 %3 to i32, !dbg !6318
  %4 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6318
  %vec = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %4, i32 0, i32 2, !dbg !6318
  %5 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6318
  %num2 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %5, i32 0, i32 0, !dbg !6318
  %6 = load i32, i32* %num2, align 8, !dbg !6318
  %sub = sub i32 %6, 1, !dbg !6318
  %idxprom = zext i32 %sub to i64, !dbg !6318
  %arrayidx = getelementptr inbounds [1 x %struct.oecount_s], [1 x %struct.oecount_s]* %vec, i64 0, i64 %idxprom, !dbg !6318
  ret %struct.oecount_s* %arrayidx, !dbg !6318
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @zero_one_operation(%union.tree_node** %def, i32 %opcode, %union.tree_node* %op) #0 !dbg !6320 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  %opcode.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6323, metadata !DIExpression()), !dbg !6324
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !6325, metadata !DIExpression()), !dbg !6326
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6327, metadata !DIExpression()), !dbg !6328
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6329, metadata !DIExpression()), !dbg !6330
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6331
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6331
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !6331
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6331
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6331
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt, align 8, !dbg !6330
  br label %do.body, !dbg !6332

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6333, metadata !DIExpression()), !dbg !6335
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6336
  %call = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !6337
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !6335
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6338
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !6340
  %5 = load i32, i32* %opcode.addr, align 4, !dbg !6341
  %cmp = icmp eq i32 %call1, %5, !dbg !6342
  br i1 %cmp, label %land.lhs.true, label %if.end19, !dbg !6343

land.lhs.true:                                    ; preds = %do.body
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6344
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6345
  %cmp2 = icmp eq %union.tree_node* %6, %7, !dbg !6346
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !6347

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6348
  %call3 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %8), !dbg !6349
  %9 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6350
  %cmp4 = icmp eq %union.tree_node* %call3, %9, !dbg !6351
  br i1 %cmp4, label %if.then, label %if.end19, !dbg !6352

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !6353, metadata !DIExpression()), !dbg !6355
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !6356, metadata !DIExpression()), !dbg !6357
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6358, metadata !DIExpression()), !dbg !6359
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6360
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6362
  %cmp5 = icmp eq %union.tree_node* %10, %11, !dbg !6363
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !6364

if.then6:                                         ; preds = %if.then
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6365
  %call7 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %12), !dbg !6366
  store %union.tree_node* %call7, %union.tree_node** %name, align 8, !dbg !6367
  br label %if.end, !dbg !6368

if.end:                                           ; preds = %if.then6, %if.then
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6369
  %call8 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %13), !dbg !6369
  %call9 = call zeroext i8 @has_single_use(%union.tree_node* %call8), !dbg !6369
  %tobool = icmp ne i8 %call9, 0, !dbg !6369
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6369

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 802, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6369
  br label %cond.end, !dbg !6369

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6369
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6370
  %call10 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %14), !dbg !6371
  %call11 = call zeroext i8 @single_imm_use(%union.tree_node* %call10, %struct.ssa_use_operand_d** %use, %union.gimple_statement_d** %use_stmt), !dbg !6372
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6373
  %call12 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %15), !dbg !6375
  %16 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6376
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !6377
  %cmp13 = icmp eq %union.tree_node* %call12, %17, !dbg !6378
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !6379

if.then14:                                        ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6380
  %19 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6381
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !dbg !6382
  br label %if.end15, !dbg !6383

if.end15:                                         ; preds = %if.then14, %cond.end
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !6384
  %21 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6384
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %20, %union.tree_node* %21), !dbg !6384
  %22 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6385
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6385
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !6385
  %bf.load = load i64, i64* %23, align 8, !dbg !6385
  %bf.clear = and i64 %bf.load, 65535, !dbg !6385
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6385
  %cmp16 = icmp ne i32 %bf.cast, 141, !dbg !6387
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !6388

if.then17:                                        ; preds = %if.end15
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6389
  call void @update_stmt(%union.gimple_statement_d* %24), !dbg !6390
  br label %if.end18, !dbg !6390

if.end18:                                         ; preds = %if.then17, %if.end15
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6391
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %25), !dbg !6392
  %26 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6392
  %27 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6392
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false), !dbg !6392
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !6393
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6394
  call void @release_defs(%union.gimple_statement_d* %28), !dbg !6395
  br label %do.end, !dbg !6396

if.end19:                                         ; preds = %lor.lhs.false, %do.body
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6397
  %30 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6397
  %cmp20 = icmp ne %union.tree_node* %29, %30, !dbg !6397
  br i1 %cmp20, label %land.lhs.true21, label %cond.true27, !dbg !6397

land.lhs.true21:                                  ; preds = %if.end19
  %31 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6397
  %base22 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6397
  %32 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6397
  %bf.load23 = load i64, i64* %32, align 8, !dbg !6397
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6397
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6397
  %cmp26 = icmp eq i32 %bf.cast25, 141, !dbg !6397
  br i1 %cmp26, label %cond.false28, label %cond.true27, !dbg !6397

cond.true27:                                      ; preds = %land.lhs.true21, %if.end19
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 817, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6397
  br label %cond.end29, !dbg !6397

cond.false28:                                     ; preds = %land.lhs.true21
  br label %cond.end29, !dbg !6397

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !6397
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6398
  %ssa_name31 = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !6398
  %def_stmt32 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name31, i32 0, i32 2, !dbg !6398
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt32, align 8, !dbg !6398
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %stmt, align 8, !dbg !6399
  br label %do.cond, !dbg !6400

do.cond:                                          ; preds = %cond.end29
  br i1 true, label %do.body, label %do.end, !dbg !6400, !llvm.loop !6401

do.end:                                           ; preds = %if.end18, %do.cond
  ret void, !dbg !6403
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %tmpvar, %union.tree_node* %op1, %union.tree_node* %op2, i32 %opcode) #0 !dbg !6404 {
entry:
  %tmpvar.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %opcode.addr = alloca i32, align 4
  %op1def = alloca %union.gimple_statement_d*, align 8
  %op2def = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %op = alloca %union.tree_node*, align 8
  %sum = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp39 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp45 = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp47 = alloca %struct.edge_iterator, align 8
  %tmp63 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp69 = alloca %struct.gimple_stmt_iterator, align 8
  %e71 = alloca %struct.edge_def*, align 8
  %ei72 = alloca %struct.edge_iterator, align 8
  %tmp73 = alloca %struct.edge_iterator, align 8
  store %union.tree_node* %tmpvar, %union.tree_node** %tmpvar.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmpvar.addr, metadata !6407, metadata !DIExpression()), !dbg !6408
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !6409, metadata !DIExpression()), !dbg !6410
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !6411, metadata !DIExpression()), !dbg !6412
  store i32 %opcode, i32* %opcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opcode.addr, metadata !6413, metadata !DIExpression()), !dbg !6414
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %op1def, metadata !6415, metadata !DIExpression()), !dbg !6416
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %op1def, align 8, !dbg !6416
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %op2def, metadata !6417, metadata !DIExpression()), !dbg !6418
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %op2def, align 8, !dbg !6418
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6419, metadata !DIExpression()), !dbg !6420
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6421, metadata !DIExpression()), !dbg !6422
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %sum, metadata !6423, metadata !DIExpression()), !dbg !6424
  %0 = load i32, i32* %opcode.addr, align 4, !dbg !6425
  %1 = load %union.tree_node*, %union.tree_node** %tmpvar.addr, align 8, !dbg !6425
  %2 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6425
  %3 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !6425
  %call = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %0, %union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !6425
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %sum, align 8, !dbg !6426
  %4 = load %union.tree_node*, %union.tree_node** %tmpvar.addr, align 8, !dbg !6427
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6428
  %call1 = call %union.tree_node* @make_ssa_name(%union.tree_node* %4, %union.gimple_statement_d* %5), !dbg !6429
  store %union.tree_node* %call1, %union.tree_node** %op, align 8, !dbg !6430
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6431
  %7 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6432
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %6, %union.tree_node* %7), !dbg !6433
  %8 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6434
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6434
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6434
  %bf.load = load i64, i64* %9, align 8, !dbg !6434
  %bf.clear = and i64 %bf.load, 65535, !dbg !6434
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6434
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6436
  br i1 %cmp, label %if.then, label %if.end, !dbg !6437

if.then:                                          ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !6438
  %ssa_name = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !6438
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6438
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6438
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %op1def, align 8, !dbg !6439
  br label %if.end, !dbg !6440

if.end:                                           ; preds = %if.then, %entry
  %12 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !6441
  %base2 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6441
  %13 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6441
  %bf.load3 = load i64, i64* %13, align 8, !dbg !6441
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6441
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6441
  %cmp6 = icmp eq i32 %bf.cast5, 141, !dbg !6443
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !6444

if.then7:                                         ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !6445
  %ssa_name8 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !6445
  %def_stmt9 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name8, i32 0, i32 2, !dbg !6445
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt9, align 8, !dbg !6445
  store %union.gimple_statement_d* %15, %union.gimple_statement_d** %op2def, align 8, !dbg !6446
  br label %if.end10, !dbg !6447

if.end10:                                         ; preds = %if.then7, %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6448
  %tobool = icmp ne %union.gimple_statement_d* %16, null, !dbg !6448
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !6450

lor.lhs.false:                                    ; preds = %if.end10
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6451
  %call11 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %17), !dbg !6452
  %conv = zext i8 %call11 to i32, !dbg !6452
  %tobool12 = icmp ne i32 %conv, 0, !dbg !6452
  br i1 %tobool12, label %land.lhs.true, label %if.else, !dbg !6453

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end10
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6454
  %tobool13 = icmp ne %union.gimple_statement_d* %18, null, !dbg !6454
  br i1 %tobool13, label %lor.lhs.false14, label %if.then18, !dbg !6455

lor.lhs.false14:                                  ; preds = %land.lhs.true
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6456
  %call15 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %19), !dbg !6457
  %conv16 = zext i8 %call15 to i32, !dbg !6457
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !6457
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !6458

if.then18:                                        ; preds = %lor.lhs.false14, %land.lhs.true
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6459
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !6459
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6459
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6459
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 0, !dbg !6459
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6459
  %call19 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %22), !dbg !6461
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %call19), !dbg !6462
  %23 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6462
  %24 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6462
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false), !dbg !6462
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6463
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %25, i32 0), !dbg !6464
  br label %if.end92, !dbg !6465

if.else:                                          ; preds = %lor.lhs.false14, %lor.lhs.false
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6466
  %tobool20 = icmp ne %union.gimple_statement_d* %26, null, !dbg !6466
  br i1 %tobool20, label %lor.lhs.false21, label %if.then34, !dbg !6468

lor.lhs.false21:                                  ; preds = %if.else
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6469
  %call22 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %27), !dbg !6470
  %conv23 = zext i8 %call22 to i32, !dbg !6470
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !6470
  br i1 %tobool24, label %if.then34, label %lor.lhs.false25, !dbg !6471

lor.lhs.false25:                                  ; preds = %lor.lhs.false21
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6472
  %tobool26 = icmp ne %union.gimple_statement_d* %28, null, !dbg !6472
  br i1 %tobool26, label %land.lhs.true27, label %if.else58, !dbg !6473

land.lhs.true27:                                  ; preds = %lor.lhs.false25
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6474
  %call28 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %29), !dbg !6475
  %tobool29 = icmp ne i8 %call28, 0, !dbg !6475
  br i1 %tobool29, label %if.else58, label %land.lhs.true30, !dbg !6476

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6477
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6478
  %call31 = call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %30, %union.gimple_statement_d* %31), !dbg !6479
  %conv32 = zext i8 %call31 to i32, !dbg !6479
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !6479
  br i1 %tobool33, label %if.then34, label %if.else58, !dbg !6480

if.then34:                                        ; preds = %land.lhs.true30, %lor.lhs.false21, %if.else
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6481
  %call35 = call i32 @gimple_code(%union.gimple_statement_d* %32), !dbg !6484
  %cmp36 = icmp eq i32 %call35, 16, !dbg !6485
  br i1 %cmp36, label %if.then38, label %if.else41, !dbg !6486

if.then38:                                        ; preds = %if.then34
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6487
  %call40 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %33), !dbg !6489
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp39, %struct.basic_block_def* %call40), !dbg !6490
  %34 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6490
  %35 = bitcast %struct.gimple_stmt_iterator* %tmp39 to i8*, !dbg !6490
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 24, i1 false), !dbg !6490
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6491
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %36, i32 0), !dbg !6492
  br label %if.end57, !dbg !6493

if.else41:                                        ; preds = %if.then34
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6494
  %call42 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %37), !dbg !6497
  %tobool43 = icmp ne i8 %call42, 0, !dbg !6497
  br i1 %tobool43, label %if.else46, label %if.then44, !dbg !6498

if.then44:                                        ; preds = %if.else41
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6499
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp45, %union.gimple_statement_d* %38), !dbg !6501
  %39 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6501
  %40 = bitcast %struct.gimple_stmt_iterator* %tmp45 to i8*, !dbg !6501
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false), !dbg !6501
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6502
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %41, i32 0), !dbg !6503
  br label %if.end56, !dbg !6504

if.else46:                                        ; preds = %if.else41
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6505, metadata !DIExpression()), !dbg !6507
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6508, metadata !DIExpression()), !dbg !6515
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op2def, align 8, !dbg !6516
  %call48 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %42), !dbg !6516
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call48, i32 0, i32 1, !dbg !6516
  %call49 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6516
  %43 = bitcast %struct.edge_iterator* %tmp47 to { i32, %struct.VEC_edge_gc** }*, !dbg !6516
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !6516
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call49, 0, !dbg !6516
  store i32 %45, i32* %44, align 8, !dbg !6516
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !6516
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call49, 1, !dbg !6516
  store %struct.VEC_edge_gc** %47, %struct.VEC_edge_gc*** %46, align 8, !dbg !6516
  %48 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6516
  %49 = bitcast %struct.edge_iterator* %tmp47 to i8*, !dbg !6516
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !6516
  br label %for.cond, !dbg !6516

for.cond:                                         ; preds = %for.inc, %if.else46
  %50 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6518
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !6518
  %52 = load i32, i32* %51, align 8, !dbg !6518
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !6518
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !6518
  %call50 = call zeroext i8 @ei_cond(i32 %52, %struct.VEC_edge_gc** %54, %struct.edge_def** %e), !dbg !6518
  %tobool51 = icmp ne i8 %call50, 0, !dbg !6516
  br i1 %tobool51, label %for.body, label %for.end, !dbg !6516

for.body:                                         ; preds = %for.cond
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6520
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 7, !dbg !6522
  %56 = load i32, i32* %flags, align 8, !dbg !6522
  %and = and i32 %56, 1, !dbg !6523
  %tobool52 = icmp ne i32 %and, 0, !dbg !6523
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !6524

if.then53:                                        ; preds = %for.body
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6525
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6526
  %call54 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %57, %union.gimple_statement_d* %58), !dbg !6527
  br label %if.end55, !dbg !6527

if.end55:                                         ; preds = %if.then53, %for.body
  br label %for.inc, !dbg !6528

for.inc:                                          ; preds = %if.end55
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6518
  br label %for.cond, !dbg !6518, !llvm.loop !6529

for.end:                                          ; preds = %for.cond
  br label %if.end56

if.end56:                                         ; preds = %for.end, %if.then44
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then38
  br label %if.end91, !dbg !6531

if.else58:                                        ; preds = %land.lhs.true30, %land.lhs.true27, %lor.lhs.false25
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6532
  %call59 = call i32 @gimple_code(%union.gimple_statement_d* %59), !dbg !6535
  %cmp60 = icmp eq i32 %call59, 16, !dbg !6536
  br i1 %cmp60, label %if.then62, label %if.else65, !dbg !6537

if.then62:                                        ; preds = %if.else58
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6538
  %call64 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %60), !dbg !6540
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp63, %struct.basic_block_def* %call64), !dbg !6541
  %61 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6541
  %62 = bitcast %struct.gimple_stmt_iterator* %tmp63 to i8*, !dbg !6541
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false), !dbg !6541
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6542
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %63, i32 0), !dbg !6543
  br label %if.end90, !dbg !6544

if.else65:                                        ; preds = %if.else58
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6545
  %call66 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %64), !dbg !6548
  %tobool67 = icmp ne i8 %call66, 0, !dbg !6548
  br i1 %tobool67, label %if.else70, label %if.then68, !dbg !6549

if.then68:                                        ; preds = %if.else65
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6550
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp69, %union.gimple_statement_d* %65), !dbg !6552
  %66 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6552
  %67 = bitcast %struct.gimple_stmt_iterator* %tmp69 to i8*, !dbg !6552
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false), !dbg !6552
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6553
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %68, i32 0), !dbg !6554
  br label %if.end89, !dbg !6555

if.else70:                                        ; preds = %if.else65
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e71, metadata !6556, metadata !DIExpression()), !dbg !6558
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei72, metadata !6559, metadata !DIExpression()), !dbg !6560
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %op1def, align 8, !dbg !6561
  %call74 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %69), !dbg !6561
  %succs75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call74, i32 0, i32 1, !dbg !6561
  %call76 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs75), !dbg !6561
  %70 = bitcast %struct.edge_iterator* %tmp73 to { i32, %struct.VEC_edge_gc** }*, !dbg !6561
  %71 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 0, !dbg !6561
  %72 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 0, !dbg !6561
  store i32 %72, i32* %71, align 8, !dbg !6561
  %73 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 1, !dbg !6561
  %74 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 1, !dbg !6561
  store %struct.VEC_edge_gc** %74, %struct.VEC_edge_gc*** %73, align 8, !dbg !6561
  %75 = bitcast %struct.edge_iterator* %ei72 to i8*, !dbg !6561
  %76 = bitcast %struct.edge_iterator* %tmp73 to i8*, !dbg !6561
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false), !dbg !6561
  br label %for.cond77, !dbg !6561

for.cond77:                                       ; preds = %for.inc87, %if.else70
  %77 = bitcast %struct.edge_iterator* %ei72 to { i32, %struct.VEC_edge_gc** }*, !dbg !6563
  %78 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 0, !dbg !6563
  %79 = load i32, i32* %78, align 8, !dbg !6563
  %80 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 1, !dbg !6563
  %81 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %80, align 8, !dbg !6563
  %call78 = call zeroext i8 @ei_cond(i32 %79, %struct.VEC_edge_gc** %81, %struct.edge_def** %e71), !dbg !6563
  %tobool79 = icmp ne i8 %call78, 0, !dbg !6561
  br i1 %tobool79, label %for.body80, label %for.end88, !dbg !6561

for.body80:                                       ; preds = %for.cond77
  %82 = load %struct.edge_def*, %struct.edge_def** %e71, align 8, !dbg !6565
  %flags81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 7, !dbg !6567
  %83 = load i32, i32* %flags81, align 8, !dbg !6567
  %and82 = and i32 %83, 1, !dbg !6568
  %tobool83 = icmp ne i32 %and82, 0, !dbg !6568
  br i1 %tobool83, label %if.then84, label %if.end86, !dbg !6569

if.then84:                                        ; preds = %for.body80
  %84 = load %struct.edge_def*, %struct.edge_def** %e71, align 8, !dbg !6570
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6571
  %call85 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %84, %union.gimple_statement_d* %85), !dbg !6572
  br label %if.end86, !dbg !6572

if.end86:                                         ; preds = %if.then84, %for.body80
  br label %for.inc87, !dbg !6573

for.inc87:                                        ; preds = %if.end86
  call void @ei_next(%struct.edge_iterator* %ei72), !dbg !6563
  br label %for.cond77, !dbg !6563, !llvm.loop !6574

for.end88:                                        ; preds = %for.cond77
  br label %if.end89

if.end89:                                         ; preds = %for.end88, %if.then68
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then62
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end57
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then18
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6576
  call void @update_stmt(%union.gimple_statement_d* %86), !dbg !6577
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %sum, align 8, !dbg !6578
  ret %union.gimple_statement_d* %87, !dbg !6579
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_oecount_heap_free(%struct.VEC_oecount_heap** %vec_) #0 !dbg !6580 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_heap**, align 8
  store %struct.VEC_oecount_heap** %vec_, %struct.VEC_oecount_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_heap*** %vec_.addr, metadata !6583, metadata !DIExpression()), !dbg !6584
  %0 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6585
  %1 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %0, align 8, !dbg !6585
  %tobool = icmp ne %struct.VEC_oecount_heap* %1, null, !dbg !6585
  br i1 %tobool, label %if.then, label %if.end, !dbg !6584

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6585
  %3 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %2, align 8, !dbg !6585
  %4 = bitcast %struct.VEC_oecount_heap* %3 to i8*, !dbg !6585
  call void @free(i8* %4), !dbg !6585
  br label %if.end, !dbg !6585

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6584
  store %struct.VEC_oecount_heap* null, %struct.VEC_oecount_heap** %5, align 8, !dbg !6584
  ret void, !dbg !6584
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_oecount_heap_reserve(%struct.VEC_oecount_heap** %vec_, i32 %alloc_) #0 !dbg !6587 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_oecount_heap** %vec_, %struct.VEC_oecount_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_heap*** %vec_.addr, metadata !6590, metadata !DIExpression()), !dbg !6591
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6592, metadata !DIExpression()), !dbg !6591
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6593, metadata !DIExpression()), !dbg !6591
  %0 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6591
  %1 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %0, align 8, !dbg !6591
  %tobool = icmp ne %struct.VEC_oecount_heap* %1, null, !dbg !6591
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6591

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6591
  %3 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %2, align 8, !dbg !6591
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %3, i32 0, i32 0, !dbg !6591
  br label %cond.end, !dbg !6591

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6591

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6591
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6591
  %call = call i32 @VEC_oecount_base_space(%struct.VEC_oecount_base* %cond, i32 %4), !dbg !6591
  %tobool1 = icmp ne i32 %call, 0, !dbg !6591
  %lnot = xor i1 %tobool1, true, !dbg !6591
  %lnot.ext = zext i1 %lnot to i32, !dbg !6591
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6591
  %5 = load i32, i32* %extend, align 4, !dbg !6594
  %tobool2 = icmp ne i32 %5, 0, !dbg !6594
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6591

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6594
  %7 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** %6, align 8, !dbg !6594
  %8 = bitcast %struct.VEC_oecount_heap* %7 to i8*, !dbg !6594
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6594
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !6594
  %10 = bitcast i8* %call3 to %struct.VEC_oecount_heap*, !dbg !6594
  %11 = load %struct.VEC_oecount_heap**, %struct.VEC_oecount_heap*** %vec_.addr, align 8, !dbg !6594
  store %struct.VEC_oecount_heap* %10, %struct.VEC_oecount_heap** %11, align 8, !dbg !6594
  br label %if.end, !dbg !6594

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6591
  ret i32 %12, !dbg !6591
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.oecount_s* @VEC_oecount_base_quick_push(%struct.VEC_oecount_base* %vec_, %struct.oecount_s* %obj_) #0 !dbg !6596 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  %obj_.addr = alloca %struct.oecount_s*, align 8
  %slot_ = alloca %struct.oecount_s*, align 8
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6599, metadata !DIExpression()), !dbg !6600
  store %struct.oecount_s* %obj_, %struct.oecount_s** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %obj_.addr, metadata !6601, metadata !DIExpression()), !dbg !6600
  call void @llvm.dbg.declare(metadata %struct.oecount_s** %slot_, metadata !6602, metadata !DIExpression()), !dbg !6600
  %0 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6600
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %0, i32 0, i32 0, !dbg !6600
  %1 = load i32, i32* %num, align 8, !dbg !6600
  %2 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6600
  %alloc = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %2, i32 0, i32 1, !dbg !6600
  %3 = load i32, i32* %alloc, align 4, !dbg !6600
  %cmp = icmp ult i32 %1, %3, !dbg !6600
  %conv = zext i1 %cmp to i32, !dbg !6600
  %4 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6600
  %vec = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %4, i32 0, i32 2, !dbg !6600
  %5 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6600
  %num1 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %5, i32 0, i32 0, !dbg !6600
  %6 = load i32, i32* %num1, align 8, !dbg !6600
  %inc = add i32 %6, 1, !dbg !6600
  store i32 %inc, i32* %num1, align 8, !dbg !6600
  %idxprom = zext i32 %6 to i64, !dbg !6600
  %arrayidx = getelementptr inbounds [1 x %struct.oecount_s], [1 x %struct.oecount_s]* %vec, i64 0, i64 %idxprom, !dbg !6600
  store %struct.oecount_s* %arrayidx, %struct.oecount_s** %slot_, align 8, !dbg !6600
  %7 = load %struct.oecount_s*, %struct.oecount_s** %obj_.addr, align 8, !dbg !6603
  %tobool = icmp ne %struct.oecount_s* %7, null, !dbg !6603
  br i1 %tobool, label %if.then, label %if.end, !dbg !6600

if.then:                                          ; preds = %entry
  %8 = load %struct.oecount_s*, %struct.oecount_s** %slot_, align 8, !dbg !6603
  %9 = load %struct.oecount_s*, %struct.oecount_s** %obj_.addr, align 8, !dbg !6603
  %10 = bitcast %struct.oecount_s* %8 to i8*, !dbg !6603
  %11 = bitcast %struct.oecount_s* %9 to i8*, !dbg !6603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !6603
  br label %if.end, !dbg !6603

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.oecount_s*, %struct.oecount_s** %slot_, align 8, !dbg !6600
  ret %struct.oecount_s* %12, !dbg !6600
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_oecount_base_space(%struct.VEC_oecount_base* %vec_, i32 %alloc_) #0 !dbg !6605 {
entry:
  %vec_.addr = alloca %struct.VEC_oecount_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_oecount_base* %vec_, %struct.VEC_oecount_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_oecount_base** %vec_.addr, metadata !6608, metadata !DIExpression()), !dbg !6609
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6610, metadata !DIExpression()), !dbg !6609
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6609
  %cmp = icmp sge i32 %0, 0, !dbg !6609
  %conv = zext i1 %cmp to i32, !dbg !6609
  %1 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6609
  %tobool = icmp ne %struct.VEC_oecount_base* %1, null, !dbg !6609
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6609

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6609
  %alloc = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %2, i32 0, i32 1, !dbg !6609
  %3 = load i32, i32* %alloc, align 4, !dbg !6609
  %4 = load %struct.VEC_oecount_base*, %struct.VEC_oecount_base** %vec_.addr, align 8, !dbg !6609
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %4, i32 0, i32 0, !dbg !6609
  %5 = load i32, i32* %num, align 8, !dbg !6609
  %sub = sub i32 %3, %5, !dbg !6609
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6609
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6609
  %conv2 = zext i1 %cmp1 to i32, !dbg !6609
  br label %cond.end, !dbg !6609

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6609
  %tobool3 = icmp ne i32 %7, 0, !dbg !6609
  %lnot = xor i1 %tobool3, true, !dbg !6609
  %lnot.ext = zext i1 %lnot to i32, !dbg !6609
  br label %cond.end, !dbg !6609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6609
  ret i32 %cond, !dbg !6609
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !6611 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6614, metadata !DIExpression()), !dbg !6615
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6618
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !6619
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6620
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6621
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !6622
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6622
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !6623
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6624
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6625
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !6626
  ret void, !dbg !6627
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !6628 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6631, metadata !DIExpression()), !dbg !6632
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6633
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !6635
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6635
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !6636
  br i1 %cmp, label %if.then, label %if.end, !dbg !6637

if.then:                                          ; preds = %entry
  br label %return, !dbg !6638

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6639
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6640
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6640
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6641
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !6642
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !6642
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6643
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6644
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6645
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !6646
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6646
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6647
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !6648
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6648
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !6649
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !6650
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6651
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !6652
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !6653
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6654
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !6655
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !6656
  br label %return, !dbg !6657

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6657
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !6658 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6661, metadata !DIExpression()), !dbg !6662
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !6663, metadata !DIExpression()), !dbg !6664
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !6665, metadata !DIExpression()), !dbg !6666
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6667
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6667
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6669

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6670
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6670
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6670
  %bf.load = load i64, i64* %2, align 8, !dbg !6670
  %bf.clear = and i64 %bf.load, 65535, !dbg !6670
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6670
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6671
  br i1 %cmp, label %if.then, label %if.else, !dbg !6672

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6673
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !6674
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6675
  br label %if.end, !dbg !6673

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !6676
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !6676
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6676
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !6678
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6679
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !6680
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !6681
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6682
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !6683 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !6686, metadata !DIExpression()), !dbg !6687
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !6688, metadata !DIExpression()), !dbg !6689
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6690
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6691
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !6692
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6693
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6694
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6695
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6695
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6696
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !6697
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !6698
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6699
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6700
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !6701
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !6701
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !6702
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !6703
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !6704
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !6705
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !6706
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !6707
  ret void, !dbg !6708
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !6709 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6712, metadata !DIExpression()), !dbg !6713
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6714, metadata !DIExpression()), !dbg !6715
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6716
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6716
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6717
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6718
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !6719
  ret %union.tree_node* %call, !dbg !6720
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6721 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6722, metadata !DIExpression()), !dbg !6723
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6724, metadata !DIExpression()), !dbg !6725
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6726
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6727
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6728
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6729
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6729
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6731

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6732
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6732
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6732
  %bf.load = load i64, i64* %4, align 8, !dbg !6732
  %bf.clear = and i64 %bf.load, 65535, !dbg !6732
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6732
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6733
  br i1 %cmp, label %if.then, label %if.end, !dbg !6734

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6735
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6736
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6736
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6736
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6737
  br label %if.end, !dbg !6736

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6738
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !6739 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6742
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6743
  %cmp = icmp eq i32 %call, 18, !dbg !6744
  %conv = zext i1 %cmp to i32, !dbg !6744
  %conv1 = trunc i32 %conv to i8, !dbg !6743
  ret i8 %conv1, !dbg !6745
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6746 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6749, metadata !DIExpression()), !dbg !6750
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6751
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !6752
  br label %while.cond, !dbg !6753

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6754
  %tobool = icmp ne i8 %call, 0, !dbg !6754
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6755

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6756
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !6757
  %cmp = icmp eq i32 %call2, 4, !dbg !6758
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !6759
  br i1 %1, label %while.body, label %while.end, !dbg !6753

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !6760
  br label %while.cond, !dbg !6753, !llvm.loop !6761

while.end:                                        ; preds = %land.end
  ret void, !dbg !6763
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !6764 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6767, metadata !DIExpression()), !dbg !6768
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6769
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !6770
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !6771
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6771
  ret %struct.basic_block_def* %1, !dbg !6772
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6773 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6776, metadata !DIExpression()), !dbg !6777
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6778, metadata !DIExpression()), !dbg !6779
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6780
  store i32 0, i32* %index, align 8, !dbg !6781
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6782
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6783
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6784
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6785
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6785
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6785
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6786 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6790, metadata !DIExpression()), !dbg !6791
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6794
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6794
  %5 = load i32, i32* %4, align 8, !dbg !6794
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6794
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6794
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6794
  %tobool = icmp ne i8 %call, 0, !dbg !6794
  br i1 %tobool, label %if.else, label %if.then, !dbg !6796

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6797
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6797
  %10 = load i32, i32* %9, align 8, !dbg !6797
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6797
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6797
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6797
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6799
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6800
  store i8 1, i8* %retval, align 1, !dbg !6801
  br label %return, !dbg !6801

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6802
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6804
  store i8 0, i8* %retval, align 1, !dbg !6805
  br label %return, !dbg !6805

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6806
  ret i8 %15, !dbg !6806
}

declare dso_local %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6807 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6811, metadata !DIExpression()), !dbg !6812
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6813
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6813
  %1 = load i32, i32* %index, align 8, !dbg !6813
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6813
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6813
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6813
  %5 = load i32, i32* %4, align 8, !dbg !6813
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6813
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6813
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6813
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6813
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6813

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6813
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6813
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6813
  %11 = load i32, i32* %10, align 8, !dbg !6813
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6813
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6813
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6813
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6813
  br label %cond.end, !dbg !6813

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6813

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6813
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6813
  %cmp = icmp ult i32 %1, %call2, !dbg !6813
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6813

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6813
  br label %cond.end5, !dbg !6813

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6813

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6813
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6814
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6815
  %15 = load i32, i32* %index7, align 8, !dbg !6816
  %inc = add i32 %15, 1, !dbg !6816
  store i32 %inc, i32* %index7, align 8, !dbg !6816
  ret void, !dbg !6817
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6818 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6821, metadata !DIExpression()), !dbg !6822
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6823
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6823
  %tobool = icmp ne i8 %call, 0, !dbg !6823
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6823

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6823
  br label %cond.end, !dbg !6823

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6823

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6823
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6824
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6824
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6824
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6824
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6824

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6824
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6824
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6824
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6824
  br label %cond.end5, !dbg !6824

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6824

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6824
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6824
  ret %struct.edge_def* %call7, !dbg !6825
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6826 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6831
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6831
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6831
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6831
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6831

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6831
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6831
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6831
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6831
  br label %cond.end, !dbg !6831

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6831

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6831
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6831
  %cmp = icmp eq i32 %call, 1, !dbg !6832
  %conv = zext i1 %cmp to i32, !dbg !6832
  %conv2 = trunc i32 %conv to i8, !dbg !6831
  ret i8 %conv2, !dbg !6833
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6834 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6839, metadata !DIExpression()), !dbg !6840
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6841, metadata !DIExpression()), !dbg !6840
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6840
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6840
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6840

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6840
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6840
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6840
  %3 = load i32, i32* %num, align 8, !dbg !6840
  %cmp = icmp ult i32 %1, %3, !dbg !6840
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6842
  %land.ext = zext i1 %4 to i32, !dbg !6840
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6840
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6840
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6840
  %idxprom = zext i32 %6 to i64, !dbg !6840
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6840
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6840
  ret %struct.edge_def* %7, !dbg !6840
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6843 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6846, metadata !DIExpression()), !dbg !6847
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6847
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6847
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6847

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6847
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6847
  %2 = load i32, i32* %num, align 8, !dbg !6847
  br label %cond.end, !dbg !6847

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6847

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6847
  ret i32 %cond, !dbg !6847
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6848 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6851, metadata !DIExpression()), !dbg !6852
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6853
  %3 = load i32, i32* %index, align 8, !dbg !6853
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6854
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6854
  %6 = load i32, i32* %5, align 8, !dbg !6854
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6854
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6854
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6854
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6854
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6854

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6854
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6854
  %11 = load i32, i32* %10, align 8, !dbg !6854
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6854
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6854
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6854
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6854
  br label %cond.end, !dbg !6854

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6854
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6854
  %cmp = icmp eq i32 %3, %call2, !dbg !6855
  %conv = zext i1 %cmp to i32, !dbg !6855
  %conv3 = trunc i32 %conv to i8, !dbg !6856
  ret i8 %conv3, !dbg !6857
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6858 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6861, metadata !DIExpression()), !dbg !6862
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6863
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6863
  %5 = load i32, i32* %4, align 8, !dbg !6863
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6863
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6863
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6863
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6863
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6863

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6863
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6863
  %10 = load i32, i32* %9, align 8, !dbg !6863
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6863
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6863
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6863
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6863
  br label %cond.end, !dbg !6863

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6863

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6863
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6863
  %13 = load i32, i32* %index, align 8, !dbg !6863
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6863
  ret %struct.edge_def* %call2, !dbg !6864
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6865 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6868, metadata !DIExpression()), !dbg !6869
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6870
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6870
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6870
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6870

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6870
  br label %cond.end, !dbg !6870

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6870
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6871
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6871
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6872
  ret %struct.VEC_edge_gc* %5, !dbg !6873
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %operand) #0 !dbg !6874 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %operand.addr = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %arg_p = alloca %struct.ssa_use_operand_d*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6877, metadata !DIExpression()), !dbg !6878
  store %union.tree_node* %operand, %union.tree_node** %operand.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %operand.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6881, metadata !DIExpression()), !dbg !6882
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6883, metadata !DIExpression()), !dbg !6884
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %arg_p, metadata !6885, metadata !DIExpression()), !dbg !6886
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !6887, metadata !DIExpression()), !dbg !6900
  %0 = load %union.tree_node*, %union.tree_node** %operand.addr, align 8, !dbg !6901
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6901
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6901
  %bf.load = load i64, i64* %1, align 8, !dbg !6901
  %bf.clear = and i64 %bf.load, 65535, !dbg !6901
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6901
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6903
  br i1 %cmp, label %if.then, label %if.end, !dbg !6904

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6905
  br label %return, !dbg !6905

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6906
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !6907
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !6908
  %3 = load %union.tree_node*, %union.tree_node** %operand.addr, align 8, !dbg !6909
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6909
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6909
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6909
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6910
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6911
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6913
  %cmp3 = icmp ne i32 %call2, 16, !dbg !6914
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6915

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6916
  br label %return, !dbg !6916

if.end5:                                          ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6917
  %call6 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %6, i32 1), !dbg !6917
  store %struct.ssa_use_operand_d* %call6, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6917
  br label %for.cond, !dbg !6917

for.cond:                                         ; preds = %for.inc, %if.end5
  %call7 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !6919
  %tobool = icmp ne i8 %call7, 0, !dbg !6919
  %lnot = xor i1 %tobool, true, !dbg !6919
  br i1 %lnot, label %for.body, label %for.end, !dbg !6917

for.body:                                         ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6921
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6923
  %call8 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %8), !dbg !6923
  %cmp9 = icmp eq %union.tree_node* %7, %call8, !dbg !6924
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !6925

if.then10:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !6926
  br label %return, !dbg !6926

if.end11:                                         ; preds = %for.body
  br label %for.inc, !dbg !6923

for.inc:                                          ; preds = %if.end11
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %i), !dbg !6919
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !6919
  br label %for.cond, !dbg !6919, !llvm.loop !6927

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6929
  br label %return, !dbg !6929

return:                                           ; preds = %for.end, %if.then10, %if.then4, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !6930
  ret i8 %9, !dbg !6930
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6931 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6935, metadata !DIExpression()), !dbg !6936
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6937, metadata !DIExpression()), !dbg !6938
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6941, metadata !DIExpression()), !dbg !6942
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6943
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6944
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6942
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6945, metadata !DIExpression()), !dbg !6946
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6947
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6948
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6949
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6950
  store i8 0, i8* %done, align 8, !dbg !6951
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6952
  %and = and i32 %3, 5, !dbg !6952
  %cmp = icmp ne i32 %and, 0, !dbg !6952
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6952

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6952
  br label %cond.end, !dbg !6952

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6952

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6952
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6953
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6954
  %conv = zext i8 %call1 to i32, !dbg !6954
  %tobool = icmp ne i32 %conv, 0, !dbg !6954
  %5 = zext i1 %tobool to i64, !dbg !6954
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6954
  store i32 %cond2, i32* %comp, align 4, !dbg !6955
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6956
  %7 = load i32, i32* %comp, align 4, !dbg !6958
  %and3 = and i32 %6, %7, !dbg !6959
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6960
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6961

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6962
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6964
  store i8 1, i8* %done6, align 8, !dbg !6965
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6966
  br label %return, !dbg !6966

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6967
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6968
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6969
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6970
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6971
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6972
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6973
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6974
  store i32 %call7, i32* %num_phi, align 4, !dbg !6975
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6976
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6977
  store i32 2, i32* %iter_type, align 4, !dbg !6978
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6979
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6980
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6981
  br label %return, !dbg !6981

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6982
  ret %struct.ssa_use_operand_d* %15, !dbg !6982
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6983 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6988, metadata !DIExpression()), !dbg !6989
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6990
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6991
  %1 = load i8, i8* %done, align 8, !dbg !6991
  ret i8 %1, !dbg !6992
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6993 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6998
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6999
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6999
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !7000
  ret %union.tree_node* %2, !dbg !7001
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7002 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7007, metadata !DIExpression()), !dbg !7008
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7009
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7011
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7011
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7009
  br i1 %tobool, label %if.then, label %if.end, !dbg !7012

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7013
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7013
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7013
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7013
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7015
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7016
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7017
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7017
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7018
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7018
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7019
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7020
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7021
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7022
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7023
  br label %return, !dbg !7023

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7024
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !7026
  %10 = load i32, i32* %phi_i, align 8, !dbg !7026
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7027
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !7028
  %12 = load i32, i32* %num_phi, align 4, !dbg !7028
  %cmp = icmp slt i32 %10, %12, !dbg !7029
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7030

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7031
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !7031
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7031
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7031
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !7031
  %16 = load i32, i32* %phi_i5, align 8, !dbg !7031
  %inc = add nsw i32 %16, 1, !dbg !7031
  store i32 %inc, i32* %phi_i5, align 8, !dbg !7031
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !7031
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7033
  br label %return, !dbg !7033

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7034
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !7035
  store i8 1, i8* %done, align 8, !dbg !7036
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7037
  br label %return, !dbg !7037

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7038
  ret %struct.ssa_use_operand_d* %18, !dbg !7038
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7039 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7042
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7043
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7044
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7044
  ret %union.tree_node* %1, !dbg !7045
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7046 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7051
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7052
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7053
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7054
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7055
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7056
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7057
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7058
  store i32 0, i32* %iter_type, align 4, !dbg !7059
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7060
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7061
  store i32 0, i32* %phi_i, align 8, !dbg !7062
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7063
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7064
  store i32 0, i32* %num_phi, align 4, !dbg !7065
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7066
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7067
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7068
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7069
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7070
  store i8 1, i8* %done, align 8, !dbg !7071
  ret void, !dbg !7072
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7073 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7074, metadata !DIExpression()), !dbg !7075
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7076
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7077
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7078
  %1 = load i32, i32* %nargs, align 4, !dbg !7078
  ret i32 %1, !dbg !7079
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7080 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7083, metadata !DIExpression()), !dbg !7084
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7085, metadata !DIExpression()), !dbg !7086
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7087
  %1 = load i32, i32* %i.addr, align 4, !dbg !7088
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !7089
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !7090
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7091
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7092 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7096, metadata !DIExpression()), !dbg !7097
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7098, metadata !DIExpression()), !dbg !7099
  %0 = load i32, i32* %index.addr, align 4, !dbg !7100
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7100
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7100
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7100
  %2 = load i32, i32* %capacity, align 8, !dbg !7100
  %cmp = icmp ule i32 %0, %2, !dbg !7100
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7100

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7100
  br label %cond.end, !dbg !7100

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7100

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7100
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7101
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7102
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7103
  %4 = load i32, i32* %index.addr, align 4, !dbg !7104
  %idxprom = zext i32 %4 to i64, !dbg !7101
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7101
  ret %struct.phi_arg_d* %arrayidx, !dbg !7105
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !7106 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7111, metadata !DIExpression()), !dbg !7112
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7113, metadata !DIExpression()), !dbg !7112
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !7114, metadata !DIExpression()), !dbg !7112
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7115
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7115
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7115

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7115
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7115
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7115
  %3 = load i32, i32* %num, align 8, !dbg !7115
  %cmp = icmp ult i32 %1, %3, !dbg !7115
  br i1 %cmp, label %if.then, label %if.else, !dbg !7112

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7117
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7117
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7117
  %idxprom = zext i32 %5 to i64, !dbg !7117
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7117
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7117
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7117
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !7117
  store i32 1, i32* %retval, align 4, !dbg !7117
  br label %return, !dbg !7117

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !7119
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !7119
  store i32 0, i32* %retval, align 4, !dbg !7119
  br label %return, !dbg !7119

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7112
  ret i32 %9, !dbg !7112
}

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !7121 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7124, metadata !DIExpression()), !dbg !7125
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7126
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7126
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7126
  br i1 %tobool, label %if.then, label %if.end, !dbg !7125

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7126
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7126
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !7126
  call void @free(i8* %4), !dbg !7126
  br label %if.end, !dbg !7126

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7125
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !7125
  ret void, !dbg !7125
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @loop_optimizer_finalize() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2340, !2341, !2342}
!llvm.ident = !{!2343}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_reassoc", scope: !2, file: !3, line: 2082, type: !2314, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !858, globals: !2274, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-reassoc.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !397, !573, !583, !587, !601, !640, !646, !672, !677, !690, !712, !846, !851}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !391, line: 104, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 74, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!400 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!572 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !330, line: 170, baseType: !7, size: 32, elements: !574)
!574 = !{!575, !576, !577, !578, !579, !580, !581, !582}
!575 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!576 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!577 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!578 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!579 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!580 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!581 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!582 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!583 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !584)
!584 = !{!585, !586}
!585 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!586 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!587 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !343, line: 295, baseType: !7, size: 32, elements: !588)
!588 = !{!589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600}
!589 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!590 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!591 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!592 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!593 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!594 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!595 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!596 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!597 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!598 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!599 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!600 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!601 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !602, line: 51, baseType: !7, size: 32, elements: !603)
!602 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!603 = !{!604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639}
!604 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!634 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!635 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!636 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!637 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!638 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!639 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!640 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !602, line: 80, baseType: !7, size: 32, elements: !641)
!641 = !{!642, !643, !644, !645}
!642 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!646 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !602, line: 727, baseType: !7, size: 32, elements: !647)
!647 = !{!648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671}
!648 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!649 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!650 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!651 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!652 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!653 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!654 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!655 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!656 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!657 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!658 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!659 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!660 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!661 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!662 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!663 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!664 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!665 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!666 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!667 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!668 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!669 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!670 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!671 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!672 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !602, line: 4603, baseType: !7, size: 32, elements: !673)
!673 = !{!674, !675, !676}
!674 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!675 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!676 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!677 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !678)
!678 = !{!679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689}
!679 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!680 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!681 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!682 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!683 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!684 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!685 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!686 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!687 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!688 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!689 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!690 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !691, line: 36, baseType: !7, size: 32, elements: !692)
!691 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711}
!693 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!694 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!695 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!696 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!697 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!698 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!699 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!700 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!701 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!702 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!703 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!704 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!705 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!706 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!707 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!708 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!709 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!710 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!711 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!712 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !713)
!713 = !{!714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845}
!714 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!809 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!810 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!811 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!812 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!813 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!814 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!815 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!816 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!817 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!818 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!819 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!820 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!821 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!822 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!823 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!824 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!825 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!826 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!827 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!828 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!829 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!830 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!831 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!832 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!833 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!834 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!835 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!836 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!837 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!838 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!839 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!840 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!841 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!842 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!843 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!844 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!845 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!846 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !847, line: 147, baseType: !7, size: 32, elements: !848)
!847 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!848 = !{!849, !850}
!849 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!850 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!851 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !852, line: 119, baseType: !7, size: 32, elements: !853)
!852 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!853 = !{!854, !855, !856, !857}
!854 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!855 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!856 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!857 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!858 = !{!859, !2223, !2224, !1149, !2225, !134, !7, !640, !962, !1197, !2229, !865, !1230, !1134, !2231, !995, !2234, !921, !2239, !2251, !690, !5, !2253, !1341, !919, !1689, !2254, !2272}
!859 = !DIDerivedType(tag: DW_TAG_typedef, name: "operand_entry_t", file: !3, line: 176, baseType: !860)
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !861, size: 64)
!861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "operand_entry", file: !3, line: 172, size: 128, elements: !862)
!862 = !{!863, !864}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !861, file: !3, line: 174, baseType: !7, size: 32)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !861, file: !3, line: 175, baseType: !865, size: 64, offset: 64)
!865 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !866, line: 56, baseType: !867)
!866 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !868, size: 64)
!868 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !869)
!869 = !{!870, !903, !909, !922, !941, !952, !957, !968, !974, !988, !1000, !1038, !1552, !1580, !1597, !1598, !1603, !1612, !1618, !1623, !1627, !1631, !1874, !1921, !1927, !1933, !1940, !1953, !1967, !1984, !1996, !2018, !2033, !2205}
!870 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !868, file: !135, line: 3372, baseType: !871, size: 64)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !872)
!872 = !{!873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !871, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !871, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !871, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !871, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !871, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !871, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !871, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !871, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !871, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !871, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !871, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !871, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !871, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !871, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !871, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !871, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !871, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !871, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !871, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !871, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !871, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !871, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !871, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !871, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !871, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !871, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !871, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !871, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !871, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !871, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !868, file: !135, line: 3373, baseType: !904, size: 192)
!904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !905)
!905 = !{!906, !907, !908}
!906 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !904, file: !135, line: 403, baseType: !871, size: 64)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !904, file: !135, line: 404, baseType: !865, size: 64, offset: 64)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !904, file: !135, line: 405, baseType: !865, size: 64, offset: 128)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !868, file: !135, line: 3374, baseType: !910, size: 320)
!910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !911)
!911 = !{!912, !913}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !910, file: !135, line: 1385, baseType: !904, size: 192)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !910, file: !135, line: 1386, baseType: !914, size: 128, offset: 192)
!914 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !915, line: 58, baseType: !916)
!915 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!916 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !915, line: 54, size: 128, elements: !917)
!917 = !{!918, !920}
!918 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !916, file: !915, line: 56, baseType: !919, size: 64)
!919 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !916, file: !915, line: 57, baseType: !921, size: 64, offset: 64)
!921 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !868, file: !135, line: 3375, baseType: !923, size: 256)
!923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !924)
!924 = !{!925, !926}
!925 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !923, file: !135, line: 1398, baseType: !904, size: 192)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !923, file: !135, line: 1399, baseType: !927, size: 64, offset: 192)
!927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !928, size: 64)
!928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !929, line: 52, size: 256, elements: !930)
!929 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!930 = !{!931, !932, !933, !934, !935, !936, !937}
!931 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !928, file: !929, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !928, file: !929, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !928, file: !929, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !928, file: !929, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !928, file: !929, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !928, file: !929, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !928, file: !929, line: 62, baseType: !938, size: 192, offset: 64)
!938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !919, size: 192, elements: !939)
!939 = !{!940}
!940 = !DISubrange(count: 3)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !868, file: !135, line: 3376, baseType: !942, size: 256)
!942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !943)
!943 = !{!944, !945}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !942, file: !135, line: 1409, baseType: !904, size: 192)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !942, file: !135, line: 1410, baseType: !946, size: 64, offset: 192)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !948, line: 27, size: 192, elements: !949)
!948 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!949 = !{!950, !951}
!950 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !947, file: !948, line: 29, baseType: !914, size: 128)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !947, file: !948, line: 30, baseType: !5, size: 32, offset: 128)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !868, file: !135, line: 3377, baseType: !953, size: 256)
!953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !954)
!954 = !{!955, !956}
!955 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !953, file: !135, line: 1438, baseType: !904, size: 192)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !953, file: !135, line: 1439, baseType: !865, size: 64, offset: 192)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !868, file: !135, line: 3378, baseType: !958, size: 256)
!958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !959)
!959 = !{!960, !961, !963}
!960 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !958, file: !135, line: 1419, baseType: !904, size: 192)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !958, file: !135, line: 1420, baseType: !962, size: 32, offset: 192)
!962 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !958, file: !135, line: 1421, baseType: !964, size: 8, offset: 224)
!964 = !DICompositeType(tag: DW_TAG_array_type, baseType: !965, size: 8, elements: !966)
!965 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!966 = !{!967}
!967 = !DISubrange(count: 1)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !868, file: !135, line: 3379, baseType: !969, size: 320)
!969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !970)
!970 = !{!971, !972, !973}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !969, file: !135, line: 1429, baseType: !904, size: 192)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !969, file: !135, line: 1430, baseType: !865, size: 64, offset: 192)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !969, file: !135, line: 1431, baseType: !865, size: 64, offset: 256)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !868, file: !135, line: 3380, baseType: !975, size: 320)
!975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !976)
!976 = !{!977, !978}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !975, file: !135, line: 1461, baseType: !904, size: 192)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !975, file: !135, line: 1462, baseType: !979, size: 128, offset: 192)
!979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !980, line: 31, size: 128, elements: !981)
!980 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!981 = !{!982, !986, !987}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !979, file: !980, line: 32, baseType: !983, size: 64)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!985 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !979, file: !980, line: 33, baseType: !7, size: 32, offset: 64)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !979, file: !980, line: 34, baseType: !7, size: 32, offset: 96)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !868, file: !135, line: 3381, baseType: !989, size: 384)
!989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !990)
!990 = !{!991, !992, !997, !998, !999}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !989, file: !135, line: 2508, baseType: !904, size: 192)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !989, file: !135, line: 2509, baseType: !993, size: 32, offset: 192)
!993 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !994, line: 58, baseType: !995)
!994 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!995 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !996, line: 44, baseType: !7)
!996 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!997 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !989, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !989, file: !135, line: 2511, baseType: !865, size: 64, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !989, file: !135, line: 2512, baseType: !865, size: 64, offset: 320)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !868, file: !135, line: 3382, baseType: !1001, size: 896)
!1001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1002)
!1002 = !{!1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1001, file: !135, line: 2653, baseType: !989, size: 384)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1001, file: !135, line: 2654, baseType: !865, size: 64, offset: 384)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1001, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1001, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1001, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1001, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1001, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1001, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1001, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1001, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1001, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1001, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1001, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1001, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1001, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1001, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1001, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1001, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1001, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1001, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1001, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1001, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1001, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1001, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1001, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1001, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1001, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1001, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1001, file: !135, line: 2705, baseType: !865, size: 64, offset: 576)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1001, file: !135, line: 2706, baseType: !865, size: 64, offset: 640)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1001, file: !135, line: 2707, baseType: !865, size: 64, offset: 704)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1001, file: !135, line: 2708, baseType: !865, size: 64, offset: 768)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1001, file: !135, line: 2711, baseType: !1036, size: 64, offset: 832)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1037, size: 64)
!1037 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !868, file: !135, line: 3383, baseType: !1039, size: 960)
!1039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1040)
!1040 = !{!1041, !1042}
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1039, file: !135, line: 2757, baseType: !1001, size: 896)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1039, file: !135, line: 2758, baseType: !1043, size: 64, offset: 896)
!1043 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !866, line: 50, baseType: !1044)
!1044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1045, size: 64)
!1045 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1046, line: 240, size: 384, elements: !1047)
!1046 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1047 = !{!1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058}
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1045, file: !1046, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1045, file: !1046, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1045, file: !1046, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1045, file: !1046, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1045, file: !1046, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1045, file: !1046, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1045, file: !1046, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1045, file: !1046, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1045, file: !1046, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1045, file: !1046, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1045, file: !1046, line: 321, baseType: !1059, size: 320, offset: 64)
!1059 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1046, line: 315, size: 320, elements: !1060)
!1060 = !{!1061, !1519, !1521, !1550, !1551}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1059, file: !1046, line: 316, baseType: !1062, size: 64)
!1062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 64, elements: !966)
!1063 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1046, line: 183, baseType: !1064)
!1064 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1046, line: 166, size: 64, elements: !1065)
!1065 = !{!1066, !1067, !1068, !1071, !1072, !1080, !1081, !1093, !1096, !1158, !1159, !1496, !1509, !1516}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1064, file: !1046, line: 168, baseType: !962, size: 32)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1064, file: !1046, line: 169, baseType: !7, size: 32)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1064, file: !1046, line: 170, baseType: !1069, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !965)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1064, file: !1046, line: 171, baseType: !1043, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1064, file: !1046, line: 172, baseType: !1073, size: 64)
!1073 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !866, line: 53, baseType: !1074)
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1046, line: 359, size: 128, elements: !1076)
!1076 = !{!1077, !1078}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1075, file: !1046, line: 360, baseType: !962, size: 32)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1075, file: !1046, line: 361, baseType: !1079, size: 64, offset: 64)
!1079 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1043, size: 64, elements: !966)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1064, file: !1046, line: 173, baseType: !5, size: 32)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1064, file: !1046, line: 174, baseType: !1082, size: 32)
!1082 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1046, line: 133, baseType: !1083)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1046, line: 115, size: 32, elements: !1084)
!1084 = !{!1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1083, file: !1046, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1083, file: !1046, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1083, file: !1046, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1083, file: !1046, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1083, file: !1046, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1083, file: !1046, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1083, file: !1046, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1083, file: !1046, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1064, file: !1046, line: 175, baseType: !1094, size: 64)
!1094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1095, size: 64)
!1095 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1046, line: 175, flags: DIFlagFwdDecl)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1064, file: !1046, line: 176, baseType: !1097, size: 64)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1099, line: 75, size: 256, elements: !1100)
!1099 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1100 = !{!1101, !1115, !1116, !1117}
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1098, file: !1099, line: 76, baseType: !1102, size: 64)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1099, line: 68, baseType: !1104)
!1104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1099, line: 63, size: 320, elements: !1105)
!1105 = !{!1106, !1108, !1109, !1110}
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1104, file: !1099, line: 64, baseType: !1107, size: 64)
!1107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1104, size: 64)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1104, file: !1099, line: 65, baseType: !1107, size: 64, offset: 64)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1104, file: !1099, line: 66, baseType: !7, size: 32, offset: 128)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1104, file: !1099, line: 67, baseType: !1111, size: 128, offset: 192)
!1111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1112, size: 128, elements: !1113)
!1112 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1099, line: 29, baseType: !919)
!1113 = !{!1114}
!1114 = !DISubrange(count: 2)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1098, file: !1099, line: 77, baseType: !1102, size: 64, offset: 64)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1098, file: !1099, line: 78, baseType: !7, size: 32, offset: 128)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1098, file: !1099, line: 79, baseType: !1118, size: 64, offset: 192)
!1118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1119, size: 64)
!1119 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1099, line: 49, baseType: !1120)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1099, line: 45, size: 832, elements: !1121)
!1121 = !{!1122, !1123, !1124}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1120, file: !1099, line: 46, baseType: !1107, size: 64)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1120, file: !1099, line: 47, baseType: !1097, size: 64, offset: 64)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1120, file: !1099, line: 48, baseType: !1125, size: 704, offset: 128)
!1125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1126, line: 164, size: 704, elements: !1127)
!1126 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1127 = !{!1128, !1129, !1140, !1141, !1142, !1143, !1144, !1145, !1150, !1154, !1155, !1156, !1157}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1125, file: !1126, line: 166, baseType: !921, size: 64)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1125, file: !1126, line: 167, baseType: !1130, size: 64, offset: 64)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1131, size: 64)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1126, line: 157, size: 192, elements: !1132)
!1132 = !{!1133, !1135, !1136}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1131, file: !1126, line: 159, baseType: !1134, size: 64)
!1134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !965, size: 64)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1131, file: !1126, line: 160, baseType: !1130, size: 64, offset: 64)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1131, file: !1126, line: 161, baseType: !1137, size: 32, offset: 128)
!1137 = !DICompositeType(tag: DW_TAG_array_type, baseType: !965, size: 32, elements: !1138)
!1138 = !{!1139}
!1139 = !DISubrange(count: 4)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1125, file: !1126, line: 168, baseType: !1134, size: 64, offset: 128)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1125, file: !1126, line: 169, baseType: !1134, size: 64, offset: 192)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1125, file: !1126, line: 170, baseType: !1134, size: 64, offset: 256)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1125, file: !1126, line: 171, baseType: !921, size: 64, offset: 320)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1125, file: !1126, line: 172, baseType: !962, size: 32, offset: 384)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1125, file: !1126, line: 176, baseType: !1146, size: 64, offset: 448)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!1130, !1149, !921}
!1149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1125, file: !1126, line: 177, baseType: !1151, size: 64, offset: 512)
!1151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1152, size: 64)
!1152 = !DISubroutineType(types: !1153)
!1153 = !{null, !1149, !1130}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1125, file: !1126, line: 178, baseType: !1149, size: 64, offset: 576)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1125, file: !1126, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1125, file: !1126, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1125, file: !1126, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1064, file: !1046, line: 177, baseType: !865, size: 64)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1064, file: !1046, line: 178, baseType: !1160, size: 64)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !1162)
!1162 = !{!1163, !1408, !1409, !1410, !1466, !1470, !1471, !1472, !1490, !1491, !1492, !1493, !1494, !1495}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1161, file: !343, line: 219, baseType: !1164, size: 64)
!1164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1165, size: 64)
!1165 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !1166)
!1166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !1167)
!1167 = !{!1168}
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1166, file: !343, line: 151, baseType: !1169, size: 128)
!1169 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !1170)
!1170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !1171)
!1171 = !{!1172, !1173, !1174}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1170, file: !343, line: 150, baseType: !7, size: 32)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1170, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1170, file: !343, line: 150, baseType: !1175, size: 64, offset: 64)
!1175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1176, size: 64, elements: !966)
!1176 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !866, line: 108, baseType: !1177)
!1177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1178, size: 64)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !1179)
!1179 = !{!1180, !1181, !1182, !1400, !1401, !1402, !1403, !1404, !1405, !1406}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1178, file: !343, line: 124, baseType: !1160, size: 64)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1178, file: !343, line: 125, baseType: !1160, size: 64, offset: 64)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1178, file: !343, line: 131, baseType: !1183, size: 64, offset: 128)
!1183 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1184)
!1184 = !{!1185, !1399}
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1183, file: !343, line: 129, baseType: !1186, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !866, line: 66, baseType: !1187)
!1187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1188, size: 64)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !602, line: 143, size: 192, elements: !1189)
!1189 = !{!1190, !1397, !1398}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1188, file: !602, line: 145, baseType: !1191, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !866, line: 69, baseType: !1192)
!1192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1193, size: 64)
!1193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !602, line: 136, size: 192, elements: !1194)
!1194 = !{!1195, !1395, !1396}
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1193, file: !602, line: 137, baseType: !1196, size: 64)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !866, line: 58, baseType: !1197)
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1198 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !602, line: 737, size: 768, elements: !1199)
!1199 = !{!1200, !1217, !1250, !1256, !1261, !1266, !1273, !1279, !1285, !1290, !1304, !1309, !1315, !1320, !1330, !1335, !1353, !1360, !1367, !1373, !1378, !1384, !1390}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1198, file: !602, line: 738, baseType: !1201, size: 256)
!1201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !602, line: 271, size: 256, elements: !1202)
!1202 = !{!1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1201, file: !602, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1201, file: !602, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1201, file: !602, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1201, file: !602, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1201, file: !602, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1201, file: !602, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1201, file: !602, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1201, file: !602, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1201, file: !602, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1201, file: !602, line: 312, baseType: !7, size: 32, offset: 32)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1201, file: !602, line: 316, baseType: !993, size: 32, offset: 64)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1201, file: !602, line: 319, baseType: !7, size: 32, offset: 96)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1201, file: !602, line: 323, baseType: !1160, size: 64, offset: 128)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1201, file: !602, line: 327, baseType: !865, size: 64, offset: 192)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1198, file: !602, line: 739, baseType: !1218, size: 448)
!1218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !602, line: 350, size: 448, elements: !1219)
!1219 = !{!1220, !1248}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1218, file: !602, line: 353, baseType: !1221, size: 384)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !602, line: 333, size: 384, elements: !1222)
!1222 = !{!1223, !1224, !1231}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1221, file: !602, line: 336, baseType: !1201, size: 256)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1221, file: !602, line: 343, baseType: !1225, size: 64, offset: 256)
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64)
!1226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !852, line: 37, size: 128, elements: !1227)
!1227 = !{!1228, !1229}
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1226, file: !852, line: 39, baseType: !1225, size: 64)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1226, file: !852, line: 40, baseType: !1230, size: 64, offset: 64)
!1230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !865, size: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1221, file: !602, line: 344, baseType: !1232, size: 64, offset: 320)
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !852, line: 45, size: 320, elements: !1234)
!1234 = !{!1235, !1236}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1233, file: !852, line: 47, baseType: !1232, size: 64)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1233, file: !852, line: 48, baseType: !1237, size: 256, offset: 64)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1238)
!1238 = !{!1239, !1241, !1242, !1247}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1237, file: !135, line: 1884, baseType: !1240, size: 64)
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1237, size: 64)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1237, file: !135, line: 1885, baseType: !1240, size: 64, offset: 64)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1237, file: !135, line: 1891, baseType: !1243, size: 64, offset: 128)
!1243 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1237, file: !135, line: 1891, size: 64, elements: !1244)
!1244 = !{!1245, !1246}
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1243, file: !135, line: 1891, baseType: !1196, size: 64)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1243, file: !135, line: 1891, baseType: !865, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1237, file: !135, line: 1892, baseType: !1230, size: 64, offset: 192)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1218, file: !602, line: 359, baseType: !1249, size: 64, offset: 384)
!1249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !865, size: 64, elements: !966)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1198, file: !602, line: 740, baseType: !1251, size: 512)
!1251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !602, line: 365, size: 512, elements: !1252)
!1252 = !{!1253, !1254, !1255}
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1251, file: !602, line: 368, baseType: !1221, size: 384)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1251, file: !602, line: 373, baseType: !865, size: 64, offset: 384)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1251, file: !602, line: 374, baseType: !865, size: 64, offset: 448)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1198, file: !602, line: 741, baseType: !1257, size: 576)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !602, line: 380, size: 576, elements: !1258)
!1258 = !{!1259, !1260}
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1257, file: !602, line: 383, baseType: !1251, size: 512)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1257, file: !602, line: 389, baseType: !1249, size: 64, offset: 512)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1198, file: !602, line: 742, baseType: !1262, size: 320)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !602, line: 395, size: 320, elements: !1263)
!1263 = !{!1264, !1265}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1262, file: !602, line: 397, baseType: !1201, size: 256)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1262, file: !602, line: 400, baseType: !1186, size: 64, offset: 256)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1198, file: !602, line: 743, baseType: !1267, size: 448)
!1267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !602, line: 406, size: 448, elements: !1268)
!1268 = !{!1269, !1270, !1271, !1272}
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1267, file: !602, line: 408, baseType: !1201, size: 256)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1267, file: !602, line: 412, baseType: !865, size: 64, offset: 256)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1267, file: !602, line: 420, baseType: !865, size: 64, offset: 320)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1267, file: !602, line: 423, baseType: !1186, size: 64, offset: 384)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1198, file: !602, line: 744, baseType: !1274, size: 384)
!1274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !602, line: 429, size: 384, elements: !1275)
!1275 = !{!1276, !1277, !1278}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1274, file: !602, line: 431, baseType: !1201, size: 256)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1274, file: !602, line: 434, baseType: !865, size: 64, offset: 256)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1274, file: !602, line: 437, baseType: !1186, size: 64, offset: 320)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1198, file: !602, line: 745, baseType: !1280, size: 384)
!1280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !602, line: 443, size: 384, elements: !1281)
!1281 = !{!1282, !1283, !1284}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1280, file: !602, line: 445, baseType: !1201, size: 256)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1280, file: !602, line: 449, baseType: !865, size: 64, offset: 256)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1280, file: !602, line: 453, baseType: !1186, size: 64, offset: 320)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1198, file: !602, line: 746, baseType: !1286, size: 320)
!1286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !602, line: 459, size: 320, elements: !1287)
!1287 = !{!1288, !1289}
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1286, file: !602, line: 461, baseType: !1201, size: 256)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1286, file: !602, line: 464, baseType: !865, size: 64, offset: 256)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1198, file: !602, line: 747, baseType: !1291, size: 768)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !602, line: 469, size: 768, elements: !1292)
!1292 = !{!1293, !1294, !1295, !1296, !1297}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1291, file: !602, line: 471, baseType: !1201, size: 256)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1291, file: !602, line: 474, baseType: !7, size: 32, offset: 256)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1291, file: !602, line: 475, baseType: !7, size: 32, offset: 288)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1291, file: !602, line: 478, baseType: !865, size: 64, offset: 320)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1291, file: !602, line: 481, baseType: !1298, size: 384, offset: 384)
!1298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 384, elements: !966)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1300)
!1300 = !{!1301, !1302, !1303}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1299, file: !135, line: 1920, baseType: !1237, size: 256)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1299, file: !135, line: 1921, baseType: !865, size: 64, offset: 256)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1299, file: !135, line: 1922, baseType: !993, size: 32, offset: 320)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1198, file: !602, line: 748, baseType: !1305, size: 320)
!1305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !602, line: 487, size: 320, elements: !1306)
!1306 = !{!1307, !1308}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1305, file: !602, line: 490, baseType: !1201, size: 256)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1305, file: !602, line: 494, baseType: !962, size: 32, offset: 256)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1198, file: !602, line: 749, baseType: !1310, size: 384)
!1310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !602, line: 500, size: 384, elements: !1311)
!1311 = !{!1312, !1313, !1314}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1310, file: !602, line: 502, baseType: !1201, size: 256)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1310, file: !602, line: 506, baseType: !1186, size: 64, offset: 256)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1310, file: !602, line: 510, baseType: !1186, size: 64, offset: 320)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1198, file: !602, line: 750, baseType: !1316, size: 320)
!1316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !602, line: 529, size: 320, elements: !1317)
!1317 = !{!1318, !1319}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1316, file: !602, line: 531, baseType: !1201, size: 256)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1316, file: !602, line: 540, baseType: !1186, size: 64, offset: 256)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1198, file: !602, line: 751, baseType: !1321, size: 704)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !602, line: 546, size: 704, elements: !1322)
!1322 = !{!1323, !1324, !1325, !1326, !1327, !1328, !1329}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1321, file: !602, line: 549, baseType: !1251, size: 512)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1321, file: !602, line: 553, baseType: !1069, size: 64, offset: 512)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1321, file: !602, line: 557, baseType: !985, size: 8, offset: 576)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1321, file: !602, line: 558, baseType: !985, size: 8, offset: 584)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1321, file: !602, line: 559, baseType: !985, size: 8, offset: 592)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1321, file: !602, line: 560, baseType: !985, size: 8, offset: 600)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1321, file: !602, line: 566, baseType: !1249, size: 64, offset: 640)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1198, file: !602, line: 752, baseType: !1331, size: 384)
!1331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !602, line: 571, size: 384, elements: !1332)
!1332 = !{!1333, !1334}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1331, file: !602, line: 573, baseType: !1262, size: 320)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1331, file: !602, line: 577, baseType: !865, size: 64, offset: 320)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1198, file: !602, line: 753, baseType: !1336, size: 576)
!1336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !602, line: 600, size: 576, elements: !1337)
!1337 = !{!1338, !1339, !1340, !1343, !1352}
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1336, file: !602, line: 602, baseType: !1262, size: 320)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1336, file: !602, line: 605, baseType: !865, size: 64, offset: 320)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1336, file: !602, line: 609, baseType: !1341, size: 64, offset: 384)
!1341 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1342, line: 46, baseType: !919)
!1342 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1336, file: !602, line: 612, baseType: !1344, size: 64, offset: 448)
!1344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1345, size: 64)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !602, line: 581, size: 320, elements: !1346)
!1346 = !{!1347, !1348, !1349, !1350, !1351}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1345, file: !602, line: 583, baseType: !134, size: 32)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1345, file: !602, line: 586, baseType: !865, size: 64, offset: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1345, file: !602, line: 589, baseType: !865, size: 64, offset: 128)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1345, file: !602, line: 592, baseType: !865, size: 64, offset: 192)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1345, file: !602, line: 595, baseType: !865, size: 64, offset: 256)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1336, file: !602, line: 616, baseType: !1186, size: 64, offset: 512)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1198, file: !602, line: 754, baseType: !1354, size: 512)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !602, line: 622, size: 512, elements: !1355)
!1355 = !{!1356, !1357, !1358, !1359}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1354, file: !602, line: 624, baseType: !1262, size: 320)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1354, file: !602, line: 628, baseType: !865, size: 64, offset: 320)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1354, file: !602, line: 632, baseType: !865, size: 64, offset: 384)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1354, file: !602, line: 636, baseType: !865, size: 64, offset: 448)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1198, file: !602, line: 755, baseType: !1361, size: 704)
!1361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !602, line: 642, size: 704, elements: !1362)
!1362 = !{!1363, !1364, !1365, !1366}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1361, file: !602, line: 644, baseType: !1354, size: 512)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1361, file: !602, line: 648, baseType: !865, size: 64, offset: 512)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1361, file: !602, line: 652, baseType: !865, size: 64, offset: 576)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1361, file: !602, line: 653, baseType: !865, size: 64, offset: 640)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1198, file: !602, line: 756, baseType: !1368, size: 448)
!1368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !602, line: 663, size: 448, elements: !1369)
!1369 = !{!1370, !1371, !1372}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1368, file: !602, line: 665, baseType: !1262, size: 320)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1368, file: !602, line: 668, baseType: !865, size: 64, offset: 320)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1368, file: !602, line: 673, baseType: !865, size: 64, offset: 384)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1198, file: !602, line: 757, baseType: !1374, size: 384)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !602, line: 694, size: 384, elements: !1375)
!1375 = !{!1376, !1377}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1374, file: !602, line: 696, baseType: !1262, size: 320)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1374, file: !602, line: 699, baseType: !865, size: 64, offset: 320)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1198, file: !602, line: 758, baseType: !1379, size: 384)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !602, line: 681, size: 384, elements: !1380)
!1380 = !{!1381, !1382, !1383}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1379, file: !602, line: 683, baseType: !1201, size: 256)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1379, file: !602, line: 686, baseType: !865, size: 64, offset: 256)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1379, file: !602, line: 689, baseType: !865, size: 64, offset: 320)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1198, file: !602, line: 759, baseType: !1385, size: 384)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !602, line: 707, size: 384, elements: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1385, file: !602, line: 709, baseType: !1201, size: 256)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1385, file: !602, line: 712, baseType: !865, size: 64, offset: 256)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1385, file: !602, line: 712, baseType: !865, size: 64, offset: 320)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1198, file: !602, line: 760, baseType: !1391, size: 320)
!1391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !602, line: 718, size: 320, elements: !1392)
!1392 = !{!1393, !1394}
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1391, file: !602, line: 720, baseType: !1201, size: 256)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1391, file: !602, line: 723, baseType: !865, size: 64, offset: 256)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1193, file: !602, line: 138, baseType: !1192, size: 64, offset: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1193, file: !602, line: 139, baseType: !1192, size: 64, offset: 128)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1188, file: !602, line: 146, baseType: !1191, size: 64, offset: 64)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1188, file: !602, line: 152, baseType: !1186, size: 64, offset: 128)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1183, file: !343, line: 130, baseType: !1043, size: 64)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1178, file: !343, line: 134, baseType: !1149, size: 64, offset: 192)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1178, file: !343, line: 137, baseType: !865, size: 64, offset: 256)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1178, file: !343, line: 138, baseType: !993, size: 32, offset: 320)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1178, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1178, file: !343, line: 144, baseType: !962, size: 32, offset: 384)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1178, file: !343, line: 145, baseType: !962, size: 32, offset: 416)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1178, file: !343, line: 146, baseType: !1407, size: 64, offset: 448)
!1407 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !921)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1161, file: !343, line: 220, baseType: !1164, size: 64, offset: 64)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1161, file: !343, line: 223, baseType: !1149, size: 64, offset: 128)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1161, file: !343, line: 226, baseType: !1411, size: 64, offset: 192)
!1411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1412, size: 64)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1413)
!1413 = !{!1414, !1415, !1416, !1417, !1418, !1423, !1424, !1425, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1456, !1464, !1465}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1412, file: !330, line: 102, baseType: !962, size: 32)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1412, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1412, file: !330, line: 108, baseType: !1160, size: 64, offset: 64)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1412, file: !330, line: 111, baseType: !1160, size: 64, offset: 128)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1412, file: !330, line: 114, baseType: !1419, size: 64, offset: 192)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1420)
!1420 = !{!1421, !1422}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1419, file: !330, line: 42, baseType: !329, size: 32)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1419, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1412, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1412, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1412, file: !330, line: 123, baseType: !1426, size: 64, offset: 320)
!1426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1428)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1429)
!1429 = !{!1430}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1428, file: !330, line: 87, baseType: !1431, size: 128)
!1431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1432)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1433)
!1433 = !{!1434, !1435, !1436}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1432, file: !330, line: 85, baseType: !7, size: 32)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1432, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1432, file: !330, line: 85, baseType: !1437, size: 64, offset: 64)
!1437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1438, size: 64, elements: !966)
!1438 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1411)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1412, file: !330, line: 126, baseType: !1411, size: 64, offset: 384)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1412, file: !330, line: 129, baseType: !1411, size: 64, offset: 448)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1412, file: !330, line: 132, baseType: !1149, size: 64, offset: 512)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1412, file: !330, line: 139, baseType: !865, size: 64, offset: 576)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1412, file: !330, line: 143, baseType: !914, size: 128, offset: 640)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1412, file: !330, line: 146, baseType: !914, size: 128, offset: 768)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1412, file: !330, line: 148, baseType: !985, size: 8, offset: 896)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1412, file: !330, line: 149, baseType: !985, size: 8, offset: 904)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1412, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1412, file: !330, line: 156, baseType: !1449, size: 64, offset: 960)
!1449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1450, size: 64)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1451)
!1451 = !{!1452, !1453, !1454, !1455}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1450, file: !330, line: 50, baseType: !1196, size: 64)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1450, file: !330, line: 59, baseType: !914, size: 128, offset: 64)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1450, file: !330, line: 64, baseType: !985, size: 8, offset: 192)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1450, file: !330, line: 67, baseType: !1449, size: 64, offset: 256)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1412, file: !330, line: 159, baseType: !1457, size: 64, offset: 1024)
!1457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1458, size: 64)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1459)
!1459 = !{!1460, !1461, !1462, !1463}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1458, file: !330, line: 74, baseType: !1177, size: 64)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1458, file: !330, line: 77, baseType: !1457, size: 64, offset: 64)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1458, file: !330, line: 78, baseType: !1457, size: 64, offset: 128)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1458, file: !330, line: 81, baseType: !1457, size: 64, offset: 192)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1412, file: !330, line: 162, baseType: !985, size: 8, offset: 1088)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1412, file: !330, line: 166, baseType: !865, size: 64, offset: 1152)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1161, file: !343, line: 229, baseType: !1467, size: 128, offset: 256)
!1467 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1468, size: 128, elements: !1113)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1161, file: !343, line: 232, baseType: !1160, size: 64, offset: 384)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1161, file: !343, line: 233, baseType: !1160, size: 64, offset: 448)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1161, file: !343, line: 238, baseType: !1473, size: 64, offset: 512)
!1473 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !1474)
!1474 = !{!1475, !1481}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1473, file: !343, line: 236, baseType: !1476, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !1478)
!1478 = !{!1479, !1480}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1477, file: !343, line: 275, baseType: !1186, size: 64)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1477, file: !343, line: 278, baseType: !1186, size: 64, offset: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1473, file: !343, line: 237, baseType: !1482, size: 64)
!1482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1483, size: 64)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !1484)
!1484 = !{!1485, !1486, !1487, !1488, !1489}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1483, file: !343, line: 261, baseType: !1043, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1483, file: !343, line: 262, baseType: !1043, size: 64, offset: 64)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1483, file: !343, line: 266, baseType: !1043, size: 64, offset: 128)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1483, file: !343, line: 267, baseType: !1043, size: 64, offset: 192)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1483, file: !343, line: 270, baseType: !962, size: 32, offset: 256)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1161, file: !343, line: 241, baseType: !1407, size: 64, offset: 576)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1161, file: !343, line: 244, baseType: !962, size: 32, offset: 640)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1161, file: !343, line: 247, baseType: !962, size: 32, offset: 672)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1161, file: !343, line: 250, baseType: !962, size: 32, offset: 704)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1161, file: !343, line: 253, baseType: !962, size: 32, offset: 736)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1161, file: !343, line: 256, baseType: !962, size: 32, offset: 768)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1064, file: !1046, line: 179, baseType: !1497, size: 64)
!1497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1498, size: 64)
!1498 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1046, line: 150, baseType: !1499)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1046, line: 142, size: 320, elements: !1500)
!1500 = !{!1501, !1502, !1503, !1504, !1507, !1508}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1499, file: !1046, line: 144, baseType: !865, size: 64)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1499, file: !1046, line: 145, baseType: !1043, size: 64, offset: 64)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1499, file: !1046, line: 146, baseType: !1043, size: 64, offset: 128)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1499, file: !1046, line: 147, baseType: !1505, size: 32, offset: 192)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1506, line: 31, baseType: !962)
!1506 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1499, file: !1046, line: 148, baseType: !7, size: 32, offset: 224)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1499, file: !1046, line: 149, baseType: !985, size: 8, offset: 256)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1064, file: !1046, line: 180, baseType: !1510, size: 64)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1046, line: 162, baseType: !1512)
!1512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1046, line: 159, size: 128, elements: !1513)
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1512, file: !1046, line: 160, baseType: !865, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1512, file: !1046, line: 161, baseType: !921, size: 64, offset: 64)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1064, file: !1046, line: 181, baseType: !1517, size: 64)
!1517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1518, size: 64)
!1518 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1046, line: 181, flags: DIFlagFwdDecl)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1059, file: !1046, line: 317, baseType: !1520, size: 64)
!1520 = !DICompositeType(tag: DW_TAG_array_type, baseType: !921, size: 64, elements: !966)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1059, file: !1046, line: 318, baseType: !1522, size: 320)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1046, line: 188, size: 320, elements: !1523)
!1523 = !{!1524, !1526, !1549}
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1522, file: !1046, line: 190, baseType: !1525, size: 192)
!1525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 192, elements: !939)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1522, file: !1046, line: 193, baseType: !1527, size: 64, offset: 192)
!1527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1528, size: 64)
!1528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1046, line: 206, size: 320, elements: !1529)
!1529 = !{!1530, !1534, !1535, !1536, !1548}
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1528, file: !1046, line: 208, baseType: !1531, size: 64)
!1531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1532, size: 64)
!1532 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !866, line: 62, baseType: !1533)
!1533 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !866, line: 61, flags: DIFlagFwdDecl)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1528, file: !1046, line: 211, baseType: !7, size: 32, offset: 64)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1528, file: !1046, line: 214, baseType: !921, size: 64, offset: 128)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1528, file: !1046, line: 224, baseType: !1537, size: 64, offset: 192)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1046, line: 202, baseType: !1539)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1046, line: 202, size: 128, elements: !1540)
!1540 = !{!1541}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1539, file: !1046, line: 202, baseType: !1542, size: 128)
!1542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1046, line: 200, baseType: !1543)
!1543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1046, line: 200, size: 128, elements: !1544)
!1544 = !{!1545, !1546, !1547}
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1543, file: !1046, line: 200, baseType: !7, size: 32)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1543, file: !1046, line: 200, baseType: !7, size: 32, offset: 32)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1543, file: !1046, line: 200, baseType: !1079, size: 64, offset: 64)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1528, file: !1046, line: 234, baseType: !1537, size: 64, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1522, file: !1046, line: 197, baseType: !921, size: 64, offset: 256)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1059, file: !1046, line: 319, baseType: !928, size: 256)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1059, file: !1046, line: 320, baseType: !947, size: 192)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !868, file: !135, line: 3384, baseType: !1553, size: 1472)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1554)
!1554 = !{!1555, !1576, !1577, !1578, !1579}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1553, file: !135, line: 3115, baseType: !1556, size: 1216)
!1556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1557)
!1557 = !{!1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1556, file: !135, line: 2985, baseType: !1039, size: 960)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1556, file: !135, line: 2986, baseType: !865, size: 64, offset: 960)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1556, file: !135, line: 2987, baseType: !865, size: 64, offset: 1024)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1556, file: !135, line: 2988, baseType: !865, size: 64, offset: 1088)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1556, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1556, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1556, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1556, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1556, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1556, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1556, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1556, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1556, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1556, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1556, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1556, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1556, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1556, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1553, file: !135, line: 3117, baseType: !865, size: 64, offset: 1216)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1553, file: !135, line: 3119, baseType: !865, size: 64, offset: 1280)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1553, file: !135, line: 3121, baseType: !865, size: 64, offset: 1344)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1553, file: !135, line: 3123, baseType: !865, size: 64, offset: 1408)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !868, file: !135, line: 3385, baseType: !1581, size: 1088)
!1581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1582)
!1582 = !{!1583, !1584, !1585}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1581, file: !135, line: 2875, baseType: !1039, size: 960)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1581, file: !135, line: 2876, baseType: !1043, size: 64, offset: 960)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1581, file: !135, line: 2877, baseType: !1586, size: 64, offset: 1024)
!1586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1587, size: 64)
!1587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1588, line: 172, size: 128, elements: !1589)
!1588 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1589 = !{!1590, !1591, !1592, !1593, !1594, !1595, !1596}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1587, file: !1588, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1587, file: !1588, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1587, file: !1588, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1587, file: !1588, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1587, file: !1588, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1587, file: !1588, line: 195, baseType: !7, size: 32, offset: 32)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1587, file: !1588, line: 199, baseType: !865, size: 64, offset: 64)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !868, file: !135, line: 3386, baseType: !1556, size: 1216)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !868, file: !135, line: 3387, baseType: !1599, size: 1280)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1600)
!1600 = !{!1601, !1602}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1599, file: !135, line: 3094, baseType: !1556, size: 1216)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1599, file: !135, line: 3095, baseType: !1586, size: 64, offset: 1216)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !868, file: !135, line: 3388, baseType: !1604, size: 1216)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1605)
!1605 = !{!1606, !1607, !1608, !1609, !1610, !1611}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1604, file: !135, line: 2825, baseType: !1001, size: 896)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1604, file: !135, line: 2827, baseType: !865, size: 64, offset: 896)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1604, file: !135, line: 2828, baseType: !865, size: 64, offset: 960)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1604, file: !135, line: 2829, baseType: !865, size: 64, offset: 1024)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1604, file: !135, line: 2830, baseType: !865, size: 64, offset: 1088)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1604, file: !135, line: 2831, baseType: !865, size: 64, offset: 1152)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !868, file: !135, line: 3389, baseType: !1613, size: 1024)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1614)
!1614 = !{!1615, !1616, !1617}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1613, file: !135, line: 2851, baseType: !1039, size: 960)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1613, file: !135, line: 2852, baseType: !962, size: 32, offset: 960)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1613, file: !135, line: 2853, baseType: !962, size: 32, offset: 992)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !868, file: !135, line: 3390, baseType: !1619, size: 1024)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1620)
!1620 = !{!1621, !1622}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1619, file: !135, line: 2858, baseType: !1039, size: 960)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1619, file: !135, line: 2859, baseType: !1586, size: 64, offset: 960)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !868, file: !135, line: 3391, baseType: !1624, size: 960)
!1624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1625)
!1625 = !{!1626}
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1624, file: !135, line: 2863, baseType: !1039, size: 960)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !868, file: !135, line: 3392, baseType: !1628, size: 1472)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1629)
!1629 = !{!1630}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1628, file: !135, line: 3305, baseType: !1553, size: 1472)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !868, file: !135, line: 3393, baseType: !1632, size: 1792)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1633)
!1633 = !{!1634, !1635, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1632, file: !135, line: 3249, baseType: !1553, size: 1472)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1632, file: !135, line: 3251, baseType: !1636, size: 64, offset: 1472)
!1636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1637, size: 64)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1638, line: 463, size: 1152, elements: !1639)
!1638 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1639 = !{!1640, !1643, !1674, !1675, !1789, !1797, !1798, !1799, !1800, !1801, !1802, !1826, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852}
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1637, file: !1638, line: 464, baseType: !1641, size: 64)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1638, line: 464, flags: DIFlagFwdDecl)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1637, file: !1638, line: 467, baseType: !1644, size: 64, offset: 64)
!1644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1645, size: 64)
!1645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !1646)
!1646 = !{!1647, !1649, !1650, !1663, !1664, !1665, !1666, !1667, !1668, !1670, !1672, !1673}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1645, file: !343, line: 377, baseType: !1648, size: 64)
!1648 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !866, line: 111, baseType: !1160)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1645, file: !343, line: 378, baseType: !1648, size: 64, offset: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1645, file: !343, line: 381, baseType: !1651, size: 64, offset: 128)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64)
!1652 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !1653)
!1653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !1654)
!1654 = !{!1655}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1653, file: !343, line: 282, baseType: !1656, size: 128)
!1656 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !1657)
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !1658)
!1658 = !{!1659, !1660, !1661}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1657, file: !343, line: 281, baseType: !7, size: 32)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1657, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1657, file: !343, line: 281, baseType: !1662, size: 64, offset: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1648, size: 64, elements: !966)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1645, file: !343, line: 384, baseType: !962, size: 32, offset: 192)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1645, file: !343, line: 387, baseType: !962, size: 32, offset: 224)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1645, file: !343, line: 390, baseType: !962, size: 32, offset: 256)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1645, file: !343, line: 394, baseType: !1651, size: 64, offset: 320)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1645, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1645, file: !343, line: 399, baseType: !1669, size: 64, offset: 416)
!1669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1113)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1645, file: !343, line: 402, baseType: !1671, size: 64, offset: 480)
!1671 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1113)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1645, file: !343, line: 406, baseType: !962, size: 32, offset: 544)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1645, file: !343, line: 409, baseType: !962, size: 32, offset: 576)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1637, file: !1638, line: 470, baseType: !1187, size: 64, offset: 128)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1637, file: !1638, line: 473, baseType: !1676, size: 64, offset: 192)
!1676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1677, size: 64)
!1677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1588, line: 39, size: 1152, elements: !1678)
!1678 = !{!1679, !1728, !1741, !1753, !1754, !1766, !1767, !1771, !1772, !1773, !1774, !1775}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1677, file: !1588, line: 41, baseType: !1680, size: 64)
!1680 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !847, line: 144, baseType: !1681)
!1681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1682, size: 64)
!1682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !847, line: 100, size: 896, elements: !1683)
!1683 = !{!1684, !1692, !1697, !1702, !1704, !1705, !1706, !1707, !1708, !1709, !1714, !1716, !1717, !1722, !1727}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1682, file: !847, line: 102, baseType: !1685, size: 64)
!1685 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !847, line: 52, baseType: !1686)
!1686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1687, size: 64)
!1687 = !DISubroutineType(types: !1688)
!1688 = !{!1689, !1690}
!1689 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !847, line: 47, baseType: !7)
!1690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1691, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1682, file: !847, line: 105, baseType: !1693, size: 64, offset: 64)
!1693 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !847, line: 59, baseType: !1694)
!1694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1695, size: 64)
!1695 = !DISubroutineType(types: !1696)
!1696 = !{!962, !1690, !1690}
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1682, file: !847, line: 108, baseType: !1698, size: 64, offset: 128)
!1698 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !847, line: 63, baseType: !1699)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = !DISubroutineType(types: !1701)
!1701 = !{null, !1149}
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1682, file: !847, line: 111, baseType: !1703, size: 64, offset: 192)
!1703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1149, size: 64)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1682, file: !847, line: 114, baseType: !1341, size: 64, offset: 256)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1682, file: !847, line: 117, baseType: !1341, size: 64, offset: 320)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1682, file: !847, line: 120, baseType: !1341, size: 64, offset: 384)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1682, file: !847, line: 124, baseType: !7, size: 32, offset: 448)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1682, file: !847, line: 128, baseType: !7, size: 32, offset: 480)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1682, file: !847, line: 131, baseType: !1710, size: 64, offset: 512)
!1710 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !847, line: 75, baseType: !1711)
!1711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!1712 = !DISubroutineType(types: !1713)
!1713 = !{!1149, !1341, !1341}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1682, file: !847, line: 132, baseType: !1715, size: 64, offset: 576)
!1715 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !847, line: 78, baseType: !1699)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1682, file: !847, line: 135, baseType: !1149, size: 64, offset: 640)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1682, file: !847, line: 136, baseType: !1718, size: 64, offset: 704)
!1718 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !847, line: 82, baseType: !1719)
!1719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1720, size: 64)
!1720 = !DISubroutineType(types: !1721)
!1721 = !{!1149, !1149, !1341, !1341}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1682, file: !847, line: 137, baseType: !1723, size: 64, offset: 768)
!1723 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !847, line: 83, baseType: !1724)
!1724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1725, size: 64)
!1725 = !DISubroutineType(types: !1726)
!1726 = !{null, !1149, !1149}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1682, file: !847, line: 141, baseType: !7, size: 32, offset: 832)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1677, file: !1588, line: 48, baseType: !1729, size: 64, offset: 64)
!1729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1730, size: 64)
!1730 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !602, line: 35, baseType: !1731)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !602, line: 35, size: 128, elements: !1732)
!1732 = !{!1733}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1731, file: !602, line: 35, baseType: !1734, size: 128)
!1734 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !602, line: 33, baseType: !1735)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !602, line: 33, size: 128, elements: !1736)
!1736 = !{!1737, !1738, !1739}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1735, file: !602, line: 33, baseType: !7, size: 32)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1735, file: !602, line: 33, baseType: !7, size: 32, offset: 32)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1735, file: !602, line: 33, baseType: !1740, size: 64, offset: 64)
!1740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1196, size: 64, elements: !966)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1677, file: !1588, line: 51, baseType: !1742, size: 64, offset: 128)
!1742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1743, size: 64)
!1743 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1744)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1745)
!1745 = !{!1746}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1744, file: !135, line: 183, baseType: !1747, size: 128)
!1747 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1748)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1749)
!1749 = !{!1750, !1751, !1752}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1748, file: !135, line: 182, baseType: !7, size: 32)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1748, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1748, file: !135, line: 182, baseType: !1249, size: 64, offset: 64)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1677, file: !1588, line: 54, baseType: !865, size: 64, offset: 192)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1677, file: !1588, line: 57, baseType: !1755, size: 128, offset: 256)
!1755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1756, line: 31, size: 128, elements: !1757)
!1756 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1757 = !{!1758, !1759, !1760, !1761, !1762, !1763, !1764}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1755, file: !1756, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1755, file: !1756, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1755, file: !1756, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1755, file: !1756, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1755, file: !1756, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1755, file: !1756, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1755, file: !1756, line: 56, baseType: !1765, size: 64, offset: 64)
!1765 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !866, line: 47, baseType: !1097)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1677, file: !1588, line: 60, baseType: !1755, size: 128, offset: 384)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1677, file: !1588, line: 64, baseType: !1768, size: 64, offset: 512)
!1768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64)
!1769 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1770, line: 33, flags: DIFlagFwdDecl)
!1770 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1677, file: !1588, line: 67, baseType: !865, size: 64, offset: 576)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1677, file: !1588, line: 73, baseType: !1680, size: 64, offset: 640)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1677, file: !1588, line: 77, baseType: !1765, size: 64, offset: 704)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1677, file: !1588, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1677, file: !1588, line: 82, baseType: !1776, size: 320, offset: 832)
!1776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !852, line: 62, size: 320, elements: !1777)
!1777 = !{!1778, !1784, !1785, !1786, !1787, !1788}
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1776, file: !852, line: 63, baseType: !1779, size: 64)
!1779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1780, size: 64)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !852, line: 56, size: 128, elements: !1781)
!1781 = !{!1782, !1783}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1780, file: !852, line: 57, baseType: !1779, size: 64)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1780, file: !852, line: 58, baseType: !964, size: 8, offset: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1776, file: !852, line: 64, baseType: !7, size: 32, offset: 64)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1776, file: !852, line: 66, baseType: !7, size: 32, offset: 96)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1776, file: !852, line: 68, baseType: !985, size: 8, offset: 128)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1776, file: !852, line: 70, baseType: !1225, size: 64, offset: 192)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1776, file: !852, line: 71, baseType: !1232, size: 64, offset: 256)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1637, file: !1638, line: 476, baseType: !1790, size: 64, offset: 256)
!1790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1791, size: 64)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !1792)
!1792 = !{!1793, !1794, !1795, !1796}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1791, file: !330, line: 189, baseType: !962, size: 32)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1791, file: !330, line: 192, baseType: !1426, size: 64, offset: 64)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1791, file: !330, line: 197, baseType: !1680, size: 64, offset: 128)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1791, file: !330, line: 200, baseType: !1411, size: 64, offset: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1637, file: !1638, line: 479, baseType: !1680, size: 64, offset: 320)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1637, file: !1638, line: 484, baseType: !865, size: 64, offset: 384)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1637, file: !1638, line: 488, baseType: !865, size: 64, offset: 448)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1637, file: !1638, line: 493, baseType: !865, size: 64, offset: 512)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1637, file: !1638, line: 496, baseType: !865, size: 64, offset: 576)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1637, file: !1638, line: 501, baseType: !1803, size: 64, offset: 640)
!1803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1804, size: 64)
!1804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !1805)
!1805 = !{!1806, !1809, !1810, !1811, !1812, !1814, !1815, !1820, !1821, !1822, !1823, !1824, !1825}
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1804, file: !354, line: 2356, baseType: !1807, size: 64)
!1807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!1808 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1804, file: !354, line: 2357, baseType: !1069, size: 64, offset: 64)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1804, file: !354, line: 2358, baseType: !962, size: 32, offset: 128)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1804, file: !354, line: 2359, baseType: !962, size: 32, offset: 160)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1804, file: !354, line: 2360, baseType: !1813, size: 128, offset: 192)
!1813 = !DICompositeType(tag: DW_TAG_array_type, baseType: !962, size: 128, elements: !1138)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1804, file: !354, line: 2364, baseType: !962, size: 32, offset: 320)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1804, file: !354, line: 2367, baseType: !1816, size: 128, offset: 384)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !1817)
!1817 = !{!1818, !1819}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1816, file: !354, line: 2351, baseType: !1043, size: 64)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1816, file: !354, line: 2352, baseType: !921, size: 64, offset: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1804, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1804, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1804, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1804, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1804, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1804, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1637, file: !1638, line: 504, baseType: !1827, size: 64, offset: 704)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1828, size: 64)
!1828 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1638, line: 504, flags: DIFlagFwdDecl)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1637, file: !1638, line: 507, baseType: !1680, size: 64, offset: 768)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1637, file: !1638, line: 510, baseType: !962, size: 32, offset: 832)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1637, file: !1638, line: 513, baseType: !962, size: 32, offset: 864)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1637, file: !1638, line: 516, baseType: !993, size: 32, offset: 896)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1637, file: !1638, line: 519, baseType: !993, size: 32, offset: 928)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1637, file: !1638, line: 522, baseType: !7, size: 32, offset: 960)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1637, file: !1638, line: 523, baseType: !7, size: 32, offset: 992)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1637, file: !1638, line: 528, baseType: !1069, size: 64, offset: 1024)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1637, file: !1638, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1637, file: !1638, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1637, file: !1638, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1637, file: !1638, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1637, file: !1638, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1637, file: !1638, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1637, file: !1638, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1637, file: !1638, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1637, file: !1638, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1637, file: !1638, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1637, file: !1638, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1637, file: !1638, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1637, file: !1638, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1637, file: !1638, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1637, file: !1638, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1637, file: !1638, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1632, file: !135, line: 3254, baseType: !865, size: 64, offset: 1536)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1632, file: !135, line: 3257, baseType: !865, size: 64, offset: 1600)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1632, file: !135, line: 3258, baseType: !865, size: 64, offset: 1664)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1632, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1632, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1632, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1632, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1632, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1632, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1632, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1632, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1632, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1632, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1632, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1632, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1632, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1632, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1632, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1632, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1632, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1632, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !868, file: !135, line: 3394, baseType: !1875, size: 1344)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1876)
!1876 = !{!1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1875, file: !135, line: 2280, baseType: !904, size: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1875, file: !135, line: 2281, baseType: !865, size: 64, offset: 192)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1875, file: !135, line: 2282, baseType: !865, size: 64, offset: 256)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1875, file: !135, line: 2283, baseType: !865, size: 64, offset: 320)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1875, file: !135, line: 2284, baseType: !865, size: 64, offset: 384)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1875, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1875, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1875, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1875, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1875, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1875, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1875, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1875, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1875, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1875, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1875, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1875, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1875, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1875, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1875, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1875, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1875, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1875, file: !135, line: 2306, baseType: !1505, size: 32, offset: 544)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1875, file: !135, line: 2307, baseType: !865, size: 64, offset: 576)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1875, file: !135, line: 2308, baseType: !865, size: 64, offset: 640)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1875, file: !135, line: 2314, baseType: !1903, size: 64, offset: 704)
!1903 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1904)
!1904 = !{!1905, !1906, !1907}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1903, file: !135, line: 2310, baseType: !962, size: 32)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1903, file: !135, line: 2311, baseType: !1069, size: 64)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1903, file: !135, line: 2312, baseType: !1908, size: 64)
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1875, file: !135, line: 2315, baseType: !865, size: 64, offset: 768)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1875, file: !135, line: 2316, baseType: !865, size: 64, offset: 832)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1875, file: !135, line: 2317, baseType: !865, size: 64, offset: 896)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1875, file: !135, line: 2318, baseType: !865, size: 64, offset: 960)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1875, file: !135, line: 2319, baseType: !865, size: 64, offset: 1024)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1875, file: !135, line: 2320, baseType: !865, size: 64, offset: 1088)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1875, file: !135, line: 2321, baseType: !865, size: 64, offset: 1152)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1875, file: !135, line: 2322, baseType: !865, size: 64, offset: 1216)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1875, file: !135, line: 2324, baseType: !1919, size: 64, offset: 1280)
!1919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1920, size: 64)
!1920 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !868, file: !135, line: 3395, baseType: !1922, size: 320)
!1922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1923)
!1923 = !{!1924, !1925, !1926}
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1922, file: !135, line: 1470, baseType: !904, size: 192)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1922, file: !135, line: 1471, baseType: !865, size: 64, offset: 192)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1922, file: !135, line: 1472, baseType: !865, size: 64, offset: 256)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !868, file: !135, line: 3396, baseType: !1928, size: 320)
!1928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1929)
!1929 = !{!1930, !1931, !1932}
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1928, file: !135, line: 1483, baseType: !904, size: 192)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1928, file: !135, line: 1484, baseType: !962, size: 32, offset: 192)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1928, file: !135, line: 1485, baseType: !1249, size: 64, offset: 256)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !868, file: !135, line: 3397, baseType: !1934, size: 384)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1935)
!1935 = !{!1936, !1937, !1938, !1939}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1934, file: !135, line: 1830, baseType: !904, size: 192)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1934, file: !135, line: 1831, baseType: !993, size: 32, offset: 192)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1934, file: !135, line: 1832, baseType: !865, size: 64, offset: 256)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1934, file: !135, line: 1835, baseType: !1249, size: 64, offset: 320)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !868, file: !135, line: 3398, baseType: !1941, size: 704)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1942)
!1942 = !{!1943, !1944, !1945, !1946, !1947, !1952}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1941, file: !135, line: 1899, baseType: !904, size: 192)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1941, file: !135, line: 1902, baseType: !865, size: 64, offset: 192)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1941, file: !135, line: 1905, baseType: !1196, size: 64, offset: 256)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1941, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1941, file: !135, line: 1911, baseType: !1948, size: 64, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1949, size: 64)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1588, line: 117, size: 128, elements: !1950)
!1950 = !{!1951}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1949, file: !1588, line: 120, baseType: !1755, size: 128)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1941, file: !135, line: 1914, baseType: !1237, size: 256, offset: 448)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !868, file: !135, line: 3399, baseType: !1954, size: 704)
!1954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1955)
!1955 = !{!1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966}
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1954, file: !135, line: 2009, baseType: !904, size: 192)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1954, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1954, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1954, file: !135, line: 2014, baseType: !993, size: 32, offset: 224)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1954, file: !135, line: 2016, baseType: !865, size: 64, offset: 256)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1954, file: !135, line: 2017, baseType: !1742, size: 64, offset: 320)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1954, file: !135, line: 2019, baseType: !865, size: 64, offset: 384)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1954, file: !135, line: 2020, baseType: !865, size: 64, offset: 448)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1954, file: !135, line: 2021, baseType: !865, size: 64, offset: 512)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1954, file: !135, line: 2022, baseType: !865, size: 64, offset: 576)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1954, file: !135, line: 2023, baseType: !865, size: 64, offset: 640)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !868, file: !135, line: 3400, baseType: !1968, size: 832)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1969)
!1969 = !{!1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1968, file: !135, line: 2431, baseType: !904, size: 192)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1968, file: !135, line: 2433, baseType: !865, size: 64, offset: 192)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1968, file: !135, line: 2434, baseType: !865, size: 64, offset: 256)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1968, file: !135, line: 2435, baseType: !865, size: 64, offset: 320)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1968, file: !135, line: 2436, baseType: !865, size: 64, offset: 384)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1968, file: !135, line: 2437, baseType: !1742, size: 64, offset: 448)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1968, file: !135, line: 2438, baseType: !865, size: 64, offset: 512)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1968, file: !135, line: 2440, baseType: !865, size: 64, offset: 576)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1968, file: !135, line: 2441, baseType: !865, size: 64, offset: 640)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1968, file: !135, line: 2443, baseType: !1980, size: 128, offset: 704)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1981)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1982)
!1982 = !{!1983}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1981, file: !135, line: 182, baseType: !1747, size: 128)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !868, file: !135, line: 3401, baseType: !1985, size: 320)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1986)
!1986 = !{!1987, !1988, !1995}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1985, file: !135, line: 3329, baseType: !904, size: 192)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1985, file: !135, line: 3330, baseType: !1989, size: 64, offset: 192)
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1990, size: 64)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1991)
!1991 = !{!1992, !1993, !1994}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1990, file: !135, line: 3322, baseType: !1989, size: 64)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1990, file: !135, line: 3323, baseType: !1989, size: 64, offset: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1990, file: !135, line: 3324, baseType: !865, size: 64, offset: 128)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1985, file: !135, line: 3331, baseType: !1989, size: 64, offset: 256)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !868, file: !135, line: 3402, baseType: !1997, size: 256)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1998)
!1998 = !{!1999, !2000}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1997, file: !135, line: 1541, baseType: !904, size: 192)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1997, file: !135, line: 1542, baseType: !2001, size: 64, offset: 192)
!2001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2002, size: 64)
!2002 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2003)
!2003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2004)
!2004 = !{!2005}
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2003, file: !135, line: 1538, baseType: !2006, size: 192)
!2006 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2007)
!2007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2008)
!2008 = !{!2009, !2010, !2011}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2007, file: !135, line: 1537, baseType: !7, size: 32)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2007, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2007, file: !135, line: 1537, baseType: !2012, size: 128, offset: 64)
!2012 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2013, size: 128, elements: !966)
!2013 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2014)
!2014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2015)
!2015 = !{!2016, !2017}
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2014, file: !135, line: 1533, baseType: !865, size: 64)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2014, file: !135, line: 1534, baseType: !865, size: 64, offset: 64)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !868, file: !135, line: 3403, baseType: !2019, size: 512)
!2019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2020)
!2020 = !{!2021, !2022, !2023, !2024, !2030, !2031, !2032}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2019, file: !135, line: 1939, baseType: !904, size: 192)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2019, file: !135, line: 1940, baseType: !993, size: 32, offset: 192)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2019, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2019, file: !135, line: 1946, baseType: !2025, size: 32, offset: 256)
!2025 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2026)
!2026 = !{!2027, !2028, !2029}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2025, file: !135, line: 1943, baseType: !376, size: 32)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2025, file: !135, line: 1944, baseType: !383, size: 32)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2025, file: !135, line: 1945, baseType: !134, size: 32)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2019, file: !135, line: 1950, baseType: !1186, size: 64, offset: 320)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2019, file: !135, line: 1951, baseType: !1186, size: 64, offset: 384)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2019, file: !135, line: 1953, baseType: !1249, size: 64, offset: 448)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !868, file: !135, line: 3404, baseType: !2034, size: 1664)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2035)
!2035 = !{!2036, !2037}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2034, file: !135, line: 3338, baseType: !904, size: 192)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2034, file: !135, line: 3341, baseType: !2038, size: 1472, offset: 192)
!2038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2039, line: 410, size: 1472, elements: !2040)
!2039 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2040 = !{!2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2038, file: !2039, line: 412, baseType: !962, size: 32)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2038, file: !2039, line: 413, baseType: !962, size: 32, offset: 32)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2038, file: !2039, line: 414, baseType: !962, size: 32, offset: 64)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2038, file: !2039, line: 415, baseType: !962, size: 32, offset: 96)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2038, file: !2039, line: 416, baseType: !962, size: 32, offset: 128)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2038, file: !2039, line: 417, baseType: !962, size: 32, offset: 160)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2038, file: !2039, line: 418, baseType: !985, size: 8, offset: 192)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2038, file: !2039, line: 419, baseType: !985, size: 8, offset: 200)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2038, file: !2039, line: 420, baseType: !2050, size: 8, offset: 208)
!2050 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2038, file: !2039, line: 421, baseType: !2050, size: 8, offset: 216)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2038, file: !2039, line: 422, baseType: !2050, size: 8, offset: 224)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2038, file: !2039, line: 423, baseType: !2050, size: 8, offset: 232)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2038, file: !2039, line: 424, baseType: !2050, size: 8, offset: 240)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2038, file: !2039, line: 425, baseType: !2050, size: 8, offset: 248)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2038, file: !2039, line: 426, baseType: !2050, size: 8, offset: 256)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2038, file: !2039, line: 427, baseType: !2050, size: 8, offset: 264)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2038, file: !2039, line: 428, baseType: !2050, size: 8, offset: 272)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2038, file: !2039, line: 429, baseType: !2050, size: 8, offset: 280)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2038, file: !2039, line: 430, baseType: !2050, size: 8, offset: 288)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2038, file: !2039, line: 431, baseType: !2050, size: 8, offset: 296)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2038, file: !2039, line: 432, baseType: !2050, size: 8, offset: 304)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2038, file: !2039, line: 433, baseType: !2050, size: 8, offset: 312)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2038, file: !2039, line: 434, baseType: !2050, size: 8, offset: 320)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2038, file: !2039, line: 435, baseType: !2050, size: 8, offset: 328)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2038, file: !2039, line: 436, baseType: !2050, size: 8, offset: 336)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2038, file: !2039, line: 437, baseType: !2050, size: 8, offset: 344)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2038, file: !2039, line: 438, baseType: !2050, size: 8, offset: 352)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2038, file: !2039, line: 439, baseType: !2050, size: 8, offset: 360)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2038, file: !2039, line: 440, baseType: !2050, size: 8, offset: 368)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2038, file: !2039, line: 441, baseType: !2050, size: 8, offset: 376)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2038, file: !2039, line: 442, baseType: !2050, size: 8, offset: 384)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2038, file: !2039, line: 443, baseType: !2050, size: 8, offset: 392)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2038, file: !2039, line: 444, baseType: !2050, size: 8, offset: 400)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2038, file: !2039, line: 445, baseType: !2050, size: 8, offset: 408)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2038, file: !2039, line: 446, baseType: !2050, size: 8, offset: 416)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2038, file: !2039, line: 447, baseType: !2050, size: 8, offset: 424)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2038, file: !2039, line: 448, baseType: !2050, size: 8, offset: 432)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2038, file: !2039, line: 449, baseType: !2050, size: 8, offset: 440)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2038, file: !2039, line: 450, baseType: !2050, size: 8, offset: 448)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2038, file: !2039, line: 451, baseType: !2050, size: 8, offset: 456)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2038, file: !2039, line: 452, baseType: !2050, size: 8, offset: 464)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2038, file: !2039, line: 453, baseType: !2050, size: 8, offset: 472)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2038, file: !2039, line: 454, baseType: !2050, size: 8, offset: 480)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2038, file: !2039, line: 455, baseType: !2050, size: 8, offset: 488)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2038, file: !2039, line: 456, baseType: !2050, size: 8, offset: 496)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2038, file: !2039, line: 457, baseType: !2050, size: 8, offset: 504)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2038, file: !2039, line: 458, baseType: !2050, size: 8, offset: 512)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2038, file: !2039, line: 459, baseType: !2050, size: 8, offset: 520)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2038, file: !2039, line: 460, baseType: !2050, size: 8, offset: 528)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2038, file: !2039, line: 461, baseType: !2050, size: 8, offset: 536)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2038, file: !2039, line: 462, baseType: !2050, size: 8, offset: 544)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2038, file: !2039, line: 463, baseType: !2050, size: 8, offset: 552)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2038, file: !2039, line: 464, baseType: !2050, size: 8, offset: 560)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2038, file: !2039, line: 465, baseType: !2050, size: 8, offset: 568)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2038, file: !2039, line: 466, baseType: !2050, size: 8, offset: 576)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2038, file: !2039, line: 467, baseType: !2050, size: 8, offset: 584)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2038, file: !2039, line: 468, baseType: !2050, size: 8, offset: 592)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2038, file: !2039, line: 469, baseType: !2050, size: 8, offset: 600)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2038, file: !2039, line: 470, baseType: !2050, size: 8, offset: 608)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2038, file: !2039, line: 471, baseType: !2050, size: 8, offset: 616)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2038, file: !2039, line: 472, baseType: !2050, size: 8, offset: 624)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2038, file: !2039, line: 473, baseType: !2050, size: 8, offset: 632)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2038, file: !2039, line: 474, baseType: !2050, size: 8, offset: 640)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2038, file: !2039, line: 475, baseType: !2050, size: 8, offset: 648)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2038, file: !2039, line: 476, baseType: !2050, size: 8, offset: 656)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2038, file: !2039, line: 477, baseType: !2050, size: 8, offset: 664)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2038, file: !2039, line: 478, baseType: !2050, size: 8, offset: 672)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2038, file: !2039, line: 479, baseType: !2050, size: 8, offset: 680)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2038, file: !2039, line: 480, baseType: !2050, size: 8, offset: 688)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2038, file: !2039, line: 481, baseType: !2050, size: 8, offset: 696)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2038, file: !2039, line: 482, baseType: !2050, size: 8, offset: 704)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2038, file: !2039, line: 483, baseType: !2050, size: 8, offset: 712)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2038, file: !2039, line: 484, baseType: !2050, size: 8, offset: 720)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2038, file: !2039, line: 485, baseType: !2050, size: 8, offset: 728)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2038, file: !2039, line: 486, baseType: !2050, size: 8, offset: 736)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2038, file: !2039, line: 487, baseType: !2050, size: 8, offset: 744)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2038, file: !2039, line: 488, baseType: !2050, size: 8, offset: 752)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2038, file: !2039, line: 489, baseType: !2050, size: 8, offset: 760)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2038, file: !2039, line: 490, baseType: !2050, size: 8, offset: 768)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2038, file: !2039, line: 491, baseType: !2050, size: 8, offset: 776)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2038, file: !2039, line: 492, baseType: !2050, size: 8, offset: 784)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2038, file: !2039, line: 493, baseType: !2050, size: 8, offset: 792)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2038, file: !2039, line: 494, baseType: !2050, size: 8, offset: 800)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2038, file: !2039, line: 495, baseType: !2050, size: 8, offset: 808)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2038, file: !2039, line: 496, baseType: !2050, size: 8, offset: 816)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2038, file: !2039, line: 497, baseType: !2050, size: 8, offset: 824)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2038, file: !2039, line: 498, baseType: !2050, size: 8, offset: 832)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2038, file: !2039, line: 499, baseType: !2050, size: 8, offset: 840)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2038, file: !2039, line: 500, baseType: !2050, size: 8, offset: 848)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2038, file: !2039, line: 501, baseType: !2050, size: 8, offset: 856)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2038, file: !2039, line: 502, baseType: !2050, size: 8, offset: 864)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2038, file: !2039, line: 503, baseType: !2050, size: 8, offset: 872)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2038, file: !2039, line: 504, baseType: !2050, size: 8, offset: 880)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2038, file: !2039, line: 505, baseType: !2050, size: 8, offset: 888)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2038, file: !2039, line: 506, baseType: !2050, size: 8, offset: 896)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2038, file: !2039, line: 507, baseType: !2050, size: 8, offset: 904)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2038, file: !2039, line: 508, baseType: !2050, size: 8, offset: 912)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2038, file: !2039, line: 509, baseType: !2050, size: 8, offset: 920)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2038, file: !2039, line: 510, baseType: !2050, size: 8, offset: 928)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2038, file: !2039, line: 511, baseType: !2050, size: 8, offset: 936)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2038, file: !2039, line: 512, baseType: !2050, size: 8, offset: 944)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2038, file: !2039, line: 513, baseType: !2050, size: 8, offset: 952)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2038, file: !2039, line: 514, baseType: !2050, size: 8, offset: 960)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2038, file: !2039, line: 515, baseType: !2050, size: 8, offset: 968)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2038, file: !2039, line: 516, baseType: !2050, size: 8, offset: 976)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2038, file: !2039, line: 517, baseType: !2050, size: 8, offset: 984)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2038, file: !2039, line: 518, baseType: !2050, size: 8, offset: 992)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2038, file: !2039, line: 519, baseType: !2050, size: 8, offset: 1000)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2038, file: !2039, line: 520, baseType: !2050, size: 8, offset: 1008)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2038, file: !2039, line: 521, baseType: !2050, size: 8, offset: 1016)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2038, file: !2039, line: 522, baseType: !2050, size: 8, offset: 1024)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2038, file: !2039, line: 523, baseType: !2050, size: 8, offset: 1032)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2038, file: !2039, line: 524, baseType: !2050, size: 8, offset: 1040)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2038, file: !2039, line: 525, baseType: !2050, size: 8, offset: 1048)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2038, file: !2039, line: 526, baseType: !2050, size: 8, offset: 1056)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2038, file: !2039, line: 527, baseType: !2050, size: 8, offset: 1064)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2038, file: !2039, line: 528, baseType: !2050, size: 8, offset: 1072)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2038, file: !2039, line: 529, baseType: !2050, size: 8, offset: 1080)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2038, file: !2039, line: 530, baseType: !2050, size: 8, offset: 1088)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2038, file: !2039, line: 531, baseType: !2050, size: 8, offset: 1096)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2038, file: !2039, line: 532, baseType: !2050, size: 8, offset: 1104)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2038, file: !2039, line: 533, baseType: !2050, size: 8, offset: 1112)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2038, file: !2039, line: 534, baseType: !2050, size: 8, offset: 1120)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2038, file: !2039, line: 535, baseType: !2050, size: 8, offset: 1128)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2038, file: !2039, line: 536, baseType: !2050, size: 8, offset: 1136)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2038, file: !2039, line: 537, baseType: !2050, size: 8, offset: 1144)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2038, file: !2039, line: 538, baseType: !2050, size: 8, offset: 1152)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2038, file: !2039, line: 539, baseType: !2050, size: 8, offset: 1160)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2038, file: !2039, line: 540, baseType: !2050, size: 8, offset: 1168)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2038, file: !2039, line: 541, baseType: !2050, size: 8, offset: 1176)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2038, file: !2039, line: 542, baseType: !2050, size: 8, offset: 1184)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2038, file: !2039, line: 543, baseType: !2050, size: 8, offset: 1192)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2038, file: !2039, line: 544, baseType: !2050, size: 8, offset: 1200)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2038, file: !2039, line: 545, baseType: !2050, size: 8, offset: 1208)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2038, file: !2039, line: 546, baseType: !2050, size: 8, offset: 1216)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2038, file: !2039, line: 547, baseType: !2050, size: 8, offset: 1224)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2038, file: !2039, line: 548, baseType: !2050, size: 8, offset: 1232)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2038, file: !2039, line: 549, baseType: !2050, size: 8, offset: 1240)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2038, file: !2039, line: 550, baseType: !2050, size: 8, offset: 1248)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2038, file: !2039, line: 551, baseType: !2050, size: 8, offset: 1256)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2038, file: !2039, line: 552, baseType: !2050, size: 8, offset: 1264)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2038, file: !2039, line: 553, baseType: !2050, size: 8, offset: 1272)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2038, file: !2039, line: 554, baseType: !2050, size: 8, offset: 1280)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2038, file: !2039, line: 555, baseType: !2050, size: 8, offset: 1288)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2038, file: !2039, line: 556, baseType: !2050, size: 8, offset: 1296)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2038, file: !2039, line: 557, baseType: !2050, size: 8, offset: 1304)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2038, file: !2039, line: 558, baseType: !2050, size: 8, offset: 1312)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2038, file: !2039, line: 559, baseType: !2050, size: 8, offset: 1320)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2038, file: !2039, line: 560, baseType: !2050, size: 8, offset: 1328)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2038, file: !2039, line: 561, baseType: !2050, size: 8, offset: 1336)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2038, file: !2039, line: 562, baseType: !2050, size: 8, offset: 1344)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2038, file: !2039, line: 563, baseType: !2050, size: 8, offset: 1352)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2038, file: !2039, line: 564, baseType: !2050, size: 8, offset: 1360)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2038, file: !2039, line: 565, baseType: !2050, size: 8, offset: 1368)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2038, file: !2039, line: 566, baseType: !2050, size: 8, offset: 1376)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2038, file: !2039, line: 567, baseType: !2050, size: 8, offset: 1384)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2038, file: !2039, line: 568, baseType: !2050, size: 8, offset: 1392)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2038, file: !2039, line: 569, baseType: !2050, size: 8, offset: 1400)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2038, file: !2039, line: 570, baseType: !2050, size: 8, offset: 1408)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2038, file: !2039, line: 571, baseType: !2050, size: 8, offset: 1416)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2038, file: !2039, line: 572, baseType: !2050, size: 8, offset: 1424)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2038, file: !2039, line: 573, baseType: !2050, size: 8, offset: 1432)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2038, file: !2039, line: 574, baseType: !2050, size: 8, offset: 1440)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !868, file: !135, line: 3405, baseType: !2206, size: 384)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2207)
!2207 = !{!2208, !2209}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2206, file: !135, line: 3353, baseType: !904, size: 192)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2206, file: !135, line: 3356, baseType: !2210, size: 192, offset: 192)
!2210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2039, line: 578, size: 192, elements: !2211)
!2211 = !{!2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2210, file: !2039, line: 580, baseType: !962, size: 32)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2210, file: !2039, line: 581, baseType: !962, size: 32, offset: 32)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2210, file: !2039, line: 582, baseType: !962, size: 32, offset: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2210, file: !2039, line: 583, baseType: !962, size: 32, offset: 96)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2210, file: !2039, line: 584, baseType: !985, size: 8, offset: 128)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2210, file: !2039, line: 585, baseType: !985, size: 8, offset: 136)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2210, file: !2039, line: 586, baseType: !985, size: 8, offset: 144)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2210, file: !2039, line: 587, baseType: !985, size: 8, offset: 152)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2210, file: !2039, line: 588, baseType: !985, size: 8, offset: 160)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2210, file: !2039, line: 589, baseType: !985, size: 8, offset: 168)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2210, file: !2039, line: 590, baseType: !985, size: 8, offset: 176)
!2223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !921, size: 64)
!2225 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !2226, line: 267, baseType: !2227)
!2226 = !DIFile(filename: "/usr/include/unistd.h", directory: "")
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intptr_t", file: !2228, line: 206, baseType: !921)
!2228 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2230, size: 64)
!2230 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1198)
!2231 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !852, line: 30, baseType: !2232)
!2232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2233, size: 64)
!2233 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1237)
!2234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2235, size: 64)
!2235 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2236)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2237)
!2237 = !{!2238}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2236, file: !135, line: 184, baseType: !1747, size: 128)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_operand_entry_t_heap", file: !3, line: 298, baseType: !2241)
!2241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_operand_entry_t_heap", file: !3, line: 298, size: 128, elements: !2242)
!2242 = !{!2243}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2241, file: !3, line: 298, baseType: !2244, size: 128)
!2244 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_operand_entry_t_base", file: !3, line: 297, baseType: !2245)
!2245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_operand_entry_t_base", file: !3, line: 297, size: 128, elements: !2246)
!2246 = !{!2247, !2248, !2249}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2245, file: !3, line: 297, baseType: !7, size: 32)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2245, file: !3, line: 297, baseType: !7, size: 32, offset: 32)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2245, file: !3, line: 297, baseType: !2250, size: 64, offset: 64)
!2250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !859, size: 64, elements: !966)
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!2252 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !859)
!2253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_oecount_heap", file: !3, line: 742, baseType: !2256)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_oecount_heap", file: !3, line: 742, size: 192, elements: !2257)
!2257 = !{!2258}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2256, file: !3, line: 742, baseType: !2259, size: 192)
!2259 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_oecount_base", file: !3, line: 741, baseType: !2260)
!2260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_oecount_base", file: !3, line: 741, size: 192, elements: !2261)
!2261 = !{!2262, !2263, !2264}
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2260, file: !3, line: 741, baseType: !7, size: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2260, file: !3, line: 741, baseType: !7, size: 32, offset: 32)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2260, file: !3, line: 741, baseType: !2265, size: 128, offset: 64)
!2265 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2266, size: 128, elements: !966)
!2266 = !DIDerivedType(tag: DW_TAG_typedef, name: "oecount", file: !3, line: 739, baseType: !2267)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "oecount_s", file: !3, line: 735, size: 128, elements: !2268)
!2268 = !{!2269, !2270, !2271}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "cnt", scope: !2267, file: !3, line: 736, baseType: !962, size: 32)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "oecode", scope: !2267, file: !3, line: 737, baseType: !134, size: 32, offset: 32)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2267, file: !3, line: 738, baseType: !865, size: 64, offset: 64)
!2272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2273, size: 64)
!2273 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2266)
!2274 = !{!0, !2275, !2283, !2306, !2308, !2310, !2312}
!2275 = !DIGlobalVariableExpression(var: !2276, expr: !DIExpression())
!2276 = distinct !DIGlobalVariable(name: "reassociate_stats", scope: !2, file: !3, line: 169, type: !2277, isLocal: true, isDefinition: true)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 163, size: 128, elements: !2278)
!2278 = !{!2279, !2280, !2281, !2282}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "linearized", scope: !2277, file: !3, line: 165, baseType: !962, size: 32)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "constants_eliminated", scope: !2277, file: !3, line: 166, baseType: !962, size: 32, offset: 32)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "ops_eliminated", scope: !2277, file: !3, line: 167, baseType: !962, size: 32, offset: 64)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "rewritten", scope: !2277, file: !3, line: 168, baseType: !962, size: 32, offset: 96)
!2283 = !DIGlobalVariableExpression(var: !2284, expr: !DIExpression())
!2284 = distinct !DIGlobalVariable(name: "operand_entry_pool", scope: !2, file: !3, line: 178, type: !2285, isLocal: true, isDefinition: true)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2286, line: 58, baseType: !2287)
!2286 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2286, line: 32, size: 704, elements: !2289)
!2289 = !{!2290, !2291, !2292, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2288, file: !2286, line: 34, baseType: !1069, size: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2288, file: !2286, line: 38, baseType: !1341, size: 64, offset: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2288, file: !2286, line: 41, baseType: !2293, size: 64, offset: 128)
!2293 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2286, line: 30, baseType: !2294)
!2294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2295, size: 64)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2286, line: 26, size: 64, elements: !2296)
!2296 = !{!2297}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2295, file: !2286, line: 28, baseType: !2294, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2288, file: !2286, line: 45, baseType: !1134, size: 64, offset: 192)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2288, file: !2286, line: 49, baseType: !1341, size: 64, offset: 256)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2288, file: !2286, line: 51, baseType: !1341, size: 64, offset: 320)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2288, file: !2286, line: 52, baseType: !1341, size: 64, offset: 384)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2288, file: !2286, line: 53, baseType: !1341, size: 64, offset: 448)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2288, file: !2286, line: 54, baseType: !2293, size: 64, offset: 512)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2288, file: !2286, line: 55, baseType: !1341, size: 64, offset: 576)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2288, file: !2286, line: 56, baseType: !1341, size: 64, offset: 640)
!2306 = !DIGlobalVariableExpression(var: !2307, expr: !DIExpression())
!2307 = distinct !DIGlobalVariable(name: "bb_rank", scope: !2, file: !3, line: 184, type: !2224, isLocal: true, isDefinition: true)
!2308 = !DIGlobalVariableExpression(var: !2309, expr: !DIExpression())
!2309 = distinct !DIGlobalVariable(name: "operand_rank", scope: !2, file: !3, line: 187, type: !1768, isLocal: true, isDefinition: true)
!2310 = !DIGlobalVariableExpression(var: !2311, expr: !DIExpression())
!2311 = distinct !DIGlobalVariable(name: "broken_up_subtracts", scope: !2, file: !3, line: 1508, type: !2234, isLocal: true, isDefinition: true)
!2312 = !DIGlobalVariableExpression(var: !2313, expr: !DIExpression())
!2313 = distinct !DIGlobalVariable(name: "cvec", scope: !2, file: !3, line: 745, type: !2254, isLocal: true, isDefinition: true)
!2314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !391, line: 156, size: 640, elements: !2315)
!2315 = !{!2316}
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2314, file: !391, line: 158, baseType: !2317, size: 640)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !391, line: 114, size: 640, elements: !2318)
!2318 = !{!2319, !2320, !2321, !2325, !2329, !2331, !2332, !2333, !2335, !2336, !2337, !2338, !2339}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2317, file: !391, line: 117, baseType: !390, size: 32)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2317, file: !391, line: 121, baseType: !1069, size: 64, offset: 64)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2317, file: !391, line: 125, baseType: !2322, size: 64, offset: 128)
!2322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2323, size: 64)
!2323 = !DISubroutineType(types: !2324)
!2324 = !{!985}
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2317, file: !391, line: 130, baseType: !2326, size: 64, offset: 192)
!2326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2327 = !DISubroutineType(types: !2328)
!2328 = !{!7}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2317, file: !391, line: 133, baseType: !2330, size: 64, offset: 256)
!2330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2317, size: 64)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2317, file: !391, line: 136, baseType: !2330, size: 64, offset: 320)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2317, file: !391, line: 139, baseType: !962, size: 32, offset: 384)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2317, file: !391, line: 143, baseType: !2334, size: 32, offset: 416)
!2334 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !398, line: 80, baseType: !397)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2317, file: !391, line: 146, baseType: !7, size: 32, offset: 448)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2317, file: !391, line: 147, baseType: !7, size: 32, offset: 480)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2317, file: !391, line: 148, baseType: !7, size: 32, offset: 512)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2317, file: !391, line: 151, baseType: !7, size: 32, offset: 544)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2317, file: !391, line: 152, baseType: !7, size: 32, offset: 576)
!2340 = !{i32 7, !"Dwarf Version", i32 4}
!2341 = !{i32 2, !"Debug Info Version", i32 3}
!2342 = !{i32 1, !"wchar_size", i32 4}
!2343 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2344 = distinct !DISubprogram(name: "dump_ops_vector", scope: !3, file: !3, line: 1958, type: !2345, scopeLine: 1959, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2345 = !DISubroutineType(types: !2346)
!2346 = !{null, !2347, !2239}
!2347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2348, size: 64)
!2348 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2349, line: 7, baseType: !2350)
!2349 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2351, line: 49, size: 1728, elements: !2352)
!2351 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2352 = !{!2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2368, !2370, !2371, !2372, !2374, !2376, !2377, !2378, !2381, !2383, !2386, !2389, !2390, !2391, !2392, !2393}
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2350, file: !2351, line: 51, baseType: !962, size: 32)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2350, file: !2351, line: 54, baseType: !1134, size: 64, offset: 64)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2350, file: !2351, line: 55, baseType: !1134, size: 64, offset: 128)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2350, file: !2351, line: 56, baseType: !1134, size: 64, offset: 192)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2350, file: !2351, line: 57, baseType: !1134, size: 64, offset: 256)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2350, file: !2351, line: 58, baseType: !1134, size: 64, offset: 320)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2350, file: !2351, line: 59, baseType: !1134, size: 64, offset: 384)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2350, file: !2351, line: 60, baseType: !1134, size: 64, offset: 448)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2350, file: !2351, line: 61, baseType: !1134, size: 64, offset: 512)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2350, file: !2351, line: 64, baseType: !1134, size: 64, offset: 576)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2350, file: !2351, line: 65, baseType: !1134, size: 64, offset: 640)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2350, file: !2351, line: 66, baseType: !1134, size: 64, offset: 704)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2350, file: !2351, line: 68, baseType: !2366, size: 64, offset: 768)
!2366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2367, size: 64)
!2367 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2351, line: 36, flags: DIFlagFwdDecl)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2350, file: !2351, line: 70, baseType: !2369, size: 64, offset: 832)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2350, file: !2351, line: 72, baseType: !962, size: 32, offset: 896)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2350, file: !2351, line: 73, baseType: !962, size: 32, offset: 928)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2350, file: !2351, line: 74, baseType: !2373, size: 64, offset: 960)
!2373 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2228, line: 152, baseType: !921)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2350, file: !2351, line: 77, baseType: !2375, size: 16, offset: 1024)
!2375 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2350, file: !2351, line: 78, baseType: !2050, size: 8, offset: 1040)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2350, file: !2351, line: 79, baseType: !964, size: 8, offset: 1048)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2350, file: !2351, line: 81, baseType: !2379, size: 64, offset: 1088)
!2379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2380, size: 64)
!2380 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2351, line: 43, baseType: null)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2350, file: !2351, line: 89, baseType: !2382, size: 64, offset: 1152)
!2382 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2228, line: 153, baseType: !921)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2350, file: !2351, line: 91, baseType: !2384, size: 64, offset: 1216)
!2384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2385, size: 64)
!2385 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2351, line: 37, flags: DIFlagFwdDecl)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2350, file: !2351, line: 92, baseType: !2387, size: 64, offset: 1280)
!2387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2388, size: 64)
!2388 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2351, line: 38, flags: DIFlagFwdDecl)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2350, file: !2351, line: 93, baseType: !2369, size: 64, offset: 1344)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2350, file: !2351, line: 94, baseType: !1149, size: 64, offset: 1408)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2350, file: !2351, line: 95, baseType: !1341, size: 64, offset: 1472)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2350, file: !2351, line: 96, baseType: !962, size: 32, offset: 1536)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2350, file: !2351, line: 98, baseType: !2394, size: 160, offset: 1568)
!2394 = !DICompositeType(tag: DW_TAG_array_type, baseType: !965, size: 160, elements: !2395)
!2395 = !{!2396}
!2396 = !DISubrange(count: 20)
!2397 = !{}
!2398 = !DILocalVariable(name: "file", arg: 1, scope: !2344, file: !3, line: 1958, type: !2347)
!2399 = !DILocation(line: 1958, column: 24, scope: !2344)
!2400 = !DILocalVariable(name: "ops", arg: 2, scope: !2344, file: !3, line: 1958, type: !2239)
!2401 = !DILocation(line: 1958, column: 59, scope: !2344)
!2402 = !DILocalVariable(name: "oe", scope: !2344, file: !3, line: 1960, type: !859)
!2403 = !DILocation(line: 1960, column: 19, scope: !2344)
!2404 = !DILocalVariable(name: "i", scope: !2344, file: !3, line: 1961, type: !7)
!2405 = !DILocation(line: 1961, column: 16, scope: !2344)
!2406 = !DILocation(line: 1963, column: 10, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2344, file: !3, line: 1963, column: 3)
!2408 = !DILocation(line: 1963, column: 8, scope: !2407)
!2409 = !DILocation(line: 1963, column: 15, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2407, file: !3, line: 1963, column: 3)
!2411 = !DILocation(line: 1963, column: 3, scope: !2407)
!2412 = !DILocation(line: 1965, column: 16, scope: !2413)
!2413 = distinct !DILexicalBlock(scope: !2410, file: !3, line: 1964, column: 5)
!2414 = !DILocation(line: 1965, column: 51, scope: !2413)
!2415 = !DILocation(line: 1965, column: 54, scope: !2413)
!2416 = !DILocation(line: 1965, column: 58, scope: !2413)
!2417 = !DILocation(line: 1965, column: 7, scope: !2413)
!2418 = !DILocation(line: 1966, column: 27, scope: !2413)
!2419 = !DILocation(line: 1966, column: 33, scope: !2413)
!2420 = !DILocation(line: 1966, column: 37, scope: !2413)
!2421 = !DILocation(line: 1966, column: 7, scope: !2413)
!2422 = !DILocation(line: 1967, column: 5, scope: !2413)
!2423 = !DILocation(line: 1963, column: 59, scope: !2410)
!2424 = !DILocation(line: 1963, column: 3, scope: !2410)
!2425 = distinct !{!2425, !2411, !2426}
!2426 = !DILocation(line: 1967, column: 5, scope: !2407)
!2427 = !DILocation(line: 1968, column: 1, scope: !2344)
!2428 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_iterate", scope: !3, file: !3, line: 297, type: !2429, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2429 = !DISubroutineType(types: !2430)
!2430 = !{!962, !2431, !7, !2433}
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2244)
!2433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !859, size: 64)
!2434 = !DILocalVariable(name: "vec_", arg: 1, scope: !2428, file: !3, line: 297, type: !2431)
!2435 = !DILocation(line: 297, column: 1, scope: !2428)
!2436 = !DILocalVariable(name: "ix_", arg: 2, scope: !2428, file: !3, line: 297, type: !7)
!2437 = !DILocalVariable(name: "ptr", arg: 3, scope: !2428, file: !3, line: 297, type: !2433)
!2438 = !DILocation(line: 297, column: 1, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2428, file: !3, line: 297, column: 1)
!2440 = !DILocation(line: 297, column: 1, scope: !2441)
!2441 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 297, column: 1)
!2442 = !DILocation(line: 297, column: 1, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 297, column: 1)
!2444 = distinct !DISubprogram(name: "debug_ops_vector", scope: !3, file: !3, line: 1973, type: !2445, scopeLine: 1974, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2445 = !DISubroutineType(types: !2446)
!2446 = !{null, !2239}
!2447 = !DILocalVariable(name: "ops", arg: 1, scope: !2444, file: !3, line: 1973, type: !2239)
!2448 = !DILocation(line: 1973, column: 48, scope: !2444)
!2449 = !DILocation(line: 1975, column: 20, scope: !2444)
!2450 = !DILocation(line: 1975, column: 28, scope: !2444)
!2451 = !DILocation(line: 1975, column: 3, scope: !2444)
!2452 = !DILocation(line: 1976, column: 1, scope: !2444)
!2453 = distinct !DISubprogram(name: "gate_tree_ssa_reassoc", scope: !3, file: !3, line: 2077, type: !2323, scopeLine: 2078, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2454 = !DILocation(line: 2079, column: 10, scope: !2453)
!2455 = !DILocation(line: 2079, column: 28, scope: !2453)
!2456 = !DILocation(line: 2079, column: 3, scope: !2453)
!2457 = distinct !DISubprogram(name: "execute_reassoc", scope: !3, file: !3, line: 2065, type: !2327, scopeLine: 2066, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2458 = !DILocation(line: 2067, column: 3, scope: !2457)
!2459 = !DILocation(line: 2069, column: 3, scope: !2457)
!2460 = !DILocation(line: 2070, column: 3, scope: !2457)
!2461 = !DILocation(line: 2072, column: 3, scope: !2457)
!2462 = !DILocation(line: 2073, column: 3, scope: !2457)
!2463 = distinct !DISubprogram(name: "init_reassoc", scope: !3, file: !3, line: 1988, type: !2464, scopeLine: 1989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2464 = !DISubroutineType(types: !2465)
!2465 = !{null}
!2466 = !DILocalVariable(name: "i", scope: !2463, file: !3, line: 1990, type: !962)
!2467 = !DILocation(line: 1990, column: 7, scope: !2463)
!2468 = !DILocalVariable(name: "rank", scope: !2463, file: !3, line: 1991, type: !921)
!2469 = !DILocation(line: 1991, column: 8, scope: !2463)
!2470 = !DILocalVariable(name: "param", scope: !2463, file: !3, line: 1992, type: !865)
!2471 = !DILocation(line: 1992, column: 8, scope: !2463)
!2472 = !DILocalVariable(name: "bbs", scope: !2463, file: !3, line: 1993, type: !2223)
!2473 = !DILocation(line: 1993, column: 8, scope: !2463)
!2474 = !DILocation(line: 1993, column: 14, scope: !2463)
!2475 = !DILocation(line: 1997, column: 3, scope: !2463)
!2476 = !DILocation(line: 1999, column: 3, scope: !2463)
!2477 = !DILocation(line: 2001, column: 24, scope: !2463)
!2478 = !DILocation(line: 2001, column: 22, scope: !2463)
!2479 = !DILocation(line: 2006, column: 41, scope: !2463)
!2480 = !DILocation(line: 2006, column: 3, scope: !2463)
!2481 = !DILocation(line: 2007, column: 13, scope: !2463)
!2482 = !DILocation(line: 2007, column: 11, scope: !2463)
!2483 = !DILocation(line: 2008, column: 18, scope: !2463)
!2484 = !DILocation(line: 2008, column: 16, scope: !2463)
!2485 = !DILocation(line: 2011, column: 16, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 2011, column: 3)
!2487 = !DILocation(line: 2011, column: 14, scope: !2486)
!2488 = !DILocation(line: 2011, column: 8, scope: !2486)
!2489 = !DILocation(line: 2012, column: 8, scope: !2490)
!2490 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 2011, column: 3)
!2491 = !DILocation(line: 2011, column: 3, scope: !2486)
!2492 = !DILocation(line: 2015, column: 31, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 2015, column: 11)
!2494 = distinct !DILexicalBlock(scope: !2490, file: !3, line: 2014, column: 5)
!2495 = !DILocation(line: 2015, column: 37, scope: !2493)
!2496 = !DILocation(line: 2015, column: 11, scope: !2493)
!2497 = !DILocation(line: 2015, column: 44, scope: !2493)
!2498 = !DILocation(line: 2015, column: 11, scope: !2494)
!2499 = !DILocalVariable(name: "def", scope: !2500, file: !3, line: 2017, type: !865)
!2500 = distinct !DILexicalBlock(scope: !2493, file: !3, line: 2016, column: 2)
!2501 = !DILocation(line: 2017, column: 9, scope: !2500)
!2502 = !DILocation(line: 2017, column: 35, scope: !2500)
!2503 = !DILocation(line: 2017, column: 41, scope: !2500)
!2504 = !DILocation(line: 2017, column: 15, scope: !2500)
!2505 = !DILocation(line: 2018, column: 25, scope: !2500)
!2506 = !DILocation(line: 2018, column: 30, scope: !2500)
!2507 = !DILocation(line: 2018, column: 4, scope: !2500)
!2508 = !DILocation(line: 2019, column: 2, scope: !2500)
!2509 = !DILocation(line: 2020, column: 5, scope: !2494)
!2510 = !DILocation(line: 2013, column: 16, scope: !2490)
!2511 = !DILocation(line: 2013, column: 14, scope: !2490)
!2512 = !DILocation(line: 2011, column: 3, scope: !2490)
!2513 = distinct !{!2513, !2491, !2514}
!2514 = !DILocation(line: 2020, column: 5, scope: !2486)
!2515 = !DILocation(line: 2023, column: 7, scope: !2516)
!2516 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 2023, column: 7)
!2517 = !DILocation(line: 2023, column: 13, scope: !2516)
!2518 = !DILocation(line: 2023, column: 31, scope: !2516)
!2519 = !DILocation(line: 2023, column: 7, scope: !2463)
!2520 = !DILocalVariable(name: "def", scope: !2521, file: !3, line: 2025, type: !865)
!2521 = distinct !DILexicalBlock(scope: !2516, file: !3, line: 2024, column: 5)
!2522 = !DILocation(line: 2025, column: 12, scope: !2521)
!2523 = !DILocation(line: 2025, column: 38, scope: !2521)
!2524 = !DILocation(line: 2025, column: 44, scope: !2521)
!2525 = !DILocation(line: 2025, column: 50, scope: !2521)
!2526 = !DILocation(line: 2025, column: 18, scope: !2521)
!2527 = !DILocation(line: 2026, column: 11, scope: !2528)
!2528 = distinct !DILexicalBlock(scope: !2521, file: !3, line: 2026, column: 11)
!2529 = !DILocation(line: 2026, column: 15, scope: !2528)
!2530 = !DILocation(line: 2026, column: 11, scope: !2521)
!2531 = !DILocation(line: 2027, column: 23, scope: !2528)
!2532 = !DILocation(line: 2027, column: 28, scope: !2528)
!2533 = !DILocation(line: 2027, column: 2, scope: !2528)
!2534 = !DILocation(line: 2028, column: 5, scope: !2521)
!2535 = !DILocation(line: 2031, column: 10, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 2031, column: 3)
!2537 = !DILocation(line: 2031, column: 8, scope: !2536)
!2538 = !DILocation(line: 2031, column: 15, scope: !2539)
!2539 = distinct !DILexicalBlock(scope: !2536, file: !3, line: 2031, column: 3)
!2540 = !DILocation(line: 2031, column: 19, scope: !2539)
!2541 = !DILocation(line: 2031, column: 34, scope: !2539)
!2542 = !DILocation(line: 2031, column: 17, scope: !2539)
!2543 = !DILocation(line: 2031, column: 3, scope: !2536)
!2544 = !DILocation(line: 2032, column: 23, scope: !2539)
!2545 = !DILocation(line: 2032, column: 31, scope: !2539)
!2546 = !DILocation(line: 2032, column: 5, scope: !2539)
!2547 = !DILocation(line: 2032, column: 13, scope: !2539)
!2548 = !DILocation(line: 2032, column: 17, scope: !2539)
!2549 = !DILocation(line: 2032, column: 21, scope: !2539)
!2550 = !DILocation(line: 2031, column: 55, scope: !2539)
!2551 = !DILocation(line: 2031, column: 3, scope: !2539)
!2552 = distinct !{!2552, !2543, !2553}
!2553 = !DILocation(line: 2032, column: 34, scope: !2536)
!2554 = !DILocation(line: 2034, column: 9, scope: !2463)
!2555 = !DILocation(line: 2034, column: 3, scope: !2463)
!2556 = !DILocation(line: 2035, column: 3, scope: !2463)
!2557 = !DILocation(line: 2036, column: 23, scope: !2463)
!2558 = !DILocation(line: 2037, column: 1, scope: !2463)
!2559 = distinct !DISubprogram(name: "do_reassoc", scope: !3, file: !3, line: 1979, type: !2464, scopeLine: 1980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2560 = !DILocation(line: 1981, column: 25, scope: !2559)
!2561 = !DILocation(line: 1981, column: 3, scope: !2559)
!2562 = !DILocation(line: 1982, column: 19, scope: !2559)
!2563 = !DILocation(line: 1982, column: 3, scope: !2559)
!2564 = !DILocation(line: 1983, column: 1, scope: !2559)
!2565 = distinct !DISubprogram(name: "repropagate_negates", scope: !3, file: !3, line: 1703, type: !2464, scopeLine: 1704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2566 = !DILocalVariable(name: "i", scope: !2565, file: !3, line: 1705, type: !7)
!2567 = !DILocation(line: 1705, column: 16, scope: !2565)
!2568 = !DILocalVariable(name: "negate", scope: !2565, file: !3, line: 1706, type: !865)
!2569 = !DILocation(line: 1706, column: 8, scope: !2565)
!2570 = !DILocation(line: 1708, column: 10, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2565, file: !3, line: 1708, column: 3)
!2572 = !DILocation(line: 1708, column: 8, scope: !2571)
!2573 = !DILocation(line: 1708, column: 15, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2571, file: !3, line: 1708, column: 3)
!2575 = !DILocation(line: 1708, column: 3, scope: !2571)
!2576 = !DILocalVariable(name: "user", scope: !2577, file: !3, line: 1710, type: !1196)
!2577 = distinct !DILexicalBlock(scope: !2574, file: !3, line: 1709, column: 5)
!2578 = !DILocation(line: 1710, column: 14, scope: !2577)
!2579 = !DILocation(line: 1710, column: 47, scope: !2577)
!2580 = !DILocation(line: 1710, column: 21, scope: !2577)
!2581 = !DILocation(line: 1717, column: 11, scope: !2582)
!2582 = distinct !DILexicalBlock(scope: !2577, file: !3, line: 1717, column: 11)
!2583 = !DILocation(line: 1718, column: 4, scope: !2582)
!2584 = !DILocation(line: 1718, column: 25, scope: !2582)
!2585 = !DILocation(line: 1718, column: 7, scope: !2582)
!2586 = !DILocation(line: 1719, column: 4, scope: !2582)
!2587 = !DILocation(line: 1719, column: 31, scope: !2582)
!2588 = !DILocation(line: 1719, column: 7, scope: !2582)
!2589 = !DILocation(line: 1719, column: 37, scope: !2582)
!2590 = !DILocation(line: 1717, column: 11, scope: !2577)
!2591 = !DILocation(line: 1724, column: 28, scope: !2592)
!2592 = distinct !DILexicalBlock(scope: !2593, file: !3, line: 1724, column: 8)
!2593 = distinct !DILexicalBlock(scope: !2582, file: !3, line: 1720, column: 2)
!2594 = !DILocation(line: 1724, column: 8, scope: !2592)
!2595 = !DILocation(line: 1724, column: 37, scope: !2592)
!2596 = !DILocation(line: 1724, column: 34, scope: !2592)
!2597 = !DILocation(line: 1724, column: 8, scope: !2593)
!2598 = !DILocation(line: 1726, column: 28, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 1725, column: 6)
!2600 = !DILocation(line: 1727, column: 31, scope: !2599)
!2601 = !DILocation(line: 1727, column: 7, scope: !2599)
!2602 = !DILocation(line: 1728, column: 31, scope: !2599)
!2603 = !DILocation(line: 1728, column: 7, scope: !2599)
!2604 = !DILocation(line: 1726, column: 8, scope: !2599)
!2605 = !DILocation(line: 1729, column: 6, scope: !2599)
!2606 = !DILocation(line: 1733, column: 28, scope: !2607)
!2607 = distinct !DILexicalBlock(scope: !2593, file: !3, line: 1733, column: 8)
!2608 = !DILocation(line: 1733, column: 8, scope: !2607)
!2609 = !DILocation(line: 1733, column: 37, scope: !2607)
!2610 = !DILocation(line: 1733, column: 34, scope: !2607)
!2611 = !DILocation(line: 1733, column: 8, scope: !2593)
!2612 = !DILocalVariable(name: "rhs1", scope: !2613, file: !3, line: 1735, type: !865)
!2613 = distinct !DILexicalBlock(scope: !2607, file: !3, line: 1734, column: 6)
!2614 = !DILocation(line: 1735, column: 13, scope: !2613)
!2615 = !DILocation(line: 1735, column: 40, scope: !2613)
!2616 = !DILocation(line: 1735, column: 20, scope: !2613)
!2617 = !DILocalVariable(name: "rhs2", scope: !2613, file: !3, line: 1736, type: !865)
!2618 = !DILocation(line: 1736, column: 13, scope: !2613)
!2619 = !DILocation(line: 1736, column: 34, scope: !2613)
!2620 = !DILocation(line: 1736, column: 20, scope: !2613)
!2621 = !DILocalVariable(name: "gsi", scope: !2613, file: !3, line: 1737, type: !2622)
!2622 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !602, line: 265, baseType: !2623)
!2623 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !602, line: 254, size: 192, elements: !2624)
!2624 = !{!2625, !2626, !2627}
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2623, file: !602, line: 257, baseType: !1191, size: 64)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2623, file: !602, line: 263, baseType: !1186, size: 64, offset: 64)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2623, file: !602, line: 264, baseType: !1648, size: 64, offset: 128)
!2628 = !DILocation(line: 1737, column: 29, scope: !2613)
!2629 = !DILocation(line: 1737, column: 49, scope: !2613)
!2630 = !DILocation(line: 1737, column: 35, scope: !2613)
!2631 = !DILocation(line: 1738, column: 58, scope: !2613)
!2632 = !DILocation(line: 1738, column: 64, scope: !2613)
!2633 = !DILocation(line: 1738, column: 8, scope: !2613)
!2634 = !DILocation(line: 1739, column: 21, scope: !2613)
!2635 = !DILocation(line: 1739, column: 8, scope: !2613)
!2636 = !DILocation(line: 1740, column: 6, scope: !2613)
!2637 = !DILocation(line: 1741, column: 2, scope: !2593)
!2638 = !DILocation(line: 1742, column: 5, scope: !2577)
!2639 = !DILocation(line: 1708, column: 68, scope: !2574)
!2640 = !DILocation(line: 1708, column: 3, scope: !2574)
!2641 = distinct !{!2641, !2575, !2642}
!2642 = !DILocation(line: 1742, column: 5, scope: !2571)
!2643 = !DILocation(line: 1743, column: 1, scope: !2565)
!2644 = distinct !DISubprogram(name: "fini_reassoc", scope: !3, file: !3, line: 2043, type: !2464, scopeLine: 2044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2645 = !DILocation(line: 2045, column: 29, scope: !2644)
!2646 = !DILocation(line: 2046, column: 26, scope: !2644)
!2647 = !DILocation(line: 2045, column: 3, scope: !2644)
!2648 = !DILocation(line: 2047, column: 29, scope: !2644)
!2649 = !DILocation(line: 2048, column: 26, scope: !2644)
!2650 = !DILocation(line: 2047, column: 3, scope: !2644)
!2651 = !DILocation(line: 2049, column: 29, scope: !2644)
!2652 = !DILocation(line: 2050, column: 26, scope: !2644)
!2653 = !DILocation(line: 2049, column: 3, scope: !2644)
!2654 = !DILocation(line: 2051, column: 29, scope: !2644)
!2655 = !DILocation(line: 2052, column: 26, scope: !2644)
!2656 = !DILocation(line: 2051, column: 3, scope: !2644)
!2657 = !DILocation(line: 2054, column: 24, scope: !2644)
!2658 = !DILocation(line: 2054, column: 3, scope: !2644)
!2659 = !DILocation(line: 2055, column: 20, scope: !2644)
!2660 = !DILocation(line: 2055, column: 3, scope: !2644)
!2661 = !DILocation(line: 2056, column: 9, scope: !2644)
!2662 = !DILocation(line: 2056, column: 3, scope: !2644)
!2663 = !DILocation(line: 2057, column: 3, scope: !2644)
!2664 = !DILocation(line: 2058, column: 3, scope: !2644)
!2665 = !DILocation(line: 2059, column: 3, scope: !2644)
!2666 = !DILocation(line: 2060, column: 1, scope: !2644)
!2667 = distinct !DISubprogram(name: "insert_operand_rank", scope: !3, file: !3, line: 202, type: !2668, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2668 = !DISubroutineType(types: !2669)
!2669 = !{null, !865, !921}
!2670 = !DILocalVariable(name: "e", arg: 1, scope: !2667, file: !3, line: 202, type: !865)
!2671 = !DILocation(line: 202, column: 27, scope: !2667)
!2672 = !DILocalVariable(name: "rank", arg: 2, scope: !2667, file: !3, line: 202, type: !921)
!2673 = !DILocation(line: 202, column: 35, scope: !2667)
!2674 = !DILocalVariable(name: "slot", scope: !2667, file: !3, line: 204, type: !1703)
!2675 = !DILocation(line: 204, column: 10, scope: !2667)
!2676 = !DILocation(line: 205, column: 3, scope: !2667)
!2677 = !DILocation(line: 206, column: 30, scope: !2667)
!2678 = !DILocation(line: 206, column: 44, scope: !2667)
!2679 = !DILocation(line: 206, column: 10, scope: !2667)
!2680 = !DILocation(line: 206, column: 8, scope: !2667)
!2681 = !DILocation(line: 207, column: 3, scope: !2667)
!2682 = !DILocation(line: 208, column: 31, scope: !2667)
!2683 = !DILocation(line: 208, column: 11, scope: !2667)
!2684 = !DILocation(line: 208, column: 4, scope: !2667)
!2685 = !DILocation(line: 208, column: 9, scope: !2667)
!2686 = !DILocation(line: 209, column: 1, scope: !2667)
!2687 = distinct !DISubprogram(name: "break_up_subtract_bb", scope: !3, file: !3, line: 1763, type: !2688, scopeLine: 1764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2688 = !DISubroutineType(types: !2689)
!2689 = !{null, !1648}
!2690 = !DILocalVariable(name: "bb", arg: 1, scope: !2687, file: !3, line: 1763, type: !1648)
!2691 = !DILocation(line: 1763, column: 35, scope: !2687)
!2692 = !DILocalVariable(name: "gsi", scope: !2687, file: !3, line: 1765, type: !2622)
!2693 = !DILocation(line: 1765, column: 24, scope: !2687)
!2694 = !DILocalVariable(name: "son", scope: !2687, file: !3, line: 1766, type: !1648)
!2695 = !DILocation(line: 1766, column: 15, scope: !2687)
!2696 = !DILocation(line: 1768, column: 28, scope: !2697)
!2697 = distinct !DILexicalBlock(scope: !2687, file: !3, line: 1768, column: 3)
!2698 = !DILocation(line: 1768, column: 14, scope: !2697)
!2699 = !DILocation(line: 1768, column: 8, scope: !2697)
!2700 = !DILocation(line: 1768, column: 34, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2697, file: !3, line: 1768, column: 3)
!2702 = !DILocation(line: 1768, column: 33, scope: !2701)
!2703 = !DILocation(line: 1768, column: 3, scope: !2697)
!2704 = !DILocalVariable(name: "stmt", scope: !2705, file: !3, line: 1770, type: !1196)
!2705 = distinct !DILexicalBlock(scope: !2701, file: !3, line: 1769, column: 5)
!2706 = !DILocation(line: 1770, column: 14, scope: !2705)
!2707 = !DILocation(line: 1770, column: 21, scope: !2705)
!2708 = !DILocation(line: 1771, column: 27, scope: !2705)
!2709 = !DILocation(line: 1771, column: 7, scope: !2705)
!2710 = !DILocation(line: 1774, column: 29, scope: !2711)
!2711 = distinct !DILexicalBlock(scope: !2705, file: !3, line: 1774, column: 11)
!2712 = !DILocation(line: 1774, column: 11, scope: !2711)
!2713 = !DILocation(line: 1775, column: 4, scope: !2711)
!2714 = !DILocation(line: 1775, column: 31, scope: !2711)
!2715 = !DILocation(line: 1775, column: 7, scope: !2711)
!2716 = !DILocation(line: 1775, column: 37, scope: !2711)
!2717 = !DILocation(line: 1774, column: 11, scope: !2705)
!2718 = !DILocalVariable(name: "lhs", scope: !2719, file: !3, line: 1777, type: !865)
!2719 = distinct !DILexicalBlock(scope: !2711, file: !3, line: 1776, column: 2)
!2720 = !DILocation(line: 1777, column: 9, scope: !2719)
!2721 = !DILocation(line: 1777, column: 34, scope: !2719)
!2722 = !DILocation(line: 1777, column: 15, scope: !2719)
!2723 = !DILocalVariable(name: "rhs1", scope: !2719, file: !3, line: 1778, type: !865)
!2724 = !DILocation(line: 1778, column: 9, scope: !2719)
!2725 = !DILocation(line: 1778, column: 36, scope: !2719)
!2726 = !DILocation(line: 1778, column: 16, scope: !2719)
!2727 = !DILocalVariable(name: "rhs2", scope: !2719, file: !3, line: 1779, type: !865)
!2728 = !DILocation(line: 1779, column: 9, scope: !2719)
!2729 = !DILocation(line: 1779, column: 36, scope: !2719)
!2730 = !DILocation(line: 1779, column: 16, scope: !2719)
!2731 = !DILocation(line: 1784, column: 10, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 1784, column: 8)
!2733 = !DILocation(line: 1785, column: 9, scope: !2732)
!2734 = !DILocation(line: 1785, column: 13, scope: !2732)
!2735 = !DILocation(line: 1786, column: 9, scope: !2732)
!2736 = !DILocation(line: 1786, column: 13, scope: !2732)
!2737 = !DILocation(line: 1787, column: 8, scope: !2732)
!2738 = !DILocation(line: 1787, column: 13, scope: !2732)
!2739 = !DILocation(line: 1788, column: 5, scope: !2732)
!2740 = !DILocation(line: 1788, column: 9, scope: !2732)
!2741 = !DILocation(line: 1789, column: 5, scope: !2732)
!2742 = !DILocation(line: 1789, column: 9, scope: !2732)
!2743 = !DILocation(line: 1790, column: 5, scope: !2732)
!2744 = !DILocation(line: 1790, column: 9, scope: !2732)
!2745 = !DILocation(line: 1791, column: 8, scope: !2732)
!2746 = !DILocation(line: 1791, column: 13, scope: !2732)
!2747 = !DILocation(line: 1792, column: 5, scope: !2732)
!2748 = !DILocation(line: 1792, column: 9, scope: !2732)
!2749 = !DILocation(line: 1793, column: 5, scope: !2732)
!2750 = !DILocation(line: 1793, column: 9, scope: !2732)
!2751 = !DILocation(line: 1784, column: 8, scope: !2719)
!2752 = !DILocation(line: 1794, column: 6, scope: !2732)
!2753 = !DILocation(line: 1800, column: 34, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 1800, column: 8)
!2755 = !DILocation(line: 1800, column: 8, scope: !2754)
!2756 = !DILocation(line: 1800, column: 8, scope: !2719)
!2757 = !DILocation(line: 1801, column: 25, scope: !2754)
!2758 = !DILocation(line: 1801, column: 6, scope: !2754)
!2759 = !DILocation(line: 1802, column: 2, scope: !2719)
!2760 = !DILocation(line: 1803, column: 5, scope: !2705)
!2761 = !DILocation(line: 1768, column: 51, scope: !2701)
!2762 = !DILocation(line: 1768, column: 3, scope: !2701)
!2763 = distinct !{!2763, !2703, !2764}
!2764 = !DILocation(line: 1803, column: 5, scope: !2697)
!2765 = !DILocation(line: 1804, column: 45, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2687, file: !3, line: 1804, column: 3)
!2767 = !DILocation(line: 1804, column: 14, scope: !2766)
!2768 = !DILocation(line: 1804, column: 12, scope: !2766)
!2769 = !DILocation(line: 1804, column: 8, scope: !2766)
!2770 = !DILocation(line: 1805, column: 8, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 1804, column: 3)
!2772 = !DILocation(line: 1804, column: 3, scope: !2766)
!2773 = !DILocation(line: 1807, column: 27, scope: !2771)
!2774 = !DILocation(line: 1807, column: 5, scope: !2771)
!2775 = !DILocation(line: 1806, column: 44, scope: !2771)
!2776 = !DILocation(line: 1806, column: 14, scope: !2771)
!2777 = !DILocation(line: 1806, column: 12, scope: !2771)
!2778 = !DILocation(line: 1804, column: 3, scope: !2771)
!2779 = distinct !{!2779, !2772, !2780}
!2780 = !DILocation(line: 1807, column: 30, scope: !2766)
!2781 = !DILocation(line: 1808, column: 1, scope: !2687)
!2782 = distinct !DISubprogram(name: "reassociate_bb", scope: !3, file: !3, line: 1814, type: !2688, scopeLine: 1815, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2783 = !DILocalVariable(name: "bb", arg: 1, scope: !2782, file: !3, line: 1814, type: !1648)
!2784 = !DILocation(line: 1814, column: 29, scope: !2782)
!2785 = !DILocalVariable(name: "gsi", scope: !2782, file: !3, line: 1816, type: !2622)
!2786 = !DILocation(line: 1816, column: 24, scope: !2782)
!2787 = !DILocalVariable(name: "son", scope: !2782, file: !3, line: 1817, type: !1648)
!2788 = !DILocation(line: 1817, column: 15, scope: !2782)
!2789 = !DILocation(line: 1819, column: 27, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2782, file: !3, line: 1819, column: 3)
!2791 = !DILocation(line: 1819, column: 14, scope: !2790)
!2792 = !DILocation(line: 1819, column: 8, scope: !2790)
!2793 = !DILocation(line: 1819, column: 33, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2790, file: !3, line: 1819, column: 3)
!2795 = !DILocation(line: 1819, column: 32, scope: !2794)
!2796 = !DILocation(line: 1819, column: 3, scope: !2790)
!2797 = !DILocalVariable(name: "stmt", scope: !2798, file: !3, line: 1821, type: !1196)
!2798 = distinct !DILexicalBlock(scope: !2794, file: !3, line: 1820, column: 5)
!2799 = !DILocation(line: 1821, column: 14, scope: !2798)
!2800 = !DILocation(line: 1821, column: 21, scope: !2798)
!2801 = !DILocation(line: 1823, column: 29, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2798, file: !3, line: 1823, column: 11)
!2803 = !DILocation(line: 1823, column: 11, scope: !2802)
!2804 = !DILocation(line: 1823, column: 11, scope: !2798)
!2805 = !DILocalVariable(name: "lhs", scope: !2806, file: !3, line: 1825, type: !865)
!2806 = distinct !DILexicalBlock(scope: !2802, file: !3, line: 1824, column: 2)
!2807 = !DILocation(line: 1825, column: 9, scope: !2806)
!2808 = !DILocalVariable(name: "rhs1", scope: !2806, file: !3, line: 1825, type: !865)
!2809 = !DILocation(line: 1825, column: 14, scope: !2806)
!2810 = !DILocalVariable(name: "rhs2", scope: !2806, file: !3, line: 1825, type: !865)
!2811 = !DILocation(line: 1825, column: 20, scope: !2806)
!2812 = !DILocalVariable(name: "rhs_code", scope: !2806, file: !3, line: 1826, type: !134)
!2813 = !DILocation(line: 1826, column: 19, scope: !2806)
!2814 = !DILocation(line: 1826, column: 54, scope: !2806)
!2815 = !DILocation(line: 1826, column: 30, scope: !2806)
!2816 = !DILocation(line: 1830, column: 30, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1830, column: 8)
!2818 = !DILocation(line: 1830, column: 8, scope: !2817)
!2819 = !DILocation(line: 1830, column: 40, scope: !2817)
!2820 = !DILocation(line: 1830, column: 8, scope: !2806)
!2821 = !DILocation(line: 1831, column: 6, scope: !2817)
!2822 = !DILocation(line: 1835, column: 26, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1835, column: 8)
!2824 = !DILocation(line: 1835, column: 8, scope: !2823)
!2825 = !DILocation(line: 1835, column: 8, scope: !2806)
!2826 = !DILocation(line: 1839, column: 43, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2828, file: !3, line: 1839, column: 12)
!2828 = distinct !DILexicalBlock(scope: !2823, file: !3, line: 1836, column: 6)
!2829 = !DILocation(line: 1839, column: 27, scope: !2827)
!2830 = !DILocation(line: 1839, column: 12, scope: !2827)
!2831 = !DILocation(line: 1839, column: 12, scope: !2828)
!2832 = !DILocation(line: 1841, column: 5, scope: !2833)
!2833 = distinct !DILexicalBlock(scope: !2827, file: !3, line: 1840, column: 3)
!2834 = !DILocation(line: 1842, column: 19, scope: !2833)
!2835 = !DILocation(line: 1842, column: 5, scope: !2833)
!2836 = !DILocation(line: 1849, column: 9, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2833, file: !3, line: 1849, column: 9)
!2838 = !DILocation(line: 1849, column: 9, scope: !2833)
!2839 = !DILocation(line: 1851, column: 28, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2837, file: !3, line: 1850, column: 7)
!2841 = !DILocation(line: 1851, column: 15, scope: !2840)
!2842 = !DILocation(line: 1852, column: 13, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 1852, column: 13)
!2844 = !DILocation(line: 1852, column: 13, scope: !2840)
!2845 = !DILocation(line: 1853, column: 4, scope: !2843)
!2846 = !DILocation(line: 1854, column: 7, scope: !2840)
!2847 = !DILocation(line: 1855, column: 3, scope: !2833)
!2848 = !DILocation(line: 1856, column: 8, scope: !2828)
!2849 = !DILocation(line: 1859, column: 29, scope: !2806)
!2850 = !DILocation(line: 1859, column: 10, scope: !2806)
!2851 = !DILocation(line: 1859, column: 8, scope: !2806)
!2852 = !DILocation(line: 1860, column: 31, scope: !2806)
!2853 = !DILocation(line: 1860, column: 11, scope: !2806)
!2854 = !DILocation(line: 1860, column: 9, scope: !2806)
!2855 = !DILocation(line: 1861, column: 31, scope: !2806)
!2856 = !DILocation(line: 1861, column: 11, scope: !2806)
!2857 = !DILocation(line: 1861, column: 9, scope: !2806)
!2858 = !DILocation(line: 1866, column: 10, scope: !2859)
!2859 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1866, column: 8)
!2860 = !DILocation(line: 1867, column: 9, scope: !2859)
!2861 = !DILocation(line: 1867, column: 13, scope: !2859)
!2862 = !DILocation(line: 1868, column: 9, scope: !2859)
!2863 = !DILocation(line: 1868, column: 13, scope: !2859)
!2864 = !DILocation(line: 1869, column: 8, scope: !2859)
!2865 = !DILocation(line: 1869, column: 13, scope: !2859)
!2866 = !DILocation(line: 1870, column: 5, scope: !2859)
!2867 = !DILocation(line: 1870, column: 9, scope: !2859)
!2868 = !DILocation(line: 1871, column: 5, scope: !2859)
!2869 = !DILocation(line: 1871, column: 9, scope: !2859)
!2870 = !DILocation(line: 1872, column: 5, scope: !2859)
!2871 = !DILocation(line: 1872, column: 9, scope: !2859)
!2872 = !DILocation(line: 1873, column: 8, scope: !2859)
!2873 = !DILocation(line: 1873, column: 13, scope: !2859)
!2874 = !DILocation(line: 1874, column: 5, scope: !2859)
!2875 = !DILocation(line: 1874, column: 9, scope: !2859)
!2876 = !DILocation(line: 1875, column: 5, scope: !2859)
!2877 = !DILocation(line: 1875, column: 9, scope: !2859)
!2878 = !DILocation(line: 1866, column: 8, scope: !2806)
!2879 = !DILocation(line: 1876, column: 6, scope: !2859)
!2880 = !DILocation(line: 1878, column: 31, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1878, column: 8)
!2882 = !DILocation(line: 1878, column: 8, scope: !2881)
!2883 = !DILocation(line: 1878, column: 8, scope: !2806)
!2884 = !DILocalVariable(name: "ops", scope: !2885, file: !3, line: 1880, type: !2239)
!2885 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 1879, column: 6)
!2886 = !DILocation(line: 1880, column: 36, scope: !2885)
!2887 = !DILocation(line: 1884, column: 12, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2885, file: !3, line: 1884, column: 12)
!2889 = !DILocation(line: 1884, column: 28, scope: !2888)
!2890 = !DILocation(line: 1884, column: 40, scope: !2888)
!2891 = !DILocation(line: 1884, column: 58, scope: !2888)
!2892 = !DILocation(line: 1884, column: 43, scope: !2888)
!2893 = !DILocation(line: 1884, column: 12, scope: !2885)
!2894 = !DILocation(line: 1885, column: 3, scope: !2888)
!2895 = !DILocation(line: 1887, column: 28, scope: !2885)
!2896 = !DILocation(line: 1887, column: 8, scope: !2885)
!2897 = !DILocation(line: 1888, column: 35, scope: !2885)
!2898 = !DILocation(line: 1888, column: 8, scope: !2885)
!2899 = !DILocation(line: 1890, column: 20, scope: !2885)
!2900 = !DILocation(line: 1891, column: 27, scope: !2885)
!2901 = !DILocation(line: 1890, column: 8, scope: !2885)
!2902 = !DILocation(line: 1900, column: 27, scope: !2885)
!2903 = !DILocation(line: 1900, column: 8, scope: !2885)
!2904 = !DILocation(line: 1901, column: 35, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2885, file: !3, line: 1901, column: 12)
!2906 = !DILocation(line: 1902, column: 29, scope: !2905)
!2907 = !DILocation(line: 1902, column: 7, scope: !2905)
!2908 = !DILocation(line: 1901, column: 12, scope: !2905)
!2909 = !DILocation(line: 1901, column: 12, scope: !2885)
!2910 = !DILocation(line: 1905, column: 17, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2905, file: !3, line: 1903, column: 3)
!2912 = !DILocation(line: 1906, column: 31, scope: !2911)
!2913 = !DILocation(line: 1905, column: 5, scope: !2911)
!2914 = !DILocation(line: 1915, column: 24, scope: !2911)
!2915 = !DILocation(line: 1915, column: 5, scope: !2911)
!2916 = !DILocation(line: 1916, column: 3, scope: !2911)
!2917 = !DILocation(line: 1918, column: 12, scope: !2918)
!2918 = distinct !DILexicalBlock(scope: !2885, file: !3, line: 1918, column: 12)
!2919 = !DILocation(line: 1918, column: 46, scope: !2918)
!2920 = !DILocation(line: 1918, column: 12, scope: !2885)
!2921 = !DILocation(line: 1920, column: 9, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2923, file: !3, line: 1920, column: 9)
!2923 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 1919, column: 3)
!2924 = !DILocation(line: 1920, column: 19, scope: !2922)
!2925 = !DILocation(line: 1920, column: 23, scope: !2922)
!2926 = !DILocation(line: 1920, column: 34, scope: !2922)
!2927 = !DILocation(line: 1920, column: 9, scope: !2923)
!2928 = !DILocation(line: 1922, column: 18, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2922, file: !3, line: 1921, column: 7)
!2930 = !DILocation(line: 1922, column: 9, scope: !2929)
!2931 = !DILocation(line: 1923, column: 28, scope: !2929)
!2932 = !DILocation(line: 1923, column: 39, scope: !2929)
!2933 = !DILocation(line: 1923, column: 9, scope: !2929)
!2934 = !DILocation(line: 1924, column: 7, scope: !2929)
!2935 = !DILocation(line: 1926, column: 32, scope: !2923)
!2936 = !DILocation(line: 1926, column: 12, scope: !2923)
!2937 = !DILocation(line: 1926, column: 10, scope: !2923)
!2938 = !DILocation(line: 1928, column: 10, scope: !2923)
!2939 = !DILocation(line: 1929, column: 19, scope: !2923)
!2940 = !DILocation(line: 1927, column: 5, scope: !2923)
!2941 = !DILocation(line: 1930, column: 18, scope: !2923)
!2942 = !DILocation(line: 1930, column: 5, scope: !2923)
!2943 = !DILocation(line: 1931, column: 32, scope: !2923)
!2944 = !DILocation(line: 1931, column: 5, scope: !2923)
!2945 = !DILocation(line: 1933, column: 9, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2923, file: !3, line: 1933, column: 9)
!2947 = !DILocation(line: 1933, column: 19, scope: !2946)
!2948 = !DILocation(line: 1933, column: 23, scope: !2946)
!2949 = !DILocation(line: 1933, column: 34, scope: !2946)
!2950 = !DILocation(line: 1933, column: 9, scope: !2923)
!2951 = !DILocation(line: 1935, column: 18, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 1934, column: 7)
!2953 = !DILocation(line: 1935, column: 9, scope: !2952)
!2954 = !DILocation(line: 1936, column: 28, scope: !2952)
!2955 = !DILocation(line: 1936, column: 39, scope: !2952)
!2956 = !DILocation(line: 1936, column: 9, scope: !2952)
!2957 = !DILocation(line: 1937, column: 7, scope: !2952)
!2958 = !DILocation(line: 1938, column: 3, scope: !2923)
!2959 = !DILocation(line: 1940, column: 22, scope: !2918)
!2960 = !DILocation(line: 1940, column: 31, scope: !2918)
!2961 = !DILocation(line: 1940, column: 3, scope: !2918)
!2962 = !DILocation(line: 1942, column: 8, scope: !2885)
!2963 = !DILocation(line: 1943, column: 6, scope: !2885)
!2964 = !DILocation(line: 1944, column: 2, scope: !2806)
!2965 = !DILocation(line: 1945, column: 5, scope: !2798)
!2966 = !DILocation(line: 1819, column: 50, scope: !2794)
!2967 = !DILocation(line: 1819, column: 3, scope: !2794)
!2968 = distinct !{!2968, !2796, !2969}
!2969 = !DILocation(line: 1945, column: 5, scope: !2790)
!2970 = !DILocation(line: 1946, column: 50, scope: !2971)
!2971 = distinct !DILexicalBlock(scope: !2782, file: !3, line: 1946, column: 3)
!2972 = !DILocation(line: 1946, column: 14, scope: !2971)
!2973 = !DILocation(line: 1946, column: 12, scope: !2971)
!2974 = !DILocation(line: 1946, column: 8, scope: !2971)
!2975 = !DILocation(line: 1947, column: 8, scope: !2976)
!2976 = distinct !DILexicalBlock(scope: !2971, file: !3, line: 1946, column: 3)
!2977 = !DILocation(line: 1946, column: 3, scope: !2971)
!2978 = !DILocation(line: 1949, column: 21, scope: !2976)
!2979 = !DILocation(line: 1949, column: 5, scope: !2976)
!2980 = !DILocation(line: 1948, column: 49, scope: !2976)
!2981 = !DILocation(line: 1948, column: 14, scope: !2976)
!2982 = !DILocation(line: 1948, column: 12, scope: !2976)
!2983 = !DILocation(line: 1946, column: 3, scope: !2976)
!2984 = distinct !{!2984, !2977, !2985}
!2985 = !DILocation(line: 1949, column: 24, scope: !2971)
!2986 = !DILocation(line: 1950, column: 1, scope: !2782)
!2987 = distinct !DISubprogram(name: "gsi_start_bb", scope: !602, file: !602, line: 4418, type: !2988, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!2988 = !DISubroutineType(types: !2989)
!2989 = !{!2622, !1648}
!2990 = !DILocalVariable(name: "bb", arg: 1, scope: !2987, file: !602, line: 4418, type: !1648)
!2991 = !DILocation(line: 4418, column: 27, scope: !2987)
!2992 = !DILocalVariable(name: "i", scope: !2987, file: !602, line: 4420, type: !2622)
!2993 = !DILocation(line: 4420, column: 24, scope: !2987)
!2994 = !DILocalVariable(name: "seq", scope: !2987, file: !602, line: 4421, type: !1186)
!2995 = !DILocation(line: 4421, column: 14, scope: !2987)
!2996 = !DILocation(line: 4423, column: 17, scope: !2987)
!2997 = !DILocation(line: 4423, column: 9, scope: !2987)
!2998 = !DILocation(line: 4423, column: 7, scope: !2987)
!2999 = !DILocation(line: 4424, column: 29, scope: !2987)
!3000 = !DILocation(line: 4424, column: 11, scope: !2987)
!3001 = !DILocation(line: 4424, column: 5, scope: !2987)
!3002 = !DILocation(line: 4424, column: 9, scope: !2987)
!3003 = !DILocation(line: 4425, column: 11, scope: !2987)
!3004 = !DILocation(line: 4425, column: 5, scope: !2987)
!3005 = !DILocation(line: 4425, column: 9, scope: !2987)
!3006 = !DILocation(line: 4426, column: 10, scope: !2987)
!3007 = !DILocation(line: 4426, column: 5, scope: !2987)
!3008 = !DILocation(line: 4426, column: 8, scope: !2987)
!3009 = !DILocation(line: 4428, column: 3, scope: !2987)
!3010 = distinct !DISubprogram(name: "gsi_end_p", scope: !602, file: !602, line: 4467, type: !3011, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3011 = !DISubroutineType(types: !3012)
!3012 = !{!985, !2622}
!3013 = !DILocalVariable(name: "i", arg: 1, scope: !3010, file: !602, line: 4467, type: !2622)
!3014 = !DILocation(line: 4467, column: 33, scope: !3010)
!3015 = !DILocation(line: 4469, column: 12, scope: !3010)
!3016 = !DILocation(line: 4469, column: 16, scope: !3010)
!3017 = !DILocation(line: 4469, column: 10, scope: !3010)
!3018 = !DILocation(line: 4469, column: 3, scope: !3010)
!3019 = distinct !DISubprogram(name: "gsi_stmt", scope: !602, file: !602, line: 4501, type: !3020, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3020 = !DISubroutineType(types: !3021)
!3021 = !{!1196, !2622}
!3022 = !DILocalVariable(name: "i", arg: 1, scope: !3019, file: !602, line: 4501, type: !2622)
!3023 = !DILocation(line: 4501, column: 32, scope: !3019)
!3024 = !DILocation(line: 4503, column: 12, scope: !3019)
!3025 = !DILocation(line: 4503, column: 17, scope: !3019)
!3026 = !DILocation(line: 4503, column: 3, scope: !3019)
!3027 = distinct !DISubprogram(name: "gimple_set_visited", scope: !602, file: !602, line: 1217, type: !3028, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3028 = !DISubroutineType(types: !3029)
!3029 = !{null, !1196, !985}
!3030 = !DILocalVariable(name: "stmt", arg: 1, scope: !3027, file: !602, line: 1217, type: !1196)
!3031 = !DILocation(line: 1217, column: 28, scope: !3027)
!3032 = !DILocalVariable(name: "visited_p", arg: 2, scope: !3027, file: !602, line: 1217, type: !985)
!3033 = !DILocation(line: 1217, column: 39, scope: !3027)
!3034 = !DILocation(line: 1219, column: 37, scope: !3027)
!3035 = !DILocation(line: 1219, column: 26, scope: !3027)
!3036 = !DILocation(line: 1219, column: 3, scope: !3027)
!3037 = !DILocation(line: 1219, column: 9, scope: !3027)
!3038 = !DILocation(line: 1219, column: 16, scope: !3027)
!3039 = !DILocation(line: 1219, column: 24, scope: !3027)
!3040 = !DILocation(line: 1220, column: 1, scope: !3027)
!3041 = distinct !DISubprogram(name: "is_gimple_assign", scope: !602, file: !602, line: 1677, type: !3042, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3042 = !DISubroutineType(types: !3043)
!3043 = !{!985, !3044}
!3044 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !866, line: 60, baseType: !2229)
!3045 = !DILocalVariable(name: "gs", arg: 1, scope: !3041, file: !602, line: 1677, type: !3044)
!3046 = !DILocation(line: 1677, column: 32, scope: !3041)
!3047 = !DILocation(line: 1679, column: 23, scope: !3041)
!3048 = !DILocation(line: 1679, column: 10, scope: !3041)
!3049 = !DILocation(line: 1679, column: 27, scope: !3041)
!3050 = !DILocation(line: 1679, column: 3, scope: !3041)
!3051 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !602, file: !602, line: 1815, type: !3052, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3052 = !DISubroutineType(types: !3053)
!3053 = !{!134, !3044}
!3054 = !DILocalVariable(name: "gs", arg: 1, scope: !3051, file: !602, line: 1815, type: !3044)
!3055 = !DILocation(line: 1815, column: 38, scope: !3051)
!3056 = !DILocalVariable(name: "code", scope: !3051, file: !602, line: 1817, type: !134)
!3057 = !DILocation(line: 1817, column: 18, scope: !3051)
!3058 = !DILocation(line: 1820, column: 28, scope: !3051)
!3059 = !DILocation(line: 1820, column: 10, scope: !3051)
!3060 = !DILocation(line: 1820, column: 8, scope: !3051)
!3061 = !DILocation(line: 1821, column: 29, scope: !3062)
!3062 = distinct !DILexicalBlock(scope: !3051, file: !602, line: 1821, column: 7)
!3063 = !DILocation(line: 1821, column: 7, scope: !3062)
!3064 = !DILocation(line: 1821, column: 35, scope: !3062)
!3065 = !DILocation(line: 1821, column: 7, scope: !3051)
!3066 = !DILocation(line: 1822, column: 12, scope: !3062)
!3067 = !DILocation(line: 1822, column: 10, scope: !3062)
!3068 = !DILocation(line: 1822, column: 5, scope: !3062)
!3069 = !DILocation(line: 1824, column: 10, scope: !3051)
!3070 = !DILocation(line: 1824, column: 3, scope: !3051)
!3071 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !602, file: !602, line: 1694, type: !3072, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3072 = !DISubroutineType(types: !3073)
!3073 = !{!865, !3044}
!3074 = !DILocalVariable(name: "gs", arg: 1, scope: !3071, file: !602, line: 1694, type: !3044)
!3075 = !DILocation(line: 1694, column: 33, scope: !3071)
!3076 = !DILocation(line: 1697, column: 21, scope: !3071)
!3077 = !DILocation(line: 1697, column: 10, scope: !3071)
!3078 = !DILocation(line: 1697, column: 3, scope: !3071)
!3079 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !602, file: !602, line: 1727, type: !3072, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3080 = !DILocalVariable(name: "gs", arg: 1, scope: !3079, file: !602, line: 1727, type: !3044)
!3081 = !DILocation(line: 1727, column: 34, scope: !3079)
!3082 = !DILocation(line: 1730, column: 21, scope: !3079)
!3083 = !DILocation(line: 1730, column: 10, scope: !3079)
!3084 = !DILocation(line: 1730, column: 3, scope: !3079)
!3085 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !602, file: !602, line: 1759, type: !3072, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3086 = !DILocalVariable(name: "gs", arg: 1, scope: !3085, file: !602, line: 1759, type: !3044)
!3087 = !DILocation(line: 1759, column: 34, scope: !3085)
!3088 = !DILocation(line: 1763, column: 23, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3085, file: !602, line: 1763, column: 7)
!3090 = !DILocation(line: 1763, column: 7, scope: !3089)
!3091 = !DILocation(line: 1763, column: 27, scope: !3089)
!3092 = !DILocation(line: 1763, column: 7, scope: !3085)
!3093 = !DILocation(line: 1764, column: 23, scope: !3089)
!3094 = !DILocation(line: 1764, column: 12, scope: !3089)
!3095 = !DILocation(line: 1764, column: 5, scope: !3089)
!3096 = !DILocation(line: 1766, column: 5, scope: !3089)
!3097 = !DILocation(line: 1767, column: 1, scope: !3085)
!3098 = distinct !DISubprogram(name: "should_break_up_subtract", scope: !3, file: !3, line: 1563, type: !3099, scopeLine: 1564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3099 = !DISubroutineType(types: !3100)
!3100 = !{!985, !1196}
!3101 = !DILocalVariable(name: "stmt", arg: 1, scope: !3098, file: !3, line: 1563, type: !1196)
!3102 = !DILocation(line: 1563, column: 34, scope: !3098)
!3103 = !DILocalVariable(name: "lhs", scope: !3098, file: !3, line: 1565, type: !865)
!3104 = !DILocation(line: 1565, column: 8, scope: !3098)
!3105 = !DILocation(line: 1565, column: 33, scope: !3098)
!3106 = !DILocation(line: 1565, column: 14, scope: !3098)
!3107 = !DILocalVariable(name: "binlhs", scope: !3098, file: !3, line: 1566, type: !865)
!3108 = !DILocation(line: 1566, column: 8, scope: !3098)
!3109 = !DILocation(line: 1566, column: 37, scope: !3098)
!3110 = !DILocation(line: 1566, column: 17, scope: !3098)
!3111 = !DILocalVariable(name: "binrhs", scope: !3098, file: !3, line: 1567, type: !865)
!3112 = !DILocation(line: 1567, column: 8, scope: !3098)
!3113 = !DILocation(line: 1567, column: 37, scope: !3098)
!3114 = !DILocation(line: 1567, column: 17, scope: !3098)
!3115 = !DILocalVariable(name: "immusestmt", scope: !3098, file: !3, line: 1568, type: !1196)
!3116 = !DILocation(line: 1568, column: 10, scope: !3098)
!3117 = !DILocalVariable(name: "loop", scope: !3098, file: !3, line: 1569, type: !1411)
!3118 = !DILocation(line: 1569, column: 16, scope: !3098)
!3119 = !DILocation(line: 1569, column: 45, scope: !3098)
!3120 = !DILocation(line: 1569, column: 23, scope: !3098)
!3121 = !DILocation(line: 1571, column: 7, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1571, column: 7)
!3123 = !DILocation(line: 1571, column: 26, scope: !3122)
!3124 = !DILocation(line: 1572, column: 7, scope: !3122)
!3125 = !DILocation(line: 1572, column: 30, scope: !3122)
!3126 = !DILocation(line: 1572, column: 69, scope: !3122)
!3127 = !DILocation(line: 1572, column: 10, scope: !3122)
!3128 = !DILocation(line: 1571, column: 7, scope: !3098)
!3129 = !DILocation(line: 1573, column: 5, scope: !3122)
!3130 = !DILocation(line: 1575, column: 7, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1575, column: 7)
!3132 = !DILocation(line: 1575, column: 26, scope: !3131)
!3133 = !DILocation(line: 1576, column: 7, scope: !3131)
!3134 = !DILocation(line: 1576, column: 30, scope: !3131)
!3135 = !DILocation(line: 1576, column: 69, scope: !3131)
!3136 = !DILocation(line: 1576, column: 10, scope: !3131)
!3137 = !DILocation(line: 1575, column: 7, scope: !3098)
!3138 = !DILocation(line: 1577, column: 5, scope: !3131)
!3139 = !DILocation(line: 1579, column: 7, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1579, column: 7)
!3141 = !DILocation(line: 1579, column: 23, scope: !3140)
!3142 = !DILocation(line: 1580, column: 7, scope: !3140)
!3143 = !DILocation(line: 1580, column: 50, scope: !3140)
!3144 = !DILocation(line: 1580, column: 24, scope: !3140)
!3145 = !DILocation(line: 1580, column: 22, scope: !3140)
!3146 = !DILocation(line: 1581, column: 7, scope: !3140)
!3147 = !DILocation(line: 1581, column: 28, scope: !3140)
!3148 = !DILocation(line: 1581, column: 10, scope: !3140)
!3149 = !DILocation(line: 1582, column: 7, scope: !3140)
!3150 = !DILocation(line: 1582, column: 35, scope: !3140)
!3151 = !DILocation(line: 1582, column: 11, scope: !3140)
!3152 = !DILocation(line: 1582, column: 47, scope: !3140)
!3153 = !DILocation(line: 1583, column: 4, scope: !3140)
!3154 = !DILocation(line: 1583, column: 32, scope: !3140)
!3155 = !DILocation(line: 1583, column: 8, scope: !3140)
!3156 = !DILocation(line: 1583, column: 44, scope: !3140)
!3157 = !DILocation(line: 1579, column: 7, scope: !3098)
!3158 = !DILocation(line: 1584, column: 5, scope: !3140)
!3159 = !DILocation(line: 1585, column: 3, scope: !3098)
!3160 = !DILocation(line: 1586, column: 1, scope: !3098)
!3161 = distinct !DISubprogram(name: "break_up_subtract", scope: !3, file: !3, line: 1591, type: !3162, scopeLine: 1592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3162 = !DISubroutineType(types: !3163)
!3163 = !{null, !1196, !3164}
!3164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!3165 = !DILocalVariable(name: "stmt", arg: 1, scope: !3161, file: !3, line: 1591, type: !1196)
!3166 = !DILocation(line: 1591, column: 27, scope: !3161)
!3167 = !DILocalVariable(name: "gsip", arg: 2, scope: !3161, file: !3, line: 1591, type: !3164)
!3168 = !DILocation(line: 1591, column: 55, scope: !3161)
!3169 = !DILocalVariable(name: "rhs1", scope: !3161, file: !3, line: 1593, type: !865)
!3170 = !DILocation(line: 1593, column: 8, scope: !3161)
!3171 = !DILocation(line: 1593, column: 35, scope: !3161)
!3172 = !DILocation(line: 1593, column: 15, scope: !3161)
!3173 = !DILocalVariable(name: "rhs2", scope: !3161, file: !3, line: 1594, type: !865)
!3174 = !DILocation(line: 1594, column: 8, scope: !3161)
!3175 = !DILocation(line: 1594, column: 35, scope: !3161)
!3176 = !DILocation(line: 1594, column: 15, scope: !3161)
!3177 = !DILocation(line: 1596, column: 7, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3161, file: !3, line: 1596, column: 7)
!3179 = !DILocation(line: 1596, column: 17, scope: !3178)
!3180 = !DILocation(line: 1596, column: 21, scope: !3178)
!3181 = !DILocation(line: 1596, column: 32, scope: !3178)
!3182 = !DILocation(line: 1596, column: 7, scope: !3161)
!3183 = !DILocation(line: 1598, column: 16, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 1597, column: 5)
!3185 = !DILocation(line: 1598, column: 7, scope: !3184)
!3186 = !DILocation(line: 1599, column: 26, scope: !3184)
!3187 = !DILocation(line: 1599, column: 37, scope: !3184)
!3188 = !DILocation(line: 1599, column: 7, scope: !3184)
!3189 = !DILocation(line: 1600, column: 5, scope: !3184)
!3190 = !DILocation(line: 1602, column: 24, scope: !3161)
!3191 = !DILocation(line: 1602, column: 30, scope: !3161)
!3192 = !DILocation(line: 1602, column: 10, scope: !3161)
!3193 = !DILocation(line: 1602, column: 8, scope: !3161)
!3194 = !DILocation(line: 1603, column: 35, scope: !3161)
!3195 = !DILocation(line: 1603, column: 52, scope: !3161)
!3196 = !DILocation(line: 1603, column: 58, scope: !3161)
!3197 = !DILocation(line: 1603, column: 3, scope: !3161)
!3198 = !DILocation(line: 1604, column: 16, scope: !3161)
!3199 = !DILocation(line: 1604, column: 3, scope: !3161)
!3200 = !DILocation(line: 1605, column: 1, scope: !3161)
!3201 = distinct !DISubprogram(name: "gsi_next", scope: !602, file: !602, line: 4485, type: !3202, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3202 = !DISubroutineType(types: !3203)
!3203 = !{null, !3164}
!3204 = !DILocalVariable(name: "i", arg: 1, scope: !3201, file: !602, line: 4485, type: !3164)
!3205 = !DILocation(line: 4485, column: 33, scope: !3201)
!3206 = !DILocation(line: 4487, column: 12, scope: !3201)
!3207 = !DILocation(line: 4487, column: 15, scope: !3201)
!3208 = !DILocation(line: 4487, column: 20, scope: !3201)
!3209 = !DILocation(line: 4487, column: 3, scope: !3201)
!3210 = !DILocation(line: 4487, column: 6, scope: !3201)
!3211 = !DILocation(line: 4487, column: 10, scope: !3201)
!3212 = !DILocation(line: 4488, column: 1, scope: !3201)
!3213 = distinct !DISubprogram(name: "bb_seq", scope: !602, file: !602, line: 237, type: !3214, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3214 = !DISubroutineType(types: !3215)
!3215 = !{!1186, !3216}
!3216 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !866, line: 112, baseType: !3217)
!3217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3218, size: 64)
!3218 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1161)
!3219 = !DILocalVariable(name: "bb", arg: 1, scope: !3213, file: !602, line: 237, type: !3216)
!3220 = !DILocation(line: 237, column: 27, scope: !3213)
!3221 = !DILocation(line: 239, column: 13, scope: !3213)
!3222 = !DILocation(line: 239, column: 17, scope: !3213)
!3223 = !DILocation(line: 239, column: 23, scope: !3213)
!3224 = !DILocation(line: 239, column: 33, scope: !3213)
!3225 = !DILocation(line: 239, column: 36, scope: !3213)
!3226 = !DILocation(line: 239, column: 40, scope: !3213)
!3227 = !DILocation(line: 239, column: 43, scope: !3213)
!3228 = !DILocation(line: 239, column: 10, scope: !3213)
!3229 = !DILocation(line: 239, column: 53, scope: !3213)
!3230 = !DILocation(line: 239, column: 57, scope: !3213)
!3231 = !DILocation(line: 239, column: 60, scope: !3213)
!3232 = !DILocation(line: 239, column: 68, scope: !3213)
!3233 = !DILocation(line: 239, column: 3, scope: !3213)
!3234 = distinct !DISubprogram(name: "gimple_seq_first", scope: !602, file: !602, line: 159, type: !3235, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3235 = !DISubroutineType(types: !3236)
!3236 = !{!1191, !3237}
!3237 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !866, line: 67, baseType: !3238)
!3238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3239, size: 64)
!3239 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1188)
!3240 = !DILocalVariable(name: "s", arg: 1, scope: !3234, file: !602, line: 159, type: !3237)
!3241 = !DILocation(line: 159, column: 36, scope: !3234)
!3242 = !DILocation(line: 161, column: 10, scope: !3234)
!3243 = !DILocation(line: 161, column: 14, scope: !3234)
!3244 = !DILocation(line: 161, column: 17, scope: !3234)
!3245 = !DILocation(line: 161, column: 3, scope: !3234)
!3246 = distinct !DISubprogram(name: "gimple_code", scope: !602, file: !602, line: 1052, type: !3247, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3247 = !DISubroutineType(types: !3248)
!3248 = !{!601, !3044}
!3249 = !DILocalVariable(name: "g", arg: 1, scope: !3246, file: !602, line: 1052, type: !3044)
!3250 = !DILocation(line: 1052, column: 27, scope: !3246)
!3251 = !DILocation(line: 1054, column: 10, scope: !3246)
!3252 = !DILocation(line: 1054, column: 13, scope: !3246)
!3253 = !DILocation(line: 1054, column: 20, scope: !3246)
!3254 = !DILocation(line: 1054, column: 3, scope: !3246)
!3255 = distinct !DISubprogram(name: "gimple_expr_code", scope: !602, file: !602, line: 1438, type: !3052, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3256 = !DILocalVariable(name: "stmt", arg: 1, scope: !3255, file: !602, line: 1438, type: !3044)
!3257 = !DILocation(line: 1438, column: 32, scope: !3255)
!3258 = !DILocalVariable(name: "code", scope: !3255, file: !602, line: 1440, type: !601)
!3259 = !DILocation(line: 1440, column: 20, scope: !3255)
!3260 = !DILocation(line: 1440, column: 40, scope: !3255)
!3261 = !DILocation(line: 1440, column: 27, scope: !3255)
!3262 = !DILocation(line: 1441, column: 7, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3255, file: !602, line: 1441, column: 7)
!3264 = !DILocation(line: 1441, column: 12, scope: !3263)
!3265 = !DILocation(line: 1441, column: 29, scope: !3263)
!3266 = !DILocation(line: 1441, column: 32, scope: !3263)
!3267 = !DILocation(line: 1441, column: 37, scope: !3263)
!3268 = !DILocation(line: 1441, column: 7, scope: !3255)
!3269 = !DILocation(line: 1442, column: 29, scope: !3263)
!3270 = !DILocation(line: 1442, column: 35, scope: !3263)
!3271 = !DILocation(line: 1442, column: 42, scope: !3263)
!3272 = !DILocation(line: 1442, column: 5, scope: !3263)
!3273 = !DILocation(line: 1443, column: 12, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3263, file: !602, line: 1443, column: 12)
!3275 = !DILocation(line: 1443, column: 17, scope: !3274)
!3276 = !DILocation(line: 1443, column: 12, scope: !3263)
!3277 = !DILocation(line: 1444, column: 5, scope: !3274)
!3278 = !DILocation(line: 1446, column: 5, scope: !3274)
!3279 = !DILocation(line: 1448, column: 5, scope: !3255)
!3280 = !DILocation(line: 1450, column: 1, scope: !3255)
!3281 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !602, file: !602, line: 1686, type: !3282, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3282 = !DISubroutineType(types: !3283)
!3283 = !{!640, !134}
!3284 = !DILocalVariable(name: "code", arg: 1, scope: !3281, file: !602, line: 1686, type: !134)
!3285 = !DILocation(line: 1686, column: 38, scope: !3281)
!3286 = !DILocation(line: 1688, column: 63, scope: !3281)
!3287 = !DILocation(line: 1688, column: 34, scope: !3281)
!3288 = !DILocation(line: 1688, column: 10, scope: !3281)
!3289 = !DILocation(line: 1688, column: 3, scope: !3281)
!3290 = distinct !DISubprogram(name: "gimple_op", scope: !602, file: !602, line: 1631, type: !3291, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3291 = !DISubroutineType(types: !3292)
!3292 = !{!865, !3044, !7}
!3293 = !DILocalVariable(name: "gs", arg: 1, scope: !3290, file: !602, line: 1631, type: !3044)
!3294 = !DILocation(line: 1631, column: 25, scope: !3290)
!3295 = !DILocalVariable(name: "i", arg: 2, scope: !3290, file: !602, line: 1631, type: !7)
!3296 = !DILocation(line: 1631, column: 38, scope: !3290)
!3297 = !DILocation(line: 1633, column: 23, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3290, file: !602, line: 1633, column: 7)
!3299 = !DILocation(line: 1633, column: 7, scope: !3298)
!3300 = !DILocation(line: 1633, column: 7, scope: !3290)
!3301 = !DILocation(line: 1638, column: 26, scope: !3302)
!3302 = distinct !DILexicalBlock(scope: !3298, file: !602, line: 1634, column: 5)
!3303 = !DILocation(line: 1638, column: 14, scope: !3302)
!3304 = !DILocation(line: 1638, column: 50, scope: !3302)
!3305 = !DILocation(line: 1638, column: 7, scope: !3302)
!3306 = !DILocation(line: 1641, column: 5, scope: !3298)
!3307 = !DILocation(line: 1642, column: 1, scope: !3290)
!3308 = distinct !DISubprogram(name: "gimple_has_ops", scope: !602, file: !602, line: 1274, type: !3042, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3309 = !DILocalVariable(name: "g", arg: 1, scope: !3308, file: !602, line: 1274, type: !3044)
!3310 = !DILocation(line: 1274, column: 30, scope: !3308)
!3311 = !DILocation(line: 1276, column: 23, scope: !3308)
!3312 = !DILocation(line: 1276, column: 10, scope: !3308)
!3313 = !DILocation(line: 1276, column: 26, scope: !3308)
!3314 = !DILocation(line: 1276, column: 41, scope: !3308)
!3315 = !DILocation(line: 1276, column: 57, scope: !3308)
!3316 = !DILocation(line: 1276, column: 44, scope: !3308)
!3317 = !DILocation(line: 1276, column: 60, scope: !3308)
!3318 = !DILocation(line: 0, scope: !3308)
!3319 = !DILocation(line: 1276, column: 3, scope: !3308)
!3320 = distinct !DISubprogram(name: "gimple_ops", scope: !602, file: !602, line: 1614, type: !3321, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3321 = !DISubroutineType(types: !3322)
!3322 = !{!1230, !1196}
!3323 = !DILocalVariable(name: "gs", arg: 1, scope: !3320, file: !602, line: 1614, type: !1196)
!3324 = !DILocation(line: 1614, column: 20, scope: !3320)
!3325 = !DILocalVariable(name: "off", scope: !3320, file: !602, line: 1616, type: !1341)
!3326 = !DILocation(line: 1616, column: 10, scope: !3320)
!3327 = !DILocation(line: 1621, column: 56, scope: !3320)
!3328 = !DILocation(line: 1621, column: 28, scope: !3320)
!3329 = !DILocation(line: 1621, column: 9, scope: !3320)
!3330 = !DILocation(line: 1621, column: 7, scope: !3320)
!3331 = !DILocation(line: 1622, column: 3, scope: !3320)
!3332 = !DILocation(line: 1624, column: 29, scope: !3320)
!3333 = !DILocation(line: 1624, column: 20, scope: !3320)
!3334 = !DILocation(line: 1624, column: 34, scope: !3320)
!3335 = !DILocation(line: 1624, column: 32, scope: !3320)
!3336 = !DILocation(line: 1624, column: 10, scope: !3320)
!3337 = !DILocation(line: 1624, column: 3, scope: !3320)
!3338 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !602, file: !602, line: 1073, type: !3339, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3339 = !DISubroutineType(types: !3340)
!3340 = !{!646, !1196}
!3341 = !DILocalVariable(name: "gs", arg: 1, scope: !3338, file: !602, line: 1073, type: !1196)
!3342 = !DILocation(line: 1073, column: 36, scope: !3338)
!3343 = !DILocation(line: 1075, column: 37, scope: !3338)
!3344 = !DILocation(line: 1075, column: 24, scope: !3338)
!3345 = !DILocation(line: 1075, column: 10, scope: !3338)
!3346 = !DILocation(line: 1075, column: 3, scope: !3338)
!3347 = distinct !DISubprogram(name: "gss_for_code", scope: !602, file: !602, line: 1061, type: !3348, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{!646, !601}
!3350 = !DILocalVariable(name: "code", arg: 1, scope: !3347, file: !602, line: 1061, type: !601)
!3351 = !DILocation(line: 1061, column: 32, scope: !3347)
!3352 = !DILocation(line: 1066, column: 24, scope: !3347)
!3353 = !DILocation(line: 1066, column: 10, scope: !3347)
!3354 = !DILocation(line: 1066, column: 3, scope: !3347)
!3355 = distinct !DISubprogram(name: "gimple_num_ops", scope: !602, file: !602, line: 1596, type: !3356, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3356 = !DISubroutineType(types: !3357)
!3357 = !{!7, !3044}
!3358 = !DILocalVariable(name: "gs", arg: 1, scope: !3355, file: !602, line: 1596, type: !3044)
!3359 = !DILocation(line: 1596, column: 30, scope: !3355)
!3360 = !DILocation(line: 1598, column: 10, scope: !3355)
!3361 = !DILocation(line: 1598, column: 14, scope: !3355)
!3362 = !DILocation(line: 1598, column: 21, scope: !3355)
!3363 = !DILocation(line: 1598, column: 3, scope: !3355)
!3364 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3365, file: !3365, line: 617, type: !3366, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3365 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3366 = !DISubroutineType(types: !3367)
!3367 = !{!1411, !1196}
!3368 = !DILocalVariable(name: "stmt", arg: 1, scope: !3364, file: !3365, line: 617, type: !1196)
!3369 = !DILocation(line: 617, column: 30, scope: !3364)
!3370 = !DILocalVariable(name: "bb", scope: !3364, file: !3365, line: 619, type: !1648)
!3371 = !DILocation(line: 619, column: 15, scope: !3364)
!3372 = !DILocation(line: 619, column: 31, scope: !3364)
!3373 = !DILocation(line: 619, column: 20, scope: !3364)
!3374 = !DILocation(line: 620, column: 8, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3364, file: !3365, line: 620, column: 7)
!3376 = !DILocation(line: 620, column: 7, scope: !3364)
!3377 = !DILocation(line: 621, column: 5, scope: !3375)
!3378 = !DILocation(line: 623, column: 10, scope: !3364)
!3379 = !DILocation(line: 623, column: 14, scope: !3364)
!3380 = !DILocation(line: 623, column: 3, scope: !3364)
!3381 = !DILocation(line: 624, column: 1, scope: !3364)
!3382 = distinct !DISubprogram(name: "is_reassociable_op", scope: !3, file: !3, line: 359, type: !3383, scopeLine: 360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{!985, !1196, !134, !1411}
!3385 = !DILocalVariable(name: "stmt", arg: 1, scope: !3382, file: !3, line: 359, type: !1196)
!3386 = !DILocation(line: 359, column: 28, scope: !3382)
!3387 = !DILocalVariable(name: "code", arg: 2, scope: !3382, file: !3, line: 359, type: !134)
!3388 = !DILocation(line: 359, column: 49, scope: !3382)
!3389 = !DILocalVariable(name: "loop", arg: 3, scope: !3382, file: !3, line: 359, type: !1411)
!3390 = !DILocation(line: 359, column: 68, scope: !3382)
!3391 = !DILocalVariable(name: "bb", scope: !3382, file: !3, line: 361, type: !1648)
!3392 = !DILocation(line: 361, column: 15, scope: !3382)
!3393 = !DILocation(line: 361, column: 31, scope: !3382)
!3394 = !DILocation(line: 361, column: 20, scope: !3382)
!3395 = !DILocation(line: 363, column: 18, scope: !3396)
!3396 = distinct !DILexicalBlock(scope: !3382, file: !3, line: 363, column: 7)
!3397 = !DILocation(line: 363, column: 7, scope: !3396)
!3398 = !DILocation(line: 363, column: 24, scope: !3396)
!3399 = !DILocation(line: 363, column: 7, scope: !3382)
!3400 = !DILocation(line: 364, column: 5, scope: !3396)
!3401 = !DILocation(line: 366, column: 31, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3382, file: !3, line: 366, column: 7)
!3403 = !DILocation(line: 366, column: 37, scope: !3402)
!3404 = !DILocation(line: 366, column: 8, scope: !3402)
!3405 = !DILocation(line: 366, column: 7, scope: !3382)
!3406 = !DILocation(line: 367, column: 5, scope: !3402)
!3407 = !DILocation(line: 369, column: 25, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3382, file: !3, line: 369, column: 7)
!3409 = !DILocation(line: 369, column: 7, scope: !3408)
!3410 = !DILocation(line: 370, column: 7, scope: !3408)
!3411 = !DILocation(line: 370, column: 34, scope: !3408)
!3412 = !DILocation(line: 370, column: 10, scope: !3408)
!3413 = !DILocation(line: 370, column: 43, scope: !3408)
!3414 = !DILocation(line: 370, column: 40, scope: !3408)
!3415 = !DILocation(line: 371, column: 7, scope: !3408)
!3416 = !DILocation(line: 371, column: 45, scope: !3408)
!3417 = !DILocation(line: 371, column: 26, scope: !3408)
!3418 = !DILocation(line: 371, column: 10, scope: !3408)
!3419 = !DILocation(line: 369, column: 7, scope: !3382)
!3420 = !DILocation(line: 372, column: 5, scope: !3408)
!3421 = !DILocation(line: 374, column: 3, scope: !3382)
!3422 = !DILocation(line: 375, column: 1, scope: !3382)
!3423 = distinct !DISubprogram(name: "get_single_immediate_use", scope: !3, file: !3, line: 1495, type: !3424, scopeLine: 1496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3424 = !DISubroutineType(types: !3425)
!3425 = !{!1196, !865}
!3426 = !DILocalVariable(name: "lhs", arg: 1, scope: !3423, file: !3, line: 1495, type: !865)
!3427 = !DILocation(line: 1495, column: 32, scope: !3423)
!3428 = !DILocalVariable(name: "immuse", scope: !3423, file: !3, line: 1497, type: !2231)
!3429 = !DILocation(line: 1497, column: 17, scope: !3423)
!3430 = !DILocalVariable(name: "immusestmt", scope: !3423, file: !3, line: 1498, type: !1196)
!3431 = !DILocation(line: 1498, column: 10, scope: !3423)
!3432 = !DILocation(line: 1500, column: 7, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3423, file: !3, line: 1500, column: 7)
!3434 = !DILocation(line: 1500, column: 23, scope: !3433)
!3435 = !DILocation(line: 1501, column: 7, scope: !3433)
!3436 = !DILocation(line: 1501, column: 26, scope: !3433)
!3437 = !DILocation(line: 1501, column: 10, scope: !3433)
!3438 = !DILocation(line: 1502, column: 7, scope: !3433)
!3439 = !DILocation(line: 1502, column: 28, scope: !3433)
!3440 = !DILocation(line: 1502, column: 10, scope: !3433)
!3441 = !DILocation(line: 1500, column: 7, scope: !3423)
!3442 = !DILocation(line: 1503, column: 12, scope: !3433)
!3443 = !DILocation(line: 1503, column: 5, scope: !3433)
!3444 = !DILocation(line: 1505, column: 3, scope: !3423)
!3445 = !DILocation(line: 1506, column: 1, scope: !3423)
!3446 = distinct !DISubprogram(name: "gimple_bb", scope: !602, file: !602, line: 1112, type: !3447, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3447 = !DISubroutineType(types: !3448)
!3448 = !{!1160, !3044}
!3449 = !DILocalVariable(name: "g", arg: 1, scope: !3446, file: !602, line: 1112, type: !3044)
!3450 = !DILocation(line: 1112, column: 25, scope: !3446)
!3451 = !DILocation(line: 1114, column: 10, scope: !3446)
!3452 = !DILocation(line: 1114, column: 13, scope: !3446)
!3453 = !DILocation(line: 1114, column: 20, scope: !3446)
!3454 = !DILocation(line: 1114, column: 3, scope: !3446)
!3455 = distinct !DISubprogram(name: "has_single_use", scope: !3365, file: !3365, line: 350, type: !3456, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3456 = !DISubroutineType(types: !3457)
!3457 = !{!985, !3458}
!3458 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !866, line: 59, baseType: !3459)
!3459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3460, size: 64)
!3460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !868)
!3461 = !DILocalVariable(name: "var", arg: 1, scope: !3455, file: !3365, line: 350, type: !3458)
!3462 = !DILocation(line: 350, column: 28, scope: !3455)
!3463 = !DILocalVariable(name: "ptr", scope: !3455, file: !3365, line: 352, type: !3464)
!3464 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3465)
!3465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3466, size: 64)
!3466 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2233)
!3467 = !DILocation(line: 352, column: 34, scope: !3455)
!3468 = !DILocation(line: 352, column: 42, scope: !3455)
!3469 = !DILocation(line: 355, column: 7, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3455, file: !3365, line: 355, column: 7)
!3471 = !DILocation(line: 355, column: 14, scope: !3470)
!3472 = !DILocation(line: 355, column: 19, scope: !3470)
!3473 = !DILocation(line: 355, column: 11, scope: !3470)
!3474 = !DILocation(line: 355, column: 7, scope: !3455)
!3475 = !DILocation(line: 356, column: 5, scope: !3470)
!3476 = !DILocation(line: 359, column: 7, scope: !3477)
!3477 = distinct !DILexicalBlock(scope: !3455, file: !3365, line: 359, column: 7)
!3478 = !DILocation(line: 359, column: 14, scope: !3477)
!3479 = !DILocation(line: 359, column: 19, scope: !3477)
!3480 = !DILocation(line: 359, column: 25, scope: !3477)
!3481 = !DILocation(line: 359, column: 11, scope: !3477)
!3482 = !DILocation(line: 359, column: 7, scope: !3455)
!3483 = !DILocation(line: 360, column: 30, scope: !3477)
!3484 = !DILocation(line: 360, column: 13, scope: !3477)
!3485 = !DILocation(line: 360, column: 12, scope: !3477)
!3486 = !DILocation(line: 360, column: 5, scope: !3477)
!3487 = !DILocation(line: 363, column: 8, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !3455, file: !3365, line: 363, column: 7)
!3489 = !DILocation(line: 363, column: 7, scope: !3455)
!3490 = !DILocation(line: 364, column: 5, scope: !3488)
!3491 = !DILocation(line: 366, column: 28, scope: !3455)
!3492 = !DILocation(line: 366, column: 10, scope: !3455)
!3493 = !DILocation(line: 366, column: 3, scope: !3455)
!3494 = !DILocation(line: 367, column: 1, scope: !3455)
!3495 = distinct !DISubprogram(name: "is_gimple_debug", scope: !602, file: !602, line: 3249, type: !3042, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3496 = !DILocalVariable(name: "gs", arg: 1, scope: !3495, file: !602, line: 3249, type: !3044)
!3497 = !DILocation(line: 3249, column: 31, scope: !3495)
!3498 = !DILocation(line: 3251, column: 23, scope: !3495)
!3499 = !DILocation(line: 3251, column: 10, scope: !3495)
!3500 = !DILocation(line: 3251, column: 27, scope: !3495)
!3501 = !DILocation(line: 3251, column: 3, scope: !3495)
!3502 = distinct !DISubprogram(name: "single_imm_use", scope: !3365, file: !3365, line: 373, type: !3503, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3503 = !DISubroutineType(types: !3504)
!3504 = !{!985, !3458, !3505, !3506}
!3505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2231, size: 64)
!3506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!3507 = !DILocalVariable(name: "var", arg: 1, scope: !3502, file: !3365, line: 373, type: !3458)
!3508 = !DILocation(line: 373, column: 28, scope: !3502)
!3509 = !DILocalVariable(name: "use_p", arg: 2, scope: !3502, file: !3365, line: 373, type: !3505)
!3510 = !DILocation(line: 373, column: 48, scope: !3502)
!3511 = !DILocalVariable(name: "stmt", arg: 3, scope: !3502, file: !3365, line: 373, type: !3506)
!3512 = !DILocation(line: 373, column: 63, scope: !3502)
!3513 = !DILocalVariable(name: "ptr", scope: !3502, file: !3365, line: 375, type: !3464)
!3514 = !DILocation(line: 375, column: 34, scope: !3502)
!3515 = !DILocation(line: 375, column: 42, scope: !3502)
!3516 = !DILocation(line: 378, column: 7, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3502, file: !3365, line: 378, column: 7)
!3518 = !DILocation(line: 378, column: 14, scope: !3517)
!3519 = !DILocation(line: 378, column: 19, scope: !3517)
!3520 = !DILocation(line: 378, column: 11, scope: !3517)
!3521 = !DILocation(line: 378, column: 7, scope: !3502)
!3522 = !DILocation(line: 379, column: 5, scope: !3517)
!3523 = !DILabel(scope: !3524, name: "return_false", file: !3365, line: 380)
!3524 = distinct !DILexicalBlock(scope: !3517, file: !3365, line: 379, column: 5)
!3525 = !DILocation(line: 380, column: 5, scope: !3524)
!3526 = !DILocation(line: 381, column: 8, scope: !3524)
!3527 = !DILocation(line: 381, column: 14, scope: !3524)
!3528 = !DILocation(line: 382, column: 8, scope: !3524)
!3529 = !DILocation(line: 382, column: 13, scope: !3524)
!3530 = !DILocation(line: 383, column: 7, scope: !3524)
!3531 = !DILocation(line: 387, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3502, file: !3365, line: 387, column: 7)
!3533 = !DILocation(line: 387, column: 14, scope: !3532)
!3534 = !DILocation(line: 387, column: 19, scope: !3532)
!3535 = !DILocation(line: 387, column: 25, scope: !3532)
!3536 = !DILocation(line: 387, column: 11, scope: !3532)
!3537 = !DILocation(line: 387, column: 7, scope: !3502)
!3538 = !DILocation(line: 389, column: 29, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3540, file: !3365, line: 389, column: 11)
!3540 = distinct !DILexicalBlock(scope: !3532, file: !3365, line: 388, column: 5)
!3541 = !DILocation(line: 389, column: 12, scope: !3539)
!3542 = !DILocation(line: 389, column: 11, scope: !3540)
!3543 = !DILocation(line: 391, column: 13, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3539, file: !3365, line: 390, column: 2)
!3545 = !DILocation(line: 391, column: 18, scope: !3544)
!3546 = !DILocation(line: 391, column: 5, scope: !3544)
!3547 = !DILocation(line: 391, column: 11, scope: !3544)
!3548 = !DILocation(line: 392, column: 12, scope: !3544)
!3549 = !DILocation(line: 392, column: 17, scope: !3544)
!3550 = !DILocation(line: 392, column: 23, scope: !3544)
!3551 = !DILocation(line: 392, column: 27, scope: !3544)
!3552 = !DILocation(line: 392, column: 5, scope: !3544)
!3553 = !DILocation(line: 392, column: 10, scope: !3544)
!3554 = !DILocation(line: 393, column: 4, scope: !3544)
!3555 = !DILocation(line: 396, column: 2, scope: !3539)
!3556 = !DILocation(line: 400, column: 8, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3502, file: !3365, line: 400, column: 7)
!3558 = !DILocation(line: 400, column: 7, scope: !3502)
!3559 = !DILocation(line: 401, column: 5, scope: !3557)
!3560 = !DILocation(line: 403, column: 28, scope: !3502)
!3561 = !DILocation(line: 403, column: 33, scope: !3502)
!3562 = !DILocation(line: 403, column: 40, scope: !3502)
!3563 = !DILocation(line: 403, column: 10, scope: !3502)
!3564 = !DILocation(line: 403, column: 3, scope: !3502)
!3565 = !DILocation(line: 404, column: 1, scope: !3502)
!3566 = distinct !DISubprogram(name: "negate_value", scope: !3, file: !3, line: 1518, type: !3567, scopeLine: 1519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3567 = !DISubroutineType(types: !3568)
!3568 = !{!865, !865, !3164}
!3569 = !DILocalVariable(name: "tonegate", arg: 1, scope: !3566, file: !3, line: 1518, type: !865)
!3570 = !DILocation(line: 1518, column: 20, scope: !3566)
!3571 = !DILocalVariable(name: "gsi", arg: 2, scope: !3566, file: !3, line: 1518, type: !3164)
!3572 = !DILocation(line: 1518, column: 52, scope: !3566)
!3573 = !DILocalVariable(name: "negatedefstmt", scope: !3566, file: !3, line: 1520, type: !1196)
!3574 = !DILocation(line: 1520, column: 10, scope: !3566)
!3575 = !DILocalVariable(name: "resultofnegate", scope: !3566, file: !3, line: 1521, type: !865)
!3576 = !DILocation(line: 1521, column: 8, scope: !3566)
!3577 = !DILocation(line: 1525, column: 7, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3566, file: !3, line: 1525, column: 7)
!3579 = !DILocation(line: 1525, column: 28, scope: !3578)
!3580 = !DILocation(line: 1525, column: 7, scope: !3566)
!3581 = !DILocation(line: 1526, column: 21, scope: !3578)
!3582 = !DILocation(line: 1526, column: 19, scope: !3578)
!3583 = !DILocation(line: 1526, column: 5, scope: !3578)
!3584 = !DILocation(line: 1527, column: 7, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3566, file: !3, line: 1527, column: 7)
!3586 = !DILocation(line: 1527, column: 28, scope: !3585)
!3587 = !DILocation(line: 1528, column: 7, scope: !3585)
!3588 = !DILocation(line: 1528, column: 28, scope: !3585)
!3589 = !DILocation(line: 1528, column: 10, scope: !3585)
!3590 = !DILocation(line: 1529, column: 7, scope: !3585)
!3591 = !DILocation(line: 1529, column: 10, scope: !3585)
!3592 = !DILocation(line: 1529, column: 56, scope: !3585)
!3593 = !DILocation(line: 1530, column: 7, scope: !3585)
!3594 = !DILocation(line: 1530, column: 45, scope: !3585)
!3595 = !DILocation(line: 1530, column: 26, scope: !3585)
!3596 = !DILocation(line: 1530, column: 10, scope: !3585)
!3597 = !DILocation(line: 1531, column: 7, scope: !3585)
!3598 = !DILocation(line: 1531, column: 34, scope: !3585)
!3599 = !DILocation(line: 1531, column: 10, scope: !3585)
!3600 = !DILocation(line: 1531, column: 49, scope: !3585)
!3601 = !DILocation(line: 1527, column: 7, scope: !3566)
!3602 = !DILocalVariable(name: "gsi", scope: !3603, file: !3, line: 1533, type: !2622)
!3603 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 1532, column: 5)
!3604 = !DILocation(line: 1533, column: 28, scope: !3603)
!3605 = !DILocalVariable(name: "rhs1", scope: !3603, file: !3, line: 1534, type: !865)
!3606 = !DILocation(line: 1534, column: 12, scope: !3603)
!3607 = !DILocation(line: 1534, column: 39, scope: !3603)
!3608 = !DILocation(line: 1534, column: 19, scope: !3603)
!3609 = !DILocalVariable(name: "rhs2", scope: !3603, file: !3, line: 1535, type: !865)
!3610 = !DILocation(line: 1535, column: 12, scope: !3603)
!3611 = !DILocation(line: 1535, column: 39, scope: !3603)
!3612 = !DILocation(line: 1535, column: 19, scope: !3603)
!3613 = !DILocation(line: 1537, column: 27, scope: !3603)
!3614 = !DILocation(line: 1537, column: 13, scope: !3603)
!3615 = !DILocation(line: 1538, column: 28, scope: !3603)
!3616 = !DILocation(line: 1538, column: 14, scope: !3603)
!3617 = !DILocation(line: 1538, column: 12, scope: !3603)
!3618 = !DILocation(line: 1539, column: 31, scope: !3603)
!3619 = !DILocation(line: 1539, column: 46, scope: !3603)
!3620 = !DILocation(line: 1539, column: 7, scope: !3603)
!3621 = !DILocation(line: 1541, column: 27, scope: !3603)
!3622 = !DILocation(line: 1541, column: 13, scope: !3603)
!3623 = !DILocation(line: 1542, column: 28, scope: !3603)
!3624 = !DILocation(line: 1542, column: 14, scope: !3603)
!3625 = !DILocation(line: 1542, column: 12, scope: !3603)
!3626 = !DILocation(line: 1543, column: 31, scope: !3603)
!3627 = !DILocation(line: 1543, column: 46, scope: !3603)
!3628 = !DILocation(line: 1543, column: 7, scope: !3603)
!3629 = !DILocation(line: 1545, column: 20, scope: !3603)
!3630 = !DILocation(line: 1545, column: 7, scope: !3603)
!3631 = !DILocation(line: 1546, column: 33, scope: !3603)
!3632 = !DILocation(line: 1546, column: 14, scope: !3603)
!3633 = !DILocation(line: 1546, column: 7, scope: !3603)
!3634 = !DILocation(line: 1549, column: 14, scope: !3566)
!3635 = !DILocation(line: 1549, column: 12, scope: !3566)
!3636 = !DILocation(line: 1550, column: 46, scope: !3566)
!3637 = !DILocation(line: 1550, column: 51, scope: !3566)
!3638 = !DILocation(line: 1550, column: 20, scope: !3566)
!3639 = !DILocation(line: 1550, column: 18, scope: !3566)
!3640 = !DILocation(line: 1552, column: 3, scope: !3566)
!3641 = !DILocation(line: 1553, column: 10, scope: !3566)
!3642 = !DILocation(line: 1553, column: 3, scope: !3566)
!3643 = !DILocation(line: 1554, column: 1, scope: !3566)
!3644 = distinct !DISubprogram(name: "update_stmt", scope: !602, file: !602, line: 1456, type: !3645, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3645 = !DISubroutineType(types: !3646)
!3646 = !{null, !1196}
!3647 = !DILocalVariable(name: "s", arg: 1, scope: !3644, file: !602, line: 1456, type: !1196)
!3648 = !DILocation(line: 1456, column: 21, scope: !3644)
!3649 = !DILocation(line: 1458, column: 23, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3644, file: !602, line: 1458, column: 7)
!3651 = !DILocation(line: 1458, column: 7, scope: !3650)
!3652 = !DILocation(line: 1458, column: 7, scope: !3644)
!3653 = !DILocation(line: 1460, column: 28, scope: !3654)
!3654 = distinct !DILexicalBlock(scope: !3650, file: !602, line: 1459, column: 5)
!3655 = !DILocation(line: 1460, column: 7, scope: !3654)
!3656 = !DILocation(line: 1461, column: 29, scope: !3654)
!3657 = !DILocation(line: 1461, column: 7, scope: !3654)
!3658 = !DILocation(line: 1462, column: 5, scope: !3654)
!3659 = !DILocation(line: 1463, column: 1, scope: !3644)
!3660 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !602, file: !602, line: 1747, type: !3661, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3661 = !DISubroutineType(types: !3662)
!3662 = !{null, !1196, !865}
!3663 = !DILocalVariable(name: "gs", arg: 1, scope: !3660, file: !602, line: 1747, type: !1196)
!3664 = !DILocation(line: 1747, column: 32, scope: !3660)
!3665 = !DILocalVariable(name: "rhs", arg: 2, scope: !3660, file: !602, line: 1747, type: !865)
!3666 = !DILocation(line: 1747, column: 41, scope: !3660)
!3667 = !DILocation(line: 1751, column: 18, scope: !3660)
!3668 = !DILocation(line: 1751, column: 25, scope: !3660)
!3669 = !DILocation(line: 1751, column: 3, scope: !3660)
!3670 = !DILocation(line: 1752, column: 1, scope: !3660)
!3671 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !602, file: !602, line: 1784, type: !3661, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3672 = !DILocalVariable(name: "gs", arg: 1, scope: !3671, file: !602, line: 1784, type: !1196)
!3673 = !DILocation(line: 1784, column: 32, scope: !3671)
!3674 = !DILocalVariable(name: "rhs", arg: 2, scope: !3671, file: !602, line: 1784, type: !865)
!3675 = !DILocation(line: 1784, column: 41, scope: !3671)
!3676 = !DILocation(line: 1788, column: 18, scope: !3671)
!3677 = !DILocation(line: 1788, column: 25, scope: !3671)
!3678 = !DILocation(line: 1788, column: 3, scope: !3671)
!3679 = !DILocation(line: 1789, column: 1, scope: !3671)
!3680 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !135, file: !135, line: 184, type: !3681, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3681 = !DISubroutineType(types: !3682)
!3682 = !{!1230, !3683, !865}
!3683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!3684 = !DILocalVariable(name: "vec_", arg: 1, scope: !3680, file: !135, line: 184, type: !3683)
!3685 = !DILocation(line: 184, column: 1, scope: !3680)
!3686 = !DILocalVariable(name: "obj_", arg: 2, scope: !3680, file: !135, line: 184, type: !865)
!3687 = distinct !DISubprogram(name: "gimple_set_op", scope: !602, file: !602, line: 1663, type: !3688, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3688 = !DISubroutineType(types: !3689)
!3689 = !{null, !1196, !7, !865}
!3690 = !DILocalVariable(name: "gs", arg: 1, scope: !3687, file: !602, line: 1663, type: !1196)
!3691 = !DILocation(line: 1663, column: 23, scope: !3687)
!3692 = !DILocalVariable(name: "i", arg: 2, scope: !3687, file: !602, line: 1663, type: !7)
!3693 = !DILocation(line: 1663, column: 36, scope: !3687)
!3694 = !DILocalVariable(name: "op", arg: 3, scope: !3687, file: !602, line: 1663, type: !865)
!3695 = !DILocation(line: 1663, column: 44, scope: !3687)
!3696 = !DILocation(line: 1665, column: 3, scope: !3687)
!3697 = !DILocation(line: 1671, column: 24, scope: !3687)
!3698 = !DILocation(line: 1671, column: 15, scope: !3687)
!3699 = !DILocation(line: 1671, column: 3, scope: !3687)
!3700 = !DILocation(line: 1671, column: 19, scope: !3687)
!3701 = !DILocation(line: 1671, column: 22, scope: !3687)
!3702 = !DILocation(line: 1672, column: 1, scope: !3687)
!3703 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !135, file: !135, line: 184, type: !3704, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3704 = !DISubroutineType(types: !3705)
!3705 = !{!962, !3683, !962}
!3706 = !DILocalVariable(name: "vec_", arg: 1, scope: !3703, file: !135, line: 184, type: !3683)
!3707 = !DILocation(line: 184, column: 1, scope: !3703)
!3708 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3703, file: !135, line: 184, type: !962)
!3709 = !DILocalVariable(name: "extend", scope: !3703, file: !135, line: 184, type: !962)
!3710 = !DILocation(line: 184, column: 1, scope: !3711)
!3711 = distinct !DILexicalBlock(scope: !3703, file: !135, line: 184, column: 1)
!3712 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !3713, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3713 = !DISubroutineType(types: !3714)
!3714 = !{!1230, !3715, !865}
!3715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1747, size: 64)
!3716 = !DILocalVariable(name: "vec_", arg: 1, scope: !3712, file: !135, line: 182, type: !3715)
!3717 = !DILocation(line: 182, column: 1, scope: !3712)
!3718 = !DILocalVariable(name: "obj_", arg: 2, scope: !3712, file: !135, line: 182, type: !865)
!3719 = !DILocalVariable(name: "slot_", scope: !3712, file: !135, line: 182, type: !1230)
!3720 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !3721, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3721 = !DISubroutineType(types: !3722)
!3722 = !{!962, !3715, !962}
!3723 = !DILocalVariable(name: "vec_", arg: 1, scope: !3720, file: !135, line: 182, type: !3715)
!3724 = !DILocation(line: 182, column: 1, scope: !3720)
!3725 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3720, file: !135, line: 182, type: !962)
!3726 = distinct !DISubprogram(name: "gsi_last_bb", scope: !602, file: !602, line: 4450, type: !2988, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3727 = !DILocalVariable(name: "bb", arg: 1, scope: !3726, file: !602, line: 4450, type: !1648)
!3728 = !DILocation(line: 4450, column: 26, scope: !3726)
!3729 = !DILocalVariable(name: "i", scope: !3726, file: !602, line: 4452, type: !2622)
!3730 = !DILocation(line: 4452, column: 24, scope: !3726)
!3731 = !DILocalVariable(name: "seq", scope: !3726, file: !602, line: 4453, type: !1186)
!3732 = !DILocation(line: 4453, column: 14, scope: !3726)
!3733 = !DILocation(line: 4455, column: 17, scope: !3726)
!3734 = !DILocation(line: 4455, column: 9, scope: !3726)
!3735 = !DILocation(line: 4455, column: 7, scope: !3726)
!3736 = !DILocation(line: 4456, column: 28, scope: !3726)
!3737 = !DILocation(line: 4456, column: 11, scope: !3726)
!3738 = !DILocation(line: 4456, column: 5, scope: !3726)
!3739 = !DILocation(line: 4456, column: 9, scope: !3726)
!3740 = !DILocation(line: 4457, column: 11, scope: !3726)
!3741 = !DILocation(line: 4457, column: 5, scope: !3726)
!3742 = !DILocation(line: 4457, column: 9, scope: !3726)
!3743 = !DILocation(line: 4458, column: 10, scope: !3726)
!3744 = !DILocation(line: 4458, column: 5, scope: !3726)
!3745 = !DILocation(line: 4458, column: 8, scope: !3726)
!3746 = !DILocation(line: 4460, column: 3, scope: !3726)
!3747 = distinct !DISubprogram(name: "gimple_visited_p", scope: !602, file: !602, line: 1226, type: !3099, scopeLine: 1227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3748 = !DILocalVariable(name: "stmt", arg: 1, scope: !3747, file: !602, line: 1226, type: !1196)
!3749 = !DILocation(line: 1226, column: 26, scope: !3747)
!3750 = !DILocation(line: 1228, column: 10, scope: !3747)
!3751 = !DILocation(line: 1228, column: 16, scope: !3747)
!3752 = !DILocation(line: 1228, column: 23, scope: !3747)
!3753 = !DILocation(line: 1228, column: 3, scope: !3747)
!3754 = distinct !DISubprogram(name: "has_zero_uses", scope: !3365, file: !3365, line: 332, type: !3456, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3755 = !DILocalVariable(name: "var", arg: 1, scope: !3754, file: !3365, line: 332, type: !3458)
!3756 = !DILocation(line: 332, column: 27, scope: !3754)
!3757 = !DILocalVariable(name: "ptr", scope: !3754, file: !3365, line: 334, type: !3464)
!3758 = !DILocation(line: 334, column: 34, scope: !3754)
!3759 = !DILocation(line: 334, column: 42, scope: !3754)
!3760 = !DILocation(line: 337, column: 7, scope: !3761)
!3761 = distinct !DILexicalBlock(scope: !3754, file: !3365, line: 337, column: 7)
!3762 = !DILocation(line: 337, column: 14, scope: !3761)
!3763 = !DILocation(line: 337, column: 19, scope: !3761)
!3764 = !DILocation(line: 337, column: 11, scope: !3761)
!3765 = !DILocation(line: 337, column: 7, scope: !3754)
!3766 = !DILocation(line: 338, column: 5, scope: !3761)
!3767 = !DILocation(line: 342, column: 8, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3754, file: !3365, line: 342, column: 7)
!3769 = !DILocation(line: 342, column: 7, scope: !3754)
!3770 = !DILocation(line: 343, column: 5, scope: !3768)
!3771 = !DILocation(line: 345, column: 27, scope: !3754)
!3772 = !DILocation(line: 345, column: 10, scope: !3754)
!3773 = !DILocation(line: 345, column: 3, scope: !3754)
!3774 = !DILocation(line: 346, column: 1, scope: !3754)
!3775 = distinct !DISubprogram(name: "linearize_expr_tree", scope: !3, file: !3, line: 1611, type: !3776, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3776 = !DISubroutineType(types: !3777)
!3777 = !{null, !2253, !1196, !985, !985}
!3778 = !DILocalVariable(name: "ops", arg: 1, scope: !3775, file: !3, line: 1611, type: !2253)
!3779 = !DILocation(line: 1611, column: 51, scope: !3775)
!3780 = !DILocalVariable(name: "stmt", arg: 2, scope: !3775, file: !3, line: 1611, type: !1196)
!3781 = !DILocation(line: 1611, column: 63, scope: !3775)
!3782 = !DILocalVariable(name: "is_associative", arg: 3, scope: !3775, file: !3, line: 1612, type: !985)
!3783 = !DILocation(line: 1612, column: 13, scope: !3775)
!3784 = !DILocalVariable(name: "set_visited", arg: 4, scope: !3775, file: !3, line: 1612, type: !985)
!3785 = !DILocation(line: 1612, column: 34, scope: !3775)
!3786 = !DILocalVariable(name: "binlhs", scope: !3775, file: !3, line: 1614, type: !865)
!3787 = !DILocation(line: 1614, column: 8, scope: !3775)
!3788 = !DILocation(line: 1614, column: 37, scope: !3775)
!3789 = !DILocation(line: 1614, column: 17, scope: !3775)
!3790 = !DILocalVariable(name: "binrhs", scope: !3775, file: !3, line: 1615, type: !865)
!3791 = !DILocation(line: 1615, column: 8, scope: !3775)
!3792 = !DILocation(line: 1615, column: 37, scope: !3775)
!3793 = !DILocation(line: 1615, column: 17, scope: !3775)
!3794 = !DILocalVariable(name: "binlhsdef", scope: !3775, file: !3, line: 1616, type: !1196)
!3795 = !DILocation(line: 1616, column: 10, scope: !3775)
!3796 = !DILocalVariable(name: "binrhsdef", scope: !3775, file: !3, line: 1616, type: !1196)
!3797 = !DILocation(line: 1616, column: 21, scope: !3775)
!3798 = !DILocalVariable(name: "binlhsisreassoc", scope: !3775, file: !3, line: 1617, type: !985)
!3799 = !DILocation(line: 1617, column: 8, scope: !3775)
!3800 = !DILocalVariable(name: "binrhsisreassoc", scope: !3775, file: !3, line: 1618, type: !985)
!3801 = !DILocation(line: 1618, column: 8, scope: !3775)
!3802 = !DILocalVariable(name: "rhscode", scope: !3775, file: !3, line: 1619, type: !134)
!3803 = !DILocation(line: 1619, column: 18, scope: !3775)
!3804 = !DILocation(line: 1619, column: 52, scope: !3775)
!3805 = !DILocation(line: 1619, column: 28, scope: !3775)
!3806 = !DILocalVariable(name: "loop", scope: !3775, file: !3, line: 1620, type: !1411)
!3807 = !DILocation(line: 1620, column: 16, scope: !3775)
!3808 = !DILocation(line: 1620, column: 45, scope: !3775)
!3809 = !DILocation(line: 1620, column: 23, scope: !3775)
!3810 = !DILocation(line: 1622, column: 7, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 1622, column: 7)
!3812 = !DILocation(line: 1622, column: 7, scope: !3775)
!3813 = !DILocation(line: 1623, column: 25, scope: !3811)
!3814 = !DILocation(line: 1623, column: 5, scope: !3811)
!3815 = !DILocation(line: 1625, column: 7, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 1625, column: 7)
!3817 = !DILocation(line: 1625, column: 26, scope: !3816)
!3818 = !DILocation(line: 1625, column: 7, scope: !3775)
!3819 = !DILocation(line: 1627, column: 19, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 1626, column: 5)
!3821 = !DILocation(line: 1627, column: 17, scope: !3820)
!3822 = !DILocation(line: 1628, column: 45, scope: !3820)
!3823 = !DILocation(line: 1628, column: 56, scope: !3820)
!3824 = !DILocation(line: 1628, column: 65, scope: !3820)
!3825 = !DILocation(line: 1628, column: 25, scope: !3820)
!3826 = !DILocation(line: 1628, column: 23, scope: !3820)
!3827 = !DILocation(line: 1629, column: 5, scope: !3820)
!3828 = !DILocation(line: 1631, column: 7, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 1631, column: 7)
!3830 = !DILocation(line: 1631, column: 26, scope: !3829)
!3831 = !DILocation(line: 1631, column: 7, scope: !3775)
!3832 = !DILocation(line: 1633, column: 19, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 1632, column: 5)
!3834 = !DILocation(line: 1633, column: 17, scope: !3833)
!3835 = !DILocation(line: 1634, column: 45, scope: !3833)
!3836 = !DILocation(line: 1634, column: 56, scope: !3833)
!3837 = !DILocation(line: 1634, column: 65, scope: !3833)
!3838 = !DILocation(line: 1634, column: 25, scope: !3833)
!3839 = !DILocation(line: 1634, column: 23, scope: !3833)
!3840 = !DILocation(line: 1635, column: 5, scope: !3833)
!3841 = !DILocation(line: 1643, column: 8, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 1643, column: 7)
!3843 = !DILocation(line: 1643, column: 7, scope: !3775)
!3844 = !DILocalVariable(name: "temp", scope: !3845, file: !3, line: 1645, type: !865)
!3845 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 1644, column: 5)
!3846 = !DILocation(line: 1645, column: 12, scope: !3845)
!3847 = !DILocation(line: 1648, column: 12, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 1648, column: 11)
!3849 = !DILocation(line: 1648, column: 11, scope: !3845)
!3850 = !DILocation(line: 1650, column: 20, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1649, column: 2)
!3852 = !DILocation(line: 1650, column: 25, scope: !3851)
!3853 = !DILocation(line: 1650, column: 4, scope: !3851)
!3854 = !DILocation(line: 1651, column: 4, scope: !3851)
!3855 = !DILocation(line: 1654, column: 12, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 1654, column: 11)
!3857 = !DILocation(line: 1654, column: 11, scope: !3845)
!3858 = !DILocation(line: 1656, column: 20, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3856, file: !3, line: 1655, column: 2)
!3860 = !DILocation(line: 1656, column: 25, scope: !3859)
!3861 = !DILocation(line: 1656, column: 4, scope: !3859)
!3862 = !DILocation(line: 1657, column: 20, scope: !3859)
!3863 = !DILocation(line: 1657, column: 25, scope: !3859)
!3864 = !DILocation(line: 1657, column: 4, scope: !3859)
!3865 = !DILocation(line: 1658, column: 4, scope: !3859)
!3866 = !DILocation(line: 1661, column: 11, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 1661, column: 11)
!3868 = !DILocation(line: 1661, column: 21, scope: !3867)
!3869 = !DILocation(line: 1661, column: 25, scope: !3867)
!3870 = !DILocation(line: 1661, column: 36, scope: !3867)
!3871 = !DILocation(line: 1661, column: 11, scope: !3845)
!3872 = !DILocation(line: 1663, column: 13, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3867, file: !3, line: 1662, column: 2)
!3874 = !DILocation(line: 1663, column: 4, scope: !3873)
!3875 = !DILocation(line: 1664, column: 23, scope: !3873)
!3876 = !DILocation(line: 1664, column: 34, scope: !3873)
!3877 = !DILocation(line: 1664, column: 4, scope: !3873)
!3878 = !DILocation(line: 1665, column: 2, scope: !3873)
!3879 = !DILocation(line: 1667, column: 27, scope: !3845)
!3880 = !DILocation(line: 1668, column: 30, scope: !3845)
!3881 = !DILocation(line: 1668, column: 6, scope: !3845)
!3882 = !DILocation(line: 1669, column: 30, scope: !3845)
!3883 = !DILocation(line: 1669, column: 6, scope: !3845)
!3884 = !DILocation(line: 1667, column: 7, scope: !3845)
!3885 = !DILocation(line: 1670, column: 20, scope: !3845)
!3886 = !DILocation(line: 1670, column: 7, scope: !3845)
!3887 = !DILocation(line: 1672, column: 11, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 1672, column: 11)
!3889 = !DILocation(line: 1672, column: 21, scope: !3888)
!3890 = !DILocation(line: 1672, column: 25, scope: !3888)
!3891 = !DILocation(line: 1672, column: 36, scope: !3888)
!3892 = !DILocation(line: 1672, column: 11, scope: !3845)
!3893 = !DILocation(line: 1674, column: 13, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3888, file: !3, line: 1673, column: 2)
!3895 = !DILocation(line: 1674, column: 4, scope: !3894)
!3896 = !DILocation(line: 1675, column: 23, scope: !3894)
!3897 = !DILocation(line: 1675, column: 34, scope: !3894)
!3898 = !DILocation(line: 1675, column: 4, scope: !3894)
!3899 = !DILocation(line: 1676, column: 2, scope: !3894)
!3900 = !DILocation(line: 1680, column: 14, scope: !3845)
!3901 = !DILocation(line: 1680, column: 12, scope: !3845)
!3902 = !DILocation(line: 1681, column: 16, scope: !3845)
!3903 = !DILocation(line: 1681, column: 14, scope: !3845)
!3904 = !DILocation(line: 1682, column: 16, scope: !3845)
!3905 = !DILocation(line: 1682, column: 14, scope: !3845)
!3906 = !DILocation(line: 1683, column: 5, scope: !3845)
!3907 = !DILocation(line: 1684, column: 12, scope: !3908)
!3908 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 1684, column: 12)
!3909 = !DILocation(line: 1684, column: 12, scope: !3842)
!3910 = !DILocation(line: 1686, column: 23, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 1685, column: 5)
!3912 = !DILocation(line: 1686, column: 7, scope: !3911)
!3913 = !DILocation(line: 1687, column: 36, scope: !3911)
!3914 = !DILocation(line: 1687, column: 16, scope: !3911)
!3915 = !DILocation(line: 1687, column: 14, scope: !3911)
!3916 = !DILocation(line: 1688, column: 36, scope: !3911)
!3917 = !DILocation(line: 1688, column: 16, scope: !3911)
!3918 = !DILocation(line: 1688, column: 14, scope: !3911)
!3919 = !DILocation(line: 1689, column: 5, scope: !3911)
!3920 = !DILocation(line: 1691, column: 3, scope: !3775)
!3921 = !DILocation(line: 1694, column: 24, scope: !3775)
!3922 = !DILocation(line: 1694, column: 29, scope: !3775)
!3923 = !DILocation(line: 1695, column: 10, scope: !3775)
!3924 = !DILocation(line: 1695, column: 26, scope: !3775)
!3925 = !DILocation(line: 1694, column: 3, scope: !3775)
!3926 = !DILocation(line: 1696, column: 19, scope: !3775)
!3927 = !DILocation(line: 1696, column: 24, scope: !3775)
!3928 = !DILocation(line: 1696, column: 3, scope: !3775)
!3929 = !DILocation(line: 1697, column: 1, scope: !3775)
!3930 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_address", scope: !3, file: !3, line: 297, type: !3931, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3931 = !DISubroutineType(types: !3932)
!3932 = !{!2433, !3933}
!3933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!3934 = !DILocalVariable(name: "vec_", arg: 1, scope: !3930, file: !3, line: 297, type: !3933)
!3935 = !DILocation(line: 297, column: 1, scope: !3930)
!3936 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_length", scope: !3, file: !3, line: 297, type: !3937, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3937 = !DISubroutineType(types: !3938)
!3938 = !{!7, !2431}
!3939 = !DILocalVariable(name: "vec_", arg: 1, scope: !3936, file: !3, line: 297, type: !2431)
!3940 = !DILocation(line: 297, column: 1, scope: !3936)
!3941 = distinct !DISubprogram(name: "sort_by_operand_rank", scope: !3, file: !3, line: 322, type: !1695, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3942 = !DILocalVariable(name: "pa", arg: 1, scope: !3941, file: !3, line: 322, type: !1690)
!3943 = !DILocation(line: 322, column: 35, scope: !3941)
!3944 = !DILocalVariable(name: "pb", arg: 2, scope: !3941, file: !3, line: 322, type: !1690)
!3945 = !DILocation(line: 322, column: 51, scope: !3941)
!3946 = !DILocalVariable(name: "oea", scope: !3941, file: !3, line: 324, type: !2252)
!3947 = !DILocation(line: 324, column: 25, scope: !3941)
!3948 = !DILocation(line: 324, column: 57, scope: !3941)
!3949 = !DILocation(line: 324, column: 32, scope: !3941)
!3950 = !DILocation(line: 324, column: 31, scope: !3941)
!3951 = !DILocalVariable(name: "oeb", scope: !3941, file: !3, line: 325, type: !2252)
!3952 = !DILocation(line: 325, column: 25, scope: !3941)
!3953 = !DILocation(line: 325, column: 57, scope: !3941)
!3954 = !DILocation(line: 325, column: 32, scope: !3941)
!3955 = !DILocation(line: 325, column: 31, scope: !3941)
!3956 = !DILocation(line: 330, column: 7, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 330, column: 7)
!3958 = !DILocation(line: 330, column: 12, scope: !3957)
!3959 = !DILocation(line: 330, column: 17, scope: !3957)
!3960 = !DILocation(line: 330, column: 22, scope: !3957)
!3961 = !DILocation(line: 330, column: 26, scope: !3957)
!3962 = !DILocation(line: 330, column: 31, scope: !3957)
!3963 = !DILocation(line: 330, column: 36, scope: !3957)
!3964 = !DILocation(line: 330, column: 7, scope: !3941)
!3965 = !DILocation(line: 331, column: 27, scope: !3957)
!3966 = !DILocation(line: 331, column: 32, scope: !3957)
!3967 = !DILocation(line: 331, column: 12, scope: !3957)
!3968 = !DILocation(line: 331, column: 53, scope: !3957)
!3969 = !DILocation(line: 331, column: 58, scope: !3957)
!3970 = !DILocation(line: 331, column: 38, scope: !3957)
!3971 = !DILocation(line: 331, column: 36, scope: !3957)
!3972 = !DILocation(line: 331, column: 5, scope: !3957)
!3973 = !DILocation(line: 335, column: 8, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 335, column: 7)
!3975 = !DILocation(line: 335, column: 13, scope: !3974)
!3976 = !DILocation(line: 335, column: 20, scope: !3974)
!3977 = !DILocation(line: 335, column: 25, scope: !3974)
!3978 = !DILocation(line: 335, column: 18, scope: !3974)
!3979 = !DILocation(line: 335, column: 30, scope: !3974)
!3980 = !DILocation(line: 336, column: 7, scope: !3974)
!3981 = !DILocation(line: 336, column: 10, scope: !3974)
!3982 = !DILocation(line: 336, column: 30, scope: !3974)
!3983 = !DILocation(line: 337, column: 7, scope: !3974)
!3984 = !DILocation(line: 337, column: 10, scope: !3974)
!3985 = !DILocation(line: 337, column: 30, scope: !3974)
!3986 = !DILocation(line: 335, column: 7, scope: !3941)
!3987 = !DILocation(line: 338, column: 12, scope: !3974)
!3988 = !DILocation(line: 338, column: 41, scope: !3974)
!3989 = !DILocation(line: 338, column: 39, scope: !3974)
!3990 = !DILocation(line: 338, column: 5, scope: !3974)
!3991 = !DILocation(line: 340, column: 10, scope: !3941)
!3992 = !DILocation(line: 340, column: 15, scope: !3941)
!3993 = !DILocation(line: 340, column: 22, scope: !3941)
!3994 = !DILocation(line: 340, column: 27, scope: !3941)
!3995 = !DILocation(line: 340, column: 20, scope: !3941)
!3996 = !DILocation(line: 340, column: 3, scope: !3941)
!3997 = !DILocation(line: 341, column: 1, scope: !3941)
!3998 = distinct !DISubprogram(name: "optimize_ops_list", scope: !3, file: !3, line: 1173, type: !3999, scopeLine: 1175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!3999 = !DISubroutineType(types: !4000)
!4000 = !{null, !134, !2253}
!4001 = !DILocalVariable(name: "opcode", arg: 1, scope: !3998, file: !3, line: 1173, type: !134)
!4002 = !DILocation(line: 1173, column: 35, scope: !3998)
!4003 = !DILocalVariable(name: "ops", arg: 2, scope: !3998, file: !3, line: 1174, type: !2253)
!4004 = !DILocation(line: 1174, column: 36, scope: !3998)
!4005 = !DILocalVariable(name: "length", scope: !3998, file: !3, line: 1176, type: !7)
!4006 = !DILocation(line: 1176, column: 16, scope: !3998)
!4007 = !DILocation(line: 1176, column: 25, scope: !3998)
!4008 = !DILocalVariable(name: "i", scope: !3998, file: !3, line: 1177, type: !7)
!4009 = !DILocation(line: 1177, column: 16, scope: !3998)
!4010 = !DILocalVariable(name: "oe", scope: !3998, file: !3, line: 1178, type: !859)
!4011 = !DILocation(line: 1178, column: 19, scope: !3998)
!4012 = !DILocalVariable(name: "oelast", scope: !3998, file: !3, line: 1179, type: !859)
!4013 = !DILocation(line: 1179, column: 19, scope: !3998)
!4014 = !DILocalVariable(name: "iterate", scope: !3998, file: !3, line: 1180, type: !985)
!4015 = !DILocation(line: 1180, column: 8, scope: !3998)
!4016 = !DILocation(line: 1182, column: 7, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1182, column: 7)
!4018 = !DILocation(line: 1182, column: 14, scope: !4017)
!4019 = !DILocation(line: 1182, column: 7, scope: !3998)
!4020 = !DILocation(line: 1183, column: 5, scope: !4017)
!4021 = !DILocation(line: 1185, column: 12, scope: !3998)
!4022 = !DILocation(line: 1185, column: 10, scope: !3998)
!4023 = !DILocation(line: 1189, column: 7, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1189, column: 7)
!4025 = !DILocation(line: 1189, column: 15, scope: !4024)
!4026 = !DILocation(line: 1189, column: 20, scope: !4024)
!4027 = !DILocation(line: 1189, column: 25, scope: !4024)
!4028 = !DILocation(line: 1189, column: 53, scope: !4024)
!4029 = !DILocation(line: 1189, column: 61, scope: !4024)
!4030 = !DILocation(line: 1189, column: 28, scope: !4024)
!4031 = !DILocation(line: 1189, column: 7, scope: !3998)
!4032 = !DILocalVariable(name: "oelm1", scope: !4033, file: !3, line: 1191, type: !859)
!4033 = distinct !DILexicalBlock(scope: !4024, file: !3, line: 1190, column: 5)
!4034 = !DILocation(line: 1191, column: 23, scope: !4033)
!4035 = !DILocation(line: 1191, column: 31, scope: !4033)
!4036 = !DILocation(line: 1193, column: 11, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4033, file: !3, line: 1193, column: 11)
!4038 = !DILocation(line: 1193, column: 18, scope: !4037)
!4039 = !DILocation(line: 1193, column: 23, scope: !4037)
!4040 = !DILocation(line: 1194, column: 4, scope: !4037)
!4041 = !DILocation(line: 1194, column: 32, scope: !4037)
!4042 = !DILocation(line: 1194, column: 39, scope: !4037)
!4043 = !DILocation(line: 1194, column: 7, scope: !4037)
!4044 = !DILocation(line: 1195, column: 4, scope: !4037)
!4045 = !DILocation(line: 1195, column: 34, scope: !4037)
!4046 = !DILocation(line: 1196, column: 12, scope: !4037)
!4047 = !DILocation(line: 1195, column: 7, scope: !4037)
!4048 = !DILocation(line: 1193, column: 11, scope: !4033)
!4049 = !DILocalVariable(name: "folded", scope: !4050, file: !3, line: 1198, type: !865)
!4050 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 1197, column: 2)
!4051 = !DILocation(line: 1198, column: 9, scope: !4050)
!4052 = !DILocation(line: 1198, column: 18, scope: !4050)
!4053 = !DILocation(line: 1201, column: 8, scope: !4054)
!4054 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 1201, column: 8)
!4055 = !DILocation(line: 1201, column: 15, scope: !4054)
!4056 = !DILocation(line: 1201, column: 43, scope: !4054)
!4057 = !DILocation(line: 1201, column: 18, scope: !4054)
!4058 = !DILocation(line: 1201, column: 8, scope: !4050)
!4059 = !DILocation(line: 1203, column: 12, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 1203, column: 12)
!4061 = distinct !DILexicalBlock(scope: !4054, file: !3, line: 1202, column: 6)
!4062 = !DILocation(line: 1203, column: 22, scope: !4060)
!4063 = !DILocation(line: 1203, column: 26, scope: !4060)
!4064 = !DILocation(line: 1203, column: 37, scope: !4060)
!4065 = !DILocation(line: 1203, column: 12, scope: !4061)
!4066 = !DILocation(line: 1204, column: 12, scope: !4060)
!4067 = !DILocation(line: 1204, column: 3, scope: !4060)
!4068 = !DILocation(line: 1206, column: 8, scope: !4061)
!4069 = !DILocation(line: 1207, column: 8, scope: !4061)
!4070 = !DILocation(line: 1209, column: 24, scope: !4061)
!4071 = !DILocation(line: 1209, column: 29, scope: !4061)
!4072 = !DILocation(line: 1209, column: 8, scope: !4061)
!4073 = !DILocation(line: 1210, column: 46, scope: !4061)
!4074 = !DILocation(line: 1212, column: 27, scope: !4061)
!4075 = !DILocation(line: 1212, column: 35, scope: !4061)
!4076 = !DILocation(line: 1212, column: 8, scope: !4061)
!4077 = !DILocation(line: 1213, column: 8, scope: !4061)
!4078 = !DILocation(line: 1215, column: 2, scope: !4050)
!4079 = !DILocation(line: 1216, column: 5, scope: !4033)
!4080 = !DILocation(line: 1218, column: 30, scope: !3998)
!4081 = !DILocation(line: 1218, column: 38, scope: !3998)
!4082 = !DILocation(line: 1218, column: 3, scope: !3998)
!4083 = !DILocation(line: 1219, column: 10, scope: !3998)
!4084 = !DILocation(line: 1221, column: 10, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1221, column: 3)
!4086 = !DILocation(line: 1221, column: 8, scope: !4085)
!4087 = !DILocation(line: 1221, column: 15, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4085, file: !3, line: 1221, column: 3)
!4089 = !DILocation(line: 1221, column: 3, scope: !4085)
!4090 = !DILocalVariable(name: "done", scope: !4091, file: !3, line: 1223, type: !985)
!4091 = distinct !DILexicalBlock(scope: !4088, file: !3, line: 1222, column: 5)
!4092 = !DILocation(line: 1223, column: 12, scope: !4091)
!4093 = !DILocation(line: 1225, column: 32, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 1225, column: 11)
!4095 = !DILocation(line: 1225, column: 40, scope: !4094)
!4096 = !DILocation(line: 1225, column: 45, scope: !4094)
!4097 = !DILocation(line: 1225, column: 48, scope: !4094)
!4098 = !DILocation(line: 1225, column: 11, scope: !4094)
!4099 = !DILocation(line: 1225, column: 11, scope: !4091)
!4100 = !DILocation(line: 1226, column: 2, scope: !4094)
!4101 = !DILocation(line: 1227, column: 37, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 1227, column: 11)
!4103 = !DILocation(line: 1227, column: 45, scope: !4102)
!4104 = !DILocation(line: 1227, column: 57, scope: !4102)
!4105 = !DILocation(line: 1227, column: 60, scope: !4102)
!4106 = !DILocation(line: 1227, column: 64, scope: !4102)
!4107 = !DILocation(line: 1227, column: 11, scope: !4102)
!4108 = !DILocation(line: 1228, column: 4, scope: !4102)
!4109 = !DILocation(line: 1228, column: 9, scope: !4102)
!4110 = !DILocation(line: 1228, column: 14, scope: !4102)
!4111 = !DILocation(line: 1228, column: 44, scope: !4102)
!4112 = !DILocation(line: 1228, column: 52, scope: !4102)
!4113 = !DILocation(line: 1228, column: 57, scope: !4102)
!4114 = !DILocation(line: 1228, column: 60, scope: !4102)
!4115 = !DILocation(line: 1228, column: 17, scope: !4102)
!4116 = !DILocation(line: 1227, column: 11, scope: !4091)
!4117 = !DILocation(line: 1230, column: 8, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4119, file: !3, line: 1230, column: 8)
!4119 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 1229, column: 2)
!4120 = !DILocation(line: 1230, column: 8, scope: !4119)
!4121 = !DILocation(line: 1231, column: 6, scope: !4118)
!4122 = !DILocation(line: 1232, column: 12, scope: !4119)
!4123 = !DILocation(line: 1233, column: 11, scope: !4119)
!4124 = !DILocation(line: 1234, column: 4, scope: !4119)
!4125 = distinct !{!4125, !4089, !4126}
!4126 = !DILocation(line: 1238, column: 5, scope: !4085)
!4127 = !DILocation(line: 1236, column: 16, scope: !4091)
!4128 = !DILocation(line: 1236, column: 14, scope: !4091)
!4129 = !DILocation(line: 1237, column: 8, scope: !4091)
!4130 = !DILocation(line: 1221, column: 3, scope: !4088)
!4131 = !DILocation(line: 1240, column: 13, scope: !3998)
!4132 = !DILocation(line: 1240, column: 11, scope: !3998)
!4133 = !DILocation(line: 1241, column: 12, scope: !3998)
!4134 = !DILocation(line: 1241, column: 10, scope: !3998)
!4135 = !DILocation(line: 1243, column: 7, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 1243, column: 7)
!4137 = !DILocation(line: 1243, column: 7, scope: !3998)
!4138 = !DILocation(line: 1244, column: 24, scope: !4136)
!4139 = !DILocation(line: 1244, column: 32, scope: !4136)
!4140 = !DILocation(line: 1244, column: 5, scope: !4136)
!4141 = !DILocation(line: 1245, column: 1, scope: !3998)
!4142 = distinct !DISubprogram(name: "undistribute_ops_list", scope: !3, file: !3, line: 944, type: !4143, scopeLine: 946, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!4143 = !DISubroutineType(types: !4144)
!4144 = !{!985, !134, !2253, !1411}
!4145 = !DILocalVariable(name: "opcode", arg: 1, scope: !4142, file: !3, line: 944, type: !134)
!4146 = !DILocation(line: 944, column: 39, scope: !4142)
!4147 = !DILocalVariable(name: "ops", arg: 2, scope: !4142, file: !3, line: 945, type: !2253)
!4148 = !DILocation(line: 945, column: 40, scope: !4142)
!4149 = !DILocalVariable(name: "loop", arg: 3, scope: !4142, file: !3, line: 945, type: !1411)
!4150 = !DILocation(line: 945, column: 58, scope: !4142)
!4151 = !DILocalVariable(name: "length", scope: !4142, file: !3, line: 947, type: !7)
!4152 = !DILocation(line: 947, column: 16, scope: !4142)
!4153 = !DILocation(line: 947, column: 25, scope: !4142)
!4154 = !DILocalVariable(name: "oe1", scope: !4142, file: !3, line: 948, type: !859)
!4155 = !DILocation(line: 948, column: 19, scope: !4142)
!4156 = !DILocalVariable(name: "i", scope: !4142, file: !3, line: 949, type: !7)
!4157 = !DILocation(line: 949, column: 12, scope: !4142)
!4158 = !DILocalVariable(name: "j", scope: !4142, file: !3, line: 949, type: !7)
!4159 = !DILocation(line: 949, column: 15, scope: !4142)
!4160 = !DILocalVariable(name: "candidates", scope: !4142, file: !3, line: 950, type: !4161)
!4161 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !4162, line: 45, baseType: !4163)
!4162 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4164, size: 64)
!4164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !4162, line: 39, size: 192, elements: !4165)
!4165 = !{!4166, !4168, !4169, !4170}
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !4164, file: !4162, line: 41, baseType: !4167, size: 64)
!4167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !985, size: 64)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !4164, file: !4162, line: 42, baseType: !7, size: 32, offset: 64)
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4164, file: !4162, line: 43, baseType: !7, size: 32, offset: 96)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !4164, file: !4162, line: 44, baseType: !4171, size: 64, offset: 128)
!4171 = !DICompositeType(tag: DW_TAG_array_type, baseType: !919, size: 64, elements: !966)
!4172 = !DILocation(line: 950, column: 11, scope: !4142)
!4173 = !DILocalVariable(name: "candidates2", scope: !4142, file: !3, line: 950, type: !4161)
!4174 = !DILocation(line: 950, column: 23, scope: !4142)
!4175 = !DILocalVariable(name: "nr_candidates", scope: !4142, file: !3, line: 951, type: !7)
!4176 = !DILocation(line: 951, column: 12, scope: !4142)
!4177 = !DILocalVariable(name: "nr_candidates2", scope: !4142, file: !3, line: 951, type: !7)
!4178 = !DILocation(line: 951, column: 27, scope: !4142)
!4179 = !DILocalVariable(name: "sbi0", scope: !4142, file: !3, line: 952, type: !4180)
!4180 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap_iterator", file: !4162, line: 111, baseType: !4181)
!4181 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4162, line: 96, size: 256, elements: !4182)
!4182 = !{!4183, !4186, !4187, !4188, !4189}
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4181, file: !4162, line: 98, baseType: !4184, size: 64)
!4184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4185, size: 64)
!4185 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !919)
!4186 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4181, file: !4162, line: 101, baseType: !7, size: 32, offset: 64)
!4187 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !4181, file: !4162, line: 104, baseType: !7, size: 32, offset: 96)
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !4181, file: !4162, line: 107, baseType: !7, size: 32, offset: 128)
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !4181, file: !4162, line: 110, baseType: !919, size: 64, offset: 192)
!4190 = !DILocation(line: 952, column: 20, scope: !4142)
!4191 = !DILocalVariable(name: "subops", scope: !4142, file: !3, line: 953, type: !2253)
!4192 = !DILocation(line: 953, column: 33, scope: !4142)
!4193 = !DILocalVariable(name: "ctable", scope: !4142, file: !3, line: 954, type: !1680)
!4194 = !DILocation(line: 954, column: 10, scope: !4142)
!4195 = !DILocalVariable(name: "changed", scope: !4142, file: !3, line: 955, type: !985)
!4196 = !DILocation(line: 955, column: 8, scope: !4142)
!4197 = !DILocation(line: 957, column: 7, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 957, column: 7)
!4199 = !DILocation(line: 957, column: 14, scope: !4198)
!4200 = !DILocation(line: 958, column: 7, scope: !4198)
!4201 = !DILocation(line: 958, column: 10, scope: !4198)
!4202 = !DILocation(line: 958, column: 17, scope: !4198)
!4203 = !DILocation(line: 957, column: 7, scope: !4142)
!4204 = !DILocation(line: 959, column: 5, scope: !4198)
!4205 = !DILocation(line: 962, column: 31, scope: !4142)
!4206 = !DILocation(line: 962, column: 16, scope: !4142)
!4207 = !DILocation(line: 962, column: 14, scope: !4142)
!4208 = !DILocation(line: 963, column: 17, scope: !4142)
!4209 = !DILocation(line: 963, column: 3, scope: !4142)
!4210 = !DILocation(line: 964, column: 17, scope: !4142)
!4211 = !DILocation(line: 965, column: 10, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 965, column: 3)
!4213 = !DILocation(line: 965, column: 8, scope: !4212)
!4214 = !DILocation(line: 965, column: 15, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4212, file: !3, line: 965, column: 3)
!4216 = !DILocation(line: 965, column: 3, scope: !4212)
!4217 = !DILocalVariable(name: "dcode", scope: !4218, file: !3, line: 967, type: !134)
!4218 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 966, column: 5)
!4219 = !DILocation(line: 967, column: 22, scope: !4218)
!4220 = !DILocalVariable(name: "oe1def", scope: !4218, file: !3, line: 968, type: !1196)
!4221 = !DILocation(line: 968, column: 14, scope: !4218)
!4222 = !DILocation(line: 970, column: 11, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 970, column: 11)
!4224 = !DILocation(line: 970, column: 31, scope: !4223)
!4225 = !DILocation(line: 970, column: 11, scope: !4218)
!4226 = !DILocation(line: 971, column: 2, scope: !4223)
!4227 = !DILocation(line: 972, column: 16, scope: !4218)
!4228 = !DILocation(line: 972, column: 14, scope: !4218)
!4229 = !DILocation(line: 973, column: 30, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 973, column: 11)
!4231 = !DILocation(line: 973, column: 12, scope: !4230)
!4232 = !DILocation(line: 973, column: 11, scope: !4218)
!4233 = !DILocation(line: 974, column: 2, scope: !4230)
!4234 = !DILocation(line: 975, column: 39, scope: !4218)
!4235 = !DILocation(line: 975, column: 15, scope: !4218)
!4236 = !DILocation(line: 975, column: 13, scope: !4218)
!4237 = !DILocation(line: 976, column: 12, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 976, column: 11)
!4239 = !DILocation(line: 976, column: 18, scope: !4238)
!4240 = !DILocation(line: 977, column: 5, scope: !4238)
!4241 = !DILocation(line: 977, column: 8, scope: !4238)
!4242 = !DILocation(line: 977, column: 14, scope: !4238)
!4243 = !DILocation(line: 978, column: 4, scope: !4238)
!4244 = !DILocation(line: 978, column: 28, scope: !4238)
!4245 = !DILocation(line: 978, column: 36, scope: !4238)
!4246 = !DILocation(line: 978, column: 43, scope: !4238)
!4247 = !DILocation(line: 978, column: 8, scope: !4238)
!4248 = !DILocation(line: 976, column: 11, scope: !4218)
!4249 = !DILocation(line: 979, column: 2, scope: !4238)
!4250 = !DILocation(line: 981, column: 16, scope: !4218)
!4251 = !DILocation(line: 981, column: 28, scope: !4218)
!4252 = !DILocation(line: 981, column: 7, scope: !4218)
!4253 = !DILocation(line: 982, column: 20, scope: !4218)
!4254 = !DILocation(line: 983, column: 5, scope: !4218)
!4255 = !DILocation(line: 965, column: 60, scope: !4215)
!4256 = !DILocation(line: 965, column: 3, scope: !4215)
!4257 = distinct !{!4257, !4216, !4258}
!4258 = !DILocation(line: 983, column: 5, scope: !4212)
!4259 = !DILocation(line: 985, column: 7, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 985, column: 7)
!4261 = !DILocation(line: 985, column: 21, scope: !4260)
!4262 = !DILocation(line: 985, column: 7, scope: !4142)
!4263 = !DILocation(line: 987, column: 7, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 986, column: 5)
!4265 = !DILocation(line: 988, column: 7, scope: !4264)
!4266 = !DILocation(line: 991, column: 7, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 991, column: 7)
!4268 = !DILocation(line: 991, column: 17, scope: !4267)
!4269 = !DILocation(line: 991, column: 21, scope: !4267)
!4270 = !DILocation(line: 991, column: 32, scope: !4267)
!4271 = !DILocation(line: 991, column: 7, scope: !4142)
!4272 = !DILocation(line: 993, column: 16, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 992, column: 5)
!4274 = !DILocation(line: 993, column: 7, scope: !4273)
!4275 = !DILocation(line: 994, column: 27, scope: !4273)
!4276 = !DILocation(line: 995, column: 2, scope: !4273)
!4277 = !DILocation(line: 996, column: 43, scope: !4273)
!4278 = !DILocation(line: 994, column: 7, scope: !4273)
!4279 = !DILocation(line: 997, column: 16, scope: !4273)
!4280 = !DILocation(line: 997, column: 36, scope: !4273)
!4281 = !DILocation(line: 997, column: 7, scope: !4273)
!4282 = !DILocation(line: 998, column: 5, scope: !4273)
!4283 = !DILocation(line: 1001, column: 8, scope: !4142)
!4284 = !DILocation(line: 1002, column: 12, scope: !4142)
!4285 = !DILocation(line: 1002, column: 10, scope: !4142)
!4286 = !DILocation(line: 1003, column: 12, scope: !4142)
!4287 = !DILocation(line: 1003, column: 10, scope: !4142)
!4288 = !DILocation(line: 1005, column: 3, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 1005, column: 3)
!4290 = !DILocation(line: 1005, column: 3, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4289, file: !3, line: 1005, column: 3)
!4292 = !DILocalVariable(name: "oedef", scope: !4293, file: !3, line: 1007, type: !1196)
!4293 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1006, column: 5)
!4294 = !DILocation(line: 1007, column: 14, scope: !4293)
!4295 = !DILocalVariable(name: "oecode", scope: !4293, file: !3, line: 1008, type: !134)
!4296 = !DILocation(line: 1008, column: 22, scope: !4293)
!4297 = !DILocalVariable(name: "j", scope: !4293, file: !3, line: 1009, type: !7)
!4298 = !DILocation(line: 1009, column: 16, scope: !4293)
!4299 = !DILocation(line: 1011, column: 15, scope: !4293)
!4300 = !DILocation(line: 1011, column: 13, scope: !4293)
!4301 = !DILocation(line: 1012, column: 40, scope: !4293)
!4302 = !DILocation(line: 1012, column: 16, scope: !4293)
!4303 = !DILocation(line: 1012, column: 14, scope: !4293)
!4304 = !DILocation(line: 1013, column: 29, scope: !4293)
!4305 = !DILocation(line: 1013, column: 36, scope: !4293)
!4306 = !DILocation(line: 1013, column: 40, scope: !4293)
!4307 = !DILocation(line: 1014, column: 30, scope: !4293)
!4308 = !DILocation(line: 1014, column: 7, scope: !4293)
!4309 = !DILocation(line: 1013, column: 7, scope: !4293)
!4310 = !DILocation(line: 1016, column: 14, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 1016, column: 7)
!4312 = !DILocation(line: 1016, column: 12, scope: !4311)
!4313 = !DILocation(line: 1016, column: 19, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 1016, column: 7)
!4315 = !DILocation(line: 1016, column: 7, scope: !4311)
!4316 = !DILocalVariable(name: "c", scope: !4317, file: !3, line: 1018, type: !2266)
!4317 = distinct !DILexicalBlock(scope: !4314, file: !3, line: 1017, column: 2)
!4318 = !DILocation(line: 1018, column: 12, scope: !4317)
!4319 = !DILocalVariable(name: "slot", scope: !4317, file: !3, line: 1019, type: !1703)
!4320 = !DILocation(line: 1019, column: 11, scope: !4317)
!4321 = !DILocalVariable(name: "idx", scope: !4317, file: !3, line: 1020, type: !1341)
!4322 = !DILocation(line: 1020, column: 11, scope: !4317)
!4323 = !DILocation(line: 1021, column: 15, scope: !4317)
!4324 = !DILocation(line: 1021, column: 6, scope: !4317)
!4325 = !DILocation(line: 1021, column: 13, scope: !4317)
!4326 = !DILocation(line: 1022, column: 6, scope: !4317)
!4327 = !DILocation(line: 1022, column: 10, scope: !4317)
!4328 = !DILocation(line: 1023, column: 11, scope: !4317)
!4329 = !DILocation(line: 1023, column: 16, scope: !4317)
!4330 = !DILocation(line: 1023, column: 6, scope: !4317)
!4331 = !DILocation(line: 1023, column: 9, scope: !4317)
!4332 = !DILocation(line: 1024, column: 4, scope: !4317)
!4333 = !DILocation(line: 1025, column: 10, scope: !4317)
!4334 = !DILocation(line: 1025, column: 37, scope: !4317)
!4335 = !DILocation(line: 1025, column: 8, scope: !4317)
!4336 = !DILocation(line: 1026, column: 27, scope: !4317)
!4337 = !DILocation(line: 1026, column: 43, scope: !4317)
!4338 = !DILocation(line: 1026, column: 35, scope: !4317)
!4339 = !DILocation(line: 1026, column: 11, scope: !4317)
!4340 = !DILocation(line: 1026, column: 9, scope: !4317)
!4341 = !DILocation(line: 1027, column: 10, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4317, file: !3, line: 1027, column: 8)
!4343 = !DILocation(line: 1027, column: 9, scope: !4342)
!4344 = !DILocation(line: 1027, column: 8, scope: !4317)
!4345 = !DILocation(line: 1029, column: 24, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 1028, column: 6)
!4347 = !DILocation(line: 1029, column: 16, scope: !4346)
!4348 = !DILocation(line: 1029, column: 9, scope: !4346)
!4349 = !DILocation(line: 1029, column: 14, scope: !4346)
!4350 = !DILocation(line: 1030, column: 6, scope: !4346)
!4351 = !DILocation(line: 1033, column: 8, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 1032, column: 6)
!4353 = !DILocation(line: 1034, column: 8, scope: !4352)
!4354 = !DILocation(line: 1034, column: 55, scope: !4352)
!4355 = !DILocation(line: 1034, column: 58, scope: !4352)
!4356 = !DILocation(line: 1036, column: 2, scope: !4317)
!4357 = !DILocation(line: 1016, column: 69, scope: !4314)
!4358 = !DILocation(line: 1016, column: 7, scope: !4314)
!4359 = distinct !{!4359, !4315, !4360}
!4360 = !DILocation(line: 1036, column: 2, scope: !4311)
!4361 = !DILocation(line: 1037, column: 5, scope: !4293)
!4362 = distinct !{!4362, !4288, !4363}
!4363 = !DILocation(line: 1037, column: 5, scope: !4289)
!4364 = !DILocation(line: 1038, column: 16, scope: !4142)
!4365 = !DILocation(line: 1038, column: 3, scope: !4142)
!4366 = !DILocation(line: 1042, column: 15, scope: !4142)
!4367 = !DILocation(line: 1042, column: 44, scope: !4142)
!4368 = !DILocation(line: 1042, column: 3, scope: !4142)
!4369 = !DILocation(line: 1049, column: 7, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 1049, column: 7)
!4371 = !DILocation(line: 1049, column: 17, scope: !4370)
!4372 = !DILocation(line: 1049, column: 21, scope: !4370)
!4373 = !DILocation(line: 1049, column: 32, scope: !4370)
!4374 = !DILocation(line: 1049, column: 7, scope: !4142)
!4375 = !DILocalVariable(name: "c", scope: !4376, file: !3, line: 1051, type: !4377)
!4376 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 1050, column: 5)
!4377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2266, size: 64)
!4378 = !DILocation(line: 1051, column: 16, scope: !4376)
!4379 = !DILocation(line: 1052, column: 16, scope: !4376)
!4380 = !DILocation(line: 1052, column: 7, scope: !4376)
!4381 = !DILocation(line: 1053, column: 14, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1053, column: 7)
!4383 = !DILocation(line: 1053, column: 12, scope: !4382)
!4384 = !DILocation(line: 1053, column: 19, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 1053, column: 7)
!4386 = !DILocation(line: 1053, column: 7, scope: !4382)
!4387 = !DILocation(line: 1055, column: 13, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 1054, column: 2)
!4389 = !DILocation(line: 1055, column: 37, scope: !4388)
!4390 = !DILocation(line: 1055, column: 40, scope: !4388)
!4391 = !DILocation(line: 1056, column: 6, scope: !4388)
!4392 = !DILocation(line: 1056, column: 9, scope: !4388)
!4393 = !DILocation(line: 1056, column: 16, scope: !4388)
!4394 = !DILocation(line: 1057, column: 14, scope: !4388)
!4395 = !DILocation(line: 1057, column: 17, scope: !4388)
!4396 = !DILocation(line: 1057, column: 24, scope: !4388)
!4397 = !DILocation(line: 1055, column: 4, scope: !4388)
!4398 = !DILocation(line: 1058, column: 24, scope: !4388)
!4399 = !DILocation(line: 1058, column: 35, scope: !4388)
!4400 = !DILocation(line: 1058, column: 38, scope: !4388)
!4401 = !DILocation(line: 1058, column: 4, scope: !4388)
!4402 = !DILocation(line: 1059, column: 13, scope: !4388)
!4403 = !DILocation(line: 1059, column: 4, scope: !4388)
!4404 = !DILocation(line: 1060, column: 2, scope: !4388)
!4405 = !DILocation(line: 1053, column: 54, scope: !4385)
!4406 = !DILocation(line: 1053, column: 7, scope: !4385)
!4407 = distinct !{!4407, !4386, !4408}
!4408 = !DILocation(line: 1060, column: 2, scope: !4382)
!4409 = !DILocation(line: 1061, column: 5, scope: !4376)
!4410 = !DILocation(line: 1064, column: 32, scope: !4142)
!4411 = !DILocation(line: 1064, column: 17, scope: !4142)
!4412 = !DILocation(line: 1064, column: 15, scope: !4142)
!4413 = !DILocation(line: 1065, column: 3, scope: !4142)
!4414 = !DILocation(line: 1065, column: 11, scope: !4142)
!4415 = !DILocation(line: 1065, column: 10, scope: !4142)
!4416 = !DILocalVariable(name: "c", scope: !4417, file: !3, line: 1067, type: !4377)
!4417 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 1066, column: 5)
!4418 = !DILocation(line: 1067, column: 16, scope: !4417)
!4419 = !DILocation(line: 1067, column: 20, scope: !4417)
!4420 = !DILocation(line: 1068, column: 11, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1068, column: 11)
!4422 = !DILocation(line: 1068, column: 14, scope: !4421)
!4423 = !DILocation(line: 1068, column: 18, scope: !4421)
!4424 = !DILocation(line: 1068, column: 11, scope: !4417)
!4425 = !DILocation(line: 1069, column: 2, scope: !4421)
!4426 = !DILocation(line: 1073, column: 21, scope: !4417)
!4427 = !DILocation(line: 1073, column: 7, scope: !4417)
!4428 = !DILocation(line: 1074, column: 22, scope: !4417)
!4429 = !DILocation(line: 1075, column: 7, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1075, column: 7)
!4431 = !DILocation(line: 1075, column: 7, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 1075, column: 7)
!4433 = !DILocalVariable(name: "oedef", scope: !4434, file: !3, line: 1077, type: !1196)
!4434 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 1076, column: 2)
!4435 = !DILocation(line: 1077, column: 11, scope: !4434)
!4436 = !DILocalVariable(name: "oecode", scope: !4434, file: !3, line: 1078, type: !134)
!4437 = !DILocation(line: 1078, column: 19, scope: !4434)
!4438 = !DILocalVariable(name: "j", scope: !4434, file: !3, line: 1079, type: !7)
!4439 = !DILocation(line: 1079, column: 13, scope: !4434)
!4440 = !DILocalVariable(name: "op", scope: !4434, file: !3, line: 1080, type: !865)
!4441 = !DILocation(line: 1080, column: 9, scope: !4434)
!4442 = !DILocation(line: 1080, column: 14, scope: !4434)
!4443 = !DILocation(line: 1080, column: 52, scope: !4434)
!4444 = !DILocation(line: 1084, column: 8, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 1084, column: 8)
!4446 = !DILocation(line: 1084, column: 23, scope: !4445)
!4447 = !DILocation(line: 1084, column: 8, scope: !4434)
!4448 = !DILocation(line: 1085, column: 6, scope: !4445)
!4449 = !DILocation(line: 1087, column: 12, scope: !4434)
!4450 = !DILocation(line: 1087, column: 10, scope: !4434)
!4451 = !DILocation(line: 1088, column: 37, scope: !4434)
!4452 = !DILocation(line: 1088, column: 13, scope: !4434)
!4453 = !DILocation(line: 1088, column: 11, scope: !4434)
!4454 = !DILocation(line: 1089, column: 8, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 1089, column: 8)
!4456 = !DILocation(line: 1089, column: 18, scope: !4455)
!4457 = !DILocation(line: 1089, column: 21, scope: !4455)
!4458 = !DILocation(line: 1089, column: 15, scope: !4455)
!4459 = !DILocation(line: 1089, column: 8, scope: !4434)
!4460 = !DILocation(line: 1090, column: 6, scope: !4455)
!4461 = !DILocation(line: 1092, column: 11, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 1092, column: 4)
!4463 = !DILocation(line: 1092, column: 9, scope: !4462)
!4464 = !DILocation(line: 1092, column: 16, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 1092, column: 4)
!4466 = !DILocation(line: 1092, column: 4, scope: !4462)
!4467 = !DILocation(line: 1094, column: 12, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1094, column: 12)
!4469 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 1093, column: 6)
!4470 = !DILocation(line: 1094, column: 17, scope: !4468)
!4471 = !DILocation(line: 1094, column: 23, scope: !4468)
!4472 = !DILocation(line: 1094, column: 26, scope: !4468)
!4473 = !DILocation(line: 1094, column: 20, scope: !4468)
!4474 = !DILocation(line: 1094, column: 12, scope: !4469)
!4475 = !DILocation(line: 1096, column: 14, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 1095, column: 3)
!4477 = !DILocation(line: 1096, column: 27, scope: !4476)
!4478 = !DILocation(line: 1096, column: 5, scope: !4476)
!4479 = !DILocation(line: 1097, column: 5, scope: !4476)
!4480 = !DILocation(line: 1098, column: 5, scope: !4476)
!4481 = !DILocation(line: 1100, column: 6, scope: !4469)
!4482 = !DILocation(line: 1092, column: 66, scope: !4465)
!4483 = !DILocation(line: 1092, column: 4, scope: !4465)
!4484 = distinct !{!4484, !4466, !4485}
!4485 = !DILocation(line: 1100, column: 6, scope: !4462)
!4486 = !DILocation(line: 1101, column: 2, scope: !4434)
!4487 = distinct !{!4487, !4429, !4488}
!4488 = !DILocation(line: 1101, column: 2, scope: !4430)
!4489 = !DILocation(line: 1103, column: 11, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4417, file: !3, line: 1103, column: 11)
!4491 = !DILocation(line: 1103, column: 26, scope: !4490)
!4492 = !DILocation(line: 1103, column: 11, scope: !4417)
!4493 = !DILocalVariable(name: "oe1", scope: !4494, file: !3, line: 1105, type: !859)
!4494 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1104, column: 2)
!4495 = !DILocation(line: 1105, column: 20, scope: !4494)
!4496 = !DILocalVariable(name: "oe2", scope: !4494, file: !3, line: 1105, type: !859)
!4497 = !DILocation(line: 1105, column: 25, scope: !4494)
!4498 = !DILocalVariable(name: "tmpvar", scope: !4494, file: !3, line: 1106, type: !865)
!4499 = !DILocation(line: 1106, column: 9, scope: !4494)
!4500 = !DILocalVariable(name: "prod", scope: !4494, file: !3, line: 1107, type: !1196)
!4501 = !DILocation(line: 1107, column: 11, scope: !4494)
!4502 = !DILocalVariable(name: "first", scope: !4494, file: !3, line: 1108, type: !962)
!4503 = !DILocation(line: 1108, column: 8, scope: !4494)
!4504 = !DILocation(line: 1108, column: 39, scope: !4494)
!4505 = !DILocation(line: 1108, column: 16, scope: !4494)
!4506 = !DILocation(line: 1111, column: 10, scope: !4494)
!4507 = !DILocation(line: 1111, column: 8, scope: !4494)
!4508 = !DILocation(line: 1112, column: 8, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1112, column: 8)
!4510 = !DILocation(line: 1112, column: 18, scope: !4509)
!4511 = !DILocation(line: 1112, column: 22, scope: !4509)
!4512 = !DILocation(line: 1112, column: 33, scope: !4509)
!4513 = !DILocation(line: 1112, column: 8, scope: !4494)
!4514 = !DILocation(line: 1114, column: 17, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 1113, column: 6)
!4516 = !DILocation(line: 1114, column: 8, scope: !4515)
!4517 = !DILocation(line: 1115, column: 28, scope: !4515)
!4518 = !DILocation(line: 1115, column: 39, scope: !4515)
!4519 = !DILocation(line: 1115, column: 44, scope: !4515)
!4520 = !DILocation(line: 1115, column: 8, scope: !4515)
!4521 = !DILocation(line: 1116, column: 6, scope: !4515)
!4522 = !DILocation(line: 1117, column: 29, scope: !4494)
!4523 = !DILocation(line: 1117, column: 13, scope: !4494)
!4524 = !DILocation(line: 1117, column: 11, scope: !4494)
!4525 = !DILocation(line: 1118, column: 24, scope: !4494)
!4526 = !DILocation(line: 1118, column: 4, scope: !4494)
!4527 = !DILocation(line: 1119, column: 25, scope: !4494)
!4528 = !DILocation(line: 1119, column: 30, scope: !4494)
!4529 = !DILocation(line: 1119, column: 34, scope: !4494)
!4530 = !DILocation(line: 1119, column: 37, scope: !4494)
!4531 = !DILocation(line: 1119, column: 45, scope: !4494)
!4532 = !DILocation(line: 1119, column: 48, scope: !4494)
!4533 = !DILocation(line: 1119, column: 4, scope: !4494)
!4534 = !DILocation(line: 1120, column: 4, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1120, column: 4)
!4536 = !DILocation(line: 1120, column: 4, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 1120, column: 4)
!4538 = !DILocalVariable(name: "sum", scope: !4539, file: !3, line: 1122, type: !1196)
!4539 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1121, column: 6)
!4540 = !DILocation(line: 1122, column: 15, scope: !4539)
!4541 = !DILocation(line: 1123, column: 14, scope: !4539)
!4542 = !DILocation(line: 1123, column: 12, scope: !4539)
!4543 = !DILocation(line: 1124, column: 12, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 1124, column: 12)
!4545 = !DILocation(line: 1124, column: 22, scope: !4544)
!4546 = !DILocation(line: 1124, column: 26, scope: !4544)
!4547 = !DILocation(line: 1124, column: 37, scope: !4544)
!4548 = !DILocation(line: 1124, column: 12, scope: !4539)
!4549 = !DILocation(line: 1126, column: 14, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4544, file: !3, line: 1125, column: 3)
!4551 = !DILocation(line: 1126, column: 5, scope: !4550)
!4552 = !DILocation(line: 1127, column: 25, scope: !4550)
!4553 = !DILocation(line: 1127, column: 36, scope: !4550)
!4554 = !DILocation(line: 1127, column: 41, scope: !4550)
!4555 = !DILocation(line: 1127, column: 5, scope: !4550)
!4556 = !DILocation(line: 1128, column: 3, scope: !4550)
!4557 = !DILocation(line: 1129, column: 29, scope: !4539)
!4558 = !DILocation(line: 1129, column: 34, scope: !4539)
!4559 = !DILocation(line: 1129, column: 38, scope: !4539)
!4560 = !DILocation(line: 1129, column: 41, scope: !4539)
!4561 = !DILocation(line: 1129, column: 49, scope: !4539)
!4562 = !DILocation(line: 1129, column: 52, scope: !4539)
!4563 = !DILocation(line: 1129, column: 8, scope: !4539)
!4564 = !DILocation(line: 1130, column: 33, scope: !4539)
!4565 = !DILocation(line: 1130, column: 41, scope: !4539)
!4566 = !DILocation(line: 1130, column: 46, scope: !4539)
!4567 = !DILocation(line: 1130, column: 50, scope: !4539)
!4568 = !DILocation(line: 1130, column: 55, scope: !4539)
!4569 = !DILocation(line: 1130, column: 59, scope: !4539)
!4570 = !DILocation(line: 1130, column: 14, scope: !4539)
!4571 = !DILocation(line: 1130, column: 12, scope: !4539)
!4572 = !DILocation(line: 1131, column: 18, scope: !4539)
!4573 = !DILocation(line: 1131, column: 8, scope: !4539)
!4574 = !DILocation(line: 1131, column: 13, scope: !4539)
!4575 = !DILocation(line: 1131, column: 16, scope: !4539)
!4576 = !DILocation(line: 1132, column: 8, scope: !4539)
!4577 = !DILocation(line: 1132, column: 13, scope: !4539)
!4578 = !DILocation(line: 1132, column: 18, scope: !4539)
!4579 = !DILocation(line: 1133, column: 34, scope: !4539)
!4580 = !DILocation(line: 1133, column: 18, scope: !4539)
!4581 = !DILocation(line: 1133, column: 8, scope: !4539)
!4582 = !DILocation(line: 1133, column: 13, scope: !4539)
!4583 = !DILocation(line: 1133, column: 16, scope: !4539)
!4584 = !DILocation(line: 1134, column: 6, scope: !4539)
!4585 = distinct !{!4585, !4534, !4586}
!4586 = !DILocation(line: 1134, column: 6, scope: !4535)
!4587 = !DILocation(line: 1137, column: 30, scope: !4494)
!4588 = !DILocation(line: 1137, column: 38, scope: !4494)
!4589 = !DILocation(line: 1137, column: 43, scope: !4494)
!4590 = !DILocation(line: 1137, column: 47, scope: !4494)
!4591 = !DILocation(line: 1137, column: 50, scope: !4494)
!4592 = !DILocation(line: 1137, column: 54, scope: !4494)
!4593 = !DILocation(line: 1137, column: 57, scope: !4494)
!4594 = !DILocation(line: 1137, column: 11, scope: !4494)
!4595 = !DILocation(line: 1137, column: 9, scope: !4494)
!4596 = !DILocation(line: 1138, column: 8, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 1138, column: 8)
!4598 = !DILocation(line: 1138, column: 18, scope: !4597)
!4599 = !DILocation(line: 1138, column: 22, scope: !4597)
!4600 = !DILocation(line: 1138, column: 33, scope: !4597)
!4601 = !DILocation(line: 1138, column: 8, scope: !4494)
!4602 = !DILocation(line: 1140, column: 17, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 1139, column: 6)
!4604 = !DILocation(line: 1140, column: 37, scope: !4603)
!4605 = !DILocation(line: 1140, column: 40, scope: !4603)
!4606 = !DILocation(line: 1140, column: 47, scope: !4603)
!4607 = !DILocation(line: 1140, column: 8, scope: !4603)
!4608 = !DILocation(line: 1141, column: 28, scope: !4603)
!4609 = !DILocation(line: 1141, column: 39, scope: !4603)
!4610 = !DILocation(line: 1141, column: 42, scope: !4603)
!4611 = !DILocation(line: 1141, column: 8, scope: !4603)
!4612 = !DILocation(line: 1142, column: 17, scope: !4603)
!4613 = !DILocation(line: 1142, column: 8, scope: !4603)
!4614 = !DILocation(line: 1143, column: 6, scope: !4603)
!4615 = !DILocation(line: 1147, column: 33, scope: !4494)
!4616 = !DILocation(line: 1147, column: 14, scope: !4494)
!4617 = !DILocation(line: 1147, column: 4, scope: !4494)
!4618 = !DILocation(line: 1147, column: 9, scope: !4494)
!4619 = !DILocation(line: 1147, column: 12, scope: !4494)
!4620 = !DILocation(line: 1148, column: 26, scope: !4494)
!4621 = !DILocation(line: 1148, column: 31, scope: !4494)
!4622 = !DILocation(line: 1148, column: 16, scope: !4494)
!4623 = !DILocation(line: 1148, column: 4, scope: !4494)
!4624 = !DILocation(line: 1148, column: 9, scope: !4494)
!4625 = !DILocation(line: 1148, column: 14, scope: !4494)
!4626 = !DILocation(line: 1149, column: 4, scope: !4494)
!4627 = !DILocation(line: 1151, column: 12, scope: !4494)
!4628 = !DILocation(line: 1152, column: 2, scope: !4494)
!4629 = !DILocation(line: 1154, column: 7, scope: !4417)
!4630 = distinct !{!4630, !4413, !4631}
!4631 = !DILocation(line: 1155, column: 5, scope: !4142)
!4632 = !DILocation(line: 1157, column: 10, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 1157, column: 3)
!4634 = !DILocation(line: 1157, column: 8, scope: !4633)
!4635 = !DILocation(line: 1157, column: 15, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4633, file: !3, line: 1157, column: 3)
!4637 = !DILocation(line: 1157, column: 19, scope: !4636)
!4638 = !DILocation(line: 1157, column: 17, scope: !4636)
!4639 = !DILocation(line: 1157, column: 3, scope: !4633)
!4640 = !DILocation(line: 1158, column: 5, scope: !4636)
!4641 = !DILocation(line: 1157, column: 55, scope: !4636)
!4642 = !DILocation(line: 1157, column: 3, scope: !4636)
!4643 = distinct !{!4643, !4639, !4644}
!4644 = !DILocation(line: 1158, column: 5, scope: !4633)
!4645 = !DILocation(line: 1159, column: 9, scope: !4142)
!4646 = !DILocation(line: 1159, column: 3, scope: !4142)
!4647 = !DILocation(line: 1160, column: 3, scope: !4142)
!4648 = !DILocation(line: 1161, column: 3, scope: !4142)
!4649 = !DILocation(line: 1162, column: 3, scope: !4142)
!4650 = !DILocation(line: 1164, column: 10, scope: !4142)
!4651 = !DILocation(line: 1164, column: 3, scope: !4142)
!4652 = !DILocation(line: 1165, column: 1, scope: !4142)
!4653 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_last", scope: !3, file: !3, line: 297, type: !4654, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!4654 = !DISubroutineType(types: !4655)
!4655 = !{!859, !2431}
!4656 = !DILocalVariable(name: "vec_", arg: 1, scope: !4653, file: !3, line: 297, type: !2431)
!4657 = !DILocation(line: 297, column: 1, scope: !4653)
!4658 = !DILocation(line: 0, scope: !4653)
!4659 = distinct !DISubprogram(name: "remove_visited_stmt_chain", scope: !3, file: !3, line: 1278, type: !4660, scopeLine: 1279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!4660 = !DISubroutineType(types: !4661)
!4661 = !{null, !865}
!4662 = !DILocalVariable(name: "var", arg: 1, scope: !4659, file: !3, line: 1278, type: !865)
!4663 = !DILocation(line: 1278, column: 33, scope: !4659)
!4664 = !DILocalVariable(name: "stmt", scope: !4659, file: !3, line: 1280, type: !1196)
!4665 = !DILocation(line: 1280, column: 10, scope: !4659)
!4666 = !DILocalVariable(name: "gsi", scope: !4659, file: !3, line: 1281, type: !2622)
!4667 = !DILocation(line: 1281, column: 24, scope: !4659)
!4668 = !DILocation(line: 1283, column: 3, scope: !4659)
!4669 = !DILocation(line: 1285, column: 11, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 1285, column: 11)
!4671 = distinct !DILexicalBlock(scope: !4659, file: !3, line: 1284, column: 5)
!4672 = !DILocation(line: 1285, column: 27, scope: !4670)
!4673 = !DILocation(line: 1285, column: 39, scope: !4670)
!4674 = !DILocation(line: 1285, column: 58, scope: !4670)
!4675 = !DILocation(line: 1285, column: 43, scope: !4670)
!4676 = !DILocation(line: 1285, column: 11, scope: !4671)
!4677 = !DILocation(line: 1286, column: 2, scope: !4670)
!4678 = !DILocation(line: 1287, column: 14, scope: !4671)
!4679 = !DILocation(line: 1287, column: 12, scope: !4671)
!4680 = !DILocation(line: 1288, column: 30, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 1288, column: 11)
!4682 = !DILocation(line: 1288, column: 12, scope: !4681)
!4683 = !DILocation(line: 1289, column: 4, scope: !4681)
!4684 = !DILocation(line: 1289, column: 26, scope: !4681)
!4685 = !DILocation(line: 1289, column: 8, scope: !4681)
!4686 = !DILocation(line: 1288, column: 11, scope: !4671)
!4687 = !DILocation(line: 1290, column: 2, scope: !4681)
!4688 = !DILocation(line: 1291, column: 33, scope: !4671)
!4689 = !DILocation(line: 1291, column: 13, scope: !4671)
!4690 = !DILocation(line: 1291, column: 11, scope: !4671)
!4691 = !DILocation(line: 1292, column: 27, scope: !4671)
!4692 = !DILocation(line: 1292, column: 13, scope: !4671)
!4693 = !DILocation(line: 1293, column: 7, scope: !4671)
!4694 = !DILocation(line: 1294, column: 21, scope: !4671)
!4695 = !DILocation(line: 1294, column: 7, scope: !4671)
!4696 = distinct !{!4696, !4668, !4697}
!4697 = !DILocation(line: 1295, column: 5, scope: !4659)
!4698 = !DILocation(line: 1296, column: 1, scope: !4659)
!4699 = distinct !DISubprogram(name: "rewrite_expr_tree", scope: !3, file: !3, line: 1303, type: !4700, scopeLine: 1305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!4700 = !DISubroutineType(types: !4701)
!4701 = !{null, !1196, !7, !2239, !985}
!4702 = !DILocalVariable(name: "stmt", arg: 1, scope: !4699, file: !3, line: 1303, type: !1196)
!4703 = !DILocation(line: 1303, column: 27, scope: !4699)
!4704 = !DILocalVariable(name: "opindex", arg: 2, scope: !4699, file: !3, line: 1303, type: !7)
!4705 = !DILocation(line: 1303, column: 46, scope: !4699)
!4706 = !DILocalVariable(name: "ops", arg: 3, scope: !4699, file: !3, line: 1304, type: !2239)
!4707 = !DILocation(line: 1304, column: 35, scope: !4699)
!4708 = !DILocalVariable(name: "moved", arg: 4, scope: !4699, file: !3, line: 1304, type: !985)
!4709 = !DILocation(line: 1304, column: 45, scope: !4699)
!4710 = !DILocalVariable(name: "rhs1", scope: !4699, file: !3, line: 1306, type: !865)
!4711 = !DILocation(line: 1306, column: 8, scope: !4699)
!4712 = !DILocation(line: 1306, column: 35, scope: !4699)
!4713 = !DILocation(line: 1306, column: 15, scope: !4699)
!4714 = !DILocalVariable(name: "rhs2", scope: !4699, file: !3, line: 1307, type: !865)
!4715 = !DILocation(line: 1307, column: 8, scope: !4699)
!4716 = !DILocation(line: 1307, column: 35, scope: !4699)
!4717 = !DILocation(line: 1307, column: 15, scope: !4699)
!4718 = !DILocalVariable(name: "oe", scope: !4699, file: !3, line: 1308, type: !859)
!4719 = !DILocation(line: 1308, column: 19, scope: !4699)
!4720 = !DILocation(line: 1324, column: 7, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 1324, column: 7)
!4722 = !DILocation(line: 1324, column: 15, scope: !4721)
!4723 = !DILocation(line: 1324, column: 22, scope: !4721)
!4724 = !DILocation(line: 1324, column: 19, scope: !4721)
!4725 = !DILocation(line: 1324, column: 7, scope: !4699)
!4726 = !DILocalVariable(name: "oe1", scope: !4727, file: !3, line: 1326, type: !859)
!4727 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 1325, column: 5)
!4728 = !DILocation(line: 1326, column: 23, scope: !4727)
!4729 = !DILocalVariable(name: "oe2", scope: !4727, file: !3, line: 1326, type: !859)
!4730 = !DILocation(line: 1326, column: 28, scope: !4727)
!4731 = !DILocalVariable(name: "oe3", scope: !4727, file: !3, line: 1326, type: !859)
!4732 = !DILocation(line: 1326, column: 33, scope: !4727)
!4733 = !DILocation(line: 1328, column: 13, scope: !4727)
!4734 = !DILocation(line: 1328, column: 11, scope: !4727)
!4735 = !DILocation(line: 1329, column: 13, scope: !4727)
!4736 = !DILocation(line: 1329, column: 11, scope: !4727)
!4737 = !DILocation(line: 1330, column: 13, scope: !4727)
!4738 = !DILocation(line: 1330, column: 11, scope: !4727)
!4739 = !DILocation(line: 1332, column: 12, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4727, file: !3, line: 1332, column: 11)
!4741 = !DILocation(line: 1332, column: 17, scope: !4740)
!4742 = !DILocation(line: 1332, column: 25, scope: !4740)
!4743 = !DILocation(line: 1332, column: 30, scope: !4740)
!4744 = !DILocation(line: 1332, column: 22, scope: !4740)
!4745 = !DILocation(line: 1333, column: 5, scope: !4740)
!4746 = !DILocation(line: 1333, column: 8, scope: !4740)
!4747 = !DILocation(line: 1333, column: 13, scope: !4740)
!4748 = !DILocation(line: 1333, column: 21, scope: !4740)
!4749 = !DILocation(line: 1333, column: 26, scope: !4740)
!4750 = !DILocation(line: 1333, column: 18, scope: !4740)
!4751 = !DILocation(line: 1334, column: 4, scope: !4740)
!4752 = !DILocation(line: 1334, column: 25, scope: !4740)
!4753 = !DILocation(line: 1334, column: 31, scope: !4740)
!4754 = !DILocation(line: 1334, column: 36, scope: !4740)
!4755 = !DILocation(line: 1334, column: 8, scope: !4740)
!4756 = !DILocation(line: 1335, column: 8, scope: !4740)
!4757 = !DILocation(line: 1335, column: 29, scope: !4740)
!4758 = !DILocation(line: 1335, column: 35, scope: !4740)
!4759 = !DILocation(line: 1335, column: 40, scope: !4740)
!4760 = !DILocation(line: 1335, column: 12, scope: !4740)
!4761 = !DILocation(line: 1336, column: 8, scope: !4740)
!4762 = !DILocation(line: 1336, column: 29, scope: !4740)
!4763 = !DILocation(line: 1336, column: 35, scope: !4740)
!4764 = !DILocation(line: 1336, column: 40, scope: !4740)
!4765 = !DILocation(line: 1336, column: 12, scope: !4740)
!4766 = !DILocation(line: 1332, column: 11, scope: !4727)
!4767 = !DILocalVariable(name: "temp", scope: !4768, file: !3, line: 1338, type: !861)
!4768 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1337, column: 2)
!4769 = !DILocation(line: 1338, column: 25, scope: !4768)
!4770 = !DILocation(line: 1338, column: 33, scope: !4768)
!4771 = !DILocation(line: 1338, column: 32, scope: !4768)
!4772 = !DILocation(line: 1339, column: 14, scope: !4768)
!4773 = !DILocation(line: 1339, column: 19, scope: !4768)
!4774 = !DILocation(line: 1339, column: 4, scope: !4768)
!4775 = !DILocation(line: 1339, column: 9, scope: !4768)
!4776 = !DILocation(line: 1339, column: 12, scope: !4768)
!4777 = !DILocation(line: 1340, column: 16, scope: !4768)
!4778 = !DILocation(line: 1340, column: 21, scope: !4768)
!4779 = !DILocation(line: 1340, column: 4, scope: !4768)
!4780 = !DILocation(line: 1340, column: 9, scope: !4768)
!4781 = !DILocation(line: 1340, column: 14, scope: !4768)
!4782 = !DILocation(line: 1341, column: 19, scope: !4768)
!4783 = !DILocation(line: 1341, column: 4, scope: !4768)
!4784 = !DILocation(line: 1341, column: 9, scope: !4768)
!4785 = !DILocation(line: 1341, column: 12, scope: !4768)
!4786 = !DILocation(line: 1342, column: 20, scope: !4768)
!4787 = !DILocation(line: 1342, column: 4, scope: !4768)
!4788 = !DILocation(line: 1342, column: 9, scope: !4768)
!4789 = !DILocation(line: 1342, column: 13, scope: !4768)
!4790 = !DILocation(line: 1343, column: 2, scope: !4768)
!4791 = !DILocation(line: 1344, column: 17, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1344, column: 16)
!4793 = !DILocation(line: 1344, column: 22, scope: !4792)
!4794 = !DILocation(line: 1344, column: 30, scope: !4792)
!4795 = !DILocation(line: 1344, column: 35, scope: !4792)
!4796 = !DILocation(line: 1344, column: 27, scope: !4792)
!4797 = !DILocation(line: 1345, column: 3, scope: !4792)
!4798 = !DILocation(line: 1345, column: 6, scope: !4792)
!4799 = !DILocation(line: 1345, column: 11, scope: !4792)
!4800 = !DILocation(line: 1345, column: 19, scope: !4792)
!4801 = !DILocation(line: 1345, column: 24, scope: !4792)
!4802 = !DILocation(line: 1345, column: 16, scope: !4792)
!4803 = !DILocation(line: 1346, column: 9, scope: !4792)
!4804 = !DILocation(line: 1346, column: 30, scope: !4792)
!4805 = !DILocation(line: 1346, column: 36, scope: !4792)
!4806 = !DILocation(line: 1346, column: 41, scope: !4792)
!4807 = !DILocation(line: 1346, column: 13, scope: !4792)
!4808 = !DILocation(line: 1347, column: 6, scope: !4792)
!4809 = !DILocation(line: 1347, column: 27, scope: !4792)
!4810 = !DILocation(line: 1347, column: 33, scope: !4792)
!4811 = !DILocation(line: 1347, column: 38, scope: !4792)
!4812 = !DILocation(line: 1347, column: 10, scope: !4792)
!4813 = !DILocation(line: 1348, column: 6, scope: !4792)
!4814 = !DILocation(line: 1348, column: 27, scope: !4792)
!4815 = !DILocation(line: 1348, column: 33, scope: !4792)
!4816 = !DILocation(line: 1348, column: 38, scope: !4792)
!4817 = !DILocation(line: 1348, column: 10, scope: !4792)
!4818 = !DILocation(line: 1344, column: 16, scope: !4740)
!4819 = !DILocalVariable(name: "temp", scope: !4820, file: !3, line: 1350, type: !861)
!4820 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 1349, column: 2)
!4821 = !DILocation(line: 1350, column: 25, scope: !4820)
!4822 = !DILocation(line: 1350, column: 33, scope: !4820)
!4823 = !DILocation(line: 1350, column: 32, scope: !4820)
!4824 = !DILocation(line: 1351, column: 14, scope: !4820)
!4825 = !DILocation(line: 1351, column: 19, scope: !4820)
!4826 = !DILocation(line: 1351, column: 4, scope: !4820)
!4827 = !DILocation(line: 1351, column: 9, scope: !4820)
!4828 = !DILocation(line: 1351, column: 12, scope: !4820)
!4829 = !DILocation(line: 1352, column: 16, scope: !4820)
!4830 = !DILocation(line: 1352, column: 21, scope: !4820)
!4831 = !DILocation(line: 1352, column: 4, scope: !4820)
!4832 = !DILocation(line: 1352, column: 9, scope: !4820)
!4833 = !DILocation(line: 1352, column: 14, scope: !4820)
!4834 = !DILocation(line: 1353, column: 19, scope: !4820)
!4835 = !DILocation(line: 1353, column: 4, scope: !4820)
!4836 = !DILocation(line: 1353, column: 9, scope: !4820)
!4837 = !DILocation(line: 1353, column: 12, scope: !4820)
!4838 = !DILocation(line: 1354, column: 20, scope: !4820)
!4839 = !DILocation(line: 1354, column: 4, scope: !4820)
!4840 = !DILocation(line: 1354, column: 9, scope: !4820)
!4841 = !DILocation(line: 1354, column: 13, scope: !4820)
!4842 = !DILocation(line: 1355, column: 2, scope: !4820)
!4843 = !DILocation(line: 1356, column: 5, scope: !4727)
!4844 = !DILocation(line: 1363, column: 7, scope: !4845)
!4845 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 1363, column: 7)
!4846 = !DILocation(line: 1363, column: 15, scope: !4845)
!4847 = !DILocation(line: 1363, column: 22, scope: !4845)
!4848 = !DILocation(line: 1363, column: 19, scope: !4845)
!4849 = !DILocation(line: 1363, column: 7, scope: !4699)
!4850 = !DILocalVariable(name: "oe1", scope: !4851, file: !3, line: 1365, type: !859)
!4851 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 1364, column: 5)
!4852 = !DILocation(line: 1365, column: 23, scope: !4851)
!4853 = !DILocalVariable(name: "oe2", scope: !4851, file: !3, line: 1365, type: !859)
!4854 = !DILocation(line: 1365, column: 28, scope: !4851)
!4855 = !DILocation(line: 1367, column: 13, scope: !4851)
!4856 = !DILocation(line: 1367, column: 11, scope: !4851)
!4857 = !DILocation(line: 1368, column: 13, scope: !4851)
!4858 = !DILocation(line: 1368, column: 11, scope: !4851)
!4859 = !DILocation(line: 1370, column: 11, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 1370, column: 11)
!4861 = !DILocation(line: 1370, column: 19, scope: !4860)
!4862 = !DILocation(line: 1370, column: 24, scope: !4860)
!4863 = !DILocation(line: 1370, column: 16, scope: !4860)
!4864 = !DILocation(line: 1370, column: 27, scope: !4860)
!4865 = !DILocation(line: 1370, column: 30, scope: !4860)
!4866 = !DILocation(line: 1370, column: 38, scope: !4860)
!4867 = !DILocation(line: 1370, column: 43, scope: !4860)
!4868 = !DILocation(line: 1370, column: 35, scope: !4860)
!4869 = !DILocation(line: 1370, column: 11, scope: !4851)
!4870 = !DILocation(line: 1372, column: 8, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 1372, column: 8)
!4872 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 1371, column: 2)
!4873 = !DILocation(line: 1372, column: 18, scope: !4871)
!4874 = !DILocation(line: 1372, column: 22, scope: !4871)
!4875 = !DILocation(line: 1372, column: 33, scope: !4871)
!4876 = !DILocation(line: 1372, column: 8, scope: !4872)
!4877 = !DILocation(line: 1374, column: 17, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1373, column: 6)
!4879 = !DILocation(line: 1374, column: 8, scope: !4878)
!4880 = !DILocation(line: 1375, column: 27, scope: !4878)
!4881 = !DILocation(line: 1375, column: 38, scope: !4878)
!4882 = !DILocation(line: 1375, column: 8, scope: !4878)
!4883 = !DILocation(line: 1376, column: 6, scope: !4878)
!4884 = !DILocation(line: 1378, column: 28, scope: !4872)
!4885 = !DILocation(line: 1378, column: 34, scope: !4872)
!4886 = !DILocation(line: 1378, column: 39, scope: !4872)
!4887 = !DILocation(line: 1378, column: 4, scope: !4872)
!4888 = !DILocation(line: 1379, column: 28, scope: !4872)
!4889 = !DILocation(line: 1379, column: 34, scope: !4872)
!4890 = !DILocation(line: 1379, column: 39, scope: !4872)
!4891 = !DILocation(line: 1379, column: 4, scope: !4872)
!4892 = !DILocation(line: 1380, column: 17, scope: !4872)
!4893 = !DILocation(line: 1380, column: 4, scope: !4872)
!4894 = !DILocation(line: 1381, column: 8, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 1381, column: 8)
!4896 = !DILocation(line: 1381, column: 16, scope: !4895)
!4897 = !DILocation(line: 1381, column: 21, scope: !4895)
!4898 = !DILocation(line: 1381, column: 13, scope: !4895)
!4899 = !DILocation(line: 1381, column: 24, scope: !4895)
!4900 = !DILocation(line: 1381, column: 27, scope: !4895)
!4901 = !DILocation(line: 1381, column: 35, scope: !4895)
!4902 = !DILocation(line: 1381, column: 40, scope: !4895)
!4903 = !DILocation(line: 1381, column: 32, scope: !4895)
!4904 = !DILocation(line: 1381, column: 8, scope: !4872)
!4905 = !DILocation(line: 1382, column: 33, scope: !4895)
!4906 = !DILocation(line: 1382, column: 6, scope: !4895)
!4907 = !DILocation(line: 1384, column: 8, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 1384, column: 8)
!4909 = !DILocation(line: 1384, column: 18, scope: !4908)
!4910 = !DILocation(line: 1384, column: 22, scope: !4908)
!4911 = !DILocation(line: 1384, column: 33, scope: !4908)
!4912 = !DILocation(line: 1384, column: 8, scope: !4872)
!4913 = !DILocation(line: 1386, column: 17, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 1385, column: 6)
!4915 = !DILocation(line: 1386, column: 8, scope: !4914)
!4916 = !DILocation(line: 1387, column: 27, scope: !4914)
!4917 = !DILocation(line: 1387, column: 38, scope: !4914)
!4918 = !DILocation(line: 1387, column: 8, scope: !4914)
!4919 = !DILocation(line: 1388, column: 6, scope: !4914)
!4920 = !DILocation(line: 1390, column: 2, scope: !4872)
!4921 = !DILocation(line: 1391, column: 7, scope: !4851)
!4922 = !DILocation(line: 1395, column: 3, scope: !4699)
!4923 = !DILocation(line: 1398, column: 8, scope: !4699)
!4924 = !DILocation(line: 1398, column: 6, scope: !4699)
!4925 = !DILocation(line: 1400, column: 7, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 1400, column: 7)
!4927 = !DILocation(line: 1400, column: 11, scope: !4926)
!4928 = !DILocation(line: 1400, column: 17, scope: !4926)
!4929 = !DILocation(line: 1400, column: 14, scope: !4926)
!4930 = !DILocation(line: 1400, column: 7, scope: !4699)
!4931 = !DILocation(line: 1402, column: 12, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1402, column: 11)
!4933 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 1401, column: 5)
!4934 = !DILocation(line: 1402, column: 11, scope: !4933)
!4935 = !DILocalVariable(name: "gsinow", scope: !4936, file: !3, line: 1404, type: !2622)
!4936 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 1403, column: 2)
!4937 = !DILocation(line: 1404, column: 25, scope: !4936)
!4938 = !DILocalVariable(name: "gsirhs1", scope: !4936, file: !3, line: 1404, type: !2622)
!4939 = !DILocation(line: 1404, column: 33, scope: !4936)
!4940 = !DILocalVariable(name: "stmt1", scope: !4936, file: !3, line: 1405, type: !1196)
!4941 = !DILocation(line: 1405, column: 11, scope: !4936)
!4942 = !DILocation(line: 1405, column: 19, scope: !4936)
!4943 = !DILocalVariable(name: "stmt2", scope: !4936, file: !3, line: 1405, type: !1196)
!4944 = !DILocation(line: 1405, column: 25, scope: !4936)
!4945 = !DILocalVariable(name: "count", scope: !4936, file: !3, line: 1406, type: !7)
!4946 = !DILocation(line: 1406, column: 17, scope: !4936)
!4947 = !DILocation(line: 1408, column: 27, scope: !4936)
!4948 = !DILocation(line: 1408, column: 13, scope: !4936)
!4949 = !DILocation(line: 1409, column: 12, scope: !4936)
!4950 = !DILocation(line: 1409, column: 48, scope: !4936)
!4951 = !DILocation(line: 1409, column: 46, scope: !4936)
!4952 = !DILocation(line: 1409, column: 56, scope: !4936)
!4953 = !DILocation(line: 1409, column: 10, scope: !4936)
!4954 = !DILocation(line: 1410, column: 4, scope: !4936)
!4955 = !DILocation(line: 1410, column: 16, scope: !4936)
!4956 = !DILocation(line: 1410, column: 19, scope: !4936)
!4957 = !DILocation(line: 1412, column: 16, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1411, column: 6)
!4959 = !DILocation(line: 1412, column: 14, scope: !4958)
!4960 = !DILocation(line: 1413, column: 32, scope: !4958)
!4961 = !DILocation(line: 1413, column: 18, scope: !4958)
!4962 = !DILocation(line: 1414, column: 8, scope: !4958)
!4963 = !DILocation(line: 1415, column: 8, scope: !4958)
!4964 = !DILocation(line: 1416, column: 16, scope: !4958)
!4965 = !DILocation(line: 1416, column: 14, scope: !4958)
!4966 = distinct !{!4966, !4954, !4967}
!4967 = !DILocation(line: 1417, column: 6, scope: !4936)
!4968 = !DILocation(line: 1418, column: 10, scope: !4936)
!4969 = !DILocation(line: 1419, column: 2, scope: !4936)
!4970 = !DILocation(line: 1421, column: 11, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1421, column: 11)
!4972 = !DILocation(line: 1421, column: 21, scope: !4971)
!4973 = !DILocation(line: 1421, column: 25, scope: !4971)
!4974 = !DILocation(line: 1421, column: 36, scope: !4971)
!4975 = !DILocation(line: 1421, column: 11, scope: !4933)
!4976 = !DILocation(line: 1423, column: 13, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 1422, column: 2)
!4978 = !DILocation(line: 1423, column: 4, scope: !4977)
!4979 = !DILocation(line: 1424, column: 23, scope: !4977)
!4980 = !DILocation(line: 1424, column: 34, scope: !4977)
!4981 = !DILocation(line: 1424, column: 4, scope: !4977)
!4982 = !DILocation(line: 1425, column: 2, scope: !4977)
!4983 = !DILocation(line: 1427, column: 31, scope: !4933)
!4984 = !DILocation(line: 1427, column: 37, scope: !4933)
!4985 = !DILocation(line: 1427, column: 41, scope: !4933)
!4986 = !DILocation(line: 1427, column: 7, scope: !4933)
!4987 = !DILocation(line: 1428, column: 20, scope: !4933)
!4988 = !DILocation(line: 1428, column: 7, scope: !4933)
!4989 = !DILocation(line: 1430, column: 11, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1430, column: 11)
!4991 = !DILocation(line: 1430, column: 21, scope: !4990)
!4992 = !DILocation(line: 1430, column: 25, scope: !4990)
!4993 = !DILocation(line: 1430, column: 36, scope: !4990)
!4994 = !DILocation(line: 1430, column: 11, scope: !4933)
!4995 = !DILocation(line: 1432, column: 13, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1431, column: 2)
!4997 = !DILocation(line: 1432, column: 4, scope: !4996)
!4998 = !DILocation(line: 1433, column: 23, scope: !4996)
!4999 = !DILocation(line: 1433, column: 34, scope: !4996)
!5000 = !DILocation(line: 1433, column: 4, scope: !4996)
!5001 = !DILocation(line: 1434, column: 2, scope: !4996)
!5002 = !DILocation(line: 1435, column: 5, scope: !4933)
!5003 = !DILocation(line: 1438, column: 22, scope: !4699)
!5004 = !DILocation(line: 1438, column: 48, scope: !4699)
!5005 = !DILocation(line: 1438, column: 56, scope: !4699)
!5006 = !DILocation(line: 1438, column: 61, scope: !4699)
!5007 = !DILocation(line: 1438, column: 66, scope: !4699)
!5008 = !DILocation(line: 1438, column: 3, scope: !4699)
!5009 = !DILocation(line: 1439, column: 1, scope: !4699)
!5010 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_free", scope: !3, file: !3, line: 298, type: !5011, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5011 = !DISubroutineType(types: !5012)
!5012 = !{null, !2253}
!5013 = !DILocalVariable(name: "vec_", arg: 1, scope: !5010, file: !3, line: 298, type: !2253)
!5014 = !DILocation(line: 298, column: 1, scope: !5010)
!5015 = !DILocation(line: 298, column: 1, scope: !5016)
!5016 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 298, column: 1)
!5017 = distinct !DISubprogram(name: "gsi_prev", scope: !602, file: !602, line: 4493, type: !3202, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5018 = !DILocalVariable(name: "i", arg: 1, scope: !5017, file: !602, line: 4493, type: !3164)
!5019 = !DILocation(line: 4493, column: 33, scope: !5017)
!5020 = !DILocation(line: 4495, column: 12, scope: !5017)
!5021 = !DILocation(line: 4495, column: 15, scope: !5017)
!5022 = !DILocation(line: 4495, column: 20, scope: !5017)
!5023 = !DILocation(line: 4495, column: 3, scope: !5017)
!5024 = !DILocation(line: 4495, column: 6, scope: !5017)
!5025 = !DILocation(line: 4495, column: 10, scope: !5017)
!5026 = !DILocation(line: 4496, column: 1, scope: !5017)
!5027 = distinct !DISubprogram(name: "gimple_seq_last", scope: !602, file: !602, line: 178, type: !3235, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5028 = !DILocalVariable(name: "s", arg: 1, scope: !5027, file: !602, line: 178, type: !3237)
!5029 = !DILocation(line: 178, column: 35, scope: !5027)
!5030 = !DILocation(line: 180, column: 10, scope: !5027)
!5031 = !DILocation(line: 180, column: 14, scope: !5027)
!5032 = !DILocation(line: 180, column: 17, scope: !5027)
!5033 = !DILocation(line: 180, column: 3, scope: !5027)
!5034 = distinct !DISubprogram(name: "add_to_ops_vec", scope: !3, file: !3, line: 346, type: !5035, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5035 = !DISubroutineType(types: !5036)
!5036 = !{null, !2253, !865}
!5037 = !DILocalVariable(name: "ops", arg: 1, scope: !5034, file: !3, line: 346, type: !2253)
!5038 = !DILocation(line: 346, column: 46, scope: !5034)
!5039 = !DILocalVariable(name: "op", arg: 2, scope: !5034, file: !3, line: 346, type: !865)
!5040 = !DILocation(line: 346, column: 56, scope: !5034)
!5041 = !DILocalVariable(name: "oe", scope: !5034, file: !3, line: 348, type: !859)
!5042 = !DILocation(line: 348, column: 19, scope: !5034)
!5043 = !DILocation(line: 348, column: 54, scope: !5034)
!5044 = !DILocation(line: 348, column: 42, scope: !5034)
!5045 = !DILocation(line: 348, column: 24, scope: !5034)
!5046 = !DILocation(line: 350, column: 12, scope: !5034)
!5047 = !DILocation(line: 350, column: 3, scope: !5034)
!5048 = !DILocation(line: 350, column: 7, scope: !5034)
!5049 = !DILocation(line: 350, column: 10, scope: !5034)
!5050 = !DILocation(line: 351, column: 24, scope: !5034)
!5051 = !DILocation(line: 351, column: 14, scope: !5034)
!5052 = !DILocation(line: 351, column: 3, scope: !5034)
!5053 = !DILocation(line: 351, column: 7, scope: !5034)
!5054 = !DILocation(line: 351, column: 12, scope: !5034)
!5055 = !DILocation(line: 352, column: 3, scope: !5034)
!5056 = !DILocation(line: 353, column: 1, scope: !5034)
!5057 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !602, file: !602, line: 1738, type: !5058, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5058 = !DISubroutineType(types: !5059)
!5059 = !{!1230, !3044}
!5060 = !DILocalVariable(name: "gs", arg: 1, scope: !5057, file: !602, line: 1738, type: !3044)
!5061 = !DILocation(line: 1738, column: 38, scope: !5057)
!5062 = !DILocation(line: 1741, column: 25, scope: !5057)
!5063 = !DILocation(line: 1741, column: 10, scope: !5057)
!5064 = !DILocation(line: 1741, column: 3, scope: !5057)
!5065 = distinct !DISubprogram(name: "gimple_assign_rhs2_ptr", scope: !602, file: !602, line: 1774, type: !5058, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5066 = !DILocalVariable(name: "gs", arg: 1, scope: !5065, file: !602, line: 1774, type: !3044)
!5067 = !DILocation(line: 1774, column: 38, scope: !5065)
!5068 = !DILocation(line: 1777, column: 25, scope: !5065)
!5069 = !DILocation(line: 1777, column: 10, scope: !5065)
!5070 = !DILocation(line: 1777, column: 3, scope: !5065)
!5071 = distinct !DISubprogram(name: "linearize_expr", scope: !3, file: !3, line: 1446, type: !3645, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5072 = !DILocalVariable(name: "stmt", arg: 1, scope: !5071, file: !3, line: 1446, type: !1196)
!5073 = !DILocation(line: 1446, column: 24, scope: !5071)
!5074 = !DILocalVariable(name: "gsinow", scope: !5071, file: !3, line: 1448, type: !2622)
!5075 = !DILocation(line: 1448, column: 24, scope: !5071)
!5076 = !DILocalVariable(name: "gsirhs", scope: !5071, file: !3, line: 1448, type: !2622)
!5077 = !DILocation(line: 1448, column: 32, scope: !5071)
!5078 = !DILocalVariable(name: "binlhs", scope: !5071, file: !3, line: 1449, type: !1196)
!5079 = !DILocation(line: 1449, column: 10, scope: !5071)
!5080 = !DILocation(line: 1449, column: 19, scope: !5071)
!5081 = !DILocalVariable(name: "binrhs", scope: !5071, file: !3, line: 1450, type: !1196)
!5082 = !DILocation(line: 1450, column: 10, scope: !5071)
!5083 = !DILocation(line: 1450, column: 19, scope: !5071)
!5084 = !DILocalVariable(name: "rhscode", scope: !5071, file: !3, line: 1451, type: !134)
!5085 = !DILocation(line: 1451, column: 18, scope: !5071)
!5086 = !DILocation(line: 1451, column: 52, scope: !5071)
!5087 = !DILocation(line: 1451, column: 28, scope: !5071)
!5088 = !DILocalVariable(name: "newbinrhs", scope: !5071, file: !3, line: 1452, type: !1196)
!5089 = !DILocation(line: 1452, column: 10, scope: !5071)
!5090 = !DILocalVariable(name: "loop", scope: !5071, file: !3, line: 1453, type: !1411)
!5091 = !DILocation(line: 1453, column: 16, scope: !5071)
!5092 = !DILocation(line: 1453, column: 45, scope: !5071)
!5093 = !DILocation(line: 1453, column: 23, scope: !5071)
!5094 = !DILocation(line: 1455, column: 3, scope: !5071)
!5095 = !DILocation(line: 1458, column: 26, scope: !5071)
!5096 = !DILocation(line: 1458, column: 12, scope: !5071)
!5097 = !DILocation(line: 1459, column: 26, scope: !5071)
!5098 = !DILocation(line: 1459, column: 12, scope: !5071)
!5099 = !DILocation(line: 1460, column: 3, scope: !5071)
!5100 = !DILocation(line: 1462, column: 27, scope: !5071)
!5101 = !DILocation(line: 1462, column: 53, scope: !5071)
!5102 = !DILocation(line: 1462, column: 33, scope: !5071)
!5103 = !DILocation(line: 1462, column: 3, scope: !5071)
!5104 = !DILocation(line: 1463, column: 27, scope: !5071)
!5105 = !DILocation(line: 1463, column: 54, scope: !5071)
!5106 = !DILocation(line: 1463, column: 35, scope: !5071)
!5107 = !DILocation(line: 1463, column: 3, scope: !5071)
!5108 = !DILocation(line: 1464, column: 27, scope: !5071)
!5109 = !DILocation(line: 1464, column: 52, scope: !5071)
!5110 = !DILocation(line: 1464, column: 33, scope: !5071)
!5111 = !DILocation(line: 1464, column: 3, scope: !5071)
!5112 = !DILocation(line: 1466, column: 7, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 1466, column: 7)
!5114 = !DILocation(line: 1466, column: 45, scope: !5113)
!5115 = !DILocation(line: 1466, column: 7, scope: !5071)
!5116 = !DILocation(line: 1467, column: 17, scope: !5113)
!5117 = !DILocation(line: 1467, column: 15, scope: !5113)
!5118 = !DILocation(line: 1467, column: 5, scope: !5113)
!5119 = !DILocation(line: 1469, column: 7, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 1469, column: 7)
!5121 = !DILocation(line: 1469, column: 17, scope: !5120)
!5122 = !DILocation(line: 1469, column: 21, scope: !5120)
!5123 = !DILocation(line: 1469, column: 32, scope: !5120)
!5124 = !DILocation(line: 1469, column: 7, scope: !5071)
!5125 = !DILocation(line: 1471, column: 16, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 1470, column: 5)
!5127 = !DILocation(line: 1471, column: 7, scope: !5126)
!5128 = !DILocation(line: 1472, column: 26, scope: !5126)
!5129 = !DILocation(line: 1472, column: 37, scope: !5126)
!5130 = !DILocation(line: 1472, column: 7, scope: !5126)
!5131 = !DILocation(line: 1473, column: 5, scope: !5126)
!5132 = !DILocation(line: 1475, column: 31, scope: !5071)
!5133 = !DILocation(line: 1476, column: 16, scope: !5071)
!5134 = !DILocation(line: 1476, column: 3, scope: !5071)
!5135 = !DILocation(line: 1477, column: 16, scope: !5071)
!5136 = !DILocation(line: 1477, column: 3, scope: !5071)
!5137 = !DILocation(line: 1478, column: 16, scope: !5071)
!5138 = !DILocation(line: 1478, column: 3, scope: !5071)
!5139 = !DILocation(line: 1480, column: 23, scope: !5071)
!5140 = !DILocation(line: 1480, column: 3, scope: !5071)
!5141 = !DILocation(line: 1481, column: 23, scope: !5071)
!5142 = !DILocation(line: 1481, column: 3, scope: !5071)
!5143 = !DILocation(line: 1482, column: 23, scope: !5071)
!5144 = !DILocation(line: 1482, column: 3, scope: !5071)
!5145 = !DILocation(line: 1485, column: 7, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5071, file: !3, line: 1485, column: 7)
!5147 = !DILocation(line: 1485, column: 17, scope: !5146)
!5148 = !DILocation(line: 1485, column: 40, scope: !5146)
!5149 = !DILocation(line: 1485, column: 51, scope: !5146)
!5150 = !DILocation(line: 1485, column: 60, scope: !5146)
!5151 = !DILocation(line: 1485, column: 20, scope: !5146)
!5152 = !DILocation(line: 1485, column: 7, scope: !5071)
!5153 = !DILocation(line: 1488, column: 21, scope: !5146)
!5154 = !DILocation(line: 1488, column: 5, scope: !5146)
!5155 = !DILocation(line: 1489, column: 1, scope: !5071)
!5156 = distinct !DISubprogram(name: "get_rank", scope: !3, file: !3, line: 214, type: !5157, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5157 = !DISubroutineType(types: !5158)
!5158 = !{!921, !865}
!5159 = !DILocalVariable(name: "e", arg: 1, scope: !5156, file: !3, line: 214, type: !865)
!5160 = !DILocation(line: 214, column: 16, scope: !5156)
!5161 = !DILocation(line: 217, column: 32, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 217, column: 7)
!5163 = !DILocation(line: 217, column: 7, scope: !5162)
!5164 = !DILocation(line: 217, column: 7, scope: !5156)
!5165 = !DILocation(line: 218, column: 5, scope: !5162)
!5166 = !DILocation(line: 231, column: 7, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 231, column: 7)
!5168 = !DILocation(line: 231, column: 21, scope: !5167)
!5169 = !DILocation(line: 231, column: 7, scope: !5156)
!5170 = !DILocalVariable(name: "stmt", scope: !5171, file: !3, line: 233, type: !1196)
!5171 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 232, column: 5)
!5172 = !DILocation(line: 233, column: 14, scope: !5171)
!5173 = !DILocalVariable(name: "rank", scope: !5171, file: !3, line: 234, type: !921)
!5174 = !DILocation(line: 234, column: 12, scope: !5171)
!5175 = !DILocalVariable(name: "maxrank", scope: !5171, file: !3, line: 234, type: !921)
!5176 = !DILocation(line: 234, column: 18, scope: !5171)
!5177 = !DILocalVariable(name: "i", scope: !5171, file: !3, line: 235, type: !962)
!5178 = !DILocation(line: 235, column: 11, scope: !5171)
!5179 = !DILocalVariable(name: "n", scope: !5171, file: !3, line: 235, type: !962)
!5180 = !DILocation(line: 235, column: 14, scope: !5171)
!5181 = !DILocation(line: 237, column: 11, scope: !5182)
!5182 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 237, column: 11)
!5183 = !DILocation(line: 237, column: 40, scope: !5182)
!5184 = !DILocation(line: 238, column: 4, scope: !5182)
!5185 = !DILocation(line: 238, column: 7, scope: !5182)
!5186 = !DILocation(line: 237, column: 11, scope: !5171)
!5187 = !DILocation(line: 239, column: 28, scope: !5182)
!5188 = !DILocation(line: 239, column: 9, scope: !5182)
!5189 = !DILocation(line: 239, column: 2, scope: !5182)
!5190 = !DILocation(line: 241, column: 14, scope: !5171)
!5191 = !DILocation(line: 241, column: 12, scope: !5171)
!5192 = !DILocation(line: 242, column: 22, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 242, column: 11)
!5194 = !DILocation(line: 242, column: 11, scope: !5193)
!5195 = !DILocation(line: 242, column: 28, scope: !5193)
!5196 = !DILocation(line: 242, column: 11, scope: !5171)
!5197 = !DILocation(line: 243, column: 2, scope: !5193)
!5198 = !DILocation(line: 245, column: 30, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 245, column: 11)
!5200 = !DILocation(line: 245, column: 12, scope: !5199)
!5201 = !DILocation(line: 246, column: 4, scope: !5199)
!5202 = !DILocation(line: 246, column: 20, scope: !5199)
!5203 = !DILocation(line: 246, column: 7, scope: !5199)
!5204 = !DILocation(line: 245, column: 11, scope: !5171)
!5205 = !DILocation(line: 247, column: 9, scope: !5199)
!5206 = !DILocation(line: 247, column: 28, scope: !5199)
!5207 = !DILocation(line: 247, column: 17, scope: !5199)
!5208 = !DILocation(line: 247, column: 35, scope: !5199)
!5209 = !DILocation(line: 247, column: 2, scope: !5199)
!5210 = !DILocation(line: 250, column: 33, scope: !5171)
!5211 = !DILocation(line: 250, column: 14, scope: !5171)
!5212 = !DILocation(line: 250, column: 12, scope: !5171)
!5213 = !DILocation(line: 251, column: 11, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 251, column: 11)
!5215 = !DILocation(line: 251, column: 16, scope: !5214)
!5216 = !DILocation(line: 251, column: 11, scope: !5171)
!5217 = !DILocation(line: 252, column: 9, scope: !5214)
!5218 = !DILocation(line: 252, column: 2, scope: !5214)
!5219 = !DILocation(line: 256, column: 12, scope: !5171)
!5220 = !DILocation(line: 257, column: 17, scope: !5171)
!5221 = !DILocation(line: 257, column: 35, scope: !5171)
!5222 = !DILocation(line: 257, column: 25, scope: !5171)
!5223 = !DILocation(line: 257, column: 42, scope: !5171)
!5224 = !DILocation(line: 257, column: 15, scope: !5171)
!5225 = !DILocation(line: 258, column: 35, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 258, column: 11)
!5227 = !DILocation(line: 258, column: 11, scope: !5226)
!5228 = !DILocation(line: 258, column: 11, scope: !5171)
!5229 = !DILocalVariable(name: "rhs", scope: !5230, file: !3, line: 260, type: !865)
!5230 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 259, column: 2)
!5231 = !DILocation(line: 260, column: 9, scope: !5230)
!5232 = !DILocation(line: 260, column: 35, scope: !5230)
!5233 = !DILocation(line: 260, column: 15, scope: !5230)
!5234 = !DILocation(line: 261, column: 8, scope: !5230)
!5235 = !DILocation(line: 261, column: 6, scope: !5230)
!5236 = !DILocation(line: 262, column: 8, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 262, column: 8)
!5238 = !DILocation(line: 262, column: 10, scope: !5237)
!5239 = !DILocation(line: 262, column: 8, scope: !5230)
!5240 = !DILocation(line: 263, column: 13, scope: !5237)
!5241 = !DILocation(line: 263, column: 11, scope: !5237)
!5242 = !DILocation(line: 263, column: 6, scope: !5237)
!5243 = !DILocation(line: 266, column: 15, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 266, column: 8)
!5245 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 265, column: 6)
!5246 = !DILocation(line: 266, column: 13, scope: !5244)
!5247 = !DILocation(line: 267, column: 6, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 266, column: 8)
!5249 = !DILocation(line: 267, column: 10, scope: !5248)
!5250 = !DILocation(line: 267, column: 8, scope: !5248)
!5251 = !DILocation(line: 267, column: 12, scope: !5248)
!5252 = !DILocation(line: 267, column: 15, scope: !5248)
!5253 = !DILocation(line: 267, column: 37, scope: !5248)
!5254 = !DILocation(line: 267, column: 40, scope: !5248)
!5255 = !DILocation(line: 267, column: 48, scope: !5248)
!5256 = !DILocation(line: 267, column: 45, scope: !5248)
!5257 = !DILocation(line: 0, scope: !5248)
!5258 = !DILocation(line: 266, column: 8, scope: !5244)
!5259 = !DILocation(line: 268, column: 10, scope: !5248)
!5260 = !DILocation(line: 268, column: 8, scope: !5248)
!5261 = !DILocation(line: 268, column: 3, scope: !5248)
!5262 = !DILocation(line: 267, column: 58, scope: !5248)
!5263 = !DILocation(line: 266, column: 8, scope: !5248)
!5264 = distinct !{!5264, !5258, !5265}
!5265 = !DILocation(line: 268, column: 10, scope: !5244)
!5266 = !DILocation(line: 270, column: 2, scope: !5230)
!5267 = !DILocation(line: 273, column: 24, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 272, column: 2)
!5269 = !DILocation(line: 273, column: 8, scope: !5268)
!5270 = !DILocation(line: 273, column: 6, scope: !5268)
!5271 = !DILocation(line: 274, column: 11, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 274, column: 4)
!5273 = !DILocation(line: 274, column: 9, scope: !5272)
!5274 = !DILocation(line: 274, column: 16, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 274, column: 4)
!5276 = !DILocation(line: 274, column: 20, scope: !5275)
!5277 = !DILocation(line: 274, column: 18, scope: !5275)
!5278 = !DILocation(line: 274, column: 22, scope: !5275)
!5279 = !DILocation(line: 274, column: 25, scope: !5275)
!5280 = !DILocation(line: 274, column: 33, scope: !5275)
!5281 = !DILocation(line: 274, column: 30, scope: !5275)
!5282 = !DILocation(line: 0, scope: !5275)
!5283 = !DILocation(line: 274, column: 4, scope: !5272)
!5284 = !DILocation(line: 276, column: 8, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 275, column: 6)
!5286 = !DILocation(line: 277, column: 15, scope: !5285)
!5287 = !DILocation(line: 277, column: 13, scope: !5285)
!5288 = !DILocation(line: 278, column: 6, scope: !5285)
!5289 = !DILocation(line: 274, column: 43, scope: !5275)
!5290 = !DILocation(line: 274, column: 4, scope: !5275)
!5291 = distinct !{!5291, !5283, !5292}
!5292 = !DILocation(line: 278, column: 6, scope: !5272)
!5293 = !DILocation(line: 281, column: 11, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 281, column: 11)
!5295 = !DILocation(line: 281, column: 21, scope: !5294)
!5296 = !DILocation(line: 281, column: 25, scope: !5294)
!5297 = !DILocation(line: 281, column: 36, scope: !5294)
!5298 = !DILocation(line: 281, column: 11, scope: !5171)
!5299 = !DILocation(line: 283, column: 13, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 282, column: 2)
!5301 = !DILocation(line: 283, column: 4, scope: !5300)
!5302 = !DILocation(line: 284, column: 24, scope: !5300)
!5303 = !DILocation(line: 284, column: 35, scope: !5300)
!5304 = !DILocation(line: 284, column: 4, scope: !5300)
!5305 = !DILocation(line: 285, column: 13, scope: !5300)
!5306 = !DILocation(line: 285, column: 38, scope: !5300)
!5307 = !DILocation(line: 285, column: 43, scope: !5300)
!5308 = !DILocation(line: 285, column: 4, scope: !5300)
!5309 = !DILocation(line: 286, column: 2, scope: !5300)
!5310 = !DILocation(line: 289, column: 28, scope: !5171)
!5311 = !DILocation(line: 289, column: 32, scope: !5171)
!5312 = !DILocation(line: 289, column: 37, scope: !5171)
!5313 = !DILocation(line: 289, column: 7, scope: !5171)
!5314 = !DILocation(line: 290, column: 15, scope: !5171)
!5315 = !DILocation(line: 290, column: 20, scope: !5171)
!5316 = !DILocation(line: 290, column: 7, scope: !5171)
!5317 = !DILocation(line: 294, column: 3, scope: !5156)
!5318 = !DILocation(line: 295, column: 1, scope: !5156)
!5319 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_safe_push", scope: !3, file: !3, line: 298, type: !5320, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5320 = !DISubroutineType(types: !5321)
!5321 = !{!2433, !2253, !859}
!5322 = !DILocalVariable(name: "vec_", arg: 1, scope: !5319, file: !3, line: 298, type: !2253)
!5323 = !DILocation(line: 298, column: 1, scope: !5319)
!5324 = !DILocalVariable(name: "obj_", arg: 2, scope: !5319, file: !3, line: 298, type: !859)
!5325 = distinct !DISubprogram(name: "find_operand_rank", scope: !3, file: !3, line: 193, type: !5157, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5326 = !DILocalVariable(name: "e", arg: 1, scope: !5325, file: !3, line: 193, type: !865)
!5327 = !DILocation(line: 193, column: 25, scope: !5325)
!5328 = !DILocalVariable(name: "slot", scope: !5325, file: !3, line: 195, type: !1703)
!5329 = !DILocation(line: 195, column: 10, scope: !5325)
!5330 = !DILocation(line: 195, column: 39, scope: !5325)
!5331 = !DILocation(line: 195, column: 53, scope: !5325)
!5332 = !DILocation(line: 195, column: 17, scope: !5325)
!5333 = !DILocation(line: 196, column: 10, scope: !5325)
!5334 = !DILocation(line: 196, column: 36, scope: !5325)
!5335 = !DILocation(line: 196, column: 35, scope: !5325)
!5336 = !DILocation(line: 196, column: 24, scope: !5325)
!5337 = !DILocation(line: 196, column: 3, scope: !5325)
!5338 = distinct !DISubprogram(name: "gimple_vdef", scope: !602, file: !602, line: 1375, type: !3072, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5339 = !DILocalVariable(name: "g", arg: 1, scope: !5338, file: !602, line: 1375, type: !3044)
!5340 = !DILocation(line: 1375, column: 27, scope: !5338)
!5341 = !DILocation(line: 1377, column: 28, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5338, file: !602, line: 1377, column: 7)
!5343 = !DILocation(line: 1377, column: 8, scope: !5342)
!5344 = !DILocation(line: 1377, column: 7, scope: !5338)
!5345 = !DILocation(line: 1378, column: 5, scope: !5342)
!5346 = !DILocation(line: 1379, column: 10, scope: !5338)
!5347 = !DILocation(line: 1379, column: 13, scope: !5338)
!5348 = !DILocation(line: 1379, column: 23, scope: !5338)
!5349 = !DILocation(line: 1379, column: 3, scope: !5338)
!5350 = !DILocation(line: 1380, column: 1, scope: !5338)
!5351 = distinct !DISubprogram(name: "tree_operand_length", scope: !135, file: !135, line: 5347, type: !5352, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5352 = !DISubroutineType(types: !5353)
!5353 = !{!962, !3458}
!5354 = !DILocalVariable(name: "node", arg: 1, scope: !5351, file: !135, line: 5347, type: !3458)
!5355 = !DILocation(line: 5347, column: 33, scope: !5351)
!5356 = !DILocation(line: 5349, column: 7, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5351, file: !135, line: 5349, column: 7)
!5358 = !DILocation(line: 5349, column: 7, scope: !5351)
!5359 = !DILocation(line: 5350, column: 12, scope: !5357)
!5360 = !DILocation(line: 5350, column: 5, scope: !5357)
!5361 = !DILocation(line: 5352, column: 12, scope: !5357)
!5362 = !DILocation(line: 5352, column: 5, scope: !5357)
!5363 = !DILocation(line: 5353, column: 1, scope: !5351)
!5364 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !602, file: !602, line: 1283, type: !3042, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5365 = !DILocalVariable(name: "g", arg: 1, scope: !5364, file: !602, line: 1283, type: !3044)
!5366 = !DILocation(line: 1283, column: 34, scope: !5364)
!5367 = !DILocation(line: 1285, column: 23, scope: !5364)
!5368 = !DILocation(line: 1285, column: 10, scope: !5364)
!5369 = !DILocation(line: 1285, column: 26, scope: !5364)
!5370 = !DILocation(line: 1285, column: 43, scope: !5364)
!5371 = !DILocation(line: 1285, column: 59, scope: !5364)
!5372 = !DILocation(line: 1285, column: 46, scope: !5364)
!5373 = !DILocation(line: 1285, column: 62, scope: !5364)
!5374 = !DILocation(line: 0, scope: !5364)
!5375 = !DILocation(line: 1285, column: 3, scope: !5364)
!5376 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_reserve", scope: !3, file: !3, line: 298, type: !5377, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5377 = !DISubroutineType(types: !5378)
!5378 = !{!962, !2253, !962}
!5379 = !DILocalVariable(name: "vec_", arg: 1, scope: !5376, file: !3, line: 298, type: !2253)
!5380 = !DILocation(line: 298, column: 1, scope: !5376)
!5381 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5376, file: !3, line: 298, type: !962)
!5382 = !DILocalVariable(name: "extend", scope: !5376, file: !3, line: 298, type: !962)
!5383 = !DILocation(line: 298, column: 1, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 298, column: 1)
!5385 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_quick_push", scope: !3, file: !3, line: 297, type: !5386, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5386 = !DISubroutineType(types: !5387)
!5387 = !{!2433, !3933, !859}
!5388 = !DILocalVariable(name: "vec_", arg: 1, scope: !5385, file: !3, line: 297, type: !3933)
!5389 = !DILocation(line: 297, column: 1, scope: !5385)
!5390 = !DILocalVariable(name: "obj_", arg: 2, scope: !5385, file: !3, line: 297, type: !859)
!5391 = !DILocalVariable(name: "slot_", scope: !5385, file: !3, line: 297, type: !2433)
!5392 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_space", scope: !3, file: !3, line: 297, type: !5393, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5393 = !DISubroutineType(types: !5394)
!5394 = !{!962, !3933, !962}
!5395 = !DILocalVariable(name: "vec_", arg: 1, scope: !5392, file: !3, line: 297, type: !3933)
!5396 = !DILocation(line: 297, column: 1, scope: !5392)
!5397 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5392, file: !3, line: 297, type: !962)
!5398 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !602, file: !602, line: 1647, type: !5399, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5399 = !DISubroutineType(types: !5400)
!5400 = !{!1230, !3044, !7}
!5401 = !DILocalVariable(name: "gs", arg: 1, scope: !5398, file: !602, line: 1647, type: !3044)
!5402 = !DILocation(line: 1647, column: 29, scope: !5398)
!5403 = !DILocalVariable(name: "i", arg: 2, scope: !5398, file: !602, line: 1647, type: !7)
!5404 = !DILocation(line: 1647, column: 42, scope: !5398)
!5405 = !DILocation(line: 1649, column: 23, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5398, file: !602, line: 1649, column: 7)
!5407 = !DILocation(line: 1649, column: 7, scope: !5406)
!5408 = !DILocation(line: 1649, column: 7, scope: !5398)
!5409 = !DILocation(line: 1654, column: 26, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5406, file: !602, line: 1650, column: 5)
!5411 = !DILocation(line: 1654, column: 14, scope: !5410)
!5412 = !DILocation(line: 1654, column: 52, scope: !5410)
!5413 = !DILocation(line: 1654, column: 50, scope: !5410)
!5414 = !DILocation(line: 1654, column: 7, scope: !5410)
!5415 = !DILocation(line: 1657, column: 5, scope: !5406)
!5416 = !DILocation(line: 1658, column: 1, scope: !5398)
!5417 = distinct !DISubprogram(name: "constant_type", scope: !3, file: !3, line: 309, type: !5418, scopeLine: 310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5418 = !DISubroutineType(types: !5419)
!5419 = !{!962, !865}
!5420 = !DILocalVariable(name: "t", arg: 1, scope: !5417, file: !3, line: 309, type: !865)
!5421 = !DILocation(line: 309, column: 21, scope: !5417)
!5422 = !DILocation(line: 311, column: 7, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 311, column: 7)
!5424 = !DILocation(line: 311, column: 7, scope: !5417)
!5425 = !DILocation(line: 312, column: 5, scope: !5423)
!5426 = !DILocation(line: 313, column: 12, scope: !5427)
!5427 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 313, column: 12)
!5428 = !DILocation(line: 313, column: 12, scope: !5423)
!5429 = !DILocation(line: 314, column: 5, scope: !5427)
!5430 = !DILocation(line: 316, column: 5, scope: !5427)
!5431 = !DILocation(line: 317, column: 1, scope: !5417)
!5432 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_index", scope: !3, file: !3, line: 297, type: !5433, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5433 = !DISubroutineType(types: !5434)
!5434 = !{!859, !2431, !7}
!5435 = !DILocalVariable(name: "vec_", arg: 1, scope: !5432, file: !3, line: 297, type: !2431)
!5436 = !DILocation(line: 297, column: 1, scope: !5432)
!5437 = !DILocalVariable(name: "ix_", arg: 2, scope: !5432, file: !3, line: 297, type: !7)
!5438 = !DILocation(line: 0, scope: !5432)
!5439 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_pop", scope: !3, file: !3, line: 297, type: !5440, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5440 = !DISubroutineType(types: !5441)
!5441 = !{!859, !3933}
!5442 = !DILocalVariable(name: "vec_", arg: 1, scope: !5439, file: !3, line: 297, type: !3933)
!5443 = !DILocation(line: 297, column: 1, scope: !5439)
!5444 = !DILocalVariable(name: "obj_", scope: !5439, file: !3, line: 297, type: !859)
!5445 = distinct !DISubprogram(name: "eliminate_using_constants", scope: !3, file: !3, line: 603, type: !3999, scopeLine: 605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5446 = !DILocalVariable(name: "opcode", arg: 1, scope: !5445, file: !3, line: 603, type: !134)
!5447 = !DILocation(line: 603, column: 43, scope: !5445)
!5448 = !DILocalVariable(name: "ops", arg: 2, scope: !5445, file: !3, line: 604, type: !2253)
!5449 = !DILocation(line: 604, column: 36, scope: !5445)
!5450 = !DILocalVariable(name: "oelast", scope: !5445, file: !3, line: 606, type: !859)
!5451 = !DILocation(line: 606, column: 19, scope: !5445)
!5452 = !DILocation(line: 606, column: 28, scope: !5445)
!5453 = !DILocalVariable(name: "type", scope: !5445, file: !3, line: 607, type: !865)
!5454 = !DILocation(line: 607, column: 8, scope: !5445)
!5455 = !DILocation(line: 607, column: 15, scope: !5445)
!5456 = !DILocation(line: 609, column: 7, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 609, column: 7)
!5458 = !DILocation(line: 609, column: 15, scope: !5457)
!5459 = !DILocation(line: 609, column: 20, scope: !5457)
!5460 = !DILocation(line: 610, column: 7, scope: !5457)
!5461 = !DILocation(line: 610, column: 11, scope: !5457)
!5462 = !DILocation(line: 610, column: 34, scope: !5457)
!5463 = !DILocation(line: 610, column: 37, scope: !5457)
!5464 = !DILocation(line: 609, column: 7, scope: !5445)
!5465 = !DILocation(line: 612, column: 15, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 611, column: 5)
!5467 = !DILocation(line: 612, column: 7, scope: !5466)
!5468 = !DILocation(line: 615, column: 23, scope: !5469)
!5469 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 615, column: 8)
!5470 = distinct !DILexicalBlock(scope: !5466, file: !3, line: 613, column: 2)
!5471 = !DILocation(line: 615, column: 31, scope: !5469)
!5472 = !DILocation(line: 615, column: 8, scope: !5469)
!5473 = !DILocation(line: 615, column: 8, scope: !5470)
!5474 = !DILocation(line: 617, column: 12, scope: !5475)
!5475 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 617, column: 12)
!5476 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 616, column: 6)
!5477 = !DILocation(line: 617, column: 47, scope: !5475)
!5478 = !DILocation(line: 617, column: 12, scope: !5476)
!5479 = !DILocation(line: 619, column: 9, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 619, column: 9)
!5481 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 618, column: 3)
!5482 = !DILocation(line: 619, column: 19, scope: !5480)
!5483 = !DILocation(line: 619, column: 23, scope: !5480)
!5484 = !DILocation(line: 619, column: 34, scope: !5480)
!5485 = !DILocation(line: 619, column: 9, scope: !5481)
!5486 = !DILocation(line: 620, column: 16, scope: !5480)
!5487 = !DILocation(line: 620, column: 7, scope: !5480)
!5488 = !DILocation(line: 623, column: 10, scope: !5481)
!5489 = !DILocation(line: 623, column: 45, scope: !5481)
!5490 = !DILocation(line: 623, column: 7, scope: !5481)
!5491 = !DILocation(line: 625, column: 5, scope: !5481)
!5492 = !DILocation(line: 626, column: 6, scope: !5481)
!5493 = !DILocation(line: 626, column: 10, scope: !5481)
!5494 = !DILocation(line: 627, column: 5, scope: !5481)
!5495 = !DILocation(line: 628, column: 5, scope: !5481)
!5496 = !DILocation(line: 630, column: 6, scope: !5476)
!5497 = !DILocation(line: 631, column: 32, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 631, column: 13)
!5499 = !DILocation(line: 631, column: 40, scope: !5498)
!5500 = !DILocation(line: 631, column: 13, scope: !5498)
!5501 = !DILocation(line: 631, column: 13, scope: !5469)
!5502 = !DILocation(line: 633, column: 12, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 633, column: 12)
!5504 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 632, column: 6)
!5505 = !DILocation(line: 633, column: 47, scope: !5503)
!5506 = !DILocation(line: 633, column: 12, scope: !5504)
!5507 = !DILocation(line: 635, column: 9, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 635, column: 9)
!5509 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 634, column: 3)
!5510 = !DILocation(line: 635, column: 19, scope: !5508)
!5511 = !DILocation(line: 635, column: 23, scope: !5508)
!5512 = !DILocation(line: 635, column: 34, scope: !5508)
!5513 = !DILocation(line: 635, column: 9, scope: !5509)
!5514 = !DILocation(line: 636, column: 16, scope: !5508)
!5515 = !DILocation(line: 636, column: 7, scope: !5508)
!5516 = !DILocation(line: 637, column: 5, scope: !5509)
!5517 = !DILocation(line: 638, column: 37, scope: !5509)
!5518 = !DILocation(line: 639, column: 3, scope: !5509)
!5519 = !DILocation(line: 640, column: 6, scope: !5504)
!5520 = !DILocation(line: 641, column: 4, scope: !5470)
!5521 = !DILocation(line: 643, column: 27, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 643, column: 8)
!5523 = !DILocation(line: 643, column: 35, scope: !5522)
!5524 = !DILocation(line: 643, column: 8, scope: !5522)
!5525 = !DILocation(line: 643, column: 8, scope: !5470)
!5526 = !DILocation(line: 645, column: 12, scope: !5527)
!5527 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 645, column: 12)
!5528 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 644, column: 6)
!5529 = !DILocation(line: 645, column: 47, scope: !5527)
!5530 = !DILocation(line: 645, column: 12, scope: !5528)
!5531 = !DILocation(line: 647, column: 9, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5533, file: !3, line: 647, column: 9)
!5533 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 646, column: 3)
!5534 = !DILocation(line: 647, column: 19, scope: !5532)
!5535 = !DILocation(line: 647, column: 23, scope: !5532)
!5536 = !DILocation(line: 647, column: 34, scope: !5532)
!5537 = !DILocation(line: 647, column: 9, scope: !5533)
!5538 = !DILocation(line: 648, column: 16, scope: !5532)
!5539 = !DILocation(line: 648, column: 7, scope: !5532)
!5540 = !DILocation(line: 651, column: 10, scope: !5533)
!5541 = !DILocation(line: 651, column: 45, scope: !5533)
!5542 = !DILocation(line: 651, column: 7, scope: !5533)
!5543 = !DILocation(line: 653, column: 5, scope: !5533)
!5544 = !DILocation(line: 654, column: 6, scope: !5533)
!5545 = !DILocation(line: 654, column: 10, scope: !5533)
!5546 = !DILocation(line: 655, column: 5, scope: !5533)
!5547 = !DILocation(line: 656, column: 5, scope: !5533)
!5548 = !DILocation(line: 658, column: 6, scope: !5528)
!5549 = !DILocation(line: 659, column: 28, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 659, column: 13)
!5551 = !DILocation(line: 659, column: 36, scope: !5550)
!5552 = !DILocation(line: 659, column: 13, scope: !5550)
!5553 = !DILocation(line: 659, column: 13, scope: !5522)
!5554 = !DILocation(line: 661, column: 12, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 661, column: 12)
!5556 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 660, column: 6)
!5557 = !DILocation(line: 661, column: 47, scope: !5555)
!5558 = !DILocation(line: 661, column: 12, scope: !5556)
!5559 = !DILocation(line: 663, column: 9, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5561, file: !3, line: 663, column: 9)
!5561 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 662, column: 3)
!5562 = !DILocation(line: 663, column: 19, scope: !5560)
!5563 = !DILocation(line: 663, column: 23, scope: !5560)
!5564 = !DILocation(line: 663, column: 34, scope: !5560)
!5565 = !DILocation(line: 663, column: 9, scope: !5561)
!5566 = !DILocation(line: 664, column: 16, scope: !5560)
!5567 = !DILocation(line: 664, column: 7, scope: !5560)
!5568 = !DILocation(line: 665, column: 5, scope: !5561)
!5569 = !DILocation(line: 666, column: 37, scope: !5561)
!5570 = !DILocation(line: 667, column: 3, scope: !5561)
!5571 = !DILocation(line: 668, column: 6, scope: !5556)
!5572 = !DILocation(line: 669, column: 4, scope: !5470)
!5573 = !DILocation(line: 671, column: 23, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 671, column: 8)
!5575 = !DILocation(line: 671, column: 31, scope: !5574)
!5576 = !DILocation(line: 671, column: 8, scope: !5574)
!5577 = !DILocation(line: 672, column: 8, scope: !5574)
!5578 = !DILocation(line: 672, column: 12, scope: !5574)
!5579 = !DILocation(line: 673, column: 5, scope: !5574)
!5580 = !DILocation(line: 673, column: 9, scope: !5574)
!5581 = !DILocation(line: 674, column: 5, scope: !5574)
!5582 = !DILocation(line: 674, column: 9, scope: !5574)
!5583 = !DILocation(line: 675, column: 5, scope: !5574)
!5584 = !DILocation(line: 675, column: 20, scope: !5574)
!5585 = !DILocation(line: 675, column: 28, scope: !5574)
!5586 = !DILocation(line: 675, column: 8, scope: !5574)
!5587 = !DILocation(line: 671, column: 8, scope: !5470)
!5588 = !DILocation(line: 677, column: 12, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5590, file: !3, line: 677, column: 12)
!5590 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 676, column: 6)
!5591 = !DILocation(line: 677, column: 47, scope: !5589)
!5592 = !DILocation(line: 677, column: 12, scope: !5590)
!5593 = !DILocation(line: 679, column: 9, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 679, column: 9)
!5595 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 678, column: 3)
!5596 = !DILocation(line: 679, column: 19, scope: !5594)
!5597 = !DILocation(line: 679, column: 23, scope: !5594)
!5598 = !DILocation(line: 679, column: 34, scope: !5594)
!5599 = !DILocation(line: 679, column: 9, scope: !5595)
!5600 = !DILocation(line: 680, column: 16, scope: !5594)
!5601 = !DILocation(line: 680, column: 7, scope: !5594)
!5602 = !DILocation(line: 683, column: 10, scope: !5595)
!5603 = !DILocation(line: 683, column: 45, scope: !5595)
!5604 = !DILocation(line: 683, column: 7, scope: !5595)
!5605 = !DILocation(line: 684, column: 5, scope: !5595)
!5606 = !DILocation(line: 685, column: 6, scope: !5595)
!5607 = !DILocation(line: 685, column: 10, scope: !5595)
!5608 = !DILocation(line: 686, column: 5, scope: !5595)
!5609 = !DILocation(line: 687, column: 5, scope: !5595)
!5610 = !DILocation(line: 689, column: 6, scope: !5590)
!5611 = !DILocation(line: 690, column: 27, scope: !5612)
!5612 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 690, column: 13)
!5613 = !DILocation(line: 690, column: 35, scope: !5612)
!5614 = !DILocation(line: 690, column: 13, scope: !5612)
!5615 = !DILocation(line: 691, column: 6, scope: !5612)
!5616 = !DILocation(line: 691, column: 10, scope: !5612)
!5617 = !DILocation(line: 692, column: 10, scope: !5612)
!5618 = !DILocation(line: 692, column: 14, scope: !5612)
!5619 = !DILocation(line: 693, column: 10, scope: !5612)
!5620 = !DILocation(line: 693, column: 24, scope: !5612)
!5621 = !DILocation(line: 693, column: 32, scope: !5612)
!5622 = !DILocation(line: 693, column: 13, scope: !5612)
!5623 = !DILocation(line: 690, column: 13, scope: !5574)
!5624 = !DILocation(line: 695, column: 12, scope: !5625)
!5625 = distinct !DILexicalBlock(scope: !5626, file: !3, line: 695, column: 12)
!5626 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 694, column: 6)
!5627 = !DILocation(line: 695, column: 47, scope: !5625)
!5628 = !DILocation(line: 695, column: 12, scope: !5626)
!5629 = !DILocation(line: 697, column: 9, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 697, column: 9)
!5631 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 696, column: 3)
!5632 = !DILocation(line: 697, column: 19, scope: !5630)
!5633 = !DILocation(line: 697, column: 23, scope: !5630)
!5634 = !DILocation(line: 697, column: 34, scope: !5630)
!5635 = !DILocation(line: 697, column: 9, scope: !5631)
!5636 = !DILocation(line: 698, column: 16, scope: !5630)
!5637 = !DILocation(line: 698, column: 7, scope: !5630)
!5638 = !DILocation(line: 699, column: 5, scope: !5631)
!5639 = !DILocation(line: 700, column: 37, scope: !5631)
!5640 = !DILocation(line: 701, column: 5, scope: !5631)
!5641 = !DILocation(line: 703, column: 6, scope: !5626)
!5642 = !DILocation(line: 704, column: 4, scope: !5470)
!5643 = !DILocation(line: 708, column: 23, scope: !5644)
!5644 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 708, column: 8)
!5645 = !DILocation(line: 708, column: 31, scope: !5644)
!5646 = !DILocation(line: 708, column: 8, scope: !5644)
!5647 = !DILocation(line: 709, column: 8, scope: !5644)
!5648 = !DILocation(line: 709, column: 12, scope: !5644)
!5649 = !DILocation(line: 710, column: 5, scope: !5644)
!5650 = !DILocation(line: 710, column: 9, scope: !5644)
!5651 = !DILocation(line: 710, column: 16, scope: !5644)
!5652 = !DILocation(line: 710, column: 29, scope: !5644)
!5653 = !DILocation(line: 710, column: 32, scope: !5644)
!5654 = !DILocation(line: 710, column: 39, scope: !5644)
!5655 = !DILocation(line: 711, column: 5, scope: !5644)
!5656 = !DILocation(line: 711, column: 35, scope: !5644)
!5657 = !DILocation(line: 711, column: 41, scope: !5644)
!5658 = !DILocation(line: 711, column: 49, scope: !5644)
!5659 = !DILocation(line: 712, column: 7, scope: !5644)
!5660 = !DILocation(line: 712, column: 14, scope: !5644)
!5661 = !DILocation(line: 711, column: 8, scope: !5644)
!5662 = !DILocation(line: 708, column: 8, scope: !5470)
!5663 = !DILocation(line: 714, column: 12, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 714, column: 12)
!5665 = distinct !DILexicalBlock(scope: !5644, file: !3, line: 713, column: 6)
!5666 = !DILocation(line: 714, column: 47, scope: !5664)
!5667 = !DILocation(line: 714, column: 12, scope: !5665)
!5668 = !DILocation(line: 716, column: 9, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 716, column: 9)
!5670 = distinct !DILexicalBlock(scope: !5664, file: !3, line: 715, column: 3)
!5671 = !DILocation(line: 716, column: 19, scope: !5669)
!5672 = !DILocation(line: 716, column: 23, scope: !5669)
!5673 = !DILocation(line: 716, column: 34, scope: !5669)
!5674 = !DILocation(line: 716, column: 9, scope: !5670)
!5675 = !DILocation(line: 717, column: 16, scope: !5669)
!5676 = !DILocation(line: 717, column: 7, scope: !5669)
!5677 = !DILocation(line: 718, column: 5, scope: !5670)
!5678 = !DILocation(line: 719, column: 37, scope: !5670)
!5679 = !DILocation(line: 720, column: 5, scope: !5670)
!5680 = !DILocation(line: 722, column: 6, scope: !5665)
!5681 = !DILocation(line: 723, column: 4, scope: !5470)
!5682 = !DILocation(line: 725, column: 4, scope: !5470)
!5683 = !DILocation(line: 727, column: 5, scope: !5466)
!5684 = !DILocation(line: 728, column: 1, scope: !5445)
!5685 = distinct !DISubprogram(name: "eliminate_not_pairs", scope: !3, file: !3, line: 534, type: !5686, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{!985, !134, !2253, !7, !859}
!5688 = !DILocalVariable(name: "opcode", arg: 1, scope: !5685, file: !3, line: 534, type: !134)
!5689 = !DILocation(line: 534, column: 37, scope: !5685)
!5690 = !DILocalVariable(name: "ops", arg: 2, scope: !5685, file: !3, line: 535, type: !2253)
!5691 = !DILocation(line: 535, column: 38, scope: !5685)
!5692 = !DILocalVariable(name: "currindex", arg: 3, scope: !5685, file: !3, line: 536, type: !7)
!5693 = !DILocation(line: 536, column: 21, scope: !5685)
!5694 = !DILocalVariable(name: "curr", arg: 4, scope: !5685, file: !3, line: 537, type: !859)
!5695 = !DILocation(line: 537, column: 24, scope: !5685)
!5696 = !DILocalVariable(name: "notop", scope: !5685, file: !3, line: 539, type: !865)
!5697 = !DILocation(line: 539, column: 8, scope: !5685)
!5698 = !DILocalVariable(name: "i", scope: !5685, file: !3, line: 540, type: !7)
!5699 = !DILocation(line: 540, column: 16, scope: !5685)
!5700 = !DILocalVariable(name: "oe", scope: !5685, file: !3, line: 541, type: !859)
!5701 = !DILocation(line: 541, column: 19, scope: !5685)
!5702 = !DILocation(line: 543, column: 8, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 543, column: 7)
!5704 = !DILocation(line: 543, column: 15, scope: !5703)
!5705 = !DILocation(line: 543, column: 31, scope: !5703)
!5706 = !DILocation(line: 543, column: 34, scope: !5703)
!5707 = !DILocation(line: 543, column: 41, scope: !5703)
!5708 = !DILocation(line: 544, column: 7, scope: !5703)
!5709 = !DILocation(line: 544, column: 10, scope: !5703)
!5710 = !DILocation(line: 544, column: 31, scope: !5703)
!5711 = !DILocation(line: 543, column: 7, scope: !5685)
!5712 = !DILocation(line: 545, column: 5, scope: !5703)
!5713 = !DILocation(line: 547, column: 25, scope: !5685)
!5714 = !DILocation(line: 547, column: 31, scope: !5685)
!5715 = !DILocation(line: 547, column: 11, scope: !5685)
!5716 = !DILocation(line: 547, column: 9, scope: !5685)
!5717 = !DILocation(line: 548, column: 7, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 548, column: 7)
!5719 = !DILocation(line: 548, column: 13, scope: !5718)
!5720 = !DILocation(line: 548, column: 7, scope: !5685)
!5721 = !DILocation(line: 549, column: 5, scope: !5718)
!5722 = !DILocation(line: 555, column: 12, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 555, column: 3)
!5724 = !DILocation(line: 555, column: 22, scope: !5723)
!5725 = !DILocation(line: 555, column: 10, scope: !5723)
!5726 = !DILocation(line: 555, column: 8, scope: !5723)
!5727 = !DILocation(line: 556, column: 8, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 555, column: 3)
!5729 = !DILocation(line: 557, column: 8, scope: !5728)
!5730 = !DILocation(line: 557, column: 11, scope: !5728)
!5731 = !DILocation(line: 557, column: 15, scope: !5728)
!5732 = !DILocation(line: 557, column: 23, scope: !5728)
!5733 = !DILocation(line: 557, column: 29, scope: !5728)
!5734 = !DILocation(line: 557, column: 34, scope: !5728)
!5735 = !DILocation(line: 557, column: 20, scope: !5728)
!5736 = !DILocation(line: 0, scope: !5728)
!5737 = !DILocation(line: 555, column: 3, scope: !5723)
!5738 = !DILocation(line: 560, column: 11, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 560, column: 11)
!5740 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 559, column: 5)
!5741 = !DILocation(line: 560, column: 15, scope: !5739)
!5742 = !DILocation(line: 560, column: 21, scope: !5739)
!5743 = !DILocation(line: 560, column: 18, scope: !5739)
!5744 = !DILocation(line: 560, column: 11, scope: !5740)
!5745 = !DILocation(line: 562, column: 8, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 562, column: 8)
!5747 = distinct !DILexicalBlock(scope: !5739, file: !3, line: 561, column: 2)
!5748 = !DILocation(line: 562, column: 18, scope: !5746)
!5749 = !DILocation(line: 562, column: 22, scope: !5746)
!5750 = !DILocation(line: 562, column: 33, scope: !5746)
!5751 = !DILocation(line: 562, column: 8, scope: !5747)
!5752 = !DILocation(line: 564, column: 17, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 563, column: 6)
!5754 = !DILocation(line: 564, column: 8, scope: !5753)
!5755 = !DILocation(line: 565, column: 28, scope: !5753)
!5756 = !DILocation(line: 565, column: 39, scope: !5753)
!5757 = !DILocation(line: 565, column: 8, scope: !5753)
!5758 = !DILocation(line: 566, column: 12, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 566, column: 12)
!5760 = !DILocation(line: 566, column: 19, scope: !5759)
!5761 = !DILocation(line: 566, column: 12, scope: !5753)
!5762 = !DILocation(line: 567, column: 12, scope: !5759)
!5763 = !DILocation(line: 567, column: 3, scope: !5759)
!5764 = !DILocation(line: 568, column: 17, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 568, column: 17)
!5766 = !DILocation(line: 568, column: 24, scope: !5765)
!5767 = !DILocation(line: 568, column: 17, scope: !5759)
!5768 = !DILocation(line: 569, column: 12, scope: !5765)
!5769 = !DILocation(line: 569, column: 3, scope: !5765)
!5770 = !DILocation(line: 570, column: 28, scope: !5753)
!5771 = !DILocation(line: 570, column: 39, scope: !5753)
!5772 = !DILocation(line: 570, column: 43, scope: !5753)
!5773 = !DILocation(line: 570, column: 8, scope: !5753)
!5774 = !DILocation(line: 571, column: 12, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 571, column: 12)
!5776 = !DILocation(line: 571, column: 19, scope: !5775)
!5777 = !DILocation(line: 571, column: 12, scope: !5753)
!5778 = !DILocation(line: 572, column: 12, scope: !5775)
!5779 = !DILocation(line: 572, column: 3, scope: !5775)
!5780 = !DILocation(line: 573, column: 17, scope: !5781)
!5781 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 573, column: 17)
!5782 = !DILocation(line: 573, column: 24, scope: !5781)
!5783 = !DILocation(line: 573, column: 17, scope: !5775)
!5784 = !DILocation(line: 574, column: 12, scope: !5781)
!5785 = !DILocation(line: 574, column: 3, scope: !5781)
!5786 = !DILocation(line: 575, column: 6, scope: !5753)
!5787 = !DILocation(line: 577, column: 8, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 577, column: 8)
!5789 = !DILocation(line: 577, column: 15, scope: !5788)
!5790 = !DILocation(line: 577, column: 8, scope: !5747)
!5791 = !DILocation(line: 578, column: 15, scope: !5788)
!5792 = !DILocation(line: 578, column: 6, scope: !5788)
!5793 = !DILocation(line: 578, column: 10, scope: !5788)
!5794 = !DILocation(line: 578, column: 13, scope: !5788)
!5795 = !DILocation(line: 579, column: 13, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 579, column: 13)
!5797 = !DILocation(line: 579, column: 20, scope: !5796)
!5798 = !DILocation(line: 579, column: 13, scope: !5788)
!5799 = !DILocation(line: 580, column: 36, scope: !5796)
!5800 = !DILocation(line: 581, column: 8, scope: !5796)
!5801 = !DILocation(line: 580, column: 15, scope: !5796)
!5802 = !DILocation(line: 580, column: 6, scope: !5796)
!5803 = !DILocation(line: 580, column: 10, scope: !5796)
!5804 = !DILocation(line: 580, column: 13, scope: !5796)
!5805 = !DILocation(line: 584, column: 9, scope: !5747)
!5806 = !DILocation(line: 584, column: 44, scope: !5747)
!5807 = !DILocation(line: 584, column: 6, scope: !5747)
!5808 = !DILocation(line: 585, column: 4, scope: !5747)
!5809 = !DILocation(line: 586, column: 5, scope: !5747)
!5810 = !DILocation(line: 586, column: 9, scope: !5747)
!5811 = !DILocation(line: 587, column: 4, scope: !5747)
!5812 = !DILocation(line: 588, column: 4, scope: !5747)
!5813 = !DILocation(line: 590, column: 5, scope: !5740)
!5814 = !DILocation(line: 558, column: 9, scope: !5728)
!5815 = !DILocation(line: 555, column: 3, scope: !5728)
!5816 = distinct !{!5816, !5737, !5817}
!5817 = !DILocation(line: 590, column: 5, scope: !5723)
!5818 = !DILocation(line: 592, column: 3, scope: !5685)
!5819 = !DILocation(line: 593, column: 1, scope: !5685)
!5820 = distinct !DISubprogram(name: "eliminate_duplicate_pair", scope: !3, file: !3, line: 399, type: !5821, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5821 = !DISubroutineType(types: !5822)
!5822 = !{!985, !134, !2253, !4167, !7, !859, !859}
!5823 = !DILocalVariable(name: "opcode", arg: 1, scope: !5820, file: !3, line: 399, type: !134)
!5824 = !DILocation(line: 399, column: 42, scope: !5820)
!5825 = !DILocalVariable(name: "ops", arg: 2, scope: !5820, file: !3, line: 400, type: !2253)
!5826 = !DILocation(line: 400, column: 36, scope: !5820)
!5827 = !DILocalVariable(name: "all_done", arg: 3, scope: !5820, file: !3, line: 401, type: !4167)
!5828 = !DILocation(line: 401, column: 12, scope: !5820)
!5829 = !DILocalVariable(name: "i", arg: 4, scope: !5820, file: !3, line: 402, type: !7)
!5830 = !DILocation(line: 402, column: 19, scope: !5820)
!5831 = !DILocalVariable(name: "curr", arg: 5, scope: !5820, file: !3, line: 403, type: !859)
!5832 = !DILocation(line: 403, column: 22, scope: !5820)
!5833 = !DILocalVariable(name: "last", arg: 6, scope: !5820, file: !3, line: 404, type: !859)
!5834 = !DILocation(line: 404, column: 22, scope: !5820)
!5835 = !DILocation(line: 412, column: 7, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 412, column: 7)
!5837 = !DILocation(line: 412, column: 12, scope: !5836)
!5838 = !DILocation(line: 412, column: 15, scope: !5836)
!5839 = !DILocation(line: 412, column: 21, scope: !5836)
!5840 = !DILocation(line: 412, column: 27, scope: !5836)
!5841 = !DILocation(line: 412, column: 33, scope: !5836)
!5842 = !DILocation(line: 412, column: 24, scope: !5836)
!5843 = !DILocation(line: 412, column: 7, scope: !5820)
!5844 = !DILocation(line: 414, column: 15, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 413, column: 5)
!5846 = !DILocation(line: 414, column: 7, scope: !5845)
!5847 = !DILocation(line: 420, column: 8, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 420, column: 8)
!5849 = distinct !DILexicalBlock(scope: !5845, file: !3, line: 415, column: 2)
!5850 = !DILocation(line: 420, column: 18, scope: !5848)
!5851 = !DILocation(line: 420, column: 22, scope: !5848)
!5852 = !DILocation(line: 420, column: 33, scope: !5848)
!5853 = !DILocation(line: 420, column: 8, scope: !5849)
!5854 = !DILocation(line: 422, column: 17, scope: !5855)
!5855 = distinct !DILexicalBlock(scope: !5848, file: !3, line: 421, column: 6)
!5856 = !DILocation(line: 422, column: 8, scope: !5855)
!5857 = !DILocation(line: 423, column: 28, scope: !5855)
!5858 = !DILocation(line: 423, column: 39, scope: !5855)
!5859 = !DILocation(line: 423, column: 45, scope: !5855)
!5860 = !DILocation(line: 423, column: 8, scope: !5855)
!5861 = !DILocation(line: 424, column: 17, scope: !5855)
!5862 = !DILocation(line: 424, column: 8, scope: !5855)
!5863 = !DILocation(line: 425, column: 28, scope: !5855)
!5864 = !DILocation(line: 425, column: 39, scope: !5855)
!5865 = !DILocation(line: 425, column: 45, scope: !5855)
!5866 = !DILocation(line: 425, column: 8, scope: !5855)
!5867 = !DILocation(line: 426, column: 17, scope: !5855)
!5868 = !DILocation(line: 426, column: 8, scope: !5855)
!5869 = !DILocation(line: 427, column: 28, scope: !5855)
!5870 = !DILocation(line: 427, column: 39, scope: !5855)
!5871 = !DILocation(line: 427, column: 45, scope: !5855)
!5872 = !DILocation(line: 427, column: 8, scope: !5855)
!5873 = !DILocation(line: 428, column: 6, scope: !5855)
!5874 = !DILocation(line: 430, column: 4, scope: !5849)
!5875 = !DILocation(line: 431, column: 37, scope: !5849)
!5876 = !DILocation(line: 433, column: 4, scope: !5849)
!5877 = !DILocation(line: 436, column: 8, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 436, column: 8)
!5879 = !DILocation(line: 436, column: 18, scope: !5878)
!5880 = !DILocation(line: 436, column: 22, scope: !5878)
!5881 = !DILocation(line: 436, column: 33, scope: !5878)
!5882 = !DILocation(line: 436, column: 8, scope: !5849)
!5883 = !DILocation(line: 438, column: 17, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 437, column: 6)
!5885 = !DILocation(line: 438, column: 8, scope: !5884)
!5886 = !DILocation(line: 439, column: 28, scope: !5884)
!5887 = !DILocation(line: 439, column: 39, scope: !5884)
!5888 = !DILocation(line: 439, column: 45, scope: !5884)
!5889 = !DILocation(line: 439, column: 8, scope: !5884)
!5890 = !DILocation(line: 440, column: 17, scope: !5884)
!5891 = !DILocation(line: 440, column: 8, scope: !5884)
!5892 = !DILocation(line: 441, column: 28, scope: !5884)
!5893 = !DILocation(line: 441, column: 39, scope: !5884)
!5894 = !DILocation(line: 441, column: 45, scope: !5884)
!5895 = !DILocation(line: 441, column: 8, scope: !5884)
!5896 = !DILocation(line: 442, column: 17, scope: !5884)
!5897 = !DILocation(line: 442, column: 8, scope: !5884)
!5898 = !DILocation(line: 443, column: 6, scope: !5884)
!5899 = !DILocation(line: 445, column: 37, scope: !5849)
!5900 = !DILocation(line: 447, column: 8, scope: !5901)
!5901 = distinct !DILexicalBlock(scope: !5849, file: !3, line: 447, column: 8)
!5902 = !DILocation(line: 447, column: 43, scope: !5901)
!5903 = !DILocation(line: 447, column: 8, scope: !5849)
!5904 = !DILocation(line: 449, column: 8, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 448, column: 6)
!5906 = !DILocation(line: 450, column: 9, scope: !5905)
!5907 = !DILocation(line: 450, column: 13, scope: !5905)
!5908 = !DILocation(line: 451, column: 24, scope: !5905)
!5909 = !DILocation(line: 451, column: 29, scope: !5905)
!5910 = !DILocation(line: 451, column: 8, scope: !5905)
!5911 = !DILocation(line: 453, column: 9, scope: !5905)
!5912 = !DILocation(line: 453, column: 18, scope: !5905)
!5913 = !DILocation(line: 454, column: 6, scope: !5905)
!5914 = !DILocation(line: 457, column: 8, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 456, column: 6)
!5916 = !DILocation(line: 458, column: 8, scope: !5915)
!5917 = !DILocation(line: 461, column: 4, scope: !5849)
!5918 = !DILocation(line: 464, column: 4, scope: !5849)
!5919 = !DILocation(line: 466, column: 5, scope: !5845)
!5920 = !DILocation(line: 467, column: 3, scope: !5820)
!5921 = !DILocation(line: 468, column: 1, scope: !5820)
!5922 = distinct !DISubprogram(name: "eliminate_plus_minus_pair", scope: !3, file: !3, line: 477, type: !5686, scopeLine: 481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!5923 = !DILocalVariable(name: "opcode", arg: 1, scope: !5922, file: !3, line: 477, type: !134)
!5924 = !DILocation(line: 477, column: 43, scope: !5922)
!5925 = !DILocalVariable(name: "ops", arg: 2, scope: !5922, file: !3, line: 478, type: !2253)
!5926 = !DILocation(line: 478, column: 37, scope: !5922)
!5927 = !DILocalVariable(name: "currindex", arg: 3, scope: !5922, file: !3, line: 479, type: !7)
!5928 = !DILocation(line: 479, column: 20, scope: !5922)
!5929 = !DILocalVariable(name: "curr", arg: 4, scope: !5922, file: !3, line: 480, type: !859)
!5930 = !DILocation(line: 480, column: 23, scope: !5922)
!5931 = !DILocalVariable(name: "negateop", scope: !5922, file: !3, line: 482, type: !865)
!5932 = !DILocation(line: 482, column: 8, scope: !5922)
!5933 = !DILocalVariable(name: "i", scope: !5922, file: !3, line: 483, type: !7)
!5934 = !DILocation(line: 483, column: 16, scope: !5922)
!5935 = !DILocalVariable(name: "oe", scope: !5922, file: !3, line: 484, type: !859)
!5936 = !DILocation(line: 484, column: 19, scope: !5922)
!5937 = !DILocation(line: 486, column: 7, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 486, column: 7)
!5939 = !DILocation(line: 486, column: 14, scope: !5938)
!5940 = !DILocation(line: 486, column: 27, scope: !5938)
!5941 = !DILocation(line: 486, column: 30, scope: !5938)
!5942 = !DILocation(line: 486, column: 51, scope: !5938)
!5943 = !DILocation(line: 486, column: 7, scope: !5922)
!5944 = !DILocation(line: 487, column: 5, scope: !5938)
!5945 = !DILocation(line: 489, column: 28, scope: !5922)
!5946 = !DILocation(line: 489, column: 34, scope: !5922)
!5947 = !DILocation(line: 489, column: 14, scope: !5922)
!5948 = !DILocation(line: 489, column: 12, scope: !5922)
!5949 = !DILocation(line: 490, column: 7, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 490, column: 7)
!5951 = !DILocation(line: 490, column: 16, scope: !5950)
!5952 = !DILocation(line: 490, column: 7, scope: !5922)
!5953 = !DILocation(line: 491, column: 5, scope: !5950)
!5954 = !DILocation(line: 497, column: 12, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 497, column: 3)
!5956 = !DILocation(line: 497, column: 22, scope: !5955)
!5957 = !DILocation(line: 497, column: 10, scope: !5955)
!5958 = !DILocation(line: 497, column: 8, scope: !5955)
!5959 = !DILocation(line: 498, column: 8, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 497, column: 3)
!5961 = !DILocation(line: 499, column: 8, scope: !5960)
!5962 = !DILocation(line: 499, column: 11, scope: !5960)
!5963 = !DILocation(line: 499, column: 15, scope: !5960)
!5964 = !DILocation(line: 499, column: 23, scope: !5960)
!5965 = !DILocation(line: 499, column: 29, scope: !5960)
!5966 = !DILocation(line: 499, column: 34, scope: !5960)
!5967 = !DILocation(line: 499, column: 20, scope: !5960)
!5968 = !DILocation(line: 0, scope: !5960)
!5969 = !DILocation(line: 497, column: 3, scope: !5955)
!5970 = !DILocation(line: 502, column: 11, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5972, file: !3, line: 502, column: 11)
!5972 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 501, column: 5)
!5973 = !DILocation(line: 502, column: 15, scope: !5971)
!5974 = !DILocation(line: 502, column: 21, scope: !5971)
!5975 = !DILocation(line: 502, column: 18, scope: !5971)
!5976 = !DILocation(line: 502, column: 11, scope: !5972)
!5977 = !DILocation(line: 505, column: 8, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 505, column: 8)
!5979 = distinct !DILexicalBlock(scope: !5971, file: !3, line: 503, column: 2)
!5980 = !DILocation(line: 505, column: 18, scope: !5978)
!5981 = !DILocation(line: 505, column: 22, scope: !5978)
!5982 = !DILocation(line: 505, column: 33, scope: !5978)
!5983 = !DILocation(line: 505, column: 8, scope: !5979)
!5984 = !DILocation(line: 507, column: 17, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 506, column: 6)
!5986 = !DILocation(line: 507, column: 8, scope: !5985)
!5987 = !DILocation(line: 508, column: 28, scope: !5985)
!5988 = !DILocation(line: 508, column: 39, scope: !5985)
!5989 = !DILocation(line: 508, column: 8, scope: !5985)
!5990 = !DILocation(line: 509, column: 17, scope: !5985)
!5991 = !DILocation(line: 509, column: 8, scope: !5985)
!5992 = !DILocation(line: 510, column: 28, scope: !5985)
!5993 = !DILocation(line: 510, column: 39, scope: !5985)
!5994 = !DILocation(line: 510, column: 43, scope: !5985)
!5995 = !DILocation(line: 510, column: 8, scope: !5985)
!5996 = !DILocation(line: 511, column: 17, scope: !5985)
!5997 = !DILocation(line: 511, column: 8, scope: !5985)
!5998 = !DILocation(line: 512, column: 6, scope: !5985)
!5999 = !DILocation(line: 514, column: 4, scope: !5979)
!6000 = !DILocation(line: 515, column: 20, scope: !5979)
!6001 = !DILocation(line: 515, column: 25, scope: !5979)
!6002 = !DILocation(line: 515, column: 4, scope: !5979)
!6003 = !DILocation(line: 517, column: 4, scope: !5979)
!6004 = !DILocation(line: 518, column: 37, scope: !5979)
!6005 = !DILocation(line: 520, column: 4, scope: !5979)
!6006 = !DILocation(line: 522, column: 5, scope: !5972)
!6007 = !DILocation(line: 500, column: 9, scope: !5960)
!6008 = !DILocation(line: 497, column: 3, scope: !5960)
!6009 = distinct !{!6009, !5969, !6010}
!6010 = !DILocation(line: 522, column: 5, scope: !5955)
!6011 = !DILocation(line: 524, column: 3, scope: !5922)
!6012 = !DILocation(line: 525, column: 1, scope: !5922)
!6013 = distinct !DISubprogram(name: "get_unary_op", scope: !3, file: !3, line: 382, type: !6014, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6014 = !DISubroutineType(types: !6015)
!6015 = !{!865, !865, !134}
!6016 = !DILocalVariable(name: "name", arg: 1, scope: !6013, file: !3, line: 382, type: !865)
!6017 = !DILocation(line: 382, column: 20, scope: !6013)
!6018 = !DILocalVariable(name: "opcode", arg: 2, scope: !6013, file: !3, line: 382, type: !134)
!6019 = !DILocation(line: 382, column: 41, scope: !6013)
!6020 = !DILocalVariable(name: "stmt", scope: !6013, file: !3, line: 384, type: !1196)
!6021 = !DILocation(line: 384, column: 10, scope: !6013)
!6022 = !DILocation(line: 384, column: 17, scope: !6013)
!6023 = !DILocation(line: 386, column: 26, scope: !6024)
!6024 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 386, column: 7)
!6025 = !DILocation(line: 386, column: 8, scope: !6024)
!6026 = !DILocation(line: 386, column: 7, scope: !6013)
!6027 = !DILocation(line: 387, column: 5, scope: !6024)
!6028 = !DILocation(line: 389, column: 31, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 389, column: 7)
!6030 = !DILocation(line: 389, column: 7, scope: !6029)
!6031 = !DILocation(line: 389, column: 40, scope: !6029)
!6032 = !DILocation(line: 389, column: 37, scope: !6029)
!6033 = !DILocation(line: 389, column: 7, scope: !6013)
!6034 = !DILocation(line: 390, column: 32, scope: !6029)
!6035 = !DILocation(line: 390, column: 12, scope: !6029)
!6036 = !DILocation(line: 390, column: 5, scope: !6029)
!6037 = !DILocation(line: 391, column: 3, scope: !6013)
!6038 = !DILocation(line: 392, column: 1, scope: !6013)
!6039 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_ordered_remove", scope: !3, file: !3, line: 297, type: !6040, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6040 = !DISubroutineType(types: !6041)
!6041 = !{!859, !3933, !7}
!6042 = !DILocalVariable(name: "vec_", arg: 1, scope: !6039, file: !3, line: 297, type: !3933)
!6043 = !DILocation(line: 297, column: 1, scope: !6039)
!6044 = !DILocalVariable(name: "ix_", arg: 2, scope: !6039, file: !3, line: 297, type: !7)
!6045 = !DILocalVariable(name: "slot_", scope: !6039, file: !3, line: 297, type: !2433)
!6046 = !DILocalVariable(name: "obj_", scope: !6039, file: !3, line: 297, type: !859)
!6047 = distinct !DISubprogram(name: "SET_BIT", scope: !4162, file: !4162, line: 63, type: !6048, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6048 = !DISubroutineType(types: !6049)
!6049 = !{null, !4161, !7}
!6050 = !DILocalVariable(name: "map", arg: 1, scope: !6047, file: !4162, line: 63, type: !4161)
!6051 = !DILocation(line: 63, column: 18, scope: !6047)
!6052 = !DILocalVariable(name: "bitno", arg: 2, scope: !6047, file: !4162, line: 63, type: !7)
!6053 = !DILocation(line: 63, column: 36, scope: !6047)
!6054 = !DILocation(line: 65, column: 7, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6047, file: !4162, line: 65, column: 7)
!6056 = !DILocation(line: 65, column: 12, scope: !6055)
!6057 = !DILocation(line: 65, column: 7, scope: !6047)
!6058 = !DILocalVariable(name: "oldbit", scope: !6059, file: !4162, line: 67, type: !985)
!6059 = distinct !DILexicalBlock(scope: !6055, file: !4162, line: 66, column: 5)
!6060 = !DILocation(line: 67, column: 12, scope: !6059)
!6061 = !DILocation(line: 68, column: 16, scope: !6059)
!6062 = !DILocation(line: 68, column: 14, scope: !6059)
!6063 = !DILocation(line: 69, column: 12, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6059, file: !4162, line: 69, column: 11)
!6065 = !DILocation(line: 69, column: 11, scope: !6059)
!6066 = !DILocation(line: 70, column: 2, scope: !6064)
!6067 = !DILocation(line: 70, column: 7, scope: !6064)
!6068 = !DILocation(line: 70, column: 16, scope: !6064)
!6069 = !DILocation(line: 70, column: 22, scope: !6064)
!6070 = !DILocation(line: 70, column: 41, scope: !6064)
!6071 = !DILocation(line: 71, column: 5, scope: !6059)
!6072 = !DILocation(line: 73, column: 33, scope: !6047)
!6073 = !DILocation(line: 73, column: 40, scope: !6047)
!6074 = !DILocation(line: 73, column: 29, scope: !6047)
!6075 = !DILocation(line: 72, column: 3, scope: !6047)
!6076 = !DILocation(line: 72, column: 8, scope: !6047)
!6077 = !DILocation(line: 72, column: 13, scope: !6047)
!6078 = !DILocation(line: 72, column: 19, scope: !6047)
!6079 = !DILocation(line: 73, column: 5, scope: !6047)
!6080 = !DILocation(line: 74, column: 1, scope: !6047)
!6081 = distinct !DISubprogram(name: "oecount_hash", scope: !3, file: !3, line: 750, type: !1687, scopeLine: 751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6082 = !DILocalVariable(name: "p", arg: 1, scope: !6081, file: !3, line: 750, type: !1690)
!6083 = !DILocation(line: 750, column: 27, scope: !6081)
!6084 = !DILocalVariable(name: "c", scope: !6081, file: !3, line: 752, type: !2272)
!6085 = !DILocation(line: 752, column: 18, scope: !6081)
!6086 = !DILocation(line: 752, column: 22, scope: !6081)
!6087 = !DILocation(line: 753, column: 10, scope: !6081)
!6088 = !DILocation(line: 753, column: 29, scope: !6081)
!6089 = !DILocation(line: 753, column: 32, scope: !6081)
!6090 = !DILocation(line: 753, column: 49, scope: !6081)
!6091 = !DILocation(line: 753, column: 52, scope: !6081)
!6092 = !DILocation(line: 753, column: 36, scope: !6081)
!6093 = !DILocation(line: 753, column: 3, scope: !6081)
!6094 = distinct !DISubprogram(name: "oecount_eq", scope: !3, file: !3, line: 759, type: !1695, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6095 = !DILocalVariable(name: "p1", arg: 1, scope: !6094, file: !3, line: 759, type: !1690)
!6096 = !DILocation(line: 759, column: 25, scope: !6094)
!6097 = !DILocalVariable(name: "p2", arg: 2, scope: !6094, file: !3, line: 759, type: !1690)
!6098 = !DILocation(line: 759, column: 41, scope: !6094)
!6099 = !DILocalVariable(name: "c1", scope: !6094, file: !3, line: 761, type: !2272)
!6100 = !DILocation(line: 761, column: 18, scope: !6094)
!6101 = !DILocation(line: 761, column: 23, scope: !6094)
!6102 = !DILocalVariable(name: "c2", scope: !6094, file: !3, line: 762, type: !2272)
!6103 = !DILocation(line: 762, column: 18, scope: !6094)
!6104 = !DILocation(line: 762, column: 23, scope: !6094)
!6105 = !DILocation(line: 763, column: 11, scope: !6094)
!6106 = !DILocation(line: 763, column: 15, scope: !6094)
!6107 = !DILocation(line: 763, column: 25, scope: !6094)
!6108 = !DILocation(line: 763, column: 29, scope: !6094)
!6109 = !DILocation(line: 763, column: 22, scope: !6094)
!6110 = !DILocation(line: 764, column: 4, scope: !6094)
!6111 = !DILocation(line: 764, column: 7, scope: !6094)
!6112 = !DILocation(line: 764, column: 11, scope: !6094)
!6113 = !DILocation(line: 764, column: 17, scope: !6094)
!6114 = !DILocation(line: 764, column: 21, scope: !6094)
!6115 = !DILocation(line: 764, column: 14, scope: !6094)
!6116 = !DILocation(line: 0, scope: !6094)
!6117 = !DILocation(line: 763, column: 3, scope: !6094)
!6118 = distinct !DISubprogram(name: "sbitmap_iter_init", scope: !4162, file: !4162, line: 117, type: !6119, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6119 = !DISubroutineType(types: !6120)
!6120 = !{null, !6121, !6122, !7}
!6121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4180, size: 64)
!6122 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_sbitmap", file: !4162, line: 46, baseType: !6123)
!6123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6124, size: 64)
!6124 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4164)
!6125 = !DILocalVariable(name: "i", arg: 1, scope: !6118, file: !4162, line: 117, type: !6121)
!6126 = !DILocation(line: 117, column: 38, scope: !6118)
!6127 = !DILocalVariable(name: "bmp", arg: 2, scope: !6118, file: !4162, line: 117, type: !6122)
!6128 = !DILocation(line: 117, column: 55, scope: !6118)
!6129 = !DILocalVariable(name: "min", arg: 3, scope: !6118, file: !4162, line: 117, type: !7)
!6130 = !DILocation(line: 117, column: 73, scope: !6118)
!6131 = !DILocation(line: 119, column: 17, scope: !6118)
!6132 = !DILocation(line: 119, column: 21, scope: !6118)
!6133 = !DILocation(line: 119, column: 3, scope: !6118)
!6134 = !DILocation(line: 119, column: 6, scope: !6118)
!6135 = !DILocation(line: 119, column: 15, scope: !6118)
!6136 = !DILocation(line: 120, column: 16, scope: !6118)
!6137 = !DILocation(line: 120, column: 3, scope: !6118)
!6138 = !DILocation(line: 120, column: 6, scope: !6118)
!6139 = !DILocation(line: 120, column: 14, scope: !6118)
!6140 = !DILocation(line: 121, column: 13, scope: !6118)
!6141 = !DILocation(line: 121, column: 18, scope: !6118)
!6142 = !DILocation(line: 121, column: 3, scope: !6118)
!6143 = !DILocation(line: 121, column: 6, scope: !6118)
!6144 = !DILocation(line: 121, column: 11, scope: !6118)
!6145 = !DILocation(line: 122, column: 12, scope: !6118)
!6146 = !DILocation(line: 122, column: 17, scope: !6118)
!6147 = !DILocation(line: 122, column: 3, scope: !6118)
!6148 = !DILocation(line: 122, column: 6, scope: !6118)
!6149 = !DILocation(line: 122, column: 10, scope: !6118)
!6150 = !DILocation(line: 124, column: 7, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6118, file: !4162, line: 124, column: 7)
!6152 = !DILocation(line: 124, column: 10, scope: !6151)
!6153 = !DILocation(line: 124, column: 22, scope: !6151)
!6154 = !DILocation(line: 124, column: 25, scope: !6151)
!6155 = !DILocation(line: 124, column: 19, scope: !6151)
!6156 = !DILocation(line: 124, column: 7, scope: !6118)
!6157 = !DILocation(line: 125, column: 5, scope: !6151)
!6158 = !DILocation(line: 125, column: 8, scope: !6151)
!6159 = !DILocation(line: 125, column: 13, scope: !6151)
!6160 = !DILocation(line: 127, column: 16, scope: !6151)
!6161 = !DILocation(line: 127, column: 19, scope: !6151)
!6162 = !DILocation(line: 127, column: 23, scope: !6151)
!6163 = !DILocation(line: 127, column: 26, scope: !6151)
!6164 = !DILocation(line: 128, column: 13, scope: !6151)
!6165 = !DILocation(line: 128, column: 16, scope: !6151)
!6166 = !DILocation(line: 128, column: 24, scope: !6151)
!6167 = !DILocation(line: 128, column: 9, scope: !6151)
!6168 = !DILocation(line: 127, column: 5, scope: !6151)
!6169 = !DILocation(line: 127, column: 8, scope: !6151)
!6170 = !DILocation(line: 127, column: 13, scope: !6151)
!6171 = !DILocation(line: 129, column: 1, scope: !6118)
!6172 = distinct !DISubprogram(name: "sbitmap_iter_cond", scope: !4162, file: !4162, line: 136, type: !6173, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6173 = !DISubroutineType(types: !6174)
!6174 = !{!985, !6121, !6175}
!6175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!6176 = !DILocalVariable(name: "i", arg: 1, scope: !6172, file: !4162, line: 136, type: !6121)
!6177 = !DILocation(line: 136, column: 38, scope: !6172)
!6178 = !DILocalVariable(name: "n", arg: 2, scope: !6172, file: !4162, line: 136, type: !6175)
!6179 = !DILocation(line: 136, column: 55, scope: !6172)
!6180 = !DILocation(line: 139, column: 3, scope: !6172)
!6181 = !DILocation(line: 139, column: 10, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6183, file: !4162, line: 139, column: 3)
!6183 = distinct !DILexicalBlock(scope: !6172, file: !4162, line: 139, column: 3)
!6184 = !DILocation(line: 139, column: 13, scope: !6182)
!6185 = !DILocation(line: 139, column: 18, scope: !6182)
!6186 = !DILocation(line: 139, column: 3, scope: !6183)
!6187 = !DILocation(line: 141, column: 7, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6182, file: !4162, line: 140, column: 5)
!6189 = !DILocation(line: 141, column: 10, scope: !6188)
!6190 = !DILocation(line: 141, column: 18, scope: !6188)
!6191 = !DILocation(line: 144, column: 11, scope: !6192)
!6192 = distinct !DILexicalBlock(scope: !6188, file: !4162, line: 144, column: 11)
!6193 = !DILocation(line: 144, column: 14, scope: !6192)
!6194 = !DILocation(line: 144, column: 26, scope: !6192)
!6195 = !DILocation(line: 144, column: 29, scope: !6192)
!6196 = !DILocation(line: 144, column: 23, scope: !6192)
!6197 = !DILocation(line: 144, column: 11, scope: !6188)
!6198 = !DILocation(line: 145, column: 2, scope: !6192)
!6199 = !DILocation(line: 147, column: 20, scope: !6188)
!6200 = !DILocation(line: 147, column: 23, scope: !6188)
!6201 = !DILocation(line: 147, column: 32, scope: !6188)
!6202 = !DILocation(line: 147, column: 7, scope: !6188)
!6203 = !DILocation(line: 147, column: 10, scope: !6188)
!6204 = !DILocation(line: 147, column: 18, scope: !6188)
!6205 = !DILocation(line: 148, column: 5, scope: !6188)
!6206 = !DILocation(line: 139, column: 34, scope: !6182)
!6207 = !DILocation(line: 139, column: 37, scope: !6182)
!6208 = !DILocation(line: 139, column: 41, scope: !6182)
!6209 = !DILocation(line: 139, column: 44, scope: !6182)
!6210 = !DILocation(line: 139, column: 24, scope: !6182)
!6211 = !DILocation(line: 139, column: 27, scope: !6182)
!6212 = !DILocation(line: 139, column: 32, scope: !6182)
!6213 = !DILocation(line: 139, column: 3, scope: !6182)
!6214 = distinct !{!6214, !6186, !6215}
!6215 = !DILocation(line: 148, column: 5, scope: !6183)
!6216 = !DILocation(line: 151, column: 3, scope: !6172)
!6217 = !DILocation(line: 151, column: 11, scope: !6218)
!6218 = distinct !DILexicalBlock(scope: !6219, file: !4162, line: 151, column: 3)
!6219 = distinct !DILexicalBlock(scope: !6172, file: !4162, line: 151, column: 3)
!6220 = !DILocation(line: 151, column: 14, scope: !6218)
!6221 = !DILocation(line: 151, column: 19, scope: !6218)
!6222 = !DILocation(line: 151, column: 24, scope: !6218)
!6223 = !DILocation(line: 151, column: 3, scope: !6219)
!6224 = !DILocation(line: 152, column: 5, scope: !6218)
!6225 = !DILocation(line: 152, column: 8, scope: !6218)
!6226 = !DILocation(line: 152, column: 15, scope: !6218)
!6227 = !DILocation(line: 151, column: 30, scope: !6218)
!6228 = !DILocation(line: 151, column: 33, scope: !6218)
!6229 = !DILocation(line: 151, column: 38, scope: !6218)
!6230 = !DILocation(line: 151, column: 3, scope: !6218)
!6231 = distinct !{!6231, !6223, !6232}
!6232 = !DILocation(line: 152, column: 15, scope: !6219)
!6233 = !DILocation(line: 154, column: 8, scope: !6172)
!6234 = !DILocation(line: 154, column: 11, scope: !6172)
!6235 = !DILocation(line: 154, column: 4, scope: !6172)
!6236 = !DILocation(line: 154, column: 6, scope: !6172)
!6237 = !DILocation(line: 156, column: 3, scope: !6172)
!6238 = !DILocation(line: 157, column: 1, scope: !6172)
!6239 = distinct !DISubprogram(name: "VEC_oecount_heap_safe_push", scope: !3, file: !3, line: 742, type: !6240, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6240 = !DISubroutineType(types: !6241)
!6241 = !{!4377, !6242, !2272}
!6242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2254, size: 64)
!6243 = !DILocalVariable(name: "vec_", arg: 1, scope: !6239, file: !3, line: 742, type: !6242)
!6244 = !DILocation(line: 742, column: 1, scope: !6239)
!6245 = !DILocalVariable(name: "obj_", arg: 2, scope: !6239, file: !3, line: 742, type: !2272)
!6246 = distinct !DISubprogram(name: "VEC_oecount_base_length", scope: !3, file: !3, line: 741, type: !6247, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6247 = !DISubroutineType(types: !6248)
!6248 = !{!7, !6249}
!6249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6250, size: 64)
!6250 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2259)
!6251 = !DILocalVariable(name: "vec_", arg: 1, scope: !6246, file: !3, line: 741, type: !6249)
!6252 = !DILocation(line: 741, column: 1, scope: !6246)
!6253 = distinct !DISubprogram(name: "VEC_oecount_base_pop", scope: !3, file: !3, line: 741, type: !6254, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6254 = !DISubroutineType(types: !6255)
!6255 = !{null, !6256}
!6256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2259, size: 64)
!6257 = !DILocalVariable(name: "vec_", arg: 1, scope: !6253, file: !3, line: 741, type: !6256)
!6258 = !DILocation(line: 741, column: 1, scope: !6253)
!6259 = distinct !DISubprogram(name: "VEC_oecount_base_index", scope: !3, file: !3, line: 741, type: !6260, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6260 = !DISubroutineType(types: !6261)
!6261 = !{!4377, !6256, !7}
!6262 = !DILocalVariable(name: "vec_", arg: 1, scope: !6259, file: !3, line: 741, type: !6256)
!6263 = !DILocation(line: 741, column: 1, scope: !6259)
!6264 = !DILocalVariable(name: "ix_", arg: 2, scope: !6259, file: !3, line: 741, type: !7)
!6265 = !DILocation(line: 0, scope: !6259)
!6266 = distinct !DISubprogram(name: "sbitmap_iter_next", scope: !4162, file: !4162, line: 162, type: !6267, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6267 = !DISubroutineType(types: !6268)
!6268 = !{null, !6121}
!6269 = !DILocalVariable(name: "i", arg: 1, scope: !6266, file: !4162, line: 162, type: !6121)
!6270 = !DILocation(line: 162, column: 38, scope: !6266)
!6271 = !DILocation(line: 164, column: 3, scope: !6266)
!6272 = !DILocation(line: 164, column: 6, scope: !6266)
!6273 = !DILocation(line: 164, column: 11, scope: !6266)
!6274 = !DILocation(line: 165, column: 3, scope: !6266)
!6275 = !DILocation(line: 165, column: 6, scope: !6266)
!6276 = !DILocation(line: 165, column: 13, scope: !6266)
!6277 = !DILocation(line: 166, column: 1, scope: !6266)
!6278 = distinct !DISubprogram(name: "VEC_oecount_base_address", scope: !3, file: !3, line: 741, type: !6279, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6279 = !DISubroutineType(types: !6280)
!6280 = !{!4377, !6256}
!6281 = !DILocalVariable(name: "vec_", arg: 1, scope: !6278, file: !3, line: 741, type: !6256)
!6282 = !DILocation(line: 741, column: 1, scope: !6278)
!6283 = distinct !DISubprogram(name: "oecount_cmp", scope: !3, file: !3, line: 770, type: !1695, scopeLine: 771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6284 = !DILocalVariable(name: "p1", arg: 1, scope: !6283, file: !3, line: 770, type: !1690)
!6285 = !DILocation(line: 770, column: 26, scope: !6283)
!6286 = !DILocalVariable(name: "p2", arg: 2, scope: !6283, file: !3, line: 770, type: !1690)
!6287 = !DILocation(line: 770, column: 42, scope: !6283)
!6288 = !DILocalVariable(name: "c1", scope: !6283, file: !3, line: 772, type: !2272)
!6289 = !DILocation(line: 772, column: 18, scope: !6283)
!6290 = !DILocation(line: 772, column: 40, scope: !6283)
!6291 = !DILocation(line: 772, column: 23, scope: !6283)
!6292 = !DILocalVariable(name: "c2", scope: !6283, file: !3, line: 773, type: !2272)
!6293 = !DILocation(line: 773, column: 18, scope: !6283)
!6294 = !DILocation(line: 773, column: 40, scope: !6283)
!6295 = !DILocation(line: 773, column: 23, scope: !6283)
!6296 = !DILocation(line: 774, column: 10, scope: !6283)
!6297 = !DILocation(line: 774, column: 14, scope: !6283)
!6298 = !DILocation(line: 774, column: 20, scope: !6283)
!6299 = !DILocation(line: 774, column: 24, scope: !6283)
!6300 = !DILocation(line: 774, column: 18, scope: !6283)
!6301 = !DILocation(line: 774, column: 3, scope: !6283)
!6302 = distinct !DISubprogram(name: "VEC_oecount_base_iterate", scope: !3, file: !3, line: 741, type: !6303, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6303 = !DISubroutineType(types: !6304)
!6304 = !{!962, !6256, !7, !6305}
!6305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4377, size: 64)
!6306 = !DILocalVariable(name: "vec_", arg: 1, scope: !6302, file: !3, line: 741, type: !6256)
!6307 = !DILocation(line: 741, column: 1, scope: !6302)
!6308 = !DILocalVariable(name: "ix_", arg: 2, scope: !6302, file: !3, line: 741, type: !7)
!6309 = !DILocalVariable(name: "ptr", arg: 3, scope: !6302, file: !3, line: 741, type: !6305)
!6310 = !DILocation(line: 741, column: 1, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 741, column: 1)
!6312 = !DILocation(line: 741, column: 1, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 741, column: 1)
!6314 = !DILocation(line: 741, column: 1, scope: !6315)
!6315 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 741, column: 1)
!6316 = distinct !DISubprogram(name: "VEC_oecount_base_last", scope: !3, file: !3, line: 741, type: !6279, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6317 = !DILocalVariable(name: "vec_", arg: 1, scope: !6316, file: !3, line: 741, type: !6256)
!6318 = !DILocation(line: 741, column: 1, scope: !6316)
!6319 = !DILocation(line: 0, scope: !6316)
!6320 = distinct !DISubprogram(name: "zero_one_operation", scope: !3, file: !3, line: 782, type: !6321, scopeLine: 783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6321 = !DISubroutineType(types: !6322)
!6322 = !{null, !1230, !134, !865}
!6323 = !DILocalVariable(name: "def", arg: 1, scope: !6320, file: !3, line: 782, type: !1230)
!6324 = !DILocation(line: 782, column: 27, scope: !6320)
!6325 = !DILocalVariable(name: "opcode", arg: 2, scope: !6320, file: !3, line: 782, type: !134)
!6326 = !DILocation(line: 782, column: 47, scope: !6320)
!6327 = !DILocalVariable(name: "op", arg: 3, scope: !6320, file: !3, line: 782, type: !865)
!6328 = !DILocation(line: 782, column: 60, scope: !6320)
!6329 = !DILocalVariable(name: "stmt", scope: !6320, file: !3, line: 784, type: !1196)
!6330 = !DILocation(line: 784, column: 10, scope: !6320)
!6331 = !DILocation(line: 784, column: 17, scope: !6320)
!6332 = !DILocation(line: 786, column: 3, scope: !6320)
!6333 = !DILocalVariable(name: "name", scope: !6334, file: !3, line: 788, type: !865)
!6334 = distinct !DILexicalBlock(scope: !6320, file: !3, line: 787, column: 5)
!6335 = !DILocation(line: 788, column: 12, scope: !6334)
!6336 = !DILocation(line: 788, column: 39, scope: !6334)
!6337 = !DILocation(line: 788, column: 19, scope: !6334)
!6338 = !DILocation(line: 793, column: 35, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 793, column: 11)
!6340 = !DILocation(line: 793, column: 11, scope: !6339)
!6341 = !DILocation(line: 793, column: 44, scope: !6339)
!6342 = !DILocation(line: 793, column: 41, scope: !6339)
!6343 = !DILocation(line: 794, column: 4, scope: !6339)
!6344 = !DILocation(line: 794, column: 8, scope: !6339)
!6345 = !DILocation(line: 794, column: 16, scope: !6339)
!6346 = !DILocation(line: 794, column: 13, scope: !6339)
!6347 = !DILocation(line: 795, column: 8, scope: !6339)
!6348 = !DILocation(line: 795, column: 31, scope: !6339)
!6349 = !DILocation(line: 795, column: 11, scope: !6339)
!6350 = !DILocation(line: 795, column: 40, scope: !6339)
!6351 = !DILocation(line: 795, column: 37, scope: !6339)
!6352 = !DILocation(line: 793, column: 11, scope: !6334)
!6353 = !DILocalVariable(name: "use_stmt", scope: !6354, file: !3, line: 797, type: !1196)
!6354 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 796, column: 2)
!6355 = !DILocation(line: 797, column: 11, scope: !6354)
!6356 = !DILocalVariable(name: "use", scope: !6354, file: !3, line: 798, type: !2231)
!6357 = !DILocation(line: 798, column: 18, scope: !6354)
!6358 = !DILocalVariable(name: "gsi", scope: !6354, file: !3, line: 799, type: !2622)
!6359 = !DILocation(line: 799, column: 25, scope: !6354)
!6360 = !DILocation(line: 800, column: 8, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6354, file: !3, line: 800, column: 8)
!6362 = !DILocation(line: 800, column: 16, scope: !6361)
!6363 = !DILocation(line: 800, column: 13, scope: !6361)
!6364 = !DILocation(line: 800, column: 8, scope: !6354)
!6365 = !DILocation(line: 801, column: 33, scope: !6361)
!6366 = !DILocation(line: 801, column: 13, scope: !6361)
!6367 = !DILocation(line: 801, column: 11, scope: !6361)
!6368 = !DILocation(line: 801, column: 6, scope: !6361)
!6369 = !DILocation(line: 802, column: 4, scope: !6354)
!6370 = !DILocation(line: 803, column: 39, scope: !6354)
!6371 = !DILocation(line: 803, column: 20, scope: !6354)
!6372 = !DILocation(line: 803, column: 4, scope: !6354)
!6373 = !DILocation(line: 804, column: 27, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6354, file: !3, line: 804, column: 8)
!6375 = !DILocation(line: 804, column: 8, scope: !6374)
!6376 = !DILocation(line: 804, column: 37, scope: !6374)
!6377 = !DILocation(line: 804, column: 36, scope: !6374)
!6378 = !DILocation(line: 804, column: 33, scope: !6374)
!6379 = !DILocation(line: 804, column: 8, scope: !6354)
!6380 = !DILocation(line: 805, column: 13, scope: !6374)
!6381 = !DILocation(line: 805, column: 7, scope: !6374)
!6382 = !DILocation(line: 805, column: 11, scope: !6374)
!6383 = !DILocation(line: 805, column: 6, scope: !6374)
!6384 = !DILocation(line: 806, column: 4, scope: !6354)
!6385 = !DILocation(line: 807, column: 8, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6354, file: !3, line: 807, column: 8)
!6387 = !DILocation(line: 807, column: 25, scope: !6386)
!6388 = !DILocation(line: 807, column: 8, scope: !6354)
!6389 = !DILocation(line: 808, column: 19, scope: !6386)
!6390 = !DILocation(line: 808, column: 6, scope: !6386)
!6391 = !DILocation(line: 809, column: 24, scope: !6354)
!6392 = !DILocation(line: 809, column: 10, scope: !6354)
!6393 = !DILocation(line: 810, column: 4, scope: !6354)
!6394 = !DILocation(line: 811, column: 18, scope: !6354)
!6395 = !DILocation(line: 811, column: 4, scope: !6354)
!6396 = !DILocation(line: 812, column: 4, scope: !6354)
!6397 = !DILocation(line: 816, column: 7, scope: !6334)
!6398 = !DILocation(line: 818, column: 14, scope: !6334)
!6399 = !DILocation(line: 818, column: 12, scope: !6334)
!6400 = !DILocation(line: 819, column: 5, scope: !6334)
!6401 = distinct !{!6401, !6332, !6402}
!6402 = !DILocation(line: 820, column: 11, scope: !6320)
!6403 = !DILocation(line: 821, column: 1, scope: !6320)
!6404 = distinct !DISubprogram(name: "build_and_add_sum", scope: !3, file: !3, line: 828, type: !6405, scopeLine: 829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6405 = !DISubroutineType(types: !6406)
!6406 = !{!1196, !865, !865, !865, !134}
!6407 = !DILocalVariable(name: "tmpvar", arg: 1, scope: !6404, file: !3, line: 828, type: !865)
!6408 = !DILocation(line: 828, column: 25, scope: !6404)
!6409 = !DILocalVariable(name: "op1", arg: 2, scope: !6404, file: !3, line: 828, type: !865)
!6410 = !DILocation(line: 828, column: 38, scope: !6404)
!6411 = !DILocalVariable(name: "op2", arg: 3, scope: !6404, file: !3, line: 828, type: !865)
!6412 = !DILocation(line: 828, column: 48, scope: !6404)
!6413 = !DILocalVariable(name: "opcode", arg: 4, scope: !6404, file: !3, line: 828, type: !134)
!6414 = !DILocation(line: 828, column: 68, scope: !6404)
!6415 = !DILocalVariable(name: "op1def", scope: !6404, file: !3, line: 830, type: !1196)
!6416 = !DILocation(line: 830, column: 10, scope: !6404)
!6417 = !DILocalVariable(name: "op2def", scope: !6404, file: !3, line: 830, type: !1196)
!6418 = !DILocation(line: 830, column: 25, scope: !6404)
!6419 = !DILocalVariable(name: "gsi", scope: !6404, file: !3, line: 831, type: !2622)
!6420 = !DILocation(line: 831, column: 24, scope: !6404)
!6421 = !DILocalVariable(name: "op", scope: !6404, file: !3, line: 832, type: !865)
!6422 = !DILocation(line: 832, column: 8, scope: !6404)
!6423 = !DILocalVariable(name: "sum", scope: !6404, file: !3, line: 833, type: !1196)
!6424 = !DILocation(line: 833, column: 10, scope: !6404)
!6425 = !DILocation(line: 836, column: 9, scope: !6404)
!6426 = !DILocation(line: 836, column: 7, scope: !6404)
!6427 = !DILocation(line: 837, column: 23, scope: !6404)
!6428 = !DILocation(line: 837, column: 31, scope: !6404)
!6429 = !DILocation(line: 837, column: 8, scope: !6404)
!6430 = !DILocation(line: 837, column: 6, scope: !6404)
!6431 = !DILocation(line: 838, column: 26, scope: !6404)
!6432 = !DILocation(line: 838, column: 31, scope: !6404)
!6433 = !DILocation(line: 838, column: 3, scope: !6404)
!6434 = !DILocation(line: 841, column: 7, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 841, column: 7)
!6436 = !DILocation(line: 841, column: 23, scope: !6435)
!6437 = !DILocation(line: 841, column: 7, scope: !6404)
!6438 = !DILocation(line: 842, column: 14, scope: !6435)
!6439 = !DILocation(line: 842, column: 12, scope: !6435)
!6440 = !DILocation(line: 842, column: 5, scope: !6435)
!6441 = !DILocation(line: 843, column: 7, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 843, column: 7)
!6443 = !DILocation(line: 843, column: 23, scope: !6442)
!6444 = !DILocation(line: 843, column: 7, scope: !6404)
!6445 = !DILocation(line: 844, column: 14, scope: !6442)
!6446 = !DILocation(line: 844, column: 12, scope: !6442)
!6447 = !DILocation(line: 844, column: 5, scope: !6442)
!6448 = !DILocation(line: 845, column: 9, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 845, column: 7)
!6450 = !DILocation(line: 845, column: 16, scope: !6449)
!6451 = !DILocation(line: 845, column: 33, scope: !6449)
!6452 = !DILocation(line: 845, column: 19, scope: !6449)
!6453 = !DILocation(line: 846, column: 7, scope: !6449)
!6454 = !DILocation(line: 846, column: 12, scope: !6449)
!6455 = !DILocation(line: 846, column: 19, scope: !6449)
!6456 = !DILocation(line: 846, column: 36, scope: !6449)
!6457 = !DILocation(line: 846, column: 22, scope: !6449)
!6458 = !DILocation(line: 845, column: 7, scope: !6404)
!6459 = !DILocation(line: 848, column: 44, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 847, column: 5)
!6461 = !DILocation(line: 848, column: 31, scope: !6460)
!6462 = !DILocation(line: 848, column: 13, scope: !6460)
!6463 = !DILocation(line: 849, column: 32, scope: !6460)
!6464 = !DILocation(line: 849, column: 7, scope: !6460)
!6465 = !DILocation(line: 850, column: 5, scope: !6460)
!6466 = !DILocation(line: 851, column: 14, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 851, column: 12)
!6468 = !DILocation(line: 851, column: 21, scope: !6467)
!6469 = !DILocation(line: 851, column: 38, scope: !6467)
!6470 = !DILocation(line: 851, column: 24, scope: !6467)
!6471 = !DILocation(line: 852, column: 5, scope: !6467)
!6472 = !DILocation(line: 852, column: 9, scope: !6467)
!6473 = !DILocation(line: 852, column: 16, scope: !6467)
!6474 = !DILocation(line: 852, column: 34, scope: !6467)
!6475 = !DILocation(line: 852, column: 20, scope: !6467)
!6476 = !DILocation(line: 853, column: 9, scope: !6467)
!6477 = !DILocation(line: 853, column: 35, scope: !6467)
!6478 = !DILocation(line: 853, column: 43, scope: !6467)
!6479 = !DILocation(line: 853, column: 12, scope: !6467)
!6480 = !DILocation(line: 851, column: 12, scope: !6449)
!6481 = !DILocation(line: 855, column: 24, scope: !6482)
!6482 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 855, column: 11)
!6483 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 854, column: 5)
!6484 = !DILocation(line: 855, column: 11, scope: !6482)
!6485 = !DILocation(line: 855, column: 32, scope: !6482)
!6486 = !DILocation(line: 855, column: 11, scope: !6483)
!6487 = !DILocation(line: 857, column: 39, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 856, column: 2)
!6489 = !DILocation(line: 857, column: 28, scope: !6488)
!6490 = !DILocation(line: 857, column: 10, scope: !6488)
!6491 = !DILocation(line: 858, column: 29, scope: !6488)
!6492 = !DILocation(line: 858, column: 4, scope: !6488)
!6493 = !DILocation(line: 859, column: 2, scope: !6488)
!6494 = !DILocation(line: 862, column: 25, scope: !6495)
!6495 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 862, column: 8)
!6496 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 861, column: 2)
!6497 = !DILocation(line: 862, column: 9, scope: !6495)
!6498 = !DILocation(line: 862, column: 8, scope: !6496)
!6499 = !DILocation(line: 864, column: 28, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6495, file: !3, line: 863, column: 6)
!6501 = !DILocation(line: 864, column: 14, scope: !6500)
!6502 = !DILocation(line: 865, column: 32, scope: !6500)
!6503 = !DILocation(line: 865, column: 8, scope: !6500)
!6504 = !DILocation(line: 866, column: 6, scope: !6500)
!6505 = !DILocalVariable(name: "e", scope: !6506, file: !3, line: 869, type: !1176)
!6506 = distinct !DILexicalBlock(scope: !6495, file: !3, line: 868, column: 6)
!6507 = !DILocation(line: 869, column: 13, scope: !6506)
!6508 = !DILocalVariable(name: "ei", scope: !6506, file: !3, line: 870, type: !6509)
!6509 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !6510)
!6510 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !6511)
!6511 = !{!6512, !6513}
!6512 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !6510, file: !343, line: 680, baseType: !7, size: 32)
!6513 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !6510, file: !343, line: 681, baseType: !6514, size: 64, offset: 64)
!6514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1164, size: 64)
!6515 = !DILocation(line: 870, column: 22, scope: !6506)
!6516 = !DILocation(line: 872, column: 8, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 872, column: 8)
!6518 = !DILocation(line: 872, column: 8, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6517, file: !3, line: 872, column: 8)
!6520 = !DILocation(line: 873, column: 7, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6519, file: !3, line: 873, column: 7)
!6522 = !DILocation(line: 873, column: 10, scope: !6521)
!6523 = !DILocation(line: 873, column: 16, scope: !6521)
!6524 = !DILocation(line: 873, column: 7, scope: !6519)
!6525 = !DILocation(line: 874, column: 35, scope: !6521)
!6526 = !DILocation(line: 874, column: 38, scope: !6521)
!6527 = !DILocation(line: 874, column: 5, scope: !6521)
!6528 = !DILocation(line: 873, column: 18, scope: !6521)
!6529 = distinct !{!6529, !6516, !6530}
!6530 = !DILocation(line: 874, column: 41, scope: !6517)
!6531 = !DILocation(line: 877, column: 5, scope: !6483)
!6532 = !DILocation(line: 880, column: 24, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 880, column: 11)
!6534 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 879, column: 5)
!6535 = !DILocation(line: 880, column: 11, scope: !6533)
!6536 = !DILocation(line: 880, column: 32, scope: !6533)
!6537 = !DILocation(line: 880, column: 11, scope: !6534)
!6538 = !DILocation(line: 882, column: 39, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 881, column: 2)
!6540 = !DILocation(line: 882, column: 28, scope: !6539)
!6541 = !DILocation(line: 882, column: 10, scope: !6539)
!6542 = !DILocation(line: 883, column: 29, scope: !6539)
!6543 = !DILocation(line: 883, column: 4, scope: !6539)
!6544 = !DILocation(line: 884, column: 2, scope: !6539)
!6545 = !DILocation(line: 887, column: 25, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6547, file: !3, line: 887, column: 8)
!6547 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 886, column: 2)
!6548 = !DILocation(line: 887, column: 9, scope: !6546)
!6549 = !DILocation(line: 887, column: 8, scope: !6547)
!6550 = !DILocation(line: 889, column: 28, scope: !6551)
!6551 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 888, column: 6)
!6552 = !DILocation(line: 889, column: 14, scope: !6551)
!6553 = !DILocation(line: 890, column: 32, scope: !6551)
!6554 = !DILocation(line: 890, column: 8, scope: !6551)
!6555 = !DILocation(line: 891, column: 6, scope: !6551)
!6556 = !DILocalVariable(name: "e", scope: !6557, file: !3, line: 894, type: !1176)
!6557 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 893, column: 6)
!6558 = !DILocation(line: 894, column: 13, scope: !6557)
!6559 = !DILocalVariable(name: "ei", scope: !6557, file: !3, line: 895, type: !6509)
!6560 = !DILocation(line: 895, column: 22, scope: !6557)
!6561 = !DILocation(line: 897, column: 8, scope: !6562)
!6562 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 897, column: 8)
!6563 = !DILocation(line: 897, column: 8, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !6562, file: !3, line: 897, column: 8)
!6565 = !DILocation(line: 898, column: 7, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6564, file: !3, line: 898, column: 7)
!6567 = !DILocation(line: 898, column: 10, scope: !6566)
!6568 = !DILocation(line: 898, column: 16, scope: !6566)
!6569 = !DILocation(line: 898, column: 7, scope: !6564)
!6570 = !DILocation(line: 899, column: 35, scope: !6566)
!6571 = !DILocation(line: 899, column: 38, scope: !6566)
!6572 = !DILocation(line: 899, column: 5, scope: !6566)
!6573 = !DILocation(line: 898, column: 18, scope: !6566)
!6574 = distinct !{!6574, !6561, !6575}
!6575 = !DILocation(line: 899, column: 41, scope: !6562)
!6576 = !DILocation(line: 903, column: 16, scope: !6404)
!6577 = !DILocation(line: 903, column: 3, scope: !6404)
!6578 = !DILocation(line: 905, column: 10, scope: !6404)
!6579 = !DILocation(line: 905, column: 3, scope: !6404)
!6580 = distinct !DISubprogram(name: "VEC_oecount_heap_free", scope: !3, file: !3, line: 742, type: !6581, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6581 = !DISubroutineType(types: !6582)
!6582 = !{null, !6242}
!6583 = !DILocalVariable(name: "vec_", arg: 1, scope: !6580, file: !3, line: 742, type: !6242)
!6584 = !DILocation(line: 742, column: 1, scope: !6580)
!6585 = !DILocation(line: 742, column: 1, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 742, column: 1)
!6587 = distinct !DISubprogram(name: "VEC_oecount_heap_reserve", scope: !3, file: !3, line: 742, type: !6588, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6588 = !DISubroutineType(types: !6589)
!6589 = !{!962, !6242, !962}
!6590 = !DILocalVariable(name: "vec_", arg: 1, scope: !6587, file: !3, line: 742, type: !6242)
!6591 = !DILocation(line: 742, column: 1, scope: !6587)
!6592 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6587, file: !3, line: 742, type: !962)
!6593 = !DILocalVariable(name: "extend", scope: !6587, file: !3, line: 742, type: !962)
!6594 = !DILocation(line: 742, column: 1, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 742, column: 1)
!6596 = distinct !DISubprogram(name: "VEC_oecount_base_quick_push", scope: !3, file: !3, line: 741, type: !6597, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6597 = !DISubroutineType(types: !6598)
!6598 = !{!4377, !6256, !2272}
!6599 = !DILocalVariable(name: "vec_", arg: 1, scope: !6596, file: !3, line: 741, type: !6256)
!6600 = !DILocation(line: 741, column: 1, scope: !6596)
!6601 = !DILocalVariable(name: "obj_", arg: 2, scope: !6596, file: !3, line: 741, type: !2272)
!6602 = !DILocalVariable(name: "slot_", scope: !6596, file: !3, line: 741, type: !4377)
!6603 = !DILocation(line: 741, column: 1, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 741, column: 1)
!6605 = distinct !DISubprogram(name: "VEC_oecount_base_space", scope: !3, file: !3, line: 741, type: !6606, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6606 = !DISubroutineType(types: !6607)
!6607 = !{!962, !6256, !962}
!6608 = !DILocalVariable(name: "vec_", arg: 1, scope: !6605, file: !3, line: 741, type: !6256)
!6609 = !DILocation(line: 741, column: 1, scope: !6605)
!6610 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6605, file: !3, line: 741, type: !962)
!6611 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3365, file: !3365, line: 233, type: !6612, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6612 = !DISubroutineType(types: !6613)
!6613 = !{null, !2231, !865}
!6614 = !DILocalVariable(name: "use", arg: 1, scope: !6611, file: !3365, line: 233, type: !2231)
!6615 = !DILocation(line: 233, column: 37, scope: !6611)
!6616 = !DILocalVariable(name: "val", arg: 2, scope: !6611, file: !3365, line: 233, type: !865)
!6617 = !DILocation(line: 233, column: 47, scope: !6611)
!6618 = !DILocation(line: 235, column: 19, scope: !6611)
!6619 = !DILocation(line: 235, column: 3, scope: !6611)
!6620 = !DILocation(line: 236, column: 17, scope: !6611)
!6621 = !DILocation(line: 236, column: 5, scope: !6611)
!6622 = !DILocation(line: 236, column: 10, scope: !6611)
!6623 = !DILocation(line: 236, column: 15, scope: !6611)
!6624 = !DILocation(line: 237, column: 17, scope: !6611)
!6625 = !DILocation(line: 237, column: 22, scope: !6611)
!6626 = !DILocation(line: 237, column: 3, scope: !6611)
!6627 = !DILocation(line: 238, column: 1, scope: !6611)
!6628 = distinct !DISubprogram(name: "delink_imm_use", scope: !3365, file: !3365, line: 188, type: !6629, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6629 = !DISubroutineType(types: !6630)
!6630 = !{null, !2232}
!6631 = !DILocalVariable(name: "linknode", arg: 1, scope: !6628, file: !3365, line: 188, type: !2232)
!6632 = !DILocation(line: 188, column: 36, scope: !6628)
!6633 = !DILocation(line: 191, column: 7, scope: !6634)
!6634 = distinct !DILexicalBlock(scope: !6628, file: !3365, line: 191, column: 7)
!6635 = !DILocation(line: 191, column: 17, scope: !6634)
!6636 = !DILocation(line: 191, column: 22, scope: !6634)
!6637 = !DILocation(line: 191, column: 7, scope: !6628)
!6638 = !DILocation(line: 192, column: 5, scope: !6634)
!6639 = !DILocation(line: 194, column: 26, scope: !6628)
!6640 = !DILocation(line: 194, column: 36, scope: !6628)
!6641 = !DILocation(line: 194, column: 3, scope: !6628)
!6642 = !DILocation(line: 194, column: 13, scope: !6628)
!6643 = !DILocation(line: 194, column: 19, scope: !6628)
!6644 = !DILocation(line: 194, column: 24, scope: !6628)
!6645 = !DILocation(line: 195, column: 26, scope: !6628)
!6646 = !DILocation(line: 195, column: 36, scope: !6628)
!6647 = !DILocation(line: 195, column: 3, scope: !6628)
!6648 = !DILocation(line: 195, column: 13, scope: !6628)
!6649 = !DILocation(line: 195, column: 19, scope: !6628)
!6650 = !DILocation(line: 195, column: 24, scope: !6628)
!6651 = !DILocation(line: 196, column: 3, scope: !6628)
!6652 = !DILocation(line: 196, column: 13, scope: !6628)
!6653 = !DILocation(line: 196, column: 18, scope: !6628)
!6654 = !DILocation(line: 197, column: 3, scope: !6628)
!6655 = !DILocation(line: 197, column: 13, scope: !6628)
!6656 = !DILocation(line: 197, column: 18, scope: !6628)
!6657 = !DILocation(line: 198, column: 1, scope: !6628)
!6658 = distinct !DISubprogram(name: "link_imm_use", scope: !3365, file: !3365, line: 214, type: !6659, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6659 = !DISubroutineType(types: !6660)
!6660 = !{null, !2232, !865}
!6661 = !DILocalVariable(name: "linknode", arg: 1, scope: !6658, file: !3365, line: 214, type: !2232)
!6662 = !DILocation(line: 214, column: 34, scope: !6658)
!6663 = !DILocalVariable(name: "def", arg: 2, scope: !6658, file: !3365, line: 214, type: !865)
!6664 = !DILocation(line: 214, column: 49, scope: !6658)
!6665 = !DILocalVariable(name: "root", scope: !6658, file: !3365, line: 216, type: !2232)
!6666 = !DILocation(line: 216, column: 22, scope: !6658)
!6667 = !DILocation(line: 218, column: 8, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6658, file: !3365, line: 218, column: 7)
!6669 = !DILocation(line: 218, column: 12, scope: !6668)
!6670 = !DILocation(line: 218, column: 15, scope: !6668)
!6671 = !DILocation(line: 218, column: 31, scope: !6668)
!6672 = !DILocation(line: 218, column: 7, scope: !6658)
!6673 = !DILocation(line: 219, column: 5, scope: !6668)
!6674 = !DILocation(line: 219, column: 15, scope: !6668)
!6675 = !DILocation(line: 219, column: 20, scope: !6668)
!6676 = !DILocation(line: 222, column: 16, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6668, file: !3365, line: 221, column: 5)
!6678 = !DILocation(line: 222, column: 12, scope: !6677)
!6679 = !DILocation(line: 227, column: 29, scope: !6677)
!6680 = !DILocation(line: 227, column: 39, scope: !6677)
!6681 = !DILocation(line: 227, column: 7, scope: !6677)
!6682 = !DILocation(line: 229, column: 1, scope: !6658)
!6683 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3365, file: !3365, line: 202, type: !6684, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6684 = !DISubroutineType(types: !6685)
!6685 = !{null, !2232, !2232}
!6686 = !DILocalVariable(name: "linknode", arg: 1, scope: !6683, file: !3365, line: 202, type: !2232)
!6687 = !DILocation(line: 202, column: 42, scope: !6683)
!6688 = !DILocalVariable(name: "list", arg: 2, scope: !6683, file: !3365, line: 202, type: !2232)
!6689 = !DILocation(line: 202, column: 71, scope: !6683)
!6690 = !DILocation(line: 206, column: 20, scope: !6683)
!6691 = !DILocation(line: 206, column: 3, scope: !6683)
!6692 = !DILocation(line: 206, column: 13, scope: !6683)
!6693 = !DILocation(line: 206, column: 18, scope: !6683)
!6694 = !DILocation(line: 207, column: 20, scope: !6683)
!6695 = !DILocation(line: 207, column: 26, scope: !6683)
!6696 = !DILocation(line: 207, column: 3, scope: !6683)
!6697 = !DILocation(line: 207, column: 13, scope: !6683)
!6698 = !DILocation(line: 207, column: 18, scope: !6683)
!6699 = !DILocation(line: 208, column: 22, scope: !6683)
!6700 = !DILocation(line: 208, column: 3, scope: !6683)
!6701 = !DILocation(line: 208, column: 9, scope: !6683)
!6702 = !DILocation(line: 208, column: 15, scope: !6683)
!6703 = !DILocation(line: 208, column: 20, scope: !6683)
!6704 = !DILocation(line: 209, column: 16, scope: !6683)
!6705 = !DILocation(line: 209, column: 3, scope: !6683)
!6706 = !DILocation(line: 209, column: 9, scope: !6683)
!6707 = !DILocation(line: 209, column: 14, scope: !6683)
!6708 = !DILocation(line: 210, column: 1, scope: !6683)
!6709 = distinct !DISubprogram(name: "make_ssa_name", scope: !3365, file: !3365, line: 1245, type: !6710, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6710 = !DISubroutineType(types: !6711)
!6711 = !{!865, !865, !1196}
!6712 = !DILocalVariable(name: "var", arg: 1, scope: !6709, file: !3365, line: 1245, type: !865)
!6713 = !DILocation(line: 1245, column: 21, scope: !6709)
!6714 = !DILocalVariable(name: "stmt", arg: 2, scope: !6709, file: !3365, line: 1245, type: !1196)
!6715 = !DILocation(line: 1245, column: 33, scope: !6709)
!6716 = !DILocation(line: 1247, column: 28, scope: !6709)
!6717 = !DILocation(line: 1247, column: 34, scope: !6709)
!6718 = !DILocation(line: 1247, column: 39, scope: !6709)
!6719 = !DILocation(line: 1247, column: 10, scope: !6709)
!6720 = !DILocation(line: 1247, column: 3, scope: !6709)
!6721 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !602, file: !602, line: 1714, type: !3661, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6722 = !DILocalVariable(name: "gs", arg: 1, scope: !6721, file: !602, line: 1714, type: !1196)
!6723 = !DILocation(line: 1714, column: 31, scope: !6721)
!6724 = !DILocalVariable(name: "lhs", arg: 2, scope: !6721, file: !602, line: 1714, type: !865)
!6725 = !DILocation(line: 1714, column: 40, scope: !6721)
!6726 = !DILocation(line: 1717, column: 18, scope: !6721)
!6727 = !DILocation(line: 1717, column: 25, scope: !6721)
!6728 = !DILocation(line: 1717, column: 3, scope: !6721)
!6729 = !DILocation(line: 1719, column: 7, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6721, file: !602, line: 1719, column: 7)
!6731 = !DILocation(line: 1719, column: 11, scope: !6730)
!6732 = !DILocation(line: 1719, column: 14, scope: !6730)
!6733 = !DILocation(line: 1719, column: 30, scope: !6730)
!6734 = !DILocation(line: 1719, column: 7, scope: !6721)
!6735 = !DILocation(line: 1720, column: 31, scope: !6730)
!6736 = !DILocation(line: 1720, column: 5, scope: !6730)
!6737 = !DILocation(line: 1720, column: 29, scope: !6730)
!6738 = !DILocation(line: 1721, column: 1, scope: !6721)
!6739 = distinct !DISubprogram(name: "gimple_nop_p", scope: !602, file: !602, line: 4304, type: !3042, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6740 = !DILocalVariable(name: "g", arg: 1, scope: !6739, file: !602, line: 4304, type: !3044)
!6741 = !DILocation(line: 4304, column: 28, scope: !6739)
!6742 = !DILocation(line: 4306, column: 23, scope: !6739)
!6743 = !DILocation(line: 4306, column: 10, scope: !6739)
!6744 = !DILocation(line: 4306, column: 26, scope: !6739)
!6745 = !DILocation(line: 4306, column: 3, scope: !6739)
!6746 = distinct !DISubprogram(name: "gsi_after_labels", scope: !602, file: !602, line: 4510, type: !2988, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6747 = !DILocalVariable(name: "bb", arg: 1, scope: !6746, file: !602, line: 4510, type: !1648)
!6748 = !DILocation(line: 4510, column: 31, scope: !6746)
!6749 = !DILocalVariable(name: "gsi", scope: !6746, file: !602, line: 4512, type: !2622)
!6750 = !DILocation(line: 4512, column: 24, scope: !6746)
!6751 = !DILocation(line: 4512, column: 44, scope: !6746)
!6752 = !DILocation(line: 4512, column: 30, scope: !6746)
!6753 = !DILocation(line: 4514, column: 3, scope: !6746)
!6754 = !DILocation(line: 4514, column: 11, scope: !6746)
!6755 = !DILocation(line: 4514, column: 27, scope: !6746)
!6756 = !DILocation(line: 4514, column: 43, scope: !6746)
!6757 = !DILocation(line: 4514, column: 30, scope: !6746)
!6758 = !DILocation(line: 4514, column: 59, scope: !6746)
!6759 = !DILocation(line: 0, scope: !6746)
!6760 = !DILocation(line: 4515, column: 5, scope: !6746)
!6761 = distinct !{!6761, !6753, !6762}
!6762 = !DILocation(line: 4515, column: 19, scope: !6746)
!6763 = !DILocation(line: 4517, column: 3, scope: !6746)
!6764 = distinct !DISubprogram(name: "single_succ", scope: !343, file: !343, line: 663, type: !6765, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6765 = !DISubroutineType(types: !6766)
!6766 = !{!1648, !3216}
!6767 = !DILocalVariable(name: "bb", arg: 1, scope: !6764, file: !343, line: 663, type: !3216)
!6768 = !DILocation(line: 663, column: 32, scope: !6764)
!6769 = !DILocation(line: 665, column: 28, scope: !6764)
!6770 = !DILocation(line: 665, column: 10, scope: !6764)
!6771 = !DILocation(line: 665, column: 33, scope: !6764)
!6772 = !DILocation(line: 665, column: 3, scope: !6764)
!6773 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !6774, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6774 = !DISubroutineType(types: !6775)
!6775 = !{!6509, !6514}
!6776 = !DILocalVariable(name: "ev", arg: 1, scope: !6773, file: !343, line: 696, type: !6514)
!6777 = !DILocation(line: 696, column: 28, scope: !6773)
!6778 = !DILocalVariable(name: "i", scope: !6773, file: !343, line: 698, type: !6509)
!6779 = !DILocation(line: 698, column: 17, scope: !6773)
!6780 = !DILocation(line: 700, column: 5, scope: !6773)
!6781 = !DILocation(line: 700, column: 11, scope: !6773)
!6782 = !DILocation(line: 701, column: 17, scope: !6773)
!6783 = !DILocation(line: 701, column: 5, scope: !6773)
!6784 = !DILocation(line: 701, column: 15, scope: !6773)
!6785 = !DILocation(line: 703, column: 3, scope: !6773)
!6786 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !6787, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6787 = !DISubroutineType(types: !6788)
!6788 = !{!985, !6509, !6789}
!6789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1176, size: 64)
!6790 = !DILocalVariable(name: "ei", arg: 1, scope: !6786, file: !343, line: 771, type: !6509)
!6791 = !DILocation(line: 771, column: 24, scope: !6786)
!6792 = !DILocalVariable(name: "p", arg: 2, scope: !6786, file: !343, line: 771, type: !6789)
!6793 = !DILocation(line: 771, column: 34, scope: !6786)
!6794 = !DILocation(line: 773, column: 8, scope: !6795)
!6795 = distinct !DILexicalBlock(scope: !6786, file: !343, line: 773, column: 7)
!6796 = !DILocation(line: 773, column: 7, scope: !6786)
!6797 = !DILocation(line: 775, column: 12, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6795, file: !343, line: 774, column: 5)
!6799 = !DILocation(line: 775, column: 8, scope: !6798)
!6800 = !DILocation(line: 775, column: 10, scope: !6798)
!6801 = !DILocation(line: 776, column: 7, scope: !6798)
!6802 = !DILocation(line: 780, column: 8, scope: !6803)
!6803 = distinct !DILexicalBlock(scope: !6795, file: !343, line: 779, column: 5)
!6804 = !DILocation(line: 780, column: 10, scope: !6803)
!6805 = !DILocation(line: 781, column: 7, scope: !6803)
!6806 = !DILocation(line: 783, column: 1, scope: !6786)
!6807 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !6808, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6808 = !DISubroutineType(types: !6809)
!6809 = !{null, !6810}
!6810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6509, size: 64)
!6811 = !DILocalVariable(name: "i", arg: 1, scope: !6807, file: !343, line: 736, type: !6810)
!6812 = !DILocation(line: 736, column: 25, scope: !6807)
!6813 = !DILocation(line: 738, column: 3, scope: !6807)
!6814 = !DILocation(line: 739, column: 3, scope: !6807)
!6815 = !DILocation(line: 739, column: 6, scope: !6807)
!6816 = !DILocation(line: 739, column: 11, scope: !6807)
!6817 = !DILocation(line: 740, column: 1, scope: !6807)
!6818 = distinct !DISubprogram(name: "single_succ_edge", scope: !343, file: !343, line: 643, type: !6819, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6819 = !DISubroutineType(types: !6820)
!6820 = !{!1176, !3216}
!6821 = !DILocalVariable(name: "bb", arg: 1, scope: !6818, file: !343, line: 643, type: !3216)
!6822 = !DILocation(line: 643, column: 37, scope: !6818)
!6823 = !DILocation(line: 645, column: 3, scope: !6818)
!6824 = !DILocation(line: 646, column: 10, scope: !6818)
!6825 = !DILocation(line: 646, column: 3, scope: !6818)
!6826 = distinct !DISubprogram(name: "single_succ_p", scope: !343, file: !343, line: 626, type: !6827, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6827 = !DISubroutineType(types: !6828)
!6828 = !{!985, !3216}
!6829 = !DILocalVariable(name: "bb", arg: 1, scope: !6826, file: !343, line: 626, type: !3216)
!6830 = !DILocation(line: 626, column: 34, scope: !6826)
!6831 = !DILocation(line: 628, column: 10, scope: !6826)
!6832 = !DILocation(line: 628, column: 33, scope: !6826)
!6833 = !DILocation(line: 628, column: 3, scope: !6826)
!6834 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !6835, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6835 = !DISubroutineType(types: !6836)
!6836 = !{!1176, !6837, !7}
!6837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6838, size: 64)
!6838 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1169)
!6839 = !DILocalVariable(name: "vec_", arg: 1, scope: !6834, file: !343, line: 150, type: !6837)
!6840 = !DILocation(line: 150, column: 1, scope: !6834)
!6841 = !DILocalVariable(name: "ix_", arg: 2, scope: !6834, file: !343, line: 150, type: !7)
!6842 = !DILocation(line: 0, scope: !6834)
!6843 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !6844, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6844 = !DISubroutineType(types: !6845)
!6845 = !{!7, !6837}
!6846 = !DILocalVariable(name: "vec_", arg: 1, scope: !6843, file: !343, line: 150, type: !6837)
!6847 = !DILocation(line: 150, column: 1, scope: !6843)
!6848 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !6849, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6849 = !DISubroutineType(types: !6850)
!6850 = !{!985, !6509}
!6851 = !DILocalVariable(name: "i", arg: 1, scope: !6848, file: !343, line: 721, type: !6509)
!6852 = !DILocation(line: 721, column: 25, scope: !6848)
!6853 = !DILocation(line: 723, column: 13, scope: !6848)
!6854 = !DILocation(line: 723, column: 22, scope: !6848)
!6855 = !DILocation(line: 723, column: 19, scope: !6848)
!6856 = !DILocation(line: 723, column: 10, scope: !6848)
!6857 = !DILocation(line: 723, column: 3, scope: !6848)
!6858 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !6859, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6859 = !DISubroutineType(types: !6860)
!6860 = !{!1176, !6509}
!6861 = !DILocalVariable(name: "i", arg: 1, scope: !6858, file: !343, line: 752, type: !6509)
!6862 = !DILocation(line: 752, column: 24, scope: !6858)
!6863 = !DILocation(line: 754, column: 10, scope: !6858)
!6864 = !DILocation(line: 754, column: 3, scope: !6858)
!6865 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !6866, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6866 = !DISubroutineType(types: !6867)
!6867 = !{!1164, !6509}
!6868 = !DILocalVariable(name: "i", arg: 1, scope: !6865, file: !343, line: 685, type: !6509)
!6869 = !DILocation(line: 685, column: 29, scope: !6865)
!6870 = !DILocation(line: 687, column: 3, scope: !6865)
!6871 = !DILocation(line: 688, column: 13, scope: !6865)
!6872 = !DILocation(line: 688, column: 10, scope: !6865)
!6873 = !DILocation(line: 688, column: 3, scope: !6865)
!6874 = distinct !DISubprogram(name: "is_phi_for_stmt", scope: !3, file: !3, line: 1252, type: !6875, scopeLine: 1253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6875 = !DISubroutineType(types: !6876)
!6876 = !{!985, !1196, !865}
!6877 = !DILocalVariable(name: "stmt", arg: 1, scope: !6874, file: !3, line: 1252, type: !1196)
!6878 = !DILocation(line: 1252, column: 25, scope: !6874)
!6879 = !DILocalVariable(name: "operand", arg: 2, scope: !6874, file: !3, line: 1252, type: !865)
!6880 = !DILocation(line: 1252, column: 36, scope: !6874)
!6881 = !DILocalVariable(name: "def_stmt", scope: !6874, file: !3, line: 1254, type: !1196)
!6882 = !DILocation(line: 1254, column: 10, scope: !6874)
!6883 = !DILocalVariable(name: "lhs", scope: !6874, file: !3, line: 1255, type: !865)
!6884 = !DILocation(line: 1255, column: 8, scope: !6874)
!6885 = !DILocalVariable(name: "arg_p", scope: !6874, file: !3, line: 1256, type: !2231)
!6886 = !DILocation(line: 1256, column: 17, scope: !6874)
!6887 = !DILocalVariable(name: "i", scope: !6874, file: !3, line: 1257, type: !6888)
!6888 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !852, line: 140, baseType: !6889)
!6889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !852, line: 131, size: 320, elements: !6890)
!6890 = !{!6891, !6892, !6893, !6895, !6897, !6898, !6899}
!6891 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6889, file: !852, line: 133, baseType: !985, size: 8)
!6892 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6889, file: !852, line: 134, baseType: !851, size: 32, offset: 32)
!6893 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6889, file: !852, line: 135, baseType: !6894, size: 64, offset: 64)
!6894 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !852, line: 42, baseType: !1225)
!6895 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6889, file: !852, line: 136, baseType: !6896, size: 64, offset: 128)
!6896 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !852, line: 50, baseType: !1232)
!6897 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6889, file: !852, line: 137, baseType: !962, size: 32, offset: 192)
!6898 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6889, file: !852, line: 138, baseType: !962, size: 32, offset: 224)
!6899 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6889, file: !852, line: 139, baseType: !1196, size: 64, offset: 256)
!6900 = !DILocation(line: 1257, column: 15, scope: !6874)
!6901 = !DILocation(line: 1259, column: 7, scope: !6902)
!6902 = distinct !DILexicalBlock(scope: !6874, file: !3, line: 1259, column: 7)
!6903 = !DILocation(line: 1259, column: 27, scope: !6902)
!6904 = !DILocation(line: 1259, column: 7, scope: !6874)
!6905 = !DILocation(line: 1260, column: 5, scope: !6902)
!6906 = !DILocation(line: 1262, column: 28, scope: !6874)
!6907 = !DILocation(line: 1262, column: 9, scope: !6874)
!6908 = !DILocation(line: 1262, column: 7, scope: !6874)
!6909 = !DILocation(line: 1264, column: 14, scope: !6874)
!6910 = !DILocation(line: 1264, column: 12, scope: !6874)
!6911 = !DILocation(line: 1265, column: 20, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6874, file: !3, line: 1265, column: 7)
!6913 = !DILocation(line: 1265, column: 7, scope: !6912)
!6914 = !DILocation(line: 1265, column: 30, scope: !6912)
!6915 = !DILocation(line: 1265, column: 7, scope: !6874)
!6916 = !DILocation(line: 1266, column: 5, scope: !6912)
!6917 = !DILocation(line: 1268, column: 3, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !6874, file: !3, line: 1268, column: 3)
!6919 = !DILocation(line: 1268, column: 3, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 1268, column: 3)
!6921 = !DILocation(line: 1269, column: 9, scope: !6922)
!6922 = distinct !DILexicalBlock(scope: !6920, file: !3, line: 1269, column: 9)
!6923 = !DILocation(line: 1269, column: 16, scope: !6922)
!6924 = !DILocation(line: 1269, column: 13, scope: !6922)
!6925 = !DILocation(line: 1269, column: 9, scope: !6920)
!6926 = !DILocation(line: 1270, column: 7, scope: !6922)
!6927 = distinct !{!6927, !6917, !6928}
!6928 = !DILocation(line: 1270, column: 14, scope: !6918)
!6929 = !DILocation(line: 1271, column: 3, scope: !6874)
!6930 = !DILocation(line: 1272, column: 1, scope: !6874)
!6931 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3365, file: !3365, line: 910, type: !6932, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6932 = !DISubroutineType(types: !6933)
!6933 = !{!2231, !6934, !1196, !962}
!6934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6888, size: 64)
!6935 = !DILocalVariable(name: "ptr", arg: 1, scope: !6931, file: !3365, line: 910, type: !6934)
!6936 = !DILocation(line: 910, column: 35, scope: !6931)
!6937 = !DILocalVariable(name: "phi", arg: 2, scope: !6931, file: !3365, line: 910, type: !1196)
!6938 = !DILocation(line: 910, column: 47, scope: !6931)
!6939 = !DILocalVariable(name: "flags", arg: 3, scope: !6931, file: !3365, line: 910, type: !962)
!6940 = !DILocation(line: 910, column: 56, scope: !6931)
!6941 = !DILocalVariable(name: "phi_def", scope: !6931, file: !3365, line: 912, type: !865)
!6942 = !DILocation(line: 912, column: 8, scope: !6931)
!6943 = !DILocation(line: 912, column: 37, scope: !6931)
!6944 = !DILocation(line: 912, column: 18, scope: !6931)
!6945 = !DILocalVariable(name: "comp", scope: !6931, file: !3365, line: 913, type: !962)
!6946 = !DILocation(line: 913, column: 7, scope: !6931)
!6947 = !DILocation(line: 915, column: 28, scope: !6931)
!6948 = !DILocation(line: 915, column: 3, scope: !6931)
!6949 = !DILocation(line: 916, column: 3, scope: !6931)
!6950 = !DILocation(line: 916, column: 8, scope: !6931)
!6951 = !DILocation(line: 916, column: 13, scope: !6931)
!6952 = !DILocation(line: 918, column: 3, scope: !6931)
!6953 = !DILocation(line: 920, column: 26, scope: !6931)
!6954 = !DILocation(line: 920, column: 11, scope: !6931)
!6955 = !DILocation(line: 920, column: 8, scope: !6931)
!6956 = !DILocation(line: 923, column: 8, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6931, file: !3365, line: 923, column: 7)
!6958 = !DILocation(line: 923, column: 16, scope: !6957)
!6959 = !DILocation(line: 923, column: 14, scope: !6957)
!6960 = !DILocation(line: 923, column: 22, scope: !6957)
!6961 = !DILocation(line: 923, column: 7, scope: !6931)
!6962 = !DILocation(line: 925, column: 7, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6957, file: !3365, line: 924, column: 5)
!6964 = !DILocation(line: 925, column: 12, scope: !6963)
!6965 = !DILocation(line: 925, column: 17, scope: !6963)
!6966 = !DILocation(line: 926, column: 7, scope: !6963)
!6967 = !DILocation(line: 929, column: 19, scope: !6931)
!6968 = !DILocation(line: 929, column: 3, scope: !6931)
!6969 = !DILocation(line: 929, column: 8, scope: !6931)
!6970 = !DILocation(line: 929, column: 17, scope: !6931)
!6971 = !DILocation(line: 930, column: 39, scope: !6931)
!6972 = !DILocation(line: 930, column: 18, scope: !6931)
!6973 = !DILocation(line: 930, column: 3, scope: !6931)
!6974 = !DILocation(line: 930, column: 8, scope: !6931)
!6975 = !DILocation(line: 930, column: 16, scope: !6931)
!6976 = !DILocation(line: 931, column: 3, scope: !6931)
!6977 = !DILocation(line: 931, column: 8, scope: !6931)
!6978 = !DILocation(line: 931, column: 18, scope: !6931)
!6979 = !DILocation(line: 932, column: 28, scope: !6931)
!6980 = !DILocation(line: 932, column: 10, scope: !6931)
!6981 = !DILocation(line: 932, column: 3, scope: !6931)
!6982 = !DILocation(line: 933, column: 1, scope: !6931)
!6983 = distinct !DISubprogram(name: "op_iter_done", scope: !3365, file: !3365, line: 652, type: !6984, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6984 = !DISubroutineType(types: !6985)
!6985 = !{!985, !6986}
!6986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6987, size: 64)
!6987 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6888)
!6988 = !DILocalVariable(name: "ptr", arg: 1, scope: !6983, file: !3365, line: 652, type: !6986)
!6989 = !DILocation(line: 652, column: 34, scope: !6983)
!6990 = !DILocation(line: 654, column: 10, scope: !6983)
!6991 = !DILocation(line: 654, column: 15, scope: !6983)
!6992 = !DILocation(line: 654, column: 3, scope: !6983)
!6993 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3365, file: !3365, line: 427, type: !6994, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!6994 = !DISubroutineType(types: !6995)
!6995 = !{!865, !2231}
!6996 = !DILocalVariable(name: "use", arg: 1, scope: !6993, file: !3365, line: 427, type: !2231)
!6997 = !DILocation(line: 427, column: 33, scope: !6993)
!6998 = !DILocation(line: 429, column: 12, scope: !6993)
!6999 = !DILocation(line: 429, column: 17, scope: !6993)
!7000 = !DILocation(line: 429, column: 10, scope: !6993)
!7001 = !DILocation(line: 429, column: 3, scope: !6993)
!7002 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3365, file: !3365, line: 659, type: !7003, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7003 = !DISubroutineType(types: !7004)
!7004 = !{!2231, !6934}
!7005 = !DILocalVariable(name: "ptr", arg: 1, scope: !7002, file: !3365, line: 659, type: !6934)
!7006 = !DILocation(line: 659, column: 32, scope: !7002)
!7007 = !DILocalVariable(name: "use_p", scope: !7002, file: !3365, line: 661, type: !2231)
!7008 = !DILocation(line: 661, column: 17, scope: !7002)
!7009 = !DILocation(line: 665, column: 7, scope: !7010)
!7010 = distinct !DILexicalBlock(scope: !7002, file: !3365, line: 665, column: 7)
!7011 = !DILocation(line: 665, column: 12, scope: !7010)
!7012 = !DILocation(line: 665, column: 7, scope: !7002)
!7013 = !DILocation(line: 667, column: 15, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !7010, file: !3365, line: 666, column: 5)
!7015 = !DILocation(line: 667, column: 13, scope: !7014)
!7016 = !DILocation(line: 668, column: 19, scope: !7014)
!7017 = !DILocation(line: 668, column: 24, scope: !7014)
!7018 = !DILocation(line: 668, column: 30, scope: !7014)
!7019 = !DILocation(line: 668, column: 7, scope: !7014)
!7020 = !DILocation(line: 668, column: 12, scope: !7014)
!7021 = !DILocation(line: 668, column: 17, scope: !7014)
!7022 = !DILocation(line: 669, column: 14, scope: !7014)
!7023 = !DILocation(line: 669, column: 7, scope: !7014)
!7024 = !DILocation(line: 671, column: 7, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7002, file: !3365, line: 671, column: 7)
!7026 = !DILocation(line: 671, column: 12, scope: !7025)
!7027 = !DILocation(line: 671, column: 20, scope: !7025)
!7028 = !DILocation(line: 671, column: 25, scope: !7025)
!7029 = !DILocation(line: 671, column: 18, scope: !7025)
!7030 = !DILocation(line: 671, column: 7, scope: !7002)
!7031 = !DILocation(line: 673, column: 14, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7025, file: !3365, line: 672, column: 5)
!7033 = !DILocation(line: 673, column: 7, scope: !7032)
!7034 = !DILocation(line: 675, column: 3, scope: !7002)
!7035 = !DILocation(line: 675, column: 8, scope: !7002)
!7036 = !DILocation(line: 675, column: 13, scope: !7002)
!7037 = !DILocation(line: 676, column: 3, scope: !7002)
!7038 = !DILocation(line: 677, column: 1, scope: !7002)
!7039 = distinct !DISubprogram(name: "gimple_phi_result", scope: !602, file: !602, line: 3071, type: !3072, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7040 = !DILocalVariable(name: "gs", arg: 1, scope: !7039, file: !602, line: 3071, type: !3044)
!7041 = !DILocation(line: 3071, column: 33, scope: !7039)
!7042 = !DILocation(line: 3074, column: 10, scope: !7039)
!7043 = !DILocation(line: 3074, column: 14, scope: !7039)
!7044 = !DILocation(line: 3074, column: 25, scope: !7039)
!7045 = !DILocation(line: 3074, column: 3, scope: !7039)
!7046 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3365, file: !3365, line: 729, type: !7047, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7047 = !DISubroutineType(types: !7048)
!7048 = !{null, !6934}
!7049 = !DILocalVariable(name: "ptr", arg: 1, scope: !7046, file: !3365, line: 729, type: !6934)
!7050 = !DILocation(line: 729, column: 39, scope: !7046)
!7051 = !DILocation(line: 731, column: 3, scope: !7046)
!7052 = !DILocation(line: 731, column: 8, scope: !7046)
!7053 = !DILocation(line: 731, column: 13, scope: !7046)
!7054 = !DILocation(line: 732, column: 3, scope: !7046)
!7055 = !DILocation(line: 732, column: 8, scope: !7046)
!7056 = !DILocation(line: 732, column: 13, scope: !7046)
!7057 = !DILocation(line: 733, column: 3, scope: !7046)
!7058 = !DILocation(line: 733, column: 8, scope: !7046)
!7059 = !DILocation(line: 733, column: 18, scope: !7046)
!7060 = !DILocation(line: 734, column: 3, scope: !7046)
!7061 = !DILocation(line: 734, column: 8, scope: !7046)
!7062 = !DILocation(line: 734, column: 14, scope: !7046)
!7063 = !DILocation(line: 735, column: 3, scope: !7046)
!7064 = !DILocation(line: 735, column: 8, scope: !7046)
!7065 = !DILocation(line: 735, column: 16, scope: !7046)
!7066 = !DILocation(line: 736, column: 3, scope: !7046)
!7067 = !DILocation(line: 736, column: 8, scope: !7046)
!7068 = !DILocation(line: 736, column: 17, scope: !7046)
!7069 = !DILocation(line: 737, column: 3, scope: !7046)
!7070 = !DILocation(line: 737, column: 8, scope: !7046)
!7071 = !DILocation(line: 737, column: 13, scope: !7046)
!7072 = !DILocation(line: 738, column: 1, scope: !7046)
!7073 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !602, file: !602, line: 3061, type: !3356, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7074 = !DILocalVariable(name: "gs", arg: 1, scope: !7073, file: !602, line: 3061, type: !3044)
!7075 = !DILocation(line: 3061, column: 35, scope: !7073)
!7076 = !DILocation(line: 3064, column: 10, scope: !7073)
!7077 = !DILocation(line: 3064, column: 14, scope: !7073)
!7078 = !DILocation(line: 3064, column: 25, scope: !7073)
!7079 = !DILocation(line: 3064, column: 3, scope: !7073)
!7080 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3365, file: !3365, line: 442, type: !7081, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7081 = !DISubroutineType(types: !7082)
!7082 = !{!2231, !1196, !962}
!7083 = !DILocalVariable(name: "gs", arg: 1, scope: !7080, file: !3365, line: 442, type: !1196)
!7084 = !DILocation(line: 442, column: 36, scope: !7080)
!7085 = !DILocalVariable(name: "i", arg: 2, scope: !7080, file: !3365, line: 442, type: !962)
!7086 = !DILocation(line: 442, column: 44, scope: !7080)
!7087 = !DILocation(line: 444, column: 27, scope: !7080)
!7088 = !DILocation(line: 444, column: 31, scope: !7080)
!7089 = !DILocation(line: 444, column: 11, scope: !7080)
!7090 = !DILocation(line: 444, column: 35, scope: !7080)
!7091 = !DILocation(line: 444, column: 3, scope: !7080)
!7092 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !602, file: !602, line: 3100, type: !7093, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7093 = !DISubroutineType(types: !7094)
!7094 = !{!7095, !1196, !7}
!7095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1299, size: 64)
!7096 = !DILocalVariable(name: "gs", arg: 1, scope: !7092, file: !602, line: 3100, type: !1196)
!7097 = !DILocation(line: 3100, column: 24, scope: !7092)
!7098 = !DILocalVariable(name: "index", arg: 2, scope: !7092, file: !602, line: 3100, type: !7)
!7099 = !DILocation(line: 3100, column: 37, scope: !7092)
!7100 = !DILocation(line: 3103, column: 3, scope: !7092)
!7101 = !DILocation(line: 3104, column: 12, scope: !7092)
!7102 = !DILocation(line: 3104, column: 16, scope: !7092)
!7103 = !DILocation(line: 3104, column: 27, scope: !7092)
!7104 = !DILocation(line: 3104, column: 32, scope: !7092)
!7105 = !DILocation(line: 3104, column: 3, scope: !7092)
!7106 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !135, file: !135, line: 182, type: !7107, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7107 = !DISubroutineType(types: !7108)
!7108 = !{!962, !7109, !7, !1230}
!7109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7110, size: 64)
!7110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1747)
!7111 = !DILocalVariable(name: "vec_", arg: 1, scope: !7106, file: !135, line: 182, type: !7109)
!7112 = !DILocation(line: 182, column: 1, scope: !7106)
!7113 = !DILocalVariable(name: "ix_", arg: 2, scope: !7106, file: !135, line: 182, type: !7)
!7114 = !DILocalVariable(name: "ptr", arg: 3, scope: !7106, file: !135, line: 182, type: !1230)
!7115 = !DILocation(line: 182, column: 1, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7106, file: !135, line: 182, column: 1)
!7117 = !DILocation(line: 182, column: 1, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !7116, file: !135, line: 182, column: 1)
!7119 = !DILocation(line: 182, column: 1, scope: !7120)
!7120 = distinct !DILexicalBlock(scope: !7116, file: !135, line: 182, column: 1)
!7121 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !7122, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2397)
!7122 = !DISubroutineType(types: !7123)
!7123 = !{null, !3683}
!7124 = !DILocalVariable(name: "vec_", arg: 1, scope: !7121, file: !135, line: 184, type: !3683)
!7125 = !DILocation(line: 184, column: 1, scope: !7121)
!7126 = !DILocation(line: 184, column: 1, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7121, file: !135, line: 184, column: 1)
