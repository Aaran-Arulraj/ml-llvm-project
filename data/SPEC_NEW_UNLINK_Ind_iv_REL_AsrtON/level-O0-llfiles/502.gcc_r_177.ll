; ModuleID = 'ira.c'
source_filename = "ira.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ira_allocno = type { i32, i32, i32, i32, %struct.rtx_def*, %struct.ira_allocno*, %struct.ira_loop_tree_node*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ira_allocno_copy*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno_live_range*, i32, i32, i8*, i32, i32, i64, i64, i32, i32, i32, i16, %struct.ira_allocno*, i32*, i32*, i32*, i32*, i32, i32, %struct.ira_allocno*, %struct.ira_allocno*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.ira_loop_tree_node = type { %struct.basic_block_def*, %struct.loop*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, i32, i8, %struct.ira_allocno**, i8, [27 x i32], %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.gimple_seq_d = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.ira_allocno_copy = type { i32, %struct.ira_allocno*, %struct.ira_allocno*, i32, i8, %struct.rtx_def*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_loop_tree_node* }
%struct.ira_allocno_live_range = type { %struct.ira_allocno*, i32, i32, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.anon = type { i32, i32 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.ira_spilled_reg_stack_slot = type { %struct.bitmap_head_def, %struct.rtx_def*, i32 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.equivalence = type { %struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i32, i32, i8 }
%struct.reg_info_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.regstat_n_sets_and_refs_t = type { i32, i32 }
%struct.insn_chain = type { %struct.insn_chain*, %struct.insn_chain*, %struct.insn_chain*, %struct.rtx_def*, i32, i8, %struct.bitmap_head_def, %struct.bitmap_head_def, %struct.reload*, i32, i64 }
%struct.reload = type opaque
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.df_live_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.ira_allocno_iterator = type { i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@ira_bitmap_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !0
@.str = private unnamed_addr constant [13 x i8] c"Disposition:\00", align 1
@ira_regno_allocno_map = external dso_local global %struct.ira_allocno**, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c" %4d:r%-4d\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"b%-3d\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"l%-3d\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c" %3d\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c" mem\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@move_cost = external dso_local global [87 x [27 x i16]*], align 16
@ira_register_move_cost = common dso_local global [87 x [27 x i16]*] zeroinitializer, align 16, !dbg !2365
@ira_may_move_in_cost = common dso_local global [87 x [27 x i16]*] zeroinitializer, align 16, !dbg !2369
@may_move_in_cost = external dso_local global [87 x [27 x i16]*], align 16
@ira_may_move_out_cost = common dso_local global [87 x [27 x i16]*] zeroinitializer, align 16, !dbg !2371
@may_move_out_cost = external dso_local global [87 x [27 x i16]*], align 16
@ira_class_subset_p = common dso_local global [27 x [27 x i32]] zeroinitializer, align 16, !dbg !2373
@flag_omit_frame_pointer = external dso_local global i32, align 4
@ira_setup_eliminable_regset.eliminables = internal constant [4 x %struct.anon] [%struct.anon { i32 16, i32 7 }, %struct.anon { i32 16, i32 6 }, %struct.anon { i32 20, i32 7 }, %struct.anon { i32 20, i32 6 }], align 16, !dbg !2210
@cfun = external dso_local global %struct.function*, align 8
@flag_stack_check = external dso_local global i32, align 4
@x_rtl = external dso_local global %struct.rtl_data, align 8
@targetm = external dso_local global %struct.gcc_target, align 8
@no_unit_alloc_regs = internal global i64 0, align 8, !dbg !2377
@ira_no_alloc_regs = common dso_local global i64 0, align 8, !dbg !2429
@eliminable_regset = common dso_local global i64 0, align 8, !dbg !2352
@.str.7 = private unnamed_addr constant [30 x i8] c"%s cannot be used in asm here\00", align 1
@reg_names = external dso_local global [53 x i8*], align 16
@.str.8 = private unnamed_addr constant [4 x i8] c"ira\00", align 1
@pass_ira = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8 ()* @gate_ira, i32 ()* @rest_of_handle_ira, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3 } }, align 8, !dbg !2223
@internal_flag_ira_verbose = common dso_local global i32 0, align 4, !dbg !2251
@ira_dump_file = common dso_local global %struct._IO_FILE* null, align 8, !dbg !2253
@allocno_pool = common dso_local global %struct.alloc_pool_def* null, align 8, !dbg !2305
@copy_pool = common dso_local global %struct.alloc_pool_def* null, align 8, !dbg !2328
@allocno_live_range_pool = common dso_local global %struct.alloc_pool_def* null, align 8, !dbg !2330
@ira_spilled_reg_stack_slots_num = common dso_local global i32 0, align 4, !dbg !2332
@ira_spilled_reg_stack_slots = common dso_local global %struct.ira_spilled_reg_stack_slot* null, align 8, !dbg !2334
@ira_overall_cost = common dso_local global i32 0, align 4, !dbg !2336
@ira_reg_cost = common dso_local global i32 0, align 4, !dbg !2338
@ira_mem_cost = common dso_local global i32 0, align 4, !dbg !2340
@ira_load_cost = common dso_local global i32 0, align 4, !dbg !2342
@ira_store_cost = common dso_local global i32 0, align 4, !dbg !2344
@ira_shuffle_cost = common dso_local global i32 0, align 4, !dbg !2346
@ira_move_loops_num = common dso_local global i32 0, align 4, !dbg !2348
@ira_additional_jumps_num = common dso_local global i32 0, align 4, !dbg !2350
@ira_reg_mode_hard_regset = common dso_local global [53 x [87 x i64]] zeroinitializer, align 16, !dbg !2354
@ira_memory_move_cost = common dso_local global [87 x [27 x [2 x i16]]] zeroinitializer, align 16, !dbg !2360
@ira_class_hard_regs = common dso_local global [27 x [53 x i16]] zeroinitializer, align 16, !dbg !2379
@ira_class_hard_regs_num = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2383
@ira_class_hard_reg_index = common dso_local global [27 x [53 x i16]] zeroinitializer, align 16, !dbg !2386
@ira_available_class_regs = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2388
@ira_reg_class_cover_size = common dso_local global i32 0, align 4, !dbg !2390
@ira_reg_class_cover = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2392
@ira_important_classes_num = common dso_local global i32 0, align 4, !dbg !2395
@ira_important_classes = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2397
@ira_important_class_nums = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2399
@ira_class_translate = common dso_local global [27 x i32] zeroinitializer, align 16, !dbg !2401
@ira_reg_class_intersect = common dso_local global [27 x [27 x i32]] zeroinitializer, align 16, !dbg !2403
@ira_reg_classes_intersect_p = common dso_local global [27 x [27 x i8]] zeroinitializer, align 16, !dbg !2406
@ira_reg_class_super_classes = common dso_local global [27 x [27 x i32]] zeroinitializer, align 16, !dbg !2409
@ira_reg_class_union = common dso_local global [27 x [27 x i32]] zeroinitializer, align 16, !dbg !2411
@ira_hard_regno_cover_class = common dso_local global [53 x i32] zeroinitializer, align 16, !dbg !2413
@ira_reg_class_nregs = common dso_local global [27 x [87 x i32]] zeroinitializer, align 16, !dbg !2417
@ira_max_nregs = common dso_local global i32 0, align 4, !dbg !2421
@prohibited_class_mode_regs = common dso_local global [27 x [87 x i64]] zeroinitializer, align 16, !dbg !2423
@ira_prohibited_mode_move_regs = common dso_local global [87 x i64] zeroinitializer, align 16, !dbg !2426
@ira_reg_equiv_len = common dso_local global i32 0, align 4, !dbg !2431
@ira_reg_equiv_invariant_p = common dso_local global i8* null, align 8, !dbg !2433
@ira_reg_equiv_const = common dso_local global %struct.rtx_def** null, align 8, !dbg !2435
@reg_renumber = common dso_local global i16* null, align 8, !dbg !2437
@ira_loops = common dso_local global %struct.loops zeroinitializer, align 8, !dbg !2440
@ira_conflicts_p = common dso_local global i8 0, align 1, !dbg !2442
@print_class_cover.reg_class_names = internal constant [27 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0)], align 16, !dbg !2444
@.str.9 = private unnamed_addr constant [8 x i8] c"NO_REGS\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"AREG\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"DREG\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"CREG\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"BREG\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"SIREG\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"DIREG\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"AD_REGS\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"CLOBBERED_REGS\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Q_REGS\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"NON_Q_REGS\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"INDEX_REGS\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"LEGACY_REGS\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"GENERAL_REGS\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"FP_TOP_REG\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"FP_SECOND_REG\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"FLOAT_REGS\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"SSE_FIRST_REG\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"SSE_REGS\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"MMX_REGS\00", align 1
@.str.29 = private unnamed_addr constant [16 x i8] c"FP_TOP_SSE_REGS\00", align 1
@.str.30 = private unnamed_addr constant [19 x i8] c"FP_SECOND_SSE_REGS\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"FLOAT_SSE_REGS\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"FLOAT_INT_REGS\00", align 1
@.str.33 = private unnamed_addr constant [13 x i8] c"INT_SSE_REGS\00", align 1
@.str.34 = private unnamed_addr constant [19 x i8] c"FLOAT_INT_SSE_REGS\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"ALL_REGS\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"Class cover:\0A\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"\0AClass translation:\0A\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c" %s -> %s\0A\00", align 1
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@fixed_reg_set = external dso_local global i64, align 8
@reg_class_contents = external dso_local global [27 x i64], align 16
@temp_hard_regset = internal global i64 0, align 8, !dbg !2451
@reg_alloc_order = external dso_local global [53 x i32], align 16
@alloc_reg_class_subclasses = internal global [27 x [27 x i32]] zeroinitializer, align 16, !dbg !2453
@setup_cover_and_important_classes.classes = internal global [28 x i32] zeroinitializer, align 16, !dbg !2455
@flag_ira_algorithm = external dso_local global i32, align 4
@.str.40 = private unnamed_addr constant [6 x i8] c"ira.c\00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cover_class_order = internal global [27 x i32] zeroinitializer, align 16, !dbg !2461
@reg_class_subclasses = external dso_local global [27 x [27 x i32]], align 16
@reg_class_subunion = external dso_local global [27 x [27 x i32]], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@mode_size = external dso_local global [87 x i8], align 16
@df = external dso_local global %struct.df*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@timevar_enable = external dso_local global i8, align 1
@flag_caller_saves = external dso_local global i32, align 4
@flag_ira_verbose = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@warn_clobbered = external dso_local global i32, align 4
@current_function_is_leaf = external dso_local global i32, align 4
@flag_ira_loop_pressure = external dso_local global i32, align 4
@max_regno = external dso_local global i32, align 4
@.str.42 = private unnamed_addr constant [17 x i8] c"Building IRA IR\0A\00", align 1
@flag_ira_region = external dso_local global i32, align 4
@flag_ira_share_spill_slots = external dso_local global i32, align 4
@ira_max_point = external dso_local global i32, align 4
@.str.43 = private unnamed_addr constant [15 x i8] c"Flattening IR\0A\00", align 1
@reg_equiv_memory_loc_vec = external dso_local global %struct.VEC_rtx_gc*, align 8
@reg_equiv_memory_loc = external dso_local global %struct.rtx_def**, align 8
@reload_completed = external dso_local global i32, align 4
@.str.44 = private unnamed_addr constant [28 x i8] c"+++Overall after reload %d\0A\00", align 1
@ira_prohibited_mode_move_regs_initialized_p = internal global i8 0, align 1, !dbg !2463
@recorded_label_ref = internal global i32 0, align 4, !dbg !2465
@reg_equiv = internal global %struct.equivalence* null, align 8, !dbg !2467
@reg_equiv_init = external dso_local global %struct.rtx_def**, align 8
@reg_equiv_init_size = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@reg_info_p = external dso_local global %struct.reg_info_t*, align 8
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@regstat_n_sets_and_refs = external dso_local global %struct.regstat_n_sets_and_refs_t*, align 8
@flag_var_tracking_assignments = external dso_local global i32, align 4
@equiv_mem = internal global %struct.rtx_def* null, align 8, !dbg !2469
@equiv_mem_modified = internal global i32 0, align 4, !dbg !2471
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@flag_pic = external dso_local global i32, align 4
@rtx_class = external dso_local constant [139 x i32], align 16
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@ira_loop_tree_root = external dso_local global %struct.ira_loop_tree_node*, align 8
@.str.45 = private unnamed_addr constant [51 x i8] c"    New r%d: setting preferred %s, alternative %s\0A\00", align 1
@reg_class_names = external dso_local global [0 x i8*], align 8
@ira_allocnos_num = external dso_local global i32, align 4
@ira_allocnos = external dso_local global %struct.ira_allocno**, align 8
@caller_save_needed = external dso_local global i32, align 4
@call_used_reg_set = external dso_local global i64, align 8
@.str.46 = private unnamed_addr constant [61 x i8] c"+++Costs: overall %d, reg %d, mem %d, ld %d, st %d, move %d\0A\00", align 1
@.str.47 = private unnamed_addr constant [39 x i8] c"+++       move loops %d, new jumps %d\0A\00", align 1
@reload_insn_chain = external dso_local global %struct.insn_chain*, align 8
@fixed_regs = external dso_local global [53 x i8], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.48 = private unnamed_addr constant [10 x i8] c"insn=%d, \00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"live_throughout: \00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"dead_or_set: \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ira_allocate(i64 %len) #0 !dbg !2477 {
entry:
  %len.addr = alloca i64, align 8
  %res = alloca i8*, align 8
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !2480, metadata !DIExpression()), !dbg !2481
  call void @llvm.dbg.declare(metadata i8** %res, metadata !2482, metadata !DIExpression()), !dbg !2483
  %0 = load i64, i64* %len.addr, align 8, !dbg !2484
  %call = call i8* @xmalloc(i64 %0), !dbg !2485
  store i8* %call, i8** %res, align 8, !dbg !2486
  %1 = load i8*, i8** %res, align 8, !dbg !2487
  ret i8* %1, !dbg !2488
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ira_reallocate(i8* %ptr, i64 %len) #0 !dbg !2489 {
entry:
  %ptr.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %res = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !2492, metadata !DIExpression()), !dbg !2493
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !2494, metadata !DIExpression()), !dbg !2495
  call void @llvm.dbg.declare(metadata i8** %res, metadata !2496, metadata !DIExpression()), !dbg !2497
  %0 = load i8*, i8** %ptr.addr, align 8, !dbg !2498
  %1 = load i64, i64* %len.addr, align 8, !dbg !2499
  %call = call i8* @xrealloc(i8* %0, i64 %1), !dbg !2500
  store i8* %call, i8** %res, align 8, !dbg !2501
  %2 = load i8*, i8** %res, align 8, !dbg !2502
  ret i8* %2, !dbg !2503
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_free(i8* %addr) #0 !dbg !2504 {
entry:
  %addr.addr = alloca i8*, align 8
  store i8* %addr, i8** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %addr.addr, metadata !2505, metadata !DIExpression()), !dbg !2506
  %0 = load i8*, i8** %addr.addr, align 8, !dbg !2507
  call void @free(i8* %0), !dbg !2508
  ret void, !dbg !2509
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.bitmap_head_def* @ira_allocate_bitmap() #0 !dbg !2510 {
entry:
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @ira_bitmap_obstack), !dbg !2513
  ret %struct.bitmap_head_def* %call, !dbg !2514
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_free_bitmap(%struct.bitmap_head_def* %b) #0 !dbg !2515 {
entry:
  %b.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def* %b, %struct.bitmap_head_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %b.addr, metadata !2518, metadata !DIExpression()), !dbg !2519
  ret void, !dbg !2520
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_print_disposition(%struct._IO_FILE* %f) #0 !dbg !2521 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %max_regno = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !2522, metadata !DIExpression()), !dbg !2523
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2524, metadata !DIExpression()), !dbg !2525
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2526, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !2528, metadata !DIExpression()), !dbg !2529
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !2530, metadata !DIExpression()), !dbg !2634
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2635, metadata !DIExpression()), !dbg !2636
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2637
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)), !dbg !2638
  %call1 = call i32 @max_reg_num(), !dbg !2639
  store i32 %call1, i32* %max_regno, align 4, !dbg !2640
  store i32 0, i32* %n, align 4, !dbg !2641
  store i32 53, i32* %i, align 4, !dbg !2643
  br label %for.cond, !dbg !2644

for.cond:                                         ; preds = %for.inc23, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2645
  %2 = load i32, i32* %max_regno, align 4, !dbg !2647
  %cmp = icmp slt i32 %1, %2, !dbg !2648
  br i1 %cmp, label %for.body, label %for.end25, !dbg !2649

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !2650
  %4 = load i32, i32* %i, align 4, !dbg !2652
  %idxprom = sext i32 %4 to i64, !dbg !2650
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom, !dbg !2650
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !2650
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a, align 8, !dbg !2653
  br label %for.cond2, !dbg !2654

for.cond2:                                        ; preds = %for.inc, %for.body
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2655
  %cmp3 = icmp ne %struct.ira_allocno* %6, null, !dbg !2657
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !2658

for.body4:                                        ; preds = %for.cond2
  %7 = load i32, i32* %n, align 4, !dbg !2659
  %rem = srem i32 %7, 4, !dbg !2662
  %cmp5 = icmp eq i32 %rem, 0, !dbg !2663
  br i1 %cmp5, label %if.then, label %if.end, !dbg !2664

if.then:                                          ; preds = %for.body4
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2665
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2666
  br label %if.end, !dbg !2666

if.end:                                           ; preds = %if.then, %for.body4
  %9 = load i32, i32* %n, align 4, !dbg !2667
  %inc = add nsw i32 %9, 1, !dbg !2667
  store i32 %inc, i32* %n, align 4, !dbg !2667
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2668
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2669
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 0, !dbg !2669
  %12 = load i32, i32* %num, align 8, !dbg !2669
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2670
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 1, !dbg !2670
  %14 = load i32, i32* %regno, align 4, !dbg !2670
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 %12, i32 %14), !dbg !2671
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2672
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 6, !dbg !2672
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !2672
  %bb8 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i32 0, i32 0, !dbg !2674
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb8, align 8, !dbg !2674
  store %struct.basic_block_def* %17, %struct.basic_block_def** %bb, align 8, !dbg !2675
  %cmp9 = icmp ne %struct.basic_block_def* %17, null, !dbg !2676
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !2677

if.then10:                                        ; preds = %if.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2678
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2679
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !2680
  %20 = load i32, i32* %index, align 8, !dbg !2680
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 %20), !dbg !2681
  br label %if.end15, !dbg !2681

if.else:                                          ; preds = %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2682
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2683
  %loop_tree_node12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 6, !dbg !2683
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node12, align 8, !dbg !2683
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %23, i32 0, i32 1, !dbg !2684
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2684
  %num13 = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 0, !dbg !2685
  %25 = load i32, i32* %num13, align 8, !dbg !2685
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i32 %25), !dbg !2686
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then10
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2687
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 3, !dbg !2687
  %27 = load i32, i32* %hard_regno, align 4, !dbg !2687
  %cmp16 = icmp sge i32 %27, 0, !dbg !2689
  br i1 %cmp16, label %if.then17, label %if.else20, !dbg !2690

if.then17:                                        ; preds = %if.end15
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2691
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2692
  %hard_regno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 3, !dbg !2692
  %30 = load i32, i32* %hard_regno18, align 4, !dbg !2692
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %30), !dbg !2693
  br label %if.end22, !dbg !2693

if.else20:                                        ; preds = %if.end15
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2694
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)), !dbg !2695
  br label %if.end22

if.end22:                                         ; preds = %if.else20, %if.then17
  br label %for.inc, !dbg !2696

for.inc:                                          ; preds = %if.end22
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2697
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 5, !dbg !2697
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !2697
  store %struct.ira_allocno* %33, %struct.ira_allocno** %a, align 8, !dbg !2698
  br label %for.cond2, !dbg !2699, !llvm.loop !2700

for.end:                                          ; preds = %for.cond2
  br label %for.inc23, !dbg !2701

for.inc23:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4, !dbg !2702
  %inc24 = add nsw i32 %34, 1, !dbg !2702
  store i32 %inc24, i32* %i, align 4, !dbg !2702
  br label %for.cond, !dbg !2703, !llvm.loop !2704

for.end25:                                        ; preds = %for.cond
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2706
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2707
  ret void, !dbg !2708
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i32 @max_reg_num() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_debug_disposition() #0 !dbg !2709 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2710
  call void @ira_print_disposition(%struct._IO_FILE* %0), !dbg !2711
  ret void, !dbg !2712
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_debug_class_cover() #0 !dbg !2713 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2714
  call void @print_class_cover(%struct._IO_FILE* %0), !dbg !2715
  ret void, !dbg !2716
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_class_cover(%struct._IO_FILE* %f) #0 !dbg !2446 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !2717, metadata !DIExpression()), !dbg !2718
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2719, metadata !DIExpression()), !dbg !2720
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2721
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i64 0, i64 0)), !dbg !2722
  store i32 0, i32* %i, align 4, !dbg !2723
  br label %for.cond, !dbg !2725

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2726
  %2 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !2728
  %cmp = icmp slt i32 %1, %2, !dbg !2729
  br i1 %cmp, label %for.body, label %for.end, !dbg !2730

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2731
  %4 = load i32, i32* %i, align 4, !dbg !2732
  %idxprom = sext i32 %4 to i64, !dbg !2733
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !2733
  %5 = load i32, i32* %arrayidx, align 4, !dbg !2733
  %idxprom1 = zext i32 %5 to i64, !dbg !2734
  %arrayidx2 = getelementptr inbounds [27 x i8*], [27 x i8*]* @print_class_cover.reg_class_names, i64 0, i64 %idxprom1, !dbg !2734
  %6 = load i8*, i8** %arrayidx2, align 8, !dbg !2734
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i8* %6), !dbg !2735
  br label %for.inc, !dbg !2735

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !2736
  %inc = add nsw i32 %7, 1, !dbg !2736
  store i32 %inc, i32* %i, align 4, !dbg !2736
  br label %for.cond, !dbg !2737, !llvm.loop !2738

for.end:                                          ; preds = %for.cond
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2740
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0)), !dbg !2741
  store i32 0, i32* %i, align 4, !dbg !2742
  br label %for.cond5, !dbg !2744

for.cond5:                                        ; preds = %for.inc15, %for.end
  %9 = load i32, i32* %i, align 4, !dbg !2745
  %cmp6 = icmp slt i32 %9, 27, !dbg !2747
  br i1 %cmp6, label %for.body7, label %for.end17, !dbg !2748

for.body7:                                        ; preds = %for.cond5
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !2749
  %11 = load i32, i32* %i, align 4, !dbg !2750
  %idxprom8 = sext i32 %11 to i64, !dbg !2751
  %arrayidx9 = getelementptr inbounds [27 x i8*], [27 x i8*]* @print_class_cover.reg_class_names, i64 0, i64 %idxprom8, !dbg !2751
  %12 = load i8*, i8** %arrayidx9, align 8, !dbg !2751
  %13 = load i32, i32* %i, align 4, !dbg !2752
  %idxprom10 = sext i32 %13 to i64, !dbg !2753
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom10, !dbg !2753
  %14 = load i32, i32* %arrayidx11, align 4, !dbg !2753
  %idxprom12 = zext i32 %14 to i64, !dbg !2754
  %arrayidx13 = getelementptr inbounds [27 x i8*], [27 x i8*]* @print_class_cover.reg_class_names, i64 0, i64 %idxprom12, !dbg !2754
  %15 = load i8*, i8** %arrayidx13, align 8, !dbg !2754
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0), i8* %12, i8* %15), !dbg !2755
  br label %for.inc15, !dbg !2755

for.inc15:                                        ; preds = %for.body7
  %16 = load i32, i32* %i, align 4, !dbg !2756
  %inc16 = add nsw i32 %16, 1, !dbg !2756
  store i32 %inc16, i32* %i, align 4, !dbg !2756
  br label %for.cond5, !dbg !2757, !llvm.loop !2758

for.end17:                                        ; preds = %for.cond5
  ret void, !dbg !2760
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_init_register_move_cost(i32 %mode) #0 !dbg !2761 {
entry:
  %mode.addr = alloca i32, align 4
  %cl1 = alloca i32, align 4
  %cl2 = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2764, metadata !DIExpression()), !dbg !2765
  call void @llvm.dbg.declare(metadata i32* %cl1, metadata !2766, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata i32* %cl2, metadata !2768, metadata !DIExpression()), !dbg !2769
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2770
  %idxprom = zext i32 %0 to i64, !dbg !2772
  %arrayidx = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @move_cost, i64 0, i64 %idxprom, !dbg !2772
  %1 = load [27 x i16]*, [27 x i16]** %arrayidx, align 8, !dbg !2772
  %cmp = icmp eq [27 x i16]* %1, null, !dbg !2773
  br i1 %cmp, label %if.then, label %if.end, !dbg !2774

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !2775
  call void @init_move_cost(i32 %2), !dbg !2776
  br label %if.end, !dbg !2776

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !2777
  %idxprom1 = zext i32 %3 to i64, !dbg !2778
  %arrayidx2 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @move_cost, i64 0, i64 %idxprom1, !dbg !2778
  %4 = load [27 x i16]*, [27 x i16]** %arrayidx2, align 8, !dbg !2778
  %5 = load i32, i32* %mode.addr, align 4, !dbg !2779
  %idxprom3 = zext i32 %5 to i64, !dbg !2780
  %arrayidx4 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_register_move_cost, i64 0, i64 %idxprom3, !dbg !2780
  store [27 x i16]* %4, [27 x i16]** %arrayidx4, align 8, !dbg !2781
  %call = call i8* @xmalloc(i64 1458), !dbg !2782
  %6 = bitcast i8* %call to [27 x i16]*, !dbg !2783
  %7 = load i32, i32* %mode.addr, align 4, !dbg !2784
  %idxprom5 = zext i32 %7 to i64, !dbg !2785
  %arrayidx6 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom5, !dbg !2785
  store [27 x i16]* %6, [27 x i16]** %arrayidx6, align 8, !dbg !2786
  %8 = load i32, i32* %mode.addr, align 4, !dbg !2787
  %idxprom7 = zext i32 %8 to i64, !dbg !2788
  %arrayidx8 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom7, !dbg !2788
  %9 = load [27 x i16]*, [27 x i16]** %arrayidx8, align 8, !dbg !2788
  %10 = bitcast [27 x i16]* %9 to i8*, !dbg !2789
  %11 = load i32, i32* %mode.addr, align 4, !dbg !2790
  %idxprom9 = zext i32 %11 to i64, !dbg !2791
  %arrayidx10 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @may_move_in_cost, i64 0, i64 %idxprom9, !dbg !2791
  %12 = load [27 x i16]*, [27 x i16]** %arrayidx10, align 8, !dbg !2791
  %13 = bitcast [27 x i16]* %12 to i8*, !dbg !2789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %10, i8* align 2 %13, i64 1458, i1 false), !dbg !2789
  %call11 = call i8* @xmalloc(i64 1458), !dbg !2792
  %14 = bitcast i8* %call11 to [27 x i16]*, !dbg !2793
  %15 = load i32, i32* %mode.addr, align 4, !dbg !2794
  %idxprom12 = zext i32 %15 to i64, !dbg !2795
  %arrayidx13 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom12, !dbg !2795
  store [27 x i16]* %14, [27 x i16]** %arrayidx13, align 8, !dbg !2796
  %16 = load i32, i32* %mode.addr, align 4, !dbg !2797
  %idxprom14 = zext i32 %16 to i64, !dbg !2798
  %arrayidx15 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom14, !dbg !2798
  %17 = load [27 x i16]*, [27 x i16]** %arrayidx15, align 8, !dbg !2798
  %18 = bitcast [27 x i16]* %17 to i8*, !dbg !2799
  %19 = load i32, i32* %mode.addr, align 4, !dbg !2800
  %idxprom16 = zext i32 %19 to i64, !dbg !2801
  %arrayidx17 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @may_move_out_cost, i64 0, i64 %idxprom16, !dbg !2801
  %20 = load [27 x i16]*, [27 x i16]** %arrayidx17, align 8, !dbg !2801
  %21 = bitcast [27 x i16]* %20 to i8*, !dbg !2799
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %18, i8* align 2 %21, i64 1458, i1 false), !dbg !2799
  store i32 0, i32* %cl1, align 4, !dbg !2802
  br label %for.cond, !dbg !2804

for.cond:                                         ; preds = %for.inc47, %if.end
  %22 = load i32, i32* %cl1, align 4, !dbg !2805
  %cmp18 = icmp slt i32 %22, 27, !dbg !2807
  br i1 %cmp18, label %for.body, label %for.end49, !dbg !2808

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %cl2, align 4, !dbg !2809
  br label %for.cond19, !dbg !2812

for.cond19:                                       ; preds = %for.inc, %for.body
  %23 = load i32, i32* %cl2, align 4, !dbg !2813
  %cmp20 = icmp slt i32 %23, 27, !dbg !2815
  br i1 %cmp20, label %for.body21, label %for.end, !dbg !2816

for.body21:                                       ; preds = %for.cond19
  %24 = load i32, i32* %cl1, align 4, !dbg !2817
  %idxprom22 = sext i32 %24 to i64, !dbg !2820
  %arrayidx23 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_class_subset_p, i64 0, i64 %idxprom22, !dbg !2820
  %25 = load i32, i32* %cl2, align 4, !dbg !2821
  %idxprom24 = sext i32 %25 to i64, !dbg !2820
  %arrayidx25 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx23, i64 0, i64 %idxprom24, !dbg !2820
  %26 = load i32, i32* %arrayidx25, align 4, !dbg !2820
  %tobool = icmp ne i32 %26, 0, !dbg !2820
  br i1 %tobool, label %if.then26, label %if.end33, !dbg !2822

if.then26:                                        ; preds = %for.body21
  %27 = load i32, i32* %mode.addr, align 4, !dbg !2823
  %idxprom27 = zext i32 %27 to i64, !dbg !2824
  %arrayidx28 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom27, !dbg !2824
  %28 = load [27 x i16]*, [27 x i16]** %arrayidx28, align 8, !dbg !2824
  %29 = load i32, i32* %cl1, align 4, !dbg !2825
  %idxprom29 = sext i32 %29 to i64, !dbg !2824
  %arrayidx30 = getelementptr inbounds [27 x i16], [27 x i16]* %28, i64 %idxprom29, !dbg !2824
  %30 = load i32, i32* %cl2, align 4, !dbg !2826
  %idxprom31 = sext i32 %30 to i64, !dbg !2824
  %arrayidx32 = getelementptr inbounds [27 x i16], [27 x i16]* %arrayidx30, i64 0, i64 %idxprom31, !dbg !2824
  store i16 0, i16* %arrayidx32, align 2, !dbg !2827
  br label %if.end33, !dbg !2824

if.end33:                                         ; preds = %if.then26, %for.body21
  %31 = load i32, i32* %cl2, align 4, !dbg !2828
  %idxprom34 = sext i32 %31 to i64, !dbg !2830
  %arrayidx35 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_class_subset_p, i64 0, i64 %idxprom34, !dbg !2830
  %32 = load i32, i32* %cl1, align 4, !dbg !2831
  %idxprom36 = sext i32 %32 to i64, !dbg !2830
  %arrayidx37 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx35, i64 0, i64 %idxprom36, !dbg !2830
  %33 = load i32, i32* %arrayidx37, align 4, !dbg !2830
  %tobool38 = icmp ne i32 %33, 0, !dbg !2830
  br i1 %tobool38, label %if.then39, label %if.end46, !dbg !2832

if.then39:                                        ; preds = %if.end33
  %34 = load i32, i32* %mode.addr, align 4, !dbg !2833
  %idxprom40 = zext i32 %34 to i64, !dbg !2834
  %arrayidx41 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom40, !dbg !2834
  %35 = load [27 x i16]*, [27 x i16]** %arrayidx41, align 8, !dbg !2834
  %36 = load i32, i32* %cl1, align 4, !dbg !2835
  %idxprom42 = sext i32 %36 to i64, !dbg !2834
  %arrayidx43 = getelementptr inbounds [27 x i16], [27 x i16]* %35, i64 %idxprom42, !dbg !2834
  %37 = load i32, i32* %cl2, align 4, !dbg !2836
  %idxprom44 = sext i32 %37 to i64, !dbg !2834
  %arrayidx45 = getelementptr inbounds [27 x i16], [27 x i16]* %arrayidx43, i64 0, i64 %idxprom44, !dbg !2834
  store i16 0, i16* %arrayidx45, align 2, !dbg !2837
  br label %if.end46, !dbg !2834

if.end46:                                         ; preds = %if.then39, %if.end33
  br label %for.inc, !dbg !2838

for.inc:                                          ; preds = %if.end46
  %38 = load i32, i32* %cl2, align 4, !dbg !2839
  %inc = add nsw i32 %38, 1, !dbg !2839
  store i32 %inc, i32* %cl2, align 4, !dbg !2839
  br label %for.cond19, !dbg !2840, !llvm.loop !2841

for.end:                                          ; preds = %for.cond19
  br label %for.inc47, !dbg !2843

for.inc47:                                        ; preds = %for.end
  %39 = load i32, i32* %cl1, align 4, !dbg !2844
  %inc48 = add nsw i32 %39, 1, !dbg !2844
  store i32 %inc48, i32* %cl1, align 4, !dbg !2844
  br label %for.cond, !dbg !2845, !llvm.loop !2846

for.end49:                                        ; preds = %for.cond
  ret void, !dbg !2848
}

declare dso_local void @init_move_cost(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_init_once() #0 !dbg !2849 {
entry:
  %mode = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2850, metadata !DIExpression()), !dbg !2851
  store i32 0, i32* %mode, align 4, !dbg !2852
  br label %for.cond, !dbg !2854

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %mode, align 4, !dbg !2855
  %cmp = icmp slt i32 %0, 87, !dbg !2857
  br i1 %cmp, label %for.body, label %for.end, !dbg !2858

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %mode, align 4, !dbg !2859
  %idxprom = sext i32 %1 to i64, !dbg !2861
  %arrayidx = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_register_move_cost, i64 0, i64 %idxprom, !dbg !2861
  store [27 x i16]* null, [27 x i16]** %arrayidx, align 8, !dbg !2862
  %2 = load i32, i32* %mode, align 4, !dbg !2863
  %idxprom1 = sext i32 %2 to i64, !dbg !2864
  %arrayidx2 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom1, !dbg !2864
  store [27 x i16]* null, [27 x i16]** %arrayidx2, align 8, !dbg !2865
  %3 = load i32, i32* %mode, align 4, !dbg !2866
  %idxprom3 = sext i32 %3 to i64, !dbg !2867
  %arrayidx4 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom3, !dbg !2867
  store [27 x i16]* null, [27 x i16]** %arrayidx4, align 8, !dbg !2868
  br label %for.inc, !dbg !2869

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %mode, align 4, !dbg !2870
  %inc = add nsw i32 %4, 1, !dbg !2870
  store i32 %inc, i32* %mode, align 4, !dbg !2870
  br label %for.cond, !dbg !2871, !llvm.loop !2872

for.end:                                          ; preds = %for.cond
  call void @ira_init_costs_once(), !dbg !2874
  ret void, !dbg !2875
}

declare dso_local void @ira_init_costs_once() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_init() #0 !dbg !2876 {
entry:
  call void @free_register_move_costs(), !dbg !2877
  call void @setup_reg_mode_hard_regset(), !dbg !2878
  %0 = load i32, i32* @flag_omit_frame_pointer, align 4, !dbg !2879
  %cmp = icmp ne i32 %0, 0, !dbg !2880
  %conv = zext i1 %cmp to i32, !dbg !2880
  %conv1 = trunc i32 %conv to i8, !dbg !2879
  call void @setup_alloc_regs(i8 zeroext %conv1), !dbg !2881
  call void @setup_class_subset_and_memory_move_costs(), !dbg !2882
  call void @find_reg_class_closure(), !dbg !2883
  call void @setup_hard_regno_cover_class(), !dbg !2884
  call void @setup_reg_class_nregs(), !dbg !2885
  call void @setup_prohibited_class_mode_regs(), !dbg !2886
  call void @ira_init_costs(), !dbg !2887
  ret void, !dbg !2888
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_register_move_costs() #0 !dbg !2889 {
entry:
  %mode = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2890, metadata !DIExpression()), !dbg !2891
  store i32 0, i32* %mode, align 4, !dbg !2892
  br label %for.cond, !dbg !2894

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %mode, align 4, !dbg !2895
  %cmp = icmp slt i32 %0, 87, !dbg !2897
  br i1 %cmp, label %for.body, label %for.end, !dbg !2898

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %mode, align 4, !dbg !2899
  %idxprom = sext i32 %1 to i64, !dbg !2902
  %arrayidx = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom, !dbg !2902
  %2 = load [27 x i16]*, [27 x i16]** %arrayidx, align 8, !dbg !2902
  %cmp1 = icmp ne [27 x i16]* %2, null, !dbg !2903
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2904

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %mode, align 4, !dbg !2905
  %idxprom2 = sext i32 %3 to i64, !dbg !2906
  %arrayidx3 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom2, !dbg !2906
  %4 = load [27 x i16]*, [27 x i16]** %arrayidx3, align 8, !dbg !2906
  %5 = bitcast [27 x i16]* %4 to i8*, !dbg !2906
  call void @free(i8* %5), !dbg !2907
  br label %if.end, !dbg !2907

if.end:                                           ; preds = %if.then, %for.body
  %6 = load i32, i32* %mode, align 4, !dbg !2908
  %idxprom4 = sext i32 %6 to i64, !dbg !2910
  %arrayidx5 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom4, !dbg !2910
  %7 = load [27 x i16]*, [27 x i16]** %arrayidx5, align 8, !dbg !2910
  %cmp6 = icmp ne [27 x i16]* %7, null, !dbg !2911
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !2912

if.then7:                                         ; preds = %if.end
  %8 = load i32, i32* %mode, align 4, !dbg !2913
  %idxprom8 = sext i32 %8 to i64, !dbg !2914
  %arrayidx9 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom8, !dbg !2914
  %9 = load [27 x i16]*, [27 x i16]** %arrayidx9, align 8, !dbg !2914
  %10 = bitcast [27 x i16]* %9 to i8*, !dbg !2914
  call void @free(i8* %10), !dbg !2915
  br label %if.end10, !dbg !2915

if.end10:                                         ; preds = %if.then7, %if.end
  %11 = load i32, i32* %mode, align 4, !dbg !2916
  %idxprom11 = sext i32 %11 to i64, !dbg !2917
  %arrayidx12 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_register_move_cost, i64 0, i64 %idxprom11, !dbg !2917
  store [27 x i16]* null, [27 x i16]** %arrayidx12, align 8, !dbg !2918
  %12 = load i32, i32* %mode, align 4, !dbg !2919
  %idxprom13 = sext i32 %12 to i64, !dbg !2920
  %arrayidx14 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_in_cost, i64 0, i64 %idxprom13, !dbg !2920
  store [27 x i16]* null, [27 x i16]** %arrayidx14, align 8, !dbg !2921
  %13 = load i32, i32* %mode, align 4, !dbg !2922
  %idxprom15 = sext i32 %13 to i64, !dbg !2923
  %arrayidx16 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_may_move_out_cost, i64 0, i64 %idxprom15, !dbg !2923
  store [27 x i16]* null, [27 x i16]** %arrayidx16, align 8, !dbg !2924
  br label %for.inc, !dbg !2925

for.inc:                                          ; preds = %if.end10
  %14 = load i32, i32* %mode, align 4, !dbg !2926
  %inc = add nsw i32 %14, 1, !dbg !2926
  store i32 %inc, i32* %mode, align 4, !dbg !2926
  br label %for.cond, !dbg !2927, !llvm.loop !2928

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2930
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_reg_mode_hard_regset() #0 !dbg !2931 {
entry:
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2932, metadata !DIExpression()), !dbg !2933
  call void @llvm.dbg.declare(metadata i32* %m, metadata !2934, metadata !DIExpression()), !dbg !2935
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !2936, metadata !DIExpression()), !dbg !2937
  store i32 0, i32* %m, align 4, !dbg !2938
  br label %for.cond, !dbg !2940

for.cond:                                         ; preds = %for.inc23, %entry
  %0 = load i32, i32* %m, align 4, !dbg !2941
  %cmp = icmp slt i32 %0, 87, !dbg !2943
  br i1 %cmp, label %for.body, label %for.end25, !dbg !2944

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %hard_regno, align 4, !dbg !2945
  br label %for.cond1, !dbg !2947

for.cond1:                                        ; preds = %for.inc21, %for.body
  %1 = load i32, i32* %hard_regno, align 4, !dbg !2948
  %cmp2 = icmp slt i32 %1, 53, !dbg !2950
  br i1 %cmp2, label %for.body3, label %for.end22, !dbg !2951

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %hard_regno, align 4, !dbg !2952
  %idxprom = sext i32 %2 to i64, !dbg !2952
  %arrayidx = getelementptr inbounds [53 x [87 x i64]], [53 x [87 x i64]]* @ira_reg_mode_hard_regset, i64 0, i64 %idxprom, !dbg !2952
  %3 = load i32, i32* %m, align 4, !dbg !2952
  %idxprom4 = sext i32 %3 to i64, !dbg !2952
  %arrayidx5 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2952
  store i64 0, i64* %arrayidx5, align 8, !dbg !2952
  %4 = load i32, i32* %hard_regno, align 4, !dbg !2954
  %idxprom6 = sext i32 %4 to i64, !dbg !2956
  %arrayidx7 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom6, !dbg !2956
  %5 = load i32, i32* %m, align 4, !dbg !2957
  %idxprom8 = sext i32 %5 to i64, !dbg !2956
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !2956
  %6 = load i8, i8* %arrayidx9, align 1, !dbg !2956
  %conv = zext i8 %6 to i32, !dbg !2956
  %sub = sub nsw i32 %conv, 1, !dbg !2958
  store i32 %sub, i32* %i, align 4, !dbg !2959
  br label %for.cond10, !dbg !2960

for.cond10:                                       ; preds = %for.inc, %for.body3
  %7 = load i32, i32* %i, align 4, !dbg !2961
  %cmp11 = icmp sge i32 %7, 0, !dbg !2963
  br i1 %cmp11, label %for.body13, label %for.end, !dbg !2964

for.body13:                                       ; preds = %for.cond10
  %8 = load i32, i32* %hard_regno, align 4, !dbg !2965
  %9 = load i32, i32* %i, align 4, !dbg !2967
  %add = add nsw i32 %8, %9, !dbg !2968
  %cmp14 = icmp slt i32 %add, 53, !dbg !2969
  br i1 %cmp14, label %if.then, label %if.end, !dbg !2970

if.then:                                          ; preds = %for.body13
  %10 = load i32, i32* %hard_regno, align 4, !dbg !2971
  %11 = load i32, i32* %i, align 4, !dbg !2971
  %add16 = add nsw i32 %10, %11, !dbg !2971
  %sh_prom = zext i32 %add16 to i64, !dbg !2971
  %shl = shl i64 1, %sh_prom, !dbg !2971
  %12 = load i32, i32* %hard_regno, align 4, !dbg !2971
  %idxprom17 = sext i32 %12 to i64, !dbg !2971
  %arrayidx18 = getelementptr inbounds [53 x [87 x i64]], [53 x [87 x i64]]* @ira_reg_mode_hard_regset, i64 0, i64 %idxprom17, !dbg !2971
  %13 = load i32, i32* %m, align 4, !dbg !2971
  %idxprom19 = sext i32 %13 to i64, !dbg !2971
  %arrayidx20 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx18, i64 0, i64 %idxprom19, !dbg !2971
  %14 = load i64, i64* %arrayidx20, align 8, !dbg !2971
  %or = or i64 %14, %shl, !dbg !2971
  store i64 %or, i64* %arrayidx20, align 8, !dbg !2971
  br label %if.end, !dbg !2971

if.end:                                           ; preds = %if.then, %for.body13
  br label %for.inc, !dbg !2972

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !2973
  %dec = add nsw i32 %15, -1, !dbg !2973
  store i32 %dec, i32* %i, align 4, !dbg !2973
  br label %for.cond10, !dbg !2974, !llvm.loop !2975

for.end:                                          ; preds = %for.cond10
  br label %for.inc21, !dbg !2977

for.inc21:                                        ; preds = %for.end
  %16 = load i32, i32* %hard_regno, align 4, !dbg !2978
  %inc = add nsw i32 %16, 1, !dbg !2978
  store i32 %inc, i32* %hard_regno, align 4, !dbg !2978
  br label %for.cond1, !dbg !2979, !llvm.loop !2980

for.end22:                                        ; preds = %for.cond1
  br label %for.inc23, !dbg !2981

for.inc23:                                        ; preds = %for.end22
  %17 = load i32, i32* %m, align 4, !dbg !2982
  %inc24 = add nsw i32 %17, 1, !dbg !2982
  store i32 %inc24, i32* %m, align 4, !dbg !2982
  br label %for.cond, !dbg !2983, !llvm.loop !2984

for.end25:                                        ; preds = %for.cond
  ret void, !dbg !2986
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_alloc_regs(i8 zeroext %use_hard_frame_p) #0 !dbg !2987 {
entry:
  %use_hard_frame_p.addr = alloca i8, align 1
  store i8 %use_hard_frame_p, i8* %use_hard_frame_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_hard_frame_p.addr, metadata !2990, metadata !DIExpression()), !dbg !2991
  %0 = load i64, i64* @fixed_reg_set, align 8, !dbg !2992
  store i64 %0, i64* @no_unit_alloc_regs, align 8, !dbg !2992
  %1 = load i8, i8* %use_hard_frame_p.addr, align 1, !dbg !2993
  %tobool = icmp ne i8 %1, 0, !dbg !2993
  br i1 %tobool, label %if.end, label %if.then, !dbg !2995

if.then:                                          ; preds = %entry
  %2 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !2996
  %or = or i64 %2, 64, !dbg !2996
  store i64 %or, i64* @no_unit_alloc_regs, align 8, !dbg !2996
  br label %if.end, !dbg !2996

if.end:                                           ; preds = %if.then, %entry
  call void @setup_class_hard_regs(), !dbg !2997
  call void @setup_available_class_regs(), !dbg !2998
  ret void, !dbg !2999
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_class_subset_and_memory_move_costs() #0 !dbg !3000 {
entry:
  %cl = alloca i32, align 4
  %cl2 = alloca i32, align 4
  %mode = alloca i32, align 4
  %temp_hard_regset2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3001, metadata !DIExpression()), !dbg !3002
  call void @llvm.dbg.declare(metadata i32* %cl2, metadata !3003, metadata !DIExpression()), !dbg !3004
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3005, metadata !DIExpression()), !dbg !3006
  call void @llvm.dbg.declare(metadata i64* %temp_hard_regset2, metadata !3007, metadata !DIExpression()), !dbg !3008
  store i32 0, i32* %mode, align 4, !dbg !3009
  br label %for.cond, !dbg !3011

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %mode, align 4, !dbg !3012
  %cmp = icmp slt i32 %0, 87, !dbg !3014
  br i1 %cmp, label %for.body, label %for.end, !dbg !3015

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %mode, align 4, !dbg !3016
  %idxprom = sext i32 %1 to i64, !dbg !3017
  %arrayidx = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom, !dbg !3017
  %arrayidx1 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx, i64 0, i64 0, !dbg !3017
  %arrayidx2 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx1, i64 0, i64 1, !dbg !3017
  store i16 32767, i16* %arrayidx2, align 2, !dbg !3018
  %2 = load i32, i32* %mode, align 4, !dbg !3019
  %idxprom3 = sext i32 %2 to i64, !dbg !3020
  %arrayidx4 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom3, !dbg !3020
  %arrayidx5 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx4, i64 0, i64 0, !dbg !3020
  %arrayidx6 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx5, i64 0, i64 0, !dbg !3020
  store i16 32767, i16* %arrayidx6, align 4, !dbg !3021
  br label %for.inc, !dbg !3020

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %mode, align 4, !dbg !3022
  %inc = add nsw i32 %3, 1, !dbg !3022
  store i32 %inc, i32* %mode, align 4, !dbg !3022
  br label %for.cond, !dbg !3023, !llvm.loop !3024

for.end:                                          ; preds = %for.cond
  store i32 26, i32* %cl, align 4, !dbg !3026
  br label %for.cond7, !dbg !3028

for.cond7:                                        ; preds = %for.inc95, %for.end
  %4 = load i32, i32* %cl, align 4, !dbg !3029
  %cmp8 = icmp sge i32 %4, 0, !dbg !3031
  br i1 %cmp8, label %for.body9, label %for.end97, !dbg !3032

for.body9:                                        ; preds = %for.cond7
  %5 = load i32, i32* %cl, align 4, !dbg !3033
  %cmp10 = icmp ne i32 %5, 0, !dbg !3036
  br i1 %cmp10, label %if.then, label %if.end76, !dbg !3037

if.then:                                          ; preds = %for.body9
  store i32 0, i32* %mode, align 4, !dbg !3038
  br label %for.cond11, !dbg !3040

for.cond11:                                       ; preds = %for.inc73, %if.then
  %6 = load i32, i32* %mode, align 4, !dbg !3041
  %cmp12 = icmp slt i32 %6, 87, !dbg !3043
  br i1 %cmp12, label %for.body13, label %for.end75, !dbg !3044

for.body13:                                       ; preds = %for.cond11
  %7 = load i32, i32* %mode, align 4, !dbg !3045
  %8 = load i32, i32* %cl, align 4, !dbg !3045
  %call = call i32 @ix86_memory_move_cost(i32 %7, i32 %8, i32 0), !dbg !3045
  %conv = trunc i32 %call to i16, !dbg !3045
  %9 = load i32, i32* %mode, align 4, !dbg !3047
  %idxprom14 = sext i32 %9 to i64, !dbg !3048
  %arrayidx15 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom14, !dbg !3048
  %10 = load i32, i32* %cl, align 4, !dbg !3049
  %idxprom16 = sext i32 %10 to i64, !dbg !3048
  %arrayidx17 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx15, i64 0, i64 %idxprom16, !dbg !3048
  %arrayidx18 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx17, i64 0, i64 0, !dbg !3048
  store i16 %conv, i16* %arrayidx18, align 4, !dbg !3050
  %11 = load i32, i32* %mode, align 4, !dbg !3051
  %12 = load i32, i32* %cl, align 4, !dbg !3051
  %call19 = call i32 @ix86_memory_move_cost(i32 %11, i32 %12, i32 1), !dbg !3051
  %conv20 = trunc i32 %call19 to i16, !dbg !3051
  %13 = load i32, i32* %mode, align 4, !dbg !3052
  %idxprom21 = sext i32 %13 to i64, !dbg !3053
  %arrayidx22 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom21, !dbg !3053
  %14 = load i32, i32* %cl, align 4, !dbg !3054
  %idxprom23 = sext i32 %14 to i64, !dbg !3053
  %arrayidx24 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx22, i64 0, i64 %idxprom23, !dbg !3053
  %arrayidx25 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx24, i64 0, i64 1, !dbg !3053
  store i16 %conv20, i16* %arrayidx25, align 2, !dbg !3055
  %15 = load i32, i32* %mode, align 4, !dbg !3056
  %idxprom26 = sext i32 %15 to i64, !dbg !3058
  %arrayidx27 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom26, !dbg !3058
  %arrayidx28 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx27, i64 0, i64 0, !dbg !3058
  %arrayidx29 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx28, i64 0, i64 0, !dbg !3058
  %16 = load i16, i16* %arrayidx29, align 4, !dbg !3058
  %conv30 = sext i16 %16 to i32, !dbg !3058
  %17 = load i32, i32* %mode, align 4, !dbg !3059
  %idxprom31 = sext i32 %17 to i64, !dbg !3060
  %arrayidx32 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom31, !dbg !3060
  %18 = load i32, i32* %cl, align 4, !dbg !3061
  %idxprom33 = sext i32 %18 to i64, !dbg !3060
  %arrayidx34 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx32, i64 0, i64 %idxprom33, !dbg !3060
  %arrayidx35 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx34, i64 0, i64 0, !dbg !3060
  %19 = load i16, i16* %arrayidx35, align 4, !dbg !3060
  %conv36 = sext i16 %19 to i32, !dbg !3060
  %cmp37 = icmp sgt i32 %conv30, %conv36, !dbg !3062
  br i1 %cmp37, label %if.then39, label %if.end, !dbg !3063

if.then39:                                        ; preds = %for.body13
  %20 = load i32, i32* %mode, align 4, !dbg !3064
  %idxprom40 = sext i32 %20 to i64, !dbg !3065
  %arrayidx41 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom40, !dbg !3065
  %21 = load i32, i32* %cl, align 4, !dbg !3066
  %idxprom42 = sext i32 %21 to i64, !dbg !3065
  %arrayidx43 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx41, i64 0, i64 %idxprom42, !dbg !3065
  %arrayidx44 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx43, i64 0, i64 0, !dbg !3065
  %22 = load i16, i16* %arrayidx44, align 4, !dbg !3065
  %23 = load i32, i32* %mode, align 4, !dbg !3067
  %idxprom45 = sext i32 %23 to i64, !dbg !3068
  %arrayidx46 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom45, !dbg !3068
  %arrayidx47 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx46, i64 0, i64 0, !dbg !3068
  %arrayidx48 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx47, i64 0, i64 0, !dbg !3068
  store i16 %22, i16* %arrayidx48, align 4, !dbg !3069
  br label %if.end, !dbg !3068

if.end:                                           ; preds = %if.then39, %for.body13
  %24 = load i32, i32* %mode, align 4, !dbg !3070
  %idxprom49 = sext i32 %24 to i64, !dbg !3072
  %arrayidx50 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom49, !dbg !3072
  %arrayidx51 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx50, i64 0, i64 0, !dbg !3072
  %arrayidx52 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx51, i64 0, i64 1, !dbg !3072
  %25 = load i16, i16* %arrayidx52, align 2, !dbg !3072
  %conv53 = sext i16 %25 to i32, !dbg !3072
  %26 = load i32, i32* %mode, align 4, !dbg !3073
  %idxprom54 = sext i32 %26 to i64, !dbg !3074
  %arrayidx55 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom54, !dbg !3074
  %27 = load i32, i32* %cl, align 4, !dbg !3075
  %idxprom56 = sext i32 %27 to i64, !dbg !3074
  %arrayidx57 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx55, i64 0, i64 %idxprom56, !dbg !3074
  %arrayidx58 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx57, i64 0, i64 1, !dbg !3074
  %28 = load i16, i16* %arrayidx58, align 2, !dbg !3074
  %conv59 = sext i16 %28 to i32, !dbg !3074
  %cmp60 = icmp sgt i32 %conv53, %conv59, !dbg !3076
  br i1 %cmp60, label %if.then62, label %if.end72, !dbg !3077

if.then62:                                        ; preds = %if.end
  %29 = load i32, i32* %mode, align 4, !dbg !3078
  %idxprom63 = sext i32 %29 to i64, !dbg !3079
  %arrayidx64 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom63, !dbg !3079
  %30 = load i32, i32* %cl, align 4, !dbg !3080
  %idxprom65 = sext i32 %30 to i64, !dbg !3079
  %arrayidx66 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx64, i64 0, i64 %idxprom65, !dbg !3079
  %arrayidx67 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx66, i64 0, i64 1, !dbg !3079
  %31 = load i16, i16* %arrayidx67, align 2, !dbg !3079
  %32 = load i32, i32* %mode, align 4, !dbg !3081
  %idxprom68 = sext i32 %32 to i64, !dbg !3082
  %arrayidx69 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom68, !dbg !3082
  %arrayidx70 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx69, i64 0, i64 0, !dbg !3082
  %arrayidx71 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx70, i64 0, i64 1, !dbg !3082
  store i16 %31, i16* %arrayidx71, align 2, !dbg !3083
  br label %if.end72, !dbg !3082

if.end72:                                         ; preds = %if.then62, %if.end
  br label %for.inc73, !dbg !3084

for.inc73:                                        ; preds = %if.end72
  %33 = load i32, i32* %mode, align 4, !dbg !3085
  %inc74 = add nsw i32 %33, 1, !dbg !3085
  store i32 %inc74, i32* %mode, align 4, !dbg !3085
  br label %for.cond11, !dbg !3086, !llvm.loop !3087

for.end75:                                        ; preds = %for.cond11
  br label %if.end76, !dbg !3088

if.end76:                                         ; preds = %for.end75, %for.body9
  store i32 26, i32* %cl2, align 4, !dbg !3089
  br label %for.cond77, !dbg !3091

for.cond77:                                       ; preds = %for.inc93, %if.end76
  %34 = load i32, i32* %cl2, align 4, !dbg !3092
  %cmp78 = icmp sge i32 %34, 0, !dbg !3094
  br i1 %cmp78, label %for.body80, label %for.end94, !dbg !3095

for.body80:                                       ; preds = %for.cond77
  %35 = load i32, i32* %cl, align 4, !dbg !3096
  %idxprom81 = sext i32 %35 to i64, !dbg !3096
  %arrayidx82 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom81, !dbg !3096
  %36 = load i64, i64* %arrayidx82, align 8, !dbg !3096
  store i64 %36, i64* @temp_hard_regset, align 8, !dbg !3096
  %37 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3098
  %neg = xor i64 %37, -1, !dbg !3098
  %38 = load i64, i64* @temp_hard_regset, align 8, !dbg !3098
  %and = and i64 %38, %neg, !dbg !3098
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !3098
  %39 = load i32, i32* %cl2, align 4, !dbg !3099
  %idxprom83 = sext i32 %39 to i64, !dbg !3099
  %arrayidx84 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom83, !dbg !3099
  %40 = load i64, i64* %arrayidx84, align 8, !dbg !3099
  store i64 %40, i64* %temp_hard_regset2, align 8, !dbg !3099
  %41 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3100
  %neg85 = xor i64 %41, -1, !dbg !3100
  %42 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3100
  %and86 = and i64 %42, %neg85, !dbg !3100
  store i64 %and86, i64* %temp_hard_regset2, align 8, !dbg !3100
  %43 = load i64, i64* @temp_hard_regset, align 8, !dbg !3101
  %44 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3102
  %call87 = call zeroext i8 @hard_reg_set_subset_p(i64 %43, i64 %44), !dbg !3103
  %conv88 = zext i8 %call87 to i32, !dbg !3103
  %45 = load i32, i32* %cl, align 4, !dbg !3104
  %idxprom89 = sext i32 %45 to i64, !dbg !3105
  %arrayidx90 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_class_subset_p, i64 0, i64 %idxprom89, !dbg !3105
  %46 = load i32, i32* %cl2, align 4, !dbg !3106
  %idxprom91 = sext i32 %46 to i64, !dbg !3105
  %arrayidx92 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx90, i64 0, i64 %idxprom91, !dbg !3105
  store i32 %conv88, i32* %arrayidx92, align 4, !dbg !3107
  br label %for.inc93, !dbg !3108

for.inc93:                                        ; preds = %for.body80
  %47 = load i32, i32* %cl2, align 4, !dbg !3109
  %dec = add nsw i32 %47, -1, !dbg !3109
  store i32 %dec, i32* %cl2, align 4, !dbg !3109
  br label %for.cond77, !dbg !3110, !llvm.loop !3111

for.end94:                                        ; preds = %for.cond77
  br label %for.inc95, !dbg !3113

for.inc95:                                        ; preds = %for.end94
  %48 = load i32, i32* %cl, align 4, !dbg !3114
  %dec96 = add nsw i32 %48, -1, !dbg !3114
  store i32 %dec96, i32* %cl, align 4, !dbg !3114
  br label %for.cond7, !dbg !3115, !llvm.loop !3116

for.end97:                                        ; preds = %for.cond7
  ret void, !dbg !3118
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_reg_class_closure() #0 !dbg !3119 {
entry:
  call void @setup_reg_subclasses(), !dbg !3120
  call void @setup_cover_and_important_classes(), !dbg !3121
  call void @setup_class_translate(), !dbg !3122
  call void @reorder_important_classes(), !dbg !3123
  call void @setup_reg_class_relations(), !dbg !3124
  ret void, !dbg !3125
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_hard_regno_cover_class() #0 !dbg !3126 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cl = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3127, metadata !DIExpression()), !dbg !3128
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3129, metadata !DIExpression()), !dbg !3130
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3131, metadata !DIExpression()), !dbg !3132
  store i32 0, i32* %i, align 4, !dbg !3133
  br label %for.cond, !dbg !3135

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3136
  %cmp = icmp slt i32 %0, 53, !dbg !3138
  br i1 %cmp, label %for.body, label %for.end16, !dbg !3139

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3140
  %idxprom = sext i32 %1 to i64, !dbg !3142
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @ira_hard_regno_cover_class, i64 0, i64 %idxprom, !dbg !3142
  store i32 0, i32* %arrayidx, align 4, !dbg !3143
  store i32 0, i32* %j, align 4, !dbg !3144
  br label %for.cond1, !dbg !3146

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !3147
  %3 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3149
  %cmp2 = icmp slt i32 %2, %3, !dbg !3150
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3151

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %j, align 4, !dbg !3152
  %idxprom4 = sext i32 %4 to i64, !dbg !3154
  %arrayidx5 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom4, !dbg !3154
  %5 = load i32, i32* %arrayidx5, align 4, !dbg !3154
  store i32 %5, i32* %cl, align 4, !dbg !3155
  %6 = load i32, i32* %cl, align 4, !dbg !3156
  %idxprom6 = zext i32 %6 to i64, !dbg !3158
  %arrayidx7 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom6, !dbg !3158
  %7 = load i32, i32* %i, align 4, !dbg !3159
  %idxprom8 = sext i32 %7 to i64, !dbg !3158
  %arrayidx9 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !3158
  %8 = load i16, i16* %arrayidx9, align 2, !dbg !3158
  %conv = sext i16 %8 to i32, !dbg !3158
  %cmp10 = icmp sge i32 %conv, 0, !dbg !3160
  br i1 %cmp10, label %if.then, label %if.end, !dbg !3161

if.then:                                          ; preds = %for.body3
  %9 = load i32, i32* %cl, align 4, !dbg !3162
  %10 = load i32, i32* %i, align 4, !dbg !3164
  %idxprom12 = sext i32 %10 to i64, !dbg !3165
  %arrayidx13 = getelementptr inbounds [53 x i32], [53 x i32]* @ira_hard_regno_cover_class, i64 0, i64 %idxprom12, !dbg !3165
  store i32 %9, i32* %arrayidx13, align 4, !dbg !3166
  br label %for.end, !dbg !3167

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !3168

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %j, align 4, !dbg !3169
  %inc = add nsw i32 %11, 1, !dbg !3169
  store i32 %inc, i32* %j, align 4, !dbg !3169
  br label %for.cond1, !dbg !3170, !llvm.loop !3171

for.end:                                          ; preds = %if.then, %for.cond1
  br label %for.inc14, !dbg !3173

for.inc14:                                        ; preds = %for.end
  %12 = load i32, i32* %i, align 4, !dbg !3174
  %inc15 = add nsw i32 %12, 1, !dbg !3174
  store i32 %inc15, i32* %i, align 4, !dbg !3174
  br label %for.cond, !dbg !3175, !llvm.loop !3176

for.end16:                                        ; preds = %for.cond
  ret void, !dbg !3178
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_reg_class_nregs() #0 !dbg !3179 {
entry:
  %cl = alloca i32, align 4
  %m = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3180, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata i32* %m, metadata !3182, metadata !DIExpression()), !dbg !3183
  store i32 -1, i32* @ira_max_nregs, align 4, !dbg !3184
  store i32 0, i32* %cl, align 4, !dbg !3185
  br label %for.cond, !dbg !3187

for.cond:                                         ; preds = %for.inc36, %entry
  %0 = load i32, i32* %cl, align 4, !dbg !3188
  %cmp = icmp slt i32 %0, 27, !dbg !3190
  br i1 %cmp, label %for.body, label %for.end38, !dbg !3191

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %m, align 4, !dbg !3192
  br label %for.cond1, !dbg !3194

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %m, align 4, !dbg !3195
  %cmp2 = icmp slt i32 %1, 87, !dbg !3197
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3198

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %cl, align 4, !dbg !3199
  %call = call i32 @reg_classes_intersect_p(i32 %2, i32 13), !dbg !3199
  %tobool = icmp ne i32 %call, 0, !dbg !3199
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3199

cond.true:                                        ; preds = %for.body3
  %3 = load i32, i32* %m, align 4, !dbg !3199
  %idxprom = zext i32 %3 to i64, !dbg !3199
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3199
  %4 = load i8, i8* %arrayidx, align 1, !dbg !3199
  %conv = zext i8 %4 to i32, !dbg !3199
  %cmp4 = icmp eq i32 %conv, 10, !dbg !3199
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !3199

lor.rhs:                                          ; preds = %cond.true
  %5 = load i32, i32* %m, align 4, !dbg !3199
  %idxprom6 = zext i32 %5 to i64, !dbg !3199
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !3199
  %6 = load i8, i8* %arrayidx7, align 1, !dbg !3199
  %conv8 = zext i8 %6 to i32, !dbg !3199
  %cmp9 = icmp eq i32 %conv8, 11, !dbg !3199
  br label %lor.end, !dbg !3199

lor.end:                                          ; preds = %lor.rhs, %cond.true
  %7 = phi i1 [ true, %cond.true ], [ %cmp9, %lor.rhs ]
  %8 = zext i1 %7 to i64, !dbg !3199
  %cond = select i1 %7, i32 2, i32 1, !dbg !3199
  br label %cond.end20, !dbg !3199

cond.false:                                       ; preds = %for.body3
  %9 = load i32, i32* %m, align 4, !dbg !3199
  %cmp11 = icmp eq i32 %9, 40, !dbg !3199
  br i1 %cmp11, label %cond.true13, label %cond.false14, !dbg !3199

cond.true13:                                      ; preds = %cond.false
  br label %cond.end, !dbg !3199

cond.false14:                                     ; preds = %cond.false
  %10 = load i32, i32* %m, align 4, !dbg !3199
  %idxprom15 = zext i32 %10 to i64, !dbg !3199
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom15, !dbg !3199
  %11 = load i8, i8* %arrayidx16, align 1, !dbg !3199
  %conv17 = zext i8 %11 to i16, !dbg !3199
  %conv18 = zext i16 %conv17 to i32, !dbg !3199
  br label %cond.end, !dbg !3199

cond.end:                                         ; preds = %cond.false14, %cond.true13
  %cond19 = phi i32 [ 12, %cond.true13 ], [ %conv18, %cond.false14 ], !dbg !3199
  %add = add nsw i32 %cond19, 4, !dbg !3199
  %sub = sub nsw i32 %add, 1, !dbg !3199
  %div = sdiv i32 %sub, 4, !dbg !3199
  br label %cond.end20, !dbg !3199

cond.end20:                                       ; preds = %cond.end, %lor.end
  %cond21 = phi i32 [ %cond, %lor.end ], [ %div, %cond.end ], !dbg !3199
  %12 = load i32, i32* %cl, align 4, !dbg !3201
  %idxprom22 = sext i32 %12 to i64, !dbg !3202
  %arrayidx23 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom22, !dbg !3202
  %13 = load i32, i32* %m, align 4, !dbg !3203
  %idxprom24 = sext i32 %13 to i64, !dbg !3202
  %arrayidx25 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx23, i64 0, i64 %idxprom24, !dbg !3202
  store i32 %cond21, i32* %arrayidx25, align 4, !dbg !3204
  %14 = load i32, i32* @ira_max_nregs, align 4, !dbg !3205
  %15 = load i32, i32* %cl, align 4, !dbg !3207
  %idxprom26 = sext i32 %15 to i64, !dbg !3208
  %arrayidx27 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom26, !dbg !3208
  %16 = load i32, i32* %m, align 4, !dbg !3209
  %idxprom28 = sext i32 %16 to i64, !dbg !3208
  %arrayidx29 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx27, i64 0, i64 %idxprom28, !dbg !3208
  %17 = load i32, i32* %arrayidx29, align 4, !dbg !3208
  %cmp30 = icmp slt i32 %14, %17, !dbg !3210
  br i1 %cmp30, label %if.then, label %if.end, !dbg !3211

if.then:                                          ; preds = %cond.end20
  %18 = load i32, i32* %cl, align 4, !dbg !3212
  %idxprom32 = sext i32 %18 to i64, !dbg !3213
  %arrayidx33 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom32, !dbg !3213
  %19 = load i32, i32* %m, align 4, !dbg !3214
  %idxprom34 = sext i32 %19 to i64, !dbg !3213
  %arrayidx35 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx33, i64 0, i64 %idxprom34, !dbg !3213
  %20 = load i32, i32* %arrayidx35, align 4, !dbg !3213
  store i32 %20, i32* @ira_max_nregs, align 4, !dbg !3215
  br label %if.end, !dbg !3216

if.end:                                           ; preds = %if.then, %cond.end20
  br label %for.inc, !dbg !3217

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %m, align 4, !dbg !3218
  %inc = add nsw i32 %21, 1, !dbg !3218
  store i32 %inc, i32* %m, align 4, !dbg !3218
  br label %for.cond1, !dbg !3219, !llvm.loop !3220

for.end:                                          ; preds = %for.cond1
  br label %for.inc36, !dbg !3221

for.inc36:                                        ; preds = %for.end
  %22 = load i32, i32* %cl, align 4, !dbg !3222
  %inc37 = add nsw i32 %22, 1, !dbg !3222
  store i32 %inc37, i32* %cl, align 4, !dbg !3222
  br label %for.cond, !dbg !3223, !llvm.loop !3224

for.end38:                                        ; preds = %for.cond
  ret void, !dbg !3226
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_prohibited_class_mode_regs() #0 !dbg !3227 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %cl = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3228, metadata !DIExpression()), !dbg !3229
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3230, metadata !DIExpression()), !dbg !3231
  call void @llvm.dbg.declare(metadata i32* %k, metadata !3232, metadata !DIExpression()), !dbg !3233
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !3234, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3236, metadata !DIExpression()), !dbg !3237
  store i32 0, i32* %i, align 4, !dbg !3238
  br label %for.cond, !dbg !3240

for.cond:                                         ; preds = %for.inc23, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3241
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3243
  %cmp = icmp slt i32 %0, %1, !dbg !3244
  br i1 %cmp, label %for.body, label %for.end25, !dbg !3245

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !3246
  %idxprom = sext i32 %2 to i64, !dbg !3248
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !3248
  %3 = load i32, i32* %arrayidx, align 4, !dbg !3248
  store i32 %3, i32* %cl, align 4, !dbg !3249
  store i32 0, i32* %j, align 4, !dbg !3250
  br label %for.cond1, !dbg !3252

for.cond1:                                        ; preds = %for.inc21, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !3253
  %cmp2 = icmp slt i32 %4, 87, !dbg !3255
  br i1 %cmp2, label %for.body3, label %for.end22, !dbg !3256

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %cl, align 4, !dbg !3257
  %idxprom4 = zext i32 %5 to i64, !dbg !3257
  %arrayidx5 = getelementptr inbounds [27 x [87 x i64]], [27 x [87 x i64]]* @prohibited_class_mode_regs, i64 0, i64 %idxprom4, !dbg !3257
  %6 = load i32, i32* %j, align 4, !dbg !3257
  %idxprom6 = sext i32 %6 to i64, !dbg !3257
  %arrayidx7 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx5, i64 0, i64 %idxprom6, !dbg !3257
  store i64 0, i64* %arrayidx7, align 8, !dbg !3257
  %7 = load i32, i32* %cl, align 4, !dbg !3259
  %idxprom8 = zext i32 %7 to i64, !dbg !3261
  %arrayidx9 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom8, !dbg !3261
  %8 = load i32, i32* %arrayidx9, align 4, !dbg !3261
  %sub = sub nsw i32 %8, 1, !dbg !3262
  store i32 %sub, i32* %k, align 4, !dbg !3263
  br label %for.cond10, !dbg !3264

for.cond10:                                       ; preds = %for.inc, %for.body3
  %9 = load i32, i32* %k, align 4, !dbg !3265
  %cmp11 = icmp sge i32 %9, 0, !dbg !3267
  br i1 %cmp11, label %for.body12, label %for.end, !dbg !3268

for.body12:                                       ; preds = %for.cond10
  %10 = load i32, i32* %cl, align 4, !dbg !3269
  %idxprom13 = zext i32 %10 to i64, !dbg !3271
  %arrayidx14 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom13, !dbg !3271
  %11 = load i32, i32* %k, align 4, !dbg !3272
  %idxprom15 = sext i32 %11 to i64, !dbg !3271
  %arrayidx16 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx14, i64 0, i64 %idxprom15, !dbg !3271
  %12 = load i16, i16* %arrayidx16, align 2, !dbg !3271
  %conv = sext i16 %12 to i32, !dbg !3271
  store i32 %conv, i32* %hard_regno, align 4, !dbg !3273
  %13 = load i32, i32* %hard_regno, align 4, !dbg !3274
  %14 = load i32, i32* %j, align 4, !dbg !3274
  %call = call zeroext i8 @ix86_hard_regno_mode_ok(i32 %13, i32 %14), !dbg !3274
  %tobool = icmp ne i8 %call, 0, !dbg !3274
  br i1 %tobool, label %if.end, label %if.then, !dbg !3276

if.then:                                          ; preds = %for.body12
  %15 = load i32, i32* %hard_regno, align 4, !dbg !3277
  %sh_prom = zext i32 %15 to i64, !dbg !3277
  %shl = shl i64 1, %sh_prom, !dbg !3277
  %16 = load i32, i32* %cl, align 4, !dbg !3277
  %idxprom17 = zext i32 %16 to i64, !dbg !3277
  %arrayidx18 = getelementptr inbounds [27 x [87 x i64]], [27 x [87 x i64]]* @prohibited_class_mode_regs, i64 0, i64 %idxprom17, !dbg !3277
  %17 = load i32, i32* %j, align 4, !dbg !3277
  %idxprom19 = sext i32 %17 to i64, !dbg !3277
  %arrayidx20 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx18, i64 0, i64 %idxprom19, !dbg !3277
  %18 = load i64, i64* %arrayidx20, align 8, !dbg !3277
  %or = or i64 %18, %shl, !dbg !3277
  store i64 %or, i64* %arrayidx20, align 8, !dbg !3277
  br label %if.end, !dbg !3277

if.end:                                           ; preds = %if.then, %for.body12
  br label %for.inc, !dbg !3278

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %k, align 4, !dbg !3279
  %dec = add nsw i32 %19, -1, !dbg !3279
  store i32 %dec, i32* %k, align 4, !dbg !3279
  br label %for.cond10, !dbg !3280, !llvm.loop !3281

for.end:                                          ; preds = %for.cond10
  br label %for.inc21, !dbg !3283

for.inc21:                                        ; preds = %for.end
  %20 = load i32, i32* %j, align 4, !dbg !3284
  %inc = add nsw i32 %20, 1, !dbg !3284
  store i32 %inc, i32* %j, align 4, !dbg !3284
  br label %for.cond1, !dbg !3285, !llvm.loop !3286

for.end22:                                        ; preds = %for.cond1
  br label %for.inc23, !dbg !3288

for.inc23:                                        ; preds = %for.end22
  %21 = load i32, i32* %i, align 4, !dbg !3289
  %inc24 = add nsw i32 %21, 1, !dbg !3289
  store i32 %inc24, i32* %i, align 4, !dbg !3289
  br label %for.cond, !dbg !3290, !llvm.loop !3291

for.end25:                                        ; preds = %for.cond
  ret void, !dbg !3293
}

declare dso_local void @ira_init_costs() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_finish_once() #0 !dbg !3294 {
entry:
  call void @ira_finish_costs_once(), !dbg !3295
  call void @free_register_move_costs(), !dbg !3296
  ret void, !dbg !3297
}

declare dso_local void @ira_finish_costs_once() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_setup_eliminable_regset() #0 !dbg !2212 {
entry:
  %regs_asm_clobbered = alloca i8*, align 8
  %i = alloca i32, align 4
  %need_fp = alloca i32, align 4
  %cannot_elim = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i8** %regs_asm_clobbered, metadata !3298, metadata !DIExpression()), !dbg !3299
  %0 = alloca i8, i64 53, align 16, !dbg !3300
  store i8* %0, i8** %regs_asm_clobbered, align 8, !dbg !3299
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3301, metadata !DIExpression()), !dbg !3302
  call void @llvm.dbg.declare(metadata i32* %need_fp, metadata !3303, metadata !DIExpression()), !dbg !3304
  %1 = load i32, i32* @flag_omit_frame_pointer, align 4, !dbg !3305
  %tobool = icmp ne i32 %1, 0, !dbg !3305
  br i1 %tobool, label %lor.lhs.false, label %lor.end, !dbg !3306

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3307
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3307
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3308
  %bf.load = load i32, i32* %calls_alloca, align 8, !dbg !3308
  %bf.lshr = lshr i32 %bf.load, 19, !dbg !3308
  %bf.clear = and i32 %bf.lshr, 1, !dbg !3308
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !3307
  br i1 %tobool1, label %lor.end, label %lor.lhs.false2, !dbg !3309

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* @flag_stack_check, align 4, !dbg !3310
  %tobool3 = icmp ne i32 %3, 0, !dbg !3310
  br i1 %tobool3, label %lor.end, label %lor.lhs.false4, !dbg !3311

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 28), align 8, !dbg !3312
  %conv = zext i8 %4 to i32, !dbg !3313
  %tobool5 = icmp ne i32 %conv, 0, !dbg !3313
  br i1 %tobool5, label %lor.end, label %lor.lhs.false6, !dbg !3314

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %5 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !3315
  %conv7 = zext i8 %5 to i32, !dbg !3316
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !3316
  br i1 %tobool8, label %lor.end, label %lor.rhs, !dbg !3317

lor.rhs:                                          ; preds = %lor.lhs.false6
  %6 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 102), align 8, !dbg !3318
  %call = call zeroext i8 %6(), !dbg !3319
  %conv9 = zext i8 %call to i32, !dbg !3319
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !3317
  br label %lor.end, !dbg !3317

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %7 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool10, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !3317
  store i32 %lor.ext, i32* %need_fp, align 4, !dbg !3304
  %8 = load i32, i32* %need_fp, align 4, !dbg !3320
  %conv11 = trunc i32 %8 to i8, !dbg !3320
  store i8 %conv11, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !3321
  %9 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3322
  store i64 %9, i64* @ira_no_alloc_regs, align 8, !dbg !3322
  store i64 0, i64* @eliminable_regset, align 8, !dbg !3323
  %10 = load i8*, i8** %regs_asm_clobbered, align 8, !dbg !3324
  call void @compute_regs_asm_clobbered(i8* %10), !dbg !3325
  store i32 0, i32* %i, align 4, !dbg !3326
  br label %for.cond, !dbg !3328

for.cond:                                         ; preds = %for.inc, %lor.end
  %11 = load i32, i32* %i, align 4, !dbg !3329
  %cmp = icmp slt i32 %11, 4, !dbg !3331
  br i1 %cmp, label %for.body, label %for.end, !dbg !3332

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %cannot_elim, metadata !3333, metadata !DIExpression()), !dbg !3335
  %12 = load i8 (i32, i32)*, i8 (i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 103), align 8, !dbg !3336
  %13 = load i32, i32* %i, align 4, !dbg !3337
  %idxprom = sext i32 %13 to i64, !dbg !3338
  %arrayidx = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom, !dbg !3338
  %from = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0, !dbg !3339
  %14 = load i32, i32* %from, align 8, !dbg !3339
  %15 = load i32, i32* %i, align 4, !dbg !3340
  %idxprom13 = sext i32 %15 to i64, !dbg !3341
  %arrayidx14 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom13, !dbg !3341
  %to = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx14, i32 0, i32 1, !dbg !3342
  %16 = load i32, i32* %to, align 4, !dbg !3342
  %call15 = call zeroext i8 %12(i32 %14, i32 %16), !dbg !3343
  %tobool16 = icmp ne i8 %call15, 0, !dbg !3343
  br i1 %tobool16, label %lor.rhs17, label %lor.end24, !dbg !3344

lor.rhs17:                                        ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !3345
  %idxprom18 = sext i32 %17 to i64, !dbg !3346
  %arrayidx19 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom18, !dbg !3346
  %to20 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx19, i32 0, i32 1, !dbg !3347
  %18 = load i32, i32* %to20, align 4, !dbg !3347
  %cmp21 = icmp eq i32 %18, 7, !dbg !3348
  br i1 %cmp21, label %land.rhs, label %land.end, !dbg !3349

land.rhs:                                         ; preds = %lor.rhs17
  %19 = load i32, i32* %need_fp, align 4, !dbg !3350
  %tobool23 = icmp ne i32 %19, 0, !dbg !3349
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs17
  %20 = phi i1 [ false, %lor.rhs17 ], [ %tobool23, %land.rhs ], !dbg !3351
  br label %lor.end24, !dbg !3344

lor.end24:                                        ; preds = %land.end, %for.body
  %21 = phi i1 [ true, %for.body ], [ %20, %land.end ]
  %lor.ext25 = zext i1 %21 to i32, !dbg !3344
  %conv26 = trunc i32 %lor.ext25 to i8, !dbg !3352
  store i8 %conv26, i8* %cannot_elim, align 1, !dbg !3335
  %22 = load i8*, i8** %regs_asm_clobbered, align 8, !dbg !3353
  %23 = load i32, i32* %i, align 4, !dbg !3355
  %idxprom27 = sext i32 %23 to i64, !dbg !3356
  %arrayidx28 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom27, !dbg !3356
  %from29 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx28, i32 0, i32 0, !dbg !3357
  %24 = load i32, i32* %from29, align 8, !dbg !3357
  %idxprom30 = sext i32 %24 to i64, !dbg !3353
  %arrayidx31 = getelementptr inbounds i8, i8* %22, i64 %idxprom30, !dbg !3353
  %25 = load i8, i8* %arrayidx31, align 1, !dbg !3353
  %tobool32 = icmp ne i8 %25, 0, !dbg !3353
  br i1 %tobool32, label %if.else, label %if.then, !dbg !3358

if.then:                                          ; preds = %lor.end24
  %26 = load i32, i32* %i, align 4, !dbg !3359
  %idxprom33 = sext i32 %26 to i64, !dbg !3359
  %arrayidx34 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom33, !dbg !3359
  %from35 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx34, i32 0, i32 0, !dbg !3359
  %27 = load i32, i32* %from35, align 8, !dbg !3359
  %sh_prom = zext i32 %27 to i64, !dbg !3359
  %shl = shl i64 1, %sh_prom, !dbg !3359
  %28 = load i64, i64* @eliminable_regset, align 8, !dbg !3359
  %or = or i64 %28, %shl, !dbg !3359
  store i64 %or, i64* @eliminable_regset, align 8, !dbg !3359
  %29 = load i8, i8* %cannot_elim, align 1, !dbg !3361
  %tobool36 = icmp ne i8 %29, 0, !dbg !3361
  br i1 %tobool36, label %if.then37, label %if.end, !dbg !3363

if.then37:                                        ; preds = %if.then
  %30 = load i32, i32* %i, align 4, !dbg !3364
  %idxprom38 = sext i32 %30 to i64, !dbg !3364
  %arrayidx39 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom38, !dbg !3364
  %from40 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx39, i32 0, i32 0, !dbg !3364
  %31 = load i32, i32* %from40, align 8, !dbg !3364
  %sh_prom41 = zext i32 %31 to i64, !dbg !3364
  %shl42 = shl i64 1, %sh_prom41, !dbg !3364
  %32 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !3364
  %or43 = or i64 %32, %shl42, !dbg !3364
  store i64 %or43, i64* @ira_no_alloc_regs, align 8, !dbg !3364
  br label %if.end, !dbg !3364

if.end:                                           ; preds = %if.then37, %if.then
  br label %if.end56, !dbg !3365

if.else:                                          ; preds = %lor.end24
  %33 = load i8, i8* %cannot_elim, align 1, !dbg !3366
  %tobool44 = icmp ne i8 %33, 0, !dbg !3366
  br i1 %tobool44, label %if.then45, label %if.else51, !dbg !3368

if.then45:                                        ; preds = %if.else
  %34 = load i32, i32* %i, align 4, !dbg !3369
  %idxprom46 = sext i32 %34 to i64, !dbg !3370
  %arrayidx47 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom46, !dbg !3370
  %from48 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx47, i32 0, i32 0, !dbg !3371
  %35 = load i32, i32* %from48, align 8, !dbg !3371
  %idxprom49 = sext i32 %35 to i64, !dbg !3372
  %arrayidx50 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 %idxprom49, !dbg !3372
  %36 = load i8*, i8** %arrayidx50, align 8, !dbg !3372
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i8* %36), !dbg !3373
  br label %if.end55, !dbg !3373

if.else51:                                        ; preds = %if.else
  %37 = load i32, i32* %i, align 4, !dbg !3374
  %idxprom52 = sext i32 %37 to i64, !dbg !3375
  %arrayidx53 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @ira_setup_eliminable_regset.eliminables, i64 0, i64 %idxprom52, !dbg !3375
  %from54 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx53, i32 0, i32 0, !dbg !3376
  %38 = load i32, i32* %from54, align 8, !dbg !3376
  call void @df_set_regs_ever_live(i32 %38, i8 zeroext 1), !dbg !3377
  br label %if.end55

if.end55:                                         ; preds = %if.else51, %if.then45
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end
  br label %for.inc, !dbg !3378

for.inc:                                          ; preds = %if.end56
  %39 = load i32, i32* %i, align 4, !dbg !3379
  %inc = add nsw i32 %39, 1, !dbg !3379
  store i32 %inc, i32* %i, align 4, !dbg !3379
  br label %for.cond, !dbg !3380, !llvm.loop !3381

for.end:                                          ; preds = %for.cond
  %40 = load i8*, i8** %regs_asm_clobbered, align 8, !dbg !3383
  %arrayidx57 = getelementptr inbounds i8, i8* %40, i64 6, !dbg !3383
  %41 = load i8, i8* %arrayidx57, align 1, !dbg !3383
  %tobool58 = icmp ne i8 %41, 0, !dbg !3383
  br i1 %tobool58, label %if.else65, label %if.then59, !dbg !3385

if.then59:                                        ; preds = %for.end
  %42 = load i64, i64* @eliminable_regset, align 8, !dbg !3386
  %or60 = or i64 %42, 64, !dbg !3386
  store i64 %or60, i64* @eliminable_regset, align 8, !dbg !3386
  %43 = load i32, i32* %need_fp, align 4, !dbg !3388
  %tobool61 = icmp ne i32 %43, 0, !dbg !3388
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !3390

if.then62:                                        ; preds = %if.then59
  %44 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !3391
  %or63 = or i64 %44, 64, !dbg !3391
  store i64 %or63, i64* @ira_no_alloc_regs, align 8, !dbg !3391
  br label %if.end64, !dbg !3391

if.end64:                                         ; preds = %if.then62, %if.then59
  br label %if.end70, !dbg !3392

if.else65:                                        ; preds = %for.end
  %45 = load i32, i32* %need_fp, align 4, !dbg !3393
  %tobool66 = icmp ne i32 %45, 0, !dbg !3393
  br i1 %tobool66, label %if.then67, label %if.else68, !dbg !3395

if.then67:                                        ; preds = %if.else65
  %46 = load i8*, i8** getelementptr inbounds ([53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 6), align 16, !dbg !3396
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i8* %46), !dbg !3397
  br label %if.end69, !dbg !3397

if.else68:                                        ; preds = %if.else65
  call void @df_set_regs_ever_live(i32 6, i8 zeroext 1), !dbg !3398
  br label %if.end69

if.end69:                                         ; preds = %if.else68, %if.then67
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end64
  ret void, !dbg !3399
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_regs_asm_clobbered(i8* %regs_asm_clobbered) #0 !dbg !3400 {
entry:
  %regs_asm_clobbered.addr = alloca i8*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %def_rec = alloca %union.df_ref_d**, align 8
  %def = alloca %union.df_ref_d*, align 8
  %dregno = alloca i32, align 4
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %end = alloca i32, align 4
  store i8* %regs_asm_clobbered, i8** %regs_asm_clobbered.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %regs_asm_clobbered.addr, metadata !3403, metadata !DIExpression()), !dbg !3404
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3405, metadata !DIExpression()), !dbg !3406
  %0 = load i8*, i8** %regs_asm_clobbered.addr, align 8, !dbg !3407
  call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 53, i1 false), !dbg !3408
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3409
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3409
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3409
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3409
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !3409
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3409
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !3409
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3409
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !3409
  br label %for.cond, !dbg !3409

for.cond:                                         ; preds = %for.inc49, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3411
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3411
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3411
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3411
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3411
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !3411
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3411
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !3411
  br i1 %cmp, label %for.body, label %for.end51, !dbg !3409

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3413, metadata !DIExpression()), !dbg !3415
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3416
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !3416
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3416
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3416
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !3416
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3416
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !3416
  br label %for.cond3, !dbg !3416

for.cond3:                                        ; preds = %for.inc43, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3418
  %tobool = icmp ne %struct.rtx_def* %12, null, !dbg !3418
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3418

land.rhs:                                         ; preds = %for.cond3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3418
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3418
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !3418
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !3418
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !3418
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 0, !dbg !3418
  %16 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3418
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !3418
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3418
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3418
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3418
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3418
  %cmp6 = icmp ne %struct.rtx_def* %13, %17, !dbg !3418
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond3
  %18 = phi i1 [ false, %for.cond3 ], [ %cmp6, %land.rhs ], !dbg !3420
  br i1 %18, label %for.body7, label %for.end48, !dbg !3416

for.body7:                                        ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %def_rec, metadata !3421, metadata !DIExpression()), !dbg !3483
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3484
  %call = call zeroext i8 @insn_contains_asm(%struct.rtx_def* %19), !dbg !3486
  %tobool8 = icmp ne i8 %call, 0, !dbg !3486
  br i1 %tobool8, label %if.then, label %if.end42, !dbg !3487

if.then:                                          ; preds = %for.body7
  %20 = load %struct.df*, %struct.df** @df, align 8, !dbg !3488
  %insns = getelementptr inbounds %struct.df, %struct.df* %20, i32 0, i32 10, !dbg !3488
  %21 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !3488
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3488
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3488
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !3488
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !3488
  %rt_int = bitcast %union.rtunion_def* %arrayidx11 to i32*, !dbg !3488
  %23 = load i32, i32* %rt_int, align 8, !dbg !3488
  %idxprom = sext i32 %23 to i64, !dbg !3488
  %arrayidx12 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %21, i64 %idxprom, !dbg !3488
  %24 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx12, align 8, !dbg !3488
  %defs = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %24, i32 0, i32 1, !dbg !3488
  %25 = load %union.df_ref_d**, %union.df_ref_d*** %defs, align 8, !dbg !3488
  store %union.df_ref_d** %25, %union.df_ref_d*** %def_rec, align 8, !dbg !3490
  br label %for.cond13, !dbg !3491

for.cond13:                                       ; preds = %for.inc40, %if.then
  %26 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !3492
  %27 = load %union.df_ref_d*, %union.df_ref_d** %26, align 8, !dbg !3494
  %tobool14 = icmp ne %union.df_ref_d* %27, null, !dbg !3495
  br i1 %tobool14, label %for.body15, label %for.end41, !dbg !3495

for.body15:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !3496, metadata !DIExpression()), !dbg !3498
  %28 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !3499
  %29 = load %union.df_ref_d*, %union.df_ref_d** %28, align 8, !dbg !3500
  store %union.df_ref_d* %29, %union.df_ref_d** %def, align 8, !dbg !3498
  call void @llvm.dbg.declare(metadata i32* %dregno, metadata !3501, metadata !DIExpression()), !dbg !3502
  %30 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !3503
  %base = bitcast %union.df_ref_d* %30 to %struct.df_base_ref*, !dbg !3503
  %regno = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 6, !dbg !3503
  %31 = load i32, i32* %regno, align 8, !dbg !3503
  store i32 %31, i32* %dregno, align 4, !dbg !3502
  %32 = load i32, i32* %dregno, align 4, !dbg !3504
  %cmp16 = icmp ult i32 %32, 53, !dbg !3506
  br i1 %cmp16, label %if.then17, label %if.end, !dbg !3507

if.then17:                                        ; preds = %for.body15
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3508, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3511, metadata !DIExpression()), !dbg !3512
  %33 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !3513
  %base18 = bitcast %union.df_ref_d* %33 to %struct.df_base_ref*, !dbg !3513
  %reg = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base18, i32 0, i32 1, !dbg !3513
  %34 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3513
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !3513
  %bf.load = load i32, i32* %35, align 8, !dbg !3513
  %bf.clear = and i32 %bf.load, 65535, !dbg !3513
  %cmp19 = icmp eq i32 %bf.clear, 39, !dbg !3513
  br i1 %cmp19, label %cond.true, label %cond.false, !dbg !3513

cond.true:                                        ; preds = %if.then17
  %36 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !3513
  %base20 = bitcast %union.df_ref_d* %36 to %struct.df_base_ref*, !dbg !3513
  %reg21 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base20, i32 0, i32 1, !dbg !3513
  %37 = load %struct.rtx_def*, %struct.rtx_def** %reg21, align 8, !dbg !3513
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !3513
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !3513
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 0, !dbg !3513
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !3513
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !3513
  br label %cond.end, !dbg !3513

cond.false:                                       ; preds = %if.then17
  %39 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !3513
  %base26 = bitcast %union.df_ref_d* %39 to %struct.df_base_ref*, !dbg !3513
  %reg27 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base26, i32 0, i32 1, !dbg !3513
  %40 = load %struct.rtx_def*, %struct.rtx_def** %reg27, align 8, !dbg !3513
  br label %cond.end, !dbg !3513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %38, %cond.true ], [ %40, %cond.false ], !dbg !3513
  %41 = bitcast %struct.rtx_def* %cond to i32*, !dbg !3513
  %bf.load28 = load i32, i32* %41, align 8, !dbg !3513
  %bf.lshr = lshr i32 %bf.load28, 16, !dbg !3513
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !3513
  store i32 %bf.clear29, i32* %mode, align 4, !dbg !3512
  call void @llvm.dbg.declare(metadata i32* %end, metadata !3514, metadata !DIExpression()), !dbg !3515
  %42 = load i32, i32* %dregno, align 4, !dbg !3516
  %43 = load i32, i32* %dregno, align 4, !dbg !3517
  %idxprom30 = zext i32 %43 to i64, !dbg !3518
  %arrayidx31 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom30, !dbg !3518
  %44 = load i32, i32* %mode, align 4, !dbg !3519
  %idxprom32 = zext i32 %44 to i64, !dbg !3518
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx31, i64 0, i64 %idxprom32, !dbg !3518
  %45 = load i8, i8* %arrayidx33, align 1, !dbg !3518
  %conv = zext i8 %45 to i32, !dbg !3518
  %add = add i32 %42, %conv, !dbg !3520
  %sub = sub i32 %add, 1, !dbg !3521
  store i32 %sub, i32* %end, align 4, !dbg !3515
  %46 = load i32, i32* %dregno, align 4, !dbg !3522
  store i32 %46, i32* %i, align 4, !dbg !3524
  br label %for.cond34, !dbg !3525

for.cond34:                                       ; preds = %for.inc, %cond.end
  %47 = load i32, i32* %i, align 4, !dbg !3526
  %48 = load i32, i32* %end, align 4, !dbg !3528
  %cmp35 = icmp ule i32 %47, %48, !dbg !3529
  br i1 %cmp35, label %for.body37, label %for.end, !dbg !3530

for.body37:                                       ; preds = %for.cond34
  %49 = load i8*, i8** %regs_asm_clobbered.addr, align 8, !dbg !3531
  %50 = load i32, i32* %i, align 4, !dbg !3532
  %idxprom38 = zext i32 %50 to i64, !dbg !3531
  %arrayidx39 = getelementptr inbounds i8, i8* %49, i64 %idxprom38, !dbg !3531
  store i8 1, i8* %arrayidx39, align 1, !dbg !3533
  br label %for.inc, !dbg !3531

for.inc:                                          ; preds = %for.body37
  %51 = load i32, i32* %i, align 4, !dbg !3534
  %inc = add i32 %51, 1, !dbg !3534
  store i32 %inc, i32* %i, align 4, !dbg !3534
  br label %for.cond34, !dbg !3535, !llvm.loop !3536

for.end:                                          ; preds = %for.cond34
  br label %if.end, !dbg !3538

if.end:                                           ; preds = %for.end, %for.body15
  br label %for.inc40, !dbg !3539

for.inc40:                                        ; preds = %if.end
  %52 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !3540
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %52, i32 1, !dbg !3540
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %def_rec, align 8, !dbg !3540
  br label %for.cond13, !dbg !3541, !llvm.loop !3542

for.end41:                                        ; preds = %for.cond13
  br label %if.end42, !dbg !3543

if.end42:                                         ; preds = %for.end41, %for.body7
  br label %for.inc43, !dbg !3544

for.inc43:                                        ; preds = %if.end42
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3418
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !3418
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !3418
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !3418
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !3418
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !3418
  store %struct.rtx_def* %54, %struct.rtx_def** %insn, align 8, !dbg !3418
  br label %for.cond3, !dbg !3418, !llvm.loop !3545

for.end48:                                        ; preds = %land.end
  br label %for.inc49, !dbg !3547

for.inc49:                                        ; preds = %for.end48
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3411
  %next_bb50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 6, !dbg !3411
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb50, align 8, !dbg !3411
  store %struct.basic_block_def* %56, %struct.basic_block_def** %bb, align 8, !dbg !3411
  br label %for.cond, !dbg !3411, !llvm.loop !3548

for.end51:                                        ; preds = %for.cond
  ret void, !dbg !3550
}

declare dso_local void @error(i8*, ...) #2

declare dso_local void @df_set_regs_ever_live(i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_elimination(i32 %from, i32 %to) #0 !dbg !3551 {
entry:
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %r = alloca %struct.bitmap_head_def*, align 8
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !3554, metadata !DIExpression()), !dbg !3555
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !3556, metadata !DIExpression()), !dbg !3557
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3558, metadata !DIExpression()), !dbg !3559
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3560
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3560
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3560
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3560
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3560
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3560
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3560
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3560
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3560
  br label %for.cond, !dbg !3560

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3562
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3562
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3562
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3562
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3562
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3562
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3562
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3562
  br i1 %cmp, label %for.body, label %for.end, !dbg !3560

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %r, metadata !3564, metadata !DIExpression()), !dbg !3567
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3568
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !3568
  %9 = load i32, i32* %index, align 8, !dbg !3568
  %call = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %9), !dbg !3568
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call, i32 0, i32 2, !dbg !3568
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !3568
  store %struct.bitmap_head_def* %10, %struct.bitmap_head_def** %r, align 8, !dbg !3567
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %r, align 8, !dbg !3569
  %12 = load i32, i32* %from.addr, align 4, !dbg !3569
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %11, i32 %12), !dbg !3569
  %tobool = icmp ne i32 %call3, 0, !dbg !3569
  br i1 %tobool, label %if.then, label %if.end, !dbg !3571

if.then:                                          ; preds = %for.body
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %r, align 8, !dbg !3572
  %14 = load i32, i32* %from.addr, align 4, !dbg !3572
  %call4 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %13, i32 %14), !dbg !3572
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %r, align 8, !dbg !3574
  %16 = load i32, i32* %to.addr, align 4, !dbg !3574
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %15, i32 %16), !dbg !3574
  br label %if.end, !dbg !3575

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3576

for.inc:                                          ; preds = %if.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3562
  %next_bb6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 6, !dbg !3562
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb6, align 8, !dbg !3562
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !3562
  br label %for.cond, !dbg !3562, !llvm.loop !3577

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3579
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !3580 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3583, metadata !DIExpression()), !dbg !3584
  %0 = load i32, i32* %index.addr, align 4, !dbg !3585
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !3587
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !3587
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !3587
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !3587
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !3588
  %3 = load i32, i32* %block_info_size, align 8, !dbg !3588
  %cmp = icmp ult i32 %0, %3, !dbg !3589
  br i1 %cmp, label %if.then, label %if.else, !dbg !3590

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !3591
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !3591
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !3591
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !3591
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !3592
  %6 = load i8**, i8*** %block_info, align 8, !dbg !3592
  %7 = load i32, i32* %index.addr, align 4, !dbg !3593
  %idxprom = zext i32 %7 to i64, !dbg !3591
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !3591
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !3591
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !3594
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !3595
  br label %return, !dbg !3595

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !3596
  br label %return, !dbg !3596

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !3597
  ret %struct.df_lr_bb_info* %10, !dbg !3597
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_ira() #0 !dbg !3598 {
entry:
  ret i8 1, !dbg !3599
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_ira() #0 !dbg !3600 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3601
  call void @ira(%struct._IO_FILE* %0), !dbg !3602
  ret i32 0, !dbg !3603
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_class_hard_regs() #0 !dbg !3604 {
entry:
  %cl = alloca i32, align 4
  %i = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %n = alloca i32, align 4
  %processed_hard_reg_set = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3607, metadata !DIExpression()), !dbg !3608
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !3609, metadata !DIExpression()), !dbg !3610
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3611, metadata !DIExpression()), !dbg !3612
  call void @llvm.dbg.declare(metadata i64* %processed_hard_reg_set, metadata !3613, metadata !DIExpression()), !dbg !3614
  store i32 26, i32* %cl, align 4, !dbg !3615
  br label %for.cond, !dbg !3617

for.cond:                                         ; preds = %for.inc40, %entry
  %0 = load i32, i32* %cl, align 4, !dbg !3618
  %cmp = icmp sge i32 %0, 0, !dbg !3620
  br i1 %cmp, label %for.body, label %for.end41, !dbg !3621

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %cl, align 4, !dbg !3622
  %idxprom = sext i32 %1 to i64, !dbg !3622
  %arrayidx = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom, !dbg !3622
  %2 = load i64, i64* %arrayidx, align 8, !dbg !3622
  store i64 %2, i64* @temp_hard_regset, align 8, !dbg !3622
  %3 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3624
  %neg = xor i64 %3, -1, !dbg !3624
  %4 = load i64, i64* @temp_hard_regset, align 8, !dbg !3624
  %and = and i64 %4, %neg, !dbg !3624
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !3624
  store i64 0, i64* %processed_hard_reg_set, align 8, !dbg !3625
  store i32 0, i32* %i, align 4, !dbg !3626
  br label %for.cond1, !dbg !3628

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3629
  %cmp2 = icmp slt i32 %5, 53, !dbg !3631
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3632

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %cl, align 4, !dbg !3633
  %idxprom4 = sext i32 %6 to i64, !dbg !3634
  %arrayidx5 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom4, !dbg !3634
  %arrayidx6 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx5, i64 0, i64 0, !dbg !3634
  store i16 -1, i16* %arrayidx6, align 2, !dbg !3635
  br label %for.inc, !dbg !3634

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4, !dbg !3636
  %inc = add nsw i32 %7, 1, !dbg !3636
  store i32 %inc, i32* %i, align 4, !dbg !3636
  br label %for.cond1, !dbg !3637, !llvm.loop !3638

for.end:                                          ; preds = %for.cond1
  store i32 0, i32* %n, align 4, !dbg !3640
  store i32 0, i32* %i, align 4, !dbg !3642
  br label %for.cond7, !dbg !3643

for.cond7:                                        ; preds = %for.inc35, %for.end
  %8 = load i32, i32* %i, align 4, !dbg !3644
  %cmp8 = icmp slt i32 %8, 53, !dbg !3646
  br i1 %cmp8, label %for.body9, label %for.end37, !dbg !3647

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %i, align 4, !dbg !3648
  %idxprom10 = sext i32 %9 to i64, !dbg !3650
  %arrayidx11 = getelementptr inbounds [53 x i32], [53 x i32]* @reg_alloc_order, i64 0, i64 %idxprom10, !dbg !3650
  %10 = load i32, i32* %arrayidx11, align 4, !dbg !3650
  store i32 %10, i32* %hard_regno, align 4, !dbg !3651
  %11 = load i64, i64* %processed_hard_reg_set, align 8, !dbg !3652
  %12 = load i32, i32* %hard_regno, align 4, !dbg !3652
  %sh_prom = zext i32 %12 to i64, !dbg !3652
  %shl = shl i64 1, %sh_prom, !dbg !3652
  %and12 = and i64 %11, %shl, !dbg !3652
  %tobool = icmp ne i64 %and12, 0, !dbg !3652
  br i1 %tobool, label %if.then, label %if.end, !dbg !3654

if.then:                                          ; preds = %for.body9
  br label %for.inc35, !dbg !3655

if.end:                                           ; preds = %for.body9
  %13 = load i32, i32* %hard_regno, align 4, !dbg !3656
  %sh_prom13 = zext i32 %13 to i64, !dbg !3656
  %shl14 = shl i64 1, %sh_prom13, !dbg !3656
  %14 = load i64, i64* %processed_hard_reg_set, align 8, !dbg !3656
  %or = or i64 %14, %shl14, !dbg !3656
  store i64 %or, i64* %processed_hard_reg_set, align 8, !dbg !3656
  %15 = load i64, i64* @temp_hard_regset, align 8, !dbg !3657
  %16 = load i32, i32* %hard_regno, align 4, !dbg !3657
  %sh_prom15 = zext i32 %16 to i64, !dbg !3657
  %shl16 = shl i64 1, %sh_prom15, !dbg !3657
  %and17 = and i64 %15, %shl16, !dbg !3657
  %tobool18 = icmp ne i64 %and17, 0, !dbg !3657
  br i1 %tobool18, label %if.else, label %if.then19, !dbg !3659

if.then19:                                        ; preds = %if.end
  %17 = load i32, i32* %cl, align 4, !dbg !3660
  %idxprom20 = sext i32 %17 to i64, !dbg !3661
  %arrayidx21 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom20, !dbg !3661
  %18 = load i32, i32* %hard_regno, align 4, !dbg !3662
  %idxprom22 = sext i32 %18 to i64, !dbg !3661
  %arrayidx23 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx21, i64 0, i64 %idxprom22, !dbg !3661
  store i16 -1, i16* %arrayidx23, align 2, !dbg !3663
  br label %if.end34, !dbg !3661

if.else:                                          ; preds = %if.end
  %19 = load i32, i32* %n, align 4, !dbg !3664
  %conv = trunc i32 %19 to i16, !dbg !3664
  %20 = load i32, i32* %cl, align 4, !dbg !3666
  %idxprom24 = sext i32 %20 to i64, !dbg !3667
  %arrayidx25 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom24, !dbg !3667
  %21 = load i32, i32* %hard_regno, align 4, !dbg !3668
  %idxprom26 = sext i32 %21 to i64, !dbg !3667
  %arrayidx27 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx25, i64 0, i64 %idxprom26, !dbg !3667
  store i16 %conv, i16* %arrayidx27, align 2, !dbg !3669
  %22 = load i32, i32* %hard_regno, align 4, !dbg !3670
  %conv28 = trunc i32 %22 to i16, !dbg !3670
  %23 = load i32, i32* %cl, align 4, !dbg !3671
  %idxprom29 = sext i32 %23 to i64, !dbg !3672
  %arrayidx30 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom29, !dbg !3672
  %24 = load i32, i32* %n, align 4, !dbg !3673
  %inc31 = add nsw i32 %24, 1, !dbg !3673
  store i32 %inc31, i32* %n, align 4, !dbg !3673
  %idxprom32 = sext i32 %24 to i64, !dbg !3672
  %arrayidx33 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx30, i64 0, i64 %idxprom32, !dbg !3672
  store i16 %conv28, i16* %arrayidx33, align 2, !dbg !3674
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.then19
  br label %for.inc35, !dbg !3675

for.inc35:                                        ; preds = %if.end34, %if.then
  %25 = load i32, i32* %i, align 4, !dbg !3676
  %inc36 = add nsw i32 %25, 1, !dbg !3676
  store i32 %inc36, i32* %i, align 4, !dbg !3676
  br label %for.cond7, !dbg !3677, !llvm.loop !3678

for.end37:                                        ; preds = %for.cond7
  %26 = load i32, i32* %n, align 4, !dbg !3680
  %27 = load i32, i32* %cl, align 4, !dbg !3681
  %idxprom38 = sext i32 %27 to i64, !dbg !3682
  %arrayidx39 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom38, !dbg !3682
  store i32 %26, i32* %arrayidx39, align 4, !dbg !3683
  br label %for.inc40, !dbg !3684

for.inc40:                                        ; preds = %for.end37
  %28 = load i32, i32* %cl, align 4, !dbg !3685
  %dec = add nsw i32 %28, -1, !dbg !3685
  store i32 %dec, i32* %cl, align 4, !dbg !3685
  br label %for.cond, !dbg !3686, !llvm.loop !3687

for.end41:                                        ; preds = %for.cond
  ret void, !dbg !3689
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_available_class_regs() #0 !dbg !3690 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([27 x i32]* @ira_available_class_regs to i8*), i8 0, i64 108, i1 false), !dbg !3695
  store i32 0, i32* %i, align 4, !dbg !3696
  br label %for.cond, !dbg !3698

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3699
  %cmp = icmp slt i32 %0, 27, !dbg !3701
  br i1 %cmp, label %for.body, label %for.end10, !dbg !3702

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !3703
  %idxprom = sext i32 %1 to i64, !dbg !3703
  %arrayidx = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom, !dbg !3703
  %2 = load i64, i64* %arrayidx, align 8, !dbg !3703
  store i64 %2, i64* @temp_hard_regset, align 8, !dbg !3703
  %3 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3705
  %neg = xor i64 %3, -1, !dbg !3705
  %4 = load i64, i64* @temp_hard_regset, align 8, !dbg !3705
  %and = and i64 %4, %neg, !dbg !3705
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !3705
  store i32 0, i32* %j, align 4, !dbg !3706
  br label %for.cond1, !dbg !3708

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !3709
  %cmp2 = icmp slt i32 %5, 53, !dbg !3711
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3712

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* @temp_hard_regset, align 8, !dbg !3713
  %7 = load i32, i32* %j, align 4, !dbg !3713
  %sh_prom = zext i32 %7 to i64, !dbg !3713
  %shl = shl i64 1, %sh_prom, !dbg !3713
  %and4 = and i64 %6, %shl, !dbg !3713
  %tobool = icmp ne i64 %and4, 0, !dbg !3713
  br i1 %tobool, label %if.then, label %if.end, !dbg !3715

if.then:                                          ; preds = %for.body3
  %8 = load i32, i32* %i, align 4, !dbg !3716
  %idxprom5 = sext i32 %8 to i64, !dbg !3717
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom5, !dbg !3717
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !3718
  %inc = add nsw i32 %9, 1, !dbg !3718
  store i32 %inc, i32* %arrayidx6, align 4, !dbg !3718
  br label %if.end, !dbg !3717

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !3713

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %j, align 4, !dbg !3719
  %inc7 = add nsw i32 %10, 1, !dbg !3719
  store i32 %inc7, i32* %j, align 4, !dbg !3719
  br label %for.cond1, !dbg !3720, !llvm.loop !3721

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !3723

for.inc8:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !3724
  %inc9 = add nsw i32 %11, 1, !dbg !3724
  store i32 %inc9, i32* %i, align 4, !dbg !3724
  br label %for.cond, !dbg !3725, !llvm.loop !3726

for.end10:                                        ; preds = %for.cond
  ret void, !dbg !3728
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i32 @ix86_memory_move_cost(i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_subset_p(i64 %x, i64 %y) #0 !dbg !3729 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !3733, metadata !DIExpression()), !dbg !3734
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !3735, metadata !DIExpression()), !dbg !3736
  %0 = load i64, i64* %x.addr, align 8, !dbg !3737
  %1 = load i64, i64* %y.addr, align 8, !dbg !3738
  %neg = xor i64 %1, -1, !dbg !3739
  %and = and i64 %0, %neg, !dbg !3740
  %cmp = icmp eq i64 %and, 0, !dbg !3741
  %conv = zext i1 %cmp to i32, !dbg !3741
  %conv1 = trunc i32 %conv to i8, !dbg !3742
  ret i8 %conv1, !dbg !3743
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_reg_subclasses() #0 !dbg !3744 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp_hard_regset2 = alloca i64, align 8
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3745, metadata !DIExpression()), !dbg !3746
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3747, metadata !DIExpression()), !dbg !3748
  call void @llvm.dbg.declare(metadata i64* %temp_hard_regset2, metadata !3749, metadata !DIExpression()), !dbg !3750
  store i32 0, i32* %i, align 4, !dbg !3751
  br label %for.cond, !dbg !3753

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3754
  %cmp = icmp slt i32 %0, 27, !dbg !3756
  br i1 %cmp, label %for.body, label %for.end8, !dbg !3757

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !3758
  br label %for.cond1, !dbg !3760

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !3761
  %cmp2 = icmp slt i32 %1, 27, !dbg !3763
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3764

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %i, align 4, !dbg !3765
  %idxprom = sext i32 %2 to i64, !dbg !3766
  %arrayidx = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @alloc_reg_class_subclasses, i64 0, i64 %idxprom, !dbg !3766
  %3 = load i32, i32* %j, align 4, !dbg !3767
  %idxprom4 = sext i32 %3 to i64, !dbg !3766
  %arrayidx5 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx, i64 0, i64 %idxprom4, !dbg !3766
  store i32 27, i32* %arrayidx5, align 4, !dbg !3768
  br label %for.inc, !dbg !3766

for.inc:                                          ; preds = %for.body3
  %4 = load i32, i32* %j, align 4, !dbg !3769
  %inc = add nsw i32 %4, 1, !dbg !3769
  store i32 %inc, i32* %j, align 4, !dbg !3769
  br label %for.cond1, !dbg !3770, !llvm.loop !3771

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !3772

for.inc6:                                         ; preds = %for.end
  %5 = load i32, i32* %i, align 4, !dbg !3773
  %inc7 = add nsw i32 %5, 1, !dbg !3773
  store i32 %inc7, i32* %i, align 4, !dbg !3773
  br label %for.cond, !dbg !3774, !llvm.loop !3775

for.end8:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3777
  br label %for.cond9, !dbg !3779

for.cond9:                                        ; preds = %for.inc38, %for.end8
  %6 = load i32, i32* %i, align 4, !dbg !3780
  %cmp10 = icmp slt i32 %6, 27, !dbg !3782
  br i1 %cmp10, label %for.body11, label %for.end40, !dbg !3783

for.body11:                                       ; preds = %for.cond9
  %7 = load i32, i32* %i, align 4, !dbg !3784
  %cmp12 = icmp eq i32 %7, 0, !dbg !3787
  br i1 %cmp12, label %if.then, label %if.end, !dbg !3788

if.then:                                          ; preds = %for.body11
  br label %for.inc38, !dbg !3789

if.end:                                           ; preds = %for.body11
  %8 = load i32, i32* %i, align 4, !dbg !3790
  %idxprom13 = sext i32 %8 to i64, !dbg !3790
  %arrayidx14 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom13, !dbg !3790
  %9 = load i64, i64* %arrayidx14, align 8, !dbg !3790
  store i64 %9, i64* @temp_hard_regset, align 8, !dbg !3790
  %10 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3791
  %neg = xor i64 %10, -1, !dbg !3791
  %11 = load i64, i64* @temp_hard_regset, align 8, !dbg !3791
  %and = and i64 %11, %neg, !dbg !3791
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !3791
  %12 = load i64, i64* @temp_hard_regset, align 8, !dbg !3792
  %call = call zeroext i8 @hard_reg_set_empty_p(i64 %12), !dbg !3794
  %tobool = icmp ne i8 %call, 0, !dbg !3794
  br i1 %tobool, label %if.then15, label %if.end16, !dbg !3795

if.then15:                                        ; preds = %if.end
  br label %for.inc38, !dbg !3796

if.end16:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4, !dbg !3797
  br label %for.cond17, !dbg !3799

for.cond17:                                       ; preds = %for.inc35, %if.end16
  %13 = load i32, i32* %j, align 4, !dbg !3800
  %cmp18 = icmp slt i32 %13, 27, !dbg !3802
  br i1 %cmp18, label %for.body19, label %for.end37, !dbg !3803

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4, !dbg !3804
  %15 = load i32, i32* %j, align 4, !dbg !3806
  %cmp20 = icmp ne i32 %14, %15, !dbg !3807
  br i1 %cmp20, label %if.then21, label %if.end34, !dbg !3808

if.then21:                                        ; preds = %for.body19
  call void @llvm.dbg.declare(metadata i32** %p, metadata !3809, metadata !DIExpression()), !dbg !3812
  %16 = load i32, i32* %j, align 4, !dbg !3813
  %idxprom22 = sext i32 %16 to i64, !dbg !3813
  %arrayidx23 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom22, !dbg !3813
  %17 = load i64, i64* %arrayidx23, align 8, !dbg !3813
  store i64 %17, i64* %temp_hard_regset2, align 8, !dbg !3813
  %18 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3814
  %neg24 = xor i64 %18, -1, !dbg !3814
  %19 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3814
  %and25 = and i64 %19, %neg24, !dbg !3814
  store i64 %and25, i64* %temp_hard_regset2, align 8, !dbg !3814
  %20 = load i64, i64* @temp_hard_regset, align 8, !dbg !3815
  %21 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3817
  %call26 = call zeroext i8 @hard_reg_set_subset_p(i64 %20, i64 %21), !dbg !3818
  %tobool27 = icmp ne i8 %call26, 0, !dbg !3818
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !3819

if.then28:                                        ; preds = %if.then21
  br label %for.inc35, !dbg !3820

if.end29:                                         ; preds = %if.then21
  %22 = load i32, i32* %j, align 4, !dbg !3821
  %idxprom30 = sext i32 %22 to i64, !dbg !3822
  %arrayidx31 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @alloc_reg_class_subclasses, i64 0, i64 %idxprom30, !dbg !3822
  %arrayidx32 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx31, i64 0, i64 0, !dbg !3822
  store i32* %arrayidx32, i32** %p, align 8, !dbg !3823
  br label %while.cond, !dbg !3824

while.cond:                                       ; preds = %while.body, %if.end29
  %23 = load i32*, i32** %p, align 8, !dbg !3825
  %24 = load i32, i32* %23, align 4, !dbg !3826
  %cmp33 = icmp ne i32 %24, 27, !dbg !3827
  br i1 %cmp33, label %while.body, label %while.end, !dbg !3824

while.body:                                       ; preds = %while.cond
  %25 = load i32*, i32** %p, align 8, !dbg !3828
  %incdec.ptr = getelementptr inbounds i32, i32* %25, i32 1, !dbg !3828
  store i32* %incdec.ptr, i32** %p, align 8, !dbg !3828
  br label %while.cond, !dbg !3824, !llvm.loop !3829

while.end:                                        ; preds = %while.cond
  %26 = load i32, i32* %i, align 4, !dbg !3830
  %27 = load i32*, i32** %p, align 8, !dbg !3831
  store i32 %26, i32* %27, align 4, !dbg !3832
  br label %if.end34, !dbg !3833

if.end34:                                         ; preds = %while.end, %for.body19
  br label %for.inc35, !dbg !3806

for.inc35:                                        ; preds = %if.end34, %if.then28
  %28 = load i32, i32* %j, align 4, !dbg !3834
  %inc36 = add nsw i32 %28, 1, !dbg !3834
  store i32 %inc36, i32* %j, align 4, !dbg !3834
  br label %for.cond17, !dbg !3835, !llvm.loop !3836

for.end37:                                        ; preds = %for.cond17
  br label %for.inc38, !dbg !3838

for.inc38:                                        ; preds = %for.end37, %if.then15, %if.then
  %29 = load i32, i32* %i, align 4, !dbg !3839
  %inc39 = add nsw i32 %29, 1, !dbg !3839
  store i32 %inc39, i32* %i, align 4, !dbg !3839
  br label %for.cond9, !dbg !3840, !llvm.loop !3841

for.end40:                                        ; preds = %for.cond9
  ret void, !dbg !3843
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_cover_and_important_classes() #0 !dbg !2457 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %cl = alloca i32, align 4
  %set_p = alloca i8, align 1
  %cover_classes = alloca i32*, align 8
  %temp_hard_regset2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3844, metadata !DIExpression()), !dbg !3845
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3846, metadata !DIExpression()), !dbg !3847
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3848, metadata !DIExpression()), !dbg !3849
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !3850, metadata !DIExpression()), !dbg !3851
  call void @llvm.dbg.declare(metadata i8* %set_p, metadata !3852, metadata !DIExpression()), !dbg !3853
  call void @llvm.dbg.declare(metadata i32** %cover_classes, metadata !3854, metadata !DIExpression()), !dbg !3855
  call void @llvm.dbg.declare(metadata i64* %temp_hard_regset2, metadata !3856, metadata !DIExpression()), !dbg !3857
  %0 = load i32* ()*, i32* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 96), align 8, !dbg !3858
  %cmp = icmp eq i32* ()* %0, null, !dbg !3860
  br i1 %cmp, label %if.then, label %if.else, !dbg !3861

if.then:                                          ; preds = %entry
  store i32* null, i32** %cover_classes, align 8, !dbg !3862
  br label %if.end, !dbg !3863

if.else:                                          ; preds = %entry
  %1 = load i32* ()*, i32* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 96), align 8, !dbg !3864
  %call = call i32* %1(), !dbg !3865
  store i32* %call, i32** %cover_classes, align 8, !dbg !3866
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i32*, i32** %cover_classes, align 8, !dbg !3867
  %cmp1 = icmp eq i32* %2, null, !dbg !3869
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !3870

if.then2:                                         ; preds = %if.end
  br label %if.end9, !dbg !3871

if.else3:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3872
  br label %for.cond, !dbg !3875

for.cond:                                         ; preds = %for.inc, %if.else3
  %3 = load i32*, i32** %cover_classes, align 8, !dbg !3876
  %4 = load i32, i32* %i, align 4, !dbg !3878
  %idxprom = sext i32 %4 to i64, !dbg !3876
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !3876
  %5 = load i32, i32* %arrayidx, align 4, !dbg !3876
  store i32 %5, i32* %cl, align 4, !dbg !3879
  %cmp4 = icmp ne i32 %5, 27, !dbg !3880
  br i1 %cmp4, label %for.body, label %for.end, !dbg !3881

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %cl, align 4, !dbg !3882
  %7 = load i32, i32* %i, align 4, !dbg !3883
  %idxprom5 = sext i32 %7 to i64, !dbg !3884
  %arrayidx6 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom5, !dbg !3884
  store i32 %6, i32* %arrayidx6, align 4, !dbg !3885
  br label %for.inc, !dbg !3884

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !3886
  %inc = add nsw i32 %8, 1, !dbg !3886
  store i32 %inc, i32* %i, align 4, !dbg !3886
  br label %for.cond, !dbg !3887, !llvm.loop !3888

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !3890
  %idxprom7 = sext i32 %9 to i64, !dbg !3891
  %arrayidx8 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom7, !dbg !3891
  store i32 27, i32* %arrayidx8, align 4, !dbg !3892
  br label %if.end9

if.end9:                                          ; preds = %for.end, %if.then2
  %10 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !3893
  %cmp10 = icmp eq i32 %10, 1, !dbg !3895
  br i1 %cmp10, label %if.then11, label %if.end63, !dbg !3896

if.then11:                                        ; preds = %if.end9
  store i32 0, i32* %n, align 4, !dbg !3897
  store i32 0, i32* %i, align 4, !dbg !3899
  br label %for.cond12, !dbg !3901

for.cond12:                                       ; preds = %for.inc58, %if.then11
  %11 = load i32, i32* %i, align 4, !dbg !3902
  %cmp13 = icmp sle i32 %11, 27, !dbg !3904
  br i1 %cmp13, label %for.body14, label %for.end60, !dbg !3905

for.body14:                                       ; preds = %for.cond12
  %12 = load i32, i32* %i, align 4, !dbg !3906
  %cmp15 = icmp eq i32 %12, 0, !dbg !3909
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !3910

if.then16:                                        ; preds = %for.body14
  br label %for.inc58, !dbg !3911

if.end17:                                         ; preds = %for.body14
  store i32 0, i32* %j, align 4, !dbg !3912
  br label %for.cond18, !dbg !3914

for.cond18:                                       ; preds = %for.inc25, %if.end17
  %13 = load i32, i32* %j, align 4, !dbg !3915
  %cmp19 = icmp slt i32 %13, 33, !dbg !3917
  br i1 %cmp19, label %for.body20, label %for.end27, !dbg !3918

for.body20:                                       ; preds = %for.cond18
  %14 = load i32, i32* %j, align 4, !dbg !3919
  %call21 = call i32 @regclass_for_constraint(i32 %14), !dbg !3919
  %15 = load i32, i32* %i, align 4, !dbg !3921
  %cmp22 = icmp eq i32 %call21, %15, !dbg !3922
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !3923

if.then23:                                        ; preds = %for.body20
  br label %for.end27, !dbg !3924

if.end24:                                         ; preds = %for.body20
  br label %for.inc25, !dbg !3921

for.inc25:                                        ; preds = %if.end24
  %16 = load i32, i32* %j, align 4, !dbg !3925
  %inc26 = add nsw i32 %16, 1, !dbg !3925
  store i32 %inc26, i32* %j, align 4, !dbg !3925
  br label %for.cond18, !dbg !3926, !llvm.loop !3927

for.end27:                                        ; preds = %if.then23, %for.cond18
  %17 = load i32, i32* %j, align 4, !dbg !3929
  %cmp28 = icmp slt i32 %17, 33, !dbg !3931
  br i1 %cmp28, label %if.then29, label %if.end33, !dbg !3932

if.then29:                                        ; preds = %for.end27
  %18 = load i32, i32* %i, align 4, !dbg !3933
  %19 = load i32, i32* %n, align 4, !dbg !3935
  %inc30 = add nsw i32 %19, 1, !dbg !3935
  store i32 %inc30, i32* %n, align 4, !dbg !3935
  %idxprom31 = sext i32 %19 to i64, !dbg !3936
  %arrayidx32 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom31, !dbg !3936
  store i32 %18, i32* %arrayidx32, align 4, !dbg !3937
  br label %for.inc58, !dbg !3938

if.end33:                                         ; preds = %for.end27
  %20 = load i32, i32* %i, align 4, !dbg !3939
  %idxprom34 = sext i32 %20 to i64, !dbg !3939
  %arrayidx35 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom34, !dbg !3939
  %21 = load i64, i64* %arrayidx35, align 8, !dbg !3939
  store i64 %21, i64* @temp_hard_regset, align 8, !dbg !3939
  %22 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3940
  %neg = xor i64 %22, -1, !dbg !3940
  %23 = load i64, i64* @temp_hard_regset, align 8, !dbg !3940
  %and = and i64 %23, %neg, !dbg !3940
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !3940
  store i32 0, i32* %j, align 4, !dbg !3941
  br label %for.cond36, !dbg !3943

for.cond36:                                       ; preds = %for.inc49, %if.end33
  %24 = load i32, i32* %j, align 4, !dbg !3944
  %cmp37 = icmp slt i32 %24, 27, !dbg !3946
  br i1 %cmp37, label %for.body38, label %for.end51, !dbg !3947

for.body38:                                       ; preds = %for.cond36
  %25 = load i32, i32* %i, align 4, !dbg !3948
  %26 = load i32, i32* %j, align 4, !dbg !3951
  %cmp39 = icmp eq i32 %25, %26, !dbg !3952
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !3953

if.then40:                                        ; preds = %for.body38
  br label %for.inc49, !dbg !3954

if.end41:                                         ; preds = %for.body38
  %27 = load i32, i32* %j, align 4, !dbg !3955
  %idxprom42 = sext i32 %27 to i64, !dbg !3955
  %arrayidx43 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom42, !dbg !3955
  %28 = load i64, i64* %arrayidx43, align 8, !dbg !3955
  store i64 %28, i64* %temp_hard_regset2, align 8, !dbg !3955
  %29 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !3956
  %neg44 = xor i64 %29, -1, !dbg !3956
  %30 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3956
  %and45 = and i64 %30, %neg44, !dbg !3956
  store i64 %and45, i64* %temp_hard_regset2, align 8, !dbg !3956
  %31 = load i64, i64* @temp_hard_regset, align 8, !dbg !3957
  %32 = load i64, i64* %temp_hard_regset2, align 8, !dbg !3959
  %call46 = call zeroext i8 @hard_reg_set_equal_p(i64 %31, i64 %32), !dbg !3960
  %tobool = icmp ne i8 %call46, 0, !dbg !3960
  br i1 %tobool, label %if.then47, label %if.end48, !dbg !3961

if.then47:                                        ; preds = %if.end41
  br label %for.end51, !dbg !3962

if.end48:                                         ; preds = %if.end41
  br label %for.inc49, !dbg !3963

for.inc49:                                        ; preds = %if.end48, %if.then40
  %33 = load i32, i32* %j, align 4, !dbg !3964
  %inc50 = add nsw i32 %33, 1, !dbg !3964
  store i32 %inc50, i32* %j, align 4, !dbg !3964
  br label %for.cond36, !dbg !3965, !llvm.loop !3966

for.end51:                                        ; preds = %if.then47, %for.cond36
  %34 = load i32, i32* %j, align 4, !dbg !3968
  %35 = load i32, i32* %i, align 4, !dbg !3970
  %cmp52 = icmp sge i32 %34, %35, !dbg !3971
  br i1 %cmp52, label %if.then53, label %if.end57, !dbg !3972

if.then53:                                        ; preds = %for.end51
  %36 = load i32, i32* %i, align 4, !dbg !3973
  %37 = load i32, i32* %n, align 4, !dbg !3974
  %inc54 = add nsw i32 %37, 1, !dbg !3974
  store i32 %inc54, i32* %n, align 4, !dbg !3974
  %idxprom55 = sext i32 %37 to i64, !dbg !3975
  %arrayidx56 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom55, !dbg !3975
  store i32 %36, i32* %arrayidx56, align 4, !dbg !3976
  br label %if.end57, !dbg !3975

if.end57:                                         ; preds = %if.then53, %for.end51
  br label %for.inc58, !dbg !3977

for.inc58:                                        ; preds = %if.end57, %if.then29, %if.then16
  %38 = load i32, i32* %i, align 4, !dbg !3978
  %inc59 = add nsw i32 %38, 1, !dbg !3978
  store i32 %inc59, i32* %i, align 4, !dbg !3978
  br label %for.cond12, !dbg !3979, !llvm.loop !3980

for.end60:                                        ; preds = %for.cond12
  %39 = load i32, i32* %n, align 4, !dbg !3982
  %idxprom61 = sext i32 %39 to i64, !dbg !3983
  %arrayidx62 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom61, !dbg !3983
  store i32 27, i32* %arrayidx62, align 4, !dbg !3984
  br label %if.end63, !dbg !3985

if.end63:                                         ; preds = %for.end60, %if.end9
  store i32 0, i32* @ira_reg_class_cover_size, align 4, !dbg !3986
  store i32 0, i32* %i, align 4, !dbg !3987
  br label %for.cond64, !dbg !3989

for.cond64:                                       ; preds = %for.inc93, %if.end63
  %40 = load i32, i32* %i, align 4, !dbg !3990
  %idxprom65 = sext i32 %40 to i64, !dbg !3992
  %arrayidx66 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom65, !dbg !3992
  %41 = load i32, i32* %arrayidx66, align 4, !dbg !3992
  store i32 %41, i32* %cl, align 4, !dbg !3993
  %cmp67 = icmp ne i32 %41, 27, !dbg !3994
  br i1 %cmp67, label %for.body68, label %for.end95, !dbg !3995

for.body68:                                       ; preds = %for.cond64
  store i32 0, i32* %j, align 4, !dbg !3996
  br label %for.cond69, !dbg !3999

for.cond69:                                       ; preds = %for.inc79, %for.body68
  %42 = load i32, i32* %j, align 4, !dbg !4000
  %43 = load i32, i32* %i, align 4, !dbg !4002
  %cmp70 = icmp slt i32 %42, %43, !dbg !4003
  br i1 %cmp70, label %for.body71, label %for.end81, !dbg !4004

for.body71:                                       ; preds = %for.cond69
  %44 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !4005
  %cmp72 = icmp ne i32 %44, 1, !dbg !4007
  br i1 %cmp72, label %land.lhs.true, label %if.end78, !dbg !4008

land.lhs.true:                                    ; preds = %for.body71
  %45 = load i32, i32* %cl, align 4, !dbg !4009
  %46 = load i32, i32* %j, align 4, !dbg !4010
  %idxprom73 = sext i32 %46 to i64, !dbg !4011
  %arrayidx74 = getelementptr inbounds [28 x i32], [28 x i32]* @setup_cover_and_important_classes.classes, i64 0, i64 %idxprom73, !dbg !4011
  %47 = load i32, i32* %arrayidx74, align 4, !dbg !4011
  %call75 = call i32 @reg_classes_intersect_p(i32 %45, i32 %47), !dbg !4012
  %tobool76 = icmp ne i32 %call75, 0, !dbg !4012
  br i1 %tobool76, label %if.then77, label %if.end78, !dbg !4013

if.then77:                                        ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i32 792, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)), !dbg !4014
  br label %if.end78, !dbg !4014

if.end78:                                         ; preds = %if.then77, %land.lhs.true, %for.body71
  br label %for.inc79, !dbg !4015

for.inc79:                                        ; preds = %if.end78
  %48 = load i32, i32* %j, align 4, !dbg !4016
  %inc80 = add nsw i32 %48, 1, !dbg !4016
  store i32 %inc80, i32* %j, align 4, !dbg !4016
  br label %for.cond69, !dbg !4017, !llvm.loop !4018

for.end81:                                        ; preds = %for.cond69
  %49 = load i32, i32* %cl, align 4, !dbg !4020
  %idxprom82 = sext i32 %49 to i64, !dbg !4020
  %arrayidx83 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom82, !dbg !4020
  %50 = load i64, i64* %arrayidx83, align 8, !dbg !4020
  store i64 %50, i64* @temp_hard_regset, align 8, !dbg !4020
  %51 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4021
  %neg84 = xor i64 %51, -1, !dbg !4021
  %52 = load i64, i64* @temp_hard_regset, align 8, !dbg !4021
  %and85 = and i64 %52, %neg84, !dbg !4021
  store i64 %and85, i64* @temp_hard_regset, align 8, !dbg !4021
  %53 = load i64, i64* @temp_hard_regset, align 8, !dbg !4022
  %call86 = call zeroext i8 @hard_reg_set_empty_p(i64 %53), !dbg !4024
  %tobool87 = icmp ne i8 %call86, 0, !dbg !4024
  br i1 %tobool87, label %if.end92, label %if.then88, !dbg !4025

if.then88:                                        ; preds = %for.end81
  %54 = load i32, i32* %cl, align 4, !dbg !4026
  %55 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4027
  %inc89 = add nsw i32 %55, 1, !dbg !4027
  store i32 %inc89, i32* @ira_reg_class_cover_size, align 4, !dbg !4027
  %idxprom90 = sext i32 %55 to i64, !dbg !4028
  %arrayidx91 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom90, !dbg !4028
  store i32 %54, i32* %arrayidx91, align 4, !dbg !4029
  br label %if.end92, !dbg !4028

if.end92:                                         ; preds = %if.then88, %for.end81
  br label %for.inc93, !dbg !4030

for.inc93:                                        ; preds = %if.end92
  %56 = load i32, i32* %i, align 4, !dbg !4031
  %inc94 = add nsw i32 %56, 1, !dbg !4031
  store i32 %inc94, i32* %i, align 4, !dbg !4031
  br label %for.cond64, !dbg !4032, !llvm.loop !4033

for.end95:                                        ; preds = %for.cond64
  store i32 0, i32* @ira_important_classes_num, align 4, !dbg !4035
  store i32 0, i32* %cl, align 4, !dbg !4036
  br label %for.cond96, !dbg !4038

for.cond96:                                       ; preds = %for.inc145, %for.end95
  %57 = load i32, i32* %cl, align 4, !dbg !4039
  %cmp97 = icmp slt i32 %57, 27, !dbg !4041
  br i1 %cmp97, label %for.body98, label %for.end147, !dbg !4042

for.body98:                                       ; preds = %for.cond96
  %58 = load i32, i32* %cl, align 4, !dbg !4043
  %idxprom99 = sext i32 %58 to i64, !dbg !4043
  %arrayidx100 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom99, !dbg !4043
  %59 = load i64, i64* %arrayidx100, align 8, !dbg !4043
  store i64 %59, i64* @temp_hard_regset, align 8, !dbg !4043
  %60 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4045
  %neg101 = xor i64 %60, -1, !dbg !4045
  %61 = load i64, i64* @temp_hard_regset, align 8, !dbg !4045
  %and102 = and i64 %61, %neg101, !dbg !4045
  store i64 %and102, i64* @temp_hard_regset, align 8, !dbg !4045
  %62 = load i64, i64* @temp_hard_regset, align 8, !dbg !4046
  %call103 = call zeroext i8 @hard_reg_set_empty_p(i64 %62), !dbg !4048
  %tobool104 = icmp ne i8 %call103, 0, !dbg !4048
  br i1 %tobool104, label %if.end144, label %if.then105, !dbg !4049

if.then105:                                       ; preds = %for.body98
  store i8 0, i8* %set_p, align 1, !dbg !4050
  store i32 0, i32* %j, align 4, !dbg !4052
  br label %for.cond106, !dbg !4054

for.cond106:                                      ; preds = %for.inc131, %if.then105
  %63 = load i32, i32* %j, align 4, !dbg !4055
  %64 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4057
  %cmp107 = icmp slt i32 %63, %64, !dbg !4058
  br i1 %cmp107, label %for.body108, label %for.end133, !dbg !4059

for.body108:                                      ; preds = %for.cond106
  %65 = load i32, i32* %cl, align 4, !dbg !4060
  %idxprom109 = sext i32 %65 to i64, !dbg !4060
  %arrayidx110 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom109, !dbg !4060
  %66 = load i64, i64* %arrayidx110, align 8, !dbg !4060
  store i64 %66, i64* @temp_hard_regset, align 8, !dbg !4060
  %67 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4062
  %neg111 = xor i64 %67, -1, !dbg !4062
  %68 = load i64, i64* @temp_hard_regset, align 8, !dbg !4062
  %and112 = and i64 %68, %neg111, !dbg !4062
  store i64 %and112, i64* @temp_hard_regset, align 8, !dbg !4062
  %69 = load i32, i32* %j, align 4, !dbg !4063
  %idxprom113 = sext i32 %69 to i64, !dbg !4063
  %arrayidx114 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom113, !dbg !4063
  %70 = load i32, i32* %arrayidx114, align 4, !dbg !4063
  %idxprom115 = zext i32 %70 to i64, !dbg !4063
  %arrayidx116 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom115, !dbg !4063
  %71 = load i64, i64* %arrayidx116, align 8, !dbg !4063
  store i64 %71, i64* %temp_hard_regset2, align 8, !dbg !4063
  %72 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4064
  %neg117 = xor i64 %72, -1, !dbg !4064
  %73 = load i64, i64* %temp_hard_regset2, align 8, !dbg !4064
  %and118 = and i64 %73, %neg117, !dbg !4064
  store i64 %and118, i64* %temp_hard_regset2, align 8, !dbg !4064
  %74 = load i32, i32* %cl, align 4, !dbg !4065
  %75 = load i32, i32* %j, align 4, !dbg !4067
  %idxprom119 = sext i32 %75 to i64, !dbg !4068
  %arrayidx120 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom119, !dbg !4068
  %76 = load i32, i32* %arrayidx120, align 4, !dbg !4068
  %cmp121 = icmp eq i32 %74, %76, !dbg !4069
  br i1 %cmp121, label %if.then124, label %lor.lhs.false, !dbg !4070

lor.lhs.false:                                    ; preds = %for.body108
  %77 = load i64, i64* @temp_hard_regset, align 8, !dbg !4071
  %78 = load i64, i64* %temp_hard_regset2, align 8, !dbg !4072
  %call122 = call zeroext i8 @hard_reg_set_equal_p(i64 %77, i64 %78), !dbg !4073
  %conv = zext i8 %call122 to i32, !dbg !4073
  %tobool123 = icmp ne i32 %conv, 0, !dbg !4073
  br i1 %tobool123, label %if.then124, label %if.else125, !dbg !4074

if.then124:                                       ; preds = %lor.lhs.false, %for.body108
  br label %for.end133, !dbg !4075

if.else125:                                       ; preds = %lor.lhs.false
  %79 = load i64, i64* @temp_hard_regset, align 8, !dbg !4076
  %80 = load i64, i64* %temp_hard_regset2, align 8, !dbg !4078
  %call126 = call zeroext i8 @hard_reg_set_subset_p(i64 %79, i64 %80), !dbg !4079
  %tobool127 = icmp ne i8 %call126, 0, !dbg !4079
  br i1 %tobool127, label %if.then128, label %if.end129, !dbg !4080

if.then128:                                       ; preds = %if.else125
  store i8 1, i8* %set_p, align 1, !dbg !4081
  br label %if.end129, !dbg !4082

if.end129:                                        ; preds = %if.then128, %if.else125
  br label %if.end130

if.end130:                                        ; preds = %if.end129
  br label %for.inc131, !dbg !4083

for.inc131:                                       ; preds = %if.end130
  %81 = load i32, i32* %j, align 4, !dbg !4084
  %inc132 = add nsw i32 %81, 1, !dbg !4084
  store i32 %inc132, i32* %j, align 4, !dbg !4084
  br label %for.cond106, !dbg !4085, !llvm.loop !4086

for.end133:                                       ; preds = %if.then124, %for.cond106
  %82 = load i8, i8* %set_p, align 1, !dbg !4088
  %conv134 = zext i8 %82 to i32, !dbg !4088
  %tobool135 = icmp ne i32 %conv134, 0, !dbg !4088
  br i1 %tobool135, label %land.lhs.true136, label %if.end143, !dbg !4090

land.lhs.true136:                                 ; preds = %for.end133
  %83 = load i32, i32* %j, align 4, !dbg !4091
  %84 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4092
  %cmp137 = icmp sge i32 %83, %84, !dbg !4093
  br i1 %cmp137, label %if.then139, label %if.end143, !dbg !4094

if.then139:                                       ; preds = %land.lhs.true136
  %85 = load i32, i32* %cl, align 4, !dbg !4095
  %86 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4096
  %inc140 = add nsw i32 %86, 1, !dbg !4096
  store i32 %inc140, i32* @ira_important_classes_num, align 4, !dbg !4096
  %idxprom141 = sext i32 %86 to i64, !dbg !4097
  %arrayidx142 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_classes, i64 0, i64 %idxprom141, !dbg !4097
  store i32 %85, i32* %arrayidx142, align 4, !dbg !4098
  br label %if.end143, !dbg !4097

if.end143:                                        ; preds = %if.then139, %land.lhs.true136, %for.end133
  br label %if.end144, !dbg !4099

if.end144:                                        ; preds = %if.end143, %for.body98
  br label %for.inc145, !dbg !4100

for.inc145:                                       ; preds = %if.end144
  %87 = load i32, i32* %cl, align 4, !dbg !4101
  %inc146 = add nsw i32 %87, 1, !dbg !4101
  store i32 %inc146, i32* %cl, align 4, !dbg !4101
  br label %for.cond96, !dbg !4102, !llvm.loop !4103

for.end147:                                       ; preds = %for.cond96
  store i32 0, i32* %j, align 4, !dbg !4105
  br label %for.cond148, !dbg !4107

for.cond148:                                      ; preds = %for.inc157, %for.end147
  %88 = load i32, i32* %j, align 4, !dbg !4108
  %89 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4110
  %cmp149 = icmp slt i32 %88, %89, !dbg !4111
  br i1 %cmp149, label %for.body151, label %for.end159, !dbg !4112

for.body151:                                      ; preds = %for.cond148
  %90 = load i32, i32* %j, align 4, !dbg !4113
  %idxprom152 = sext i32 %90 to i64, !dbg !4114
  %arrayidx153 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom152, !dbg !4114
  %91 = load i32, i32* %arrayidx153, align 4, !dbg !4114
  %92 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4115
  %inc154 = add nsw i32 %92, 1, !dbg !4115
  store i32 %inc154, i32* @ira_important_classes_num, align 4, !dbg !4115
  %idxprom155 = sext i32 %92 to i64, !dbg !4116
  %arrayidx156 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_classes, i64 0, i64 %idxprom155, !dbg !4116
  store i32 %91, i32* %arrayidx156, align 4, !dbg !4117
  br label %for.inc157, !dbg !4116

for.inc157:                                       ; preds = %for.body151
  %93 = load i32, i32* %j, align 4, !dbg !4118
  %inc158 = add nsw i32 %93, 1, !dbg !4118
  store i32 %inc158, i32* %j, align 4, !dbg !4118
  br label %for.cond148, !dbg !4119, !llvm.loop !4120

for.end159:                                       ; preds = %for.cond148
  ret void, !dbg !4122
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_class_translate() #0 !dbg !4123 {
entry:
  %cl = alloca i32, align 4
  %mode = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %best_class = alloca i32, align 4
  %cl_ptr = alloca i32*, align 8
  %i = alloca i32, align 4
  %cost = alloca i32, align 4
  %min_cost = alloca i32, align 4
  %best_cost = alloca i32, align 4
  %temp_hard_regset2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !4124, metadata !DIExpression()), !dbg !4125
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4126, metadata !DIExpression()), !dbg !4127
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !4128, metadata !DIExpression()), !dbg !4129
  call void @llvm.dbg.declare(metadata i32* %best_class, metadata !4130, metadata !DIExpression()), !dbg !4131
  call void @llvm.dbg.declare(metadata i32** %cl_ptr, metadata !4132, metadata !DIExpression()), !dbg !4133
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4134, metadata !DIExpression()), !dbg !4135
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4136, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.declare(metadata i32* %min_cost, metadata !4138, metadata !DIExpression()), !dbg !4139
  call void @llvm.dbg.declare(metadata i32* %best_cost, metadata !4140, metadata !DIExpression()), !dbg !4141
  store i32 0, i32* %cl, align 4, !dbg !4142
  br label %for.cond, !dbg !4144

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %cl, align 4, !dbg !4145
  %cmp = icmp slt i32 %0, 27, !dbg !4147
  br i1 %cmp, label %for.body, label %for.end, !dbg !4148

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %cl, align 4, !dbg !4149
  %idxprom = sext i32 %1 to i64, !dbg !4150
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom, !dbg !4150
  store i32 0, i32* %arrayidx, align 4, !dbg !4151
  br label %for.inc, !dbg !4150

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %cl, align 4, !dbg !4152
  %inc = add nsw i32 %2, 1, !dbg !4152
  store i32 %inc, i32* %cl, align 4, !dbg !4152
  br label %for.cond, !dbg !4153, !llvm.loop !4154

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !4156
  %cmp1 = icmp eq i32 %3, 1, !dbg !4158
  br i1 %cmp1, label %if.then, label %if.end25, !dbg !4159

if.then:                                          ; preds = %for.end
  store i32 0, i32* %cl, align 4, !dbg !4160
  br label %for.cond2, !dbg !4162

for.cond2:                                        ; preds = %for.inc22, %if.then
  %4 = load i32, i32* %cl, align 4, !dbg !4163
  %cmp3 = icmp slt i32 %4, 27, !dbg !4165
  br i1 %cmp3, label %for.body4, label %for.end24, !dbg !4166

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %cl, align 4, !dbg !4167
  %idxprom5 = sext i32 %5 to i64, !dbg !4167
  %arrayidx6 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom5, !dbg !4167
  %6 = load i64, i64* %arrayidx6, align 8, !dbg !4167
  store i64 %6, i64* @temp_hard_regset, align 8, !dbg !4167
  %7 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4169
  %neg = xor i64 %7, -1, !dbg !4169
  %8 = load i64, i64* @temp_hard_regset, align 8, !dbg !4169
  %and = and i64 %8, %neg, !dbg !4169
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !4169
  store i32 0, i32* %i, align 4, !dbg !4170
  br label %for.cond7, !dbg !4172

for.cond7:                                        ; preds = %for.inc19, %for.body4
  %9 = load i32, i32* %i, align 4, !dbg !4173
  %10 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4175
  %cmp8 = icmp slt i32 %9, %10, !dbg !4176
  br i1 %cmp8, label %for.body9, label %for.end21, !dbg !4177

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata i64* %temp_hard_regset2, metadata !4178, metadata !DIExpression()), !dbg !4180
  %11 = load i32, i32* %i, align 4, !dbg !4181
  %idxprom10 = sext i32 %11 to i64, !dbg !4182
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom10, !dbg !4182
  %12 = load i32, i32* %arrayidx11, align 4, !dbg !4182
  store i32 %12, i32* %cover_class, align 4, !dbg !4183
  %13 = load i32, i32* %cover_class, align 4, !dbg !4184
  %idxprom12 = zext i32 %13 to i64, !dbg !4184
  %arrayidx13 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom12, !dbg !4184
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !4184
  store i64 %14, i64* %temp_hard_regset2, align 8, !dbg !4184
  %15 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4185
  %neg14 = xor i64 %15, -1, !dbg !4185
  %16 = load i64, i64* %temp_hard_regset2, align 8, !dbg !4185
  %and15 = and i64 %16, %neg14, !dbg !4185
  store i64 %and15, i64* %temp_hard_regset2, align 8, !dbg !4185
  %17 = load i64, i64* @temp_hard_regset, align 8, !dbg !4186
  %18 = load i64, i64* %temp_hard_regset2, align 8, !dbg !4188
  %call = call zeroext i8 @hard_reg_set_equal_p(i64 %17, i64 %18), !dbg !4189
  %tobool = icmp ne i8 %call, 0, !dbg !4189
  br i1 %tobool, label %if.then16, label %if.end, !dbg !4190

if.then16:                                        ; preds = %for.body9
  %19 = load i32, i32* %cover_class, align 4, !dbg !4191
  %20 = load i32, i32* %cl, align 4, !dbg !4192
  %idxprom17 = sext i32 %20 to i64, !dbg !4193
  %arrayidx18 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom17, !dbg !4193
  store i32 %19, i32* %arrayidx18, align 4, !dbg !4194
  br label %if.end, !dbg !4193

if.end:                                           ; preds = %if.then16, %for.body9
  br label %for.inc19, !dbg !4195

for.inc19:                                        ; preds = %if.end
  %21 = load i32, i32* %i, align 4, !dbg !4196
  %inc20 = add nsw i32 %21, 1, !dbg !4196
  store i32 %inc20, i32* %i, align 4, !dbg !4196
  br label %for.cond7, !dbg !4197, !llvm.loop !4198

for.end21:                                        ; preds = %for.cond7
  br label %for.inc22, !dbg !4200

for.inc22:                                        ; preds = %for.end21
  %22 = load i32, i32* %cl, align 4, !dbg !4201
  %inc23 = add nsw i32 %22, 1, !dbg !4201
  store i32 %inc23, i32* %cl, align 4, !dbg !4201
  br label %for.cond2, !dbg !4202, !llvm.loop !4203

for.end24:                                        ; preds = %for.cond2
  br label %if.end25, !dbg !4204

if.end25:                                         ; preds = %for.end24, %for.end
  store i32 0, i32* %i, align 4, !dbg !4205
  br label %for.cond26, !dbg !4207

for.cond26:                                       ; preds = %for.inc51, %if.end25
  %23 = load i32, i32* %i, align 4, !dbg !4208
  %24 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4210
  %cmp27 = icmp slt i32 %23, %24, !dbg !4211
  br i1 %cmp27, label %for.body28, label %for.end53, !dbg !4212

for.body28:                                       ; preds = %for.cond26
  %25 = load i32, i32* %i, align 4, !dbg !4213
  %idxprom29 = sext i32 %25 to i64, !dbg !4215
  %arrayidx30 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom29, !dbg !4215
  %26 = load i32, i32* %arrayidx30, align 4, !dbg !4215
  store i32 %26, i32* %cover_class, align 4, !dbg !4216
  %27 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !4217
  %cmp31 = icmp ne i32 %27, 1, !dbg !4219
  br i1 %cmp31, label %if.then32, label %if.end48, !dbg !4220

if.then32:                                        ; preds = %for.body28
  %28 = load i32, i32* %cover_class, align 4, !dbg !4221
  %idxprom33 = zext i32 %28 to i64, !dbg !4223
  %arrayidx34 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @alloc_reg_class_subclasses, i64 0, i64 %idxprom33, !dbg !4223
  %arrayidx35 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx34, i64 0, i64 0, !dbg !4223
  store i32* %arrayidx35, i32** %cl_ptr, align 8, !dbg !4224
  br label %for.cond36, !dbg !4225

for.cond36:                                       ; preds = %for.inc46, %if.then32
  %29 = load i32*, i32** %cl_ptr, align 8, !dbg !4226
  %30 = load i32, i32* %29, align 4, !dbg !4228
  store i32 %30, i32* %cl, align 4, !dbg !4229
  %cmp37 = icmp ne i32 %30, 27, !dbg !4230
  br i1 %cmp37, label %for.body38, label %for.end47, !dbg !4231

for.body38:                                       ; preds = %for.cond36
  %31 = load i32, i32* %cl, align 4, !dbg !4232
  %idxprom39 = sext i32 %31 to i64, !dbg !4235
  %arrayidx40 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom39, !dbg !4235
  %32 = load i32, i32* %arrayidx40, align 4, !dbg !4235
  %cmp41 = icmp eq i32 %32, 0, !dbg !4236
  br i1 %cmp41, label %if.then42, label %if.end45, !dbg !4237

if.then42:                                        ; preds = %for.body38
  %33 = load i32, i32* %cover_class, align 4, !dbg !4238
  %34 = load i32, i32* %cl, align 4, !dbg !4239
  %idxprom43 = sext i32 %34 to i64, !dbg !4240
  %arrayidx44 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom43, !dbg !4240
  store i32 %33, i32* %arrayidx44, align 4, !dbg !4241
  br label %if.end45, !dbg !4240

if.end45:                                         ; preds = %if.then42, %for.body38
  br label %for.inc46, !dbg !4242

for.inc46:                                        ; preds = %if.end45
  %35 = load i32*, i32** %cl_ptr, align 8, !dbg !4243
  %incdec.ptr = getelementptr inbounds i32, i32* %35, i32 1, !dbg !4243
  store i32* %incdec.ptr, i32** %cl_ptr, align 8, !dbg !4243
  br label %for.cond36, !dbg !4244, !llvm.loop !4245

for.end47:                                        ; preds = %for.cond36
  br label %if.end48, !dbg !4246

if.end48:                                         ; preds = %for.end47, %for.body28
  %36 = load i32, i32* %cover_class, align 4, !dbg !4247
  %37 = load i32, i32* %cover_class, align 4, !dbg !4248
  %idxprom49 = zext i32 %37 to i64, !dbg !4249
  %arrayidx50 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom49, !dbg !4249
  store i32 %36, i32* %arrayidx50, align 4, !dbg !4250
  br label %for.inc51, !dbg !4251

for.inc51:                                        ; preds = %if.end48
  %38 = load i32, i32* %i, align 4, !dbg !4252
  %inc52 = add nsw i32 %38, 1, !dbg !4252
  store i32 %inc52, i32* %i, align 4, !dbg !4252
  br label %for.cond26, !dbg !4253, !llvm.loop !4254

for.end53:                                        ; preds = %for.cond26
  store i32 0, i32* %cl, align 4, !dbg !4256
  br label %for.cond54, !dbg !4258

for.cond54:                                       ; preds = %for.inc112, %for.end53
  %39 = load i32, i32* %cl, align 4, !dbg !4259
  %cmp55 = icmp slt i32 %39, 27, !dbg !4261
  br i1 %cmp55, label %for.body56, label %for.end114, !dbg !4262

for.body56:                                       ; preds = %for.cond54
  %40 = load i32, i32* %cl, align 4, !dbg !4263
  %cmp57 = icmp eq i32 %40, 0, !dbg !4266
  br i1 %cmp57, label %if.then61, label %lor.lhs.false, !dbg !4267

lor.lhs.false:                                    ; preds = %for.body56
  %41 = load i32, i32* %cl, align 4, !dbg !4268
  %idxprom58 = sext i32 %41 to i64, !dbg !4269
  %arrayidx59 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom58, !dbg !4269
  %42 = load i32, i32* %arrayidx59, align 4, !dbg !4269
  %cmp60 = icmp ne i32 %42, 0, !dbg !4270
  br i1 %cmp60, label %if.then61, label %if.end62, !dbg !4271

if.then61:                                        ; preds = %lor.lhs.false, %for.body56
  br label %for.inc112, !dbg !4272

if.end62:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %best_class, align 4, !dbg !4273
  store i32 2147483647, i32* %best_cost, align 4, !dbg !4274
  store i32 0, i32* %i, align 4, !dbg !4275
  br label %for.cond63, !dbg !4277

for.cond63:                                       ; preds = %for.inc107, %if.end62
  %43 = load i32, i32* %i, align 4, !dbg !4278
  %44 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4280
  %cmp64 = icmp slt i32 %43, %44, !dbg !4281
  br i1 %cmp64, label %for.body65, label %for.end109, !dbg !4282

for.body65:                                       ; preds = %for.cond63
  %45 = load i32, i32* %i, align 4, !dbg !4283
  %idxprom66 = sext i32 %45 to i64, !dbg !4285
  %arrayidx67 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom66, !dbg !4285
  %46 = load i32, i32* %arrayidx67, align 4, !dbg !4285
  store i32 %46, i32* %cover_class, align 4, !dbg !4286
  %47 = load i32, i32* %cover_class, align 4, !dbg !4287
  %idxprom68 = zext i32 %47 to i64, !dbg !4287
  %arrayidx69 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom68, !dbg !4287
  %48 = load i64, i64* %arrayidx69, align 8, !dbg !4287
  store i64 %48, i64* @temp_hard_regset, align 8, !dbg !4287
  %49 = load i32, i32* %cl, align 4, !dbg !4288
  %idxprom70 = sext i32 %49 to i64, !dbg !4288
  %arrayidx71 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom70, !dbg !4288
  %50 = load i64, i64* %arrayidx71, align 8, !dbg !4288
  %51 = load i64, i64* @temp_hard_regset, align 8, !dbg !4288
  %and72 = and i64 %51, %50, !dbg !4288
  store i64 %and72, i64* @temp_hard_regset, align 8, !dbg !4288
  %52 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4289
  %neg73 = xor i64 %52, -1, !dbg !4289
  %53 = load i64, i64* @temp_hard_regset, align 8, !dbg !4289
  %and74 = and i64 %53, %neg73, !dbg !4289
  store i64 %and74, i64* @temp_hard_regset, align 8, !dbg !4289
  %54 = load i64, i64* @temp_hard_regset, align 8, !dbg !4290
  %call75 = call zeroext i8 @hard_reg_set_empty_p(i64 %54), !dbg !4292
  %tobool76 = icmp ne i8 %call75, 0, !dbg !4292
  br i1 %tobool76, label %if.end106, label %if.then77, !dbg !4293

if.then77:                                        ; preds = %for.body65
  store i32 2147483647, i32* %min_cost, align 4, !dbg !4294
  store i32 0, i32* %mode, align 4, !dbg !4296
  br label %for.cond78, !dbg !4298

for.cond78:                                       ; preds = %for.inc96, %if.then77
  %55 = load i32, i32* %mode, align 4, !dbg !4299
  %cmp79 = icmp slt i32 %55, 87, !dbg !4301
  br i1 %cmp79, label %for.body80, label %for.end98, !dbg !4302

for.body80:                                       ; preds = %for.cond78
  %56 = load i32, i32* %mode, align 4, !dbg !4303
  %idxprom81 = sext i32 %56 to i64, !dbg !4305
  %arrayidx82 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom81, !dbg !4305
  %57 = load i32, i32* %cl, align 4, !dbg !4306
  %idxprom83 = sext i32 %57 to i64, !dbg !4305
  %arrayidx84 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx82, i64 0, i64 %idxprom83, !dbg !4305
  %arrayidx85 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx84, i64 0, i64 0, !dbg !4305
  %58 = load i16, i16* %arrayidx85, align 4, !dbg !4305
  %conv = sext i16 %58 to i32, !dbg !4305
  %59 = load i32, i32* %mode, align 4, !dbg !4307
  %idxprom86 = sext i32 %59 to i64, !dbg !4308
  %arrayidx87 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom86, !dbg !4308
  %60 = load i32, i32* %cl, align 4, !dbg !4309
  %idxprom88 = sext i32 %60 to i64, !dbg !4308
  %arrayidx89 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx87, i64 0, i64 %idxprom88, !dbg !4308
  %arrayidx90 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx89, i64 0, i64 1, !dbg !4308
  %61 = load i16, i16* %arrayidx90, align 2, !dbg !4308
  %conv91 = sext i16 %61 to i32, !dbg !4308
  %add = add nsw i32 %conv, %conv91, !dbg !4310
  store i32 %add, i32* %cost, align 4, !dbg !4311
  %62 = load i32, i32* %min_cost, align 4, !dbg !4312
  %63 = load i32, i32* %cost, align 4, !dbg !4314
  %cmp92 = icmp sgt i32 %62, %63, !dbg !4315
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !4316

if.then94:                                        ; preds = %for.body80
  %64 = load i32, i32* %cost, align 4, !dbg !4317
  store i32 %64, i32* %min_cost, align 4, !dbg !4318
  br label %if.end95, !dbg !4319

if.end95:                                         ; preds = %if.then94, %for.body80
  br label %for.inc96, !dbg !4320

for.inc96:                                        ; preds = %if.end95
  %65 = load i32, i32* %mode, align 4, !dbg !4321
  %inc97 = add nsw i32 %65, 1, !dbg !4321
  store i32 %inc97, i32* %mode, align 4, !dbg !4321
  br label %for.cond78, !dbg !4322, !llvm.loop !4323

for.end98:                                        ; preds = %for.cond78
  %66 = load i32, i32* %best_class, align 4, !dbg !4325
  %cmp99 = icmp eq i32 %66, 0, !dbg !4327
  br i1 %cmp99, label %if.then104, label %lor.lhs.false101, !dbg !4328

lor.lhs.false101:                                 ; preds = %for.end98
  %67 = load i32, i32* %best_cost, align 4, !dbg !4329
  %68 = load i32, i32* %min_cost, align 4, !dbg !4330
  %cmp102 = icmp sgt i32 %67, %68, !dbg !4331
  br i1 %cmp102, label %if.then104, label %if.end105, !dbg !4332

if.then104:                                       ; preds = %lor.lhs.false101, %for.end98
  %69 = load i32, i32* %cover_class, align 4, !dbg !4333
  store i32 %69, i32* %best_class, align 4, !dbg !4335
  %70 = load i32, i32* %min_cost, align 4, !dbg !4336
  store i32 %70, i32* %best_cost, align 4, !dbg !4337
  br label %if.end105, !dbg !4338

if.end105:                                        ; preds = %if.then104, %lor.lhs.false101
  br label %if.end106, !dbg !4339

if.end106:                                        ; preds = %if.end105, %for.body65
  br label %for.inc107, !dbg !4340

for.inc107:                                       ; preds = %if.end106
  %71 = load i32, i32* %i, align 4, !dbg !4341
  %inc108 = add nsw i32 %71, 1, !dbg !4341
  store i32 %inc108, i32* %i, align 4, !dbg !4341
  br label %for.cond63, !dbg !4342, !llvm.loop !4343

for.end109:                                       ; preds = %for.cond63
  %72 = load i32, i32* %best_class, align 4, !dbg !4345
  %73 = load i32, i32* %cl, align 4, !dbg !4346
  %idxprom110 = sext i32 %73 to i64, !dbg !4347
  %arrayidx111 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom110, !dbg !4347
  store i32 %72, i32* %arrayidx111, align 4, !dbg !4348
  br label %for.inc112, !dbg !4349

for.inc112:                                       ; preds = %for.end109, %if.then61
  %74 = load i32, i32* %cl, align 4, !dbg !4350
  %inc113 = add nsw i32 %74, 1, !dbg !4350
  store i32 %inc113, i32* %cl, align 4, !dbg !4350
  br label %for.cond54, !dbg !4351, !llvm.loop !4352

for.end114:                                       ; preds = %for.cond54
  ret void, !dbg !4354
}

; Function Attrs: noinline nounwind uwtable
define internal void @reorder_important_classes() #0 !dbg !4355 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4356, metadata !DIExpression()), !dbg !4357
  store i32 0, i32* %i, align 4, !dbg !4358
  br label %for.cond, !dbg !4360

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4361
  %cmp = icmp slt i32 %0, 27, !dbg !4363
  br i1 %cmp, label %for.body, label %for.end, !dbg !4364

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !4365
  %idxprom = sext i32 %1 to i64, !dbg !4366
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @cover_class_order, i64 0, i64 %idxprom, !dbg !4366
  store i32 -1, i32* %arrayidx, align 4, !dbg !4367
  br label %for.inc, !dbg !4366

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !4368
  %inc = add nsw i32 %2, 1, !dbg !4368
  store i32 %inc, i32* %i, align 4, !dbg !4368
  br label %for.cond, !dbg !4369, !llvm.loop !4370

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !4372
  br label %for.cond1, !dbg !4374

for.cond1:                                        ; preds = %for.inc8, %for.end
  %3 = load i32, i32* %i, align 4, !dbg !4375
  %4 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !4377
  %cmp2 = icmp slt i32 %3, %4, !dbg !4378
  br i1 %cmp2, label %for.body3, label %for.end10, !dbg !4379

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4, !dbg !4380
  %6 = load i32, i32* %i, align 4, !dbg !4381
  %idxprom4 = sext i32 %6 to i64, !dbg !4382
  %arrayidx5 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom4, !dbg !4382
  %7 = load i32, i32* %arrayidx5, align 4, !dbg !4382
  %idxprom6 = zext i32 %7 to i64, !dbg !4383
  %arrayidx7 = getelementptr inbounds [27 x i32], [27 x i32]* @cover_class_order, i64 0, i64 %idxprom6, !dbg !4383
  store i32 %5, i32* %arrayidx7, align 4, !dbg !4384
  br label %for.inc8, !dbg !4383

for.inc8:                                         ; preds = %for.body3
  %8 = load i32, i32* %i, align 4, !dbg !4385
  %inc9 = add nsw i32 %8, 1, !dbg !4385
  store i32 %inc9, i32* %i, align 4, !dbg !4385
  br label %for.cond1, !dbg !4386, !llvm.loop !4387

for.end10:                                        ; preds = %for.cond1
  %9 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4389
  %conv = sext i32 %9 to i64, !dbg !4389
  call void @spec_qsort(i8* bitcast ([27 x i32]* @ira_important_classes to i8*), i64 %conv, i64 4, i32 (i8*, i8*)* @comp_reg_classes_func), !dbg !4390
  store i32 0, i32* %i, align 4, !dbg !4391
  br label %for.cond11, !dbg !4393

for.cond11:                                       ; preds = %for.inc19, %for.end10
  %10 = load i32, i32* %i, align 4, !dbg !4394
  %11 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4396
  %cmp12 = icmp slt i32 %10, %11, !dbg !4397
  br i1 %cmp12, label %for.body14, label %for.end21, !dbg !4398

for.body14:                                       ; preds = %for.cond11
  %12 = load i32, i32* %i, align 4, !dbg !4399
  %13 = load i32, i32* %i, align 4, !dbg !4400
  %idxprom15 = sext i32 %13 to i64, !dbg !4401
  %arrayidx16 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_classes, i64 0, i64 %idxprom15, !dbg !4401
  %14 = load i32, i32* %arrayidx16, align 4, !dbg !4401
  %idxprom17 = zext i32 %14 to i64, !dbg !4402
  %arrayidx18 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_class_nums, i64 0, i64 %idxprom17, !dbg !4402
  store i32 %12, i32* %arrayidx18, align 4, !dbg !4403
  br label %for.inc19, !dbg !4402

for.inc19:                                        ; preds = %for.body14
  %15 = load i32, i32* %i, align 4, !dbg !4404
  %inc20 = add nsw i32 %15, 1, !dbg !4404
  store i32 %inc20, i32* %i, align 4, !dbg !4404
  br label %for.cond11, !dbg !4405, !llvm.loop !4406

for.end21:                                        ; preds = %for.cond11
  ret void, !dbg !4408
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_reg_class_relations() #0 !dbg !4409 {
entry:
  %i = alloca i32, align 4
  %cl1 = alloca i32, align 4
  %cl2 = alloca i32, align 4
  %cl3 = alloca i32, align 4
  %intersection_set = alloca i64, align 8
  %union_set = alloca i64, align 8
  %temp_set2 = alloca i64, align 8
  %important_class_p = alloca [27 x i8], align 16
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4410, metadata !DIExpression()), !dbg !4411
  call void @llvm.dbg.declare(metadata i32* %cl1, metadata !4412, metadata !DIExpression()), !dbg !4413
  call void @llvm.dbg.declare(metadata i32* %cl2, metadata !4414, metadata !DIExpression()), !dbg !4415
  call void @llvm.dbg.declare(metadata i32* %cl3, metadata !4416, metadata !DIExpression()), !dbg !4417
  call void @llvm.dbg.declare(metadata i64* %intersection_set, metadata !4418, metadata !DIExpression()), !dbg !4419
  call void @llvm.dbg.declare(metadata i64* %union_set, metadata !4420, metadata !DIExpression()), !dbg !4421
  call void @llvm.dbg.declare(metadata i64* %temp_set2, metadata !4422, metadata !DIExpression()), !dbg !4423
  call void @llvm.dbg.declare(metadata [27 x i8]* %important_class_p, metadata !4424, metadata !DIExpression()), !dbg !4426
  %arraydecay = getelementptr inbounds [27 x i8], [27 x i8]* %important_class_p, i64 0, i64 0, !dbg !4427
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 0, i64 27, i1 false), !dbg !4427
  store i32 0, i32* %i, align 4, !dbg !4428
  br label %for.cond, !dbg !4430

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4431
  %1 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4433
  %cmp = icmp slt i32 %0, %1, !dbg !4434
  br i1 %cmp, label %for.body, label %for.end, !dbg !4435

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !4436
  %idxprom = sext i32 %2 to i64, !dbg !4437
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_classes, i64 0, i64 %idxprom, !dbg !4437
  %3 = load i32, i32* %arrayidx, align 4, !dbg !4437
  %idxprom1 = zext i32 %3 to i64, !dbg !4438
  %arrayidx2 = getelementptr inbounds [27 x i8], [27 x i8]* %important_class_p, i64 0, i64 %idxprom1, !dbg !4438
  store i8 1, i8* %arrayidx2, align 1, !dbg !4439
  br label %for.inc, !dbg !4438

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !4440
  %inc = add nsw i32 %4, 1, !dbg !4440
  store i32 %inc, i32* %i, align 4, !dbg !4440
  br label %for.cond, !dbg !4441, !llvm.loop !4442

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cl1, align 4, !dbg !4444
  br label %for.cond3, !dbg !4446

for.cond3:                                        ; preds = %for.inc198, %for.end
  %5 = load i32, i32* %cl1, align 4, !dbg !4447
  %cmp4 = icmp slt i32 %5, 27, !dbg !4449
  br i1 %cmp4, label %for.body5, label %for.end200, !dbg !4450

for.body5:                                        ; preds = %for.cond3
  %6 = load i32, i32* %cl1, align 4, !dbg !4451
  %idxprom6 = sext i32 %6 to i64, !dbg !4453
  %arrayidx7 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_super_classes, i64 0, i64 %idxprom6, !dbg !4453
  %arrayidx8 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx7, i64 0, i64 0, !dbg !4453
  store i32 27, i32* %arrayidx8, align 4, !dbg !4454
  store i32 0, i32* %cl2, align 4, !dbg !4455
  br label %for.cond9, !dbg !4457

for.cond9:                                        ; preds = %for.inc195, %for.body5
  %7 = load i32, i32* %cl2, align 4, !dbg !4458
  %cmp10 = icmp slt i32 %7, 27, !dbg !4460
  br i1 %cmp10, label %for.body11, label %for.end197, !dbg !4461

for.body11:                                       ; preds = %for.cond9
  %8 = load i32, i32* %cl1, align 4, !dbg !4462
  %idxprom12 = sext i32 %8 to i64, !dbg !4464
  %arrayidx13 = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom12, !dbg !4464
  %9 = load i32, i32* %cl2, align 4, !dbg !4465
  %idxprom14 = sext i32 %9 to i64, !dbg !4464
  %arrayidx15 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !4464
  store i8 0, i8* %arrayidx15, align 1, !dbg !4466
  %10 = load i32, i32* %cl1, align 4, !dbg !4467
  %idxprom16 = sext i32 %10 to i64, !dbg !4468
  %arrayidx17 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom16, !dbg !4468
  %11 = load i32, i32* %cl2, align 4, !dbg !4469
  %idxprom18 = sext i32 %11 to i64, !dbg !4468
  %arrayidx19 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx17, i64 0, i64 %idxprom18, !dbg !4468
  store i32 0, i32* %arrayidx19, align 4, !dbg !4470
  %12 = load i32, i32* %cl1, align 4, !dbg !4471
  %idxprom20 = sext i32 %12 to i64, !dbg !4471
  %arrayidx21 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom20, !dbg !4471
  %13 = load i64, i64* %arrayidx21, align 8, !dbg !4471
  store i64 %13, i64* @temp_hard_regset, align 8, !dbg !4471
  %14 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4472
  %neg = xor i64 %14, -1, !dbg !4472
  %15 = load i64, i64* @temp_hard_regset, align 8, !dbg !4472
  %and = and i64 %15, %neg, !dbg !4472
  store i64 %and, i64* @temp_hard_regset, align 8, !dbg !4472
  %16 = load i32, i32* %cl2, align 4, !dbg !4473
  %idxprom22 = sext i32 %16 to i64, !dbg !4473
  %arrayidx23 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom22, !dbg !4473
  %17 = load i64, i64* %arrayidx23, align 8, !dbg !4473
  store i64 %17, i64* %temp_set2, align 8, !dbg !4473
  %18 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4474
  %neg24 = xor i64 %18, -1, !dbg !4474
  %19 = load i64, i64* %temp_set2, align 8, !dbg !4474
  %and25 = and i64 %19, %neg24, !dbg !4474
  store i64 %and25, i64* %temp_set2, align 8, !dbg !4474
  %20 = load i64, i64* @temp_hard_regset, align 8, !dbg !4475
  %call = call zeroext i8 @hard_reg_set_empty_p(i64 %20), !dbg !4477
  %conv = zext i8 %call to i32, !dbg !4477
  %tobool = icmp ne i32 %conv, 0, !dbg !4477
  br i1 %tobool, label %land.lhs.true, label %if.end60, !dbg !4478

land.lhs.true:                                    ; preds = %for.body11
  %21 = load i64, i64* %temp_set2, align 8, !dbg !4479
  %call26 = call zeroext i8 @hard_reg_set_empty_p(i64 %21), !dbg !4480
  %conv27 = zext i8 %call26 to i32, !dbg !4480
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !4480
  br i1 %tobool28, label %if.then, label %if.end60, !dbg !4481

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !4482
  br label %for.cond29, !dbg !4485

for.cond29:                                       ; preds = %for.inc49, %if.then
  %22 = load i32, i32* %cl1, align 4, !dbg !4486
  %idxprom30 = sext i32 %22 to i64, !dbg !4489
  %arrayidx31 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @reg_class_subclasses, i64 0, i64 %idxprom30, !dbg !4489
  %23 = load i32, i32* %i, align 4, !dbg !4490
  %idxprom32 = sext i32 %23 to i64, !dbg !4489
  %arrayidx33 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx31, i64 0, i64 %idxprom32, !dbg !4489
  %24 = load i32, i32* %arrayidx33, align 4, !dbg !4489
  store i32 %24, i32* %cl3, align 4, !dbg !4491
  %25 = load i32, i32* %cl3, align 4, !dbg !4492
  %cmp34 = icmp eq i32 %25, 27, !dbg !4494
  br i1 %cmp34, label %if.then36, label %if.end, !dbg !4495

if.then36:                                        ; preds = %for.cond29
  br label %for.end51, !dbg !4496

if.end:                                           ; preds = %for.cond29
  %26 = load i32, i32* %cl1, align 4, !dbg !4497
  %idxprom37 = sext i32 %26 to i64, !dbg !4499
  %arrayidx38 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom37, !dbg !4499
  %27 = load i32, i32* %cl2, align 4, !dbg !4500
  %idxprom39 = sext i32 %27 to i64, !dbg !4499
  %arrayidx40 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx38, i64 0, i64 %idxprom39, !dbg !4499
  %28 = load i32, i32* %arrayidx40, align 4, !dbg !4499
  %29 = load i32, i32* %cl3, align 4, !dbg !4501
  %call41 = call i32 @reg_class_subset_p(i32 %28, i32 %29), !dbg !4502
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4502
  br i1 %tobool42, label %if.then43, label %if.end48, !dbg !4503

if.then43:                                        ; preds = %if.end
  %30 = load i32, i32* %cl3, align 4, !dbg !4504
  %31 = load i32, i32* %cl1, align 4, !dbg !4505
  %idxprom44 = sext i32 %31 to i64, !dbg !4506
  %arrayidx45 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom44, !dbg !4506
  %32 = load i32, i32* %cl2, align 4, !dbg !4507
  %idxprom46 = sext i32 %32 to i64, !dbg !4506
  %arrayidx47 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx45, i64 0, i64 %idxprom46, !dbg !4506
  store i32 %30, i32* %arrayidx47, align 4, !dbg !4508
  br label %if.end48, !dbg !4506

if.end48:                                         ; preds = %if.then43, %if.end
  br label %for.inc49, !dbg !4509

for.inc49:                                        ; preds = %if.end48
  %33 = load i32, i32* %i, align 4, !dbg !4510
  %inc50 = add nsw i32 %33, 1, !dbg !4510
  store i32 %inc50, i32* %i, align 4, !dbg !4510
  br label %for.cond29, !dbg !4511, !llvm.loop !4512

for.end51:                                        ; preds = %if.then36
  %34 = load i32, i32* %cl1, align 4, !dbg !4515
  %idxprom52 = sext i32 %34 to i64, !dbg !4516
  %arrayidx53 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @reg_class_subunion, i64 0, i64 %idxprom52, !dbg !4516
  %35 = load i32, i32* %cl2, align 4, !dbg !4517
  %idxprom54 = sext i32 %35 to i64, !dbg !4516
  %arrayidx55 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx53, i64 0, i64 %idxprom54, !dbg !4516
  %36 = load i32, i32* %arrayidx55, align 4, !dbg !4516
  %37 = load i32, i32* %cl1, align 4, !dbg !4518
  %idxprom56 = sext i32 %37 to i64, !dbg !4519
  %arrayidx57 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom56, !dbg !4519
  %38 = load i32, i32* %cl2, align 4, !dbg !4520
  %idxprom58 = sext i32 %38 to i64, !dbg !4519
  %arrayidx59 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx57, i64 0, i64 %idxprom58, !dbg !4519
  store i32 %36, i32* %arrayidx59, align 4, !dbg !4521
  br label %for.inc195, !dbg !4522

if.end60:                                         ; preds = %land.lhs.true, %for.body11
  %39 = load i64, i64* @temp_hard_regset, align 8, !dbg !4523
  %40 = load i64, i64* %temp_set2, align 8, !dbg !4524
  %call61 = call zeroext i8 @hard_reg_set_intersect_p(i64 %39, i64 %40), !dbg !4525
  %41 = load i32, i32* %cl1, align 4, !dbg !4526
  %idxprom62 = sext i32 %41 to i64, !dbg !4527
  %arrayidx63 = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom62, !dbg !4527
  %42 = load i32, i32* %cl2, align 4, !dbg !4528
  %idxprom64 = sext i32 %42 to i64, !dbg !4527
  %arrayidx65 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx63, i64 0, i64 %idxprom64, !dbg !4527
  store i8 %call61, i8* %arrayidx65, align 1, !dbg !4529
  %43 = load i32, i32* %cl1, align 4, !dbg !4530
  %idxprom66 = sext i32 %43 to i64, !dbg !4532
  %arrayidx67 = getelementptr inbounds [27 x i8], [27 x i8]* %important_class_p, i64 0, i64 %idxprom66, !dbg !4532
  %44 = load i8, i8* %arrayidx67, align 1, !dbg !4532
  %conv68 = zext i8 %44 to i32, !dbg !4532
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !4532
  br i1 %tobool69, label %land.lhs.true70, label %if.end86, !dbg !4533

land.lhs.true70:                                  ; preds = %if.end60
  %45 = load i32, i32* %cl2, align 4, !dbg !4534
  %idxprom71 = sext i32 %45 to i64, !dbg !4535
  %arrayidx72 = getelementptr inbounds [27 x i8], [27 x i8]* %important_class_p, i64 0, i64 %idxprom71, !dbg !4535
  %46 = load i8, i8* %arrayidx72, align 1, !dbg !4535
  %conv73 = zext i8 %46 to i32, !dbg !4535
  %tobool74 = icmp ne i32 %conv73, 0, !dbg !4535
  br i1 %tobool74, label %land.lhs.true75, label %if.end86, !dbg !4536

land.lhs.true75:                                  ; preds = %land.lhs.true70
  %47 = load i64, i64* @temp_hard_regset, align 8, !dbg !4537
  %48 = load i64, i64* %temp_set2, align 8, !dbg !4538
  %call76 = call zeroext i8 @hard_reg_set_subset_p(i64 %47, i64 %48), !dbg !4539
  %conv77 = zext i8 %call76 to i32, !dbg !4539
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !4539
  br i1 %tobool78, label %if.then79, label %if.end86, !dbg !4540

if.then79:                                        ; preds = %land.lhs.true75
  call void @llvm.dbg.declare(metadata i32** %p, metadata !4541, metadata !DIExpression()), !dbg !4543
  %49 = load i32, i32* %cl1, align 4, !dbg !4544
  %idxprom80 = sext i32 %49 to i64, !dbg !4545
  %arrayidx81 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_super_classes, i64 0, i64 %idxprom80, !dbg !4545
  %arrayidx82 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx81, i64 0, i64 0, !dbg !4545
  store i32* %arrayidx82, i32** %p, align 8, !dbg !4546
  br label %while.cond, !dbg !4547

while.cond:                                       ; preds = %while.body, %if.then79
  %50 = load i32*, i32** %p, align 8, !dbg !4548
  %51 = load i32, i32* %50, align 4, !dbg !4549
  %cmp83 = icmp ne i32 %51, 27, !dbg !4550
  br i1 %cmp83, label %while.body, label %while.end, !dbg !4547

while.body:                                       ; preds = %while.cond
  %52 = load i32*, i32** %p, align 8, !dbg !4551
  %incdec.ptr = getelementptr inbounds i32, i32* %52, i32 1, !dbg !4551
  store i32* %incdec.ptr, i32** %p, align 8, !dbg !4551
  br label %while.cond, !dbg !4547, !llvm.loop !4552

while.end:                                        ; preds = %while.cond
  %53 = load i32, i32* %cl2, align 4, !dbg !4553
  %54 = load i32*, i32** %p, align 8, !dbg !4554
  %incdec.ptr85 = getelementptr inbounds i32, i32* %54, i32 1, !dbg !4554
  store i32* %incdec.ptr85, i32** %p, align 8, !dbg !4554
  store i32 %53, i32* %54, align 4, !dbg !4555
  %55 = load i32*, i32** %p, align 8, !dbg !4556
  store i32 27, i32* %55, align 4, !dbg !4557
  br label %if.end86, !dbg !4558

if.end86:                                         ; preds = %while.end, %land.lhs.true75, %land.lhs.true70, %if.end60
  %56 = load i32, i32* %cl1, align 4, !dbg !4559
  %idxprom87 = sext i32 %56 to i64, !dbg !4560
  %arrayidx88 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom87, !dbg !4560
  %57 = load i32, i32* %cl2, align 4, !dbg !4561
  %idxprom89 = sext i32 %57 to i64, !dbg !4560
  %arrayidx90 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx88, i64 0, i64 %idxprom89, !dbg !4560
  store i32 0, i32* %arrayidx90, align 4, !dbg !4562
  %58 = load i32, i32* %cl1, align 4, !dbg !4563
  %idxprom91 = sext i32 %58 to i64, !dbg !4563
  %arrayidx92 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom91, !dbg !4563
  %59 = load i64, i64* %arrayidx92, align 8, !dbg !4563
  store i64 %59, i64* %intersection_set, align 8, !dbg !4563
  %60 = load i32, i32* %cl2, align 4, !dbg !4564
  %idxprom93 = sext i32 %60 to i64, !dbg !4564
  %arrayidx94 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom93, !dbg !4564
  %61 = load i64, i64* %arrayidx94, align 8, !dbg !4564
  %62 = load i64, i64* %intersection_set, align 8, !dbg !4564
  %and95 = and i64 %62, %61, !dbg !4564
  store i64 %and95, i64* %intersection_set, align 8, !dbg !4564
  %63 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4565
  %neg96 = xor i64 %63, -1, !dbg !4565
  %64 = load i64, i64* %intersection_set, align 8, !dbg !4565
  %and97 = and i64 %64, %neg96, !dbg !4565
  store i64 %and97, i64* %intersection_set, align 8, !dbg !4565
  %65 = load i32, i32* %cl1, align 4, !dbg !4566
  %idxprom98 = sext i32 %65 to i64, !dbg !4566
  %arrayidx99 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom98, !dbg !4566
  %66 = load i64, i64* %arrayidx99, align 8, !dbg !4566
  store i64 %66, i64* %union_set, align 8, !dbg !4566
  %67 = load i32, i32* %cl2, align 4, !dbg !4567
  %idxprom100 = sext i32 %67 to i64, !dbg !4567
  %arrayidx101 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom100, !dbg !4567
  %68 = load i64, i64* %arrayidx101, align 8, !dbg !4567
  %69 = load i64, i64* %union_set, align 8, !dbg !4567
  %or = or i64 %69, %68, !dbg !4567
  store i64 %or, i64* %union_set, align 8, !dbg !4567
  %70 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4568
  %neg102 = xor i64 %70, -1, !dbg !4568
  %71 = load i64, i64* %union_set, align 8, !dbg !4568
  %and103 = and i64 %71, %neg102, !dbg !4568
  store i64 %and103, i64* %union_set, align 8, !dbg !4568
  store i32 0, i32* %i, align 4, !dbg !4569
  br label %for.cond104, !dbg !4571

for.cond104:                                      ; preds = %for.inc192, %if.end86
  %72 = load i32, i32* %i, align 4, !dbg !4572
  %73 = load i32, i32* @ira_important_classes_num, align 4, !dbg !4574
  %cmp105 = icmp slt i32 %72, %73, !dbg !4575
  br i1 %cmp105, label %for.body107, label %for.end194, !dbg !4576

for.body107:                                      ; preds = %for.cond104
  %74 = load i32, i32* %i, align 4, !dbg !4577
  %idxprom108 = sext i32 %74 to i64, !dbg !4579
  %arrayidx109 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_important_classes, i64 0, i64 %idxprom108, !dbg !4579
  %75 = load i32, i32* %arrayidx109, align 4, !dbg !4579
  store i32 %75, i32* %cl3, align 4, !dbg !4580
  %76 = load i32, i32* %cl3, align 4, !dbg !4581
  %idxprom110 = sext i32 %76 to i64, !dbg !4581
  %arrayidx111 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom110, !dbg !4581
  %77 = load i64, i64* %arrayidx111, align 8, !dbg !4581
  store i64 %77, i64* @temp_hard_regset, align 8, !dbg !4581
  %78 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4582
  %neg112 = xor i64 %78, -1, !dbg !4582
  %79 = load i64, i64* @temp_hard_regset, align 8, !dbg !4582
  %and113 = and i64 %79, %neg112, !dbg !4582
  store i64 %and113, i64* @temp_hard_regset, align 8, !dbg !4582
  %80 = load i64, i64* @temp_hard_regset, align 8, !dbg !4583
  %81 = load i64, i64* %intersection_set, align 8, !dbg !4585
  %call114 = call zeroext i8 @hard_reg_set_subset_p(i64 %80, i64 %81), !dbg !4586
  %tobool115 = icmp ne i8 %call114, 0, !dbg !4586
  br i1 %tobool115, label %if.then116, label %if.end148, !dbg !4587

if.then116:                                       ; preds = %for.body107
  %82 = load i32, i32* %cl1, align 4, !dbg !4588
  %idxprom117 = sext i32 %82 to i64, !dbg !4588
  %arrayidx118 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom117, !dbg !4588
  %83 = load i32, i32* %cl2, align 4, !dbg !4588
  %idxprom119 = sext i32 %83 to i64, !dbg !4588
  %arrayidx120 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx118, i64 0, i64 %idxprom119, !dbg !4588
  %84 = load i32, i32* %arrayidx120, align 4, !dbg !4588
  %idxprom121 = sext i32 %84 to i64, !dbg !4588
  %arrayidx122 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom121, !dbg !4588
  %85 = load i64, i64* %arrayidx122, align 8, !dbg !4588
  store i64 %85, i64* %temp_set2, align 8, !dbg !4588
  %86 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4590
  %neg123 = xor i64 %86, -1, !dbg !4590
  %87 = load i64, i64* %temp_set2, align 8, !dbg !4590
  %and124 = and i64 %87, %neg123, !dbg !4590
  store i64 %and124, i64* %temp_set2, align 8, !dbg !4590
  %88 = load i64, i64* @temp_hard_regset, align 8, !dbg !4591
  %89 = load i64, i64* %temp_set2, align 8, !dbg !4593
  %call125 = call zeroext i8 @hard_reg_set_subset_p(i64 %88, i64 %89), !dbg !4594
  %tobool126 = icmp ne i8 %call125, 0, !dbg !4594
  br i1 %tobool126, label %lor.lhs.false, label %if.then142, !dbg !4595

lor.lhs.false:                                    ; preds = %if.then116
  %90 = load i64, i64* @temp_hard_regset, align 8, !dbg !4596
  %91 = load i64, i64* %temp_set2, align 8, !dbg !4597
  %call127 = call zeroext i8 @hard_reg_set_equal_p(i64 %90, i64 %91), !dbg !4598
  %conv128 = zext i8 %call127 to i32, !dbg !4598
  %tobool129 = icmp ne i32 %conv128, 0, !dbg !4598
  br i1 %tobool129, label %land.lhs.true130, label %if.end147, !dbg !4599

land.lhs.true130:                                 ; preds = %lor.lhs.false
  %92 = load i32, i32* %cl3, align 4, !dbg !4600
  %idxprom131 = sext i32 %92 to i64, !dbg !4601
  %arrayidx132 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom131, !dbg !4601
  %93 = load i64, i64* %arrayidx132, align 8, !dbg !4601
  %94 = load i32, i32* %cl1, align 4, !dbg !4602
  %idxprom133 = sext i32 %94 to i64, !dbg !4603
  %arrayidx134 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom133, !dbg !4603
  %95 = load i32, i32* %cl2, align 4, !dbg !4604
  %idxprom135 = sext i32 %95 to i64, !dbg !4603
  %arrayidx136 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx134, i64 0, i64 %idxprom135, !dbg !4603
  %96 = load i32, i32* %arrayidx136, align 4, !dbg !4603
  %idxprom137 = sext i32 %96 to i64, !dbg !4605
  %arrayidx138 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom137, !dbg !4605
  %97 = load i64, i64* %arrayidx138, align 8, !dbg !4605
  %call139 = call zeroext i8 @hard_reg_set_subset_p(i64 %93, i64 %97), !dbg !4606
  %conv140 = zext i8 %call139 to i32, !dbg !4606
  %tobool141 = icmp ne i32 %conv140, 0, !dbg !4606
  br i1 %tobool141, label %if.then142, label %if.end147, !dbg !4607

if.then142:                                       ; preds = %land.lhs.true130, %if.then116
  %98 = load i32, i32* %cl3, align 4, !dbg !4608
  %99 = load i32, i32* %cl1, align 4, !dbg !4609
  %idxprom143 = sext i32 %99 to i64, !dbg !4610
  %arrayidx144 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_intersect, i64 0, i64 %idxprom143, !dbg !4610
  %100 = load i32, i32* %cl2, align 4, !dbg !4611
  %idxprom145 = sext i32 %100 to i64, !dbg !4610
  %arrayidx146 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx144, i64 0, i64 %idxprom145, !dbg !4610
  store i32 %98, i32* %arrayidx146, align 4, !dbg !4612
  br label %if.end147, !dbg !4610

if.end147:                                        ; preds = %if.then142, %land.lhs.true130, %lor.lhs.false
  br label %if.end148, !dbg !4613

if.end148:                                        ; preds = %if.end147, %for.body107
  %101 = load i64, i64* @temp_hard_regset, align 8, !dbg !4614
  %102 = load i64, i64* %union_set, align 8, !dbg !4616
  %call149 = call zeroext i8 @hard_reg_set_subset_p(i64 %101, i64 %102), !dbg !4617
  %tobool150 = icmp ne i8 %call149, 0, !dbg !4617
  br i1 %tobool150, label %if.then151, label %if.end191, !dbg !4618

if.then151:                                       ; preds = %if.end148
  %103 = load i32, i32* %cl1, align 4, !dbg !4619
  %idxprom152 = sext i32 %103 to i64, !dbg !4619
  %arrayidx153 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom152, !dbg !4619
  %104 = load i32, i32* %cl2, align 4, !dbg !4619
  %idxprom154 = sext i32 %104 to i64, !dbg !4619
  %arrayidx155 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx153, i64 0, i64 %idxprom154, !dbg !4619
  %105 = load i32, i32* %arrayidx155, align 4, !dbg !4619
  %idxprom156 = sext i32 %105 to i64, !dbg !4619
  %arrayidx157 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom156, !dbg !4619
  %106 = load i64, i64* %arrayidx157, align 8, !dbg !4619
  store i64 %106, i64* %temp_set2, align 8, !dbg !4619
  %107 = load i64, i64* @no_unit_alloc_regs, align 8, !dbg !4621
  %neg158 = xor i64 %107, -1, !dbg !4621
  %108 = load i64, i64* %temp_set2, align 8, !dbg !4621
  %and159 = and i64 %108, %neg158, !dbg !4621
  store i64 %and159, i64* %temp_set2, align 8, !dbg !4621
  %109 = load i32, i32* %cl1, align 4, !dbg !4622
  %idxprom160 = sext i32 %109 to i64, !dbg !4624
  %arrayidx161 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom160, !dbg !4624
  %110 = load i32, i32* %cl2, align 4, !dbg !4625
  %idxprom162 = sext i32 %110 to i64, !dbg !4624
  %arrayidx163 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx161, i64 0, i64 %idxprom162, !dbg !4624
  %111 = load i32, i32* %arrayidx163, align 4, !dbg !4624
  %cmp164 = icmp eq i32 %111, 0, !dbg !4626
  br i1 %cmp164, label %if.then185, label %lor.lhs.false166, !dbg !4627

lor.lhs.false166:                                 ; preds = %if.then151
  %112 = load i64, i64* %temp_set2, align 8, !dbg !4628
  %113 = load i64, i64* @temp_hard_regset, align 8, !dbg !4629
  %call167 = call zeroext i8 @hard_reg_set_subset_p(i64 %112, i64 %113), !dbg !4630
  %conv168 = zext i8 %call167 to i32, !dbg !4630
  %tobool169 = icmp ne i32 %conv168, 0, !dbg !4630
  br i1 %tobool169, label %land.lhs.true170, label %if.end190, !dbg !4631

land.lhs.true170:                                 ; preds = %lor.lhs.false166
  %114 = load i64, i64* %temp_set2, align 8, !dbg !4632
  %115 = load i64, i64* @temp_hard_regset, align 8, !dbg !4633
  %call171 = call zeroext i8 @hard_reg_set_equal_p(i64 %114, i64 %115), !dbg !4634
  %tobool172 = icmp ne i8 %call171, 0, !dbg !4634
  br i1 %tobool172, label %lor.lhs.false173, label %if.then185, !dbg !4635

lor.lhs.false173:                                 ; preds = %land.lhs.true170
  %116 = load i32, i32* %cl3, align 4, !dbg !4636
  %idxprom174 = sext i32 %116 to i64, !dbg !4637
  %arrayidx175 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom174, !dbg !4637
  %117 = load i64, i64* %arrayidx175, align 8, !dbg !4637
  %118 = load i32, i32* %cl1, align 4, !dbg !4638
  %idxprom176 = sext i32 %118 to i64, !dbg !4639
  %arrayidx177 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom176, !dbg !4639
  %119 = load i32, i32* %cl2, align 4, !dbg !4640
  %idxprom178 = sext i32 %119 to i64, !dbg !4639
  %arrayidx179 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx177, i64 0, i64 %idxprom178, !dbg !4639
  %120 = load i32, i32* %arrayidx179, align 4, !dbg !4639
  %idxprom180 = sext i32 %120 to i64, !dbg !4641
  %arrayidx181 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom180, !dbg !4641
  %121 = load i64, i64* %arrayidx181, align 8, !dbg !4641
  %call182 = call zeroext i8 @hard_reg_set_subset_p(i64 %117, i64 %121), !dbg !4642
  %conv183 = zext i8 %call182 to i32, !dbg !4642
  %tobool184 = icmp ne i32 %conv183, 0, !dbg !4642
  br i1 %tobool184, label %if.then185, label %if.end190, !dbg !4643

if.then185:                                       ; preds = %lor.lhs.false173, %land.lhs.true170, %if.then151
  %122 = load i32, i32* %cl3, align 4, !dbg !4644
  %123 = load i32, i32* %cl1, align 4, !dbg !4645
  %idxprom186 = sext i32 %123 to i64, !dbg !4646
  %arrayidx187 = getelementptr inbounds [27 x [27 x i32]], [27 x [27 x i32]]* @ira_reg_class_union, i64 0, i64 %idxprom186, !dbg !4646
  %124 = load i32, i32* %cl2, align 4, !dbg !4647
  %idxprom188 = sext i32 %124 to i64, !dbg !4646
  %arrayidx189 = getelementptr inbounds [27 x i32], [27 x i32]* %arrayidx187, i64 0, i64 %idxprom188, !dbg !4646
  store i32 %122, i32* %arrayidx189, align 4, !dbg !4648
  br label %if.end190, !dbg !4646

if.end190:                                        ; preds = %if.then185, %lor.lhs.false173, %lor.lhs.false166
  br label %if.end191, !dbg !4649

if.end191:                                        ; preds = %if.end190, %if.end148
  br label %for.inc192, !dbg !4650

for.inc192:                                       ; preds = %if.end191
  %125 = load i32, i32* %i, align 4, !dbg !4651
  %inc193 = add nsw i32 %125, 1, !dbg !4651
  store i32 %inc193, i32* %i, align 4, !dbg !4651
  br label %for.cond104, !dbg !4652, !llvm.loop !4653

for.end194:                                       ; preds = %for.cond104
  br label %for.inc195, !dbg !4655

for.inc195:                                       ; preds = %for.end194, %for.end51
  %126 = load i32, i32* %cl2, align 4, !dbg !4656
  %inc196 = add nsw i32 %126, 1, !dbg !4656
  store i32 %inc196, i32* %cl2, align 4, !dbg !4656
  br label %for.cond9, !dbg !4657, !llvm.loop !4658

for.end197:                                       ; preds = %for.cond9
  br label %for.inc198, !dbg !4660

for.inc198:                                       ; preds = %for.end197
  %127 = load i32, i32* %cl1, align 4, !dbg !4661
  %inc199 = add nsw i32 %127, 1, !dbg !4661
  store i32 %inc199, i32* %cl1, align 4, !dbg !4661
  br label %for.cond3, !dbg !4662, !llvm.loop !4663

for.end200:                                       ; preds = %for.cond3
  ret void, !dbg !4665
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_empty_p(i64 %x) #0 !dbg !4666 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  %0 = load i64, i64* %x.addr, align 8, !dbg !4671
  %cmp = icmp eq i64 %0, 0, !dbg !4672
  %conv = zext i1 %cmp to i32, !dbg !4672
  %conv1 = trunc i32 %conv to i8, !dbg !4671
  ret i8 %conv1, !dbg !4673
}

declare dso_local i32 @regclass_for_constraint(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_equal_p(i64 %x, i64 %y) #0 !dbg !4674 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !4675, metadata !DIExpression()), !dbg !4676
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !4677, metadata !DIExpression()), !dbg !4678
  %0 = load i64, i64* %x.addr, align 8, !dbg !4679
  %1 = load i64, i64* %y.addr, align 8, !dbg !4680
  %cmp = icmp eq i64 %0, %1, !dbg !4681
  %conv = zext i1 %cmp to i32, !dbg !4681
  %conv1 = trunc i32 %conv to i8, !dbg !4679
  ret i8 %conv1, !dbg !4682
}

declare dso_local i32 @reg_classes_intersect_p(i32, i32) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @comp_reg_classes_func(i8* %v1p, i8* %v2p) #0 !dbg !4683 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %cl1 = alloca i32, align 4
  %cl2 = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !4684, metadata !DIExpression()), !dbg !4685
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !4686, metadata !DIExpression()), !dbg !4687
  call void @llvm.dbg.declare(metadata i32* %cl1, metadata !4688, metadata !DIExpression()), !dbg !4689
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !4690
  %1 = bitcast i8* %0 to i32*, !dbg !4691
  %2 = load i32, i32* %1, align 4, !dbg !4692
  store i32 %2, i32* %cl1, align 4, !dbg !4689
  call void @llvm.dbg.declare(metadata i32* %cl2, metadata !4693, metadata !DIExpression()), !dbg !4694
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !4695
  %4 = bitcast i8* %3 to i32*, !dbg !4696
  %5 = load i32, i32* %4, align 4, !dbg !4697
  store i32 %5, i32* %cl2, align 4, !dbg !4694
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !4698, metadata !DIExpression()), !dbg !4699
  %6 = load i32, i32* %cl1, align 4, !dbg !4700
  %idxprom = zext i32 %6 to i64, !dbg !4701
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom, !dbg !4701
  %7 = load i32, i32* %arrayidx, align 4, !dbg !4701
  store i32 %7, i32* %cl1, align 4, !dbg !4702
  %8 = load i32, i32* %cl2, align 4, !dbg !4703
  %idxprom1 = zext i32 %8 to i64, !dbg !4704
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom1, !dbg !4704
  %9 = load i32, i32* %arrayidx2, align 4, !dbg !4704
  store i32 %9, i32* %cl2, align 4, !dbg !4705
  %10 = load i32, i32* %cl1, align 4, !dbg !4706
  %cmp = icmp ne i32 %10, 0, !dbg !4708
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4709

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %cl2, align 4, !dbg !4710
  %cmp3 = icmp ne i32 %11, 0, !dbg !4711
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !4712

land.lhs.true4:                                   ; preds = %land.lhs.true
  %12 = load i32, i32* %cl1, align 4, !dbg !4713
  %idxprom5 = zext i32 %12 to i64, !dbg !4714
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @cover_class_order, i64 0, i64 %idxprom5, !dbg !4714
  %13 = load i32, i32* %arrayidx6, align 4, !dbg !4714
  %14 = load i32, i32* %cl2, align 4, !dbg !4715
  %idxprom7 = zext i32 %14 to i64, !dbg !4716
  %arrayidx8 = getelementptr inbounds [27 x i32], [27 x i32]* @cover_class_order, i64 0, i64 %idxprom7, !dbg !4716
  %15 = load i32, i32* %arrayidx8, align 4, !dbg !4716
  %sub = sub nsw i32 %13, %15, !dbg !4717
  store i32 %sub, i32* %diff, align 4, !dbg !4718
  %cmp9 = icmp ne i32 %sub, 0, !dbg !4719
  br i1 %cmp9, label %if.then, label %if.end, !dbg !4720

if.then:                                          ; preds = %land.lhs.true4
  %16 = load i32, i32* %diff, align 4, !dbg !4721
  store i32 %16, i32* %retval, align 4, !dbg !4722
  br label %return, !dbg !4722

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %17 = load i32, i32* %cl1, align 4, !dbg !4723
  %18 = load i32, i32* %cl2, align 4, !dbg !4724
  %sub10 = sub nsw i32 %17, %18, !dbg !4725
  store i32 %sub10, i32* %retval, align 4, !dbg !4726
  br label %return, !dbg !4726

return:                                           ; preds = %if.end, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !4727
  ret i32 %19, !dbg !4727
}

declare dso_local i32 @reg_class_subset_p(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_intersect_p(i64 %x, i64 %y) #0 !dbg !4728 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !4729, metadata !DIExpression()), !dbg !4730
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !4731, metadata !DIExpression()), !dbg !4732
  %0 = load i64, i64* %x.addr, align 8, !dbg !4733
  %1 = load i64, i64* %y.addr, align 8, !dbg !4734
  %and = and i64 %0, %1, !dbg !4735
  %cmp = icmp ne i64 %and, 0, !dbg !4736
  %conv = zext i1 %cmp to i32, !dbg !4736
  %conv1 = trunc i32 %conv to i8, !dbg !4737
  ret i8 %conv1, !dbg !4738
}

declare dso_local zeroext i8 @ix86_hard_regno_mode_ok(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @insn_contains_asm(%struct.rtx_def* %insn) #0 !dbg !4739 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4742, metadata !DIExpression()), !dbg !4743
  %call = call i32 @for_each_rtx(%struct.rtx_def** %insn.addr, i32 (%struct.rtx_def**, i8*)* @insn_contains_asm_1, i8* null), !dbg !4744
  %conv = trunc i32 %call to i8, !dbg !4744
  ret i8 %conv, !dbg !4745
}

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @insn_contains_asm_1(%struct.rtx_def** %loc, i8* %data) #0 !dbg !4746 {
entry:
  %retval = alloca i32, align 4
  %loc.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc.addr, metadata !4749, metadata !DIExpression()), !dbg !4750
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4751, metadata !DIExpression()), !dbg !4752
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !4753
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !4755
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !4755
  br i1 %tobool, label %if.end, label %if.then, !dbg !4756

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4757
  br label %return, !dbg !4757

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !4758
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !4758
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4758
  %bf.load = load i32, i32* %4, align 8, !dbg !4758
  %bf.clear = and i32 %bf.load, 65535, !dbg !4758
  %cmp = icmp eq i32 %bf.clear, 17, !dbg !4760
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !4761

if.then1:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !4762
  br label %return, !dbg !4762

if.end2:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4763
  br label %return, !dbg !4763

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !4764
  ret i32 %5, !dbg !4764
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira(%struct._IO_FILE* %f) #0 !dbg !4765 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %overall_cost_before = alloca i32, align 4
  %allocated_reg_info_size = alloca i32, align 4
  %loops_p = alloca i8, align 1
  %max_regno_before_ira = alloca i32, align 4
  %ira_max_point_before_emit = alloca i32, align 4
  %rebuild_p = alloca i32, align 4
  %saved_flag_ira_share_spill_slots = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !4766, metadata !DIExpression()), !dbg !4767
  call void @llvm.dbg.declare(metadata i32* %overall_cost_before, metadata !4768, metadata !DIExpression()), !dbg !4769
  call void @llvm.dbg.declare(metadata i32* %allocated_reg_info_size, metadata !4770, metadata !DIExpression()), !dbg !4771
  call void @llvm.dbg.declare(metadata i8* %loops_p, metadata !4772, metadata !DIExpression()), !dbg !4773
  call void @llvm.dbg.declare(metadata i32* %max_regno_before_ira, metadata !4774, metadata !DIExpression()), !dbg !4775
  call void @llvm.dbg.declare(metadata i32* %ira_max_point_before_emit, metadata !4776, metadata !DIExpression()), !dbg !4777
  call void @llvm.dbg.declare(metadata i32* %rebuild_p, metadata !4778, metadata !DIExpression()), !dbg !4779
  call void @llvm.dbg.declare(metadata i32* %saved_flag_ira_share_spill_slots, metadata !4780, metadata !DIExpression()), !dbg !4781
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4782, metadata !DIExpression()), !dbg !4783
  br label %do.body, !dbg !4784

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !4785
  %tobool = icmp ne i8 %0, 0, !dbg !4785
  br i1 %tobool, label %if.then, label %if.end, !dbg !4788

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 148), !dbg !4785
  br label %if.end, !dbg !4785

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4788

do.end:                                           ; preds = %if.end
  %1 = load i32, i32* @flag_caller_saves, align 4, !dbg !4789
  %tobool1 = icmp ne i32 %1, 0, !dbg !4789
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4791

if.then2:                                         ; preds = %do.end
  call void @init_caller_save(), !dbg !4792
  br label %if.end3, !dbg !4792

if.end3:                                          ; preds = %if.then2, %do.end
  %2 = load i32, i32* @flag_ira_verbose, align 4, !dbg !4793
  %cmp = icmp ult i32 %2, 10, !dbg !4795
  br i1 %cmp, label %if.then4, label %if.else, !dbg !4796

if.then4:                                         ; preds = %if.end3
  %3 = load i32, i32* @flag_ira_verbose, align 4, !dbg !4797
  store i32 %3, i32* @internal_flag_ira_verbose, align 4, !dbg !4799
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !4800
  store %struct._IO_FILE* %4, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4801
  br label %if.end5, !dbg !4802

if.else:                                          ; preds = %if.end3
  %5 = load i32, i32* @flag_ira_verbose, align 4, !dbg !4803
  %sub = sub i32 %5, 10, !dbg !4805
  store i32 %sub, i32* @internal_flag_ira_verbose, align 4, !dbg !4806
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4807
  store %struct._IO_FILE* %6, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4808
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  %7 = load i32, i32* @optimize, align 4, !dbg !4809
  %cmp6 = icmp sgt i32 %7, 0, !dbg !4810
  %conv = zext i1 %cmp6 to i32, !dbg !4810
  %conv7 = trunc i32 %conv to i8, !dbg !4809
  store i8 %conv7, i8* @ira_conflicts_p, align 1, !dbg !4811
  call void @setup_prohibited_mode_move_regs(), !dbg !4812
  call void @df_note_add_problem(), !dbg !4813
  %8 = load i32, i32* @optimize, align 4, !dbg !4814
  %cmp8 = icmp eq i32 %8, 1, !dbg !4816
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !4817

if.then10:                                        ; preds = %if.end5
  call void @df_live_add_problem(), !dbg !4818
  call void @df_live_set_all_dirty(), !dbg !4820
  br label %if.end11, !dbg !4821

if.end11:                                         ; preds = %if.then10, %if.end5
  call void @df_analyze(), !dbg !4822
  %call = call i32 @df_clear_flags(i32 16), !dbg !4823
  call void @regstat_init_n_sets_and_refs(), !dbg !4824
  call void @regstat_compute_ri(), !dbg !4825
  %9 = load i32, i32* @warn_clobbered, align 4, !dbg !4826
  %tobool12 = icmp ne i32 %9, 0, !dbg !4826
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4828

if.then13:                                        ; preds = %if.end11
  call void @generate_setjmp_warnings(), !dbg !4829
  br label %if.end14, !dbg !4829

if.end14:                                         ; preds = %if.then13, %if.end11
  %call15 = call i32 @leaf_function_p(), !dbg !4830
  store i32 %call15, i32* @current_function_is_leaf, align 4, !dbg !4831
  %call16 = call zeroext i8 @resize_reg_info(), !dbg !4832
  %conv17 = zext i8 %call16 to i32, !dbg !4832
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !4832
  br i1 %tobool18, label %land.lhs.true, label %if.end21, !dbg !4834

land.lhs.true:                                    ; preds = %if.end14
  %10 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !4835
  %tobool19 = icmp ne i32 %10, 0, !dbg !4835
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !4836

if.then20:                                        ; preds = %land.lhs.true
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4837
  call void @ira_set_pseudo_classes(%struct._IO_FILE* %11), !dbg !4838
  br label %if.end21, !dbg !4838

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %if.end14
  %call22 = call i32 @update_equiv_regs(), !dbg !4839
  store i32 %call22, i32* %rebuild_p, align 4, !dbg !4840
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @ira_bitmap_obstack), !dbg !4841
  %12 = load i32, i32* @optimize, align 4, !dbg !4842
  %tobool23 = icmp ne i32 %12, 0, !dbg !4842
  br i1 %tobool23, label %if.then24, label %if.end50, !dbg !4844

if.then24:                                        ; preds = %if.end21
  %call25 = call i32 @max_reg_num(), !dbg !4845
  store i32 %call25, i32* @max_regno, align 4, !dbg !4847
  %13 = load i32, i32* @max_regno, align 4, !dbg !4848
  store i32 %13, i32* @ira_reg_equiv_len, align 4, !dbg !4849
  %14 = load i32, i32* @max_regno, align 4, !dbg !4850
  %conv26 = sext i32 %14 to i64, !dbg !4850
  %mul = mul i64 %conv26, 1, !dbg !4851
  %call27 = call i8* @ira_allocate(i64 %mul), !dbg !4852
  store i8* %call27, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !4853
  %15 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !4854
  %16 = load i32, i32* @max_regno, align 4, !dbg !4855
  %conv28 = sext i32 %16 to i64, !dbg !4855
  %mul29 = mul i64 %conv28, 1, !dbg !4856
  call void @llvm.memset.p0i8.i64(i8* align 1 %15, i8 0, i64 %mul29, i1 false), !dbg !4857
  %17 = load i32, i32* @max_regno, align 4, !dbg !4858
  %conv30 = sext i32 %17 to i64, !dbg !4858
  %mul31 = mul i64 %conv30, 8, !dbg !4859
  %call32 = call i8* @ira_allocate(i64 %mul31), !dbg !4860
  %18 = bitcast i8* %call32 to %struct.rtx_def**, !dbg !4861
  store %struct.rtx_def** %18, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !4862
  %19 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !4863
  %20 = bitcast %struct.rtx_def** %19 to i8*, !dbg !4864
  %21 = load i32, i32* @max_regno, align 4, !dbg !4865
  %conv33 = sext i32 %21 to i64, !dbg !4865
  %mul34 = mul i64 %conv33, 8, !dbg !4866
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 %mul34, i1 false), !dbg !4864
  call void @find_reg_equiv_invariant_const(), !dbg !4867
  %22 = load i32, i32* %rebuild_p, align 4, !dbg !4868
  %tobool35 = icmp ne i32 %22, 0, !dbg !4868
  br i1 %tobool35, label %if.then36, label %if.end49, !dbg !4870

if.then36:                                        ; preds = %if.then24
  br label %do.body37, !dbg !4871

do.body37:                                        ; preds = %if.then36
  %23 = load i8, i8* @timevar_enable, align 1, !dbg !4873
  %tobool38 = icmp ne i8 %23, 0, !dbg !4873
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !4876

if.then39:                                        ; preds = %do.body37
  call void @timevar_push_1(i32 119), !dbg !4873
  br label %if.end40, !dbg !4873

if.end40:                                         ; preds = %if.then39, %do.body37
  br label %do.end41, !dbg !4876

do.end41:                                         ; preds = %if.end40
  %call42 = call %struct.rtx_def* @get_insns(), !dbg !4877
  call void @rebuild_jump_labels(%struct.rtx_def* %call42), !dbg !4878
  %call43 = call zeroext i8 @purge_all_dead_edges(), !dbg !4879
  br label %do.body44, !dbg !4880

do.body44:                                        ; preds = %do.end41
  %24 = load i8, i8* @timevar_enable, align 1, !dbg !4881
  %tobool45 = icmp ne i8 %24, 0, !dbg !4881
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !4884

if.then46:                                        ; preds = %do.body44
  call void @timevar_pop_1(i32 119), !dbg !4881
  br label %if.end47, !dbg !4881

if.end47:                                         ; preds = %if.then46, %do.body44
  br label %do.end48, !dbg !4884

do.end48:                                         ; preds = %if.end47
  br label %if.end49, !dbg !4885

if.end49:                                         ; preds = %do.end48, %if.then24
  br label %if.end50, !dbg !4886

if.end50:                                         ; preds = %if.end49, %if.end21
  %call51 = call i32 @max_reg_num(), !dbg !4887
  store i32 %call51, i32* %allocated_reg_info_size, align 4, !dbg !4888
  store i32 %call51, i32* %max_regno_before_ira, align 4, !dbg !4889
  call void @ira_setup_eliminable_regset(), !dbg !4890
  store i32 0, i32* @ira_mem_cost, align 4, !dbg !4891
  store i32 0, i32* @ira_reg_cost, align 4, !dbg !4892
  store i32 0, i32* @ira_overall_cost, align 4, !dbg !4893
  store i32 0, i32* @ira_shuffle_cost, align 4, !dbg !4894
  store i32 0, i32* @ira_store_cost, align 4, !dbg !4895
  store i32 0, i32* @ira_load_cost, align 4, !dbg !4896
  store i32 0, i32* @ira_additional_jumps_num, align 4, !dbg !4897
  store i32 0, i32* @ira_move_loops_num, align 4, !dbg !4898
  %call52 = call i32 @flow_loops_find(%struct.loops* @ira_loops), !dbg !4899
  call void @record_loop_exits(), !dbg !4900
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4901
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !4901
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4901
  store %struct.loops* @ira_loops, %struct.loops** %x_current_loops, align 8, !dbg !4902
  %26 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4903
  %cmp53 = icmp sgt i32 %26, 0, !dbg !4905
  br i1 %cmp53, label %land.lhs.true55, label %if.end60, !dbg !4906

land.lhs.true55:                                  ; preds = %if.end50
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4907
  %cmp56 = icmp ne %struct._IO_FILE* %27, null, !dbg !4908
  br i1 %cmp56, label %if.then58, label %if.end60, !dbg !4909

if.then58:                                        ; preds = %land.lhs.true55
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4910
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i64 0, i64 0)), !dbg !4911
  br label %if.end60, !dbg !4911

if.end60:                                         ; preds = %if.then58, %land.lhs.true55, %if.end50
  %29 = load i32, i32* @optimize, align 4, !dbg !4912
  %tobool61 = icmp ne i32 %29, 0, !dbg !4912
  br i1 %tobool61, label %land.rhs, label %land.end, !dbg !4913

land.rhs:                                         ; preds = %if.end60
  %30 = load i32, i32* @flag_ira_region, align 4, !dbg !4914
  %cmp62 = icmp eq i32 %30, 1, !dbg !4915
  br i1 %cmp62, label %lor.end, label %lor.rhs, !dbg !4916

lor.rhs:                                          ; preds = %land.rhs
  %31 = load i32, i32* @flag_ira_region, align 4, !dbg !4917
  %cmp64 = icmp eq i32 %31, 2, !dbg !4918
  br label %lor.end, !dbg !4916

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %32 = phi i1 [ true, %land.rhs ], [ %cmp64, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end60
  %33 = phi i1 [ false, %if.end60 ], [ %32, %lor.end ], !dbg !4919
  %land.ext = zext i1 %33 to i32, !dbg !4913
  %conv66 = trunc i32 %land.ext to i8, !dbg !4912
  %call67 = call zeroext i8 @ira_build(i8 zeroext %conv66), !dbg !4920
  store i8 %call67, i8* %loops_p, align 1, !dbg !4921
  %34 = load i32, i32* @flag_ira_share_spill_slots, align 4, !dbg !4922
  store i32 %34, i32* %saved_flag_ira_share_spill_slots, align 4, !dbg !4923
  %call68 = call zeroext i8 @too_high_register_pressure_p(), !dbg !4924
  %tobool69 = icmp ne i8 %call68, 0, !dbg !4924
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !4926

if.then70:                                        ; preds = %land.end
  store i32 0, i32* @flag_ira_share_spill_slots, align 4, !dbg !4927
  br label %if.end71, !dbg !4928

if.end71:                                         ; preds = %if.then70, %land.end
  call void @ira_color(), !dbg !4929
  %35 = load i32, i32* @ira_max_point, align 4, !dbg !4930
  store i32 %35, i32* %ira_max_point_before_emit, align 4, !dbg !4931
  %36 = load i8, i8* %loops_p, align 1, !dbg !4932
  call void @ira_emit(i8 zeroext %36), !dbg !4933
  %37 = load i8, i8* @ira_conflicts_p, align 1, !dbg !4934
  %tobool72 = icmp ne i8 %37, 0, !dbg !4934
  br i1 %tobool72, label %if.then73, label %if.end90, !dbg !4936

if.then73:                                        ; preds = %if.end71
  %call74 = call i32 @max_reg_num(), !dbg !4937
  store i32 %call74, i32* @max_regno, align 4, !dbg !4939
  %38 = load i8, i8* %loops_p, align 1, !dbg !4940
  %tobool75 = icmp ne i8 %38, 0, !dbg !4940
  br i1 %tobool75, label %if.else77, label %if.then76, !dbg !4942

if.then76:                                        ; preds = %if.then73
  call void @ira_initiate_assign(), !dbg !4943
  br label %if.end89, !dbg !4943

if.else77:                                        ; preds = %if.then73
  %39 = load i32, i32* %allocated_reg_info_size, align 4, !dbg !4944
  call void @expand_reg_info(i32 %39), !dbg !4946
  %40 = load i32, i32* %allocated_reg_info_size, align 4, !dbg !4947
  call void @setup_preferred_alternate_classes_for_new_pseudos(i32 %40), !dbg !4948
  %41 = load i32, i32* @max_regno, align 4, !dbg !4949
  store i32 %41, i32* %allocated_reg_info_size, align 4, !dbg !4950
  %42 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4951
  %cmp78 = icmp sgt i32 %42, 0, !dbg !4953
  br i1 %cmp78, label %land.lhs.true80, label %if.end85, !dbg !4954

land.lhs.true80:                                  ; preds = %if.else77
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4955
  %cmp81 = icmp ne %struct._IO_FILE* %43, null, !dbg !4956
  br i1 %cmp81, label %if.then83, label %if.end85, !dbg !4957

if.then83:                                        ; preds = %land.lhs.true80
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4958
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.43, i64 0, i64 0)), !dbg !4959
  br label %if.end85, !dbg !4959

if.end85:                                         ; preds = %if.then83, %land.lhs.true80, %if.else77
  %45 = load i32, i32* %max_regno_before_ira, align 4, !dbg !4960
  %46 = load i32, i32* %ira_max_point_before_emit, align 4, !dbg !4961
  call void @ira_flattening(i32 %45, i32 %46), !dbg !4962
  call void @df_analyze(), !dbg !4963
  %call86 = call i32 @flow_loops_find(%struct.loops* @ira_loops), !dbg !4964
  call void @record_loop_exits(), !dbg !4965
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4966
  %add.ptr87 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !4966
  %x_current_loops88 = getelementptr inbounds %struct.function, %struct.function* %add.ptr87, i32 0, i32 4, !dbg !4966
  store %struct.loops* @ira_loops, %struct.loops** %x_current_loops88, align 8, !dbg !4967
  call void @setup_allocno_assignment_flags(), !dbg !4968
  call void @ira_initiate_assign(), !dbg !4969
  %48 = load i32, i32* @max_regno, align 4, !dbg !4970
  call void @ira_reassign_conflict_allocnos(i32 %48), !dbg !4971
  br label %if.end89

if.end89:                                         ; preds = %if.end85, %if.then76
  br label %if.end90, !dbg !4972

if.end90:                                         ; preds = %if.end89, %if.end71
  call void @setup_reg_renumber(), !dbg !4973
  call void @calculate_allocation_cost(), !dbg !4974
  %call91 = call %struct.rtx_def* @get_insns(), !dbg !4975
  %call92 = call i32 @max_reg_num(), !dbg !4976
  %call93 = call i32 @delete_trivially_dead_insns(%struct.rtx_def* %call91, i32 %call92), !dbg !4977
  %call94 = call i32 @max_reg_num(), !dbg !4978
  store i32 %call94, i32* @max_regno, align 4, !dbg !4979
  %49 = load i32, i32* @max_regno, align 4, !dbg !4980
  call void @VEC_rtx_gc_safe_grow(%struct.VEC_rtx_gc** @reg_equiv_memory_loc_vec, i32 %49), !dbg !4980
  %50 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_equiv_memory_loc_vec, align 8, !dbg !4981
  %tobool95 = icmp ne %struct.VEC_rtx_gc* %50, null, !dbg !4981
  br i1 %tobool95, label %cond.true, label %cond.false, !dbg !4981

cond.true:                                        ; preds = %if.end90
  %51 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_equiv_memory_loc_vec, align 8, !dbg !4981
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %51, i32 0, i32 0, !dbg !4981
  br label %cond.end, !dbg !4981

cond.false:                                       ; preds = %if.end90
  br label %cond.end, !dbg !4981

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4981
  %call96 = call %struct.rtx_def** @VEC_rtx_base_address(%struct.VEC_rtx_base* %cond), !dbg !4981
  %52 = bitcast %struct.rtx_def** %call96 to i8*, !dbg !4982
  %53 = load i32, i32* @max_regno, align 4, !dbg !4983
  %conv97 = sext i32 %53 to i64, !dbg !4983
  %mul98 = mul i64 8, %conv97, !dbg !4984
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 %mul98, i1 false), !dbg !4982
  %54 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_equiv_memory_loc_vec, align 8, !dbg !4985
  %tobool99 = icmp ne %struct.VEC_rtx_gc* %54, null, !dbg !4985
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !4985

cond.true100:                                     ; preds = %cond.end
  %55 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** @reg_equiv_memory_loc_vec, align 8, !dbg !4985
  %base101 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %55, i32 0, i32 0, !dbg !4985
  br label %cond.end103, !dbg !4985

cond.false102:                                    ; preds = %cond.end
  br label %cond.end103, !dbg !4985

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_rtx_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !4985
  %call105 = call %struct.rtx_def** @VEC_rtx_base_address(%struct.VEC_rtx_base* %cond104), !dbg !4985
  store %struct.rtx_def** %call105, %struct.rtx_def*** @reg_equiv_memory_loc, align 8, !dbg !4986
  %56 = load i32, i32* @max_regno, align 4, !dbg !4987
  %57 = load i32, i32* %max_regno_before_ira, align 4, !dbg !4989
  %cmp106 = icmp ne i32 %56, %57, !dbg !4990
  br i1 %cmp106, label %if.then108, label %if.end109, !dbg !4991

if.then108:                                       ; preds = %cond.end103
  call void @regstat_free_n_sets_and_refs(), !dbg !4992
  call void @regstat_free_ri(), !dbg !4994
  call void @regstat_init_n_sets_and_refs(), !dbg !4995
  call void @regstat_compute_ri(), !dbg !4996
  br label %if.end109, !dbg !4997

if.end109:                                        ; preds = %if.then108, %cond.end103
  %58 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_memory_loc, align 8, !dbg !4998
  call void @allocate_initial_values(%struct.rtx_def** %58), !dbg !4999
  %59 = load i32, i32* @ira_overall_cost, align 4, !dbg !5000
  store i32 %59, i32* %overall_cost_before, align 4, !dbg !5001
  %60 = load i8, i8* @ira_conflicts_p, align 1, !dbg !5002
  %tobool110 = icmp ne i8 %60, 0, !dbg !5002
  br i1 %tobool110, label %if.then111, label %if.end117, !dbg !5004

if.then111:                                       ; preds = %if.end109
  call void @fix_reg_equiv_init(), !dbg !5005
  store i32 0, i32* @ira_spilled_reg_stack_slots_num, align 4, !dbg !5007
  %61 = load i32, i32* @max_regno, align 4, !dbg !5008
  %conv112 = sext i32 %61 to i64, !dbg !5008
  %mul113 = mul i64 %conv112, 48, !dbg !5009
  %call114 = call i8* @ira_allocate(i64 %mul113), !dbg !5010
  %62 = bitcast i8* %call114 to %struct.ira_spilled_reg_stack_slot*, !dbg !5011
  store %struct.ira_spilled_reg_stack_slot* %62, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5012
  %63 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5013
  %64 = bitcast %struct.ira_spilled_reg_stack_slot* %63 to i8*, !dbg !5014
  %65 = load i32, i32* @max_regno, align 4, !dbg !5015
  %conv115 = sext i32 %65 to i64, !dbg !5015
  %mul116 = mul i64 %conv115, 48, !dbg !5016
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 %mul116, i1 false), !dbg !5014
  br label %if.end117, !dbg !5017

if.end117:                                        ; preds = %if.then111, %if.end109
  br label %do.body118, !dbg !5018

do.body118:                                       ; preds = %if.end117
  %66 = load i8, i8* @timevar_enable, align 1, !dbg !5019
  %tobool119 = icmp ne i8 %66, 0, !dbg !5019
  br i1 %tobool119, label %if.then120, label %if.end121, !dbg !5022

if.then120:                                       ; preds = %do.body118
  call void @timevar_pop_1(i32 148), !dbg !5019
  br label %if.end121, !dbg !5019

if.end121:                                        ; preds = %if.then120, %do.body118
  br label %do.end122, !dbg !5022

do.end122:                                        ; preds = %if.end121
  br label %do.body123, !dbg !5023

do.body123:                                       ; preds = %do.end122
  %67 = load i8, i8* @timevar_enable, align 1, !dbg !5024
  %tobool124 = icmp ne i8 %67, 0, !dbg !5024
  br i1 %tobool124, label %if.then125, label %if.end126, !dbg !5027

if.then125:                                       ; preds = %do.body123
  call void @timevar_push_1(i32 149), !dbg !5024
  br label %if.end126, !dbg !5024

if.end126:                                        ; preds = %if.then125, %do.body123
  br label %do.end127, !dbg !5027

do.end127:                                        ; preds = %if.end126
  %call128 = call i32 @df_set_flags(i32 16), !dbg !5028
  call void @build_insn_chain(), !dbg !5029
  %call129 = call %struct.rtx_def* @get_insns(), !dbg !5030
  %68 = load i8, i8* @ira_conflicts_p, align 1, !dbg !5031
  %conv130 = zext i8 %68 to i32, !dbg !5031
  %call131 = call i32 @reload(%struct.rtx_def* %call129, i32 %conv130), !dbg !5032
  %tobool132 = icmp ne i32 %call131, 0, !dbg !5033
  %lnot = xor i1 %tobool132, true, !dbg !5033
  %lnot.ext = zext i1 %lnot to i32, !dbg !5033
  store i32 %lnot.ext, i32* @reload_completed, align 4, !dbg !5034
  call void @finish_subregs_of_mode(), !dbg !5035
  br label %do.body133, !dbg !5036

do.body133:                                       ; preds = %do.end127
  %69 = load i8, i8* @timevar_enable, align 1, !dbg !5037
  %tobool134 = icmp ne i8 %69, 0, !dbg !5037
  br i1 %tobool134, label %if.then135, label %if.end136, !dbg !5040

if.then135:                                       ; preds = %do.body133
  call void @timevar_pop_1(i32 149), !dbg !5037
  br label %if.end136, !dbg !5037

if.end136:                                        ; preds = %if.then135, %do.body133
  br label %do.end137, !dbg !5040

do.end137:                                        ; preds = %if.end136
  br label %do.body138, !dbg !5041

do.body138:                                       ; preds = %do.end137
  %70 = load i8, i8* @timevar_enable, align 1, !dbg !5042
  %tobool139 = icmp ne i8 %70, 0, !dbg !5042
  br i1 %tobool139, label %if.then140, label %if.end141, !dbg !5045

if.then140:                                       ; preds = %do.body138
  call void @timevar_push_1(i32 148), !dbg !5042
  br label %if.end141, !dbg !5042

if.end141:                                        ; preds = %if.then140, %do.body138
  br label %do.end142, !dbg !5045

do.end142:                                        ; preds = %if.end141
  %71 = load i8, i8* @ira_conflicts_p, align 1, !dbg !5046
  %tobool143 = icmp ne i8 %71, 0, !dbg !5046
  br i1 %tobool143, label %if.then144, label %if.end145, !dbg !5048

if.then144:                                       ; preds = %do.end142
  %72 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5049
  %73 = bitcast %struct.ira_spilled_reg_stack_slot* %72 to i8*, !dbg !5049
  call void @ira_free(i8* %73), !dbg !5051
  call void @ira_finish_assign(), !dbg !5052
  br label %if.end145, !dbg !5053

if.end145:                                        ; preds = %if.then144, %do.end142
  %74 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !5054
  %cmp146 = icmp sgt i32 %74, 0, !dbg !5056
  br i1 %cmp146, label %land.lhs.true148, label %if.end156, !dbg !5057

land.lhs.true148:                                 ; preds = %if.end145
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5058
  %cmp149 = icmp ne %struct._IO_FILE* %75, null, !dbg !5059
  br i1 %cmp149, label %land.lhs.true151, label %if.end156, !dbg !5060

land.lhs.true151:                                 ; preds = %land.lhs.true148
  %76 = load i32, i32* %overall_cost_before, align 4, !dbg !5061
  %77 = load i32, i32* @ira_overall_cost, align 4, !dbg !5062
  %cmp152 = icmp ne i32 %76, %77, !dbg !5063
  br i1 %cmp152, label %if.then154, label %if.end156, !dbg !5064

if.then154:                                       ; preds = %land.lhs.true151
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5065
  %79 = load i32, i32* @ira_overall_cost, align 4, !dbg !5066
  %call155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0), i32 %79), !dbg !5067
  br label %if.end156, !dbg !5067

if.end156:                                        ; preds = %if.then154, %land.lhs.true151, %land.lhs.true148, %if.end145
  call void @ira_destroy(), !dbg !5068
  %80 = load i32, i32* %saved_flag_ira_share_spill_slots, align 4, !dbg !5069
  store i32 %80, i32* @flag_ira_share_spill_slots, align 4, !dbg !5070
  call void @flow_loops_free(%struct.loops* @ira_loops), !dbg !5071
  call void @free_dominance_info(i32 1), !dbg !5072
  %81 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5073
  %add.ptr157 = getelementptr inbounds %struct.function, %struct.function* %81, i64 0, !dbg !5073
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr157, i32 0, i32 1, !dbg !5073
  %82 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5073
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %82, i32 0, i32 0, !dbg !5073
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5073
  store %struct.basic_block_def* %83, %struct.basic_block_def** %bb, align 8, !dbg !5073
  br label %for.cond, !dbg !5073

for.cond:                                         ; preds = %for.inc, %if.end156
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5075
  %tobool158 = icmp ne %struct.basic_block_def* %84, null, !dbg !5073
  br i1 %tobool158, label %for.body, label %for.end, !dbg !5073

for.body:                                         ; preds = %for.cond
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5077
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 3, !dbg !5078
  store %struct.loop* null, %struct.loop** %loop_father, align 8, !dbg !5079
  br label %for.inc, !dbg !5077

for.inc:                                          ; preds = %for.body
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5075
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 6, !dbg !5075
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5075
  store %struct.basic_block_def* %87, %struct.basic_block_def** %bb, align 8, !dbg !5075
  br label %for.cond, !dbg !5075, !llvm.loop !5080

for.end:                                          ; preds = %for.cond
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5082
  %add.ptr159 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !5082
  %x_current_loops160 = getelementptr inbounds %struct.function, %struct.function* %add.ptr159, i32 0, i32 4, !dbg !5082
  store %struct.loops* null, %struct.loops** %x_current_loops160, align 8, !dbg !5083
  call void @regstat_free_ri(), !dbg !5084
  call void @regstat_free_n_sets_and_refs(), !dbg !5085
  %89 = load i32, i32* @optimize, align 4, !dbg !5086
  %tobool161 = icmp ne i32 %89, 0, !dbg !5086
  br i1 %tobool161, label %if.then162, label %if.end164, !dbg !5088

if.then162:                                       ; preds = %for.end
  %call163 = call zeroext i8 @cleanup_cfg(i32 1), !dbg !5089
  %90 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !5091
  call void @ira_free(i8* %90), !dbg !5092
  %91 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !5093
  %92 = bitcast %struct.rtx_def** %91 to i8*, !dbg !5093
  call void @ira_free(i8* %92), !dbg !5094
  br label %if.end164, !dbg !5095

if.end164:                                        ; preds = %if.then162, %for.end
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @ira_bitmap_obstack), !dbg !5096
  call void @df_finish_pass(i8 zeroext 1), !dbg !5097
  %93 = load i32, i32* @optimize, align 4, !dbg !5098
  %cmp165 = icmp sgt i32 %93, 1, !dbg !5100
  br i1 %cmp165, label %if.then167, label %if.end168, !dbg !5101

if.then167:                                       ; preds = %if.end164
  call void @df_live_add_problem(), !dbg !5102
  br label %if.end168, !dbg !5102

if.end168:                                        ; preds = %if.then167, %if.end164
  call void @df_scan_alloc(%struct.bitmap_head_def* null), !dbg !5103
  call void @df_scan_blocks(), !dbg !5104
  %94 = load i32, i32* @optimize, align 4, !dbg !5105
  %tobool169 = icmp ne i32 %94, 0, !dbg !5105
  br i1 %tobool169, label %if.then170, label %if.end171, !dbg !5107

if.then170:                                       ; preds = %if.end168
  call void @df_analyze(), !dbg !5108
  br label %if.end171, !dbg !5108

if.end171:                                        ; preds = %if.then170, %if.end168
  br label %do.body172, !dbg !5109

do.body172:                                       ; preds = %if.end171
  %95 = load i8, i8* @timevar_enable, align 1, !dbg !5110
  %tobool173 = icmp ne i8 %95, 0, !dbg !5110
  br i1 %tobool173, label %if.then174, label %if.end175, !dbg !5113

if.then174:                                       ; preds = %do.body172
  call void @timevar_pop_1(i32 148), !dbg !5110
  br label %if.end175, !dbg !5110

if.end175:                                        ; preds = %if.then174, %do.body172
  br label %do.end176, !dbg !5113

do.end176:                                        ; preds = %if.end175
  ret void, !dbg !5114
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local void @init_caller_save() #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_prohibited_mode_move_regs() #0 !dbg !5115 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %test_reg1 = alloca %struct.rtx_def*, align 8
  %test_reg2 = alloca %struct.rtx_def*, align 8
  %move_pat = alloca %struct.rtx_def*, align 8
  %move_insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5116, metadata !DIExpression()), !dbg !5117
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5118, metadata !DIExpression()), !dbg !5119
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test_reg1, metadata !5120, metadata !DIExpression()), !dbg !5121
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test_reg2, metadata !5122, metadata !DIExpression()), !dbg !5123
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %move_pat, metadata !5124, metadata !DIExpression()), !dbg !5125
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %move_insn, metadata !5126, metadata !DIExpression()), !dbg !5127
  %0 = load i8, i8* @ira_prohibited_mode_move_regs_initialized_p, align 1, !dbg !5128
  %tobool = icmp ne i8 %0, 0, !dbg !5128
  br i1 %tobool, label %if.then, label %if.end, !dbg !5130

if.then:                                          ; preds = %entry
  br label %for.end42, !dbg !5131

if.end:                                           ; preds = %entry
  store i8 1, i8* @ira_prohibited_mode_move_regs_initialized_p, align 1, !dbg !5132
  %call = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 0), !dbg !5133
  store %struct.rtx_def* %call, %struct.rtx_def** %test_reg1, align 8, !dbg !5134
  %call1 = call %struct.rtx_def* @gen_rtx_REG(i32 0, i32 0), !dbg !5135
  store %struct.rtx_def* %call1, %struct.rtx_def** %test_reg2, align 8, !dbg !5136
  %1 = load %struct.rtx_def*, %struct.rtx_def** %test_reg1, align 8, !dbg !5137
  %2 = load %struct.rtx_def*, %struct.rtx_def** %test_reg2, align 8, !dbg !5137
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !5137
  store %struct.rtx_def* %call2, %struct.rtx_def** %move_pat, align 8, !dbg !5138
  %3 = load %struct.rtx_def*, %struct.rtx_def** %move_pat, align 8, !dbg !5139
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_iuuBieie_stat(i32 8, i32 0, i32 0, %struct.rtx_def* null, %struct.rtx_def* null, %struct.basic_block_def* null, i32 0, %struct.rtx_def* %3, i32 -1, %struct.rtx_def* null), !dbg !5139
  store %struct.rtx_def* %call3, %struct.rtx_def** %move_insn, align 8, !dbg !5140
  store i32 0, i32* %i, align 4, !dbg !5141
  br label %for.cond, !dbg !5143

for.cond:                                         ; preds = %for.inc40, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !5144
  %cmp = icmp slt i32 %4, 87, !dbg !5146
  br i1 %cmp, label %for.body, label %for.end42, !dbg !5147

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !5148
  %idxprom = sext i32 %5 to i64, !dbg !5148
  %arrayidx = getelementptr inbounds [87 x i64], [87 x i64]* @ira_prohibited_mode_move_regs, i64 0, i64 %idxprom, !dbg !5148
  store i64 -1, i64* %arrayidx, align 8, !dbg !5148
  store i32 0, i32* %j, align 4, !dbg !5150
  br label %for.cond4, !dbg !5152

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %j, align 4, !dbg !5153
  %cmp5 = icmp slt i32 %6, 53, !dbg !5155
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !5156

for.body6:                                        ; preds = %for.cond4
  %7 = load i32, i32* %j, align 4, !dbg !5157
  %8 = load i32, i32* %i, align 4, !dbg !5157
  %call7 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 %7, i32 %8), !dbg !5157
  %tobool8 = icmp ne i8 %call7, 0, !dbg !5157
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !5160

if.then9:                                         ; preds = %for.body6
  br label %for.inc, !dbg !5161

if.end10:                                         ; preds = %for.body6
  %9 = load %struct.rtx_def*, %struct.rtx_def** %test_reg1, align 8, !dbg !5162
  %call11 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !5162
  %10 = load i32, i32* %j, align 4, !dbg !5162
  %11 = load %struct.rtx_def*, %struct.rtx_def** %test_reg1, align 8, !dbg !5162
  call void @df_ref_change_reg_with_loc(i32 %call11, i32 %10, %struct.rtx_def* %11), !dbg !5162
  %12 = load i32, i32* %j, align 4, !dbg !5162
  %13 = load %struct.rtx_def*, %struct.rtx_def** %test_reg1, align 8, !dbg !5162
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5162
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5162
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5162
  %rt_uint = bitcast %union.rtunion_def* %arrayidx12 to i32*, !dbg !5162
  store i32 %12, i32* %rt_uint, align 8, !dbg !5162
  %14 = load i32, i32* %i, align 4, !dbg !5163
  %15 = load %struct.rtx_def*, %struct.rtx_def** %test_reg1, align 8, !dbg !5163
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !5163
  %bf.load = load i32, i32* %16, align 8, !dbg !5163
  %bf.value = and i32 %14, 255, !dbg !5163
  %bf.shl = shl i32 %bf.value, 16, !dbg !5163
  %bf.clear = and i32 %bf.load, -16711681, !dbg !5163
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !5163
  store i32 %bf.set, i32* %16, align 8, !dbg !5163
  %17 = load %struct.rtx_def*, %struct.rtx_def** %test_reg2, align 8, !dbg !5164
  %call13 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !5164
  %18 = load i32, i32* %j, align 4, !dbg !5164
  %19 = load %struct.rtx_def*, %struct.rtx_def** %test_reg2, align 8, !dbg !5164
  call void @df_ref_change_reg_with_loc(i32 %call13, i32 %18, %struct.rtx_def* %19), !dbg !5164
  %20 = load i32, i32* %j, align 4, !dbg !5164
  %21 = load %struct.rtx_def*, %struct.rtx_def** %test_reg2, align 8, !dbg !5164
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5164
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !5164
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !5164
  %rt_uint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*, !dbg !5164
  store i32 %20, i32* %rt_uint17, align 8, !dbg !5164
  %22 = load i32, i32* %i, align 4, !dbg !5165
  %23 = load %struct.rtx_def*, %struct.rtx_def** %test_reg2, align 8, !dbg !5165
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5165
  %bf.load18 = load i32, i32* %24, align 8, !dbg !5165
  %bf.value19 = and i32 %22, 255, !dbg !5165
  %bf.shl20 = shl i32 %bf.value19, 16, !dbg !5165
  %bf.clear21 = and i32 %bf.load18, -16711681, !dbg !5165
  %bf.set22 = or i32 %bf.clear21, %bf.shl20, !dbg !5165
  store i32 %bf.set22, i32* %24, align 8, !dbg !5165
  %25 = load %struct.rtx_def*, %struct.rtx_def** %move_insn, align 8, !dbg !5166
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !5166
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !5166
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 6, !dbg !5166
  %rt_int = bitcast %union.rtunion_def* %arrayidx25 to i32*, !dbg !5166
  store i32 -1, i32* %rt_int, align 8, !dbg !5167
  %26 = load %struct.rtx_def*, %struct.rtx_def** %move_insn, align 8, !dbg !5168
  %call26 = call i32 @recog_memoized(%struct.rtx_def* %26), !dbg !5169
  %27 = load %struct.rtx_def*, %struct.rtx_def** %move_insn, align 8, !dbg !5170
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5170
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5170
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 6, !dbg !5170
  %rt_int30 = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !5170
  %28 = load i32, i32* %rt_int30, align 8, !dbg !5170
  %cmp31 = icmp slt i32 %28, 0, !dbg !5172
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !5173

if.then32:                                        ; preds = %if.end10
  br label %for.inc, !dbg !5174

if.end33:                                         ; preds = %if.end10
  %29 = load %struct.rtx_def*, %struct.rtx_def** %move_insn, align 8, !dbg !5175
  call void @extract_insn(%struct.rtx_def* %29), !dbg !5176
  %call34 = call i32 @constrain_operands(i32 1), !dbg !5177
  %tobool35 = icmp ne i32 %call34, 0, !dbg !5177
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !5179

if.then36:                                        ; preds = %if.end33
  br label %for.inc, !dbg !5180

if.end37:                                         ; preds = %if.end33
  %30 = load i32, i32* %j, align 4, !dbg !5181
  %sh_prom = zext i32 %30 to i64, !dbg !5181
  %shl = shl i64 1, %sh_prom, !dbg !5181
  %neg = xor i64 %shl, -1, !dbg !5181
  %31 = load i32, i32* %i, align 4, !dbg !5181
  %idxprom38 = sext i32 %31 to i64, !dbg !5181
  %arrayidx39 = getelementptr inbounds [87 x i64], [87 x i64]* @ira_prohibited_mode_move_regs, i64 0, i64 %idxprom38, !dbg !5181
  %32 = load i64, i64* %arrayidx39, align 8, !dbg !5181
  %and = and i64 %32, %neg, !dbg !5181
  store i64 %and, i64* %arrayidx39, align 8, !dbg !5181
  br label %for.inc, !dbg !5182

for.inc:                                          ; preds = %if.end37, %if.then36, %if.then32, %if.then9
  %33 = load i32, i32* %j, align 4, !dbg !5183
  %inc = add nsw i32 %33, 1, !dbg !5183
  store i32 %inc, i32* %j, align 4, !dbg !5183
  br label %for.cond4, !dbg !5184, !llvm.loop !5185

for.end:                                          ; preds = %for.cond4
  br label %for.inc40, !dbg !5187

for.inc40:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4, !dbg !5188
  %inc41 = add nsw i32 %34, 1, !dbg !5188
  store i32 %inc41, i32* %i, align 4, !dbg !5188
  br label %for.cond, !dbg !5189, !llvm.loop !5190

for.end42:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !5192
}

declare dso_local void @df_note_add_problem() #2

declare dso_local void @df_live_add_problem() #2

declare dso_local void @df_live_set_all_dirty() #2

declare dso_local void @df_analyze() #2

declare dso_local i32 @df_clear_flags(i32) #2

declare dso_local void @regstat_init_n_sets_and_refs() #2

declare dso_local void @regstat_compute_ri() #2

declare dso_local void @generate_setjmp_warnings() #2

declare dso_local i32 @leaf_function_p() #2

declare dso_local zeroext i8 @resize_reg_info() #2

declare dso_local void @ira_set_pseudo_classes(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @update_equiv_regs() #0 !dbg !5193 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %loop_depth = alloca i32, align 4
  %cleared_regs = alloca %struct.bitmap_head_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %i = alloca i32, align 4
  %part = alloca %struct.rtx_def*, align 8
  %note_value = alloca %struct.rtx_def*, align 8
  %regno350 = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %set466 = alloca %struct.rtx_def*, align 8
  %src467 = alloca %struct.rtx_def*, align 8
  %dest468 = alloca %struct.rtx_def*, align 8
  %regno469 = alloca i32, align 4
  %init_insn = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  %regno710 = alloca i32, align 4
  %equiv_insn = alloca %struct.rtx_def*, align 8
  %equiv_link = alloca %struct.rtx_def*, align 8
  %last_link = alloca %struct.rtx_def*, align 8
  %note772 = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  %old_loc = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5196, metadata !DIExpression()), !dbg !5197
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5198, metadata !DIExpression()), !dbg !5199
  call void @llvm.dbg.declare(metadata i32* %loop_depth, metadata !5200, metadata !DIExpression()), !dbg !5201
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %cleared_regs, metadata !5202, metadata !DIExpression()), !dbg !5203
  store i32 0, i32* @recorded_label_ref, align 4, !dbg !5204
  %0 = load i32, i32* @max_regno, align 4, !dbg !5205
  %conv = sext i32 %0 to i64, !dbg !5205
  %call = call i8* @xcalloc(i64 %conv, i64 40), !dbg !5205
  %1 = bitcast i8* %call to %struct.equivalence*, !dbg !5205
  store %struct.equivalence* %1, %struct.equivalence** @reg_equiv, align 8, !dbg !5206
  %2 = load i32, i32* @max_regno, align 4, !dbg !5207
  %conv1 = sext i32 %2 to i64, !dbg !5207
  %mul = mul i64 %conv1, 8, !dbg !5207
  %call2 = call i8* @ggc_alloc_cleared_stat(i64 %mul), !dbg !5207
  %3 = bitcast i8* %call2 to %struct.rtx_def**, !dbg !5207
  store %struct.rtx_def** %3, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5208
  %4 = load i32, i32* @max_regno, align 4, !dbg !5209
  store i32 %4, i32* @reg_equiv_init_size, align 4, !dbg !5210
  call void @init_alias_analysis(), !dbg !5211
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5212
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5212
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5212
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5212
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !5212
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5212
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !5212
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5212
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !5212
  br label %for.cond, !dbg !5212

for.cond:                                         ; preds = %for.inc456, %entry
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5214
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5214
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5214
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !5214
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !5214
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !5214
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5214
  %cmp = icmp ne %struct.basic_block_def* %9, %12, !dbg !5214
  br i1 %cmp, label %for.body, label %for.end458, !dbg !5212

for.body:                                         ; preds = %for.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5216
  %loop_depth6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 10, !dbg !5218
  %14 = load i32, i32* %loop_depth6, align 4, !dbg !5218
  store i32 %14, i32* %loop_depth, align 4, !dbg !5219
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5220
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !5220
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5220
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5220
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 0, !dbg !5220
  %17 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5220
  store %struct.rtx_def* %17, %struct.rtx_def** %insn, align 8, !dbg !5222
  br label %for.cond7, !dbg !5223

for.cond7:                                        ; preds = %for.inc450, %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5224
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5226
  %il8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !5226
  %rtl9 = bitcast %union.basic_block_il_dependent* %il8 to %struct.rtl_bb_info**, !dbg !5226
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl9, align 8, !dbg !5226
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !5226
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5226
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5226
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5226
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5226
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5226
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5226
  %cmp10 = icmp ne %struct.rtx_def* %18, %22, !dbg !5227
  br i1 %cmp10, label %for.body12, label %for.end455, !dbg !5228

for.body12:                                       ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5229, metadata !DIExpression()), !dbg !5231
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5232, metadata !DIExpression()), !dbg !5233
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !5234, metadata !DIExpression()), !dbg !5235
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !5236, metadata !DIExpression()), !dbg !5237
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5238, metadata !DIExpression()), !dbg !5239
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5240
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5240
  %bf.load = load i32, i32* %24, align 8, !dbg !5240
  %bf.clear = and i32 %bf.load, 65535, !dbg !5240
  %cmp13 = icmp eq i32 %bf.clear, 8, !dbg !5240
  br i1 %cmp13, label %if.end, label %lor.lhs.false, !dbg !5240

lor.lhs.false:                                    ; preds = %for.body12
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5240
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5240
  %bf.load15 = load i32, i32* %26, align 8, !dbg !5240
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !5240
  %cmp17 = icmp eq i32 %bf.clear16, 7, !dbg !5240
  br i1 %cmp17, label %if.end, label %lor.lhs.false19, !dbg !5240

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5240
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !5240
  %bf.load20 = load i32, i32* %28, align 8, !dbg !5240
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !5240
  %cmp22 = icmp eq i32 %bf.clear21, 9, !dbg !5240
  br i1 %cmp22, label %if.end, label %lor.lhs.false24, !dbg !5240

lor.lhs.false24:                                  ; preds = %lor.lhs.false19
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5240
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !5240
  %bf.load25 = load i32, i32* %30, align 8, !dbg !5240
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !5240
  %cmp27 = icmp eq i32 %bf.clear26, 10, !dbg !5240
  br i1 %cmp27, label %if.end, label %if.then, !dbg !5242

if.then:                                          ; preds = %lor.lhs.false24
  br label %for.inc450, !dbg !5243

if.end:                                           ; preds = %lor.lhs.false24, %lor.lhs.false19, %lor.lhs.false, %for.body12
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5244
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !5244
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !5244
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 7, !dbg !5244
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !5244
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !5244
  store %struct.rtx_def* %32, %struct.rtx_def** %note, align 8, !dbg !5246
  br label %for.cond33, !dbg !5247

for.cond33:                                       ; preds = %for.inc, %if.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5248
  %tobool = icmp ne %struct.rtx_def* %33, null, !dbg !5250
  br i1 %tobool, label %for.body34, label %for.end, !dbg !5250

for.body34:                                       ; preds = %for.cond33
  %34 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5251
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !5251
  %bf.load35 = load i32, i32* %35, align 8, !dbg !5251
  %bf.lshr = lshr i32 %bf.load35, 16, !dbg !5251
  %bf.clear36 = and i32 %bf.lshr, 255, !dbg !5251
  %cmp37 = icmp eq i32 %bf.clear36, 2, !dbg !5253
  br i1 %cmp37, label %if.then39, label %if.end44, !dbg !5254

if.then39:                                        ; preds = %for.body34
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5255
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5255
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5255
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !5255
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5255
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5255
  %38 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5256
  call void @no_equiv(%struct.rtx_def* %37, %struct.rtx_def* %38, i8* null), !dbg !5257
  br label %if.end44, !dbg !5257

if.end44:                                         ; preds = %if.then39, %for.body34
  br label %for.inc, !dbg !5258

for.inc:                                          ; preds = %if.end44
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5259
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5259
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !5259
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 1, !dbg !5259
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !5259
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !5259
  store %struct.rtx_def* %40, %struct.rtx_def** %note, align 8, !dbg !5260
  br label %for.cond33, !dbg !5261, !llvm.loop !5262

for.end:                                          ; preds = %for.cond33
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !5264
  %bf.load49 = load i32, i32* %42, align 8, !dbg !5264
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !5264
  %cmp51 = icmp eq i32 %bf.clear50, 8, !dbg !5264
  br i1 %cmp51, label %cond.true, label %lor.lhs.false53, !dbg !5264

lor.lhs.false53:                                  ; preds = %for.end
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5264
  %bf.load54 = load i32, i32* %44, align 8, !dbg !5264
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !5264
  %cmp56 = icmp eq i32 %bf.clear55, 7, !dbg !5264
  br i1 %cmp56, label %cond.true, label %lor.lhs.false58, !dbg !5264

lor.lhs.false58:                                  ; preds = %lor.lhs.false53
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5264
  %bf.load59 = load i32, i32* %46, align 8, !dbg !5264
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !5264
  %cmp61 = icmp eq i32 %bf.clear60, 9, !dbg !5264
  br i1 %cmp61, label %cond.true, label %lor.lhs.false63, !dbg !5264

lor.lhs.false63:                                  ; preds = %lor.lhs.false58
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5264
  %bf.load64 = load i32, i32* %48, align 8, !dbg !5264
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !5264
  %cmp66 = icmp eq i32 %bf.clear65, 10, !dbg !5264
  br i1 %cmp66, label %cond.true, label %cond.false86, !dbg !5264

cond.true:                                        ; preds = %lor.lhs.false63, %lor.lhs.false58, %lor.lhs.false53, %for.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !5264
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !5264
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 5, !dbg !5264
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !5264
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !5264
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !5264
  %bf.load72 = load i32, i32* %51, align 8, !dbg !5264
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !5264
  %cmp74 = icmp eq i32 %bf.clear73, 23, !dbg !5264
  br i1 %cmp74, label %cond.true76, label %cond.false, !dbg !5264

cond.true76:                                      ; preds = %cond.true
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !5264
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !5264
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 5, !dbg !5264
  %rt_rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**, !dbg !5264
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx80, align 8, !dbg !5264
  br label %cond.end, !dbg !5264

cond.false:                                       ; preds = %cond.true
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5264
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !5264
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !5264
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 5, !dbg !5264
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !5264
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !5264
  %call85 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %54, %struct.rtx_def* %56), !dbg !5264
  br label %cond.end, !dbg !5264

cond.end:                                         ; preds = %cond.false, %cond.true76
  %cond = phi %struct.rtx_def* [ %53, %cond.true76 ], [ %call85, %cond.false ], !dbg !5264
  br label %cond.end87, !dbg !5264

cond.false86:                                     ; preds = %lor.lhs.false63
  br label %cond.end87, !dbg !5264

cond.end87:                                       ; preds = %cond.false86, %cond.end
  %cond88 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false86 ], !dbg !5264
  store %struct.rtx_def* %cond88, %struct.rtx_def** %set, align 8, !dbg !5265
  %57 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5266
  %cmp89 = icmp eq %struct.rtx_def* %57, null, !dbg !5268
  br i1 %cmp89, label %if.then91, label %if.else, !dbg !5269

if.then91:                                        ; preds = %cond.end87
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5270
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !5270
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !5270
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 5, !dbg !5270
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !5270
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !5270
  call void @note_stores(%struct.rtx_def* %59, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @no_equiv, i8* null), !dbg !5272
  br label %for.inc450, !dbg !5273

if.else:                                          ; preds = %cond.end87
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5274
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !5274
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !5274
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 5, !dbg !5274
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !5274
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !5274
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !5274
  %bf.load100 = load i32, i32* %62, align 8, !dbg !5274
  %bf.clear101 = and i32 %bf.load100, 65535, !dbg !5274
  %cmp102 = icmp eq i32 %bf.clear101, 15, !dbg !5276
  br i1 %cmp102, label %if.then104, label %if.end131, !dbg !5277

if.then104:                                       ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5278, metadata !DIExpression()), !dbg !5280
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5281
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5281
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !5281
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 5, !dbg !5281
  %rt_rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**, !dbg !5281
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx108, align 8, !dbg !5281
  %u109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !5281
  %fld110 = bitcast %union.u* %u109 to [1 x %union.rtunion_def]*, !dbg !5281
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i64 0, i64 0, !dbg !5281
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtvec_def**, !dbg !5281
  %65 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5281
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %65, i32 0, i32 0, !dbg !5281
  %66 = load i32, i32* %num_elem, align 8, !dbg !5281
  %sub = sub nsw i32 %66, 1, !dbg !5283
  store i32 %sub, i32* %i, align 4, !dbg !5284
  br label %for.cond112, !dbg !5285

for.cond112:                                      ; preds = %for.inc129, %if.then104
  %67 = load i32, i32* %i, align 4, !dbg !5286
  %cmp113 = icmp sge i32 %67, 0, !dbg !5288
  br i1 %cmp113, label %for.body115, label %for.end130, !dbg !5289

for.body115:                                      ; preds = %for.cond112
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %part, metadata !5290, metadata !DIExpression()), !dbg !5292
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5293
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5293
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !5293
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 5, !dbg !5293
  %rt_rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**, !dbg !5293
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx119, align 8, !dbg !5293
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !5293
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !5293
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 0, !dbg !5293
  %rt_rtvec123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtvec_def**, !dbg !5293
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec123, align 8, !dbg !5293
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1, !dbg !5293
  %71 = load i32, i32* %i, align 4, !dbg !5293
  %idxprom = sext i32 %71 to i64, !dbg !5293
  %arrayidx124 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !5293
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx124, align 8, !dbg !5293
  store %struct.rtx_def* %72, %struct.rtx_def** %part, align 8, !dbg !5292
  %73 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !5294
  %74 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5296
  %cmp125 = icmp ne %struct.rtx_def* %73, %74, !dbg !5297
  br i1 %cmp125, label %if.then127, label %if.end128, !dbg !5298

if.then127:                                       ; preds = %for.body115
  %75 = load %struct.rtx_def*, %struct.rtx_def** %part, align 8, !dbg !5299
  call void @note_stores(%struct.rtx_def* %75, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @no_equiv, i8* null), !dbg !5300
  br label %if.end128, !dbg !5300

if.end128:                                        ; preds = %if.then127, %for.body115
  br label %for.inc129, !dbg !5301

for.inc129:                                       ; preds = %if.end128
  %76 = load i32, i32* %i, align 4, !dbg !5302
  %dec = add nsw i32 %76, -1, !dbg !5302
  store i32 %dec, i32* %i, align 4, !dbg !5302
  br label %for.cond112, !dbg !5303, !llvm.loop !5304

for.end130:                                       ; preds = %for.cond112
  br label %if.end131, !dbg !5306

if.end131:                                        ; preds = %for.end130, %if.else
  br label %if.end132

if.end132:                                        ; preds = %if.end131
  %77 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5307
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !5307
  %fld134 = bitcast %union.u* %u133 to [1 x %union.rtunion_def]*, !dbg !5307
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i64 0, i64 0, !dbg !5307
  %rt_rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**, !dbg !5307
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx136, align 8, !dbg !5307
  store %struct.rtx_def* %78, %struct.rtx_def** %dest, align 8, !dbg !5308
  %79 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5309
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !5309
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !5309
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 1, !dbg !5309
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !5309
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx140, align 8, !dbg !5309
  store %struct.rtx_def* %80, %struct.rtx_def** %src, align 8, !dbg !5310
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5311
  %call141 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %81, i32 3, %struct.rtx_def* null), !dbg !5312
  store %struct.rtx_def* %call141, %struct.rtx_def** %note, align 8, !dbg !5313
  %82 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5314
  %tobool142 = icmp ne %struct.rtx_def* %82, null, !dbg !5314
  br i1 %tobool142, label %if.then143, label %if.end168, !dbg !5316

if.then143:                                       ; preds = %if.end132
  %83 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5317
  %84 = bitcast %struct.rtx_def* %83 to i32*, !dbg !5317
  %bf.load144 = load i32, i32* %84, align 8, !dbg !5317
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !5317
  %cmp146 = icmp eq i32 %bf.clear145, 37, !dbg !5317
  br i1 %cmp146, label %cond.false149, label %cond.true148, !dbg !5317

cond.true148:                                     ; preds = %if.then143
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i32 2390, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)), !dbg !5317
  br label %cond.end150, !dbg !5317

cond.false149:                                    ; preds = %if.then143
  br label %cond.end150, !dbg !5317

cond.end150:                                      ; preds = %cond.false149, %cond.true148
  %cond151 = phi i32 [ 0, %cond.true148 ], [ 0, %cond.false149 ], !dbg !5317
  %85 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5319
  %call152 = call i32 @rhs_regno(%struct.rtx_def* %85), !dbg !5319
  store i32 %call152, i32* %regno, align 4, !dbg !5320
  %86 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5321
  %87 = load i32, i32* %regno, align 4, !dbg !5322
  %idxprom153 = sext i32 %87 to i64, !dbg !5321
  %arrayidx154 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %86, i64 %idxprom153, !dbg !5321
  %is_arg_equivalence = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx154, i32 0, i32 4, !dbg !5323
  store i32 1, i32* %is_arg_equivalence, align 4, !dbg !5324
  %88 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5325
  %89 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5327
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !5327
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !5327
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 0, !dbg !5327
  %rt_rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**, !dbg !5327
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx158, align 8, !dbg !5327
  %call159 = call i32 @rtx_equal_p(%struct.rtx_def* %88, %struct.rtx_def* %90), !dbg !5328
  %tobool160 = icmp ne i32 %call159, 0, !dbg !5328
  br i1 %tobool160, label %if.then161, label %if.end167, !dbg !5329

if.then161:                                       ; preds = %cond.end150
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5330
  %92 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5330
  %93 = load i32, i32* %regno, align 4, !dbg !5330
  %idxprom162 = sext i32 %93 to i64, !dbg !5330
  %arrayidx163 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %92, i64 %idxprom162, !dbg !5330
  %94 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx163, align 8, !dbg !5330
  %call164 = call %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32 4, i32 0, %struct.rtx_def* %91, %struct.rtx_def* %94), !dbg !5330
  %95 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5331
  %96 = load i32, i32* %regno, align 4, !dbg !5332
  %idxprom165 = sext i32 %96 to i64, !dbg !5331
  %arrayidx166 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %95, i64 %idxprom165, !dbg !5331
  store %struct.rtx_def* %call164, %struct.rtx_def** %arrayidx166, align 8, !dbg !5333
  br label %if.end167, !dbg !5331

if.end167:                                        ; preds = %if.then161, %cond.end150
  br label %if.end168, !dbg !5334

if.end168:                                        ; preds = %if.end167, %if.end132
  %97 = load i32, i32* @optimize, align 4, !dbg !5335
  %tobool169 = icmp ne i32 %97, 0, !dbg !5335
  br i1 %tobool169, label %if.end171, label %if.then170, !dbg !5337

if.then170:                                       ; preds = %if.end168
  br label %for.inc450, !dbg !5338

if.end171:                                        ; preds = %if.end168
  %98 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5339
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !5339
  %bf.load172 = load i32, i32* %99, align 8, !dbg !5339
  %bf.clear173 = and i32 %bf.load172, 65535, !dbg !5339
  %cmp174 = icmp eq i32 %bf.clear173, 37, !dbg !5339
  br i1 %cmp174, label %lor.lhs.false176, label %if.then234, !dbg !5341

lor.lhs.false176:                                 ; preds = %if.end171
  %100 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5342
  %call177 = call i32 @rhs_regno(%struct.rtx_def* %100), !dbg !5342
  store i32 %call177, i32* %regno, align 4, !dbg !5343
  %cmp178 = icmp slt i32 %call177, 53, !dbg !5344
  br i1 %cmp178, label %if.then234, label %lor.lhs.false180, !dbg !5345

lor.lhs.false180:                                 ; preds = %lor.lhs.false176
  %101 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5346
  %102 = load i32, i32* %regno, align 4, !dbg !5347
  %idxprom181 = sext i32 %102 to i64, !dbg !5346
  %arrayidx182 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %101, i64 %idxprom181, !dbg !5346
  %init_insns = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx182, i32 0, i32 2, !dbg !5348
  %103 = load %struct.rtx_def*, %struct.rtx_def** %init_insns, align 8, !dbg !5348
  %104 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5349
  %cmp183 = icmp eq %struct.rtx_def* %103, %104, !dbg !5350
  br i1 %cmp183, label %if.then234, label %lor.lhs.false185, !dbg !5351

lor.lhs.false185:                                 ; preds = %lor.lhs.false180
  %105 = load i32, i32* %regno, align 4, !dbg !5352
  %call186 = call i32 @reg_preferred_class(i32 %105), !dbg !5352
  %cmp187 = icmp eq i32 %call186, 1, !dbg !5352
  br i1 %cmp187, label %land.lhs.true, label %lor.lhs.false189, !dbg !5352

lor.lhs.false189:                                 ; preds = %lor.lhs.false185
  %106 = load i32, i32* %regno, align 4, !dbg !5352
  %call190 = call i32 @reg_preferred_class(i32 %106), !dbg !5352
  %cmp191 = icmp eq i32 %call190, 2, !dbg !5352
  br i1 %cmp191, label %land.lhs.true, label %lor.lhs.false193, !dbg !5352

lor.lhs.false193:                                 ; preds = %lor.lhs.false189
  %107 = load i32, i32* %regno, align 4, !dbg !5352
  %call194 = call i32 @reg_preferred_class(i32 %107), !dbg !5352
  %cmp195 = icmp eq i32 %call194, 3, !dbg !5352
  br i1 %cmp195, label %land.lhs.true, label %lor.lhs.false197, !dbg !5352

lor.lhs.false197:                                 ; preds = %lor.lhs.false193
  %108 = load i32, i32* %regno, align 4, !dbg !5352
  %call198 = call i32 @reg_preferred_class(i32 %108), !dbg !5352
  %cmp199 = icmp eq i32 %call198, 4, !dbg !5352
  br i1 %cmp199, label %land.lhs.true, label %lor.lhs.false201, !dbg !5352

lor.lhs.false201:                                 ; preds = %lor.lhs.false197
  %109 = load i32, i32* %regno, align 4, !dbg !5352
  %call202 = call i32 @reg_preferred_class(i32 %109), !dbg !5352
  %cmp203 = icmp eq i32 %call202, 7, !dbg !5352
  br i1 %cmp203, label %land.lhs.true, label %lor.lhs.false205, !dbg !5352

lor.lhs.false205:                                 ; preds = %lor.lhs.false201
  %110 = load i32, i32* %regno, align 4, !dbg !5352
  %call206 = call i32 @reg_preferred_class(i32 %110), !dbg !5352
  %cmp207 = icmp eq i32 %call206, 5, !dbg !5352
  br i1 %cmp207, label %land.lhs.true, label %lor.lhs.false209, !dbg !5352

lor.lhs.false209:                                 ; preds = %lor.lhs.false205
  %111 = load i32, i32* %regno, align 4, !dbg !5352
  %call210 = call i32 @reg_preferred_class(i32 %111), !dbg !5352
  %cmp211 = icmp eq i32 %call210, 6, !dbg !5352
  br i1 %cmp211, label %land.lhs.true, label %lor.lhs.false213, !dbg !5352

lor.lhs.false213:                                 ; preds = %lor.lhs.false209
  %112 = load i32, i32* %regno, align 4, !dbg !5352
  %call214 = call i32 @reg_preferred_class(i32 %112), !dbg !5352
  %cmp215 = icmp eq i32 %call214, 17, !dbg !5352
  br i1 %cmp215, label %land.lhs.true, label %lor.lhs.false217, !dbg !5352

lor.lhs.false217:                                 ; preds = %lor.lhs.false213
  %113 = load i32, i32* %regno, align 4, !dbg !5352
  %call218 = call i32 @reg_preferred_class(i32 %113), !dbg !5352
  %cmp219 = icmp eq i32 %call218, 14, !dbg !5352
  br i1 %cmp219, label %land.lhs.true, label %lor.lhs.false221, !dbg !5352

lor.lhs.false221:                                 ; preds = %lor.lhs.false217
  %114 = load i32, i32* %regno, align 4, !dbg !5352
  %call222 = call i32 @reg_preferred_class(i32 %114), !dbg !5352
  %cmp223 = icmp eq i32 %call222, 15, !dbg !5352
  br i1 %cmp223, label %land.lhs.true, label %if.end235, !dbg !5353

land.lhs.true:                                    ; preds = %lor.lhs.false221, %lor.lhs.false217, %lor.lhs.false213, %lor.lhs.false209, %lor.lhs.false205, %lor.lhs.false201, %lor.lhs.false197, %lor.lhs.false193, %lor.lhs.false189, %lor.lhs.false185
  %115 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5354
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !5354
  %bf.load225 = load i32, i32* %116, align 8, !dbg !5354
  %bf.clear226 = and i32 %bf.load225, 65535, !dbg !5354
  %cmp227 = icmp eq i32 %bf.clear226, 43, !dbg !5354
  br i1 %cmp227, label %land.lhs.true229, label %if.end235, !dbg !5355

land.lhs.true229:                                 ; preds = %land.lhs.true
  %117 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5356
  %118 = load i32, i32* %regno, align 4, !dbg !5357
  %idxprom230 = sext i32 %118 to i64, !dbg !5356
  %arrayidx231 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %117, i64 %idxprom230, !dbg !5356
  %is_arg_equivalence232 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx231, i32 0, i32 4, !dbg !5358
  %119 = load i32, i32* %is_arg_equivalence232, align 4, !dbg !5358
  %tobool233 = icmp ne i32 %119, 0, !dbg !5356
  br i1 %tobool233, label %if.end235, label %if.then234, !dbg !5359

if.then234:                                       ; preds = %land.lhs.true229, %lor.lhs.false180, %lor.lhs.false176, %if.end171
  %120 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5360
  call void @note_stores(%struct.rtx_def* %120, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @no_equiv, i8* null), !dbg !5362
  br label %for.inc450, !dbg !5363

if.end235:                                        ; preds = %land.lhs.true229, %land.lhs.true, %lor.lhs.false221
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5364
  %call236 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %121, i32 4, %struct.rtx_def* null), !dbg !5365
  store %struct.rtx_def* %call236, %struct.rtx_def** %note, align 8, !dbg !5366
  %122 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5367
  %tobool237 = icmp ne %struct.rtx_def* %122, null, !dbg !5367
  br i1 %tobool237, label %if.end244, label %land.lhs.true238, !dbg !5369

land.lhs.true238:                                 ; preds = %if.end235
  %123 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5370
  %call239 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %123, i8 zeroext 0), !dbg !5371
  %tobool240 = icmp ne i8 %call239, 0, !dbg !5371
  br i1 %tobool240, label %if.end244, label %if.then241, !dbg !5372

if.then241:                                       ; preds = %land.lhs.true238
  %124 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5373
  %125 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5374
  %call242 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %125), !dbg !5375
  %call243 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %124, i32 4, %struct.rtx_def* %call242), !dbg !5376
  store %struct.rtx_def* %call243, %struct.rtx_def** %note, align 8, !dbg !5377
  br label %if.end244, !dbg !5378

if.end244:                                        ; preds = %if.then241, %land.lhs.true238, %if.end235
  %126 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5379
  %tobool245 = icmp ne %struct.rtx_def* %126, null, !dbg !5379
  br i1 %tobool245, label %land.lhs.true246, label %if.end256, !dbg !5381

land.lhs.true246:                                 ; preds = %if.end244
  %127 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5382
  %u247 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %127, i32 0, i32 1, !dbg !5382
  %fld248 = bitcast %union.u* %u247 to [1 x %union.rtunion_def]*, !dbg !5382
  %arrayidx249 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld248, i64 0, i64 0, !dbg !5382
  %rt_rtx250 = bitcast %union.rtunion_def* %arrayidx249 to %struct.rtx_def**, !dbg !5382
  %128 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx250, align 8, !dbg !5382
  %129 = bitcast %struct.rtx_def* %128 to i32*, !dbg !5382
  %bf.load251 = load i32, i32* %129, align 8, !dbg !5382
  %bf.clear252 = and i32 %bf.load251, 65535, !dbg !5382
  %cmp253 = icmp eq i32 %bf.clear252, 3, !dbg !5383
  br i1 %cmp253, label %if.then255, label %if.end256, !dbg !5384

if.then255:                                       ; preds = %land.lhs.true246
  store %struct.rtx_def* null, %struct.rtx_def** %note, align 8, !dbg !5385
  br label %if.end256, !dbg !5386

if.end256:                                        ; preds = %if.then255, %land.lhs.true246, %if.end244
  %130 = load %struct.df*, %struct.df** @df, align 8, !dbg !5387
  %def_regs = getelementptr inbounds %struct.df, %struct.df* %130, i32 0, i32 5, !dbg !5387
  %131 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs, align 8, !dbg !5387
  %132 = load i32, i32* %regno, align 4, !dbg !5387
  %idxprom257 = sext i32 %132 to i64, !dbg !5387
  %arrayidx258 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %131, i64 %idxprom257, !dbg !5387
  %133 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx258, align 8, !dbg !5387
  %n_refs = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %133, i32 0, i32 1, !dbg !5387
  %134 = load i32, i32* %n_refs, align 8, !dbg !5387
  %cmp259 = icmp ne i32 %134, 1, !dbg !5389
  br i1 %cmp259, label %land.lhs.true261, label %if.end286, !dbg !5390

land.lhs.true261:                                 ; preds = %if.end256
  %135 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5391
  %tobool262 = icmp ne %struct.rtx_def* %135, null, !dbg !5391
  br i1 %tobool262, label %lor.lhs.false263, label %if.then285, !dbg !5392

lor.lhs.false263:                                 ; preds = %land.lhs.true261
  %136 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5393
  %u264 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !5393
  %fld265 = bitcast %union.u* %u264 to [1 x %union.rtunion_def]*, !dbg !5393
  %arrayidx266 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld265, i64 0, i64 0, !dbg !5393
  %rt_rtx267 = bitcast %union.rtunion_def* %arrayidx266 to %struct.rtx_def**, !dbg !5393
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx267, align 8, !dbg !5393
  %call268 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %137, i8 zeroext 0), !dbg !5394
  %conv269 = zext i8 %call268 to i32, !dbg !5394
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !5394
  br i1 %tobool270, label %if.then285, label %lor.lhs.false271, !dbg !5395

lor.lhs.false271:                                 ; preds = %lor.lhs.false263
  %138 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5396
  %139 = load i32, i32* %regno, align 4, !dbg !5397
  %idxprom272 = sext i32 %139 to i64, !dbg !5396
  %arrayidx273 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %138, i64 %idxprom272, !dbg !5396
  %replacement = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx273, i32 0, i32 0, !dbg !5398
  %140 = load %struct.rtx_def*, %struct.rtx_def** %replacement, align 8, !dbg !5398
  %tobool274 = icmp ne %struct.rtx_def* %140, null, !dbg !5396
  br i1 %tobool274, label %land.lhs.true275, label %if.end286, !dbg !5399

land.lhs.true275:                                 ; preds = %lor.lhs.false271
  %141 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5400
  %u276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !5400
  %fld277 = bitcast %union.u* %u276 to [1 x %union.rtunion_def]*, !dbg !5400
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i64 0, i64 0, !dbg !5400
  %rt_rtx279 = bitcast %union.rtunion_def* %arrayidx278 to %struct.rtx_def**, !dbg !5400
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx279, align 8, !dbg !5400
  %143 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5401
  %144 = load i32, i32* %regno, align 4, !dbg !5402
  %idxprom280 = sext i32 %144 to i64, !dbg !5401
  %arrayidx281 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %143, i64 %idxprom280, !dbg !5401
  %replacement282 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx281, i32 0, i32 0, !dbg !5403
  %145 = load %struct.rtx_def*, %struct.rtx_def** %replacement282, align 8, !dbg !5403
  %call283 = call i32 @rtx_equal_p(%struct.rtx_def* %142, %struct.rtx_def* %145), !dbg !5404
  %tobool284 = icmp ne i32 %call283, 0, !dbg !5404
  br i1 %tobool284, label %if.end286, label %if.then285, !dbg !5405

if.then285:                                       ; preds = %land.lhs.true275, %lor.lhs.false263, %land.lhs.true261
  %146 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5406
  %147 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5408
  call void @no_equiv(%struct.rtx_def* %146, %struct.rtx_def* %147, i8* null), !dbg !5409
  br label %for.inc450, !dbg !5410

if.end286:                                        ; preds = %land.lhs.true275, %lor.lhs.false271, %if.end256
  %148 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5411
  %149 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5411
  %150 = load i32, i32* %regno, align 4, !dbg !5411
  %idxprom287 = sext i32 %150 to i64, !dbg !5411
  %arrayidx288 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %149, i64 %idxprom287, !dbg !5411
  %init_insns289 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx288, i32 0, i32 2, !dbg !5411
  %151 = load %struct.rtx_def*, %struct.rtx_def** %init_insns289, align 8, !dbg !5411
  %call290 = call %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32 4, i32 0, %struct.rtx_def* %148, %struct.rtx_def* %151), !dbg !5411
  %152 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5412
  %153 = load i32, i32* %regno, align 4, !dbg !5413
  %idxprom291 = sext i32 %153 to i64, !dbg !5412
  %arrayidx292 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %152, i64 %idxprom291, !dbg !5412
  %init_insns293 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx292, i32 0, i32 2, !dbg !5414
  store %struct.rtx_def* %call290, %struct.rtx_def** %init_insns293, align 8, !dbg !5415
  %154 = load %struct.df*, %struct.df** @df, align 8, !dbg !5416
  %def_regs294 = getelementptr inbounds %struct.df, %struct.df* %154, i32 0, i32 5, !dbg !5416
  %155 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs294, align 8, !dbg !5416
  %156 = load i32, i32* %regno, align 4, !dbg !5416
  %idxprom295 = sext i32 %156 to i64, !dbg !5416
  %arrayidx296 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %155, i64 %idxprom295, !dbg !5416
  %157 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx296, align 8, !dbg !5416
  %n_refs297 = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %157, i32 0, i32 1, !dbg !5416
  %158 = load i32, i32* %n_refs297, align 8, !dbg !5416
  %cmp298 = icmp eq i32 %158, 1, !dbg !5418
  br i1 %cmp298, label %land.lhs.true300, label %if.end315, !dbg !5419

land.lhs.true300:                                 ; preds = %if.end286
  %159 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5420
  %tobool301 = icmp ne %struct.rtx_def* %159, null, !dbg !5420
  br i1 %tobool301, label %land.lhs.true302, label %if.end315, !dbg !5421

land.lhs.true302:                                 ; preds = %land.lhs.true300
  %160 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5422
  %u303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1, !dbg !5422
  %fld304 = bitcast %union.u* %u303 to [1 x %union.rtunion_def]*, !dbg !5422
  %arrayidx305 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld304, i64 0, i64 0, !dbg !5422
  %rt_rtx306 = bitcast %union.rtunion_def* %arrayidx305 to %struct.rtx_def**, !dbg !5422
  %161 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx306, align 8, !dbg !5422
  %call307 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %161, i8 zeroext 0), !dbg !5423
  %tobool308 = icmp ne i8 %call307, 0, !dbg !5423
  br i1 %tobool308, label %if.end315, label %if.then309, !dbg !5424

if.then309:                                       ; preds = %land.lhs.true302
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note_value, metadata !5425, metadata !DIExpression()), !dbg !5427
  %162 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5428
  %u310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1, !dbg !5428
  %fld311 = bitcast %union.u* %u310 to [1 x %union.rtunion_def]*, !dbg !5428
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i64 0, i64 0, !dbg !5428
  %rt_rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**, !dbg !5428
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx313, align 8, !dbg !5428
  store %struct.rtx_def* %163, %struct.rtx_def** %note_value, align 8, !dbg !5427
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5429
  %165 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5430
  call void @remove_note(%struct.rtx_def* %164, %struct.rtx_def* %165), !dbg !5431
  %166 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5432
  %167 = load %struct.rtx_def*, %struct.rtx_def** %note_value, align 8, !dbg !5433
  %call314 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %166, i32 3, %struct.rtx_def* %167), !dbg !5434
  br label %if.end315, !dbg !5435

if.end315:                                        ; preds = %if.then309, %land.lhs.true302, %land.lhs.true300, %if.end286
  %168 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5436
  %call316 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %168, i32 3, %struct.rtx_def* null), !dbg !5437
  store %struct.rtx_def* %call316, %struct.rtx_def** %note, align 8, !dbg !5438
  %169 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5439
  %cmp317 = icmp eq %struct.rtx_def* %169, null, !dbg !5441
  br i1 %cmp317, label %land.lhs.true319, label %if.end347, !dbg !5442

land.lhs.true319:                                 ; preds = %if.end315
  %170 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5443
  %171 = load i32, i32* %regno, align 4, !dbg !5443
  %idxprom320 = sext i32 %171 to i64, !dbg !5443
  %arrayidx321 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %170, i64 %idxprom320, !dbg !5443
  %basic_block = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx321, i32 0, i32 6, !dbg !5443
  %172 = load i32, i32* %basic_block, align 4, !dbg !5443
  %cmp322 = icmp sge i32 %172, 2, !dbg !5444
  br i1 %cmp322, label %land.lhs.true324, label %if.end347, !dbg !5445

land.lhs.true324:                                 ; preds = %land.lhs.true319
  %173 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5446
  %u325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %173, i32 0, i32 1, !dbg !5446
  %fld326 = bitcast %union.u* %u325 to [1 x %union.rtunion_def]*, !dbg !5446
  %arrayidx327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld326, i64 0, i64 1, !dbg !5446
  %rt_rtx328 = bitcast %union.rtunion_def* %arrayidx327 to %struct.rtx_def**, !dbg !5446
  %174 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx328, align 8, !dbg !5446
  %175 = bitcast %struct.rtx_def* %174 to i32*, !dbg !5446
  %bf.load329 = load i32, i32* %175, align 8, !dbg !5446
  %bf.clear330 = and i32 %bf.load329, 65535, !dbg !5446
  %cmp331 = icmp eq i32 %bf.clear330, 43, !dbg !5446
  br i1 %cmp331, label %land.lhs.true333, label %if.end347, !dbg !5447

land.lhs.true333:                                 ; preds = %land.lhs.true324
  %176 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5448
  %177 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5449
  %178 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5450
  %u334 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !5450
  %fld335 = bitcast %union.u* %u334 to [1 x %union.rtunion_def]*, !dbg !5450
  %arrayidx336 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld335, i64 0, i64 1, !dbg !5450
  %rt_rtx337 = bitcast %union.rtunion_def* %arrayidx336 to %struct.rtx_def**, !dbg !5450
  %179 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx337, align 8, !dbg !5450
  %call338 = call i32 @validate_equiv_mem(%struct.rtx_def* %176, %struct.rtx_def* %177, %struct.rtx_def* %179), !dbg !5451
  %tobool339 = icmp ne i32 %call338, 0, !dbg !5451
  br i1 %tobool339, label %if.then340, label %if.end347, !dbg !5452

if.then340:                                       ; preds = %land.lhs.true333
  %180 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5453
  %181 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5454
  %u341 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !5454
  %fld342 = bitcast %union.u* %u341 to [1 x %union.rtunion_def]*, !dbg !5454
  %arrayidx343 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld342, i64 0, i64 1, !dbg !5454
  %rt_rtx344 = bitcast %union.rtunion_def* %arrayidx343 to %struct.rtx_def**, !dbg !5454
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx344, align 8, !dbg !5454
  %call345 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %182), !dbg !5455
  %call346 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %180, i32 3, %struct.rtx_def* %call345), !dbg !5456
  store %struct.rtx_def* %call346, %struct.rtx_def** %note, align 8, !dbg !5457
  br label %if.end347, !dbg !5458

if.end347:                                        ; preds = %if.then340, %land.lhs.true333, %land.lhs.true324, %land.lhs.true319, %if.end315
  %183 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5459
  %tobool348 = icmp ne %struct.rtx_def* %183, null, !dbg !5459
  br i1 %tobool348, label %if.then349, label %if.end449, !dbg !5461

if.then349:                                       ; preds = %if.end347
  call void @llvm.dbg.declare(metadata i32* %regno350, metadata !5462, metadata !DIExpression()), !dbg !5464
  %184 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5465
  %call351 = call i32 @rhs_regno(%struct.rtx_def* %184), !dbg !5465
  store i32 %call351, i32* %regno350, align 4, !dbg !5464
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5466, metadata !DIExpression()), !dbg !5467
  %185 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5468
  %u352 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1, !dbg !5468
  %fld353 = bitcast %union.u* %u352 to [1 x %union.rtunion_def]*, !dbg !5468
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i64 0, i64 0, !dbg !5468
  %rt_rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**, !dbg !5468
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx355, align 8, !dbg !5468
  store %struct.rtx_def* %186, %struct.rtx_def** %x, align 8, !dbg !5467
  %187 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5469
  %188 = load i32, i32* %regno350, align 4, !dbg !5471
  %idxprom356 = sext i32 %188 to i64, !dbg !5469
  %arrayidx357 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %187, i64 %idxprom356, !dbg !5469
  %is_arg_equivalence358 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx357, i32 0, i32 4, !dbg !5472
  %189 = load i32, i32* %is_arg_equivalence358, align 4, !dbg !5472
  %tobool359 = icmp ne i32 %189, 0, !dbg !5469
  br i1 %tobool359, label %if.end366, label %if.then360, !dbg !5473

if.then360:                                       ; preds = %if.then349
  %190 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5474
  %191 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5474
  %192 = load i32, i32* %regno350, align 4, !dbg !5474
  %idxprom361 = sext i32 %192 to i64, !dbg !5474
  %arrayidx362 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %191, i64 %idxprom361, !dbg !5474
  %193 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx362, align 8, !dbg !5474
  %call363 = call %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32 4, i32 0, %struct.rtx_def* %190, %struct.rtx_def* %193), !dbg !5474
  %194 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5475
  %195 = load i32, i32* %regno350, align 4, !dbg !5476
  %idxprom364 = sext i32 %195 to i64, !dbg !5475
  %arrayidx365 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %194, i64 %idxprom364, !dbg !5475
  store %struct.rtx_def* %call363, %struct.rtx_def** %arrayidx365, align 8, !dbg !5477
  br label %if.end366, !dbg !5475

if.end366:                                        ; preds = %if.then360, %if.then349
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5478
  %197 = bitcast %struct.rtx_def* %196 to i32*, !dbg !5478
  %bf.load367 = load i32, i32* %197, align 8, !dbg !5478
  %bf.clear368 = and i32 %bf.load367, 65535, !dbg !5478
  %cmp369 = icmp eq i32 %bf.clear368, 44, !dbg !5480
  br i1 %cmp369, label %if.then398, label %lor.lhs.false371, !dbg !5481

lor.lhs.false371:                                 ; preds = %if.end366
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5482
  %199 = bitcast %struct.rtx_def* %198 to i32*, !dbg !5482
  %bf.load372 = load i32, i32* %199, align 8, !dbg !5482
  %bf.clear373 = and i32 %bf.load372, 65535, !dbg !5482
  %cmp374 = icmp eq i32 %bf.clear373, 35, !dbg !5483
  br i1 %cmp374, label %land.lhs.true376, label %if.end399, !dbg !5484

land.lhs.true376:                                 ; preds = %lor.lhs.false371
  %200 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5485
  %u377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %200, i32 0, i32 1, !dbg !5485
  %fld378 = bitcast %union.u* %u377 to [1 x %union.rtunion_def]*, !dbg !5485
  %arrayidx379 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld378, i64 0, i64 0, !dbg !5485
  %rt_rtx380 = bitcast %union.rtunion_def* %arrayidx379 to %struct.rtx_def**, !dbg !5485
  %201 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx380, align 8, !dbg !5485
  %202 = bitcast %struct.rtx_def* %201 to i32*, !dbg !5485
  %bf.load381 = load i32, i32* %202, align 8, !dbg !5485
  %bf.clear382 = and i32 %bf.load381, 65535, !dbg !5485
  %cmp383 = icmp eq i32 %bf.clear382, 49, !dbg !5486
  br i1 %cmp383, label %land.lhs.true385, label %if.end399, !dbg !5487

land.lhs.true385:                                 ; preds = %land.lhs.true376
  %203 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5488
  %u386 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1, !dbg !5488
  %fld387 = bitcast %union.u* %u386 to [1 x %union.rtunion_def]*, !dbg !5488
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i64 0, i64 0, !dbg !5488
  %rt_rtx389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.rtx_def**, !dbg !5488
  %204 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx389, align 8, !dbg !5488
  %u390 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1, !dbg !5488
  %fld391 = bitcast %union.u* %u390 to [1 x %union.rtunion_def]*, !dbg !5488
  %arrayidx392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld391, i64 0, i64 0, !dbg !5488
  %rt_rtx393 = bitcast %union.rtunion_def* %arrayidx392 to %struct.rtx_def**, !dbg !5488
  %205 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx393, align 8, !dbg !5488
  %206 = bitcast %struct.rtx_def* %205 to i32*, !dbg !5488
  %bf.load394 = load i32, i32* %206, align 8, !dbg !5488
  %bf.clear395 = and i32 %bf.load394, 65535, !dbg !5488
  %cmp396 = icmp eq i32 %bf.clear395, 44, !dbg !5489
  br i1 %cmp396, label %if.then398, label %if.end399, !dbg !5490

if.then398:                                       ; preds = %land.lhs.true385, %if.end366
  store i32 1, i32* @recorded_label_ref, align 4, !dbg !5491
  br label %if.end399, !dbg !5492

if.end399:                                        ; preds = %if.then398, %land.lhs.true385, %land.lhs.true376, %lor.lhs.false371
  %207 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5493
  %208 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5494
  %209 = load i32, i32* %regno350, align 4, !dbg !5495
  %idxprom400 = sext i32 %209 to i64, !dbg !5494
  %arrayidx401 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %208, i64 %idxprom400, !dbg !5494
  %replacement402 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx401, i32 0, i32 0, !dbg !5496
  store %struct.rtx_def* %207, %struct.rtx_def** %replacement402, align 8, !dbg !5497
  %210 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5498
  %u403 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1, !dbg !5498
  %fld404 = bitcast %union.u* %u403 to [1 x %union.rtunion_def]*, !dbg !5498
  %arrayidx405 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld404, i64 0, i64 1, !dbg !5498
  %rt_rtx406 = bitcast %union.rtunion_def* %arrayidx405 to %struct.rtx_def**, !dbg !5498
  %211 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5499
  %212 = load i32, i32* %regno350, align 4, !dbg !5500
  %idxprom407 = sext i32 %212 to i64, !dbg !5499
  %arrayidx408 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %211, i64 %idxprom407, !dbg !5499
  %src_p = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx408, i32 0, i32 1, !dbg !5501
  store %struct.rtx_def** %rt_rtx406, %struct.rtx_def*** %src_p, align 8, !dbg !5502
  %213 = load i32, i32* %loop_depth, align 4, !dbg !5503
  %214 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5504
  %215 = load i32, i32* %regno350, align 4, !dbg !5505
  %idxprom409 = sext i32 %215 to i64, !dbg !5504
  %arrayidx410 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %214, i64 %idxprom409, !dbg !5504
  %loop_depth411 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx410, i32 0, i32 3, !dbg !5506
  store i32 %213, i32* %loop_depth411, align 8, !dbg !5507
  %216 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5508
  %217 = load i32, i32* %regno350, align 4, !dbg !5508
  %idxprom412 = sext i32 %217 to i64, !dbg !5508
  %arrayidx413 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %216, i64 %idxprom412, !dbg !5508
  %live_length = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx413, i32 0, i32 2, !dbg !5508
  %218 = load i32, i32* %live_length, align 4, !dbg !5508
  %cmp414 = icmp sge i32 %218, 0, !dbg !5510
  br i1 %cmp414, label %land.lhs.true416, label %if.end448, !dbg !5511

land.lhs.true416:                                 ; preds = %if.end399
  %219 = load i32, i32* @optimize, align 4, !dbg !5512
  %tobool417 = icmp ne i32 %219, 0, !dbg !5512
  br i1 %tobool417, label %if.then418, label %if.end448, !dbg !5513

if.then418:                                       ; preds = %land.lhs.true416
  %220 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5514
  %221 = load i32, i32* %regno350, align 4, !dbg !5514
  %idxprom419 = sext i32 %221 to i64, !dbg !5514
  %arrayidx420 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %220, i64 %idxprom419, !dbg !5514
  %live_length421 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx420, i32 0, i32 2, !dbg !5514
  %222 = load i32, i32* %live_length421, align 4, !dbg !5516
  %mul422 = mul nsw i32 %222, 2, !dbg !5516
  store i32 %mul422, i32* %live_length421, align 4, !dbg !5516
  %223 = load i32, i32* %regno350, align 4, !dbg !5517
  %call423 = call i32 @REG_N_REFS(i32 %223), !dbg !5519
  %cmp424 = icmp eq i32 %call423, 2, !dbg !5520
  br i1 %cmp424, label %land.lhs.true426, label %if.end447, !dbg !5521

land.lhs.true426:                                 ; preds = %if.then418
  %224 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5522
  %225 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5523
  %call427 = call i32 @rtx_equal_p(%struct.rtx_def* %224, %struct.rtx_def* %225), !dbg !5524
  %tobool428 = icmp ne i32 %call427, 0, !dbg !5524
  br i1 %tobool428, label %land.lhs.true432, label %lor.lhs.false429, !dbg !5525

lor.lhs.false429:                                 ; preds = %land.lhs.true426
  %226 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5526
  %call430 = call i32 @equiv_init_varies_p(%struct.rtx_def* %226), !dbg !5527
  %tobool431 = icmp ne i32 %call430, 0, !dbg !5527
  br i1 %tobool431, label %if.end447, label %land.lhs.true432, !dbg !5528

land.lhs.true432:                                 ; preds = %lor.lhs.false429, %land.lhs.true426
  %227 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5529
  %228 = bitcast %struct.rtx_def* %227 to i32*, !dbg !5529
  %bf.load433 = load i32, i32* %228, align 8, !dbg !5529
  %bf.clear434 = and i32 %bf.load433, 65535, !dbg !5529
  %cmp435 = icmp eq i32 %bf.clear434, 8, !dbg !5529
  br i1 %cmp435, label %land.lhs.true437, label %if.end447, !dbg !5530

land.lhs.true437:                                 ; preds = %land.lhs.true432
  %229 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5531
  %u438 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1, !dbg !5531
  %fld439 = bitcast %union.u* %u438 to [1 x %union.rtunion_def]*, !dbg !5531
  %arrayidx440 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld439, i64 0, i64 5, !dbg !5531
  %rt_rtx441 = bitcast %union.rtunion_def* %arrayidx440 to %struct.rtx_def**, !dbg !5531
  %230 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx441, align 8, !dbg !5531
  %231 = load i32, i32* %regno350, align 4, !dbg !5532
  %call442 = call i32 @equiv_init_movable_p(%struct.rtx_def* %230, i32 %231), !dbg !5533
  %tobool443 = icmp ne i32 %call442, 0, !dbg !5533
  br i1 %tobool443, label %if.then444, label %if.end447, !dbg !5534

if.then444:                                       ; preds = %land.lhs.true437
  %232 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5535
  %233 = load i32, i32* %regno350, align 4, !dbg !5536
  %idxprom445 = sext i32 %233 to i64, !dbg !5535
  %arrayidx446 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %232, i64 %idxprom445, !dbg !5535
  %replace = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx446, i32 0, i32 5, !dbg !5537
  store i8 1, i8* %replace, align 8, !dbg !5538
  br label %if.end447, !dbg !5535

if.end447:                                        ; preds = %if.then444, %land.lhs.true437, %land.lhs.true432, %lor.lhs.false429, %if.then418
  br label %if.end448, !dbg !5539

if.end448:                                        ; preds = %if.end447, %land.lhs.true416, %if.end399
  br label %if.end449, !dbg !5540

if.end449:                                        ; preds = %if.end448, %if.end347
  br label %for.inc450, !dbg !5541

for.inc450:                                       ; preds = %if.end449, %if.then285, %if.then234, %if.then170, %if.then91, %if.then
  %234 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5542
  %u451 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1, !dbg !5542
  %fld452 = bitcast %union.u* %u451 to [1 x %union.rtunion_def]*, !dbg !5542
  %arrayidx453 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld452, i64 0, i64 2, !dbg !5542
  %rt_rtx454 = bitcast %union.rtunion_def* %arrayidx453 to %struct.rtx_def**, !dbg !5542
  %235 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx454, align 8, !dbg !5542
  store %struct.rtx_def* %235, %struct.rtx_def** %insn, align 8, !dbg !5543
  br label %for.cond7, !dbg !5544, !llvm.loop !5545

for.end455:                                       ; preds = %for.cond7
  br label %for.inc456, !dbg !5547

for.inc456:                                       ; preds = %for.end455
  %236 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5214
  %next_bb457 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %236, i32 0, i32 6, !dbg !5214
  %237 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb457, align 8, !dbg !5214
  store %struct.basic_block_def* %237, %struct.basic_block_def** %bb, align 8, !dbg !5214
  br label %for.cond, !dbg !5214, !llvm.loop !5548

for.end458:                                       ; preds = %for.cond
  %238 = load i32, i32* @optimize, align 4, !dbg !5550
  %tobool459 = icmp ne i32 %238, 0, !dbg !5550
  br i1 %tobool459, label %if.end461, label %if.then460, !dbg !5552

if.then460:                                       ; preds = %for.end458
  br label %out995, !dbg !5553

if.end461:                                        ; preds = %for.end458
  %call462 = call %struct.rtx_def* @get_insns(), !dbg !5554
  store %struct.rtx_def* %call462, %struct.rtx_def** %insn, align 8, !dbg !5556
  br label %for.cond463, !dbg !5557

for.cond463:                                      ; preds = %for.inc624, %if.end461
  %239 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5558
  %tobool464 = icmp ne %struct.rtx_def* %239, null, !dbg !5560
  br i1 %tobool464, label %for.body465, label %for.end629, !dbg !5560

for.body465:                                      ; preds = %for.cond463
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set466, metadata !5561, metadata !DIExpression()), !dbg !5563
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src467, metadata !5564, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest468, metadata !5566, metadata !DIExpression()), !dbg !5567
  call void @llvm.dbg.declare(metadata i32* %regno469, metadata !5568, metadata !DIExpression()), !dbg !5569
  %240 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5570
  %241 = bitcast %struct.rtx_def* %240 to i32*, !dbg !5570
  %bf.load470 = load i32, i32* %241, align 8, !dbg !5570
  %bf.clear471 = and i32 %bf.load470, 65535, !dbg !5570
  %cmp472 = icmp eq i32 %bf.clear471, 8, !dbg !5570
  br i1 %cmp472, label %if.end490, label %lor.lhs.false474, !dbg !5570

lor.lhs.false474:                                 ; preds = %for.body465
  %242 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5570
  %243 = bitcast %struct.rtx_def* %242 to i32*, !dbg !5570
  %bf.load475 = load i32, i32* %243, align 8, !dbg !5570
  %bf.clear476 = and i32 %bf.load475, 65535, !dbg !5570
  %cmp477 = icmp eq i32 %bf.clear476, 7, !dbg !5570
  br i1 %cmp477, label %if.end490, label %lor.lhs.false479, !dbg !5570

lor.lhs.false479:                                 ; preds = %lor.lhs.false474
  %244 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5570
  %245 = bitcast %struct.rtx_def* %244 to i32*, !dbg !5570
  %bf.load480 = load i32, i32* %245, align 8, !dbg !5570
  %bf.clear481 = and i32 %bf.load480, 65535, !dbg !5570
  %cmp482 = icmp eq i32 %bf.clear481, 9, !dbg !5570
  br i1 %cmp482, label %if.end490, label %lor.lhs.false484, !dbg !5570

lor.lhs.false484:                                 ; preds = %lor.lhs.false479
  %246 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5570
  %247 = bitcast %struct.rtx_def* %246 to i32*, !dbg !5570
  %bf.load485 = load i32, i32* %247, align 8, !dbg !5570
  %bf.clear486 = and i32 %bf.load485, 65535, !dbg !5570
  %cmp487 = icmp eq i32 %bf.clear486, 10, !dbg !5570
  br i1 %cmp487, label %if.end490, label %if.then489, !dbg !5572

if.then489:                                       ; preds = %lor.lhs.false484
  br label %for.inc624, !dbg !5573

if.end490:                                        ; preds = %lor.lhs.false484, %lor.lhs.false479, %lor.lhs.false474, %for.body465
  %248 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %249 = bitcast %struct.rtx_def* %248 to i32*, !dbg !5574
  %bf.load491 = load i32, i32* %249, align 8, !dbg !5574
  %bf.clear492 = and i32 %bf.load491, 65535, !dbg !5574
  %cmp493 = icmp eq i32 %bf.clear492, 8, !dbg !5574
  br i1 %cmp493, label %cond.true510, label %lor.lhs.false495, !dbg !5574

lor.lhs.false495:                                 ; preds = %if.end490
  %250 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %251 = bitcast %struct.rtx_def* %250 to i32*, !dbg !5574
  %bf.load496 = load i32, i32* %251, align 8, !dbg !5574
  %bf.clear497 = and i32 %bf.load496, 65535, !dbg !5574
  %cmp498 = icmp eq i32 %bf.clear497, 7, !dbg !5574
  br i1 %cmp498, label %cond.true510, label %lor.lhs.false500, !dbg !5574

lor.lhs.false500:                                 ; preds = %lor.lhs.false495
  %252 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %253 = bitcast %struct.rtx_def* %252 to i32*, !dbg !5574
  %bf.load501 = load i32, i32* %253, align 8, !dbg !5574
  %bf.clear502 = and i32 %bf.load501, 65535, !dbg !5574
  %cmp503 = icmp eq i32 %bf.clear502, 9, !dbg !5574
  br i1 %cmp503, label %cond.true510, label %lor.lhs.false505, !dbg !5574

lor.lhs.false505:                                 ; preds = %lor.lhs.false500
  %254 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %255 = bitcast %struct.rtx_def* %254 to i32*, !dbg !5574
  %bf.load506 = load i32, i32* %255, align 8, !dbg !5574
  %bf.clear507 = and i32 %bf.load506, 65535, !dbg !5574
  %cmp508 = icmp eq i32 %bf.clear507, 10, !dbg !5574
  br i1 %cmp508, label %cond.true510, label %cond.false532, !dbg !5574

cond.true510:                                     ; preds = %lor.lhs.false505, %lor.lhs.false500, %lor.lhs.false495, %if.end490
  %256 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %u511 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %256, i32 0, i32 1, !dbg !5574
  %fld512 = bitcast %union.u* %u511 to [1 x %union.rtunion_def]*, !dbg !5574
  %arrayidx513 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld512, i64 0, i64 5, !dbg !5574
  %rt_rtx514 = bitcast %union.rtunion_def* %arrayidx513 to %struct.rtx_def**, !dbg !5574
  %257 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx514, align 8, !dbg !5574
  %258 = bitcast %struct.rtx_def* %257 to i32*, !dbg !5574
  %bf.load515 = load i32, i32* %258, align 8, !dbg !5574
  %bf.clear516 = and i32 %bf.load515, 65535, !dbg !5574
  %cmp517 = icmp eq i32 %bf.clear516, 23, !dbg !5574
  br i1 %cmp517, label %cond.true519, label %cond.false524, !dbg !5574

cond.true519:                                     ; preds = %cond.true510
  %259 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %u520 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %259, i32 0, i32 1, !dbg !5574
  %fld521 = bitcast %union.u* %u520 to [1 x %union.rtunion_def]*, !dbg !5574
  %arrayidx522 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld521, i64 0, i64 5, !dbg !5574
  %rt_rtx523 = bitcast %union.rtunion_def* %arrayidx522 to %struct.rtx_def**, !dbg !5574
  %260 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx523, align 8, !dbg !5574
  br label %cond.end530, !dbg !5574

cond.false524:                                    ; preds = %cond.true510
  %261 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %262 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5574
  %u525 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %262, i32 0, i32 1, !dbg !5574
  %fld526 = bitcast %union.u* %u525 to [1 x %union.rtunion_def]*, !dbg !5574
  %arrayidx527 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld526, i64 0, i64 5, !dbg !5574
  %rt_rtx528 = bitcast %union.rtunion_def* %arrayidx527 to %struct.rtx_def**, !dbg !5574
  %263 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx528, align 8, !dbg !5574
  %call529 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %261, %struct.rtx_def* %263), !dbg !5574
  br label %cond.end530, !dbg !5574

cond.end530:                                      ; preds = %cond.false524, %cond.true519
  %cond531 = phi %struct.rtx_def* [ %260, %cond.true519 ], [ %call529, %cond.false524 ], !dbg !5574
  br label %cond.end533, !dbg !5574

cond.false532:                                    ; preds = %lor.lhs.false505
  br label %cond.end533, !dbg !5574

cond.end533:                                      ; preds = %cond.false532, %cond.end530
  %cond534 = phi %struct.rtx_def* [ %cond531, %cond.end530 ], [ null, %cond.false532 ], !dbg !5574
  store %struct.rtx_def* %cond534, %struct.rtx_def** %set466, align 8, !dbg !5575
  %264 = load %struct.rtx_def*, %struct.rtx_def** %set466, align 8, !dbg !5576
  %tobool535 = icmp ne %struct.rtx_def* %264, null, !dbg !5576
  br i1 %tobool535, label %if.end537, label %if.then536, !dbg !5578

if.then536:                                       ; preds = %cond.end533
  br label %for.inc624, !dbg !5579

if.end537:                                        ; preds = %cond.end533
  %265 = load %struct.rtx_def*, %struct.rtx_def** %set466, align 8, !dbg !5580
  %u538 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %265, i32 0, i32 1, !dbg !5580
  %fld539 = bitcast %union.u* %u538 to [1 x %union.rtunion_def]*, !dbg !5580
  %arrayidx540 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld539, i64 0, i64 0, !dbg !5580
  %rt_rtx541 = bitcast %union.rtunion_def* %arrayidx540 to %struct.rtx_def**, !dbg !5580
  %266 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx541, align 8, !dbg !5580
  store %struct.rtx_def* %266, %struct.rtx_def** %dest468, align 8, !dbg !5581
  %267 = load %struct.rtx_def*, %struct.rtx_def** %set466, align 8, !dbg !5582
  %u542 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1, !dbg !5582
  %fld543 = bitcast %union.u* %u542 to [1 x %union.rtunion_def]*, !dbg !5582
  %arrayidx544 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld543, i64 0, i64 1, !dbg !5582
  %rt_rtx545 = bitcast %union.rtunion_def* %arrayidx544 to %struct.rtx_def**, !dbg !5582
  %268 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx545, align 8, !dbg !5582
  store %struct.rtx_def* %268, %struct.rtx_def** %src467, align 8, !dbg !5583
  %269 = load %struct.rtx_def*, %struct.rtx_def** %dest468, align 8, !dbg !5584
  %270 = bitcast %struct.rtx_def* %269 to i32*, !dbg !5584
  %bf.load546 = load i32, i32* %270, align 8, !dbg !5584
  %bf.clear547 = and i32 %bf.load546, 65535, !dbg !5584
  %cmp548 = icmp eq i32 %bf.clear547, 43, !dbg !5584
  br i1 %cmp548, label %land.lhs.true550, label %if.end623, !dbg !5586

land.lhs.true550:                                 ; preds = %if.end537
  %271 = load %struct.rtx_def*, %struct.rtx_def** %src467, align 8, !dbg !5587
  %272 = bitcast %struct.rtx_def* %271 to i32*, !dbg !5587
  %bf.load551 = load i32, i32* %272, align 8, !dbg !5587
  %bf.clear552 = and i32 %bf.load551, 65535, !dbg !5587
  %cmp553 = icmp eq i32 %bf.clear552, 37, !dbg !5587
  br i1 %cmp553, label %land.lhs.true555, label %if.end623, !dbg !5588

land.lhs.true555:                                 ; preds = %land.lhs.true550
  %273 = load %struct.rtx_def*, %struct.rtx_def** %src467, align 8, !dbg !5589
  %call556 = call i32 @rhs_regno(%struct.rtx_def* %273), !dbg !5589
  store i32 %call556, i32* %regno469, align 4, !dbg !5590
  %cmp557 = icmp uge i32 %call556, 53, !dbg !5591
  br i1 %cmp557, label %land.lhs.true559, label %if.end623, !dbg !5592

land.lhs.true559:                                 ; preds = %land.lhs.true555
  %274 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5593
  %275 = load i32, i32* %regno469, align 4, !dbg !5593
  %idxprom560 = zext i32 %275 to i64, !dbg !5593
  %arrayidx561 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %274, i64 %idxprom560, !dbg !5593
  %basic_block562 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx561, i32 0, i32 6, !dbg !5593
  %276 = load i32, i32* %basic_block562, align 4, !dbg !5593
  %cmp563 = icmp sge i32 %276, 2, !dbg !5594
  br i1 %cmp563, label %land.lhs.true565, label %if.end623, !dbg !5595

land.lhs.true565:                                 ; preds = %land.lhs.true559
  %277 = load %struct.df*, %struct.df** @df, align 8, !dbg !5596
  %def_regs566 = getelementptr inbounds %struct.df, %struct.df* %277, i32 0, i32 5, !dbg !5596
  %278 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs566, align 8, !dbg !5596
  %279 = load i32, i32* %regno469, align 4, !dbg !5596
  %idxprom567 = zext i32 %279 to i64, !dbg !5596
  %arrayidx568 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %278, i64 %idxprom567, !dbg !5596
  %280 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx568, align 8, !dbg !5596
  %n_refs569 = getelementptr inbounds %struct.df_reg_info, %struct.df_reg_info* %280, i32 0, i32 1, !dbg !5596
  %281 = load i32, i32* %n_refs569, align 8, !dbg !5596
  %cmp570 = icmp eq i32 %281, 1, !dbg !5597
  br i1 %cmp570, label %land.lhs.true572, label %if.end623, !dbg !5598

land.lhs.true572:                                 ; preds = %land.lhs.true565
  %282 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5599
  %283 = load i32, i32* %regno469, align 4, !dbg !5600
  %idxprom573 = zext i32 %283 to i64, !dbg !5599
  %arrayidx574 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %282, i64 %idxprom573, !dbg !5599
  %init_insns575 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx574, i32 0, i32 2, !dbg !5601
  %284 = load %struct.rtx_def*, %struct.rtx_def** %init_insns575, align 8, !dbg !5601
  %cmp576 = icmp ne %struct.rtx_def* %284, null, !dbg !5602
  br i1 %cmp576, label %land.lhs.true578, label %if.end623, !dbg !5603

land.lhs.true578:                                 ; preds = %land.lhs.true572
  %285 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5604
  %286 = load i32, i32* %regno469, align 4, !dbg !5605
  %idxprom579 = zext i32 %286 to i64, !dbg !5604
  %arrayidx580 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %285, i64 %idxprom579, !dbg !5604
  %init_insns581 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx580, i32 0, i32 2, !dbg !5606
  %287 = load %struct.rtx_def*, %struct.rtx_def** %init_insns581, align 8, !dbg !5606
  %288 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5607
  %cmp582 = icmp ne %struct.rtx_def* %287, %288, !dbg !5608
  br i1 %cmp582, label %land.lhs.true584, label %if.end623, !dbg !5609

land.lhs.true584:                                 ; preds = %land.lhs.true578
  %289 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5610
  %290 = load i32, i32* %regno469, align 4, !dbg !5610
  %idxprom585 = zext i32 %290 to i64, !dbg !5610
  %arrayidx586 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %289, i64 %idxprom585, !dbg !5610
  %init_insns587 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx586, i32 0, i32 2, !dbg !5610
  %291 = load %struct.rtx_def*, %struct.rtx_def** %init_insns587, align 8, !dbg !5610
  %u588 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %291, i32 0, i32 1, !dbg !5610
  %fld589 = bitcast %union.u* %u588 to [1 x %union.rtunion_def]*, !dbg !5610
  %arrayidx590 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld589, i64 0, i64 0, !dbg !5610
  %rt_rtx591 = bitcast %union.rtunion_def* %arrayidx590 to %struct.rtx_def**, !dbg !5610
  %292 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx591, align 8, !dbg !5610
  %call592 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %292, i32 3, %struct.rtx_def* null), !dbg !5611
  %tobool593 = icmp ne %struct.rtx_def* %call592, null, !dbg !5611
  br i1 %tobool593, label %if.end623, label %land.lhs.true594, !dbg !5612

land.lhs.true594:                                 ; preds = %land.lhs.true584
  %293 = load %struct.rtx_def*, %struct.rtx_def** %dest468, align 8, !dbg !5613
  %u595 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %293, i32 0, i32 1, !dbg !5613
  %fld596 = bitcast %union.u* %u595 to [1 x %union.rtunion_def]*, !dbg !5613
  %arrayidx597 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld596, i64 0, i64 0, !dbg !5613
  %rt_rtx598 = bitcast %union.rtunion_def* %arrayidx597 to %struct.rtx_def**, !dbg !5613
  %294 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx598, align 8, !dbg !5613
  %call599 = call i32 @contains_replace_regs(%struct.rtx_def* %294), !dbg !5614
  %tobool600 = icmp ne i32 %call599, 0, !dbg !5614
  br i1 %tobool600, label %if.end623, label %if.then601, !dbg !5615

if.then601:                                       ; preds = %land.lhs.true594
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %init_insn, metadata !5616, metadata !DIExpression()), !dbg !5618
  %295 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5619
  %296 = load i32, i32* %regno469, align 4, !dbg !5619
  %idxprom602 = zext i32 %296 to i64, !dbg !5619
  %arrayidx603 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %295, i64 %idxprom602, !dbg !5619
  %init_insns604 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx603, i32 0, i32 2, !dbg !5619
  %297 = load %struct.rtx_def*, %struct.rtx_def** %init_insns604, align 8, !dbg !5619
  %u605 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %297, i32 0, i32 1, !dbg !5619
  %fld606 = bitcast %union.u* %u605 to [1 x %union.rtunion_def]*, !dbg !5619
  %arrayidx607 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld606, i64 0, i64 0, !dbg !5619
  %rt_rtx608 = bitcast %union.rtunion_def* %arrayidx607 to %struct.rtx_def**, !dbg !5619
  %298 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx608, align 8, !dbg !5619
  store %struct.rtx_def* %298, %struct.rtx_def** %init_insn, align 8, !dbg !5618
  %299 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8, !dbg !5620
  %300 = load %struct.rtx_def*, %struct.rtx_def** %src467, align 8, !dbg !5622
  %301 = load %struct.rtx_def*, %struct.rtx_def** %dest468, align 8, !dbg !5623
  %call609 = call i32 @validate_equiv_mem(%struct.rtx_def* %299, %struct.rtx_def* %300, %struct.rtx_def* %301), !dbg !5624
  %tobool610 = icmp ne i32 %call609, 0, !dbg !5624
  br i1 %tobool610, label %land.lhs.true611, label %if.end622, !dbg !5625

land.lhs.true611:                                 ; preds = %if.then601
  %302 = load %struct.rtx_def*, %struct.rtx_def** %dest468, align 8, !dbg !5626
  %303 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8, !dbg !5627
  %304 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5628
  %call612 = call i32 @memref_used_between_p(%struct.rtx_def* %302, %struct.rtx_def* %303, %struct.rtx_def* %304), !dbg !5629
  %tobool613 = icmp ne i32 %call612, 0, !dbg !5629
  br i1 %tobool613, label %if.end622, label %land.lhs.true614, !dbg !5630

land.lhs.true614:                                 ; preds = %land.lhs.true611
  %305 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8, !dbg !5631
  %306 = load %struct.rtx_def*, %struct.rtx_def** %dest468, align 8, !dbg !5632
  %call615 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %306), !dbg !5633
  %call616 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %305, i32 3, %struct.rtx_def* %call615), !dbg !5634
  %tobool617 = icmp ne %struct.rtx_def* %call616, null, !dbg !5634
  br i1 %tobool617, label %if.then618, label %if.end622, !dbg !5635

if.then618:                                       ; preds = %land.lhs.true614
  %307 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5636
  %call619 = call %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32 4, i32 0, %struct.rtx_def* %307, %struct.rtx_def* null), !dbg !5636
  %308 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5638
  %309 = load i32, i32* %regno469, align 4, !dbg !5639
  %idxprom620 = zext i32 %309 to i64, !dbg !5638
  %arrayidx621 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %308, i64 %idxprom620, !dbg !5638
  store %struct.rtx_def* %call619, %struct.rtx_def** %arrayidx621, align 8, !dbg !5640
  %310 = load %struct.rtx_def*, %struct.rtx_def** %init_insn, align 8, !dbg !5641
  call void @df_notes_rescan(%struct.rtx_def* %310), !dbg !5642
  br label %if.end622, !dbg !5643

if.end622:                                        ; preds = %if.then618, %land.lhs.true614, %land.lhs.true611, %if.then601
  br label %if.end623, !dbg !5644

if.end623:                                        ; preds = %if.end622, %land.lhs.true594, %land.lhs.true584, %land.lhs.true578, %land.lhs.true572, %land.lhs.true565, %land.lhs.true559, %land.lhs.true555, %land.lhs.true550, %if.end537
  br label %for.inc624, !dbg !5645

for.inc624:                                       ; preds = %if.end623, %if.then536, %if.then489
  %311 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5646
  %u625 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %311, i32 0, i32 1, !dbg !5646
  %fld626 = bitcast %union.u* %u625 to [1 x %union.rtunion_def]*, !dbg !5646
  %arrayidx627 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld626, i64 0, i64 2, !dbg !5646
  %rt_rtx628 = bitcast %union.rtunion_def* %arrayidx627 to %struct.rtx_def**, !dbg !5646
  %312 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx628, align 8, !dbg !5646
  store %struct.rtx_def* %312, %struct.rtx_def** %insn, align 8, !dbg !5647
  br label %for.cond463, !dbg !5648, !llvm.loop !5649

for.end629:                                       ; preds = %for.cond463
  %call630 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5651
  store %struct.bitmap_head_def* %call630, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5652
  %313 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5653
  %add.ptr631 = getelementptr inbounds %struct.function, %struct.function* %313, i64 0, !dbg !5653
  %cfg632 = getelementptr inbounds %struct.function, %struct.function* %add.ptr631, i32 0, i32 1, !dbg !5653
  %314 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg632, align 8, !dbg !5653
  %x_exit_block_ptr633 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %314, i32 0, i32 1, !dbg !5653
  %315 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr633, align 8, !dbg !5653
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %315, i32 0, i32 5, !dbg !5653
  %316 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5653
  store %struct.basic_block_def* %316, %struct.basic_block_def** %bb, align 8, !dbg !5653
  br label %for.cond634, !dbg !5653

for.cond634:                                      ; preds = %for.inc912, %for.end629
  %317 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5655
  %318 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5655
  %add.ptr635 = getelementptr inbounds %struct.function, %struct.function* %318, i64 0, !dbg !5655
  %cfg636 = getelementptr inbounds %struct.function, %struct.function* %add.ptr635, i32 0, i32 1, !dbg !5655
  %319 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg636, align 8, !dbg !5655
  %x_entry_block_ptr637 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %319, i32 0, i32 0, !dbg !5655
  %320 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr637, align 8, !dbg !5655
  %cmp638 = icmp ne %struct.basic_block_def* %317, %320, !dbg !5655
  br i1 %cmp638, label %for.body640, label %for.end914, !dbg !5653

for.body640:                                      ; preds = %for.cond634
  %321 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5657
  %loop_depth641 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %321, i32 0, i32 10, !dbg !5659
  %322 = load i32, i32* %loop_depth641, align 4, !dbg !5659
  store i32 %322, i32* %loop_depth, align 4, !dbg !5660
  %323 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5661
  %il642 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %323, i32 0, i32 7, !dbg !5661
  %rtl643 = bitcast %union.basic_block_il_dependent* %il642 to %struct.rtl_bb_info**, !dbg !5661
  %324 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl643, align 8, !dbg !5661
  %end_644 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %324, i32 0, i32 1, !dbg !5661
  %325 = load %struct.rtx_def*, %struct.rtx_def** %end_644, align 8, !dbg !5661
  store %struct.rtx_def* %325, %struct.rtx_def** %insn, align 8, !dbg !5663
  br label %for.cond645, !dbg !5664

for.cond645:                                      ; preds = %for.inc906, %for.body640
  %326 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5665
  %327 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5667
  %il646 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %327, i32 0, i32 7, !dbg !5667
  %rtl647 = bitcast %union.basic_block_il_dependent* %il646 to %struct.rtl_bb_info**, !dbg !5667
  %328 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl647, align 8, !dbg !5667
  %head_648 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %328, i32 0, i32 0, !dbg !5667
  %329 = load %struct.rtx_def*, %struct.rtx_def** %head_648, align 8, !dbg !5667
  %u649 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %329, i32 0, i32 1, !dbg !5667
  %fld650 = bitcast %union.u* %u649 to [1 x %union.rtunion_def]*, !dbg !5667
  %arrayidx651 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld650, i64 0, i64 1, !dbg !5667
  %rt_rtx652 = bitcast %union.rtunion_def* %arrayidx651 to %struct.rtx_def**, !dbg !5667
  %330 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx652, align 8, !dbg !5667
  %cmp653 = icmp ne %struct.rtx_def* %326, %330, !dbg !5668
  br i1 %cmp653, label %for.body655, label %for.end911, !dbg !5669

for.body655:                                      ; preds = %for.cond645
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !5670, metadata !DIExpression()), !dbg !5672
  %331 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5673
  %332 = bitcast %struct.rtx_def* %331 to i32*, !dbg !5673
  %bf.load656 = load i32, i32* %332, align 8, !dbg !5673
  %bf.clear657 = and i32 %bf.load656, 65535, !dbg !5673
  %cmp658 = icmp eq i32 %bf.clear657, 8, !dbg !5673
  br i1 %cmp658, label %if.end676, label %lor.lhs.false660, !dbg !5673

lor.lhs.false660:                                 ; preds = %for.body655
  %333 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5673
  %334 = bitcast %struct.rtx_def* %333 to i32*, !dbg !5673
  %bf.load661 = load i32, i32* %334, align 8, !dbg !5673
  %bf.clear662 = and i32 %bf.load661, 65535, !dbg !5673
  %cmp663 = icmp eq i32 %bf.clear662, 7, !dbg !5673
  br i1 %cmp663, label %if.end676, label %lor.lhs.false665, !dbg !5673

lor.lhs.false665:                                 ; preds = %lor.lhs.false660
  %335 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5673
  %336 = bitcast %struct.rtx_def* %335 to i32*, !dbg !5673
  %bf.load666 = load i32, i32* %336, align 8, !dbg !5673
  %bf.clear667 = and i32 %bf.load666, 65535, !dbg !5673
  %cmp668 = icmp eq i32 %bf.clear667, 9, !dbg !5673
  br i1 %cmp668, label %if.end676, label %lor.lhs.false670, !dbg !5673

lor.lhs.false670:                                 ; preds = %lor.lhs.false665
  %337 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5673
  %338 = bitcast %struct.rtx_def* %337 to i32*, !dbg !5673
  %bf.load671 = load i32, i32* %338, align 8, !dbg !5673
  %bf.clear672 = and i32 %bf.load671, 65535, !dbg !5673
  %cmp673 = icmp eq i32 %bf.clear672, 10, !dbg !5673
  br i1 %cmp673, label %if.end676, label %if.then675, !dbg !5675

if.then675:                                       ; preds = %lor.lhs.false670
  br label %for.inc906, !dbg !5676

if.end676:                                        ; preds = %lor.lhs.false670, %lor.lhs.false665, %lor.lhs.false660, %for.body655
  %339 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5677
  %340 = bitcast %struct.rtx_def* %339 to i32*, !dbg !5677
  %bf.load677 = load i32, i32* %340, align 8, !dbg !5677
  %bf.clear678 = and i32 %bf.load677, 65535, !dbg !5677
  %cmp679 = icmp eq i32 %bf.clear678, 9, !dbg !5677
  br i1 %cmp679, label %land.lhs.true681, label %if.end685, !dbg !5679

land.lhs.true681:                                 ; preds = %if.end676
  %341 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5680
  %call682 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %341, i32 28, %struct.rtx_def* null), !dbg !5681
  %tobool683 = icmp ne %struct.rtx_def* %call682, null, !dbg !5681
  br i1 %tobool683, label %if.then684, label %if.end685, !dbg !5682

if.then684:                                       ; preds = %land.lhs.true681
  br label %for.inc906, !dbg !5683

if.end685:                                        ; preds = %land.lhs.true681, %if.end676
  %342 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5684
  %u686 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %342, i32 0, i32 1, !dbg !5684
  %fld687 = bitcast %union.u* %u686 to [1 x %union.rtunion_def]*, !dbg !5684
  %arrayidx688 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld687, i64 0, i64 7, !dbg !5684
  %rt_rtx689 = bitcast %union.rtunion_def* %arrayidx688 to %struct.rtx_def**, !dbg !5684
  %343 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx689, align 8, !dbg !5684
  store %struct.rtx_def* %343, %struct.rtx_def** %link, align 8, !dbg !5686
  br label %for.cond690, !dbg !5687

for.cond690:                                      ; preds = %for.inc900, %if.end685
  %344 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5688
  %tobool691 = icmp ne %struct.rtx_def* %344, null, !dbg !5690
  br i1 %tobool691, label %for.body692, label %for.end905, !dbg !5690

for.body692:                                      ; preds = %for.cond690
  %345 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5691
  %346 = bitcast %struct.rtx_def* %345 to i32*, !dbg !5691
  %bf.load693 = load i32, i32* %346, align 8, !dbg !5691
  %bf.lshr694 = lshr i32 %bf.load693, 16, !dbg !5691
  %bf.clear695 = and i32 %bf.lshr694, 255, !dbg !5691
  %cmp696 = icmp eq i32 %bf.clear695, 1, !dbg !5694
  br i1 %cmp696, label %land.lhs.true698, label %if.end899, !dbg !5695

land.lhs.true698:                                 ; preds = %for.body692
  %347 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5696
  %u699 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %347, i32 0, i32 1, !dbg !5696
  %fld700 = bitcast %union.u* %u699 to [1 x %union.rtunion_def]*, !dbg !5696
  %arrayidx701 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld700, i64 0, i64 0, !dbg !5696
  %rt_rtx702 = bitcast %union.rtunion_def* %arrayidx701 to %struct.rtx_def**, !dbg !5696
  %348 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx702, align 8, !dbg !5696
  %349 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5697
  %u703 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %349, i32 0, i32 1, !dbg !5697
  %fld704 = bitcast %union.u* %u703 to [1 x %union.rtunion_def]*, !dbg !5697
  %arrayidx705 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld704, i64 0, i64 5, !dbg !5697
  %rt_rtx706 = bitcast %union.rtunion_def* %arrayidx705 to %struct.rtx_def**, !dbg !5697
  %350 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx706, align 8, !dbg !5697
  %call707 = call i32 @reg_mentioned_p(%struct.rtx_def* %348, %struct.rtx_def* %350), !dbg !5698
  %tobool708 = icmp ne i32 %call707, 0, !dbg !5698
  br i1 %tobool708, label %if.then709, label %if.end899, !dbg !5699

if.then709:                                       ; preds = %land.lhs.true698
  call void @llvm.dbg.declare(metadata i32* %regno710, metadata !5700, metadata !DIExpression()), !dbg !5702
  %351 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5703
  %u711 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %351, i32 0, i32 1, !dbg !5703
  %fld712 = bitcast %union.u* %u711 to [1 x %union.rtunion_def]*, !dbg !5703
  %arrayidx713 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld712, i64 0, i64 0, !dbg !5703
  %rt_rtx714 = bitcast %union.rtunion_def* %arrayidx713 to %struct.rtx_def**, !dbg !5703
  %352 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx714, align 8, !dbg !5703
  %call715 = call i32 @rhs_regno(%struct.rtx_def* %352), !dbg !5703
  store i32 %call715, i32* %regno710, align 4, !dbg !5702
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv_insn, metadata !5704, metadata !DIExpression()), !dbg !5705
  %353 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5706
  %354 = load i32, i32* %regno710, align 4, !dbg !5708
  %idxprom716 = sext i32 %354 to i64, !dbg !5706
  %arrayidx717 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %353, i64 %idxprom716, !dbg !5706
  %replace718 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx717, i32 0, i32 5, !dbg !5709
  %355 = load i8, i8* %replace718, align 8, !dbg !5709
  %tobool719 = icmp ne i8 %355, 0, !dbg !5706
  br i1 %tobool719, label %lor.lhs.false720, label %if.then726, !dbg !5710

lor.lhs.false720:                                 ; preds = %if.then709
  %356 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5711
  %357 = load i32, i32* %regno710, align 4, !dbg !5712
  %idxprom721 = sext i32 %357 to i64, !dbg !5711
  %arrayidx722 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %356, i64 %idxprom721, !dbg !5711
  %loop_depth723 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx722, i32 0, i32 3, !dbg !5713
  %358 = load i32, i32* %loop_depth723, align 8, !dbg !5713
  %359 = load i32, i32* %loop_depth, align 4, !dbg !5714
  %cmp724 = icmp slt i32 %358, %359, !dbg !5715
  br i1 %cmp724, label %if.then726, label %if.end727, !dbg !5716

if.then726:                                       ; preds = %lor.lhs.false720, %if.then709
  br label %for.inc900, !dbg !5717

if.end727:                                        ; preds = %lor.lhs.false720
  %360 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5718
  %361 = load i32, i32* %regno710, align 4, !dbg !5718
  %idxprom728 = sext i32 %361 to i64, !dbg !5718
  %arrayidx729 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %360, i64 %idxprom728, !dbg !5718
  %init_insns730 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx729, i32 0, i32 2, !dbg !5718
  %362 = load %struct.rtx_def*, %struct.rtx_def** %init_insns730, align 8, !dbg !5718
  %tobool731 = icmp ne %struct.rtx_def* %362, null, !dbg !5718
  br i1 %tobool731, label %land.lhs.true732, label %cond.true741, !dbg !5718

land.lhs.true732:                                 ; preds = %if.end727
  %363 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5718
  %364 = load i32, i32* %regno710, align 4, !dbg !5718
  %idxprom733 = sext i32 %364 to i64, !dbg !5718
  %arrayidx734 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %363, i64 %idxprom733, !dbg !5718
  %init_insns735 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx734, i32 0, i32 2, !dbg !5718
  %365 = load %struct.rtx_def*, %struct.rtx_def** %init_insns735, align 8, !dbg !5718
  %u736 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %365, i32 0, i32 1, !dbg !5718
  %fld737 = bitcast %union.u* %u736 to [1 x %union.rtunion_def]*, !dbg !5718
  %arrayidx738 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld737, i64 0, i64 1, !dbg !5718
  %rt_rtx739 = bitcast %union.rtunion_def* %arrayidx738 to %struct.rtx_def**, !dbg !5718
  %366 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx739, align 8, !dbg !5718
  %tobool740 = icmp ne %struct.rtx_def* %366, null, !dbg !5718
  br i1 %tobool740, label %cond.true741, label %cond.false742, !dbg !5718

cond.true741:                                     ; preds = %land.lhs.true732, %if.end727
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i32 2653, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)), !dbg !5718
  br label %cond.end743, !dbg !5718

cond.false742:                                    ; preds = %land.lhs.true732
  br label %cond.end743, !dbg !5718

cond.end743:                                      ; preds = %cond.false742, %cond.true741
  %cond744 = phi i32 [ 0, %cond.true741 ], [ 0, %cond.false742 ], !dbg !5718
  %367 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5719
  %368 = load i32, i32* %regno710, align 4, !dbg !5719
  %idxprom745 = sext i32 %368 to i64, !dbg !5719
  %arrayidx746 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %367, i64 %idxprom745, !dbg !5719
  %init_insns747 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx746, i32 0, i32 2, !dbg !5719
  %369 = load %struct.rtx_def*, %struct.rtx_def** %init_insns747, align 8, !dbg !5719
  %u748 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %369, i32 0, i32 1, !dbg !5719
  %fld749 = bitcast %union.u* %u748 to [1 x %union.rtunion_def]*, !dbg !5719
  %arrayidx750 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld749, i64 0, i64 0, !dbg !5719
  %rt_rtx751 = bitcast %union.rtunion_def* %arrayidx750 to %struct.rtx_def**, !dbg !5719
  %370 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx751, align 8, !dbg !5719
  store %struct.rtx_def* %370, %struct.rtx_def** %equiv_insn, align 8, !dbg !5720
  %371 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5721
  %call752 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %371), !dbg !5723
  %tobool753 = icmp ne i8 %call752, 0, !dbg !5723
  br i1 %tobool753, label %if.then754, label %if.end755, !dbg !5724

if.then754:                                       ; preds = %cond.end743
  br label %for.inc900, !dbg !5725

if.end755:                                        ; preds = %cond.end743
  %372 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5726
  %u756 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %372, i32 0, i32 1, !dbg !5726
  %fld757 = bitcast %union.u* %u756 to [1 x %union.rtunion_def]*, !dbg !5726
  %arrayidx758 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld757, i64 0, i64 5, !dbg !5726
  %rt_rtx759 = bitcast %union.rtunion_def* %arrayidx758 to %struct.rtx_def**, !dbg !5726
  %373 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx759, align 8, !dbg !5726
  %call760 = call i32 @asm_noperands(%struct.rtx_def* %373), !dbg !5728
  %cmp761 = icmp slt i32 %call760, 0, !dbg !5729
  br i1 %cmp761, label %land.lhs.true763, label %if.else829, !dbg !5730

land.lhs.true763:                                 ; preds = %if.end755
  %374 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !5731
  %375 = load i32, i32* %regno710, align 4, !dbg !5732
  %idxprom764 = sext i32 %375 to i64, !dbg !5731
  %arrayidx765 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %374, i64 %idxprom764, !dbg !5731
  %376 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx765, align 8, !dbg !5731
  %377 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5733
  %378 = load i32, i32* %regno710, align 4, !dbg !5734
  %idxprom766 = sext i32 %378 to i64, !dbg !5733
  %arrayidx767 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %377, i64 %idxprom766, !dbg !5733
  %src_p768 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx767, i32 0, i32 1, !dbg !5735
  %379 = load %struct.rtx_def**, %struct.rtx_def*** %src_p768, align 8, !dbg !5735
  %380 = load %struct.rtx_def*, %struct.rtx_def** %379, align 8, !dbg !5736
  %381 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5737
  %call769 = call i32 @validate_replace_rtx(%struct.rtx_def* %376, %struct.rtx_def* %380, %struct.rtx_def* %381), !dbg !5738
  %tobool770 = icmp ne i32 %call769, 0, !dbg !5738
  br i1 %tobool770, label %if.then771, label %if.else829, !dbg !5739

if.then771:                                       ; preds = %land.lhs.true763
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv_link, metadata !5740, metadata !DIExpression()), !dbg !5742
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_link, metadata !5743, metadata !DIExpression()), !dbg !5744
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note772, metadata !5745, metadata !DIExpression()), !dbg !5746
  %382 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5747
  store %struct.rtx_def* %382, %struct.rtx_def** %last_link, align 8, !dbg !5749
  br label %for.cond773, !dbg !5750

for.cond773:                                      ; preds = %for.inc780, %if.then771
  %383 = load %struct.rtx_def*, %struct.rtx_def** %last_link, align 8, !dbg !5751
  %u774 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %383, i32 0, i32 1, !dbg !5751
  %fld775 = bitcast %union.u* %u774 to [1 x %union.rtunion_def]*, !dbg !5751
  %arrayidx776 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld775, i64 0, i64 1, !dbg !5751
  %rt_rtx777 = bitcast %union.rtunion_def* %arrayidx776 to %struct.rtx_def**, !dbg !5751
  %384 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx777, align 8, !dbg !5751
  %tobool778 = icmp ne %struct.rtx_def* %384, null, !dbg !5753
  br i1 %tobool778, label %for.body779, label %for.end785, !dbg !5753

for.body779:                                      ; preds = %for.cond773
  br label %for.inc780, !dbg !5753

for.inc780:                                       ; preds = %for.body779
  %385 = load %struct.rtx_def*, %struct.rtx_def** %last_link, align 8, !dbg !5754
  %u781 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %385, i32 0, i32 1, !dbg !5754
  %fld782 = bitcast %union.u* %u781 to [1 x %union.rtunion_def]*, !dbg !5754
  %arrayidx783 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld782, i64 0, i64 1, !dbg !5754
  %rt_rtx784 = bitcast %union.rtunion_def* %arrayidx783 to %struct.rtx_def**, !dbg !5754
  %386 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx784, align 8, !dbg !5754
  store %struct.rtx_def* %386, %struct.rtx_def** %last_link, align 8, !dbg !5755
  br label %for.cond773, !dbg !5756, !llvm.loop !5757

for.end785:                                       ; preds = %for.cond773
  %387 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5759
  %u786 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %387, i32 0, i32 1, !dbg !5759
  %fld787 = bitcast %union.u* %u786 to [1 x %union.rtunion_def]*, !dbg !5759
  %arrayidx788 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld787, i64 0, i64 7, !dbg !5759
  %rt_rtx789 = bitcast %union.rtunion_def* %arrayidx788 to %struct.rtx_def**, !dbg !5759
  %388 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx789, align 8, !dbg !5759
  store %struct.rtx_def* %388, %struct.rtx_def** %equiv_link, align 8, !dbg !5760
  br label %while.cond, !dbg !5761

while.cond:                                       ; preds = %if.end809, %for.end785
  %389 = load %struct.rtx_def*, %struct.rtx_def** %equiv_link, align 8, !dbg !5762
  %tobool790 = icmp ne %struct.rtx_def* %389, null, !dbg !5761
  br i1 %tobool790, label %while.body, label %while.end, !dbg !5761

while.body:                                       ; preds = %while.cond
  %390 = load %struct.rtx_def*, %struct.rtx_def** %equiv_link, align 8, !dbg !5763
  store %struct.rtx_def* %390, %struct.rtx_def** %note772, align 8, !dbg !5765
  %391 = load %struct.rtx_def*, %struct.rtx_def** %equiv_link, align 8, !dbg !5766
  %u791 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %391, i32 0, i32 1, !dbg !5766
  %fld792 = bitcast %union.u* %u791 to [1 x %union.rtunion_def]*, !dbg !5766
  %arrayidx793 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld792, i64 0, i64 1, !dbg !5766
  %rt_rtx794 = bitcast %union.rtunion_def* %arrayidx793 to %struct.rtx_def**, !dbg !5766
  %392 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx794, align 8, !dbg !5766
  store %struct.rtx_def* %392, %struct.rtx_def** %equiv_link, align 8, !dbg !5767
  %393 = load %struct.rtx_def*, %struct.rtx_def** %note772, align 8, !dbg !5768
  %394 = bitcast %struct.rtx_def* %393 to i32*, !dbg !5768
  %bf.load795 = load i32, i32* %394, align 8, !dbg !5768
  %bf.lshr796 = lshr i32 %bf.load795, 16, !dbg !5768
  %bf.clear797 = and i32 %bf.lshr796, 255, !dbg !5768
  %cmp798 = icmp eq i32 %bf.clear797, 1, !dbg !5770
  br i1 %cmp798, label %if.then800, label %if.end809, !dbg !5771

if.then800:                                       ; preds = %while.body
  %395 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5772
  %396 = load %struct.rtx_def*, %struct.rtx_def** %note772, align 8, !dbg !5774
  call void @remove_note(%struct.rtx_def* %395, %struct.rtx_def* %396), !dbg !5775
  %397 = load %struct.rtx_def*, %struct.rtx_def** %note772, align 8, !dbg !5776
  %398 = load %struct.rtx_def*, %struct.rtx_def** %last_link, align 8, !dbg !5777
  %u801 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %398, i32 0, i32 1, !dbg !5777
  %fld802 = bitcast %union.u* %u801 to [1 x %union.rtunion_def]*, !dbg !5777
  %arrayidx803 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld802, i64 0, i64 1, !dbg !5777
  %rt_rtx804 = bitcast %union.rtunion_def* %arrayidx803 to %struct.rtx_def**, !dbg !5777
  store %struct.rtx_def* %397, %struct.rtx_def** %rt_rtx804, align 8, !dbg !5778
  %399 = load %struct.rtx_def*, %struct.rtx_def** %note772, align 8, !dbg !5779
  %u805 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %399, i32 0, i32 1, !dbg !5779
  %fld806 = bitcast %union.u* %u805 to [1 x %union.rtunion_def]*, !dbg !5779
  %arrayidx807 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld806, i64 0, i64 1, !dbg !5779
  %rt_rtx808 = bitcast %union.rtunion_def* %arrayidx807 to %struct.rtx_def**, !dbg !5779
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx808, align 8, !dbg !5780
  %400 = load %struct.rtx_def*, %struct.rtx_def** %note772, align 8, !dbg !5781
  store %struct.rtx_def* %400, %struct.rtx_def** %last_link, align 8, !dbg !5782
  br label %if.end809, !dbg !5783

if.end809:                                        ; preds = %if.then800, %while.body
  br label %while.cond, !dbg !5761, !llvm.loop !5784

while.end:                                        ; preds = %while.cond
  %401 = load i32, i32* %regno710, align 4, !dbg !5786
  %402 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5787
  %call810 = call %struct.rtx_def* @remove_death(i32 %401, %struct.rtx_def* %402), !dbg !5788
  %403 = load %struct.regstat_n_sets_and_refs_t*, %struct.regstat_n_sets_and_refs_t** @regstat_n_sets_and_refs, align 8, !dbg !5789
  %404 = load i32, i32* %regno710, align 4, !dbg !5789
  %idxprom811 = sext i32 %404 to i64, !dbg !5789
  %arrayidx812 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %403, i64 %idxprom811, !dbg !5789
  %refs = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %arrayidx812, i32 0, i32 1, !dbg !5789
  store i32 0, i32* %refs, align 4, !dbg !5789
  %405 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5790
  %406 = load i32, i32* %regno710, align 4, !dbg !5790
  %idxprom813 = sext i32 %406 to i64, !dbg !5790
  %arrayidx814 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %405, i64 %idxprom813, !dbg !5790
  %freq = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx814, i32 0, i32 0, !dbg !5790
  store i32 0, i32* %freq, align 4, !dbg !5791
  %407 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5792
  %call815 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %407), !dbg !5793
  %408 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5794
  %409 = load i32, i32* %regno710, align 4, !dbg !5794
  %idxprom816 = sext i32 %409 to i64, !dbg !5794
  %arrayidx817 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %408, i64 %idxprom816, !dbg !5794
  %init_insns818 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx817, i32 0, i32 2, !dbg !5794
  %410 = load %struct.rtx_def*, %struct.rtx_def** %init_insns818, align 8, !dbg !5794
  %u819 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %410, i32 0, i32 1, !dbg !5794
  %fld820 = bitcast %union.u* %u819 to [1 x %union.rtunion_def]*, !dbg !5794
  %arrayidx821 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld820, i64 0, i64 1, !dbg !5794
  %rt_rtx822 = bitcast %union.rtunion_def* %arrayidx821 to %struct.rtx_def**, !dbg !5794
  %411 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx822, align 8, !dbg !5794
  %412 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5795
  %413 = load i32, i32* %regno710, align 4, !dbg !5796
  %idxprom823 = sext i32 %413 to i64, !dbg !5795
  %arrayidx824 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %412, i64 %idxprom823, !dbg !5795
  %init_insns825 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx824, i32 0, i32 2, !dbg !5797
  store %struct.rtx_def* %411, %struct.rtx_def** %init_insns825, align 8, !dbg !5798
  %414 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5799
  %415 = load i32, i32* %regno710, align 4, !dbg !5800
  %idxprom826 = sext i32 %415 to i64, !dbg !5799
  %arrayidx827 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %414, i64 %idxprom826, !dbg !5799
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx827, align 8, !dbg !5801
  %416 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5802
  %417 = load i32, i32* %regno710, align 4, !dbg !5803
  %call828 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %416, i32 %417), !dbg !5804
  br label %if.end898, !dbg !5805

if.else829:                                       ; preds = %land.lhs.true763, %if.end755
  %418 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5806
  %call830 = call %struct.rtx_def* @prev_nondebug_insn(%struct.rtx_def* %418), !dbg !5808
  %419 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5809
  %cmp831 = icmp ne %struct.rtx_def* %call830, %419, !dbg !5810
  br i1 %cmp831, label %if.then833, label %if.end897, !dbg !5811

if.then833:                                       ; preds = %if.else829
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !5812, metadata !DIExpression()), !dbg !5814
  %420 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5815
  %u834 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %420, i32 0, i32 1, !dbg !5815
  %fld835 = bitcast %union.u* %u834 to [1 x %union.rtunion_def]*, !dbg !5815
  %arrayidx836 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld835, i64 0, i64 5, !dbg !5815
  %rt_rtx837 = bitcast %union.rtunion_def* %arrayidx836 to %struct.rtx_def**, !dbg !5815
  %421 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx837, align 8, !dbg !5815
  %422 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5816
  %call838 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %421, %struct.rtx_def* %422), !dbg !5817
  store %struct.rtx_def* %call838, %struct.rtx_def** %new_insn, align 8, !dbg !5818
  %423 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5819
  %u839 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %423, i32 0, i32 1, !dbg !5819
  %fld840 = bitcast %union.u* %u839 to [1 x %union.rtunion_def]*, !dbg !5819
  %arrayidx841 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld840, i64 0, i64 7, !dbg !5819
  %rt_rtx842 = bitcast %union.rtunion_def* %arrayidx841 to %struct.rtx_def**, !dbg !5819
  %424 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx842, align 8, !dbg !5819
  %425 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !5820
  %u843 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %425, i32 0, i32 1, !dbg !5820
  %fld844 = bitcast %union.u* %u843 to [1 x %union.rtunion_def]*, !dbg !5820
  %arrayidx845 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld844, i64 0, i64 7, !dbg !5820
  %rt_rtx846 = bitcast %union.rtunion_def* %arrayidx845 to %struct.rtx_def**, !dbg !5820
  store %struct.rtx_def* %424, %struct.rtx_def** %rt_rtx846, align 8, !dbg !5821
  %426 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5822
  %u847 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %426, i32 0, i32 1, !dbg !5822
  %fld848 = bitcast %union.u* %u847 to [1 x %union.rtunion_def]*, !dbg !5822
  %arrayidx849 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld848, i64 0, i64 7, !dbg !5822
  %rt_rtx850 = bitcast %union.rtunion_def* %arrayidx849 to %struct.rtx_def**, !dbg !5822
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx850, align 8, !dbg !5823
  %427 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !5824
  %call851 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %427), !dbg !5825
  %428 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5826
  %u852 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %428, i32 0, i32 1, !dbg !5826
  %fld853 = bitcast %union.u* %u852 to [1 x %union.rtunion_def]*, !dbg !5826
  %arrayidx854 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld853, i64 0, i64 6, !dbg !5826
  %rt_int = bitcast %union.rtunion_def* %arrayidx854 to i32*, !dbg !5826
  %429 = load i32, i32* %rt_int, align 8, !dbg !5826
  %430 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !5827
  %u855 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %430, i32 0, i32 1, !dbg !5827
  %fld856 = bitcast %union.u* %u855 to [1 x %union.rtunion_def]*, !dbg !5827
  %arrayidx857 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld856, i64 0, i64 6, !dbg !5827
  %rt_int858 = bitcast %union.rtunion_def* %arrayidx857 to i32*, !dbg !5827
  store i32 %429, i32* %rt_int858, align 8, !dbg !5828
  %431 = load %struct.rtx_def*, %struct.rtx_def** %equiv_insn, align 8, !dbg !5829
  %call859 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %431), !dbg !5830
  %432 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !5831
  %433 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5832
  %434 = load i32, i32* %regno710, align 4, !dbg !5832
  %idxprom860 = sext i32 %434 to i64, !dbg !5832
  %arrayidx861 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %433, i64 %idxprom860, !dbg !5832
  %init_insns862 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx861, i32 0, i32 2, !dbg !5832
  %435 = load %struct.rtx_def*, %struct.rtx_def** %init_insns862, align 8, !dbg !5832
  %u863 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %435, i32 0, i32 1, !dbg !5832
  %fld864 = bitcast %union.u* %u863 to [1 x %union.rtunion_def]*, !dbg !5832
  %arrayidx865 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld864, i64 0, i64 0, !dbg !5832
  %rt_rtx866 = bitcast %union.rtunion_def* %arrayidx865 to %struct.rtx_def**, !dbg !5832
  store %struct.rtx_def* %432, %struct.rtx_def** %rt_rtx866, align 8, !dbg !5833
  %436 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5834
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %436, i32 0, i32 9, !dbg !5835
  %437 = load i32, i32* %index, align 8, !dbg !5835
  %438 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5836
  %439 = load i32, i32* %regno710, align 4, !dbg !5836
  %idxprom867 = sext i32 %439 to i64, !dbg !5836
  %arrayidx868 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %438, i64 %idxprom867, !dbg !5836
  %basic_block869 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx868, i32 0, i32 6, !dbg !5836
  store i32 %437, i32* %basic_block869, align 4, !dbg !5837
  %440 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5838
  %441 = load i32, i32* %regno710, align 4, !dbg !5838
  %idxprom870 = sext i32 %441 to i64, !dbg !5838
  %arrayidx871 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %440, i64 %idxprom870, !dbg !5838
  %calls_crossed = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx871, i32 0, i32 3, !dbg !5838
  store i32 0, i32* %calls_crossed, align 4, !dbg !5839
  %442 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5840
  %443 = load i32, i32* %regno710, align 4, !dbg !5840
  %idxprom872 = sext i32 %443 to i64, !dbg !5840
  %arrayidx873 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %442, i64 %idxprom872, !dbg !5840
  %freq_calls_crossed = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx873, i32 0, i32 4, !dbg !5840
  store i32 0, i32* %freq_calls_crossed, align 4, !dbg !5841
  %444 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5842
  %445 = load i32, i32* %regno710, align 4, !dbg !5842
  %idxprom874 = sext i32 %445 to i64, !dbg !5842
  %arrayidx875 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %444, i64 %idxprom874, !dbg !5842
  %throw_calls_crossed = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx875, i32 0, i32 5, !dbg !5842
  store i32 0, i32* %throw_calls_crossed, align 4, !dbg !5843
  %446 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5844
  %447 = load i32, i32* %regno710, align 4, !dbg !5844
  %idxprom876 = sext i32 %447 to i64, !dbg !5844
  %arrayidx877 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %446, i64 %idxprom876, !dbg !5844
  %live_length878 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx877, i32 0, i32 2, !dbg !5844
  store i32 2, i32* %live_length878, align 4, !dbg !5845
  %448 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5846
  %449 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5848
  %il879 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %449, i32 0, i32 7, !dbg !5848
  %rtl880 = bitcast %union.basic_block_il_dependent* %il879 to %struct.rtl_bb_info**, !dbg !5848
  %450 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl880, align 8, !dbg !5848
  %head_881 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %450, i32 0, i32 0, !dbg !5848
  %451 = load %struct.rtx_def*, %struct.rtx_def** %head_881, align 8, !dbg !5848
  %cmp882 = icmp eq %struct.rtx_def* %448, %451, !dbg !5849
  br i1 %cmp882, label %if.then884, label %if.end892, !dbg !5850

if.then884:                                       ; preds = %if.then833
  %452 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5851
  %u885 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %452, i32 0, i32 1, !dbg !5851
  %fld886 = bitcast %union.u* %u885 to [1 x %union.rtunion_def]*, !dbg !5851
  %arrayidx887 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld886, i64 0, i64 1, !dbg !5851
  %rt_rtx888 = bitcast %union.rtunion_def* %arrayidx887 to %struct.rtx_def**, !dbg !5851
  %453 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx888, align 8, !dbg !5851
  %454 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5852
  %il889 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %454, i32 0, i32 7, !dbg !5852
  %rtl890 = bitcast %union.basic_block_il_dependent* %il889 to %struct.rtl_bb_info**, !dbg !5852
  %455 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl890, align 8, !dbg !5852
  %head_891 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %455, i32 0, i32 0, !dbg !5852
  store %struct.rtx_def* %453, %struct.rtx_def** %head_891, align 8, !dbg !5853
  br label %if.end892, !dbg !5852

if.end892:                                        ; preds = %if.then884, %if.then833
  %456 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !5854
  %call893 = call %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32 4, i32 0, %struct.rtx_def* %456, %struct.rtx_def* null), !dbg !5854
  %457 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5855
  %458 = load i32, i32* %regno710, align 4, !dbg !5856
  %idxprom894 = sext i32 %458 to i64, !dbg !5855
  %arrayidx895 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %457, i64 %idxprom894, !dbg !5855
  store %struct.rtx_def* %call893, %struct.rtx_def** %arrayidx895, align 8, !dbg !5857
  %459 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5858
  %460 = load i32, i32* %regno710, align 4, !dbg !5859
  %call896 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %459, i32 %460), !dbg !5860
  br label %if.end897, !dbg !5861

if.end897:                                        ; preds = %if.end892, %if.else829
  br label %if.end898

if.end898:                                        ; preds = %if.end897, %while.end
  br label %if.end899, !dbg !5862

if.end899:                                        ; preds = %if.end898, %land.lhs.true698, %for.body692
  br label %for.inc900, !dbg !5863

for.inc900:                                       ; preds = %if.end899, %if.then754, %if.then726
  %461 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !5864
  %u901 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %461, i32 0, i32 1, !dbg !5864
  %fld902 = bitcast %union.u* %u901 to [1 x %union.rtunion_def]*, !dbg !5864
  %arrayidx903 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld902, i64 0, i64 1, !dbg !5864
  %rt_rtx904 = bitcast %union.rtunion_def* %arrayidx903 to %struct.rtx_def**, !dbg !5864
  %462 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx904, align 8, !dbg !5864
  store %struct.rtx_def* %462, %struct.rtx_def** %link, align 8, !dbg !5865
  br label %for.cond690, !dbg !5866, !llvm.loop !5867

for.end905:                                       ; preds = %for.cond690
  br label %for.inc906, !dbg !5869

for.inc906:                                       ; preds = %for.end905, %if.then684, %if.then675
  %463 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5870
  %u907 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %463, i32 0, i32 1, !dbg !5870
  %fld908 = bitcast %union.u* %u907 to [1 x %union.rtunion_def]*, !dbg !5870
  %arrayidx909 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld908, i64 0, i64 1, !dbg !5870
  %rt_rtx910 = bitcast %union.rtunion_def* %arrayidx909 to %struct.rtx_def**, !dbg !5870
  %464 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx910, align 8, !dbg !5870
  store %struct.rtx_def* %464, %struct.rtx_def** %insn, align 8, !dbg !5871
  br label %for.cond645, !dbg !5872, !llvm.loop !5873

for.end911:                                       ; preds = %for.cond645
  br label %for.inc912, !dbg !5875

for.inc912:                                       ; preds = %for.end911
  %465 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5655
  %prev_bb913 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %465, i32 0, i32 5, !dbg !5655
  %466 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb913, align 8, !dbg !5655
  store %struct.basic_block_def* %466, %struct.basic_block_def** %bb, align 8, !dbg !5655
  br label %for.cond634, !dbg !5655, !llvm.loop !5876

for.end914:                                       ; preds = %for.cond634
  %467 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5878
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %467, i32 0, i32 0, !dbg !5878
  %468 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5878
  %tobool915 = icmp ne %struct.bitmap_element_def* %468, null, !dbg !5878
  br i1 %tobool915, label %if.then916, label %if.end994, !dbg !5880

if.then916:                                       ; preds = %for.end914
  %469 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5881
  %add.ptr917 = getelementptr inbounds %struct.function, %struct.function* %469, i64 0, !dbg !5881
  %cfg918 = getelementptr inbounds %struct.function, %struct.function* %add.ptr917, i32 0, i32 1, !dbg !5881
  %470 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg918, align 8, !dbg !5881
  %x_entry_block_ptr919 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %470, i32 0, i32 0, !dbg !5881
  %471 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr919, align 8, !dbg !5881
  %next_bb920 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %471, i32 0, i32 6, !dbg !5881
  %472 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb920, align 8, !dbg !5881
  store %struct.basic_block_def* %472, %struct.basic_block_def** %bb, align 8, !dbg !5881
  br label %for.cond921, !dbg !5881

for.cond921:                                      ; preds = %for.inc942, %if.then916
  %473 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5884
  %474 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5884
  %add.ptr922 = getelementptr inbounds %struct.function, %struct.function* %474, i64 0, !dbg !5884
  %cfg923 = getelementptr inbounds %struct.function, %struct.function* %add.ptr922, i32 0, i32 1, !dbg !5884
  %475 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg923, align 8, !dbg !5884
  %x_exit_block_ptr924 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %475, i32 0, i32 1, !dbg !5884
  %476 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr924, align 8, !dbg !5884
  %cmp925 = icmp ne %struct.basic_block_def* %473, %476, !dbg !5884
  br i1 %cmp925, label %for.body927, label %for.end944, !dbg !5881

for.body927:                                      ; preds = %for.cond921
  %477 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5886
  %index928 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %477, i32 0, i32 9, !dbg !5886
  %478 = load i32, i32* %index928, align 8, !dbg !5886
  %call929 = call %struct.df_live_bb_info* @df_live_get_bb_info(i32 %478), !dbg !5886
  %in = getelementptr inbounds %struct.df_live_bb_info, %struct.df_live_bb_info* %call929, i32 0, i32 2, !dbg !5886
  %479 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !5886
  %480 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5888
  %call930 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %479, %struct.bitmap_head_def* %480), !dbg !5889
  %481 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5890
  %index931 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %481, i32 0, i32 9, !dbg !5890
  %482 = load i32, i32* %index931, align 8, !dbg !5890
  %call932 = call %struct.df_live_bb_info* @df_live_get_bb_info(i32 %482), !dbg !5890
  %out = getelementptr inbounds %struct.df_live_bb_info, %struct.df_live_bb_info* %call932, i32 0, i32 3, !dbg !5890
  %483 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out, align 8, !dbg !5890
  %484 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5891
  %call933 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %483, %struct.bitmap_head_def* %484), !dbg !5892
  %485 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5893
  %index934 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %485, i32 0, i32 9, !dbg !5893
  %486 = load i32, i32* %index934, align 8, !dbg !5893
  %call935 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %486), !dbg !5893
  %in936 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call935, i32 0, i32 2, !dbg !5893
  %487 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in936, align 8, !dbg !5893
  %488 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5894
  %call937 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %487, %struct.bitmap_head_def* %488), !dbg !5895
  %489 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5896
  %index938 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %489, i32 0, i32 9, !dbg !5896
  %490 = load i32, i32* %index938, align 8, !dbg !5896
  %call939 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %490), !dbg !5896
  %out940 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call939, i32 0, i32 3, !dbg !5896
  %491 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out940, align 8, !dbg !5896
  %492 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5897
  %call941 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %491, %struct.bitmap_head_def* %492), !dbg !5898
  br label %for.inc942, !dbg !5899

for.inc942:                                       ; preds = %for.body927
  %493 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5884
  %next_bb943 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %493, i32 0, i32 6, !dbg !5884
  %494 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb943, align 8, !dbg !5884
  store %struct.basic_block_def* %494, %struct.basic_block_def** %bb, align 8, !dbg !5884
  br label %for.cond921, !dbg !5884, !llvm.loop !5900

for.end944:                                       ; preds = %for.cond921
  %495 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5902
  %tobool945 = icmp ne i32 %495, 0, !dbg !5902
  br i1 %tobool945, label %if.then946, label %if.end993, !dbg !5904

if.then946:                                       ; preds = %for.end944
  %call947 = call %struct.rtx_def* @get_insns(), !dbg !5905
  store %struct.rtx_def* %call947, %struct.rtx_def** %insn, align 8, !dbg !5907
  br label %for.cond948, !dbg !5908

for.cond948:                                      ; preds = %for.inc987, %if.then946
  %496 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5909
  %tobool949 = icmp ne %struct.rtx_def* %496, null, !dbg !5911
  br i1 %tobool949, label %for.body950, label %for.end992, !dbg !5911

for.body950:                                      ; preds = %for.cond948
  %497 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5912
  %498 = bitcast %struct.rtx_def* %497 to i32*, !dbg !5912
  %bf.load951 = load i32, i32* %498, align 8, !dbg !5912
  %bf.clear952 = and i32 %bf.load951, 65535, !dbg !5912
  %cmp953 = icmp eq i32 %bf.clear952, 7, !dbg !5912
  br i1 %cmp953, label %if.then955, label %if.end986, !dbg !5914

if.then955:                                       ; preds = %for.body950
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_loc, metadata !5915, metadata !DIExpression()), !dbg !5917
  %499 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5918
  %u956 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %499, i32 0, i32 1, !dbg !5918
  %fld957 = bitcast %union.u* %u956 to [1 x %union.rtunion_def]*, !dbg !5918
  %arrayidx958 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld957, i64 0, i64 5, !dbg !5918
  %rt_rtx959 = bitcast %union.rtunion_def* %arrayidx958 to %struct.rtx_def**, !dbg !5918
  %500 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx959, align 8, !dbg !5918
  %u960 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %500, i32 0, i32 1, !dbg !5918
  %fld961 = bitcast %union.u* %u960 to [1 x %union.rtunion_def]*, !dbg !5918
  %arrayidx962 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld961, i64 0, i64 1, !dbg !5918
  %rt_rtx963 = bitcast %union.rtunion_def* %arrayidx962 to %struct.rtx_def**, !dbg !5918
  %501 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx963, align 8, !dbg !5918
  store %struct.rtx_def* %501, %struct.rtx_def** %old_loc, align 8, !dbg !5917
  %502 = load %struct.rtx_def*, %struct.rtx_def** %old_loc, align 8, !dbg !5919
  %503 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5920
  %504 = bitcast %struct.bitmap_head_def* %503 to i8*, !dbg !5921
  %call964 = call %struct.rtx_def* @simplify_replace_fn_rtx(%struct.rtx_def* %502, %struct.rtx_def* null, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i8*)* @adjust_cleared_regs, i8* %504), !dbg !5922
  %505 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5923
  %u965 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %505, i32 0, i32 1, !dbg !5923
  %fld966 = bitcast %union.u* %u965 to [1 x %union.rtunion_def]*, !dbg !5923
  %arrayidx967 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld966, i64 0, i64 5, !dbg !5923
  %rt_rtx968 = bitcast %union.rtunion_def* %arrayidx967 to %struct.rtx_def**, !dbg !5923
  %506 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx968, align 8, !dbg !5923
  %u969 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %506, i32 0, i32 1, !dbg !5923
  %fld970 = bitcast %union.u* %u969 to [1 x %union.rtunion_def]*, !dbg !5923
  %arrayidx971 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld970, i64 0, i64 1, !dbg !5923
  %rt_rtx972 = bitcast %union.rtunion_def* %arrayidx971 to %struct.rtx_def**, !dbg !5923
  store %struct.rtx_def* %call964, %struct.rtx_def** %rt_rtx972, align 8, !dbg !5924
  %507 = load %struct.rtx_def*, %struct.rtx_def** %old_loc, align 8, !dbg !5925
  %508 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5927
  %u973 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %508, i32 0, i32 1, !dbg !5927
  %fld974 = bitcast %union.u* %u973 to [1 x %union.rtunion_def]*, !dbg !5927
  %arrayidx975 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld974, i64 0, i64 5, !dbg !5927
  %rt_rtx976 = bitcast %union.rtunion_def* %arrayidx975 to %struct.rtx_def**, !dbg !5927
  %509 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx976, align 8, !dbg !5927
  %u977 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %509, i32 0, i32 1, !dbg !5927
  %fld978 = bitcast %union.u* %u977 to [1 x %union.rtunion_def]*, !dbg !5927
  %arrayidx979 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld978, i64 0, i64 1, !dbg !5927
  %rt_rtx980 = bitcast %union.rtunion_def* %arrayidx979 to %struct.rtx_def**, !dbg !5927
  %510 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx980, align 8, !dbg !5927
  %cmp981 = icmp ne %struct.rtx_def* %507, %510, !dbg !5928
  br i1 %cmp981, label %if.then983, label %if.end985, !dbg !5929

if.then983:                                       ; preds = %if.then955
  %511 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5930
  %call984 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %511), !dbg !5931
  br label %if.end985, !dbg !5931

if.end985:                                        ; preds = %if.then983, %if.then955
  br label %if.end986, !dbg !5932

if.end986:                                        ; preds = %if.end985, %for.body950
  br label %for.inc987, !dbg !5912

for.inc987:                                       ; preds = %if.end986
  %512 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5933
  %u988 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %512, i32 0, i32 1, !dbg !5933
  %fld989 = bitcast %union.u* %u988 to [1 x %union.rtunion_def]*, !dbg !5933
  %arrayidx990 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld989, i64 0, i64 2, !dbg !5933
  %rt_rtx991 = bitcast %union.rtunion_def* %arrayidx990 to %struct.rtx_def**, !dbg !5933
  %513 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx991, align 8, !dbg !5933
  store %struct.rtx_def* %513, %struct.rtx_def** %insn, align 8, !dbg !5934
  br label %for.cond948, !dbg !5935, !llvm.loop !5936

for.end992:                                       ; preds = %for.cond948
  br label %if.end993, !dbg !5937

if.end993:                                        ; preds = %for.end992, %for.end944
  br label %if.end994, !dbg !5938

if.end994:                                        ; preds = %if.end993, %for.end914
  %514 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5939
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %514), !dbg !5939
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !5939
  br label %out995, !dbg !5939

out995:                                           ; preds = %if.end994, %if.then460
  call void @llvm.dbg.label(metadata !5940), !dbg !5941
  call void @end_alias_analysis(), !dbg !5942
  %515 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !5943
  %516 = bitcast %struct.equivalence* %515 to i8*, !dbg !5943
  call void @free(i8* %516), !dbg !5944
  %517 = load i32, i32* @recorded_label_ref, align 4, !dbg !5945
  ret i32 %517, !dbg !5946
}

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_reg_equiv_invariant_const() #0 !dbg !5947 {
entry:
  %i = alloca i32, align 4
  %invariant_p = alloca i8, align 1
  %list = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %constant = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5948, metadata !DIExpression()), !dbg !5949
  call void @llvm.dbg.declare(metadata i8* %invariant_p, metadata !5950, metadata !DIExpression()), !dbg !5951
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list, metadata !5952, metadata !DIExpression()), !dbg !5953
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5954, metadata !DIExpression()), !dbg !5955
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5956, metadata !DIExpression()), !dbg !5957
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %constant, metadata !5958, metadata !DIExpression()), !dbg !5959
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5960, metadata !DIExpression()), !dbg !5961
  store i32 53, i32* %i, align 4, !dbg !5962
  br label %for.cond, !dbg !5964

for.cond:                                         ; preds = %for.inc52, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5965
  %1 = load i32, i32* @reg_equiv_init_size, align 4, !dbg !5967
  %cmp = icmp slt i32 %0, %1, !dbg !5968
  br i1 %cmp, label %for.body, label %for.end53, !dbg !5969

for.body:                                         ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %constant, align 8, !dbg !5970
  store i8 0, i8* %invariant_p, align 1, !dbg !5972
  %2 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !5973
  %3 = load i32, i32* %i, align 4, !dbg !5975
  %idxprom = sext i32 %3 to i64, !dbg !5973
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idxprom, !dbg !5973
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5973
  store %struct.rtx_def* %4, %struct.rtx_def** %list, align 8, !dbg !5976
  br label %for.cond1, !dbg !5977

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !5978
  %cmp2 = icmp ne %struct.rtx_def* %5, null, !dbg !5980
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !5981

for.body3:                                        ; preds = %for.cond1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !5982
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5982
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5982
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5982
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !5982
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5982
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !5984
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5985
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %8, i32 3, %struct.rtx_def* null), !dbg !5986
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !5987
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5988
  %cmp5 = icmp eq %struct.rtx_def* %9, null, !dbg !5990
  br i1 %cmp5, label %if.then, label %if.end, !dbg !5991

if.then:                                          ; preds = %for.body3
  br label %for.inc, !dbg !5992

if.end:                                           ; preds = %for.body3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5993
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5993
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !5993
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 0, !dbg !5993
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !5993
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !5993
  store %struct.rtx_def* %11, %struct.rtx_def** %x, align 8, !dbg !5994
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5995
  %call10 = call i32 @function_invariant_p(%struct.rtx_def* %12), !dbg !5997
  %tobool = icmp ne i32 %call10, 0, !dbg !5997
  br i1 %tobool, label %lor.lhs.false, label %if.then18, !dbg !5998

lor.lhs.false:                                    ; preds = %if.end
  %13 = load i32, i32* @flag_pic, align 4, !dbg !5999
  %tobool11 = icmp ne i32 %13, 0, !dbg !5999
  br i1 %tobool11, label %lor.lhs.false12, label %if.then18, !dbg !6000

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6001
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6001
  %bf.load = load i32, i32* %15, align 8, !dbg !6001
  %bf.clear = and i32 %bf.load, 65535, !dbg !6001
  %idxprom13 = sext i32 %bf.clear to i64, !dbg !6001
  %arrayidx14 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom13, !dbg !6001
  %16 = load i32, i32* %arrayidx14, align 4, !dbg !6001
  %cmp15 = icmp eq i32 %16, 9, !dbg !6001
  br i1 %cmp15, label %land.lhs.true, label %if.end43, !dbg !6002

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6003
  %call16 = call zeroext i8 @legitimate_pic_operand_p(%struct.rtx_def* %17), !dbg !6003
  %conv = zext i8 %call16 to i32, !dbg !6003
  %tobool17 = icmp ne i32 %conv, 0, !dbg !6003
  br i1 %tobool17, label %if.then18, label %if.end43, !dbg !6004

if.then18:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6005
  %call19 = call i32 @memory_operand(%struct.rtx_def* %18, i32 0), !dbg !6008
  %tobool20 = icmp ne i32 %call19, 0, !dbg !6008
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !6009

if.then21:                                        ; preds = %if.then18
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6010
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !6010
  %bf.load22 = load i32, i32* %20, align 8, !dbg !6010
  %bf.lshr = lshr i32 %bf.load22, 26, !dbg !6010
  %bf.clear23 = and i32 %bf.lshr, 1, !dbg !6010
  %conv24 = trunc i32 %bf.clear23 to i8, !dbg !6010
  store i8 %conv24, i8* %invariant_p, align 1, !dbg !6011
  br label %if.end42, !dbg !6012

if.else:                                          ; preds = %if.then18
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6013
  %call25 = call i32 @function_invariant_p(%struct.rtx_def* %21), !dbg !6015
  %tobool26 = icmp ne i32 %call25, 0, !dbg !6015
  br i1 %tobool26, label %if.then27, label %if.end41, !dbg !6016

if.then27:                                        ; preds = %if.else
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6017
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6017
  %bf.load28 = load i32, i32* %23, align 8, !dbg !6017
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !6017
  %cmp30 = icmp eq i32 %bf.clear29, 49, !dbg !6020
  br i1 %cmp30, label %if.then38, label %lor.lhs.false32, !dbg !6021

lor.lhs.false32:                                  ; preds = %if.then27
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6022
  %25 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !6023
  %cmp33 = icmp eq %struct.rtx_def* %24, %25, !dbg !6024
  br i1 %cmp33, label %if.then38, label %lor.lhs.false35, !dbg !6025

lor.lhs.false35:                                  ; preds = %lor.lhs.false32
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6026
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !6027
  %cmp36 = icmp eq %struct.rtx_def* %26, %27, !dbg !6028
  br i1 %cmp36, label %if.then38, label %if.else39, !dbg !6029

if.then38:                                        ; preds = %lor.lhs.false35, %lor.lhs.false32, %if.then27
  store i8 1, i8* %invariant_p, align 1, !dbg !6030
  br label %if.end40, !dbg !6031

if.else39:                                        ; preds = %lor.lhs.false35
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6032
  store %struct.rtx_def* %28, %struct.rtx_def** %constant, align 8, !dbg !6033
  br label %if.end40

if.end40:                                         ; preds = %if.else39, %if.then38
  br label %if.end41, !dbg !6034

if.end41:                                         ; preds = %if.end40, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then21
  br label %if.end43, !dbg !6035

if.end43:                                         ; preds = %if.end42, %land.lhs.true, %lor.lhs.false12
  br label %for.inc, !dbg !6036

for.inc:                                          ; preds = %if.end43, %if.then
  %29 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !6037
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6037
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !6037
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !6037
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !6037
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !6037
  store %struct.rtx_def* %30, %struct.rtx_def** %list, align 8, !dbg !6038
  br label %for.cond1, !dbg !6039, !llvm.loop !6040

for.end:                                          ; preds = %for.cond1
  %31 = load i8, i8* %invariant_p, align 1, !dbg !6042
  %32 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !6043
  %33 = load i32, i32* %i, align 4, !dbg !6044
  %idxprom48 = sext i32 %33 to i64, !dbg !6043
  %arrayidx49 = getelementptr inbounds i8, i8* %32, i64 %idxprom48, !dbg !6043
  store i8 %31, i8* %arrayidx49, align 1, !dbg !6045
  %34 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !6046
  %35 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !6047
  %36 = load i32, i32* %i, align 4, !dbg !6048
  %idxprom50 = sext i32 %36 to i64, !dbg !6047
  %arrayidx51 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 %idxprom50, !dbg !6047
  store %struct.rtx_def* %34, %struct.rtx_def** %arrayidx51, align 8, !dbg !6049
  br label %for.inc52, !dbg !6050

for.inc52:                                        ; preds = %for.end
  %37 = load i32, i32* %i, align 4, !dbg !6051
  %inc = add nsw i32 %37, 1, !dbg !6051
  store i32 %inc, i32* %i, align 4, !dbg !6051
  br label %for.cond, !dbg !6052, !llvm.loop !6053

for.end53:                                        ; preds = %for.cond
  ret void, !dbg !6055
}

declare dso_local void @rebuild_jump_labels(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local zeroext i8 @purge_all_dead_edges() #2

declare dso_local void @timevar_pop_1(i32) #2

declare dso_local i32 @flow_loops_find(%struct.loops*) #2

declare dso_local void @record_loop_exits() #2

declare dso_local zeroext i8 @ira_build(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @too_high_register_pressure_p() #0 !dbg !6056 {
entry:
  %retval = alloca i8, align 1
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6057, metadata !DIExpression()), !dbg !6058
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !6059, metadata !DIExpression()), !dbg !6060
  store i32 0, i32* %i, align 4, !dbg !6061
  br label %for.cond, !dbg !6063

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6064
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !6066
  %cmp = icmp slt i32 %0, %1, !dbg !6067
  br i1 %cmp, label %for.body, label %for.end, !dbg !6068

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !6069
  %idxprom = sext i32 %2 to i64, !dbg !6071
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !6071
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6071
  store i32 %3, i32* %cover_class, align 4, !dbg !6072
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !6073
  %reg_pressure = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %4, i32 0, i32 11, !dbg !6075
  %5 = load i32, i32* %cover_class, align 4, !dbg !6076
  %idxprom1 = zext i32 %5 to i64, !dbg !6073
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure, i64 0, i64 %idxprom1, !dbg !6073
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !6073
  %cmp3 = icmp sgt i32 %6, 10000, !dbg !6077
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6078

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !6079
  br label %return, !dbg !6079

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6080

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !6081
  %inc = add nsw i32 %7, 1, !dbg !6081
  store i32 %inc, i32* %i, align 4, !dbg !6081
  br label %for.cond, !dbg !6082, !llvm.loop !6083

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6085
  br label %return, !dbg !6085

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !6086
  ret i8 %8, !dbg !6086
}

declare dso_local void @ira_color() #2

declare dso_local void @ira_emit(i8 zeroext) #2

declare dso_local void @ira_initiate_assign() #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_reg_info(i32 %old_size) #0 !dbg !6087 {
entry:
  %old_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  store i32 %old_size, i32* %old_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %old_size.addr, metadata !6090, metadata !DIExpression()), !dbg !6091
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6092, metadata !DIExpression()), !dbg !6093
  call void @llvm.dbg.declare(metadata i32* %size, metadata !6094, metadata !DIExpression()), !dbg !6095
  %call = call i32 @max_reg_num(), !dbg !6096
  store i32 %call, i32* %size, align 4, !dbg !6095
  %call1 = call zeroext i8 @resize_reg_info(), !dbg !6097
  %0 = load i32, i32* %old_size.addr, align 4, !dbg !6098
  store i32 %0, i32* %i, align 4, !dbg !6100
  br label %for.cond, !dbg !6101

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6102
  %2 = load i32, i32* %size, align 4, !dbg !6104
  %cmp = icmp slt i32 %1, %2, !dbg !6105
  br i1 %cmp, label %for.body, label %for.end, !dbg !6106

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !6107
  call void @setup_reg_classes(i32 %3, i32 13, i32 26, i32 13), !dbg !6108
  br label %for.inc, !dbg !6108

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !6109
  %inc = add nsw i32 %4, 1, !dbg !6109
  store i32 %inc, i32* %i, align 4, !dbg !6109
  br label %for.cond, !dbg !6110, !llvm.loop !6111

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6113
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_preferred_alternate_classes_for_new_pseudos(i32 %start) #0 !dbg !6114 {
entry:
  %start.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %old_regno = alloca i32, align 4
  %max_regno = alloca i32, align 4
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !6115, metadata !DIExpression()), !dbg !6116
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6117, metadata !DIExpression()), !dbg !6118
  call void @llvm.dbg.declare(metadata i32* %old_regno, metadata !6119, metadata !DIExpression()), !dbg !6120
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !6121, metadata !DIExpression()), !dbg !6122
  %call = call i32 @max_reg_num(), !dbg !6123
  store i32 %call, i32* %max_regno, align 4, !dbg !6122
  %0 = load i32, i32* %start.addr, align 4, !dbg !6124
  store i32 %0, i32* %i, align 4, !dbg !6126
  br label %for.cond, !dbg !6127

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6128
  %2 = load i32, i32* %max_regno, align 4, !dbg !6130
  %cmp = icmp slt i32 %1, %2, !dbg !6131
  br i1 %cmp, label %for.body, label %for.end, !dbg !6132

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !6133
  %4 = load i32, i32* %i, align 4, !dbg !6133
  %idxprom = sext i32 %4 to i64, !dbg !6133
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idxprom, !dbg !6133
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !6133
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6133
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6133
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6133
  %rt_uint = bitcast %union.rtunion_def* %arrayidx1 to i32*, !dbg !6133
  %6 = load i32, i32* %rt_uint, align 8, !dbg !6133
  store i32 %6, i32* %old_regno, align 4, !dbg !6135
  %7 = load i32, i32* %i, align 4, !dbg !6136
  %8 = load i32, i32* %old_regno, align 4, !dbg !6137
  %call2 = call i32 @reg_preferred_class(i32 %8), !dbg !6138
  %9 = load i32, i32* %old_regno, align 4, !dbg !6139
  %call3 = call i32 @reg_alternate_class(i32 %9), !dbg !6140
  %10 = load i32, i32* %old_regno, align 4, !dbg !6141
  %call4 = call i32 @reg_cover_class(i32 %10), !dbg !6142
  call void @setup_reg_classes(i32 %7, i32 %call2, i32 %call3, i32 %call4), !dbg !6143
  %11 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !6144
  %cmp5 = icmp sgt i32 %11, 2, !dbg !6146
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !6147

land.lhs.true:                                    ; preds = %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6148
  %cmp6 = icmp ne %struct._IO_FILE* %12, null, !dbg !6149
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6150

if.then:                                          ; preds = %land.lhs.true
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6151
  %14 = load i32, i32* %i, align 4, !dbg !6152
  %15 = load i32, i32* %old_regno, align 4, !dbg !6153
  %call7 = call i32 @reg_preferred_class(i32 %15), !dbg !6154
  %idxprom8 = zext i32 %call7 to i64, !dbg !6155
  %arrayidx9 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom8, !dbg !6155
  %16 = load i8*, i8** %arrayidx9, align 8, !dbg !6155
  %17 = load i32, i32* %old_regno, align 4, !dbg !6156
  %call10 = call i32 @reg_alternate_class(i32 %17), !dbg !6157
  %idxprom11 = zext i32 %call10 to i64, !dbg !6158
  %arrayidx12 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom11, !dbg !6158
  %18 = load i8*, i8** %arrayidx12, align 8, !dbg !6158
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.45, i64 0, i64 0), i32 %14, i8* %16, i8* %18), !dbg !6159
  br label %if.end, !dbg !6159

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !6160

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !6161
  %inc = add nsw i32 %19, 1, !dbg !6161
  store i32 %inc, i32* %i, align 4, !dbg !6161
  br label %for.cond, !dbg !6162, !llvm.loop !6163

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6165
}

declare dso_local void @ira_flattening(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_allocno_assignment_flags() #0 !dbg !6166 {
entry:
  %hard_regno = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !6171, metadata !DIExpression()), !dbg !6176
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !6177
  br label %for.cond, !dbg !6177

for.cond:                                         ; preds = %lor.end, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !6179
  %tobool = icmp ne i8 %call, 0, !dbg !6177
  br i1 %tobool, label %for.body, label %for.end, !dbg !6177

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6181
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !6181
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !6181
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !6181
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6181
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6181
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6181
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6184

if.then:                                          ; preds = %for.body
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6185
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %1), !dbg !6186
  br label %if.end, !dbg !6186

if.end:                                           ; preds = %if.then, %for.body
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6187
  %hard_regno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 3, !dbg !6187
  %3 = load i32, i32* %hard_regno2, align 4, !dbg !6187
  store i32 %3, i32* %hard_regno, align 4, !dbg !6188
  %4 = load i32, i32* %hard_regno, align 4, !dbg !6189
  %cmp = icmp sge i32 %4, 0, !dbg !6190
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6191

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6192
  %mem_optimized_dest_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 31, !dbg !6192
  %bf.load3 = load i16, i16* %mem_optimized_dest_p, align 4, !dbg !6192
  %bf.clear4 = and i16 %bf.load3, 1, !dbg !6192
  %bf.cast5 = zext i16 %bf.clear4 to i32, !dbg !6192
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !6192
  br i1 %tobool6, label %lor.end, label %lor.rhs, !dbg !6193

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6194
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 12, !dbg !6194
  %7 = load i32, i32* %memory_cost, align 4, !dbg !6194
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6195
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 10, !dbg !6195
  %9 = load i32, i32* %cover_class_cost, align 4, !dbg !6195
  %sub = sub nsw i32 %7, %9, !dbg !6196
  %cmp7 = icmp slt i32 %sub, 0, !dbg !6197
  br label %lor.end, !dbg !6193

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.end
  %10 = phi i1 [ true, %lor.lhs.false ], [ true, %if.end ], [ %cmp7, %lor.rhs ]
  %lor.ext = zext i1 %10 to i32, !dbg !6193
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6198
  %assigned_p8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 31, !dbg !6198
  %12 = trunc i32 %lor.ext to i16, !dbg !6199
  %bf.load9 = load i16, i16* %assigned_p8, align 4, !dbg !6199
  %bf.value = and i16 %12, 1, !dbg !6199
  %bf.shl = shl i16 %bf.value, 8, !dbg !6199
  %bf.clear10 = and i16 %bf.load9, -257, !dbg !6199
  %bf.set = or i16 %bf.clear10, %bf.shl, !dbg !6199
  store i16 %bf.set, i16* %assigned_p8, align 4, !dbg !6199
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !6199
  br label %for.cond, !dbg !6179, !llvm.loop !6200

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6202
}

declare dso_local void @ira_reassign_conflict_allocnos(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_reg_renumber() #0 !dbg !6203 {
entry:
  %regno = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6204, metadata !DIExpression()), !dbg !6205
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !6206, metadata !DIExpression()), !dbg !6207
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6208, metadata !DIExpression()), !dbg !6209
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !6210, metadata !DIExpression()), !dbg !6211
  store i32 0, i32* @caller_save_needed, align 4, !dbg !6212
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !6213
  br label %for.cond, !dbg !6213

for.cond:                                         ; preds = %if.end15, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !6215
  %tobool = icmp ne i8 %call, 0, !dbg !6213
  br i1 %tobool, label %for.body, label %for.end, !dbg !6213

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6217
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !6217
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !6217
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !6217
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6217
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6217
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6217
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6220

if.then:                                          ; preds = %for.body
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6221
  %assigned_p2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 31, !dbg !6221
  %bf.load3 = load i16, i16* %assigned_p2, align 4, !dbg !6222
  %bf.clear4 = and i16 %bf.load3, -257, !dbg !6222
  %bf.set = or i16 %bf.clear4, 256, !dbg !6222
  store i16 %bf.set, i16* %assigned_p2, align 4, !dbg !6222
  br label %if.end, !dbg !6221

if.end:                                           ; preds = %if.then, %for.body
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6223
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %2), !dbg !6224
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6225
  %hard_regno5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 3, !dbg !6225
  %4 = load i32, i32* %hard_regno5, align 4, !dbg !6225
  store i32 %4, i32* %hard_regno, align 4, !dbg !6226
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6227
  %reg = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 4, !dbg !6227
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6227
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !6227
  store i32 %call6, i32* %regno, align 4, !dbg !6228
  %7 = load i32, i32* %hard_regno, align 4, !dbg !6229
  %cmp = icmp slt i32 %7, 0, !dbg !6230
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6229

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !6229

cond.false:                                       ; preds = %if.end
  %8 = load i32, i32* %hard_regno, align 4, !dbg !6231
  br label %cond.end, !dbg !6229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %8, %cond.false ], !dbg !6229
  %conv = trunc i32 %cond to i16, !dbg !6232
  %9 = load i16*, i16** @reg_renumber, align 8, !dbg !6233
  %10 = load i32, i32* %regno, align 4, !dbg !6234
  %idxprom = sext i32 %10 to i64, !dbg !6233
  %arrayidx = getelementptr inbounds i16, i16* %9, i64 %idxprom, !dbg !6233
  store i16 %conv, i16* %arrayidx, align 2, !dbg !6235
  %11 = load i32, i32* %hard_regno, align 4, !dbg !6236
  %cmp7 = icmp sge i32 %11, 0, !dbg !6238
  br i1 %cmp7, label %land.lhs.true, label %if.end15, !dbg !6239

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6240
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 30, !dbg !6240
  %13 = load i32, i32* %calls_crossed_num, align 8, !dbg !6240
  %cmp9 = icmp ne i32 %13, 0, !dbg !6241
  br i1 %cmp9, label %land.lhs.true11, label %if.end15, !dbg !6242

land.lhs.true11:                                  ; preds = %land.lhs.true
  %14 = load i32, i32* %hard_regno, align 4, !dbg !6243
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6244
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 2, !dbg !6244
  %16 = load i32, i32* %mode, align 8, !dbg !6244
  %17 = load i64, i64* @call_used_reg_set, align 8, !dbg !6245
  %call12 = call zeroext i8 @ira_hard_reg_not_in_set_p(i32 %14, i32 %16, i64 %17), !dbg !6246
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6246
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6247

if.then14:                                        ; preds = %land.lhs.true11
  store i32 1, i32* @caller_save_needed, align 4, !dbg !6248
  br label %if.end15, !dbg !6250

if.end15:                                         ; preds = %if.then14, %land.lhs.true11, %land.lhs.true, %cond.end
  br label %for.cond, !dbg !6215, !llvm.loop !6251

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6253
}

; Function Attrs: noinline nounwind uwtable
define internal void @calculate_allocation_cost() #0 !dbg !6254 {
entry:
  %hard_regno = alloca i32, align 4
  %cost = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !6255, metadata !DIExpression()), !dbg !6256
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6257, metadata !DIExpression()), !dbg !6258
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6259, metadata !DIExpression()), !dbg !6260
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !6261, metadata !DIExpression()), !dbg !6262
  store i32 0, i32* @ira_mem_cost, align 4, !dbg !6263
  store i32 0, i32* @ira_reg_cost, align 4, !dbg !6264
  store i32 0, i32* @ira_overall_cost, align 4, !dbg !6265
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !6266
  br label %for.cond, !dbg !6266

for.cond:                                         ; preds = %if.end12, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !6268
  %tobool = icmp ne i8 %call, 0, !dbg !6266
  br i1 %tobool, label %for.body, label %for.end, !dbg !6266

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6270
  %hard_regno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 3, !dbg !6270
  %1 = load i32, i32* %hard_regno1, align 4, !dbg !6270
  store i32 %1, i32* %hard_regno, align 4, !dbg !6272
  %2 = load i32, i32* %hard_regno, align 4, !dbg !6273
  %cmp = icmp slt i32 %2, 0, !dbg !6275
  br i1 %cmp, label %if.then, label %if.else, !dbg !6276

if.then:                                          ; preds = %for.body
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6277
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 12, !dbg !6277
  %4 = load i32, i32* %memory_cost, align 4, !dbg !6277
  store i32 %4, i32* %cost, align 4, !dbg !6279
  %5 = load i32, i32* %cost, align 4, !dbg !6280
  %6 = load i32, i32* @ira_mem_cost, align 4, !dbg !6281
  %add = add nsw i32 %6, %5, !dbg !6281
  store i32 %add, i32* @ira_mem_cost, align 4, !dbg !6281
  br label %if.end12, !dbg !6282

if.else:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6283
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 33, !dbg !6283
  %8 = load i32*, i32** %hard_reg_costs, align 8, !dbg !6283
  %cmp2 = icmp ne i32* %8, null, !dbg !6285
  br i1 %cmp2, label %if.then3, label %if.else10, !dbg !6286

if.then3:                                         ; preds = %if.else
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6287
  %hard_reg_costs4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 33, !dbg !6287
  %10 = load i32*, i32** %hard_reg_costs4, align 8, !dbg !6287
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6289
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 9, !dbg !6289
  %12 = load i32, i32* %cover_class, align 8, !dbg !6289
  %idxprom = zext i32 %12 to i64, !dbg !6290
  %arrayidx = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom, !dbg !6290
  %13 = load i32, i32* %hard_regno, align 4, !dbg !6291
  %idxprom5 = sext i32 %13 to i64, !dbg !6290
  %arrayidx6 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx, i64 0, i64 %idxprom5, !dbg !6290
  %14 = load i16, i16* %arrayidx6, align 2, !dbg !6290
  %idxprom7 = sext i16 %14 to i64, !dbg !6287
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i64 %idxprom7, !dbg !6287
  %15 = load i32, i32* %arrayidx8, align 4, !dbg !6287
  store i32 %15, i32* %cost, align 4, !dbg !6292
  %16 = load i32, i32* %cost, align 4, !dbg !6293
  %17 = load i32, i32* @ira_reg_cost, align 4, !dbg !6294
  %add9 = add nsw i32 %17, %16, !dbg !6294
  store i32 %add9, i32* @ira_reg_cost, align 4, !dbg !6294
  br label %if.end, !dbg !6295

if.else10:                                        ; preds = %if.else
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6296
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 10, !dbg !6296
  %19 = load i32, i32* %cover_class_cost, align 4, !dbg !6296
  store i32 %19, i32* %cost, align 4, !dbg !6298
  %20 = load i32, i32* %cost, align 4, !dbg !6299
  %21 = load i32, i32* @ira_reg_cost, align 4, !dbg !6300
  %add11 = add nsw i32 %21, %20, !dbg !6300
  store i32 %add11, i32* @ira_reg_cost, align 4, !dbg !6300
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then3
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  %22 = load i32, i32* %cost, align 4, !dbg !6301
  %23 = load i32, i32* @ira_overall_cost, align 4, !dbg !6302
  %add13 = add nsw i32 %23, %22, !dbg !6302
  store i32 %add13, i32* @ira_overall_cost, align 4, !dbg !6302
  br label %for.cond, !dbg !6268, !llvm.loop !6303

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !6305
  %cmp14 = icmp sgt i32 %24, 0, !dbg !6307
  br i1 %cmp14, label %land.lhs.true, label %if.end19, !dbg !6308

land.lhs.true:                                    ; preds = %for.end
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6309
  %cmp15 = icmp ne %struct._IO_FILE* %25, null, !dbg !6310
  br i1 %cmp15, label %if.then16, label %if.end19, !dbg !6311

if.then16:                                        ; preds = %land.lhs.true
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6312
  %27 = load i32, i32* @ira_overall_cost, align 4, !dbg !6314
  %28 = load i32, i32* @ira_reg_cost, align 4, !dbg !6315
  %29 = load i32, i32* @ira_mem_cost, align 4, !dbg !6316
  %30 = load i32, i32* @ira_load_cost, align 4, !dbg !6317
  %31 = load i32, i32* @ira_store_cost, align 4, !dbg !6318
  %32 = load i32, i32* @ira_shuffle_cost, align 4, !dbg !6319
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.46, i64 0, i64 0), i32 %27, i32 %28, i32 %29, i32 %30, i32 %31, i32 %32), !dbg !6320
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6321
  %34 = load i32, i32* @ira_move_loops_num, align 4, !dbg !6322
  %35 = load i32, i32* @ira_additional_jumps_num, align 4, !dbg !6323
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.47, i64 0, i64 0), i32 %34, i32 %35), !dbg !6324
  br label %if.end19, !dbg !6325

if.end19:                                         ; preds = %if.then16, %land.lhs.true, %for.end
  ret void, !dbg !6326
}

declare dso_local i32 @delete_trivially_dead_insns(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_gc_safe_grow(%struct.VEC_rtx_gc** %vec_, i32 %size_) #0 !dbg !6327 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !6331, metadata !DIExpression()), !dbg !6332
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !6333, metadata !DIExpression()), !dbg !6332
  %0 = load i32, i32* %size_.addr, align 4, !dbg !6332
  %cmp = icmp sge i32 %0, 0, !dbg !6332
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6332

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %2 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %1, align 8, !dbg !6332
  %tobool = icmp ne %struct.VEC_rtx_gc* %2, null, !dbg !6332
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6332

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %3, align 8, !dbg !6332
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %4, i32 0, i32 0, !dbg !6332
  br label %cond.end, !dbg !6332

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !6332

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6332
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !6332
  %5 = load i32, i32* %size_.addr, align 4, !dbg !6332
  %cmp1 = icmp ule i32 %call, %5, !dbg !6332
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !6334
  %land.ext = zext i1 %6 to i32, !dbg !6332
  %7 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %8 = load i32, i32* %size_.addr, align 4, !dbg !6332
  %9 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %10 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %9, align 8, !dbg !6332
  %tobool2 = icmp ne %struct.VEC_rtx_gc* %10, null, !dbg !6332
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !6332

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %12 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %11, align 8, !dbg !6332
  %tobool4 = icmp ne %struct.VEC_rtx_gc* %12, null, !dbg !6332
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !6332

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %14 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %13, align 8, !dbg !6332
  %base6 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %14, i32 0, i32 0, !dbg !6332
  br label %cond.end8, !dbg !6332

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !6332

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_rtx_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !6332
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %cond9, i32 0, i32 0, !dbg !6332
  %15 = load i32, i32* %num, align 8, !dbg !6332
  br label %cond.end11, !dbg !6332

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !6332

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !6332
  %sub = sub nsw i32 %8, %cond12, !dbg !6332
  %call13 = call i32 @VEC_rtx_gc_reserve_exact(%struct.VEC_rtx_gc** %7, i32 %sub), !dbg !6332
  %16 = load i32, i32* %size_.addr, align 4, !dbg !6332
  %17 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %18 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %17, align 8, !dbg !6332
  %tobool14 = icmp ne %struct.VEC_rtx_gc* %18, null, !dbg !6332
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !6332

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !6332
  %20 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %19, align 8, !dbg !6332
  %base16 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %20, i32 0, i32 0, !dbg !6332
  br label %cond.end18, !dbg !6332

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !6332

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_rtx_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !6332
  %num20 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %cond19, i32 0, i32 0, !dbg !6332
  store i32 %16, i32* %num20, align 8, !dbg !6332
  ret void, !dbg !6332
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_address(%struct.VEC_rtx_base* %vec_) #0 !dbg !6335 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !6339, metadata !DIExpression()), !dbg !6340
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6340
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !6340
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6340

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !6340
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 2, !dbg !6340
  %arraydecay = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 0, !dbg !6340
  br label %cond.end, !dbg !6340

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !6340
  ret %struct.rtx_def** %cond, !dbg !6340
}

declare dso_local void @regstat_free_n_sets_and_refs() #2

declare dso_local void @regstat_free_ri() #2

declare dso_local void @allocate_initial_values(%struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fix_reg_equiv_init() #0 !dbg !6341 {
entry:
  %max_regno = alloca i32, align 4
  %i = alloca i32, align 4
  %new_regno = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !6342, metadata !DIExpression()), !dbg !6343
  %call = call i32 @max_reg_num(), !dbg !6344
  store i32 %call, i32* %max_regno, align 4, !dbg !6343
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6345, metadata !DIExpression()), !dbg !6346
  call void @llvm.dbg.declare(metadata i32* %new_regno, metadata !6347, metadata !DIExpression()), !dbg !6348
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6349, metadata !DIExpression()), !dbg !6350
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !6351, metadata !DIExpression()), !dbg !6352
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !6353, metadata !DIExpression()), !dbg !6354
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !6357, metadata !DIExpression()), !dbg !6358
  %0 = load i32, i32* @reg_equiv_init_size, align 4, !dbg !6359
  %1 = load i32, i32* %max_regno, align 4, !dbg !6361
  %cmp = icmp slt i32 %0, %1, !dbg !6362
  br i1 %cmp, label %if.then, label %if.end147, !dbg !6363

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6364
  %3 = bitcast %struct.rtx_def** %2 to i8*, !dbg !6364
  %4 = load i32, i32* %max_regno, align 4, !dbg !6364
  %conv = sext i32 %4 to i64, !dbg !6364
  %mul = mul i64 %conv, 8, !dbg !6364
  %call1 = call i8* @ggc_realloc_stat(i8* %3, i64 %mul), !dbg !6364
  %5 = bitcast i8* %call1 to %struct.rtx_def**, !dbg !6366
  store %struct.rtx_def** %5, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6367
  br label %while.cond, !dbg !6368

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32, i32* @reg_equiv_init_size, align 4, !dbg !6369
  %7 = load i32, i32* %max_regno, align 4, !dbg !6370
  %cmp2 = icmp slt i32 %6, %7, !dbg !6371
  br i1 %cmp2, label %while.body, label %while.end, !dbg !6368

while.body:                                       ; preds = %while.cond
  %8 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6372
  %9 = load i32, i32* @reg_equiv_init_size, align 4, !dbg !6373
  %inc = add nsw i32 %9, 1, !dbg !6373
  store i32 %inc, i32* @reg_equiv_init_size, align 4, !dbg !6373
  %idxprom = sext i32 %9 to i64, !dbg !6372
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %8, i64 %idxprom, !dbg !6372
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx, align 8, !dbg !6374
  br label %while.cond, !dbg !6368, !llvm.loop !6375

while.end:                                        ; preds = %while.cond
  store i32 53, i32* %i, align 4, !dbg !6377
  br label %for.cond, !dbg !6379

for.cond:                                         ; preds = %for.inc144, %while.end
  %10 = load i32, i32* %i, align 4, !dbg !6380
  %11 = load i32, i32* @reg_equiv_init_size, align 4, !dbg !6382
  %cmp4 = icmp slt i32 %10, %11, !dbg !6383
  br i1 %cmp4, label %for.body, label %for.end146, !dbg !6384

for.body:                                         ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %prev, align 8, !dbg !6385
  %12 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6387
  %13 = load i32, i32* %i, align 4, !dbg !6388
  %idxprom6 = sext i32 %13 to i64, !dbg !6387
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %12, i64 %idxprom6, !dbg !6387
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8, !dbg !6387
  store %struct.rtx_def* %14, %struct.rtx_def** %x, align 8, !dbg !6389
  br label %for.cond8, !dbg !6390

for.cond8:                                        ; preds = %for.inc, %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6391
  %cmp9 = icmp ne %struct.rtx_def* %15, null, !dbg !6393
  br i1 %cmp9, label %for.body11, label %for.end, !dbg !6394

for.body11:                                       ; preds = %for.cond8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6395
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6395
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6395
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6395
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !6395
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6395
  store %struct.rtx_def* %17, %struct.rtx_def** %next, align 8, !dbg !6397
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6398
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6398
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6398
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !6398
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !6398
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !6398
  store %struct.rtx_def* %19, %struct.rtx_def** %insn, align 8, !dbg !6399
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6400
  %bf.load = load i32, i32* %21, align 8, !dbg !6400
  %bf.clear = and i32 %bf.load, 65535, !dbg !6400
  %cmp17 = icmp eq i32 %bf.clear, 8, !dbg !6400
  br i1 %cmp17, label %cond.true, label %lor.lhs.false, !dbg !6400

lor.lhs.false:                                    ; preds = %for.body11
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6400
  %bf.load19 = load i32, i32* %23, align 8, !dbg !6400
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !6400
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !6400
  br i1 %cmp21, label %cond.true, label %lor.lhs.false23, !dbg !6400

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6400
  %bf.load24 = load i32, i32* %25, align 8, !dbg !6400
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !6400
  %cmp26 = icmp eq i32 %bf.clear25, 9, !dbg !6400
  br i1 %cmp26, label %cond.true, label %lor.lhs.false28, !dbg !6400

lor.lhs.false28:                                  ; preds = %lor.lhs.false23
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !6400
  %bf.load29 = load i32, i32* %27, align 8, !dbg !6400
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !6400
  %cmp31 = icmp eq i32 %bf.clear30, 10, !dbg !6400
  br i1 %cmp31, label %cond.true, label %cond.false51, !dbg !6400

cond.true:                                        ; preds = %lor.lhs.false28, %lor.lhs.false23, %lor.lhs.false, %for.body11
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !6400
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !6400
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 5, !dbg !6400
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !6400
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !6400
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !6400
  %bf.load37 = load i32, i32* %30, align 8, !dbg !6400
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !6400
  %cmp39 = icmp eq i32 %bf.clear38, 23, !dbg !6400
  br i1 %cmp39, label %cond.true41, label %cond.false, !dbg !6400

cond.true41:                                      ; preds = %cond.true
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6400
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !6400
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 5, !dbg !6400
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !6400
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !6400
  br label %cond.end, !dbg !6400

cond.false:                                       ; preds = %cond.true
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6400
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !6400
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !6400
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 5, !dbg !6400
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !6400
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !6400
  %call50 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %33, %struct.rtx_def* %35), !dbg !6400
  br label %cond.end, !dbg !6400

cond.end:                                         ; preds = %cond.false, %cond.true41
  %cond = phi %struct.rtx_def* [ %32, %cond.true41 ], [ %call50, %cond.false ], !dbg !6400
  br label %cond.end52, !dbg !6400

cond.false51:                                     ; preds = %lor.lhs.false28
  br label %cond.end52, !dbg !6400

cond.end52:                                       ; preds = %cond.false51, %cond.end
  %cond53 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false51 ], !dbg !6400
  store %struct.rtx_def* %cond53, %struct.rtx_def** %set, align 8, !dbg !6401
  %36 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6402
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !6402
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !6402
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 0, !dbg !6402
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !6402
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !6402
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !6402
  %bf.load58 = load i32, i32* %38, align 8, !dbg !6402
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !6402
  %cmp60 = icmp eq i32 %bf.clear59, 37, !dbg !6402
  br i1 %cmp60, label %land.lhs.true, label %if.else, !dbg !6404

land.lhs.true:                                    ; preds = %cond.end52
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6405
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6405
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !6405
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !6405
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !6405
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !6405
  %call66 = call i32 @rhs_regno(%struct.rtx_def* %40), !dbg !6405
  %41 = load i32, i32* %i, align 4, !dbg !6406
  %cmp67 = icmp eq i32 %call66, %41, !dbg !6407
  br i1 %cmp67, label %if.then79, label %lor.lhs.false69, !dbg !6408

lor.lhs.false69:                                  ; preds = %land.lhs.true
  %42 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6409
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6409
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !6409
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 0, !dbg !6409
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !6409
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !6409
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !6409
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !6409
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 1, !dbg !6409
  %rt_uint = bitcast %union.rtunion_def* %arrayidx76 to i32*, !dbg !6409
  %44 = load i32, i32* %rt_uint, align 8, !dbg !6409
  %45 = load i32, i32* %i, align 4, !dbg !6410
  %cmp77 = icmp eq i32 %44, %45, !dbg !6411
  br i1 %cmp77, label %if.then79, label %if.else, !dbg !6412

if.then79:                                        ; preds = %lor.lhs.false69, %land.lhs.true
  %46 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6413
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6413
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !6413
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !6413
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !6413
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !6413
  %call84 = call i32 @rhs_regno(%struct.rtx_def* %47), !dbg !6413
  store i32 %call84, i32* %new_regno, align 4, !dbg !6414
  br label %if.end119, !dbg !6415

if.else:                                          ; preds = %lor.lhs.false69, %cond.end52
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6416
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6416
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !6416
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 1, !dbg !6416
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !6416
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !6416
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !6416
  %bf.load89 = load i32, i32* %50, align 8, !dbg !6416
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !6416
  %cmp91 = icmp eq i32 %bf.clear90, 37, !dbg !6416
  br i1 %cmp91, label %land.lhs.true93, label %if.else118, !dbg !6418

land.lhs.true93:                                  ; preds = %if.else
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6419
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !6419
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !6419
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 1, !dbg !6419
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !6419
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !6419
  %call98 = call i32 @rhs_regno(%struct.rtx_def* %52), !dbg !6419
  %53 = load i32, i32* %i, align 4, !dbg !6420
  %cmp99 = icmp eq i32 %call98, %53, !dbg !6421
  br i1 %cmp99, label %if.then112, label %lor.lhs.false101, !dbg !6422

lor.lhs.false101:                                 ; preds = %land.lhs.true93
  %54 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6423
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !6423
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !6423
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 1, !dbg !6423
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !6423
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !6423
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !6423
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !6423
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 1, !dbg !6423
  %rt_uint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*, !dbg !6423
  %56 = load i32, i32* %rt_uint109, align 8, !dbg !6423
  %57 = load i32, i32* %i, align 4, !dbg !6424
  %cmp110 = icmp eq i32 %56, %57, !dbg !6425
  br i1 %cmp110, label %if.then112, label %if.else118, !dbg !6426

if.then112:                                       ; preds = %lor.lhs.false101, %land.lhs.true93
  %58 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6427
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !6427
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !6427
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 1, !dbg !6427
  %rt_rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**, !dbg !6427
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx116, align 8, !dbg !6427
  %call117 = call i32 @rhs_regno(%struct.rtx_def* %59), !dbg !6427
  store i32 %call117, i32* %new_regno, align 4, !dbg !6428
  br label %if.end, !dbg !6429

if.else118:                                       ; preds = %lor.lhs.false101, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i32 1774, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)), !dbg !6430
  br label %if.end

if.end:                                           ; preds = %if.else118, %if.then112
  br label %if.end119

if.end119:                                        ; preds = %if.end, %if.then79
  %60 = load i32, i32* %new_regno, align 4, !dbg !6431
  %61 = load i32, i32* %i, align 4, !dbg !6433
  %cmp120 = icmp eq i32 %60, %61, !dbg !6434
  br i1 %cmp120, label %if.then122, label %if.else123, !dbg !6435

if.then122:                                       ; preds = %if.end119
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6436
  store %struct.rtx_def* %62, %struct.rtx_def** %prev, align 8, !dbg !6437
  br label %if.end143, !dbg !6438

if.else123:                                       ; preds = %if.end119
  %63 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6439
  %cmp124 = icmp eq %struct.rtx_def* %63, null, !dbg !6442
  br i1 %cmp124, label %if.then126, label %if.else129, !dbg !6443

if.then126:                                       ; preds = %if.else123
  %64 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6444
  %65 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6445
  %66 = load i32, i32* %i, align 4, !dbg !6446
  %idxprom127 = sext i32 %66 to i64, !dbg !6445
  %arrayidx128 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %65, i64 %idxprom127, !dbg !6445
  store %struct.rtx_def* %64, %struct.rtx_def** %arrayidx128, align 8, !dbg !6447
  br label %if.end134, !dbg !6445

if.else129:                                       ; preds = %if.else123
  %67 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6448
  %68 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !6449
  %u130 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !6449
  %fld131 = bitcast %union.u* %u130 to [1 x %union.rtunion_def]*, !dbg !6449
  %arrayidx132 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld131, i64 0, i64 1, !dbg !6449
  %rt_rtx133 = bitcast %union.rtunion_def* %arrayidx132 to %struct.rtx_def**, !dbg !6449
  store %struct.rtx_def* %67, %struct.rtx_def** %rt_rtx133, align 8, !dbg !6450
  br label %if.end134

if.end134:                                        ; preds = %if.else129, %if.then126
  %69 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6451
  %70 = load i32, i32* %new_regno, align 4, !dbg !6452
  %idxprom135 = sext i32 %70 to i64, !dbg !6451
  %arrayidx136 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %69, i64 %idxprom135, !dbg !6451
  %71 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx136, align 8, !dbg !6451
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6453
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6453
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !6453
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 1, !dbg !6453
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !6453
  store %struct.rtx_def* %71, %struct.rtx_def** %rt_rtx140, align 8, !dbg !6454
  %73 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6455
  %74 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !6456
  %75 = load i32, i32* %new_regno, align 4, !dbg !6457
  %idxprom141 = sext i32 %75 to i64, !dbg !6456
  %arrayidx142 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %74, i64 %idxprom141, !dbg !6456
  store %struct.rtx_def* %73, %struct.rtx_def** %arrayidx142, align 8, !dbg !6458
  br label %if.end143

if.end143:                                        ; preds = %if.end134, %if.then122
  br label %for.inc, !dbg !6459

for.inc:                                          ; preds = %if.end143
  %76 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !6460
  store %struct.rtx_def* %76, %struct.rtx_def** %x, align 8, !dbg !6461
  br label %for.cond8, !dbg !6462, !llvm.loop !6463

for.end:                                          ; preds = %for.cond8
  br label %for.inc144, !dbg !6464

for.inc144:                                       ; preds = %for.end
  %77 = load i32, i32* %i, align 4, !dbg !6465
  %inc145 = add nsw i32 %77, 1, !dbg !6465
  store i32 %inc145, i32* %i, align 4, !dbg !6465
  br label %for.cond, !dbg !6466, !llvm.loop !6467

for.end146:                                       ; preds = %for.cond
  br label %if.end147, !dbg !6469

if.end147:                                        ; preds = %for.end146, %entry
  ret void, !dbg !6470
}

declare dso_local i32 @df_set_flags(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @build_insn_chain() #0 !dbg !6471 {
entry:
  %i = alloca i32, align 4
  %p = alloca %struct.insn_chain**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %c = alloca %struct.insn_chain*, align 8
  %next = alloca %struct.insn_chain*, align 8
  %live_relevant_regs = alloca %struct.bitmap_head_def*, align 8
  %elim_regset = alloca %struct.bitmap_head_def*, align 8
  %live_subregs = alloca %struct.simple_bitmap_def**, align 8
  %live_subregs_used = alloca i32*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %uid = alloca i32, align 4
  %def_rec = alloca %union.df_ref_d**, align 8
  %use_rec = alloca %union.df_ref_d**, align 8
  %def = alloca %union.df_ref_d*, align 8
  %regno = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %start = alloca i32, align 4
  %last = alloca i32, align 4
  %use = alloca %union.df_ref_d*, align 8
  %regno233 = alloca i32, align 4
  %reg236 = alloca %struct.rtx_def*, align 8
  %start302 = alloca i32, align 4
  %last307 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6472, metadata !DIExpression()), !dbg !6473
  call void @llvm.dbg.declare(metadata %struct.insn_chain*** %p, metadata !6474, metadata !DIExpression()), !dbg !6496
  store %struct.insn_chain** @reload_insn_chain, %struct.insn_chain*** %p, align 8, !dbg !6496
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6497, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.declare(metadata %struct.insn_chain** %c, metadata !6499, metadata !DIExpression()), !dbg !6500
  store %struct.insn_chain* null, %struct.insn_chain** %c, align 8, !dbg !6500
  call void @llvm.dbg.declare(metadata %struct.insn_chain** %next, metadata !6501, metadata !DIExpression()), !dbg !6502
  store %struct.insn_chain* null, %struct.insn_chain** %next, align 8, !dbg !6502
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %live_relevant_regs, metadata !6503, metadata !DIExpression()), !dbg !6504
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6505
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6504
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %elim_regset, metadata !6506, metadata !DIExpression()), !dbg !6507
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6508
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %elim_regset, align 8, !dbg !6507
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %live_subregs, metadata !6509, metadata !DIExpression()), !dbg !6510
  %0 = load i32, i32* @max_regno, align 4, !dbg !6511
  %conv = sext i32 %0 to i64, !dbg !6511
  %call2 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !6511
  %1 = bitcast i8* %call2 to %struct.simple_bitmap_def**, !dbg !6511
  store %struct.simple_bitmap_def** %1, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6510
  call void @llvm.dbg.declare(metadata i32** %live_subregs_used, metadata !6512, metadata !DIExpression()), !dbg !6513
  %2 = load i32, i32* @max_regno, align 4, !dbg !6514
  %conv3 = sext i32 %2 to i64, !dbg !6514
  %mul = mul i64 4, %conv3, !dbg !6514
  %call4 = call i8* @xmalloc(i64 %mul), !dbg !6514
  %3 = bitcast i8* %call4 to i32*, !dbg !6514
  store i32* %3, i32** %live_subregs_used, align 8, !dbg !6513
  store i32 0, i32* %i, align 4, !dbg !6515
  br label %for.cond, !dbg !6517

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !6518
  %cmp = icmp ult i32 %4, 53, !dbg !6520
  br i1 %cmp, label %for.body, label %for.end, !dbg !6521

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* @eliminable_regset, align 8, !dbg !6522
  %6 = load i32, i32* %i, align 4, !dbg !6522
  %sh_prom = zext i32 %6 to i64, !dbg !6522
  %shl = shl i64 1, %sh_prom, !dbg !6522
  %and = and i64 %5, %shl, !dbg !6522
  %tobool = icmp ne i64 %and, 0, !dbg !6522
  br i1 %tobool, label %if.then, label %if.end, !dbg !6524

if.then:                                          ; preds = %for.body
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %elim_regset, align 8, !dbg !6525
  %8 = load i32, i32* %i, align 4, !dbg !6526
  %call6 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %7, i32 %8), !dbg !6527
  br label %if.end, !dbg !6527

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6522

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !6528
  %inc = add i32 %9, 1, !dbg !6528
  store i32 %inc, i32* %i, align 4, !dbg !6528
  br label %for.cond, !dbg !6529, !llvm.loop !6530

for.end:                                          ; preds = %for.cond
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6532
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !6532
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6532
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6532
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !6532
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6532
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 5, !dbg !6532
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !6532
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !6532
  br label %for.cond7, !dbg !6532

for.cond7:                                        ; preds = %for.inc411, %for.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6534
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6534
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !6534
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !6534
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !6534
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 0, !dbg !6534
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6534
  %cmp10 = icmp ne %struct.basic_block_def* %14, %17, !dbg !6534
  br i1 %cmp10, label %for.body12, label %for.end413, !dbg !6532

for.body12:                                       ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !6536, metadata !DIExpression()), !dbg !6545
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6546, metadata !DIExpression()), !dbg !6547
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6548
  call void @bitmap_clear(%struct.bitmap_head_def* %18), !dbg !6548
  %19 = load i32*, i32** %live_subregs_used, align 8, !dbg !6549
  %20 = bitcast i32* %19 to i8*, !dbg !6550
  %21 = load i32, i32* @max_regno, align 4, !dbg !6551
  %conv13 = sext i32 %21 to i64, !dbg !6551
  %mul14 = mul i64 %conv13, 4, !dbg !6552
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 %mul14, i1 false), !dbg !6550
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6553
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !6553
  %23 = load i32, i32* %index, align 8, !dbg !6553
  %call15 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %23), !dbg !6553
  %out = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call15, i32 0, i32 3, !dbg !6553
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out, align 8, !dbg !6553
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %24, i32 0, i32* %i), !dbg !6553
  br label %for.cond16, !dbg !6553

for.cond16:                                       ; preds = %for.inc25, %for.body12
  %call17 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6555
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6553
  br i1 %tobool18, label %for.body19, label %for.end26, !dbg !6553

for.body19:                                       ; preds = %for.cond16
  %25 = load i32, i32* %i, align 4, !dbg !6557
  %cmp20 = icmp uge i32 %25, 53, !dbg !6560
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !6561

if.then22:                                        ; preds = %for.body19
  br label %for.end26, !dbg !6562

if.end23:                                         ; preds = %for.body19
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6563
  %27 = load i32, i32* %i, align 4, !dbg !6564
  %call24 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %27), !dbg !6565
  br label %for.inc25, !dbg !6566

for.inc25:                                        ; preds = %if.end23
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6555
  br label %for.cond16, !dbg !6555, !llvm.loop !6567

for.end26:                                        ; preds = %if.then22, %for.cond16
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6569
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !6569
  %29 = load i32, i32* %index27, align 8, !dbg !6569
  %call28 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %29), !dbg !6569
  %out29 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call28, i32 0, i32 3, !dbg !6569
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out29, align 8, !dbg !6569
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %30, i32 53, i32* %i), !dbg !6569
  br label %for.cond30, !dbg !6569

for.cond30:                                       ; preds = %for.inc39, %for.end26
  %call31 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6571
  %tobool32 = icmp ne i8 %call31, 0, !dbg !6569
  br i1 %tobool32, label %for.body33, label %for.end40, !dbg !6569

for.body33:                                       ; preds = %for.cond30
  %31 = load i32, i32* %i, align 4, !dbg !6573
  %call34 = call zeroext i8 @pseudo_for_reload_consideration_p(i32 %31), !dbg !6576
  %tobool35 = icmp ne i8 %call34, 0, !dbg !6576
  br i1 %tobool35, label %if.then36, label %if.end38, !dbg !6577

if.then36:                                        ; preds = %for.body33
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6578
  %33 = load i32, i32* %i, align 4, !dbg !6579
  %call37 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %32, i32 %33), !dbg !6580
  br label %if.end38, !dbg !6580

if.end38:                                         ; preds = %if.then36, %for.body33
  br label %for.inc39, !dbg !6581

for.inc39:                                        ; preds = %if.end38
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6571
  br label %for.cond30, !dbg !6571, !llvm.loop !6582

for.end40:                                        ; preds = %for.cond30
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6584
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 7, !dbg !6584
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6584
  %35 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6584
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %35, i32 0, i32 1, !dbg !6584
  %36 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6584
  store %struct.rtx_def* %36, %struct.rtx_def** %insn, align 8, !dbg !6584
  br label %for.cond41, !dbg !6584

for.cond41:                                       ; preds = %for.inc345, %for.end40
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6586
  %tobool42 = icmp ne %struct.rtx_def* %37, null, !dbg !6586
  br i1 %tobool42, label %land.rhs, label %land.end, !dbg !6586

land.rhs:                                         ; preds = %for.cond41
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6586
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6586
  %il43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !6586
  %rtl44 = bitcast %union.basic_block_il_dependent* %il43 to %struct.rtl_bb_info**, !dbg !6586
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl44, align 8, !dbg !6586
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 0, !dbg !6586
  %41 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6586
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6586
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6586
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6586
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6586
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6586
  %cmp45 = icmp ne %struct.rtx_def* %38, %42, !dbg !6586
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond41
  %43 = phi i1 [ false, %for.cond41 ], [ %cmp45, %land.rhs ], !dbg !6588
  br i1 %43, label %for.body47, label %for.end350, !dbg !6584

for.body47:                                       ; preds = %land.end
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6589
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6589
  %bf.load = load i32, i32* %45, align 8, !dbg !6589
  %bf.clear = and i32 %bf.load, 65535, !dbg !6589
  %cmp48 = icmp eq i32 %bf.clear, 13, !dbg !6589
  br i1 %cmp48, label %if.end344, label %land.lhs.true, !dbg !6592

land.lhs.true:                                    ; preds = %for.body47
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6593
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !6593
  %bf.load50 = load i32, i32* %47, align 8, !dbg !6593
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !6593
  %cmp52 = icmp eq i32 %bf.clear51, 11, !dbg !6593
  br i1 %cmp52, label %if.end344, label %if.then54, !dbg !6594

if.then54:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !6595, metadata !DIExpression()), !dbg !6597
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6598
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !6598
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !6598
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !6598
  %rt_int = bitcast %union.rtunion_def* %arrayidx57 to i32*, !dbg !6598
  %49 = load i32, i32* %rt_int, align 8, !dbg !6598
  store i32 %49, i32* %uid, align 4, !dbg !6597
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %def_rec, metadata !6599, metadata !DIExpression()), !dbg !6600
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %use_rec, metadata !6601, metadata !DIExpression()), !dbg !6602
  %call58 = call %struct.insn_chain* @new_insn_chain(), !dbg !6603
  store %struct.insn_chain* %call58, %struct.insn_chain** %c, align 8, !dbg !6604
  %50 = load %struct.insn_chain*, %struct.insn_chain** %next, align 8, !dbg !6605
  %51 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6606
  %next59 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %51, i32 0, i32 0, !dbg !6607
  store %struct.insn_chain* %50, %struct.insn_chain** %next59, align 8, !dbg !6608
  %52 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6609
  store %struct.insn_chain* %52, %struct.insn_chain** %next, align 8, !dbg !6610
  %53 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6611
  %54 = load %struct.insn_chain**, %struct.insn_chain*** %p, align 8, !dbg !6612
  store %struct.insn_chain* %53, %struct.insn_chain** %54, align 8, !dbg !6613
  %55 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6614
  %prev = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %55, i32 0, i32 1, !dbg !6615
  store %struct.insn_chain** %prev, %struct.insn_chain*** %p, align 8, !dbg !6616
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6617
  %57 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6618
  %insn60 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %57, i32 0, i32 3, !dbg !6619
  store %struct.rtx_def* %56, %struct.rtx_def** %insn60, align 8, !dbg !6620
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6621
  %index61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 9, !dbg !6622
  %59 = load i32, i32* %index61, align 8, !dbg !6622
  %60 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6623
  %block = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %60, i32 0, i32 4, !dbg !6624
  store i32 %59, i32* %block, align 8, !dbg !6625
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6626
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !6626
  %bf.load62 = load i32, i32* %62, align 8, !dbg !6626
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !6626
  %cmp64 = icmp eq i32 %bf.clear63, 8, !dbg !6626
  br i1 %cmp64, label %if.then80, label %lor.lhs.false, !dbg !6626

lor.lhs.false:                                    ; preds = %if.then54
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6626
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !6626
  %bf.load66 = load i32, i32* %64, align 8, !dbg !6626
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !6626
  %cmp68 = icmp eq i32 %bf.clear67, 7, !dbg !6626
  br i1 %cmp68, label %if.then80, label %lor.lhs.false70, !dbg !6626

lor.lhs.false70:                                  ; preds = %lor.lhs.false
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6626
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !6626
  %bf.load71 = load i32, i32* %66, align 8, !dbg !6626
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !6626
  %cmp73 = icmp eq i32 %bf.clear72, 9, !dbg !6626
  br i1 %cmp73, label %if.then80, label %lor.lhs.false75, !dbg !6626

lor.lhs.false75:                                  ; preds = %lor.lhs.false70
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6626
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !6626
  %bf.load76 = load i32, i32* %68, align 8, !dbg !6626
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !6626
  %cmp78 = icmp eq i32 %bf.clear77, 10, !dbg !6626
  br i1 %cmp78, label %if.then80, label %if.end205, !dbg !6628

if.then80:                                        ; preds = %lor.lhs.false75, %lor.lhs.false70, %lor.lhs.false, %if.then54
  %69 = load %struct.df*, %struct.df** @df, align 8, !dbg !6629
  %insns = getelementptr inbounds %struct.df, %struct.df* %69, i32 0, i32 10, !dbg !6629
  %70 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !6629
  %71 = load i32, i32* %uid, align 4, !dbg !6629
  %idxprom = zext i32 %71 to i64, !dbg !6629
  %arrayidx81 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %70, i64 %idxprom, !dbg !6629
  %72 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx81, align 8, !dbg !6629
  %defs = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %72, i32 0, i32 1, !dbg !6629
  %73 = load %union.df_ref_d**, %union.df_ref_d*** %defs, align 8, !dbg !6629
  store %union.df_ref_d** %73, %union.df_ref_d*** %def_rec, align 8, !dbg !6631
  br label %for.cond82, !dbg !6632

for.cond82:                                       ; preds = %for.inc203, %if.then80
  %74 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !6633
  %75 = load %union.df_ref_d*, %union.df_ref_d** %74, align 8, !dbg !6635
  %tobool83 = icmp ne %union.df_ref_d* %75, null, !dbg !6636
  br i1 %tobool83, label %for.body84, label %for.end204, !dbg !6636

for.body84:                                       ; preds = %for.cond82
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !6637, metadata !DIExpression()), !dbg !6639
  %76 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !6640
  %77 = load %union.df_ref_d*, %union.df_ref_d** %76, align 8, !dbg !6641
  store %union.df_ref_d* %77, %union.df_ref_d** %def, align 8, !dbg !6639
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6642, metadata !DIExpression()), !dbg !6643
  %78 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6644
  %base = bitcast %union.df_ref_d* %78 to %struct.df_base_ref*, !dbg !6644
  %regno85 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 6, !dbg !6644
  %79 = load i32, i32* %regno85, align 8, !dbg !6644
  store i32 %79, i32* %regno, align 4, !dbg !6643
  %80 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6645
  %base86 = bitcast %union.df_ref_d* %80 to %struct.df_base_ref*, !dbg !6645
  %81 = bitcast %struct.df_base_ref* %base86 to i32*, !dbg !6645
  %bf.load87 = load i32, i32* %81, align 8, !dbg !6645
  %bf.ashr = ashr i32 %bf.load87, 16, !dbg !6645
  %and88 = and i32 %bf.ashr, 64, !dbg !6645
  %cmp89 = icmp ne i32 %and88, 0, !dbg !6645
  br i1 %cmp89, label %if.end108, label %if.then91, !dbg !6647

if.then91:                                        ; preds = %for.body84
  %82 = load i32, i32* %regno, align 4, !dbg !6648
  %cmp92 = icmp ult i32 %82, 53, !dbg !6651
  br i1 %cmp92, label %if.then94, label %if.else, !dbg !6652

if.then94:                                        ; preds = %if.then91
  %83 = load i32, i32* %regno, align 4, !dbg !6653
  %idxprom95 = zext i32 %83 to i64, !dbg !6656
  %arrayidx96 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom95, !dbg !6656
  %84 = load i8, i8* %arrayidx96, align 1, !dbg !6656
  %tobool97 = icmp ne i8 %84, 0, !dbg !6656
  br i1 %tobool97, label %if.end100, label %if.then98, !dbg !6657

if.then98:                                        ; preds = %if.then94
  %85 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6658
  %dead_or_set = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %85, i32 0, i32 7, !dbg !6659
  %86 = load i32, i32* %regno, align 4, !dbg !6660
  %call99 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set, i32 %86), !dbg !6661
  br label %if.end100, !dbg !6661

if.end100:                                        ; preds = %if.then98, %if.then94
  br label %if.end107, !dbg !6662

if.else:                                          ; preds = %if.then91
  %87 = load i32, i32* %regno, align 4, !dbg !6663
  %call101 = call zeroext i8 @pseudo_for_reload_consideration_p(i32 %87), !dbg !6665
  %tobool102 = icmp ne i8 %call101, 0, !dbg !6665
  br i1 %tobool102, label %if.then103, label %if.end106, !dbg !6666

if.then103:                                       ; preds = %if.else
  %88 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6667
  %dead_or_set104 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %88, i32 0, i32 7, !dbg !6668
  %89 = load i32, i32* %regno, align 4, !dbg !6669
  %call105 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set104, i32 %89), !dbg !6670
  br label %if.end106, !dbg !6670

if.end106:                                        ; preds = %if.then103, %if.else
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.end100
  br label %if.end108, !dbg !6671

if.end108:                                        ; preds = %if.end107, %for.body84
  %90 = load i32, i32* %regno, align 4, !dbg !6672
  %cmp109 = icmp ult i32 %90, 53, !dbg !6674
  br i1 %cmp109, label %land.lhs.true120, label %lor.lhs.false111, !dbg !6675

lor.lhs.false111:                                 ; preds = %if.end108
  %91 = load i16*, i16** @reg_renumber, align 8, !dbg !6676
  %92 = load i32, i32* %regno, align 4, !dbg !6677
  %idxprom112 = zext i32 %92 to i64, !dbg !6676
  %arrayidx113 = getelementptr inbounds i16, i16* %91, i64 %idxprom112, !dbg !6676
  %93 = load i16, i16* %arrayidx113, align 2, !dbg !6676
  %conv114 = sext i16 %93 to i32, !dbg !6676
  %cmp115 = icmp sge i32 %conv114, 0, !dbg !6678
  br i1 %cmp115, label %land.lhs.true120, label %lor.lhs.false117, !dbg !6679

lor.lhs.false117:                                 ; preds = %lor.lhs.false111
  %94 = load i8, i8* @ira_conflicts_p, align 1, !dbg !6680
  %conv118 = zext i8 %94 to i32, !dbg !6680
  %tobool119 = icmp ne i32 %conv118, 0, !dbg !6680
  br i1 %tobool119, label %land.lhs.true120, label %if.end202, !dbg !6681

land.lhs.true120:                                 ; preds = %lor.lhs.false117, %lor.lhs.false111, %if.end108
  %95 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6682
  %base121 = bitcast %union.df_ref_d* %95 to %struct.df_base_ref*, !dbg !6682
  %96 = bitcast %struct.df_base_ref* %base121 to i32*, !dbg !6682
  %bf.load122 = load i32, i32* %96, align 8, !dbg !6682
  %bf.ashr123 = ashr i32 %bf.load122, 16, !dbg !6682
  %and124 = and i32 %bf.ashr123, 1, !dbg !6682
  %cmp125 = icmp ne i32 %and124, 0, !dbg !6682
  br i1 %cmp125, label %if.end202, label %if.then127, !dbg !6683

if.then127:                                       ; preds = %land.lhs.true120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !6684, metadata !DIExpression()), !dbg !6686
  %97 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6687
  %base128 = bitcast %union.df_ref_d* %97 to %struct.df_base_ref*, !dbg !6687
  %reg129 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base128, i32 0, i32 1, !dbg !6687
  %98 = load %struct.rtx_def*, %struct.rtx_def** %reg129, align 8, !dbg !6687
  store %struct.rtx_def* %98, %struct.rtx_def** %reg, align 8, !dbg !6686
  %99 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6688
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !6688
  %bf.load130 = load i32, i32* %100, align 8, !dbg !6688
  %bf.clear131 = and i32 %bf.load130, 65535, !dbg !6688
  %cmp132 = icmp eq i32 %bf.clear131, 39, !dbg !6690
  br i1 %cmp132, label %land.lhs.true134, label %if.else189, !dbg !6691

land.lhs.true134:                                 ; preds = %if.then127
  %101 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6692
  %base135 = bitcast %union.df_ref_d* %101 to %struct.df_base_ref*, !dbg !6692
  %102 = bitcast %struct.df_base_ref* %base135 to i32*, !dbg !6692
  %bf.load136 = load i32, i32* %102, align 8, !dbg !6692
  %bf.ashr137 = ashr i32 %bf.load136, 16, !dbg !6692
  %and138 = and i32 %bf.ashr137, 512, !dbg !6692
  %cmp139 = icmp ne i32 %and138, 0, !dbg !6692
  br i1 %cmp139, label %if.else189, label %if.then141, !dbg !6693

if.then141:                                       ; preds = %land.lhs.true134
  call void @llvm.dbg.declare(metadata i32* %start, metadata !6694, metadata !DIExpression()), !dbg !6696
  %103 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6697
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !6697
  %fld143 = bitcast %union.u* %u142 to [1 x %union.rtunion_def]*, !dbg !6697
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i64 0, i64 1, !dbg !6697
  %rt_uint = bitcast %union.rtunion_def* %arrayidx144 to i32*, !dbg !6697
  %104 = load i32, i32* %rt_uint, align 8, !dbg !6697
  store i32 %104, i32* %start, align 4, !dbg !6696
  call void @llvm.dbg.declare(metadata i32* %last, metadata !6698, metadata !DIExpression()), !dbg !6699
  %105 = load i32, i32* %start, align 4, !dbg !6700
  %106 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6701
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !6701
  %bf.load145 = load i32, i32* %107, align 8, !dbg !6701
  %bf.lshr = lshr i32 %bf.load145, 16, !dbg !6701
  %bf.clear146 = and i32 %bf.lshr, 255, !dbg !6701
  %idxprom147 = zext i32 %bf.clear146 to i64, !dbg !6701
  %arrayidx148 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom147, !dbg !6701
  %108 = load i8, i8* %arrayidx148, align 1, !dbg !6701
  %conv149 = zext i8 %108 to i16, !dbg !6701
  %conv150 = zext i16 %conv149 to i32, !dbg !6701
  %add = add i32 %105, %conv150, !dbg !6702
  store i32 %add, i32* %last, align 4, !dbg !6699
  %109 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6703
  %110 = load i32, i32* %regno, align 4, !dbg !6704
  %call151 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %109, i32 %110), !dbg !6705
  %conv152 = trunc i32 %call151 to i8, !dbg !6705
  %111 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6706
  %112 = load i32*, i32** %live_subregs_used, align 8, !dbg !6707
  %113 = load i32, i32* %regno, align 4, !dbg !6708
  %114 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6709
  call void @init_live_subregs(i8 zeroext %conv152, %struct.simple_bitmap_def** %111, i32* %112, i32 %113, %struct.rtx_def* %114), !dbg !6710
  %115 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6711
  %base153 = bitcast %union.df_ref_d* %115 to %struct.df_base_ref*, !dbg !6711
  %116 = bitcast %struct.df_base_ref* %base153 to i32*, !dbg !6711
  %bf.load154 = load i32, i32* %116, align 8, !dbg !6711
  %bf.ashr155 = ashr i32 %bf.load154, 16, !dbg !6711
  %and156 = and i32 %bf.ashr155, 1024, !dbg !6711
  %cmp157 = icmp ne i32 %and156, 0, !dbg !6711
  br i1 %cmp157, label %if.end164, label %if.then159, !dbg !6713

if.then159:                                       ; preds = %if.then141
  %117 = load i32, i32* %start, align 4, !dbg !6714
  %div = udiv i32 %117, 4, !dbg !6716
  %mul160 = mul i32 %div, 4, !dbg !6717
  store i32 %mul160, i32* %start, align 4, !dbg !6718
  %118 = load i32, i32* %last, align 4, !dbg !6719
  %add161 = add i32 %118, 4, !dbg !6720
  %sub = sub i32 %add161, 1, !dbg !6721
  %div162 = udiv i32 %sub, 4, !dbg !6722
  %mul163 = mul i32 %div162, 4, !dbg !6723
  store i32 %mul163, i32* %last, align 4, !dbg !6724
  br label %if.end164, !dbg !6725

if.end164:                                        ; preds = %if.then159, %if.then141
  %119 = load i32, i32* %last, align 4, !dbg !6726
  %120 = load i32*, i32** %live_subregs_used, align 8, !dbg !6728
  %121 = load i32, i32* %regno, align 4, !dbg !6729
  %idxprom165 = zext i32 %121 to i64, !dbg !6728
  %arrayidx166 = getelementptr inbounds i32, i32* %120, i64 %idxprom165, !dbg !6728
  %122 = load i32, i32* %arrayidx166, align 4, !dbg !6728
  %cmp167 = icmp sgt i32 %119, %122, !dbg !6730
  br i1 %cmp167, label %if.then169, label %if.end172, !dbg !6731

if.then169:                                       ; preds = %if.end164
  %123 = load i32*, i32** %live_subregs_used, align 8, !dbg !6732
  %124 = load i32, i32* %regno, align 4, !dbg !6733
  %idxprom170 = zext i32 %124 to i64, !dbg !6732
  %arrayidx171 = getelementptr inbounds i32, i32* %123, i64 %idxprom170, !dbg !6732
  %125 = load i32, i32* %arrayidx171, align 4, !dbg !6732
  store i32 %125, i32* %last, align 4, !dbg !6734
  br label %if.end172, !dbg !6735

if.end172:                                        ; preds = %if.then169, %if.end164
  br label %while.cond, !dbg !6736

while.cond:                                       ; preds = %while.body, %if.end172
  %126 = load i32, i32* %start, align 4, !dbg !6737
  %127 = load i32, i32* %last, align 4, !dbg !6738
  %cmp173 = icmp ult i32 %126, %127, !dbg !6739
  br i1 %cmp173, label %while.body, label %while.end, !dbg !6736

while.body:                                       ; preds = %while.cond
  %128 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6740
  %129 = load i32, i32* %regno, align 4, !dbg !6742
  %idxprom175 = zext i32 %129 to i64, !dbg !6740
  %arrayidx176 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %128, i64 %idxprom175, !dbg !6740
  %130 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx176, align 8, !dbg !6740
  %131 = load i32, i32* %start, align 4, !dbg !6743
  call void @RESET_BIT(%struct.simple_bitmap_def* %130, i32 %131), !dbg !6744
  %132 = load i32, i32* %start, align 4, !dbg !6745
  %inc177 = add i32 %132, 1, !dbg !6745
  store i32 %inc177, i32* %start, align 4, !dbg !6745
  br label %while.cond, !dbg !6736, !llvm.loop !6746

while.end:                                        ; preds = %while.cond
  %133 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6748
  %134 = load i32, i32* %regno, align 4, !dbg !6750
  %idxprom178 = zext i32 %134 to i64, !dbg !6748
  %arrayidx179 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %133, i64 %idxprom178, !dbg !6748
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx179, align 8, !dbg !6748
  %call180 = call zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def* %135), !dbg !6751
  %tobool181 = icmp ne i8 %call180, 0, !dbg !6751
  br i1 %tobool181, label %if.then182, label %if.else186, !dbg !6752

if.then182:                                       ; preds = %while.end
  %136 = load i32*, i32** %live_subregs_used, align 8, !dbg !6753
  %137 = load i32, i32* %regno, align 4, !dbg !6755
  %idxprom183 = zext i32 %137 to i64, !dbg !6753
  %arrayidx184 = getelementptr inbounds i32, i32* %136, i64 %idxprom183, !dbg !6753
  store i32 0, i32* %arrayidx184, align 4, !dbg !6756
  %138 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6757
  %139 = load i32, i32* %regno, align 4, !dbg !6758
  %call185 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %138, i32 %139), !dbg !6759
  br label %if.end188, !dbg !6760

if.else186:                                       ; preds = %while.end
  %140 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6761
  %141 = load i32, i32* %regno, align 4, !dbg !6762
  %call187 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %140, i32 %141), !dbg !6763
  br label %if.end188

if.end188:                                        ; preds = %if.else186, %if.then182
  br label %if.end201, !dbg !6764

if.else189:                                       ; preds = %land.lhs.true134, %if.then127
  %142 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !6765
  %base190 = bitcast %union.df_ref_d* %142 to %struct.df_base_ref*, !dbg !6765
  %143 = bitcast %struct.df_base_ref* %base190 to i32*, !dbg !6765
  %bf.load191 = load i32, i32* %143, align 8, !dbg !6765
  %bf.ashr192 = ashr i32 %bf.load191, 16, !dbg !6765
  %and193 = and i32 %bf.ashr192, 16, !dbg !6765
  %cmp194 = icmp ne i32 %and193, 0, !dbg !6765
  br i1 %cmp194, label %if.end200, label %if.then196, !dbg !6768

if.then196:                                       ; preds = %if.else189
  %144 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6769
  %145 = load i32, i32* %regno, align 4, !dbg !6771
  %call197 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %144, i32 %145), !dbg !6772
  %146 = load i32*, i32** %live_subregs_used, align 8, !dbg !6773
  %147 = load i32, i32* %regno, align 4, !dbg !6774
  %idxprom198 = zext i32 %147 to i64, !dbg !6773
  %arrayidx199 = getelementptr inbounds i32, i32* %146, i64 %idxprom198, !dbg !6773
  store i32 0, i32* %arrayidx199, align 4, !dbg !6775
  br label %if.end200, !dbg !6776

if.end200:                                        ; preds = %if.then196, %if.else189
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %if.end188
  br label %if.end202, !dbg !6777

if.end202:                                        ; preds = %if.end201, %land.lhs.true120, %lor.lhs.false117
  br label %for.inc203, !dbg !6778

for.inc203:                                       ; preds = %if.end202
  %148 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !6779
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %148, i32 1, !dbg !6779
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %def_rec, align 8, !dbg !6779
  br label %for.cond82, !dbg !6780, !llvm.loop !6781

for.end204:                                       ; preds = %for.cond82
  br label %if.end205, !dbg !6782

if.end205:                                        ; preds = %for.end204, %lor.lhs.false75
  %149 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6783
  %150 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %elim_regset, align 8, !dbg !6784
  %call206 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %149, %struct.bitmap_head_def* %150), !dbg !6785
  %151 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6786
  %live_throughout = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %151, i32 0, i32 6, !dbg !6787
  %152 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6788
  call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout, %struct.bitmap_head_def* %152), !dbg !6789
  %153 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %154 = bitcast %struct.rtx_def* %153 to i32*, !dbg !6790
  %bf.load207 = load i32, i32* %154, align 8, !dbg !6790
  %bf.clear208 = and i32 %bf.load207, 65535, !dbg !6790
  %cmp209 = icmp eq i32 %bf.clear208, 8, !dbg !6790
  br i1 %cmp209, label %if.then226, label %lor.lhs.false211, !dbg !6790

lor.lhs.false211:                                 ; preds = %if.end205
  %155 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !6790
  %bf.load212 = load i32, i32* %156, align 8, !dbg !6790
  %bf.clear213 = and i32 %bf.load212, 65535, !dbg !6790
  %cmp214 = icmp eq i32 %bf.clear213, 7, !dbg !6790
  br i1 %cmp214, label %if.then226, label %lor.lhs.false216, !dbg !6790

lor.lhs.false216:                                 ; preds = %lor.lhs.false211
  %157 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %158 = bitcast %struct.rtx_def* %157 to i32*, !dbg !6790
  %bf.load217 = load i32, i32* %158, align 8, !dbg !6790
  %bf.clear218 = and i32 %bf.load217, 65535, !dbg !6790
  %cmp219 = icmp eq i32 %bf.clear218, 9, !dbg !6790
  br i1 %cmp219, label %if.then226, label %lor.lhs.false221, !dbg !6790

lor.lhs.false221:                                 ; preds = %lor.lhs.false216
  %159 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6790
  %160 = bitcast %struct.rtx_def* %159 to i32*, !dbg !6790
  %bf.load222 = load i32, i32* %160, align 8, !dbg !6790
  %bf.clear223 = and i32 %bf.load222, 65535, !dbg !6790
  %cmp224 = icmp eq i32 %bf.clear223, 10, !dbg !6790
  br i1 %cmp224, label %if.then226, label %if.end343, !dbg !6792

if.then226:                                       ; preds = %lor.lhs.false221, %lor.lhs.false216, %lor.lhs.false211, %if.end205
  %161 = load %struct.df*, %struct.df** @df, align 8, !dbg !6793
  %insns227 = getelementptr inbounds %struct.df, %struct.df* %161, i32 0, i32 10, !dbg !6793
  %162 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns227, align 8, !dbg !6793
  %163 = load i32, i32* %uid, align 4, !dbg !6793
  %idxprom228 = zext i32 %163 to i64, !dbg !6793
  %arrayidx229 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %162, i64 %idxprom228, !dbg !6793
  %164 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx229, align 8, !dbg !6793
  %uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %164, i32 0, i32 2, !dbg !6793
  %165 = load %union.df_ref_d**, %union.df_ref_d*** %uses, align 8, !dbg !6793
  store %union.df_ref_d** %165, %union.df_ref_d*** %use_rec, align 8, !dbg !6795
  br label %for.cond230, !dbg !6796

for.cond230:                                      ; preds = %for.inc340, %if.then226
  %166 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !6797
  %167 = load %union.df_ref_d*, %union.df_ref_d** %166, align 8, !dbg !6799
  %tobool231 = icmp ne %union.df_ref_d* %167, null, !dbg !6800
  br i1 %tobool231, label %for.body232, label %for.end342, !dbg !6800

for.body232:                                      ; preds = %for.cond230
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use, metadata !6801, metadata !DIExpression()), !dbg !6803
  %168 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !6804
  %169 = load %union.df_ref_d*, %union.df_ref_d** %168, align 8, !dbg !6805
  store %union.df_ref_d* %169, %union.df_ref_d** %use, align 8, !dbg !6803
  call void @llvm.dbg.declare(metadata i32* %regno233, metadata !6806, metadata !DIExpression()), !dbg !6807
  %170 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6808
  %base234 = bitcast %union.df_ref_d* %170 to %struct.df_base_ref*, !dbg !6808
  %regno235 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base234, i32 0, i32 6, !dbg !6808
  %171 = load i32, i32* %regno235, align 8, !dbg !6808
  store i32 %171, i32* %regno233, align 4, !dbg !6807
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg236, metadata !6809, metadata !DIExpression()), !dbg !6810
  %172 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6811
  %base237 = bitcast %union.df_ref_d* %172 to %struct.df_base_ref*, !dbg !6811
  %reg238 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base237, i32 0, i32 1, !dbg !6811
  %173 = load %struct.rtx_def*, %struct.rtx_def** %reg238, align 8, !dbg !6811
  store %struct.rtx_def* %173, %struct.rtx_def** %reg236, align 8, !dbg !6810
  %174 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6812
  %base239 = bitcast %union.df_ref_d* %174 to %struct.df_base_ref*, !dbg !6812
  %175 = bitcast %struct.df_base_ref* %base239 to i32*, !dbg !6812
  %bf.load240 = load i32, i32* %175, align 8, !dbg !6812
  %bf.ashr241 = ashr i32 %bf.load240, 16, !dbg !6812
  %and242 = and i32 %bf.ashr241, 32, !dbg !6812
  %cmp243 = icmp ne i32 %and242, 0, !dbg !6812
  br i1 %cmp243, label %land.lhs.true245, label %if.end260, !dbg !6814

land.lhs.true245:                                 ; preds = %for.body232
  %176 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6815
  %base246 = bitcast %union.df_ref_d* %176 to %struct.df_base_ref*, !dbg !6815
  %177 = bitcast %struct.df_base_ref* %base246 to i32*, !dbg !6815
  %bf.load247 = load i32, i32* %177, align 8, !dbg !6815
  %bf.ashr248 = ashr i32 %bf.load247, 16, !dbg !6815
  %and249 = and i32 %bf.ashr248, 512, !dbg !6815
  %cmp250 = icmp ne i32 %and249, 0, !dbg !6815
  br i1 %cmp250, label %if.end260, label %land.lhs.true252, !dbg !6816

land.lhs.true252:                                 ; preds = %land.lhs.true245
  %178 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6817
  %base253 = bitcast %union.df_ref_d* %178 to %struct.df_base_ref*, !dbg !6817
  %179 = bitcast %struct.df_base_ref* %base253 to i32*, !dbg !6817
  %bf.load254 = load i32, i32* %179, align 8, !dbg !6817
  %bf.ashr255 = ashr i32 %bf.load254, 16, !dbg !6817
  %and256 = and i32 %bf.ashr255, 2048, !dbg !6817
  %cmp257 = icmp ne i32 %and256, 0, !dbg !6817
  br i1 %cmp257, label %if.then259, label %if.end260, !dbg !6818

if.then259:                                       ; preds = %land.lhs.true252
  br label %for.inc340, !dbg !6819

if.end260:                                        ; preds = %land.lhs.true252, %land.lhs.true245, %for.body232
  %180 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6820
  %181 = load i32, i32* %regno233, align 4, !dbg !6822
  %call261 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %180, i32 %181), !dbg !6823
  %tobool262 = icmp ne i32 %call261, 0, !dbg !6823
  br i1 %tobool262, label %if.end282, label %if.then263, !dbg !6824

if.then263:                                       ; preds = %if.end260
  %182 = load i32, i32* %regno233, align 4, !dbg !6825
  %cmp264 = icmp ult i32 %182, 53, !dbg !6828
  br i1 %cmp264, label %if.then266, label %if.else274, !dbg !6829

if.then266:                                       ; preds = %if.then263
  %183 = load i32, i32* %regno233, align 4, !dbg !6830
  %idxprom267 = zext i32 %183 to i64, !dbg !6833
  %arrayidx268 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom267, !dbg !6833
  %184 = load i8, i8* %arrayidx268, align 1, !dbg !6833
  %tobool269 = icmp ne i8 %184, 0, !dbg !6833
  br i1 %tobool269, label %if.end273, label %if.then270, !dbg !6834

if.then270:                                       ; preds = %if.then266
  %185 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6835
  %dead_or_set271 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %185, i32 0, i32 7, !dbg !6836
  %186 = load i32, i32* %regno233, align 4, !dbg !6837
  %call272 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set271, i32 %186), !dbg !6838
  br label %if.end273, !dbg !6838

if.end273:                                        ; preds = %if.then270, %if.then266
  br label %if.end281, !dbg !6839

if.else274:                                       ; preds = %if.then263
  %187 = load i32, i32* %regno233, align 4, !dbg !6840
  %call275 = call zeroext i8 @pseudo_for_reload_consideration_p(i32 %187), !dbg !6842
  %tobool276 = icmp ne i8 %call275, 0, !dbg !6842
  br i1 %tobool276, label %if.then277, label %if.end280, !dbg !6843

if.then277:                                       ; preds = %if.else274
  %188 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6844
  %dead_or_set278 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %188, i32 0, i32 7, !dbg !6845
  %189 = load i32, i32* %regno233, align 4, !dbg !6846
  %call279 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %dead_or_set278, i32 %189), !dbg !6847
  br label %if.end280, !dbg !6847

if.end280:                                        ; preds = %if.then277, %if.else274
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %if.end273
  br label %if.end282, !dbg !6848

if.end282:                                        ; preds = %if.end281, %if.end260
  %190 = load i32, i32* %regno233, align 4, !dbg !6849
  %cmp283 = icmp ult i32 %190, 53, !dbg !6851
  br i1 %cmp283, label %if.then289, label %lor.lhs.false285, !dbg !6852

lor.lhs.false285:                                 ; preds = %if.end282
  %191 = load i32, i32* %regno233, align 4, !dbg !6853
  %call286 = call zeroext i8 @pseudo_for_reload_consideration_p(i32 %191), !dbg !6854
  %conv287 = zext i8 %call286 to i32, !dbg !6854
  %tobool288 = icmp ne i32 %conv287, 0, !dbg !6854
  br i1 %tobool288, label %if.then289, label %if.end339, !dbg !6855

if.then289:                                       ; preds = %lor.lhs.false285, %if.end282
  %192 = load %struct.rtx_def*, %struct.rtx_def** %reg236, align 8, !dbg !6856
  %193 = bitcast %struct.rtx_def* %192 to i32*, !dbg !6856
  %bf.load290 = load i32, i32* %193, align 8, !dbg !6856
  %bf.clear291 = and i32 %bf.load290, 65535, !dbg !6856
  %cmp292 = icmp eq i32 %bf.clear291, 39, !dbg !6859
  br i1 %cmp292, label %land.lhs.true294, label %if.else334, !dbg !6860

land.lhs.true294:                                 ; preds = %if.then289
  %194 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !6861
  %base295 = bitcast %union.df_ref_d* %194 to %struct.df_base_ref*, !dbg !6861
  %195 = bitcast %struct.df_base_ref* %base295 to i32*, !dbg !6861
  %bf.load296 = load i32, i32* %195, align 8, !dbg !6861
  %bf.ashr297 = ashr i32 %bf.load296, 16, !dbg !6861
  %and298 = and i32 %bf.ashr297, 768, !dbg !6861
  %cmp299 = icmp ne i32 %and298, 0, !dbg !6861
  br i1 %cmp299, label %if.else334, label %if.then301, !dbg !6862

if.then301:                                       ; preds = %land.lhs.true294
  call void @llvm.dbg.declare(metadata i32* %start302, metadata !6863, metadata !DIExpression()), !dbg !6865
  %196 = load %struct.rtx_def*, %struct.rtx_def** %reg236, align 8, !dbg !6866
  %u303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %196, i32 0, i32 1, !dbg !6866
  %fld304 = bitcast %union.u* %u303 to [1 x %union.rtunion_def]*, !dbg !6866
  %arrayidx305 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld304, i64 0, i64 1, !dbg !6866
  %rt_uint306 = bitcast %union.rtunion_def* %arrayidx305 to i32*, !dbg !6866
  %197 = load i32, i32* %rt_uint306, align 8, !dbg !6866
  store i32 %197, i32* %start302, align 4, !dbg !6865
  call void @llvm.dbg.declare(metadata i32* %last307, metadata !6867, metadata !DIExpression()), !dbg !6868
  %198 = load i32, i32* %start302, align 4, !dbg !6869
  %199 = load %struct.rtx_def*, %struct.rtx_def** %reg236, align 8, !dbg !6870
  %200 = bitcast %struct.rtx_def* %199 to i32*, !dbg !6870
  %bf.load308 = load i32, i32* %200, align 8, !dbg !6870
  %bf.lshr309 = lshr i32 %bf.load308, 16, !dbg !6870
  %bf.clear310 = and i32 %bf.lshr309, 255, !dbg !6870
  %idxprom311 = zext i32 %bf.clear310 to i64, !dbg !6870
  %arrayidx312 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom311, !dbg !6870
  %201 = load i8, i8* %arrayidx312, align 1, !dbg !6870
  %conv313 = zext i8 %201 to i16, !dbg !6870
  %conv314 = zext i16 %conv313 to i32, !dbg !6870
  %add315 = add i32 %198, %conv314, !dbg !6871
  store i32 %add315, i32* %last307, align 4, !dbg !6868
  %202 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6872
  %203 = load i32, i32* %regno233, align 4, !dbg !6873
  %call316 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %202, i32 %203), !dbg !6874
  %conv317 = trunc i32 %call316 to i8, !dbg !6874
  %204 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6875
  %205 = load i32*, i32** %live_subregs_used, align 8, !dbg !6876
  %206 = load i32, i32* %regno233, align 4, !dbg !6877
  %207 = load %struct.rtx_def*, %struct.rtx_def** %reg236, align 8, !dbg !6878
  call void @init_live_subregs(i8 zeroext %conv317, %struct.simple_bitmap_def** %204, i32* %205, i32 %206, %struct.rtx_def* %207), !dbg !6879
  %208 = load i32, i32* %last307, align 4, !dbg !6880
  %209 = load i32*, i32** %live_subregs_used, align 8, !dbg !6882
  %210 = load i32, i32* %regno233, align 4, !dbg !6883
  %idxprom318 = zext i32 %210 to i64, !dbg !6882
  %arrayidx319 = getelementptr inbounds i32, i32* %209, i64 %idxprom318, !dbg !6882
  %211 = load i32, i32* %arrayidx319, align 4, !dbg !6882
  %cmp320 = icmp sgt i32 %208, %211, !dbg !6884
  br i1 %cmp320, label %if.then322, label %if.end325, !dbg !6885

if.then322:                                       ; preds = %if.then301
  %212 = load i32*, i32** %live_subregs_used, align 8, !dbg !6886
  %213 = load i32, i32* %regno233, align 4, !dbg !6887
  %idxprom323 = zext i32 %213 to i64, !dbg !6886
  %arrayidx324 = getelementptr inbounds i32, i32* %212, i64 %idxprom323, !dbg !6886
  %214 = load i32, i32* %arrayidx324, align 4, !dbg !6886
  store i32 %214, i32* %last307, align 4, !dbg !6888
  br label %if.end325, !dbg !6889

if.end325:                                        ; preds = %if.then322, %if.then301
  br label %while.cond326, !dbg !6890

while.cond326:                                    ; preds = %while.body329, %if.end325
  %215 = load i32, i32* %start302, align 4, !dbg !6891
  %216 = load i32, i32* %last307, align 4, !dbg !6892
  %cmp327 = icmp ult i32 %215, %216, !dbg !6893
  br i1 %cmp327, label %while.body329, label %while.end333, !dbg !6890

while.body329:                                    ; preds = %while.cond326
  %217 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6894
  %218 = load i32, i32* %regno233, align 4, !dbg !6896
  %idxprom330 = zext i32 %218 to i64, !dbg !6894
  %arrayidx331 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %217, i64 %idxprom330, !dbg !6894
  %219 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx331, align 8, !dbg !6894
  %220 = load i32, i32* %start302, align 4, !dbg !6897
  call void @SET_BIT(%struct.simple_bitmap_def* %219, i32 %220), !dbg !6898
  %221 = load i32, i32* %start302, align 4, !dbg !6899
  %inc332 = add i32 %221, 1, !dbg !6899
  store i32 %inc332, i32* %start302, align 4, !dbg !6899
  br label %while.cond326, !dbg !6890, !llvm.loop !6900

while.end333:                                     ; preds = %while.cond326
  br label %if.end337, !dbg !6902

if.else334:                                       ; preds = %land.lhs.true294, %if.then289
  %222 = load i32*, i32** %live_subregs_used, align 8, !dbg !6903
  %223 = load i32, i32* %regno233, align 4, !dbg !6904
  %idxprom335 = zext i32 %223 to i64, !dbg !6903
  %arrayidx336 = getelementptr inbounds i32, i32* %222, i64 %idxprom335, !dbg !6903
  store i32 0, i32* %arrayidx336, align 4, !dbg !6905
  br label %if.end337

if.end337:                                        ; preds = %if.else334, %while.end333
  %224 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6906
  %225 = load i32, i32* %regno233, align 4, !dbg !6907
  %call338 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %224, i32 %225), !dbg !6908
  br label %if.end339, !dbg !6909

if.end339:                                        ; preds = %if.end337, %lor.lhs.false285
  br label %for.inc340, !dbg !6910

for.inc340:                                       ; preds = %if.end339, %if.then259
  %226 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !6911
  %incdec.ptr341 = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %226, i32 1, !dbg !6911
  store %union.df_ref_d** %incdec.ptr341, %union.df_ref_d*** %use_rec, align 8, !dbg !6911
  br label %for.cond230, !dbg !6912, !llvm.loop !6913

for.end342:                                       ; preds = %for.cond230
  br label %if.end343, !dbg !6914

if.end343:                                        ; preds = %for.end342, %lor.lhs.false221
  br label %if.end344, !dbg !6915

if.end344:                                        ; preds = %if.end343, %land.lhs.true, %for.body47
  br label %for.inc345, !dbg !6916

for.inc345:                                       ; preds = %if.end344
  %227 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6586
  %u346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1, !dbg !6586
  %fld347 = bitcast %union.u* %u346 to [1 x %union.rtunion_def]*, !dbg !6586
  %arrayidx348 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld347, i64 0, i64 1, !dbg !6586
  %rt_rtx349 = bitcast %union.rtunion_def* %arrayidx348 to %struct.rtx_def**, !dbg !6586
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx349, align 8, !dbg !6586
  store %struct.rtx_def* %228, %struct.rtx_def** %insn, align 8, !dbg !6586
  br label %for.cond41, !dbg !6586, !llvm.loop !6917

for.end350:                                       ; preds = %land.end
  %229 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6919
  %il351 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %229, i32 0, i32 7, !dbg !6919
  %rtl352 = bitcast %union.basic_block_il_dependent* %il351 to %struct.rtl_bb_info**, !dbg !6919
  %230 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl352, align 8, !dbg !6919
  %head_353 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %230, i32 0, i32 0, !dbg !6919
  %231 = load %struct.rtx_def*, %struct.rtx_def** %head_353, align 8, !dbg !6919
  store %struct.rtx_def* %231, %struct.rtx_def** %insn, align 8, !dbg !6920
  br label %while.cond354, !dbg !6921

while.cond354:                                    ; preds = %while.body372, %for.end350
  %232 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6922
  %tobool355 = icmp ne %struct.rtx_def* %232, null, !dbg !6922
  br i1 %tobool355, label %land.rhs356, label %land.end371, !dbg !6923

land.rhs356:                                      ; preds = %while.cond354
  %233 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6924
  %234 = bitcast %struct.rtx_def* %233 to i32*, !dbg !6924
  %bf.load357 = load i32, i32* %234, align 8, !dbg !6924
  %bf.clear358 = and i32 %bf.load357, 65535, !dbg !6924
  %cmp359 = icmp eq i32 %bf.clear358, 11, !dbg !6924
  br i1 %cmp359, label %lor.end, label %lor.lhs.false361, !dbg !6925

lor.lhs.false361:                                 ; preds = %land.rhs356
  %235 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6926
  %236 = bitcast %struct.rtx_def* %235 to i32*, !dbg !6926
  %bf.load362 = load i32, i32* %236, align 8, !dbg !6926
  %bf.clear363 = and i32 %bf.load362, 65535, !dbg !6926
  %cmp364 = icmp eq i32 %bf.clear363, 13, !dbg !6926
  br i1 %cmp364, label %lor.end, label %lor.rhs, !dbg !6927

lor.rhs:                                          ; preds = %lor.lhs.false361
  %237 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6928
  %u366 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %237, i32 0, i32 1, !dbg !6928
  %fld367 = bitcast %union.u* %u366 to [1 x %union.rtunion_def]*, !dbg !6928
  %arrayidx368 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld367, i64 0, i64 3, !dbg !6928
  %rt_bb = bitcast %union.rtunion_def* %arrayidx368 to %struct.basic_block_def**, !dbg !6928
  %238 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6928
  %239 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6929
  %cmp369 = icmp eq %struct.basic_block_def* %238, %239, !dbg !6930
  br label %lor.end, !dbg !6927

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false361, %land.rhs356
  %240 = phi i1 [ true, %lor.lhs.false361 ], [ true, %land.rhs356 ], [ %cmp369, %lor.rhs ]
  br label %land.end371

land.end371:                                      ; preds = %lor.end, %while.cond354
  %241 = phi i1 [ false, %while.cond354 ], [ %240, %lor.end ], !dbg !6931
  br i1 %241, label %while.body372, label %while.end377, !dbg !6921

while.body372:                                    ; preds = %land.end371
  %242 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6932
  %u373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %242, i32 0, i32 1, !dbg !6932
  %fld374 = bitcast %union.u* %u373 to [1 x %union.rtunion_def]*, !dbg !6932
  %arrayidx375 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld374, i64 0, i64 1, !dbg !6932
  %rt_rtx376 = bitcast %union.rtunion_def* %arrayidx375 to %struct.rtx_def**, !dbg !6932
  %243 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx376, align 8, !dbg !6932
  store %struct.rtx_def* %243, %struct.rtx_def** %insn, align 8, !dbg !6933
  br label %while.cond354, !dbg !6921, !llvm.loop !6934

while.end377:                                     ; preds = %land.end371
  br label %while.cond378, !dbg !6935

while.cond378:                                    ; preds = %if.end405, %while.end377
  %244 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6936
  %tobool379 = icmp ne %struct.rtx_def* %244, null, !dbg !6935
  br i1 %tobool379, label %while.body380, label %while.end410, !dbg !6935

while.body380:                                    ; preds = %while.cond378
  %245 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6937
  %246 = bitcast %struct.rtx_def* %245 to i32*, !dbg !6937
  %bf.load381 = load i32, i32* %246, align 8, !dbg !6937
  %bf.clear382 = and i32 %bf.load381, 65535, !dbg !6937
  %cmp383 = icmp eq i32 %bf.clear382, 13, !dbg !6937
  br i1 %cmp383, label %if.end405, label %land.lhs.true385, !dbg !6940

land.lhs.true385:                                 ; preds = %while.body380
  %247 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6941
  %248 = bitcast %struct.rtx_def* %247 to i32*, !dbg !6941
  %bf.load386 = load i32, i32* %248, align 8, !dbg !6941
  %bf.clear387 = and i32 %bf.load386, 65535, !dbg !6941
  %cmp388 = icmp eq i32 %bf.clear387, 11, !dbg !6941
  br i1 %cmp388, label %if.end405, label %if.then390, !dbg !6942

if.then390:                                       ; preds = %land.lhs.true385
  %249 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6943
  %u391 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %249, i32 0, i32 1, !dbg !6943
  %fld392 = bitcast %union.u* %u391 to [1 x %union.rtunion_def]*, !dbg !6943
  %arrayidx393 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld392, i64 0, i64 3, !dbg !6943
  %rt_bb394 = bitcast %union.rtunion_def* %arrayidx393 to %struct.basic_block_def**, !dbg !6943
  %250 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb394, align 8, !dbg !6943
  %tobool395 = icmp ne %struct.basic_block_def* %250, null, !dbg !6943
  br i1 %tobool395, label %if.then396, label %if.end397, !dbg !6946

if.then396:                                       ; preds = %if.then390
  br label %while.end410, !dbg !6947

if.end397:                                        ; preds = %if.then390
  %call398 = call %struct.insn_chain* @new_insn_chain(), !dbg !6948
  store %struct.insn_chain* %call398, %struct.insn_chain** %c, align 8, !dbg !6949
  %251 = load %struct.insn_chain*, %struct.insn_chain** %next, align 8, !dbg !6950
  %252 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6951
  %next399 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %252, i32 0, i32 0, !dbg !6952
  store %struct.insn_chain* %251, %struct.insn_chain** %next399, align 8, !dbg !6953
  %253 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6954
  store %struct.insn_chain* %253, %struct.insn_chain** %next, align 8, !dbg !6955
  %254 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6956
  %255 = load %struct.insn_chain**, %struct.insn_chain*** %p, align 8, !dbg !6957
  store %struct.insn_chain* %254, %struct.insn_chain** %255, align 8, !dbg !6958
  %256 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6959
  %prev400 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %256, i32 0, i32 1, !dbg !6960
  store %struct.insn_chain** %prev400, %struct.insn_chain*** %p, align 8, !dbg !6961
  %257 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6962
  %index401 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %257, i32 0, i32 9, !dbg !6963
  %258 = load i32, i32* %index401, align 8, !dbg !6963
  %259 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6964
  %block402 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %259, i32 0, i32 4, !dbg !6965
  store i32 %258, i32* %block402, align 8, !dbg !6966
  %260 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6967
  %261 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6968
  %insn403 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %261, i32 0, i32 3, !dbg !6969
  store %struct.rtx_def* %260, %struct.rtx_def** %insn403, align 8, !dbg !6970
  %262 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !6971
  %live_throughout404 = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %262, i32 0, i32 6, !dbg !6972
  %263 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !6973
  call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout404, %struct.bitmap_head_def* %263), !dbg !6974
  br label %if.end405, !dbg !6975

if.end405:                                        ; preds = %if.end397, %land.lhs.true385, %while.body380
  %264 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6976
  %u406 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1, !dbg !6976
  %fld407 = bitcast %union.u* %u406 to [1 x %union.rtunion_def]*, !dbg !6976
  %arrayidx408 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld407, i64 0, i64 1, !dbg !6976
  %rt_rtx409 = bitcast %union.rtunion_def* %arrayidx408 to %struct.rtx_def**, !dbg !6976
  %265 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx409, align 8, !dbg !6976
  store %struct.rtx_def* %265, %struct.rtx_def** %insn, align 8, !dbg !6977
  br label %while.cond378, !dbg !6935, !llvm.loop !6978

while.end410:                                     ; preds = %if.then396, %while.cond378
  br label %for.inc411, !dbg !6980

for.inc411:                                       ; preds = %while.end410
  %266 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6534
  %prev_bb412 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %266, i32 0, i32 5, !dbg !6534
  %267 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb412, align 8, !dbg !6534
  store %struct.basic_block_def* %267, %struct.basic_block_def** %bb, align 8, !dbg !6534
  br label %for.cond7, !dbg !6534, !llvm.loop !6981

for.end413:                                       ; preds = %for.cond7
  store i32 0, i32* %i, align 4, !dbg !6983
  br label %for.cond414, !dbg !6985

for.cond414:                                      ; preds = %for.inc425, %for.end413
  %268 = load i32, i32* %i, align 4, !dbg !6986
  %269 = load i32, i32* @max_regno, align 4, !dbg !6988
  %cmp415 = icmp ult i32 %268, %269, !dbg !6989
  br i1 %cmp415, label %for.body417, label %for.end427, !dbg !6990

for.body417:                                      ; preds = %for.cond414
  %270 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6991
  %271 = load i32, i32* %i, align 4, !dbg !6993
  %idxprom418 = zext i32 %271 to i64, !dbg !6991
  %arrayidx419 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %270, i64 %idxprom418, !dbg !6991
  %272 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx419, align 8, !dbg !6991
  %tobool420 = icmp ne %struct.simple_bitmap_def* %272, null, !dbg !6991
  br i1 %tobool420, label %if.then421, label %if.end424, !dbg !6994

if.then421:                                       ; preds = %for.body417
  %273 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !6995
  %274 = load i32, i32* %i, align 4, !dbg !6996
  %idxprom422 = zext i32 %274 to i64, !dbg !6995
  %arrayidx423 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %273, i64 %idxprom422, !dbg !6995
  %275 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx423, align 8, !dbg !6995
  %276 = bitcast %struct.simple_bitmap_def* %275 to i8*, !dbg !6995
  call void @free(i8* %276), !dbg !6997
  br label %if.end424, !dbg !6997

if.end424:                                        ; preds = %if.then421, %for.body417
  br label %for.inc425, !dbg !6998

for.inc425:                                       ; preds = %if.end424
  %277 = load i32, i32* %i, align 4, !dbg !6999
  %inc426 = add i32 %277, 1, !dbg !6999
  store i32 %inc426, i32* %i, align 4, !dbg !6999
  br label %for.cond414, !dbg !7000, !llvm.loop !7001

for.end427:                                       ; preds = %for.cond414
  %278 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !7003
  store %struct.insn_chain* %278, %struct.insn_chain** @reload_insn_chain, align 8, !dbg !7004
  %279 = load %struct.insn_chain**, %struct.insn_chain*** %p, align 8, !dbg !7005
  store %struct.insn_chain* null, %struct.insn_chain** %279, align 8, !dbg !7006
  %280 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs, align 8, !dbg !7007
  %281 = bitcast %struct.simple_bitmap_def** %280 to i8*, !dbg !7007
  call void @free(i8* %281), !dbg !7008
  %282 = load i32*, i32** %live_subregs_used, align 8, !dbg !7009
  %283 = bitcast i32* %282 to i8*, !dbg !7009
  call void @free(i8* %283), !dbg !7010
  %284 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !7011
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %284), !dbg !7011
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %live_relevant_regs, align 8, !dbg !7011
  %285 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %elim_regset, align 8, !dbg !7012
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %285), !dbg !7012
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %elim_regset, align 8, !dbg !7012
  %286 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7013
  %tobool428 = icmp ne %struct._IO_FILE* %286, null, !dbg !7013
  br i1 %tobool428, label %if.then429, label %if.end430, !dbg !7015

if.then429:                                       ; preds = %for.end427
  %287 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7016
  call void @print_insn_chains(%struct._IO_FILE* %287), !dbg !7017
  br label %if.end430, !dbg !7017

if.end430:                                        ; preds = %if.then429, %for.end427
  ret void, !dbg !7018
}

declare dso_local i32 @reload(%struct.rtx_def*, i32) #2

declare dso_local void @finish_subregs_of_mode() #2

declare dso_local void @ira_finish_assign() #2

declare dso_local void @ira_destroy() #2

declare dso_local void @flow_loops_free(%struct.loops*) #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local zeroext i8 @cleanup_cfg(i32) #2

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

declare dso_local void @df_finish_pass(i8 zeroext) #2

declare dso_local void @df_scan_alloc(%struct.bitmap_head_def*) #2

declare dso_local void @df_scan_blocks() #2

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_iuuBieie_stat(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*, i32, %struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @df_ref_change_reg_with_loc(i32, i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !7019 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7025, metadata !DIExpression()), !dbg !7026
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7027
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7027
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7027
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7027
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7027
  %1 = load i32, i32* %rt_uint, align 8, !dbg !7027
  ret i32 %1, !dbg !7028
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !7029 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7033, metadata !DIExpression()), !dbg !7034
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7035
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7035
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7035
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !7035
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7035
  %1 = load i32, i32* %rt_int, align 8, !dbg !7035
  %cmp = icmp slt i32 %1, 0, !dbg !7037
  br i1 %cmp, label %if.then, label %if.end, !dbg !7038

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7039
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7039
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7039
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !7039
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7039
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7039
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7040
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !7041
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7042
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7042
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7042
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !7042
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !7042
  store i32 %call, i32* %rt_int7, align 8, !dbg !7043
  br label %if.end, !dbg !7042

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7044
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7044
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7044
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !7044
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !7044
  %7 = load i32, i32* %rt_int11, align 8, !dbg !7044
  ret i32 %7, !dbg !7045
}

declare dso_local void @extract_insn(%struct.rtx_def*) #2

declare dso_local i32 @constrain_operands(i32) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local void @init_alias_analysis() #2

; Function Attrs: noinline nounwind uwtable
define internal void @no_equiv(%struct.rtx_def* %reg, %struct.rtx_def* %store, i8* %data) #0 !dbg !7046 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %store.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %regno = alloca i32, align 4
  %list = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  store %struct.rtx_def* %store, %struct.rtx_def** %store.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %store.addr, metadata !7051, metadata !DIExpression()), !dbg !7052
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7053, metadata !DIExpression()), !dbg !7054
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7055, metadata !DIExpression()), !dbg !7056
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %list, metadata !7057, metadata !DIExpression()), !dbg !7058
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !7059
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7059
  %bf.load = load i32, i32* %1, align 8, !dbg !7059
  %bf.clear = and i32 %bf.load, 65535, !dbg !7059
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !7059
  br i1 %cmp, label %if.end, label %if.then, !dbg !7061

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !7062

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !7063
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !7063
  store i32 %call, i32* %regno, align 4, !dbg !7064
  %3 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7065
  %4 = load i32, i32* %regno, align 4, !dbg !7066
  %idxprom = sext i32 %4 to i64, !dbg !7065
  %arrayidx = getelementptr inbounds %struct.equivalence, %struct.equivalence* %3, i64 %idxprom, !dbg !7065
  %init_insns = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx, i32 0, i32 2, !dbg !7067
  %5 = load %struct.rtx_def*, %struct.rtx_def** %init_insns, align 8, !dbg !7067
  store %struct.rtx_def* %5, %struct.rtx_def** %list, align 8, !dbg !7068
  %6 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !7069
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7071
  %cmp1 = icmp eq %struct.rtx_def* %6, %7, !dbg !7072
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7073

if.then2:                                         ; preds = %if.end
  br label %for.end, !dbg !7074

if.end3:                                          ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7075
  %9 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7076
  %10 = load i32, i32* %regno, align 4, !dbg !7077
  %idxprom4 = sext i32 %10 to i64, !dbg !7076
  %arrayidx5 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %9, i64 %idxprom4, !dbg !7076
  %init_insns6 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx5, i32 0, i32 2, !dbg !7078
  store %struct.rtx_def* %8, %struct.rtx_def** %init_insns6, align 8, !dbg !7079
  %11 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7080
  %12 = load i32, i32* %regno, align 4, !dbg !7081
  %idxprom7 = sext i32 %12 to i64, !dbg !7080
  %arrayidx8 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %11, i64 %idxprom7, !dbg !7080
  %replacement = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx8, i32 0, i32 0, !dbg !7082
  store %struct.rtx_def* null, %struct.rtx_def** %replacement, align 8, !dbg !7083
  %13 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7084
  %14 = load i32, i32* %regno, align 4, !dbg !7086
  %idxprom9 = sext i32 %14 to i64, !dbg !7084
  %arrayidx10 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %13, i64 %idxprom9, !dbg !7084
  %is_arg_equivalence = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx10, i32 0, i32 4, !dbg !7087
  %15 = load i32, i32* %is_arg_equivalence, align 4, !dbg !7087
  %tobool = icmp ne i32 %15, 0, !dbg !7084
  br i1 %tobool, label %if.then11, label %if.end12, !dbg !7088

if.then11:                                        ; preds = %if.end3
  br label %for.end, !dbg !7089

if.end12:                                         ; preds = %if.end3
  %16 = load %struct.rtx_def**, %struct.rtx_def*** @reg_equiv_init, align 8, !dbg !7090
  %17 = load i32, i32* %regno, align 4, !dbg !7091
  %idxprom13 = sext i32 %17 to i64, !dbg !7090
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 %idxprom13, !dbg !7090
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx14, align 8, !dbg !7092
  br label %for.cond, !dbg !7093

for.cond:                                         ; preds = %for.inc, %if.end12
  %18 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !7094
  %tobool15 = icmp ne %struct.rtx_def* %18, null, !dbg !7097
  br i1 %tobool15, label %for.body, label %for.end, !dbg !7097

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7098, metadata !DIExpression()), !dbg !7100
  %19 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !7101
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7101
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7101
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7101
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !7101
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7101
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8, !dbg !7100
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7102
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7103
  %call17 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %22, i32 3, %struct.rtx_def* null), !dbg !7104
  call void @remove_note(%struct.rtx_def* %21, %struct.rtx_def* %call17), !dbg !7105
  br label %for.inc, !dbg !7106

for.inc:                                          ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %list, align 8, !dbg !7107
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7107
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !7107
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !7107
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !7107
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !7107
  store %struct.rtx_def* %24, %struct.rtx_def** %list, align 8, !dbg !7108
  br label %for.cond, !dbg !7109, !llvm.loop !7110

for.end:                                          ; preds = %if.then, %if.then2, %if.then11, %for.cond
  ret void, !dbg !7112
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ue_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @reg_preferred_class(i32) #2

declare dso_local zeroext i8 @rtx_varies_p(%struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @validate_equiv_mem(%struct.rtx_def* %start, %struct.rtx_def* %reg, %struct.rtx_def* %memref) #0 !dbg !7113 {
entry:
  %retval = alloca i32, align 4
  %start.addr = alloca %struct.rtx_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %memref.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start.addr, metadata !7116, metadata !DIExpression()), !dbg !7117
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !7118, metadata !DIExpression()), !dbg !7119
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !7120, metadata !DIExpression()), !dbg !7121
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7122, metadata !DIExpression()), !dbg !7123
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !7124, metadata !DIExpression()), !dbg !7125
  %0 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7126
  store %struct.rtx_def* %0, %struct.rtx_def** @equiv_mem, align 8, !dbg !7127
  store i32 0, i32* @equiv_mem_modified, align 4, !dbg !7128
  %1 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7129
  %call = call i32 @side_effects_p(%struct.rtx_def* %1), !dbg !7131
  %tobool = icmp ne i32 %call, 0, !dbg !7131
  br i1 %tobool, label %if.then, label %if.end, !dbg !7132

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7133
  br label %return, !dbg !7133

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !7134
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !7136
  br label %for.cond, !dbg !7137

for.cond:                                         ; preds = %for.inc74, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7138
  %tobool1 = icmp ne %struct.rtx_def* %3, null, !dbg !7138
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !7140

land.rhs:                                         ; preds = %for.cond
  %4 = load i32, i32* @equiv_mem_modified, align 4, !dbg !7141
  %tobool2 = icmp ne i32 %4, 0, !dbg !7142
  %lnot = xor i1 %tobool2, true, !dbg !7142
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !7143
  br i1 %5, label %for.body, label %for.end79, !dbg !7144

for.body:                                         ; preds = %land.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7145
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7145
  %bf.load = load i32, i32* %7, align 8, !dbg !7145
  %bf.clear = and i32 %bf.load, 65535, !dbg !7145
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !7145
  br i1 %cmp, label %if.end15, label %lor.lhs.false, !dbg !7145

lor.lhs.false:                                    ; preds = %for.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7145
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7145
  %bf.load3 = load i32, i32* %9, align 8, !dbg !7145
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !7145
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !7145
  br i1 %cmp5, label %if.end15, label %lor.lhs.false6, !dbg !7145

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7145
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7145
  %bf.load7 = load i32, i32* %11, align 8, !dbg !7145
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !7145
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !7145
  br i1 %cmp9, label %if.end15, label %lor.lhs.false10, !dbg !7145

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7145
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7145
  %bf.load11 = load i32, i32* %13, align 8, !dbg !7145
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7145
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !7145
  br i1 %cmp13, label %if.end15, label %if.then14, !dbg !7148

if.then14:                                        ; preds = %lor.lhs.false10
  br label %for.inc74, !dbg !7149

if.end15:                                         ; preds = %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7150
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !7152
  %call16 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %14, i32 1, %struct.rtx_def* %15), !dbg !7153
  %tobool17 = icmp ne %struct.rtx_def* %call16, null, !dbg !7153
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !7154

if.then18:                                        ; preds = %if.end15
  store i32 1, i32* %retval, align 4, !dbg !7155
  br label %return, !dbg !7155

if.end19:                                         ; preds = %if.end15
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7156
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !7156
  %bf.load20 = load i32, i32* %17, align 8, !dbg !7156
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !7156
  %cmp22 = icmp eq i32 %bf.clear21, 10, !dbg !7156
  br i1 %cmp22, label %land.lhs.true, label %if.end36, !dbg !7158

land.lhs.true:                                    ; preds = %if.end19
  %18 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7159
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7159
  %bf.load23 = load i32, i32* %19, align 8, !dbg !7159
  %bf.lshr = lshr i32 %bf.load23, 26, !dbg !7159
  %bf.clear24 = and i32 %bf.lshr, 1, !dbg !7159
  %tobool25 = icmp ne i32 %bf.clear24, 0, !dbg !7159
  br i1 %tobool25, label %if.end36, label %land.lhs.true26, !dbg !7160

land.lhs.true26:                                  ; preds = %land.lhs.true
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7161
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !7161
  %bf.load27 = load i32, i32* %21, align 8, !dbg !7161
  %bf.lshr28 = lshr i32 %bf.load27, 26, !dbg !7161
  %bf.clear29 = and i32 %bf.lshr28, 1, !dbg !7161
  %tobool30 = icmp ne i32 %bf.clear29, 0, !dbg !7161
  br i1 %tobool30, label %if.end36, label %lor.lhs.false31, !dbg !7161

lor.lhs.false31:                                  ; preds = %land.lhs.true26
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7161
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !7161
  %bf.load32 = load i32, i32* %23, align 8, !dbg !7161
  %bf.lshr33 = lshr i32 %bf.load32, 31, !dbg !7161
  %tobool34 = icmp ne i32 %bf.lshr33, 0, !dbg !7161
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !7162

if.then35:                                        ; preds = %lor.lhs.false31
  store i32 0, i32* %retval, align 4, !dbg !7163
  br label %return, !dbg !7163

if.end36:                                         ; preds = %lor.lhs.false31, %land.lhs.true26, %land.lhs.true, %if.end19
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7164
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7164
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7164
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7164
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7164
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7164
  call void @note_stores(%struct.rtx_def* %25, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @validate_equiv_mem_from_store, i8* null), !dbg !7165
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7166
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !7166
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !7166
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 7, !dbg !7166
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !7166
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !7166
  store %struct.rtx_def* %27, %struct.rtx_def** %note, align 8, !dbg !7168
  br label %for.cond41, !dbg !7169

for.cond41:                                       ; preds = %for.inc, %if.end36
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7170
  %tobool42 = icmp ne %struct.rtx_def* %28, null, !dbg !7172
  br i1 %tobool42, label %for.body43, label %for.end, !dbg !7172

for.body43:                                       ; preds = %for.cond41
  %29 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7173
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !7173
  %bf.load44 = load i32, i32* %30, align 8, !dbg !7173
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !7173
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !7173
  %cmp47 = icmp eq i32 %bf.clear46, 2, !dbg !7175
  br i1 %cmp47, label %land.lhs.true53, label %lor.lhs.false48, !dbg !7176

lor.lhs.false48:                                  ; preds = %for.body43
  %31 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7177
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !7177
  %bf.load49 = load i32, i32* %32, align 8, !dbg !7177
  %bf.lshr50 = lshr i32 %bf.load49, 16, !dbg !7177
  %bf.clear51 = and i32 %bf.lshr50, 255, !dbg !7177
  %cmp52 = icmp eq i32 %bf.clear51, 1, !dbg !7178
  br i1 %cmp52, label %land.lhs.true53, label %if.end69, !dbg !7179

land.lhs.true53:                                  ; preds = %lor.lhs.false48, %for.body43
  %33 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7180
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !7180
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !7180
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 0, !dbg !7180
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !7180
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !7180
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !7180
  %bf.load58 = load i32, i32* %35, align 8, !dbg !7180
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !7180
  %cmp60 = icmp eq i32 %bf.clear59, 37, !dbg !7180
  br i1 %cmp60, label %land.lhs.true61, label %if.end69, !dbg !7181

land.lhs.true61:                                  ; preds = %land.lhs.true53
  %36 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7182
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !7182
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !7182
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !7182
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !7182
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !7182
  %38 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7183
  %call66 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !7184
  %tobool67 = icmp ne i32 %call66, 0, !dbg !7184
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !7185

if.then68:                                        ; preds = %land.lhs.true61
  store i32 0, i32* %retval, align 4, !dbg !7186
  br label %return, !dbg !7186

if.end69:                                         ; preds = %land.lhs.true61, %land.lhs.true53, %lor.lhs.false48
  br label %for.inc, !dbg !7187

for.inc:                                          ; preds = %if.end69
  %39 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7188
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !7188
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !7188
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 1, !dbg !7188
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !7188
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !7188
  store %struct.rtx_def* %40, %struct.rtx_def** %note, align 8, !dbg !7189
  br label %for.cond41, !dbg !7190, !llvm.loop !7191

for.end:                                          ; preds = %for.cond41
  br label %for.inc74, !dbg !7193

for.inc74:                                        ; preds = %for.end, %if.then14
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7194
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !7194
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !7194
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 2, !dbg !7194
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !7194
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !7194
  store %struct.rtx_def* %42, %struct.rtx_def** %insn, align 8, !dbg !7195
  br label %for.cond, !dbg !7196, !llvm.loop !7197

for.end79:                                        ; preds = %land.end
  store i32 0, i32* %retval, align 4, !dbg !7199
  br label %return, !dbg !7199

return:                                           ; preds = %for.end79, %if.then68, %if.then35, %if.then18, %if.then
  %43 = load i32, i32* %retval, align 4, !dbg !7200
  ret i32 %43, !dbg !7200
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @REG_N_REFS(i32 %regno) #0 !dbg !7201 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  %0 = load %struct.regstat_n_sets_and_refs_t*, %struct.regstat_n_sets_and_refs_t** @regstat_n_sets_and_refs, align 8, !dbg !7206
  %1 = load i32, i32* %regno.addr, align 4, !dbg !7207
  %idxprom = sext i32 %1 to i64, !dbg !7206
  %arrayidx = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %0, i64 %idxprom, !dbg !7206
  %refs = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %arrayidx, i32 0, i32 1, !dbg !7208
  %2 = load i32, i32* %refs, align 4, !dbg !7208
  ret i32 %2, !dbg !7209
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @equiv_init_varies_p(%struct.rtx_def* %x) #0 !dbg !7210 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7211, metadata !DIExpression()), !dbg !7212
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7213, metadata !DIExpression()), !dbg !7214
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7215
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7215
  %bf.load = load i32, i32* %1, align 8, !dbg !7215
  %bf.clear = and i32 %bf.load, 65535, !dbg !7215
  store i32 %bf.clear, i32* %code, align 4, !dbg !7214
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7216, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7218, metadata !DIExpression()), !dbg !7219
  %2 = load i32, i32* %code, align 4, !dbg !7220
  switch i32 %2, label %sw.default [
    i32 43, label %sw.bb
    i32 35, label %sw.bb4
    i32 30, label %sw.bb4
    i32 32, label %sw.bb4
    i32 31, label %sw.bb4
    i32 33, label %sw.bb4
    i32 45, label %sw.bb4
    i32 44, label %sw.bb4
    i32 37, label %sw.bb5
    i32 17, label %sw.bb12
  ], !dbg !7221

sw.bb:                                            ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7222
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7222
  %bf.load1 = load i32, i32* %4, align 8, !dbg !7222
  %bf.lshr = lshr i32 %bf.load1, 26, !dbg !7222
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !7222
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !7222
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !7224

lor.rhs:                                          ; preds = %sw.bb
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7225
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7225
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7225
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7225
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7225
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7225
  %call = call i32 @equiv_init_varies_p(%struct.rtx_def* %6), !dbg !7226
  %tobool3 = icmp ne i32 %call, 0, !dbg !7224
  br label %lor.end, !dbg !7224

lor.end:                                          ; preds = %lor.rhs, %sw.bb
  %7 = phi i1 [ true, %sw.bb ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !7224
  store i32 %lor.ext, i32* %retval, align 4, !dbg !7227
  br label %return, !dbg !7227

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !7228
  br label %return, !dbg !7228

sw.bb5:                                           ; preds = %entry
  %8 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7229
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7230
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !7230
  %idxprom = zext i32 %call6 to i64, !dbg !7229
  %arrayidx7 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %8, i64 %idxprom, !dbg !7229
  %replace = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx7, i32 0, i32 5, !dbg !7231
  %10 = load i8, i8* %replace, align 8, !dbg !7231
  %conv = sext i8 %10 to i32, !dbg !7229
  %cmp = icmp eq i32 %conv, 0, !dbg !7232
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7233

land.rhs:                                         ; preds = %sw.bb5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7234
  %call9 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %11, i8 zeroext 0), !dbg !7235
  %conv10 = zext i8 %call9 to i32, !dbg !7235
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !7233
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb5
  %12 = phi i1 [ false, %sw.bb5 ], [ %tobool11, %land.rhs ], !dbg !7236
  %land.ext = zext i1 %12 to i32, !dbg !7233
  store i32 %land.ext, i32* %retval, align 4, !dbg !7237
  br label %return, !dbg !7237

sw.bb12:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7238
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7238
  %bf.load13 = load i32, i32* %14, align 8, !dbg !7238
  %bf.lshr14 = lshr i32 %bf.load13, 27, !dbg !7238
  %bf.clear15 = and i32 %bf.lshr14, 1, !dbg !7238
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !7238
  br i1 %tobool16, label %if.then, label %if.end, !dbg !7240

if.then:                                          ; preds = %sw.bb12
  store i32 1, i32* %retval, align 4, !dbg !7241
  br label %return, !dbg !7241

if.end:                                           ; preds = %sw.bb12
  br label %sw.default, !dbg !7238

sw.default:                                       ; preds = %entry, %if.end
  br label %sw.epilog, !dbg !7242

sw.epilog:                                        ; preds = %sw.default
  %15 = load i32, i32* %code, align 4, !dbg !7243
  %idxprom17 = sext i32 %15 to i64, !dbg !7243
  %arrayidx18 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom17, !dbg !7243
  %16 = load i8*, i8** %arrayidx18, align 8, !dbg !7243
  store i8* %16, i8** %fmt, align 8, !dbg !7244
  %17 = load i32, i32* %code, align 4, !dbg !7245
  %idxprom19 = sext i32 %17 to i64, !dbg !7245
  %arrayidx20 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom19, !dbg !7245
  %18 = load i8, i8* %arrayidx20, align 1, !dbg !7245
  %conv21 = zext i8 %18 to i32, !dbg !7245
  %sub = sub nsw i32 %conv21, 1, !dbg !7247
  store i32 %sub, i32* %i, align 4, !dbg !7248
  br label %for.cond, !dbg !7249

for.cond:                                         ; preds = %for.inc66, %sw.epilog
  %19 = load i32, i32* %i, align 4, !dbg !7250
  %cmp22 = icmp sge i32 %19, 0, !dbg !7252
  br i1 %cmp22, label %for.body, label %for.end67, !dbg !7253

for.body:                                         ; preds = %for.cond
  %20 = load i8*, i8** %fmt, align 8, !dbg !7254
  %21 = load i32, i32* %i, align 4, !dbg !7256
  %idxprom24 = sext i32 %21 to i64, !dbg !7254
  %arrayidx25 = getelementptr inbounds i8, i8* %20, i64 %idxprom24, !dbg !7254
  %22 = load i8, i8* %arrayidx25, align 1, !dbg !7254
  %conv26 = sext i8 %22 to i32, !dbg !7254
  %cmp27 = icmp eq i32 %conv26, 101, !dbg !7257
  br i1 %cmp27, label %if.then29, label %if.else, !dbg !7258

if.then29:                                        ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7259
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7259
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !7259
  %24 = load i32, i32* %i, align 4, !dbg !7259
  %idxprom32 = sext i32 %24 to i64, !dbg !7259
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 %idxprom32, !dbg !7259
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !7259
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !7259
  %call35 = call i32 @equiv_init_varies_p(%struct.rtx_def* %25), !dbg !7262
  %tobool36 = icmp ne i32 %call35, 0, !dbg !7262
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !7263

if.then37:                                        ; preds = %if.then29
  store i32 1, i32* %retval, align 4, !dbg !7264
  br label %return, !dbg !7264

if.end38:                                         ; preds = %if.then29
  br label %if.end65, !dbg !7265

if.else:                                          ; preds = %for.body
  %26 = load i8*, i8** %fmt, align 8, !dbg !7266
  %27 = load i32, i32* %i, align 4, !dbg !7268
  %idxprom39 = sext i32 %27 to i64, !dbg !7266
  %arrayidx40 = getelementptr inbounds i8, i8* %26, i64 %idxprom39, !dbg !7266
  %28 = load i8, i8* %arrayidx40, align 1, !dbg !7266
  %conv41 = sext i8 %28 to i32, !dbg !7266
  %cmp42 = icmp eq i32 %conv41, 69, !dbg !7269
  br i1 %cmp42, label %if.then44, label %if.end64, !dbg !7270

if.then44:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7271, metadata !DIExpression()), !dbg !7273
  store i32 0, i32* %j, align 4, !dbg !7274
  br label %for.cond45, !dbg !7276

for.cond45:                                       ; preds = %for.inc, %if.then44
  %29 = load i32, i32* %j, align 4, !dbg !7277
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7279
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !7279
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !7279
  %31 = load i32, i32* %i, align 4, !dbg !7279
  %idxprom48 = sext i32 %31 to i64, !dbg !7279
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 %idxprom48, !dbg !7279
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtvec_def**, !dbg !7279
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7279
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 0, !dbg !7279
  %33 = load i32, i32* %num_elem, align 8, !dbg !7279
  %cmp50 = icmp slt i32 %29, %33, !dbg !7280
  br i1 %cmp50, label %for.body52, label %for.end, !dbg !7281

for.body52:                                       ; preds = %for.cond45
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7282
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !7282
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !7282
  %35 = load i32, i32* %i, align 4, !dbg !7282
  %idxprom55 = sext i32 %35 to i64, !dbg !7282
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 %idxprom55, !dbg !7282
  %rt_rtvec57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtvec_def**, !dbg !7282
  %36 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec57, align 8, !dbg !7282
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %36, i32 0, i32 1, !dbg !7282
  %37 = load i32, i32* %j, align 4, !dbg !7282
  %idxprom58 = sext i32 %37 to i64, !dbg !7282
  %arrayidx59 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom58, !dbg !7282
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx59, align 8, !dbg !7282
  %call60 = call i32 @equiv_init_varies_p(%struct.rtx_def* %38), !dbg !7284
  %tobool61 = icmp ne i32 %call60, 0, !dbg !7284
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !7285

if.then62:                                        ; preds = %for.body52
  store i32 1, i32* %retval, align 4, !dbg !7286
  br label %return, !dbg !7286

if.end63:                                         ; preds = %for.body52
  br label %for.inc, !dbg !7287

for.inc:                                          ; preds = %if.end63
  %39 = load i32, i32* %j, align 4, !dbg !7288
  %inc = add nsw i32 %39, 1, !dbg !7288
  store i32 %inc, i32* %j, align 4, !dbg !7288
  br label %for.cond45, !dbg !7289, !llvm.loop !7290

for.end:                                          ; preds = %for.cond45
  br label %if.end64, !dbg !7292

if.end64:                                         ; preds = %for.end, %if.else
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end38
  br label %for.inc66, !dbg !7293

for.inc66:                                        ; preds = %if.end65
  %40 = load i32, i32* %i, align 4, !dbg !7294
  %dec = add nsw i32 %40, -1, !dbg !7294
  store i32 %dec, i32* %i, align 4, !dbg !7294
  br label %for.cond, !dbg !7295, !llvm.loop !7296

for.end67:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7298
  br label %return, !dbg !7298

return:                                           ; preds = %for.end67, %if.then62, %if.then37, %if.then, %land.end, %sw.bb4, %lor.end
  %41 = load i32, i32* %retval, align 4, !dbg !7299
  ret i32 %41, !dbg !7299
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @equiv_init_movable_p(%struct.rtx_def* %x, i32 %regno) #0 !dbg !7300 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %code = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7303, metadata !DIExpression()), !dbg !7304
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7307, metadata !DIExpression()), !dbg !7308
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7309, metadata !DIExpression()), !dbg !7310
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7311, metadata !DIExpression()), !dbg !7312
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7313, metadata !DIExpression()), !dbg !7314
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7315
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7315
  %bf.load = load i32, i32* %1, align 8, !dbg !7315
  %bf.clear = and i32 %bf.load, 65535, !dbg !7315
  store i32 %bf.clear, i32* %code, align 4, !dbg !7314
  %2 = load i32, i32* %code, align 4, !dbg !7316
  switch i32 %2, label %sw.default [
    i32 23, label %sw.bb
    i32 46, label %sw.bb1
    i32 25, label %sw.bb1
    i32 75, label %sw.bb2
    i32 74, label %sw.bb2
    i32 77, label %sw.bb2
    i32 76, label %sw.bb2
    i32 78, label %sw.bb2
    i32 79, label %sw.bb2
    i32 37, label %sw.bb3
    i32 19, label %sw.bb19
    i32 17, label %sw.bb20
  ], !dbg !7317

sw.bb:                                            ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7318
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7318
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7318
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7318
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7318
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7318
  %5 = load i32, i32* %regno.addr, align 4, !dbg !7320
  %call = call i32 @equiv_init_movable_p(%struct.rtx_def* %4, i32 %5), !dbg !7321
  store i32 %call, i32* %retval, align 4, !dbg !7322
  br label %return, !dbg !7322

sw.bb1:                                           ; preds = %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !7323
  br label %return, !dbg !7323

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !7324
  br label %return, !dbg !7324

sw.bb3:                                           ; preds = %entry
  %6 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7325
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7326
  %call4 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !7326
  %idxprom = zext i32 %call4 to i64, !dbg !7325
  %arrayidx5 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %6, i64 %idxprom, !dbg !7325
  %loop_depth = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx5, i32 0, i32 3, !dbg !7327
  %8 = load i32, i32* %loop_depth, align 8, !dbg !7327
  %9 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7328
  %10 = load i32, i32* %regno.addr, align 4, !dbg !7329
  %idxprom6 = sext i32 %10 to i64, !dbg !7328
  %arrayidx7 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %9, i64 %idxprom6, !dbg !7328
  %loop_depth8 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx7, i32 0, i32 3, !dbg !7330
  %11 = load i32, i32* %loop_depth8, align 8, !dbg !7330
  %cmp = icmp sge i32 %8, %11, !dbg !7331
  br i1 %cmp, label %land.lhs.true, label %lor.rhs, !dbg !7332

land.lhs.true:                                    ; preds = %sw.bb3
  %12 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7333
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7334
  %call9 = call i32 @rhs_regno(%struct.rtx_def* %13), !dbg !7334
  %idxprom10 = zext i32 %call9 to i64, !dbg !7333
  %arrayidx11 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %12, i64 %idxprom10, !dbg !7333
  %replace = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx11, i32 0, i32 5, !dbg !7335
  %14 = load i8, i8* %replace, align 8, !dbg !7335
  %conv = sext i8 %14 to i32, !dbg !7333
  %tobool = icmp ne i32 %conv, 0, !dbg !7333
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !7336

lor.rhs:                                          ; preds = %land.lhs.true, %sw.bb3
  %15 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !7337
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7337
  %call12 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !7337
  %idxprom13 = zext i32 %call12 to i64, !dbg !7337
  %arrayidx14 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %15, i64 %idxprom13, !dbg !7337
  %basic_block = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx14, i32 0, i32 6, !dbg !7337
  %17 = load i32, i32* %basic_block, align 4, !dbg !7337
  %cmp15 = icmp slt i32 %17, 2, !dbg !7338
  br i1 %cmp15, label %land.rhs, label %land.end, !dbg !7339

land.rhs:                                         ; preds = %lor.rhs
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7340
  %call17 = call zeroext i8 @rtx_varies_p(%struct.rtx_def* %18, i8 zeroext 0), !dbg !7341
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7342
  %lnot = xor i1 %tobool18, true, !dbg !7342
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %19 = phi i1 [ false, %lor.rhs ], [ %lnot, %land.rhs ], !dbg !7343
  br label %lor.end, !dbg !7336

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %20 = phi i1 [ true, %land.lhs.true ], [ %19, %land.end ]
  %lor.ext = zext i1 %20 to i32, !dbg !7336
  store i32 %lor.ext, i32* %retval, align 4, !dbg !7344
  br label %return, !dbg !7344

sw.bb19:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7345
  br label %return, !dbg !7345

sw.bb20:                                          ; preds = %entry
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7346
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !7346
  %bf.load21 = load i32, i32* %22, align 8, !dbg !7346
  %bf.lshr = lshr i32 %bf.load21, 27, !dbg !7346
  %bf.clear22 = and i32 %bf.lshr, 1, !dbg !7346
  %tobool23 = icmp ne i32 %bf.clear22, 0, !dbg !7346
  br i1 %tobool23, label %if.then, label %if.end, !dbg !7348

if.then:                                          ; preds = %sw.bb20
  store i32 0, i32* %retval, align 4, !dbg !7349
  br label %return, !dbg !7349

if.end:                                           ; preds = %sw.bb20
  br label %sw.default, !dbg !7346

sw.default:                                       ; preds = %entry, %if.end
  br label %sw.epilog, !dbg !7350

sw.epilog:                                        ; preds = %sw.default
  %23 = load i32, i32* %code, align 4, !dbg !7351
  %idxprom24 = sext i32 %23 to i64, !dbg !7351
  %arrayidx25 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom24, !dbg !7351
  %24 = load i8*, i8** %arrayidx25, align 8, !dbg !7351
  store i8* %24, i8** %fmt, align 8, !dbg !7352
  %25 = load i32, i32* %code, align 4, !dbg !7353
  %idxprom26 = sext i32 %25 to i64, !dbg !7353
  %arrayidx27 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom26, !dbg !7353
  %26 = load i8, i8* %arrayidx27, align 1, !dbg !7353
  %conv28 = zext i8 %26 to i32, !dbg !7353
  %sub = sub nsw i32 %conv28, 1, !dbg !7355
  store i32 %sub, i32* %i, align 4, !dbg !7356
  br label %for.cond, !dbg !7357

for.cond:                                         ; preds = %for.inc66, %sw.epilog
  %27 = load i32, i32* %i, align 4, !dbg !7358
  %cmp29 = icmp sge i32 %27, 0, !dbg !7360
  br i1 %cmp29, label %for.body, label %for.end68, !dbg !7361

for.body:                                         ; preds = %for.cond
  %28 = load i8*, i8** %fmt, align 8, !dbg !7362
  %29 = load i32, i32* %i, align 4, !dbg !7363
  %idxprom31 = sext i32 %29 to i64, !dbg !7362
  %arrayidx32 = getelementptr inbounds i8, i8* %28, i64 %idxprom31, !dbg !7362
  %30 = load i8, i8* %arrayidx32, align 1, !dbg !7362
  %conv33 = sext i8 %30 to i32, !dbg !7362
  switch i32 %conv33, label %sw.epilog65 [
    i32 101, label %sw.bb34
    i32 69, label %sw.bb44
  ], !dbg !7364

sw.bb34:                                          ; preds = %for.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7365
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7365
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !7365
  %32 = load i32, i32* %i, align 4, !dbg !7365
  %idxprom37 = sext i32 %32 to i64, !dbg !7365
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 %idxprom37, !dbg !7365
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !7365
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !7365
  %34 = load i32, i32* %regno.addr, align 4, !dbg !7368
  %call40 = call i32 @equiv_init_movable_p(%struct.rtx_def* %33, i32 %34), !dbg !7369
  %tobool41 = icmp ne i32 %call40, 0, !dbg !7369
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !7370

if.then42:                                        ; preds = %sw.bb34
  store i32 0, i32* %retval, align 4, !dbg !7371
  br label %return, !dbg !7371

if.end43:                                         ; preds = %sw.bb34
  br label %sw.epilog65, !dbg !7372

sw.bb44:                                          ; preds = %for.body
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7373
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !7373
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !7373
  %36 = load i32, i32* %i, align 4, !dbg !7373
  %idxprom47 = sext i32 %36 to i64, !dbg !7373
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 %idxprom47, !dbg !7373
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**, !dbg !7373
  %37 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7373
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %37, i32 0, i32 0, !dbg !7373
  %38 = load i32, i32* %num_elem, align 8, !dbg !7373
  %sub49 = sub nsw i32 %38, 1, !dbg !7375
  store i32 %sub49, i32* %j, align 4, !dbg !7376
  br label %for.cond50, !dbg !7377

for.cond50:                                       ; preds = %for.inc, %sw.bb44
  %39 = load i32, i32* %j, align 4, !dbg !7378
  %cmp51 = icmp sge i32 %39, 0, !dbg !7380
  br i1 %cmp51, label %for.body53, label %for.end, !dbg !7381

for.body53:                                       ; preds = %for.cond50
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7382
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !7382
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !7382
  %41 = load i32, i32* %i, align 4, !dbg !7382
  %idxprom56 = sext i32 %41 to i64, !dbg !7382
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 %idxprom56, !dbg !7382
  %rt_rtvec58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtvec_def**, !dbg !7382
  %42 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec58, align 8, !dbg !7382
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %42, i32 0, i32 1, !dbg !7382
  %43 = load i32, i32* %j, align 4, !dbg !7382
  %idxprom59 = sext i32 %43 to i64, !dbg !7382
  %arrayidx60 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom59, !dbg !7382
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx60, align 8, !dbg !7382
  %45 = load i32, i32* %regno.addr, align 4, !dbg !7384
  %call61 = call i32 @equiv_init_movable_p(%struct.rtx_def* %44, i32 %45), !dbg !7385
  %tobool62 = icmp ne i32 %call61, 0, !dbg !7385
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !7386

if.then63:                                        ; preds = %for.body53
  store i32 0, i32* %retval, align 4, !dbg !7387
  br label %return, !dbg !7387

if.end64:                                         ; preds = %for.body53
  br label %for.inc, !dbg !7388

for.inc:                                          ; preds = %if.end64
  %46 = load i32, i32* %j, align 4, !dbg !7389
  %dec = add nsw i32 %46, -1, !dbg !7389
  store i32 %dec, i32* %j, align 4, !dbg !7389
  br label %for.cond50, !dbg !7390, !llvm.loop !7391

for.end:                                          ; preds = %for.cond50
  br label %sw.epilog65, !dbg !7393

sw.epilog65:                                      ; preds = %for.body, %for.end, %if.end43
  br label %for.inc66, !dbg !7394

for.inc66:                                        ; preds = %sw.epilog65
  %47 = load i32, i32* %i, align 4, !dbg !7395
  %dec67 = add nsw i32 %47, -1, !dbg !7395
  store i32 %dec67, i32* %i, align 4, !dbg !7395
  br label %for.cond, !dbg !7396, !llvm.loop !7397

for.end68:                                        ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !7399
  br label %return, !dbg !7399

return:                                           ; preds = %for.end68, %if.then63, %if.then42, %if.then, %sw.bb19, %lor.end, %sw.bb2, %sw.bb1, %sw.bb
  %48 = load i32, i32* %retval, align 4, !dbg !7400
  ret i32 %48, !dbg !7400
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @contains_replace_regs(%struct.rtx_def* %x) #0 !dbg !7401 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %code = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7402, metadata !DIExpression()), !dbg !7403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7404, metadata !DIExpression()), !dbg !7405
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7406, metadata !DIExpression()), !dbg !7407
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7408, metadata !DIExpression()), !dbg !7409
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7410, metadata !DIExpression()), !dbg !7411
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7412
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7412
  %bf.load = load i32, i32* %1, align 8, !dbg !7412
  %bf.clear = and i32 %bf.load, 65535, !dbg !7412
  store i32 %bf.clear, i32* %code, align 4, !dbg !7411
  %2 = load i32, i32* %code, align 4, !dbg !7413
  switch i32 %2, label %sw.default [
    i32 30, label %sw.bb
    i32 35, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 121, label %sw.bb
    i32 37, label %sw.bb1
  ], !dbg !7414

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !7415
  br label %return, !dbg !7415

sw.bb1:                                           ; preds = %entry
  %3 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7417
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7418
  %call = call i32 @rhs_regno(%struct.rtx_def* %4), !dbg !7418
  %idxprom = zext i32 %call to i64, !dbg !7417
  %arrayidx = getelementptr inbounds %struct.equivalence, %struct.equivalence* %3, i64 %idxprom, !dbg !7417
  %replace = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx, i32 0, i32 5, !dbg !7419
  %5 = load i8, i8* %replace, align 8, !dbg !7419
  %conv = sext i8 %5 to i32, !dbg !7417
  store i32 %conv, i32* %retval, align 4, !dbg !7420
  br label %return, !dbg !7420

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7421

sw.epilog:                                        ; preds = %sw.default
  %6 = load i32, i32* %code, align 4, !dbg !7422
  %idxprom2 = sext i32 %6 to i64, !dbg !7422
  %arrayidx3 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom2, !dbg !7422
  %7 = load i8*, i8** %arrayidx3, align 8, !dbg !7422
  store i8* %7, i8** %fmt, align 8, !dbg !7423
  %8 = load i32, i32* %code, align 4, !dbg !7424
  %idxprom4 = sext i32 %8 to i64, !dbg !7424
  %arrayidx5 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom4, !dbg !7424
  %9 = load i8, i8* %arrayidx5, align 1, !dbg !7424
  %conv6 = zext i8 %9 to i32, !dbg !7424
  %sub = sub nsw i32 %conv6, 1, !dbg !7426
  store i32 %sub, i32* %i, align 4, !dbg !7427
  br label %for.cond, !dbg !7428

for.cond:                                         ; preds = %for.inc37, %sw.epilog
  %10 = load i32, i32* %i, align 4, !dbg !7429
  %cmp = icmp sge i32 %10, 0, !dbg !7431
  br i1 %cmp, label %for.body, label %for.end39, !dbg !7432

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %fmt, align 8, !dbg !7433
  %12 = load i32, i32* %i, align 4, !dbg !7434
  %idxprom8 = sext i32 %12 to i64, !dbg !7433
  %arrayidx9 = getelementptr inbounds i8, i8* %11, i64 %idxprom8, !dbg !7433
  %13 = load i8, i8* %arrayidx9, align 1, !dbg !7433
  %conv10 = sext i8 %13 to i32, !dbg !7433
  switch i32 %conv10, label %sw.epilog36 [
    i32 101, label %sw.bb11
    i32 69, label %sw.bb15
  ], !dbg !7435

sw.bb11:                                          ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7436
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7436
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7436
  %15 = load i32, i32* %i, align 4, !dbg !7436
  %idxprom12 = sext i32 %15 to i64, !dbg !7436
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom12, !dbg !7436
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !7436
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7436
  %call14 = call i32 @contains_replace_regs(%struct.rtx_def* %16), !dbg !7439
  %tobool = icmp ne i32 %call14, 0, !dbg !7439
  br i1 %tobool, label %if.then, label %if.end, !dbg !7440

if.then:                                          ; preds = %sw.bb11
  store i32 1, i32* %retval, align 4, !dbg !7441
  br label %return, !dbg !7441

if.end:                                           ; preds = %sw.bb11
  br label %sw.epilog36, !dbg !7442

sw.bb15:                                          ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7443
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7443
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7443
  %18 = load i32, i32* %i, align 4, !dbg !7443
  %idxprom18 = sext i32 %18 to i64, !dbg !7443
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 %idxprom18, !dbg !7443
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**, !dbg !7443
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7443
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 0, !dbg !7443
  %20 = load i32, i32* %num_elem, align 8, !dbg !7443
  %sub20 = sub nsw i32 %20, 1, !dbg !7445
  store i32 %sub20, i32* %j, align 4, !dbg !7446
  br label %for.cond21, !dbg !7447

for.cond21:                                       ; preds = %for.inc, %sw.bb15
  %21 = load i32, i32* %j, align 4, !dbg !7448
  %cmp22 = icmp sge i32 %21, 0, !dbg !7450
  br i1 %cmp22, label %for.body24, label %for.end, !dbg !7451

for.body24:                                       ; preds = %for.cond21
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7452
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7452
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !7452
  %23 = load i32, i32* %i, align 4, !dbg !7452
  %idxprom27 = sext i32 %23 to i64, !dbg !7452
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 %idxprom27, !dbg !7452
  %rt_rtvec29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**, !dbg !7452
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec29, align 8, !dbg !7452
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 1, !dbg !7452
  %25 = load i32, i32* %j, align 4, !dbg !7452
  %idxprom30 = sext i32 %25 to i64, !dbg !7452
  %arrayidx31 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom30, !dbg !7452
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8, !dbg !7452
  %call32 = call i32 @contains_replace_regs(%struct.rtx_def* %26), !dbg !7454
  %tobool33 = icmp ne i32 %call32, 0, !dbg !7454
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !7455

if.then34:                                        ; preds = %for.body24
  store i32 1, i32* %retval, align 4, !dbg !7456
  br label %return, !dbg !7456

if.end35:                                         ; preds = %for.body24
  br label %for.inc, !dbg !7457

for.inc:                                          ; preds = %if.end35
  %27 = load i32, i32* %j, align 4, !dbg !7458
  %dec = add nsw i32 %27, -1, !dbg !7458
  store i32 %dec, i32* %j, align 4, !dbg !7458
  br label %for.cond21, !dbg !7459, !llvm.loop !7460

for.end:                                          ; preds = %for.cond21
  br label %sw.epilog36, !dbg !7462

sw.epilog36:                                      ; preds = %for.body, %for.end, %if.end
  br label %for.inc37, !dbg !7463

for.inc37:                                        ; preds = %sw.epilog36
  %28 = load i32, i32* %i, align 4, !dbg !7464
  %dec38 = add nsw i32 %28, -1, !dbg !7464
  store i32 %dec38, i32* %i, align 4, !dbg !7464
  br label %for.cond, !dbg !7465, !llvm.loop !7466

for.end39:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7468
  br label %return, !dbg !7468

return:                                           ; preds = %for.end39, %if.then34, %if.then, %sw.bb1, %sw.bb
  %29 = load i32, i32* %retval, align 4, !dbg !7469
  ret i32 %29, !dbg !7469
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @memref_used_between_p(%struct.rtx_def* %memref, %struct.rtx_def* %start, %struct.rtx_def* %end) #0 !dbg !7470 {
entry:
  %retval = alloca i32, align 4
  %memref.addr = alloca %struct.rtx_def*, align 8
  %start.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !7471, metadata !DIExpression()), !dbg !7472
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start.addr, metadata !7473, metadata !DIExpression()), !dbg !7474
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end.addr, metadata !7475, metadata !DIExpression()), !dbg !7476
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7477, metadata !DIExpression()), !dbg !7478
  %0 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !7479
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7479
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7479
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7479
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7479
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7479
  store %struct.rtx_def* %1, %struct.rtx_def** %insn, align 8, !dbg !7481
  br label %for.cond, !dbg !7482

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7483
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !7485
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7485
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7485
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !7485
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7485
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7485
  %cmp = icmp ne %struct.rtx_def* %2, %4, !dbg !7486
  br i1 %cmp, label %for.body, label %for.end, !dbg !7487

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7488
  %bf.load = load i32, i32* %6, align 8, !dbg !7488
  %bf.clear = and i32 %bf.load, 65535, !dbg !7488
  %cmp5 = icmp eq i32 %bf.clear, 8, !dbg !7488
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false, !dbg !7488

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7488
  %bf.load6 = load i32, i32* %8, align 8, !dbg !7488
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !7488
  %cmp8 = icmp eq i32 %bf.clear7, 7, !dbg !7488
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false9, !dbg !7488

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !7488
  %bf.load10 = load i32, i32* %10, align 8, !dbg !7488
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !7488
  %cmp12 = icmp eq i32 %bf.clear11, 9, !dbg !7488
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false13, !dbg !7488

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !7488
  %bf.load14 = load i32, i32* %12, align 8, !dbg !7488
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !7488
  %cmp16 = icmp eq i32 %bf.clear15, 10, !dbg !7488
  br i1 %cmp16, label %land.lhs.true, label %if.then, !dbg !7488

land.lhs.true:                                    ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false, %for.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7488
  %bf.load17 = load i32, i32* %14, align 8, !dbg !7488
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !7488
  %cmp19 = icmp eq i32 %bf.clear18, 7, !dbg !7488
  br i1 %cmp19, label %if.then, label %if.end, !dbg !7491

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false13
  br label %for.inc, !dbg !7492

if.end:                                           ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7493
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7495
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7495
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7495
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !7495
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7495
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7495
  %call = call i32 @memref_referenced_p(%struct.rtx_def* %15, %struct.rtx_def* %17), !dbg !7496
  %tobool = icmp ne i32 %call, 0, !dbg !7496
  br i1 %tobool, label %if.then24, label %if.end25, !dbg !7497

if.then24:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !7498
  br label %return, !dbg !7498

if.end25:                                         ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7499
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7499
  %bf.load26 = load i32, i32* %19, align 8, !dbg !7499
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !7499
  %cmp28 = icmp eq i32 %bf.clear27, 10, !dbg !7499
  br i1 %cmp28, label %land.lhs.true29, label %if.end34, !dbg !7501

land.lhs.true29:                                  ; preds = %if.end25
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7502
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !7502
  %bf.load30 = load i32, i32* %21, align 8, !dbg !7502
  %bf.lshr = lshr i32 %bf.load30, 26, !dbg !7502
  %bf.clear31 = and i32 %bf.lshr, 1, !dbg !7502
  %tobool32 = icmp ne i32 %bf.clear31, 0, !dbg !7502
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !7503

if.then33:                                        ; preds = %land.lhs.true29
  store i32 1, i32* %retval, align 4, !dbg !7504
  br label %return, !dbg !7504

if.end34:                                         ; preds = %land.lhs.true29, %if.end25
  br label %for.inc, !dbg !7505

for.inc:                                          ; preds = %if.end34, %if.then
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7506
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7506
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !7506
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 2, !dbg !7506
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !7506
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !7506
  store %struct.rtx_def* %23, %struct.rtx_def** %insn, align 8, !dbg !7507
  br label %for.cond, !dbg !7508, !llvm.loop !7509

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7511
  br label %return, !dbg !7511

return:                                           ; preds = %for.end, %if.then33, %if.then24
  %24 = load i32, i32* %retval, align 4, !dbg !7512
  ret i32 %24, !dbg !7512
}

declare dso_local void @df_notes_rescan(%struct.rtx_def*) #2

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

declare dso_local i32 @validate_replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @remove_death(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @prev_nondebug_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

declare dso_local zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_live_bb_info* @df_live_get_bb_info(i32 %index) #0 !dbg !7513 {
entry:
  %retval = alloca %struct.df_live_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7516, metadata !DIExpression()), !dbg !7517
  %0 = load i32, i32* %index.addr, align 4, !dbg !7518
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !7520
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !7520
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 2, !dbg !7520
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !7520
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !7521
  %3 = load i32, i32* %block_info_size, align 8, !dbg !7521
  %cmp = icmp ult i32 %0, %3, !dbg !7522
  br i1 %cmp, label %if.then, label %if.else, !dbg !7523

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !7524
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !7524
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 2, !dbg !7524
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !7524
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !7525
  %6 = load i8**, i8*** %block_info, align 8, !dbg !7525
  %7 = load i32, i32* %index.addr, align 4, !dbg !7526
  %idxprom = zext i32 %7 to i64, !dbg !7524
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !7524
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !7524
  %9 = bitcast i8* %8 to %struct.df_live_bb_info*, !dbg !7527
  store %struct.df_live_bb_info* %9, %struct.df_live_bb_info** %retval, align 8, !dbg !7528
  br label %return, !dbg !7528

if.else:                                          ; preds = %entry
  store %struct.df_live_bb_info* null, %struct.df_live_bb_info** %retval, align 8, !dbg !7529
  br label %return, !dbg !7529

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_live_bb_info*, %struct.df_live_bb_info** %retval, align 8, !dbg !7530
  ret %struct.df_live_bb_info* %10, !dbg !7530
}

declare dso_local %struct.rtx_def* @simplify_replace_fn_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @adjust_cleared_regs(%struct.rtx_def* %loc, %struct.rtx_def* %old_rtx, i8* %data) #0 !dbg !7531 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca %struct.rtx_def*, align 8
  %old_rtx.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %cleared_regs = alloca %struct.bitmap_head_def*, align 8
  store %struct.rtx_def* %loc, %struct.rtx_def** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %loc.addr, metadata !7534, metadata !DIExpression()), !dbg !7535
  store %struct.rtx_def* %old_rtx, %struct.rtx_def** %old_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_rtx.addr, metadata !7536, metadata !DIExpression()), !dbg !7537
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7538, metadata !DIExpression()), !dbg !7539
  %0 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !7540
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7540
  %bf.load = load i32, i32* %1, align 8, !dbg !7540
  %bf.clear = and i32 %bf.load, 65535, !dbg !7540
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !7540
  br i1 %cmp, label %if.then, label %if.end5, !dbg !7542

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %cleared_regs, metadata !7543, metadata !DIExpression()), !dbg !7545
  %2 = load i8*, i8** %data.addr, align 8, !dbg !7546
  %3 = bitcast i8* %2 to %struct.bitmap_head_def*, !dbg !7547
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !7545
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cleared_regs, align 8, !dbg !7548
  %5 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !7550
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !7550
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %call), !dbg !7551
  %tobool = icmp ne i32 %call1, 0, !dbg !7551
  br i1 %tobool, label %if.then2, label %if.end, !dbg !7552

if.then2:                                         ; preds = %if.then
  %6 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7553
  %7 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !7554
  %call3 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !7554
  %idxprom = zext i32 %call3 to i64, !dbg !7553
  %arrayidx = getelementptr inbounds %struct.equivalence, %struct.equivalence* %6, i64 %idxprom, !dbg !7553
  %src_p = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx, i32 0, i32 1, !dbg !7555
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %src_p, align 8, !dbg !7555
  %9 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8, !dbg !7556
  %10 = load i8*, i8** %data.addr, align 8, !dbg !7557
  %call4 = call %struct.rtx_def* @simplify_replace_fn_rtx(%struct.rtx_def* %9, %struct.rtx_def* null, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i8*)* @adjust_cleared_regs, i8* %10), !dbg !7558
  store %struct.rtx_def* %call4, %struct.rtx_def** %retval, align 8, !dbg !7559
  br label %return, !dbg !7559

if.end:                                           ; preds = %if.then
  br label %if.end5, !dbg !7560

if.end5:                                          ; preds = %if.end, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7561
  br label %return, !dbg !7561

return:                                           ; preds = %if.end5, %if.then2
  %11 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7562
  ret %struct.rtx_def* %11, !dbg !7562
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @end_alias_analysis() #2

declare dso_local i32 @side_effects_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @validate_equiv_mem_from_store(%struct.rtx_def* %dest, %struct.rtx_def* %set, i8* %data) #0 !dbg !7563 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %set.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !7564, metadata !DIExpression()), !dbg !7565
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set.addr, metadata !7566, metadata !DIExpression()), !dbg !7567
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7568, metadata !DIExpression()), !dbg !7569
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7570
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7570
  %bf.load = load i32, i32* %1, align 8, !dbg !7570
  %bf.clear = and i32 %bf.load, 65535, !dbg !7570
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !7570
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7572

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7573
  %3 = load %struct.rtx_def*, %struct.rtx_def** @equiv_mem, align 8, !dbg !7574
  %call = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !7575
  %tobool = icmp ne i32 %call, 0, !dbg !7575
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7576

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7577
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7577
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7577
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7577
  %cmp3 = icmp eq i32 %bf.clear2, 43, !dbg !7577
  br i1 %cmp3, label %land.lhs.true4, label %if.end, !dbg !7578

land.lhs.true4:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7579
  %7 = load %struct.rtx_def*, %struct.rtx_def** @equiv_mem, align 8, !dbg !7580
  %call5 = call i32 @true_dependence(%struct.rtx_def* %6, i32 0, %struct.rtx_def* %7, i8 (%struct.rtx_def*, i8)* @rtx_varies_p), !dbg !7581
  %tobool6 = icmp ne i32 %call5, 0, !dbg !7581
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7582

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true
  store i32 1, i32* @equiv_mem_modified, align 4, !dbg !7583
  br label %if.end, !dbg !7584

if.end:                                           ; preds = %if.then, %land.lhs.true4, %lor.lhs.false
  ret void, !dbg !7585
}

declare dso_local i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @true_dependence(%struct.rtx_def*, i32, %struct.rtx_def*, i8 (%struct.rtx_def*, i8)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @memref_referenced_p(%struct.rtx_def* %memref, %struct.rtx_def* %x) #0 !dbg !7586 {
entry:
  %retval = alloca i32, align 4
  %memref.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %code = alloca i32, align 4
  store %struct.rtx_def* %memref, %struct.rtx_def** %memref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %memref.addr, metadata !7589, metadata !DIExpression()), !dbg !7590
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7593, metadata !DIExpression()), !dbg !7594
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7595, metadata !DIExpression()), !dbg !7596
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7597, metadata !DIExpression()), !dbg !7598
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7599, metadata !DIExpression()), !dbg !7600
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7601
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7601
  %bf.load = load i32, i32* %1, align 8, !dbg !7601
  %bf.clear = and i32 %bf.load, 65535, !dbg !7601
  store i32 %bf.clear, i32* %code, align 4, !dbg !7600
  %2 = load i32, i32* %code, align 4, !dbg !7602
  switch i32 %2, label %sw.default [
    i32 30, label %sw.bb
    i32 35, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 33, label %sw.bb
    i32 36, label %sw.bb
    i32 46, label %sw.bb
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 37, label %sw.bb1
    i32 43, label %sw.bb8
    i32 23, label %sw.bb11
  ], !dbg !7603

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !7604
  br label %return, !dbg !7604

sw.bb1:                                           ; preds = %entry
  %3 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7606
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7607
  %call = call i32 @rhs_regno(%struct.rtx_def* %4), !dbg !7607
  %idxprom = zext i32 %call to i64, !dbg !7606
  %arrayidx = getelementptr inbounds %struct.equivalence, %struct.equivalence* %3, i64 %idxprom, !dbg !7606
  %replacement = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx, i32 0, i32 0, !dbg !7608
  %5 = load %struct.rtx_def*, %struct.rtx_def** %replacement, align 8, !dbg !7608
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !7606
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7609

land.rhs:                                         ; preds = %sw.bb1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7610
  %7 = load %struct.equivalence*, %struct.equivalence** @reg_equiv, align 8, !dbg !7611
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7612
  %call2 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !7612
  %idxprom3 = zext i32 %call2 to i64, !dbg !7611
  %arrayidx4 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %7, i64 %idxprom3, !dbg !7611
  %replacement5 = getelementptr inbounds %struct.equivalence, %struct.equivalence* %arrayidx4, i32 0, i32 0, !dbg !7613
  %9 = load %struct.rtx_def*, %struct.rtx_def** %replacement5, align 8, !dbg !7613
  %call6 = call i32 @memref_referenced_p(%struct.rtx_def* %6, %struct.rtx_def* %9), !dbg !7614
  %tobool7 = icmp ne i32 %call6, 0, !dbg !7609
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb1
  %10 = phi i1 [ false, %sw.bb1 ], [ %tobool7, %land.rhs ], !dbg !7615
  %land.ext = zext i1 %10 to i32, !dbg !7609
  store i32 %land.ext, i32* %retval, align 4, !dbg !7616
  br label %return, !dbg !7616

sw.bb8:                                           ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7617
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7619
  %call9 = call i32 @true_dependence(%struct.rtx_def* %11, i32 0, %struct.rtx_def* %12, i8 (%struct.rtx_def*, i8)* @rtx_varies_p), !dbg !7620
  %tobool10 = icmp ne i32 %call9, 0, !dbg !7620
  br i1 %tobool10, label %if.then, label %if.end, !dbg !7621

if.then:                                          ; preds = %sw.bb8
  store i32 1, i32* %retval, align 4, !dbg !7622
  br label %return, !dbg !7622

if.end:                                           ; preds = %sw.bb8
  br label %sw.epilog, !dbg !7623

sw.bb11:                                          ; preds = %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7624
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7624
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7624
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7624
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !7624
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7624
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !7624
  %bf.load13 = load i32, i32* %15, align 8, !dbg !7624
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !7624
  %cmp = icmp eq i32 %bf.clear14, 43, !dbg !7624
  br i1 %cmp, label %if.then15, label %if.else, !dbg !7626

if.then15:                                        ; preds = %sw.bb11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7627
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7630
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7630
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7630
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !7630
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !7630
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !7630
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7630
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7630
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !7630
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7630
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7630
  %call24 = call i32 @memref_referenced_p(%struct.rtx_def* %16, %struct.rtx_def* %19), !dbg !7631
  %tobool25 = icmp ne i32 %call24, 0, !dbg !7631
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !7632

if.then26:                                        ; preds = %if.then15
  store i32 1, i32* %retval, align 4, !dbg !7633
  br label %return, !dbg !7633

if.end27:                                         ; preds = %if.then15
  br label %if.end36, !dbg !7634

if.else:                                          ; preds = %sw.bb11
  %20 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7635
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7637
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7637
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !7637
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !7637
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !7637
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !7637
  %call32 = call i32 @memref_referenced_p(%struct.rtx_def* %20, %struct.rtx_def* %22), !dbg !7638
  %tobool33 = icmp ne i32 %call32, 0, !dbg !7638
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !7639

if.then34:                                        ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !7640
  br label %return, !dbg !7640

if.end35:                                         ; preds = %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end27
  %23 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7641
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7642
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7642
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !7642
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !7642
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !7642
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !7642
  %call41 = call i32 @memref_referenced_p(%struct.rtx_def* %23, %struct.rtx_def* %25), !dbg !7643
  store i32 %call41, i32* %retval, align 4, !dbg !7644
  br label %return, !dbg !7644

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7645

sw.epilog:                                        ; preds = %sw.default, %if.end
  %26 = load i32, i32* %code, align 4, !dbg !7646
  %idxprom42 = sext i32 %26 to i64, !dbg !7646
  %arrayidx43 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom42, !dbg !7646
  %27 = load i8*, i8** %arrayidx43, align 8, !dbg !7646
  store i8* %27, i8** %fmt, align 8, !dbg !7647
  %28 = load i32, i32* %code, align 4, !dbg !7648
  %idxprom44 = sext i32 %28 to i64, !dbg !7648
  %arrayidx45 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom44, !dbg !7648
  %29 = load i8, i8* %arrayidx45, align 1, !dbg !7648
  %conv = zext i8 %29 to i32, !dbg !7648
  %sub = sub nsw i32 %conv, 1, !dbg !7650
  store i32 %sub, i32* %i, align 4, !dbg !7651
  br label %for.cond, !dbg !7652

for.cond:                                         ; preds = %for.inc83, %sw.epilog
  %30 = load i32, i32* %i, align 4, !dbg !7653
  %cmp46 = icmp sge i32 %30, 0, !dbg !7655
  br i1 %cmp46, label %for.body, label %for.end85, !dbg !7656

for.body:                                         ; preds = %for.cond
  %31 = load i8*, i8** %fmt, align 8, !dbg !7657
  %32 = load i32, i32* %i, align 4, !dbg !7658
  %idxprom48 = sext i32 %32 to i64, !dbg !7657
  %arrayidx49 = getelementptr inbounds i8, i8* %31, i64 %idxprom48, !dbg !7657
  %33 = load i8, i8* %arrayidx49, align 1, !dbg !7657
  %conv50 = sext i8 %33 to i32, !dbg !7657
  switch i32 %conv50, label %sw.epilog82 [
    i32 101, label %sw.bb51
    i32 69, label %sw.bb61
  ], !dbg !7659

sw.bb51:                                          ; preds = %for.body
  %34 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7660
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7663
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !7663
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !7663
  %36 = load i32, i32* %i, align 4, !dbg !7663
  %idxprom54 = sext i32 %36 to i64, !dbg !7663
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 %idxprom54, !dbg !7663
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !7663
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx56, align 8, !dbg !7663
  %call57 = call i32 @memref_referenced_p(%struct.rtx_def* %34, %struct.rtx_def* %37), !dbg !7664
  %tobool58 = icmp ne i32 %call57, 0, !dbg !7664
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !7665

if.then59:                                        ; preds = %sw.bb51
  store i32 1, i32* %retval, align 4, !dbg !7666
  br label %return, !dbg !7666

if.end60:                                         ; preds = %sw.bb51
  br label %sw.epilog82, !dbg !7667

sw.bb61:                                          ; preds = %for.body
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7668
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !7668
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !7668
  %39 = load i32, i32* %i, align 4, !dbg !7668
  %idxprom64 = sext i32 %39 to i64, !dbg !7668
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 %idxprom64, !dbg !7668
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtvec_def**, !dbg !7668
  %40 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7668
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %40, i32 0, i32 0, !dbg !7668
  %41 = load i32, i32* %num_elem, align 8, !dbg !7668
  %sub66 = sub nsw i32 %41, 1, !dbg !7670
  store i32 %sub66, i32* %j, align 4, !dbg !7671
  br label %for.cond67, !dbg !7672

for.cond67:                                       ; preds = %for.inc, %sw.bb61
  %42 = load i32, i32* %j, align 4, !dbg !7673
  %cmp68 = icmp sge i32 %42, 0, !dbg !7675
  br i1 %cmp68, label %for.body70, label %for.end, !dbg !7676

for.body70:                                       ; preds = %for.cond67
  %43 = load %struct.rtx_def*, %struct.rtx_def** %memref.addr, align 8, !dbg !7677
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7679
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !7679
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !7679
  %45 = load i32, i32* %i, align 4, !dbg !7679
  %idxprom73 = sext i32 %45 to i64, !dbg !7679
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 %idxprom73, !dbg !7679
  %rt_rtvec75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtvec_def**, !dbg !7679
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec75, align 8, !dbg !7679
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1, !dbg !7679
  %47 = load i32, i32* %j, align 4, !dbg !7679
  %idxprom76 = sext i32 %47 to i64, !dbg !7679
  %arrayidx77 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom76, !dbg !7679
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx77, align 8, !dbg !7679
  %call78 = call i32 @memref_referenced_p(%struct.rtx_def* %43, %struct.rtx_def* %48), !dbg !7680
  %tobool79 = icmp ne i32 %call78, 0, !dbg !7680
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !7681

if.then80:                                        ; preds = %for.body70
  store i32 1, i32* %retval, align 4, !dbg !7682
  br label %return, !dbg !7682

if.end81:                                         ; preds = %for.body70
  br label %for.inc, !dbg !7683

for.inc:                                          ; preds = %if.end81
  %49 = load i32, i32* %j, align 4, !dbg !7684
  %dec = add nsw i32 %49, -1, !dbg !7684
  store i32 %dec, i32* %j, align 4, !dbg !7684
  br label %for.cond67, !dbg !7685, !llvm.loop !7686

for.end:                                          ; preds = %for.cond67
  br label %sw.epilog82, !dbg !7688

sw.epilog82:                                      ; preds = %for.body, %for.end, %if.end60
  br label %for.inc83, !dbg !7689

for.inc83:                                        ; preds = %sw.epilog82
  %50 = load i32, i32* %i, align 4, !dbg !7690
  %dec84 = add nsw i32 %50, -1, !dbg !7690
  store i32 %dec84, i32* %i, align 4, !dbg !7690
  br label %for.cond, !dbg !7691, !llvm.loop !7692

for.end85:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7694
  br label %return, !dbg !7694

return:                                           ; preds = %for.end85, %if.then80, %if.then59, %if.end36, %if.then34, %if.then26, %if.then, %land.end, %sw.bb
  %51 = load i32, i32* %retval, align 4, !dbg !7695
  ret i32 %51, !dbg !7695
}

declare dso_local i32 @function_invariant_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @legitimate_pic_operand_p(%struct.rtx_def*) #2

declare dso_local i32 @memory_operand(%struct.rtx_def*, i32) #2

declare dso_local void @setup_reg_classes(i32, i32, i32, i32) #2

declare dso_local i32 @reg_alternate_class(i32) #2

declare dso_local i32 @reg_cover_class(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %i) #0 !dbg !7696 {
entry:
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !7700, metadata !DIExpression()), !dbg !7701
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !7702
  %n = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !7703
  store i32 0, i32* %n, align 4, !dbg !7704
  ret void, !dbg !7705
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %i, %struct.ira_allocno** %a) #0 !dbg !7706 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  %a.addr = alloca %struct.ira_allocno**, align 8
  %n = alloca i32, align 4
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !7709, metadata !DIExpression()), !dbg !7710
  store %struct.ira_allocno** %a, %struct.ira_allocno*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %a.addr, metadata !7711, metadata !DIExpression()), !dbg !7712
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7713, metadata !DIExpression()), !dbg !7714
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !7715
  %n1 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !7717
  %1 = load i32, i32* %n1, align 4, !dbg !7717
  store i32 %1, i32* %n, align 4, !dbg !7718
  br label %for.cond, !dbg !7719

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %n, align 4, !dbg !7720
  %3 = load i32, i32* @ira_allocnos_num, align 4, !dbg !7722
  %cmp = icmp slt i32 %2, %3, !dbg !7723
  br i1 %cmp, label %for.body, label %for.end, !dbg !7724

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7725
  %5 = load i32, i32* %n, align 4, !dbg !7727
  %idxprom = sext i32 %5 to i64, !dbg !7725
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !7725
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7725
  %cmp2 = icmp ne %struct.ira_allocno* %6, null, !dbg !7728
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7729

if.then:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7730
  %8 = load i32, i32* %n, align 4, !dbg !7732
  %idxprom3 = sext i32 %8 to i64, !dbg !7730
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom3, !dbg !7730
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx4, align 8, !dbg !7730
  %10 = load %struct.ira_allocno**, %struct.ira_allocno*** %a.addr, align 8, !dbg !7733
  store %struct.ira_allocno* %9, %struct.ira_allocno** %10, align 8, !dbg !7734
  %11 = load i32, i32* %n, align 4, !dbg !7735
  %add = add nsw i32 %11, 1, !dbg !7736
  %12 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !7737
  %n5 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %12, i32 0, i32 0, !dbg !7738
  store i32 %add, i32* %n5, align 4, !dbg !7739
  store i8 1, i8* %retval, align 1, !dbg !7740
  br label %return, !dbg !7740

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7741

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %n, align 4, !dbg !7742
  %inc = add nsw i32 %13, 1, !dbg !7742
  store i32 %inc, i32* %n, align 4, !dbg !7742
  br label %for.cond, !dbg !7743, !llvm.loop !7744

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7746
  br label %return, !dbg !7746

return:                                           ; preds = %for.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !7747
  ret i8 %14, !dbg !7747
}

declare dso_local void @ira_free_allocno_updated_costs(%struct.ira_allocno*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_hard_reg_not_in_set_p(i32 %hard_regno, i32 %mode, i64 %hard_regset) #0 !dbg !7748 {
entry:
  %retval = alloca i8, align 1
  %hard_regno.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %hard_regset.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %hard_regno, i32* %hard_regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hard_regno.addr, metadata !7751, metadata !DIExpression()), !dbg !7752
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  store i64 %hard_regset, i64* %hard_regset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %hard_regset.addr, metadata !7755, metadata !DIExpression()), !dbg !7756
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7757, metadata !DIExpression()), !dbg !7758
  %0 = load i32, i32* %hard_regno.addr, align 4, !dbg !7759
  %idxprom = sext i32 %0 to i64, !dbg !7761
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !7761
  %1 = load i32, i32* %mode.addr, align 4, !dbg !7762
  %idxprom1 = zext i32 %1 to i64, !dbg !7761
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom1, !dbg !7761
  %2 = load i8, i8* %arrayidx2, align 1, !dbg !7761
  %conv = zext i8 %2 to i32, !dbg !7761
  %sub = sub nsw i32 %conv, 1, !dbg !7763
  store i32 %sub, i32* %i, align 4, !dbg !7764
  br label %for.cond, !dbg !7765

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !7766
  %cmp = icmp sge i32 %3, 0, !dbg !7768
  br i1 %cmp, label %for.body, label %for.end, !dbg !7769

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %hard_regset.addr, align 8, !dbg !7770
  %5 = load i32, i32* %hard_regno.addr, align 4, !dbg !7770
  %6 = load i32, i32* %i, align 4, !dbg !7770
  %add = add nsw i32 %5, %6, !dbg !7770
  %sh_prom = zext i32 %add to i64, !dbg !7770
  %shl = shl i64 1, %sh_prom, !dbg !7770
  %and = and i64 %4, %shl, !dbg !7770
  %tobool = icmp ne i64 %and, 0, !dbg !7770
  br i1 %tobool, label %if.then, label %if.end, !dbg !7772

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !7773
  br label %return, !dbg !7773

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7770

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !7774
  %dec = add nsw i32 %7, -1, !dbg !7774
  store i32 %dec, i32* %i, align 4, !dbg !7774
  br label %for.cond, !dbg !7775, !llvm.loop !7776

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !7778
  br label %return, !dbg !7778

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7779
  ret i8 %8, !dbg !7779
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %vec_) #0 !dbg !7780 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !7785, metadata !DIExpression()), !dbg !7786
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !7786
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !7786
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7786

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !7786
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !7786
  %2 = load i32, i32* %num, align 8, !dbg !7786
  br label %cond.end, !dbg !7786

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7786

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7786
  ret i32 %cond, !dbg !7786
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_gc_reserve_exact(%struct.VEC_rtx_gc** %vec_, i32 %alloc_) #0 !dbg !7787 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !7790, metadata !DIExpression()), !dbg !7791
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7792, metadata !DIExpression()), !dbg !7791
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7793, metadata !DIExpression()), !dbg !7791
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !7791
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %0, align 8, !dbg !7791
  %tobool = icmp ne %struct.VEC_rtx_gc* %1, null, !dbg !7791
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7791

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !7791
  %3 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %2, align 8, !dbg !7791
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %3, i32 0, i32 0, !dbg !7791
  br label %cond.end, !dbg !7791

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7791
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7791
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !7791
  %tobool1 = icmp ne i32 %call, 0, !dbg !7791
  %lnot = xor i1 %tobool1, true, !dbg !7791
  %lnot.ext = zext i1 %lnot to i32, !dbg !7791
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7791
  %5 = load i32, i32* %extend, align 4, !dbg !7794
  %tobool2 = icmp ne i32 %5, 0, !dbg !7794
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7791

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !7794
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %6, align 8, !dbg !7794
  %8 = bitcast %struct.VEC_rtx_gc* %7 to i8*, !dbg !7794
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7794
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !7794
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_gc*, !dbg !7794
  %11 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !7794
  store %struct.VEC_rtx_gc* %10, %struct.VEC_rtx_gc** %11, align 8, !dbg !7794
  br label %if.end, !dbg !7794

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7791
  ret i32 %12, !dbg !7791
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !7796 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !7799, metadata !DIExpression()), !dbg !7800
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7801, metadata !DIExpression()), !dbg !7800
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7800
  %cmp = icmp sge i32 %0, 0, !dbg !7800
  %conv = zext i1 %cmp to i32, !dbg !7800
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !7800
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !7800
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7800

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !7800
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !7800
  %3 = load i32, i32* %alloc, align 4, !dbg !7800
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !7800
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !7800
  %5 = load i32, i32* %num, align 8, !dbg !7800
  %sub = sub i32 %3, %5, !dbg !7800
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7800
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7800
  %conv2 = zext i1 %cmp1 to i32, !dbg !7800
  br label %cond.end, !dbg !7800

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7800
  %tobool3 = icmp ne i32 %7, 0, !dbg !7800
  %lnot = xor i1 %tobool3, true, !dbg !7800
  %lnot.ext = zext i1 %lnot to i32, !dbg !7800
  br label %cond.end, !dbg !7800

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7800
  ret i32 %cond, !dbg !7800
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local i8* @ggc_realloc_stat(i8*, i64) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !7802 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7810, metadata !DIExpression()), !dbg !7811
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !7812, metadata !DIExpression()), !dbg !7813
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !7814, metadata !DIExpression()), !dbg !7815
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7816, metadata !DIExpression()), !dbg !7817
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !7818
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !7819
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !7819
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7820
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !7821
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !7822
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7823
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !7824
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !7825
  br label %while.body, !dbg !7826

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7827
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !7830
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !7830
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !7827
  br i1 %tobool, label %if.end, label %if.then, !dbg !7831

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7832
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !7834
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !7835
  br label %while.end, !dbg !7836

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7837
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !7839
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !7839
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !7840
  %9 = load i32, i32* %indx, align 8, !dbg !7840
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !7841
  %div = udiv i32 %10, 128, !dbg !7842
  %cmp = icmp uge i32 %9, %div, !dbg !7843
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !7844

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !7845

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7846
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !7847
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !7847
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !7848
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7848
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7849
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !7850
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !7851
  br label %while.body, !dbg !7826, !llvm.loop !7852

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7854
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7856
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !7856
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !7857
  %17 = load i32, i32* %indx9, align 8, !dbg !7857
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !7858
  %div10 = udiv i32 %18, 128, !dbg !7859
  %cmp11 = icmp ne i32 %17, %div10, !dbg !7860
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !7861

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7862
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !7863
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !7863
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !7864
  %21 = load i32, i32* %indx14, align 8, !dbg !7864
  %mul = mul i32 %21, 128, !dbg !7865
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !7866
  br label %if.end15, !dbg !7867

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !7868
  %div16 = udiv i32 %22, 64, !dbg !7869
  %rem = urem i32 %div16, 2, !dbg !7870
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7871
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !7872
  store i32 %rem, i32* %word_no, align 8, !dbg !7873
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7874
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !7875
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !7875
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !7876
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7877
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !7878
  %27 = load i32, i32* %word_no18, align 8, !dbg !7878
  %idxprom = zext i32 %27 to i64, !dbg !7874
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !7874
  %28 = load i64, i64* %arrayidx, align 8, !dbg !7874
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7879
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !7880
  store i64 %28, i64* %bits19, align 8, !dbg !7881
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !7882
  %rem20 = urem i32 %30, 64, !dbg !7883
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7884
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !7885
  %32 = load i64, i64* %bits21, align 8, !dbg !7886
  %sh_prom = zext i32 %rem20 to i64, !dbg !7886
  %shr = lshr i64 %32, %sh_prom, !dbg !7886
  store i64 %shr, i64* %bits21, align 8, !dbg !7886
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7887
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !7888
  %34 = load i64, i64* %bits22, align 8, !dbg !7888
  %tobool23 = icmp ne i64 %34, 0, !dbg !7889
  %lnot = xor i1 %tobool23, true, !dbg !7889
  %lnot.ext = zext i1 %lnot to i32, !dbg !7889
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !7890
  %add = add i32 %35, %lnot.ext, !dbg !7890
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !7890
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !7891
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !7892
  store i32 %36, i32* %37, align 4, !dbg !7893
  ret void, !dbg !7894
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7895 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7898, metadata !DIExpression()), !dbg !7899
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7900, metadata !DIExpression()), !dbg !7901
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7902
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7904
  %1 = load i64, i64* %bits, align 8, !dbg !7904
  %tobool = icmp ne i64 %1, 0, !dbg !7902
  br i1 %tobool, label %if.then, label %if.end, !dbg !7905

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !7906

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !7907), !dbg !7909
  br label %while.cond, !dbg !7910

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7911
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !7912
  %3 = load i64, i64* %bits1, align 8, !dbg !7912
  %and = and i64 %3, 1, !dbg !7913
  %tobool2 = icmp ne i64 %and, 0, !dbg !7914
  %lnot = xor i1 %tobool2, true, !dbg !7914
  br i1 %lnot, label %while.body, label %while.end, !dbg !7910

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7915
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !7917
  %5 = load i64, i64* %bits3, align 8, !dbg !7918
  %shr = lshr i64 %5, 1, !dbg !7918
  store i64 %shr, i64* %bits3, align 8, !dbg !7918
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !7919
  %7 = load i32, i32* %6, align 4, !dbg !7920
  %add = add i32 %7, 1, !dbg !7920
  store i32 %add, i32* %6, align 4, !dbg !7920
  br label %while.cond, !dbg !7910, !llvm.loop !7921

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !7923
  br label %return, !dbg !7923

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !7924
  %9 = load i32, i32* %8, align 4, !dbg !7925
  %add4 = add i32 %9, 64, !dbg !7926
  %sub = sub i32 %add4, 1, !dbg !7927
  %div = udiv i32 %sub, 64, !dbg !7928
  %mul = mul i32 %div, 64, !dbg !7929
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !7930
  store i32 %mul, i32* %10, align 4, !dbg !7931
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7932
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !7933
  %12 = load i32, i32* %word_no, align 8, !dbg !7934
  %inc = add i32 %12, 1, !dbg !7934
  store i32 %inc, i32* %word_no, align 8, !dbg !7934
  br label %while.body6, !dbg !7935

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !7936

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7938
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !7939
  %14 = load i32, i32* %word_no8, align 8, !dbg !7939
  %cmp = icmp ne i32 %14, 2, !dbg !7940
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !7936

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7941
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7943
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !7943
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !7944
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7945
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !7946
  %18 = load i32, i32* %word_no11, align 8, !dbg !7946
  %idxprom = zext i32 %18 to i64, !dbg !7941
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !7941
  %19 = load i64, i64* %arrayidx, align 8, !dbg !7941
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7947
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !7948
  store i64 %19, i64* %bits12, align 8, !dbg !7949
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7950
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !7952
  %22 = load i64, i64* %bits13, align 8, !dbg !7952
  %tobool14 = icmp ne i64 %22, 0, !dbg !7950
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !7953

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !7954

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !7955
  %24 = load i32, i32* %23, align 4, !dbg !7956
  %add17 = add i32 %24, 64, !dbg !7956
  store i32 %add17, i32* %23, align 4, !dbg !7956
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7957
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !7958
  %26 = load i32, i32* %word_no18, align 8, !dbg !7959
  %inc19 = add i32 %26, 1, !dbg !7959
  store i32 %inc19, i32* %word_no18, align 8, !dbg !7959
  br label %while.cond7, !dbg !7936, !llvm.loop !7960

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7962
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !7963
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !7963
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !7964
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7964
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7965
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !7966
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !7967
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7968
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !7970
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !7970
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !7968
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !7971

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !7972
  br label %return, !dbg !7972

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7973
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !7974
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !7974
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !7975
  %35 = load i32, i32* %indx, align 8, !dbg !7975
  %mul28 = mul i32 %35, 128, !dbg !7976
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !7977
  store i32 %mul28, i32* %36, align 4, !dbg !7978
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7979
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !7980
  store i32 0, i32* %word_no29, align 8, !dbg !7981
  br label %while.body6, !dbg !7935, !llvm.loop !7982

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !7984
  ret i8 %38, !dbg !7984
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7985 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7988, metadata !DIExpression()), !dbg !7989
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7990, metadata !DIExpression()), !dbg !7991
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7992
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7993
  %1 = load i64, i64* %bits, align 8, !dbg !7994
  %shr = lshr i64 %1, 1, !dbg !7994
  store i64 %shr, i64* %bits, align 8, !dbg !7994
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !7995
  %3 = load i32, i32* %2, align 4, !dbg !7996
  %add = add i32 %3, 1, !dbg !7996
  store i32 %add, i32* %2, align 4, !dbg !7996
  ret void, !dbg !7997
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @pseudo_for_reload_consideration_p(i32 %regno) #0 !dbg !7998 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !8001, metadata !DIExpression()), !dbg !8002
  %0 = load i16*, i16** @reg_renumber, align 8, !dbg !8003
  %1 = load i32, i32* %regno.addr, align 4, !dbg !8004
  %idxprom = sext i32 %1 to i64, !dbg !8003
  %arrayidx = getelementptr inbounds i16, i16* %0, i64 %idxprom, !dbg !8003
  %2 = load i16, i16* %arrayidx, align 2, !dbg !8003
  %conv = sext i16 %2 to i32, !dbg !8003
  %cmp = icmp sge i32 %conv, 0, !dbg !8005
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !8006

lor.rhs:                                          ; preds = %entry
  %3 = load i8, i8* @ira_conflicts_p, align 1, !dbg !8007
  %conv2 = zext i8 %3 to i32, !dbg !8007
  %tobool = icmp ne i32 %conv2, 0, !dbg !8007
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8008

land.rhs:                                         ; preds = %lor.rhs
  %4 = load i32, i32* @flag_ira_share_spill_slots, align 4, !dbg !8009
  %tobool3 = icmp ne i32 %4, 0, !dbg !8008
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %5 = phi i1 [ false, %lor.rhs ], [ %tobool3, %land.rhs ], !dbg !8010
  br label %lor.end, !dbg !8006

lor.end:                                          ; preds = %land.end, %entry
  %6 = phi i1 [ true, %entry ], [ %5, %land.end ]
  %lor.ext = zext i1 %6 to i32, !dbg !8006
  %conv4 = trunc i32 %lor.ext to i8, !dbg !8011
  ret i8 %conv4, !dbg !8012
}

declare dso_local %struct.insn_chain* @new_insn_chain() #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_live_subregs(i8 zeroext %init_value, %struct.simple_bitmap_def** %live_subregs, i32* %live_subregs_used, i32 %allocnum, %struct.rtx_def* %reg) #0 !dbg !8013 {
entry:
  %init_value.addr = alloca i8, align 1
  %live_subregs.addr = alloca %struct.simple_bitmap_def**, align 8
  %live_subregs_used.addr = alloca i32*, align 8
  %allocnum.addr = alloca i32, align 4
  %reg.addr = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %size = alloca i32, align 4
  store i8 %init_value, i8* %init_value.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %init_value.addr, metadata !8016, metadata !DIExpression()), !dbg !8017
  store %struct.simple_bitmap_def** %live_subregs, %struct.simple_bitmap_def*** %live_subregs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def*** %live_subregs.addr, metadata !8018, metadata !DIExpression()), !dbg !8019
  store i32* %live_subregs_used, i32** %live_subregs_used.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %live_subregs_used.addr, metadata !8020, metadata !DIExpression()), !dbg !8021
  store i32 %allocnum, i32* %allocnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %allocnum.addr, metadata !8022, metadata !DIExpression()), !dbg !8023
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !8024, metadata !DIExpression()), !dbg !8025
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !8026, metadata !DIExpression()), !dbg !8027
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !8028
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8028
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8028
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8028
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8028
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8028
  %call = call i32 @rhs_regno(%struct.rtx_def* %1), !dbg !8028
  store i32 %call, i32* %regno, align 4, !dbg !8027
  call void @llvm.dbg.declare(metadata i32* %size, metadata !8029, metadata !DIExpression()), !dbg !8030
  %2 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !8031
  %3 = load i32, i32* %regno, align 4, !dbg !8031
  %idxprom = zext i32 %3 to i64, !dbg !8031
  %arrayidx1 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idxprom, !dbg !8031
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8, !dbg !8031
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8031
  %bf.load = load i32, i32* %5, align 8, !dbg !8031
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8031
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8031
  %idxprom2 = zext i32 %bf.clear to i64, !dbg !8031
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !8031
  %6 = load i8, i8* %arrayidx3, align 1, !dbg !8031
  %conv = zext i8 %6 to i16, !dbg !8031
  %conv4 = zext i16 %conv to i32, !dbg !8031
  store i32 %conv4, i32* %size, align 4, !dbg !8030
  %7 = load i32, i32* %size, align 4, !dbg !8032
  %cmp = icmp sgt i32 %7, 0, !dbg !8032
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8032

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0), i32 2817, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)), !dbg !8032
  br label %cond.end, !dbg !8032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8032
  %8 = load i32*, i32** %live_subregs_used.addr, align 8, !dbg !8033
  %9 = load i32, i32* %allocnum.addr, align 4, !dbg !8035
  %idxprom6 = sext i32 %9 to i64, !dbg !8033
  %arrayidx7 = getelementptr inbounds i32, i32* %8, i64 %idxprom6, !dbg !8033
  %10 = load i32, i32* %arrayidx7, align 4, !dbg !8033
  %tobool = icmp ne i32 %10, 0, !dbg !8033
  br i1 %tobool, label %if.then, label %if.end, !dbg !8036

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !8037

if.end:                                           ; preds = %cond.end
  %11 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs.addr, align 8, !dbg !8038
  %12 = load i32, i32* %allocnum.addr, align 4, !dbg !8040
  %idxprom8 = sext i32 %12 to i64, !dbg !8038
  %arrayidx9 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %11, i64 %idxprom8, !dbg !8038
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx9, align 8, !dbg !8038
  %cmp10 = icmp eq %struct.simple_bitmap_def* %13, null, !dbg !8041
  br i1 %cmp10, label %if.then12, label %if.end16, !dbg !8042

if.then12:                                        ; preds = %if.end
  %14 = load i32, i32* %size, align 4, !dbg !8043
  %call13 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %14), !dbg !8044
  %15 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs.addr, align 8, !dbg !8045
  %16 = load i32, i32* %allocnum.addr, align 4, !dbg !8046
  %idxprom14 = sext i32 %16 to i64, !dbg !8045
  %arrayidx15 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %15, i64 %idxprom14, !dbg !8045
  store %struct.simple_bitmap_def* %call13, %struct.simple_bitmap_def** %arrayidx15, align 8, !dbg !8047
  br label %if.end16, !dbg !8045

if.end16:                                         ; preds = %if.then12, %if.end
  %17 = load i8, i8* %init_value.addr, align 1, !dbg !8048
  %tobool17 = icmp ne i8 %17, 0, !dbg !8048
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !8050

if.then18:                                        ; preds = %if.end16
  %18 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs.addr, align 8, !dbg !8051
  %19 = load i32, i32* %allocnum.addr, align 4, !dbg !8052
  %idxprom19 = sext i32 %19 to i64, !dbg !8051
  %arrayidx20 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %18, i64 %idxprom19, !dbg !8051
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx20, align 8, !dbg !8051
  call void @sbitmap_ones(%struct.simple_bitmap_def* %20), !dbg !8053
  br label %if.end23, !dbg !8053

if.else:                                          ; preds = %if.end16
  %21 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** %live_subregs.addr, align 8, !dbg !8054
  %22 = load i32, i32* %allocnum.addr, align 4, !dbg !8055
  %idxprom21 = sext i32 %22 to i64, !dbg !8054
  %arrayidx22 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %21, i64 %idxprom21, !dbg !8054
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx22, align 8, !dbg !8054
  call void @sbitmap_zero(%struct.simple_bitmap_def* %23), !dbg !8056
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then18
  %24 = load i32, i32* %size, align 4, !dbg !8057
  %25 = load i32*, i32** %live_subregs_used.addr, align 8, !dbg !8058
  %26 = load i32, i32* %allocnum.addr, align 4, !dbg !8059
  %idxprom24 = sext i32 %26 to i64, !dbg !8058
  %arrayidx25 = getelementptr inbounds i32, i32* %25, i64 %idxprom24, !dbg !8058
  store i32 %24, i32* %arrayidx25, align 4, !dbg !8060
  br label %return, !dbg !8061

return:                                           ; preds = %if.end23, %if.then
  ret void, !dbg !8061
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !8062 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !8065, metadata !DIExpression()), !dbg !8066
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !8067, metadata !DIExpression()), !dbg !8068
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8069
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !8071
  %1 = load i8*, i8** %popcount, align 8, !dbg !8071
  %tobool = icmp ne i8* %1, null, !dbg !8069
  br i1 %tobool, label %if.then, label %if.end7, !dbg !8072

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !8073, metadata !DIExpression()), !dbg !8075
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8076
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !8076
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !8076
  %div = udiv i32 %3, 64, !dbg !8076
  %idxprom = zext i32 %div to i64, !dbg !8076
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !8076
  %4 = load i64, i64* %arrayidx, align 8, !dbg !8076
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !8076
  %rem = urem i32 %5, 64, !dbg !8076
  %sh_prom = zext i32 %rem to i64, !dbg !8076
  %shr = lshr i64 %4, %sh_prom, !dbg !8076
  %and = and i64 %shr, 1, !dbg !8076
  %conv = trunc i64 %and to i8, !dbg !8076
  store i8 %conv, i8* %oldbit, align 1, !dbg !8077
  %6 = load i8, i8* %oldbit, align 1, !dbg !8078
  %tobool1 = icmp ne i8 %6, 0, !dbg !8078
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !8080

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8081
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !8082
  %8 = load i8*, i8** %popcount3, align 8, !dbg !8082
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !8083
  %div4 = udiv i32 %9, 64, !dbg !8084
  %idxprom5 = zext i32 %div4 to i64, !dbg !8081
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !8081
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !8085
  %dec = add i8 %10, -1, !dbg !8085
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !8085
  br label %if.end, !dbg !8081

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !8086

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !8087
  %rem8 = urem i32 %11, 64, !dbg !8088
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !8089
  %shl = shl i64 1, %sh_prom9, !dbg !8089
  %neg = xor i64 %shl, -1, !dbg !8090
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8091
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !8092
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !8093
  %div11 = udiv i32 %13, 64, !dbg !8094
  %idxprom12 = zext i32 %div11 to i64, !dbg !8091
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !8091
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !8095
  %and14 = and i64 %14, %neg, !dbg !8095
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !8095
  ret void, !dbg !8096
}

declare dso_local zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def*) #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !8097 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !8098, metadata !DIExpression()), !dbg !8099
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !8100, metadata !DIExpression()), !dbg !8101
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8102
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !8104
  %1 = load i8*, i8** %popcount, align 8, !dbg !8104
  %tobool = icmp ne i8* %1, null, !dbg !8102
  br i1 %tobool, label %if.then, label %if.end7, !dbg !8105

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !8106, metadata !DIExpression()), !dbg !8108
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8109
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !8109
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !8109
  %div = udiv i32 %3, 64, !dbg !8109
  %idxprom = zext i32 %div to i64, !dbg !8109
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !8109
  %4 = load i64, i64* %arrayidx, align 8, !dbg !8109
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !8109
  %rem = urem i32 %5, 64, !dbg !8109
  %sh_prom = zext i32 %rem to i64, !dbg !8109
  %shr = lshr i64 %4, %sh_prom, !dbg !8109
  %and = and i64 %shr, 1, !dbg !8109
  %conv = trunc i64 %and to i8, !dbg !8109
  store i8 %conv, i8* %oldbit, align 1, !dbg !8110
  %6 = load i8, i8* %oldbit, align 1, !dbg !8111
  %tobool1 = icmp ne i8 %6, 0, !dbg !8111
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !8113

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8114
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !8115
  %8 = load i8*, i8** %popcount3, align 8, !dbg !8115
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !8116
  %div4 = udiv i32 %9, 64, !dbg !8117
  %idxprom5 = zext i32 %div4 to i64, !dbg !8114
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !8114
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !8118
  %inc = add i8 %10, 1, !dbg !8118
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !8118
  br label %if.end, !dbg !8114

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !8119

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !8120
  %rem8 = urem i32 %11, 64, !dbg !8121
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !8122
  %shl = shl i64 1, %sh_prom9, !dbg !8122
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !8123
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !8124
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !8125
  %div11 = udiv i32 %13, 64, !dbg !8126
  %idxprom12 = zext i32 %div11 to i64, !dbg !8123
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !8123
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !8127
  %or = or i64 %14, %shl, !dbg !8127
  store i64 %or, i64* %arrayidx13, align 8, !dbg !8127
  ret void, !dbg !8128
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_insn_chains(%struct._IO_FILE* %file) #0 !dbg !8129 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %c = alloca %struct.insn_chain*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !8130, metadata !DIExpression()), !dbg !8131
  call void @llvm.dbg.declare(metadata %struct.insn_chain** %c, metadata !8132, metadata !DIExpression()), !dbg !8133
  %0 = load %struct.insn_chain*, %struct.insn_chain** @reload_insn_chain, align 8, !dbg !8134
  store %struct.insn_chain* %0, %struct.insn_chain** %c, align 8, !dbg !8136
  br label %for.cond, !dbg !8137

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !8138
  %tobool = icmp ne %struct.insn_chain* %1, null, !dbg !8140
  br i1 %tobool, label %for.body, label %for.end, !dbg !8140

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8141
  %3 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !8142
  call void @print_insn_chain(%struct._IO_FILE* %2, %struct.insn_chain* %3), !dbg !8143
  br label %for.inc, !dbg !8143

for.inc:                                          ; preds = %for.body
  %4 = load %struct.insn_chain*, %struct.insn_chain** %c, align 8, !dbg !8144
  %next = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %4, i32 0, i32 0, !dbg !8145
  %5 = load %struct.insn_chain*, %struct.insn_chain** %next, align 8, !dbg !8145
  store %struct.insn_chain* %5, %struct.insn_chain** %c, align 8, !dbg !8146
  br label %for.cond, !dbg !8147, !llvm.loop !8148

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8150
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @print_insn_chain(%struct._IO_FILE* %file, %struct.insn_chain* %c) #0 !dbg !8151 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %c.addr = alloca %struct.insn_chain*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !8154, metadata !DIExpression()), !dbg !8155
  store %struct.insn_chain* %c, %struct.insn_chain** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.insn_chain** %c.addr, metadata !8156, metadata !DIExpression()), !dbg !8157
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8158
  %1 = load %struct.insn_chain*, %struct.insn_chain** %c.addr, align 8, !dbg !8159
  %insn = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %1, i32 0, i32 3, !dbg !8159
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8159
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8159
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8159
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8159
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8159
  %3 = load i32, i32* %rt_int, align 8, !dbg !8159
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0), i32 %3), !dbg !8160
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8161
  %5 = load %struct.insn_chain*, %struct.insn_chain** %c.addr, align 8, !dbg !8162
  %live_throughout = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %5, i32 0, i32 6, !dbg !8163
  call void @bitmap_print(%struct._IO_FILE* %4, %struct.bitmap_head_def* %live_throughout, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i64 0, i64 0)), !dbg !8164
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !8165
  %7 = load %struct.insn_chain*, %struct.insn_chain** %c.addr, align 8, !dbg !8166
  %dead_or_set = getelementptr inbounds %struct.insn_chain, %struct.insn_chain* %7, i32 0, i32 7, !dbg !8167
  call void @bitmap_print(%struct._IO_FILE* %6, %struct.bitmap_head_def* %dead_or_set, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8168
  ret void, !dbg !8169
}

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2473, !2474, !2475}
!llvm.ident = !{!2476}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "ira_bitmap_obstack", scope: !2, file: !3, line: 560, type: !963, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !917, globals: !2209, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ira.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !150, !154, !160, !165, !170, !189, !196, !203, !397, !427, !434, !610, !615, !652, !674, !817, !827, !832, !836, !870, !885, !899}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !142, line: 31, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149}
!144 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !142, line: 91, baseType: !7, size: 32, elements: !151)
!151 = !{!152, !153}
!152 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!153 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !155, line: 363, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159}
!157 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!160 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !155, line: 355, baseType: !7, size: 32, elements: !161)
!161 = !{!162, !163, !164}
!162 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !166, line: 1188, baseType: !7, size: 32, elements: !398)
!398 = !{!399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426}
!399 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!400 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!403 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!404 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!405 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!406 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!407 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!408 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!409 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!410 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!411 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!412 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!413 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!414 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!415 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!416 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!417 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!418 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!419 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!420 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!421 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!422 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!423 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!424 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!425 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!426 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!427 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !428, line: 104, baseType: !7, size: 32, elements: !429)
!428 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!429 = !{!430, !431, !432, !433}
!430 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!431 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!432 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!433 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!434 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !435, line: 74, baseType: !7, size: 32, elements: !436)
!435 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!436 = !{!437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609}
!437 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!609 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!610 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_algorithm", file: !611, line: 219, baseType: !7, size: 32, elements: !612)
!611 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!612 = !{!613, !614}
!613 = !DIEnumerator(name: "IRA_ALGORITHM_CB", value: 0, isUnsigned: true)
!614 = !DIEnumerator(name: "IRA_ALGORITHM_PRIORITY", value: 1, isUnsigned: true)
!615 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "constraint_num", file: !616, line: 135, baseType: !7, size: 32, elements: !617)
!616 = !DIFile(filename: "./tm-preds.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!617 = !{!618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651}
!618 = !DIEnumerator(name: "CONSTRAINT__UNKNOWN", value: 0, isUnsigned: true)
!619 = !DIEnumerator(name: "CONSTRAINT_R", value: 1, isUnsigned: true)
!620 = !DIEnumerator(name: "CONSTRAINT_q", value: 2, isUnsigned: true)
!621 = !DIEnumerator(name: "CONSTRAINT_Q", value: 3, isUnsigned: true)
!622 = !DIEnumerator(name: "CONSTRAINT_l", value: 4, isUnsigned: true)
!623 = !DIEnumerator(name: "CONSTRAINT_a", value: 5, isUnsigned: true)
!624 = !DIEnumerator(name: "CONSTRAINT_b", value: 6, isUnsigned: true)
!625 = !DIEnumerator(name: "CONSTRAINT_c", value: 7, isUnsigned: true)
!626 = !DIEnumerator(name: "CONSTRAINT_d", value: 8, isUnsigned: true)
!627 = !DIEnumerator(name: "CONSTRAINT_S", value: 9, isUnsigned: true)
!628 = !DIEnumerator(name: "CONSTRAINT_D", value: 10, isUnsigned: true)
!629 = !DIEnumerator(name: "CONSTRAINT_A", value: 11, isUnsigned: true)
!630 = !DIEnumerator(name: "CONSTRAINT_U", value: 12, isUnsigned: true)
!631 = !DIEnumerator(name: "CONSTRAINT_f", value: 13, isUnsigned: true)
!632 = !DIEnumerator(name: "CONSTRAINT_t", value: 14, isUnsigned: true)
!633 = !DIEnumerator(name: "CONSTRAINT_u", value: 15, isUnsigned: true)
!634 = !DIEnumerator(name: "CONSTRAINT_y", value: 16, isUnsigned: true)
!635 = !DIEnumerator(name: "CONSTRAINT_x", value: 17, isUnsigned: true)
!636 = !DIEnumerator(name: "CONSTRAINT_Yz", value: 18, isUnsigned: true)
!637 = !DIEnumerator(name: "CONSTRAINT_Y2", value: 19, isUnsigned: true)
!638 = !DIEnumerator(name: "CONSTRAINT_Yi", value: 20, isUnsigned: true)
!639 = !DIEnumerator(name: "CONSTRAINT_Ym", value: 21, isUnsigned: true)
!640 = !DIEnumerator(name: "CONSTRAINT_I", value: 22, isUnsigned: true)
!641 = !DIEnumerator(name: "CONSTRAINT_J", value: 23, isUnsigned: true)
!642 = !DIEnumerator(name: "CONSTRAINT_K", value: 24, isUnsigned: true)
!643 = !DIEnumerator(name: "CONSTRAINT_L", value: 25, isUnsigned: true)
!644 = !DIEnumerator(name: "CONSTRAINT_M", value: 26, isUnsigned: true)
!645 = !DIEnumerator(name: "CONSTRAINT_N", value: 27, isUnsigned: true)
!646 = !DIEnumerator(name: "CONSTRAINT_O", value: 28, isUnsigned: true)
!647 = !DIEnumerator(name: "CONSTRAINT_G", value: 29, isUnsigned: true)
!648 = !DIEnumerator(name: "CONSTRAINT_C", value: 30, isUnsigned: true)
!649 = !DIEnumerator(name: "CONSTRAINT_e", value: 31, isUnsigned: true)
!650 = !DIEnumerator(name: "CONSTRAINT_Z", value: 32, isUnsigned: true)
!651 = !DIEnumerator(name: "CONSTRAINT__LIMIT", value: 33, isUnsigned: true)
!652 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !653, line: 36, baseType: !7, size: 32, elements: !654)
!653 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!654 = !{!655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673}
!655 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!656 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!657 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!658 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!659 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!660 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!661 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!662 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!663 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!664 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!665 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!666 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!667 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!668 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!669 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!670 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!671 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!672 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!673 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!674 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !675, line: 45, baseType: !7, size: 32, elements: !676)
!675 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!676 = !{!677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816}
!677 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!678 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!679 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!680 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!681 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!682 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!683 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!684 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!685 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!686 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!687 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!688 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!689 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!690 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!691 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!692 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!693 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!694 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!695 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!696 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!697 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!698 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!699 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!700 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!701 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!702 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!703 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!704 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!705 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!706 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!707 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!708 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!709 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!710 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!711 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!712 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!713 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!714 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!715 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!716 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!717 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!718 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!719 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!720 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!721 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!722 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!723 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!724 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!725 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!726 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!727 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!728 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!729 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!730 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!731 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!732 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!733 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!734 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!735 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!736 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!737 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!738 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!739 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!740 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!741 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!742 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!743 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!744 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!745 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!746 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!747 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!748 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!749 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!750 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!751 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!752 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!753 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!754 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!755 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!756 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!757 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!758 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!759 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!760 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!761 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!762 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!763 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!764 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!765 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!766 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!767 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!768 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!769 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!770 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!771 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!772 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!773 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!774 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!775 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!776 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!777 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!778 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!779 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!780 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!781 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!782 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!783 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!784 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!785 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!786 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!787 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!788 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!789 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!790 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!791 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!792 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!793 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!794 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!795 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!796 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!797 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!798 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!799 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!800 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!801 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!802 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!803 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!804 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!805 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!806 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!807 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!808 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!809 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!810 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!811 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!812 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!813 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!814 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!815 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!816 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!817 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !818, line: 463, baseType: !7, size: 32, elements: !819)
!818 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!819 = !{!820, !821, !822, !823, !824, !825, !826}
!820 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!821 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!822 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!823 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!824 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!825 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!826 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!827 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_region", file: !611, line: 228, baseType: !7, size: 32, elements: !828)
!828 = !{!829, !830, !831}
!829 = !DIEnumerator(name: "IRA_REGION_ONE", value: 0, isUnsigned: true)
!830 = !DIEnumerator(name: "IRA_REGION_ALL", value: 1, isUnsigned: true)
!831 = !DIEnumerator(name: "IRA_REGION_MIXED", value: 2, isUnsigned: true)
!832 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !155, line: 912, baseType: !7, size: 32, elements: !833)
!833 = !{!834, !835}
!834 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!835 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!836 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !675, line: 836, baseType: !7, size: 32, elements: !837)
!837 = !{!838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869}
!838 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!839 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!840 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!841 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!842 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!843 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!844 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!845 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!846 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!847 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!848 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!849 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!850 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!851 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!852 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!853 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!854 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!855 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!856 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!857 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!858 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!859 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!860 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!861 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!862 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!863 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!864 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!865 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!866 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!867 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!868 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!869 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!870 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !675, line: 60, baseType: !7, size: 32, elements: !871)
!871 = !{!872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884}
!872 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!873 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!874 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!875 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!876 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!877 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!878 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!879 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!880 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!881 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!882 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!883 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!884 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!885 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !675, line: 1994, baseType: !7, size: 32, elements: !886)
!886 = !{!887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898}
!887 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!888 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!889 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!890 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!891 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!892 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!893 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!894 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!895 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!896 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!897 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!898 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!899 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_flags", file: !818, line: 84, baseType: !7, size: 32, elements: !900)
!900 = !{!901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916}
!901 = !DIEnumerator(name: "DF_REF_CONDITIONAL", value: 1, isUnsigned: true)
!902 = !DIEnumerator(name: "DF_REF_AT_TOP", value: 2, isUnsigned: true)
!903 = !DIEnumerator(name: "DF_REF_IN_NOTE", value: 4, isUnsigned: true)
!904 = !DIEnumerator(name: "DF_HARD_REG_LIVE", value: 8, isUnsigned: true)
!905 = !DIEnumerator(name: "DF_REF_PARTIAL", value: 16, isUnsigned: true)
!906 = !DIEnumerator(name: "DF_REF_READ_WRITE", value: 32, isUnsigned: true)
!907 = !DIEnumerator(name: "DF_REF_MAY_CLOBBER", value: 64, isUnsigned: true)
!908 = !DIEnumerator(name: "DF_REF_MUST_CLOBBER", value: 128, isUnsigned: true)
!909 = !DIEnumerator(name: "DF_REF_SIGN_EXTRACT", value: 256, isUnsigned: true)
!910 = !DIEnumerator(name: "DF_REF_ZERO_EXTRACT", value: 512, isUnsigned: true)
!911 = !DIEnumerator(name: "DF_REF_STRICT_LOW_PART", value: 1024, isUnsigned: true)
!912 = !DIEnumerator(name: "DF_REF_SUBREG", value: 2048, isUnsigned: true)
!913 = !DIEnumerator(name: "DF_REF_MW_HARDREG", value: 4096, isUnsigned: true)
!914 = !DIEnumerator(name: "DF_REF_CALL_STACK_USAGE", value: 8192, isUnsigned: true)
!915 = !DIEnumerator(name: "DF_REF_REG_MARKER", value: 16384, isUnsigned: true)
!916 = !DIEnumerator(name: "DF_REF_PRE_POST_MODIFY", value: 32768, isUnsigned: true)
!917 = !{!918, !919, !926, !927, !929, !5, !397, !615, !932, !652, !923, !674, !934, !1003, !1005, !2172, !2181, !836, !1006, !938, !2190, !7, !2157, !2197, !2208, !931}
!918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !920, size: 64)
!920 = !DIDerivedType(tag: DW_TAG_typedef, name: "move_table", file: !921, line: 269, baseType: !922)
!921 = !DIFile(filename: "./regs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!922 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 432, elements: !924)
!923 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!924 = !{!925}
!925 = !DISubrange(count: 27)
!926 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !928, size: 64)
!928 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!929 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !930, line: 42, baseType: !931)
!930 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!931 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!933 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !397)
!934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !935, size: 64)
!935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !818, line: 826, size: 256, elements: !936)
!936 = !{!937, !1000, !1001, !1002}
!937 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !935, file: !818, line: 829, baseType: !938, size: 64)
!938 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !939, line: 47, baseType: !940)
!939 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !941, size: 64)
!941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !942, line: 75, size: 256, elements: !943)
!942 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!943 = !{!944, !958, !959, !960}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !941, file: !942, line: 76, baseType: !945, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !946, size: 64)
!946 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !942, line: 68, baseType: !947)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !942, line: 63, size: 320, elements: !948)
!948 = !{!949, !951, !952, !953}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !947, file: !942, line: 64, baseType: !950, size: 64)
!950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !947, file: !942, line: 65, baseType: !950, size: 64, offset: 64)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !947, file: !942, line: 66, baseType: !7, size: 32, offset: 128)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !947, file: !942, line: 67, baseType: !954, size: 128, offset: 192)
!954 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 128, elements: !956)
!955 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !942, line: 29, baseType: !931)
!956 = !{!957}
!957 = !DISubrange(count: 2)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !941, file: !942, line: 77, baseType: !945, size: 64, offset: 64)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !941, file: !942, line: 78, baseType: !7, size: 32, offset: 128)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !941, file: !942, line: 79, baseType: !961, size: 64, offset: 192)
!961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!962 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !942, line: 49, baseType: !963)
!963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !942, line: 45, size: 832, elements: !964)
!964 = !{!965, !966, !967}
!965 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !963, file: !942, line: 46, baseType: !950, size: 64)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !963, file: !942, line: 47, baseType: !940, size: 64, offset: 64)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !963, file: !942, line: 48, baseType: !968, size: 704, offset: 128)
!968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !969, line: 164, size: 704, elements: !970)
!969 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!970 = !{!971, !973, !983, !984, !985, !986, !987, !988, !992, !996, !997, !998, !999}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !968, file: !969, line: 166, baseType: !972, size: 64)
!972 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !968, file: !969, line: 167, baseType: !974, size: 64, offset: 64)
!974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !975, size: 64)
!975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !969, line: 157, size: 192, elements: !976)
!976 = !{!977, !978, !979}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !975, file: !969, line: 159, baseType: !927, size: 64)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !975, file: !969, line: 160, baseType: !974, size: 64, offset: 64)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !975, file: !969, line: 161, baseType: !980, size: 32, offset: 128)
!980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !928, size: 32, elements: !981)
!981 = !{!982}
!982 = !DISubrange(count: 4)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !968, file: !969, line: 168, baseType: !927, size: 64, offset: 128)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !968, file: !969, line: 169, baseType: !927, size: 64, offset: 192)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !968, file: !969, line: 170, baseType: !927, size: 64, offset: 256)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !968, file: !969, line: 171, baseType: !972, size: 64, offset: 320)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !968, file: !969, line: 172, baseType: !926, size: 32, offset: 384)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !968, file: !969, line: 176, baseType: !989, size: 64, offset: 448)
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!990 = !DISubroutineType(types: !991)
!991 = !{!974, !918, !972}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !968, file: !969, line: 177, baseType: !993, size: 64, offset: 512)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = !DISubroutineType(types: !995)
!995 = !{null, !918, !974}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !968, file: !969, line: 178, baseType: !918, size: 64, offset: 576)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !968, file: !969, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !968, file: !969, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !968, file: !969, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !935, file: !818, line: 831, baseType: !938, size: 64, offset: 64)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !935, file: !818, line: 834, baseType: !938, size: 64, offset: 128)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !935, file: !818, line: 835, baseType: !938, size: 64, offset: 192)
!1003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64)
!1004 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!1006 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !939, line: 50, baseType: !1007)
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !675, line: 240, size: 384, elements: !1009)
!1009 = !{!1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1008, file: !675, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1008, file: !675, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1008, file: !675, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1008, file: !675, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1008, file: !675, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1008, file: !675, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1008, file: !675, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1008, file: !675, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1008, file: !675, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1008, file: !675, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1008, file: !675, line: 321, baseType: !1021, size: 320, offset: 64)
!1021 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !675, line: 315, size: 320, elements: !1022)
!1022 = !{!1023, !2107, !2109, !2170, !2171}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1021, file: !675, line: 316, baseType: !1024, size: 64)
!1024 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 64, elements: !1042)
!1025 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !675, line: 183, baseType: !1026)
!1026 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !675, line: 166, size: 64, elements: !1027)
!1027 = !{!1028, !1029, !1030, !1033, !1034, !1044, !1045, !1057, !1060, !1061, !2085, !2086, !2097, !2104}
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1026, file: !675, line: 168, baseType: !926, size: 32)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1026, file: !675, line: 169, baseType: !7, size: 32)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1026, file: !675, line: 170, baseType: !1031, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1032 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !928)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1026, file: !675, line: 171, baseType: !1006, size: 64)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1026, file: !675, line: 172, baseType: !1035, size: 64)
!1035 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !939, line: 53, baseType: !1036)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1037, size: 64)
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !675, line: 359, size: 128, elements: !1038)
!1038 = !{!1039, !1040}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1037, file: !675, line: 360, baseType: !926, size: 32)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1037, file: !675, line: 361, baseType: !1041, size: 64, offset: 64)
!1041 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1006, size: 64, elements: !1042)
!1042 = !{!1043}
!1043 = !DISubrange(count: 1)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1026, file: !675, line: 173, baseType: !5, size: 32)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1026, file: !675, line: 174, baseType: !1046, size: 32)
!1046 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !675, line: 133, baseType: !1047)
!1047 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !675, line: 115, size: 32, elements: !1048)
!1048 = !{!1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1047, file: !675, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1047, file: !675, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1047, file: !675, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1047, file: !675, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1047, file: !675, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1047, file: !675, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1047, file: !675, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1047, file: !675, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1026, file: !675, line: 175, baseType: !1058, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64)
!1059 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !675, line: 175, flags: DIFlagFwdDecl)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1026, file: !675, line: 176, baseType: !940, size: 64)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1026, file: !675, line: 177, baseType: !1062, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !939, line: 56, baseType: !1063)
!1063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1064, size: 64)
!1064 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !1065)
!1065 = !{!1066, !1099, !1105, !1116, !1135, !1146, !1151, !1158, !1164, !1177, !1189, !1227, !1232, !1260, !1268, !1269, !1274, !1283, !1289, !1294, !1298, !1302, !1724, !1773, !1779, !1785, !1792, !1815, !1829, !1846, !1858, !1880, !1895, !2067}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1064, file: !171, line: 3372, baseType: !1067, size: 64)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !1068)
!1068 = !{!1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1067, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1067, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1067, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1067, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1067, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1067, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1067, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1067, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1067, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1067, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1067, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1067, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1067, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1067, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1067, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1067, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1067, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1067, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1067, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1067, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1067, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1067, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1067, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1067, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1067, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1067, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1067, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1067, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1067, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1067, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1064, file: !171, line: 3373, baseType: !1100, size: 192)
!1100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !1101)
!1101 = !{!1102, !1103, !1104}
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1100, file: !171, line: 403, baseType: !1067, size: 64)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1100, file: !171, line: 404, baseType: !1062, size: 64, offset: 64)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1100, file: !171, line: 405, baseType: !1062, size: 64, offset: 128)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1064, file: !171, line: 3374, baseType: !1106, size: 320)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !1107)
!1107 = !{!1108, !1109}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1106, file: !171, line: 1385, baseType: !1100, size: 192)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1106, file: !171, line: 1386, baseType: !1110, size: 128, offset: 192)
!1110 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1111, line: 58, baseType: !1112)
!1111 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1111, line: 54, size: 128, elements: !1113)
!1113 = !{!1114, !1115}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1112, file: !1111, line: 56, baseType: !931, size: 64)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1112, file: !1111, line: 57, baseType: !972, size: 64, offset: 64)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1064, file: !171, line: 3375, baseType: !1117, size: 256)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !1118)
!1118 = !{!1119, !1120}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1117, file: !171, line: 1398, baseType: !1100, size: 192)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1117, file: !171, line: 1399, baseType: !1121, size: 64, offset: 192)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1123, line: 52, size: 256, elements: !1124)
!1123 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1124 = !{!1125, !1126, !1127, !1128, !1129, !1130, !1131}
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1122, file: !1123, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1122, file: !1123, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1122, file: !1123, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1122, file: !1123, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1122, file: !1123, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1122, file: !1123, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1122, file: !1123, line: 62, baseType: !1132, size: 192, offset: 64)
!1132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 192, elements: !1133)
!1133 = !{!1134}
!1134 = !DISubrange(count: 3)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1064, file: !171, line: 3376, baseType: !1136, size: 256)
!1136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !1137)
!1137 = !{!1138, !1139}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1136, file: !171, line: 1409, baseType: !1100, size: 192)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1136, file: !171, line: 1410, baseType: !1140, size: 64, offset: 192)
!1140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1141, size: 64)
!1141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1142, line: 27, size: 192, elements: !1143)
!1142 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1143 = !{!1144, !1145}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1141, file: !1142, line: 29, baseType: !1110, size: 128)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1141, file: !1142, line: 30, baseType: !5, size: 32, offset: 128)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1064, file: !171, line: 3377, baseType: !1147, size: 256)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !1148)
!1148 = !{!1149, !1150}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1147, file: !171, line: 1438, baseType: !1100, size: 192)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1147, file: !171, line: 1439, baseType: !1062, size: 64, offset: 192)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1064, file: !171, line: 3378, baseType: !1152, size: 256)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !1153)
!1153 = !{!1154, !1155, !1156}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1152, file: !171, line: 1419, baseType: !1100, size: 192)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1152, file: !171, line: 1420, baseType: !926, size: 32, offset: 192)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1152, file: !171, line: 1421, baseType: !1157, size: 8, offset: 224)
!1157 = !DICompositeType(tag: DW_TAG_array_type, baseType: !928, size: 8, elements: !1042)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1064, file: !171, line: 3379, baseType: !1159, size: 320)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !1160)
!1160 = !{!1161, !1162, !1163}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1159, file: !171, line: 1429, baseType: !1100, size: 192)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1159, file: !171, line: 1430, baseType: !1062, size: 64, offset: 192)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1159, file: !171, line: 1431, baseType: !1062, size: 64, offset: 256)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1064, file: !171, line: 3380, baseType: !1165, size: 320)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !1166)
!1166 = !{!1167, !1168}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1165, file: !171, line: 1461, baseType: !1100, size: 192)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1165, file: !171, line: 1462, baseType: !1169, size: 128, offset: 192)
!1169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1170, line: 31, size: 128, elements: !1171)
!1170 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1171 = !{!1172, !1175, !1176}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1169, file: !1170, line: 32, baseType: !1173, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1004)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1169, file: !1170, line: 33, baseType: !7, size: 32, offset: 64)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1169, file: !1170, line: 34, baseType: !7, size: 32, offset: 96)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1064, file: !171, line: 3381, baseType: !1178, size: 384)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !1179)
!1179 = !{!1180, !1181, !1186, !1187, !1188}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1178, file: !171, line: 2508, baseType: !1100, size: 192)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1178, file: !171, line: 2509, baseType: !1182, size: 32, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1183, line: 58, baseType: !1184)
!1183 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1184 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1185, line: 44, baseType: !7)
!1185 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1178, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1178, file: !171, line: 2511, baseType: !1062, size: 64, offset: 256)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1178, file: !171, line: 2512, baseType: !1062, size: 64, offset: 320)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1064, file: !171, line: 3382, baseType: !1190, size: 896)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !1191)
!1191 = !{!1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224}
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1190, file: !171, line: 2653, baseType: !1178, size: 384)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1190, file: !171, line: 2654, baseType: !1062, size: 64, offset: 384)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1190, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1190, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1190, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1190, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1190, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1190, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1190, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1190, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1190, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1190, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1190, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1190, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1190, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1190, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1190, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1190, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1190, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1190, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1190, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1190, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1190, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1190, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1190, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1190, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1190, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1190, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1190, file: !171, line: 2705, baseType: !1062, size: 64, offset: 576)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1190, file: !171, line: 2706, baseType: !1062, size: 64, offset: 640)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1190, file: !171, line: 2707, baseType: !1062, size: 64, offset: 704)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1190, file: !171, line: 2708, baseType: !1062, size: 64, offset: 768)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1190, file: !171, line: 2711, baseType: !1225, size: 64, offset: 832)
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64)
!1226 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1064, file: !171, line: 3383, baseType: !1228, size: 960)
!1228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !1229)
!1229 = !{!1230, !1231}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1228, file: !171, line: 2757, baseType: !1190, size: 896)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1228, file: !171, line: 2758, baseType: !1006, size: 64, offset: 896)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1064, file: !171, line: 3384, baseType: !1233, size: 1472)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !1234)
!1234 = !{!1235, !1256, !1257, !1258, !1259}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1233, file: !171, line: 3115, baseType: !1236, size: 1216)
!1236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !1237)
!1237 = !{!1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255}
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1236, file: !171, line: 2985, baseType: !1228, size: 960)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1236, file: !171, line: 2986, baseType: !1062, size: 64, offset: 960)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1236, file: !171, line: 2987, baseType: !1062, size: 64, offset: 1024)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1236, file: !171, line: 2988, baseType: !1062, size: 64, offset: 1088)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1236, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1236, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1236, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1236, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1236, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1236, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1236, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1236, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1236, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1236, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1236, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1236, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1236, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1236, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1233, file: !171, line: 3117, baseType: !1062, size: 64, offset: 1216)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1233, file: !171, line: 3119, baseType: !1062, size: 64, offset: 1280)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1233, file: !171, line: 3121, baseType: !1062, size: 64, offset: 1344)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1233, file: !171, line: 3123, baseType: !1062, size: 64, offset: 1408)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1064, file: !171, line: 3385, baseType: !1261, size: 1088)
!1261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !1262)
!1262 = !{!1263, !1264, !1265}
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1261, file: !171, line: 2875, baseType: !1228, size: 960)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1261, file: !171, line: 2876, baseType: !1006, size: 64, offset: 960)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1261, file: !171, line: 2877, baseType: !1266, size: 64, offset: 1024)
!1266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1267, size: 64)
!1267 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !171, line: 2856, flags: DIFlagFwdDecl)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1064, file: !171, line: 3386, baseType: !1236, size: 1216)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1064, file: !171, line: 3387, baseType: !1270, size: 1280)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !1271)
!1271 = !{!1272, !1273}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1270, file: !171, line: 3094, baseType: !1236, size: 1216)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1270, file: !171, line: 3095, baseType: !1266, size: 64, offset: 1216)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1064, file: !171, line: 3388, baseType: !1275, size: 1216)
!1275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !1276)
!1276 = !{!1277, !1278, !1279, !1280, !1281, !1282}
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1275, file: !171, line: 2825, baseType: !1190, size: 896)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1275, file: !171, line: 2827, baseType: !1062, size: 64, offset: 896)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1275, file: !171, line: 2828, baseType: !1062, size: 64, offset: 960)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1275, file: !171, line: 2829, baseType: !1062, size: 64, offset: 1024)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1275, file: !171, line: 2830, baseType: !1062, size: 64, offset: 1088)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1275, file: !171, line: 2831, baseType: !1062, size: 64, offset: 1152)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1064, file: !171, line: 3389, baseType: !1284, size: 1024)
!1284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !1285)
!1285 = !{!1286, !1287, !1288}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1284, file: !171, line: 2851, baseType: !1228, size: 960)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1284, file: !171, line: 2852, baseType: !926, size: 32, offset: 960)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1284, file: !171, line: 2853, baseType: !926, size: 32, offset: 992)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1064, file: !171, line: 3390, baseType: !1290, size: 1024)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !1291)
!1291 = !{!1292, !1293}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1290, file: !171, line: 2858, baseType: !1228, size: 960)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1290, file: !171, line: 2859, baseType: !1266, size: 64, offset: 960)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1064, file: !171, line: 3391, baseType: !1295, size: 960)
!1295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !1296)
!1296 = !{!1297}
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1295, file: !171, line: 2863, baseType: !1228, size: 960)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1064, file: !171, line: 3392, baseType: !1299, size: 1472)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !1300)
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1299, file: !171, line: 3305, baseType: !1233, size: 1472)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1064, file: !171, line: 3393, baseType: !1303, size: 1792)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !1304)
!1304 = !{!1305, !1306, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1303, file: !171, line: 3249, baseType: !1233, size: 1472)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1303, file: !171, line: 3251, baseType: !1307, size: 64, offset: 1472)
!1307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1308, size: 64)
!1308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1309, line: 463, size: 1152, elements: !1310)
!1309 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1310 = !{!1311, !1475, !1635, !1636, !1639, !1647, !1648, !1649, !1650, !1651, !1652, !1676, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1308, file: !1309, line: 464, baseType: !1312, size: 64)
!1312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1313, size: 64)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1314)
!1314 = !{!1315, !1364, !1377, !1391, !1443, !1456}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1313, file: !135, line: 197, baseType: !1316, size: 64)
!1316 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1317)
!1317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1318, size: 64)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1319)
!1319 = !{!1320, !1321, !1322, !1323, !1324, !1325, !1352, !1361, !1362, !1363}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1318, file: !135, line: 119, baseType: !1317, size: 64)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1318, file: !135, line: 122, baseType: !1317, size: 64, offset: 64)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1318, file: !135, line: 123, baseType: !1317, size: 64, offset: 128)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1318, file: !135, line: 126, baseType: !926, size: 32, offset: 192)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1318, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1318, file: !135, line: 165, baseType: !1326, size: 192, offset: 256)
!1326 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1327)
!1327 = !{!1328, !1341, !1347}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1326, file: !135, line: 137, baseType: !1329, size: 128)
!1329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1330)
!1330 = !{!1331, !1340}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1329, file: !135, line: 135, baseType: !1332, size: 64)
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1334)
!1334 = !{!1335, !1336, !1337, !1338, !1339}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1333, file: !135, line: 96, baseType: !1332, size: 64)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1333, file: !135, line: 97, baseType: !1332, size: 64, offset: 64)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1333, file: !135, line: 101, baseType: !1062, size: 64, offset: 128)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1333, file: !135, line: 106, baseType: !1062, size: 64, offset: 192)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1333, file: !135, line: 111, baseType: !1062, size: 64, offset: 256)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1329, file: !135, line: 136, baseType: !1332, size: 64, offset: 64)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1326, file: !135, line: 151, baseType: !1342, size: 192)
!1342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1343)
!1343 = !{!1344, !1345, !1346}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1342, file: !135, line: 141, baseType: !1062, size: 64)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1342, file: !135, line: 145, baseType: !1062, size: 64, offset: 64)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1342, file: !135, line: 150, baseType: !926, size: 32, offset: 128)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1326, file: !135, line: 164, baseType: !1348, size: 128)
!1348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1349)
!1349 = !{!1350, !1351}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1348, file: !135, line: 161, baseType: !1062, size: 64)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1348, file: !135, line: 163, baseType: !1182, size: 32, offset: 64)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1318, file: !135, line: 168, baseType: !1353, size: 64, offset: 448)
!1353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1354, size: 64)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1355)
!1355 = !{!1356, !1357, !1358, !1359, !1360}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1354, file: !135, line: 70, baseType: !1353, size: 64)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1354, file: !135, line: 73, baseType: !1317, size: 64, offset: 64)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1354, file: !135, line: 78, baseType: !1062, size: 64, offset: 128)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1354, file: !135, line: 85, baseType: !1006, size: 64, offset: 192)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1354, file: !135, line: 88, baseType: !926, size: 32, offset: 256)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1318, file: !135, line: 173, baseType: !1006, size: 64, offset: 512)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1318, file: !135, line: 173, baseType: !1006, size: 64, offset: 576)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1318, file: !135, line: 177, baseType: !1004, size: 8, offset: 640)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1313, file: !135, line: 200, baseType: !1365, size: 64, offset: 64)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!1366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1367)
!1367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1368)
!1368 = !{!1369}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1367, file: !135, line: 185, baseType: !1370, size: 128)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1371)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1372)
!1372 = !{!1373, !1374, !1375}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1371, file: !135, line: 184, baseType: !7, size: 32)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1371, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1371, file: !135, line: 184, baseType: !1376, size: 64, offset: 64)
!1376 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1316, size: 64, elements: !1042)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1313, file: !135, line: 203, baseType: !1378, size: 64, offset: 128)
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1379, size: 64)
!1379 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1380)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1381)
!1381 = !{!1382}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1380, file: !135, line: 189, baseType: !1383, size: 128)
!1383 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1384)
!1384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1385)
!1385 = !{!1386, !1387, !1388}
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1384, file: !135, line: 188, baseType: !7, size: 32)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1384, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1384, file: !135, line: 188, baseType: !1389, size: 64, offset: 64)
!1389 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1390, size: 64, elements: !1042)
!1390 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1353)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1313, file: !135, line: 207, baseType: !1392, size: 64, offset: 192)
!1392 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1393, line: 144, baseType: !1394)
!1393 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1395, size: 64)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1393, line: 100, size: 896, elements: !1396)
!1396 = !{!1397, !1405, !1410, !1415, !1417, !1420, !1421, !1422, !1423, !1424, !1429, !1431, !1432, !1437, !1442}
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1395, file: !1393, line: 102, baseType: !1398, size: 64)
!1398 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1393, line: 52, baseType: !1399)
!1399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1400, size: 64)
!1400 = !DISubroutineType(types: !1401)
!1401 = !{!1402, !1403}
!1402 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1393, line: 47, baseType: !7)
!1403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1404, size: 64)
!1404 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1395, file: !1393, line: 105, baseType: !1406, size: 64, offset: 64)
!1406 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1393, line: 59, baseType: !1407)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = !DISubroutineType(types: !1409)
!1409 = !{!926, !1403, !1403}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1395, file: !1393, line: 108, baseType: !1411, size: 64, offset: 128)
!1411 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1393, line: 63, baseType: !1412)
!1412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1413, size: 64)
!1413 = !DISubroutineType(types: !1414)
!1414 = !{null, !918}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1395, file: !1393, line: 111, baseType: !1416, size: 64, offset: 192)
!1416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1395, file: !1393, line: 114, baseType: !1418, size: 64, offset: 256)
!1418 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1419, line: 46, baseType: !931)
!1419 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1395, file: !1393, line: 117, baseType: !1418, size: 64, offset: 320)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1395, file: !1393, line: 120, baseType: !1418, size: 64, offset: 384)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1395, file: !1393, line: 124, baseType: !7, size: 32, offset: 448)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1395, file: !1393, line: 128, baseType: !7, size: 32, offset: 480)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1395, file: !1393, line: 131, baseType: !1425, size: 64, offset: 512)
!1425 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1393, line: 75, baseType: !1426)
!1426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1427, size: 64)
!1427 = !DISubroutineType(types: !1428)
!1428 = !{!918, !1418, !1418}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1395, file: !1393, line: 132, baseType: !1430, size: 64, offset: 576)
!1430 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1393, line: 78, baseType: !1412)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1395, file: !1393, line: 135, baseType: !918, size: 64, offset: 640)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1395, file: !1393, line: 136, baseType: !1433, size: 64, offset: 704)
!1433 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1393, line: 82, baseType: !1434)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = !DISubroutineType(types: !1436)
!1436 = !{!918, !918, !1418, !1418}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1395, file: !1393, line: 137, baseType: !1438, size: 64, offset: 768)
!1438 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1393, line: 83, baseType: !1439)
!1439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1440, size: 64)
!1440 = !DISubroutineType(types: !1441)
!1441 = !{null, !918, !918}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1395, file: !1393, line: 141, baseType: !7, size: 32, offset: 832)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1313, file: !135, line: 211, baseType: !1444, size: 64, offset: 256)
!1444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1445, size: 64)
!1445 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !1446)
!1446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !1447)
!1447 = !{!1448}
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1446, file: !171, line: 183, baseType: !1449, size: 128)
!1449 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !1450)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !1451)
!1451 = !{!1452, !1453, !1454}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1450, file: !171, line: 182, baseType: !7, size: 32)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1450, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1450, file: !171, line: 182, baseType: !1455, size: 64, offset: 64)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1062, size: 64, elements: !1042)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1313, file: !135, line: 220, baseType: !1457, size: 64, offset: 320)
!1457 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1458)
!1458 = !{!1459, !1460}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1457, file: !135, line: 218, baseType: !1444, size: 64)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1457, file: !135, line: 219, baseType: !1461, size: 64)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1462 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1463, line: 29, baseType: !1464)
!1463 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1463, line: 29, size: 96, elements: !1465)
!1465 = !{!1466}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1464, file: !1463, line: 29, baseType: !1467, size: 96)
!1467 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1463, line: 27, baseType: !1468)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1463, line: 27, size: 96, elements: !1469)
!1469 = !{!1470, !1471, !1472}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1468, file: !1463, line: 27, baseType: !7, size: 32)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1468, file: !1463, line: 27, baseType: !7, size: 32, offset: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1468, file: !1463, line: 27, baseType: !1473, size: 8, offset: 64)
!1473 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1474, size: 8, elements: !1042)
!1474 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1463, line: 26, baseType: !1004)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1308, file: !1309, line: 467, baseType: !1476, size: 64, offset: 64)
!1476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !155, line: 374, size: 640, elements: !1478)
!1478 = !{!1479, !1610, !1611, !1624, !1625, !1626, !1627, !1628, !1629, !1631, !1633, !1634}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1477, file: !155, line: 377, baseType: !1480, size: 64)
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !939, line: 111, baseType: !1481)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !155, line: 217, size: 832, elements: !1483)
!1483 = !{!1484, !1519, !1520, !1521, !1580, !1584, !1585, !1586, !1604, !1605, !1606, !1607, !1608, !1609}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1482, file: !155, line: 219, baseType: !1485, size: 64)
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !155, line: 151, baseType: !1487)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !155, line: 151, size: 128, elements: !1488)
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1487, file: !155, line: 151, baseType: !1490, size: 128)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !155, line: 150, baseType: !1491)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !155, line: 150, size: 128, elements: !1492)
!1492 = !{!1493, !1494, !1495}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1491, file: !155, line: 150, baseType: !7, size: 32)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1491, file: !155, line: 150, baseType: !7, size: 32, offset: 32)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1491, file: !155, line: 150, baseType: !1496, size: 64, offset: 64)
!1496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1497, size: 64, elements: !1042)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !939, line: 108, baseType: !1498)
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1499, size: 64)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !155, line: 122, size: 512, elements: !1500)
!1500 = !{!1501, !1502, !1503, !1511, !1512, !1513, !1514, !1515, !1516, !1517}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1499, file: !155, line: 124, baseType: !1481, size: 64)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1499, file: !155, line: 125, baseType: !1481, size: 64, offset: 64)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1499, file: !155, line: 131, baseType: !1504, size: 64, offset: 128)
!1504 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !155, line: 128, size: 64, elements: !1505)
!1505 = !{!1506, !1510}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1504, file: !155, line: 129, baseType: !1507, size: 64)
!1507 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !939, line: 66, baseType: !1508)
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1509, size: 64)
!1509 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !939, line: 65, flags: DIFlagFwdDecl)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1504, file: !155, line: 130, baseType: !1006, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1499, file: !155, line: 134, baseType: !918, size: 64, offset: 192)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1499, file: !155, line: 137, baseType: !1062, size: 64, offset: 256)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1499, file: !155, line: 138, baseType: !1182, size: 32, offset: 320)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1499, file: !155, line: 142, baseType: !7, size: 32, offset: 352)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1499, file: !155, line: 144, baseType: !926, size: 32, offset: 384)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1499, file: !155, line: 145, baseType: !926, size: 32, offset: 416)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1499, file: !155, line: 146, baseType: !1518, size: 64, offset: 448)
!1518 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !155, line: 119, baseType: !972)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1482, file: !155, line: 220, baseType: !1485, size: 64, offset: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1482, file: !155, line: 223, baseType: !918, size: 64, offset: 128)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1482, file: !155, line: 226, baseType: !1522, size: 64, offset: 192)
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1523, size: 64)
!1523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 100, size: 1216, elements: !1524)
!1524 = !{!1525, !1526, !1527, !1528, !1529, !1534, !1535, !1536, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1570, !1578, !1579}
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1523, file: !142, line: 102, baseType: !926, size: 32)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1523, file: !142, line: 105, baseType: !7, size: 32, offset: 32)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1523, file: !142, line: 108, baseType: !1481, size: 64, offset: 64)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1523, file: !142, line: 111, baseType: !1481, size: 64, offset: 128)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1523, file: !142, line: 114, baseType: !1530, size: 64, offset: 192)
!1530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !142, line: 41, size: 64, elements: !1531)
!1531 = !{!1532, !1533}
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1530, file: !142, line: 42, baseType: !141, size: 32)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1530, file: !142, line: 43, baseType: !7, size: 32, offset: 32)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1523, file: !142, line: 117, baseType: !7, size: 32, offset: 256)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1523, file: !142, line: 120, baseType: !7, size: 32, offset: 288)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1523, file: !142, line: 123, baseType: !1537, size: 64, offset: 320)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !142, line: 87, baseType: !1539)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !142, line: 87, size: 128, elements: !1540)
!1540 = !{!1541}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1539, file: !142, line: 87, baseType: !1542, size: 128)
!1542 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !142, line: 85, baseType: !1543)
!1543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !142, line: 85, size: 128, elements: !1544)
!1544 = !{!1545, !1546, !1547}
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1543, file: !142, line: 85, baseType: !7, size: 32)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1543, file: !142, line: 85, baseType: !7, size: 32, offset: 32)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1543, file: !142, line: 85, baseType: !1548, size: 64, offset: 64)
!1548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1549, size: 64, elements: !1042)
!1549 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !142, line: 84, baseType: !1522)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1523, file: !142, line: 126, baseType: !1522, size: 64, offset: 384)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1523, file: !142, line: 129, baseType: !1522, size: 64, offset: 448)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1523, file: !142, line: 132, baseType: !918, size: 64, offset: 512)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1523, file: !142, line: 139, baseType: !1062, size: 64, offset: 576)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1523, file: !142, line: 143, baseType: !1110, size: 128, offset: 640)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1523, file: !142, line: 146, baseType: !1110, size: 128, offset: 768)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1523, file: !142, line: 148, baseType: !1004, size: 8, offset: 896)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1523, file: !142, line: 149, baseType: !1004, size: 8, offset: 904)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1523, file: !142, line: 153, baseType: !150, size: 32, offset: 928)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1523, file: !142, line: 156, baseType: !1560, size: 64, offset: 960)
!1560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !142, line: 48, size: 320, elements: !1562)
!1562 = !{!1563, !1567, !1568, !1569}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1561, file: !142, line: 50, baseType: !1564, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !939, line: 58, baseType: !1565)
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !939, line: 57, flags: DIFlagFwdDecl)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1561, file: !142, line: 59, baseType: !1110, size: 128, offset: 64)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1561, file: !142, line: 64, baseType: !1004, size: 8, offset: 192)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1561, file: !142, line: 67, baseType: !1560, size: 64, offset: 256)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1523, file: !142, line: 159, baseType: !1571, size: 64, offset: 1024)
!1571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1572, size: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !142, line: 72, size: 256, elements: !1573)
!1573 = !{!1574, !1575, !1576, !1577}
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1572, file: !142, line: 74, baseType: !1498, size: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1572, file: !142, line: 77, baseType: !1571, size: 64, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1572, file: !142, line: 78, baseType: !1571, size: 64, offset: 128)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1572, file: !142, line: 81, baseType: !1571, size: 64, offset: 192)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1523, file: !142, line: 162, baseType: !1004, size: 8, offset: 1088)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1523, file: !142, line: 166, baseType: !1062, size: 64, offset: 1152)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1482, file: !155, line: 229, baseType: !1581, size: 128, offset: 256)
!1581 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1582, size: 128, elements: !956)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1583 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !155, line: 229, flags: DIFlagFwdDecl)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1482, file: !155, line: 232, baseType: !1481, size: 64, offset: 384)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1482, file: !155, line: 233, baseType: !1481, size: 64, offset: 448)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1482, file: !155, line: 238, baseType: !1587, size: 64, offset: 512)
!1587 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !155, line: 235, size: 64, elements: !1588)
!1588 = !{!1589, !1595}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1587, file: !155, line: 236, baseType: !1590, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1591, size: 64)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !155, line: 273, size: 128, elements: !1592)
!1592 = !{!1593, !1594}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1591, file: !155, line: 275, baseType: !1507, size: 64)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1591, file: !155, line: 278, baseType: !1507, size: 64, offset: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1587, file: !155, line: 237, baseType: !1596, size: 64)
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !155, line: 259, size: 320, elements: !1598)
!1598 = !{!1599, !1600, !1601, !1602, !1603}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1597, file: !155, line: 261, baseType: !1006, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1597, file: !155, line: 262, baseType: !1006, size: 64, offset: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1597, file: !155, line: 266, baseType: !1006, size: 64, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1597, file: !155, line: 267, baseType: !1006, size: 64, offset: 192)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1597, file: !155, line: 270, baseType: !926, size: 32, offset: 256)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1482, file: !155, line: 241, baseType: !1518, size: 64, offset: 576)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1482, file: !155, line: 244, baseType: !926, size: 32, offset: 640)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1482, file: !155, line: 247, baseType: !926, size: 32, offset: 672)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1482, file: !155, line: 250, baseType: !926, size: 32, offset: 704)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1482, file: !155, line: 253, baseType: !926, size: 32, offset: 736)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1482, file: !155, line: 256, baseType: !926, size: 32, offset: 768)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1477, file: !155, line: 378, baseType: !1480, size: 64, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1477, file: !155, line: 381, baseType: !1612, size: 64, offset: 128)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !155, line: 282, baseType: !1614)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !155, line: 282, size: 128, elements: !1615)
!1615 = !{!1616}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1614, file: !155, line: 282, baseType: !1617, size: 128)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !155, line: 281, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !155, line: 281, size: 128, elements: !1619)
!1619 = !{!1620, !1621, !1622}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1618, file: !155, line: 281, baseType: !7, size: 32)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1618, file: !155, line: 281, baseType: !7, size: 32, offset: 32)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1618, file: !155, line: 281, baseType: !1623, size: 64, offset: 64)
!1623 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1480, size: 64, elements: !1042)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1477, file: !155, line: 384, baseType: !926, size: 32, offset: 192)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1477, file: !155, line: 387, baseType: !926, size: 32, offset: 224)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1477, file: !155, line: 390, baseType: !926, size: 32, offset: 256)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1477, file: !155, line: 394, baseType: !1612, size: 64, offset: 320)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1477, file: !155, line: 396, baseType: !154, size: 32, offset: 384)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1477, file: !155, line: 399, baseType: !1630, size: 64, offset: 416)
!1630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !956)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1477, file: !155, line: 402, baseType: !1632, size: 64, offset: 480)
!1632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !956)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1477, file: !155, line: 406, baseType: !926, size: 32, offset: 544)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1477, file: !155, line: 409, baseType: !926, size: 32, offset: 576)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1308, file: !1309, line: 470, baseType: !1508, size: 64, offset: 128)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1308, file: !1309, line: 473, baseType: !1637, size: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1309, line: 166, flags: DIFlagFwdDecl)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1308, file: !1309, line: 476, baseType: !1640, size: 64, offset: 256)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64)
!1641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !142, line: 187, size: 256, elements: !1642)
!1642 = !{!1643, !1644, !1645, !1646}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1641, file: !142, line: 189, baseType: !926, size: 32)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1641, file: !142, line: 192, baseType: !1537, size: 64, offset: 64)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1641, file: !142, line: 197, baseType: !1392, size: 64, offset: 128)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1641, file: !142, line: 200, baseType: !1522, size: 64, offset: 192)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1308, file: !1309, line: 479, baseType: !1392, size: 64, offset: 320)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1308, file: !1309, line: 484, baseType: !1062, size: 64, offset: 384)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1308, file: !1309, line: 488, baseType: !1062, size: 64, offset: 448)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1308, file: !1309, line: 493, baseType: !1062, size: 64, offset: 512)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1308, file: !1309, line: 496, baseType: !1062, size: 64, offset: 576)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1308, file: !1309, line: 501, baseType: !1653, size: 64, offset: 640)
!1653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !1655)
!1655 = !{!1656, !1659, !1660, !1661, !1662, !1664, !1665, !1670, !1671, !1672, !1673, !1674, !1675}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1654, file: !166, line: 2356, baseType: !1657, size: 64)
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1654, file: !166, line: 2357, baseType: !1031, size: 64, offset: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1654, file: !166, line: 2358, baseType: !926, size: 32, offset: 128)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1654, file: !166, line: 2359, baseType: !926, size: 32, offset: 160)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1654, file: !166, line: 2360, baseType: !1663, size: 128, offset: 192)
!1663 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 128, elements: !981)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1654, file: !166, line: 2364, baseType: !926, size: 32, offset: 320)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1654, file: !166, line: 2367, baseType: !1666, size: 128, offset: 384)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !1667)
!1667 = !{!1668, !1669}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1666, file: !166, line: 2351, baseType: !1006, size: 64)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1666, file: !166, line: 2352, baseType: !972, size: 64, offset: 64)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1654, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1654, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1654, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1654, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1654, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1654, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1308, file: !1309, line: 504, baseType: !1677, size: 64, offset: 704)
!1677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1678, size: 64)
!1678 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1309, line: 504, flags: DIFlagFwdDecl)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1308, file: !1309, line: 507, baseType: !1392, size: 64, offset: 768)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1308, file: !1309, line: 510, baseType: !926, size: 32, offset: 832)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1308, file: !1309, line: 513, baseType: !926, size: 32, offset: 864)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1308, file: !1309, line: 516, baseType: !1182, size: 32, offset: 896)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1308, file: !1309, line: 519, baseType: !1182, size: 32, offset: 928)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1308, file: !1309, line: 522, baseType: !7, size: 32, offset: 960)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1308, file: !1309, line: 523, baseType: !7, size: 32, offset: 992)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1308, file: !1309, line: 528, baseType: !1031, size: 64, offset: 1024)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1308, file: !1309, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1308, file: !1309, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1308, file: !1309, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1308, file: !1309, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1308, file: !1309, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1308, file: !1309, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1308, file: !1309, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1308, file: !1309, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1308, file: !1309, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1308, file: !1309, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1308, file: !1309, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1308, file: !1309, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1308, file: !1309, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1308, file: !1309, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1308, file: !1309, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1308, file: !1309, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1303, file: !171, line: 3254, baseType: !1062, size: 64, offset: 1536)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1303, file: !171, line: 3257, baseType: !1062, size: 64, offset: 1600)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1303, file: !171, line: 3258, baseType: !1062, size: 64, offset: 1664)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1303, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1303, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1303, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1303, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1303, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1303, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1303, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1303, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1303, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1303, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1303, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1303, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1303, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1303, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1303, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1303, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1303, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1303, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1064, file: !171, line: 3394, baseType: !1725, size: 1344)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !1726)
!1726 = !{!1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1752, !1753, !1754, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1725, file: !171, line: 2280, baseType: !1100, size: 192)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1725, file: !171, line: 2281, baseType: !1062, size: 64, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1725, file: !171, line: 2282, baseType: !1062, size: 64, offset: 256)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1725, file: !171, line: 2283, baseType: !1062, size: 64, offset: 320)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1725, file: !171, line: 2284, baseType: !1062, size: 64, offset: 384)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1725, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1725, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1725, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1725, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1725, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1725, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1725, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1725, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1725, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1725, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1725, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1725, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1725, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1725, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1725, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1725, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1725, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1725, file: !171, line: 2306, baseType: !1750, size: 32, offset: 544)
!1750 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1751, line: 31, baseType: !926)
!1751 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1725, file: !171, line: 2307, baseType: !1062, size: 64, offset: 576)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1725, file: !171, line: 2308, baseType: !1062, size: 64, offset: 640)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1725, file: !171, line: 2314, baseType: !1755, size: 64, offset: 704)
!1755 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !1756)
!1756 = !{!1757, !1758, !1759}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1755, file: !171, line: 2310, baseType: !926, size: 32)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1755, file: !171, line: 2311, baseType: !1031, size: 64)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1755, file: !171, line: 2312, baseType: !1760, size: 64)
!1760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1761, size: 64)
!1761 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1725, file: !171, line: 2315, baseType: !1062, size: 64, offset: 768)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1725, file: !171, line: 2316, baseType: !1062, size: 64, offset: 832)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1725, file: !171, line: 2317, baseType: !1062, size: 64, offset: 896)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1725, file: !171, line: 2318, baseType: !1062, size: 64, offset: 960)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1725, file: !171, line: 2319, baseType: !1062, size: 64, offset: 1024)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1725, file: !171, line: 2320, baseType: !1062, size: 64, offset: 1088)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1725, file: !171, line: 2321, baseType: !1062, size: 64, offset: 1152)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1725, file: !171, line: 2322, baseType: !1062, size: 64, offset: 1216)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1725, file: !171, line: 2324, baseType: !1771, size: 64, offset: 1280)
!1771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1772, size: 64)
!1772 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1064, file: !171, line: 3395, baseType: !1774, size: 320)
!1774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !1775)
!1775 = !{!1776, !1777, !1778}
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1774, file: !171, line: 1470, baseType: !1100, size: 192)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1774, file: !171, line: 1471, baseType: !1062, size: 64, offset: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1774, file: !171, line: 1472, baseType: !1062, size: 64, offset: 256)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1064, file: !171, line: 3396, baseType: !1780, size: 320)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !1781)
!1781 = !{!1782, !1783, !1784}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1780, file: !171, line: 1483, baseType: !1100, size: 192)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1780, file: !171, line: 1484, baseType: !926, size: 32, offset: 192)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1780, file: !171, line: 1485, baseType: !1455, size: 64, offset: 256)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1064, file: !171, line: 3397, baseType: !1786, size: 384)
!1786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !1787)
!1787 = !{!1788, !1789, !1790, !1791}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1786, file: !171, line: 1830, baseType: !1100, size: 192)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1786, file: !171, line: 1831, baseType: !1182, size: 32, offset: 192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1786, file: !171, line: 1832, baseType: !1062, size: 64, offset: 256)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1786, file: !171, line: 1835, baseType: !1455, size: 64, offset: 320)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1064, file: !171, line: 3398, baseType: !1793, size: 704)
!1793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !1794)
!1794 = !{!1795, !1796, !1797, !1798, !1799, !1802}
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1793, file: !171, line: 1899, baseType: !1100, size: 192)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1793, file: !171, line: 1902, baseType: !1062, size: 64, offset: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1793, file: !171, line: 1905, baseType: !1564, size: 64, offset: 256)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1793, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1793, file: !171, line: 1911, baseType: !1800, size: 64, offset: 384)
!1800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1801, size: 64)
!1801 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !171, line: 1876, flags: DIFlagFwdDecl)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1793, file: !171, line: 1914, baseType: !1803, size: 256, offset: 448)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !1804)
!1804 = !{!1805, !1807, !1808, !1813}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1803, file: !171, line: 1884, baseType: !1806, size: 64)
!1806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1803, size: 64)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1803, file: !171, line: 1885, baseType: !1806, size: 64, offset: 64)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1803, file: !171, line: 1891, baseType: !1809, size: 64, offset: 128)
!1809 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1803, file: !171, line: 1891, size: 64, elements: !1810)
!1810 = !{!1811, !1812}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1809, file: !171, line: 1891, baseType: !1564, size: 64)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1809, file: !171, line: 1891, baseType: !1062, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1803, file: !171, line: 1892, baseType: !1814, size: 64, offset: 192)
!1814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1064, file: !171, line: 3399, baseType: !1816, size: 704)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !1817)
!1817 = !{!1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1816, file: !171, line: 2009, baseType: !1100, size: 192)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1816, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1816, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1816, file: !171, line: 2014, baseType: !1182, size: 32, offset: 224)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1816, file: !171, line: 2016, baseType: !1062, size: 64, offset: 256)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1816, file: !171, line: 2017, baseType: !1444, size: 64, offset: 320)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1816, file: !171, line: 2019, baseType: !1062, size: 64, offset: 384)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1816, file: !171, line: 2020, baseType: !1062, size: 64, offset: 448)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1816, file: !171, line: 2021, baseType: !1062, size: 64, offset: 512)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1816, file: !171, line: 2022, baseType: !1062, size: 64, offset: 576)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1816, file: !171, line: 2023, baseType: !1062, size: 64, offset: 640)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1064, file: !171, line: 3400, baseType: !1830, size: 832)
!1830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !1831)
!1831 = !{!1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841}
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1830, file: !171, line: 2431, baseType: !1100, size: 192)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1830, file: !171, line: 2433, baseType: !1062, size: 64, offset: 192)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1830, file: !171, line: 2434, baseType: !1062, size: 64, offset: 256)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1830, file: !171, line: 2435, baseType: !1062, size: 64, offset: 320)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1830, file: !171, line: 2436, baseType: !1062, size: 64, offset: 384)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1830, file: !171, line: 2437, baseType: !1444, size: 64, offset: 448)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1830, file: !171, line: 2438, baseType: !1062, size: 64, offset: 512)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1830, file: !171, line: 2440, baseType: !1062, size: 64, offset: 576)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1830, file: !171, line: 2441, baseType: !1062, size: 64, offset: 640)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1830, file: !171, line: 2443, baseType: !1842, size: 128, offset: 704)
!1842 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !1843)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !1844)
!1844 = !{!1845}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1843, file: !171, line: 182, baseType: !1449, size: 128)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1064, file: !171, line: 3401, baseType: !1847, size: 320)
!1847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !1848)
!1848 = !{!1849, !1850, !1857}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1847, file: !171, line: 3329, baseType: !1100, size: 192)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1847, file: !171, line: 3330, baseType: !1851, size: 64, offset: 192)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !1853)
!1853 = !{!1854, !1855, !1856}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1852, file: !171, line: 3322, baseType: !1851, size: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1852, file: !171, line: 3323, baseType: !1851, size: 64, offset: 64)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1852, file: !171, line: 3324, baseType: !1062, size: 64, offset: 128)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1847, file: !171, line: 3331, baseType: !1851, size: 64, offset: 256)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1064, file: !171, line: 3402, baseType: !1859, size: 256)
!1859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !1860)
!1860 = !{!1861, !1862}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1859, file: !171, line: 1541, baseType: !1100, size: 192)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1859, file: !171, line: 1542, baseType: !1863, size: 64, offset: 192)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !1865)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !1866)
!1866 = !{!1867}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1865, file: !171, line: 1538, baseType: !1868, size: 192)
!1868 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !1869)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !1870)
!1870 = !{!1871, !1872, !1873}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1869, file: !171, line: 1537, baseType: !7, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1869, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1869, file: !171, line: 1537, baseType: !1874, size: 128, offset: 64)
!1874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1875, size: 128, elements: !1042)
!1875 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !1876)
!1876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !1877)
!1877 = !{!1878, !1879}
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1876, file: !171, line: 1533, baseType: !1062, size: 64)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1876, file: !171, line: 1534, baseType: !1062, size: 64, offset: 64)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1064, file: !171, line: 3403, baseType: !1881, size: 512)
!1881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !1882)
!1882 = !{!1883, !1884, !1885, !1886, !1892, !1893, !1894}
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1881, file: !171, line: 1939, baseType: !1100, size: 192)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1881, file: !171, line: 1940, baseType: !1182, size: 32, offset: 192)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1881, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1881, file: !171, line: 1946, baseType: !1887, size: 32, offset: 256)
!1887 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !1888)
!1888 = !{!1889, !1890, !1891}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1887, file: !171, line: 1943, baseType: !189, size: 32)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1887, file: !171, line: 1944, baseType: !196, size: 32)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1887, file: !171, line: 1945, baseType: !203, size: 32)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1881, file: !171, line: 1950, baseType: !1507, size: 64, offset: 320)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1881, file: !171, line: 1951, baseType: !1507, size: 64, offset: 384)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1881, file: !171, line: 1953, baseType: !1455, size: 64, offset: 448)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1064, file: !171, line: 3404, baseType: !1896, size: 1664)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !1897)
!1897 = !{!1898, !1899}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1896, file: !171, line: 3338, baseType: !1100, size: 192)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1896, file: !171, line: 3341, baseType: !1900, size: 1472, offset: 192)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1901, line: 410, size: 1472, elements: !1902)
!1901 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1902 = !{!1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066}
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1900, file: !1901, line: 412, baseType: !926, size: 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1900, file: !1901, line: 413, baseType: !926, size: 32, offset: 32)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1900, file: !1901, line: 414, baseType: !926, size: 32, offset: 64)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1900, file: !1901, line: 415, baseType: !926, size: 32, offset: 96)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1900, file: !1901, line: 416, baseType: !926, size: 32, offset: 128)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1900, file: !1901, line: 417, baseType: !926, size: 32, offset: 160)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1900, file: !1901, line: 418, baseType: !1004, size: 8, offset: 192)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1900, file: !1901, line: 419, baseType: !1004, size: 8, offset: 200)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1900, file: !1901, line: 420, baseType: !1912, size: 8, offset: 208)
!1912 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1900, file: !1901, line: 421, baseType: !1912, size: 8, offset: 216)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1900, file: !1901, line: 422, baseType: !1912, size: 8, offset: 224)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1900, file: !1901, line: 423, baseType: !1912, size: 8, offset: 232)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1900, file: !1901, line: 424, baseType: !1912, size: 8, offset: 240)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1900, file: !1901, line: 425, baseType: !1912, size: 8, offset: 248)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1900, file: !1901, line: 426, baseType: !1912, size: 8, offset: 256)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1900, file: !1901, line: 427, baseType: !1912, size: 8, offset: 264)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1900, file: !1901, line: 428, baseType: !1912, size: 8, offset: 272)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1900, file: !1901, line: 429, baseType: !1912, size: 8, offset: 280)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1900, file: !1901, line: 430, baseType: !1912, size: 8, offset: 288)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1900, file: !1901, line: 431, baseType: !1912, size: 8, offset: 296)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1900, file: !1901, line: 432, baseType: !1912, size: 8, offset: 304)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1900, file: !1901, line: 433, baseType: !1912, size: 8, offset: 312)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1900, file: !1901, line: 434, baseType: !1912, size: 8, offset: 320)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1900, file: !1901, line: 435, baseType: !1912, size: 8, offset: 328)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1900, file: !1901, line: 436, baseType: !1912, size: 8, offset: 336)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1900, file: !1901, line: 437, baseType: !1912, size: 8, offset: 344)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1900, file: !1901, line: 438, baseType: !1912, size: 8, offset: 352)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1900, file: !1901, line: 439, baseType: !1912, size: 8, offset: 360)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1900, file: !1901, line: 440, baseType: !1912, size: 8, offset: 368)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1900, file: !1901, line: 441, baseType: !1912, size: 8, offset: 376)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1900, file: !1901, line: 442, baseType: !1912, size: 8, offset: 384)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1900, file: !1901, line: 443, baseType: !1912, size: 8, offset: 392)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1900, file: !1901, line: 444, baseType: !1912, size: 8, offset: 400)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1900, file: !1901, line: 445, baseType: !1912, size: 8, offset: 408)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1900, file: !1901, line: 446, baseType: !1912, size: 8, offset: 416)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1900, file: !1901, line: 447, baseType: !1912, size: 8, offset: 424)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1900, file: !1901, line: 448, baseType: !1912, size: 8, offset: 432)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1900, file: !1901, line: 449, baseType: !1912, size: 8, offset: 440)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1900, file: !1901, line: 450, baseType: !1912, size: 8, offset: 448)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1900, file: !1901, line: 451, baseType: !1912, size: 8, offset: 456)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1900, file: !1901, line: 452, baseType: !1912, size: 8, offset: 464)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1900, file: !1901, line: 453, baseType: !1912, size: 8, offset: 472)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1900, file: !1901, line: 454, baseType: !1912, size: 8, offset: 480)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1900, file: !1901, line: 455, baseType: !1912, size: 8, offset: 488)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1900, file: !1901, line: 456, baseType: !1912, size: 8, offset: 496)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1900, file: !1901, line: 457, baseType: !1912, size: 8, offset: 504)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1900, file: !1901, line: 458, baseType: !1912, size: 8, offset: 512)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1900, file: !1901, line: 459, baseType: !1912, size: 8, offset: 520)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1900, file: !1901, line: 460, baseType: !1912, size: 8, offset: 528)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1900, file: !1901, line: 461, baseType: !1912, size: 8, offset: 536)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1900, file: !1901, line: 462, baseType: !1912, size: 8, offset: 544)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1900, file: !1901, line: 463, baseType: !1912, size: 8, offset: 552)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1900, file: !1901, line: 464, baseType: !1912, size: 8, offset: 560)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1900, file: !1901, line: 465, baseType: !1912, size: 8, offset: 568)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1900, file: !1901, line: 466, baseType: !1912, size: 8, offset: 576)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1900, file: !1901, line: 467, baseType: !1912, size: 8, offset: 584)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1900, file: !1901, line: 468, baseType: !1912, size: 8, offset: 592)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1900, file: !1901, line: 469, baseType: !1912, size: 8, offset: 600)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1900, file: !1901, line: 470, baseType: !1912, size: 8, offset: 608)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1900, file: !1901, line: 471, baseType: !1912, size: 8, offset: 616)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1900, file: !1901, line: 472, baseType: !1912, size: 8, offset: 624)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1900, file: !1901, line: 473, baseType: !1912, size: 8, offset: 632)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1900, file: !1901, line: 474, baseType: !1912, size: 8, offset: 640)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1900, file: !1901, line: 475, baseType: !1912, size: 8, offset: 648)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1900, file: !1901, line: 476, baseType: !1912, size: 8, offset: 656)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1900, file: !1901, line: 477, baseType: !1912, size: 8, offset: 664)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1900, file: !1901, line: 478, baseType: !1912, size: 8, offset: 672)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1900, file: !1901, line: 479, baseType: !1912, size: 8, offset: 680)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1900, file: !1901, line: 480, baseType: !1912, size: 8, offset: 688)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1900, file: !1901, line: 481, baseType: !1912, size: 8, offset: 696)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1900, file: !1901, line: 482, baseType: !1912, size: 8, offset: 704)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1900, file: !1901, line: 483, baseType: !1912, size: 8, offset: 712)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1900, file: !1901, line: 484, baseType: !1912, size: 8, offset: 720)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1900, file: !1901, line: 485, baseType: !1912, size: 8, offset: 728)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1900, file: !1901, line: 486, baseType: !1912, size: 8, offset: 736)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1900, file: !1901, line: 487, baseType: !1912, size: 8, offset: 744)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1900, file: !1901, line: 488, baseType: !1912, size: 8, offset: 752)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1900, file: !1901, line: 489, baseType: !1912, size: 8, offset: 760)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1900, file: !1901, line: 490, baseType: !1912, size: 8, offset: 768)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1900, file: !1901, line: 491, baseType: !1912, size: 8, offset: 776)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1900, file: !1901, line: 492, baseType: !1912, size: 8, offset: 784)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1900, file: !1901, line: 493, baseType: !1912, size: 8, offset: 792)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1900, file: !1901, line: 494, baseType: !1912, size: 8, offset: 800)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1900, file: !1901, line: 495, baseType: !1912, size: 8, offset: 808)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1900, file: !1901, line: 496, baseType: !1912, size: 8, offset: 816)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1900, file: !1901, line: 497, baseType: !1912, size: 8, offset: 824)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1900, file: !1901, line: 498, baseType: !1912, size: 8, offset: 832)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1900, file: !1901, line: 499, baseType: !1912, size: 8, offset: 840)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1900, file: !1901, line: 500, baseType: !1912, size: 8, offset: 848)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1900, file: !1901, line: 501, baseType: !1912, size: 8, offset: 856)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1900, file: !1901, line: 502, baseType: !1912, size: 8, offset: 864)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1900, file: !1901, line: 503, baseType: !1912, size: 8, offset: 872)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1900, file: !1901, line: 504, baseType: !1912, size: 8, offset: 880)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1900, file: !1901, line: 505, baseType: !1912, size: 8, offset: 888)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1900, file: !1901, line: 506, baseType: !1912, size: 8, offset: 896)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1900, file: !1901, line: 507, baseType: !1912, size: 8, offset: 904)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1900, file: !1901, line: 508, baseType: !1912, size: 8, offset: 912)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1900, file: !1901, line: 509, baseType: !1912, size: 8, offset: 920)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1900, file: !1901, line: 510, baseType: !1912, size: 8, offset: 928)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1900, file: !1901, line: 511, baseType: !1912, size: 8, offset: 936)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1900, file: !1901, line: 512, baseType: !1912, size: 8, offset: 944)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1900, file: !1901, line: 513, baseType: !1912, size: 8, offset: 952)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1900, file: !1901, line: 514, baseType: !1912, size: 8, offset: 960)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1900, file: !1901, line: 515, baseType: !1912, size: 8, offset: 968)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1900, file: !1901, line: 516, baseType: !1912, size: 8, offset: 976)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1900, file: !1901, line: 517, baseType: !1912, size: 8, offset: 984)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1900, file: !1901, line: 518, baseType: !1912, size: 8, offset: 992)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1900, file: !1901, line: 519, baseType: !1912, size: 8, offset: 1000)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1900, file: !1901, line: 520, baseType: !1912, size: 8, offset: 1008)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1900, file: !1901, line: 521, baseType: !1912, size: 8, offset: 1016)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1900, file: !1901, line: 522, baseType: !1912, size: 8, offset: 1024)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1900, file: !1901, line: 523, baseType: !1912, size: 8, offset: 1032)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1900, file: !1901, line: 524, baseType: !1912, size: 8, offset: 1040)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1900, file: !1901, line: 525, baseType: !1912, size: 8, offset: 1048)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1900, file: !1901, line: 526, baseType: !1912, size: 8, offset: 1056)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1900, file: !1901, line: 527, baseType: !1912, size: 8, offset: 1064)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1900, file: !1901, line: 528, baseType: !1912, size: 8, offset: 1072)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1900, file: !1901, line: 529, baseType: !1912, size: 8, offset: 1080)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1900, file: !1901, line: 530, baseType: !1912, size: 8, offset: 1088)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1900, file: !1901, line: 531, baseType: !1912, size: 8, offset: 1096)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1900, file: !1901, line: 532, baseType: !1912, size: 8, offset: 1104)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1900, file: !1901, line: 533, baseType: !1912, size: 8, offset: 1112)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1900, file: !1901, line: 534, baseType: !1912, size: 8, offset: 1120)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1900, file: !1901, line: 535, baseType: !1912, size: 8, offset: 1128)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1900, file: !1901, line: 536, baseType: !1912, size: 8, offset: 1136)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1900, file: !1901, line: 537, baseType: !1912, size: 8, offset: 1144)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1900, file: !1901, line: 538, baseType: !1912, size: 8, offset: 1152)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1900, file: !1901, line: 539, baseType: !1912, size: 8, offset: 1160)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1900, file: !1901, line: 540, baseType: !1912, size: 8, offset: 1168)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1900, file: !1901, line: 541, baseType: !1912, size: 8, offset: 1176)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1900, file: !1901, line: 542, baseType: !1912, size: 8, offset: 1184)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1900, file: !1901, line: 543, baseType: !1912, size: 8, offset: 1192)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1900, file: !1901, line: 544, baseType: !1912, size: 8, offset: 1200)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1900, file: !1901, line: 545, baseType: !1912, size: 8, offset: 1208)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1900, file: !1901, line: 546, baseType: !1912, size: 8, offset: 1216)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1900, file: !1901, line: 547, baseType: !1912, size: 8, offset: 1224)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1900, file: !1901, line: 548, baseType: !1912, size: 8, offset: 1232)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1900, file: !1901, line: 549, baseType: !1912, size: 8, offset: 1240)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1900, file: !1901, line: 550, baseType: !1912, size: 8, offset: 1248)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1900, file: !1901, line: 551, baseType: !1912, size: 8, offset: 1256)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1900, file: !1901, line: 552, baseType: !1912, size: 8, offset: 1264)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1900, file: !1901, line: 553, baseType: !1912, size: 8, offset: 1272)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1900, file: !1901, line: 554, baseType: !1912, size: 8, offset: 1280)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1900, file: !1901, line: 555, baseType: !1912, size: 8, offset: 1288)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1900, file: !1901, line: 556, baseType: !1912, size: 8, offset: 1296)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1900, file: !1901, line: 557, baseType: !1912, size: 8, offset: 1304)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1900, file: !1901, line: 558, baseType: !1912, size: 8, offset: 1312)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1900, file: !1901, line: 559, baseType: !1912, size: 8, offset: 1320)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1900, file: !1901, line: 560, baseType: !1912, size: 8, offset: 1328)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1900, file: !1901, line: 561, baseType: !1912, size: 8, offset: 1336)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1900, file: !1901, line: 562, baseType: !1912, size: 8, offset: 1344)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1900, file: !1901, line: 563, baseType: !1912, size: 8, offset: 1352)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1900, file: !1901, line: 564, baseType: !1912, size: 8, offset: 1360)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1900, file: !1901, line: 565, baseType: !1912, size: 8, offset: 1368)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1900, file: !1901, line: 566, baseType: !1912, size: 8, offset: 1376)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1900, file: !1901, line: 567, baseType: !1912, size: 8, offset: 1384)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1900, file: !1901, line: 568, baseType: !1912, size: 8, offset: 1392)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1900, file: !1901, line: 569, baseType: !1912, size: 8, offset: 1400)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1900, file: !1901, line: 570, baseType: !1912, size: 8, offset: 1408)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1900, file: !1901, line: 571, baseType: !1912, size: 8, offset: 1416)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1900, file: !1901, line: 572, baseType: !1912, size: 8, offset: 1424)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1900, file: !1901, line: 573, baseType: !1912, size: 8, offset: 1432)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1900, file: !1901, line: 574, baseType: !1912, size: 8, offset: 1440)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1064, file: !171, line: 3405, baseType: !2068, size: 384)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !2069)
!2069 = !{!2070, !2071}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2068, file: !171, line: 3353, baseType: !1100, size: 192)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2068, file: !171, line: 3356, baseType: !2072, size: 192, offset: 192)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1901, line: 578, size: 192, elements: !2073)
!2073 = !{!2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2072, file: !1901, line: 580, baseType: !926, size: 32)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2072, file: !1901, line: 581, baseType: !926, size: 32, offset: 32)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2072, file: !1901, line: 582, baseType: !926, size: 32, offset: 64)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2072, file: !1901, line: 583, baseType: !926, size: 32, offset: 96)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2072, file: !1901, line: 584, baseType: !1004, size: 8, offset: 128)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2072, file: !1901, line: 585, baseType: !1004, size: 8, offset: 136)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2072, file: !1901, line: 586, baseType: !1004, size: 8, offset: 144)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2072, file: !1901, line: 587, baseType: !1004, size: 8, offset: 152)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2072, file: !1901, line: 588, baseType: !1004, size: 8, offset: 160)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2072, file: !1901, line: 589, baseType: !1004, size: 8, offset: 168)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2072, file: !1901, line: 590, baseType: !1004, size: 8, offset: 176)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1026, file: !675, line: 178, baseType: !1481, size: 64)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1026, file: !675, line: 179, baseType: !2087, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2088, size: 64)
!2088 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !675, line: 150, baseType: !2089)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !675, line: 142, size: 320, elements: !2090)
!2090 = !{!2091, !2092, !2093, !2094, !2095, !2096}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2089, file: !675, line: 144, baseType: !1062, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2089, file: !675, line: 145, baseType: !1006, size: 64, offset: 64)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2089, file: !675, line: 146, baseType: !1006, size: 64, offset: 128)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2089, file: !675, line: 147, baseType: !1750, size: 32, offset: 192)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2089, file: !675, line: 148, baseType: !7, size: 32, offset: 224)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2089, file: !675, line: 149, baseType: !1004, size: 8, offset: 256)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1026, file: !675, line: 180, baseType: !2098, size: 64)
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !675, line: 162, baseType: !2100)
!2100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !675, line: 159, size: 128, elements: !2101)
!2101 = !{!2102, !2103}
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2100, file: !675, line: 160, baseType: !1062, size: 64)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2100, file: !675, line: 161, baseType: !972, size: 64, offset: 64)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1026, file: !675, line: 181, baseType: !2105, size: 64)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !675, line: 181, flags: DIFlagFwdDecl)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1021, file: !675, line: 317, baseType: !2108, size: 64)
!2108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !972, size: 64, elements: !1042)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1021, file: !675, line: 318, baseType: !2110, size: 320)
!2110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !675, line: 188, size: 320, elements: !2111)
!2111 = !{!2112, !2114, !2169}
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2110, file: !675, line: 190, baseType: !2113, size: 192)
!2113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 192, elements: !1133)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2110, file: !675, line: 193, baseType: !2115, size: 64, offset: 192)
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !675, line: 206, size: 320, elements: !2117)
!2117 = !{!2118, !2154, !2155, !2156, !2168}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2116, file: !675, line: 208, baseType: !2119, size: 64)
!2119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2120, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !939, line: 62, baseType: !2121)
!2121 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2122, line: 538, size: 256, elements: !2123)
!2122 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2123 = !{!2124, !2128, !2134, !2145}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2121, file: !2122, line: 539, baseType: !2125, size: 32)
!2125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2122, line: 482, size: 32, elements: !2126)
!2126 = !{!2127}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2125, file: !2122, line: 484, baseType: !7, size: 32)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2121, file: !2122, line: 540, baseType: !2129, size: 192)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2122, line: 488, size: 192, elements: !2130)
!2130 = !{!2131, !2132, !2133}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2129, file: !2122, line: 489, baseType: !2125, size: 32)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2129, file: !2122, line: 492, baseType: !1031, size: 64, offset: 64)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2129, file: !2122, line: 496, baseType: !1062, size: 64, offset: 128)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2121, file: !2122, line: 541, baseType: !2135, size: 256)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2122, line: 504, size: 256, elements: !2136)
!2136 = !{!2137, !2138, !2143, !2144}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2135, file: !2122, line: 505, baseType: !2125, size: 32)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2135, file: !2122, line: 509, baseType: !2139, size: 64, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2122, line: 501, baseType: !2140)
!2140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2141, size: 64)
!2141 = !DISubroutineType(types: !2142)
!2142 = !{null, !1403}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2135, file: !2122, line: 510, baseType: !1403, size: 64, offset: 128)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2135, file: !2122, line: 513, baseType: !2119, size: 64, offset: 192)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2121, file: !2122, line: 542, baseType: !2146, size: 128)
!2146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2122, line: 530, size: 128, elements: !2147)
!2147 = !{!2148, !2149}
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2146, file: !2122, line: 531, baseType: !2125, size: 32)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2146, file: !2122, line: 534, baseType: !2150, size: 64, offset: 64)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2122, line: 525, baseType: !2151)
!2151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2152, size: 64)
!2152 = !DISubroutineType(types: !2153)
!2153 = !{!1004, !1062, !1031, !931, !931}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2116, file: !675, line: 211, baseType: !7, size: 32, offset: 64)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2116, file: !675, line: 214, baseType: !972, size: 64, offset: 128)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2116, file: !675, line: 224, baseType: !2157, size: 64, offset: 192)
!2157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2158, size: 64)
!2158 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !675, line: 202, baseType: !2159)
!2159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !675, line: 202, size: 128, elements: !2160)
!2160 = !{!2161}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2159, file: !675, line: 202, baseType: !2162, size: 128)
!2162 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !675, line: 200, baseType: !2163)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !675, line: 200, size: 128, elements: !2164)
!2164 = !{!2165, !2166, !2167}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2163, file: !675, line: 200, baseType: !7, size: 32)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2163, file: !675, line: 200, baseType: !7, size: 32, offset: 32)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2163, file: !675, line: 200, baseType: !1041, size: 64, offset: 64)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2116, file: !675, line: 234, baseType: !2157, size: 64, offset: 256)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2110, file: !675, line: 197, baseType: !972, size: 64, offset: 256)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1021, file: !675, line: 319, baseType: !1122, size: 256)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1021, file: !675, line: 320, baseType: !1141, size: 192)
!2172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2173, size: 64)
!2173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_spilled_reg_stack_slot", file: !2174, line: 542, size: 384, elements: !2175)
!2174 = !DIFile(filename: "./ira-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2175 = !{!2176, !2179, !2180}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "spilled_regs", scope: !2173, file: !2174, line: 545, baseType: !2177, size: 256)
!2177 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset_head", file: !155, line: 34, baseType: !2178)
!2178 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !942, line: 84, baseType: !941)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2173, file: !2174, line: 547, baseType: !1006, size: 64, offset: 256)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !2173, file: !2174, line: 549, baseType: !7, size: 32, offset: 320)
!2181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "equivalence", file: !3, line: 1907, size: 320, elements: !2183)
!2183 = !{!2184, !2185, !2186, !2187, !2188, !2189}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "replacement", scope: !2182, file: !3, line: 1912, baseType: !1006, size: 64)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "src_p", scope: !2182, file: !3, line: 1913, baseType: !1005, size: 64, offset: 64)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "init_insns", scope: !2182, file: !3, line: 1915, baseType: !1006, size: 64, offset: 128)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2182, file: !3, line: 1918, baseType: !926, size: 32, offset: 192)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "is_arg_equivalence", scope: !2182, file: !3, line: 1920, baseType: !926, size: 32, offset: 224)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "replace", scope: !2182, file: !3, line: 1923, baseType: !928, size: 8, offset: 256)
!2190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_live_bb_info", file: !818, line: 843, size: 256, elements: !2192)
!2192 = !{!2193, !2194, !2195, !2196}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "kill", scope: !2191, file: !818, line: 846, baseType: !938, size: 64)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "gen", scope: !2191, file: !818, line: 848, baseType: !938, size: 64, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !2191, file: !818, line: 851, baseType: !938, size: 64, offset: 128)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !2191, file: !818, line: 852, baseType: !938, size: 64, offset: 192)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2199, line: 45, baseType: !2200)
!2199 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2199, line: 39, size: 192, elements: !2202)
!2202 = !{!2203, !2204, !2205, !2206}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2201, file: !2199, line: 41, baseType: !1003, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2201, file: !2199, line: 42, baseType: !7, size: 32, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2201, file: !2199, line: 43, baseType: !7, size: 32, offset: 96)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2201, file: !2199, line: 44, baseType: !2207, size: 64, offset: 128)
!2207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 64, elements: !1042)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!2209 = !{!2210, !2223, !2251, !2253, !2305, !2328, !2330, !2332, !2334, !2336, !2338, !2340, !2342, !2344, !2346, !2348, !2350, !2352, !2354, !2360, !2365, !2369, !2371, !2373, !2377, !2379, !2383, !2386, !2388, !0, !2390, !2392, !2395, !2397, !2399, !2401, !2403, !2406, !2409, !2411, !2413, !2417, !2421, !2423, !2426, !2429, !2431, !2433, !2435, !2437, !2440, !2442, !2444, !2451, !2453, !2455, !2461, !2463, !2465, !2467, !2469, !2471}
!2210 = !DIGlobalVariableExpression(var: !2211, expr: !DIExpression())
!2211 = distinct !DIGlobalVariable(name: "eliminables", scope: !2212, file: !3, line: 1441, type: !2216, isLocal: true, isDefinition: true)
!2212 = distinct !DISubprogram(name: "ira_setup_eliminable_regset", scope: !3, file: !3, line: 1431, type: !2213, scopeLine: 1432, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2213 = !DISubroutineType(types: !2214)
!2214 = !{null}
!2215 = !{}
!2216 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2217, size: 256, elements: !981)
!2217 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2218)
!2218 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2212, file: !3, line: 1441, size: 64, elements: !2219)
!2219 = !{!2220, !2222}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !2218, file: !3, line: 1441, baseType: !2221, size: 32)
!2221 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !926)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2218, file: !3, line: 1441, baseType: !2221, size: 32, offset: 32)
!2223 = !DIGlobalVariableExpression(var: !2224, expr: !DIExpression())
!2224 = distinct !DIGlobalVariable(name: "pass_ira", scope: !2, file: !3, line: 3396, type: !2225, isLocal: false, isDefinition: true)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !428, line: 162, size: 640, elements: !2226)
!2226 = !{!2227}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2225, file: !428, line: 164, baseType: !2228, size: 640)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !428, line: 114, size: 640, elements: !2229)
!2229 = !{!2230, !2231, !2232, !2236, !2240, !2242, !2243, !2244, !2246, !2247, !2248, !2249, !2250}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2228, file: !428, line: 117, baseType: !427, size: 32)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2228, file: !428, line: 121, baseType: !1031, size: 64, offset: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2228, file: !428, line: 125, baseType: !2233, size: 64, offset: 128)
!2233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!2234 = !DISubroutineType(types: !2235)
!2235 = !{!1004}
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2228, file: !428, line: 130, baseType: !2237, size: 64, offset: 192)
!2237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!2238 = !DISubroutineType(types: !2239)
!2239 = !{!7}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2228, file: !428, line: 133, baseType: !2241, size: 64, offset: 256)
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2228, file: !428, line: 136, baseType: !2241, size: 64, offset: 320)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2228, file: !428, line: 139, baseType: !926, size: 32, offset: 384)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2228, file: !428, line: 143, baseType: !2245, size: 32, offset: 416)
!2245 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !435, line: 80, baseType: !434)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2228, file: !428, line: 146, baseType: !7, size: 32, offset: 448)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2228, file: !428, line: 147, baseType: !7, size: 32, offset: 480)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2228, file: !428, line: 148, baseType: !7, size: 32, offset: 512)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2228, file: !428, line: 151, baseType: !7, size: 32, offset: 544)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2228, file: !428, line: 152, baseType: !7, size: 32, offset: 576)
!2251 = !DIGlobalVariableExpression(var: !2252, expr: !DIExpression())
!2252 = distinct !DIGlobalVariable(name: "internal_flag_ira_verbose", scope: !2, file: !3, line: 329, type: !926, isLocal: false, isDefinition: true)
!2253 = !DIGlobalVariableExpression(var: !2254, expr: !DIExpression())
!2254 = distinct !DIGlobalVariable(name: "ira_dump_file", scope: !2, file: !3, line: 332, type: !2255, isLocal: false, isDefinition: true)
!2255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2256, size: 64)
!2256 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2257, line: 7, baseType: !2258)
!2257 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2259, line: 49, size: 1728, elements: !2260)
!2259 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2260 = !{!2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2276, !2278, !2279, !2280, !2283, !2284, !2285, !2286, !2289, !2291, !2294, !2297, !2298, !2299, !2300, !2301}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2258, file: !2259, line: 51, baseType: !926, size: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2258, file: !2259, line: 54, baseType: !927, size: 64, offset: 64)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2258, file: !2259, line: 55, baseType: !927, size: 64, offset: 128)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2258, file: !2259, line: 56, baseType: !927, size: 64, offset: 192)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2258, file: !2259, line: 57, baseType: !927, size: 64, offset: 256)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2258, file: !2259, line: 58, baseType: !927, size: 64, offset: 320)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2258, file: !2259, line: 59, baseType: !927, size: 64, offset: 384)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2258, file: !2259, line: 60, baseType: !927, size: 64, offset: 448)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2258, file: !2259, line: 61, baseType: !927, size: 64, offset: 512)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2258, file: !2259, line: 64, baseType: !927, size: 64, offset: 576)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2258, file: !2259, line: 65, baseType: !927, size: 64, offset: 640)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2258, file: !2259, line: 66, baseType: !927, size: 64, offset: 704)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2258, file: !2259, line: 68, baseType: !2274, size: 64, offset: 768)
!2274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2275, size: 64)
!2275 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2259, line: 36, flags: DIFlagFwdDecl)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2258, file: !2259, line: 70, baseType: !2277, size: 64, offset: 832)
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2258, file: !2259, line: 72, baseType: !926, size: 32, offset: 896)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2258, file: !2259, line: 73, baseType: !926, size: 32, offset: 928)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2258, file: !2259, line: 74, baseType: !2281, size: 64, offset: 960)
!2281 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2282, line: 152, baseType: !972)
!2282 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2258, file: !2259, line: 77, baseType: !923, size: 16, offset: 1024)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2258, file: !2259, line: 78, baseType: !1912, size: 8, offset: 1040)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2258, file: !2259, line: 79, baseType: !1157, size: 8, offset: 1048)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2258, file: !2259, line: 81, baseType: !2287, size: 64, offset: 1088)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2259, line: 43, baseType: null)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2258, file: !2259, line: 89, baseType: !2290, size: 64, offset: 1152)
!2290 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2282, line: 153, baseType: !972)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2258, file: !2259, line: 91, baseType: !2292, size: 64, offset: 1216)
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2293, size: 64)
!2293 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2259, line: 37, flags: DIFlagFwdDecl)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2258, file: !2259, line: 92, baseType: !2295, size: 64, offset: 1280)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!2296 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2259, line: 38, flags: DIFlagFwdDecl)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2258, file: !2259, line: 93, baseType: !2277, size: 64, offset: 1344)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2258, file: !2259, line: 94, baseType: !918, size: 64, offset: 1408)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2258, file: !2259, line: 95, baseType: !1418, size: 64, offset: 1472)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2258, file: !2259, line: 96, baseType: !926, size: 32, offset: 1536)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2258, file: !2259, line: 98, baseType: !2302, size: 160, offset: 1568)
!2302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !928, size: 160, elements: !2303)
!2303 = !{!2304}
!2304 = !DISubrange(count: 20)
!2305 = !DIGlobalVariableExpression(var: !2306, expr: !DIExpression())
!2306 = distinct !DIGlobalVariable(name: "allocno_pool", scope: !2, file: !3, line: 335, type: !2307, isLocal: false, isDefinition: true)
!2307 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2308, line: 58, baseType: !2309)
!2308 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2310, size: 64)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2308, line: 32, size: 704, elements: !2311)
!2311 = !{!2312, !2313, !2314, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2310, file: !2308, line: 34, baseType: !1031, size: 64)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2310, file: !2308, line: 38, baseType: !1418, size: 64, offset: 64)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2310, file: !2308, line: 41, baseType: !2315, size: 64, offset: 128)
!2315 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2308, line: 30, baseType: !2316)
!2316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2317, size: 64)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2308, line: 26, size: 64, elements: !2318)
!2318 = !{!2319}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2317, file: !2308, line: 28, baseType: !2316, size: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2310, file: !2308, line: 45, baseType: !927, size: 64, offset: 192)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2310, file: !2308, line: 49, baseType: !1418, size: 64, offset: 256)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2310, file: !2308, line: 51, baseType: !1418, size: 64, offset: 320)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2310, file: !2308, line: 52, baseType: !1418, size: 64, offset: 384)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2310, file: !2308, line: 53, baseType: !1418, size: 64, offset: 448)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2310, file: !2308, line: 54, baseType: !2315, size: 64, offset: 512)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2310, file: !2308, line: 55, baseType: !1418, size: 64, offset: 576)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2310, file: !2308, line: 56, baseType: !1418, size: 64, offset: 640)
!2328 = !DIGlobalVariableExpression(var: !2329, expr: !DIExpression())
!2329 = distinct !DIGlobalVariable(name: "copy_pool", scope: !2, file: !3, line: 335, type: !2307, isLocal: false, isDefinition: true)
!2330 = !DIGlobalVariableExpression(var: !2331, expr: !DIExpression())
!2331 = distinct !DIGlobalVariable(name: "allocno_live_range_pool", scope: !2, file: !3, line: 335, type: !2307, isLocal: false, isDefinition: true)
!2332 = !DIGlobalVariableExpression(var: !2333, expr: !DIExpression())
!2333 = distinct !DIGlobalVariable(name: "ira_spilled_reg_stack_slots_num", scope: !2, file: !3, line: 338, type: !926, isLocal: false, isDefinition: true)
!2334 = !DIGlobalVariableExpression(var: !2335, expr: !DIExpression())
!2335 = distinct !DIGlobalVariable(name: "ira_spilled_reg_stack_slots", scope: !2, file: !3, line: 342, type: !2172, isLocal: false, isDefinition: true)
!2336 = !DIGlobalVariableExpression(var: !2337, expr: !DIExpression())
!2337 = distinct !DIGlobalVariable(name: "ira_overall_cost", scope: !2, file: !3, line: 348, type: !926, isLocal: false, isDefinition: true)
!2338 = !DIGlobalVariableExpression(var: !2339, expr: !DIExpression())
!2339 = distinct !DIGlobalVariable(name: "ira_reg_cost", scope: !2, file: !3, line: 349, type: !926, isLocal: false, isDefinition: true)
!2340 = !DIGlobalVariableExpression(var: !2341, expr: !DIExpression())
!2341 = distinct !DIGlobalVariable(name: "ira_mem_cost", scope: !2, file: !3, line: 349, type: !926, isLocal: false, isDefinition: true)
!2342 = !DIGlobalVariableExpression(var: !2343, expr: !DIExpression())
!2343 = distinct !DIGlobalVariable(name: "ira_load_cost", scope: !2, file: !3, line: 350, type: !926, isLocal: false, isDefinition: true)
!2344 = !DIGlobalVariableExpression(var: !2345, expr: !DIExpression())
!2345 = distinct !DIGlobalVariable(name: "ira_store_cost", scope: !2, file: !3, line: 350, type: !926, isLocal: false, isDefinition: true)
!2346 = !DIGlobalVariableExpression(var: !2347, expr: !DIExpression())
!2347 = distinct !DIGlobalVariable(name: "ira_shuffle_cost", scope: !2, file: !3, line: 350, type: !926, isLocal: false, isDefinition: true)
!2348 = !DIGlobalVariableExpression(var: !2349, expr: !DIExpression())
!2349 = distinct !DIGlobalVariable(name: "ira_move_loops_num", scope: !2, file: !3, line: 351, type: !926, isLocal: false, isDefinition: true)
!2350 = !DIGlobalVariableExpression(var: !2351, expr: !DIExpression())
!2351 = distinct !DIGlobalVariable(name: "ira_additional_jumps_num", scope: !2, file: !3, line: 351, type: !926, isLocal: false, isDefinition: true)
!2352 = !DIGlobalVariableExpression(var: !2353, expr: !DIExpression())
!2353 = distinct !DIGlobalVariable(name: "eliminable_regset", scope: !2, file: !3, line: 355, type: !929, isLocal: false, isDefinition: true)
!2354 = !DIGlobalVariableExpression(var: !2355, expr: !DIExpression())
!2355 = distinct !DIGlobalVariable(name: "ira_reg_mode_hard_regset", scope: !2, file: !3, line: 359, type: !2356, isLocal: false, isDefinition: true)
!2356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !929, size: 295104, elements: !2357)
!2357 = !{!2358, !2359}
!2358 = !DISubrange(count: 53)
!2359 = !DISubrange(count: 87)
!2360 = !DIGlobalVariableExpression(var: !2361, expr: !DIExpression())
!2361 = distinct !DIGlobalVariable(name: "ira_memory_move_cost", scope: !2, file: !3, line: 363, type: !2362, isLocal: false, isDefinition: true)
!2362 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2363, size: 75168, elements: !2364)
!2363 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2364 = !{!2359, !925, !957}
!2365 = !DIGlobalVariableExpression(var: !2366, expr: !DIExpression())
!2366 = distinct !DIGlobalVariable(name: "ira_register_move_cost", scope: !2, file: !3, line: 364, type: !2367, isLocal: false, isDefinition: true)
!2367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !919, size: 5568, elements: !2368)
!2368 = !{!2359}
!2369 = !DIGlobalVariableExpression(var: !2370, expr: !DIExpression())
!2370 = distinct !DIGlobalVariable(name: "ira_may_move_in_cost", scope: !2, file: !3, line: 370, type: !2367, isLocal: false, isDefinition: true)
!2371 = !DIGlobalVariableExpression(var: !2372, expr: !DIExpression())
!2372 = distinct !DIGlobalVariable(name: "ira_may_move_out_cost", scope: !2, file: !3, line: 376, type: !2367, isLocal: false, isDefinition: true)
!2373 = !DIGlobalVariableExpression(var: !2374, expr: !DIExpression())
!2374 = distinct !DIGlobalVariable(name: "ira_class_subset_p", scope: !2, file: !3, line: 381, type: !2375, isLocal: false, isDefinition: true)
!2375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 23328, elements: !2376)
!2376 = !{!925, !925}
!2377 = !DIGlobalVariableExpression(var: !2378, expr: !DIExpression())
!2378 = distinct !DIGlobalVariable(name: "no_unit_alloc_regs", scope: !2, file: !3, line: 409, type: !929, isLocal: true, isDefinition: true)
!2379 = !DIGlobalVariableExpression(var: !2380, expr: !DIExpression())
!2380 = distinct !DIGlobalVariable(name: "ira_class_hard_regs", scope: !2, file: !3, line: 414, type: !2381, isLocal: false, isDefinition: true)
!2381 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2363, size: 22896, elements: !2382)
!2382 = !{!925, !2358}
!2383 = !DIGlobalVariableExpression(var: !2384, expr: !DIExpression())
!2384 = distinct !DIGlobalVariable(name: "ira_class_hard_regs_num", scope: !2, file: !3, line: 418, type: !2385, isLocal: false, isDefinition: true)
!2385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 864, elements: !924)
!2386 = !DIGlobalVariableExpression(var: !2387, expr: !DIExpression())
!2387 = distinct !DIGlobalVariable(name: "ira_class_hard_reg_index", scope: !2, file: !3, line: 424, type: !2381, isLocal: false, isDefinition: true)
!2388 = !DIGlobalVariableExpression(var: !2389, expr: !DIExpression())
!2389 = distinct !DIGlobalVariable(name: "ira_available_class_regs", scope: !2, file: !3, line: 468, type: !2385, isLocal: false, isDefinition: true)
!2390 = !DIGlobalVariableExpression(var: !2391, expr: !DIExpression())
!2391 = distinct !DIGlobalVariable(name: "ira_reg_class_cover_size", scope: !2, file: !3, line: 707, type: !926, isLocal: false, isDefinition: true)
!2392 = !DIGlobalVariableExpression(var: !2393, expr: !DIExpression())
!2393 = distinct !DIGlobalVariable(name: "ira_reg_class_cover", scope: !2, file: !3, line: 712, type: !2394, isLocal: false, isDefinition: true)
!2394 = !DICompositeType(tag: DW_TAG_array_type, baseType: !397, size: 864, elements: !924)
!2395 = !DIGlobalVariableExpression(var: !2396, expr: !DIExpression())
!2396 = distinct !DIGlobalVariable(name: "ira_important_classes_num", scope: !2, file: !3, line: 715, type: !926, isLocal: false, isDefinition: true)
!2397 = !DIGlobalVariableExpression(var: !2398, expr: !DIExpression())
!2398 = distinct !DIGlobalVariable(name: "ira_important_classes", scope: !2, file: !3, line: 720, type: !2394, isLocal: false, isDefinition: true)
!2399 = !DIGlobalVariableExpression(var: !2400, expr: !DIExpression())
!2400 = distinct !DIGlobalVariable(name: "ira_important_class_nums", scope: !2, file: !3, line: 725, type: !2385, isLocal: false, isDefinition: true)
!2401 = !DIGlobalVariableExpression(var: !2402, expr: !DIExpression())
!2402 = distinct !DIGlobalVariable(name: "ira_class_translate", scope: !2, file: !3, line: 834, type: !2394, isLocal: false, isDefinition: true)
!2403 = !DIGlobalVariableExpression(var: !2404, expr: !DIExpression())
!2404 = distinct !DIGlobalVariable(name: "ira_reg_class_intersect", scope: !2, file: !3, line: 971, type: !2405, isLocal: false, isDefinition: true)
!2405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !397, size: 23328, elements: !2376)
!2406 = !DIGlobalVariableExpression(var: !2407, expr: !DIExpression())
!2407 = distinct !DIGlobalVariable(name: "ira_reg_classes_intersect_p", scope: !2, file: !3, line: 976, type: !2408, isLocal: false, isDefinition: true)
!2408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 5832, elements: !2376)
!2409 = !DIGlobalVariableExpression(var: !2410, expr: !DIExpression())
!2410 = distinct !DIGlobalVariable(name: "ira_reg_class_super_classes", scope: !2, file: !3, line: 982, type: !2405, isLocal: false, isDefinition: true)
!2411 = !DIGlobalVariableExpression(var: !2412, expr: !DIExpression())
!2412 = distinct !DIGlobalVariable(name: "ira_reg_class_union", scope: !2, file: !3, line: 991, type: !2405, isLocal: false, isDefinition: true)
!2413 = !DIGlobalVariableExpression(var: !2414, expr: !DIExpression())
!2414 = distinct !DIGlobalVariable(name: "ira_hard_regno_cover_class", scope: !2, file: !3, line: 1138, type: !2415, isLocal: false, isDefinition: true)
!2415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !397, size: 1696, elements: !2416)
!2416 = !{!2358}
!2417 = !DIGlobalVariableExpression(var: !2418, expr: !DIExpression())
!2418 = distinct !DIGlobalVariable(name: "ira_reg_class_nregs", scope: !2, file: !3, line: 1168, type: !2419, isLocal: false, isDefinition: true)
!2419 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 75168, elements: !2420)
!2420 = !{!925, !2359}
!2421 = !DIGlobalVariableExpression(var: !2422, expr: !DIExpression())
!2422 = distinct !DIGlobalVariable(name: "ira_max_nregs", scope: !2, file: !3, line: 1171, type: !926, isLocal: false, isDefinition: true)
!2423 = !DIGlobalVariableExpression(var: !2424, expr: !DIExpression())
!2424 = distinct !DIGlobalVariable(name: "prohibited_class_mode_regs", scope: !2, file: !3, line: 1195, type: !2425, isLocal: false, isDefinition: true)
!2425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !929, size: 150336, elements: !2420)
!2426 = !DIGlobalVariableExpression(var: !2427, expr: !DIExpression())
!2427 = distinct !DIGlobalVariable(name: "ira_prohibited_mode_move_regs", scope: !2, file: !3, line: 1326, type: !2428, isLocal: false, isDefinition: true)
!2428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !929, size: 5568, elements: !2368)
!2429 = !DIGlobalVariableExpression(var: !2430, expr: !DIExpression())
!2430 = distinct !DIGlobalVariable(name: "ira_no_alloc_regs", scope: !2, file: !3, line: 1372, type: !929, isLocal: false, isDefinition: true)
!2431 = !DIGlobalVariableExpression(var: !2432, expr: !DIExpression())
!2432 = distinct !DIGlobalVariable(name: "ira_reg_equiv_len", scope: !2, file: !3, line: 1516, type: !926, isLocal: false, isDefinition: true)
!2433 = !DIGlobalVariableExpression(var: !2434, expr: !DIExpression())
!2434 = distinct !DIGlobalVariable(name: "ira_reg_equiv_invariant_p", scope: !2, file: !3, line: 1520, type: !1003, isLocal: false, isDefinition: true)
!2435 = !DIGlobalVariableExpression(var: !2436, expr: !DIExpression())
!2436 = distinct !DIGlobalVariable(name: "ira_reg_equiv_const", scope: !2, file: !3, line: 1524, type: !1005, isLocal: false, isDefinition: true)
!2437 = !DIGlobalVariableExpression(var: !2438, expr: !DIExpression())
!2438 = distinct !DIGlobalVariable(name: "reg_renumber", scope: !2, file: !3, line: 1585, type: !2439, isLocal: false, isDefinition: true)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2363, size: 64)
!2440 = !DIGlobalVariableExpression(var: !2441, expr: !DIExpression())
!2441 = distinct !DIGlobalVariable(name: "ira_loops", scope: !2, file: !3, line: 3116, type: !1641, isLocal: false, isDefinition: true)
!2442 = !DIGlobalVariableExpression(var: !2443, expr: !DIExpression())
!2443 = distinct !DIGlobalVariable(name: "ira_conflicts_p", scope: !2, file: !3, line: 3120, type: !1004, isLocal: false, isDefinition: true)
!2444 = !DIGlobalVariableExpression(var: !2445, expr: !DIExpression())
!2445 = distinct !DIGlobalVariable(name: "reg_class_names", scope: !2446, file: !3, line: 1101, type: !2449, isLocal: true, isDefinition: true)
!2446 = distinct !DISubprogram(name: "print_class_cover", scope: !3, file: !3, line: 1099, type: !2447, scopeLine: 1100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2447 = !DISubroutineType(types: !2448)
!2448 = !{null, !2255}
!2449 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2450, size: 1728, elements: !924)
!2450 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1031)
!2451 = !DIGlobalVariableExpression(var: !2452, expr: !DIExpression())
!2452 = distinct !DIGlobalVariable(name: "temp_hard_regset", scope: !2, file: !3, line: 384, type: !929, isLocal: true, isDefinition: true)
!2453 = !DIGlobalVariableExpression(var: !2454, expr: !DIExpression())
!2454 = distinct !DIGlobalVariable(name: "alloc_reg_class_subclasses", scope: !2, file: !3, line: 663, type: !2405, isLocal: true, isDefinition: true)
!2455 = !DIGlobalVariableExpression(var: !2456, expr: !DIExpression())
!2456 = distinct !DIGlobalVariable(name: "classes", scope: !2457, file: !3, line: 735, type: !2458, isLocal: true, isDefinition: true)
!2457 = distinct !DISubprogram(name: "setup_cover_and_important_classes", scope: !3, file: !3, line: 729, type: !2213, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2458 = !DICompositeType(tag: DW_TAG_array_type, baseType: !397, size: 896, elements: !2459)
!2459 = !{!2460}
!2460 = !DISubrange(count: 28)
!2461 = !DIGlobalVariableExpression(var: !2462, expr: !DIExpression())
!2462 = distinct !DIGlobalVariable(name: "cover_class_order", scope: !2, file: !3, line: 925, type: !2385, isLocal: true, isDefinition: true)
!2463 = !DIGlobalVariableExpression(var: !2464, expr: !DIExpression())
!2464 = distinct !DIGlobalVariable(name: "ira_prohibited_mode_move_regs_initialized_p", scope: !2, file: !3, line: 1329, type: !1004, isLocal: true, isDefinition: true)
!2465 = !DIGlobalVariableExpression(var: !2466, expr: !DIExpression())
!2466 = distinct !DIGlobalVariable(name: "recorded_label_ref", scope: !2, file: !3, line: 2307, type: !926, isLocal: true, isDefinition: true)
!2467 = !DIGlobalVariableExpression(var: !2468, expr: !DIExpression())
!2468 = distinct !DIGlobalVariable(name: "reg_equiv", scope: !2, file: !3, line: 1928, type: !2181, isLocal: true, isDefinition: true)
!2469 = !DIGlobalVariableExpression(var: !2470, expr: !DIExpression())
!2470 = distinct !DIGlobalVariable(name: "equiv_mem", scope: !2, file: !3, line: 1932, type: !1006, isLocal: true, isDefinition: true)
!2471 = !DIGlobalVariableExpression(var: !2472, expr: !DIExpression())
!2472 = distinct !DIGlobalVariable(name: "equiv_mem_modified", scope: !2, file: !3, line: 1935, type: !926, isLocal: true, isDefinition: true)
!2473 = !{i32 7, !"Dwarf Version", i32 4}
!2474 = !{i32 2, !"Debug Info Version", i32 3}
!2475 = !{i32 1, !"wchar_size", i32 4}
!2476 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2477 = distinct !DISubprogram(name: "ira_allocate", scope: !3, file: !3, line: 564, type: !2478, scopeLine: 565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2478 = !DISubroutineType(types: !2479)
!2479 = !{!918, !1418}
!2480 = !DILocalVariable(name: "len", arg: 1, scope: !2477, file: !3, line: 564, type: !1418)
!2481 = !DILocation(line: 564, column: 22, scope: !2477)
!2482 = !DILocalVariable(name: "res", scope: !2477, file: !3, line: 566, type: !918)
!2483 = !DILocation(line: 566, column: 9, scope: !2477)
!2484 = !DILocation(line: 571, column: 18, scope: !2477)
!2485 = !DILocation(line: 571, column: 9, scope: !2477)
!2486 = !DILocation(line: 571, column: 7, scope: !2477)
!2487 = !DILocation(line: 573, column: 10, scope: !2477)
!2488 = !DILocation(line: 573, column: 3, scope: !2477)
!2489 = distinct !DISubprogram(name: "ira_reallocate", scope: !3, file: !3, line: 578, type: !2490, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2490 = !DISubroutineType(types: !2491)
!2491 = !{!918, !918, !1418}
!2492 = !DILocalVariable(name: "ptr", arg: 1, scope: !2489, file: !3, line: 578, type: !918)
!2493 = !DILocation(line: 578, column: 23, scope: !2489)
!2494 = !DILocalVariable(name: "len", arg: 2, scope: !2489, file: !3, line: 578, type: !1418)
!2495 = !DILocation(line: 578, column: 35, scope: !2489)
!2496 = !DILocalVariable(name: "res", scope: !2489, file: !3, line: 580, type: !918)
!2497 = !DILocation(line: 580, column: 9, scope: !2489)
!2498 = !DILocation(line: 585, column: 19, scope: !2489)
!2499 = !DILocation(line: 585, column: 24, scope: !2489)
!2500 = !DILocation(line: 585, column: 9, scope: !2489)
!2501 = !DILocation(line: 585, column: 7, scope: !2489)
!2502 = !DILocation(line: 587, column: 10, scope: !2489)
!2503 = !DILocation(line: 587, column: 3, scope: !2489)
!2504 = distinct !DISubprogram(name: "ira_free", scope: !3, file: !3, line: 592, type: !1413, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2505 = !DILocalVariable(name: "addr", arg: 1, scope: !2504, file: !3, line: 592, type: !918)
!2506 = !DILocation(line: 592, column: 17, scope: !2504)
!2507 = !DILocation(line: 597, column: 9, scope: !2504)
!2508 = !DILocation(line: 597, column: 3, scope: !2504)
!2509 = !DILocation(line: 599, column: 1, scope: !2504)
!2510 = distinct !DISubprogram(name: "ira_allocate_bitmap", scope: !3, file: !3, line: 604, type: !2511, scopeLine: 605, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{!938}
!2513 = !DILocation(line: 606, column: 10, scope: !2510)
!2514 = !DILocation(line: 606, column: 3, scope: !2510)
!2515 = distinct !DISubprogram(name: "ira_free_bitmap", scope: !3, file: !3, line: 611, type: !2516, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2516 = !DISubroutineType(types: !2517)
!2517 = !{null, !938}
!2518 = !DILocalVariable(name: "b", arg: 1, scope: !2515, file: !3, line: 611, type: !938)
!2519 = !DILocation(line: 611, column: 25, scope: !2515)
!2520 = !DILocation(line: 614, column: 1, scope: !2515)
!2521 = distinct !DISubprogram(name: "ira_print_disposition", scope: !3, file: !3, line: 621, type: !2447, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2522 = !DILocalVariable(name: "f", arg: 1, scope: !2521, file: !3, line: 621, type: !2255)
!2523 = !DILocation(line: 621, column: 30, scope: !2521)
!2524 = !DILocalVariable(name: "i", scope: !2521, file: !3, line: 623, type: !926)
!2525 = !DILocation(line: 623, column: 7, scope: !2521)
!2526 = !DILocalVariable(name: "n", scope: !2521, file: !3, line: 623, type: !926)
!2527 = !DILocation(line: 623, column: 10, scope: !2521)
!2528 = !DILocalVariable(name: "max_regno", scope: !2521, file: !3, line: 623, type: !926)
!2529 = !DILocation(line: 623, column: 13, scope: !2521)
!2530 = !DILocalVariable(name: "a", scope: !2521, file: !3, line: 624, type: !2531)
!2531 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_t", file: !2174, line: 63, baseType: !2532)
!2532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2533, size: 64)
!2533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno", file: !2174, line: 232, size: 1984, elements: !2534)
!2534 = !{!2535, !2536, !2537, !2538, !2539, !2540, !2541, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2587, !2588, !2589, !2590, !2591, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633}
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2533, file: !2174, line: 237, baseType: !926, size: 32)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !2533, file: !2174, line: 239, baseType: !926, size: 32, offset: 32)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2533, file: !2174, line: 242, baseType: !5, size: 32, offset: 64)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "hard_regno", scope: !2533, file: !2174, line: 249, baseType: !926, size: 32, offset: 96)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2533, file: !2174, line: 251, baseType: !1006, size: 64, offset: 128)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_allocno", scope: !2533, file: !2174, line: 255, baseType: !2531, size: 64, offset: 192)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !2533, file: !2174, line: 260, baseType: !2542, size: 64, offset: 256)
!2542 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_loop_tree_node_t", file: !2174, line: 73, baseType: !2543)
!2543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2544, size: 64)
!2544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_loop_tree_node", file: !2174, line: 83, size: 1728, elements: !2545)
!2545 = !{!2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2557, !2558, !2559, !2560, !2561, !2562}
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2544, file: !2174, line: 86, baseType: !1480, size: 64)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !2544, file: !2174, line: 87, baseType: !1522, size: 64, offset: 64)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "subloop_next", scope: !2544, file: !2174, line: 90, baseType: !2542, size: 64, offset: 128)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2544, file: !2174, line: 90, baseType: !2542, size: 64, offset: 192)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "subloops", scope: !2544, file: !2174, line: 93, baseType: !2542, size: 64, offset: 256)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !2544, file: !2174, line: 93, baseType: !2542, size: 64, offset: 320)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !2544, file: !2174, line: 95, baseType: !2542, size: 64, offset: 384)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !2544, file: !2174, line: 98, baseType: !926, size: 32, offset: 448)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "to_remove_p", scope: !2544, file: !2174, line: 105, baseType: !1004, size: 8, offset: 480)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "regno_allocno_map", scope: !2544, file: !2174, line: 114, baseType: !2556, size: 64, offset: 512)
!2556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2531, size: 64)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "entered_from_non_parent_p", scope: !2544, file: !2174, line: 119, baseType: !1004, size: 8, offset: 576)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !2544, file: !2174, line: 123, baseType: !2385, size: 864, offset: 608)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "all_allocnos", scope: !2544, file: !2174, line: 127, baseType: !938, size: 64, offset: 1472)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "border_allocnos", scope: !2544, file: !2174, line: 130, baseType: !938, size: 64, offset: 1536)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "modified_regnos", scope: !2544, file: !2174, line: 134, baseType: !938, size: 64, offset: 1600)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "local_copies", scope: !2544, file: !2174, line: 137, baseType: !938, size: 64, offset: 1664)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "nrefs", scope: !2533, file: !2174, line: 266, baseType: !926, size: 32, offset: 320)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !2533, file: !2174, line: 268, baseType: !926, size: 32, offset: 352)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class", scope: !2533, file: !2174, line: 271, baseType: !397, size: 32, offset: 384)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class_cost", scope: !2533, file: !2174, line: 274, baseType: !926, size: 32, offset: 416)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "updated_cover_class_cost", scope: !2533, file: !2174, line: 274, baseType: !926, size: 32, offset: 448)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "memory_cost", scope: !2533, file: !2174, line: 282, baseType: !926, size: 32, offset: 480)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "updated_memory_cost", scope: !2533, file: !2174, line: 282, baseType: !926, size: 32, offset: 512)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "excess_pressure_points_num", scope: !2533, file: !2174, line: 288, baseType: !926, size: 32, offset: 544)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "allocno_copies", scope: !2533, file: !2174, line: 292, baseType: !2572, size: 64, offset: 576)
!2572 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_copy_t", file: !2174, line: 64, baseType: !2573)
!2573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2574, size: 64)
!2574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_copy", file: !2174, line: 506, size: 640, elements: !2575)
!2575 = !{!2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586}
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2574, file: !2174, line: 509, baseType: !926, size: 32)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2574, file: !2174, line: 512, baseType: !2531, size: 64, offset: 64)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "second", scope: !2574, file: !2174, line: 512, baseType: !2531, size: 64, offset: 128)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !2574, file: !2174, line: 514, baseType: !926, size: 32, offset: 192)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "constraint_p", scope: !2574, file: !2174, line: 515, baseType: !1004, size: 8, offset: 224)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2574, file: !2174, line: 521, baseType: !1006, size: 64, offset: 256)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "prev_first_allocno_copy", scope: !2574, file: !2174, line: 524, baseType: !2572, size: 64, offset: 320)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "next_first_allocno_copy", scope: !2574, file: !2174, line: 524, baseType: !2572, size: 64, offset: 384)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "prev_second_allocno_copy", scope: !2574, file: !2174, line: 527, baseType: !2572, size: 64, offset: 448)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "next_second_allocno_copy", scope: !2574, file: !2174, line: 527, baseType: !2572, size: 64, offset: 512)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !2574, file: !2174, line: 529, baseType: !2542, size: 64, offset: 576)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !2533, file: !2174, line: 295, baseType: !2531, size: 64, offset: 640)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "cap_member", scope: !2533, file: !2174, line: 298, baseType: !2531, size: 64, offset: 704)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "first_coalesced_allocno", scope: !2533, file: !2174, line: 302, baseType: !2531, size: 64, offset: 768)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "next_coalesced_allocno", scope: !2533, file: !2174, line: 303, baseType: !2531, size: 64, offset: 832)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "live_ranges", scope: !2533, file: !2174, line: 308, baseType: !2592, size: 64, offset: 896)
!2592 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocno_live_range_t", file: !2174, line: 62, baseType: !2593)
!2593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2594, size: 64)
!2594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_live_range", file: !2174, line: 199, size: 320, elements: !2595)
!2595 = !{!2596, !2597, !2598, !2599, !2600, !2601}
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "allocno", scope: !2594, file: !2174, line: 202, baseType: !2531, size: 64)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2594, file: !2174, line: 204, baseType: !926, size: 32, offset: 64)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "finish", scope: !2594, file: !2174, line: 204, baseType: !926, size: 32, offset: 96)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2594, file: !2174, line: 207, baseType: !2592, size: 64, offset: 128)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "start_next", scope: !2594, file: !2174, line: 209, baseType: !2592, size: 64, offset: 192)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "finish_next", scope: !2594, file: !2174, line: 209, baseType: !2592, size: 64, offset: 256)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !2533, file: !2174, line: 314, baseType: !926, size: 32, offset: 960)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !2533, file: !2174, line: 314, baseType: !926, size: 32, offset: 992)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array", scope: !2533, file: !2174, line: 319, baseType: !918, size: 64, offset: 1024)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_id", scope: !2533, file: !2174, line: 322, baseType: !926, size: 32, offset: 1088)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array_size", scope: !2533, file: !2174, line: 324, baseType: !7, size: 32, offset: 1120)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_regs", scope: !2533, file: !2174, line: 329, baseType: !929, size: 64, offset: 1152)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "total_conflict_hard_regs", scope: !2533, file: !2174, line: 329, baseType: !929, size: 64, offset: 1216)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocnos_num", scope: !2533, file: !2174, line: 332, baseType: !926, size: 32, offset: 1280)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "call_freq", scope: !2533, file: !2174, line: 335, baseType: !926, size: 32, offset: 1312)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "calls_crossed_num", scope: !2533, file: !2174, line: 337, baseType: !926, size: 32, offset: 1344)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest_p", scope: !2533, file: !2174, line: 342, baseType: !7, size: 1, offset: 1376, flags: DIFlagBitField, extraData: i64 1376)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "somewhere_renamed_p", scope: !2533, file: !2174, line: 346, baseType: !7, size: 1, offset: 1377, flags: DIFlagBitField, extraData: i64 1376)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "child_renamed_p", scope: !2533, file: !2174, line: 349, baseType: !7, size: 1, offset: 1378, flags: DIFlagBitField, extraData: i64 1376)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "dont_reassign_p", scope: !2533, file: !2174, line: 354, baseType: !7, size: 1, offset: 1379, flags: DIFlagBitField, extraData: i64 1376)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "no_stack_reg_p", scope: !2533, file: !2174, line: 359, baseType: !7, size: 1, offset: 1380, flags: DIFlagBitField, extraData: i64 1376)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "total_no_stack_reg_p", scope: !2533, file: !2174, line: 359, baseType: !7, size: 1, offset: 1381, flags: DIFlagBitField, extraData: i64 1376)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "bad_spill_p", scope: !2533, file: !2174, line: 364, baseType: !7, size: 1, offset: 1382, flags: DIFlagBitField, extraData: i64 1376)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "in_graph_p", scope: !2533, file: !2174, line: 367, baseType: !7, size: 1, offset: 1383, flags: DIFlagBitField, extraData: i64 1376)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "assigned_p", scope: !2533, file: !2174, line: 370, baseType: !7, size: 1, offset: 1384, flags: DIFlagBitField, extraData: i64 1376)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_spilled_p", scope: !2533, file: !2174, line: 373, baseType: !7, size: 1, offset: 1385, flags: DIFlagBitField, extraData: i64 1376)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "splay_removed_p", scope: !2533, file: !2174, line: 376, baseType: !7, size: 1, offset: 1386, flags: DIFlagBitField, extraData: i64 1376)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_vec_p", scope: !2533, file: !2174, line: 381, baseType: !7, size: 1, offset: 1387, flags: DIFlagBitField, extraData: i64 1376)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest", scope: !2533, file: !2174, line: 385, baseType: !2531, size: 64, offset: 1408)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "hard_reg_costs", scope: !2533, file: !2174, line: 400, baseType: !2208, size: 64, offset: 1472)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "updated_hard_reg_costs", scope: !2533, file: !2174, line: 400, baseType: !2208, size: 64, offset: 1536)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_reg_costs", scope: !2533, file: !2174, line: 407, baseType: !2208, size: 64, offset: 1600)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "updated_conflict_hard_reg_costs", scope: !2533, file: !2174, line: 407, baseType: !2208, size: 64, offset: 1664)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "left_conflicts_size", scope: !2533, file: !2174, line: 411, baseType: !926, size: 32, offset: 1728)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "available_regs_num", scope: !2533, file: !2174, line: 414, baseType: !926, size: 32, offset: 1760)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "next_bucket_allocno", scope: !2533, file: !2174, line: 417, baseType: !2531, size: 64, offset: 1792)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bucket_allocno", scope: !2533, file: !2174, line: 418, baseType: !2531, size: 64, offset: 1856)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2533, file: !2174, line: 420, baseType: !926, size: 32, offset: 1920)
!2634 = !DILocation(line: 624, column: 17, scope: !2521)
!2635 = !DILocalVariable(name: "bb", scope: !2521, file: !3, line: 625, type: !1480)
!2636 = !DILocation(line: 625, column: 15, scope: !2521)
!2637 = !DILocation(line: 627, column: 12, scope: !2521)
!2638 = !DILocation(line: 627, column: 3, scope: !2521)
!2639 = !DILocation(line: 628, column: 15, scope: !2521)
!2640 = !DILocation(line: 628, column: 13, scope: !2521)
!2641 = !DILocation(line: 629, column: 10, scope: !2642)
!2642 = distinct !DILexicalBlock(scope: !2521, file: !3, line: 629, column: 3)
!2643 = !DILocation(line: 629, column: 17, scope: !2642)
!2644 = !DILocation(line: 629, column: 8, scope: !2642)
!2645 = !DILocation(line: 629, column: 42, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2642, file: !3, line: 629, column: 3)
!2647 = !DILocation(line: 629, column: 46, scope: !2646)
!2648 = !DILocation(line: 629, column: 44, scope: !2646)
!2649 = !DILocation(line: 629, column: 3, scope: !2642)
!2650 = !DILocation(line: 630, column: 14, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 630, column: 5)
!2652 = !DILocation(line: 630, column: 36, scope: !2651)
!2653 = !DILocation(line: 630, column: 12, scope: !2651)
!2654 = !DILocation(line: 630, column: 10, scope: !2651)
!2655 = !DILocation(line: 631, column: 3, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2651, file: !3, line: 630, column: 5)
!2657 = !DILocation(line: 631, column: 5, scope: !2656)
!2658 = !DILocation(line: 630, column: 5, scope: !2651)
!2659 = !DILocation(line: 634, column: 6, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 634, column: 6)
!2661 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 633, column: 7)
!2662 = !DILocation(line: 634, column: 8, scope: !2660)
!2663 = !DILocation(line: 634, column: 12, scope: !2660)
!2664 = !DILocation(line: 634, column: 6, scope: !2661)
!2665 = !DILocation(line: 635, column: 13, scope: !2660)
!2666 = !DILocation(line: 635, column: 4, scope: !2660)
!2667 = !DILocation(line: 636, column: 3, scope: !2661)
!2668 = !DILocation(line: 637, column: 11, scope: !2661)
!2669 = !DILocation(line: 637, column: 28, scope: !2661)
!2670 = !DILocation(line: 637, column: 45, scope: !2661)
!2671 = !DILocation(line: 637, column: 2, scope: !2661)
!2672 = !DILocation(line: 638, column: 12, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 638, column: 6)
!2674 = !DILocation(line: 638, column: 40, scope: !2673)
!2675 = !DILocation(line: 638, column: 10, scope: !2673)
!2676 = !DILocation(line: 638, column: 44, scope: !2673)
!2677 = !DILocation(line: 638, column: 6, scope: !2661)
!2678 = !DILocation(line: 639, column: 13, scope: !2673)
!2679 = !DILocation(line: 639, column: 25, scope: !2673)
!2680 = !DILocation(line: 639, column: 29, scope: !2673)
!2681 = !DILocation(line: 639, column: 4, scope: !2673)
!2682 = !DILocation(line: 641, column: 13, scope: !2673)
!2683 = !DILocation(line: 641, column: 25, scope: !2673)
!2684 = !DILocation(line: 641, column: 53, scope: !2673)
!2685 = !DILocation(line: 641, column: 59, scope: !2673)
!2686 = !DILocation(line: 641, column: 4, scope: !2673)
!2687 = !DILocation(line: 642, column: 6, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !2661, file: !3, line: 642, column: 6)
!2689 = !DILocation(line: 642, column: 29, scope: !2688)
!2690 = !DILocation(line: 642, column: 6, scope: !2661)
!2691 = !DILocation(line: 643, column: 13, scope: !2688)
!2692 = !DILocation(line: 643, column: 24, scope: !2688)
!2693 = !DILocation(line: 643, column: 4, scope: !2688)
!2694 = !DILocation(line: 645, column: 13, scope: !2688)
!2695 = !DILocation(line: 645, column: 4, scope: !2688)
!2696 = !DILocation(line: 646, column: 7, scope: !2661)
!2697 = !DILocation(line: 632, column: 7, scope: !2656)
!2698 = !DILocation(line: 632, column: 5, scope: !2656)
!2699 = !DILocation(line: 630, column: 5, scope: !2656)
!2700 = distinct !{!2700, !2658, !2701}
!2701 = !DILocation(line: 646, column: 7, scope: !2651)
!2702 = !DILocation(line: 629, column: 58, scope: !2646)
!2703 = !DILocation(line: 629, column: 3, scope: !2646)
!2704 = distinct !{!2704, !2649, !2705}
!2705 = !DILocation(line: 646, column: 7, scope: !2642)
!2706 = !DILocation(line: 647, column: 12, scope: !2521)
!2707 = !DILocation(line: 647, column: 3, scope: !2521)
!2708 = !DILocation(line: 648, column: 1, scope: !2521)
!2709 = distinct !DISubprogram(name: "ira_debug_disposition", scope: !3, file: !3, line: 653, type: !2213, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2710 = !DILocation(line: 655, column: 26, scope: !2709)
!2711 = !DILocation(line: 655, column: 3, scope: !2709)
!2712 = !DILocation(line: 656, column: 1, scope: !2709)
!2713 = distinct !DISubprogram(name: "ira_debug_class_cover", scope: !3, file: !3, line: 1116, type: !2213, scopeLine: 1117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2714 = !DILocation(line: 1118, column: 22, scope: !2713)
!2715 = !DILocation(line: 1118, column: 3, scope: !2713)
!2716 = !DILocation(line: 1119, column: 1, scope: !2713)
!2717 = !DILocalVariable(name: "f", arg: 1, scope: !2446, file: !3, line: 1099, type: !2255)
!2718 = !DILocation(line: 1099, column: 26, scope: !2446)
!2719 = !DILocalVariable(name: "i", scope: !2446, file: !3, line: 1102, type: !926)
!2720 = !DILocation(line: 1102, column: 7, scope: !2446)
!2721 = !DILocation(line: 1104, column: 12, scope: !2446)
!2722 = !DILocation(line: 1104, column: 3, scope: !2446)
!2723 = !DILocation(line: 1105, column: 10, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1105, column: 3)
!2725 = !DILocation(line: 1105, column: 8, scope: !2724)
!2726 = !DILocation(line: 1105, column: 15, scope: !2727)
!2727 = distinct !DILexicalBlock(scope: !2724, file: !3, line: 1105, column: 3)
!2728 = !DILocation(line: 1105, column: 19, scope: !2727)
!2729 = !DILocation(line: 1105, column: 17, scope: !2727)
!2730 = !DILocation(line: 1105, column: 3, scope: !2724)
!2731 = !DILocation(line: 1106, column: 14, scope: !2727)
!2732 = !DILocation(line: 1106, column: 60, scope: !2727)
!2733 = !DILocation(line: 1106, column: 40, scope: !2727)
!2734 = !DILocation(line: 1106, column: 24, scope: !2727)
!2735 = !DILocation(line: 1106, column: 5, scope: !2727)
!2736 = !DILocation(line: 1105, column: 46, scope: !2727)
!2737 = !DILocation(line: 1105, column: 3, scope: !2727)
!2738 = distinct !{!2738, !2730, !2739}
!2739 = !DILocation(line: 1106, column: 63, scope: !2724)
!2740 = !DILocation(line: 1107, column: 12, scope: !2446)
!2741 = !DILocation(line: 1107, column: 3, scope: !2446)
!2742 = !DILocation(line: 1108, column: 10, scope: !2743)
!2743 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1108, column: 3)
!2744 = !DILocation(line: 1108, column: 8, scope: !2743)
!2745 = !DILocation(line: 1108, column: 15, scope: !2746)
!2746 = distinct !DILexicalBlock(scope: !2743, file: !3, line: 1108, column: 3)
!2747 = !DILocation(line: 1108, column: 17, scope: !2746)
!2748 = !DILocation(line: 1108, column: 3, scope: !2743)
!2749 = !DILocation(line: 1109, column: 14, scope: !2746)
!2750 = !DILocation(line: 1109, column: 48, scope: !2746)
!2751 = !DILocation(line: 1109, column: 32, scope: !2746)
!2752 = !DILocation(line: 1110, column: 43, scope: !2746)
!2753 = !DILocation(line: 1110, column: 23, scope: !2746)
!2754 = !DILocation(line: 1110, column: 7, scope: !2746)
!2755 = !DILocation(line: 1109, column: 5, scope: !2746)
!2756 = !DILocation(line: 1108, column: 35, scope: !2746)
!2757 = !DILocation(line: 1108, column: 3, scope: !2746)
!2758 = distinct !{!2758, !2748, !2759}
!2759 = !DILocation(line: 1110, column: 46, scope: !2743)
!2760 = !DILocation(line: 1111, column: 1, scope: !2446)
!2761 = distinct !DISubprogram(name: "ira_init_register_move_cost", scope: !3, file: !3, line: 1227, type: !2762, scopeLine: 1228, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2762 = !DISubroutineType(types: !2763)
!2763 = !{null, !5}
!2764 = !DILocalVariable(name: "mode", arg: 1, scope: !2761, file: !3, line: 1227, type: !5)
!2765 = !DILocation(line: 1227, column: 48, scope: !2761)
!2766 = !DILocalVariable(name: "cl1", scope: !2761, file: !3, line: 1229, type: !926)
!2767 = !DILocation(line: 1229, column: 7, scope: !2761)
!2768 = !DILocalVariable(name: "cl2", scope: !2761, file: !3, line: 1229, type: !926)
!2769 = !DILocation(line: 1229, column: 12, scope: !2761)
!2770 = !DILocation(line: 1234, column: 17, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 1234, column: 7)
!2772 = !DILocation(line: 1234, column: 7, scope: !2771)
!2773 = !DILocation(line: 1234, column: 23, scope: !2771)
!2774 = !DILocation(line: 1234, column: 7, scope: !2761)
!2775 = !DILocation(line: 1235, column: 21, scope: !2771)
!2776 = !DILocation(line: 1235, column: 5, scope: !2771)
!2777 = !DILocation(line: 1236, column: 44, scope: !2761)
!2778 = !DILocation(line: 1236, column: 34, scope: !2761)
!2779 = !DILocation(line: 1236, column: 26, scope: !2761)
!2780 = !DILocation(line: 1236, column: 3, scope: !2761)
!2781 = !DILocation(line: 1236, column: 32, scope: !2761)
!2782 = !DILocation(line: 1240, column: 22, scope: !2761)
!2783 = !DILocation(line: 1240, column: 7, scope: !2761)
!2784 = !DILocation(line: 1239, column: 24, scope: !2761)
!2785 = !DILocation(line: 1239, column: 3, scope: !2761)
!2786 = !DILocation(line: 1240, column: 5, scope: !2761)
!2787 = !DILocation(line: 1241, column: 32, scope: !2761)
!2788 = !DILocation(line: 1241, column: 11, scope: !2761)
!2789 = !DILocation(line: 1241, column: 3, scope: !2761)
!2790 = !DILocation(line: 1241, column: 56, scope: !2761)
!2791 = !DILocation(line: 1241, column: 39, scope: !2761)
!2792 = !DILocation(line: 1244, column: 22, scope: !2761)
!2793 = !DILocation(line: 1244, column: 7, scope: !2761)
!2794 = !DILocation(line: 1243, column: 25, scope: !2761)
!2795 = !DILocation(line: 1243, column: 3, scope: !2761)
!2796 = !DILocation(line: 1244, column: 5, scope: !2761)
!2797 = !DILocation(line: 1245, column: 33, scope: !2761)
!2798 = !DILocation(line: 1245, column: 11, scope: !2761)
!2799 = !DILocation(line: 1245, column: 3, scope: !2761)
!2800 = !DILocation(line: 1245, column: 58, scope: !2761)
!2801 = !DILocation(line: 1245, column: 40, scope: !2761)
!2802 = !DILocation(line: 1247, column: 12, scope: !2803)
!2803 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 1247, column: 3)
!2804 = !DILocation(line: 1247, column: 8, scope: !2803)
!2805 = !DILocation(line: 1247, column: 17, scope: !2806)
!2806 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 1247, column: 3)
!2807 = !DILocation(line: 1247, column: 21, scope: !2806)
!2808 = !DILocation(line: 1247, column: 3, scope: !2803)
!2809 = !DILocation(line: 1249, column: 16, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 1249, column: 7)
!2811 = distinct !DILexicalBlock(scope: !2806, file: !3, line: 1248, column: 5)
!2812 = !DILocation(line: 1249, column: 12, scope: !2810)
!2813 = !DILocation(line: 1249, column: 21, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2810, file: !3, line: 1249, column: 7)
!2815 = !DILocation(line: 1249, column: 25, scope: !2814)
!2816 = !DILocation(line: 1249, column: 7, scope: !2810)
!2817 = !DILocation(line: 1251, column: 27, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 1251, column: 8)
!2819 = distinct !DILexicalBlock(scope: !2814, file: !3, line: 1250, column: 2)
!2820 = !DILocation(line: 1251, column: 8, scope: !2818)
!2821 = !DILocation(line: 1251, column: 32, scope: !2818)
!2822 = !DILocation(line: 1251, column: 8, scope: !2819)
!2823 = !DILocation(line: 1252, column: 27, scope: !2818)
!2824 = !DILocation(line: 1252, column: 6, scope: !2818)
!2825 = !DILocation(line: 1252, column: 33, scope: !2818)
!2826 = !DILocation(line: 1252, column: 38, scope: !2818)
!2827 = !DILocation(line: 1252, column: 43, scope: !2818)
!2828 = !DILocation(line: 1253, column: 27, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 1253, column: 8)
!2830 = !DILocation(line: 1253, column: 8, scope: !2829)
!2831 = !DILocation(line: 1253, column: 32, scope: !2829)
!2832 = !DILocation(line: 1253, column: 8, scope: !2819)
!2833 = !DILocation(line: 1254, column: 28, scope: !2829)
!2834 = !DILocation(line: 1254, column: 6, scope: !2829)
!2835 = !DILocation(line: 1254, column: 34, scope: !2829)
!2836 = !DILocation(line: 1254, column: 39, scope: !2829)
!2837 = !DILocation(line: 1254, column: 44, scope: !2829)
!2838 = !DILocation(line: 1255, column: 2, scope: !2819)
!2839 = !DILocation(line: 1249, column: 45, scope: !2814)
!2840 = !DILocation(line: 1249, column: 7, scope: !2814)
!2841 = distinct !{!2841, !2816, !2842}
!2842 = !DILocation(line: 1255, column: 2, scope: !2810)
!2843 = !DILocation(line: 1256, column: 5, scope: !2811)
!2844 = !DILocation(line: 1247, column: 41, scope: !2806)
!2845 = !DILocation(line: 1247, column: 3, scope: !2806)
!2846 = distinct !{!2846, !2808, !2847}
!2847 = !DILocation(line: 1256, column: 5, scope: !2803)
!2848 = !DILocation(line: 1257, column: 1, scope: !2761)
!2849 = distinct !DISubprogram(name: "ira_init_once", scope: !3, file: !3, line: 1265, type: !2213, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2850 = !DILocalVariable(name: "mode", scope: !2849, file: !3, line: 1267, type: !926)
!2851 = !DILocation(line: 1267, column: 7, scope: !2849)
!2852 = !DILocation(line: 1269, column: 13, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2849, file: !3, line: 1269, column: 3)
!2854 = !DILocation(line: 1269, column: 8, scope: !2853)
!2855 = !DILocation(line: 1269, column: 18, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2853, file: !3, line: 1269, column: 3)
!2857 = !DILocation(line: 1269, column: 23, scope: !2856)
!2858 = !DILocation(line: 1269, column: 3, scope: !2853)
!2859 = !DILocation(line: 1271, column: 30, scope: !2860)
!2860 = distinct !DILexicalBlock(scope: !2856, file: !3, line: 1270, column: 5)
!2861 = !DILocation(line: 1271, column: 7, scope: !2860)
!2862 = !DILocation(line: 1271, column: 36, scope: !2860)
!2863 = !DILocation(line: 1272, column: 28, scope: !2860)
!2864 = !DILocation(line: 1272, column: 7, scope: !2860)
!2865 = !DILocation(line: 1272, column: 34, scope: !2860)
!2866 = !DILocation(line: 1273, column: 29, scope: !2860)
!2867 = !DILocation(line: 1273, column: 7, scope: !2860)
!2868 = !DILocation(line: 1273, column: 35, scope: !2860)
!2869 = !DILocation(line: 1274, column: 5, scope: !2860)
!2870 = !DILocation(line: 1269, column: 47, scope: !2856)
!2871 = !DILocation(line: 1269, column: 3, scope: !2856)
!2872 = distinct !{!2872, !2858, !2873}
!2873 = !DILocation(line: 1274, column: 5, scope: !2853)
!2874 = !DILocation(line: 1275, column: 3, scope: !2849)
!2875 = !DILocation(line: 1276, column: 1, scope: !2849)
!2876 = distinct !DISubprogram(name: "ira_init", scope: !3, file: !3, line: 1300, type: !2213, scopeLine: 1301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2877 = !DILocation(line: 1302, column: 3, scope: !2876)
!2878 = !DILocation(line: 1303, column: 3, scope: !2876)
!2879 = !DILocation(line: 1304, column: 21, scope: !2876)
!2880 = !DILocation(line: 1304, column: 45, scope: !2876)
!2881 = !DILocation(line: 1304, column: 3, scope: !2876)
!2882 = !DILocation(line: 1305, column: 3, scope: !2876)
!2883 = !DILocation(line: 1306, column: 3, scope: !2876)
!2884 = !DILocation(line: 1307, column: 3, scope: !2876)
!2885 = !DILocation(line: 1308, column: 3, scope: !2876)
!2886 = !DILocation(line: 1309, column: 3, scope: !2876)
!2887 = !DILocation(line: 1310, column: 3, scope: !2876)
!2888 = !DILocation(line: 1311, column: 1, scope: !2876)
!2889 = distinct !DISubprogram(name: "free_register_move_costs", scope: !3, file: !3, line: 1281, type: !2213, scopeLine: 1282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2890 = !DILocalVariable(name: "mode", scope: !2889, file: !3, line: 1283, type: !926)
!2891 = !DILocation(line: 1283, column: 7, scope: !2889)
!2892 = !DILocation(line: 1285, column: 13, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2889, file: !3, line: 1285, column: 3)
!2894 = !DILocation(line: 1285, column: 8, scope: !2893)
!2895 = !DILocation(line: 1285, column: 18, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2893, file: !3, line: 1285, column: 3)
!2897 = !DILocation(line: 1285, column: 23, scope: !2896)
!2898 = !DILocation(line: 1285, column: 3, scope: !2893)
!2899 = !DILocation(line: 1287, column: 32, scope: !2900)
!2900 = distinct !DILexicalBlock(scope: !2901, file: !3, line: 1287, column: 11)
!2901 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 1286, column: 5)
!2902 = !DILocation(line: 1287, column: 11, scope: !2900)
!2903 = !DILocation(line: 1287, column: 38, scope: !2900)
!2904 = !DILocation(line: 1287, column: 11, scope: !2901)
!2905 = !DILocation(line: 1288, column: 29, scope: !2900)
!2906 = !DILocation(line: 1288, column: 8, scope: !2900)
!2907 = !DILocation(line: 1288, column: 2, scope: !2900)
!2908 = !DILocation(line: 1289, column: 33, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2901, file: !3, line: 1289, column: 11)
!2910 = !DILocation(line: 1289, column: 11, scope: !2909)
!2911 = !DILocation(line: 1289, column: 39, scope: !2909)
!2912 = !DILocation(line: 1289, column: 11, scope: !2901)
!2913 = !DILocation(line: 1290, column: 30, scope: !2909)
!2914 = !DILocation(line: 1290, column: 8, scope: !2909)
!2915 = !DILocation(line: 1290, column: 2, scope: !2909)
!2916 = !DILocation(line: 1291, column: 30, scope: !2901)
!2917 = !DILocation(line: 1291, column: 7, scope: !2901)
!2918 = !DILocation(line: 1291, column: 36, scope: !2901)
!2919 = !DILocation(line: 1292, column: 28, scope: !2901)
!2920 = !DILocation(line: 1292, column: 7, scope: !2901)
!2921 = !DILocation(line: 1292, column: 34, scope: !2901)
!2922 = !DILocation(line: 1293, column: 29, scope: !2901)
!2923 = !DILocation(line: 1293, column: 7, scope: !2901)
!2924 = !DILocation(line: 1293, column: 35, scope: !2901)
!2925 = !DILocation(line: 1294, column: 5, scope: !2901)
!2926 = !DILocation(line: 1285, column: 47, scope: !2896)
!2927 = !DILocation(line: 1285, column: 3, scope: !2896)
!2928 = distinct !{!2928, !2898, !2929}
!2929 = !DILocation(line: 1294, column: 5, scope: !2893)
!2930 = !DILocation(line: 1295, column: 1, scope: !2889)
!2931 = distinct !DISubprogram(name: "setup_reg_mode_hard_regset", scope: !3, file: !3, line: 390, type: !2213, scopeLine: 391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2932 = !DILocalVariable(name: "i", scope: !2931, file: !3, line: 392, type: !926)
!2933 = !DILocation(line: 392, column: 7, scope: !2931)
!2934 = !DILocalVariable(name: "m", scope: !2931, file: !3, line: 392, type: !926)
!2935 = !DILocation(line: 392, column: 10, scope: !2931)
!2936 = !DILocalVariable(name: "hard_regno", scope: !2931, file: !3, line: 392, type: !926)
!2937 = !DILocation(line: 392, column: 13, scope: !2931)
!2938 = !DILocation(line: 394, column: 10, scope: !2939)
!2939 = distinct !DILexicalBlock(scope: !2931, file: !3, line: 394, column: 3)
!2940 = !DILocation(line: 394, column: 8, scope: !2939)
!2941 = !DILocation(line: 394, column: 15, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2939, file: !3, line: 394, column: 3)
!2943 = !DILocation(line: 394, column: 17, scope: !2942)
!2944 = !DILocation(line: 394, column: 3, scope: !2939)
!2945 = !DILocation(line: 395, column: 21, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 395, column: 5)
!2947 = !DILocation(line: 395, column: 10, scope: !2946)
!2948 = !DILocation(line: 395, column: 26, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 395, column: 5)
!2950 = !DILocation(line: 395, column: 37, scope: !2949)
!2951 = !DILocation(line: 395, column: 5, scope: !2946)
!2952 = !DILocation(line: 397, column: 2, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 396, column: 7)
!2954 = !DILocation(line: 398, column: 28, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 398, column: 2)
!2956 = !DILocation(line: 398, column: 11, scope: !2955)
!2957 = !DILocation(line: 398, column: 40, scope: !2955)
!2958 = !DILocation(line: 398, column: 43, scope: !2955)
!2959 = !DILocation(line: 398, column: 9, scope: !2955)
!2960 = !DILocation(line: 398, column: 7, scope: !2955)
!2961 = !DILocation(line: 398, column: 48, scope: !2962)
!2962 = distinct !DILexicalBlock(scope: !2955, file: !3, line: 398, column: 2)
!2963 = !DILocation(line: 398, column: 50, scope: !2962)
!2964 = !DILocation(line: 398, column: 2, scope: !2955)
!2965 = !DILocation(line: 399, column: 8, scope: !2966)
!2966 = distinct !DILexicalBlock(scope: !2962, file: !3, line: 399, column: 8)
!2967 = !DILocation(line: 399, column: 21, scope: !2966)
!2968 = !DILocation(line: 399, column: 19, scope: !2966)
!2969 = !DILocation(line: 399, column: 23, scope: !2966)
!2970 = !DILocation(line: 399, column: 8, scope: !2962)
!2971 = !DILocation(line: 400, column: 6, scope: !2966)
!2972 = !DILocation(line: 399, column: 25, scope: !2966)
!2973 = !DILocation(line: 398, column: 57, scope: !2962)
!2974 = !DILocation(line: 398, column: 2, scope: !2962)
!2975 = distinct !{!2975, !2964, !2976}
!2976 = !DILocation(line: 400, column: 6, scope: !2955)
!2977 = !DILocation(line: 402, column: 7, scope: !2953)
!2978 = !DILocation(line: 395, column: 72, scope: !2949)
!2979 = !DILocation(line: 395, column: 5, scope: !2949)
!2980 = distinct !{!2980, !2951, !2981}
!2981 = !DILocation(line: 402, column: 7, scope: !2946)
!2982 = !DILocation(line: 394, column: 39, scope: !2942)
!2983 = !DILocation(line: 394, column: 3, scope: !2942)
!2984 = distinct !{!2984, !2944, !2985}
!2985 = !DILocation(line: 402, column: 7, scope: !2939)
!2986 = !DILocation(line: 403, column: 1, scope: !2931)
!2987 = distinct !DISubprogram(name: "setup_alloc_regs", scope: !3, file: !3, line: 491, type: !2988, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!2988 = !DISubroutineType(types: !2989)
!2989 = !{null, !1004}
!2990 = !DILocalVariable(name: "use_hard_frame_p", arg: 1, scope: !2987, file: !3, line: 491, type: !1004)
!2991 = !DILocation(line: 491, column: 24, scope: !2987)
!2992 = !DILocation(line: 493, column: 3, scope: !2987)
!2993 = !DILocation(line: 494, column: 9, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2987, file: !3, line: 494, column: 7)
!2995 = !DILocation(line: 494, column: 7, scope: !2987)
!2996 = !DILocation(line: 495, column: 5, scope: !2994)
!2997 = !DILocation(line: 496, column: 3, scope: !2987)
!2998 = !DILocation(line: 497, column: 3, scope: !2987)
!2999 = !DILocation(line: 498, column: 1, scope: !2987)
!3000 = distinct !DISubprogram(name: "setup_class_subset_and_memory_move_costs", scope: !3, file: !3, line: 504, type: !2213, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3001 = !DILocalVariable(name: "cl", scope: !3000, file: !3, line: 506, type: !926)
!3002 = !DILocation(line: 506, column: 7, scope: !3000)
!3003 = !DILocalVariable(name: "cl2", scope: !3000, file: !3, line: 506, type: !926)
!3004 = !DILocation(line: 506, column: 11, scope: !3000)
!3005 = !DILocalVariable(name: "mode", scope: !3000, file: !3, line: 506, type: !926)
!3006 = !DILocation(line: 506, column: 16, scope: !3000)
!3007 = !DILocalVariable(name: "temp_hard_regset2", scope: !3000, file: !3, line: 507, type: !929)
!3008 = !DILocation(line: 507, column: 16, scope: !3000)
!3009 = !DILocation(line: 509, column: 13, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !3000, file: !3, line: 509, column: 3)
!3011 = !DILocation(line: 509, column: 8, scope: !3010)
!3012 = !DILocation(line: 509, column: 18, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3010, file: !3, line: 509, column: 3)
!3014 = !DILocation(line: 509, column: 23, scope: !3013)
!3015 = !DILocation(line: 509, column: 3, scope: !3010)
!3016 = !DILocation(line: 511, column: 30, scope: !3013)
!3017 = !DILocation(line: 511, column: 9, scope: !3013)
!3018 = !DILocation(line: 511, column: 48, scope: !3013)
!3019 = !DILocation(line: 510, column: 26, scope: !3013)
!3020 = !DILocation(line: 510, column: 5, scope: !3013)
!3021 = !DILocation(line: 511, column: 7, scope: !3013)
!3022 = !DILocation(line: 509, column: 47, scope: !3013)
!3023 = !DILocation(line: 509, column: 3, scope: !3013)
!3024 = distinct !{!3024, !3015, !3025}
!3025 = !DILocation(line: 511, column: 50, scope: !3010)
!3026 = !DILocation(line: 512, column: 11, scope: !3027)
!3027 = distinct !DILexicalBlock(scope: !3000, file: !3, line: 512, column: 3)
!3028 = !DILocation(line: 512, column: 8, scope: !3027)
!3029 = !DILocation(line: 512, column: 38, scope: !3030)
!3030 = distinct !DILexicalBlock(scope: !3027, file: !3, line: 512, column: 3)
!3031 = !DILocation(line: 512, column: 41, scope: !3030)
!3032 = !DILocation(line: 512, column: 3, scope: !3027)
!3033 = !DILocation(line: 514, column: 11, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !3035, file: !3, line: 514, column: 11)
!3035 = distinct !DILexicalBlock(scope: !3030, file: !3, line: 513, column: 5)
!3036 = !DILocation(line: 514, column: 14, scope: !3034)
!3037 = !DILocation(line: 514, column: 11, scope: !3035)
!3038 = !DILocation(line: 515, column: 12, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !3034, file: !3, line: 515, column: 2)
!3040 = !DILocation(line: 515, column: 7, scope: !3039)
!3041 = !DILocation(line: 515, column: 17, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !3039, file: !3, line: 515, column: 2)
!3043 = !DILocation(line: 515, column: 22, scope: !3042)
!3044 = !DILocation(line: 515, column: 2, scope: !3039)
!3045 = !DILocation(line: 518, column: 8, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3042, file: !3, line: 516, column: 4)
!3047 = !DILocation(line: 517, column: 27, scope: !3046)
!3048 = !DILocation(line: 517, column: 6, scope: !3046)
!3049 = !DILocation(line: 517, column: 33, scope: !3046)
!3050 = !DILocation(line: 517, column: 40, scope: !3046)
!3051 = !DILocation(line: 521, column: 8, scope: !3046)
!3052 = !DILocation(line: 520, column: 27, scope: !3046)
!3053 = !DILocation(line: 520, column: 6, scope: !3046)
!3054 = !DILocation(line: 520, column: 33, scope: !3046)
!3055 = !DILocation(line: 520, column: 40, scope: !3046)
!3056 = !DILocation(line: 526, column: 31, scope: !3057)
!3057 = distinct !DILexicalBlock(scope: !3046, file: !3, line: 526, column: 10)
!3058 = !DILocation(line: 526, column: 10, scope: !3057)
!3059 = !DILocation(line: 527, column: 26, scope: !3057)
!3060 = !DILocation(line: 527, column: 5, scope: !3057)
!3061 = !DILocation(line: 527, column: 32, scope: !3057)
!3062 = !DILocation(line: 527, column: 3, scope: !3057)
!3063 = !DILocation(line: 526, column: 10, scope: !3046)
!3064 = !DILocation(line: 529, column: 26, scope: !3057)
!3065 = !DILocation(line: 529, column: 5, scope: !3057)
!3066 = !DILocation(line: 529, column: 32, scope: !3057)
!3067 = !DILocation(line: 528, column: 29, scope: !3057)
!3068 = !DILocation(line: 528, column: 8, scope: !3057)
!3069 = !DILocation(line: 529, column: 3, scope: !3057)
!3070 = !DILocation(line: 530, column: 31, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3046, file: !3, line: 530, column: 10)
!3072 = !DILocation(line: 530, column: 10, scope: !3071)
!3073 = !DILocation(line: 531, column: 26, scope: !3071)
!3074 = !DILocation(line: 531, column: 5, scope: !3071)
!3075 = !DILocation(line: 531, column: 32, scope: !3071)
!3076 = !DILocation(line: 531, column: 3, scope: !3071)
!3077 = !DILocation(line: 530, column: 10, scope: !3046)
!3078 = !DILocation(line: 533, column: 26, scope: !3071)
!3079 = !DILocation(line: 533, column: 5, scope: !3071)
!3080 = !DILocation(line: 533, column: 32, scope: !3071)
!3081 = !DILocation(line: 532, column: 29, scope: !3071)
!3082 = !DILocation(line: 532, column: 8, scope: !3071)
!3083 = !DILocation(line: 533, column: 3, scope: !3071)
!3084 = !DILocation(line: 534, column: 4, scope: !3046)
!3085 = !DILocation(line: 515, column: 46, scope: !3042)
!3086 = !DILocation(line: 515, column: 2, scope: !3042)
!3087 = distinct !{!3087, !3044, !3088}
!3088 = !DILocation(line: 534, column: 4, scope: !3039)
!3089 = !DILocation(line: 535, column: 16, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3035, file: !3, line: 535, column: 7)
!3091 = !DILocation(line: 535, column: 12, scope: !3090)
!3092 = !DILocation(line: 535, column: 43, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3090, file: !3, line: 535, column: 7)
!3094 = !DILocation(line: 535, column: 47, scope: !3093)
!3095 = !DILocation(line: 535, column: 7, scope: !3090)
!3096 = !DILocation(line: 537, column: 4, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 536, column: 2)
!3098 = !DILocation(line: 538, column: 4, scope: !3097)
!3099 = !DILocation(line: 539, column: 4, scope: !3097)
!3100 = !DILocation(line: 540, column: 4, scope: !3097)
!3101 = !DILocation(line: 542, column: 31, scope: !3097)
!3102 = !DILocation(line: 542, column: 49, scope: !3097)
!3103 = !DILocation(line: 542, column: 8, scope: !3097)
!3104 = !DILocation(line: 541, column: 23, scope: !3097)
!3105 = !DILocation(line: 541, column: 4, scope: !3097)
!3106 = !DILocation(line: 541, column: 27, scope: !3097)
!3107 = !DILocation(line: 542, column: 6, scope: !3097)
!3108 = !DILocation(line: 543, column: 2, scope: !3097)
!3109 = !DILocation(line: 535, column: 56, scope: !3093)
!3110 = !DILocation(line: 535, column: 7, scope: !3093)
!3111 = distinct !{!3111, !3095, !3112}
!3112 = !DILocation(line: 543, column: 2, scope: !3090)
!3113 = !DILocation(line: 544, column: 5, scope: !3035)
!3114 = !DILocation(line: 512, column: 49, scope: !3030)
!3115 = !DILocation(line: 512, column: 3, scope: !3030)
!3116 = distinct !{!3116, !3032, !3117}
!3117 = !DILocation(line: 544, column: 5, scope: !3027)
!3118 = !DILocation(line: 545, column: 1, scope: !3000)
!3119 = distinct !DISubprogram(name: "find_reg_class_closure", scope: !3, file: !3, line: 1124, type: !2213, scopeLine: 1125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3120 = !DILocation(line: 1126, column: 3, scope: !3119)
!3121 = !DILocation(line: 1127, column: 3, scope: !3119)
!3122 = !DILocation(line: 1128, column: 3, scope: !3119)
!3123 = !DILocation(line: 1129, column: 3, scope: !3119)
!3124 = !DILocation(line: 1130, column: 3, scope: !3119)
!3125 = !DILocation(line: 1131, column: 1, scope: !3119)
!3126 = distinct !DISubprogram(name: "setup_hard_regno_cover_class", scope: !3, file: !3, line: 1142, type: !2213, scopeLine: 1143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3127 = !DILocalVariable(name: "i", scope: !3126, file: !3, line: 1144, type: !926)
!3128 = !DILocation(line: 1144, column: 7, scope: !3126)
!3129 = !DILocalVariable(name: "j", scope: !3126, file: !3, line: 1144, type: !926)
!3130 = !DILocation(line: 1144, column: 10, scope: !3126)
!3131 = !DILocalVariable(name: "cl", scope: !3126, file: !3, line: 1145, type: !397)
!3132 = !DILocation(line: 1145, column: 18, scope: !3126)
!3133 = !DILocation(line: 1147, column: 10, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 1147, column: 3)
!3135 = !DILocation(line: 1147, column: 8, scope: !3134)
!3136 = !DILocation(line: 1147, column: 15, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3134, file: !3, line: 1147, column: 3)
!3138 = !DILocation(line: 1147, column: 17, scope: !3137)
!3139 = !DILocation(line: 1147, column: 3, scope: !3134)
!3140 = !DILocation(line: 1149, column: 34, scope: !3141)
!3141 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 1148, column: 5)
!3142 = !DILocation(line: 1149, column: 7, scope: !3141)
!3143 = !DILocation(line: 1149, column: 37, scope: !3141)
!3144 = !DILocation(line: 1150, column: 14, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3141, file: !3, line: 1150, column: 7)
!3146 = !DILocation(line: 1150, column: 12, scope: !3145)
!3147 = !DILocation(line: 1150, column: 19, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3145, file: !3, line: 1150, column: 7)
!3149 = !DILocation(line: 1150, column: 23, scope: !3148)
!3150 = !DILocation(line: 1150, column: 21, scope: !3148)
!3151 = !DILocation(line: 1150, column: 7, scope: !3145)
!3152 = !DILocation(line: 1152, column: 29, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3148, file: !3, line: 1151, column: 2)
!3154 = !DILocation(line: 1152, column: 9, scope: !3153)
!3155 = !DILocation(line: 1152, column: 7, scope: !3153)
!3156 = !DILocation(line: 1153, column: 33, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 1153, column: 8)
!3158 = !DILocation(line: 1153, column: 8, scope: !3157)
!3159 = !DILocation(line: 1153, column: 37, scope: !3157)
!3160 = !DILocation(line: 1153, column: 40, scope: !3157)
!3161 = !DILocation(line: 1153, column: 8, scope: !3153)
!3162 = !DILocation(line: 1155, column: 40, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3157, file: !3, line: 1154, column: 6)
!3164 = !DILocation(line: 1155, column: 35, scope: !3163)
!3165 = !DILocation(line: 1155, column: 8, scope: !3163)
!3166 = !DILocation(line: 1155, column: 38, scope: !3163)
!3167 = !DILocation(line: 1156, column: 8, scope: !3163)
!3168 = !DILocation(line: 1158, column: 2, scope: !3153)
!3169 = !DILocation(line: 1150, column: 50, scope: !3148)
!3170 = !DILocation(line: 1150, column: 7, scope: !3148)
!3171 = distinct !{!3171, !3151, !3172}
!3172 = !DILocation(line: 1158, column: 2, scope: !3145)
!3173 = !DILocation(line: 1160, column: 5, scope: !3141)
!3174 = !DILocation(line: 1147, column: 43, scope: !3137)
!3175 = !DILocation(line: 1147, column: 3, scope: !3137)
!3176 = distinct !{!3176, !3139, !3177}
!3177 = !DILocation(line: 1160, column: 5, scope: !3134)
!3178 = !DILocation(line: 1161, column: 1, scope: !3126)
!3179 = distinct !DISubprogram(name: "setup_reg_class_nregs", scope: !3, file: !3, line: 1175, type: !2213, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3180 = !DILocalVariable(name: "cl", scope: !3179, file: !3, line: 1177, type: !926)
!3181 = !DILocation(line: 1177, column: 7, scope: !3179)
!3182 = !DILocalVariable(name: "m", scope: !3179, file: !3, line: 1177, type: !926)
!3183 = !DILocation(line: 1177, column: 11, scope: !3179)
!3184 = !DILocation(line: 1179, column: 17, scope: !3179)
!3185 = !DILocation(line: 1180, column: 11, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1180, column: 3)
!3187 = !DILocation(line: 1180, column: 8, scope: !3186)
!3188 = !DILocation(line: 1180, column: 16, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3186, file: !3, line: 1180, column: 3)
!3190 = !DILocation(line: 1180, column: 19, scope: !3189)
!3191 = !DILocation(line: 1180, column: 3, scope: !3186)
!3192 = !DILocation(line: 1181, column: 12, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !3189, file: !3, line: 1181, column: 5)
!3194 = !DILocation(line: 1181, column: 10, scope: !3193)
!3195 = !DILocation(line: 1181, column: 17, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3193, file: !3, line: 1181, column: 5)
!3197 = !DILocation(line: 1181, column: 19, scope: !3196)
!3198 = !DILocation(line: 1181, column: 5, scope: !3193)
!3199 = !DILocation(line: 1183, column: 31, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 1182, column: 7)
!3201 = !DILocation(line: 1183, column: 22, scope: !3200)
!3202 = !DILocation(line: 1183, column: 2, scope: !3200)
!3203 = !DILocation(line: 1183, column: 26, scope: !3200)
!3204 = !DILocation(line: 1183, column: 29, scope: !3200)
!3205 = !DILocation(line: 1185, column: 6, scope: !3206)
!3206 = distinct !DILexicalBlock(scope: !3200, file: !3, line: 1185, column: 6)
!3207 = !DILocation(line: 1185, column: 42, scope: !3206)
!3208 = !DILocation(line: 1185, column: 22, scope: !3206)
!3209 = !DILocation(line: 1185, column: 46, scope: !3206)
!3210 = !DILocation(line: 1185, column: 20, scope: !3206)
!3211 = !DILocation(line: 1185, column: 6, scope: !3200)
!3212 = !DILocation(line: 1186, column: 40, scope: !3206)
!3213 = !DILocation(line: 1186, column: 20, scope: !3206)
!3214 = !DILocation(line: 1186, column: 44, scope: !3206)
!3215 = !DILocation(line: 1186, column: 18, scope: !3206)
!3216 = !DILocation(line: 1186, column: 4, scope: !3206)
!3217 = !DILocation(line: 1187, column: 7, scope: !3200)
!3218 = !DILocation(line: 1181, column: 40, scope: !3196)
!3219 = !DILocation(line: 1181, column: 5, scope: !3196)
!3220 = distinct !{!3220, !3198, !3221}
!3221 = !DILocation(line: 1187, column: 7, scope: !3193)
!3222 = !DILocation(line: 1180, column: 38, scope: !3189)
!3223 = !DILocation(line: 1180, column: 3, scope: !3189)
!3224 = distinct !{!3224, !3191, !3225}
!3225 = !DILocation(line: 1187, column: 7, scope: !3186)
!3226 = !DILocation(line: 1188, column: 1, scope: !3179)
!3227 = distinct !DISubprogram(name: "setup_prohibited_class_mode_regs", scope: !3, file: !3, line: 1199, type: !2213, scopeLine: 1200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3228 = !DILocalVariable(name: "i", scope: !3227, file: !3, line: 1201, type: !926)
!3229 = !DILocation(line: 1201, column: 7, scope: !3227)
!3230 = !DILocalVariable(name: "j", scope: !3227, file: !3, line: 1201, type: !926)
!3231 = !DILocation(line: 1201, column: 10, scope: !3227)
!3232 = !DILocalVariable(name: "k", scope: !3227, file: !3, line: 1201, type: !926)
!3233 = !DILocation(line: 1201, column: 13, scope: !3227)
!3234 = !DILocalVariable(name: "hard_regno", scope: !3227, file: !3, line: 1201, type: !926)
!3235 = !DILocation(line: 1201, column: 16, scope: !3227)
!3236 = !DILocalVariable(name: "cl", scope: !3227, file: !3, line: 1202, type: !397)
!3237 = !DILocation(line: 1202, column: 18, scope: !3227)
!3238 = !DILocation(line: 1204, column: 10, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3227, file: !3, line: 1204, column: 3)
!3240 = !DILocation(line: 1204, column: 8, scope: !3239)
!3241 = !DILocation(line: 1204, column: 15, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3239, file: !3, line: 1204, column: 3)
!3243 = !DILocation(line: 1204, column: 19, scope: !3242)
!3244 = !DILocation(line: 1204, column: 17, scope: !3242)
!3245 = !DILocation(line: 1204, column: 3, scope: !3239)
!3246 = !DILocation(line: 1206, column: 32, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3242, file: !3, line: 1205, column: 5)
!3248 = !DILocation(line: 1206, column: 12, scope: !3247)
!3249 = !DILocation(line: 1206, column: 10, scope: !3247)
!3250 = !DILocation(line: 1207, column: 14, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3247, file: !3, line: 1207, column: 7)
!3252 = !DILocation(line: 1207, column: 12, scope: !3251)
!3253 = !DILocation(line: 1207, column: 19, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 1207, column: 7)
!3255 = !DILocation(line: 1207, column: 21, scope: !3254)
!3256 = !DILocation(line: 1207, column: 7, scope: !3251)
!3257 = !DILocation(line: 1209, column: 4, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 1208, column: 2)
!3259 = !DILocation(line: 1210, column: 37, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 1210, column: 4)
!3261 = !DILocation(line: 1210, column: 13, scope: !3260)
!3262 = !DILocation(line: 1210, column: 41, scope: !3260)
!3263 = !DILocation(line: 1210, column: 11, scope: !3260)
!3264 = !DILocation(line: 1210, column: 9, scope: !3260)
!3265 = !DILocation(line: 1210, column: 46, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3260, file: !3, line: 1210, column: 4)
!3267 = !DILocation(line: 1210, column: 48, scope: !3266)
!3268 = !DILocation(line: 1210, column: 4, scope: !3260)
!3269 = !DILocation(line: 1212, column: 41, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3266, file: !3, line: 1211, column: 6)
!3271 = !DILocation(line: 1212, column: 21, scope: !3270)
!3272 = !DILocation(line: 1212, column: 45, scope: !3270)
!3273 = !DILocation(line: 1212, column: 19, scope: !3270)
!3274 = !DILocation(line: 1213, column: 14, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3270, file: !3, line: 1213, column: 12)
!3276 = !DILocation(line: 1213, column: 12, scope: !3270)
!3277 = !DILocation(line: 1214, column: 3, scope: !3275)
!3278 = !DILocation(line: 1216, column: 6, scope: !3270)
!3279 = !DILocation(line: 1210, column: 55, scope: !3266)
!3280 = !DILocation(line: 1210, column: 4, scope: !3266)
!3281 = distinct !{!3281, !3268, !3282}
!3282 = !DILocation(line: 1216, column: 6, scope: !3260)
!3283 = !DILocation(line: 1217, column: 2, scope: !3258)
!3284 = !DILocation(line: 1207, column: 43, scope: !3254)
!3285 = !DILocation(line: 1207, column: 7, scope: !3254)
!3286 = distinct !{!3286, !3256, !3287}
!3287 = !DILocation(line: 1217, column: 2, scope: !3251)
!3288 = !DILocation(line: 1218, column: 5, scope: !3247)
!3289 = !DILocation(line: 1204, column: 46, scope: !3242)
!3290 = !DILocation(line: 1204, column: 3, scope: !3242)
!3291 = distinct !{!3291, !3245, !3292}
!3292 = !DILocation(line: 1218, column: 5, scope: !3239)
!3293 = !DILocation(line: 1219, column: 1, scope: !3227)
!3294 = distinct !DISubprogram(name: "ira_finish_once", scope: !3, file: !3, line: 1315, type: !2213, scopeLine: 1316, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3295 = !DILocation(line: 1317, column: 3, scope: !3294)
!3296 = !DILocation(line: 1318, column: 3, scope: !3294)
!3297 = !DILocation(line: 1319, column: 1, scope: !3294)
!3298 = !DILocalVariable(name: "regs_asm_clobbered", scope: !2212, file: !3, line: 1437, type: !927)
!3299 = !DILocation(line: 1437, column: 9, scope: !2212)
!3300 = !DILocation(line: 1438, column: 16, scope: !2212)
!3301 = !DILocalVariable(name: "i", scope: !2212, file: !3, line: 1440, type: !926)
!3302 = !DILocation(line: 1440, column: 7, scope: !2212)
!3303 = !DILocalVariable(name: "need_fp", scope: !2212, file: !3, line: 1447, type: !926)
!3304 = !DILocation(line: 1447, column: 7, scope: !2212)
!3305 = !DILocation(line: 1448, column: 10, scope: !2212)
!3306 = !DILocation(line: 1449, column: 8, scope: !2212)
!3307 = !DILocation(line: 1449, column: 12, scope: !2212)
!3308 = !DILocation(line: 1449, column: 18, scope: !2212)
!3309 = !DILocation(line: 1452, column: 8, scope: !2212)
!3310 = !DILocation(line: 1452, column: 12, scope: !2212)
!3311 = !DILocation(line: 1453, column: 8, scope: !2212)
!3312 = !DILocation(line: 1453, column: 17, scope: !2212)
!3313 = !DILocation(line: 1453, column: 11, scope: !2212)
!3314 = !DILocation(line: 1454, column: 8, scope: !2212)
!3315 = !DILocation(line: 1454, column: 17, scope: !2212)
!3316 = !DILocation(line: 1454, column: 11, scope: !2212)
!3317 = !DILocation(line: 1455, column: 8, scope: !2212)
!3318 = !DILocation(line: 1455, column: 19, scope: !2212)
!3319 = !DILocation(line: 1455, column: 11, scope: !2212)
!3320 = !DILocation(line: 1457, column: 26, scope: !2212)
!3321 = !DILocation(line: 1457, column: 24, scope: !2212)
!3322 = !DILocation(line: 1459, column: 3, scope: !2212)
!3323 = !DILocation(line: 1460, column: 3, scope: !2212)
!3324 = !DILocation(line: 1462, column: 31, scope: !2212)
!3325 = !DILocation(line: 1462, column: 3, scope: !2212)
!3326 = !DILocation(line: 1466, column: 10, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 1466, column: 3)
!3328 = !DILocation(line: 1466, column: 8, scope: !3327)
!3329 = !DILocation(line: 1466, column: 15, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 1466, column: 3)
!3331 = !DILocation(line: 1466, column: 17, scope: !3330)
!3332 = !DILocation(line: 1466, column: 3, scope: !3327)
!3333 = !DILocalVariable(name: "cannot_elim", scope: !3334, file: !3, line: 1468, type: !1004)
!3334 = distinct !DILexicalBlock(scope: !3330, file: !3, line: 1467, column: 5)
!3335 = !DILocation(line: 1468, column: 12, scope: !3334)
!3336 = !DILocation(line: 1469, column: 15, scope: !3334)
!3337 = !DILocation(line: 1469, column: 42, scope: !3334)
!3338 = !DILocation(line: 1469, column: 30, scope: !3334)
!3339 = !DILocation(line: 1469, column: 45, scope: !3334)
!3340 = !DILocation(line: 1469, column: 63, scope: !3334)
!3341 = !DILocation(line: 1469, column: 51, scope: !3334)
!3342 = !DILocation(line: 1469, column: 66, scope: !3334)
!3343 = !DILocation(line: 1469, column: 7, scope: !3334)
!3344 = !DILocation(line: 1470, column: 5, scope: !3334)
!3345 = !DILocation(line: 1470, column: 21, scope: !3334)
!3346 = !DILocation(line: 1470, column: 9, scope: !3334)
!3347 = !DILocation(line: 1470, column: 24, scope: !3334)
!3348 = !DILocation(line: 1470, column: 27, scope: !3334)
!3349 = !DILocation(line: 1470, column: 51, scope: !3334)
!3350 = !DILocation(line: 1470, column: 54, scope: !3334)
!3351 = !DILocation(line: 0, scope: !3334)
!3352 = !DILocation(line: 1469, column: 4, scope: !3334)
!3353 = !DILocation(line: 1472, column: 13, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3334, file: !3, line: 1472, column: 11)
!3355 = !DILocation(line: 1472, column: 44, scope: !3354)
!3356 = !DILocation(line: 1472, column: 32, scope: !3354)
!3357 = !DILocation(line: 1472, column: 47, scope: !3354)
!3358 = !DILocation(line: 1472, column: 11, scope: !3334)
!3359 = !DILocation(line: 1474, column: 6, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3354, file: !3, line: 1473, column: 2)
!3361 = !DILocation(line: 1476, column: 10, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 1476, column: 10)
!3363 = !DILocation(line: 1476, column: 10, scope: !3360)
!3364 = !DILocation(line: 1477, column: 8, scope: !3362)
!3365 = !DILocation(line: 1478, column: 2, scope: !3360)
!3366 = !DILocation(line: 1479, column: 16, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3354, file: !3, line: 1479, column: 16)
!3368 = !DILocation(line: 1479, column: 16, scope: !3354)
!3369 = !DILocation(line: 1481, column: 31, scope: !3367)
!3370 = !DILocation(line: 1481, column: 19, scope: !3367)
!3371 = !DILocation(line: 1481, column: 34, scope: !3367)
!3372 = !DILocation(line: 1481, column: 9, scope: !3367)
!3373 = !DILocation(line: 1480, column: 2, scope: !3367)
!3374 = !DILocation(line: 1483, column: 37, scope: !3367)
!3375 = !DILocation(line: 1483, column: 25, scope: !3367)
!3376 = !DILocation(line: 1483, column: 40, scope: !3367)
!3377 = !DILocation(line: 1483, column: 2, scope: !3367)
!3378 = !DILocation(line: 1484, column: 5, scope: !3334)
!3379 = !DILocation(line: 1466, column: 52, scope: !3330)
!3380 = !DILocation(line: 1466, column: 3, scope: !3330)
!3381 = distinct !{!3381, !3332, !3382}
!3382 = !DILocation(line: 1484, column: 5, scope: !3327)
!3383 = !DILocation(line: 1486, column: 9, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 1486, column: 7)
!3385 = !DILocation(line: 1486, column: 7, scope: !2212)
!3386 = !DILocation(line: 1488, column: 7, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3384, file: !3, line: 1487, column: 5)
!3388 = !DILocation(line: 1489, column: 11, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3387, file: !3, line: 1489, column: 11)
!3390 = !DILocation(line: 1489, column: 11, scope: !3387)
!3391 = !DILocation(line: 1490, column: 2, scope: !3389)
!3392 = !DILocation(line: 1491, column: 5, scope: !3387)
!3393 = !DILocation(line: 1492, column: 12, scope: !3394)
!3394 = distinct !DILexicalBlock(scope: !3384, file: !3, line: 1492, column: 12)
!3395 = !DILocation(line: 1492, column: 12, scope: !3384)
!3396 = !DILocation(line: 1494, column: 5, scope: !3394)
!3397 = !DILocation(line: 1493, column: 5, scope: !3394)
!3398 = !DILocation(line: 1496, column: 5, scope: !3394)
!3399 = !DILocation(line: 1511, column: 1, scope: !2212)
!3400 = distinct !DISubprogram(name: "compute_regs_asm_clobbered", scope: !3, file: !3, line: 1395, type: !3401, scopeLine: 1396, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3401 = !DISubroutineType(types: !3402)
!3402 = !{null, !927}
!3403 = !DILocalVariable(name: "regs_asm_clobbered", arg: 1, scope: !3400, file: !3, line: 1395, type: !927)
!3404 = !DILocation(line: 1395, column: 35, scope: !3400)
!3405 = !DILocalVariable(name: "bb", scope: !3400, file: !3, line: 1397, type: !1480)
!3406 = !DILocation(line: 1397, column: 15, scope: !3400)
!3407 = !DILocation(line: 1399, column: 11, scope: !3400)
!3408 = !DILocation(line: 1399, column: 3, scope: !3400)
!3409 = !DILocation(line: 1401, column: 3, scope: !3410)
!3410 = distinct !DILexicalBlock(scope: !3400, file: !3, line: 1401, column: 3)
!3411 = !DILocation(line: 1401, column: 3, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1401, column: 3)
!3413 = !DILocalVariable(name: "insn", scope: !3414, file: !3, line: 1403, type: !1006)
!3414 = distinct !DILexicalBlock(scope: !3412, file: !3, line: 1402, column: 5)
!3415 = !DILocation(line: 1403, column: 11, scope: !3414)
!3416 = !DILocation(line: 1404, column: 7, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3414, file: !3, line: 1404, column: 7)
!3418 = !DILocation(line: 1404, column: 7, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 1404, column: 7)
!3420 = !DILocation(line: 0, scope: !3419)
!3421 = !DILocalVariable(name: "def_rec", scope: !3422, file: !3, line: 1406, type: !3423)
!3422 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 1405, column: 2)
!3423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3424, size: 64)
!3424 = !DIDerivedType(tag: DW_TAG_typedef, name: "df_ref", file: !818, line: 429, baseType: !3425)
!3425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3426, size: 64)
!3426 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "df_ref_d", file: !818, line: 422, size: 704, elements: !3427)
!3427 = !{!3428, !3466, !3471, !3476}
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3426, file: !818, line: 424, baseType: !3429, size: 512)
!3429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_base_ref", file: !818, line: 356, size: 512, elements: !3430)
!3430 = !{!3431, !3432, !3433, !3434, !3435, !3441, !3461, !3462, !3463, !3464, !3465}
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !3429, file: !818, line: 360, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3429, file: !818, line: 362, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3429, file: !818, line: 364, baseType: !926, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3429, file: !818, line: 365, baseType: !1006, size: 64, offset: 64)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !3429, file: !818, line: 366, baseType: !3436, size: 64, offset: 128)
!3436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3437, size: 64)
!3437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_link", file: !818, line: 449, size: 128, elements: !3438)
!3438 = !{!3439, !3440}
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3437, file: !818, line: 451, baseType: !3424, size: 64)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3437, file: !818, line: 452, baseType: !3436, size: 64, offset: 64)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "insn_info", scope: !3429, file: !818, line: 370, baseType: !3442, size: 64, offset: 192)
!3442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3443, size: 64)
!3443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_insn_info", file: !818, line: 433, size: 384, elements: !3444)
!3444 = !{!3445, !3446, !3447, !3448, !3449, !3460}
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !3443, file: !818, line: 435, baseType: !1006, size: 64)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !3443, file: !818, line: 436, baseType: !3423, size: 64, offset: 64)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !3443, file: !818, line: 437, baseType: !3423, size: 64, offset: 128)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "eq_uses", scope: !3443, file: !818, line: 439, baseType: !3423, size: 64, offset: 192)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "mw_hardregs", scope: !3443, file: !818, line: 440, baseType: !3450, size: 64, offset: 256)
!3450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3451, size: 64)
!3451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3452, size: 64)
!3452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_mw_hardreg", file: !818, line: 339, size: 192, elements: !3453)
!3453 = !{!3454, !3455, !3456, !3457, !3458, !3459}
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "mw_reg", scope: !3452, file: !818, line: 341, baseType: !1006, size: 64)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3452, file: !818, line: 344, baseType: !7, size: 16, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3452, file: !818, line: 346, baseType: !926, size: 16, offset: 80, flags: DIFlagBitField, extraData: i64 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "start_regno", scope: !3452, file: !818, line: 347, baseType: !7, size: 32, offset: 96)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "end_regno", scope: !3452, file: !818, line: 348, baseType: !7, size: 32, offset: 128)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "mw_order", scope: !3452, file: !818, line: 349, baseType: !7, size: 32, offset: 160)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !3443, file: !818, line: 444, baseType: !926, size: 32, offset: 320)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "next_reg", scope: !3429, file: !818, line: 374, baseType: !3425, size: 64, offset: 256)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "prev_reg", scope: !3429, file: !818, line: 375, baseType: !3425, size: 64, offset: 320)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !3429, file: !818, line: 376, baseType: !7, size: 32, offset: 384)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3429, file: !818, line: 379, baseType: !926, size: 32, offset: 416)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "ref_order", scope: !3429, file: !818, line: 382, baseType: !7, size: 32, offset: 448)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "regular_ref", scope: !3426, file: !818, line: 425, baseType: !3467, size: 576)
!3467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_regular_ref", file: !818, line: 398, size: 576, elements: !3468)
!3468 = !{!3469, !3470}
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3467, file: !818, line: 400, baseType: !3429, size: 512)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3467, file: !818, line: 405, baseType: !1005, size: 64, offset: 512)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_ref", scope: !3426, file: !818, line: 426, baseType: !3472, size: 576)
!3472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_artificial_ref", file: !818, line: 388, size: 576, elements: !3473)
!3473 = !{!3474, !3475}
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3472, file: !818, line: 390, baseType: !3429, size: 512)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3472, file: !818, line: 394, baseType: !1480, size: 64, offset: 512)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "extract_ref", scope: !3426, file: !818, line: 427, baseType: !3477, size: 704)
!3477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_extract_ref", file: !818, line: 413, size: 704, elements: !3478)
!3478 = !{!3479, !3480, !3481, !3482}
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3477, file: !818, line: 415, baseType: !3467, size: 576)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !3477, file: !818, line: 416, baseType: !926, size: 32, offset: 576)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3477, file: !818, line: 417, baseType: !926, size: 32, offset: 608)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3477, file: !818, line: 418, baseType: !5, size: 32, offset: 640)
!3483 = !DILocation(line: 1406, column: 12, scope: !3422)
!3484 = !DILocation(line: 1408, column: 27, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 1408, column: 8)
!3486 = !DILocation(line: 1408, column: 8, scope: !3485)
!3487 = !DILocation(line: 1408, column: 8, scope: !3422)
!3488 = !DILocation(line: 1409, column: 21, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 1409, column: 6)
!3490 = !DILocation(line: 1409, column: 19, scope: !3489)
!3491 = !DILocation(line: 1409, column: 11, scope: !3489)
!3492 = !DILocation(line: 1409, column: 43, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 1409, column: 6)
!3494 = !DILocation(line: 1409, column: 42, scope: !3493)
!3495 = !DILocation(line: 1409, column: 6, scope: !3489)
!3496 = !DILocalVariable(name: "def", scope: !3497, file: !3, line: 1411, type: !3424)
!3497 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 1410, column: 8)
!3498 = !DILocation(line: 1411, column: 10, scope: !3497)
!3499 = !DILocation(line: 1411, column: 17, scope: !3497)
!3500 = !DILocation(line: 1411, column: 16, scope: !3497)
!3501 = !DILocalVariable(name: "dregno", scope: !3497, file: !3, line: 1412, type: !7)
!3502 = !DILocation(line: 1412, column: 16, scope: !3497)
!3503 = !DILocation(line: 1412, column: 25, scope: !3497)
!3504 = !DILocation(line: 1413, column: 7, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3497, file: !3, line: 1413, column: 7)
!3506 = !DILocation(line: 1413, column: 14, scope: !3505)
!3507 = !DILocation(line: 1413, column: 7, scope: !3497)
!3508 = !DILocalVariable(name: "i", scope: !3509, file: !3, line: 1415, type: !7)
!3509 = distinct !DILexicalBlock(scope: !3505, file: !3, line: 1414, column: 5)
!3510 = !DILocation(line: 1415, column: 20, scope: !3509)
!3511 = !DILocalVariable(name: "mode", scope: !3509, file: !3, line: 1416, type: !5)
!3512 = !DILocation(line: 1416, column: 25, scope: !3509)
!3513 = !DILocation(line: 1416, column: 32, scope: !3509)
!3514 = !DILocalVariable(name: "end", scope: !3509, file: !3, line: 1417, type: !7)
!3515 = !DILocation(line: 1417, column: 20, scope: !3509)
!3516 = !DILocation(line: 1417, column: 26, scope: !3509)
!3517 = !DILocation(line: 1418, column: 28, scope: !3509)
!3518 = !DILocation(line: 1418, column: 11, scope: !3509)
!3519 = !DILocation(line: 1418, column: 36, scope: !3509)
!3520 = !DILocation(line: 1418, column: 9, scope: !3509)
!3521 = !DILocation(line: 1418, column: 42, scope: !3509)
!3522 = !DILocation(line: 1420, column: 16, scope: !3523)
!3523 = distinct !DILexicalBlock(scope: !3509, file: !3, line: 1420, column: 7)
!3524 = !DILocation(line: 1420, column: 14, scope: !3523)
!3525 = !DILocation(line: 1420, column: 12, scope: !3523)
!3526 = !DILocation(line: 1420, column: 24, scope: !3527)
!3527 = distinct !DILexicalBlock(scope: !3523, file: !3, line: 1420, column: 7)
!3528 = !DILocation(line: 1420, column: 29, scope: !3527)
!3529 = !DILocation(line: 1420, column: 26, scope: !3527)
!3530 = !DILocation(line: 1420, column: 7, scope: !3523)
!3531 = !DILocation(line: 1421, column: 9, scope: !3527)
!3532 = !DILocation(line: 1421, column: 28, scope: !3527)
!3533 = !DILocation(line: 1421, column: 31, scope: !3527)
!3534 = !DILocation(line: 1420, column: 34, scope: !3527)
!3535 = !DILocation(line: 1420, column: 7, scope: !3527)
!3536 = distinct !{!3536, !3530, !3537}
!3537 = !DILocation(line: 1421, column: 33, scope: !3523)
!3538 = !DILocation(line: 1422, column: 5, scope: !3509)
!3539 = !DILocation(line: 1423, column: 8, scope: !3497)
!3540 = !DILocation(line: 1409, column: 59, scope: !3493)
!3541 = !DILocation(line: 1409, column: 6, scope: !3493)
!3542 = distinct !{!3542, !3495, !3543}
!3543 = !DILocation(line: 1423, column: 8, scope: !3489)
!3544 = !DILocation(line: 1424, column: 2, scope: !3422)
!3545 = distinct !{!3545, !3416, !3546}
!3546 = !DILocation(line: 1424, column: 2, scope: !3417)
!3547 = !DILocation(line: 1425, column: 5, scope: !3414)
!3548 = distinct !{!3548, !3409, !3549}
!3549 = !DILocation(line: 1425, column: 5, scope: !3410)
!3550 = !DILocation(line: 1426, column: 1, scope: !3400)
!3551 = distinct !DISubprogram(name: "mark_elimination", scope: !3, file: !3, line: 1888, type: !3552, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3552 = !DISubroutineType(types: !3553)
!3553 = !{null, !926, !926}
!3554 = !DILocalVariable(name: "from", arg: 1, scope: !3551, file: !3, line: 1888, type: !926)
!3555 = !DILocation(line: 1888, column: 23, scope: !3551)
!3556 = !DILocalVariable(name: "to", arg: 2, scope: !3551, file: !3, line: 1888, type: !926)
!3557 = !DILocation(line: 1888, column: 33, scope: !3551)
!3558 = !DILocalVariable(name: "bb", scope: !3551, file: !3, line: 1890, type: !1480)
!3559 = !DILocation(line: 1890, column: 15, scope: !3551)
!3560 = !DILocation(line: 1892, column: 3, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1892, column: 3)
!3562 = !DILocation(line: 1892, column: 3, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1892, column: 3)
!3564 = !DILocalVariable(name: "r", scope: !3565, file: !3, line: 1895, type: !3566)
!3565 = distinct !DILexicalBlock(scope: !3563, file: !3, line: 1893, column: 5)
!3566 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !155, line: 37, baseType: !938)
!3567 = !DILocation(line: 1895, column: 14, scope: !3565)
!3568 = !DILocation(line: 1895, column: 18, scope: !3565)
!3569 = !DILocation(line: 1897, column: 11, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3565, file: !3, line: 1897, column: 11)
!3571 = !DILocation(line: 1897, column: 11, scope: !3565)
!3572 = !DILocation(line: 1899, column: 4, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 1898, column: 2)
!3574 = !DILocation(line: 1900, column: 4, scope: !3573)
!3575 = !DILocation(line: 1901, column: 2, scope: !3573)
!3576 = !DILocation(line: 1902, column: 5, scope: !3565)
!3577 = distinct !{!3577, !3560, !3578}
!3578 = !DILocation(line: 1902, column: 5, scope: !3561)
!3579 = !DILocation(line: 1903, column: 1, scope: !3551)
!3580 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !818, file: !818, line: 1052, type: !3581, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3581 = !DISubroutineType(types: !3582)
!3582 = !{!934, !7}
!3583 = !DILocalVariable(name: "index", arg: 1, scope: !3580, file: !818, line: 1052, type: !7)
!3584 = !DILocation(line: 1052, column: 33, scope: !3580)
!3585 = !DILocation(line: 1054, column: 7, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3580, file: !818, line: 1054, column: 7)
!3587 = !DILocation(line: 1054, column: 15, scope: !3586)
!3588 = !DILocation(line: 1054, column: 22, scope: !3586)
!3589 = !DILocation(line: 1054, column: 13, scope: !3586)
!3590 = !DILocation(line: 1054, column: 7, scope: !3580)
!3591 = !DILocation(line: 1055, column: 37, scope: !3586)
!3592 = !DILocation(line: 1055, column: 44, scope: !3586)
!3593 = !DILocation(line: 1055, column: 55, scope: !3586)
!3594 = !DILocation(line: 1055, column: 12, scope: !3586)
!3595 = !DILocation(line: 1055, column: 5, scope: !3586)
!3596 = !DILocation(line: 1057, column: 5, scope: !3586)
!3597 = !DILocation(line: 1058, column: 1, scope: !3580)
!3598 = distinct !DISubprogram(name: "gate_ira", scope: !3, file: !3, line: 3383, type: !2234, scopeLine: 3384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3599 = !DILocation(line: 3385, column: 3, scope: !3598)
!3600 = distinct !DISubprogram(name: "rest_of_handle_ira", scope: !3, file: !3, line: 3390, type: !2238, scopeLine: 3391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3601 = !DILocation(line: 3392, column: 8, scope: !3600)
!3602 = !DILocation(line: 3392, column: 3, scope: !3600)
!3603 = !DILocation(line: 3393, column: 3, scope: !3600)
!3604 = distinct !DISubprogram(name: "setup_class_hard_regs", scope: !3, file: !3, line: 428, type: !2213, scopeLine: 429, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3605 = !DILocalVariable(name: "cl", scope: !3604, file: !3, line: 430, type: !926)
!3606 = !DILocation(line: 430, column: 7, scope: !3604)
!3607 = !DILocalVariable(name: "i", scope: !3604, file: !3, line: 430, type: !926)
!3608 = !DILocation(line: 430, column: 11, scope: !3604)
!3609 = !DILocalVariable(name: "hard_regno", scope: !3604, file: !3, line: 430, type: !926)
!3610 = !DILocation(line: 430, column: 14, scope: !3604)
!3611 = !DILocalVariable(name: "n", scope: !3604, file: !3, line: 430, type: !926)
!3612 = !DILocation(line: 430, column: 26, scope: !3604)
!3613 = !DILocalVariable(name: "processed_hard_reg_set", scope: !3604, file: !3, line: 431, type: !929)
!3614 = !DILocation(line: 431, column: 16, scope: !3604)
!3615 = !DILocation(line: 437, column: 11, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3604, file: !3, line: 437, column: 3)
!3617 = !DILocation(line: 437, column: 8, scope: !3616)
!3618 = !DILocation(line: 437, column: 38, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3616, file: !3, line: 437, column: 3)
!3620 = !DILocation(line: 437, column: 41, scope: !3619)
!3621 = !DILocation(line: 437, column: 3, scope: !3616)
!3622 = !DILocation(line: 439, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3619, file: !3, line: 438, column: 5)
!3624 = !DILocation(line: 440, column: 7, scope: !3623)
!3625 = !DILocation(line: 441, column: 7, scope: !3623)
!3626 = !DILocation(line: 442, column: 14, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 442, column: 7)
!3628 = !DILocation(line: 442, column: 12, scope: !3627)
!3629 = !DILocation(line: 442, column: 19, scope: !3630)
!3630 = distinct !DILexicalBlock(scope: !3627, file: !3, line: 442, column: 7)
!3631 = !DILocation(line: 442, column: 21, scope: !3630)
!3632 = !DILocation(line: 442, column: 7, scope: !3627)
!3633 = !DILocation(line: 443, column: 27, scope: !3630)
!3634 = !DILocation(line: 443, column: 2, scope: !3630)
!3635 = !DILocation(line: 443, column: 34, scope: !3630)
!3636 = !DILocation(line: 442, column: 47, scope: !3630)
!3637 = !DILocation(line: 442, column: 7, scope: !3630)
!3638 = distinct !{!3638, !3632, !3639}
!3639 = !DILocation(line: 443, column: 37, scope: !3627)
!3640 = !DILocation(line: 444, column: 14, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 444, column: 7)
!3642 = !DILocation(line: 444, column: 21, scope: !3641)
!3643 = !DILocation(line: 444, column: 12, scope: !3641)
!3644 = !DILocation(line: 444, column: 26, scope: !3645)
!3645 = distinct !DILexicalBlock(scope: !3641, file: !3, line: 444, column: 7)
!3646 = !DILocation(line: 444, column: 28, scope: !3645)
!3647 = !DILocation(line: 444, column: 7, scope: !3641)
!3648 = !DILocation(line: 447, column: 33, scope: !3649)
!3649 = distinct !DILexicalBlock(scope: !3645, file: !3, line: 445, column: 2)
!3650 = !DILocation(line: 447, column: 17, scope: !3649)
!3651 = !DILocation(line: 447, column: 15, scope: !3649)
!3652 = !DILocation(line: 451, column: 8, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 451, column: 8)
!3654 = !DILocation(line: 451, column: 8, scope: !3649)
!3655 = !DILocation(line: 452, column: 6, scope: !3653)
!3656 = !DILocation(line: 453, column: 4, scope: !3649)
!3657 = !DILocation(line: 454, column: 16, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 454, column: 14)
!3659 = !DILocation(line: 454, column: 14, scope: !3649)
!3660 = !DILocation(line: 455, column: 31, scope: !3658)
!3661 = !DILocation(line: 455, column: 6, scope: !3658)
!3662 = !DILocation(line: 455, column: 35, scope: !3658)
!3663 = !DILocation(line: 455, column: 47, scope: !3658)
!3664 = !DILocation(line: 458, column: 51, scope: !3665)
!3665 = distinct !DILexicalBlock(scope: !3658, file: !3, line: 457, column: 6)
!3666 = !DILocation(line: 458, column: 33, scope: !3665)
!3667 = !DILocation(line: 458, column: 8, scope: !3665)
!3668 = !DILocation(line: 458, column: 37, scope: !3665)
!3669 = !DILocation(line: 458, column: 49, scope: !3665)
!3670 = !DILocation(line: 459, column: 39, scope: !3665)
!3671 = !DILocation(line: 459, column: 28, scope: !3665)
!3672 = !DILocation(line: 459, column: 8, scope: !3665)
!3673 = !DILocation(line: 459, column: 33, scope: !3665)
!3674 = !DILocation(line: 459, column: 37, scope: !3665)
!3675 = !DILocation(line: 461, column: 2, scope: !3649)
!3676 = !DILocation(line: 444, column: 54, scope: !3645)
!3677 = !DILocation(line: 444, column: 7, scope: !3645)
!3678 = distinct !{!3678, !3647, !3679}
!3679 = !DILocation(line: 461, column: 2, scope: !3641)
!3680 = !DILocation(line: 462, column: 37, scope: !3623)
!3681 = !DILocation(line: 462, column: 31, scope: !3623)
!3682 = !DILocation(line: 462, column: 7, scope: !3623)
!3683 = !DILocation(line: 462, column: 35, scope: !3623)
!3684 = !DILocation(line: 463, column: 5, scope: !3623)
!3685 = !DILocation(line: 437, column: 49, scope: !3619)
!3686 = !DILocation(line: 437, column: 3, scope: !3619)
!3687 = distinct !{!3687, !3621, !3688}
!3688 = !DILocation(line: 463, column: 5, scope: !3616)
!3689 = !DILocation(line: 464, column: 1, scope: !3604)
!3690 = distinct !DISubprogram(name: "setup_available_class_regs", scope: !3, file: !3, line: 472, type: !2213, scopeLine: 473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3691 = !DILocalVariable(name: "i", scope: !3690, file: !3, line: 474, type: !926)
!3692 = !DILocation(line: 474, column: 7, scope: !3690)
!3693 = !DILocalVariable(name: "j", scope: !3690, file: !3, line: 474, type: !926)
!3694 = !DILocation(line: 474, column: 10, scope: !3690)
!3695 = !DILocation(line: 476, column: 3, scope: !3690)
!3696 = !DILocation(line: 477, column: 10, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 477, column: 3)
!3698 = !DILocation(line: 477, column: 8, scope: !3697)
!3699 = !DILocation(line: 477, column: 15, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 477, column: 3)
!3701 = !DILocation(line: 477, column: 17, scope: !3700)
!3702 = !DILocation(line: 477, column: 3, scope: !3697)
!3703 = !DILocation(line: 479, column: 7, scope: !3704)
!3704 = distinct !DILexicalBlock(scope: !3700, file: !3, line: 478, column: 5)
!3705 = !DILocation(line: 480, column: 7, scope: !3704)
!3706 = !DILocation(line: 481, column: 14, scope: !3707)
!3707 = distinct !DILexicalBlock(scope: !3704, file: !3, line: 481, column: 7)
!3708 = !DILocation(line: 481, column: 12, scope: !3707)
!3709 = !DILocation(line: 481, column: 19, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3707, file: !3, line: 481, column: 7)
!3711 = !DILocation(line: 481, column: 21, scope: !3710)
!3712 = !DILocation(line: 481, column: 7, scope: !3707)
!3713 = !DILocation(line: 482, column: 6, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3710, file: !3, line: 482, column: 6)
!3715 = !DILocation(line: 482, column: 6, scope: !3710)
!3716 = !DILocation(line: 483, column: 29, scope: !3714)
!3717 = !DILocation(line: 483, column: 4, scope: !3714)
!3718 = !DILocation(line: 483, column: 31, scope: !3714)
!3719 = !DILocation(line: 481, column: 47, scope: !3710)
!3720 = !DILocation(line: 481, column: 7, scope: !3710)
!3721 = distinct !{!3721, !3712, !3722}
!3722 = !DILocation(line: 483, column: 31, scope: !3707)
!3723 = !DILocation(line: 484, column: 5, scope: !3704)
!3724 = !DILocation(line: 477, column: 35, scope: !3700)
!3725 = !DILocation(line: 477, column: 3, scope: !3700)
!3726 = distinct !{!3726, !3702, !3727}
!3727 = !DILocation(line: 484, column: 5, scope: !3697)
!3728 = !DILocation(line: 485, column: 1, scope: !3690)
!3729 = distinct !DISubprogram(name: "hard_reg_set_subset_p", scope: !930, file: !930, line: 115, type: !3730, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3730 = !DISubroutineType(types: !3731)
!3731 = !{!1004, !3732, !3732}
!3732 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !929)
!3733 = !DILocalVariable(name: "x", arg: 1, scope: !3729, file: !930, line: 115, type: !3732)
!3734 = !DILocation(line: 115, column: 43, scope: !3729)
!3735 = !DILocalVariable(name: "y", arg: 2, scope: !3729, file: !930, line: 115, type: !3732)
!3736 = !DILocation(line: 115, column: 65, scope: !3729)
!3737 = !DILocation(line: 117, column: 11, scope: !3729)
!3738 = !DILocation(line: 117, column: 16, scope: !3729)
!3739 = !DILocation(line: 117, column: 15, scope: !3729)
!3740 = !DILocation(line: 117, column: 13, scope: !3729)
!3741 = !DILocation(line: 117, column: 19, scope: !3729)
!3742 = !DILocation(line: 117, column: 10, scope: !3729)
!3743 = !DILocation(line: 117, column: 3, scope: !3729)
!3744 = distinct !DISubprogram(name: "setup_reg_subclasses", scope: !3, file: !3, line: 667, type: !2213, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!3745 = !DILocalVariable(name: "i", scope: !3744, file: !3, line: 669, type: !926)
!3746 = !DILocation(line: 669, column: 7, scope: !3744)
!3747 = !DILocalVariable(name: "j", scope: !3744, file: !3, line: 669, type: !926)
!3748 = !DILocation(line: 669, column: 10, scope: !3744)
!3749 = !DILocalVariable(name: "temp_hard_regset2", scope: !3744, file: !3, line: 670, type: !929)
!3750 = !DILocation(line: 670, column: 16, scope: !3744)
!3751 = !DILocation(line: 672, column: 10, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 672, column: 3)
!3753 = !DILocation(line: 672, column: 8, scope: !3752)
!3754 = !DILocation(line: 672, column: 15, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 672, column: 3)
!3756 = !DILocation(line: 672, column: 17, scope: !3755)
!3757 = !DILocation(line: 672, column: 3, scope: !3752)
!3758 = !DILocation(line: 673, column: 12, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 673, column: 5)
!3760 = !DILocation(line: 673, column: 10, scope: !3759)
!3761 = !DILocation(line: 673, column: 17, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3759, file: !3, line: 673, column: 5)
!3763 = !DILocation(line: 673, column: 19, scope: !3762)
!3764 = !DILocation(line: 673, column: 5, scope: !3759)
!3765 = !DILocation(line: 674, column: 34, scope: !3762)
!3766 = !DILocation(line: 674, column: 7, scope: !3762)
!3767 = !DILocation(line: 674, column: 37, scope: !3762)
!3768 = !DILocation(line: 674, column: 40, scope: !3762)
!3769 = !DILocation(line: 673, column: 37, scope: !3762)
!3770 = !DILocation(line: 673, column: 5, scope: !3762)
!3771 = distinct !{!3771, !3764, !3772}
!3772 = !DILocation(line: 674, column: 42, scope: !3759)
!3773 = !DILocation(line: 672, column: 35, scope: !3755)
!3774 = !DILocation(line: 672, column: 3, scope: !3755)
!3775 = distinct !{!3775, !3757, !3776}
!3776 = !DILocation(line: 674, column: 42, scope: !3752)
!3777 = !DILocation(line: 676, column: 10, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 676, column: 3)
!3779 = !DILocation(line: 676, column: 8, scope: !3778)
!3780 = !DILocation(line: 676, column: 15, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 676, column: 3)
!3782 = !DILocation(line: 676, column: 17, scope: !3781)
!3783 = !DILocation(line: 676, column: 3, scope: !3778)
!3784 = !DILocation(line: 678, column: 11, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 678, column: 11)
!3786 = distinct !DILexicalBlock(scope: !3781, file: !3, line: 677, column: 5)
!3787 = !DILocation(line: 678, column: 13, scope: !3785)
!3788 = !DILocation(line: 678, column: 11, scope: !3786)
!3789 = !DILocation(line: 679, column: 2, scope: !3785)
!3790 = !DILocation(line: 681, column: 7, scope: !3786)
!3791 = !DILocation(line: 682, column: 7, scope: !3786)
!3792 = !DILocation(line: 683, column: 33, scope: !3793)
!3793 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 683, column: 11)
!3794 = !DILocation(line: 683, column: 11, scope: !3793)
!3795 = !DILocation(line: 683, column: 11, scope: !3786)
!3796 = !DILocation(line: 684, column: 2, scope: !3793)
!3797 = !DILocation(line: 685, column: 14, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 685, column: 7)
!3799 = !DILocation(line: 685, column: 12, scope: !3798)
!3800 = !DILocation(line: 685, column: 19, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3798, file: !3, line: 685, column: 7)
!3802 = !DILocation(line: 685, column: 21, scope: !3801)
!3803 = !DILocation(line: 685, column: 7, scope: !3798)
!3804 = !DILocation(line: 686, column: 6, scope: !3805)
!3805 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 686, column: 6)
!3806 = !DILocation(line: 686, column: 11, scope: !3805)
!3807 = !DILocation(line: 686, column: 8, scope: !3805)
!3808 = !DILocation(line: 686, column: 6, scope: !3801)
!3809 = !DILocalVariable(name: "p", scope: !3810, file: !3, line: 688, type: !3811)
!3810 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 687, column: 4)
!3811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !397, size: 64)
!3812 = !DILocation(line: 688, column: 22, scope: !3810)
!3813 = !DILocation(line: 690, column: 6, scope: !3810)
!3814 = !DILocation(line: 691, column: 6, scope: !3810)
!3815 = !DILocation(line: 692, column: 35, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3810, file: !3, line: 692, column: 10)
!3817 = !DILocation(line: 693, column: 7, scope: !3816)
!3818 = !DILocation(line: 692, column: 12, scope: !3816)
!3819 = !DILocation(line: 692, column: 10, scope: !3810)
!3820 = !DILocation(line: 694, column: 8, scope: !3816)
!3821 = !DILocation(line: 695, column: 38, scope: !3810)
!3822 = !DILocation(line: 695, column: 11, scope: !3810)
!3823 = !DILocation(line: 695, column: 8, scope: !3810)
!3824 = !DILocation(line: 696, column: 6, scope: !3810)
!3825 = !DILocation(line: 696, column: 14, scope: !3810)
!3826 = !DILocation(line: 696, column: 13, scope: !3810)
!3827 = !DILocation(line: 696, column: 16, scope: !3810)
!3828 = !DILocation(line: 696, column: 37, scope: !3810)
!3829 = distinct !{!3829, !3824, !3828}
!3830 = !DILocation(line: 697, column: 28, scope: !3810)
!3831 = !DILocation(line: 697, column: 7, scope: !3810)
!3832 = !DILocation(line: 697, column: 9, scope: !3810)
!3833 = !DILocation(line: 698, column: 4, scope: !3810)
!3834 = !DILocation(line: 685, column: 39, scope: !3801)
!3835 = !DILocation(line: 685, column: 7, scope: !3801)
!3836 = distinct !{!3836, !3803, !3837}
!3837 = !DILocation(line: 698, column: 4, scope: !3798)
!3838 = !DILocation(line: 699, column: 5, scope: !3786)
!3839 = !DILocation(line: 676, column: 35, scope: !3781)
!3840 = !DILocation(line: 676, column: 3, scope: !3781)
!3841 = distinct !{!3841, !3783, !3842}
!3842 = !DILocation(line: 699, column: 5, scope: !3778)
!3843 = !DILocation(line: 700, column: 1, scope: !3744)
!3844 = !DILocalVariable(name: "i", scope: !2457, file: !3, line: 731, type: !926)
!3845 = !DILocation(line: 731, column: 7, scope: !2457)
!3846 = !DILocalVariable(name: "j", scope: !2457, file: !3, line: 731, type: !926)
!3847 = !DILocation(line: 731, column: 10, scope: !2457)
!3848 = !DILocalVariable(name: "n", scope: !2457, file: !3, line: 731, type: !926)
!3849 = !DILocation(line: 731, column: 13, scope: !2457)
!3850 = !DILocalVariable(name: "cl", scope: !2457, file: !3, line: 731, type: !926)
!3851 = !DILocation(line: 731, column: 16, scope: !2457)
!3852 = !DILocalVariable(name: "set_p", scope: !2457, file: !3, line: 732, type: !1004)
!3853 = !DILocation(line: 732, column: 8, scope: !2457)
!3854 = !DILocalVariable(name: "cover_classes", scope: !2457, file: !3, line: 733, type: !932)
!3855 = !DILocation(line: 733, column: 25, scope: !2457)
!3856 = !DILocalVariable(name: "temp_hard_regset2", scope: !2457, file: !3, line: 734, type: !929)
!3857 = !DILocation(line: 734, column: 16, scope: !2457)
!3858 = !DILocation(line: 737, column: 15, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 737, column: 7)
!3860 = !DILocation(line: 737, column: 33, scope: !3859)
!3861 = !DILocation(line: 737, column: 7, scope: !2457)
!3862 = !DILocation(line: 738, column: 19, scope: !3859)
!3863 = !DILocation(line: 738, column: 5, scope: !3859)
!3864 = !DILocation(line: 740, column: 29, scope: !3859)
!3865 = !DILocation(line: 740, column: 21, scope: !3859)
!3866 = !DILocation(line: 740, column: 19, scope: !3859)
!3867 = !DILocation(line: 741, column: 7, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 741, column: 7)
!3869 = !DILocation(line: 741, column: 21, scope: !3868)
!3870 = !DILocation(line: 741, column: 7, scope: !2457)
!3871 = !DILocation(line: 742, column: 5, scope: !3868)
!3872 = !DILocation(line: 745, column: 14, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3874, file: !3, line: 745, column: 7)
!3874 = distinct !DILexicalBlock(scope: !3868, file: !3, line: 744, column: 5)
!3875 = !DILocation(line: 745, column: 12, scope: !3873)
!3876 = !DILocation(line: 745, column: 25, scope: !3877)
!3877 = distinct !DILexicalBlock(scope: !3873, file: !3, line: 745, column: 7)
!3878 = !DILocation(line: 745, column: 39, scope: !3877)
!3879 = !DILocation(line: 745, column: 23, scope: !3877)
!3880 = !DILocation(line: 745, column: 43, scope: !3877)
!3881 = !DILocation(line: 745, column: 7, scope: !3873)
!3882 = !DILocation(line: 746, column: 32, scope: !3877)
!3883 = !DILocation(line: 746, column: 10, scope: !3877)
!3884 = !DILocation(line: 746, column: 2, scope: !3877)
!3885 = !DILocation(line: 746, column: 13, scope: !3877)
!3886 = !DILocation(line: 745, column: 64, scope: !3877)
!3887 = !DILocation(line: 745, column: 7, scope: !3877)
!3888 = distinct !{!3888, !3881, !3889}
!3889 = !DILocation(line: 746, column: 32, scope: !3873)
!3890 = !DILocation(line: 747, column: 15, scope: !3874)
!3891 = !DILocation(line: 747, column: 7, scope: !3874)
!3892 = !DILocation(line: 747, column: 18, scope: !3874)
!3893 = !DILocation(line: 750, column: 7, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 750, column: 7)
!3895 = !DILocation(line: 750, column: 26, scope: !3894)
!3896 = !DILocation(line: 750, column: 7, scope: !2457)
!3897 = !DILocation(line: 752, column: 9, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 751, column: 5)
!3899 = !DILocation(line: 753, column: 14, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3898, file: !3, line: 753, column: 7)
!3901 = !DILocation(line: 753, column: 12, scope: !3900)
!3902 = !DILocation(line: 753, column: 19, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3900, file: !3, line: 753, column: 7)
!3904 = !DILocation(line: 753, column: 21, scope: !3903)
!3905 = !DILocation(line: 753, column: 7, scope: !3900)
!3906 = !DILocation(line: 755, column: 8, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 755, column: 8)
!3908 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 754, column: 2)
!3909 = !DILocation(line: 755, column: 10, scope: !3907)
!3910 = !DILocation(line: 755, column: 8, scope: !3908)
!3911 = !DILocation(line: 756, column: 6, scope: !3907)
!3912 = !DILocation(line: 758, column: 11, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 758, column: 4)
!3914 = !DILocation(line: 758, column: 9, scope: !3913)
!3915 = !DILocation(line: 758, column: 16, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 758, column: 4)
!3917 = !DILocation(line: 758, column: 18, scope: !3916)
!3918 = !DILocation(line: 758, column: 4, scope: !3913)
!3919 = !DILocation(line: 759, column: 16, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 759, column: 10)
!3921 = !DILocation(line: 759, column: 70, scope: !3920)
!3922 = !DILocation(line: 759, column: 67, scope: !3920)
!3923 = !DILocation(line: 759, column: 10, scope: !3916)
!3924 = !DILocation(line: 760, column: 8, scope: !3920)
!3925 = !DILocation(line: 758, column: 40, scope: !3916)
!3926 = !DILocation(line: 758, column: 4, scope: !3916)
!3927 = distinct !{!3927, !3918, !3928}
!3928 = !DILocation(line: 760, column: 8, scope: !3913)
!3929 = !DILocation(line: 761, column: 8, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 761, column: 8)
!3931 = !DILocation(line: 761, column: 10, scope: !3930)
!3932 = !DILocation(line: 761, column: 8, scope: !3908)
!3933 = !DILocation(line: 763, column: 40, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3930, file: !3, line: 762, column: 6)
!3935 = !DILocation(line: 763, column: 17, scope: !3934)
!3936 = !DILocation(line: 763, column: 8, scope: !3934)
!3937 = !DILocation(line: 763, column: 21, scope: !3934)
!3938 = !DILocation(line: 764, column: 8, scope: !3934)
!3939 = !DILocation(line: 767, column: 4, scope: !3908)
!3940 = !DILocation(line: 768, column: 4, scope: !3908)
!3941 = !DILocation(line: 769, column: 11, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 769, column: 4)
!3943 = !DILocation(line: 769, column: 9, scope: !3942)
!3944 = !DILocation(line: 769, column: 16, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 769, column: 4)
!3946 = !DILocation(line: 769, column: 18, scope: !3945)
!3947 = !DILocation(line: 769, column: 4, scope: !3942)
!3948 = !DILocation(line: 771, column: 12, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3950, file: !3, line: 771, column: 12)
!3950 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 770, column: 6)
!3951 = !DILocation(line: 771, column: 17, scope: !3949)
!3952 = !DILocation(line: 771, column: 14, scope: !3949)
!3953 = !DILocation(line: 771, column: 12, scope: !3950)
!3954 = !DILocation(line: 772, column: 3, scope: !3949)
!3955 = !DILocation(line: 773, column: 8, scope: !3950)
!3956 = !DILocation(line: 774, column: 8, scope: !3950)
!3957 = !DILocation(line: 776, column: 34, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3950, file: !3, line: 776, column: 12)
!3959 = !DILocation(line: 777, column: 6, scope: !3958)
!3960 = !DILocation(line: 776, column: 12, scope: !3958)
!3961 = !DILocation(line: 776, column: 12, scope: !3950)
!3962 = !DILocation(line: 778, column: 7, scope: !3958)
!3963 = !DILocation(line: 779, column: 6, scope: !3950)
!3964 = !DILocation(line: 769, column: 38, scope: !3945)
!3965 = !DILocation(line: 769, column: 4, scope: !3945)
!3966 = distinct !{!3966, !3947, !3967}
!3967 = !DILocation(line: 779, column: 6, scope: !3942)
!3968 = !DILocation(line: 780, column: 8, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 780, column: 8)
!3970 = !DILocation(line: 780, column: 13, scope: !3969)
!3971 = !DILocation(line: 780, column: 10, scope: !3969)
!3972 = !DILocation(line: 780, column: 8, scope: !3908)
!3973 = !DILocation(line: 781, column: 38, scope: !3969)
!3974 = !DILocation(line: 781, column: 15, scope: !3969)
!3975 = !DILocation(line: 781, column: 6, scope: !3969)
!3976 = !DILocation(line: 781, column: 19, scope: !3969)
!3977 = !DILocation(line: 782, column: 2, scope: !3908)
!3978 = !DILocation(line: 753, column: 42, scope: !3903)
!3979 = !DILocation(line: 753, column: 7, scope: !3903)
!3980 = distinct !{!3980, !3905, !3981}
!3981 = !DILocation(line: 782, column: 2, scope: !3900)
!3982 = !DILocation(line: 783, column: 15, scope: !3898)
!3983 = !DILocation(line: 783, column: 7, scope: !3898)
!3984 = !DILocation(line: 783, column: 18, scope: !3898)
!3985 = !DILocation(line: 784, column: 5, scope: !3898)
!3986 = !DILocation(line: 786, column: 28, scope: !2457)
!3987 = !DILocation(line: 787, column: 10, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 787, column: 3)
!3989 = !DILocation(line: 787, column: 8, scope: !3988)
!3990 = !DILocation(line: 787, column: 29, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3988, file: !3, line: 787, column: 3)
!3992 = !DILocation(line: 787, column: 21, scope: !3991)
!3993 = !DILocation(line: 787, column: 19, scope: !3991)
!3994 = !DILocation(line: 787, column: 33, scope: !3991)
!3995 = !DILocation(line: 787, column: 3, scope: !3988)
!3996 = !DILocation(line: 789, column: 14, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 789, column: 7)
!3998 = distinct !DILexicalBlock(scope: !3991, file: !3, line: 788, column: 5)
!3999 = !DILocation(line: 789, column: 12, scope: !3997)
!4000 = !DILocation(line: 789, column: 19, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 789, column: 7)
!4002 = !DILocation(line: 789, column: 23, scope: !4001)
!4003 = !DILocation(line: 789, column: 21, scope: !4001)
!4004 = !DILocation(line: 789, column: 7, scope: !3997)
!4005 = !DILocation(line: 790, column: 6, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 790, column: 6)
!4007 = !DILocation(line: 790, column: 25, scope: !4006)
!4008 = !DILocation(line: 791, column: 6, scope: !4006)
!4009 = !DILocation(line: 791, column: 51, scope: !4006)
!4010 = !DILocation(line: 791, column: 63, scope: !4006)
!4011 = !DILocation(line: 791, column: 55, scope: !4006)
!4012 = !DILocation(line: 791, column: 9, scope: !4006)
!4013 = !DILocation(line: 790, column: 6, scope: !4001)
!4014 = !DILocation(line: 792, column: 4, scope: !4006)
!4015 = !DILocation(line: 791, column: 65, scope: !4006)
!4016 = !DILocation(line: 789, column: 27, scope: !4001)
!4017 = !DILocation(line: 789, column: 7, scope: !4001)
!4018 = distinct !{!4018, !4004, !4019}
!4019 = !DILocation(line: 792, column: 4, scope: !3997)
!4020 = !DILocation(line: 793, column: 7, scope: !3998)
!4021 = !DILocation(line: 794, column: 7, scope: !3998)
!4022 = !DILocation(line: 795, column: 35, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 795, column: 11)
!4024 = !DILocation(line: 795, column: 13, scope: !4023)
!4025 = !DILocation(line: 795, column: 11, scope: !3998)
!4026 = !DILocation(line: 796, column: 69, scope: !4023)
!4027 = !DILocation(line: 796, column: 46, scope: !4023)
!4028 = !DILocation(line: 796, column: 2, scope: !4023)
!4029 = !DILocation(line: 796, column: 50, scope: !4023)
!4030 = !DILocation(line: 797, column: 5, scope: !3998)
!4031 = !DILocation(line: 787, column: 54, scope: !3991)
!4032 = !DILocation(line: 787, column: 3, scope: !3991)
!4033 = distinct !{!4033, !3995, !4034}
!4034 = !DILocation(line: 797, column: 5, scope: !3988)
!4035 = !DILocation(line: 798, column: 29, scope: !2457)
!4036 = !DILocation(line: 799, column: 11, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 799, column: 3)
!4038 = !DILocation(line: 799, column: 8, scope: !4037)
!4039 = !DILocation(line: 799, column: 16, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 799, column: 3)
!4041 = !DILocation(line: 799, column: 19, scope: !4040)
!4042 = !DILocation(line: 799, column: 3, scope: !4037)
!4043 = !DILocation(line: 801, column: 7, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 800, column: 5)
!4045 = !DILocation(line: 802, column: 7, scope: !4044)
!4046 = !DILocation(line: 803, column: 35, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 803, column: 11)
!4048 = !DILocation(line: 803, column: 13, scope: !4047)
!4049 = !DILocation(line: 803, column: 11, scope: !4044)
!4050 = !DILocation(line: 805, column: 10, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 804, column: 2)
!4052 = !DILocation(line: 806, column: 11, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 806, column: 4)
!4054 = !DILocation(line: 806, column: 9, scope: !4053)
!4055 = !DILocation(line: 806, column: 16, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 806, column: 4)
!4057 = !DILocation(line: 806, column: 20, scope: !4056)
!4058 = !DILocation(line: 806, column: 18, scope: !4056)
!4059 = !DILocation(line: 806, column: 4, scope: !4053)
!4060 = !DILocation(line: 808, column: 8, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 807, column: 6)
!4062 = !DILocation(line: 809, column: 8, scope: !4061)
!4063 = !DILocation(line: 810, column: 8, scope: !4061)
!4064 = !DILocation(line: 812, column: 8, scope: !4061)
!4065 = !DILocation(line: 813, column: 29, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 813, column: 12)
!4067 = !DILocation(line: 813, column: 55, scope: !4066)
!4068 = !DILocation(line: 813, column: 35, scope: !4066)
!4069 = !DILocation(line: 813, column: 32, scope: !4066)
!4070 = !DILocation(line: 814, column: 5, scope: !4066)
!4071 = !DILocation(line: 814, column: 30, scope: !4066)
!4072 = !DILocation(line: 815, column: 9, scope: !4066)
!4073 = !DILocation(line: 814, column: 8, scope: !4066)
!4074 = !DILocation(line: 813, column: 12, scope: !4061)
!4075 = !DILocation(line: 816, column: 3, scope: !4066)
!4076 = !DILocation(line: 817, column: 40, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 817, column: 17)
!4078 = !DILocation(line: 818, column: 12, scope: !4077)
!4079 = !DILocation(line: 817, column: 17, scope: !4077)
!4080 = !DILocation(line: 817, column: 17, scope: !4066)
!4081 = !DILocation(line: 819, column: 9, scope: !4077)
!4082 = !DILocation(line: 819, column: 3, scope: !4077)
!4083 = !DILocation(line: 820, column: 6, scope: !4061)
!4084 = !DILocation(line: 806, column: 47, scope: !4056)
!4085 = !DILocation(line: 806, column: 4, scope: !4056)
!4086 = distinct !{!4086, !4059, !4087}
!4087 = !DILocation(line: 820, column: 6, scope: !4053)
!4088 = !DILocation(line: 821, column: 8, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 821, column: 8)
!4090 = !DILocation(line: 821, column: 14, scope: !4089)
!4091 = !DILocation(line: 821, column: 17, scope: !4089)
!4092 = !DILocation(line: 821, column: 22, scope: !4089)
!4093 = !DILocation(line: 821, column: 19, scope: !4089)
!4094 = !DILocation(line: 821, column: 8, scope: !4051)
!4095 = !DILocation(line: 823, column: 27, scope: !4089)
!4096 = !DILocation(line: 822, column: 53, scope: !4089)
!4097 = !DILocation(line: 822, column: 6, scope: !4089)
!4098 = !DILocation(line: 823, column: 8, scope: !4089)
!4099 = !DILocation(line: 824, column: 2, scope: !4051)
!4100 = !DILocation(line: 825, column: 5, scope: !4044)
!4101 = !DILocation(line: 799, column: 38, scope: !4040)
!4102 = !DILocation(line: 799, column: 3, scope: !4040)
!4103 = distinct !{!4103, !4042, !4104}
!4104 = !DILocation(line: 825, column: 5, scope: !4037)
!4105 = !DILocation(line: 826, column: 10, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 826, column: 3)
!4107 = !DILocation(line: 826, column: 8, scope: !4106)
!4108 = !DILocation(line: 826, column: 15, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4106, file: !3, line: 826, column: 3)
!4110 = !DILocation(line: 826, column: 19, scope: !4109)
!4111 = !DILocation(line: 826, column: 17, scope: !4109)
!4112 = !DILocation(line: 826, column: 3, scope: !4106)
!4113 = !DILocation(line: 828, column: 29, scope: !4109)
!4114 = !DILocation(line: 828, column: 9, scope: !4109)
!4115 = !DILocation(line: 827, column: 52, scope: !4109)
!4116 = !DILocation(line: 827, column: 5, scope: !4109)
!4117 = !DILocation(line: 828, column: 7, scope: !4109)
!4118 = !DILocation(line: 826, column: 46, scope: !4109)
!4119 = !DILocation(line: 826, column: 3, scope: !4109)
!4120 = distinct !{!4120, !4112, !4121}
!4121 = !DILocation(line: 828, column: 30, scope: !4106)
!4122 = !DILocation(line: 829, column: 1, scope: !2457)
!4123 = distinct !DISubprogram(name: "setup_class_translate", scope: !3, file: !3, line: 838, type: !2213, scopeLine: 839, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4124 = !DILocalVariable(name: "cl", scope: !4123, file: !3, line: 840, type: !926)
!4125 = !DILocation(line: 840, column: 7, scope: !4123)
!4126 = !DILocalVariable(name: "mode", scope: !4123, file: !3, line: 840, type: !926)
!4127 = !DILocation(line: 840, column: 11, scope: !4123)
!4128 = !DILocalVariable(name: "cover_class", scope: !4123, file: !3, line: 841, type: !397)
!4129 = !DILocation(line: 841, column: 18, scope: !4123)
!4130 = !DILocalVariable(name: "best_class", scope: !4123, file: !3, line: 841, type: !397)
!4131 = !DILocation(line: 841, column: 31, scope: !4123)
!4132 = !DILocalVariable(name: "cl_ptr", scope: !4123, file: !3, line: 841, type: !3811)
!4133 = !DILocation(line: 841, column: 44, scope: !4123)
!4134 = !DILocalVariable(name: "i", scope: !4123, file: !3, line: 842, type: !926)
!4135 = !DILocation(line: 842, column: 7, scope: !4123)
!4136 = !DILocalVariable(name: "cost", scope: !4123, file: !3, line: 842, type: !926)
!4137 = !DILocation(line: 842, column: 10, scope: !4123)
!4138 = !DILocalVariable(name: "min_cost", scope: !4123, file: !3, line: 842, type: !926)
!4139 = !DILocation(line: 842, column: 16, scope: !4123)
!4140 = !DILocalVariable(name: "best_cost", scope: !4123, file: !3, line: 842, type: !926)
!4141 = !DILocation(line: 842, column: 26, scope: !4123)
!4142 = !DILocation(line: 844, column: 11, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 844, column: 3)
!4144 = !DILocation(line: 844, column: 8, scope: !4143)
!4145 = !DILocation(line: 844, column: 16, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 844, column: 3)
!4147 = !DILocation(line: 844, column: 19, scope: !4146)
!4148 = !DILocation(line: 844, column: 3, scope: !4143)
!4149 = !DILocation(line: 845, column: 25, scope: !4146)
!4150 = !DILocation(line: 845, column: 5, scope: !4146)
!4151 = !DILocation(line: 845, column: 29, scope: !4146)
!4152 = !DILocation(line: 844, column: 38, scope: !4146)
!4153 = !DILocation(line: 844, column: 3, scope: !4146)
!4154 = distinct !{!4154, !4148, !4155}
!4155 = !DILocation(line: 845, column: 31, scope: !4143)
!4156 = !DILocation(line: 847, column: 7, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 847, column: 7)
!4158 = !DILocation(line: 847, column: 26, scope: !4157)
!4159 = !DILocation(line: 847, column: 7, scope: !4123)
!4160 = !DILocation(line: 848, column: 13, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 848, column: 5)
!4162 = !DILocation(line: 848, column: 10, scope: !4161)
!4163 = !DILocation(line: 848, column: 18, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 848, column: 5)
!4165 = !DILocation(line: 848, column: 21, scope: !4164)
!4166 = !DILocation(line: 848, column: 5, scope: !4161)
!4167 = !DILocation(line: 850, column: 2, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4164, file: !3, line: 849, column: 7)
!4169 = !DILocation(line: 851, column: 2, scope: !4168)
!4170 = !DILocation(line: 852, column: 9, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 852, column: 2)
!4172 = !DILocation(line: 852, column: 7, scope: !4171)
!4173 = !DILocation(line: 852, column: 14, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 852, column: 2)
!4175 = !DILocation(line: 852, column: 18, scope: !4174)
!4176 = !DILocation(line: 852, column: 16, scope: !4174)
!4177 = !DILocation(line: 852, column: 2, scope: !4171)
!4178 = !DILocalVariable(name: "temp_hard_regset2", scope: !4179, file: !3, line: 854, type: !929)
!4179 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 853, column: 4)
!4180 = !DILocation(line: 854, column: 19, scope: !4179)
!4181 = !DILocation(line: 856, column: 40, scope: !4179)
!4182 = !DILocation(line: 856, column: 20, scope: !4179)
!4183 = !DILocation(line: 856, column: 18, scope: !4179)
!4184 = !DILocation(line: 857, column: 6, scope: !4179)
!4185 = !DILocation(line: 859, column: 6, scope: !4179)
!4186 = !DILocation(line: 860, column: 32, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 860, column: 10)
!4188 = !DILocation(line: 860, column: 50, scope: !4187)
!4189 = !DILocation(line: 860, column: 10, scope: !4187)
!4190 = !DILocation(line: 860, column: 10, scope: !4179)
!4191 = !DILocation(line: 861, column: 34, scope: !4187)
!4192 = !DILocation(line: 861, column: 28, scope: !4187)
!4193 = !DILocation(line: 861, column: 8, scope: !4187)
!4194 = !DILocation(line: 861, column: 32, scope: !4187)
!4195 = !DILocation(line: 862, column: 4, scope: !4179)
!4196 = !DILocation(line: 852, column: 45, scope: !4174)
!4197 = !DILocation(line: 852, column: 2, scope: !4174)
!4198 = distinct !{!4198, !4177, !4199}
!4199 = !DILocation(line: 862, column: 4, scope: !4171)
!4200 = !DILocation(line: 863, column: 7, scope: !4168)
!4201 = !DILocation(line: 848, column: 42, scope: !4164)
!4202 = !DILocation(line: 848, column: 5, scope: !4164)
!4203 = distinct !{!4203, !4166, !4204}
!4204 = !DILocation(line: 863, column: 7, scope: !4161)
!4205 = !DILocation(line: 864, column: 10, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 864, column: 3)
!4207 = !DILocation(line: 864, column: 8, scope: !4206)
!4208 = !DILocation(line: 864, column: 15, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4206, file: !3, line: 864, column: 3)
!4210 = !DILocation(line: 864, column: 19, scope: !4209)
!4211 = !DILocation(line: 864, column: 17, scope: !4209)
!4212 = !DILocation(line: 864, column: 3, scope: !4206)
!4213 = !DILocation(line: 866, column: 41, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 865, column: 5)
!4215 = !DILocation(line: 866, column: 21, scope: !4214)
!4216 = !DILocation(line: 866, column: 19, scope: !4214)
!4217 = !DILocation(line: 867, column: 11, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 867, column: 11)
!4219 = !DILocation(line: 867, column: 30, scope: !4218)
!4220 = !DILocation(line: 867, column: 11, scope: !4214)
!4221 = !DILocation(line: 868, column: 44, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 868, column: 2)
!4223 = !DILocation(line: 868, column: 17, scope: !4222)
!4224 = !DILocation(line: 868, column: 14, scope: !4222)
!4225 = !DILocation(line: 868, column: 7, scope: !4222)
!4226 = !DILocation(line: 869, column: 14, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 868, column: 2)
!4228 = !DILocation(line: 869, column: 13, scope: !4227)
!4229 = !DILocation(line: 869, column: 11, scope: !4227)
!4230 = !DILocation(line: 869, column: 22, scope: !4227)
!4231 = !DILocation(line: 868, column: 2, scope: !4222)
!4232 = !DILocation(line: 872, column: 30, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 872, column: 10)
!4234 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 871, column: 4)
!4235 = !DILocation(line: 872, column: 10, scope: !4233)
!4236 = !DILocation(line: 872, column: 34, scope: !4233)
!4237 = !DILocation(line: 872, column: 10, scope: !4234)
!4238 = !DILocation(line: 873, column: 34, scope: !4233)
!4239 = !DILocation(line: 873, column: 28, scope: !4233)
!4240 = !DILocation(line: 873, column: 8, scope: !4233)
!4241 = !DILocation(line: 873, column: 32, scope: !4233)
!4242 = !DILocation(line: 883, column: 4, scope: !4234)
!4243 = !DILocation(line: 870, column: 13, scope: !4227)
!4244 = !DILocation(line: 868, column: 2, scope: !4227)
!4245 = distinct !{!4245, !4231, !4246}
!4246 = !DILocation(line: 883, column: 4, scope: !4222)
!4247 = !DILocation(line: 884, column: 42, scope: !4214)
!4248 = !DILocation(line: 884, column: 27, scope: !4214)
!4249 = !DILocation(line: 884, column: 7, scope: !4214)
!4250 = !DILocation(line: 884, column: 40, scope: !4214)
!4251 = !DILocation(line: 885, column: 5, scope: !4214)
!4252 = !DILocation(line: 864, column: 46, scope: !4209)
!4253 = !DILocation(line: 864, column: 3, scope: !4209)
!4254 = distinct !{!4254, !4212, !4255}
!4255 = !DILocation(line: 885, column: 5, scope: !4206)
!4256 = !DILocation(line: 889, column: 11, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 889, column: 3)
!4258 = !DILocation(line: 889, column: 8, scope: !4257)
!4259 = !DILocation(line: 889, column: 16, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4257, file: !3, line: 889, column: 3)
!4261 = !DILocation(line: 889, column: 19, scope: !4260)
!4262 = !DILocation(line: 889, column: 3, scope: !4257)
!4263 = !DILocation(line: 891, column: 11, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 891, column: 11)
!4265 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 890, column: 5)
!4266 = !DILocation(line: 891, column: 14, scope: !4264)
!4267 = !DILocation(line: 891, column: 25, scope: !4264)
!4268 = !DILocation(line: 891, column: 48, scope: !4264)
!4269 = !DILocation(line: 891, column: 28, scope: !4264)
!4270 = !DILocation(line: 891, column: 52, scope: !4264)
!4271 = !DILocation(line: 891, column: 11, scope: !4265)
!4272 = !DILocation(line: 892, column: 2, scope: !4264)
!4273 = !DILocation(line: 893, column: 18, scope: !4265)
!4274 = !DILocation(line: 894, column: 17, scope: !4265)
!4275 = !DILocation(line: 895, column: 14, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 895, column: 7)
!4277 = !DILocation(line: 895, column: 12, scope: !4276)
!4278 = !DILocation(line: 895, column: 19, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 895, column: 7)
!4280 = !DILocation(line: 895, column: 23, scope: !4279)
!4281 = !DILocation(line: 895, column: 21, scope: !4279)
!4282 = !DILocation(line: 895, column: 7, scope: !4276)
!4283 = !DILocation(line: 897, column: 38, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 896, column: 2)
!4285 = !DILocation(line: 897, column: 18, scope: !4284)
!4286 = !DILocation(line: 897, column: 16, scope: !4284)
!4287 = !DILocation(line: 898, column: 4, scope: !4284)
!4288 = !DILocation(line: 900, column: 4, scope: !4284)
!4289 = !DILocation(line: 901, column: 4, scope: !4284)
!4290 = !DILocation(line: 902, column: 32, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 902, column: 8)
!4292 = !DILocation(line: 902, column: 10, scope: !4291)
!4293 = !DILocation(line: 902, column: 8, scope: !4284)
!4294 = !DILocation(line: 904, column: 17, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 903, column: 6)
!4296 = !DILocation(line: 905, column: 18, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 905, column: 8)
!4298 = !DILocation(line: 905, column: 13, scope: !4297)
!4299 = !DILocation(line: 905, column: 23, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 905, column: 8)
!4301 = !DILocation(line: 905, column: 28, scope: !4300)
!4302 = !DILocation(line: 905, column: 8, scope: !4297)
!4303 = !DILocation(line: 907, column: 34, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 906, column: 3)
!4305 = !DILocation(line: 907, column: 13, scope: !4304)
!4306 = !DILocation(line: 907, column: 40, scope: !4304)
!4307 = !DILocation(line: 908, column: 29, scope: !4304)
!4308 = !DILocation(line: 908, column: 8, scope: !4304)
!4309 = !DILocation(line: 908, column: 35, scope: !4304)
!4310 = !DILocation(line: 908, column: 6, scope: !4304)
!4311 = !DILocation(line: 907, column: 10, scope: !4304)
!4312 = !DILocation(line: 909, column: 9, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 909, column: 9)
!4314 = !DILocation(line: 909, column: 20, scope: !4313)
!4315 = !DILocation(line: 909, column: 18, scope: !4313)
!4316 = !DILocation(line: 909, column: 9, scope: !4304)
!4317 = !DILocation(line: 910, column: 18, scope: !4313)
!4318 = !DILocation(line: 910, column: 16, scope: !4313)
!4319 = !DILocation(line: 910, column: 7, scope: !4313)
!4320 = !DILocation(line: 911, column: 3, scope: !4304)
!4321 = !DILocation(line: 905, column: 52, scope: !4300)
!4322 = !DILocation(line: 905, column: 8, scope: !4300)
!4323 = distinct !{!4323, !4302, !4324}
!4324 = !DILocation(line: 911, column: 3, scope: !4297)
!4325 = !DILocation(line: 912, column: 12, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 912, column: 12)
!4327 = !DILocation(line: 912, column: 23, scope: !4326)
!4328 = !DILocation(line: 912, column: 34, scope: !4326)
!4329 = !DILocation(line: 912, column: 37, scope: !4326)
!4330 = !DILocation(line: 912, column: 49, scope: !4326)
!4331 = !DILocation(line: 912, column: 47, scope: !4326)
!4332 = !DILocation(line: 912, column: 12, scope: !4295)
!4333 = !DILocation(line: 914, column: 18, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4326, file: !3, line: 913, column: 3)
!4335 = !DILocation(line: 914, column: 16, scope: !4334)
!4336 = !DILocation(line: 915, column: 17, scope: !4334)
!4337 = !DILocation(line: 915, column: 15, scope: !4334)
!4338 = !DILocation(line: 916, column: 3, scope: !4334)
!4339 = !DILocation(line: 917, column: 6, scope: !4295)
!4340 = !DILocation(line: 918, column: 2, scope: !4284)
!4341 = !DILocation(line: 895, column: 50, scope: !4279)
!4342 = !DILocation(line: 895, column: 7, scope: !4279)
!4343 = distinct !{!4343, !4282, !4344}
!4344 = !DILocation(line: 918, column: 2, scope: !4276)
!4345 = !DILocation(line: 919, column: 33, scope: !4265)
!4346 = !DILocation(line: 919, column: 27, scope: !4265)
!4347 = !DILocation(line: 919, column: 7, scope: !4265)
!4348 = !DILocation(line: 919, column: 31, scope: !4265)
!4349 = !DILocation(line: 920, column: 5, scope: !4265)
!4350 = !DILocation(line: 889, column: 38, scope: !4260)
!4351 = !DILocation(line: 889, column: 3, scope: !4260)
!4352 = distinct !{!4352, !4262, !4353}
!4353 = !DILocation(line: 920, column: 5, scope: !4257)
!4354 = !DILocation(line: 921, column: 1, scope: !4123)
!4355 = distinct !DISubprogram(name: "reorder_important_classes", scope: !3, file: !3, line: 946, type: !2213, scopeLine: 947, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4356 = !DILocalVariable(name: "i", scope: !4355, file: !3, line: 948, type: !926)
!4357 = !DILocation(line: 948, column: 7, scope: !4355)
!4358 = !DILocation(line: 950, column: 10, scope: !4359)
!4359 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 950, column: 3)
!4360 = !DILocation(line: 950, column: 8, scope: !4359)
!4361 = !DILocation(line: 950, column: 15, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4359, file: !3, line: 950, column: 3)
!4363 = !DILocation(line: 950, column: 17, scope: !4362)
!4364 = !DILocation(line: 950, column: 3, scope: !4359)
!4365 = !DILocation(line: 951, column: 23, scope: !4362)
!4366 = !DILocation(line: 951, column: 5, scope: !4362)
!4367 = !DILocation(line: 951, column: 26, scope: !4362)
!4368 = !DILocation(line: 950, column: 35, scope: !4362)
!4369 = !DILocation(line: 950, column: 3, scope: !4362)
!4370 = distinct !{!4370, !4364, !4371}
!4371 = !DILocation(line: 951, column: 29, scope: !4359)
!4372 = !DILocation(line: 952, column: 10, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 952, column: 3)
!4374 = !DILocation(line: 952, column: 8, scope: !4373)
!4375 = !DILocation(line: 952, column: 15, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 952, column: 3)
!4377 = !DILocation(line: 952, column: 19, scope: !4376)
!4378 = !DILocation(line: 952, column: 17, scope: !4376)
!4379 = !DILocation(line: 952, column: 3, scope: !4373)
!4380 = !DILocation(line: 953, column: 49, scope: !4376)
!4381 = !DILocation(line: 953, column: 43, scope: !4376)
!4382 = !DILocation(line: 953, column: 23, scope: !4376)
!4383 = !DILocation(line: 953, column: 5, scope: !4376)
!4384 = !DILocation(line: 953, column: 47, scope: !4376)
!4385 = !DILocation(line: 952, column: 46, scope: !4376)
!4386 = !DILocation(line: 952, column: 3, scope: !4376)
!4387 = distinct !{!4387, !4379, !4388}
!4388 = !DILocation(line: 953, column: 49, scope: !4373)
!4389 = !DILocation(line: 955, column: 38, scope: !4355)
!4390 = !DILocation(line: 955, column: 3, scope: !4355)
!4391 = !DILocation(line: 961, column: 10, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 961, column: 3)
!4393 = !DILocation(line: 961, column: 8, scope: !4392)
!4394 = !DILocation(line: 961, column: 15, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 961, column: 3)
!4396 = !DILocation(line: 961, column: 19, scope: !4395)
!4397 = !DILocation(line: 961, column: 17, scope: !4395)
!4398 = !DILocation(line: 961, column: 3, scope: !4392)
!4399 = !DILocation(line: 962, column: 58, scope: !4395)
!4400 = !DILocation(line: 962, column: 52, scope: !4395)
!4401 = !DILocation(line: 962, column: 30, scope: !4395)
!4402 = !DILocation(line: 962, column: 5, scope: !4395)
!4403 = !DILocation(line: 962, column: 56, scope: !4395)
!4404 = !DILocation(line: 961, column: 47, scope: !4395)
!4405 = !DILocation(line: 961, column: 3, scope: !4395)
!4406 = distinct !{!4406, !4398, !4407}
!4407 = !DILocation(line: 962, column: 58, scope: !4392)
!4408 = !DILocation(line: 963, column: 1, scope: !4355)
!4409 = distinct !DISubprogram(name: "setup_reg_class_relations", scope: !3, file: !3, line: 995, type: !2213, scopeLine: 996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4410 = !DILocalVariable(name: "i", scope: !4409, file: !3, line: 997, type: !926)
!4411 = !DILocation(line: 997, column: 7, scope: !4409)
!4412 = !DILocalVariable(name: "cl1", scope: !4409, file: !3, line: 997, type: !926)
!4413 = !DILocation(line: 997, column: 10, scope: !4409)
!4414 = !DILocalVariable(name: "cl2", scope: !4409, file: !3, line: 997, type: !926)
!4415 = !DILocation(line: 997, column: 15, scope: !4409)
!4416 = !DILocalVariable(name: "cl3", scope: !4409, file: !3, line: 997, type: !926)
!4417 = !DILocation(line: 997, column: 20, scope: !4409)
!4418 = !DILocalVariable(name: "intersection_set", scope: !4409, file: !3, line: 998, type: !929)
!4419 = !DILocation(line: 998, column: 16, scope: !4409)
!4420 = !DILocalVariable(name: "union_set", scope: !4409, file: !3, line: 998, type: !929)
!4421 = !DILocation(line: 998, column: 34, scope: !4409)
!4422 = !DILocalVariable(name: "temp_set2", scope: !4409, file: !3, line: 998, type: !929)
!4423 = !DILocation(line: 998, column: 45, scope: !4409)
!4424 = !DILocalVariable(name: "important_class_p", scope: !4409, file: !3, line: 999, type: !4425)
!4425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 216, elements: !924)
!4426 = !DILocation(line: 999, column: 8, scope: !4409)
!4427 = !DILocation(line: 1001, column: 3, scope: !4409)
!4428 = !DILocation(line: 1002, column: 10, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 1002, column: 3)
!4430 = !DILocation(line: 1002, column: 8, scope: !4429)
!4431 = !DILocation(line: 1002, column: 15, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 1002, column: 3)
!4433 = !DILocation(line: 1002, column: 19, scope: !4432)
!4434 = !DILocation(line: 1002, column: 17, scope: !4432)
!4435 = !DILocation(line: 1002, column: 3, scope: !4429)
!4436 = !DILocation(line: 1003, column: 45, scope: !4432)
!4437 = !DILocation(line: 1003, column: 23, scope: !4432)
!4438 = !DILocation(line: 1003, column: 5, scope: !4432)
!4439 = !DILocation(line: 1003, column: 49, scope: !4432)
!4440 = !DILocation(line: 1002, column: 47, scope: !4432)
!4441 = !DILocation(line: 1002, column: 3, scope: !4432)
!4442 = distinct !{!4442, !4435, !4443}
!4443 = !DILocation(line: 1003, column: 51, scope: !4429)
!4444 = !DILocation(line: 1004, column: 12, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 1004, column: 3)
!4446 = !DILocation(line: 1004, column: 8, scope: !4445)
!4447 = !DILocation(line: 1004, column: 17, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 1004, column: 3)
!4449 = !DILocation(line: 1004, column: 21, scope: !4448)
!4450 = !DILocation(line: 1004, column: 3, scope: !4445)
!4451 = !DILocation(line: 1006, column: 35, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4448, file: !3, line: 1005, column: 5)
!4453 = !DILocation(line: 1006, column: 7, scope: !4452)
!4454 = !DILocation(line: 1006, column: 43, scope: !4452)
!4455 = !DILocation(line: 1007, column: 16, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4452, file: !3, line: 1007, column: 7)
!4457 = !DILocation(line: 1007, column: 12, scope: !4456)
!4458 = !DILocation(line: 1007, column: 21, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 1007, column: 7)
!4460 = !DILocation(line: 1007, column: 25, scope: !4459)
!4461 = !DILocation(line: 1007, column: 7, scope: !4456)
!4462 = !DILocation(line: 1009, column: 32, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1008, column: 2)
!4464 = !DILocation(line: 1009, column: 4, scope: !4463)
!4465 = !DILocation(line: 1009, column: 37, scope: !4463)
!4466 = !DILocation(line: 1009, column: 42, scope: !4463)
!4467 = !DILocation(line: 1010, column: 28, scope: !4463)
!4468 = !DILocation(line: 1010, column: 4, scope: !4463)
!4469 = !DILocation(line: 1010, column: 33, scope: !4463)
!4470 = !DILocation(line: 1010, column: 38, scope: !4463)
!4471 = !DILocation(line: 1011, column: 4, scope: !4463)
!4472 = !DILocation(line: 1012, column: 4, scope: !4463)
!4473 = !DILocation(line: 1013, column: 4, scope: !4463)
!4474 = !DILocation(line: 1014, column: 4, scope: !4463)
!4475 = !DILocation(line: 1015, column: 30, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 1015, column: 8)
!4477 = !DILocation(line: 1015, column: 8, scope: !4476)
!4478 = !DILocation(line: 1016, column: 8, scope: !4476)
!4479 = !DILocation(line: 1016, column: 33, scope: !4476)
!4480 = !DILocation(line: 1016, column: 11, scope: !4476)
!4481 = !DILocation(line: 1015, column: 8, scope: !4463)
!4482 = !DILocation(line: 1018, column: 15, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 1018, column: 8)
!4484 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 1017, column: 6)
!4485 = !DILocation(line: 1018, column: 13, scope: !4483)
!4486 = !DILocation(line: 1020, column: 32, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 1019, column: 3)
!4488 = distinct !DILexicalBlock(scope: !4483, file: !3, line: 1018, column: 8)
!4489 = !DILocation(line: 1020, column: 11, scope: !4487)
!4490 = !DILocation(line: 1020, column: 37, scope: !4487)
!4491 = !DILocation(line: 1020, column: 9, scope: !4487)
!4492 = !DILocation(line: 1021, column: 9, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 1021, column: 9)
!4494 = !DILocation(line: 1021, column: 13, scope: !4493)
!4495 = !DILocation(line: 1021, column: 9, scope: !4487)
!4496 = !DILocation(line: 1022, column: 7, scope: !4493)
!4497 = !DILocation(line: 1023, column: 53, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 1023, column: 9)
!4499 = !DILocation(line: 1023, column: 29, scope: !4498)
!4500 = !DILocation(line: 1023, column: 58, scope: !4498)
!4501 = !DILocation(line: 1024, column: 25, scope: !4498)
!4502 = !DILocation(line: 1023, column: 9, scope: !4498)
!4503 = !DILocation(line: 1023, column: 9, scope: !4487)
!4504 = !DILocation(line: 1025, column: 60, scope: !4498)
!4505 = !DILocation(line: 1025, column: 31, scope: !4498)
!4506 = !DILocation(line: 1025, column: 7, scope: !4498)
!4507 = !DILocation(line: 1025, column: 36, scope: !4498)
!4508 = !DILocation(line: 1025, column: 41, scope: !4498)
!4509 = !DILocation(line: 1026, column: 3, scope: !4487)
!4510 = !DILocation(line: 1018, column: 22, scope: !4488)
!4511 = !DILocation(line: 1018, column: 8, scope: !4488)
!4512 = distinct !{!4512, !4513, !4514}
!4513 = !DILocation(line: 1018, column: 8, scope: !4483)
!4514 = !DILocation(line: 1026, column: 3, scope: !4483)
!4515 = !DILocation(line: 1027, column: 59, scope: !4484)
!4516 = !DILocation(line: 1027, column: 40, scope: !4484)
!4517 = !DILocation(line: 1027, column: 64, scope: !4484)
!4518 = !DILocation(line: 1027, column: 28, scope: !4484)
!4519 = !DILocation(line: 1027, column: 8, scope: !4484)
!4520 = !DILocation(line: 1027, column: 33, scope: !4484)
!4521 = !DILocation(line: 1027, column: 38, scope: !4484)
!4522 = !DILocation(line: 1028, column: 8, scope: !4484)
!4523 = !DILocation(line: 1031, column: 34, scope: !4463)
!4524 = !DILocation(line: 1031, column: 52, scope: !4463)
!4525 = !DILocation(line: 1031, column: 8, scope: !4463)
!4526 = !DILocation(line: 1030, column: 32, scope: !4463)
!4527 = !DILocation(line: 1030, column: 4, scope: !4463)
!4528 = !DILocation(line: 1030, column: 37, scope: !4463)
!4529 = !DILocation(line: 1031, column: 6, scope: !4463)
!4530 = !DILocation(line: 1032, column: 26, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 1032, column: 8)
!4532 = !DILocation(line: 1032, column: 8, scope: !4531)
!4533 = !DILocation(line: 1032, column: 31, scope: !4531)
!4534 = !DILocation(line: 1032, column: 52, scope: !4531)
!4535 = !DILocation(line: 1032, column: 34, scope: !4531)
!4536 = !DILocation(line: 1033, column: 8, scope: !4531)
!4537 = !DILocation(line: 1033, column: 34, scope: !4531)
!4538 = !DILocation(line: 1033, column: 52, scope: !4531)
!4539 = !DILocation(line: 1033, column: 11, scope: !4531)
!4540 = !DILocation(line: 1032, column: 8, scope: !4463)
!4541 = !DILocalVariable(name: "p", scope: !4542, file: !3, line: 1035, type: !3811)
!4542 = distinct !DILexicalBlock(scope: !4531, file: !3, line: 1034, column: 6)
!4543 = !DILocation(line: 1035, column: 24, scope: !4542)
!4544 = !DILocation(line: 1037, column: 41, scope: !4542)
!4545 = !DILocation(line: 1037, column: 13, scope: !4542)
!4546 = !DILocation(line: 1037, column: 10, scope: !4542)
!4547 = !DILocation(line: 1038, column: 8, scope: !4542)
!4548 = !DILocation(line: 1038, column: 16, scope: !4542)
!4549 = !DILocation(line: 1038, column: 15, scope: !4542)
!4550 = !DILocation(line: 1038, column: 18, scope: !4542)
!4551 = !DILocation(line: 1039, column: 4, scope: !4542)
!4552 = distinct !{!4552, !4547, !4551}
!4553 = !DILocation(line: 1040, column: 32, scope: !4542)
!4554 = !DILocation(line: 1040, column: 10, scope: !4542)
!4555 = !DILocation(line: 1040, column: 13, scope: !4542)
!4556 = !DILocation(line: 1041, column: 9, scope: !4542)
!4557 = !DILocation(line: 1041, column: 11, scope: !4542)
!4558 = !DILocation(line: 1042, column: 6, scope: !4542)
!4559 = !DILocation(line: 1043, column: 24, scope: !4463)
!4560 = !DILocation(line: 1043, column: 4, scope: !4463)
!4561 = !DILocation(line: 1043, column: 29, scope: !4463)
!4562 = !DILocation(line: 1043, column: 34, scope: !4463)
!4563 = !DILocation(line: 1044, column: 4, scope: !4463)
!4564 = !DILocation(line: 1045, column: 4, scope: !4463)
!4565 = !DILocation(line: 1046, column: 4, scope: !4463)
!4566 = !DILocation(line: 1047, column: 4, scope: !4463)
!4567 = !DILocation(line: 1048, column: 4, scope: !4463)
!4568 = !DILocation(line: 1049, column: 4, scope: !4463)
!4569 = !DILocation(line: 1050, column: 11, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 1050, column: 4)
!4571 = !DILocation(line: 1050, column: 9, scope: !4570)
!4572 = !DILocation(line: 1050, column: 16, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4570, file: !3, line: 1050, column: 4)
!4574 = !DILocation(line: 1050, column: 20, scope: !4573)
!4575 = !DILocation(line: 1050, column: 18, scope: !4573)
!4576 = !DILocation(line: 1050, column: 4, scope: !4570)
!4577 = !DILocation(line: 1052, column: 36, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4573, file: !3, line: 1051, column: 6)
!4579 = !DILocation(line: 1052, column: 14, scope: !4578)
!4580 = !DILocation(line: 1052, column: 12, scope: !4578)
!4581 = !DILocation(line: 1053, column: 8, scope: !4578)
!4582 = !DILocation(line: 1054, column: 8, scope: !4578)
!4583 = !DILocation(line: 1055, column: 35, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 1055, column: 12)
!4585 = !DILocation(line: 1055, column: 53, scope: !4584)
!4586 = !DILocation(line: 1055, column: 12, scope: !4584)
!4587 = !DILocation(line: 1055, column: 12, scope: !4578)
!4588 = !DILocation(line: 1057, column: 5, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 1056, column: 3)
!4590 = !DILocation(line: 1061, column: 5, scope: !4589)
!4591 = !DILocation(line: 1062, column: 35, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4589, file: !3, line: 1062, column: 10)
!4593 = !DILocation(line: 1062, column: 53, scope: !4592)
!4594 = !DILocation(line: 1062, column: 12, scope: !4592)
!4595 = !DILocation(line: 1065, column: 9, scope: !4592)
!4596 = !DILocation(line: 1065, column: 35, scope: !4592)
!4597 = !DILocation(line: 1065, column: 53, scope: !4592)
!4598 = !DILocation(line: 1065, column: 13, scope: !4592)
!4599 = !DILocation(line: 1066, column: 6, scope: !4592)
!4600 = !DILocation(line: 1067, column: 29, scope: !4592)
!4601 = !DILocation(line: 1067, column: 10, scope: !4592)
!4602 = !DILocation(line: 1069, column: 41, scope: !4592)
!4603 = !DILocation(line: 1069, column: 17, scope: !4592)
!4604 = !DILocation(line: 1069, column: 46, scope: !4592)
!4605 = !DILocation(line: 1068, column: 10, scope: !4592)
!4606 = !DILocation(line: 1066, column: 9, scope: !4592)
!4607 = !DILocation(line: 1062, column: 10, scope: !4589)
!4608 = !DILocation(line: 1070, column: 60, scope: !4592)
!4609 = !DILocation(line: 1070, column: 31, scope: !4592)
!4610 = !DILocation(line: 1070, column: 7, scope: !4592)
!4611 = !DILocation(line: 1070, column: 36, scope: !4592)
!4612 = !DILocation(line: 1070, column: 41, scope: !4592)
!4613 = !DILocation(line: 1071, column: 3, scope: !4589)
!4614 = !DILocation(line: 1072, column: 35, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 1072, column: 12)
!4616 = !DILocation(line: 1072, column: 53, scope: !4615)
!4617 = !DILocation(line: 1072, column: 12, scope: !4615)
!4618 = !DILocation(line: 1072, column: 12, scope: !4578)
!4619 = !DILocation(line: 1074, column: 5, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 1073, column: 3)
!4621 = !DILocation(line: 1077, column: 5, scope: !4620)
!4622 = !DILocation(line: 1078, column: 30, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1078, column: 10)
!4624 = !DILocation(line: 1078, column: 10, scope: !4623)
!4625 = !DILocation(line: 1078, column: 35, scope: !4623)
!4626 = !DILocation(line: 1078, column: 40, scope: !4623)
!4627 = !DILocation(line: 1079, column: 9, scope: !4623)
!4628 = !DILocation(line: 1079, column: 36, scope: !4623)
!4629 = !DILocation(line: 1079, column: 47, scope: !4623)
!4630 = !DILocation(line: 1079, column: 13, scope: !4623)
!4631 = !DILocation(line: 1081, column: 6, scope: !4623)
!4632 = !DILocation(line: 1081, column: 34, scope: !4623)
!4633 = !DILocation(line: 1082, column: 13, scope: !4623)
!4634 = !DILocation(line: 1081, column: 12, scope: !4623)
!4635 = !DILocation(line: 1086, column: 10, scope: !4623)
!4636 = !DILocation(line: 1087, column: 33, scope: !4623)
!4637 = !DILocation(line: 1087, column: 14, scope: !4623)
!4638 = !DILocation(line: 1089, column: 34, scope: !4623)
!4639 = !DILocation(line: 1089, column: 14, scope: !4623)
!4640 = !DILocation(line: 1089, column: 39, scope: !4623)
!4641 = !DILocation(line: 1088, column: 7, scope: !4623)
!4642 = !DILocation(line: 1086, column: 13, scope: !4623)
!4643 = !DILocation(line: 1078, column: 10, scope: !4620)
!4644 = !DILocation(line: 1090, column: 56, scope: !4623)
!4645 = !DILocation(line: 1090, column: 27, scope: !4623)
!4646 = !DILocation(line: 1090, column: 7, scope: !4623)
!4647 = !DILocation(line: 1090, column: 32, scope: !4623)
!4648 = !DILocation(line: 1090, column: 37, scope: !4623)
!4649 = !DILocation(line: 1091, column: 3, scope: !4620)
!4650 = !DILocation(line: 1092, column: 6, scope: !4578)
!4651 = !DILocation(line: 1050, column: 48, scope: !4573)
!4652 = !DILocation(line: 1050, column: 4, scope: !4573)
!4653 = distinct !{!4653, !4576, !4654}
!4654 = !DILocation(line: 1092, column: 6, scope: !4570)
!4655 = !DILocation(line: 1093, column: 2, scope: !4463)
!4656 = !DILocation(line: 1007, column: 45, scope: !4459)
!4657 = !DILocation(line: 1007, column: 7, scope: !4459)
!4658 = distinct !{!4658, !4461, !4659}
!4659 = !DILocation(line: 1093, column: 2, scope: !4456)
!4660 = !DILocation(line: 1094, column: 5, scope: !4452)
!4661 = !DILocation(line: 1004, column: 41, scope: !4448)
!4662 = !DILocation(line: 1004, column: 3, scope: !4448)
!4663 = distinct !{!4663, !4450, !4664}
!4664 = !DILocation(line: 1094, column: 5, scope: !4445)
!4665 = !DILocation(line: 1095, column: 1, scope: !4409)
!4666 = distinct !DISubprogram(name: "hard_reg_set_empty_p", scope: !930, file: !930, line: 133, type: !4667, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{!1004, !3732}
!4669 = !DILocalVariable(name: "x", arg: 1, scope: !4666, file: !930, line: 133, type: !3732)
!4670 = !DILocation(line: 133, column: 42, scope: !4666)
!4671 = !DILocation(line: 135, column: 10, scope: !4666)
!4672 = !DILocation(line: 135, column: 12, scope: !4666)
!4673 = !DILocation(line: 135, column: 3, scope: !4666)
!4674 = distinct !DISubprogram(name: "hard_reg_set_equal_p", scope: !930, file: !930, line: 121, type: !3730, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4675 = !DILocalVariable(name: "x", arg: 1, scope: !4674, file: !930, line: 121, type: !3732)
!4676 = !DILocation(line: 121, column: 42, scope: !4674)
!4677 = !DILocalVariable(name: "y", arg: 2, scope: !4674, file: !930, line: 121, type: !3732)
!4678 = !DILocation(line: 121, column: 64, scope: !4674)
!4679 = !DILocation(line: 123, column: 10, scope: !4674)
!4680 = !DILocation(line: 123, column: 15, scope: !4674)
!4681 = !DILocation(line: 123, column: 12, scope: !4674)
!4682 = !DILocation(line: 123, column: 3, scope: !4674)
!4683 = distinct !DISubprogram(name: "comp_reg_classes_func", scope: !3, file: !3, line: 929, type: !1408, scopeLine: 930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4684 = !DILocalVariable(name: "v1p", arg: 1, scope: !4683, file: !3, line: 929, type: !1403)
!4685 = !DILocation(line: 929, column: 36, scope: !4683)
!4686 = !DILocalVariable(name: "v2p", arg: 2, scope: !4683, file: !3, line: 929, type: !1403)
!4687 = !DILocation(line: 929, column: 53, scope: !4683)
!4688 = !DILocalVariable(name: "cl1", scope: !4683, file: !3, line: 931, type: !397)
!4689 = !DILocation(line: 931, column: 18, scope: !4683)
!4690 = !DILocation(line: 931, column: 50, scope: !4683)
!4691 = !DILocation(line: 931, column: 25, scope: !4683)
!4692 = !DILocation(line: 931, column: 24, scope: !4683)
!4693 = !DILocalVariable(name: "cl2", scope: !4683, file: !3, line: 932, type: !397)
!4694 = !DILocation(line: 932, column: 18, scope: !4683)
!4695 = !DILocation(line: 932, column: 50, scope: !4683)
!4696 = !DILocation(line: 932, column: 25, scope: !4683)
!4697 = !DILocation(line: 932, column: 24, scope: !4683)
!4698 = !DILocalVariable(name: "diff", scope: !4683, file: !3, line: 933, type: !926)
!4699 = !DILocation(line: 933, column: 7, scope: !4683)
!4700 = !DILocation(line: 935, column: 29, scope: !4683)
!4701 = !DILocation(line: 935, column: 9, scope: !4683)
!4702 = !DILocation(line: 935, column: 7, scope: !4683)
!4703 = !DILocation(line: 936, column: 29, scope: !4683)
!4704 = !DILocation(line: 936, column: 9, scope: !4683)
!4705 = !DILocation(line: 936, column: 7, scope: !4683)
!4706 = !DILocation(line: 937, column: 7, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 937, column: 7)
!4708 = !DILocation(line: 937, column: 11, scope: !4707)
!4709 = !DILocation(line: 937, column: 22, scope: !4707)
!4710 = !DILocation(line: 937, column: 25, scope: !4707)
!4711 = !DILocation(line: 937, column: 29, scope: !4707)
!4712 = !DILocation(line: 938, column: 7, scope: !4707)
!4713 = !DILocation(line: 938, column: 36, scope: !4707)
!4714 = !DILocation(line: 938, column: 18, scope: !4707)
!4715 = !DILocation(line: 938, column: 61, scope: !4707)
!4716 = !DILocation(line: 938, column: 43, scope: !4707)
!4717 = !DILocation(line: 938, column: 41, scope: !4707)
!4718 = !DILocation(line: 938, column: 16, scope: !4707)
!4719 = !DILocation(line: 938, column: 67, scope: !4707)
!4720 = !DILocation(line: 937, column: 7, scope: !4683)
!4721 = !DILocation(line: 939, column: 12, scope: !4707)
!4722 = !DILocation(line: 939, column: 5, scope: !4707)
!4723 = !DILocation(line: 940, column: 16, scope: !4683)
!4724 = !DILocation(line: 940, column: 28, scope: !4683)
!4725 = !DILocation(line: 940, column: 20, scope: !4683)
!4726 = !DILocation(line: 940, column: 3, scope: !4683)
!4727 = !DILocation(line: 941, column: 1, scope: !4683)
!4728 = distinct !DISubprogram(name: "hard_reg_set_intersect_p", scope: !930, file: !930, line: 127, type: !3730, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4729 = !DILocalVariable(name: "x", arg: 1, scope: !4728, file: !930, line: 127, type: !3732)
!4730 = !DILocation(line: 127, column: 46, scope: !4728)
!4731 = !DILocalVariable(name: "y", arg: 2, scope: !4728, file: !930, line: 127, type: !3732)
!4732 = !DILocation(line: 127, column: 68, scope: !4728)
!4733 = !DILocation(line: 129, column: 11, scope: !4728)
!4734 = !DILocation(line: 129, column: 15, scope: !4728)
!4735 = !DILocation(line: 129, column: 13, scope: !4728)
!4736 = !DILocation(line: 129, column: 18, scope: !4728)
!4737 = !DILocation(line: 129, column: 10, scope: !4728)
!4738 = !DILocation(line: 129, column: 3, scope: !4728)
!4739 = distinct !DISubprogram(name: "insn_contains_asm", scope: !3, file: !3, line: 1388, type: !4740, scopeLine: 1389, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4740 = !DISubroutineType(types: !4741)
!4741 = !{!1004, !1006}
!4742 = !DILocalVariable(name: "insn", arg: 1, scope: !4739, file: !3, line: 1388, type: !1006)
!4743 = !DILocation(line: 1388, column: 24, scope: !4739)
!4744 = !DILocation(line: 1390, column: 10, scope: !4739)
!4745 = !DILocation(line: 1390, column: 3, scope: !4739)
!4746 = distinct !DISubprogram(name: "insn_contains_asm_1", scope: !3, file: !3, line: 1376, type: !4747, scopeLine: 1377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4747 = !DISubroutineType(types: !4748)
!4748 = !{!926, !1005, !918}
!4749 = !DILocalVariable(name: "loc", arg: 1, scope: !4746, file: !3, line: 1376, type: !1005)
!4750 = !DILocation(line: 1376, column: 27, scope: !4746)
!4751 = !DILocalVariable(name: "data", arg: 2, scope: !4746, file: !3, line: 1376, type: !918)
!4752 = !DILocation(line: 1376, column: 38, scope: !4746)
!4753 = !DILocation(line: 1378, column: 10, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 1378, column: 8)
!4755 = !DILocation(line: 1378, column: 9, scope: !4754)
!4756 = !DILocation(line: 1378, column: 8, scope: !4746)
!4757 = !DILocation(line: 1379, column: 5, scope: !4754)
!4758 = !DILocation(line: 1380, column: 7, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 1380, column: 7)
!4760 = !DILocation(line: 1380, column: 23, scope: !4759)
!4761 = !DILocation(line: 1380, column: 7, scope: !4746)
!4762 = !DILocation(line: 1381, column: 5, scope: !4759)
!4763 = !DILocation(line: 1382, column: 3, scope: !4746)
!4764 = !DILocation(line: 1383, column: 1, scope: !4746)
!4765 = distinct !DISubprogram(name: "ira", scope: !3, file: !3, line: 3124, type: !2447, scopeLine: 3125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!4766 = !DILocalVariable(name: "f", arg: 1, scope: !4765, file: !3, line: 3124, type: !2255)
!4767 = !DILocation(line: 3124, column: 12, scope: !4765)
!4768 = !DILocalVariable(name: "overall_cost_before", scope: !4765, file: !3, line: 3126, type: !926)
!4769 = !DILocation(line: 3126, column: 7, scope: !4765)
!4770 = !DILocalVariable(name: "allocated_reg_info_size", scope: !4765, file: !3, line: 3126, type: !926)
!4771 = !DILocation(line: 3126, column: 28, scope: !4765)
!4772 = !DILocalVariable(name: "loops_p", scope: !4765, file: !3, line: 3127, type: !1004)
!4773 = !DILocation(line: 3127, column: 8, scope: !4765)
!4774 = !DILocalVariable(name: "max_regno_before_ira", scope: !4765, file: !3, line: 3128, type: !926)
!4775 = !DILocation(line: 3128, column: 7, scope: !4765)
!4776 = !DILocalVariable(name: "ira_max_point_before_emit", scope: !4765, file: !3, line: 3128, type: !926)
!4777 = !DILocation(line: 3128, column: 29, scope: !4765)
!4778 = !DILocalVariable(name: "rebuild_p", scope: !4765, file: !3, line: 3129, type: !926)
!4779 = !DILocation(line: 3129, column: 7, scope: !4765)
!4780 = !DILocalVariable(name: "saved_flag_ira_share_spill_slots", scope: !4765, file: !3, line: 3130, type: !926)
!4781 = !DILocation(line: 3130, column: 7, scope: !4765)
!4782 = !DILocalVariable(name: "bb", scope: !4765, file: !3, line: 3131, type: !1480)
!4783 = !DILocation(line: 3131, column: 15, scope: !4765)
!4784 = !DILocation(line: 3133, column: 3, scope: !4765)
!4785 = !DILocation(line: 3133, column: 3, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 3133, column: 3)
!4787 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3133, column: 3)
!4788 = !DILocation(line: 3133, column: 3, scope: !4787)
!4789 = !DILocation(line: 3135, column: 7, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3135, column: 7)
!4791 = !DILocation(line: 3135, column: 7, scope: !4765)
!4792 = !DILocation(line: 3136, column: 5, scope: !4790)
!4793 = !DILocation(line: 3138, column: 7, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3138, column: 7)
!4795 = !DILocation(line: 3138, column: 24, scope: !4794)
!4796 = !DILocation(line: 3138, column: 7, scope: !4765)
!4797 = !DILocation(line: 3140, column: 35, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 3139, column: 5)
!4799 = !DILocation(line: 3140, column: 33, scope: !4798)
!4800 = !DILocation(line: 3141, column: 23, scope: !4798)
!4801 = !DILocation(line: 3141, column: 21, scope: !4798)
!4802 = !DILocation(line: 3142, column: 5, scope: !4798)
!4803 = !DILocation(line: 3145, column: 35, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 3144, column: 5)
!4805 = !DILocation(line: 3145, column: 52, scope: !4804)
!4806 = !DILocation(line: 3145, column: 33, scope: !4804)
!4807 = !DILocation(line: 3146, column: 23, scope: !4804)
!4808 = !DILocation(line: 3146, column: 21, scope: !4804)
!4809 = !DILocation(line: 3149, column: 21, scope: !4765)
!4810 = !DILocation(line: 3149, column: 30, scope: !4765)
!4811 = !DILocation(line: 3149, column: 19, scope: !4765)
!4812 = !DILocation(line: 3150, column: 3, scope: !4765)
!4813 = !DILocation(line: 3152, column: 3, scope: !4765)
!4814 = !DILocation(line: 3154, column: 7, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3154, column: 7)
!4816 = !DILocation(line: 3154, column: 16, scope: !4815)
!4817 = !DILocation(line: 3154, column: 7, scope: !4765)
!4818 = !DILocation(line: 3156, column: 7, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 3155, column: 5)
!4820 = !DILocation(line: 3157, column: 7, scope: !4819)
!4821 = !DILocation(line: 3158, column: 5, scope: !4819)
!4822 = !DILocation(line: 3162, column: 3, scope: !4765)
!4823 = !DILocation(line: 3163, column: 3, scope: !4765)
!4824 = !DILocation(line: 3164, column: 3, scope: !4765)
!4825 = !DILocation(line: 3165, column: 3, scope: !4765)
!4826 = !DILocation(line: 3170, column: 7, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3170, column: 7)
!4828 = !DILocation(line: 3170, column: 7, scope: !4765)
!4829 = !DILocation(line: 3171, column: 5, scope: !4827)
!4830 = !DILocation(line: 3176, column: 30, scope: !4765)
!4831 = !DILocation(line: 3176, column: 28, scope: !4765)
!4832 = !DILocation(line: 3178, column: 7, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3178, column: 7)
!4834 = !DILocation(line: 3178, column: 26, scope: !4833)
!4835 = !DILocation(line: 3178, column: 29, scope: !4833)
!4836 = !DILocation(line: 3178, column: 7, scope: !4765)
!4837 = !DILocation(line: 3179, column: 29, scope: !4833)
!4838 = !DILocation(line: 3179, column: 5, scope: !4833)
!4839 = !DILocation(line: 3181, column: 15, scope: !4765)
!4840 = !DILocation(line: 3181, column: 13, scope: !4765)
!4841 = !DILocation(line: 3186, column: 3, scope: !4765)
!4842 = !DILocation(line: 3187, column: 7, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3187, column: 7)
!4844 = !DILocation(line: 3187, column: 7, scope: !4765)
!4845 = !DILocation(line: 3189, column: 19, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 3188, column: 5)
!4847 = !DILocation(line: 3189, column: 17, scope: !4846)
!4848 = !DILocation(line: 3190, column: 27, scope: !4846)
!4849 = !DILocation(line: 3190, column: 25, scope: !4846)
!4850 = !DILocation(line: 3192, column: 27, scope: !4846)
!4851 = !DILocation(line: 3192, column: 37, scope: !4846)
!4852 = !DILocation(line: 3192, column: 13, scope: !4846)
!4853 = !DILocation(line: 3192, column: 2, scope: !4846)
!4854 = !DILocation(line: 3193, column: 15, scope: !4846)
!4855 = !DILocation(line: 3193, column: 45, scope: !4846)
!4856 = !DILocation(line: 3193, column: 55, scope: !4846)
!4857 = !DILocation(line: 3193, column: 7, scope: !4846)
!4858 = !DILocation(line: 3194, column: 51, scope: !4846)
!4859 = !DILocation(line: 3194, column: 61, scope: !4846)
!4860 = !DILocation(line: 3194, column: 37, scope: !4846)
!4861 = !DILocation(line: 3194, column: 29, scope: !4846)
!4862 = !DILocation(line: 3194, column: 27, scope: !4846)
!4863 = !DILocation(line: 3195, column: 15, scope: !4846)
!4864 = !DILocation(line: 3195, column: 7, scope: !4846)
!4865 = !DILocation(line: 3195, column: 39, scope: !4846)
!4866 = !DILocation(line: 3195, column: 49, scope: !4846)
!4867 = !DILocation(line: 3196, column: 7, scope: !4846)
!4868 = !DILocation(line: 3197, column: 11, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 3197, column: 11)
!4870 = !DILocation(line: 3197, column: 11, scope: !4846)
!4871 = !DILocation(line: 3199, column: 4, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 3198, column: 2)
!4873 = !DILocation(line: 3199, column: 4, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4875, file: !3, line: 3199, column: 4)
!4875 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 3199, column: 4)
!4876 = !DILocation(line: 3199, column: 4, scope: !4875)
!4877 = !DILocation(line: 3200, column: 25, scope: !4872)
!4878 = !DILocation(line: 3200, column: 4, scope: !4872)
!4879 = !DILocation(line: 3201, column: 4, scope: !4872)
!4880 = !DILocation(line: 3202, column: 4, scope: !4872)
!4881 = !DILocation(line: 3202, column: 4, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 3202, column: 4)
!4883 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 3202, column: 4)
!4884 = !DILocation(line: 3202, column: 4, scope: !4883)
!4885 = !DILocation(line: 3203, column: 2, scope: !4872)
!4886 = !DILocation(line: 3204, column: 5, scope: !4846)
!4887 = !DILocation(line: 3206, column: 52, scope: !4765)
!4888 = !DILocation(line: 3206, column: 50, scope: !4765)
!4889 = !DILocation(line: 3206, column: 24, scope: !4765)
!4890 = !DILocation(line: 3207, column: 3, scope: !4765)
!4891 = !DILocation(line: 3209, column: 50, scope: !4765)
!4892 = !DILocation(line: 3209, column: 35, scope: !4765)
!4893 = !DILocation(line: 3209, column: 20, scope: !4765)
!4894 = !DILocation(line: 3210, column: 53, scope: !4765)
!4895 = !DILocation(line: 3210, column: 34, scope: !4765)
!4896 = !DILocation(line: 3210, column: 17, scope: !4765)
!4897 = !DILocation(line: 3211, column: 49, scope: !4765)
!4898 = !DILocation(line: 3211, column: 22, scope: !4765)
!4899 = !DILocation(line: 3214, column: 3, scope: !4765)
!4900 = !DILocation(line: 3215, column: 3, scope: !4765)
!4901 = !DILocation(line: 3216, column: 3, scope: !4765)
!4902 = !DILocation(line: 3216, column: 17, scope: !4765)
!4903 = !DILocation(line: 3218, column: 7, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3218, column: 7)
!4905 = !DILocation(line: 3218, column: 33, scope: !4904)
!4906 = !DILocation(line: 3218, column: 37, scope: !4904)
!4907 = !DILocation(line: 3218, column: 40, scope: !4904)
!4908 = !DILocation(line: 3218, column: 54, scope: !4904)
!4909 = !DILocation(line: 3218, column: 7, scope: !4765)
!4910 = !DILocation(line: 3219, column: 14, scope: !4904)
!4911 = !DILocation(line: 3219, column: 5, scope: !4904)
!4912 = !DILocation(line: 3220, column: 24, scope: !4765)
!4913 = !DILocation(line: 3221, column: 10, scope: !4765)
!4914 = !DILocation(line: 3221, column: 14, scope: !4765)
!4915 = !DILocation(line: 3221, column: 30, scope: !4765)
!4916 = !DILocation(line: 3222, column: 7, scope: !4765)
!4917 = !DILocation(line: 3222, column: 10, scope: !4765)
!4918 = !DILocation(line: 3222, column: 26, scope: !4765)
!4919 = !DILocation(line: 0, scope: !4765)
!4920 = !DILocation(line: 3220, column: 13, scope: !4765)
!4921 = !DILocation(line: 3220, column: 11, scope: !4765)
!4922 = !DILocation(line: 3226, column: 38, scope: !4765)
!4923 = !DILocation(line: 3226, column: 36, scope: !4765)
!4924 = !DILocation(line: 3227, column: 7, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3227, column: 7)
!4926 = !DILocation(line: 3227, column: 7, scope: !4765)
!4927 = !DILocation(line: 3230, column: 32, scope: !4925)
!4928 = !DILocation(line: 3230, column: 5, scope: !4925)
!4929 = !DILocation(line: 3232, column: 3, scope: !4765)
!4930 = !DILocation(line: 3234, column: 31, scope: !4765)
!4931 = !DILocation(line: 3234, column: 29, scope: !4765)
!4932 = !DILocation(line: 3236, column: 13, scope: !4765)
!4933 = !DILocation(line: 3236, column: 3, scope: !4765)
!4934 = !DILocation(line: 3238, column: 7, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3238, column: 7)
!4936 = !DILocation(line: 3238, column: 7, scope: !4765)
!4937 = !DILocation(line: 3240, column: 19, scope: !4938)
!4938 = distinct !DILexicalBlock(scope: !4935, file: !3, line: 3239, column: 5)
!4939 = !DILocation(line: 3240, column: 17, scope: !4938)
!4940 = !DILocation(line: 3242, column: 13, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4938, file: !3, line: 3242, column: 11)
!4942 = !DILocation(line: 3242, column: 11, scope: !4938)
!4943 = !DILocation(line: 3243, column: 2, scope: !4941)
!4944 = !DILocation(line: 3246, column: 21, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4941, file: !3, line: 3245, column: 2)
!4946 = !DILocation(line: 3246, column: 4, scope: !4945)
!4947 = !DILocation(line: 3248, column: 7, scope: !4945)
!4948 = !DILocation(line: 3247, column: 4, scope: !4945)
!4949 = !DILocation(line: 3249, column: 30, scope: !4945)
!4950 = !DILocation(line: 3249, column: 28, scope: !4945)
!4951 = !DILocation(line: 3251, column: 8, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 3251, column: 8)
!4953 = !DILocation(line: 3251, column: 34, scope: !4952)
!4954 = !DILocation(line: 3251, column: 38, scope: !4952)
!4955 = !DILocation(line: 3251, column: 41, scope: !4952)
!4956 = !DILocation(line: 3251, column: 55, scope: !4952)
!4957 = !DILocation(line: 3251, column: 8, scope: !4945)
!4958 = !DILocation(line: 3252, column: 15, scope: !4952)
!4959 = !DILocation(line: 3252, column: 6, scope: !4952)
!4960 = !DILocation(line: 3253, column: 20, scope: !4945)
!4961 = !DILocation(line: 3253, column: 42, scope: !4945)
!4962 = !DILocation(line: 3253, column: 4, scope: !4945)
!4963 = !DILocation(line: 3256, column: 4, scope: !4945)
!4964 = !DILocation(line: 3258, column: 4, scope: !4945)
!4965 = !DILocation(line: 3259, column: 4, scope: !4945)
!4966 = !DILocation(line: 3260, column: 4, scope: !4945)
!4967 = !DILocation(line: 3260, column: 18, scope: !4945)
!4968 = !DILocation(line: 3262, column: 4, scope: !4945)
!4969 = !DILocation(line: 3263, column: 4, scope: !4945)
!4970 = !DILocation(line: 3264, column: 36, scope: !4945)
!4971 = !DILocation(line: 3264, column: 4, scope: !4945)
!4972 = !DILocation(line: 3266, column: 5, scope: !4938)
!4973 = !DILocation(line: 3268, column: 3, scope: !4765)
!4974 = !DILocation(line: 3270, column: 3, scope: !4765)
!4975 = !DILocation(line: 3277, column: 32, scope: !4765)
!4976 = !DILocation(line: 3277, column: 46, scope: !4765)
!4977 = !DILocation(line: 3277, column: 3, scope: !4765)
!4978 = !DILocation(line: 3278, column: 15, scope: !4765)
!4979 = !DILocation(line: 3278, column: 13, scope: !4765)
!4980 = !DILocation(line: 3281, column: 3, scope: !4765)
!4981 = !DILocation(line: 3282, column: 11, scope: !4765)
!4982 = !DILocation(line: 3282, column: 3, scope: !4765)
!4983 = !DILocation(line: 3283, column: 19, scope: !4765)
!4984 = !DILocation(line: 3283, column: 17, scope: !4765)
!4985 = !DILocation(line: 3284, column: 26, scope: !4765)
!4986 = !DILocation(line: 3284, column: 24, scope: !4765)
!4987 = !DILocation(line: 3286, column: 7, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3286, column: 7)
!4989 = !DILocation(line: 3286, column: 20, scope: !4988)
!4990 = !DILocation(line: 3286, column: 17, scope: !4988)
!4991 = !DILocation(line: 3286, column: 7, scope: !4765)
!4992 = !DILocation(line: 3288, column: 7, scope: !4993)
!4993 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 3287, column: 5)
!4994 = !DILocation(line: 3289, column: 7, scope: !4993)
!4995 = !DILocation(line: 3290, column: 7, scope: !4993)
!4996 = !DILocation(line: 3291, column: 7, scope: !4993)
!4997 = !DILocation(line: 3292, column: 5, scope: !4993)
!4998 = !DILocation(line: 3294, column: 28, scope: !4765)
!4999 = !DILocation(line: 3294, column: 3, scope: !4765)
!5000 = !DILocation(line: 3296, column: 25, scope: !4765)
!5001 = !DILocation(line: 3296, column: 23, scope: !4765)
!5002 = !DILocation(line: 3297, column: 7, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3297, column: 7)
!5004 = !DILocation(line: 3297, column: 7, scope: !4765)
!5005 = !DILocation(line: 3299, column: 7, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !5003, file: !3, line: 3298, column: 5)
!5007 = !DILocation(line: 3305, column: 39, scope: !5006)
!5008 = !DILocation(line: 3308, column: 19, scope: !5006)
!5009 = !DILocation(line: 3309, column: 5, scope: !5006)
!5010 = !DILocation(line: 3308, column: 5, scope: !5006)
!5011 = !DILocation(line: 3307, column: 5, scope: !5006)
!5012 = !DILocation(line: 3307, column: 2, scope: !5006)
!5013 = !DILocation(line: 3310, column: 15, scope: !5006)
!5014 = !DILocation(line: 3310, column: 7, scope: !5006)
!5015 = !DILocation(line: 3311, column: 8, scope: !5006)
!5016 = !DILocation(line: 3311, column: 18, scope: !5006)
!5017 = !DILocation(line: 3312, column: 5, scope: !5006)
!5018 = !DILocation(line: 3314, column: 3, scope: !4765)
!5019 = !DILocation(line: 3314, column: 3, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !5021, file: !3, line: 3314, column: 3)
!5021 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3314, column: 3)
!5022 = !DILocation(line: 3314, column: 3, scope: !5021)
!5023 = !DILocation(line: 3316, column: 3, scope: !4765)
!5024 = !DILocation(line: 3316, column: 3, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 3316, column: 3)
!5026 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3316, column: 3)
!5027 = !DILocation(line: 3316, column: 3, scope: !5026)
!5028 = !DILocation(line: 3317, column: 3, scope: !4765)
!5029 = !DILocation(line: 3318, column: 3, scope: !4765)
!5030 = !DILocation(line: 3320, column: 31, scope: !4765)
!5031 = !DILocation(line: 3320, column: 45, scope: !4765)
!5032 = !DILocation(line: 3320, column: 23, scope: !4765)
!5033 = !DILocation(line: 3320, column: 22, scope: !4765)
!5034 = !DILocation(line: 3320, column: 20, scope: !4765)
!5035 = !DILocation(line: 3322, column: 3, scope: !4765)
!5036 = !DILocation(line: 3324, column: 3, scope: !4765)
!5037 = !DILocation(line: 3324, column: 3, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 3324, column: 3)
!5039 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3324, column: 3)
!5040 = !DILocation(line: 3324, column: 3, scope: !5039)
!5041 = !DILocation(line: 3326, column: 3, scope: !4765)
!5042 = !DILocation(line: 3326, column: 3, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 3326, column: 3)
!5044 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3326, column: 3)
!5045 = !DILocation(line: 3326, column: 3, scope: !5044)
!5046 = !DILocation(line: 3328, column: 7, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3328, column: 7)
!5048 = !DILocation(line: 3328, column: 7, scope: !4765)
!5049 = !DILocation(line: 3330, column: 17, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5047, file: !3, line: 3329, column: 5)
!5051 = !DILocation(line: 3330, column: 7, scope: !5050)
!5052 = !DILocation(line: 3332, column: 7, scope: !5050)
!5053 = !DILocation(line: 3334, column: 5, scope: !5050)
!5054 = !DILocation(line: 3335, column: 7, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3335, column: 7)
!5056 = !DILocation(line: 3335, column: 33, scope: !5055)
!5057 = !DILocation(line: 3335, column: 37, scope: !5055)
!5058 = !DILocation(line: 3335, column: 40, scope: !5055)
!5059 = !DILocation(line: 3335, column: 54, scope: !5055)
!5060 = !DILocation(line: 3336, column: 7, scope: !5055)
!5061 = !DILocation(line: 3336, column: 10, scope: !5055)
!5062 = !DILocation(line: 3336, column: 33, scope: !5055)
!5063 = !DILocation(line: 3336, column: 30, scope: !5055)
!5064 = !DILocation(line: 3335, column: 7, scope: !4765)
!5065 = !DILocation(line: 3337, column: 14, scope: !5055)
!5066 = !DILocation(line: 3337, column: 61, scope: !5055)
!5067 = !DILocation(line: 3337, column: 5, scope: !5055)
!5068 = !DILocation(line: 3338, column: 3, scope: !4765)
!5069 = !DILocation(line: 3340, column: 32, scope: !4765)
!5070 = !DILocation(line: 3340, column: 30, scope: !4765)
!5071 = !DILocation(line: 3342, column: 3, scope: !4765)
!5072 = !DILocation(line: 3343, column: 3, scope: !4765)
!5073 = !DILocation(line: 3344, column: 3, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3344, column: 3)
!5075 = !DILocation(line: 3344, column: 3, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5074, file: !3, line: 3344, column: 3)
!5077 = !DILocation(line: 3345, column: 5, scope: !5076)
!5078 = !DILocation(line: 3345, column: 9, scope: !5076)
!5079 = !DILocation(line: 3345, column: 21, scope: !5076)
!5080 = distinct !{!5080, !5073, !5081}
!5081 = !DILocation(line: 3345, column: 23, scope: !5074)
!5082 = !DILocation(line: 3346, column: 3, scope: !4765)
!5083 = !DILocation(line: 3346, column: 17, scope: !4765)
!5084 = !DILocation(line: 3348, column: 3, scope: !4765)
!5085 = !DILocation(line: 3349, column: 3, scope: !4765)
!5086 = !DILocation(line: 3351, column: 7, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3351, column: 7)
!5088 = !DILocation(line: 3351, column: 7, scope: !4765)
!5089 = !DILocation(line: 3353, column: 7, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5087, file: !3, line: 3352, column: 5)
!5091 = !DILocation(line: 3355, column: 17, scope: !5090)
!5092 = !DILocation(line: 3355, column: 7, scope: !5090)
!5093 = !DILocation(line: 3356, column: 17, scope: !5090)
!5094 = !DILocation(line: 3356, column: 7, scope: !5090)
!5095 = !DILocation(line: 3357, column: 5, scope: !5090)
!5096 = !DILocation(line: 3359, column: 3, scope: !4765)
!5097 = !DILocation(line: 3368, column: 3, scope: !4765)
!5098 = !DILocation(line: 3369, column: 7, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3369, column: 7)
!5100 = !DILocation(line: 3369, column: 16, scope: !5099)
!5101 = !DILocation(line: 3369, column: 7, scope: !4765)
!5102 = !DILocation(line: 3370, column: 5, scope: !5099)
!5103 = !DILocation(line: 3371, column: 3, scope: !4765)
!5104 = !DILocation(line: 3372, column: 3, scope: !4765)
!5105 = !DILocation(line: 3374, column: 7, scope: !5106)
!5106 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3374, column: 7)
!5107 = !DILocation(line: 3374, column: 7, scope: !4765)
!5108 = !DILocation(line: 3375, column: 5, scope: !5106)
!5109 = !DILocation(line: 3377, column: 3, scope: !4765)
!5110 = !DILocation(line: 3377, column: 3, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 3377, column: 3)
!5112 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 3377, column: 3)
!5113 = !DILocation(line: 3377, column: 3, scope: !5112)
!5114 = !DILocation(line: 3378, column: 1, scope: !4765)
!5115 = distinct !DISubprogram(name: "setup_prohibited_mode_move_regs", scope: !3, file: !3, line: 1333, type: !2213, scopeLine: 1334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!5116 = !DILocalVariable(name: "i", scope: !5115, file: !3, line: 1335, type: !926)
!5117 = !DILocation(line: 1335, column: 7, scope: !5115)
!5118 = !DILocalVariable(name: "j", scope: !5115, file: !3, line: 1335, type: !926)
!5119 = !DILocation(line: 1335, column: 10, scope: !5115)
!5120 = !DILocalVariable(name: "test_reg1", scope: !5115, file: !3, line: 1336, type: !1006)
!5121 = !DILocation(line: 1336, column: 7, scope: !5115)
!5122 = !DILocalVariable(name: "test_reg2", scope: !5115, file: !3, line: 1336, type: !1006)
!5123 = !DILocation(line: 1336, column: 18, scope: !5115)
!5124 = !DILocalVariable(name: "move_pat", scope: !5115, file: !3, line: 1336, type: !1006)
!5125 = !DILocation(line: 1336, column: 29, scope: !5115)
!5126 = !DILocalVariable(name: "move_insn", scope: !5115, file: !3, line: 1336, type: !1006)
!5127 = !DILocation(line: 1336, column: 39, scope: !5115)
!5128 = !DILocation(line: 1338, column: 7, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 1338, column: 7)
!5130 = !DILocation(line: 1338, column: 7, scope: !5115)
!5131 = !DILocation(line: 1339, column: 5, scope: !5129)
!5132 = !DILocation(line: 1340, column: 47, scope: !5115)
!5133 = !DILocation(line: 1341, column: 15, scope: !5115)
!5134 = !DILocation(line: 1341, column: 13, scope: !5115)
!5135 = !DILocation(line: 1342, column: 15, scope: !5115)
!5136 = !DILocation(line: 1342, column: 13, scope: !5115)
!5137 = !DILocation(line: 1343, column: 14, scope: !5115)
!5138 = !DILocation(line: 1343, column: 12, scope: !5115)
!5139 = !DILocation(line: 1344, column: 15, scope: !5115)
!5140 = !DILocation(line: 1344, column: 13, scope: !5115)
!5141 = !DILocation(line: 1345, column: 10, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 1345, column: 3)
!5143 = !DILocation(line: 1345, column: 8, scope: !5142)
!5144 = !DILocation(line: 1345, column: 15, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 1345, column: 3)
!5146 = !DILocation(line: 1345, column: 17, scope: !5145)
!5147 = !DILocation(line: 1345, column: 3, scope: !5142)
!5148 = !DILocation(line: 1347, column: 7, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5145, file: !3, line: 1346, column: 5)
!5150 = !DILocation(line: 1348, column: 14, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1348, column: 7)
!5152 = !DILocation(line: 1348, column: 12, scope: !5151)
!5153 = !DILocation(line: 1348, column: 19, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 1348, column: 7)
!5155 = !DILocation(line: 1348, column: 21, scope: !5154)
!5156 = !DILocation(line: 1348, column: 7, scope: !5151)
!5157 = !DILocation(line: 1350, column: 10, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1350, column: 8)
!5159 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 1349, column: 2)
!5160 = !DILocation(line: 1350, column: 8, scope: !5159)
!5161 = !DILocation(line: 1351, column: 6, scope: !5158)
!5162 = !DILocation(line: 1352, column: 4, scope: !5159)
!5163 = !DILocation(line: 1353, column: 4, scope: !5159)
!5164 = !DILocation(line: 1354, column: 4, scope: !5159)
!5165 = !DILocation(line: 1355, column: 4, scope: !5159)
!5166 = !DILocation(line: 1356, column: 4, scope: !5159)
!5167 = !DILocation(line: 1356, column: 26, scope: !5159)
!5168 = !DILocation(line: 1357, column: 20, scope: !5159)
!5169 = !DILocation(line: 1357, column: 4, scope: !5159)
!5170 = !DILocation(line: 1358, column: 8, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1358, column: 8)
!5172 = !DILocation(line: 1358, column: 30, scope: !5171)
!5173 = !DILocation(line: 1358, column: 8, scope: !5159)
!5174 = !DILocation(line: 1359, column: 6, scope: !5171)
!5175 = !DILocation(line: 1360, column: 18, scope: !5159)
!5176 = !DILocation(line: 1360, column: 4, scope: !5159)
!5177 = !DILocation(line: 1361, column: 10, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5159, file: !3, line: 1361, column: 8)
!5179 = !DILocation(line: 1361, column: 8, scope: !5159)
!5180 = !DILocation(line: 1362, column: 6, scope: !5178)
!5181 = !DILocation(line: 1363, column: 4, scope: !5159)
!5182 = !DILocation(line: 1364, column: 2, scope: !5159)
!5183 = !DILocation(line: 1348, column: 47, scope: !5154)
!5184 = !DILocation(line: 1348, column: 7, scope: !5154)
!5185 = distinct !{!5185, !5156, !5186}
!5186 = !DILocation(line: 1364, column: 2, scope: !5151)
!5187 = !DILocation(line: 1365, column: 5, scope: !5149)
!5188 = !DILocation(line: 1345, column: 39, scope: !5145)
!5189 = !DILocation(line: 1345, column: 3, scope: !5145)
!5190 = distinct !{!5190, !5147, !5191}
!5191 = !DILocation(line: 1365, column: 5, scope: !5142)
!5192 = !DILocation(line: 1366, column: 1, scope: !5115)
!5193 = distinct !DISubprogram(name: "update_equiv_regs", scope: !3, file: !3, line: 2321, type: !5194, scopeLine: 2322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!5194 = !DISubroutineType(types: !5195)
!5195 = !{!926}
!5196 = !DILocalVariable(name: "insn", scope: !5193, file: !3, line: 2323, type: !1006)
!5197 = !DILocation(line: 2323, column: 7, scope: !5193)
!5198 = !DILocalVariable(name: "bb", scope: !5193, file: !3, line: 2324, type: !1480)
!5199 = !DILocation(line: 2324, column: 15, scope: !5193)
!5200 = !DILocalVariable(name: "loop_depth", scope: !5193, file: !3, line: 2325, type: !926)
!5201 = !DILocation(line: 2325, column: 7, scope: !5193)
!5202 = !DILocalVariable(name: "cleared_regs", scope: !5193, file: !3, line: 2326, type: !938)
!5203 = !DILocation(line: 2326, column: 10, scope: !5193)
!5204 = !DILocation(line: 2330, column: 22, scope: !5193)
!5205 = !DILocation(line: 2332, column: 15, scope: !5193)
!5206 = !DILocation(line: 2332, column: 13, scope: !5193)
!5207 = !DILocation(line: 2333, column: 20, scope: !5193)
!5208 = !DILocation(line: 2333, column: 18, scope: !5193)
!5209 = !DILocation(line: 2334, column: 25, scope: !5193)
!5210 = !DILocation(line: 2334, column: 23, scope: !5193)
!5211 = !DILocation(line: 2336, column: 3, scope: !5193)
!5212 = !DILocation(line: 2341, column: 3, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2341, column: 3)
!5214 = !DILocation(line: 2341, column: 3, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5213, file: !3, line: 2341, column: 3)
!5216 = !DILocation(line: 2343, column: 20, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5215, file: !3, line: 2342, column: 5)
!5218 = !DILocation(line: 2343, column: 24, scope: !5217)
!5219 = !DILocation(line: 2343, column: 18, scope: !5217)
!5220 = !DILocation(line: 2345, column: 19, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 2345, column: 7)
!5222 = !DILocation(line: 2345, column: 17, scope: !5221)
!5223 = !DILocation(line: 2345, column: 12, scope: !5221)
!5224 = !DILocation(line: 2346, column: 5, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 2345, column: 7)
!5226 = !DILocation(line: 2346, column: 13, scope: !5225)
!5227 = !DILocation(line: 2346, column: 10, scope: !5225)
!5228 = !DILocation(line: 2345, column: 7, scope: !5221)
!5229 = !DILocalVariable(name: "note", scope: !5230, file: !3, line: 2349, type: !1006)
!5230 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 2348, column: 2)
!5231 = !DILocation(line: 2349, column: 8, scope: !5230)
!5232 = !DILocalVariable(name: "set", scope: !5230, file: !3, line: 2350, type: !1006)
!5233 = !DILocation(line: 2350, column: 8, scope: !5230)
!5234 = !DILocalVariable(name: "dest", scope: !5230, file: !3, line: 2351, type: !1006)
!5235 = !DILocation(line: 2351, column: 8, scope: !5230)
!5236 = !DILocalVariable(name: "src", scope: !5230, file: !3, line: 2351, type: !1006)
!5237 = !DILocation(line: 2351, column: 14, scope: !5230)
!5238 = !DILocalVariable(name: "regno", scope: !5230, file: !3, line: 2352, type: !926)
!5239 = !DILocation(line: 2352, column: 8, scope: !5230)
!5240 = !DILocation(line: 2354, column: 10, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2354, column: 8)
!5242 = !DILocation(line: 2354, column: 8, scope: !5230)
!5243 = !DILocation(line: 2355, column: 6, scope: !5241)
!5244 = !DILocation(line: 2357, column: 16, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2357, column: 4)
!5246 = !DILocation(line: 2357, column: 14, scope: !5245)
!5247 = !DILocation(line: 2357, column: 9, scope: !5245)
!5248 = !DILocation(line: 2357, column: 34, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5245, file: !3, line: 2357, column: 4)
!5250 = !DILocation(line: 2357, column: 4, scope: !5245)
!5251 = !DILocation(line: 2358, column: 10, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5249, file: !3, line: 2358, column: 10)
!5253 = !DILocation(line: 2358, column: 31, scope: !5252)
!5254 = !DILocation(line: 2358, column: 10, scope: !5249)
!5255 = !DILocation(line: 2359, column: 18, scope: !5252)
!5256 = !DILocation(line: 2359, column: 34, scope: !5252)
!5257 = !DILocation(line: 2359, column: 8, scope: !5252)
!5258 = !DILocation(line: 2358, column: 34, scope: !5252)
!5259 = !DILocation(line: 2357, column: 47, scope: !5249)
!5260 = !DILocation(line: 2357, column: 45, scope: !5249)
!5261 = !DILocation(line: 2357, column: 4, scope: !5249)
!5262 = distinct !{!5262, !5250, !5263}
!5263 = !DILocation(line: 2359, column: 44, scope: !5245)
!5264 = !DILocation(line: 2361, column: 10, scope: !5230)
!5265 = !DILocation(line: 2361, column: 8, scope: !5230)
!5266 = !DILocation(line: 2365, column: 8, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2365, column: 8)
!5268 = !DILocation(line: 2365, column: 12, scope: !5267)
!5269 = !DILocation(line: 2365, column: 8, scope: !5230)
!5270 = !DILocation(line: 2367, column: 21, scope: !5271)
!5271 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 2366, column: 6)
!5272 = !DILocation(line: 2367, column: 8, scope: !5271)
!5273 = !DILocation(line: 2368, column: 8, scope: !5271)
!5274 = !DILocation(line: 2370, column: 13, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 2370, column: 13)
!5276 = !DILocation(line: 2370, column: 39, scope: !5275)
!5277 = !DILocation(line: 2370, column: 13, scope: !5267)
!5278 = !DILocalVariable(name: "i", scope: !5279, file: !3, line: 2372, type: !926)
!5279 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 2371, column: 6)
!5280 = !DILocation(line: 2372, column: 12, scope: !5279)
!5281 = !DILocation(line: 2374, column: 17, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 2374, column: 8)
!5283 = !DILocation(line: 2374, column: 45, scope: !5282)
!5284 = !DILocation(line: 2374, column: 15, scope: !5282)
!5285 = !DILocation(line: 2374, column: 13, scope: !5282)
!5286 = !DILocation(line: 2374, column: 50, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5282, file: !3, line: 2374, column: 8)
!5288 = !DILocation(line: 2374, column: 52, scope: !5287)
!5289 = !DILocation(line: 2374, column: 8, scope: !5282)
!5290 = !DILocalVariable(name: "part", scope: !5291, file: !3, line: 2376, type: !1006)
!5291 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 2375, column: 3)
!5292 = !DILocation(line: 2376, column: 9, scope: !5291)
!5293 = !DILocation(line: 2376, column: 16, scope: !5291)
!5294 = !DILocation(line: 2377, column: 9, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 2377, column: 9)
!5296 = !DILocation(line: 2377, column: 17, scope: !5295)
!5297 = !DILocation(line: 2377, column: 14, scope: !5295)
!5298 = !DILocation(line: 2377, column: 9, scope: !5291)
!5299 = !DILocation(line: 2378, column: 20, scope: !5295)
!5300 = !DILocation(line: 2378, column: 7, scope: !5295)
!5301 = !DILocation(line: 2379, column: 3, scope: !5291)
!5302 = !DILocation(line: 2374, column: 59, scope: !5287)
!5303 = !DILocation(line: 2374, column: 8, scope: !5287)
!5304 = distinct !{!5304, !5289, !5305}
!5305 = !DILocation(line: 2379, column: 3, scope: !5282)
!5306 = !DILocation(line: 2380, column: 6, scope: !5279)
!5307 = !DILocation(line: 2382, column: 11, scope: !5230)
!5308 = !DILocation(line: 2382, column: 9, scope: !5230)
!5309 = !DILocation(line: 2383, column: 10, scope: !5230)
!5310 = !DILocation(line: 2383, column: 8, scope: !5230)
!5311 = !DILocation(line: 2387, column: 26, scope: !5230)
!5312 = !DILocation(line: 2387, column: 11, scope: !5230)
!5313 = !DILocation(line: 2387, column: 9, scope: !5230)
!5314 = !DILocation(line: 2388, column: 8, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2388, column: 8)
!5316 = !DILocation(line: 2388, column: 8, scope: !5230)
!5317 = !DILocation(line: 2390, column: 8, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 2389, column: 6)
!5319 = !DILocation(line: 2391, column: 16, scope: !5318)
!5320 = !DILocation(line: 2391, column: 14, scope: !5318)
!5321 = !DILocation(line: 2395, column: 8, scope: !5318)
!5322 = !DILocation(line: 2395, column: 18, scope: !5318)
!5323 = !DILocation(line: 2395, column: 25, scope: !5318)
!5324 = !DILocation(line: 2395, column: 44, scope: !5318)
!5325 = !DILocation(line: 2398, column: 25, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 2398, column: 12)
!5327 = !DILocation(line: 2398, column: 30, scope: !5326)
!5328 = !DILocation(line: 2398, column: 12, scope: !5326)
!5329 = !DILocation(line: 2398, column: 12, scope: !5318)
!5330 = !DILocation(line: 2400, column: 7, scope: !5326)
!5331 = !DILocation(line: 2399, column: 3, scope: !5326)
!5332 = !DILocation(line: 2399, column: 18, scope: !5326)
!5333 = !DILocation(line: 2400, column: 5, scope: !5326)
!5334 = !DILocation(line: 2404, column: 6, scope: !5318)
!5335 = !DILocation(line: 2406, column: 9, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2406, column: 8)
!5337 = !DILocation(line: 2406, column: 8, scope: !5230)
!5338 = !DILocation(line: 2407, column: 6, scope: !5336)
!5339 = !DILocation(line: 2421, column: 9, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2421, column: 8)
!5341 = !DILocation(line: 2422, column: 8, scope: !5340)
!5342 = !DILocation(line: 2422, column: 20, scope: !5340)
!5343 = !DILocation(line: 2422, column: 18, scope: !5340)
!5344 = !DILocation(line: 2422, column: 34, scope: !5340)
!5345 = !DILocation(line: 2423, column: 8, scope: !5340)
!5346 = !DILocation(line: 2423, column: 11, scope: !5340)
!5347 = !DILocation(line: 2423, column: 21, scope: !5340)
!5348 = !DILocation(line: 2423, column: 28, scope: !5340)
!5349 = !DILocation(line: 2423, column: 42, scope: !5340)
!5350 = !DILocation(line: 2423, column: 39, scope: !5340)
!5351 = !DILocation(line: 2424, column: 8, scope: !5340)
!5352 = !DILocation(line: 2424, column: 12, scope: !5340)
!5353 = !DILocation(line: 2425, column: 5, scope: !5340)
!5354 = !DILocation(line: 2425, column: 8, scope: !5340)
!5355 = !DILocation(line: 2425, column: 20, scope: !5340)
!5356 = !DILocation(line: 2425, column: 25, scope: !5340)
!5357 = !DILocation(line: 2425, column: 35, scope: !5340)
!5358 = !DILocation(line: 2425, column: 42, scope: !5340)
!5359 = !DILocation(line: 2421, column: 8, scope: !5230)
!5360 = !DILocation(line: 2429, column: 21, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5340, file: !3, line: 2426, column: 6)
!5362 = !DILocation(line: 2429, column: 8, scope: !5361)
!5363 = !DILocation(line: 2430, column: 8, scope: !5361)
!5364 = !DILocation(line: 2433, column: 26, scope: !5230)
!5365 = !DILocation(line: 2433, column: 11, scope: !5230)
!5366 = !DILocation(line: 2433, column: 9, scope: !5230)
!5367 = !DILocation(line: 2438, column: 10, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2438, column: 8)
!5369 = !DILocation(line: 2438, column: 15, scope: !5368)
!5370 = !DILocation(line: 2438, column: 34, scope: !5368)
!5371 = !DILocation(line: 2438, column: 20, scope: !5368)
!5372 = !DILocation(line: 2438, column: 8, scope: !5230)
!5373 = !DILocation(line: 2439, column: 34, scope: !5368)
!5374 = !DILocation(line: 2439, column: 61, scope: !5368)
!5375 = !DILocation(line: 2439, column: 51, scope: !5368)
!5376 = !DILocation(line: 2439, column: 13, scope: !5368)
!5377 = !DILocation(line: 2439, column: 11, scope: !5368)
!5378 = !DILocation(line: 2439, column: 6, scope: !5368)
!5379 = !DILocation(line: 2443, column: 8, scope: !5380)
!5380 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2443, column: 8)
!5381 = !DILocation(line: 2443, column: 13, scope: !5380)
!5382 = !DILocation(line: 2443, column: 16, scope: !5380)
!5383 = !DILocation(line: 2443, column: 42, scope: !5380)
!5384 = !DILocation(line: 2443, column: 8, scope: !5230)
!5385 = !DILocation(line: 2444, column: 11, scope: !5380)
!5386 = !DILocation(line: 2444, column: 6, scope: !5380)
!5387 = !DILocation(line: 2446, column: 8, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2446, column: 8)
!5389 = !DILocation(line: 2446, column: 33, scope: !5388)
!5390 = !DILocation(line: 2447, column: 8, scope: !5388)
!5391 = !DILocation(line: 2447, column: 14, scope: !5388)
!5392 = !DILocation(line: 2448, column: 5, scope: !5388)
!5393 = !DILocation(line: 2448, column: 22, scope: !5388)
!5394 = !DILocation(line: 2448, column: 8, scope: !5388)
!5395 = !DILocation(line: 2449, column: 5, scope: !5388)
!5396 = !DILocation(line: 2449, column: 9, scope: !5388)
!5397 = !DILocation(line: 2449, column: 19, scope: !5388)
!5398 = !DILocation(line: 2449, column: 26, scope: !5388)
!5399 = !DILocation(line: 2450, column: 9, scope: !5388)
!5400 = !DILocation(line: 2450, column: 27, scope: !5388)
!5401 = !DILocation(line: 2451, column: 6, scope: !5388)
!5402 = !DILocation(line: 2451, column: 16, scope: !5388)
!5403 = !DILocation(line: 2451, column: 23, scope: !5388)
!5404 = !DILocation(line: 2450, column: 14, scope: !5388)
!5405 = !DILocation(line: 2446, column: 8, scope: !5230)
!5406 = !DILocation(line: 2453, column: 18, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5388, file: !3, line: 2452, column: 6)
!5408 = !DILocation(line: 2453, column: 24, scope: !5407)
!5409 = !DILocation(line: 2453, column: 8, scope: !5407)
!5410 = !DILocation(line: 2454, column: 8, scope: !5407)
!5411 = !DILocation(line: 2458, column: 8, scope: !5230)
!5412 = !DILocation(line: 2457, column: 4, scope: !5230)
!5413 = !DILocation(line: 2457, column: 14, scope: !5230)
!5414 = !DILocation(line: 2457, column: 21, scope: !5230)
!5415 = !DILocation(line: 2458, column: 6, scope: !5230)
!5416 = !DILocation(line: 2462, column: 8, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2462, column: 8)
!5418 = !DILocation(line: 2462, column: 33, scope: !5417)
!5419 = !DILocation(line: 2463, column: 8, scope: !5417)
!5420 = !DILocation(line: 2463, column: 11, scope: !5417)
!5421 = !DILocation(line: 2463, column: 16, scope: !5417)
!5422 = !DILocation(line: 2463, column: 35, scope: !5417)
!5423 = !DILocation(line: 2463, column: 21, scope: !5417)
!5424 = !DILocation(line: 2462, column: 8, scope: !5230)
!5425 = !DILocalVariable(name: "note_value", scope: !5426, file: !3, line: 2465, type: !1006)
!5426 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 2464, column: 6)
!5427 = !DILocation(line: 2465, column: 12, scope: !5426)
!5428 = !DILocation(line: 2465, column: 25, scope: !5426)
!5429 = !DILocation(line: 2466, column: 21, scope: !5426)
!5430 = !DILocation(line: 2466, column: 27, scope: !5426)
!5431 = !DILocation(line: 2466, column: 8, scope: !5426)
!5432 = !DILocation(line: 2467, column: 29, scope: !5426)
!5433 = !DILocation(line: 2467, column: 46, scope: !5426)
!5434 = !DILocation(line: 2467, column: 8, scope: !5426)
!5435 = !DILocation(line: 2468, column: 6, scope: !5426)
!5436 = !DILocation(line: 2485, column: 26, scope: !5230)
!5437 = !DILocation(line: 2485, column: 11, scope: !5230)
!5438 = !DILocation(line: 2485, column: 9, scope: !5230)
!5439 = !DILocation(line: 2487, column: 8, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2487, column: 8)
!5441 = !DILocation(line: 2487, column: 13, scope: !5440)
!5442 = !DILocation(line: 2487, column: 18, scope: !5440)
!5443 = !DILocation(line: 2487, column: 21, scope: !5440)
!5444 = !DILocation(line: 2487, column: 45, scope: !5440)
!5445 = !DILocation(line: 2488, column: 8, scope: !5440)
!5446 = !DILocation(line: 2488, column: 11, scope: !5440)
!5447 = !DILocation(line: 2489, column: 8, scope: !5440)
!5448 = !DILocation(line: 2489, column: 31, scope: !5440)
!5449 = !DILocation(line: 2489, column: 37, scope: !5440)
!5450 = !DILocation(line: 2489, column: 43, scope: !5440)
!5451 = !DILocation(line: 2489, column: 11, scope: !5440)
!5452 = !DILocation(line: 2487, column: 8, scope: !5230)
!5453 = !DILocation(line: 2490, column: 34, scope: !5440)
!5454 = !DILocation(line: 2490, column: 61, scope: !5440)
!5455 = !DILocation(line: 2490, column: 51, scope: !5440)
!5456 = !DILocation(line: 2490, column: 13, scope: !5440)
!5457 = !DILocation(line: 2490, column: 11, scope: !5440)
!5458 = !DILocation(line: 2490, column: 6, scope: !5440)
!5459 = !DILocation(line: 2492, column: 8, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 2492, column: 8)
!5461 = !DILocation(line: 2492, column: 8, scope: !5230)
!5462 = !DILocalVariable(name: "regno", scope: !5463, file: !3, line: 2494, type: !926)
!5463 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 2493, column: 6)
!5464 = !DILocation(line: 2494, column: 12, scope: !5463)
!5465 = !DILocation(line: 2494, column: 20, scope: !5463)
!5466 = !DILocalVariable(name: "x", scope: !5463, file: !3, line: 2495, type: !1006)
!5467 = !DILocation(line: 2495, column: 12, scope: !5463)
!5468 = !DILocation(line: 2495, column: 16, scope: !5463)
!5469 = !DILocation(line: 2499, column: 13, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 2499, column: 12)
!5471 = !DILocation(line: 2499, column: 23, scope: !5470)
!5472 = !DILocation(line: 2499, column: 30, scope: !5470)
!5473 = !DILocation(line: 2499, column: 12, scope: !5463)
!5474 = !DILocation(line: 2501, column: 7, scope: !5470)
!5475 = !DILocation(line: 2500, column: 3, scope: !5470)
!5476 = !DILocation(line: 2500, column: 18, scope: !5470)
!5477 = !DILocation(line: 2501, column: 5, scope: !5470)
!5478 = !DILocation(line: 2508, column: 12, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 2508, column: 12)
!5480 = !DILocation(line: 2508, column: 25, scope: !5479)
!5481 = !DILocation(line: 2509, column: 5, scope: !5479)
!5482 = !DILocation(line: 2509, column: 9, scope: !5479)
!5483 = !DILocation(line: 2509, column: 22, scope: !5479)
!5484 = !DILocation(line: 2510, column: 9, scope: !5479)
!5485 = !DILocation(line: 2510, column: 12, scope: !5479)
!5486 = !DILocation(line: 2510, column: 35, scope: !5479)
!5487 = !DILocation(line: 2511, column: 9, scope: !5479)
!5488 = !DILocation(line: 2511, column: 13, scope: !5479)
!5489 = !DILocation(line: 2511, column: 46, scope: !5479)
!5490 = !DILocation(line: 2508, column: 12, scope: !5463)
!5491 = !DILocation(line: 2512, column: 22, scope: !5479)
!5492 = !DILocation(line: 2512, column: 3, scope: !5479)
!5493 = !DILocation(line: 2514, column: 39, scope: !5463)
!5494 = !DILocation(line: 2514, column: 8, scope: !5463)
!5495 = !DILocation(line: 2514, column: 18, scope: !5463)
!5496 = !DILocation(line: 2514, column: 25, scope: !5463)
!5497 = !DILocation(line: 2514, column: 37, scope: !5463)
!5498 = !DILocation(line: 2515, column: 34, scope: !5463)
!5499 = !DILocation(line: 2515, column: 8, scope: !5463)
!5500 = !DILocation(line: 2515, column: 18, scope: !5463)
!5501 = !DILocation(line: 2515, column: 25, scope: !5463)
!5502 = !DILocation(line: 2515, column: 31, scope: !5463)
!5503 = !DILocation(line: 2516, column: 38, scope: !5463)
!5504 = !DILocation(line: 2516, column: 8, scope: !5463)
!5505 = !DILocation(line: 2516, column: 18, scope: !5463)
!5506 = !DILocation(line: 2516, column: 25, scope: !5463)
!5507 = !DILocation(line: 2516, column: 36, scope: !5463)
!5508 = !DILocation(line: 2519, column: 12, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 2519, column: 12)
!5510 = !DILocation(line: 2519, column: 36, scope: !5509)
!5511 = !DILocation(line: 2519, column: 41, scope: !5509)
!5512 = !DILocation(line: 2519, column: 44, scope: !5509)
!5513 = !DILocation(line: 2519, column: 12, scope: !5463)
!5514 = !DILocation(line: 2523, column: 5, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 2520, column: 3)
!5516 = !DILocation(line: 2523, column: 29, scope: !5515)
!5517 = !DILocation(line: 2534, column: 21, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 2534, column: 9)
!5519 = !DILocation(line: 2534, column: 9, scope: !5518)
!5520 = !DILocation(line: 2534, column: 28, scope: !5518)
!5521 = !DILocation(line: 2535, column: 9, scope: !5518)
!5522 = !DILocation(line: 2535, column: 26, scope: !5518)
!5523 = !DILocation(line: 2535, column: 29, scope: !5518)
!5524 = !DILocation(line: 2535, column: 13, scope: !5518)
!5525 = !DILocation(line: 2536, column: 6, scope: !5518)
!5526 = !DILocation(line: 2536, column: 32, scope: !5518)
!5527 = !DILocation(line: 2536, column: 11, scope: !5518)
!5528 = !DILocation(line: 2537, column: 9, scope: !5518)
!5529 = !DILocation(line: 2537, column: 12, scope: !5518)
!5530 = !DILocation(line: 2538, column: 9, scope: !5518)
!5531 = !DILocation(line: 2538, column: 34, scope: !5518)
!5532 = !DILocation(line: 2538, column: 50, scope: !5518)
!5533 = !DILocation(line: 2538, column: 12, scope: !5518)
!5534 = !DILocation(line: 2534, column: 9, scope: !5515)
!5535 = !DILocation(line: 2539, column: 7, scope: !5518)
!5536 = !DILocation(line: 2539, column: 17, scope: !5518)
!5537 = !DILocation(line: 2539, column: 24, scope: !5518)
!5538 = !DILocation(line: 2539, column: 32, scope: !5518)
!5539 = !DILocation(line: 2540, column: 3, scope: !5515)
!5540 = !DILocation(line: 2541, column: 6, scope: !5463)
!5541 = !DILocation(line: 2542, column: 2, scope: !5230)
!5542 = !DILocation(line: 2347, column: 12, scope: !5225)
!5543 = !DILocation(line: 2347, column: 10, scope: !5225)
!5544 = !DILocation(line: 2345, column: 7, scope: !5225)
!5545 = distinct !{!5545, !5228, !5546}
!5546 = !DILocation(line: 2542, column: 2, scope: !5221)
!5547 = !DILocation(line: 2543, column: 5, scope: !5217)
!5548 = distinct !{!5548, !5212, !5549}
!5549 = !DILocation(line: 2543, column: 5, scope: !5213)
!5550 = !DILocation(line: 2545, column: 8, scope: !5551)
!5551 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2545, column: 7)
!5552 = !DILocation(line: 2545, column: 7, scope: !5193)
!5553 = !DILocation(line: 2546, column: 5, scope: !5551)
!5554 = !DILocation(line: 2551, column: 15, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2551, column: 3)
!5556 = !DILocation(line: 2551, column: 13, scope: !5555)
!5557 = !DILocation(line: 2551, column: 8, scope: !5555)
!5558 = !DILocation(line: 2551, column: 29, scope: !5559)
!5559 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 2551, column: 3)
!5560 = !DILocation(line: 2551, column: 3, scope: !5555)
!5561 = !DILocalVariable(name: "set", scope: !5562, file: !3, line: 2553, type: !1006)
!5562 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 2552, column: 5)
!5563 = !DILocation(line: 2553, column: 11, scope: !5562)
!5564 = !DILocalVariable(name: "src", scope: !5562, file: !3, line: 2553, type: !1006)
!5565 = !DILocation(line: 2553, column: 16, scope: !5562)
!5566 = !DILocalVariable(name: "dest", scope: !5562, file: !3, line: 2553, type: !1006)
!5567 = !DILocation(line: 2553, column: 21, scope: !5562)
!5568 = !DILocalVariable(name: "regno", scope: !5562, file: !3, line: 2554, type: !7)
!5569 = !DILocation(line: 2554, column: 16, scope: !5562)
!5570 = !DILocation(line: 2556, column: 13, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 2556, column: 11)
!5572 = !DILocation(line: 2556, column: 11, scope: !5562)
!5573 = !DILocation(line: 2557, column: 2, scope: !5571)
!5574 = !DILocation(line: 2559, column: 13, scope: !5562)
!5575 = !DILocation(line: 2559, column: 11, scope: !5562)
!5576 = !DILocation(line: 2560, column: 13, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 2560, column: 11)
!5578 = !DILocation(line: 2560, column: 11, scope: !5562)
!5579 = !DILocation(line: 2561, column: 2, scope: !5577)
!5580 = !DILocation(line: 2563, column: 14, scope: !5562)
!5581 = !DILocation(line: 2563, column: 12, scope: !5562)
!5582 = !DILocation(line: 2564, column: 13, scope: !5562)
!5583 = !DILocation(line: 2564, column: 11, scope: !5562)
!5584 = !DILocation(line: 2582, column: 11, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 2582, column: 11)
!5586 = !DILocation(line: 2582, column: 24, scope: !5585)
!5587 = !DILocation(line: 2582, column: 27, scope: !5585)
!5588 = !DILocation(line: 2583, column: 4, scope: !5585)
!5589 = !DILocation(line: 2583, column: 16, scope: !5585)
!5590 = !DILocation(line: 2583, column: 14, scope: !5585)
!5591 = !DILocation(line: 2583, column: 29, scope: !5585)
!5592 = !DILocation(line: 2584, column: 4, scope: !5585)
!5593 = !DILocation(line: 2584, column: 7, scope: !5585)
!5594 = !DILocation(line: 2584, column: 31, scope: !5585)
!5595 = !DILocation(line: 2585, column: 4, scope: !5585)
!5596 = !DILocation(line: 2585, column: 7, scope: !5585)
!5597 = !DILocation(line: 2585, column: 32, scope: !5585)
!5598 = !DILocation(line: 2586, column: 4, scope: !5585)
!5599 = !DILocation(line: 2586, column: 7, scope: !5585)
!5600 = !DILocation(line: 2586, column: 17, scope: !5585)
!5601 = !DILocation(line: 2586, column: 24, scope: !5585)
!5602 = !DILocation(line: 2586, column: 35, scope: !5585)
!5603 = !DILocation(line: 2587, column: 4, scope: !5585)
!5604 = !DILocation(line: 2587, column: 7, scope: !5585)
!5605 = !DILocation(line: 2587, column: 17, scope: !5585)
!5606 = !DILocation(line: 2587, column: 24, scope: !5585)
!5607 = !DILocation(line: 2587, column: 38, scope: !5585)
!5608 = !DILocation(line: 2587, column: 35, scope: !5585)
!5609 = !DILocation(line: 2588, column: 4, scope: !5585)
!5610 = !DILocation(line: 2588, column: 24, scope: !5585)
!5611 = !DILocation(line: 2588, column: 9, scope: !5585)
!5612 = !DILocation(line: 2590, column: 4, scope: !5585)
!5613 = !DILocation(line: 2590, column: 32, scope: !5585)
!5614 = !DILocation(line: 2590, column: 9, scope: !5585)
!5615 = !DILocation(line: 2582, column: 11, scope: !5562)
!5616 = !DILocalVariable(name: "init_insn", scope: !5617, file: !3, line: 2592, type: !1006)
!5617 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 2591, column: 2)
!5618 = !DILocation(line: 2592, column: 8, scope: !5617)
!5619 = !DILocation(line: 2592, column: 20, scope: !5617)
!5620 = !DILocation(line: 2593, column: 28, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 2593, column: 8)
!5622 = !DILocation(line: 2593, column: 39, scope: !5621)
!5623 = !DILocation(line: 2593, column: 44, scope: !5621)
!5624 = !DILocation(line: 2593, column: 8, scope: !5621)
!5625 = !DILocation(line: 2594, column: 8, scope: !5621)
!5626 = !DILocation(line: 2594, column: 36, scope: !5621)
!5627 = !DILocation(line: 2594, column: 42, scope: !5621)
!5628 = !DILocation(line: 2594, column: 53, scope: !5621)
!5629 = !DILocation(line: 2594, column: 13, scope: !5621)
!5630 = !DILocation(line: 2597, column: 8, scope: !5621)
!5631 = !DILocation(line: 2597, column: 32, scope: !5621)
!5632 = !DILocation(line: 2597, column: 64, scope: !5621)
!5633 = !DILocation(line: 2597, column: 54, scope: !5621)
!5634 = !DILocation(line: 2597, column: 11, scope: !5621)
!5635 = !DILocation(line: 2593, column: 8, scope: !5617)
!5636 = !DILocation(line: 2602, column: 5, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 2598, column: 6)
!5638 = !DILocation(line: 2601, column: 8, scope: !5637)
!5639 = !DILocation(line: 2601, column: 23, scope: !5637)
!5640 = !DILocation(line: 2602, column: 3, scope: !5637)
!5641 = !DILocation(line: 2603, column: 25, scope: !5637)
!5642 = !DILocation(line: 2603, column: 8, scope: !5637)
!5643 = !DILocation(line: 2604, column: 6, scope: !5637)
!5644 = !DILocation(line: 2605, column: 2, scope: !5617)
!5645 = !DILocation(line: 2606, column: 5, scope: !5562)
!5646 = !DILocation(line: 2551, column: 42, scope: !5559)
!5647 = !DILocation(line: 2551, column: 40, scope: !5559)
!5648 = !DILocation(line: 2551, column: 3, scope: !5559)
!5649 = distinct !{!5649, !5560, !5650}
!5650 = !DILocation(line: 2606, column: 5, scope: !5555)
!5651 = !DILocation(line: 2608, column: 18, scope: !5193)
!5652 = !DILocation(line: 2608, column: 16, scope: !5193)
!5653 = !DILocation(line: 2617, column: 3, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2617, column: 3)
!5655 = !DILocation(line: 2617, column: 3, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5654, file: !3, line: 2617, column: 3)
!5657 = !DILocation(line: 2619, column: 20, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 2618, column: 5)
!5659 = !DILocation(line: 2619, column: 24, scope: !5658)
!5660 = !DILocation(line: 2619, column: 18, scope: !5658)
!5661 = !DILocation(line: 2620, column: 19, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2620, column: 7)
!5663 = !DILocation(line: 2620, column: 17, scope: !5662)
!5664 = !DILocation(line: 2620, column: 12, scope: !5662)
!5665 = !DILocation(line: 2621, column: 5, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5662, file: !3, line: 2620, column: 7)
!5667 = !DILocation(line: 2621, column: 13, scope: !5666)
!5668 = !DILocation(line: 2621, column: 10, scope: !5666)
!5669 = !DILocation(line: 2620, column: 7, scope: !5662)
!5670 = !DILocalVariable(name: "link", scope: !5671, file: !3, line: 2624, type: !1006)
!5671 = distinct !DILexicalBlock(scope: !5666, file: !3, line: 2623, column: 2)
!5672 = !DILocation(line: 2624, column: 8, scope: !5671)
!5673 = !DILocation(line: 2626, column: 10, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5671, file: !3, line: 2626, column: 8)
!5675 = !DILocation(line: 2626, column: 8, scope: !5671)
!5676 = !DILocation(line: 2627, column: 6, scope: !5674)
!5677 = !DILocation(line: 2630, column: 8, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !5671, file: !3, line: 2630, column: 8)
!5679 = !DILocation(line: 2631, column: 8, scope: !5678)
!5680 = !DILocation(line: 2631, column: 26, scope: !5678)
!5681 = !DILocation(line: 2631, column: 11, scope: !5678)
!5682 = !DILocation(line: 2630, column: 8, scope: !5671)
!5683 = !DILocation(line: 2632, column: 6, scope: !5678)
!5684 = !DILocation(line: 2634, column: 16, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5671, file: !3, line: 2634, column: 4)
!5686 = !DILocation(line: 2634, column: 14, scope: !5685)
!5687 = !DILocation(line: 2634, column: 9, scope: !5685)
!5688 = !DILocation(line: 2634, column: 34, scope: !5689)
!5689 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 2634, column: 4)
!5690 = !DILocation(line: 2634, column: 4, scope: !5685)
!5691 = !DILocation(line: 2636, column: 12, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5693, file: !3, line: 2636, column: 12)
!5693 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 2635, column: 6)
!5694 = !DILocation(line: 2636, column: 33, scope: !5692)
!5695 = !DILocation(line: 2638, column: 5, scope: !5692)
!5696 = !DILocation(line: 2638, column: 25, scope: !5692)
!5697 = !DILocation(line: 2638, column: 41, scope: !5692)
!5698 = !DILocation(line: 2638, column: 8, scope: !5692)
!5699 = !DILocation(line: 2636, column: 12, scope: !5693)
!5700 = !DILocalVariable(name: "regno", scope: !5701, file: !3, line: 2640, type: !926)
!5701 = distinct !DILexicalBlock(scope: !5692, file: !3, line: 2639, column: 3)
!5702 = !DILocation(line: 2640, column: 9, scope: !5701)
!5703 = !DILocation(line: 2640, column: 17, scope: !5701)
!5704 = !DILocalVariable(name: "equiv_insn", scope: !5701, file: !3, line: 2641, type: !1006)
!5705 = !DILocation(line: 2641, column: 9, scope: !5701)
!5706 = !DILocation(line: 2643, column: 11, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2643, column: 9)
!5708 = !DILocation(line: 2643, column: 21, scope: !5707)
!5709 = !DILocation(line: 2643, column: 28, scope: !5707)
!5710 = !DILocation(line: 2644, column: 9, scope: !5707)
!5711 = !DILocation(line: 2644, column: 12, scope: !5707)
!5712 = !DILocation(line: 2644, column: 22, scope: !5707)
!5713 = !DILocation(line: 2644, column: 29, scope: !5707)
!5714 = !DILocation(line: 2644, column: 42, scope: !5707)
!5715 = !DILocation(line: 2644, column: 40, scope: !5707)
!5716 = !DILocation(line: 2643, column: 9, scope: !5701)
!5717 = !DILocation(line: 2645, column: 7, scope: !5707)
!5718 = !DILocation(line: 2652, column: 5, scope: !5701)
!5719 = !DILocation(line: 2654, column: 18, scope: !5701)
!5720 = !DILocation(line: 2654, column: 16, scope: !5701)
!5721 = !DILocation(line: 2659, column: 29, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2659, column: 9)
!5723 = !DILocation(line: 2659, column: 9, scope: !5722)
!5724 = !DILocation(line: 2659, column: 9, scope: !5701)
!5725 = !DILocation(line: 2660, column: 7, scope: !5722)
!5726 = !DILocation(line: 2662, column: 24, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2662, column: 9)
!5728 = !DILocation(line: 2662, column: 9, scope: !5727)
!5729 = !DILocation(line: 2662, column: 46, scope: !5727)
!5730 = !DILocation(line: 2663, column: 9, scope: !5727)
!5731 = !DILocation(line: 2663, column: 34, scope: !5727)
!5732 = !DILocation(line: 2663, column: 48, scope: !5727)
!5733 = !DILocation(line: 2664, column: 15, scope: !5727)
!5734 = !DILocation(line: 2664, column: 25, scope: !5727)
!5735 = !DILocation(line: 2664, column: 32, scope: !5727)
!5736 = !DILocation(line: 2664, column: 13, scope: !5727)
!5737 = !DILocation(line: 2664, column: 40, scope: !5727)
!5738 = !DILocation(line: 2663, column: 12, scope: !5727)
!5739 = !DILocation(line: 2662, column: 9, scope: !5701)
!5740 = !DILocalVariable(name: "equiv_link", scope: !5741, file: !3, line: 2666, type: !1006)
!5741 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 2665, column: 7)
!5742 = !DILocation(line: 2666, column: 13, scope: !5741)
!5743 = !DILocalVariable(name: "last_link", scope: !5741, file: !3, line: 2667, type: !1006)
!5744 = !DILocation(line: 2667, column: 13, scope: !5741)
!5745 = !DILocalVariable(name: "note", scope: !5741, file: !3, line: 2668, type: !1006)
!5746 = !DILocation(line: 2668, column: 13, scope: !5741)
!5747 = !DILocation(line: 2671, column: 26, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2671, column: 9)
!5749 = !DILocation(line: 2671, column: 24, scope: !5748)
!5750 = !DILocation(line: 2671, column: 14, scope: !5748)
!5751 = !DILocation(line: 2671, column: 32, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5748, file: !3, line: 2671, column: 9)
!5753 = !DILocation(line: 2671, column: 9, scope: !5748)
!5754 = !DILocation(line: 2672, column: 19, scope: !5752)
!5755 = !DILocation(line: 2672, column: 17, scope: !5752)
!5756 = !DILocation(line: 2671, column: 9, scope: !5752)
!5757 = distinct !{!5757, !5753, !5758}
!5758 = !DILocation(line: 2673, column: 4, scope: !5748)
!5759 = !DILocation(line: 2676, column: 22, scope: !5741)
!5760 = !DILocation(line: 2676, column: 20, scope: !5741)
!5761 = !DILocation(line: 2677, column: 9, scope: !5741)
!5762 = !DILocation(line: 2677, column: 16, scope: !5741)
!5763 = !DILocation(line: 2679, column: 13, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2678, column: 4)
!5765 = !DILocation(line: 2679, column: 11, scope: !5764)
!5766 = !DILocation(line: 2680, column: 19, scope: !5764)
!5767 = !DILocation(line: 2680, column: 17, scope: !5764)
!5768 = !DILocation(line: 2681, column: 10, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 2681, column: 10)
!5770 = !DILocation(line: 2681, column: 31, scope: !5769)
!5771 = !DILocation(line: 2681, column: 10, scope: !5764)
!5772 = !DILocation(line: 2683, column: 23, scope: !5773)
!5773 = distinct !DILexicalBlock(scope: !5769, file: !3, line: 2682, column: 8)
!5774 = !DILocation(line: 2683, column: 35, scope: !5773)
!5775 = !DILocation(line: 2683, column: 10, scope: !5773)
!5776 = !DILocation(line: 2684, column: 32, scope: !5773)
!5777 = !DILocation(line: 2684, column: 10, scope: !5773)
!5778 = !DILocation(line: 2684, column: 30, scope: !5773)
!5779 = !DILocation(line: 2685, column: 10, scope: !5773)
!5780 = !DILocation(line: 2685, column: 25, scope: !5773)
!5781 = !DILocation(line: 2686, column: 22, scope: !5773)
!5782 = !DILocation(line: 2686, column: 20, scope: !5773)
!5783 = !DILocation(line: 2687, column: 8, scope: !5773)
!5784 = distinct !{!5784, !5761, !5785}
!5785 = !DILocation(line: 2688, column: 4, scope: !5741)
!5786 = !DILocation(line: 2690, column: 23, scope: !5741)
!5787 = !DILocation(line: 2690, column: 30, scope: !5741)
!5788 = !DILocation(line: 2690, column: 9, scope: !5741)
!5789 = !DILocation(line: 2691, column: 9, scope: !5741)
!5790 = !DILocation(line: 2692, column: 9, scope: !5741)
!5791 = !DILocation(line: 2692, column: 26, scope: !5741)
!5792 = !DILocation(line: 2693, column: 22, scope: !5741)
!5793 = !DILocation(line: 2693, column: 9, scope: !5741)
!5794 = !DILocation(line: 2696, column: 6, scope: !5741)
!5795 = !DILocation(line: 2695, column: 9, scope: !5741)
!5796 = !DILocation(line: 2695, column: 19, scope: !5741)
!5797 = !DILocation(line: 2695, column: 26, scope: !5741)
!5798 = !DILocation(line: 2696, column: 4, scope: !5741)
!5799 = !DILocation(line: 2698, column: 9, scope: !5741)
!5800 = !DILocation(line: 2698, column: 24, scope: !5741)
!5801 = !DILocation(line: 2698, column: 31, scope: !5741)
!5802 = !DILocation(line: 2699, column: 25, scope: !5741)
!5803 = !DILocation(line: 2699, column: 39, scope: !5741)
!5804 = !DILocation(line: 2699, column: 9, scope: !5741)
!5805 = !DILocation(line: 2700, column: 7, scope: !5741)
!5806 = !DILocation(line: 2703, column: 34, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 2703, column: 14)
!5808 = !DILocation(line: 2703, column: 14, scope: !5807)
!5809 = !DILocation(line: 2703, column: 43, scope: !5807)
!5810 = !DILocation(line: 2703, column: 40, scope: !5807)
!5811 = !DILocation(line: 2703, column: 14, scope: !5727)
!5812 = !DILocalVariable(name: "new_insn", scope: !5813, file: !3, line: 2705, type: !1006)
!5813 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 2704, column: 7)
!5814 = !DILocation(line: 2705, column: 13, scope: !5813)
!5815 = !DILocation(line: 2707, column: 38, scope: !5813)
!5816 = !DILocation(line: 2707, column: 60, scope: !5813)
!5817 = !DILocation(line: 2707, column: 20, scope: !5813)
!5818 = !DILocation(line: 2707, column: 18, scope: !5813)
!5819 = !DILocation(line: 2708, column: 32, scope: !5813)
!5820 = !DILocation(line: 2708, column: 9, scope: !5813)
!5821 = !DILocation(line: 2708, column: 30, scope: !5813)
!5822 = !DILocation(line: 2709, column: 9, scope: !5813)
!5823 = !DILocation(line: 2709, column: 32, scope: !5813)
!5824 = !DILocation(line: 2711, column: 25, scope: !5813)
!5825 = !DILocation(line: 2711, column: 9, scope: !5813)
!5826 = !DILocation(line: 2716, column: 32, scope: !5813)
!5827 = !DILocation(line: 2716, column: 9, scope: !5813)
!5828 = !DILocation(line: 2716, column: 30, scope: !5813)
!5829 = !DILocation(line: 2718, column: 22, scope: !5813)
!5830 = !DILocation(line: 2718, column: 9, scope: !5813)
!5831 = !DILocation(line: 2720, column: 49, scope: !5813)
!5832 = !DILocation(line: 2720, column: 9, scope: !5813)
!5833 = !DILocation(line: 2720, column: 47, scope: !5813)
!5834 = !DILocation(line: 2722, column: 35, scope: !5813)
!5835 = !DILocation(line: 2722, column: 39, scope: !5813)
!5836 = !DILocation(line: 2722, column: 9, scope: !5813)
!5837 = !DILocation(line: 2722, column: 33, scope: !5813)
!5838 = !DILocation(line: 2723, column: 9, scope: !5813)
!5839 = !DILocation(line: 2723, column: 37, scope: !5813)
!5840 = !DILocation(line: 2724, column: 9, scope: !5813)
!5841 = !DILocation(line: 2724, column: 40, scope: !5813)
!5842 = !DILocation(line: 2725, column: 9, scope: !5813)
!5843 = !DILocation(line: 2725, column: 46, scope: !5813)
!5844 = !DILocation(line: 2726, column: 9, scope: !5813)
!5845 = !DILocation(line: 2726, column: 33, scope: !5813)
!5846 = !DILocation(line: 2728, column: 13, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 2728, column: 13)
!5848 = !DILocation(line: 2728, column: 21, scope: !5847)
!5849 = !DILocation(line: 2728, column: 18, scope: !5847)
!5850 = !DILocation(line: 2728, column: 13, scope: !5813)
!5851 = !DILocation(line: 2729, column: 19, scope: !5847)
!5852 = !DILocation(line: 2729, column: 4, scope: !5847)
!5853 = !DILocation(line: 2729, column: 17, scope: !5847)
!5854 = !DILocation(line: 2732, column: 6, scope: !5813)
!5855 = !DILocation(line: 2731, column: 9, scope: !5813)
!5856 = !DILocation(line: 2731, column: 24, scope: !5813)
!5857 = !DILocation(line: 2732, column: 4, scope: !5813)
!5858 = !DILocation(line: 2733, column: 25, scope: !5813)
!5859 = !DILocation(line: 2733, column: 39, scope: !5813)
!5860 = !DILocation(line: 2733, column: 9, scope: !5813)
!5861 = !DILocation(line: 2734, column: 7, scope: !5813)
!5862 = !DILocation(line: 2735, column: 3, scope: !5701)
!5863 = !DILocation(line: 2736, column: 6, scope: !5693)
!5864 = !DILocation(line: 2634, column: 47, scope: !5689)
!5865 = !DILocation(line: 2634, column: 45, scope: !5689)
!5866 = !DILocation(line: 2634, column: 4, scope: !5689)
!5867 = distinct !{!5867, !5690, !5868}
!5868 = !DILocation(line: 2736, column: 6, scope: !5685)
!5869 = !DILocation(line: 2737, column: 2, scope: !5671)
!5870 = !DILocation(line: 2622, column: 12, scope: !5666)
!5871 = !DILocation(line: 2622, column: 10, scope: !5666)
!5872 = !DILocation(line: 2620, column: 7, scope: !5666)
!5873 = distinct !{!5873, !5669, !5874}
!5874 = !DILocation(line: 2737, column: 2, scope: !5662)
!5875 = !DILocation(line: 2738, column: 5, scope: !5658)
!5876 = distinct !{!5876, !5653, !5877}
!5877 = !DILocation(line: 2738, column: 5, scope: !5654)
!5878 = !DILocation(line: 2740, column: 8, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5193, file: !3, line: 2740, column: 7)
!5880 = !DILocation(line: 2740, column: 7, scope: !5193)
!5881 = !DILocation(line: 2742, column: 7, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 2742, column: 7)
!5883 = distinct !DILexicalBlock(scope: !5879, file: !3, line: 2741, column: 5)
!5884 = !DILocation(line: 2742, column: 7, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 2742, column: 7)
!5886 = !DILocation(line: 2744, column: 27, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 2743, column: 2)
!5888 = !DILocation(line: 2744, column: 44, scope: !5887)
!5889 = !DILocation(line: 2744, column: 4, scope: !5887)
!5890 = !DILocation(line: 2745, column: 27, scope: !5887)
!5891 = !DILocation(line: 2745, column: 45, scope: !5887)
!5892 = !DILocation(line: 2745, column: 4, scope: !5887)
!5893 = !DILocation(line: 2746, column: 27, scope: !5887)
!5894 = !DILocation(line: 2746, column: 42, scope: !5887)
!5895 = !DILocation(line: 2746, column: 4, scope: !5887)
!5896 = !DILocation(line: 2747, column: 27, scope: !5887)
!5897 = !DILocation(line: 2747, column: 43, scope: !5887)
!5898 = !DILocation(line: 2747, column: 4, scope: !5887)
!5899 = !DILocation(line: 2748, column: 2, scope: !5887)
!5900 = distinct !{!5900, !5881, !5901}
!5901 = !DILocation(line: 2748, column: 2, scope: !5882)
!5902 = !DILocation(line: 2751, column: 11, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 2751, column: 11)
!5904 = !DILocation(line: 2751, column: 11, scope: !5883)
!5905 = !DILocation(line: 2752, column: 14, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 2752, column: 2)
!5907 = !DILocation(line: 2752, column: 12, scope: !5906)
!5908 = !DILocation(line: 2752, column: 7, scope: !5906)
!5909 = !DILocation(line: 2752, column: 28, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 2752, column: 2)
!5911 = !DILocation(line: 2752, column: 2, scope: !5906)
!5912 = !DILocation(line: 2753, column: 8, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 2753, column: 8)
!5914 = !DILocation(line: 2753, column: 8, scope: !5910)
!5915 = !DILocalVariable(name: "old_loc", scope: !5916, file: !3, line: 2755, type: !1006)
!5916 = distinct !DILexicalBlock(scope: !5913, file: !3, line: 2754, column: 6)
!5917 = !DILocation(line: 2755, column: 12, scope: !5916)
!5918 = !DILocation(line: 2755, column: 22, scope: !5916)
!5919 = !DILocation(line: 2757, column: 30, scope: !5916)
!5920 = !DILocation(line: 2759, column: 18, scope: !5916)
!5921 = !DILocation(line: 2759, column: 9, scope: !5916)
!5922 = !DILocation(line: 2757, column: 5, scope: !5916)
!5923 = !DILocation(line: 2756, column: 8, scope: !5916)
!5924 = !DILocation(line: 2757, column: 3, scope: !5916)
!5925 = !DILocation(line: 2760, column: 12, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5916, file: !3, line: 2760, column: 12)
!5927 = !DILocation(line: 2760, column: 23, scope: !5926)
!5928 = !DILocation(line: 2760, column: 20, scope: !5926)
!5929 = !DILocation(line: 2760, column: 12, scope: !5916)
!5930 = !DILocation(line: 2761, column: 19, scope: !5926)
!5931 = !DILocation(line: 2761, column: 3, scope: !5926)
!5932 = !DILocation(line: 2762, column: 6, scope: !5916)
!5933 = !DILocation(line: 2752, column: 41, scope: !5910)
!5934 = !DILocation(line: 2752, column: 39, scope: !5910)
!5935 = !DILocation(line: 2752, column: 2, scope: !5910)
!5936 = distinct !{!5936, !5911, !5937}
!5937 = !DILocation(line: 2762, column: 6, scope: !5906)
!5938 = !DILocation(line: 2763, column: 5, scope: !5883)
!5939 = !DILocation(line: 2765, column: 3, scope: !5193)
!5940 = !DILabel(scope: !5193, name: "out", file: !3, line: 2767)
!5941 = !DILocation(line: 2767, column: 3, scope: !5193)
!5942 = !DILocation(line: 2770, column: 3, scope: !5193)
!5943 = !DILocation(line: 2771, column: 9, scope: !5193)
!5944 = !DILocation(line: 2771, column: 3, scope: !5193)
!5945 = !DILocation(line: 2772, column: 10, scope: !5193)
!5946 = !DILocation(line: 2772, column: 3, scope: !5193)
!5947 = distinct !DISubprogram(name: "find_reg_equiv_invariant_const", scope: !3, file: !3, line: 1528, type: !2213, scopeLine: 1529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!5948 = !DILocalVariable(name: "i", scope: !5947, file: !3, line: 1530, type: !926)
!5949 = !DILocation(line: 1530, column: 7, scope: !5947)
!5950 = !DILocalVariable(name: "invariant_p", scope: !5947, file: !3, line: 1531, type: !1004)
!5951 = !DILocation(line: 1531, column: 8, scope: !5947)
!5952 = !DILocalVariable(name: "list", scope: !5947, file: !3, line: 1532, type: !1006)
!5953 = !DILocation(line: 1532, column: 7, scope: !5947)
!5954 = !DILocalVariable(name: "insn", scope: !5947, file: !3, line: 1532, type: !1006)
!5955 = !DILocation(line: 1532, column: 13, scope: !5947)
!5956 = !DILocalVariable(name: "note", scope: !5947, file: !3, line: 1532, type: !1006)
!5957 = !DILocation(line: 1532, column: 19, scope: !5947)
!5958 = !DILocalVariable(name: "constant", scope: !5947, file: !3, line: 1532, type: !1006)
!5959 = !DILocation(line: 1532, column: 25, scope: !5947)
!5960 = !DILocalVariable(name: "x", scope: !5947, file: !3, line: 1532, type: !1006)
!5961 = !DILocation(line: 1532, column: 35, scope: !5947)
!5962 = !DILocation(line: 1534, column: 10, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5947, file: !3, line: 1534, column: 3)
!5964 = !DILocation(line: 1534, column: 8, scope: !5963)
!5965 = !DILocation(line: 1534, column: 35, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 1534, column: 3)
!5967 = !DILocation(line: 1534, column: 39, scope: !5966)
!5968 = !DILocation(line: 1534, column: 37, scope: !5966)
!5969 = !DILocation(line: 1534, column: 3, scope: !5963)
!5970 = !DILocation(line: 1536, column: 16, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5966, file: !3, line: 1535, column: 5)
!5972 = !DILocation(line: 1537, column: 19, scope: !5971)
!5973 = !DILocation(line: 1538, column: 19, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5971, file: !3, line: 1538, column: 7)
!5975 = !DILocation(line: 1538, column: 34, scope: !5974)
!5976 = !DILocation(line: 1538, column: 17, scope: !5974)
!5977 = !DILocation(line: 1538, column: 12, scope: !5974)
!5978 = !DILocation(line: 1538, column: 38, scope: !5979)
!5979 = distinct !DILexicalBlock(scope: !5974, file: !3, line: 1538, column: 7)
!5980 = !DILocation(line: 1538, column: 43, scope: !5979)
!5981 = !DILocation(line: 1538, column: 7, scope: !5974)
!5982 = !DILocation(line: 1540, column: 11, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 1539, column: 2)
!5984 = !DILocation(line: 1540, column: 9, scope: !5983)
!5985 = !DILocation(line: 1541, column: 26, scope: !5983)
!5986 = !DILocation(line: 1541, column: 11, scope: !5983)
!5987 = !DILocation(line: 1541, column: 9, scope: !5983)
!5988 = !DILocation(line: 1543, column: 8, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 1543, column: 8)
!5990 = !DILocation(line: 1543, column: 13, scope: !5989)
!5991 = !DILocation(line: 1543, column: 8, scope: !5983)
!5992 = !DILocation(line: 1544, column: 6, scope: !5989)
!5993 = !DILocation(line: 1546, column: 8, scope: !5983)
!5994 = !DILocation(line: 1546, column: 6, scope: !5983)
!5995 = !DILocation(line: 1548, column: 32, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 1548, column: 8)
!5997 = !DILocation(line: 1548, column: 10, scope: !5996)
!5998 = !DILocation(line: 1549, column: 8, scope: !5996)
!5999 = !DILocation(line: 1549, column: 13, scope: !5996)
!6000 = !DILocation(line: 1553, column: 8, scope: !5996)
!6001 = !DILocation(line: 1553, column: 12, scope: !5996)
!6002 = !DILocation(line: 1553, column: 27, scope: !5996)
!6003 = !DILocation(line: 1553, column: 30, scope: !5996)
!6004 = !DILocation(line: 1548, column: 8, scope: !5983)
!6005 = !DILocation(line: 1560, column: 28, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6007, file: !3, line: 1560, column: 12)
!6007 = distinct !DILexicalBlock(scope: !5996, file: !3, line: 1554, column: 6)
!6008 = !DILocation(line: 1560, column: 12, scope: !6006)
!6009 = !DILocation(line: 1560, column: 12, scope: !6007)
!6010 = !DILocation(line: 1561, column: 17, scope: !6006)
!6011 = !DILocation(line: 1561, column: 15, scope: !6006)
!6012 = !DILocation(line: 1561, column: 3, scope: !6006)
!6013 = !DILocation(line: 1562, column: 39, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 1562, column: 17)
!6015 = !DILocation(line: 1562, column: 17, scope: !6014)
!6016 = !DILocation(line: 1562, column: 17, scope: !6006)
!6017 = !DILocation(line: 1564, column: 9, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 1564, column: 9)
!6019 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 1563, column: 3)
!6020 = !DILocation(line: 1564, column: 22, scope: !6018)
!6021 = !DILocation(line: 1565, column: 9, scope: !6018)
!6022 = !DILocation(line: 1565, column: 12, scope: !6018)
!6023 = !DILocation(line: 1565, column: 17, scope: !6018)
!6024 = !DILocation(line: 1565, column: 14, scope: !6018)
!6025 = !DILocation(line: 1565, column: 35, scope: !6018)
!6026 = !DILocation(line: 1565, column: 38, scope: !6018)
!6027 = !DILocation(line: 1565, column: 43, scope: !6018)
!6028 = !DILocation(line: 1565, column: 40, scope: !6018)
!6029 = !DILocation(line: 1564, column: 9, scope: !6019)
!6030 = !DILocation(line: 1566, column: 19, scope: !6018)
!6031 = !DILocation(line: 1566, column: 7, scope: !6018)
!6032 = !DILocation(line: 1568, column: 18, scope: !6018)
!6033 = !DILocation(line: 1568, column: 16, scope: !6018)
!6034 = !DILocation(line: 1569, column: 3, scope: !6019)
!6035 = !DILocation(line: 1570, column: 6, scope: !6007)
!6036 = !DILocation(line: 1571, column: 2, scope: !5983)
!6037 = !DILocation(line: 1538, column: 63, scope: !5979)
!6038 = !DILocation(line: 1538, column: 61, scope: !5979)
!6039 = !DILocation(line: 1538, column: 7, scope: !5979)
!6040 = distinct !{!6040, !5981, !6041}
!6041 = !DILocation(line: 1571, column: 2, scope: !5974)
!6042 = !DILocation(line: 1572, column: 38, scope: !5971)
!6043 = !DILocation(line: 1572, column: 7, scope: !5971)
!6044 = !DILocation(line: 1572, column: 33, scope: !5971)
!6045 = !DILocation(line: 1572, column: 36, scope: !5971)
!6046 = !DILocation(line: 1573, column: 32, scope: !5971)
!6047 = !DILocation(line: 1573, column: 7, scope: !5971)
!6048 = !DILocation(line: 1573, column: 27, scope: !5971)
!6049 = !DILocation(line: 1573, column: 30, scope: !5971)
!6050 = !DILocation(line: 1574, column: 5, scope: !5971)
!6051 = !DILocation(line: 1534, column: 61, scope: !5966)
!6052 = !DILocation(line: 1534, column: 3, scope: !5966)
!6053 = distinct !{!6053, !5969, !6054}
!6054 = !DILocation(line: 1574, column: 5, scope: !5963)
!6055 = !DILocation(line: 1575, column: 1, scope: !5947)
!6056 = distinct !DISubprogram(name: "too_high_register_pressure_p", scope: !3, file: !3, line: 1866, type: !2234, scopeLine: 1867, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6057 = !DILocalVariable(name: "i", scope: !6056, file: !3, line: 1868, type: !926)
!6058 = !DILocation(line: 1868, column: 7, scope: !6056)
!6059 = !DILocalVariable(name: "cover_class", scope: !6056, file: !3, line: 1869, type: !397)
!6060 = !DILocation(line: 1869, column: 18, scope: !6056)
!6061 = !DILocation(line: 1871, column: 10, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 1871, column: 3)
!6063 = !DILocation(line: 1871, column: 8, scope: !6062)
!6064 = !DILocation(line: 1871, column: 15, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 1871, column: 3)
!6066 = !DILocation(line: 1871, column: 19, scope: !6065)
!6067 = !DILocation(line: 1871, column: 17, scope: !6065)
!6068 = !DILocation(line: 1871, column: 3, scope: !6062)
!6069 = !DILocation(line: 1873, column: 41, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6065, file: !3, line: 1872, column: 5)
!6071 = !DILocation(line: 1873, column: 21, scope: !6070)
!6072 = !DILocation(line: 1873, column: 19, scope: !6070)
!6073 = !DILocation(line: 1874, column: 11, scope: !6074)
!6074 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 1874, column: 11)
!6075 = !DILocation(line: 1874, column: 31, scope: !6074)
!6076 = !DILocation(line: 1874, column: 44, scope: !6074)
!6077 = !DILocation(line: 1874, column: 57, scope: !6074)
!6078 = !DILocation(line: 1874, column: 11, scope: !6070)
!6079 = !DILocation(line: 1875, column: 2, scope: !6074)
!6080 = !DILocation(line: 1876, column: 5, scope: !6070)
!6081 = !DILocation(line: 1871, column: 46, scope: !6065)
!6082 = !DILocation(line: 1871, column: 3, scope: !6065)
!6083 = distinct !{!6083, !6068, !6084}
!6084 = !DILocation(line: 1876, column: 5, scope: !6062)
!6085 = !DILocation(line: 1877, column: 3, scope: !6056)
!6086 = !DILocation(line: 1878, column: 1, scope: !6056)
!6087 = distinct !DISubprogram(name: "expand_reg_info", scope: !3, file: !3, line: 1853, type: !6088, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6088 = !DISubroutineType(types: !6089)
!6089 = !{null, !926}
!6090 = !DILocalVariable(name: "old_size", arg: 1, scope: !6087, file: !3, line: 1853, type: !926)
!6091 = !DILocation(line: 1853, column: 22, scope: !6087)
!6092 = !DILocalVariable(name: "i", scope: !6087, file: !3, line: 1855, type: !926)
!6093 = !DILocation(line: 1855, column: 7, scope: !6087)
!6094 = !DILocalVariable(name: "size", scope: !6087, file: !3, line: 1856, type: !926)
!6095 = !DILocation(line: 1856, column: 7, scope: !6087)
!6096 = !DILocation(line: 1856, column: 14, scope: !6087)
!6097 = !DILocation(line: 1858, column: 3, scope: !6087)
!6098 = !DILocation(line: 1859, column: 12, scope: !6099)
!6099 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 1859, column: 3)
!6100 = !DILocation(line: 1859, column: 10, scope: !6099)
!6101 = !DILocation(line: 1859, column: 8, scope: !6099)
!6102 = !DILocation(line: 1859, column: 22, scope: !6103)
!6103 = distinct !DILexicalBlock(scope: !6099, file: !3, line: 1859, column: 3)
!6104 = !DILocation(line: 1859, column: 26, scope: !6103)
!6105 = !DILocation(line: 1859, column: 24, scope: !6103)
!6106 = !DILocation(line: 1859, column: 3, scope: !6099)
!6107 = !DILocation(line: 1860, column: 24, scope: !6103)
!6108 = !DILocation(line: 1860, column: 5, scope: !6103)
!6109 = !DILocation(line: 1859, column: 33, scope: !6103)
!6110 = !DILocation(line: 1859, column: 3, scope: !6103)
!6111 = distinct !{!6111, !6106, !6112}
!6112 = !DILocation(line: 1860, column: 63, scope: !6099)
!6113 = !DILocation(line: 1861, column: 1, scope: !6087)
!6114 = distinct !DISubprogram(name: "setup_preferred_alternate_classes_for_new_pseudos", scope: !3, file: !3, line: 1828, type: !6088, scopeLine: 1829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6115 = !DILocalVariable(name: "start", arg: 1, scope: !6114, file: !3, line: 1828, type: !926)
!6116 = !DILocation(line: 1828, column: 56, scope: !6114)
!6117 = !DILocalVariable(name: "i", scope: !6114, file: !3, line: 1830, type: !926)
!6118 = !DILocation(line: 1830, column: 7, scope: !6114)
!6119 = !DILocalVariable(name: "old_regno", scope: !6114, file: !3, line: 1830, type: !926)
!6120 = !DILocation(line: 1830, column: 10, scope: !6114)
!6121 = !DILocalVariable(name: "max_regno", scope: !6114, file: !3, line: 1831, type: !926)
!6122 = !DILocation(line: 1831, column: 7, scope: !6114)
!6123 = !DILocation(line: 1831, column: 19, scope: !6114)
!6124 = !DILocation(line: 1833, column: 12, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6114, file: !3, line: 1833, column: 3)
!6126 = !DILocation(line: 1833, column: 10, scope: !6125)
!6127 = !DILocation(line: 1833, column: 8, scope: !6125)
!6128 = !DILocation(line: 1833, column: 19, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 1833, column: 3)
!6130 = !DILocation(line: 1833, column: 23, scope: !6129)
!6131 = !DILocation(line: 1833, column: 21, scope: !6129)
!6132 = !DILocation(line: 1833, column: 3, scope: !6125)
!6133 = !DILocation(line: 1835, column: 19, scope: !6134)
!6134 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 1834, column: 5)
!6135 = !DILocation(line: 1835, column: 17, scope: !6134)
!6136 = !DILocation(line: 1837, column: 26, scope: !6134)
!6137 = !DILocation(line: 1837, column: 50, scope: !6134)
!6138 = !DILocation(line: 1837, column: 29, scope: !6134)
!6139 = !DILocation(line: 1838, column: 26, scope: !6134)
!6140 = !DILocation(line: 1838, column: 5, scope: !6134)
!6141 = !DILocation(line: 1839, column: 22, scope: !6134)
!6142 = !DILocation(line: 1839, column: 5, scope: !6134)
!6143 = !DILocation(line: 1837, column: 7, scope: !6134)
!6144 = !DILocation(line: 1840, column: 11, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6134, file: !3, line: 1840, column: 11)
!6146 = !DILocation(line: 1840, column: 37, scope: !6145)
!6147 = !DILocation(line: 1840, column: 41, scope: !6145)
!6148 = !DILocation(line: 1840, column: 44, scope: !6145)
!6149 = !DILocation(line: 1840, column: 58, scope: !6145)
!6150 = !DILocation(line: 1840, column: 11, scope: !6134)
!6151 = !DILocation(line: 1841, column: 11, scope: !6145)
!6152 = !DILocation(line: 1843, column: 4, scope: !6145)
!6153 = !DILocation(line: 1843, column: 44, scope: !6145)
!6154 = !DILocation(line: 1843, column: 23, scope: !6145)
!6155 = !DILocation(line: 1843, column: 7, scope: !6145)
!6156 = !DILocation(line: 1844, column: 41, scope: !6145)
!6157 = !DILocation(line: 1844, column: 20, scope: !6145)
!6158 = !DILocation(line: 1844, column: 4, scope: !6145)
!6159 = !DILocation(line: 1841, column: 2, scope: !6145)
!6160 = !DILocation(line: 1845, column: 5, scope: !6134)
!6161 = !DILocation(line: 1833, column: 35, scope: !6129)
!6162 = !DILocation(line: 1833, column: 3, scope: !6129)
!6163 = distinct !{!6163, !6132, !6164}
!6164 = !DILocation(line: 1845, column: 5, scope: !6125)
!6165 = !DILocation(line: 1846, column: 1, scope: !6114)
!6166 = distinct !DISubprogram(name: "setup_allocno_assignment_flags", scope: !3, file: !3, line: 1625, type: !2213, scopeLine: 1626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6167 = !DILocalVariable(name: "hard_regno", scope: !6166, file: !3, line: 1627, type: !926)
!6168 = !DILocation(line: 1627, column: 7, scope: !6166)
!6169 = !DILocalVariable(name: "a", scope: !6166, file: !3, line: 1628, type: !2531)
!6170 = !DILocation(line: 1628, column: 17, scope: !6166)
!6171 = !DILocalVariable(name: "ai", scope: !6166, file: !3, line: 1629, type: !6172)
!6172 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_iterator", file: !2174, line: 935, baseType: !6173)
!6173 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2174, line: 932, size: 32, elements: !6174)
!6174 = !{!6175}
!6175 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !6173, file: !2174, line: 934, baseType: !926, size: 32)
!6176 = !DILocation(line: 1629, column: 24, scope: !6166)
!6177 = !DILocation(line: 1631, column: 3, scope: !6178)
!6178 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 1631, column: 3)
!6179 = !DILocation(line: 1631, column: 3, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 1631, column: 3)
!6181 = !DILocation(line: 1633, column: 13, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 1633, column: 11)
!6183 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 1632, column: 5)
!6184 = !DILocation(line: 1633, column: 11, scope: !6183)
!6185 = !DILocation(line: 1636, column: 34, scope: !6182)
!6186 = !DILocation(line: 1636, column: 2, scope: !6182)
!6187 = !DILocation(line: 1637, column: 20, scope: !6183)
!6188 = !DILocation(line: 1637, column: 18, scope: !6183)
!6189 = !DILocation(line: 1644, column: 33, scope: !6183)
!6190 = !DILocation(line: 1644, column: 44, scope: !6183)
!6191 = !DILocation(line: 1645, column: 5, scope: !6183)
!6192 = !DILocation(line: 1645, column: 8, scope: !6183)
!6193 = !DILocation(line: 1646, column: 5, scope: !6183)
!6194 = !DILocation(line: 1646, column: 9, scope: !6183)
!6195 = !DILocation(line: 1647, column: 11, scope: !6183)
!6196 = !DILocation(line: 1647, column: 9, scope: !6183)
!6197 = !DILocation(line: 1647, column: 41, scope: !6183)
!6198 = !DILocation(line: 1644, column: 7, scope: !6183)
!6199 = !DILocation(line: 1644, column: 30, scope: !6183)
!6200 = distinct !{!6200, !6177, !6201}
!6201 = !DILocation(line: 1652, column: 5, scope: !6178)
!6202 = !DILocation(line: 1653, column: 1, scope: !6166)
!6203 = distinct !DISubprogram(name: "setup_reg_renumber", scope: !3, file: !3, line: 1590, type: !2213, scopeLine: 1591, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6204 = !DILocalVariable(name: "regno", scope: !6203, file: !3, line: 1592, type: !926)
!6205 = !DILocation(line: 1592, column: 7, scope: !6203)
!6206 = !DILocalVariable(name: "hard_regno", scope: !6203, file: !3, line: 1592, type: !926)
!6207 = !DILocation(line: 1592, column: 14, scope: !6203)
!6208 = !DILocalVariable(name: "a", scope: !6203, file: !3, line: 1593, type: !2531)
!6209 = !DILocation(line: 1593, column: 17, scope: !6203)
!6210 = !DILocalVariable(name: "ai", scope: !6203, file: !3, line: 1594, type: !6172)
!6211 = !DILocation(line: 1594, column: 24, scope: !6203)
!6212 = !DILocation(line: 1596, column: 22, scope: !6203)
!6213 = !DILocation(line: 1597, column: 3, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6203, file: !3, line: 1597, column: 3)
!6215 = !DILocation(line: 1597, column: 3, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 1597, column: 3)
!6217 = !DILocation(line: 1601, column: 13, scope: !6218)
!6218 = distinct !DILexicalBlock(scope: !6219, file: !3, line: 1601, column: 11)
!6219 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1598, column: 5)
!6220 = !DILocation(line: 1601, column: 11, scope: !6219)
!6221 = !DILocation(line: 1604, column: 2, scope: !6218)
!6222 = !DILocation(line: 1604, column: 25, scope: !6218)
!6223 = !DILocation(line: 1605, column: 39, scope: !6219)
!6224 = !DILocation(line: 1605, column: 7, scope: !6219)
!6225 = !DILocation(line: 1606, column: 20, scope: !6219)
!6226 = !DILocation(line: 1606, column: 18, scope: !6219)
!6227 = !DILocation(line: 1607, column: 21, scope: !6219)
!6228 = !DILocation(line: 1607, column: 13, scope: !6219)
!6229 = !DILocation(line: 1608, column: 30, scope: !6219)
!6230 = !DILocation(line: 1608, column: 41, scope: !6219)
!6231 = !DILocation(line: 1608, column: 52, scope: !6219)
!6232 = !DILocation(line: 1608, column: 29, scope: !6219)
!6233 = !DILocation(line: 1608, column: 7, scope: !6219)
!6234 = !DILocation(line: 1608, column: 20, scope: !6219)
!6235 = !DILocation(line: 1608, column: 27, scope: !6219)
!6236 = !DILocation(line: 1609, column: 11, scope: !6237)
!6237 = distinct !DILexicalBlock(scope: !6219, file: !3, line: 1609, column: 11)
!6238 = !DILocation(line: 1609, column: 22, scope: !6237)
!6239 = !DILocation(line: 1609, column: 27, scope: !6237)
!6240 = !DILocation(line: 1609, column: 30, scope: !6237)
!6241 = !DILocation(line: 1609, column: 60, scope: !6237)
!6242 = !DILocation(line: 1610, column: 4, scope: !6237)
!6243 = !DILocation(line: 1610, column: 36, scope: !6237)
!6244 = !DILocation(line: 1610, column: 48, scope: !6237)
!6245 = !DILocation(line: 1611, column: 8, scope: !6237)
!6246 = !DILocation(line: 1610, column: 9, scope: !6237)
!6247 = !DILocation(line: 1609, column: 11, scope: !6219)
!6248 = !DILocation(line: 1617, column: 23, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6237, file: !3, line: 1612, column: 2)
!6250 = !DILocation(line: 1618, column: 2, scope: !6249)
!6251 = distinct !{!6251, !6213, !6252}
!6252 = !DILocation(line: 1619, column: 5, scope: !6214)
!6253 = !DILocation(line: 1620, column: 1, scope: !6203)
!6254 = distinct !DISubprogram(name: "calculate_allocation_cost", scope: !3, file: !3, line: 1658, type: !2213, scopeLine: 1659, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6255 = !DILocalVariable(name: "hard_regno", scope: !6254, file: !3, line: 1660, type: !926)
!6256 = !DILocation(line: 1660, column: 7, scope: !6254)
!6257 = !DILocalVariable(name: "cost", scope: !6254, file: !3, line: 1660, type: !926)
!6258 = !DILocation(line: 1660, column: 19, scope: !6254)
!6259 = !DILocalVariable(name: "a", scope: !6254, file: !3, line: 1661, type: !2531)
!6260 = !DILocation(line: 1661, column: 17, scope: !6254)
!6261 = !DILocalVariable(name: "ai", scope: !6254, file: !3, line: 1662, type: !6172)
!6262 = !DILocation(line: 1662, column: 24, scope: !6254)
!6263 = !DILocation(line: 1664, column: 50, scope: !6254)
!6264 = !DILocation(line: 1664, column: 35, scope: !6254)
!6265 = !DILocation(line: 1664, column: 20, scope: !6254)
!6266 = !DILocation(line: 1665, column: 3, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 1665, column: 3)
!6268 = !DILocation(line: 1665, column: 3, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 1665, column: 3)
!6270 = !DILocation(line: 1667, column: 20, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 1666, column: 5)
!6272 = !DILocation(line: 1667, column: 18, scope: !6271)
!6273 = !DILocation(line: 1672, column: 11, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 1672, column: 11)
!6275 = !DILocation(line: 1672, column: 22, scope: !6274)
!6276 = !DILocation(line: 1672, column: 11, scope: !6271)
!6277 = !DILocation(line: 1674, column: 11, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 1673, column: 2)
!6279 = !DILocation(line: 1674, column: 9, scope: !6278)
!6280 = !DILocation(line: 1675, column: 20, scope: !6278)
!6281 = !DILocation(line: 1675, column: 17, scope: !6278)
!6282 = !DILocation(line: 1676, column: 2, scope: !6278)
!6283 = !DILocation(line: 1677, column: 16, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 1677, column: 16)
!6285 = !DILocation(line: 1677, column: 43, scope: !6284)
!6286 = !DILocation(line: 1677, column: 16, scope: !6274)
!6287 = !DILocation(line: 1679, column: 12, scope: !6288)
!6288 = distinct !DILexicalBlock(scope: !6284, file: !3, line: 1678, column: 2)
!6289 = !DILocation(line: 1681, column: 7, scope: !6288)
!6290 = !DILocation(line: 1680, column: 6, scope: !6288)
!6291 = !DILocation(line: 1681, column: 32, scope: !6288)
!6292 = !DILocation(line: 1679, column: 9, scope: !6288)
!6293 = !DILocation(line: 1682, column: 20, scope: !6288)
!6294 = !DILocation(line: 1682, column: 17, scope: !6288)
!6295 = !DILocation(line: 1683, column: 2, scope: !6288)
!6296 = !DILocation(line: 1686, column: 11, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6284, file: !3, line: 1685, column: 2)
!6298 = !DILocation(line: 1686, column: 9, scope: !6297)
!6299 = !DILocation(line: 1687, column: 20, scope: !6297)
!6300 = !DILocation(line: 1687, column: 17, scope: !6297)
!6301 = !DILocation(line: 1689, column: 27, scope: !6271)
!6302 = !DILocation(line: 1689, column: 24, scope: !6271)
!6303 = distinct !{!6303, !6266, !6304}
!6304 = !DILocation(line: 1690, column: 5, scope: !6267)
!6305 = !DILocation(line: 1692, column: 7, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 1692, column: 7)
!6307 = !DILocation(line: 1692, column: 33, scope: !6306)
!6308 = !DILocation(line: 1692, column: 37, scope: !6306)
!6309 = !DILocation(line: 1692, column: 40, scope: !6306)
!6310 = !DILocation(line: 1692, column: 54, scope: !6306)
!6311 = !DILocation(line: 1692, column: 7, scope: !6254)
!6312 = !DILocation(line: 1694, column: 16, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6306, file: !3, line: 1693, column: 5)
!6314 = !DILocation(line: 1696, column: 9, scope: !6313)
!6315 = !DILocation(line: 1696, column: 27, scope: !6313)
!6316 = !DILocation(line: 1696, column: 41, scope: !6313)
!6317 = !DILocation(line: 1697, column: 9, scope: !6313)
!6318 = !DILocation(line: 1697, column: 24, scope: !6313)
!6319 = !DILocation(line: 1697, column: 40, scope: !6313)
!6320 = !DILocation(line: 1694, column: 7, scope: !6313)
!6321 = !DILocation(line: 1698, column: 16, scope: !6313)
!6322 = !DILocation(line: 1699, column: 9, scope: !6313)
!6323 = !DILocation(line: 1699, column: 29, scope: !6313)
!6324 = !DILocation(line: 1698, column: 7, scope: !6313)
!6325 = !DILocation(line: 1700, column: 5, scope: !6313)
!6326 = !DILocation(line: 1702, column: 1, scope: !6254)
!6327 = distinct !DISubprogram(name: "VEC_rtx_gc_safe_grow", scope: !675, file: !675, line: 202, type: !6328, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6328 = !DISubroutineType(types: !6329)
!6329 = !{null, !6330, !926}
!6330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!6331 = !DILocalVariable(name: "vec_", arg: 1, scope: !6327, file: !675, line: 202, type: !6330)
!6332 = !DILocation(line: 202, column: 1, scope: !6327)
!6333 = !DILocalVariable(name: "size_", arg: 2, scope: !6327, file: !675, line: 202, type: !926)
!6334 = !DILocation(line: 0, scope: !6327)
!6335 = distinct !DISubprogram(name: "VEC_rtx_base_address", scope: !675, file: !675, line: 200, type: !6336, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6336 = !DISubroutineType(types: !6337)
!6337 = !{!1005, !6338}
!6338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!6339 = !DILocalVariable(name: "vec_", arg: 1, scope: !6335, file: !675, line: 200, type: !6338)
!6340 = !DILocation(line: 200, column: 1, scope: !6335)
!6341 = distinct !DISubprogram(name: "fix_reg_equiv_init", scope: !3, file: !3, line: 1745, type: !2213, scopeLine: 1746, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6342 = !DILocalVariable(name: "max_regno", scope: !6341, file: !3, line: 1747, type: !926)
!6343 = !DILocation(line: 1747, column: 7, scope: !6341)
!6344 = !DILocation(line: 1747, column: 19, scope: !6341)
!6345 = !DILocalVariable(name: "i", scope: !6341, file: !3, line: 1748, type: !926)
!6346 = !DILocation(line: 1748, column: 7, scope: !6341)
!6347 = !DILocalVariable(name: "new_regno", scope: !6341, file: !3, line: 1748, type: !926)
!6348 = !DILocation(line: 1748, column: 10, scope: !6341)
!6349 = !DILocalVariable(name: "x", scope: !6341, file: !3, line: 1749, type: !1006)
!6350 = !DILocation(line: 1749, column: 7, scope: !6341)
!6351 = !DILocalVariable(name: "prev", scope: !6341, file: !3, line: 1749, type: !1006)
!6352 = !DILocation(line: 1749, column: 10, scope: !6341)
!6353 = !DILocalVariable(name: "next", scope: !6341, file: !3, line: 1749, type: !1006)
!6354 = !DILocation(line: 1749, column: 16, scope: !6341)
!6355 = !DILocalVariable(name: "insn", scope: !6341, file: !3, line: 1749, type: !1006)
!6356 = !DILocation(line: 1749, column: 22, scope: !6341)
!6357 = !DILocalVariable(name: "set", scope: !6341, file: !3, line: 1749, type: !1006)
!6358 = !DILocation(line: 1749, column: 28, scope: !6341)
!6359 = !DILocation(line: 1751, column: 7, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6341, file: !3, line: 1751, column: 7)
!6361 = !DILocation(line: 1751, column: 29, scope: !6360)
!6362 = !DILocation(line: 1751, column: 27, scope: !6360)
!6363 = !DILocation(line: 1751, column: 7, scope: !6341)
!6364 = !DILocation(line: 1754, column: 12, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 1752, column: 5)
!6366 = !DILocation(line: 1754, column: 4, scope: !6365)
!6367 = !DILocation(line: 1754, column: 2, scope: !6365)
!6368 = !DILocation(line: 1755, column: 7, scope: !6365)
!6369 = !DILocation(line: 1755, column: 14, scope: !6365)
!6370 = !DILocation(line: 1755, column: 36, scope: !6365)
!6371 = !DILocation(line: 1755, column: 34, scope: !6365)
!6372 = !DILocation(line: 1756, column: 2, scope: !6365)
!6373 = !DILocation(line: 1756, column: 36, scope: !6365)
!6374 = !DILocation(line: 1756, column: 40, scope: !6365)
!6375 = distinct !{!6375, !6368, !6376}
!6376 = !DILocation(line: 1756, column: 42, scope: !6365)
!6377 = !DILocation(line: 1757, column: 14, scope: !6378)
!6378 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 1757, column: 7)
!6379 = !DILocation(line: 1757, column: 12, scope: !6378)
!6380 = !DILocation(line: 1757, column: 39, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6378, file: !3, line: 1757, column: 7)
!6382 = !DILocation(line: 1757, column: 43, scope: !6381)
!6383 = !DILocation(line: 1757, column: 41, scope: !6381)
!6384 = !DILocation(line: 1757, column: 7, scope: !6378)
!6385 = !DILocation(line: 1758, column: 12, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 1758, column: 2)
!6387 = !DILocation(line: 1758, column: 28, scope: !6386)
!6388 = !DILocation(line: 1758, column: 43, scope: !6386)
!6389 = !DILocation(line: 1758, column: 26, scope: !6386)
!6390 = !DILocation(line: 1758, column: 7, scope: !6386)
!6391 = !DILocation(line: 1758, column: 47, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6386, file: !3, line: 1758, column: 2)
!6393 = !DILocation(line: 1758, column: 49, scope: !6392)
!6394 = !DILocation(line: 1758, column: 2, scope: !6386)
!6395 = !DILocation(line: 1760, column: 13, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 1759, column: 4)
!6397 = !DILocation(line: 1760, column: 11, scope: !6396)
!6398 = !DILocation(line: 1761, column: 13, scope: !6396)
!6399 = !DILocation(line: 1761, column: 11, scope: !6396)
!6400 = !DILocation(line: 1762, column: 12, scope: !6396)
!6401 = !DILocation(line: 1762, column: 10, scope: !6396)
!6402 = !DILocation(line: 1765, column: 10, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1765, column: 10)
!6404 = !DILocation(line: 1766, column: 3, scope: !6403)
!6405 = !DILocation(line: 1766, column: 13, scope: !6403)
!6406 = !DILocation(line: 1766, column: 39, scope: !6403)
!6407 = !DILocation(line: 1766, column: 36, scope: !6403)
!6408 = !DILocation(line: 1767, column: 7, scope: !6403)
!6409 = !DILocation(line: 1767, column: 16, scope: !6403)
!6410 = !DILocation(line: 1767, column: 51, scope: !6403)
!6411 = !DILocation(line: 1767, column: 48, scope: !6403)
!6412 = !DILocation(line: 1765, column: 10, scope: !6396)
!6413 = !DILocation(line: 1768, column: 20, scope: !6403)
!6414 = !DILocation(line: 1768, column: 18, scope: !6403)
!6415 = !DILocation(line: 1768, column: 8, scope: !6403)
!6416 = !DILocation(line: 1769, column: 15, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 1769, column: 15)
!6418 = !DILocation(line: 1770, column: 8, scope: !6417)
!6419 = !DILocation(line: 1770, column: 18, scope: !6417)
!6420 = !DILocation(line: 1770, column: 43, scope: !6417)
!6421 = !DILocation(line: 1770, column: 40, scope: !6417)
!6422 = !DILocation(line: 1771, column: 5, scope: !6417)
!6423 = !DILocation(line: 1771, column: 14, scope: !6417)
!6424 = !DILocation(line: 1771, column: 48, scope: !6417)
!6425 = !DILocation(line: 1771, column: 45, scope: !6417)
!6426 = !DILocation(line: 1769, column: 15, scope: !6403)
!6427 = !DILocation(line: 1772, column: 20, scope: !6417)
!6428 = !DILocation(line: 1772, column: 18, scope: !6417)
!6429 = !DILocation(line: 1772, column: 8, scope: !6417)
!6430 = !DILocation(line: 1774, column: 9, scope: !6417)
!6431 = !DILocation(line: 1775, column: 10, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 1775, column: 10)
!6433 = !DILocation(line: 1775, column: 23, scope: !6432)
!6434 = !DILocation(line: 1775, column: 20, scope: !6432)
!6435 = !DILocation(line: 1775, column: 10, scope: !6396)
!6436 = !DILocation(line: 1776, column: 15, scope: !6432)
!6437 = !DILocation(line: 1776, column: 13, scope: !6432)
!6438 = !DILocation(line: 1776, column: 8, scope: !6432)
!6439 = !DILocation(line: 1779, column: 7, scope: !6440)
!6440 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 1779, column: 7)
!6441 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 1778, column: 8)
!6442 = !DILocation(line: 1779, column: 12, scope: !6440)
!6443 = !DILocation(line: 1779, column: 7, scope: !6441)
!6444 = !DILocation(line: 1780, column: 25, scope: !6440)
!6445 = !DILocation(line: 1780, column: 5, scope: !6440)
!6446 = !DILocation(line: 1780, column: 20, scope: !6440)
!6447 = !DILocation(line: 1780, column: 23, scope: !6440)
!6448 = !DILocation(line: 1782, column: 22, scope: !6440)
!6449 = !DILocation(line: 1782, column: 5, scope: !6440)
!6450 = !DILocation(line: 1782, column: 20, scope: !6440)
!6451 = !DILocation(line: 1783, column: 17, scope: !6441)
!6452 = !DILocation(line: 1783, column: 32, scope: !6441)
!6453 = !DILocation(line: 1783, column: 3, scope: !6441)
!6454 = !DILocation(line: 1783, column: 15, scope: !6441)
!6455 = !DILocation(line: 1784, column: 31, scope: !6441)
!6456 = !DILocation(line: 1784, column: 3, scope: !6441)
!6457 = !DILocation(line: 1784, column: 18, scope: !6441)
!6458 = !DILocation(line: 1784, column: 29, scope: !6441)
!6459 = !DILocation(line: 1786, column: 4, scope: !6396)
!6460 = !DILocation(line: 1758, column: 66, scope: !6392)
!6461 = !DILocation(line: 1758, column: 64, scope: !6392)
!6462 = !DILocation(line: 1758, column: 2, scope: !6392)
!6463 = distinct !{!6463, !6394, !6464}
!6464 = !DILocation(line: 1786, column: 4, scope: !6386)
!6465 = !DILocation(line: 1757, column: 65, scope: !6381)
!6466 = !DILocation(line: 1757, column: 7, scope: !6381)
!6467 = distinct !{!6467, !6384, !6468}
!6468 = !DILocation(line: 1786, column: 4, scope: !6378)
!6469 = !DILocation(line: 1787, column: 5, scope: !6365)
!6470 = !DILocation(line: 1788, column: 1, scope: !6341)
!6471 = distinct !DISubprogram(name: "build_insn_chain", scope: !3, file: !3, line: 2841, type: !2213, scopeLine: 2842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!6472 = !DILocalVariable(name: "i", scope: !6471, file: !3, line: 2843, type: !7)
!6473 = !DILocation(line: 2843, column: 16, scope: !6471)
!6474 = !DILocalVariable(name: "p", scope: !6471, file: !3, line: 2844, type: !6475)
!6475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6476, size: 64)
!6476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6477, size: 64)
!6477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "insn_chain", file: !6478, line: 200, size: 1024, elements: !6479)
!6478 = !DIFile(filename: "./reload.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6479 = !{!6480, !6481, !6482, !6483, !6484, !6485, !6486, !6487, !6488, !6489, !6490, !6491, !6494, !6495}
!6480 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6477, file: !6478, line: 203, baseType: !6476, size: 64)
!6481 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !6477, file: !6478, line: 203, baseType: !6476, size: 64, offset: 64)
!6482 = !DIDerivedType(tag: DW_TAG_member, name: "next_need_reload", scope: !6477, file: !6478, line: 207, baseType: !6476, size: 64, offset: 128)
!6483 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !6477, file: !6478, line: 210, baseType: !1006, size: 64, offset: 192)
!6484 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !6477, file: !6478, line: 213, baseType: !926, size: 32, offset: 256)
!6485 = !DIDerivedType(tag: DW_TAG_member, name: "need_reload", scope: !6477, file: !6478, line: 216, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!6486 = !DIDerivedType(tag: DW_TAG_member, name: "need_operand_change", scope: !6477, file: !6478, line: 219, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!6487 = !DIDerivedType(tag: DW_TAG_member, name: "need_elim", scope: !6477, file: !6478, line: 221, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!6488 = !DIDerivedType(tag: DW_TAG_member, name: "is_caller_save_insn", scope: !6477, file: !6478, line: 223, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!6489 = !DIDerivedType(tag: DW_TAG_member, name: "live_throughout", scope: !6477, file: !6478, line: 228, baseType: !2177, size: 256, offset: 320)
!6490 = !DIDerivedType(tag: DW_TAG_member, name: "dead_or_set", scope: !6477, file: !6478, line: 229, baseType: !2177, size: 256, offset: 576)
!6491 = !DIDerivedType(tag: DW_TAG_member, name: "rld", scope: !6477, file: !6478, line: 232, baseType: !6492, size: 64, offset: 832)
!6492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6493, size: 64)
!6493 = !DICompositeType(tag: DW_TAG_structure_type, name: "reload", file: !6478, line: 232, flags: DIFlagFwdDecl)
!6494 = !DIDerivedType(tag: DW_TAG_member, name: "n_reloads", scope: !6477, file: !6478, line: 233, baseType: !926, size: 32, offset: 896)
!6495 = !DIDerivedType(tag: DW_TAG_member, name: "used_spill_regs", scope: !6477, file: !6478, line: 236, baseType: !929, size: 64, offset: 960)
!6496 = !DILocation(line: 2844, column: 23, scope: !6471)
!6497 = !DILocalVariable(name: "bb", scope: !6471, file: !3, line: 2845, type: !1480)
!6498 = !DILocation(line: 2845, column: 15, scope: !6471)
!6499 = !DILocalVariable(name: "c", scope: !6471, file: !3, line: 2846, type: !6476)
!6500 = !DILocation(line: 2846, column: 22, scope: !6471)
!6501 = !DILocalVariable(name: "next", scope: !6471, file: !3, line: 2847, type: !6476)
!6502 = !DILocation(line: 2847, column: 22, scope: !6471)
!6503 = !DILocalVariable(name: "live_relevant_regs", scope: !6471, file: !3, line: 2848, type: !938)
!6504 = !DILocation(line: 2848, column: 10, scope: !6471)
!6505 = !DILocation(line: 2848, column: 31, scope: !6471)
!6506 = !DILocalVariable(name: "elim_regset", scope: !6471, file: !3, line: 2849, type: !938)
!6507 = !DILocation(line: 2849, column: 10, scope: !6471)
!6508 = !DILocation(line: 2849, column: 24, scope: !6471)
!6509 = !DILocalVariable(name: "live_subregs", scope: !6471, file: !3, line: 2857, type: !2197)
!6510 = !DILocation(line: 2857, column: 12, scope: !6471)
!6511 = !DILocation(line: 2857, column: 27, scope: !6471)
!6512 = !DILocalVariable(name: "live_subregs_used", scope: !6471, file: !3, line: 2858, type: !2208)
!6513 = !DILocation(line: 2858, column: 8, scope: !6471)
!6514 = !DILocation(line: 2858, column: 28, scope: !6471)
!6515 = !DILocation(line: 2860, column: 10, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 2860, column: 3)
!6517 = !DILocation(line: 2860, column: 8, scope: !6516)
!6518 = !DILocation(line: 2860, column: 15, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6516, file: !3, line: 2860, column: 3)
!6520 = !DILocation(line: 2860, column: 17, scope: !6519)
!6521 = !DILocation(line: 2860, column: 3, scope: !6516)
!6522 = !DILocation(line: 2861, column: 9, scope: !6523)
!6523 = distinct !DILexicalBlock(scope: !6519, file: !3, line: 2861, column: 9)
!6524 = !DILocation(line: 2861, column: 9, scope: !6519)
!6525 = !DILocation(line: 2862, column: 23, scope: !6523)
!6526 = !DILocation(line: 2862, column: 36, scope: !6523)
!6527 = !DILocation(line: 2862, column: 7, scope: !6523)
!6528 = !DILocation(line: 2860, column: 43, scope: !6519)
!6529 = !DILocation(line: 2860, column: 3, scope: !6519)
!6530 = distinct !{!6530, !6521, !6531}
!6531 = !DILocation(line: 2862, column: 37, scope: !6516)
!6532 = !DILocation(line: 2863, column: 3, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 2863, column: 3)
!6534 = !DILocation(line: 2863, column: 3, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 2863, column: 3)
!6536 = !DILocalVariable(name: "bi", scope: !6537, file: !3, line: 2865, type: !6538)
!6537 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 2864, column: 5)
!6538 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !942, line: 218, baseType: !6539)
!6539 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !942, line: 203, size: 256, elements: !6540)
!6540 = !{!6541, !6542, !6543, !6544}
!6541 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !6539, file: !942, line: 206, baseType: !945, size: 64)
!6542 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !6539, file: !942, line: 209, baseType: !945, size: 64, offset: 64)
!6543 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !6539, file: !942, line: 212, baseType: !7, size: 32, offset: 128)
!6544 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !6539, file: !942, line: 217, baseType: !955, size: 64, offset: 192)
!6545 = !DILocation(line: 2865, column: 23, scope: !6537)
!6546 = !DILocalVariable(name: "insn", scope: !6537, file: !3, line: 2866, type: !1006)
!6547 = !DILocation(line: 2866, column: 11, scope: !6537)
!6548 = !DILocation(line: 2868, column: 7, scope: !6537)
!6549 = !DILocation(line: 2869, column: 15, scope: !6537)
!6550 = !DILocation(line: 2869, column: 7, scope: !6537)
!6551 = !DILocation(line: 2869, column: 37, scope: !6537)
!6552 = !DILocation(line: 2869, column: 47, scope: !6537)
!6553 = !DILocation(line: 2871, column: 7, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 2871, column: 7)
!6555 = !DILocation(line: 2871, column: 7, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6554, file: !3, line: 2871, column: 7)
!6557 = !DILocation(line: 2873, column: 8, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 2873, column: 8)
!6559 = distinct !DILexicalBlock(scope: !6556, file: !3, line: 2872, column: 2)
!6560 = !DILocation(line: 2873, column: 10, scope: !6558)
!6561 = !DILocation(line: 2873, column: 8, scope: !6559)
!6562 = !DILocation(line: 2874, column: 6, scope: !6558)
!6563 = !DILocation(line: 2875, column: 20, scope: !6559)
!6564 = !DILocation(line: 2875, column: 40, scope: !6559)
!6565 = !DILocation(line: 2875, column: 4, scope: !6559)
!6566 = !DILocation(line: 2876, column: 2, scope: !6559)
!6567 = distinct !{!6567, !6553, !6568}
!6568 = !DILocation(line: 2876, column: 2, scope: !6554)
!6569 = !DILocation(line: 2878, column: 7, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 2878, column: 7)
!6571 = !DILocation(line: 2878, column: 7, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6570, file: !3, line: 2878, column: 7)
!6573 = !DILocation(line: 2881, column: 43, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 2881, column: 8)
!6575 = distinct !DILexicalBlock(scope: !6572, file: !3, line: 2880, column: 2)
!6576 = !DILocation(line: 2881, column: 8, scope: !6574)
!6577 = !DILocation(line: 2881, column: 8, scope: !6575)
!6578 = !DILocation(line: 2882, column: 22, scope: !6574)
!6579 = !DILocation(line: 2882, column: 42, scope: !6574)
!6580 = !DILocation(line: 2882, column: 6, scope: !6574)
!6581 = !DILocation(line: 2883, column: 2, scope: !6575)
!6582 = distinct !{!6582, !6569, !6583}
!6583 = !DILocation(line: 2883, column: 2, scope: !6570)
!6584 = !DILocation(line: 2885, column: 7, scope: !6585)
!6585 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 2885, column: 7)
!6586 = !DILocation(line: 2885, column: 7, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6585, file: !3, line: 2885, column: 7)
!6588 = !DILocation(line: 0, scope: !6587)
!6589 = !DILocation(line: 2887, column: 9, scope: !6590)
!6590 = distinct !DILexicalBlock(scope: !6591, file: !3, line: 2887, column: 8)
!6591 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 2886, column: 2)
!6592 = !DILocation(line: 2887, column: 23, scope: !6590)
!6593 = !DILocation(line: 2887, column: 27, scope: !6590)
!6594 = !DILocation(line: 2887, column: 8, scope: !6591)
!6595 = !DILocalVariable(name: "uid", scope: !6596, file: !3, line: 2889, type: !7)
!6596 = distinct !DILexicalBlock(scope: !6590, file: !3, line: 2888, column: 6)
!6597 = !DILocation(line: 2889, column: 21, scope: !6596)
!6598 = !DILocation(line: 2889, column: 27, scope: !6596)
!6599 = !DILocalVariable(name: "def_rec", scope: !6596, file: !3, line: 2890, type: !3423)
!6600 = !DILocation(line: 2890, column: 16, scope: !6596)
!6601 = !DILocalVariable(name: "use_rec", scope: !6596, file: !3, line: 2891, type: !3423)
!6602 = !DILocation(line: 2891, column: 16, scope: !6596)
!6603 = !DILocation(line: 2893, column: 12, scope: !6596)
!6604 = !DILocation(line: 2893, column: 10, scope: !6596)
!6605 = !DILocation(line: 2894, column: 18, scope: !6596)
!6606 = !DILocation(line: 2894, column: 8, scope: !6596)
!6607 = !DILocation(line: 2894, column: 11, scope: !6596)
!6608 = !DILocation(line: 2894, column: 16, scope: !6596)
!6609 = !DILocation(line: 2895, column: 15, scope: !6596)
!6610 = !DILocation(line: 2895, column: 13, scope: !6596)
!6611 = !DILocation(line: 2896, column: 13, scope: !6596)
!6612 = !DILocation(line: 2896, column: 9, scope: !6596)
!6613 = !DILocation(line: 2896, column: 11, scope: !6596)
!6614 = !DILocation(line: 2897, column: 13, scope: !6596)
!6615 = !DILocation(line: 2897, column: 16, scope: !6596)
!6616 = !DILocation(line: 2897, column: 10, scope: !6596)
!6617 = !DILocation(line: 2899, column: 18, scope: !6596)
!6618 = !DILocation(line: 2899, column: 8, scope: !6596)
!6619 = !DILocation(line: 2899, column: 11, scope: !6596)
!6620 = !DILocation(line: 2899, column: 16, scope: !6596)
!6621 = !DILocation(line: 2900, column: 19, scope: !6596)
!6622 = !DILocation(line: 2900, column: 23, scope: !6596)
!6623 = !DILocation(line: 2900, column: 8, scope: !6596)
!6624 = !DILocation(line: 2900, column: 11, scope: !6596)
!6625 = !DILocation(line: 2900, column: 17, scope: !6596)
!6626 = !DILocation(line: 2902, column: 12, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 2902, column: 12)
!6628 = !DILocation(line: 2902, column: 12, scope: !6596)
!6629 = !DILocation(line: 2903, column: 18, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6627, file: !3, line: 2903, column: 3)
!6631 = !DILocation(line: 2903, column: 16, scope: !6630)
!6632 = !DILocation(line: 2903, column: 8, scope: !6630)
!6633 = !DILocation(line: 2903, column: 43, scope: !6634)
!6634 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 2903, column: 3)
!6635 = !DILocation(line: 2903, column: 42, scope: !6634)
!6636 = !DILocation(line: 2903, column: 3, scope: !6630)
!6637 = !DILocalVariable(name: "def", scope: !6638, file: !3, line: 2905, type: !3424)
!6638 = distinct !DILexicalBlock(scope: !6634, file: !3, line: 2904, column: 5)
!6639 = !DILocation(line: 2905, column: 14, scope: !6638)
!6640 = !DILocation(line: 2905, column: 21, scope: !6638)
!6641 = !DILocation(line: 2905, column: 20, scope: !6638)
!6642 = !DILocalVariable(name: "regno", scope: !6638, file: !3, line: 2906, type: !7)
!6643 = !DILocation(line: 2906, column: 20, scope: !6638)
!6644 = !DILocation(line: 2906, column: 28, scope: !6638)
!6645 = !DILocation(line: 2911, column: 12, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 2911, column: 11)
!6647 = !DILocation(line: 2911, column: 11, scope: !6638)
!6648 = !DILocation(line: 2913, column: 8, scope: !6649)
!6649 = distinct !DILexicalBlock(scope: !6650, file: !3, line: 2913, column: 8)
!6650 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 2912, column: 9)
!6651 = !DILocation(line: 2913, column: 14, scope: !6649)
!6652 = !DILocation(line: 2913, column: 8, scope: !6650)
!6653 = !DILocation(line: 2915, column: 24, scope: !6654)
!6654 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 2915, column: 12)
!6655 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 2914, column: 6)
!6656 = !DILocation(line: 2915, column: 13, scope: !6654)
!6657 = !DILocation(line: 2915, column: 12, scope: !6655)
!6658 = !DILocation(line: 2916, column: 27, scope: !6654)
!6659 = !DILocation(line: 2916, column: 30, scope: !6654)
!6660 = !DILocation(line: 2916, column: 43, scope: !6654)
!6661 = !DILocation(line: 2916, column: 10, scope: !6654)
!6662 = !DILocation(line: 2917, column: 6, scope: !6655)
!6663 = !DILocation(line: 2918, column: 48, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 2918, column: 13)
!6665 = !DILocation(line: 2918, column: 13, scope: !6664)
!6666 = !DILocation(line: 2918, column: 13, scope: !6649)
!6667 = !DILocation(line: 2919, column: 23, scope: !6664)
!6668 = !DILocation(line: 2919, column: 26, scope: !6664)
!6669 = !DILocation(line: 2919, column: 39, scope: !6664)
!6670 = !DILocation(line: 2919, column: 6, scope: !6664)
!6671 = !DILocation(line: 2920, column: 9, scope: !6650)
!6672 = !DILocation(line: 2922, column: 12, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6638, file: !3, line: 2922, column: 11)
!6674 = !DILocation(line: 2922, column: 18, scope: !6673)
!6675 = !DILocation(line: 2923, column: 5, scope: !6673)
!6676 = !DILocation(line: 2923, column: 8, scope: !6673)
!6677 = !DILocation(line: 2923, column: 21, scope: !6673)
!6678 = !DILocation(line: 2923, column: 28, scope: !6673)
!6679 = !DILocation(line: 2924, column: 5, scope: !6673)
!6680 = !DILocation(line: 2924, column: 8, scope: !6673)
!6681 = !DILocation(line: 2925, column: 4, scope: !6673)
!6682 = !DILocation(line: 2925, column: 9, scope: !6673)
!6683 = !DILocation(line: 2922, column: 11, scope: !6638)
!6684 = !DILocalVariable(name: "reg", scope: !6685, file: !3, line: 2927, type: !1006)
!6685 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 2926, column: 9)
!6686 = !DILocation(line: 2927, column: 8, scope: !6685)
!6687 = !DILocation(line: 2927, column: 14, scope: !6685)
!6688 = !DILocation(line: 2931, column: 8, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6685, file: !3, line: 2931, column: 8)
!6690 = !DILocation(line: 2931, column: 23, scope: !6689)
!6691 = !DILocation(line: 2932, column: 8, scope: !6689)
!6692 = !DILocation(line: 2932, column: 12, scope: !6689)
!6693 = !DILocation(line: 2931, column: 8, scope: !6685)
!6694 = !DILocalVariable(name: "start", scope: !6695, file: !3, line: 2934, type: !7)
!6695 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 2933, column: 6)
!6696 = !DILocation(line: 2934, column: 21, scope: !6695)
!6697 = !DILocation(line: 2934, column: 29, scope: !6695)
!6698 = !DILocalVariable(name: "last", scope: !6695, file: !3, line: 2935, type: !7)
!6699 = !DILocation(line: 2935, column: 21, scope: !6695)
!6700 = !DILocation(line: 2935, column: 28, scope: !6695)
!6701 = !DILocation(line: 2936, column: 12, scope: !6695)
!6702 = !DILocation(line: 2936, column: 10, scope: !6695)
!6703 = !DILocation(line: 2939, column: 25, scope: !6695)
!6704 = !DILocation(line: 2939, column: 45, scope: !6695)
!6705 = !DILocation(line: 2939, column: 11, scope: !6695)
!6706 = !DILocation(line: 2940, column: 11, scope: !6695)
!6707 = !DILocation(line: 2940, column: 25, scope: !6695)
!6708 = !DILocation(line: 2940, column: 44, scope: !6695)
!6709 = !DILocation(line: 2940, column: 51, scope: !6695)
!6710 = !DILocation(line: 2938, column: 8, scope: !6695)
!6711 = !DILocation(line: 2942, column: 13, scope: !6712)
!6712 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 2942, column: 12)
!6713 = !DILocation(line: 2942, column: 12, scope: !6695)
!6714 = !DILocation(line: 2948, column: 9, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6712, file: !3, line: 2944, column: 10)
!6716 = !DILocation(line: 2948, column: 15, scope: !6715)
!6717 = !DILocation(line: 2948, column: 32, scope: !6715)
!6718 = !DILocation(line: 2948, column: 7, scope: !6715)
!6719 = !DILocation(line: 2949, column: 14, scope: !6715)
!6720 = !DILocation(line: 2949, column: 19, scope: !6715)
!6721 = !DILocation(line: 2949, column: 36, scope: !6715)
!6722 = !DILocation(line: 2950, column: 6, scope: !6715)
!6723 = !DILocation(line: 2950, column: 23, scope: !6715)
!6724 = !DILocation(line: 2949, column: 10, scope: !6715)
!6725 = !DILocation(line: 2951, column: 10, scope: !6715)
!6726 = !DILocation(line: 2954, column: 17, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 2954, column: 12)
!6728 = !DILocation(line: 2954, column: 24, scope: !6727)
!6729 = !DILocation(line: 2954, column: 42, scope: !6727)
!6730 = !DILocation(line: 2954, column: 22, scope: !6727)
!6731 = !DILocation(line: 2954, column: 12, scope: !6695)
!6732 = !DILocation(line: 2955, column: 17, scope: !6727)
!6733 = !DILocation(line: 2955, column: 35, scope: !6727)
!6734 = !DILocation(line: 2955, column: 15, scope: !6727)
!6735 = !DILocation(line: 2955, column: 10, scope: !6727)
!6736 = !DILocation(line: 2957, column: 8, scope: !6695)
!6737 = !DILocation(line: 2957, column: 15, scope: !6695)
!6738 = !DILocation(line: 2957, column: 23, scope: !6695)
!6739 = !DILocation(line: 2957, column: 21, scope: !6695)
!6740 = !DILocation(line: 2959, column: 16, scope: !6741)
!6741 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 2958, column: 10)
!6742 = !DILocation(line: 2959, column: 29, scope: !6741)
!6743 = !DILocation(line: 2959, column: 37, scope: !6741)
!6744 = !DILocation(line: 2959, column: 5, scope: !6741)
!6745 = !DILocation(line: 2960, column: 10, scope: !6741)
!6746 = distinct !{!6746, !6736, !6747}
!6747 = !DILocation(line: 2961, column: 10, scope: !6695)
!6748 = !DILocation(line: 2963, column: 29, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 2963, column: 12)
!6750 = !DILocation(line: 2963, column: 42, scope: !6749)
!6751 = !DILocation(line: 2963, column: 12, scope: !6749)
!6752 = !DILocation(line: 2963, column: 12, scope: !6695)
!6753 = !DILocation(line: 2965, column: 5, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6749, file: !3, line: 2964, column: 10)
!6755 = !DILocation(line: 2965, column: 23, scope: !6754)
!6756 = !DILocation(line: 2965, column: 30, scope: !6754)
!6757 = !DILocation(line: 2966, column: 23, scope: !6754)
!6758 = !DILocation(line: 2966, column: 43, scope: !6754)
!6759 = !DILocation(line: 2966, column: 5, scope: !6754)
!6760 = !DILocation(line: 2967, column: 10, scope: !6754)
!6761 = !DILocation(line: 2972, column: 26, scope: !6749)
!6762 = !DILocation(line: 2972, column: 46, scope: !6749)
!6763 = !DILocation(line: 2972, column: 10, scope: !6749)
!6764 = !DILocation(line: 2973, column: 6, scope: !6695)
!6765 = !DILocation(line: 2981, column: 13, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6767, file: !3, line: 2981, column: 12)
!6767 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 2975, column: 6)
!6768 = !DILocation(line: 2981, column: 12, scope: !6767)
!6769 = !DILocation(line: 2983, column: 23, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6766, file: !3, line: 2982, column: 10)
!6771 = !DILocation(line: 2983, column: 43, scope: !6770)
!6772 = !DILocation(line: 2983, column: 5, scope: !6770)
!6773 = !DILocation(line: 2984, column: 5, scope: !6770)
!6774 = !DILocation(line: 2984, column: 23, scope: !6770)
!6775 = !DILocation(line: 2984, column: 30, scope: !6770)
!6776 = !DILocation(line: 2985, column: 10, scope: !6770)
!6777 = !DILocation(line: 2987, column: 9, scope: !6685)
!6778 = !DILocation(line: 2988, column: 5, scope: !6638)
!6779 = !DILocation(line: 2903, column: 59, scope: !6634)
!6780 = !DILocation(line: 2903, column: 3, scope: !6634)
!6781 = distinct !{!6781, !6636, !6782}
!6782 = !DILocation(line: 2988, column: 5, scope: !6630)
!6783 = !DILocation(line: 2990, column: 31, scope: !6596)
!6784 = !DILocation(line: 2990, column: 51, scope: !6596)
!6785 = !DILocation(line: 2990, column: 8, scope: !6596)
!6786 = !DILocation(line: 2991, column: 22, scope: !6596)
!6787 = !DILocation(line: 2991, column: 25, scope: !6596)
!6788 = !DILocation(line: 2991, column: 42, scope: !6596)
!6789 = !DILocation(line: 2991, column: 8, scope: !6596)
!6790 = !DILocation(line: 2993, column: 12, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 2993, column: 12)
!6792 = !DILocation(line: 2993, column: 12, scope: !6596)
!6793 = !DILocation(line: 2994, column: 18, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6791, file: !3, line: 2994, column: 3)
!6795 = !DILocation(line: 2994, column: 16, scope: !6794)
!6796 = !DILocation(line: 2994, column: 8, scope: !6794)
!6797 = !DILocation(line: 2994, column: 43, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6794, file: !3, line: 2994, column: 3)
!6799 = !DILocation(line: 2994, column: 42, scope: !6798)
!6800 = !DILocation(line: 2994, column: 3, scope: !6794)
!6801 = !DILocalVariable(name: "use", scope: !6802, file: !3, line: 2996, type: !3424)
!6802 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 2995, column: 5)
!6803 = !DILocation(line: 2996, column: 14, scope: !6802)
!6804 = !DILocation(line: 2996, column: 21, scope: !6802)
!6805 = !DILocation(line: 2996, column: 20, scope: !6802)
!6806 = !DILocalVariable(name: "regno", scope: !6802, file: !3, line: 2997, type: !7)
!6807 = !DILocation(line: 2997, column: 20, scope: !6802)
!6808 = !DILocation(line: 2997, column: 28, scope: !6802)
!6809 = !DILocalVariable(name: "reg", scope: !6802, file: !3, line: 2998, type: !1006)
!6810 = !DILocation(line: 2998, column: 11, scope: !6802)
!6811 = !DILocation(line: 2998, column: 17, scope: !6802)
!6812 = !DILocation(line: 3006, column: 11, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 3006, column: 11)
!6814 = !DILocation(line: 3007, column: 4, scope: !6813)
!6815 = !DILocation(line: 3007, column: 8, scope: !6813)
!6816 = !DILocation(line: 3008, column: 4, scope: !6813)
!6817 = !DILocation(line: 3008, column: 7, scope: !6813)
!6818 = !DILocation(line: 3006, column: 11, scope: !6802)
!6819 = !DILocation(line: 3009, column: 9, scope: !6813)
!6820 = !DILocation(line: 3012, column: 26, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 3012, column: 11)
!6822 = !DILocation(line: 3012, column: 46, scope: !6821)
!6823 = !DILocation(line: 3012, column: 12, scope: !6821)
!6824 = !DILocation(line: 3012, column: 11, scope: !6802)
!6825 = !DILocation(line: 3014, column: 8, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6827, file: !3, line: 3014, column: 8)
!6827 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 3013, column: 9)
!6828 = !DILocation(line: 3014, column: 14, scope: !6826)
!6829 = !DILocation(line: 3014, column: 8, scope: !6827)
!6830 = !DILocation(line: 3016, column: 24, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6832, file: !3, line: 3016, column: 12)
!6832 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 3015, column: 6)
!6833 = !DILocation(line: 3016, column: 13, scope: !6831)
!6834 = !DILocation(line: 3016, column: 12, scope: !6832)
!6835 = !DILocation(line: 3017, column: 27, scope: !6831)
!6836 = !DILocation(line: 3017, column: 30, scope: !6831)
!6837 = !DILocation(line: 3017, column: 43, scope: !6831)
!6838 = !DILocation(line: 3017, column: 10, scope: !6831)
!6839 = !DILocation(line: 3018, column: 6, scope: !6832)
!6840 = !DILocation(line: 3019, column: 48, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 3019, column: 13)
!6842 = !DILocation(line: 3019, column: 13, scope: !6841)
!6843 = !DILocation(line: 3019, column: 13, scope: !6826)
!6844 = !DILocation(line: 3020, column: 23, scope: !6841)
!6845 = !DILocation(line: 3020, column: 26, scope: !6841)
!6846 = !DILocation(line: 3020, column: 39, scope: !6841)
!6847 = !DILocation(line: 3020, column: 6, scope: !6841)
!6848 = !DILocation(line: 3021, column: 9, scope: !6827)
!6849 = !DILocation(line: 3023, column: 11, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 3023, column: 11)
!6851 = !DILocation(line: 3023, column: 17, scope: !6850)
!6852 = !DILocation(line: 3024, column: 4, scope: !6850)
!6853 = !DILocation(line: 3024, column: 42, scope: !6850)
!6854 = !DILocation(line: 3024, column: 7, scope: !6850)
!6855 = !DILocation(line: 3023, column: 11, scope: !6802)
!6856 = !DILocation(line: 3026, column: 8, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 3026, column: 8)
!6858 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 3025, column: 9)
!6859 = !DILocation(line: 3026, column: 23, scope: !6857)
!6860 = !DILocation(line: 3027, column: 8, scope: !6857)
!6861 = !DILocation(line: 3027, column: 12, scope: !6857)
!6862 = !DILocation(line: 3026, column: 8, scope: !6858)
!6863 = !DILocalVariable(name: "start", scope: !6864, file: !3, line: 3031, type: !7)
!6864 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 3030, column: 6)
!6865 = !DILocation(line: 3031, column: 21, scope: !6864)
!6866 = !DILocation(line: 3031, column: 29, scope: !6864)
!6867 = !DILocalVariable(name: "last", scope: !6864, file: !3, line: 3032, type: !7)
!6868 = !DILocation(line: 3032, column: 21, scope: !6864)
!6869 = !DILocation(line: 3032, column: 28, scope: !6864)
!6870 = !DILocation(line: 3033, column: 12, scope: !6864)
!6871 = !DILocation(line: 3033, column: 10, scope: !6864)
!6872 = !DILocation(line: 3036, column: 25, scope: !6864)
!6873 = !DILocation(line: 3036, column: 45, scope: !6864)
!6874 = !DILocation(line: 3036, column: 11, scope: !6864)
!6875 = !DILocation(line: 3037, column: 11, scope: !6864)
!6876 = !DILocation(line: 3037, column: 25, scope: !6864)
!6877 = !DILocation(line: 3037, column: 44, scope: !6864)
!6878 = !DILocation(line: 3037, column: 51, scope: !6864)
!6879 = !DILocation(line: 3035, column: 8, scope: !6864)
!6880 = !DILocation(line: 3040, column: 17, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 3040, column: 12)
!6882 = !DILocation(line: 3040, column: 24, scope: !6881)
!6883 = !DILocation(line: 3040, column: 42, scope: !6881)
!6884 = !DILocation(line: 3040, column: 22, scope: !6881)
!6885 = !DILocation(line: 3040, column: 12, scope: !6864)
!6886 = !DILocation(line: 3041, column: 17, scope: !6881)
!6887 = !DILocation(line: 3041, column: 35, scope: !6881)
!6888 = !DILocation(line: 3041, column: 15, scope: !6881)
!6889 = !DILocation(line: 3041, column: 10, scope: !6881)
!6890 = !DILocation(line: 3043, column: 8, scope: !6864)
!6891 = !DILocation(line: 3043, column: 15, scope: !6864)
!6892 = !DILocation(line: 3043, column: 23, scope: !6864)
!6893 = !DILocation(line: 3043, column: 21, scope: !6864)
!6894 = !DILocation(line: 3045, column: 14, scope: !6895)
!6895 = distinct !DILexicalBlock(scope: !6864, file: !3, line: 3044, column: 10)
!6896 = !DILocation(line: 3045, column: 27, scope: !6895)
!6897 = !DILocation(line: 3045, column: 35, scope: !6895)
!6898 = !DILocation(line: 3045, column: 5, scope: !6895)
!6899 = !DILocation(line: 3046, column: 10, scope: !6895)
!6900 = distinct !{!6900, !6890, !6901}
!6901 = !DILocation(line: 3047, column: 10, scope: !6864)
!6902 = !DILocation(line: 3048, column: 6, scope: !6864)
!6903 = !DILocation(line: 3054, column: 6, scope: !6857)
!6904 = !DILocation(line: 3054, column: 24, scope: !6857)
!6905 = !DILocation(line: 3054, column: 31, scope: !6857)
!6906 = !DILocation(line: 3055, column: 20, scope: !6858)
!6907 = !DILocation(line: 3055, column: 40, scope: !6858)
!6908 = !DILocation(line: 3055, column: 4, scope: !6858)
!6909 = !DILocation(line: 3056, column: 9, scope: !6858)
!6910 = !DILocation(line: 3057, column: 5, scope: !6802)
!6911 = !DILocation(line: 2994, column: 59, scope: !6798)
!6912 = !DILocation(line: 2994, column: 3, scope: !6798)
!6913 = distinct !{!6913, !6800, !6914}
!6914 = !DILocation(line: 3057, column: 5, scope: !6794)
!6915 = !DILocation(line: 3058, column: 6, scope: !6596)
!6916 = !DILocation(line: 3059, column: 2, scope: !6591)
!6917 = distinct !{!6917, !6584, !6918}
!6918 = !DILocation(line: 3059, column: 2, scope: !6585)
!6919 = !DILocation(line: 3064, column: 14, scope: !6537)
!6920 = !DILocation(line: 3064, column: 12, scope: !6537)
!6921 = !DILocation(line: 3067, column: 7, scope: !6537)
!6922 = !DILocation(line: 3067, column: 14, scope: !6537)
!6923 = !DILocation(line: 3067, column: 19, scope: !6537)
!6924 = !DILocation(line: 3067, column: 23, scope: !6537)
!6925 = !DILocation(line: 3067, column: 40, scope: !6537)
!6926 = !DILocation(line: 3067, column: 43, scope: !6537)
!6927 = !DILocation(line: 3068, column: 9, scope: !6537)
!6928 = !DILocation(line: 3068, column: 12, scope: !6537)
!6929 = !DILocation(line: 3068, column: 37, scope: !6537)
!6930 = !DILocation(line: 3068, column: 34, scope: !6537)
!6931 = !DILocation(line: 0, scope: !6537)
!6932 = !DILocation(line: 3069, column: 9, scope: !6537)
!6933 = !DILocation(line: 3069, column: 7, scope: !6537)
!6934 = distinct !{!6934, !6921, !6932}
!6935 = !DILocation(line: 3074, column: 7, scope: !6537)
!6936 = !DILocation(line: 3074, column: 14, scope: !6537)
!6937 = !DILocation(line: 3076, column: 9, scope: !6938)
!6938 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 3076, column: 8)
!6939 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 3075, column: 2)
!6940 = !DILocation(line: 3076, column: 23, scope: !6938)
!6941 = !DILocation(line: 3076, column: 27, scope: !6938)
!6942 = !DILocation(line: 3076, column: 8, scope: !6939)
!6943 = !DILocation(line: 3078, column: 12, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6945, file: !3, line: 3078, column: 12)
!6945 = distinct !DILexicalBlock(scope: !6938, file: !3, line: 3077, column: 6)
!6946 = !DILocation(line: 3078, column: 12, scope: !6945)
!6947 = !DILocation(line: 3079, column: 3, scope: !6944)
!6948 = !DILocation(line: 3081, column: 12, scope: !6945)
!6949 = !DILocation(line: 3081, column: 10, scope: !6945)
!6950 = !DILocation(line: 3082, column: 18, scope: !6945)
!6951 = !DILocation(line: 3082, column: 8, scope: !6945)
!6952 = !DILocation(line: 3082, column: 11, scope: !6945)
!6953 = !DILocation(line: 3082, column: 16, scope: !6945)
!6954 = !DILocation(line: 3083, column: 15, scope: !6945)
!6955 = !DILocation(line: 3083, column: 13, scope: !6945)
!6956 = !DILocation(line: 3084, column: 13, scope: !6945)
!6957 = !DILocation(line: 3084, column: 9, scope: !6945)
!6958 = !DILocation(line: 3084, column: 11, scope: !6945)
!6959 = !DILocation(line: 3085, column: 13, scope: !6945)
!6960 = !DILocation(line: 3085, column: 16, scope: !6945)
!6961 = !DILocation(line: 3085, column: 10, scope: !6945)
!6962 = !DILocation(line: 3089, column: 19, scope: !6945)
!6963 = !DILocation(line: 3089, column: 23, scope: !6945)
!6964 = !DILocation(line: 3089, column: 8, scope: !6945)
!6965 = !DILocation(line: 3089, column: 11, scope: !6945)
!6966 = !DILocation(line: 3089, column: 17, scope: !6945)
!6967 = !DILocation(line: 3090, column: 18, scope: !6945)
!6968 = !DILocation(line: 3090, column: 8, scope: !6945)
!6969 = !DILocation(line: 3090, column: 11, scope: !6945)
!6970 = !DILocation(line: 3090, column: 16, scope: !6945)
!6971 = !DILocation(line: 3091, column: 22, scope: !6945)
!6972 = !DILocation(line: 3091, column: 25, scope: !6945)
!6973 = !DILocation(line: 3091, column: 42, scope: !6945)
!6974 = !DILocation(line: 3091, column: 8, scope: !6945)
!6975 = !DILocation(line: 3092, column: 6, scope: !6945)
!6976 = !DILocation(line: 3093, column: 11, scope: !6939)
!6977 = !DILocation(line: 3093, column: 9, scope: !6939)
!6978 = distinct !{!6978, !6935, !6979}
!6979 = !DILocation(line: 3094, column: 2, scope: !6537)
!6980 = !DILocation(line: 3095, column: 5, scope: !6537)
!6981 = distinct !{!6981, !6532, !6982}
!6982 = !DILocation(line: 3095, column: 5, scope: !6533)
!6983 = !DILocation(line: 3097, column: 10, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 3097, column: 3)
!6985 = !DILocation(line: 3097, column: 8, scope: !6984)
!6986 = !DILocation(line: 3097, column: 15, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6984, file: !3, line: 3097, column: 3)
!6988 = !DILocation(line: 3097, column: 34, scope: !6987)
!6989 = !DILocation(line: 3097, column: 17, scope: !6987)
!6990 = !DILocation(line: 3097, column: 3, scope: !6984)
!6991 = !DILocation(line: 3098, column: 9, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6987, file: !3, line: 3098, column: 9)
!6993 = !DILocation(line: 3098, column: 22, scope: !6992)
!6994 = !DILocation(line: 3098, column: 9, scope: !6987)
!6995 = !DILocation(line: 3099, column: 13, scope: !6992)
!6996 = !DILocation(line: 3099, column: 26, scope: !6992)
!6997 = !DILocation(line: 3099, column: 7, scope: !6992)
!6998 = !DILocation(line: 3098, column: 23, scope: !6992)
!6999 = !DILocation(line: 3097, column: 46, scope: !6987)
!7000 = !DILocation(line: 3097, column: 3, scope: !6987)
!7001 = distinct !{!7001, !6990, !7002}
!7002 = !DILocation(line: 3099, column: 28, scope: !6984)
!7003 = !DILocation(line: 3101, column: 23, scope: !6471)
!7004 = !DILocation(line: 3101, column: 21, scope: !6471)
!7005 = !DILocation(line: 3102, column: 4, scope: !6471)
!7006 = !DILocation(line: 3102, column: 6, scope: !6471)
!7007 = !DILocation(line: 3104, column: 9, scope: !6471)
!7008 = !DILocation(line: 3104, column: 3, scope: !6471)
!7009 = !DILocation(line: 3105, column: 9, scope: !6471)
!7010 = !DILocation(line: 3105, column: 3, scope: !6471)
!7011 = !DILocation(line: 3106, column: 3, scope: !6471)
!7012 = !DILocation(line: 3107, column: 3, scope: !6471)
!7013 = !DILocation(line: 3109, column: 7, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 3109, column: 7)
!7015 = !DILocation(line: 3109, column: 7, scope: !6471)
!7016 = !DILocation(line: 3110, column: 24, scope: !7014)
!7017 = !DILocation(line: 3110, column: 5, scope: !7014)
!7018 = !DILocation(line: 3111, column: 1, scope: !6471)
!7019 = distinct !DISubprogram(name: "rhs_regno", scope: !675, file: !675, line: 1051, type: !7020, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7020 = !DISubroutineType(types: !7021)
!7021 = !{!7, !7022}
!7022 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !939, line: 51, baseType: !7023)
!7023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7024, size: 64)
!7024 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1008)
!7025 = !DILocalVariable(name: "x", arg: 1, scope: !7019, file: !675, line: 1051, type: !7022)
!7026 = !DILocation(line: 1051, column: 22, scope: !7019)
!7027 = !DILocation(line: 1053, column: 10, scope: !7019)
!7028 = !DILocation(line: 1053, column: 3, scope: !7019)
!7029 = distinct !DISubprogram(name: "recog_memoized", scope: !7030, file: !7030, line: 150, type: !7031, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7030 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7031 = !DISubroutineType(types: !7032)
!7032 = !{!926, !1006}
!7033 = !DILocalVariable(name: "insn", arg: 1, scope: !7029, file: !7030, line: 150, type: !1006)
!7034 = !DILocation(line: 150, column: 21, scope: !7029)
!7035 = !DILocation(line: 152, column: 7, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7029, file: !7030, line: 152, column: 7)
!7037 = !DILocation(line: 152, column: 24, scope: !7036)
!7038 = !DILocation(line: 152, column: 7, scope: !7029)
!7039 = !DILocation(line: 153, column: 31, scope: !7036)
!7040 = !DILocation(line: 153, column: 47, scope: !7036)
!7041 = !DILocation(line: 153, column: 24, scope: !7036)
!7042 = !DILocation(line: 153, column: 5, scope: !7036)
!7043 = !DILocation(line: 153, column: 22, scope: !7036)
!7044 = !DILocation(line: 154, column: 10, scope: !7029)
!7045 = !DILocation(line: 154, column: 3, scope: !7029)
!7046 = distinct !DISubprogram(name: "no_equiv", scope: !3, file: !3, line: 2265, type: !7047, scopeLine: 2266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7047 = !DISubroutineType(types: !7048)
!7048 = !{null, !1006, !7022, !918}
!7049 = !DILocalVariable(name: "reg", arg: 1, scope: !7046, file: !3, line: 2265, type: !1006)
!7050 = !DILocation(line: 2265, column: 15, scope: !7046)
!7051 = !DILocalVariable(name: "store", arg: 2, scope: !7046, file: !3, line: 2265, type: !7022)
!7052 = !DILocation(line: 2265, column: 30, scope: !7046)
!7053 = !DILocalVariable(name: "data", arg: 3, scope: !7046, file: !3, line: 2265, type: !918)
!7054 = !DILocation(line: 2265, column: 60, scope: !7046)
!7055 = !DILocalVariable(name: "regno", scope: !7046, file: !3, line: 2267, type: !926)
!7056 = !DILocation(line: 2267, column: 7, scope: !7046)
!7057 = !DILocalVariable(name: "list", scope: !7046, file: !3, line: 2268, type: !1006)
!7058 = !DILocation(line: 2268, column: 7, scope: !7046)
!7059 = !DILocation(line: 2270, column: 8, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7046, file: !3, line: 2270, column: 7)
!7061 = !DILocation(line: 2270, column: 7, scope: !7046)
!7062 = !DILocation(line: 2271, column: 5, scope: !7060)
!7063 = !DILocation(line: 2272, column: 11, scope: !7046)
!7064 = !DILocation(line: 2272, column: 9, scope: !7046)
!7065 = !DILocation(line: 2273, column: 10, scope: !7046)
!7066 = !DILocation(line: 2273, column: 20, scope: !7046)
!7067 = !DILocation(line: 2273, column: 27, scope: !7046)
!7068 = !DILocation(line: 2273, column: 8, scope: !7046)
!7069 = !DILocation(line: 2274, column: 7, scope: !7070)
!7070 = distinct !DILexicalBlock(scope: !7046, file: !3, line: 2274, column: 7)
!7071 = !DILocation(line: 2274, column: 15, scope: !7070)
!7072 = !DILocation(line: 2274, column: 12, scope: !7070)
!7073 = !DILocation(line: 2274, column: 7, scope: !7046)
!7074 = !DILocation(line: 2275, column: 5, scope: !7070)
!7075 = !DILocation(line: 2276, column: 33, scope: !7046)
!7076 = !DILocation(line: 2276, column: 3, scope: !7046)
!7077 = !DILocation(line: 2276, column: 13, scope: !7046)
!7078 = !DILocation(line: 2276, column: 20, scope: !7046)
!7079 = !DILocation(line: 2276, column: 31, scope: !7046)
!7080 = !DILocation(line: 2277, column: 3, scope: !7046)
!7081 = !DILocation(line: 2277, column: 13, scope: !7046)
!7082 = !DILocation(line: 2277, column: 20, scope: !7046)
!7083 = !DILocation(line: 2277, column: 32, scope: !7046)
!7084 = !DILocation(line: 2280, column: 7, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7046, file: !3, line: 2280, column: 7)
!7086 = !DILocation(line: 2280, column: 17, scope: !7085)
!7087 = !DILocation(line: 2280, column: 24, scope: !7085)
!7088 = !DILocation(line: 2280, column: 7, scope: !7046)
!7089 = !DILocation(line: 2281, column: 5, scope: !7085)
!7090 = !DILocation(line: 2282, column: 3, scope: !7046)
!7091 = !DILocation(line: 2282, column: 18, scope: !7046)
!7092 = !DILocation(line: 2282, column: 25, scope: !7046)
!7093 = !DILocation(line: 2283, column: 3, scope: !7046)
!7094 = !DILocation(line: 2283, column: 10, scope: !7095)
!7095 = distinct !DILexicalBlock(scope: !7096, file: !3, line: 2283, column: 3)
!7096 = distinct !DILexicalBlock(scope: !7046, file: !3, line: 2283, column: 3)
!7097 = !DILocation(line: 2283, column: 3, scope: !7096)
!7098 = !DILocalVariable(name: "insn", scope: !7099, file: !3, line: 2285, type: !1006)
!7099 = distinct !DILexicalBlock(scope: !7095, file: !3, line: 2284, column: 5)
!7100 = !DILocation(line: 2285, column: 11, scope: !7099)
!7101 = !DILocation(line: 2285, column: 18, scope: !7099)
!7102 = !DILocation(line: 2286, column: 20, scope: !7099)
!7103 = !DILocation(line: 2286, column: 41, scope: !7099)
!7104 = !DILocation(line: 2286, column: 26, scope: !7099)
!7105 = !DILocation(line: 2286, column: 7, scope: !7099)
!7106 = !DILocation(line: 2287, column: 5, scope: !7099)
!7107 = !DILocation(line: 2283, column: 24, scope: !7095)
!7108 = !DILocation(line: 2283, column: 21, scope: !7095)
!7109 = !DILocation(line: 2283, column: 3, scope: !7095)
!7110 = distinct !{!7110, !7097, !7111}
!7111 = !DILocation(line: 2287, column: 5, scope: !7096)
!7112 = !DILocation(line: 2288, column: 1, scope: !7046)
!7113 = distinct !DISubprogram(name: "validate_equiv_mem", scope: !3, file: !3, line: 1957, type: !7114, scopeLine: 1958, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7114 = !DISubroutineType(types: !7115)
!7115 = !{!926, !1006, !1006, !1006}
!7116 = !DILocalVariable(name: "start", arg: 1, scope: !7113, file: !3, line: 1957, type: !1006)
!7117 = !DILocation(line: 1957, column: 25, scope: !7113)
!7118 = !DILocalVariable(name: "reg", arg: 2, scope: !7113, file: !3, line: 1957, type: !1006)
!7119 = !DILocation(line: 1957, column: 36, scope: !7113)
!7120 = !DILocalVariable(name: "memref", arg: 3, scope: !7113, file: !3, line: 1957, type: !1006)
!7121 = !DILocation(line: 1957, column: 45, scope: !7113)
!7122 = !DILocalVariable(name: "insn", scope: !7113, file: !3, line: 1959, type: !1006)
!7123 = !DILocation(line: 1959, column: 7, scope: !7113)
!7124 = !DILocalVariable(name: "note", scope: !7113, file: !3, line: 1960, type: !1006)
!7125 = !DILocation(line: 1960, column: 7, scope: !7113)
!7126 = !DILocation(line: 1962, column: 15, scope: !7113)
!7127 = !DILocation(line: 1962, column: 13, scope: !7113)
!7128 = !DILocation(line: 1963, column: 22, scope: !7113)
!7129 = !DILocation(line: 1967, column: 23, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 1967, column: 7)
!7131 = !DILocation(line: 1967, column: 7, scope: !7130)
!7132 = !DILocation(line: 1967, column: 7, scope: !7113)
!7133 = !DILocation(line: 1968, column: 5, scope: !7130)
!7134 = !DILocation(line: 1970, column: 15, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 1970, column: 3)
!7136 = !DILocation(line: 1970, column: 13, scope: !7135)
!7137 = !DILocation(line: 1970, column: 8, scope: !7135)
!7138 = !DILocation(line: 1970, column: 22, scope: !7139)
!7139 = distinct !DILexicalBlock(scope: !7135, file: !3, line: 1970, column: 3)
!7140 = !DILocation(line: 1970, column: 27, scope: !7139)
!7141 = !DILocation(line: 1970, column: 32, scope: !7139)
!7142 = !DILocation(line: 1970, column: 30, scope: !7139)
!7143 = !DILocation(line: 0, scope: !7139)
!7144 = !DILocation(line: 1970, column: 3, scope: !7135)
!7145 = !DILocation(line: 1972, column: 13, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 1972, column: 11)
!7147 = distinct !DILexicalBlock(scope: !7139, file: !3, line: 1971, column: 5)
!7148 = !DILocation(line: 1972, column: 11, scope: !7147)
!7149 = !DILocation(line: 1973, column: 2, scope: !7146)
!7150 = !DILocation(line: 1975, column: 26, scope: !7151)
!7151 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 1975, column: 11)
!7152 = !DILocation(line: 1975, column: 42, scope: !7151)
!7153 = !DILocation(line: 1975, column: 11, scope: !7151)
!7154 = !DILocation(line: 1975, column: 11, scope: !7147)
!7155 = !DILocation(line: 1976, column: 2, scope: !7151)
!7156 = !DILocation(line: 1978, column: 11, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 1978, column: 11)
!7158 = !DILocation(line: 1978, column: 25, scope: !7157)
!7159 = !DILocation(line: 1978, column: 30, scope: !7157)
!7160 = !DILocation(line: 1979, column: 4, scope: !7157)
!7161 = !DILocation(line: 1979, column: 9, scope: !7157)
!7162 = !DILocation(line: 1978, column: 11, scope: !7147)
!7163 = !DILocation(line: 1980, column: 2, scope: !7157)
!7164 = !DILocation(line: 1982, column: 20, scope: !7147)
!7165 = !DILocation(line: 1982, column: 7, scope: !7147)
!7166 = !DILocation(line: 1989, column: 19, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 1989, column: 7)
!7168 = !DILocation(line: 1989, column: 17, scope: !7167)
!7169 = !DILocation(line: 1989, column: 12, scope: !7167)
!7170 = !DILocation(line: 1989, column: 37, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7167, file: !3, line: 1989, column: 7)
!7172 = !DILocation(line: 1989, column: 7, scope: !7167)
!7173 = !DILocation(line: 1990, column: 7, scope: !7174)
!7174 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 1990, column: 6)
!7175 = !DILocation(line: 1990, column: 28, scope: !7174)
!7176 = !DILocation(line: 1991, column: 7, scope: !7174)
!7177 = !DILocation(line: 1991, column: 10, scope: !7174)
!7178 = !DILocation(line: 1991, column: 31, scope: !7174)
!7179 = !DILocation(line: 1992, column: 6, scope: !7174)
!7180 = !DILocation(line: 1992, column: 9, scope: !7174)
!7181 = !DILocation(line: 1993, column: 6, scope: !7174)
!7182 = !DILocation(line: 1993, column: 34, scope: !7174)
!7183 = !DILocation(line: 1993, column: 50, scope: !7174)
!7184 = !DILocation(line: 1993, column: 9, scope: !7174)
!7185 = !DILocation(line: 1990, column: 6, scope: !7171)
!7186 = !DILocation(line: 1994, column: 4, scope: !7174)
!7187 = !DILocation(line: 1993, column: 56, scope: !7174)
!7188 = !DILocation(line: 1989, column: 50, scope: !7171)
!7189 = !DILocation(line: 1989, column: 48, scope: !7171)
!7190 = !DILocation(line: 1989, column: 7, scope: !7171)
!7191 = distinct !{!7191, !7172, !7192}
!7192 = !DILocation(line: 1994, column: 11, scope: !7167)
!7193 = !DILocation(line: 1995, column: 5, scope: !7147)
!7194 = !DILocation(line: 1970, column: 59, scope: !7139)
!7195 = !DILocation(line: 1970, column: 57, scope: !7139)
!7196 = !DILocation(line: 1970, column: 3, scope: !7139)
!7197 = distinct !{!7197, !7144, !7198}
!7198 = !DILocation(line: 1995, column: 5, scope: !7135)
!7199 = !DILocation(line: 1997, column: 3, scope: !7113)
!7200 = !DILocation(line: 1998, column: 1, scope: !7113)
!7201 = distinct !DISubprogram(name: "REG_N_REFS", scope: !921, file: !921, line: 79, type: !7202, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7202 = !DISubroutineType(types: !7203)
!7203 = !{!926, !926}
!7204 = !DILocalVariable(name: "regno", arg: 1, scope: !7201, file: !921, line: 79, type: !926)
!7205 = !DILocation(line: 79, column: 16, scope: !7201)
!7206 = !DILocation(line: 81, column: 10, scope: !7201)
!7207 = !DILocation(line: 81, column: 34, scope: !7201)
!7208 = !DILocation(line: 81, column: 41, scope: !7201)
!7209 = !DILocation(line: 81, column: 3, scope: !7201)
!7210 = distinct !DISubprogram(name: "equiv_init_varies_p", scope: !3, file: !3, line: 2002, type: !7031, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7211 = !DILocalVariable(name: "x", arg: 1, scope: !7210, file: !3, line: 2002, type: !1006)
!7212 = !DILocation(line: 2002, column: 26, scope: !7210)
!7213 = !DILocalVariable(name: "code", scope: !7210, file: !3, line: 2004, type: !674)
!7214 = !DILocation(line: 2004, column: 12, scope: !7210)
!7215 = !DILocation(line: 2004, column: 19, scope: !7210)
!7216 = !DILocalVariable(name: "i", scope: !7210, file: !3, line: 2005, type: !926)
!7217 = !DILocation(line: 2005, column: 7, scope: !7210)
!7218 = !DILocalVariable(name: "fmt", scope: !7210, file: !3, line: 2006, type: !1031)
!7219 = !DILocation(line: 2006, column: 15, scope: !7210)
!7220 = !DILocation(line: 2008, column: 11, scope: !7210)
!7221 = !DILocation(line: 2008, column: 3, scope: !7210)
!7222 = !DILocation(line: 2011, column: 15, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7210, file: !3, line: 2009, column: 5)
!7224 = !DILocation(line: 2011, column: 34, scope: !7223)
!7225 = !DILocation(line: 2011, column: 58, scope: !7223)
!7226 = !DILocation(line: 2011, column: 37, scope: !7223)
!7227 = !DILocation(line: 2011, column: 7, scope: !7223)
!7228 = !DILocation(line: 2020, column: 7, scope: !7223)
!7229 = !DILocation(line: 2023, column: 14, scope: !7223)
!7230 = !DILocation(line: 2023, column: 24, scope: !7223)
!7231 = !DILocation(line: 2023, column: 35, scope: !7223)
!7232 = !DILocation(line: 2023, column: 43, scope: !7223)
!7233 = !DILocation(line: 2023, column: 48, scope: !7223)
!7234 = !DILocation(line: 2023, column: 65, scope: !7223)
!7235 = !DILocation(line: 2023, column: 51, scope: !7223)
!7236 = !DILocation(line: 0, scope: !7223)
!7237 = !DILocation(line: 2023, column: 7, scope: !7223)
!7238 = !DILocation(line: 2026, column: 11, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7223, file: !3, line: 2026, column: 11)
!7240 = !DILocation(line: 2026, column: 11, scope: !7223)
!7241 = !DILocation(line: 2027, column: 2, scope: !7239)
!7242 = !DILocation(line: 2032, column: 7, scope: !7223)
!7243 = !DILocation(line: 2035, column: 9, scope: !7210)
!7244 = !DILocation(line: 2035, column: 7, scope: !7210)
!7245 = !DILocation(line: 2036, column: 12, scope: !7246)
!7246 = distinct !DILexicalBlock(scope: !7210, file: !3, line: 2036, column: 3)
!7247 = !DILocation(line: 2036, column: 34, scope: !7246)
!7248 = !DILocation(line: 2036, column: 10, scope: !7246)
!7249 = !DILocation(line: 2036, column: 8, scope: !7246)
!7250 = !DILocation(line: 2036, column: 39, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7246, file: !3, line: 2036, column: 3)
!7252 = !DILocation(line: 2036, column: 41, scope: !7251)
!7253 = !DILocation(line: 2036, column: 3, scope: !7246)
!7254 = !DILocation(line: 2037, column: 9, scope: !7255)
!7255 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 2037, column: 9)
!7256 = !DILocation(line: 2037, column: 13, scope: !7255)
!7257 = !DILocation(line: 2037, column: 16, scope: !7255)
!7258 = !DILocation(line: 2037, column: 9, scope: !7251)
!7259 = !DILocation(line: 2039, column: 27, scope: !7260)
!7260 = distinct !DILexicalBlock(scope: !7261, file: !3, line: 2039, column: 6)
!7261 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 2038, column: 7)
!7262 = !DILocation(line: 2039, column: 6, scope: !7260)
!7263 = !DILocation(line: 2039, column: 6, scope: !7261)
!7264 = !DILocation(line: 2040, column: 4, scope: !7260)
!7265 = !DILocation(line: 2041, column: 7, scope: !7261)
!7266 = !DILocation(line: 2042, column: 14, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 2042, column: 14)
!7268 = !DILocation(line: 2042, column: 18, scope: !7267)
!7269 = !DILocation(line: 2042, column: 21, scope: !7267)
!7270 = !DILocation(line: 2042, column: 14, scope: !7255)
!7271 = !DILocalVariable(name: "j", scope: !7272, file: !3, line: 2044, type: !926)
!7272 = distinct !DILexicalBlock(scope: !7267, file: !3, line: 2043, column: 7)
!7273 = !DILocation(line: 2044, column: 6, scope: !7272)
!7274 = !DILocation(line: 2045, column: 9, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 2045, column: 2)
!7276 = !DILocation(line: 2045, column: 7, scope: !7275)
!7277 = !DILocation(line: 2045, column: 14, scope: !7278)
!7278 = distinct !DILexicalBlock(scope: !7275, file: !3, line: 2045, column: 2)
!7279 = !DILocation(line: 2045, column: 18, scope: !7278)
!7280 = !DILocation(line: 2045, column: 16, scope: !7278)
!7281 = !DILocation(line: 2045, column: 2, scope: !7275)
!7282 = !DILocation(line: 2046, column: 29, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2046, column: 8)
!7284 = !DILocation(line: 2046, column: 8, scope: !7283)
!7285 = !DILocation(line: 2046, column: 8, scope: !7278)
!7286 = !DILocation(line: 2047, column: 6, scope: !7283)
!7287 = !DILocation(line: 2046, column: 46, scope: !7283)
!7288 = !DILocation(line: 2045, column: 35, scope: !7278)
!7289 = !DILocation(line: 2045, column: 2, scope: !7278)
!7290 = distinct !{!7290, !7281, !7291}
!7291 = !DILocation(line: 2047, column: 13, scope: !7275)
!7292 = !DILocation(line: 2048, column: 7, scope: !7272)
!7293 = !DILocation(line: 2037, column: 19, scope: !7255)
!7294 = !DILocation(line: 2036, column: 48, scope: !7251)
!7295 = !DILocation(line: 2036, column: 3, scope: !7251)
!7296 = distinct !{!7296, !7253, !7297}
!7297 = !DILocation(line: 2048, column: 7, scope: !7246)
!7298 = !DILocation(line: 2050, column: 3, scope: !7210)
!7299 = !DILocation(line: 2051, column: 1, scope: !7210)
!7300 = distinct !DISubprogram(name: "equiv_init_movable_p", scope: !3, file: !3, line: 2058, type: !7301, scopeLine: 2059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7301 = !DISubroutineType(types: !7302)
!7302 = !{!926, !1006, !926}
!7303 = !DILocalVariable(name: "x", arg: 1, scope: !7300, file: !3, line: 2058, type: !1006)
!7304 = !DILocation(line: 2058, column: 27, scope: !7300)
!7305 = !DILocalVariable(name: "regno", arg: 2, scope: !7300, file: !3, line: 2058, type: !926)
!7306 = !DILocation(line: 2058, column: 34, scope: !7300)
!7307 = !DILocalVariable(name: "i", scope: !7300, file: !3, line: 2060, type: !926)
!7308 = !DILocation(line: 2060, column: 7, scope: !7300)
!7309 = !DILocalVariable(name: "j", scope: !7300, file: !3, line: 2060, type: !926)
!7310 = !DILocation(line: 2060, column: 10, scope: !7300)
!7311 = !DILocalVariable(name: "fmt", scope: !7300, file: !3, line: 2061, type: !1031)
!7312 = !DILocation(line: 2061, column: 15, scope: !7300)
!7313 = !DILocalVariable(name: "code", scope: !7300, file: !3, line: 2062, type: !674)
!7314 = !DILocation(line: 2062, column: 17, scope: !7300)
!7315 = !DILocation(line: 2062, column: 24, scope: !7300)
!7316 = !DILocation(line: 2064, column: 11, scope: !7300)
!7317 = !DILocation(line: 2064, column: 3, scope: !7300)
!7318 = !DILocation(line: 2067, column: 36, scope: !7319)
!7319 = distinct !DILexicalBlock(scope: !7300, file: !3, line: 2065, column: 5)
!7320 = !DILocation(line: 2067, column: 49, scope: !7319)
!7321 = !DILocation(line: 2067, column: 14, scope: !7319)
!7322 = !DILocation(line: 2067, column: 7, scope: !7319)
!7323 = !DILocation(line: 2071, column: 7, scope: !7319)
!7324 = !DILocation(line: 2079, column: 7, scope: !7319)
!7325 = !DILocation(line: 2082, column: 15, scope: !7319)
!7326 = !DILocation(line: 2082, column: 25, scope: !7319)
!7327 = !DILocation(line: 2082, column: 36, scope: !7319)
!7328 = !DILocation(line: 2082, column: 50, scope: !7319)
!7329 = !DILocation(line: 2082, column: 60, scope: !7319)
!7330 = !DILocation(line: 2082, column: 67, scope: !7319)
!7331 = !DILocation(line: 2082, column: 47, scope: !7319)
!7332 = !DILocation(line: 2083, column: 8, scope: !7319)
!7333 = !DILocation(line: 2083, column: 11, scope: !7319)
!7334 = !DILocation(line: 2083, column: 21, scope: !7319)
!7335 = !DILocation(line: 2083, column: 32, scope: !7319)
!7336 = !DILocation(line: 2084, column: 7, scope: !7319)
!7337 = !DILocation(line: 2084, column: 11, scope: !7319)
!7338 = !DILocation(line: 2084, column: 39, scope: !7319)
!7339 = !DILocation(line: 2084, column: 58, scope: !7319)
!7340 = !DILocation(line: 2084, column: 77, scope: !7319)
!7341 = !DILocation(line: 2084, column: 63, scope: !7319)
!7342 = !DILocation(line: 2084, column: 61, scope: !7319)
!7343 = !DILocation(line: 0, scope: !7319)
!7344 = !DILocation(line: 2082, column: 7, scope: !7319)
!7345 = !DILocation(line: 2087, column: 7, scope: !7319)
!7346 = !DILocation(line: 2090, column: 11, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7319, file: !3, line: 2090, column: 11)
!7348 = !DILocation(line: 2090, column: 11, scope: !7319)
!7349 = !DILocation(line: 2091, column: 2, scope: !7347)
!7350 = !DILocation(line: 2096, column: 7, scope: !7319)
!7351 = !DILocation(line: 2099, column: 9, scope: !7300)
!7352 = !DILocation(line: 2099, column: 7, scope: !7300)
!7353 = !DILocation(line: 2100, column: 12, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7300, file: !3, line: 2100, column: 3)
!7355 = !DILocation(line: 2100, column: 34, scope: !7354)
!7356 = !DILocation(line: 2100, column: 10, scope: !7354)
!7357 = !DILocation(line: 2100, column: 8, scope: !7354)
!7358 = !DILocation(line: 2100, column: 39, scope: !7359)
!7359 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 2100, column: 3)
!7360 = !DILocation(line: 2100, column: 41, scope: !7359)
!7361 = !DILocation(line: 2100, column: 3, scope: !7354)
!7362 = !DILocation(line: 2101, column: 13, scope: !7359)
!7363 = !DILocation(line: 2101, column: 17, scope: !7359)
!7364 = !DILocation(line: 2101, column: 5, scope: !7359)
!7365 = !DILocation(line: 2104, column: 30, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 2104, column: 6)
!7367 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 2102, column: 7)
!7368 = !DILocation(line: 2104, column: 43, scope: !7366)
!7369 = !DILocation(line: 2104, column: 8, scope: !7366)
!7370 = !DILocation(line: 2104, column: 6, scope: !7367)
!7371 = !DILocation(line: 2105, column: 4, scope: !7366)
!7372 = !DILocation(line: 2106, column: 2, scope: !7367)
!7373 = !DILocation(line: 2108, column: 11, scope: !7374)
!7374 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 2108, column: 2)
!7375 = !DILocation(line: 2108, column: 26, scope: !7374)
!7376 = !DILocation(line: 2108, column: 9, scope: !7374)
!7377 = !DILocation(line: 2108, column: 7, scope: !7374)
!7378 = !DILocation(line: 2108, column: 31, scope: !7379)
!7379 = distinct !DILexicalBlock(scope: !7374, file: !3, line: 2108, column: 2)
!7380 = !DILocation(line: 2108, column: 33, scope: !7379)
!7381 = !DILocation(line: 2108, column: 2, scope: !7374)
!7382 = !DILocation(line: 2109, column: 32, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7379, file: !3, line: 2109, column: 8)
!7384 = !DILocation(line: 2109, column: 51, scope: !7383)
!7385 = !DILocation(line: 2109, column: 10, scope: !7383)
!7386 = !DILocation(line: 2109, column: 8, scope: !7379)
!7387 = !DILocation(line: 2110, column: 6, scope: !7383)
!7388 = !DILocation(line: 2109, column: 56, scope: !7383)
!7389 = !DILocation(line: 2108, column: 40, scope: !7379)
!7390 = !DILocation(line: 2108, column: 2, scope: !7379)
!7391 = distinct !{!7391, !7381, !7392}
!7392 = !DILocation(line: 2110, column: 13, scope: !7374)
!7393 = !DILocation(line: 2111, column: 2, scope: !7367)
!7394 = !DILocation(line: 2112, column: 7, scope: !7367)
!7395 = !DILocation(line: 2100, column: 48, scope: !7359)
!7396 = !DILocation(line: 2100, column: 3, scope: !7359)
!7397 = distinct !{!7397, !7361, !7398}
!7398 = !DILocation(line: 2112, column: 7, scope: !7354)
!7399 = !DILocation(line: 2114, column: 3, scope: !7300)
!7400 = !DILocation(line: 2115, column: 1, scope: !7300)
!7401 = distinct !DISubprogram(name: "contains_replace_regs", scope: !3, file: !3, line: 2119, type: !7031, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7402 = !DILocalVariable(name: "x", arg: 1, scope: !7401, file: !3, line: 2119, type: !1006)
!7403 = !DILocation(line: 2119, column: 28, scope: !7401)
!7404 = !DILocalVariable(name: "i", scope: !7401, file: !3, line: 2121, type: !926)
!7405 = !DILocation(line: 2121, column: 7, scope: !7401)
!7406 = !DILocalVariable(name: "j", scope: !7401, file: !3, line: 2121, type: !926)
!7407 = !DILocation(line: 2121, column: 10, scope: !7401)
!7408 = !DILocalVariable(name: "fmt", scope: !7401, file: !3, line: 2122, type: !1031)
!7409 = !DILocation(line: 2122, column: 15, scope: !7401)
!7410 = !DILocalVariable(name: "code", scope: !7401, file: !3, line: 2123, type: !674)
!7411 = !DILocation(line: 2123, column: 17, scope: !7401)
!7412 = !DILocation(line: 2123, column: 24, scope: !7401)
!7413 = !DILocation(line: 2125, column: 11, scope: !7401)
!7414 = !DILocation(line: 2125, column: 3, scope: !7401)
!7415 = !DILocation(line: 2137, column: 7, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !7401, file: !3, line: 2126, column: 5)
!7417 = !DILocation(line: 2140, column: 14, scope: !7416)
!7418 = !DILocation(line: 2140, column: 24, scope: !7416)
!7419 = !DILocation(line: 2140, column: 35, scope: !7416)
!7420 = !DILocation(line: 2140, column: 7, scope: !7416)
!7421 = !DILocation(line: 2143, column: 7, scope: !7416)
!7422 = !DILocation(line: 2146, column: 9, scope: !7401)
!7423 = !DILocation(line: 2146, column: 7, scope: !7401)
!7424 = !DILocation(line: 2147, column: 12, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !7401, file: !3, line: 2147, column: 3)
!7426 = !DILocation(line: 2147, column: 34, scope: !7425)
!7427 = !DILocation(line: 2147, column: 10, scope: !7425)
!7428 = !DILocation(line: 2147, column: 8, scope: !7425)
!7429 = !DILocation(line: 2147, column: 39, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7425, file: !3, line: 2147, column: 3)
!7431 = !DILocation(line: 2147, column: 41, scope: !7430)
!7432 = !DILocation(line: 2147, column: 3, scope: !7425)
!7433 = !DILocation(line: 2148, column: 13, scope: !7430)
!7434 = !DILocation(line: 2148, column: 17, scope: !7430)
!7435 = !DILocation(line: 2148, column: 5, scope: !7430)
!7436 = !DILocation(line: 2151, column: 29, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 2151, column: 6)
!7438 = distinct !DILexicalBlock(scope: !7430, file: !3, line: 2149, column: 7)
!7439 = !DILocation(line: 2151, column: 6, scope: !7437)
!7440 = !DILocation(line: 2151, column: 6, scope: !7438)
!7441 = !DILocation(line: 2152, column: 4, scope: !7437)
!7442 = !DILocation(line: 2153, column: 2, scope: !7438)
!7443 = !DILocation(line: 2155, column: 11, scope: !7444)
!7444 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 2155, column: 2)
!7445 = !DILocation(line: 2155, column: 26, scope: !7444)
!7446 = !DILocation(line: 2155, column: 9, scope: !7444)
!7447 = !DILocation(line: 2155, column: 7, scope: !7444)
!7448 = !DILocation(line: 2155, column: 31, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7444, file: !3, line: 2155, column: 2)
!7450 = !DILocation(line: 2155, column: 33, scope: !7449)
!7451 = !DILocation(line: 2155, column: 2, scope: !7444)
!7452 = !DILocation(line: 2156, column: 31, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 2156, column: 8)
!7454 = !DILocation(line: 2156, column: 8, scope: !7453)
!7455 = !DILocation(line: 2156, column: 8, scope: !7449)
!7456 = !DILocation(line: 2157, column: 6, scope: !7453)
!7457 = !DILocation(line: 2156, column: 48, scope: !7453)
!7458 = !DILocation(line: 2155, column: 40, scope: !7449)
!7459 = !DILocation(line: 2155, column: 2, scope: !7449)
!7460 = distinct !{!7460, !7451, !7461}
!7461 = !DILocation(line: 2157, column: 13, scope: !7444)
!7462 = !DILocation(line: 2158, column: 2, scope: !7438)
!7463 = !DILocation(line: 2159, column: 7, scope: !7438)
!7464 = !DILocation(line: 2147, column: 48, scope: !7430)
!7465 = !DILocation(line: 2147, column: 3, scope: !7430)
!7466 = distinct !{!7466, !7432, !7467}
!7467 = !DILocation(line: 2159, column: 7, scope: !7425)
!7468 = !DILocation(line: 2161, column: 3, scope: !7401)
!7469 = !DILocation(line: 2162, column: 1, scope: !7401)
!7470 = distinct !DISubprogram(name: "memref_used_between_p", scope: !3, file: !3, line: 2236, type: !7114, scopeLine: 2237, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7471 = !DILocalVariable(name: "memref", arg: 1, scope: !7470, file: !3, line: 2236, type: !1006)
!7472 = !DILocation(line: 2236, column: 28, scope: !7470)
!7473 = !DILocalVariable(name: "start", arg: 2, scope: !7470, file: !3, line: 2236, type: !1006)
!7474 = !DILocation(line: 2236, column: 40, scope: !7470)
!7475 = !DILocalVariable(name: "end", arg: 3, scope: !7470, file: !3, line: 2236, type: !1006)
!7476 = !DILocation(line: 2236, column: 51, scope: !7470)
!7477 = !DILocalVariable(name: "insn", scope: !7470, file: !3, line: 2238, type: !1006)
!7478 = !DILocation(line: 2238, column: 7, scope: !7470)
!7479 = !DILocation(line: 2240, column: 15, scope: !7480)
!7480 = distinct !DILexicalBlock(scope: !7470, file: !3, line: 2240, column: 3)
!7481 = !DILocation(line: 2240, column: 13, scope: !7480)
!7482 = !DILocation(line: 2240, column: 8, scope: !7480)
!7483 = !DILocation(line: 2240, column: 34, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7480, file: !3, line: 2240, column: 3)
!7485 = !DILocation(line: 2240, column: 42, scope: !7484)
!7486 = !DILocation(line: 2240, column: 39, scope: !7484)
!7487 = !DILocation(line: 2240, column: 3, scope: !7480)
!7488 = !DILocation(line: 2243, column: 12, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2243, column: 11)
!7490 = distinct !DILexicalBlock(scope: !7484, file: !3, line: 2242, column: 5)
!7491 = !DILocation(line: 2243, column: 11, scope: !7490)
!7492 = !DILocation(line: 2244, column: 2, scope: !7489)
!7493 = !DILocation(line: 2246, column: 32, scope: !7494)
!7494 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2246, column: 11)
!7495 = !DILocation(line: 2246, column: 40, scope: !7494)
!7496 = !DILocation(line: 2246, column: 11, scope: !7494)
!7497 = !DILocation(line: 2246, column: 11, scope: !7490)
!7498 = !DILocation(line: 2247, column: 2, scope: !7494)
!7499 = !DILocation(line: 2250, column: 11, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2250, column: 11)
!7501 = !DILocation(line: 2250, column: 25, scope: !7500)
!7502 = !DILocation(line: 2250, column: 31, scope: !7500)
!7503 = !DILocation(line: 2250, column: 11, scope: !7490)
!7504 = !DILocation(line: 2251, column: 2, scope: !7500)
!7505 = !DILocation(line: 2252, column: 5, scope: !7490)
!7506 = !DILocation(line: 2241, column: 15, scope: !7484)
!7507 = !DILocation(line: 2241, column: 13, scope: !7484)
!7508 = !DILocation(line: 2240, column: 3, scope: !7484)
!7509 = distinct !{!7509, !7487, !7510}
!7510 = !DILocation(line: 2252, column: 5, scope: !7480)
!7511 = !DILocation(line: 2254, column: 3, scope: !7470)
!7512 = !DILocation(line: 2255, column: 1, scope: !7470)
!7513 = distinct !DISubprogram(name: "df_live_get_bb_info", scope: !818, file: !818, line: 1070, type: !7514, scopeLine: 1071, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7514 = !DISubroutineType(types: !7515)
!7515 = !{!2190, !7}
!7516 = !DILocalVariable(name: "index", arg: 1, scope: !7513, file: !818, line: 1070, type: !7)
!7517 = !DILocation(line: 1070, column: 35, scope: !7513)
!7518 = !DILocation(line: 1072, column: 7, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7513, file: !818, line: 1072, column: 7)
!7520 = !DILocation(line: 1072, column: 15, scope: !7519)
!7521 = !DILocation(line: 1072, column: 24, scope: !7519)
!7522 = !DILocation(line: 1072, column: 13, scope: !7519)
!7523 = !DILocation(line: 1072, column: 7, scope: !7513)
!7524 = !DILocation(line: 1073, column: 39, scope: !7519)
!7525 = !DILocation(line: 1073, column: 48, scope: !7519)
!7526 = !DILocation(line: 1073, column: 59, scope: !7519)
!7527 = !DILocation(line: 1073, column: 12, scope: !7519)
!7528 = !DILocation(line: 1073, column: 5, scope: !7519)
!7529 = !DILocation(line: 1075, column: 5, scope: !7519)
!7530 = !DILocation(line: 1076, column: 1, scope: !7513)
!7531 = distinct !DISubprogram(name: "adjust_cleared_regs", scope: !3, file: !3, line: 2294, type: !7532, scopeLine: 2295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7532 = !DISubroutineType(types: !7533)
!7533 = !{!1006, !1006, !7022, !918}
!7534 = !DILocalVariable(name: "loc", arg: 1, scope: !7531, file: !3, line: 2294, type: !1006)
!7535 = !DILocation(line: 2294, column: 26, scope: !7531)
!7536 = !DILocalVariable(name: "old_rtx", arg: 2, scope: !7531, file: !3, line: 2294, type: !7022)
!7537 = !DILocation(line: 2294, column: 41, scope: !7531)
!7538 = !DILocalVariable(name: "data", arg: 3, scope: !7531, file: !3, line: 2294, type: !918)
!7539 = !DILocation(line: 2294, column: 73, scope: !7531)
!7540 = !DILocation(line: 2296, column: 7, scope: !7541)
!7541 = distinct !DILexicalBlock(scope: !7531, file: !3, line: 2296, column: 7)
!7542 = !DILocation(line: 2296, column: 7, scope: !7531)
!7543 = !DILocalVariable(name: "cleared_regs", scope: !7544, file: !3, line: 2298, type: !938)
!7544 = distinct !DILexicalBlock(scope: !7541, file: !3, line: 2297, column: 5)
!7545 = !DILocation(line: 2298, column: 14, scope: !7544)
!7546 = !DILocation(line: 2298, column: 38, scope: !7544)
!7547 = !DILocation(line: 2298, column: 29, scope: !7544)
!7548 = !DILocation(line: 2299, column: 25, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7544, file: !3, line: 2299, column: 11)
!7550 = !DILocation(line: 2299, column: 39, scope: !7549)
!7551 = !DILocation(line: 2299, column: 11, scope: !7549)
!7552 = !DILocation(line: 2299, column: 11, scope: !7544)
!7553 = !DILocation(line: 2300, column: 35, scope: !7549)
!7554 = !DILocation(line: 2300, column: 45, scope: !7549)
!7555 = !DILocation(line: 2300, column: 58, scope: !7549)
!7556 = !DILocation(line: 2300, column: 34, scope: !7549)
!7557 = !DILocation(line: 2301, column: 37, scope: !7549)
!7558 = !DILocation(line: 2300, column: 9, scope: !7549)
!7559 = !DILocation(line: 2300, column: 2, scope: !7549)
!7560 = !DILocation(line: 2302, column: 5, scope: !7544)
!7561 = !DILocation(line: 2303, column: 3, scope: !7531)
!7562 = !DILocation(line: 2304, column: 1, scope: !7531)
!7563 = distinct !DISubprogram(name: "validate_equiv_mem_from_store", scope: !3, file: !3, line: 1940, type: !7047, scopeLine: 1942, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7564 = !DILocalVariable(name: "dest", arg: 1, scope: !7563, file: !3, line: 1940, type: !1006)
!7565 = !DILocation(line: 1940, column: 36, scope: !7563)
!7566 = !DILocalVariable(name: "set", arg: 2, scope: !7563, file: !3, line: 1940, type: !7022)
!7567 = !DILocation(line: 1940, column: 52, scope: !7563)
!7568 = !DILocalVariable(name: "data", arg: 3, scope: !7563, file: !3, line: 1941, type: !918)
!7569 = !DILocation(line: 1941, column: 17, scope: !7563)
!7570 = !DILocation(line: 1943, column: 8, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 1943, column: 7)
!7572 = !DILocation(line: 1944, column: 8, scope: !7571)
!7573 = !DILocation(line: 1944, column: 36, scope: !7571)
!7574 = !DILocation(line: 1944, column: 42, scope: !7571)
!7575 = !DILocation(line: 1944, column: 11, scope: !7571)
!7576 = !DILocation(line: 1945, column: 7, scope: !7571)
!7577 = !DILocation(line: 1945, column: 11, scope: !7571)
!7578 = !DILocation(line: 1946, column: 4, scope: !7571)
!7579 = !DILocation(line: 1946, column: 24, scope: !7571)
!7580 = !DILocation(line: 1946, column: 40, scope: !7571)
!7581 = !DILocation(line: 1946, column: 7, scope: !7571)
!7582 = !DILocation(line: 1943, column: 7, scope: !7563)
!7583 = !DILocation(line: 1947, column: 24, scope: !7571)
!7584 = !DILocation(line: 1947, column: 5, scope: !7571)
!7585 = !DILocation(line: 1948, column: 1, scope: !7563)
!7586 = distinct !DISubprogram(name: "memref_referenced_p", scope: !3, file: !3, line: 2167, type: !7587, scopeLine: 2168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7587 = !DISubroutineType(types: !7588)
!7588 = !{!926, !1006, !1006}
!7589 = !DILocalVariable(name: "memref", arg: 1, scope: !7586, file: !3, line: 2167, type: !1006)
!7590 = !DILocation(line: 2167, column: 26, scope: !7586)
!7591 = !DILocalVariable(name: "x", arg: 2, scope: !7586, file: !3, line: 2167, type: !1006)
!7592 = !DILocation(line: 2167, column: 38, scope: !7586)
!7593 = !DILocalVariable(name: "i", scope: !7586, file: !3, line: 2169, type: !926)
!7594 = !DILocation(line: 2169, column: 7, scope: !7586)
!7595 = !DILocalVariable(name: "j", scope: !7586, file: !3, line: 2169, type: !926)
!7596 = !DILocation(line: 2169, column: 10, scope: !7586)
!7597 = !DILocalVariable(name: "fmt", scope: !7586, file: !3, line: 2170, type: !1031)
!7598 = !DILocation(line: 2170, column: 15, scope: !7586)
!7599 = !DILocalVariable(name: "code", scope: !7586, file: !3, line: 2171, type: !674)
!7600 = !DILocation(line: 2171, column: 17, scope: !7586)
!7601 = !DILocation(line: 2171, column: 24, scope: !7586)
!7602 = !DILocation(line: 2173, column: 11, scope: !7586)
!7603 = !DILocation(line: 2173, column: 3, scope: !7586)
!7604 = !DILocation(line: 2186, column: 7, scope: !7605)
!7605 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 2174, column: 5)
!7606 = !DILocation(line: 2189, column: 15, scope: !7605)
!7607 = !DILocation(line: 2189, column: 25, scope: !7605)
!7608 = !DILocation(line: 2189, column: 36, scope: !7605)
!7609 = !DILocation(line: 2190, column: 8, scope: !7605)
!7610 = !DILocation(line: 2190, column: 32, scope: !7605)
!7611 = !DILocation(line: 2191, column: 11, scope: !7605)
!7612 = !DILocation(line: 2191, column: 21, scope: !7605)
!7613 = !DILocation(line: 2191, column: 32, scope: !7605)
!7614 = !DILocation(line: 2190, column: 11, scope: !7605)
!7615 = !DILocation(line: 0, scope: !7605)
!7616 = !DILocation(line: 2189, column: 7, scope: !7605)
!7617 = !DILocation(line: 2194, column: 28, scope: !7618)
!7618 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 2194, column: 11)
!7619 = !DILocation(line: 2194, column: 46, scope: !7618)
!7620 = !DILocation(line: 2194, column: 11, scope: !7618)
!7621 = !DILocation(line: 2194, column: 11, scope: !7605)
!7622 = !DILocation(line: 2195, column: 2, scope: !7618)
!7623 = !DILocation(line: 2196, column: 7, scope: !7605)
!7624 = !DILocation(line: 2201, column: 11, scope: !7625)
!7625 = distinct !DILexicalBlock(scope: !7605, file: !3, line: 2201, column: 11)
!7626 = !DILocation(line: 2201, column: 11, scope: !7605)
!7627 = !DILocation(line: 2203, column: 29, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7629, file: !3, line: 2203, column: 8)
!7629 = distinct !DILexicalBlock(scope: !7625, file: !3, line: 2202, column: 2)
!7630 = !DILocation(line: 2203, column: 37, scope: !7628)
!7631 = !DILocation(line: 2203, column: 8, scope: !7628)
!7632 = !DILocation(line: 2203, column: 8, scope: !7629)
!7633 = !DILocation(line: 2204, column: 6, scope: !7628)
!7634 = !DILocation(line: 2205, column: 2, scope: !7629)
!7635 = !DILocation(line: 2206, column: 37, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7625, file: !3, line: 2206, column: 16)
!7637 = !DILocation(line: 2206, column: 45, scope: !7636)
!7638 = !DILocation(line: 2206, column: 16, scope: !7636)
!7639 = !DILocation(line: 2206, column: 16, scope: !7625)
!7640 = !DILocation(line: 2207, column: 2, scope: !7636)
!7641 = !DILocation(line: 2209, column: 35, scope: !7605)
!7642 = !DILocation(line: 2209, column: 43, scope: !7605)
!7643 = !DILocation(line: 2209, column: 14, scope: !7605)
!7644 = !DILocation(line: 2209, column: 7, scope: !7605)
!7645 = !DILocation(line: 2212, column: 7, scope: !7605)
!7646 = !DILocation(line: 2215, column: 9, scope: !7586)
!7647 = !DILocation(line: 2215, column: 7, scope: !7586)
!7648 = !DILocation(line: 2216, column: 12, scope: !7649)
!7649 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 2216, column: 3)
!7650 = !DILocation(line: 2216, column: 34, scope: !7649)
!7651 = !DILocation(line: 2216, column: 10, scope: !7649)
!7652 = !DILocation(line: 2216, column: 8, scope: !7649)
!7653 = !DILocation(line: 2216, column: 39, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7649, file: !3, line: 2216, column: 3)
!7655 = !DILocation(line: 2216, column: 41, scope: !7654)
!7656 = !DILocation(line: 2216, column: 3, scope: !7649)
!7657 = !DILocation(line: 2217, column: 13, scope: !7654)
!7658 = !DILocation(line: 2217, column: 17, scope: !7654)
!7659 = !DILocation(line: 2217, column: 5, scope: !7654)
!7660 = !DILocation(line: 2220, column: 27, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 2220, column: 6)
!7662 = distinct !DILexicalBlock(scope: !7654, file: !3, line: 2218, column: 7)
!7663 = !DILocation(line: 2220, column: 35, scope: !7661)
!7664 = !DILocation(line: 2220, column: 6, scope: !7661)
!7665 = !DILocation(line: 2220, column: 6, scope: !7662)
!7666 = !DILocation(line: 2221, column: 4, scope: !7661)
!7667 = !DILocation(line: 2222, column: 2, scope: !7662)
!7668 = !DILocation(line: 2224, column: 11, scope: !7669)
!7669 = distinct !DILexicalBlock(scope: !7662, file: !3, line: 2224, column: 2)
!7670 = !DILocation(line: 2224, column: 26, scope: !7669)
!7671 = !DILocation(line: 2224, column: 9, scope: !7669)
!7672 = !DILocation(line: 2224, column: 7, scope: !7669)
!7673 = !DILocation(line: 2224, column: 31, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 2224, column: 2)
!7675 = !DILocation(line: 2224, column: 33, scope: !7674)
!7676 = !DILocation(line: 2224, column: 2, scope: !7669)
!7677 = !DILocation(line: 2225, column: 29, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7674, file: !3, line: 2225, column: 8)
!7679 = !DILocation(line: 2225, column: 37, scope: !7678)
!7680 = !DILocation(line: 2225, column: 8, scope: !7678)
!7681 = !DILocation(line: 2225, column: 8, scope: !7674)
!7682 = !DILocation(line: 2226, column: 6, scope: !7678)
!7683 = !DILocation(line: 2225, column: 54, scope: !7678)
!7684 = !DILocation(line: 2224, column: 40, scope: !7674)
!7685 = !DILocation(line: 2224, column: 2, scope: !7674)
!7686 = distinct !{!7686, !7676, !7687}
!7687 = !DILocation(line: 2226, column: 13, scope: !7669)
!7688 = !DILocation(line: 2227, column: 2, scope: !7662)
!7689 = !DILocation(line: 2228, column: 7, scope: !7662)
!7690 = !DILocation(line: 2216, column: 48, scope: !7654)
!7691 = !DILocation(line: 2216, column: 3, scope: !7654)
!7692 = distinct !{!7692, !7656, !7693}
!7693 = !DILocation(line: 2228, column: 7, scope: !7649)
!7694 = !DILocation(line: 2230, column: 3, scope: !7586)
!7695 = !DILocation(line: 2231, column: 1, scope: !7586)
!7696 = distinct !DISubprogram(name: "ira_allocno_iter_init", scope: !2174, file: !2174, line: 939, type: !7697, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7697 = !DISubroutineType(types: !7698)
!7698 = !{null, !7699}
!7699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6172, size: 64)
!7700 = !DILocalVariable(name: "i", arg: 1, scope: !7696, file: !2174, line: 939, type: !7699)
!7701 = !DILocation(line: 939, column: 46, scope: !7696)
!7702 = !DILocation(line: 941, column: 3, scope: !7696)
!7703 = !DILocation(line: 941, column: 6, scope: !7696)
!7704 = !DILocation(line: 941, column: 8, scope: !7696)
!7705 = !DILocation(line: 942, column: 1, scope: !7696)
!7706 = distinct !DISubprogram(name: "ira_allocno_iter_cond", scope: !2174, file: !2174, line: 947, type: !7707, scopeLine: 948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7707 = !DISubroutineType(types: !7708)
!7708 = !{!1004, !7699, !2556}
!7709 = !DILocalVariable(name: "i", arg: 1, scope: !7706, file: !2174, line: 947, type: !7699)
!7710 = !DILocation(line: 947, column: 46, scope: !7706)
!7711 = !DILocalVariable(name: "a", arg: 2, scope: !7706, file: !2174, line: 947, type: !2556)
!7712 = !DILocation(line: 947, column: 64, scope: !7706)
!7713 = !DILocalVariable(name: "n", scope: !7706, file: !2174, line: 949, type: !926)
!7714 = !DILocation(line: 949, column: 7, scope: !7706)
!7715 = !DILocation(line: 951, column: 12, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7706, file: !2174, line: 951, column: 3)
!7717 = !DILocation(line: 951, column: 15, scope: !7716)
!7718 = !DILocation(line: 951, column: 10, scope: !7716)
!7719 = !DILocation(line: 951, column: 8, scope: !7716)
!7720 = !DILocation(line: 951, column: 18, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7716, file: !2174, line: 951, column: 3)
!7722 = !DILocation(line: 951, column: 22, scope: !7721)
!7723 = !DILocation(line: 951, column: 20, scope: !7721)
!7724 = !DILocation(line: 951, column: 3, scope: !7716)
!7725 = !DILocation(line: 952, column: 9, scope: !7726)
!7726 = distinct !DILexicalBlock(scope: !7721, file: !2174, line: 952, column: 9)
!7727 = !DILocation(line: 952, column: 22, scope: !7726)
!7728 = !DILocation(line: 952, column: 25, scope: !7726)
!7729 = !DILocation(line: 952, column: 9, scope: !7721)
!7730 = !DILocation(line: 954, column: 7, scope: !7731)
!7731 = distinct !DILexicalBlock(scope: !7726, file: !2174, line: 953, column: 7)
!7732 = !DILocation(line: 954, column: 20, scope: !7731)
!7733 = !DILocation(line: 954, column: 3, scope: !7731)
!7734 = !DILocation(line: 954, column: 5, scope: !7731)
!7735 = !DILocation(line: 955, column: 9, scope: !7731)
!7736 = !DILocation(line: 955, column: 11, scope: !7731)
!7737 = !DILocation(line: 955, column: 2, scope: !7731)
!7738 = !DILocation(line: 955, column: 5, scope: !7731)
!7739 = !DILocation(line: 955, column: 7, scope: !7731)
!7740 = !DILocation(line: 956, column: 2, scope: !7731)
!7741 = !DILocation(line: 952, column: 28, scope: !7726)
!7742 = !DILocation(line: 951, column: 41, scope: !7721)
!7743 = !DILocation(line: 951, column: 3, scope: !7721)
!7744 = distinct !{!7744, !7724, !7745}
!7745 = !DILocation(line: 957, column: 7, scope: !7716)
!7746 = !DILocation(line: 958, column: 3, scope: !7706)
!7747 = !DILocation(line: 959, column: 1, scope: !7706)
!7748 = distinct !DISubprogram(name: "ira_hard_reg_not_in_set_p", scope: !2174, file: !2174, line: 1135, type: !7749, scopeLine: 1137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7749 = !DISubroutineType(types: !7750)
!7750 = !{!1004, !926, !5, !929}
!7751 = !DILocalVariable(name: "hard_regno", arg: 1, scope: !7748, file: !2174, line: 1135, type: !926)
!7752 = !DILocation(line: 1135, column: 32, scope: !7748)
!7753 = !DILocalVariable(name: "mode", arg: 2, scope: !7748, file: !2174, line: 1135, type: !5)
!7754 = !DILocation(line: 1135, column: 62, scope: !7748)
!7755 = !DILocalVariable(name: "hard_regset", arg: 3, scope: !7748, file: !2174, line: 1136, type: !929)
!7756 = !DILocation(line: 1136, column: 20, scope: !7748)
!7757 = !DILocalVariable(name: "i", scope: !7748, file: !2174, line: 1138, type: !926)
!7758 = !DILocation(line: 1138, column: 7, scope: !7748)
!7759 = !DILocation(line: 1141, column: 29, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7748, file: !2174, line: 1141, column: 3)
!7761 = !DILocation(line: 1141, column: 12, scope: !7760)
!7762 = !DILocation(line: 1141, column: 41, scope: !7760)
!7763 = !DILocation(line: 1141, column: 47, scope: !7760)
!7764 = !DILocation(line: 1141, column: 10, scope: !7760)
!7765 = !DILocation(line: 1141, column: 8, scope: !7760)
!7766 = !DILocation(line: 1141, column: 52, scope: !7767)
!7767 = distinct !DILexicalBlock(scope: !7760, file: !2174, line: 1141, column: 3)
!7768 = !DILocation(line: 1141, column: 54, scope: !7767)
!7769 = !DILocation(line: 1141, column: 3, scope: !7760)
!7770 = !DILocation(line: 1142, column: 9, scope: !7771)
!7771 = distinct !DILexicalBlock(scope: !7767, file: !2174, line: 1142, column: 9)
!7772 = !DILocation(line: 1142, column: 9, scope: !7767)
!7773 = !DILocation(line: 1143, column: 7, scope: !7771)
!7774 = !DILocation(line: 1141, column: 61, scope: !7767)
!7775 = !DILocation(line: 1141, column: 3, scope: !7767)
!7776 = distinct !{!7776, !7769, !7777}
!7777 = !DILocation(line: 1143, column: 14, scope: !7760)
!7778 = !DILocation(line: 1144, column: 3, scope: !7748)
!7779 = !DILocation(line: 1145, column: 1, scope: !7748)
!7780 = distinct !DISubprogram(name: "VEC_rtx_base_length", scope: !675, file: !675, line: 200, type: !7781, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7781 = !DISubroutineType(types: !7782)
!7782 = !{!7, !7783}
!7783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7784, size: 64)
!7784 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2162)
!7785 = !DILocalVariable(name: "vec_", arg: 1, scope: !7780, file: !675, line: 200, type: !7783)
!7786 = !DILocation(line: 200, column: 1, scope: !7780)
!7787 = distinct !DISubprogram(name: "VEC_rtx_gc_reserve_exact", scope: !675, file: !675, line: 202, type: !7788, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7788 = !DISubroutineType(types: !7789)
!7789 = !{!926, !6330, !926}
!7790 = !DILocalVariable(name: "vec_", arg: 1, scope: !7787, file: !675, line: 202, type: !6330)
!7791 = !DILocation(line: 202, column: 1, scope: !7787)
!7792 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7787, file: !675, line: 202, type: !926)
!7793 = !DILocalVariable(name: "extend", scope: !7787, file: !675, line: 202, type: !926)
!7794 = !DILocation(line: 202, column: 1, scope: !7795)
!7795 = distinct !DILexicalBlock(scope: !7787, file: !675, line: 202, column: 1)
!7796 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !675, file: !675, line: 200, type: !7797, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7797 = !DISubroutineType(types: !7798)
!7798 = !{!926, !6338, !926}
!7799 = !DILocalVariable(name: "vec_", arg: 1, scope: !7796, file: !675, line: 200, type: !6338)
!7800 = !DILocation(line: 200, column: 1, scope: !7796)
!7801 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7796, file: !675, line: 200, type: !926)
!7802 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !942, file: !942, line: 224, type: !7803, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7803 = !DISubroutineType(types: !7804)
!7804 = !{null, !7805, !7806, !7, !7809}
!7805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6538, size: 64)
!7806 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !939, line: 48, baseType: !7807)
!7807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7808, size: 64)
!7808 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !941)
!7809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7810 = !DILocalVariable(name: "bi", arg: 1, scope: !7802, file: !942, line: 224, type: !7805)
!7811 = !DILocation(line: 224, column: 37, scope: !7802)
!7812 = !DILocalVariable(name: "map", arg: 2, scope: !7802, file: !942, line: 224, type: !7806)
!7813 = !DILocation(line: 224, column: 54, scope: !7802)
!7814 = !DILocalVariable(name: "start_bit", arg: 3, scope: !7802, file: !942, line: 225, type: !7)
!7815 = !DILocation(line: 225, column: 15, scope: !7802)
!7816 = !DILocalVariable(name: "bit_no", arg: 4, scope: !7802, file: !942, line: 225, type: !7809)
!7817 = !DILocation(line: 225, column: 36, scope: !7802)
!7818 = !DILocation(line: 227, column: 14, scope: !7802)
!7819 = !DILocation(line: 227, column: 19, scope: !7802)
!7820 = !DILocation(line: 227, column: 3, scope: !7802)
!7821 = !DILocation(line: 227, column: 7, scope: !7802)
!7822 = !DILocation(line: 227, column: 12, scope: !7802)
!7823 = !DILocation(line: 228, column: 3, scope: !7802)
!7824 = !DILocation(line: 228, column: 7, scope: !7802)
!7825 = !DILocation(line: 228, column: 12, scope: !7802)
!7826 = !DILocation(line: 231, column: 3, scope: !7802)
!7827 = !DILocation(line: 233, column: 12, scope: !7828)
!7828 = distinct !DILexicalBlock(scope: !7829, file: !942, line: 233, column: 11)
!7829 = distinct !DILexicalBlock(scope: !7802, file: !942, line: 232, column: 5)
!7830 = !DILocation(line: 233, column: 16, scope: !7828)
!7831 = !DILocation(line: 233, column: 11, scope: !7829)
!7832 = !DILocation(line: 235, column: 4, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7828, file: !942, line: 234, column: 2)
!7834 = !DILocation(line: 235, column: 8, scope: !7833)
!7835 = !DILocation(line: 235, column: 13, scope: !7833)
!7836 = !DILocation(line: 236, column: 4, scope: !7833)
!7837 = !DILocation(line: 239, column: 11, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7829, file: !942, line: 239, column: 11)
!7839 = !DILocation(line: 239, column: 15, scope: !7838)
!7840 = !DILocation(line: 239, column: 21, scope: !7838)
!7841 = !DILocation(line: 239, column: 29, scope: !7838)
!7842 = !DILocation(line: 239, column: 39, scope: !7838)
!7843 = !DILocation(line: 239, column: 26, scope: !7838)
!7844 = !DILocation(line: 239, column: 11, scope: !7829)
!7845 = !DILocation(line: 240, column: 2, scope: !7838)
!7846 = !DILocation(line: 241, column: 18, scope: !7829)
!7847 = !DILocation(line: 241, column: 22, scope: !7829)
!7848 = !DILocation(line: 241, column: 28, scope: !7829)
!7849 = !DILocation(line: 241, column: 7, scope: !7829)
!7850 = !DILocation(line: 241, column: 11, scope: !7829)
!7851 = !DILocation(line: 241, column: 16, scope: !7829)
!7852 = distinct !{!7852, !7826, !7853}
!7853 = !DILocation(line: 242, column: 5, scope: !7802)
!7854 = !DILocation(line: 245, column: 7, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7802, file: !942, line: 245, column: 7)
!7856 = !DILocation(line: 245, column: 11, scope: !7855)
!7857 = !DILocation(line: 245, column: 17, scope: !7855)
!7858 = !DILocation(line: 245, column: 25, scope: !7855)
!7859 = !DILocation(line: 245, column: 35, scope: !7855)
!7860 = !DILocation(line: 245, column: 22, scope: !7855)
!7861 = !DILocation(line: 245, column: 7, scope: !7802)
!7862 = !DILocation(line: 246, column: 17, scope: !7855)
!7863 = !DILocation(line: 246, column: 21, scope: !7855)
!7864 = !DILocation(line: 246, column: 27, scope: !7855)
!7865 = !DILocation(line: 246, column: 32, scope: !7855)
!7866 = !DILocation(line: 246, column: 15, scope: !7855)
!7867 = !DILocation(line: 246, column: 5, scope: !7855)
!7868 = !DILocation(line: 249, column: 17, scope: !7802)
!7869 = !DILocation(line: 249, column: 27, scope: !7802)
!7870 = !DILocation(line: 249, column: 46, scope: !7802)
!7871 = !DILocation(line: 249, column: 3, scope: !7802)
!7872 = !DILocation(line: 249, column: 7, scope: !7802)
!7873 = !DILocation(line: 249, column: 15, scope: !7802)
!7874 = !DILocation(line: 250, column: 14, scope: !7802)
!7875 = !DILocation(line: 250, column: 18, scope: !7802)
!7876 = !DILocation(line: 250, column: 24, scope: !7802)
!7877 = !DILocation(line: 250, column: 29, scope: !7802)
!7878 = !DILocation(line: 250, column: 33, scope: !7802)
!7879 = !DILocation(line: 250, column: 3, scope: !7802)
!7880 = !DILocation(line: 250, column: 7, scope: !7802)
!7881 = !DILocation(line: 250, column: 12, scope: !7802)
!7882 = !DILocation(line: 251, column: 16, scope: !7802)
!7883 = !DILocation(line: 251, column: 26, scope: !7802)
!7884 = !DILocation(line: 251, column: 3, scope: !7802)
!7885 = !DILocation(line: 251, column: 7, scope: !7802)
!7886 = !DILocation(line: 251, column: 12, scope: !7802)
!7887 = !DILocation(line: 257, column: 17, scope: !7802)
!7888 = !DILocation(line: 257, column: 21, scope: !7802)
!7889 = !DILocation(line: 257, column: 16, scope: !7802)
!7890 = !DILocation(line: 257, column: 13, scope: !7802)
!7891 = !DILocation(line: 259, column: 13, scope: !7802)
!7892 = !DILocation(line: 259, column: 4, scope: !7802)
!7893 = !DILocation(line: 259, column: 11, scope: !7802)
!7894 = !DILocation(line: 260, column: 1, scope: !7802)
!7895 = distinct !DISubprogram(name: "bmp_iter_set", scope: !942, file: !942, line: 393, type: !7896, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7896 = !DISubroutineType(types: !7897)
!7897 = !{!1004, !7805, !7809}
!7898 = !DILocalVariable(name: "bi", arg: 1, scope: !7895, file: !942, line: 393, type: !7805)
!7899 = !DILocation(line: 393, column: 32, scope: !7895)
!7900 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7895, file: !942, line: 393, type: !7809)
!7901 = !DILocation(line: 393, column: 46, scope: !7895)
!7902 = !DILocation(line: 396, column: 7, scope: !7903)
!7903 = distinct !DILexicalBlock(scope: !7895, file: !942, line: 396, column: 7)
!7904 = !DILocation(line: 396, column: 11, scope: !7903)
!7905 = !DILocation(line: 396, column: 7, scope: !7895)
!7906 = !DILocation(line: 397, column: 5, scope: !7903)
!7907 = !DILabel(scope: !7908, name: "next_bit", file: !942, line: 398)
!7908 = distinct !DILexicalBlock(scope: !7903, file: !942, line: 397, column: 5)
!7909 = !DILocation(line: 398, column: 5, scope: !7908)
!7910 = !DILocation(line: 399, column: 7, scope: !7908)
!7911 = !DILocation(line: 399, column: 16, scope: !7908)
!7912 = !DILocation(line: 399, column: 20, scope: !7908)
!7913 = !DILocation(line: 399, column: 25, scope: !7908)
!7914 = !DILocation(line: 399, column: 14, scope: !7908)
!7915 = !DILocation(line: 401, column: 4, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7908, file: !942, line: 400, column: 2)
!7917 = !DILocation(line: 401, column: 8, scope: !7916)
!7918 = !DILocation(line: 401, column: 13, scope: !7916)
!7919 = !DILocation(line: 402, column: 5, scope: !7916)
!7920 = !DILocation(line: 402, column: 12, scope: !7916)
!7921 = distinct !{!7921, !7910, !7922}
!7922 = !DILocation(line: 403, column: 2, scope: !7908)
!7923 = !DILocation(line: 404, column: 7, scope: !7908)
!7924 = !DILocation(line: 410, column: 16, scope: !7895)
!7925 = !DILocation(line: 410, column: 15, scope: !7895)
!7926 = !DILocation(line: 410, column: 23, scope: !7895)
!7927 = !DILocation(line: 410, column: 42, scope: !7895)
!7928 = !DILocation(line: 411, column: 7, scope: !7895)
!7929 = !DILocation(line: 411, column: 26, scope: !7895)
!7930 = !DILocation(line: 410, column: 4, scope: !7895)
!7931 = !DILocation(line: 410, column: 11, scope: !7895)
!7932 = !DILocation(line: 412, column: 3, scope: !7895)
!7933 = !DILocation(line: 412, column: 7, scope: !7895)
!7934 = !DILocation(line: 412, column: 14, scope: !7895)
!7935 = !DILocation(line: 414, column: 3, scope: !7895)
!7936 = !DILocation(line: 417, column: 7, scope: !7937)
!7937 = distinct !DILexicalBlock(scope: !7895, file: !942, line: 415, column: 5)
!7938 = !DILocation(line: 417, column: 14, scope: !7937)
!7939 = !DILocation(line: 417, column: 18, scope: !7937)
!7940 = !DILocation(line: 417, column: 26, scope: !7937)
!7941 = !DILocation(line: 419, column: 15, scope: !7942)
!7942 = distinct !DILexicalBlock(scope: !7937, file: !942, line: 418, column: 2)
!7943 = !DILocation(line: 419, column: 19, scope: !7942)
!7944 = !DILocation(line: 419, column: 25, scope: !7942)
!7945 = !DILocation(line: 419, column: 30, scope: !7942)
!7946 = !DILocation(line: 419, column: 34, scope: !7942)
!7947 = !DILocation(line: 419, column: 4, scope: !7942)
!7948 = !DILocation(line: 419, column: 8, scope: !7942)
!7949 = !DILocation(line: 419, column: 13, scope: !7942)
!7950 = !DILocation(line: 420, column: 8, scope: !7951)
!7951 = distinct !DILexicalBlock(scope: !7942, file: !942, line: 420, column: 8)
!7952 = !DILocation(line: 420, column: 12, scope: !7951)
!7953 = !DILocation(line: 420, column: 8, scope: !7942)
!7954 = !DILocation(line: 421, column: 6, scope: !7951)
!7955 = !DILocation(line: 422, column: 5, scope: !7942)
!7956 = !DILocation(line: 422, column: 12, scope: !7942)
!7957 = !DILocation(line: 423, column: 4, scope: !7942)
!7958 = !DILocation(line: 423, column: 8, scope: !7942)
!7959 = !DILocation(line: 423, column: 15, scope: !7942)
!7960 = distinct !{!7960, !7936, !7961}
!7961 = !DILocation(line: 424, column: 2, scope: !7937)
!7962 = !DILocation(line: 427, column: 18, scope: !7937)
!7963 = !DILocation(line: 427, column: 22, scope: !7937)
!7964 = !DILocation(line: 427, column: 28, scope: !7937)
!7965 = !DILocation(line: 427, column: 7, scope: !7937)
!7966 = !DILocation(line: 427, column: 11, scope: !7937)
!7967 = !DILocation(line: 427, column: 16, scope: !7937)
!7968 = !DILocation(line: 428, column: 12, scope: !7969)
!7969 = distinct !DILexicalBlock(scope: !7937, file: !942, line: 428, column: 11)
!7970 = !DILocation(line: 428, column: 16, scope: !7969)
!7971 = !DILocation(line: 428, column: 11, scope: !7937)
!7972 = !DILocation(line: 429, column: 2, scope: !7969)
!7973 = !DILocation(line: 430, column: 17, scope: !7937)
!7974 = !DILocation(line: 430, column: 21, scope: !7937)
!7975 = !DILocation(line: 430, column: 27, scope: !7937)
!7976 = !DILocation(line: 430, column: 32, scope: !7937)
!7977 = !DILocation(line: 430, column: 8, scope: !7937)
!7978 = !DILocation(line: 430, column: 15, scope: !7937)
!7979 = !DILocation(line: 431, column: 7, scope: !7937)
!7980 = !DILocation(line: 431, column: 11, scope: !7937)
!7981 = !DILocation(line: 431, column: 19, scope: !7937)
!7982 = distinct !{!7982, !7935, !7983}
!7983 = !DILocation(line: 432, column: 5, scope: !7895)
!7984 = !DILocation(line: 433, column: 1, scope: !7895)
!7985 = distinct !DISubprogram(name: "bmp_iter_next", scope: !942, file: !942, line: 382, type: !7986, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7986 = !DISubroutineType(types: !7987)
!7987 = !{null, !7805, !7809}
!7988 = !DILocalVariable(name: "bi", arg: 1, scope: !7985, file: !942, line: 382, type: !7805)
!7989 = !DILocation(line: 382, column: 33, scope: !7985)
!7990 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7985, file: !942, line: 382, type: !7809)
!7991 = !DILocation(line: 382, column: 47, scope: !7985)
!7992 = !DILocation(line: 384, column: 3, scope: !7985)
!7993 = !DILocation(line: 384, column: 7, scope: !7985)
!7994 = !DILocation(line: 384, column: 12, scope: !7985)
!7995 = !DILocation(line: 385, column: 4, scope: !7985)
!7996 = !DILocation(line: 385, column: 11, scope: !7985)
!7997 = !DILocation(line: 386, column: 1, scope: !7985)
!7998 = distinct !DISubprogram(name: "pseudo_for_reload_consideration_p", scope: !3, file: !3, line: 2799, type: !7999, scopeLine: 2800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!7999 = !DISubroutineType(types: !8000)
!8000 = !{!1004, !926}
!8001 = !DILocalVariable(name: "regno", arg: 1, scope: !7998, file: !3, line: 2799, type: !926)
!8002 = !DILocation(line: 2799, column: 40, scope: !7998)
!8003 = !DILocation(line: 2803, column: 11, scope: !7998)
!8004 = !DILocation(line: 2803, column: 24, scope: !7998)
!8005 = !DILocation(line: 2803, column: 31, scope: !7998)
!8006 = !DILocation(line: 2804, column: 4, scope: !7998)
!8007 = !DILocation(line: 2804, column: 8, scope: !7998)
!8008 = !DILocation(line: 2804, column: 24, scope: !7998)
!8009 = !DILocation(line: 2804, column: 27, scope: !7998)
!8010 = !DILocation(line: 0, scope: !7998)
!8011 = !DILocation(line: 2803, column: 10, scope: !7998)
!8012 = !DILocation(line: 2803, column: 3, scope: !7998)
!8013 = distinct !DISubprogram(name: "init_live_subregs", scope: !3, file: !3, line: 2811, type: !8014, scopeLine: 2813, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!8014 = !DISubroutineType(types: !8015)
!8015 = !{null, !1004, !2197, !2208, !926, !1006}
!8016 = !DILocalVariable(name: "init_value", arg: 1, scope: !8013, file: !3, line: 2811, type: !1004)
!8017 = !DILocation(line: 2811, column: 25, scope: !8013)
!8018 = !DILocalVariable(name: "live_subregs", arg: 2, scope: !8013, file: !3, line: 2811, type: !2197)
!8019 = !DILocation(line: 2811, column: 46, scope: !8013)
!8020 = !DILocalVariable(name: "live_subregs_used", arg: 3, scope: !8013, file: !3, line: 2812, type: !2208)
!8021 = !DILocation(line: 2812, column: 11, scope: !8013)
!8022 = !DILocalVariable(name: "allocnum", arg: 4, scope: !8013, file: !3, line: 2812, type: !926)
!8023 = !DILocation(line: 2812, column: 34, scope: !8013)
!8024 = !DILocalVariable(name: "reg", arg: 5, scope: !8013, file: !3, line: 2812, type: !1006)
!8025 = !DILocation(line: 2812, column: 48, scope: !8013)
!8026 = !DILocalVariable(name: "regno", scope: !8013, file: !3, line: 2814, type: !7)
!8027 = !DILocation(line: 2814, column: 16, scope: !8013)
!8028 = !DILocation(line: 2814, column: 24, scope: !8013)
!8029 = !DILocalVariable(name: "size", scope: !8013, file: !3, line: 2815, type: !926)
!8030 = !DILocation(line: 2815, column: 7, scope: !8013)
!8031 = !DILocation(line: 2815, column: 14, scope: !8013)
!8032 = !DILocation(line: 2817, column: 3, scope: !8013)
!8033 = !DILocation(line: 2820, column: 7, scope: !8034)
!8034 = distinct !DILexicalBlock(scope: !8013, file: !3, line: 2820, column: 7)
!8035 = !DILocation(line: 2820, column: 25, scope: !8034)
!8036 = !DILocation(line: 2820, column: 7, scope: !8013)
!8037 = !DILocation(line: 2821, column: 5, scope: !8034)
!8038 = !DILocation(line: 2824, column: 7, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !8013, file: !3, line: 2824, column: 7)
!8040 = !DILocation(line: 2824, column: 20, scope: !8039)
!8041 = !DILocation(line: 2824, column: 30, scope: !8039)
!8042 = !DILocation(line: 2824, column: 7, scope: !8013)
!8043 = !DILocation(line: 2825, column: 45, scope: !8039)
!8044 = !DILocation(line: 2825, column: 30, scope: !8039)
!8045 = !DILocation(line: 2825, column: 5, scope: !8039)
!8046 = !DILocation(line: 2825, column: 18, scope: !8039)
!8047 = !DILocation(line: 2825, column: 28, scope: !8039)
!8048 = !DILocation(line: 2829, column: 7, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8013, file: !3, line: 2829, column: 7)
!8050 = !DILocation(line: 2829, column: 7, scope: !8013)
!8051 = !DILocation(line: 2830, column: 19, scope: !8049)
!8052 = !DILocation(line: 2830, column: 32, scope: !8049)
!8053 = !DILocation(line: 2830, column: 5, scope: !8049)
!8054 = !DILocation(line: 2832, column: 19, scope: !8049)
!8055 = !DILocation(line: 2832, column: 32, scope: !8049)
!8056 = !DILocation(line: 2832, column: 5, scope: !8049)
!8057 = !DILocation(line: 2835, column: 33, scope: !8013)
!8058 = !DILocation(line: 2835, column: 3, scope: !8013)
!8059 = !DILocation(line: 2835, column: 21, scope: !8013)
!8060 = !DILocation(line: 2835, column: 31, scope: !8013)
!8061 = !DILocation(line: 2836, column: 1, scope: !8013)
!8062 = distinct !DISubprogram(name: "RESET_BIT", scope: !2199, file: !2199, line: 82, type: !8063, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!8063 = !DISubroutineType(types: !8064)
!8064 = !{null, !2198, !7}
!8065 = !DILocalVariable(name: "map", arg: 1, scope: !8062, file: !2199, line: 82, type: !2198)
!8066 = !DILocation(line: 82, column: 20, scope: !8062)
!8067 = !DILocalVariable(name: "bitno", arg: 2, scope: !8062, file: !2199, line: 82, type: !7)
!8068 = !DILocation(line: 82, column: 39, scope: !8062)
!8069 = !DILocation(line: 84, column: 7, scope: !8070)
!8070 = distinct !DILexicalBlock(scope: !8062, file: !2199, line: 84, column: 7)
!8071 = !DILocation(line: 84, column: 12, scope: !8070)
!8072 = !DILocation(line: 84, column: 7, scope: !8062)
!8073 = !DILocalVariable(name: "oldbit", scope: !8074, file: !2199, line: 86, type: !1004)
!8074 = distinct !DILexicalBlock(scope: !8070, file: !2199, line: 85, column: 5)
!8075 = !DILocation(line: 86, column: 12, scope: !8074)
!8076 = !DILocation(line: 87, column: 16, scope: !8074)
!8077 = !DILocation(line: 87, column: 14, scope: !8074)
!8078 = !DILocation(line: 88, column: 11, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !8074, file: !2199, line: 88, column: 11)
!8080 = !DILocation(line: 88, column: 11, scope: !8074)
!8081 = !DILocation(line: 89, column: 2, scope: !8079)
!8082 = !DILocation(line: 89, column: 7, scope: !8079)
!8083 = !DILocation(line: 89, column: 16, scope: !8079)
!8084 = !DILocation(line: 89, column: 22, scope: !8079)
!8085 = !DILocation(line: 89, column: 41, scope: !8079)
!8086 = !DILocation(line: 90, column: 5, scope: !8074)
!8087 = !DILocation(line: 92, column: 35, scope: !8062)
!8088 = !DILocation(line: 92, column: 42, scope: !8062)
!8089 = !DILocation(line: 92, column: 31, scope: !8062)
!8090 = !DILocation(line: 92, column: 8, scope: !8062)
!8091 = !DILocation(line: 91, column: 3, scope: !8062)
!8092 = !DILocation(line: 91, column: 8, scope: !8062)
!8093 = !DILocation(line: 91, column: 13, scope: !8062)
!8094 = !DILocation(line: 91, column: 19, scope: !8062)
!8095 = !DILocation(line: 92, column: 5, scope: !8062)
!8096 = !DILocation(line: 93, column: 1, scope: !8062)
!8097 = distinct !DISubprogram(name: "SET_BIT", scope: !2199, file: !2199, line: 63, type: !8063, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!8098 = !DILocalVariable(name: "map", arg: 1, scope: !8097, file: !2199, line: 63, type: !2198)
!8099 = !DILocation(line: 63, column: 18, scope: !8097)
!8100 = !DILocalVariable(name: "bitno", arg: 2, scope: !8097, file: !2199, line: 63, type: !7)
!8101 = !DILocation(line: 63, column: 36, scope: !8097)
!8102 = !DILocation(line: 65, column: 7, scope: !8103)
!8103 = distinct !DILexicalBlock(scope: !8097, file: !2199, line: 65, column: 7)
!8104 = !DILocation(line: 65, column: 12, scope: !8103)
!8105 = !DILocation(line: 65, column: 7, scope: !8097)
!8106 = !DILocalVariable(name: "oldbit", scope: !8107, file: !2199, line: 67, type: !1004)
!8107 = distinct !DILexicalBlock(scope: !8103, file: !2199, line: 66, column: 5)
!8108 = !DILocation(line: 67, column: 12, scope: !8107)
!8109 = !DILocation(line: 68, column: 16, scope: !8107)
!8110 = !DILocation(line: 68, column: 14, scope: !8107)
!8111 = !DILocation(line: 69, column: 12, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !8107, file: !2199, line: 69, column: 11)
!8113 = !DILocation(line: 69, column: 11, scope: !8107)
!8114 = !DILocation(line: 70, column: 2, scope: !8112)
!8115 = !DILocation(line: 70, column: 7, scope: !8112)
!8116 = !DILocation(line: 70, column: 16, scope: !8112)
!8117 = !DILocation(line: 70, column: 22, scope: !8112)
!8118 = !DILocation(line: 70, column: 41, scope: !8112)
!8119 = !DILocation(line: 71, column: 5, scope: !8107)
!8120 = !DILocation(line: 73, column: 33, scope: !8097)
!8121 = !DILocation(line: 73, column: 40, scope: !8097)
!8122 = !DILocation(line: 73, column: 29, scope: !8097)
!8123 = !DILocation(line: 72, column: 3, scope: !8097)
!8124 = !DILocation(line: 72, column: 8, scope: !8097)
!8125 = !DILocation(line: 72, column: 13, scope: !8097)
!8126 = !DILocation(line: 72, column: 19, scope: !8097)
!8127 = !DILocation(line: 73, column: 5, scope: !8097)
!8128 = !DILocation(line: 74, column: 1, scope: !8097)
!8129 = distinct !DISubprogram(name: "print_insn_chains", scope: !3, file: !3, line: 2789, type: !2447, scopeLine: 2790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!8130 = !DILocalVariable(name: "file", arg: 1, scope: !8129, file: !3, line: 2789, type: !2255)
!8131 = !DILocation(line: 2789, column: 26, scope: !8129)
!8132 = !DILocalVariable(name: "c", scope: !8129, file: !3, line: 2791, type: !6476)
!8133 = !DILocation(line: 2791, column: 22, scope: !8129)
!8134 = !DILocation(line: 2792, column: 12, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8129, file: !3, line: 2792, column: 3)
!8136 = !DILocation(line: 2792, column: 10, scope: !8135)
!8137 = !DILocation(line: 2792, column: 8, scope: !8135)
!8138 = !DILocation(line: 2792, column: 31, scope: !8139)
!8139 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 2792, column: 3)
!8140 = !DILocation(line: 2792, column: 3, scope: !8135)
!8141 = !DILocation(line: 2793, column: 23, scope: !8139)
!8142 = !DILocation(line: 2793, column: 29, scope: !8139)
!8143 = !DILocation(line: 2793, column: 5, scope: !8139)
!8144 = !DILocation(line: 2792, column: 39, scope: !8139)
!8145 = !DILocation(line: 2792, column: 42, scope: !8139)
!8146 = !DILocation(line: 2792, column: 37, scope: !8139)
!8147 = !DILocation(line: 2792, column: 3, scope: !8139)
!8148 = distinct !{!8148, !8140, !8149}
!8149 = !DILocation(line: 2793, column: 30, scope: !8135)
!8150 = !DILocation(line: 2794, column: 1, scope: !8129)
!8151 = distinct !DISubprogram(name: "print_insn_chain", scope: !3, file: !3, line: 2779, type: !8152, scopeLine: 2780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2215)
!8152 = !DISubroutineType(types: !8153)
!8153 = !{null, !2255, !6476}
!8154 = !DILocalVariable(name: "file", arg: 1, scope: !8151, file: !3, line: 2779, type: !2255)
!8155 = !DILocation(line: 2779, column: 25, scope: !8151)
!8156 = !DILocalVariable(name: "c", arg: 2, scope: !8151, file: !3, line: 2779, type: !6476)
!8157 = !DILocation(line: 2779, column: 50, scope: !8151)
!8158 = !DILocation(line: 2781, column: 12, scope: !8151)
!8159 = !DILocation(line: 2781, column: 31, scope: !8151)
!8160 = !DILocation(line: 2781, column: 3, scope: !8151)
!8161 = !DILocation(line: 2782, column: 17, scope: !8151)
!8162 = !DILocation(line: 2782, column: 24, scope: !8151)
!8163 = !DILocation(line: 2782, column: 27, scope: !8151)
!8164 = !DILocation(line: 2782, column: 3, scope: !8151)
!8165 = !DILocation(line: 2783, column: 17, scope: !8151)
!8166 = !DILocation(line: 2783, column: 24, scope: !8151)
!8167 = !DILocation(line: 2783, column: 27, scope: !8151)
!8168 = !DILocation(line: 2783, column: 3, scope: !8151)
!8169 = !DILocation(line: 2784, column: 1, scope: !8151)
