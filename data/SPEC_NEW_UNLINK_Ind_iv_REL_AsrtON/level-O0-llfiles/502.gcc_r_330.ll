; ModuleID = 'tree-ssa-ccp.c'
source_filename = "tree-ssa-ccp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.prop_value_d = type { i32, %union.tree_node* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimplify_ctx = type { %struct.gimplify_ctx*, %struct.VEC_gimple_heap*, %union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*, %struct.htab*, i32, i8, i8, i8 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@targetm = external dso_local global %struct.gcc_target, align 8
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.2 = private unnamed_addr constant [15 x i8] c"tree-ssa-ccp.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@mode_class = external dso_local constant [87 x i8], align 16
@mode_size = external dso_local global [87 x i8], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"ccp\00", align 1
@pass_ccp = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8 ()* @gate_ccp, i32 ()* @do_ssa_ccp, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 65, i32 40, i32 0, i32 0, i32 0, i32 23 } }, align 8, !dbg !0
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.5 = private unnamed_addr constant [4 x i8] c"fab\00", align 1
@pass_fold_builtins = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8 ()* null, i32 ()* @execute_fold_all_builtins, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 40, i32 0, i32 0, i32 0, i32 2053 } }, align 8, !dbg !2973
@.str.6 = private unnamed_addr constant [16 x i8] c"%sUNINITIALIZED\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"%sUNDEFINED\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"%sVARYING\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"%sCONSTANT \00", align 1
@dump_flags = external dso_local global i32, align 4
@const_val = internal global %struct.prop_value_d* null, align 8, !dbg !3001
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.10 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_signed_zeros = external dso_local global i32, align 4
@dconst0 = external dso_local global %struct.real_value, align 8
@flag_finite_math_only = external dso_local global i32, align 4
@flag_tree_ccp = external dso_local global i32, align 4
@.str.11 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.12 = private unnamed_addr constant [22 x i8] c"\0AVisiting statement:\0A\00", align 1
@.str.13 = private unnamed_addr constant [50 x i8] c"No interesting values produced.  Marked VARYING.\0A\00", align 1
@__const.ccp_visit_stmt.v = private unnamed_addr constant %struct.prop_value_d { i32 3, %union.tree_node* null }, align 8
@.str.14 = private unnamed_addr constant [17 x i8] c"which is likely \00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"CONSTANT\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"UNDEFINED\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"VARYING\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"Lattice value changed to \00", align 1
@.str.19 = private unnamed_addr constant [34 x i8] c".  Adding SSA edges to worklist.\0A\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"\0AVisiting PHI node: \00", align 1
@.str.21 = private unnamed_addr constant [43 x i8] c"\0A    Argument #%d (%d -> %d %sexecutable)\0A\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"not \00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"\09Value: \00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"\0A    PHI node value: \00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.27 = private unnamed_addr constant [14 x i8] c"Simplified\0A  \00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"to\0A  \00", align 1
@.str.29 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_lattice_value(i32 %val.coerce0, %union.tree_node* %val.coerce1) #0 !dbg !3007 {
entry:
  %val = alloca %struct.prop_value_d, align 8
  %0 = bitcast %struct.prop_value_d* %val to { i32, %union.tree_node* }*
  %1 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 0
  store i32 %val.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %val.coerce1, %union.tree_node** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %val, metadata !3011, metadata !DIExpression()), !dbg !3012
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3013
  %4 = bitcast %struct.prop_value_d* %val to { i32, %union.tree_node* }*, !dbg !3014
  %5 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %4, i32 0, i32 0, !dbg !3014
  %6 = load i32, i32* %5, align 8, !dbg !3014
  %7 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %4, i32 0, i32 1, !dbg !3014
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !3014
  call void @dump_lattice_value(%struct._IO_FILE* %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 %6, %union.tree_node* %8), !dbg !3014
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3015
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3016
  ret void, !dbg !3017
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @dump_lattice_value(%struct._IO_FILE* %outf, i8* %prefix, i32 %val.coerce0, %union.tree_node* %val.coerce1) #0 !dbg !3018 {
entry:
  %val = alloca %struct.prop_value_d, align 8
  %outf.addr = alloca %struct._IO_FILE*, align 8
  %prefix.addr = alloca i8*, align 8
  %0 = bitcast %struct.prop_value_d* %val to { i32, %union.tree_node* }*
  %1 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 0
  store i32 %val.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %val.coerce1, %union.tree_node** %2, align 8
  store %struct._IO_FILE* %outf, %struct._IO_FILE** %outf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outf.addr, metadata !3071, metadata !DIExpression()), !dbg !3072
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !3073, metadata !DIExpression()), !dbg !3074
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %val, metadata !3075, metadata !DIExpression()), !dbg !3076
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 0, !dbg !3077
  %3 = load i32, i32* %lattice_val, align 8, !dbg !3077
  switch i32 %3, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 3, label %sw.bb3
    i32 2, label %sw.bb5
  ], !dbg !3078

sw.bb:                                            ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3079
  %5 = load i8*, i8** %prefix.addr, align 8, !dbg !3081
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* %5), !dbg !3082
  br label %sw.epilog, !dbg !3083

sw.bb1:                                           ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3084
  %7 = load i8*, i8** %prefix.addr, align 8, !dbg !3085
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i8* %7), !dbg !3086
  br label %sw.epilog, !dbg !3087

sw.bb3:                                           ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3088
  %9 = load i8*, i8** %prefix.addr, align 8, !dbg !3089
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i8* %9), !dbg !3090
  br label %sw.epilog, !dbg !3091

sw.bb5:                                           ; preds = %entry
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3092
  %11 = load i8*, i8** %prefix.addr, align 8, !dbg !3093
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i8* %11), !dbg !3094
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %outf.addr, align 8, !dbg !3095
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 1, !dbg !3096
  %13 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3096
  %14 = load i32, i32* @dump_flags, align 4, !dbg !3097
  call void @print_generic_expr(%struct._IO_FILE* %12, %union.tree_node* %13, i32 %14), !dbg !3098
  br label %sw.epilog, !dbg !3099

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3100
  br label %sw.epilog, !dbg !3101

sw.epilog:                                        ; preds = %sw.default, %sw.bb5, %sw.bb3, %sw.bb1, %sw.bb
  ret void, !dbg !3102
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_symbol_constant_value(%union.tree_node* %sym) #0 !dbg !3103 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %sym.addr = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %base22 = alloca %union.tree_node*, align 8
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !3106, metadata !DIExpression()), !dbg !3107
  %0 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3108
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3108
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3108
  %bf.load = load i64, i64* %1, align 8, !dbg !3108
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !3108
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3108
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3108
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3108
  br i1 %tobool, label %land.lhs.true, label %if.end93, !dbg !3110

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3111
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3111
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3111
  %bf.load2 = load i64, i64* %3, align 8, !dbg !3111
  %bf.lshr3 = lshr i64 %bf.load2, 20, !dbg !3111
  %bf.clear4 = and i64 %bf.lshr3, 1, !dbg !3111
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3111
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !3111
  br i1 %tobool6, label %if.then, label %lor.lhs.false, !dbg !3112

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3113
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3113
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3113
  %bf.load8 = load i64, i64* %5, align 8, !dbg !3113
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3113
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3113
  %cmp = icmp eq i32 %bf.cast10, 33, !dbg !3114
  br i1 %cmp, label %if.then, label %if.end93, !dbg !3115

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !3116, metadata !DIExpression()), !dbg !3118
  %6 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3119
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !3119
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3119
  %7 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !3119
  store %union.tree_node* %7, %union.tree_node** %val, align 8, !dbg !3118
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3120
  %tobool11 = icmp ne %union.tree_node* %8, null, !dbg !3120
  br i1 %tobool11, label %if.then12, label %if.end42, !dbg !3122

if.then12:                                        ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3123
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %9), !dbg !3123
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !3123
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3125
  %call13 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %10), !dbg !3127
  %tobool14 = icmp ne i8 %call13, 0, !dbg !3127
  br i1 %tobool14, label %if.then15, label %if.end41, !dbg !3128

if.then15:                                        ; preds = %if.then12
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3129
  %base16 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3129
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !3129
  %bf.load17 = load i64, i64* %12, align 8, !dbg !3129
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !3129
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !3129
  %cmp20 = icmp eq i32 %bf.cast19, 121, !dbg !3132
  br i1 %cmp20, label %if.then21, label %if.end40, !dbg !3133

if.then21:                                        ; preds = %if.then15
  call void @llvm.dbg.declare(metadata %union.tree_node** %base22, metadata !3134, metadata !DIExpression()), !dbg !3136
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3137
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !3137
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3137
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3137
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3137
  %call23 = call %union.tree_node* @get_base_address(%union.tree_node* %14), !dbg !3138
  store %union.tree_node* %call23, %union.tree_node** %base22, align 8, !dbg !3136
  %15 = load %union.tree_node*, %union.tree_node** %base22, align 8, !dbg !3139
  %tobool24 = icmp ne %union.tree_node* %15, null, !dbg !3139
  br i1 %tobool24, label %land.lhs.true25, label %if.end39, !dbg !3141

land.lhs.true25:                                  ; preds = %if.then21
  %16 = load %union.tree_node*, %union.tree_node** %base22, align 8, !dbg !3142
  %base26 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3142
  %17 = bitcast %struct.tree_base* %base26 to i64*, !dbg !3142
  %bf.load27 = load i64, i64* %17, align 8, !dbg !3142
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !3142
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !3142
  %cmp30 = icmp eq i32 %bf.cast29, 32, !dbg !3143
  br i1 %cmp30, label %if.then31, label %if.end39, !dbg !3144

if.then31:                                        ; preds = %land.lhs.true25
  %18 = load %union.tree_node*, %union.tree_node** %base22, align 8, !dbg !3145
  %base32 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3145
  %19 = bitcast %struct.tree_base* %base32 to i64*, !dbg !3145
  %bf.load33 = load i64, i64* %19, align 8, !dbg !3147
  %bf.clear34 = and i64 %bf.load33, -262145, !dbg !3147
  %bf.set = or i64 %bf.clear34, 262144, !dbg !3147
  store i64 %bf.set, i64* %19, align 8, !dbg !3147
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3148
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3148
  %call35 = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !3150
  %tobool36 = icmp ne %struct.htab* %call35, null, !dbg !3150
  br i1 %tobool36, label %if.then37, label %if.end, !dbg !3151

if.then37:                                        ; preds = %if.then31
  %21 = load %union.tree_node*, %union.tree_node** %base22, align 8, !dbg !3152
  %call38 = call zeroext i8 @add_referenced_var(%union.tree_node* %21), !dbg !3153
  br label %if.end, !dbg !3153

if.end:                                           ; preds = %if.then37, %if.then31
  br label %if.end39, !dbg !3154

if.end39:                                         ; preds = %if.end, %land.lhs.true25, %if.then21
  br label %if.end40, !dbg !3155

if.end40:                                         ; preds = %if.end39, %if.then15
  %22 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3156
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !3157
  br label %return, !dbg !3157

if.end41:                                         ; preds = %if.then12
  br label %if.end42, !dbg !3158

if.end42:                                         ; preds = %if.end41, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3159
  %tobool43 = icmp ne %union.tree_node* %23, null, !dbg !3159
  br i1 %tobool43, label %if.end92, label %land.lhs.true44, !dbg !3161

land.lhs.true44:                                  ; preds = %if.end42
  %24 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3162
  %decl_common45 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !3162
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common45, i32 0, i32 2, !dbg !3162
  %25 = bitcast i40* %decl_flag_1 to i64*, !dbg !3162
  %bf.load46 = load i64, i64* %25, align 8, !dbg !3162
  %bf.lshr47 = lshr i64 %bf.load46, 25, !dbg !3162
  %bf.clear48 = and i64 %bf.lshr47, 1, !dbg !3162
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !3162
  %tobool50 = icmp ne i32 %bf.cast49, 0, !dbg !3162
  br i1 %tobool50, label %if.end92, label %land.lhs.true51, !dbg !3163

land.lhs.true51:                                  ; preds = %land.lhs.true44
  %26 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !3164
  %27 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3165
  %call52 = call zeroext i8 %26(%union.tree_node* %27), !dbg !3166
  %conv = zext i8 %call52 to i32, !dbg !3166
  %tobool53 = icmp ne i32 %conv, 0, !dbg !3166
  br i1 %tobool53, label %land.lhs.true54, label %if.end92, !dbg !3167

land.lhs.true54:                                  ; preds = %land.lhs.true51
  %28 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3168
  %common = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !3168
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3168
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3168
  %base55 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !3168
  %30 = bitcast %struct.tree_base* %base55 to i64*, !dbg !3168
  %bf.load56 = load i64, i64* %30, align 8, !dbg !3168
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !3168
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !3168
  %cmp59 = icmp eq i32 %bf.cast58, 6, !dbg !3168
  br i1 %cmp59, label %if.then88, label %lor.lhs.false61, !dbg !3168

lor.lhs.false61:                                  ; preds = %land.lhs.true54
  %31 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3168
  %common62 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !3168
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !3168
  %32 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !3168
  %base64 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !3168
  %33 = bitcast %struct.tree_base* %base64 to i64*, !dbg !3168
  %bf.load65 = load i64, i64* %33, align 8, !dbg !3168
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !3168
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !3168
  %cmp68 = icmp eq i32 %bf.cast67, 7, !dbg !3168
  br i1 %cmp68, label %if.then88, label %lor.lhs.false70, !dbg !3168

lor.lhs.false70:                                  ; preds = %lor.lhs.false61
  %34 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3168
  %common71 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !3168
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !3168
  %35 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !3168
  %base73 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3168
  %36 = bitcast %struct.tree_base* %base73 to i64*, !dbg !3168
  %bf.load74 = load i64, i64* %36, align 8, !dbg !3168
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !3168
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !3168
  %cmp77 = icmp eq i32 %bf.cast76, 8, !dbg !3168
  br i1 %cmp77, label %if.then88, label %lor.lhs.false79, !dbg !3169

lor.lhs.false79:                                  ; preds = %lor.lhs.false70
  %37 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3170
  %common80 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !3170
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !3170
  %38 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !3170
  %base82 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !3170
  %39 = bitcast %struct.tree_base* %base82 to i64*, !dbg !3170
  %bf.load83 = load i64, i64* %39, align 8, !dbg !3170
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !3170
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !3170
  %cmp86 = icmp eq i32 %bf.cast85, 9, !dbg !3170
  br i1 %cmp86, label %if.then88, label %if.end92, !dbg !3171

if.then88:                                        ; preds = %lor.lhs.false79, %lor.lhs.false70, %lor.lhs.false61, %land.lhs.true54
  %40 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3172
  %common89 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !3172
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !3172
  %41 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !3172
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !3172
  %call91 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %41, %union.tree_node* %42), !dbg !3172
  store %union.tree_node* %call91, %union.tree_node** %retval, align 8, !dbg !3173
  br label %return, !dbg !3173

if.end92:                                         ; preds = %lor.lhs.false79, %land.lhs.true51, %land.lhs.true44, %if.end42
  br label %if.end93, !dbg !3174

if.end93:                                         ; preds = %if.end92, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3175
  br label %return, !dbg !3175

return:                                           ; preds = %if.end93, %if.then88, %if.end40
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3176
  ret %union.tree_node* %43, !dbg !3176
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !3177 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3183, metadata !DIExpression()), !dbg !3184
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3185
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !3187
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3187
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !3185
  br i1 %tobool, label %if.end, label %if.then, !dbg !3188

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !3189
  br label %return, !dbg !3189

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3190
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !3191
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !3191
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !3192
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !3192
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !3193
  br label %return, !dbg !3193

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !3194
  ret %struct.htab* %5, !dbg !3194
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @may_propagate_address_into_dereference(%union.tree_node* %addr, %union.tree_node* %deref) #0 !dbg !3195 {
entry:
  %retval = alloca i8, align 1
  %addr.addr = alloca %union.tree_node*, align 8
  %deref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !3198, metadata !DIExpression()), !dbg !3199
  store %union.tree_node* %deref, %union.tree_node** %deref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %deref.addr, metadata !3200, metadata !DIExpression()), !dbg !3201
  %0 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3202
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3202
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3202
  %bf.load = load i64, i64* %1, align 8, !dbg !3202
  %bf.clear = and i64 %bf.load, 65535, !dbg !3202
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3202
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !3202
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !3202

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3202
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3202
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3202
  %bf.load2 = load i64, i64* %3, align 8, !dbg !3202
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3202
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3202
  %cmp5 = icmp eq i32 %bf.cast4, 48, !dbg !3202
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !3202

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3202
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3202
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3202
  %bf.load8 = load i64, i64* %5, align 8, !dbg !3202
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3202
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3202
  %cmp11 = icmp eq i32 %bf.cast10, 49, !dbg !3202
  br i1 %cmp11, label %land.lhs.true, label %cond.true, !dbg !3202

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3202
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3202
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3202
  %bf.load13 = load i64, i64* %7, align 8, !dbg !3202
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !3202
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3202
  %cmp16 = icmp eq i32 %bf.cast15, 121, !dbg !3202
  br i1 %cmp16, label %cond.false, label %cond.true, !dbg !3202

cond.true:                                        ; preds = %land.lhs.true, %lor.lhs.false6
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 895, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3202
  br label %cond.end, !dbg !3202

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3202

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3202
  %8 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3203
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !3203
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3203
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3203
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3203
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3203
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3203
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3203
  %type17 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !3203
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 2, !dbg !3203
  %11 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3203
  %cmp18 = icmp ne %union.tree_node* %11, null, !dbg !3203
  br i1 %cmp18, label %if.end, label %if.then, !dbg !3205

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !3206
  br label %return, !dbg !3206

if.end:                                           ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3207
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %12), !dbg !3209
  %conv = zext i8 %call to i32, !dbg !3209
  %tobool = icmp ne i32 %conv, 0, !dbg !3209
  br i1 %tobool, label %land.lhs.true19, label %if.end43, !dbg !3210

land.lhs.true19:                                  ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3211
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3211
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !3211
  %bf.load21 = load i64, i64* %14, align 8, !dbg !3211
  %bf.lshr = lshr i64 %bf.load21, 19, !dbg !3211
  %bf.clear22 = and i64 %bf.lshr, 1, !dbg !3211
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !3211
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !3211
  br i1 %tobool24, label %lor.lhs.false25, label %if.then34, !dbg !3212

lor.lhs.false25:                                  ; preds = %land.lhs.true19
  %15 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3213
  %common26 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !3213
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !3213
  %16 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !3213
  %base28 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3213
  %17 = bitcast %struct.tree_base* %base28 to i64*, !dbg !3213
  %bf.load29 = load i64, i64* %17, align 8, !dbg !3213
  %bf.lshr30 = lshr i64 %bf.load29, 19, !dbg !3213
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !3213
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !3213
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !3213
  br i1 %tobool33, label %if.then34, label %if.end43, !dbg !3214

if.then34:                                        ; preds = %lor.lhs.false25, %land.lhs.true19
  %18 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3215
  %common35 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !3215
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !3215
  %19 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !3215
  %20 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3216
  %exp37 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !3216
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !3216
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 0, !dbg !3216
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !3216
  %common40 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !3216
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !3216
  %22 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !3216
  %call42 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %19, %union.tree_node* %22), !dbg !3217
  store i8 %call42, i8* %retval, align 1, !dbg !3218
  br label %return, !dbg !3218

if.end43:                                         ; preds = %lor.lhs.false25, %if.end
  %23 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3219
  %exp44 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !3219
  %operands45 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp44, i32 0, i32 3, !dbg !3219
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands45, i64 0, i64 0, !dbg !3219
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !3219
  %common47 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !3219
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !3219
  %25 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !3219
  %26 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3220
  %common49 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !3220
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !3220
  %27 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !3220
  %call51 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %25, %union.tree_node* %27), !dbg !3221
  %conv52 = zext i8 %call51 to i32, !dbg !3221
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !3221
  br i1 %tobool53, label %land.rhs, label %land.end, !dbg !3222

land.rhs:                                         ; preds = %if.end43
  %28 = load %union.tree_node*, %union.tree_node** %deref.addr, align 8, !dbg !3223
  %common54 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !3223
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common54, i32 0, i32 2, !dbg !3223
  %29 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !3223
  %30 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !3224
  %exp56 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !3224
  %operands57 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp56, i32 0, i32 3, !dbg !3224
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands57, i64 0, i64 0, !dbg !3224
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx58, align 8, !dbg !3224
  %common59 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !3224
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !3224
  %32 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !3224
  %call61 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %29, %union.tree_node* %32), !dbg !3225
  %conv62 = zext i8 %call61 to i32, !dbg !3225
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !3222
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end43
  %33 = phi i1 [ false, %if.end43 ], [ %tobool63, %land.rhs ], !dbg !3226
  %land.ext = zext i1 %33 to i32, !dbg !3222
  %conv64 = trunc i32 %land.ext to i8, !dbg !3227
  store i8 %conv64, i8* %retval, align 1, !dbg !3228
  br label %return, !dbg !3228

return:                                           ; preds = %land.end, %if.then34, %if.then
  %34 = load i8, i8* %retval, align 1, !dbg !3229
  ret i8 %34, !dbg !3229
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %t) #0 !dbg !3230 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %value = alloca %struct.prop_value_d*, align 8
  %base = alloca %union.tree_node*, align 8
  %ctor = alloca %union.tree_node*, align 8
  %idx = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %cnt = alloca i64, align 8
  %cfield = alloca %union.tree_node*, align 8
  %cval = alloca %union.tree_node*, align 8
  %base260 = alloca %union.tree_node*, align 8
  %base399 = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %base465 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3231, metadata !DIExpression()), !dbg !3232
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %value, metadata !3233, metadata !DIExpression()), !dbg !3234
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3235, metadata !DIExpression()), !dbg !3236
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctor, metadata !3237, metadata !DIExpression()), !dbg !3238
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !3239, metadata !DIExpression()), !dbg !3240
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3241, metadata !DIExpression()), !dbg !3242
  call void @llvm.dbg.declare(metadata i64* %cnt, metadata !3243, metadata !DIExpression()), !dbg !3244
  call void @llvm.dbg.declare(metadata %union.tree_node** %cfield, metadata !3245, metadata !DIExpression()), !dbg !3246
  call void @llvm.dbg.declare(metadata %union.tree_node** %cval, metadata !3247, metadata !DIExpression()), !dbg !3248
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3249
  %base1 = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3249
  %1 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3249
  %bf.load = load i64, i64* %1, align 8, !dbg !3249
  %bf.clear = and i64 %bf.load, 65535, !dbg !3249
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3249
  %idxprom = sext i32 %bf.cast to i64, !dbg !3249
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3249
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3249
  %cmp = icmp eq i32 %2, 3, !dbg !3251
  br i1 %cmp, label %if.then, label %if.end, !dbg !3252

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3253
  %call = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %3), !dbg !3254
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !3255
  br label %return, !dbg !3255

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3256
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3256
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3256
  %bf.load3 = load i64, i64* %5, align 8, !dbg !3256
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3256
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3256
  switch i32 %bf.cast5, label %sw.default508 [
    i32 45, label %sw.bb
    i32 41, label %sw.bb278
    i32 43, label %sw.bb420
    i32 44, label %sw.bb420
    i32 47, label %sw.bb464
  ], !dbg !3257

sw.bb:                                            ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3258
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3258
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3258
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3258
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !3258
  store %union.tree_node* %7, %union.tree_node** %base, align 8, !dbg !3260
  %8 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3261
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3261
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3261
  %bf.load8 = load i64, i64* %9, align 8, !dbg !3261
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3261
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3261
  switch i32 %bf.cast10, label %sw.default [
    i32 32, label %sw.bb11
    i32 45, label %sw.bb26
    i32 41, label %sw.bb26
    i32 28, label %sw.bb28
    i32 51, label %sw.bb28
  ], !dbg !3262

sw.bb11:                                          ; preds = %sw.bb
  %10 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3263
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3263
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3263
  %bf.load13 = load i64, i64* %11, align 8, !dbg !3263
  %bf.lshr = lshr i64 %bf.load13, 20, !dbg !3263
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !3263
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3263
  %tobool = icmp ne i32 %bf.cast15, 0, !dbg !3263
  br i1 %tobool, label %lor.lhs.false, label %if.then24, !dbg !3266

lor.lhs.false:                                    ; preds = %sw.bb11
  %12 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3267
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !3267
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3267
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3267
  %base16 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !3267
  %14 = bitcast %struct.tree_base* %base16 to i64*, !dbg !3267
  %bf.load17 = load i64, i64* %14, align 8, !dbg !3267
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !3267
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !3267
  %cmp20 = icmp ne i32 %bf.cast19, 15, !dbg !3268
  br i1 %cmp20, label %if.then24, label %lor.lhs.false21, !dbg !3269

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %15 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !3270
  %16 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3271
  %call22 = call zeroext i8 %15(%union.tree_node* %16), !dbg !3272
  %tobool23 = icmp ne i8 %call22, 0, !dbg !3272
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !3273

if.then24:                                        ; preds = %lor.lhs.false21, %lor.lhs.false, %sw.bb11
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3274
  br label %return, !dbg !3274

if.end25:                                         ; preds = %lor.lhs.false21
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3275
  %decl_common = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !3275
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3275
  %18 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !3275
  store %union.tree_node* %18, %union.tree_node** %ctor, align 8, !dbg !3276
  br label %sw.epilog, !dbg !3277

sw.bb26:                                          ; preds = %sw.bb, %sw.bb
  %19 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3278
  %call27 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %19), !dbg !3279
  store %union.tree_node* %call27, %union.tree_node** %ctor, align 8, !dbg !3280
  br label %sw.epilog, !dbg !3281

sw.bb28:                                          ; preds = %sw.bb, %sw.bb
  %20 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3282
  store %union.tree_node* %20, %union.tree_node** %ctor, align 8, !dbg !3283
  br label %sw.epilog, !dbg !3284

sw.default:                                       ; preds = %sw.bb
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3285
  br label %return, !dbg !3285

sw.epilog:                                        ; preds = %sw.bb28, %sw.bb26, %if.end25
  %21 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3286
  %cmp29 = icmp eq %union.tree_node* %21, null, !dbg !3288
  br i1 %cmp29, label %if.then48, label %lor.lhs.false30, !dbg !3289

lor.lhs.false30:                                  ; preds = %sw.epilog
  %22 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3290
  %base31 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !3290
  %23 = bitcast %struct.tree_base* %base31 to i64*, !dbg !3290
  %bf.load32 = load i64, i64* %23, align 8, !dbg !3290
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !3290
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !3290
  %cmp35 = icmp ne i32 %bf.cast34, 51, !dbg !3291
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false41, !dbg !3292

land.lhs.true:                                    ; preds = %lor.lhs.false30
  %24 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3293
  %base36 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3293
  %25 = bitcast %struct.tree_base* %base36 to i64*, !dbg !3293
  %bf.load37 = load i64, i64* %25, align 8, !dbg !3293
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !3293
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !3293
  %cmp40 = icmp ne i32 %bf.cast39, 28, !dbg !3294
  br i1 %cmp40, label %if.then48, label %lor.lhs.false41, !dbg !3295

lor.lhs.false41:                                  ; preds = %land.lhs.true, %lor.lhs.false30
  %26 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3296
  %base42 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3296
  %27 = bitcast %struct.tree_base* %base42 to i64*, !dbg !3296
  %bf.load43 = load i64, i64* %27, align 8, !dbg !3296
  %bf.lshr44 = lshr i64 %bf.load43, 26, !dbg !3296
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !3296
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !3296
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !3296
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !3297

if.then48:                                        ; preds = %lor.lhs.false41, %land.lhs.true, %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3298
  br label %return, !dbg !3298

if.end49:                                         ; preds = %lor.lhs.false41
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3299
  %exp50 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !3299
  %operands51 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp50, i32 0, i32 3, !dbg !3299
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands51, i64 0, i64 1, !dbg !3299
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !3299
  store %union.tree_node* %29, %union.tree_node** %idx, align 8, !dbg !3300
  %30 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !3301
  %base53 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !3301
  %31 = bitcast %struct.tree_base* %base53 to i64*, !dbg !3301
  %bf.load54 = load i64, i64* %31, align 8, !dbg !3301
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !3301
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !3301
  switch i32 %bf.cast56, label %sw.default73 [
    i32 141, label %sw.bb57
    i32 23, label %sw.bb72
  ], !dbg !3302

sw.bb57:                                          ; preds = %if.end49
  %32 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !3303
  %call58 = call %struct.prop_value_d* @get_value(%union.tree_node* %32), !dbg !3306
  store %struct.prop_value_d* %call58, %struct.prop_value_d** %value, align 8, !dbg !3307
  %tobool59 = icmp ne %struct.prop_value_d* %call58, null, !dbg !3307
  br i1 %tobool59, label %land.lhs.true60, label %if.else, !dbg !3308

land.lhs.true60:                                  ; preds = %sw.bb57
  %33 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3309
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %33, i32 0, i32 0, !dbg !3310
  %34 = load i32, i32* %lattice_val, align 8, !dbg !3310
  %cmp61 = icmp eq i32 %34, 2, !dbg !3311
  br i1 %cmp61, label %land.lhs.true62, label %if.else, !dbg !3312

land.lhs.true62:                                  ; preds = %land.lhs.true60
  %35 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3313
  %value63 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %35, i32 0, i32 1, !dbg !3313
  %36 = load %union.tree_node*, %union.tree_node** %value63, align 8, !dbg !3313
  %base64 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3313
  %37 = bitcast %struct.tree_base* %base64 to i64*, !dbg !3313
  %bf.load65 = load i64, i64* %37, align 8, !dbg !3313
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !3313
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !3313
  %cmp68 = icmp eq i32 %bf.cast67, 23, !dbg !3314
  br i1 %cmp68, label %if.then69, label %if.else, !dbg !3315

if.then69:                                        ; preds = %land.lhs.true62
  %38 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3316
  %value70 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %38, i32 0, i32 1, !dbg !3317
  %39 = load %union.tree_node*, %union.tree_node** %value70, align 8, !dbg !3317
  store %union.tree_node* %39, %union.tree_node** %idx, align 8, !dbg !3318
  br label %if.end71, !dbg !3319

if.else:                                          ; preds = %land.lhs.true62, %land.lhs.true60, %sw.bb57
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3320
  br label %return, !dbg !3320

if.end71:                                         ; preds = %if.then69
  br label %sw.epilog74, !dbg !3321

sw.bb72:                                          ; preds = %if.end49
  br label %sw.epilog74, !dbg !3322

sw.default73:                                     ; preds = %if.end49
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3323
  br label %return, !dbg !3323

sw.epilog74:                                      ; preds = %sw.bb72, %if.end71
  %40 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3324
  %base75 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3324
  %41 = bitcast %struct.tree_base* %base75 to i64*, !dbg !3324
  %bf.load76 = load i64, i64* %41, align 8, !dbg !3324
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !3324
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !3324
  %cmp79 = icmp eq i32 %bf.cast78, 28, !dbg !3326
  br i1 %cmp79, label %if.then80, label %if.end206, !dbg !3327

if.then80:                                        ; preds = %sw.epilog74
  %42 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3328
  %common81 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3328
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !3328
  %43 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !3328
  %base83 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !3328
  %44 = bitcast %struct.tree_base* %base83 to i64*, !dbg !3328
  %bf.load84 = load i64, i64* %44, align 8, !dbg !3328
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !3328
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !3328
  %cmp87 = icmp eq i32 %bf.cast86, 14, !dbg !3328
  br i1 %cmp87, label %cond.true, label %cond.false, !dbg !3328

cond.true:                                        ; preds = %if.then80
  %45 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3328
  %common88 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !3328
  %type89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2, !dbg !3328
  %46 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !3328
  %call90 = call i32 @vector_type_mode(%union.tree_node* %46), !dbg !3328
  br label %cond.end, !dbg !3328

cond.false:                                       ; preds = %if.then80
  %47 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3328
  %common91 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !3328
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !3328
  %48 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !3328
  %type93 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !3328
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 6, !dbg !3328
  %bf.load94 = load i32, i32* %mode, align 4, !dbg !3328
  %bf.lshr95 = lshr i32 %bf.load94, 16, !dbg !3328
  %bf.clear96 = and i32 %bf.lshr95, 255, !dbg !3328
  br label %cond.end, !dbg !3328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call90, %cond.true ], [ %bf.clear96, %cond.false ], !dbg !3328
  %49 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3331
  %common97 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !3331
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !3331
  %50 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !3331
  %common99 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !3331
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !3331
  %51 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !3331
  %base101 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !3331
  %52 = bitcast %struct.tree_base* %base101 to i64*, !dbg !3331
  %bf.load102 = load i64, i64* %52, align 8, !dbg !3331
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !3331
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !3331
  %cmp105 = icmp eq i32 %bf.cast104, 14, !dbg !3331
  br i1 %cmp105, label %cond.true106, label %cond.false112, !dbg !3331

cond.true106:                                     ; preds = %cond.end
  %53 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3331
  %common107 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !3331
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !3331
  %54 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !3331
  %common109 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !3331
  %type110 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common109, i32 0, i32 2, !dbg !3331
  %55 = load %union.tree_node*, %union.tree_node** %type110, align 8, !dbg !3331
  %call111 = call i32 @vector_type_mode(%union.tree_node* %55), !dbg !3331
  br label %cond.end122, !dbg !3331

cond.false112:                                    ; preds = %cond.end
  %56 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3331
  %common113 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !3331
  %type114 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 2, !dbg !3331
  %57 = load %union.tree_node*, %union.tree_node** %type114, align 8, !dbg !3331
  %common115 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !3331
  %type116 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common115, i32 0, i32 2, !dbg !3331
  %58 = load %union.tree_node*, %union.tree_node** %type116, align 8, !dbg !3331
  %type117 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !3331
  %mode118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 6, !dbg !3331
  %bf.load119 = load i32, i32* %mode118, align 4, !dbg !3331
  %bf.lshr120 = lshr i32 %bf.load119, 16, !dbg !3331
  %bf.clear121 = and i32 %bf.lshr120, 255, !dbg !3331
  br label %cond.end122, !dbg !3331

cond.end122:                                      ; preds = %cond.false112, %cond.true106
  %cond123 = phi i32 [ %call111, %cond.true106 ], [ %bf.clear121, %cond.false112 ], !dbg !3331
  %cmp124 = icmp eq i32 %cond, %cond123, !dbg !3332
  br i1 %cmp124, label %land.lhs.true125, label %if.end205, !dbg !3333

land.lhs.true125:                                 ; preds = %cond.end122
  %59 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3334
  %common126 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !3334
  %type127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 2, !dbg !3334
  %60 = load %union.tree_node*, %union.tree_node** %type127, align 8, !dbg !3334
  %common128 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !3334
  %type129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2, !dbg !3334
  %61 = load %union.tree_node*, %union.tree_node** %type129, align 8, !dbg !3334
  %base130 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3334
  %62 = bitcast %struct.tree_base* %base130 to i64*, !dbg !3334
  %bf.load131 = load i64, i64* %62, align 8, !dbg !3334
  %bf.clear132 = and i64 %bf.load131, 65535, !dbg !3334
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !3334
  %cmp134 = icmp eq i32 %bf.cast133, 14, !dbg !3334
  br i1 %cmp134, label %cond.true135, label %cond.false141, !dbg !3334

cond.true135:                                     ; preds = %land.lhs.true125
  %63 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3334
  %common136 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !3334
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !3334
  %64 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !3334
  %common138 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !3334
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !3334
  %65 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !3334
  %call140 = call i32 @vector_type_mode(%union.tree_node* %65), !dbg !3334
  br label %cond.end151, !dbg !3334

cond.false141:                                    ; preds = %land.lhs.true125
  %66 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3334
  %common142 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !3334
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common142, i32 0, i32 2, !dbg !3334
  %67 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !3334
  %common144 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !3334
  %type145 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common144, i32 0, i32 2, !dbg !3334
  %68 = load %union.tree_node*, %union.tree_node** %type145, align 8, !dbg !3334
  %type146 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !3334
  %mode147 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type146, i32 0, i32 6, !dbg !3334
  %bf.load148 = load i32, i32* %mode147, align 4, !dbg !3334
  %bf.lshr149 = lshr i32 %bf.load148, 16, !dbg !3334
  %bf.clear150 = and i32 %bf.lshr149, 255, !dbg !3334
  br label %cond.end151, !dbg !3334

cond.end151:                                      ; preds = %cond.false141, %cond.true135
  %cond152 = phi i32 [ %call140, %cond.true135 ], [ %bf.clear150, %cond.false141 ], !dbg !3334
  %idxprom153 = zext i32 %cond152 to i64, !dbg !3334
  %arrayidx154 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom153, !dbg !3334
  %69 = load i8, i8* %arrayidx154, align 1, !dbg !3334
  %conv = zext i8 %69 to i32, !dbg !3334
  %cmp155 = icmp eq i32 %conv, 2, !dbg !3335
  br i1 %cmp155, label %land.lhs.true157, label %if.end205, !dbg !3336

land.lhs.true157:                                 ; preds = %cond.end151
  %70 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3337
  %common158 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !3337
  %type159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 2, !dbg !3337
  %71 = load %union.tree_node*, %union.tree_node** %type159, align 8, !dbg !3337
  %common160 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !3337
  %type161 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common160, i32 0, i32 2, !dbg !3337
  %72 = load %union.tree_node*, %union.tree_node** %type161, align 8, !dbg !3337
  %base162 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !3337
  %73 = bitcast %struct.tree_base* %base162 to i64*, !dbg !3337
  %bf.load163 = load i64, i64* %73, align 8, !dbg !3337
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !3337
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !3337
  %cmp166 = icmp eq i32 %bf.cast165, 14, !dbg !3337
  br i1 %cmp166, label %cond.true168, label %cond.false174, !dbg !3337

cond.true168:                                     ; preds = %land.lhs.true157
  %74 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3337
  %common169 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !3337
  %type170 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common169, i32 0, i32 2, !dbg !3337
  %75 = load %union.tree_node*, %union.tree_node** %type170, align 8, !dbg !3337
  %common171 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !3337
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2, !dbg !3337
  %76 = load %union.tree_node*, %union.tree_node** %type172, align 8, !dbg !3337
  %call173 = call i32 @vector_type_mode(%union.tree_node* %76), !dbg !3337
  br label %cond.end184, !dbg !3337

cond.false174:                                    ; preds = %land.lhs.true157
  %77 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3337
  %common175 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !3337
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2, !dbg !3337
  %78 = load %union.tree_node*, %union.tree_node** %type176, align 8, !dbg !3337
  %common177 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !3337
  %type178 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common177, i32 0, i32 2, !dbg !3337
  %79 = load %union.tree_node*, %union.tree_node** %type178, align 8, !dbg !3337
  %type179 = bitcast %union.tree_node* %79 to %struct.tree_type*, !dbg !3337
  %mode180 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type179, i32 0, i32 6, !dbg !3337
  %bf.load181 = load i32, i32* %mode180, align 4, !dbg !3337
  %bf.lshr182 = lshr i32 %bf.load181, 16, !dbg !3337
  %bf.clear183 = and i32 %bf.lshr182, 255, !dbg !3337
  br label %cond.end184, !dbg !3337

cond.end184:                                      ; preds = %cond.false174, %cond.true168
  %cond185 = phi i32 [ %call173, %cond.true168 ], [ %bf.clear183, %cond.false174 ], !dbg !3337
  %idxprom186 = zext i32 %cond185 to i64, !dbg !3337
  %arrayidx187 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom186, !dbg !3337
  %80 = load i8, i8* %arrayidx187, align 1, !dbg !3337
  %conv188 = zext i8 %80 to i16, !dbg !3337
  %conv189 = zext i16 %conv188 to i32, !dbg !3337
  %cmp190 = icmp eq i32 %conv189, 1, !dbg !3338
  br i1 %cmp190, label %land.lhs.true192, label %if.end205, !dbg !3339

land.lhs.true192:                                 ; preds = %cond.end184
  %81 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !3340
  %82 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3341
  %string = bitcast %union.tree_node* %82 to %struct.tree_string*, !dbg !3341
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !3341
  %83 = load i32, i32* %length, align 8, !dbg !3341
  %conv193 = sext i32 %83 to i64, !dbg !3341
  %call194 = call i32 @compare_tree_int(%union.tree_node* %81, i64 %conv193), !dbg !3342
  %cmp195 = icmp slt i32 %call194, 0, !dbg !3343
  br i1 %cmp195, label %if.then197, label %if.end205, !dbg !3344

if.then197:                                       ; preds = %land.lhs.true192
  %84 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3345
  %common198 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !3345
  %type199 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common198, i32 0, i32 2, !dbg !3345
  %85 = load %union.tree_node*, %union.tree_node** %type199, align 8, !dbg !3345
  %86 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3346
  %string200 = bitcast %union.tree_node* %86 to %struct.tree_string*, !dbg !3346
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string200, i32 0, i32 2, !dbg !3346
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !3346
  %87 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !3347
  %int_cst = bitcast %union.tree_node* %87 to %struct.tree_int_cst*, !dbg !3347
  %int_cst201 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3347
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst201, i32 0, i32 0, !dbg !3347
  %88 = load i64, i64* %low, align 8, !dbg !3347
  %arrayidx202 = getelementptr inbounds i8, i8* %arraydecay, i64 %88, !dbg !3346
  %89 = load i8, i8* %arrayidx202, align 1, !dbg !3346
  %conv203 = sext i8 %89 to i64, !dbg !3348
  %call204 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %85, i64 %conv203), !dbg !3349
  store %union.tree_node* %call204, %union.tree_node** %retval, align 8, !dbg !3350
  br label %return, !dbg !3350

if.end205:                                        ; preds = %land.lhs.true192, %cond.end184, %cond.end151, %cond.end122
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3351
  br label %return, !dbg !3351

if.end206:                                        ; preds = %sw.epilog74
  store i64 0, i64* %cnt, align 8, !dbg !3352
  br label %for.cond, !dbg !3352

for.cond:                                         ; preds = %for.inc, %if.end206
  %90 = load i64, i64* %cnt, align 8, !dbg !3354
  %91 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor = bitcast %union.tree_node* %91 to %struct.tree_constructor*, !dbg !3354
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !3354
  %92 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !3354
  %tobool207 = icmp ne %struct.VEC_constructor_elt_gc* %92, null, !dbg !3354
  br i1 %tobool207, label %cond.true208, label %cond.false212, !dbg !3354

cond.true208:                                     ; preds = %for.cond
  %93 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor209 = bitcast %union.tree_node* %93 to %struct.tree_constructor*, !dbg !3354
  %elts210 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor209, i32 0, i32 1, !dbg !3354
  %94 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts210, align 8, !dbg !3354
  %base211 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %94, i32 0, i32 0, !dbg !3354
  br label %cond.end213, !dbg !3354

cond.false212:                                    ; preds = %for.cond
  br label %cond.end213, !dbg !3354

cond.end213:                                      ; preds = %cond.false212, %cond.true208
  %cond214 = phi %struct.VEC_constructor_elt_base* [ %base211, %cond.true208 ], [ null, %cond.false212 ], !dbg !3354
  %call215 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond214), !dbg !3354
  %conv216 = zext i32 %call215 to i64, !dbg !3354
  %cmp217 = icmp uge i64 %90, %conv216, !dbg !3354
  br i1 %cmp217, label %cond.true219, label %cond.false220, !dbg !3354

cond.true219:                                     ; preds = %cond.end213
  br label %cond.end246, !dbg !3354

cond.false220:                                    ; preds = %cond.end213
  %95 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor221 = bitcast %union.tree_node* %95 to %struct.tree_constructor*, !dbg !3354
  %elts222 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor221, i32 0, i32 1, !dbg !3354
  %96 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts222, align 8, !dbg !3354
  %tobool223 = icmp ne %struct.VEC_constructor_elt_gc* %96, null, !dbg !3354
  br i1 %tobool223, label %cond.true224, label %cond.false228, !dbg !3354

cond.true224:                                     ; preds = %cond.false220
  %97 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor225 = bitcast %union.tree_node* %97 to %struct.tree_constructor*, !dbg !3354
  %elts226 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor225, i32 0, i32 1, !dbg !3354
  %98 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts226, align 8, !dbg !3354
  %base227 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %98, i32 0, i32 0, !dbg !3354
  br label %cond.end229, !dbg !3354

cond.false228:                                    ; preds = %cond.false220
  br label %cond.end229, !dbg !3354

cond.end229:                                      ; preds = %cond.false228, %cond.true224
  %cond230 = phi %struct.VEC_constructor_elt_base* [ %base227, %cond.true224 ], [ null, %cond.false228 ], !dbg !3354
  %99 = load i64, i64* %cnt, align 8, !dbg !3354
  %conv231 = trunc i64 %99 to i32, !dbg !3354
  %call232 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond230, i32 %conv231), !dbg !3354
  %value233 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call232, i32 0, i32 1, !dbg !3354
  %100 = load %union.tree_node*, %union.tree_node** %value233, align 8, !dbg !3354
  store %union.tree_node* %100, %union.tree_node** %cval, align 8, !dbg !3354
  %101 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor234 = bitcast %union.tree_node* %101 to %struct.tree_constructor*, !dbg !3354
  %elts235 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor234, i32 0, i32 1, !dbg !3354
  %102 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts235, align 8, !dbg !3354
  %tobool236 = icmp ne %struct.VEC_constructor_elt_gc* %102, null, !dbg !3354
  br i1 %tobool236, label %cond.true237, label %cond.false241, !dbg !3354

cond.true237:                                     ; preds = %cond.end229
  %103 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3354
  %constructor238 = bitcast %union.tree_node* %103 to %struct.tree_constructor*, !dbg !3354
  %elts239 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor238, i32 0, i32 1, !dbg !3354
  %104 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts239, align 8, !dbg !3354
  %base240 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %104, i32 0, i32 0, !dbg !3354
  br label %cond.end242, !dbg !3354

cond.false241:                                    ; preds = %cond.end229
  br label %cond.end242, !dbg !3354

cond.end242:                                      ; preds = %cond.false241, %cond.true237
  %cond243 = phi %struct.VEC_constructor_elt_base* [ %base240, %cond.true237 ], [ null, %cond.false241 ], !dbg !3354
  %105 = load i64, i64* %cnt, align 8, !dbg !3354
  %conv244 = trunc i64 %105 to i32, !dbg !3354
  %call245 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond243, i32 %conv244), !dbg !3354
  %index = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call245, i32 0, i32 0, !dbg !3354
  %106 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !3354
  store %union.tree_node* %106, %union.tree_node** %cfield, align 8, !dbg !3354
  br label %cond.end246, !dbg !3354

cond.end246:                                      ; preds = %cond.end242, %cond.true219
  %cond247 = phi i32 [ 0, %cond.true219 ], [ 1, %cond.end242 ], !dbg !3354
  %tobool248 = icmp ne i32 %cond247, 0, !dbg !3352
  br i1 %tobool248, label %for.body, label %for.end, !dbg !3352

for.body:                                         ; preds = %cond.end246
  %107 = load %union.tree_node*, %union.tree_node** %cfield, align 8, !dbg !3356
  %108 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !3358
  %call249 = call i32 @tree_int_cst_equal(%union.tree_node* %107, %union.tree_node* %108), !dbg !3359
  %tobool250 = icmp ne i32 %call249, 0, !dbg !3359
  br i1 %tobool250, label %if.then251, label %if.end277, !dbg !3360

if.then251:                                       ; preds = %for.body
  %109 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3361
  %call252 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %109), !dbg !3361
  store %union.tree_node* %call252, %union.tree_node** %cval, align 8, !dbg !3361
  %110 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3363
  %base253 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !3363
  %111 = bitcast %struct.tree_base* %base253 to i64*, !dbg !3363
  %bf.load254 = load i64, i64* %111, align 8, !dbg !3363
  %bf.clear255 = and i64 %bf.load254, 65535, !dbg !3363
  %bf.cast256 = trunc i64 %bf.clear255 to i32, !dbg !3363
  %cmp257 = icmp eq i32 %bf.cast256, 121, !dbg !3365
  br i1 %cmp257, label %if.then259, label %if.end276, !dbg !3366

if.then259:                                       ; preds = %if.then251
  call void @llvm.dbg.declare(metadata %union.tree_node** %base260, metadata !3367, metadata !DIExpression()), !dbg !3369
  %112 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3370
  %exp261 = bitcast %union.tree_node* %112 to %struct.tree_exp*, !dbg !3370
  %operands262 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp261, i32 0, i32 3, !dbg !3370
  %arrayidx263 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands262, i64 0, i64 0, !dbg !3370
  %113 = load %union.tree_node*, %union.tree_node** %arrayidx263, align 8, !dbg !3370
  %call264 = call %union.tree_node* @get_base_address(%union.tree_node* %113), !dbg !3371
  store %union.tree_node* %call264, %union.tree_node** %base260, align 8, !dbg !3369
  %114 = load %union.tree_node*, %union.tree_node** %base260, align 8, !dbg !3372
  %tobool265 = icmp ne %union.tree_node* %114, null, !dbg !3372
  br i1 %tobool265, label %land.lhs.true266, label %if.end275, !dbg !3374

land.lhs.true266:                                 ; preds = %if.then259
  %115 = load %union.tree_node*, %union.tree_node** %base260, align 8, !dbg !3375
  %base267 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !3375
  %116 = bitcast %struct.tree_base* %base267 to i64*, !dbg !3375
  %bf.load268 = load i64, i64* %116, align 8, !dbg !3375
  %bf.clear269 = and i64 %bf.load268, 65535, !dbg !3375
  %bf.cast270 = trunc i64 %bf.clear269 to i32, !dbg !3375
  %cmp271 = icmp eq i32 %bf.cast270, 32, !dbg !3376
  br i1 %cmp271, label %if.then273, label %if.end275, !dbg !3377

if.then273:                                       ; preds = %land.lhs.true266
  %117 = load %union.tree_node*, %union.tree_node** %base260, align 8, !dbg !3378
  %call274 = call zeroext i8 @add_referenced_var(%union.tree_node* %117), !dbg !3379
  br label %if.end275, !dbg !3379

if.end275:                                        ; preds = %if.then273, %land.lhs.true266, %if.then259
  br label %if.end276, !dbg !3380

if.end276:                                        ; preds = %if.end275, %if.then251
  %118 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3381
  store %union.tree_node* %118, %union.tree_node** %retval, align 8, !dbg !3382
  br label %return, !dbg !3382

if.end277:                                        ; preds = %for.body
  br label %for.inc, !dbg !3383

for.inc:                                          ; preds = %if.end277
  %119 = load i64, i64* %cnt, align 8, !dbg !3354
  %inc = add i64 %119, 1, !dbg !3354
  store i64 %inc, i64* %cnt, align 8, !dbg !3354
  br label %for.cond, !dbg !3354, !llvm.loop !3384

for.end:                                          ; preds = %cond.end246
  br label %sw.epilog509, !dbg !3386

sw.bb278:                                         ; preds = %if.end
  %120 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3387
  %exp279 = bitcast %union.tree_node* %120 to %struct.tree_exp*, !dbg !3387
  %operands280 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp279, i32 0, i32 3, !dbg !3387
  %arrayidx281 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands280, i64 0, i64 0, !dbg !3387
  %121 = load %union.tree_node*, %union.tree_node** %arrayidx281, align 8, !dbg !3387
  store %union.tree_node* %121, %union.tree_node** %base, align 8, !dbg !3388
  %122 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3389
  %base282 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !3389
  %123 = bitcast %struct.tree_base* %base282 to i64*, !dbg !3389
  %bf.load283 = load i64, i64* %123, align 8, !dbg !3389
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !3389
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !3389
  switch i32 %bf.cast285, label %sw.default311 [
    i32 32, label %sw.bb286
    i32 45, label %sw.bb309
    i32 41, label %sw.bb309
  ], !dbg !3390

sw.bb286:                                         ; preds = %sw.bb278
  %124 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3391
  %base287 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !3391
  %125 = bitcast %struct.tree_base* %base287 to i64*, !dbg !3391
  %bf.load288 = load i64, i64* %125, align 8, !dbg !3391
  %bf.lshr289 = lshr i64 %bf.load288, 20, !dbg !3391
  %bf.clear290 = and i64 %bf.lshr289, 1, !dbg !3391
  %bf.cast291 = trunc i64 %bf.clear290 to i32, !dbg !3391
  %tobool292 = icmp ne i32 %bf.cast291, 0, !dbg !3391
  br i1 %tobool292, label %lor.lhs.false293, label %if.then305, !dbg !3394

lor.lhs.false293:                                 ; preds = %sw.bb286
  %126 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3395
  %common294 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !3395
  %type295 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common294, i32 0, i32 2, !dbg !3395
  %127 = load %union.tree_node*, %union.tree_node** %type295, align 8, !dbg !3395
  %base296 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !3395
  %128 = bitcast %struct.tree_base* %base296 to i64*, !dbg !3395
  %bf.load297 = load i64, i64* %128, align 8, !dbg !3395
  %bf.clear298 = and i64 %bf.load297, 65535, !dbg !3395
  %bf.cast299 = trunc i64 %bf.clear298 to i32, !dbg !3395
  %cmp300 = icmp ne i32 %bf.cast299, 16, !dbg !3396
  br i1 %cmp300, label %if.then305, label %lor.lhs.false302, !dbg !3397

lor.lhs.false302:                                 ; preds = %lor.lhs.false293
  %129 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !3398
  %130 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3399
  %call303 = call zeroext i8 %129(%union.tree_node* %130), !dbg !3400
  %tobool304 = icmp ne i8 %call303, 0, !dbg !3400
  br i1 %tobool304, label %if.end306, label %if.then305, !dbg !3401

if.then305:                                       ; preds = %lor.lhs.false302, %lor.lhs.false293, %sw.bb286
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3402
  br label %return, !dbg !3402

if.end306:                                        ; preds = %lor.lhs.false302
  %131 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3403
  %decl_common307 = bitcast %union.tree_node* %131 to %struct.tree_decl_common*, !dbg !3403
  %initial308 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common307, i32 0, i32 5, !dbg !3403
  %132 = load %union.tree_node*, %union.tree_node** %initial308, align 8, !dbg !3403
  store %union.tree_node* %132, %union.tree_node** %ctor, align 8, !dbg !3404
  br label %sw.epilog312, !dbg !3405

sw.bb309:                                         ; preds = %sw.bb278, %sw.bb278
  %133 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3406
  %call310 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %133), !dbg !3407
  store %union.tree_node* %call310, %union.tree_node** %ctor, align 8, !dbg !3408
  br label %sw.epilog312, !dbg !3409

sw.default311:                                    ; preds = %sw.bb278
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3410
  br label %return, !dbg !3410

sw.epilog312:                                     ; preds = %sw.bb309, %if.end306
  %134 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3411
  %cmp313 = icmp eq %union.tree_node* %134, null, !dbg !3413
  br i1 %cmp313, label %if.then329, label %lor.lhs.false315, !dbg !3414

lor.lhs.false315:                                 ; preds = %sw.epilog312
  %135 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3415
  %base316 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !3415
  %136 = bitcast %struct.tree_base* %base316 to i64*, !dbg !3415
  %bf.load317 = load i64, i64* %136, align 8, !dbg !3415
  %bf.clear318 = and i64 %bf.load317, 65535, !dbg !3415
  %bf.cast319 = trunc i64 %bf.clear318 to i32, !dbg !3415
  %cmp320 = icmp ne i32 %bf.cast319, 51, !dbg !3416
  br i1 %cmp320, label %if.then329, label %lor.lhs.false322, !dbg !3417

lor.lhs.false322:                                 ; preds = %lor.lhs.false315
  %137 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3418
  %base323 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !3418
  %138 = bitcast %struct.tree_base* %base323 to i64*, !dbg !3418
  %bf.load324 = load i64, i64* %138, align 8, !dbg !3418
  %bf.lshr325 = lshr i64 %bf.load324, 26, !dbg !3418
  %bf.clear326 = and i64 %bf.lshr325, 1, !dbg !3418
  %bf.cast327 = trunc i64 %bf.clear326 to i32, !dbg !3418
  %tobool328 = icmp ne i32 %bf.cast327, 0, !dbg !3418
  br i1 %tobool328, label %if.end330, label %if.then329, !dbg !3419

if.then329:                                       ; preds = %lor.lhs.false322, %lor.lhs.false315, %sw.epilog312
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3420
  br label %return, !dbg !3420

if.end330:                                        ; preds = %lor.lhs.false322
  %139 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3421
  %exp331 = bitcast %union.tree_node* %139 to %struct.tree_exp*, !dbg !3421
  %operands332 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp331, i32 0, i32 3, !dbg !3421
  %arrayidx333 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands332, i64 0, i64 1, !dbg !3421
  %140 = load %union.tree_node*, %union.tree_node** %arrayidx333, align 8, !dbg !3421
  store %union.tree_node* %140, %union.tree_node** %field, align 8, !dbg !3422
  store i64 0, i64* %cnt, align 8, !dbg !3423
  br label %for.cond334, !dbg !3423

for.cond334:                                      ; preds = %for.inc417, %if.end330
  %141 = load i64, i64* %cnt, align 8, !dbg !3425
  %142 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor335 = bitcast %union.tree_node* %142 to %struct.tree_constructor*, !dbg !3425
  %elts336 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor335, i32 0, i32 1, !dbg !3425
  %143 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts336, align 8, !dbg !3425
  %tobool337 = icmp ne %struct.VEC_constructor_elt_gc* %143, null, !dbg !3425
  br i1 %tobool337, label %cond.true338, label %cond.false342, !dbg !3425

cond.true338:                                     ; preds = %for.cond334
  %144 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor339 = bitcast %union.tree_node* %144 to %struct.tree_constructor*, !dbg !3425
  %elts340 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor339, i32 0, i32 1, !dbg !3425
  %145 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts340, align 8, !dbg !3425
  %base341 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %145, i32 0, i32 0, !dbg !3425
  br label %cond.end343, !dbg !3425

cond.false342:                                    ; preds = %for.cond334
  br label %cond.end343, !dbg !3425

cond.end343:                                      ; preds = %cond.false342, %cond.true338
  %cond344 = phi %struct.VEC_constructor_elt_base* [ %base341, %cond.true338 ], [ null, %cond.false342 ], !dbg !3425
  %call345 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond344), !dbg !3425
  %conv346 = zext i32 %call345 to i64, !dbg !3425
  %cmp347 = icmp uge i64 %141, %conv346, !dbg !3425
  br i1 %cmp347, label %cond.true349, label %cond.false350, !dbg !3425

cond.true349:                                     ; preds = %cond.end343
  br label %cond.end377, !dbg !3425

cond.false350:                                    ; preds = %cond.end343
  %146 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor351 = bitcast %union.tree_node* %146 to %struct.tree_constructor*, !dbg !3425
  %elts352 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor351, i32 0, i32 1, !dbg !3425
  %147 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts352, align 8, !dbg !3425
  %tobool353 = icmp ne %struct.VEC_constructor_elt_gc* %147, null, !dbg !3425
  br i1 %tobool353, label %cond.true354, label %cond.false358, !dbg !3425

cond.true354:                                     ; preds = %cond.false350
  %148 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor355 = bitcast %union.tree_node* %148 to %struct.tree_constructor*, !dbg !3425
  %elts356 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor355, i32 0, i32 1, !dbg !3425
  %149 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts356, align 8, !dbg !3425
  %base357 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %149, i32 0, i32 0, !dbg !3425
  br label %cond.end359, !dbg !3425

cond.false358:                                    ; preds = %cond.false350
  br label %cond.end359, !dbg !3425

cond.end359:                                      ; preds = %cond.false358, %cond.true354
  %cond360 = phi %struct.VEC_constructor_elt_base* [ %base357, %cond.true354 ], [ null, %cond.false358 ], !dbg !3425
  %150 = load i64, i64* %cnt, align 8, !dbg !3425
  %conv361 = trunc i64 %150 to i32, !dbg !3425
  %call362 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond360, i32 %conv361), !dbg !3425
  %value363 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call362, i32 0, i32 1, !dbg !3425
  %151 = load %union.tree_node*, %union.tree_node** %value363, align 8, !dbg !3425
  store %union.tree_node* %151, %union.tree_node** %cval, align 8, !dbg !3425
  %152 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor364 = bitcast %union.tree_node* %152 to %struct.tree_constructor*, !dbg !3425
  %elts365 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor364, i32 0, i32 1, !dbg !3425
  %153 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts365, align 8, !dbg !3425
  %tobool366 = icmp ne %struct.VEC_constructor_elt_gc* %153, null, !dbg !3425
  br i1 %tobool366, label %cond.true367, label %cond.false371, !dbg !3425

cond.true367:                                     ; preds = %cond.end359
  %154 = load %union.tree_node*, %union.tree_node** %ctor, align 8, !dbg !3425
  %constructor368 = bitcast %union.tree_node* %154 to %struct.tree_constructor*, !dbg !3425
  %elts369 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor368, i32 0, i32 1, !dbg !3425
  %155 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts369, align 8, !dbg !3425
  %base370 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %155, i32 0, i32 0, !dbg !3425
  br label %cond.end372, !dbg !3425

cond.false371:                                    ; preds = %cond.end359
  br label %cond.end372, !dbg !3425

cond.end372:                                      ; preds = %cond.false371, %cond.true367
  %cond373 = phi %struct.VEC_constructor_elt_base* [ %base370, %cond.true367 ], [ null, %cond.false371 ], !dbg !3425
  %156 = load i64, i64* %cnt, align 8, !dbg !3425
  %conv374 = trunc i64 %156 to i32, !dbg !3425
  %call375 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond373, i32 %conv374), !dbg !3425
  %index376 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call375, i32 0, i32 0, !dbg !3425
  %157 = load %union.tree_node*, %union.tree_node** %index376, align 8, !dbg !3425
  store %union.tree_node* %157, %union.tree_node** %cfield, align 8, !dbg !3425
  br label %cond.end377, !dbg !3425

cond.end377:                                      ; preds = %cond.end372, %cond.true349
  %cond378 = phi i32 [ 0, %cond.true349 ], [ 1, %cond.end372 ], !dbg !3425
  %tobool379 = icmp ne i32 %cond378, 0, !dbg !3423
  br i1 %tobool379, label %for.body380, label %for.end419, !dbg !3423

for.body380:                                      ; preds = %cond.end377
  %158 = load %union.tree_node*, %union.tree_node** %cfield, align 8, !dbg !3427
  %159 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3429
  %cmp381 = icmp eq %union.tree_node* %158, %159, !dbg !3430
  br i1 %cmp381, label %land.lhs.true383, label %if.end416, !dbg !3431

land.lhs.true383:                                 ; preds = %for.body380
  %160 = load %union.tree_node*, %union.tree_node** %cfield, align 8, !dbg !3432
  %decl_common384 = bitcast %union.tree_node* %160 to %struct.tree_decl_common*, !dbg !3432
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common384, i32 0, i32 2, !dbg !3432
  %161 = bitcast i40* %decl_flag_1 to i64*, !dbg !3432
  %bf.load385 = load i64, i64* %161, align 8, !dbg !3432
  %bf.lshr386 = lshr i64 %bf.load385, 25, !dbg !3432
  %bf.clear387 = and i64 %bf.lshr386, 1, !dbg !3432
  %bf.cast388 = trunc i64 %bf.clear387 to i32, !dbg !3432
  %tobool389 = icmp ne i32 %bf.cast388, 0, !dbg !3432
  br i1 %tobool389, label %if.end416, label %if.then390, !dbg !3433

if.then390:                                       ; preds = %land.lhs.true383
  %162 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3434
  %call391 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %162), !dbg !3434
  store %union.tree_node* %call391, %union.tree_node** %cval, align 8, !dbg !3434
  %163 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3436
  %base392 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !3436
  %164 = bitcast %struct.tree_base* %base392 to i64*, !dbg !3436
  %bf.load393 = load i64, i64* %164, align 8, !dbg !3436
  %bf.clear394 = and i64 %bf.load393, 65535, !dbg !3436
  %bf.cast395 = trunc i64 %bf.clear394 to i32, !dbg !3436
  %cmp396 = icmp eq i32 %bf.cast395, 121, !dbg !3438
  br i1 %cmp396, label %if.then398, label %if.end415, !dbg !3439

if.then398:                                       ; preds = %if.then390
  call void @llvm.dbg.declare(metadata %union.tree_node** %base399, metadata !3440, metadata !DIExpression()), !dbg !3442
  %165 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3443
  %exp400 = bitcast %union.tree_node* %165 to %struct.tree_exp*, !dbg !3443
  %operands401 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp400, i32 0, i32 3, !dbg !3443
  %arrayidx402 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands401, i64 0, i64 0, !dbg !3443
  %166 = load %union.tree_node*, %union.tree_node** %arrayidx402, align 8, !dbg !3443
  %call403 = call %union.tree_node* @get_base_address(%union.tree_node* %166), !dbg !3444
  store %union.tree_node* %call403, %union.tree_node** %base399, align 8, !dbg !3442
  %167 = load %union.tree_node*, %union.tree_node** %base399, align 8, !dbg !3445
  %tobool404 = icmp ne %union.tree_node* %167, null, !dbg !3445
  br i1 %tobool404, label %land.lhs.true405, label %if.end414, !dbg !3447

land.lhs.true405:                                 ; preds = %if.then398
  %168 = load %union.tree_node*, %union.tree_node** %base399, align 8, !dbg !3448
  %base406 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !3448
  %169 = bitcast %struct.tree_base* %base406 to i64*, !dbg !3448
  %bf.load407 = load i64, i64* %169, align 8, !dbg !3448
  %bf.clear408 = and i64 %bf.load407, 65535, !dbg !3448
  %bf.cast409 = trunc i64 %bf.clear408 to i32, !dbg !3448
  %cmp410 = icmp eq i32 %bf.cast409, 32, !dbg !3449
  br i1 %cmp410, label %if.then412, label %if.end414, !dbg !3450

if.then412:                                       ; preds = %land.lhs.true405
  %170 = load %union.tree_node*, %union.tree_node** %base399, align 8, !dbg !3451
  %call413 = call zeroext i8 @add_referenced_var(%union.tree_node* %170), !dbg !3452
  br label %if.end414, !dbg !3452

if.end414:                                        ; preds = %if.then412, %land.lhs.true405, %if.then398
  br label %if.end415, !dbg !3453

if.end415:                                        ; preds = %if.end414, %if.then390
  %171 = load %union.tree_node*, %union.tree_node** %cval, align 8, !dbg !3454
  store %union.tree_node* %171, %union.tree_node** %retval, align 8, !dbg !3455
  br label %return, !dbg !3455

if.end416:                                        ; preds = %land.lhs.true383, %for.body380
  br label %for.inc417, !dbg !3432

for.inc417:                                       ; preds = %if.end416
  %172 = load i64, i64* %cnt, align 8, !dbg !3425
  %inc418 = add i64 %172, 1, !dbg !3425
  store i64 %inc418, i64* %cnt, align 8, !dbg !3425
  br label %for.cond334, !dbg !3425, !llvm.loop !3456

for.end419:                                       ; preds = %cond.end377
  br label %sw.epilog509, !dbg !3458

sw.bb420:                                         ; preds = %if.end, %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !3459, metadata !DIExpression()), !dbg !3461
  %173 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3462
  %exp421 = bitcast %union.tree_node* %173 to %struct.tree_exp*, !dbg !3462
  %operands422 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp421, i32 0, i32 3, !dbg !3462
  %arrayidx423 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands422, i64 0, i64 0, !dbg !3462
  %174 = load %union.tree_node*, %union.tree_node** %arrayidx423, align 8, !dbg !3462
  %call424 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %174), !dbg !3463
  store %union.tree_node* %call424, %union.tree_node** %c, align 8, !dbg !3461
  %175 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3464
  %tobool425 = icmp ne %union.tree_node* %175, null, !dbg !3464
  br i1 %tobool425, label %land.lhs.true426, label %if.end463, !dbg !3466

land.lhs.true426:                                 ; preds = %sw.bb420
  %176 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3467
  %base427 = bitcast %union.tree_node* %176 to %struct.tree_base*, !dbg !3467
  %177 = bitcast %struct.tree_base* %base427 to i64*, !dbg !3467
  %bf.load428 = load i64, i64* %177, align 8, !dbg !3467
  %bf.clear429 = and i64 %bf.load428, 65535, !dbg !3467
  %bf.cast430 = trunc i64 %bf.clear429 to i32, !dbg !3467
  %cmp431 = icmp eq i32 %bf.cast430, 26, !dbg !3468
  br i1 %cmp431, label %if.then433, label %if.end463, !dbg !3469

if.then433:                                       ; preds = %land.lhs.true426
  %178 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  %base434 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !3470
  %179 = bitcast %struct.tree_base* %base434 to i64*, !dbg !3470
  %bf.load435 = load i64, i64* %179, align 8, !dbg !3470
  %bf.clear436 = and i64 %bf.load435, 65535, !dbg !3470
  %bf.cast437 = trunc i64 %bf.clear436 to i32, !dbg !3470
  %idxprom438 = sext i32 %bf.cast437 to i64, !dbg !3470
  %arrayidx439 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom438, !dbg !3470
  %180 = load i32, i32* %arrayidx439, align 4, !dbg !3470
  %cmp440 = icmp uge i32 %180, 4, !dbg !3470
  br i1 %cmp440, label %land.lhs.true442, label %cond.false453, !dbg !3470

land.lhs.true442:                                 ; preds = %if.then433
  %181 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  %base443 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !3470
  %182 = bitcast %struct.tree_base* %base443 to i64*, !dbg !3470
  %bf.load444 = load i64, i64* %182, align 8, !dbg !3470
  %bf.clear445 = and i64 %bf.load444, 65535, !dbg !3470
  %bf.cast446 = trunc i64 %bf.clear445 to i32, !dbg !3470
  %idxprom447 = sext i32 %bf.cast446 to i64, !dbg !3470
  %arrayidx448 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom447, !dbg !3470
  %183 = load i32, i32* %arrayidx448, align 4, !dbg !3470
  %cmp449 = icmp ule i32 %183, 10, !dbg !3470
  br i1 %cmp449, label %cond.true451, label %cond.false453, !dbg !3470

cond.true451:                                     ; preds = %land.lhs.true442
  %184 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  %exp452 = bitcast %union.tree_node* %184 to %struct.tree_exp*, !dbg !3470
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp452, i32 0, i32 1, !dbg !3470
  %185 = load i32, i32* %locus, align 8, !dbg !3470
  br label %cond.end454, !dbg !3470

cond.false453:                                    ; preds = %land.lhs.true442, %if.then433
  br label %cond.end454, !dbg !3470

cond.end454:                                      ; preds = %cond.false453, %cond.true451
  %cond455 = phi i32 [ %185, %cond.true451 ], [ 0, %cond.false453 ], !dbg !3470
  %186 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  %base456 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !3470
  %187 = bitcast %struct.tree_base* %base456 to i64*, !dbg !3470
  %bf.load457 = load i64, i64* %187, align 8, !dbg !3470
  %bf.clear458 = and i64 %bf.load457, 65535, !dbg !3470
  %bf.cast459 = trunc i64 %bf.clear458 to i32, !dbg !3470
  %188 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3470
  %common460 = bitcast %union.tree_node* %188 to %struct.tree_common*, !dbg !3470
  %type461 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common460, i32 0, i32 2, !dbg !3470
  %189 = load %union.tree_node*, %union.tree_node** %type461, align 8, !dbg !3470
  %190 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3470
  %call462 = call %union.tree_node* @fold_build1_stat_loc(i32 %cond455, i32 %bf.cast459, %union.tree_node* %189, %union.tree_node* %190), !dbg !3470
  store %union.tree_node* %call462, %union.tree_node** %retval, align 8, !dbg !3471
  br label %return, !dbg !3471

if.end463:                                        ; preds = %land.lhs.true426, %sw.bb420
  br label %sw.epilog509, !dbg !3472

sw.bb464:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %base465, metadata !3473, metadata !DIExpression()), !dbg !3475
  %191 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3476
  %exp466 = bitcast %union.tree_node* %191 to %struct.tree_exp*, !dbg !3476
  %operands467 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp466, i32 0, i32 3, !dbg !3476
  %arrayidx468 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands467, i64 0, i64 0, !dbg !3476
  %192 = load %union.tree_node*, %union.tree_node** %arrayidx468, align 8, !dbg !3476
  store %union.tree_node* %192, %union.tree_node** %base465, align 8, !dbg !3475
  %193 = load %union.tree_node*, %union.tree_node** %base465, align 8, !dbg !3477
  %base469 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !3477
  %194 = bitcast %struct.tree_base* %base469 to i64*, !dbg !3477
  %bf.load470 = load i64, i64* %194, align 8, !dbg !3477
  %bf.clear471 = and i64 %bf.load470, 65535, !dbg !3477
  %bf.cast472 = trunc i64 %bf.clear471 to i32, !dbg !3477
  %cmp473 = icmp eq i32 %bf.cast472, 141, !dbg !3479
  br i1 %cmp473, label %land.lhs.true475, label %if.end507, !dbg !3480

land.lhs.true475:                                 ; preds = %sw.bb464
  %195 = load %union.tree_node*, %union.tree_node** %base465, align 8, !dbg !3481
  %call476 = call %struct.prop_value_d* @get_value(%union.tree_node* %195), !dbg !3482
  store %struct.prop_value_d* %call476, %struct.prop_value_d** %value, align 8, !dbg !3483
  %tobool477 = icmp ne %struct.prop_value_d* %call476, null, !dbg !3483
  br i1 %tobool477, label %land.lhs.true478, label %if.end507, !dbg !3484

land.lhs.true478:                                 ; preds = %land.lhs.true475
  %196 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3485
  %lattice_val479 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %196, i32 0, i32 0, !dbg !3486
  %197 = load i32, i32* %lattice_val479, align 8, !dbg !3486
  %cmp480 = icmp eq i32 %197, 2, !dbg !3487
  br i1 %cmp480, label %land.lhs.true482, label %if.end507, !dbg !3488

land.lhs.true482:                                 ; preds = %land.lhs.true478
  %198 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3489
  %value483 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %198, i32 0, i32 1, !dbg !3489
  %199 = load %union.tree_node*, %union.tree_node** %value483, align 8, !dbg !3489
  %base484 = bitcast %union.tree_node* %199 to %struct.tree_base*, !dbg !3489
  %200 = bitcast %struct.tree_base* %base484 to i64*, !dbg !3489
  %bf.load485 = load i64, i64* %200, align 8, !dbg !3489
  %bf.clear486 = and i64 %bf.load485, 65535, !dbg !3489
  %bf.cast487 = trunc i64 %bf.clear486 to i32, !dbg !3489
  %cmp488 = icmp eq i32 %bf.cast487, 121, !dbg !3490
  br i1 %cmp488, label %land.lhs.true490, label %if.end507, !dbg !3491

land.lhs.true490:                                 ; preds = %land.lhs.true482
  %201 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3492
  %common491 = bitcast %union.tree_node* %201 to %struct.tree_common*, !dbg !3492
  %type492 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common491, i32 0, i32 2, !dbg !3492
  %202 = load %union.tree_node*, %union.tree_node** %type492, align 8, !dbg !3492
  %203 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3493
  %value493 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %203, i32 0, i32 1, !dbg !3493
  %204 = load %union.tree_node*, %union.tree_node** %value493, align 8, !dbg !3493
  %common494 = bitcast %union.tree_node* %204 to %struct.tree_common*, !dbg !3493
  %type495 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common494, i32 0, i32 2, !dbg !3493
  %205 = load %union.tree_node*, %union.tree_node** %type495, align 8, !dbg !3493
  %common496 = bitcast %union.tree_node* %205 to %struct.tree_common*, !dbg !3493
  %type497 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common496, i32 0, i32 2, !dbg !3493
  %206 = load %union.tree_node*, %union.tree_node** %type497, align 8, !dbg !3493
  %call498 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %202, %union.tree_node* %206), !dbg !3494
  %conv499 = zext i8 %call498 to i32, !dbg !3494
  %tobool500 = icmp ne i32 %conv499, 0, !dbg !3494
  br i1 %tobool500, label %if.then501, label %if.end507, !dbg !3495

if.then501:                                       ; preds = %land.lhs.true490
  %207 = load %struct.prop_value_d*, %struct.prop_value_d** %value, align 8, !dbg !3496
  %value502 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %207, i32 0, i32 1, !dbg !3496
  %208 = load %union.tree_node*, %union.tree_node** %value502, align 8, !dbg !3496
  %exp503 = bitcast %union.tree_node* %208 to %struct.tree_exp*, !dbg !3496
  %operands504 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp503, i32 0, i32 3, !dbg !3496
  %arrayidx505 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands504, i64 0, i64 0, !dbg !3496
  %209 = load %union.tree_node*, %union.tree_node** %arrayidx505, align 8, !dbg !3496
  %call506 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %209), !dbg !3497
  store %union.tree_node* %call506, %union.tree_node** %retval, align 8, !dbg !3498
  br label %return, !dbg !3498

if.end507:                                        ; preds = %land.lhs.true490, %land.lhs.true482, %land.lhs.true478, %land.lhs.true475, %sw.bb464
  br label %sw.epilog509, !dbg !3499

sw.default508:                                    ; preds = %if.end
  br label %sw.epilog509, !dbg !3500

sw.epilog509:                                     ; preds = %sw.default508, %if.end507, %if.end463, %for.end419, %for.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3501
  br label %return, !dbg !3501

return:                                           ; preds = %sw.epilog509, %if.then501, %cond.end454, %if.end415, %if.then329, %sw.default311, %if.then305, %if.end276, %if.end205, %if.then197, %sw.default73, %if.else, %if.then48, %sw.default, %if.then24, %if.then
  %210 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3502
  ret %union.tree_node* %210, !dbg !3502
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.prop_value_d* @get_value(%union.tree_node* %var) #0 !dbg !3503 {
entry:
  %retval = alloca %struct.prop_value_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %val = alloca %struct.prop_value_d*, align 8
  %tmp = alloca %struct.prop_value_d, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val, metadata !3508, metadata !DIExpression()), !dbg !3509
  %0 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !3510
  %cmp = icmp eq %struct.prop_value_d* %0, null, !dbg !3512
  br i1 %cmp, label %if.then, label %if.end, !dbg !3513

if.then:                                          ; preds = %entry
  store %struct.prop_value_d* null, %struct.prop_value_d** %retval, align 8, !dbg !3514
  br label %return, !dbg !3514

if.end:                                           ; preds = %entry
  %1 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !3515
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3516
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !3516
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3516
  %3 = load i32, i32* %version, align 8, !dbg !3516
  %idxprom = zext i32 %3 to i64, !dbg !3515
  %arrayidx = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %1, i64 %idxprom, !dbg !3515
  store %struct.prop_value_d* %arrayidx, %struct.prop_value_d** %val, align 8, !dbg !3517
  %4 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !3518
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %4, i32 0, i32 0, !dbg !3520
  %5 = load i32, i32* %lattice_val, align 8, !dbg !3520
  %cmp1 = icmp eq i32 %5, 0, !dbg !3521
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3522

if.then2:                                         ; preds = %if.end
  %6 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !3523
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3524
  %call = call { i32, %union.tree_node* } @get_default_value(%union.tree_node* %7), !dbg !3525
  %8 = bitcast %struct.prop_value_d* %tmp to { i32, %union.tree_node* }*, !dbg !3525
  %9 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %8, i32 0, i32 0, !dbg !3525
  %10 = extractvalue { i32, %union.tree_node* } %call, 0, !dbg !3525
  store i32 %10, i32* %9, align 8, !dbg !3525
  %11 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %8, i32 0, i32 1, !dbg !3525
  %12 = extractvalue { i32, %union.tree_node* } %call, 1, !dbg !3525
  store %union.tree_node* %12, %union.tree_node** %11, align 8, !dbg !3525
  %13 = bitcast %struct.prop_value_d* %6 to i8*, !dbg !3525
  %14 = bitcast %struct.prop_value_d* %tmp to i8*, !dbg !3525
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !3525
  br label %if.end3, !dbg !3526

if.end3:                                          ; preds = %if.then2, %if.end
  %15 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !3527
  call void @canonicalize_float_value(%struct.prop_value_d* %15), !dbg !3528
  %16 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !3529
  store %struct.prop_value_d* %16, %struct.prop_value_d** %retval, align 8, !dbg !3530
  br label %return, !dbg !3530

return:                                           ; preds = %if.end3, %if.then
  %17 = load %struct.prop_value_d*, %struct.prop_value_d** %retval, align 8, !dbg !3531
  ret %struct.prop_value_d* %17, !dbg !3531
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !3532 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !3537, metadata !DIExpression()), !dbg !3538
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !3538
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !3538
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3538

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !3538
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !3538
  %2 = load i32, i32* %num, align 8, !dbg !3538
  br label %cond.end, !dbg !3538

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3538

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3538
  ret i32 %cond, !dbg !3538
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_) #0 !dbg !3539 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !3544, metadata !DIExpression()), !dbg !3545
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3546, metadata !DIExpression()), !dbg !3545
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !3545
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !3545
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3545

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3545
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !3545
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !3545
  %3 = load i32, i32* %num, align 8, !dbg !3545
  %cmp = icmp ult i32 %1, %3, !dbg !3545
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3547
  %land.ext = zext i1 %4 to i32, !dbg !3545
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !3545
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 2, !dbg !3545
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3545
  %idxprom = zext i32 %6 to i64, !dbg !3545
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !3545
  ret %struct.constructor_elt_d* %arrayidx, !dbg !3545
}

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_ccp() #0 !dbg !3548 {
entry:
  %0 = load i32, i32* @flag_tree_ccp, align 4, !dbg !3549
  %cmp = icmp ne i32 %0, 0, !dbg !3550
  %conv = zext i1 %cmp to i32, !dbg !3550
  %conv1 = trunc i32 %conv to i8, !dbg !3549
  ret i8 %conv1, !dbg !3551
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_ssa_ccp() #0 !dbg !3552 {
entry:
  %retval = alloca i32, align 4
  call void @ccp_initialize(), !dbg !3553
  call void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)* @ccp_visit_stmt, i32 (%union.gimple_statement_d*)* @ccp_visit_phi_node), !dbg !3554
  %call = call zeroext i8 @ccp_finalize(), !dbg !3555
  %tobool = icmp ne i8 %call, 0, !dbg !3555
  br i1 %tobool, label %if.then, label %if.else, !dbg !3557

if.then:                                          ; preds = %entry
  store i32 34848, i32* %retval, align 4, !dbg !3558
  br label %return, !dbg !3558

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3559
  br label %return, !dbg !3559

return:                                           ; preds = %if.else, %if.then
  %0 = load i32, i32* %retval, align 4, !dbg !3560
  ret i32 %0, !dbg !3560
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @maybe_fold_offset_to_reference(i32 %loc, %union.tree_node* %base, %union.tree_node* %offset, %union.tree_node* %orig_type) #0 !dbg !3561 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %orig_type.addr = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %sub_offset = alloca i64, align 8
  %size = alloca i64, align 8
  %maxsize = alloca i64, align 8
  %newbase = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !3564, metadata !DIExpression()), !dbg !3565
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !3566, metadata !DIExpression()), !dbg !3567
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !3568, metadata !DIExpression()), !dbg !3569
  store %union.tree_node* %orig_type, %union.tree_node** %orig_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type.addr, metadata !3570, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !3572, metadata !DIExpression()), !dbg !3573
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3574, metadata !DIExpression()), !dbg !3575
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3576
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %0), !dbg !3576
  store %union.tree_node* %call, %union.tree_node** %base.addr, align 8, !dbg !3576
  %1 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3577
  %base1 = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3577
  %2 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3577
  %bf.load = load i64, i64* %2, align 8, !dbg !3577
  %bf.clear = and i64 %bf.load, 65535, !dbg !3577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3577
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !3579
  br i1 %cmp, label %if.then, label %if.end, !dbg !3580

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3581
  br label %return, !dbg !3581

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3582
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3582
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3582
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3582
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3582
  store %union.tree_node* %4, %union.tree_node** %base.addr, align 8, !dbg !3583
  %5 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3584
  %call2 = call zeroext i8 @handled_component_p(%union.tree_node* %5), !dbg !3586
  %tobool = icmp ne i8 %call2, 0, !dbg !3586
  br i1 %tobool, label %if.then3, label %if.end18, !dbg !3587

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %sub_offset, metadata !3588, metadata !DIExpression()), !dbg !3590
  call void @llvm.dbg.declare(metadata i64* %size, metadata !3591, metadata !DIExpression()), !dbg !3592
  call void @llvm.dbg.declare(metadata i64* %maxsize, metadata !3593, metadata !DIExpression()), !dbg !3594
  call void @llvm.dbg.declare(metadata %union.tree_node** %newbase, metadata !3595, metadata !DIExpression()), !dbg !3596
  %6 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3597
  %call4 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %6, i64* %sub_offset, i64* %size, i64* %maxsize), !dbg !3598
  store %union.tree_node* %call4, %union.tree_node** %newbase, align 8, !dbg !3599
  %7 = load %union.tree_node*, %union.tree_node** %newbase, align 8, !dbg !3600
  %tobool5 = icmp ne %union.tree_node* %7, null, !dbg !3600
  br i1 %tobool5, label %cond.false, label %cond.true, !dbg !3600

cond.true:                                        ; preds = %if.then3
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 2075, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3600
  br label %cond.end, !dbg !3600

cond.false:                                       ; preds = %if.then3
  br label %cond.end, !dbg !3600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3600
  %8 = load i64, i64* %size, align 8, !dbg !3601
  %9 = load i64, i64* %maxsize, align 8, !dbg !3603
  %cmp6 = icmp eq i64 %8, %9, !dbg !3604
  br i1 %cmp6, label %land.lhs.true, label %if.end17, !dbg !3605

land.lhs.true:                                    ; preds = %cond.end
  %10 = load i64, i64* %size, align 8, !dbg !3606
  %cmp7 = icmp ne i64 %10, -1, !dbg !3607
  br i1 %cmp7, label %land.lhs.true8, label %if.end17, !dbg !3608

land.lhs.true8:                                   ; preds = %land.lhs.true
  %11 = load i64, i64* %sub_offset, align 8, !dbg !3609
  %and = and i64 %11, 7, !dbg !3610
  %tobool9 = icmp ne i64 %and, 0, !dbg !3610
  br i1 %tobool9, label %if.end17, label %if.then10, !dbg !3611

if.then10:                                        ; preds = %land.lhs.true8
  %12 = load %union.tree_node*, %union.tree_node** %newbase, align 8, !dbg !3612
  store %union.tree_node* %12, %union.tree_node** %base.addr, align 8, !dbg !3614
  %13 = load i64, i64* %sub_offset, align 8, !dbg !3615
  %tobool11 = icmp ne i64 %13, 0, !dbg !3615
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !3617

if.then12:                                        ; preds = %if.then10
  %14 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3618
  %15 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3619
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !3619
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3619
  %16 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !3619
  %17 = load i64, i64* %sub_offset, align 8, !dbg !3620
  %div = sdiv i64 %17, 8, !dbg !3621
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* %16, i64 %div), !dbg !3622
  %call15 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %14, %union.tree_node* %call14, i32 1), !dbg !3623
  store %union.tree_node* %call15, %union.tree_node** %offset.addr, align 8, !dbg !3624
  br label %if.end16, !dbg !3625

if.end16:                                         ; preds = %if.then12, %if.then10
  br label %if.end17, !dbg !3626

if.end17:                                         ; preds = %if.end16, %land.lhs.true8, %land.lhs.true, %cond.end
  br label %if.end18, !dbg !3627

if.end18:                                         ; preds = %if.end17, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3628
  %19 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3630
  %common19 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !3630
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !3630
  %20 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !3630
  %call21 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %18, %union.tree_node* %20), !dbg !3631
  %conv = zext i8 %call21 to i32, !dbg !3631
  %tobool22 = icmp ne i32 %conv, 0, !dbg !3631
  br i1 %tobool22, label %land.lhs.true23, label %if.end27, !dbg !3632

land.lhs.true23:                                  ; preds = %if.end18
  %21 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3633
  %call24 = call i32 @integer_zerop(%union.tree_node* %21), !dbg !3634
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3634
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !3635

if.then26:                                        ; preds = %land.lhs.true23
  %22 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3636
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !3637
  br label %return, !dbg !3637

if.end27:                                         ; preds = %land.lhs.true23, %if.end18
  %23 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3638
  %common28 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !3638
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !3638
  %24 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !3638
  store %union.tree_node* %24, %union.tree_node** %type, align 8, !dbg !3639
  %25 = load i32, i32* %loc.addr, align 4, !dbg !3640
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3641
  %27 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3642
  %28 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3643
  %29 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3644
  %call30 = call %union.tree_node* @maybe_fold_offset_to_component_ref(i32 %25, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28, %union.tree_node* %29), !dbg !3645
  store %union.tree_node* %call30, %union.tree_node** %ret, align 8, !dbg !3646
  %30 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3647
  %tobool31 = icmp ne %union.tree_node* %30, null, !dbg !3647
  br i1 %tobool31, label %if.end34, label %if.then32, !dbg !3649

if.then32:                                        ; preds = %if.end27
  %31 = load i32, i32* %loc.addr, align 4, !dbg !3650
  %32 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3651
  %33 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3652
  %34 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3653
  %call33 = call %union.tree_node* @maybe_fold_offset_to_array_ref(i32 %31, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* %34, i8 zeroext 1), !dbg !3654
  store %union.tree_node* %call33, %union.tree_node** %ret, align 8, !dbg !3655
  br label %if.end34, !dbg !3656

if.end34:                                         ; preds = %if.then32, %if.end27
  %35 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3657
  store %union.tree_node* %35, %union.tree_node** %retval, align 8, !dbg !3658
  br label %return, !dbg !3658

return:                                           ; preds = %if.end34, %if.then26, %if.then
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3659
  ret %union.tree_node* %36, !dbg !3659
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !3660 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3666
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3666
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3666
  %bf.load = load i64, i64* %1, align 8, !dbg !3666
  %bf.clear = and i64 %bf.load, 65535, !dbg !3666
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3666
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !3667

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !3668
  br label %return, !dbg !3668

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3670
  br label %return, !dbg !3670

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !3671
  ret i8 %2, !dbg !3671
}

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @maybe_fold_offset_to_component_ref(i32 %loc, %union.tree_node* %record_type, %union.tree_node* %base, %union.tree_node* %offset, %union.tree_node* %orig_type) #0 !dbg !3672 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %record_type.addr = alloca %union.tree_node*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %orig_type.addr = alloca %union.tree_node*, align 8
  %f = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %field_type = alloca %union.tree_node*, align 8
  %tail_array_field = alloca %union.tree_node*, align 8
  %field_offset = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %new_base = alloca %union.tree_node*, align 8
  %cmp16 = alloca i32, align 4
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !3675, metadata !DIExpression()), !dbg !3676
  store %union.tree_node* %record_type, %union.tree_node** %record_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %record_type.addr, metadata !3677, metadata !DIExpression()), !dbg !3678
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !3681, metadata !DIExpression()), !dbg !3682
  store %union.tree_node* %orig_type, %union.tree_node** %orig_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type.addr, metadata !3683, metadata !DIExpression()), !dbg !3684
  call void @llvm.dbg.declare(metadata %union.tree_node** %f, metadata !3685, metadata !DIExpression()), !dbg !3686
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3687, metadata !DIExpression()), !dbg !3688
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_type, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @llvm.dbg.declare(metadata %union.tree_node** %tail_array_field, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_offset, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !3695, metadata !DIExpression()), !dbg !3696
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_base, metadata !3697, metadata !DIExpression()), !dbg !3698
  %0 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3699
  %base1 = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3699
  %1 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3699
  %bf.load = load i64, i64* %1, align 8, !dbg !3699
  %bf.clear = and i64 %bf.load, 65535, !dbg !3699
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3699
  %cmp = icmp ne i32 %bf.cast, 16, !dbg !3701
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3702

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3703
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3703
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3703
  %bf.load3 = load i64, i64* %3, align 8, !dbg !3703
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3703
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3703
  %cmp6 = icmp ne i32 %bf.cast5, 17, !dbg !3704
  br i1 %cmp6, label %land.lhs.true7, label %if.end, !dbg !3705

land.lhs.true7:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3706
  %base8 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3706
  %5 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3706
  %bf.load9 = load i64, i64* %5, align 8, !dbg !3706
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3706
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3706
  %cmp12 = icmp ne i32 %bf.cast11, 18, !dbg !3707
  br i1 %cmp12, label %if.then, label %if.end, !dbg !3708

if.then:                                          ; preds = %land.lhs.true7
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3709
  br label %return, !dbg !3709

if.end:                                           ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %6 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3710
  %7 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3712
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !3713
  %tobool = icmp ne i8 %call, 0, !dbg !3713
  br i1 %tobool, label %if.then13, label %if.end14, !dbg !3714

if.then13:                                        ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3715
  br label %return, !dbg !3715

if.end14:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %tail_array_field, align 8, !dbg !3716
  %8 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3717
  %type = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !3717
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !3717
  %9 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !3717
  store %union.tree_node* %9, %union.tree_node** %f, align 8, !dbg !3719
  br label %for.cond, !dbg !3720

for.cond:                                         ; preds = %for.inc, %if.end14
  %10 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3721
  %tobool15 = icmp ne %union.tree_node* %10, null, !dbg !3723
  br i1 %tobool15, label %for.body, label %for.end, !dbg !3723

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %cmp16, metadata !3724, metadata !DIExpression()), !dbg !3726
  %11 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3727
  %base17 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3727
  %12 = bitcast %struct.tree_base* %base17 to i64*, !dbg !3727
  %bf.load18 = load i64, i64* %12, align 8, !dbg !3727
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !3727
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !3727
  %cmp21 = icmp ne i32 %bf.cast20, 31, !dbg !3729
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !3730

if.then22:                                        ; preds = %for.body
  br label %for.inc, !dbg !3731

if.end23:                                         ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3732
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !3732
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3732
  %14 = bitcast i40* %decl_flag_1 to i64*, !dbg !3732
  %bf.load24 = load i64, i64* %14, align 8, !dbg !3732
  %bf.lshr = lshr i64 %bf.load24, 25, !dbg !3732
  %bf.clear25 = and i64 %bf.lshr, 1, !dbg !3732
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !3732
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !3732
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !3734

if.then28:                                        ; preds = %if.end23
  br label %for.inc, !dbg !3735

if.end29:                                         ; preds = %if.end23
  %15 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3736
  %field_decl = bitcast %union.tree_node* %15 to %struct.tree_field_decl*, !dbg !3736
  %offset30 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !3736
  %16 = load %union.tree_node*, %union.tree_node** %offset30, align 8, !dbg !3736
  %tobool31 = icmp ne %union.tree_node* %16, null, !dbg !3736
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !3738

if.then32:                                        ; preds = %if.end29
  br label %for.inc, !dbg !3739

if.end33:                                         ; preds = %if.end29
  %17 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3740
  %call34 = call %union.tree_node* @byte_position(%union.tree_node* %17), !dbg !3741
  store %union.tree_node* %call34, %union.tree_node** %field_offset, align 8, !dbg !3742
  %18 = load %union.tree_node*, %union.tree_node** %field_offset, align 8, !dbg !3743
  %base35 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3743
  %19 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3743
  %bf.load36 = load i64, i64* %19, align 8, !dbg !3743
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3743
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3743
  %cmp39 = icmp ne i32 %bf.cast38, 23, !dbg !3745
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !3746

if.then40:                                        ; preds = %if.end33
  br label %for.inc, !dbg !3747

if.end41:                                         ; preds = %if.end33
  %20 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3748
  %decl_minimal = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !3748
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3748
  %21 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3748
  %tobool42 = icmp ne %union.tree_node* %21, null, !dbg !3748
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !3750

if.then43:                                        ; preds = %if.end41
  br label %for.inc, !dbg !3751

if.end44:                                         ; preds = %if.end41
  store %union.tree_node* null, %union.tree_node** %tail_array_field, align 8, !dbg !3752
  %22 = load %union.tree_node*, %union.tree_node** %field_offset, align 8, !dbg !3753
  %23 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3754
  %call45 = call i32 @tree_int_cst_compare(%union.tree_node* %22, %union.tree_node* %23), !dbg !3755
  store i32 %call45, i32* %cmp16, align 4, !dbg !3756
  %24 = load i32, i32* %cmp16, align 4, !dbg !3757
  %cmp46 = icmp sgt i32 %24, 0, !dbg !3759
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !3760

if.then47:                                        ; preds = %if.end44
  br label %for.inc, !dbg !3761

if.end48:                                         ; preds = %if.end44
  %25 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3762
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !3762
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3762
  %26 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !3762
  store %union.tree_node* %26, %union.tree_node** %field_type, align 8, !dbg !3763
  %27 = load i32, i32* %cmp16, align 4, !dbg !3764
  %cmp50 = icmp eq i32 %27, 0, !dbg !3766
  br i1 %cmp50, label %land.lhs.true51, label %if.end56, !dbg !3767

land.lhs.true51:                                  ; preds = %if.end48
  %28 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3768
  %29 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3769
  %call52 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %28, %union.tree_node* %29), !dbg !3770
  %conv = zext i8 %call52 to i32, !dbg !3770
  %tobool53 = icmp ne i32 %conv, 0, !dbg !3770
  br i1 %tobool53, label %if.then54, label %if.end56, !dbg !3771

if.then54:                                        ; preds = %land.lhs.true51
  %30 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3772
  %31 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3772
  %32 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3772
  %call55 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* null), !dbg !3772
  store %union.tree_node* %call55, %union.tree_node** %t, align 8, !dbg !3774
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3775
  store %union.tree_node* %33, %union.tree_node** %retval, align 8, !dbg !3776
  br label %return, !dbg !3776

if.end56:                                         ; preds = %land.lhs.true51, %if.end48
  %34 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3777
  %base57 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !3777
  %35 = bitcast %struct.tree_base* %base57 to i64*, !dbg !3777
  %bf.load58 = load i64, i64* %35, align 8, !dbg !3777
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !3777
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !3777
  %cmp61 = icmp eq i32 %bf.cast60, 15, !dbg !3777
  br i1 %cmp61, label %if.end84, label %lor.lhs.false, !dbg !3777

lor.lhs.false:                                    ; preds = %if.end56
  %36 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3777
  %base63 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3777
  %37 = bitcast %struct.tree_base* %base63 to i64*, !dbg !3777
  %bf.load64 = load i64, i64* %37, align 8, !dbg !3777
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !3777
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !3777
  %cmp67 = icmp eq i32 %bf.cast66, 16, !dbg !3777
  br i1 %cmp67, label %if.end84, label %lor.lhs.false69, !dbg !3777

lor.lhs.false69:                                  ; preds = %lor.lhs.false
  %38 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3777
  %base70 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !3777
  %39 = bitcast %struct.tree_base* %base70 to i64*, !dbg !3777
  %bf.load71 = load i64, i64* %39, align 8, !dbg !3777
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !3777
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !3777
  %cmp74 = icmp eq i32 %bf.cast73, 17, !dbg !3777
  br i1 %cmp74, label %if.end84, label %lor.lhs.false76, !dbg !3777

lor.lhs.false76:                                  ; preds = %lor.lhs.false69
  %40 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3777
  %base77 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3777
  %41 = bitcast %struct.tree_base* %base77 to i64*, !dbg !3777
  %bf.load78 = load i64, i64* %41, align 8, !dbg !3777
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !3777
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !3777
  %cmp81 = icmp eq i32 %bf.cast80, 18, !dbg !3777
  br i1 %cmp81, label %if.end84, label %if.then83, !dbg !3779

if.then83:                                        ; preds = %lor.lhs.false76
  br label %for.inc, !dbg !3780

if.end84:                                         ; preds = %lor.lhs.false76, %lor.lhs.false69, %lor.lhs.false, %if.end56
  %42 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3781
  %base85 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !3781
  %43 = bitcast %struct.tree_base* %base85 to i64*, !dbg !3781
  %bf.load86 = load i64, i64* %43, align 8, !dbg !3781
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !3781
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !3781
  %cmp89 = icmp eq i32 %bf.cast88, 15, !dbg !3783
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !3784

if.then91:                                        ; preds = %if.end84
  %44 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3785
  store %union.tree_node* %44, %union.tree_node** %tail_array_field, align 8, !dbg !3786
  br label %if.end92, !dbg !3787

if.end92:                                         ; preds = %if.then91, %if.end84
  %45 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3788
  %decl_common93 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !3788
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common93, i32 0, i32 4, !dbg !3788
  %46 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3788
  %tobool94 = icmp ne %union.tree_node* %46, null, !dbg !3788
  br i1 %tobool94, label %lor.lhs.false95, label %if.then104, !dbg !3790

lor.lhs.false95:                                  ; preds = %if.end92
  %47 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3791
  %decl_common96 = bitcast %union.tree_node* %47 to %struct.tree_decl_common*, !dbg !3791
  %size_unit97 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common96, i32 0, i32 4, !dbg !3791
  %48 = load %union.tree_node*, %union.tree_node** %size_unit97, align 8, !dbg !3791
  %base98 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !3791
  %49 = bitcast %struct.tree_base* %base98 to i64*, !dbg !3791
  %bf.load99 = load i64, i64* %49, align 8, !dbg !3791
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !3791
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !3791
  %cmp102 = icmp ne i32 %bf.cast101, 23, !dbg !3792
  br i1 %cmp102, label %if.then104, label %if.end105, !dbg !3793

if.then104:                                       ; preds = %lor.lhs.false95, %if.end92
  br label %for.inc, !dbg !3794

if.end105:                                        ; preds = %lor.lhs.false95
  %50 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3795
  %51 = load %union.tree_node*, %union.tree_node** %field_offset, align 8, !dbg !3796
  %call106 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %50, %union.tree_node* %51, i32 1), !dbg !3797
  store %union.tree_node* %call106, %union.tree_node** %t, align 8, !dbg !3798
  %52 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3799
  %53 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3801
  %decl_common107 = bitcast %union.tree_node* %53 to %struct.tree_decl_common*, !dbg !3801
  %size_unit108 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common107, i32 0, i32 4, !dbg !3801
  %54 = load %union.tree_node*, %union.tree_node** %size_unit108, align 8, !dbg !3801
  %call109 = call i32 @tree_int_cst_lt(%union.tree_node* %52, %union.tree_node* %54), !dbg !3802
  %tobool110 = icmp ne i32 %call109, 0, !dbg !3802
  br i1 %tobool110, label %if.end112, label %if.then111, !dbg !3803

if.then111:                                       ; preds = %if.end105
  br label %for.inc, !dbg !3804

if.end112:                                        ; preds = %if.end105
  %55 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3805
  %56 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3805
  %57 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3805
  %call113 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %55, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* null), !dbg !3805
  store %union.tree_node* %call113, %union.tree_node** %new_base, align 8, !dbg !3806
  %58 = load i32, i32* %loc.addr, align 4, !dbg !3807
  %59 = load %union.tree_node*, %union.tree_node** %new_base, align 8, !dbg !3807
  %exp = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !3807
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !3807
  store i32 %58, i32* %locus, align 8, !dbg !3807
  %60 = load i32, i32* %loc.addr, align 4, !dbg !3808
  %61 = load %union.tree_node*, %union.tree_node** %new_base, align 8, !dbg !3809
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3810
  %63 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3811
  %64 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3812
  %65 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3813
  %type114 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !3813
  %values115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 1, !dbg !3813
  %66 = load %union.tree_node*, %union.tree_node** %values115, align 8, !dbg !3813
  %cmp116 = icmp eq %union.tree_node* %64, %66, !dbg !3814
  %conv117 = zext i1 %cmp116 to i32, !dbg !3814
  %conv118 = trunc i32 %conv117 to i8, !dbg !3812
  %call119 = call %union.tree_node* @maybe_fold_offset_to_array_ref(i32 %60, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63, i8 zeroext %conv118), !dbg !3815
  store %union.tree_node* %call119, %union.tree_node** %ret, align 8, !dbg !3816
  %67 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3817
  %tobool120 = icmp ne %union.tree_node* %67, null, !dbg !3817
  br i1 %tobool120, label %if.then121, label %if.end122, !dbg !3819

if.then121:                                       ; preds = %if.end112
  %68 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3820
  store %union.tree_node* %68, %union.tree_node** %retval, align 8, !dbg !3821
  br label %return, !dbg !3821

if.end122:                                        ; preds = %if.end112
  %69 = load i32, i32* %loc.addr, align 4, !dbg !3822
  %70 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3823
  %71 = load %union.tree_node*, %union.tree_node** %new_base, align 8, !dbg !3824
  %72 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3825
  %73 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3826
  %call123 = call %union.tree_node* @maybe_fold_offset_to_component_ref(i32 %69, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72, %union.tree_node* %73), !dbg !3827
  store %union.tree_node* %call123, %union.tree_node** %ret, align 8, !dbg !3828
  %74 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3829
  %tobool124 = icmp ne %union.tree_node* %74, null, !dbg !3829
  br i1 %tobool124, label %if.then125, label %if.end126, !dbg !3831

if.then125:                                       ; preds = %if.end122
  %75 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3832
  store %union.tree_node* %75, %union.tree_node** %retval, align 8, !dbg !3833
  br label %return, !dbg !3833

if.end126:                                        ; preds = %if.end122
  br label %for.inc, !dbg !3834

for.inc:                                          ; preds = %if.end126, %if.then111, %if.then104, %if.then83, %if.then47, %if.then43, %if.then40, %if.then32, %if.then28, %if.then22
  %76 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3835
  %common127 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !3835
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 1, !dbg !3835
  %77 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3835
  store %union.tree_node* %77, %union.tree_node** %f, align 8, !dbg !3836
  br label %for.cond, !dbg !3837, !llvm.loop !3838

for.end:                                          ; preds = %for.cond
  %78 = load %union.tree_node*, %union.tree_node** %tail_array_field, align 8, !dbg !3840
  %tobool128 = icmp ne %union.tree_node* %78, null, !dbg !3840
  br i1 %tobool128, label %if.end130, label %if.then129, !dbg !3842

if.then129:                                       ; preds = %for.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3843
  br label %return, !dbg !3843

if.end130:                                        ; preds = %for.end
  %79 = load %union.tree_node*, %union.tree_node** %tail_array_field, align 8, !dbg !3844
  store %union.tree_node* %79, %union.tree_node** %f, align 8, !dbg !3845
  %80 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3846
  %common131 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !3846
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !3846
  %81 = load %union.tree_node*, %union.tree_node** %type132, align 8, !dbg !3846
  store %union.tree_node* %81, %union.tree_node** %field_type, align 8, !dbg !3847
  %82 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3848
  %83 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3849
  %call133 = call %union.tree_node* @byte_position(%union.tree_node* %83), !dbg !3850
  %call134 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %82, %union.tree_node* %call133, i32 1), !dbg !3851
  store %union.tree_node* %call134, %union.tree_node** %offset.addr, align 8, !dbg !3852
  %84 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3853
  %85 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3853
  %86 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3853
  %call135 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %84, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* null), !dbg !3853
  store %union.tree_node* %call135, %union.tree_node** %base.addr, align 8, !dbg !3854
  %87 = load i32, i32* %loc.addr, align 4, !dbg !3855
  %88 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3855
  %exp136 = bitcast %union.tree_node* %88 to %struct.tree_exp*, !dbg !3855
  %locus137 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp136, i32 0, i32 1, !dbg !3855
  store i32 %87, i32* %locus137, align 8, !dbg !3855
  %89 = load i32, i32* %loc.addr, align 4, !dbg !3856
  %90 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3857
  %91 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3858
  %92 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3859
  %93 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !3860
  %94 = load %union.tree_node*, %union.tree_node** %record_type.addr, align 8, !dbg !3861
  %type138 = bitcast %union.tree_node* %94 to %struct.tree_type*, !dbg !3861
  %values139 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 1, !dbg !3861
  %95 = load %union.tree_node*, %union.tree_node** %values139, align 8, !dbg !3861
  %cmp140 = icmp eq %union.tree_node* %93, %95, !dbg !3862
  %conv141 = zext i1 %cmp140 to i32, !dbg !3862
  %conv142 = trunc i32 %conv141 to i8, !dbg !3860
  %call143 = call %union.tree_node* @maybe_fold_offset_to_array_ref(i32 %89, %union.tree_node* %90, %union.tree_node* %91, %union.tree_node* %92, i8 zeroext %conv142), !dbg !3863
  store %union.tree_node* %call143, %union.tree_node** %t, align 8, !dbg !3864
  %96 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3865
  %tobool144 = icmp ne %union.tree_node* %96, null, !dbg !3865
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !3867

if.then145:                                       ; preds = %if.end130
  %97 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3868
  store %union.tree_node* %97, %union.tree_node** %retval, align 8, !dbg !3869
  br label %return, !dbg !3869

if.end146:                                        ; preds = %if.end130
  %98 = load i32, i32* %loc.addr, align 4, !dbg !3870
  %99 = load %union.tree_node*, %union.tree_node** %field_type, align 8, !dbg !3871
  %100 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3872
  %101 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3873
  %102 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3874
  %call147 = call %union.tree_node* @maybe_fold_offset_to_component_ref(i32 %98, %union.tree_node* %99, %union.tree_node* %100, %union.tree_node* %101, %union.tree_node* %102), !dbg !3875
  store %union.tree_node* %call147, %union.tree_node** %retval, align 8, !dbg !3876
  br label %return, !dbg !3876

return:                                           ; preds = %if.end146, %if.then145, %if.then129, %if.then125, %if.then121, %if.then54, %if.then13, %if.then
  %103 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3877
  ret %union.tree_node* %103, !dbg !3877
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @maybe_fold_offset_to_array_ref(i32 %loc, %union.tree_node* %base, %union.tree_node* %offset, %union.tree_node* %orig_type, i8 zeroext %allow_negative_idx) #0 !dbg !3878 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %orig_type.addr = alloca %union.tree_node*, align 8
  %allow_negative_idx.addr = alloca i8, align 1
  %min_idx = alloca %union.tree_node*, align 8
  %idx = alloca %union.tree_node*, align 8
  %idx_type = alloca %union.tree_node*, align 8
  %elt_offset = alloca %union.tree_node*, align 8
  %array_type = alloca %union.tree_node*, align 8
  %elt_type = alloca %union.tree_node*, align 8
  %elt_size = alloca %union.tree_node*, align 8
  %domain_type = alloca %union.tree_node*, align 8
  %low_bound = alloca %union.tree_node*, align 8
  %lquo = alloca i64, align 8
  %lrem = alloca i64, align 8
  %hquo = alloca i64, align 8
  %hrem = alloca i64, align 8
  %soffset = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %up_bound = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !3881, metadata !DIExpression()), !dbg !3882
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !3885, metadata !DIExpression()), !dbg !3886
  store %union.tree_node* %orig_type, %union.tree_node** %orig_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type.addr, metadata !3887, metadata !DIExpression()), !dbg !3888
  store i8 %allow_negative_idx, i8* %allow_negative_idx.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_negative_idx.addr, metadata !3889, metadata !DIExpression()), !dbg !3890
  call void @llvm.dbg.declare(metadata %union.tree_node** %min_idx, metadata !3891, metadata !DIExpression()), !dbg !3892
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !3893, metadata !DIExpression()), !dbg !3894
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx_type, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt_offset, metadata !3897, metadata !DIExpression()), !dbg !3898
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !3899
  store %union.tree_node* %0, %union.tree_node** %elt_offset, align 8, !dbg !3898
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_type, metadata !3900, metadata !DIExpression()), !dbg !3901
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt_type, metadata !3902, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt_size, metadata !3904, metadata !DIExpression()), !dbg !3905
  call void @llvm.dbg.declare(metadata %union.tree_node** %domain_type, metadata !3906, metadata !DIExpression()), !dbg !3907
  %1 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3908
  %base1 = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3908
  %2 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3908
  %bf.load = load i64, i64* %2, align 8, !dbg !3908
  %bf.clear = and i64 %bf.load, 65535, !dbg !3908
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3908
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !3910
  br i1 %cmp, label %if.then, label %if.end17, !dbg !3911

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %low_bound, metadata !3912, metadata !DIExpression()), !dbg !3914
  %3 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3915
  %call = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %3), !dbg !3916
  store %union.tree_node* %call, %union.tree_node** %low_bound, align 8, !dbg !3914
  %4 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3917
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !3917
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3917
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3917
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3917
  store %union.tree_node* %5, %union.tree_node** %elt_offset, align 8, !dbg !3918
  %6 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !3919
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3919
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3919
  %bf.load3 = load i64, i64* %7, align 8, !dbg !3919
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3919
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3919
  %cmp6 = icmp ne i32 %bf.cast5, 23, !dbg !3921
  br i1 %cmp6, label %if.then12, label %lor.lhs.false, !dbg !3922

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %elt_offset, align 8, !dbg !3923
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3923
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3923
  %bf.load8 = load i64, i64* %9, align 8, !dbg !3923
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !3923
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3923
  %cmp11 = icmp ne i32 %bf.cast10, 23, !dbg !3924
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !3925

if.then12:                                        ; preds = %lor.lhs.false, %if.then
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3926
  br label %return, !dbg !3926

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %elt_offset, align 8, !dbg !3927
  %11 = load %union.tree_node*, %union.tree_node** %low_bound, align 8, !dbg !3928
  %call13 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %10, %union.tree_node* %11, i32 0), !dbg !3929
  store %union.tree_node* %call13, %union.tree_node** %elt_offset, align 8, !dbg !3930
  %12 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3931
  %exp14 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !3931
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !3931
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !3931
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !3931
  store %union.tree_node* %13, %union.tree_node** %base.addr, align 8, !dbg !3932
  br label %if.end17, !dbg !3933

if.end17:                                         ; preds = %if.end, %entry
  %14 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3934
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !3934
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3934
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3934
  store %union.tree_node* %15, %union.tree_node** %array_type, align 8, !dbg !3935
  %16 = load %union.tree_node*, %union.tree_node** %array_type, align 8, !dbg !3936
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3936
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3936
  %bf.load19 = load i64, i64* %17, align 8, !dbg !3936
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3936
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3936
  %cmp22 = icmp ne i32 %bf.cast21, 15, !dbg !3938
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !3939

if.then23:                                        ; preds = %if.end17
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3940
  br label %return, !dbg !3940

if.end24:                                         ; preds = %if.end17
  %18 = load %union.tree_node*, %union.tree_node** %array_type, align 8, !dbg !3941
  %common25 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !3941
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !3941
  %19 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !3941
  store %union.tree_node* %19, %union.tree_node** %elt_type, align 8, !dbg !3942
  %20 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !3943
  %21 = load %union.tree_node*, %union.tree_node** %elt_type, align 8, !dbg !3945
  %call27 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %20, %union.tree_node* %21), !dbg !3946
  %tobool = icmp ne i8 %call27, 0, !dbg !3946
  br i1 %tobool, label %if.end29, label %if.then28, !dbg !3947

if.then28:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3948
  br label %return, !dbg !3948

if.end29:                                         ; preds = %if.end24
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 41), align 8, !dbg !3949
  %call30 = call %union.tree_node* @signed_type_for(%union.tree_node* %22), !dbg !3950
  store %union.tree_node* %call30, %union.tree_node** %idx_type, align 8, !dbg !3951
  %23 = load %union.tree_node*, %union.tree_node** %elt_type, align 8, !dbg !3952
  %type31 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !3952
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 3, !dbg !3952
  %24 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3952
  store %union.tree_node* %24, %union.tree_node** %elt_size, align 8, !dbg !3953
  %25 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !3954
  %tobool32 = icmp ne %union.tree_node* %25, null, !dbg !3954
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !3956

if.then33:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3957
  br label %return, !dbg !3957

if.end34:                                         ; preds = %if.end29
  %26 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3958
  %call35 = call i32 @integer_zerop(%union.tree_node* %26), !dbg !3960
  %tobool36 = icmp ne i32 %call35, 0, !dbg !3960
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !3961

if.then37:                                        ; preds = %if.end34
  %27 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !3962
  %base38 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !3962
  %28 = bitcast %struct.tree_base* %base38 to i64*, !dbg !3962
  %bf.load39 = load i64, i64* %28, align 8, !dbg !3962
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !3962
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !3962
  %cmp42 = icmp ne i32 %bf.cast41, 23, !dbg !3965
  br i1 %cmp42, label %if.then43, label %if.end46, !dbg !3966

if.then43:                                        ; preds = %if.then37
  %29 = load %union.tree_node*, %union.tree_node** %elt_type, align 8, !dbg !3967
  %type44 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !3967
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 7, !dbg !3967
  %30 = load i32, i32* %align, align 8, !dbg !3967
  %conv = zext i32 %30 to i64, !dbg !3967
  %call45 = call %union.tree_node* @size_int_kind(i64 %conv, i32 0), !dbg !3967
  store %union.tree_node* %call45, %union.tree_node** %elt_size, align 8, !dbg !3968
  br label %if.end46, !dbg !3969

if.end46:                                         ; preds = %if.then43, %if.then37
  %31 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !3970
  %call47 = call %union.tree_node* @build_int_cst(%union.tree_node* %31, i64 0), !dbg !3971
  store %union.tree_node* %call47, %union.tree_node** %idx, align 8, !dbg !3972
  br label %if.end76, !dbg !3973

if.else:                                          ; preds = %if.end34
  call void @llvm.dbg.declare(metadata i64* %lquo, metadata !3974, metadata !DIExpression()), !dbg !3976
  call void @llvm.dbg.declare(metadata i64* %lrem, metadata !3977, metadata !DIExpression()), !dbg !3978
  call void @llvm.dbg.declare(metadata i64* %hquo, metadata !3979, metadata !DIExpression()), !dbg !3980
  call void @llvm.dbg.declare(metadata i64* %hrem, metadata !3981, metadata !DIExpression()), !dbg !3982
  call void @llvm.dbg.declare(metadata %struct.double_int* %soffset, metadata !3983, metadata !DIExpression()), !dbg !3984
  %32 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3985
  %call48 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %32), !dbg !3986
  %33 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !3986
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 0, !dbg !3986
  %35 = extractvalue { i64, i64 } %call48, 0, !dbg !3986
  store i64 %35, i64* %34, align 8, !dbg !3986
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 1, !dbg !3986
  %37 = extractvalue { i64, i64 } %call48, 1, !dbg !3986
  store i64 %37, i64* %36, align 8, !dbg !3986
  %38 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3987
  %common49 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !3987
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !3987
  %39 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !3987
  %type51 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !3987
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6, !dbg !3987
  %bf.load52 = load i32, i32* %precision, align 4, !dbg !3987
  %bf.clear53 = and i32 %bf.load52, 1023, !dbg !3987
  %40 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !3988
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 0, !dbg !3988
  %42 = load i64, i64* %41, align 8, !dbg !3988
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %40, i32 0, i32 1, !dbg !3988
  %44 = load i64, i64* %43, align 8, !dbg !3988
  %call54 = call { i64, i64 } @double_int_sext(i64 %42, i64 %44, i32 %bf.clear53), !dbg !3988
  %45 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !3988
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 0, !dbg !3988
  %47 = extractvalue { i64, i64 } %call54, 0, !dbg !3988
  store i64 %47, i64* %46, align 8, !dbg !3988
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 1, !dbg !3988
  %49 = extractvalue { i64, i64 } %call54, 1, !dbg !3988
  store i64 %49, i64* %48, align 8, !dbg !3988
  %50 = bitcast %struct.double_int* %soffset to i8*, !dbg !3988
  %51 = bitcast %struct.double_int* %tmp to i8*, !dbg !3988
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false), !dbg !3988
  %52 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !3989
  %base55 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !3989
  %53 = bitcast %struct.tree_base* %base55 to i64*, !dbg !3989
  %bf.load56 = load i64, i64* %53, align 8, !dbg !3989
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !3989
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !3989
  %cmp59 = icmp ne i32 %bf.cast58, 23, !dbg !3991
  br i1 %cmp59, label %if.then73, label %lor.lhs.false61, !dbg !3992

lor.lhs.false61:                                  ; preds = %if.else
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %soffset, i32 0, i32 0, !dbg !3993
  %54 = load i64, i64* %low, align 8, !dbg !3993
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %soffset, i32 0, i32 1, !dbg !3994
  %55 = load i64, i64* %high, align 8, !dbg !3994
  %56 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !3995
  %int_cst = bitcast %union.tree_node* %56 to %struct.tree_int_cst*, !dbg !3995
  %int_cst62 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3995
  %low63 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst62, i32 0, i32 0, !dbg !3995
  %57 = load i64, i64* %low63, align 8, !dbg !3995
  %58 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !3996
  %int_cst64 = bitcast %union.tree_node* %58 to %struct.tree_int_cst*, !dbg !3996
  %int_cst65 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst64, i32 0, i32 1, !dbg !3996
  %high66 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst65, i32 0, i32 1, !dbg !3996
  %59 = load i64, i64* %high66, align 8, !dbg !3996
  %call67 = call i32 @div_and_round_double(i32 67, i32 0, i64 %54, i64 %55, i64 %57, i64 %59, i64* %lquo, i64* %hquo, i64* %lrem, i64* %hrem), !dbg !3997
  %tobool68 = icmp ne i32 %call67, 0, !dbg !3997
  br i1 %tobool68, label %if.then73, label %lor.lhs.false69, !dbg !3998

lor.lhs.false69:                                  ; preds = %lor.lhs.false61
  %60 = load i64, i64* %lrem, align 8, !dbg !3999
  %tobool70 = icmp ne i64 %60, 0, !dbg !3999
  br i1 %tobool70, label %if.then73, label %lor.lhs.false71, !dbg !4000

lor.lhs.false71:                                  ; preds = %lor.lhs.false69
  %61 = load i64, i64* %hrem, align 8, !dbg !4001
  %tobool72 = icmp ne i64 %61, 0, !dbg !4001
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !4002

if.then73:                                        ; preds = %lor.lhs.false71, %lor.lhs.false69, %lor.lhs.false61, %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4003
  br label %return, !dbg !4003

if.end74:                                         ; preds = %lor.lhs.false71
  %62 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4004
  %63 = load i64, i64* %lquo, align 8, !dbg !4005
  %64 = load i64, i64* %hquo, align 8, !dbg !4006
  %call75 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %62, i64 %63, i64 %64), !dbg !4007
  store %union.tree_node* %call75, %union.tree_node** %idx, align 8, !dbg !4008
  br label %if.end76

if.end76:                                         ; preds = %if.end74, %if.end46
  %65 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4009
  %call77 = call %union.tree_node* @build_int_cst(%union.tree_node* %65, i64 0), !dbg !4010
  store %union.tree_node* %call77, %union.tree_node** %min_idx, align 8, !dbg !4011
  %66 = load %union.tree_node*, %union.tree_node** %array_type, align 8, !dbg !4012
  %type78 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !4012
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type78, i32 0, i32 1, !dbg !4012
  %67 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4012
  store %union.tree_node* %67, %union.tree_node** %domain_type, align 8, !dbg !4013
  %68 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4014
  %tobool79 = icmp ne %union.tree_node* %68, null, !dbg !4014
  br i1 %tobool79, label %if.then80, label %if.end98, !dbg !4016

if.then80:                                        ; preds = %if.end76
  %69 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4017
  store %union.tree_node* %69, %union.tree_node** %idx_type, align 8, !dbg !4019
  %70 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4020
  %type81 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !4020
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 13, !dbg !4020
  %71 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4020
  %tobool82 = icmp ne %union.tree_node* %71, null, !dbg !4020
  br i1 %tobool82, label %if.then83, label %if.else86, !dbg !4022

if.then83:                                        ; preds = %if.then80
  %72 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4023
  %type84 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !4023
  %minval85 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type84, i32 0, i32 13, !dbg !4023
  %73 = load %union.tree_node*, %union.tree_node** %minval85, align 8, !dbg !4023
  store %union.tree_node* %73, %union.tree_node** %min_idx, align 8, !dbg !4024
  br label %if.end88, !dbg !4025

if.else86:                                        ; preds = %if.then80
  %74 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4026
  %75 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4026
  %call87 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %74, %union.tree_node* %75), !dbg !4026
  store %union.tree_node* %call87, %union.tree_node** %min_idx, align 8, !dbg !4027
  br label %if.end88

if.end88:                                         ; preds = %if.else86, %if.then83
  %76 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4028
  %base89 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !4028
  %77 = bitcast %struct.tree_base* %base89 to i64*, !dbg !4028
  %bf.load90 = load i64, i64* %77, align 8, !dbg !4028
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !4028
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !4028
  %cmp93 = icmp ne i32 %bf.cast92, 23, !dbg !4030
  br i1 %cmp93, label %if.then95, label %if.end96, !dbg !4031

if.then95:                                        ; preds = %if.end88
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4032
  br label %return, !dbg !4032

if.end96:                                         ; preds = %if.end88
  %78 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4033
  %79 = load %union.tree_node*, %union.tree_node** %elt_offset, align 8, !dbg !4033
  %call97 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %78, %union.tree_node* %79), !dbg !4033
  store %union.tree_node* %call97, %union.tree_node** %elt_offset, align 8, !dbg !4034
  br label %if.end98, !dbg !4035

if.end98:                                         ; preds = %if.end96, %if.end76
  %80 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4036
  %call99 = call i32 @integer_zerop(%union.tree_node* %80), !dbg !4038
  %tobool100 = icmp ne i32 %call99, 0, !dbg !4038
  br i1 %tobool100, label %if.end103, label %if.then101, !dbg !4039

if.then101:                                       ; preds = %if.end98
  %81 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4040
  %82 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4041
  %call102 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %81, %union.tree_node* %82, i32 0), !dbg !4042
  store %union.tree_node* %call102, %union.tree_node** %idx, align 8, !dbg !4043
  br label %if.end103, !dbg !4044

if.end103:                                        ; preds = %if.then101, %if.end98
  %83 = load %union.tree_node*, %union.tree_node** %elt_offset, align 8, !dbg !4045
  %call104 = call i32 @integer_zerop(%union.tree_node* %83), !dbg !4047
  %tobool105 = icmp ne i32 %call104, 0, !dbg !4047
  br i1 %tobool105, label %if.end108, label %if.then106, !dbg !4048

if.then106:                                       ; preds = %if.end103
  %84 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4049
  %85 = load %union.tree_node*, %union.tree_node** %elt_offset, align 8, !dbg !4050
  %call107 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %84, %union.tree_node* %85, i32 0), !dbg !4051
  store %union.tree_node* %call107, %union.tree_node** %idx, align 8, !dbg !4052
  br label %if.end108, !dbg !4053

if.end108:                                        ; preds = %if.then106, %if.end103
  %86 = load %union.tree_node*, %union.tree_node** %idx_type, align 8, !dbg !4054
  %87 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4054
  %call109 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %86, %union.tree_node* %87), !dbg !4054
  store %union.tree_node* %call109, %union.tree_node** %idx, align 8, !dbg !4055
  %88 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4056
  %tobool110 = icmp ne %union.tree_node* %88, null, !dbg !4056
  br i1 %tobool110, label %land.lhs.true, label %if.end133, !dbg !4058

land.lhs.true:                                    ; preds = %if.end108
  %89 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4059
  %type111 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !4059
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type111, i32 0, i32 14, !dbg !4059
  %90 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !4059
  %tobool112 = icmp ne %union.tree_node* %90, null, !dbg !4059
  br i1 %tobool112, label %land.lhs.true113, label %if.end133, !dbg !4060

land.lhs.true113:                                 ; preds = %land.lhs.true
  %91 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4061
  %type114 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !4061
  %maxval115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 14, !dbg !4061
  %92 = load %union.tree_node*, %union.tree_node** %maxval115, align 8, !dbg !4061
  %base116 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !4061
  %93 = bitcast %struct.tree_base* %base116 to i64*, !dbg !4061
  %bf.load117 = load i64, i64* %93, align 8, !dbg !4061
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !4061
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !4061
  %cmp120 = icmp eq i32 %bf.cast119, 23, !dbg !4062
  br i1 %cmp120, label %if.then122, label %if.end133, !dbg !4063

if.then122:                                       ; preds = %land.lhs.true113
  call void @llvm.dbg.declare(metadata %union.tree_node** %up_bound, metadata !4064, metadata !DIExpression()), !dbg !4066
  %94 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4067
  %type123 = bitcast %union.tree_node* %94 to %struct.tree_type*, !dbg !4067
  %maxval124 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 14, !dbg !4067
  %95 = load %union.tree_node*, %union.tree_node** %maxval124, align 8, !dbg !4067
  store %union.tree_node* %95, %union.tree_node** %up_bound, align 8, !dbg !4066
  %96 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !4068
  %97 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4070
  %call125 = call i32 @tree_int_cst_lt(%union.tree_node* %96, %union.tree_node* %97), !dbg !4071
  %tobool126 = icmp ne i32 %call125, 0, !dbg !4071
  br i1 %tobool126, label %land.lhs.true127, label %if.end132, !dbg !4072

land.lhs.true127:                                 ; preds = %if.then122
  %98 = load %union.tree_node*, %union.tree_node** %up_bound, align 8, !dbg !4073
  %call128 = call i32 @compare_tree_int(%union.tree_node* %98, i64 1), !dbg !4074
  %cmp129 = icmp sgt i32 %call128, 0, !dbg !4075
  br i1 %cmp129, label %if.then131, label %if.end132, !dbg !4076

if.then131:                                       ; preds = %land.lhs.true127
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4077
  br label %return, !dbg !4077

if.end132:                                        ; preds = %land.lhs.true127, %if.then122
  br label %if.end133, !dbg !4078

if.end133:                                        ; preds = %if.end132, %land.lhs.true113, %land.lhs.true, %if.end108
  %99 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4079
  %tobool134 = icmp ne %union.tree_node* %99, null, !dbg !4079
  br i1 %tobool134, label %land.lhs.true135, label %if.else157, !dbg !4081

land.lhs.true135:                                 ; preds = %if.end133
  %100 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4082
  %type136 = bitcast %union.tree_node* %100 to %struct.tree_type*, !dbg !4082
  %minval137 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type136, i32 0, i32 13, !dbg !4082
  %101 = load %union.tree_node*, %union.tree_node** %minval137, align 8, !dbg !4082
  %tobool138 = icmp ne %union.tree_node* %101, null, !dbg !4082
  br i1 %tobool138, label %if.then139, label %if.else157, !dbg !4083

if.then139:                                       ; preds = %land.lhs.true135
  %102 = load i8, i8* %allow_negative_idx.addr, align 1, !dbg !4084
  %tobool140 = icmp ne i8 %102, 0, !dbg !4084
  br i1 %tobool140, label %if.end156, label %land.lhs.true141, !dbg !4087

land.lhs.true141:                                 ; preds = %if.then139
  %103 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4088
  %type142 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !4088
  %minval143 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 13, !dbg !4088
  %104 = load %union.tree_node*, %union.tree_node** %minval143, align 8, !dbg !4088
  %base144 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !4088
  %105 = bitcast %struct.tree_base* %base144 to i64*, !dbg !4088
  %bf.load145 = load i64, i64* %105, align 8, !dbg !4088
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !4088
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !4088
  %cmp148 = icmp eq i32 %bf.cast147, 23, !dbg !4089
  br i1 %cmp148, label %land.lhs.true150, label %if.end156, !dbg !4090

land.lhs.true150:                                 ; preds = %land.lhs.true141
  %106 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4091
  %107 = load %union.tree_node*, %union.tree_node** %domain_type, align 8, !dbg !4092
  %type151 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !4092
  %minval152 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type151, i32 0, i32 13, !dbg !4092
  %108 = load %union.tree_node*, %union.tree_node** %minval152, align 8, !dbg !4092
  %call153 = call i32 @tree_int_cst_lt(%union.tree_node* %106, %union.tree_node* %108), !dbg !4093
  %tobool154 = icmp ne i32 %call153, 0, !dbg !4093
  br i1 %tobool154, label %if.then155, label %if.end156, !dbg !4094

if.then155:                                       ; preds = %land.lhs.true150
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4095
  br label %return, !dbg !4095

if.end156:                                        ; preds = %land.lhs.true150, %land.lhs.true141, %if.then139
  br label %if.end165, !dbg !4096

if.else157:                                       ; preds = %land.lhs.true135, %if.end133
  %109 = load i8, i8* %allow_negative_idx.addr, align 1, !dbg !4097
  %tobool158 = icmp ne i8 %109, 0, !dbg !4097
  br i1 %tobool158, label %if.end164, label %land.lhs.true159, !dbg !4099

land.lhs.true159:                                 ; preds = %if.else157
  %110 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4100
  %call160 = call i32 @compare_tree_int(%union.tree_node* %110, i64 0), !dbg !4101
  %cmp161 = icmp slt i32 %call160, 0, !dbg !4102
  br i1 %cmp161, label %if.then163, label %if.end164, !dbg !4103

if.then163:                                       ; preds = %land.lhs.true159
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4104
  br label %return, !dbg !4104

if.end164:                                        ; preds = %land.lhs.true159, %if.else157
  br label %if.end165

if.end165:                                        ; preds = %if.end164, %if.end156
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4105, metadata !DIExpression()), !dbg !4107
  %111 = load %union.tree_node*, %union.tree_node** %elt_type, align 8, !dbg !4108
  %112 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4108
  %113 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !4108
  %call166 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %111, %union.tree_node* %112, %union.tree_node* %113, %union.tree_node* null, %union.tree_node* null), !dbg !4108
  store %union.tree_node* %call166, %union.tree_node** %t, align 8, !dbg !4107
  %114 = load i32, i32* %loc.addr, align 4, !dbg !4109
  %115 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4109
  %exp167 = bitcast %union.tree_node* %115 to %struct.tree_exp*, !dbg !4109
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp167, i32 0, i32 1, !dbg !4109
  store i32 %114, i32* %locus, align 8, !dbg !4109
  %116 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4110
  store %union.tree_node* %116, %union.tree_node** %retval, align 8, !dbg !4111
  br label %return, !dbg !4111

return:                                           ; preds = %if.end165, %if.then163, %if.then155, %if.then131, %if.then95, %if.then73, %if.then33, %if.then28, %if.then23, %if.then12
  %117 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4112
  ret %union.tree_node* %117, !dbg !4112
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @maybe_fold_offset_to_address(i32 %loc, %union.tree_node* %addr, %union.tree_node* %offset, %union.tree_node* %orig_type) #0 !dbg !4113 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %addr.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %orig_type.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %orig = alloca %union.tree_node*, align 8
  %ptr_type = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !4114, metadata !DIExpression()), !dbg !4115
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !4116, metadata !DIExpression()), !dbg !4117
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !4118, metadata !DIExpression()), !dbg !4119
  store %union.tree_node* %orig_type, %union.tree_node** %orig_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4122, metadata !DIExpression()), !dbg !4123
  %0 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !4124
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4124
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4124
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4124
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4124
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4124
  %bf.load = load i64, i64* %2, align 8, !dbg !4124
  %bf.clear = and i64 %bf.load, 65535, !dbg !4124
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4124
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !4124
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4124

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !4124
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !4124
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !4124
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4124
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4124
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4124
  %bf.load4 = load i64, i64* %5, align 8, !dbg !4124
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !4124
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4124
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !4124
  br i1 %cmp7, label %land.lhs.true, label %cond.true, !dbg !4124

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !4124
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4124
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4124
  %bf.load9 = load i64, i64* %7, align 8, !dbg !4124
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !4124
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !4124
  %cmp12 = icmp eq i32 %bf.cast11, 10, !dbg !4124
  br i1 %cmp12, label %cond.false, label %lor.lhs.false13, !dbg !4124

lor.lhs.false13:                                  ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !4124
  %base14 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4124
  %9 = bitcast %struct.tree_base* %base14 to i64*, !dbg !4124
  %bf.load15 = load i64, i64* %9, align 8, !dbg !4124
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !4124
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !4124
  %cmp18 = icmp eq i32 %bf.cast17, 12, !dbg !4124
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !4124

cond.true:                                        ; preds = %lor.lhs.false13, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 2113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4124
  br label %cond.end, !dbg !4124

cond.false:                                       ; preds = %lor.lhs.false13, %land.lhs.true
  br label %cond.end, !dbg !4124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4124
  %10 = load i32, i32* %loc.addr, align 4, !dbg !4125
  %11 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !4126
  %12 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !4127
  %13 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !4128
  %common19 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !4128
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !4128
  %14 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !4128
  %call = call %union.tree_node* @maybe_fold_offset_to_reference(i32 %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %14), !dbg !4129
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !4130
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4131
  %cmp21 = icmp ne %union.tree_node* %15, null, !dbg !4133
  br i1 %cmp21, label %if.then, label %if.end99, !dbg !4134

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig, metadata !4135, metadata !DIExpression()), !dbg !4137
  %16 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !4138
  store %union.tree_node* %16, %union.tree_node** %orig, align 8, !dbg !4137
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr_type, metadata !4139, metadata !DIExpression()), !dbg !4140
  %17 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4141
  %call22 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %17), !dbg !4141
  store %union.tree_node* %call22, %union.tree_node** %orig, align 8, !dbg !4141
  %18 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4142
  %base23 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4142
  %19 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4142
  %bf.load24 = load i64, i64* %19, align 8, !dbg !4142
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !4142
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4142
  %cmp27 = icmp eq i32 %bf.cast26, 121, !dbg !4144
  br i1 %cmp27, label %if.then28, label %if.end, !dbg !4145

if.then28:                                        ; preds = %if.then
  %20 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4146
  %exp = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !4146
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4146
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4146
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4146
  store %union.tree_node* %21, %union.tree_node** %orig, align 8, !dbg !4147
  br label %if.end, !dbg !4148

if.end:                                           ; preds = %if.then28, %if.then
  %22 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4149
  %base29 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4149
  %23 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4149
  %bf.load30 = load i64, i64* %23, align 8, !dbg !4149
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !4149
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !4149
  %cmp33 = icmp eq i32 %bf.cast32, 45, !dbg !4151
  br i1 %cmp33, label %land.lhs.true51, label %lor.lhs.false34, !dbg !4152

lor.lhs.false34:                                  ; preds = %if.end
  %24 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4153
  %base35 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4153
  %25 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4153
  %bf.load36 = load i64, i64* %25, align 8, !dbg !4153
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !4153
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !4153
  %cmp39 = icmp eq i32 %bf.cast38, 41, !dbg !4154
  br i1 %cmp39, label %land.lhs.true40, label %if.end90, !dbg !4155

land.lhs.true40:                                  ; preds = %lor.lhs.false34
  %26 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4156
  %exp41 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !4156
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !4156
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 1, !dbg !4156
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !4156
  %common44 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !4156
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !4156
  %28 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4156
  %base46 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4156
  %29 = bitcast %struct.tree_base* %base46 to i64*, !dbg !4156
  %bf.load47 = load i64, i64* %29, align 8, !dbg !4156
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !4156
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !4156
  %cmp50 = icmp eq i32 %bf.cast49, 15, !dbg !4157
  br i1 %cmp50, label %land.lhs.true51, label %if.end90, !dbg !4158

land.lhs.true51:                                  ; preds = %land.lhs.true40, %if.end
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4159
  %base52 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4159
  %31 = bitcast %struct.tree_base* %base52 to i64*, !dbg !4159
  %bf.load53 = load i64, i64* %31, align 8, !dbg !4159
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !4159
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !4159
  %cmp56 = icmp eq i32 %bf.cast55, 45, !dbg !4160
  br i1 %cmp56, label %land.lhs.true63, label %lor.lhs.false57, !dbg !4161

lor.lhs.false57:                                  ; preds = %land.lhs.true51
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4162
  %base58 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4162
  %33 = bitcast %struct.tree_base* %base58 to i64*, !dbg !4162
  %bf.load59 = load i64, i64* %33, align 8, !dbg !4162
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !4162
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !4162
  %cmp62 = icmp eq i32 %bf.cast61, 41, !dbg !4163
  br i1 %cmp62, label %land.lhs.true63, label %if.end90, !dbg !4164

land.lhs.true63:                                  ; preds = %lor.lhs.false57, %land.lhs.true51
  %34 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4165
  %base64 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4165
  %35 = bitcast %struct.tree_base* %base64 to i64*, !dbg !4165
  %bf.load65 = load i64, i64* %35, align 8, !dbg !4165
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !4165
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !4165
  %cmp68 = icmp eq i32 %bf.cast67, 45, !dbg !4166
  br i1 %cmp68, label %cond.true69, label %cond.false73, !dbg !4165

cond.true69:                                      ; preds = %land.lhs.true63
  %36 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4167
  %exp70 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !4167
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !4167
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 0, !dbg !4167
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !4167
  br label %cond.end74, !dbg !4165

cond.false73:                                     ; preds = %land.lhs.true63
  %38 = load %union.tree_node*, %union.tree_node** %orig, align 8, !dbg !4168
  br label %cond.end74, !dbg !4165

cond.end74:                                       ; preds = %cond.false73, %cond.true69
  %cond75 = phi %union.tree_node* [ %37, %cond.true69 ], [ %38, %cond.false73 ], !dbg !4165
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4169
  %base76 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4169
  %40 = bitcast %struct.tree_base* %base76 to i64*, !dbg !4169
  %bf.load77 = load i64, i64* %40, align 8, !dbg !4169
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !4169
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !4169
  %cmp80 = icmp eq i32 %bf.cast79, 45, !dbg !4170
  br i1 %cmp80, label %cond.true81, label %cond.false85, !dbg !4169

cond.true81:                                      ; preds = %cond.end74
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4171
  %exp82 = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !4171
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !4171
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 0, !dbg !4171
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !4171
  br label %cond.end86, !dbg !4169

cond.false85:                                     ; preds = %cond.end74
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4172
  br label %cond.end86, !dbg !4169

cond.end86:                                       ; preds = %cond.false85, %cond.true81
  %cond87 = phi %union.tree_node* [ %42, %cond.true81 ], [ %43, %cond.false85 ], !dbg !4169
  %call88 = call i32 @operand_equal_p(%union.tree_node* %cond75, %union.tree_node* %cond87, i32 0), !dbg !4173
  %tobool = icmp ne i32 %call88, 0, !dbg !4173
  br i1 %tobool, label %if.end90, label %if.then89, !dbg !4174

if.then89:                                        ; preds = %cond.end86
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4175
  br label %return, !dbg !4175

if.end90:                                         ; preds = %cond.end86, %lor.lhs.false57, %land.lhs.true40, %lor.lhs.false34
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4176
  %common91 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !4176
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !4176
  %45 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !4176
  %call93 = call %union.tree_node* @build_pointer_type(%union.tree_node* %45), !dbg !4177
  store %union.tree_node* %call93, %union.tree_node** %ptr_type, align 8, !dbg !4178
  %46 = load %union.tree_node*, %union.tree_node** %orig_type.addr, align 8, !dbg !4179
  %47 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !4181
  %call94 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %46, %union.tree_node* %47), !dbg !4182
  %tobool95 = icmp ne i8 %call94, 0, !dbg !4182
  br i1 %tobool95, label %if.end97, label %if.then96, !dbg !4183

if.then96:                                        ; preds = %if.end90
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4184
  br label %return, !dbg !4184

if.end97:                                         ; preds = %if.end90
  %48 = load i32, i32* %loc.addr, align 4, !dbg !4185
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4186
  %50 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !4187
  %call98 = call %union.tree_node* @build_fold_addr_expr_with_type_loc(i32 %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !4188
  store %union.tree_node* %call98, %union.tree_node** %retval, align 8, !dbg !4189
  br label %return, !dbg !4189

if.end99:                                         ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4190
  br label %return, !dbg !4190

return:                                           ; preds = %if.end99, %if.end97, %if.then96, %if.then89
  %51 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4191
  ret %union.tree_node* %51, !dbg !4191
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_with_type_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @maybe_fold_stmt_addition(i32 %loc, %union.tree_node* %res_type, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !4192 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %res_type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %ptd_type = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %offset_def = alloca %union.gimple_statement_d*, align 8
  %array_obj = alloca %union.tree_node*, align 8
  %array_idx = alloca %union.tree_node*, align 8
  %elt_type = alloca %union.tree_node*, align 8
  %elt_size = alloca %union.tree_node*, align 8
  %min_idx = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  store %union.tree_node* %res_type, %union.tree_node** %res_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %res_type.addr, metadata !4195, metadata !DIExpression()), !dbg !4196
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !4197, metadata !DIExpression()), !dbg !4198
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !4199, metadata !DIExpression()), !dbg !4200
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptd_type, metadata !4201, metadata !DIExpression()), !dbg !4202
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4203, metadata !DIExpression()), !dbg !4204
  %0 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4205
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4205
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4205
  %bf.load = load i64, i64* %1, align 8, !dbg !4205
  %bf.clear = and i64 %bf.load, 65535, !dbg !4205
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4205
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !4207
  br i1 %cmp, label %if.then, label %if.end, !dbg !4208

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4209
  br label %return, !dbg !4209

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4210
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !4210
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4210
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4210
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4210
  store %union.tree_node* %3, %union.tree_node** %op0.addr, align 8, !dbg !4211
  %4 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4212
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4212
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4212
  %bf.load2 = load i64, i64* %5, align 8, !dbg !4212
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4212
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4212
  %cmp5 = icmp ne i32 %bf.cast4, 23, !dbg !4214
  br i1 %cmp5, label %if.then6, label %if.end88, !dbg !4215

if.then6:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4216
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4216
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4216
  %bf.load8 = load i64, i64* %7, align 8, !dbg !4216
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4216
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4216
  %cmp11 = icmp eq i32 %bf.cast10, 45, !dbg !4219
  br i1 %cmp11, label %land.lhs.true, label %if.end87, !dbg !4220

land.lhs.true:                                    ; preds = %if.then6
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4221
  %exp12 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4221
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !4221
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !4221
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !4221
  %call = call i32 @integer_zerop(%union.tree_node* %9), !dbg !4222
  %tobool = icmp ne i32 %call, 0, !dbg !4222
  br i1 %tobool, label %land.lhs.true15, label %if.end87, !dbg !4223

land.lhs.true15:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4224
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4224
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !4224
  %bf.load17 = load i64, i64* %11, align 8, !dbg !4224
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !4224
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !4224
  %cmp20 = icmp eq i32 %bf.cast19, 141, !dbg !4225
  br i1 %cmp20, label %land.lhs.true21, label %if.end87, !dbg !4226

land.lhs.true21:                                  ; preds = %land.lhs.true15
  %12 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4227
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !4227
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4227
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4227
  %type22 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !4227
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 3, !dbg !4227
  %14 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4227
  %call23 = call i32 @host_integerp(%union.tree_node* %14, i32 1), !dbg !4228
  %tobool24 = icmp ne i32 %call23, 0, !dbg !4228
  br i1 %tobool24, label %if.then25, label %if.end87, !dbg !4229

if.then25:                                        ; preds = %land.lhs.true21
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %offset_def, metadata !4230, metadata !DIExpression()), !dbg !4232
  %15 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4233
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !4233
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4233
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4233
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %offset_def, align 8, !dbg !4232
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4234
  %call26 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %17), !dbg !4236
  %tobool27 = icmp ne i8 %call26, 0, !dbg !4236
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !4237

if.then28:                                        ; preds = %if.then25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4238
  br label %return, !dbg !4238

if.end29:                                         ; preds = %if.then25
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4239
  %call30 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %18), !dbg !4241
  %cmp31 = icmp eq i32 %call30, 65, !dbg !4242
  br i1 %cmp31, label %land.lhs.true32, label %if.else, !dbg !4243

land.lhs.true32:                                  ; preds = %if.end29
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4244
  %call33 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %19), !dbg !4244
  %base34 = bitcast %union.tree_node* %call33 to %struct.tree_base*, !dbg !4244
  %20 = bitcast %struct.tree_base* %base34 to i64*, !dbg !4244
  %bf.load35 = load i64, i64* %20, align 8, !dbg !4244
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !4244
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !4244
  %cmp38 = icmp eq i32 %bf.cast37, 23, !dbg !4245
  br i1 %cmp38, label %land.lhs.true39, label %if.else, !dbg !4246

land.lhs.true39:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4247
  %call40 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %21), !dbg !4248
  %22 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4249
  %common41 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !4249
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !4249
  %23 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !4249
  %type43 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !4249
  %size_unit44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 3, !dbg !4249
  %24 = load %union.tree_node*, %union.tree_node** %size_unit44, align 8, !dbg !4249
  %call45 = call i32 @tree_int_cst_equal(%union.tree_node* %call40, %union.tree_node* %24), !dbg !4250
  %tobool46 = icmp ne i32 %call45, 0, !dbg !4250
  br i1 %tobool46, label %if.then47, label %if.else, !dbg !4251

if.then47:                                        ; preds = %land.lhs.true39
  %25 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4252
  %common48 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4252
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !4252
  %26 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !4252
  %27 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4252
  %exp50 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !4252
  %operands51 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp50, i32 0, i32 3, !dbg !4252
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands51, i64 0, i64 0, !dbg !4252
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !4252
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4252
  %call53 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %29), !dbg !4252
  %30 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4252
  %exp54 = bitcast %union.tree_node* %30 to %struct.tree_exp*, !dbg !4252
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 3, !dbg !4252
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i64 0, i64 2, !dbg !4252
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8, !dbg !4252
  %32 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4252
  %exp57 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !4252
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !4252
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 3, !dbg !4252
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !4252
  %call60 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %26, %union.tree_node* %28, %union.tree_node* %call53, %union.tree_node* %31, %union.tree_node* %33), !dbg !4252
  %call61 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %call60), !dbg !4252
  store %union.tree_node* %call61, %union.tree_node** %retval, align 8, !dbg !4253
  br label %return, !dbg !4253

if.else:                                          ; preds = %land.lhs.true39, %land.lhs.true32, %if.end29
  %34 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4254
  %common62 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !4254
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !4254
  %35 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !4254
  %type64 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !4254
  %size_unit65 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 3, !dbg !4254
  %36 = load %union.tree_node*, %union.tree_node** %size_unit65, align 8, !dbg !4254
  %call66 = call i32 @integer_onep(%union.tree_node* %36), !dbg !4256
  %tobool67 = icmp ne i32 %call66, 0, !dbg !4256
  br i1 %tobool67, label %land.lhs.true68, label %if.end85, !dbg !4257

land.lhs.true68:                                  ; preds = %if.else
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %offset_def, align 8, !dbg !4258
  %call69 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %37), !dbg !4259
  %cmp70 = icmp ne i32 %call69, 65, !dbg !4260
  br i1 %cmp70, label %if.then71, label %if.end85, !dbg !4261

if.then71:                                        ; preds = %land.lhs.true68
  %38 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4262
  %common72 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !4262
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !4262
  %39 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !4262
  %40 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4262
  %exp74 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !4262
  %operands75 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp74, i32 0, i32 3, !dbg !4262
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands75, i64 0, i64 0, !dbg !4262
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !4262
  %42 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4262
  %43 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4262
  %exp77 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !4262
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !4262
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 2, !dbg !4262
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !4262
  %45 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4262
  %exp80 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !4262
  %operands81 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp80, i32 0, i32 3, !dbg !4262
  %arrayidx82 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands81, i64 0, i64 3, !dbg !4262
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !4262
  %call83 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %39, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %44, %union.tree_node* %46), !dbg !4262
  %call84 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %call83), !dbg !4262
  store %union.tree_node* %call84, %union.tree_node** %retval, align 8, !dbg !4263
  br label %return, !dbg !4263

if.end85:                                         ; preds = %land.lhs.true68, %if.else
  br label %if.end86

if.end86:                                         ; preds = %if.end85
  br label %if.end87, !dbg !4264

if.end87:                                         ; preds = %if.end86, %land.lhs.true21, %land.lhs.true15, %land.lhs.true, %if.then6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4265
  br label %return, !dbg !4265

if.end88:                                         ; preds = %if.end
  br label %while.cond, !dbg !4266

while.cond:                                       ; preds = %if.end142, %if.end88
  %47 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4267
  %base89 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !4267
  %48 = bitcast %struct.tree_base* %base89 to i64*, !dbg !4267
  %bf.load90 = load i64, i64* %48, align 8, !dbg !4267
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !4267
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !4267
  %cmp93 = icmp eq i32 %bf.cast92, 45, !dbg !4268
  br i1 %cmp93, label %while.body, label %while.end, !dbg !4266

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_obj, metadata !4269, metadata !DIExpression()), !dbg !4271
  %49 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4272
  %exp94 = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !4272
  %operands95 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp94, i32 0, i32 3, !dbg !4272
  %arrayidx96 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands95, i64 0, i64 0, !dbg !4272
  %50 = load %union.tree_node*, %union.tree_node** %arrayidx96, align 8, !dbg !4272
  store %union.tree_node* %50, %union.tree_node** %array_obj, align 8, !dbg !4271
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_idx, metadata !4273, metadata !DIExpression()), !dbg !4274
  %51 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4275
  %exp97 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !4275
  %operands98 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp97, i32 0, i32 3, !dbg !4275
  %arrayidx99 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands98, i64 0, i64 1, !dbg !4275
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx99, align 8, !dbg !4275
  store %union.tree_node* %52, %union.tree_node** %array_idx, align 8, !dbg !4274
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt_type, metadata !4276, metadata !DIExpression()), !dbg !4277
  %53 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4278
  %common100 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !4278
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !4278
  %54 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !4278
  store %union.tree_node* %54, %union.tree_node** %elt_type, align 8, !dbg !4277
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt_size, metadata !4279, metadata !DIExpression()), !dbg !4280
  %55 = load %union.tree_node*, %union.tree_node** %elt_type, align 8, !dbg !4281
  %type102 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !4281
  %size_unit103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 3, !dbg !4281
  %56 = load %union.tree_node*, %union.tree_node** %size_unit103, align 8, !dbg !4281
  store %union.tree_node* %56, %union.tree_node** %elt_size, align 8, !dbg !4280
  call void @llvm.dbg.declare(metadata %union.tree_node** %min_idx, metadata !4282, metadata !DIExpression()), !dbg !4283
  %57 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4284
  %base104 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4284
  %58 = bitcast %struct.tree_base* %base104 to i64*, !dbg !4284
  %bf.load105 = load i64, i64* %58, align 8, !dbg !4284
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !4284
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !4284
  %cmp108 = icmp ne i32 %bf.cast107, 23, !dbg !4286
  br i1 %cmp108, label %if.then109, label %if.end110, !dbg !4287

if.then109:                                       ; preds = %while.body
  br label %while.end, !dbg !4288

if.end110:                                        ; preds = %while.body
  %59 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !4289
  %base111 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !4289
  %60 = bitcast %struct.tree_base* %base111 to i64*, !dbg !4289
  %bf.load112 = load i64, i64* %60, align 8, !dbg !4289
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !4289
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !4289
  %cmp115 = icmp ne i32 %bf.cast114, 23, !dbg !4291
  br i1 %cmp115, label %if.then116, label %if.end117, !dbg !4292

if.then116:                                       ; preds = %if.end110
  br label %while.end, !dbg !4293

if.end117:                                        ; preds = %if.end110
  %61 = load %union.tree_node*, %union.tree_node** %array_obj, align 8, !dbg !4294
  %common118 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !4294
  %type119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 2, !dbg !4294
  %62 = load %union.tree_node*, %union.tree_node** %type119, align 8, !dbg !4294
  %type120 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !4294
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type120, i32 0, i32 1, !dbg !4294
  %63 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4294
  store %union.tree_node* %63, %union.tree_node** %min_idx, align 8, !dbg !4295
  %64 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4296
  %tobool121 = icmp ne %union.tree_node* %64, null, !dbg !4296
  br i1 %tobool121, label %if.then122, label %if.end142, !dbg !4298

if.then122:                                       ; preds = %if.end117
  %65 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4299
  %type123 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !4299
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 13, !dbg !4299
  %66 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4299
  store %union.tree_node* %66, %union.tree_node** %min_idx, align 8, !dbg !4301
  %67 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4302
  %tobool124 = icmp ne %union.tree_node* %67, null, !dbg !4302
  br i1 %tobool124, label %if.then125, label %if.end141, !dbg !4304

if.then125:                                       ; preds = %if.then122
  %68 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4305
  %base126 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4305
  %69 = bitcast %struct.tree_base* %base126 to i64*, !dbg !4305
  %bf.load127 = load i64, i64* %69, align 8, !dbg !4305
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !4305
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !4305
  %cmp130 = icmp ne i32 %bf.cast129, 23, !dbg !4308
  br i1 %cmp130, label %if.then131, label %if.end132, !dbg !4309

if.then131:                                       ; preds = %if.then125
  br label %while.end, !dbg !4310

if.end132:                                        ; preds = %if.then125
  %70 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4311
  %common133 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !4311
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !4311
  %71 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !4311
  %72 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4311
  %call135 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %71, %union.tree_node* %72), !dbg !4311
  store %union.tree_node* %call135, %union.tree_node** %array_idx, align 8, !dbg !4312
  %73 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4313
  %call136 = call i32 @integer_zerop(%union.tree_node* %73), !dbg !4315
  %tobool137 = icmp ne i32 %call136, 0, !dbg !4315
  br i1 %tobool137, label %if.end140, label %if.then138, !dbg !4316

if.then138:                                       ; preds = %if.end132
  %74 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4317
  %75 = load %union.tree_node*, %union.tree_node** %min_idx, align 8, !dbg !4318
  %call139 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %74, %union.tree_node* %75, i32 0), !dbg !4319
  store %union.tree_node* %call139, %union.tree_node** %array_idx, align 8, !dbg !4320
  br label %if.end140, !dbg !4321

if.end140:                                        ; preds = %if.then138, %if.end132
  br label %if.end141, !dbg !4322

if.end141:                                        ; preds = %if.end140, %if.then122
  br label %if.end142, !dbg !4323

if.end142:                                        ; preds = %if.end141, %if.end117
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4324
  %77 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4324
  %call143 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %76, %union.tree_node* %77), !dbg !4324
  store %union.tree_node* %call143, %union.tree_node** %array_idx, align 8, !dbg !4325
  %78 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4326
  %79 = load %union.tree_node*, %union.tree_node** %elt_size, align 8, !dbg !4327
  %call144 = call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %78, %union.tree_node* %79, i32 0), !dbg !4328
  store %union.tree_node* %call144, %union.tree_node** %array_idx, align 8, !dbg !4329
  %80 = load %union.tree_node*, %union.tree_node** %array_idx, align 8, !dbg !4330
  %81 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4331
  %call145 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %80, %union.tree_node* %81, i32 0), !dbg !4332
  store %union.tree_node* %call145, %union.tree_node** %op1.addr, align 8, !dbg !4333
  %82 = load %union.tree_node*, %union.tree_node** %array_obj, align 8, !dbg !4334
  store %union.tree_node* %82, %union.tree_node** %op0.addr, align 8, !dbg !4335
  br label %while.cond, !dbg !4266, !llvm.loop !4336

while.end:                                        ; preds = %if.then131, %if.then116, %if.then109, %while.cond
  %83 = load %union.tree_node*, %union.tree_node** %res_type.addr, align 8, !dbg !4338
  %common146 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !4338
  %type147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 2, !dbg !4338
  %84 = load %union.tree_node*, %union.tree_node** %type147, align 8, !dbg !4338
  store %union.tree_node* %84, %union.tree_node** %ptd_type, align 8, !dbg !4339
  %85 = load %union.tree_node*, %union.tree_node** %ptd_type, align 8, !dbg !4340
  %base148 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !4340
  %86 = bitcast %struct.tree_base* %base148 to i64*, !dbg !4340
  %bf.load149 = load i64, i64* %86, align 8, !dbg !4340
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !4340
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !4340
  %cmp152 = icmp eq i32 %bf.cast151, 19, !dbg !4340
  br i1 %cmp152, label %land.lhs.true153, label %if.end166, !dbg !4342

land.lhs.true153:                                 ; preds = %while.end
  %87 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4343
  %common154 = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !4343
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !4343
  %88 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !4343
  %base156 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !4343
  %89 = bitcast %struct.tree_base* %base156 to i64*, !dbg !4343
  %bf.load157 = load i64, i64* %89, align 8, !dbg !4343
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !4343
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !4343
  %cmp160 = icmp eq i32 %bf.cast159, 15, !dbg !4344
  br i1 %cmp160, label %if.then161, label %if.end166, !dbg !4345

if.then161:                                       ; preds = %land.lhs.true153
  %90 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4346
  %common162 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !4346
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 2, !dbg !4346
  %91 = load %union.tree_node*, %union.tree_node** %type163, align 8, !dbg !4346
  %common164 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !4346
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2, !dbg !4346
  %92 = load %union.tree_node*, %union.tree_node** %type165, align 8, !dbg !4346
  store %union.tree_node* %92, %union.tree_node** %ptd_type, align 8, !dbg !4347
  br label %if.end166, !dbg !4348

if.end166:                                        ; preds = %if.then161, %land.lhs.true153, %while.end
  %93 = load i32, i32* %loc.addr, align 4, !dbg !4349
  %94 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4350
  %95 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4351
  %96 = load %union.tree_node*, %union.tree_node** %ptd_type, align 8, !dbg !4352
  %call167 = call %union.tree_node* @maybe_fold_offset_to_array_ref(i32 %93, %union.tree_node* %94, %union.tree_node* %95, %union.tree_node* %96, i8 zeroext 1), !dbg !4353
  store %union.tree_node* %call167, %union.tree_node** %t, align 8, !dbg !4354
  %97 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4355
  %tobool168 = icmp ne %union.tree_node* %97, null, !dbg !4355
  br i1 %tobool168, label %if.end173, label %if.then169, !dbg !4357

if.then169:                                       ; preds = %if.end166
  %98 = load i32, i32* %loc.addr, align 4, !dbg !4358
  %99 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4359
  %common170 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !4359
  %type171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common170, i32 0, i32 2, !dbg !4359
  %100 = load %union.tree_node*, %union.tree_node** %type171, align 8, !dbg !4359
  %101 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !4360
  %102 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !4361
  %103 = load %union.tree_node*, %union.tree_node** %ptd_type, align 8, !dbg !4362
  %call172 = call %union.tree_node* @maybe_fold_offset_to_component_ref(i32 %98, %union.tree_node* %100, %union.tree_node* %101, %union.tree_node* %102, %union.tree_node* %103), !dbg !4363
  store %union.tree_node* %call172, %union.tree_node** %t, align 8, !dbg !4364
  br label %if.end173, !dbg !4365

if.end173:                                        ; preds = %if.then169, %if.end166
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4366
  %tobool174 = icmp ne %union.tree_node* %104, null, !dbg !4366
  br i1 %tobool174, label %if.then175, label %if.end178, !dbg !4368

if.then175:                                       ; preds = %if.end173
  %105 = load %union.tree_node*, %union.tree_node** %res_type.addr, align 8, !dbg !4369
  %106 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4369
  %call176 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %105, %union.tree_node* %106), !dbg !4369
  store %union.tree_node* %call176, %union.tree_node** %t, align 8, !dbg !4371
  %107 = load i32, i32* %loc.addr, align 4, !dbg !4372
  %108 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4372
  %exp177 = bitcast %union.tree_node* %108 to %struct.tree_exp*, !dbg !4372
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp177, i32 0, i32 1, !dbg !4372
  store i32 %107, i32* %locus, align 8, !dbg !4372
  br label %if.end178, !dbg !4373

if.end178:                                        ; preds = %if.then175, %if.end173
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4374
  store %union.tree_node* %109, %union.tree_node** %retval, align 8, !dbg !4375
  br label %return, !dbg !4375

return:                                           ; preds = %if.end178, %if.end87, %if.then71, %if.then47, %if.then28, %if.then
  %110 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4376
  ret %union.tree_node* %110, !dbg !4376
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !4377 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4381, metadata !DIExpression()), !dbg !4382
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4383
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4384
  %cmp = icmp eq i32 %call, 6, !dbg !4385
  %conv = zext i1 %cmp to i32, !dbg !4385
  %conv1 = trunc i32 %conv to i8, !dbg !4384
  ret i8 %conv1, !dbg !4386
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !4387 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4390, metadata !DIExpression()), !dbg !4391
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4392, metadata !DIExpression()), !dbg !4393
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4394
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !4395
  store i32 %call, i32* %code, align 4, !dbg !4396
  %1 = load i32, i32* %code, align 4, !dbg !4397
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !4399
  %cmp = icmp eq i32 %call1, 3, !dbg !4400
  br i1 %cmp, label %if.then, label %if.end, !dbg !4401

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4402
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !4402
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !4402
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4402
  %bf.load = load i64, i64* %3, align 8, !dbg !4402
  %bf.clear = and i64 %bf.load, 65535, !dbg !4402
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4402
  store i32 %bf.cast, i32* %code, align 4, !dbg !4403
  br label %if.end, !dbg !4404

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !4405
  ret i32 %4, !dbg !4406
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !4407 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4410, metadata !DIExpression()), !dbg !4411
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4412
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !4414
  %cmp = icmp uge i32 %call, 3, !dbg !4415
  br i1 %cmp, label %if.then, label %if.else, !dbg !4416

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4417
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !4418
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !4419
  br label %return, !dbg !4419

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4420
  br label %return, !dbg !4420

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4421
  ret %union.tree_node* %2, !dbg !4421
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !4422 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4423, metadata !DIExpression()), !dbg !4424
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4425
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4426
  ret %union.tree_node* %call, !dbg !4427
}

declare dso_local i32 @integer_onep(%union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !4428 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4438, metadata !DIExpression()), !dbg !4439
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4440
  %call = call zeroext i8 @fold_stmt_1(%struct.gimple_stmt_iterator* %0, i8 zeroext 0), !dbg !4441
  ret i8 %call, !dbg !4442
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fold_stmt_1(%struct.gimple_stmt_iterator* %gsi, i8 zeroext %inplace) #0 !dbg !4443 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %inplace.addr = alloca i8, align 1
  %changed = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %old_num_ops = alloca i32, align 4
  %new_rhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %link = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %link79 = alloca %union.tree_node*, align 8
  %op81 = alloca %union.tree_node*, align 8
  %lhs107 = alloca %union.tree_node*, align 8
  %new_lhs = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4446, metadata !DIExpression()), !dbg !4447
  store i8 %inplace, i8* %inplace.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %inplace.addr, metadata !4448, metadata !DIExpression()), !dbg !4449
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4450, metadata !DIExpression()), !dbg !4451
  store i8 0, i8* %changed, align 1, !dbg !4451
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4452, metadata !DIExpression()), !dbg !4453
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4454
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !4455
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4453
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4456, metadata !DIExpression()), !dbg !4457
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4458
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4459
  switch i32 %call1, label %sw.default [
    i32 6, label %sw.bb
    i32 1, label %sw.bb18
    i32 8, label %sw.bb22
    i32 7, label %sw.bb48
  ], !dbg !4460

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %old_num_ops, metadata !4461, metadata !DIExpression()), !dbg !4464
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4465
  %call2 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !4466
  store i32 %call2, i32* %old_num_ops, align 4, !dbg !4464
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !4467, metadata !DIExpression()), !dbg !4468
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4469
  %call3 = call %union.tree_node* @fold_gimple_assign(%struct.gimple_stmt_iterator* %3), !dbg !4470
  store %union.tree_node* %call3, %union.tree_node** %new_rhs, align 8, !dbg !4468
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4471, metadata !DIExpression()), !dbg !4472
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4473
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !4474
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !4472
  %5 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4475
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !4475
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4477

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4478
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !4478
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4478
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4478
  %8 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4479
  %common5 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4479
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !4479
  %9 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !4479
  %call7 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %7, %union.tree_node* %9), !dbg !4480
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4480
  br i1 %tobool8, label %if.end, label %if.then, !dbg !4481

if.then:                                          ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4482
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4482
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !4482
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !4482
  %12 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4482
  %call11 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %11, %union.tree_node* %12), !dbg !4482
  store %union.tree_node* %call11, %union.tree_node** %new_rhs, align 8, !dbg !4483
  br label %if.end, !dbg !4484

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  %13 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4485
  %tobool12 = icmp ne %union.tree_node* %13, null, !dbg !4485
  br i1 %tobool12, label %land.lhs.true13, label %if.end17, !dbg !4487

land.lhs.true13:                                  ; preds = %if.end
  %14 = load i8, i8* %inplace.addr, align 1, !dbg !4488
  %tobool14 = icmp ne i8 %14, 0, !dbg !4488
  br i1 %tobool14, label %lor.lhs.false, label %if.then16, !dbg !4489

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %15 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4490
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4490
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !4490
  %bf.load = load i64, i64* %16, align 8, !dbg !4490
  %bf.clear = and i64 %bf.load, 65535, !dbg !4490
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4490
  %call15 = call i32 @get_gimple_rhs_num_ops(i32 %bf.cast), !dbg !4491
  %17 = load i32, i32* %old_num_ops, align 4, !dbg !4492
  %cmp = icmp ult i32 %call15, %17, !dbg !4493
  br i1 %cmp, label %if.then16, label %if.end17, !dbg !4494

if.then16:                                        ; preds = %lor.lhs.false, %land.lhs.true13
  %18 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4495
  %19 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !4497
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %18, %union.tree_node* %19), !dbg !4498
  store i8 1, i8* %changed, align 1, !dbg !4499
  br label %if.end17, !dbg !4500

if.end17:                                         ; preds = %if.then16, %lor.lhs.false, %if.end
  br label %sw.epilog, !dbg !4501

sw.bb18:                                          ; preds = %entry
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4502
  %call19 = call zeroext i8 @fold_gimple_cond(%union.gimple_statement_d* %20), !dbg !4503
  %conv = zext i8 %call19 to i32, !dbg !4503
  %21 = load i8, i8* %changed, align 1, !dbg !4504
  %conv20 = zext i8 %21 to i32, !dbg !4504
  %or = or i32 %conv20, %conv, !dbg !4504
  %conv21 = trunc i32 %or to i8, !dbg !4504
  store i8 %conv21, i8* %changed, align 1, !dbg !4504
  br label %sw.epilog, !dbg !4505

sw.bb22:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4506
  br label %for.cond, !dbg !4508

for.cond:                                         ; preds = %for.inc, %sw.bb22
  %22 = load i32, i32* %i, align 4, !dbg !4509
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4511
  %call23 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %23), !dbg !4512
  %cmp24 = icmp ult i32 %22, %call23, !dbg !4513
  br i1 %cmp24, label %for.body, label %for.end, !dbg !4514

for.body:                                         ; preds = %for.cond
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4515
  %25 = load i32, i32* %i, align 4, !dbg !4515
  %call26 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %24, i32 %25), !dbg !4515
  %base27 = bitcast %union.tree_node* %call26 to %struct.tree_base*, !dbg !4515
  %26 = bitcast %struct.tree_base* %base27 to i64*, !dbg !4515
  %bf.load28 = load i64, i64* %26, align 8, !dbg !4515
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !4515
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !4515
  %idxprom = sext i32 %bf.cast30 to i64, !dbg !4515
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4515
  %27 = load i32, i32* %arrayidx, align 4, !dbg !4515
  %cmp31 = icmp eq i32 %27, 4, !dbg !4515
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !4517

if.then33:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !4518, metadata !DIExpression()), !dbg !4520
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4521
  %29 = load i32, i32* %i, align 4, !dbg !4522
  %call34 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %28, i32 %29), !dbg !4523
  %call35 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %call34, i8 zeroext 0), !dbg !4524
  store %union.tree_node* %call35, %union.tree_node** %tmp, align 8, !dbg !4520
  %30 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4525
  %tobool36 = icmp ne %union.tree_node* %30, null, !dbg !4525
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !4527

if.then37:                                        ; preds = %if.then33
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4528
  %32 = load i32, i32* %i, align 4, !dbg !4530
  %33 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4531
  call void @gimple_call_set_arg(%union.gimple_statement_d* %31, i32 %32, %union.tree_node* %33), !dbg !4532
  store i8 1, i8* %changed, align 1, !dbg !4533
  br label %if.end38, !dbg !4534

if.end38:                                         ; preds = %if.then37, %if.then33
  br label %if.end39, !dbg !4535

if.end39:                                         ; preds = %if.end38, %for.body
  br label %for.inc, !dbg !4515

for.inc:                                          ; preds = %if.end39
  %34 = load i32, i32* %i, align 4, !dbg !4536
  %inc = add i32 %34, 1, !dbg !4536
  store i32 %inc, i32* %i, align 4, !dbg !4536
  br label %for.cond, !dbg !4537, !llvm.loop !4538

for.end:                                          ; preds = %for.cond
  %35 = load i8, i8* %inplace.addr, align 1, !dbg !4540
  %tobool40 = icmp ne i8 %35, 0, !dbg !4540
  br i1 %tobool40, label %if.end47, label %if.then41, !dbg !4542

if.then41:                                        ; preds = %for.end
  %36 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4543
  %call42 = call zeroext i8 @fold_gimple_call(%struct.gimple_stmt_iterator* %36), !dbg !4544
  %conv43 = zext i8 %call42 to i32, !dbg !4544
  %37 = load i8, i8* %changed, align 1, !dbg !4545
  %conv44 = zext i8 %37 to i32, !dbg !4545
  %or45 = or i32 %conv44, %conv43, !dbg !4545
  %conv46 = trunc i32 %or45 to i8, !dbg !4545
  store i8 %conv46, i8* %changed, align 1, !dbg !4545
  br label %if.end47, !dbg !4546

if.end47:                                         ; preds = %if.then41, %for.end
  br label %sw.epilog, !dbg !4547

sw.bb48:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4548
  br label %for.cond49, !dbg !4550

for.cond49:                                       ; preds = %for.inc71, %sw.bb48
  %38 = load i32, i32* %i, align 4, !dbg !4551
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4553
  %call50 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %39), !dbg !4554
  %cmp51 = icmp ult i32 %38, %call50, !dbg !4555
  br i1 %cmp51, label %for.body53, label %for.end73, !dbg !4556

for.body53:                                       ; preds = %for.cond49
  call void @llvm.dbg.declare(metadata %union.tree_node** %link, metadata !4557, metadata !DIExpression()), !dbg !4559
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4560
  %41 = load i32, i32* %i, align 4, !dbg !4561
  %call54 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %40, i32 %41), !dbg !4562
  store %union.tree_node* %call54, %union.tree_node** %link, align 8, !dbg !4559
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4563, metadata !DIExpression()), !dbg !4564
  %42 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !4565
  %list = bitcast %union.tree_node* %42 to %struct.tree_list*, !dbg !4565
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4565
  %43 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4565
  store %union.tree_node* %43, %union.tree_node** %op, align 8, !dbg !4564
  %44 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4566
  %base55 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !4566
  %45 = bitcast %struct.tree_base* %base55 to i64*, !dbg !4566
  %bf.load56 = load i64, i64* %45, align 8, !dbg !4566
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !4566
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !4566
  %idxprom59 = sext i32 %bf.cast58 to i64, !dbg !4566
  %arrayidx60 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom59, !dbg !4566
  %46 = load i32, i32* %arrayidx60, align 4, !dbg !4566
  %cmp61 = icmp eq i32 %46, 4, !dbg !4566
  br i1 %cmp61, label %land.lhs.true63, label %if.end70, !dbg !4568

land.lhs.true63:                                  ; preds = %for.body53
  %47 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4569
  %call64 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %47, i8 zeroext 1), !dbg !4570
  store %union.tree_node* %call64, %union.tree_node** %op, align 8, !dbg !4571
  %cmp65 = icmp ne %union.tree_node* %call64, null, !dbg !4572
  br i1 %cmp65, label %if.then67, label %if.end70, !dbg !4573

if.then67:                                        ; preds = %land.lhs.true63
  %48 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4574
  %49 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !4576
  %list68 = bitcast %union.tree_node* %49 to %struct.tree_list*, !dbg !4576
  %value69 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list68, i32 0, i32 2, !dbg !4576
  store %union.tree_node* %48, %union.tree_node** %value69, align 8, !dbg !4577
  store i8 1, i8* %changed, align 1, !dbg !4578
  br label %if.end70, !dbg !4579

if.end70:                                         ; preds = %if.then67, %land.lhs.true63, %for.body53
  br label %for.inc71, !dbg !4580

for.inc71:                                        ; preds = %if.end70
  %50 = load i32, i32* %i, align 4, !dbg !4581
  %inc72 = add i32 %50, 1, !dbg !4581
  store i32 %inc72, i32* %i, align 4, !dbg !4581
  br label %for.cond49, !dbg !4582, !llvm.loop !4583

for.end73:                                        ; preds = %for.cond49
  store i32 0, i32* %i, align 4, !dbg !4585
  br label %for.cond74, !dbg !4587

for.cond74:                                       ; preds = %for.inc100, %for.end73
  %51 = load i32, i32* %i, align 4, !dbg !4588
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4590
  %call75 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %52), !dbg !4591
  %cmp76 = icmp ult i32 %51, %call75, !dbg !4592
  br i1 %cmp76, label %for.body78, label %for.end102, !dbg !4593

for.body78:                                       ; preds = %for.cond74
  call void @llvm.dbg.declare(metadata %union.tree_node** %link79, metadata !4594, metadata !DIExpression()), !dbg !4596
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4597
  %54 = load i32, i32* %i, align 4, !dbg !4598
  %call80 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %53, i32 %54), !dbg !4599
  store %union.tree_node* %call80, %union.tree_node** %link79, align 8, !dbg !4596
  call void @llvm.dbg.declare(metadata %union.tree_node** %op81, metadata !4600, metadata !DIExpression()), !dbg !4601
  %55 = load %union.tree_node*, %union.tree_node** %link79, align 8, !dbg !4602
  %list82 = bitcast %union.tree_node* %55 to %struct.tree_list*, !dbg !4602
  %value83 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list82, i32 0, i32 2, !dbg !4602
  %56 = load %union.tree_node*, %union.tree_node** %value83, align 8, !dbg !4602
  store %union.tree_node* %56, %union.tree_node** %op81, align 8, !dbg !4601
  %57 = load %union.tree_node*, %union.tree_node** %op81, align 8, !dbg !4603
  %base84 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4603
  %58 = bitcast %struct.tree_base* %base84 to i64*, !dbg !4603
  %bf.load85 = load i64, i64* %58, align 8, !dbg !4603
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !4603
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !4603
  %idxprom88 = sext i32 %bf.cast87 to i64, !dbg !4603
  %arrayidx89 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom88, !dbg !4603
  %59 = load i32, i32* %arrayidx89, align 4, !dbg !4603
  %cmp90 = icmp eq i32 %59, 4, !dbg !4603
  br i1 %cmp90, label %land.lhs.true92, label %if.end99, !dbg !4605

land.lhs.true92:                                  ; preds = %for.body78
  %60 = load %union.tree_node*, %union.tree_node** %op81, align 8, !dbg !4606
  %call93 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %60, i8 zeroext 0), !dbg !4607
  store %union.tree_node* %call93, %union.tree_node** %op81, align 8, !dbg !4608
  %cmp94 = icmp ne %union.tree_node* %call93, null, !dbg !4609
  br i1 %cmp94, label %if.then96, label %if.end99, !dbg !4610

if.then96:                                        ; preds = %land.lhs.true92
  %61 = load %union.tree_node*, %union.tree_node** %op81, align 8, !dbg !4611
  %62 = load %union.tree_node*, %union.tree_node** %link79, align 8, !dbg !4613
  %list97 = bitcast %union.tree_node* %62 to %struct.tree_list*, !dbg !4613
  %value98 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list97, i32 0, i32 2, !dbg !4613
  store %union.tree_node* %61, %union.tree_node** %value98, align 8, !dbg !4614
  store i8 1, i8* %changed, align 1, !dbg !4615
  br label %if.end99, !dbg !4616

if.end99:                                         ; preds = %if.then96, %land.lhs.true92, %for.body78
  br label %for.inc100, !dbg !4617

for.inc100:                                       ; preds = %if.end99
  %63 = load i32, i32* %i, align 4, !dbg !4618
  %inc101 = add i32 %63, 1, !dbg !4618
  store i32 %inc101, i32* %i, align 4, !dbg !4618
  br label %for.cond74, !dbg !4619, !llvm.loop !4620

for.end102:                                       ; preds = %for.cond74
  br label %sw.epilog, !dbg !4622

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !4623

sw.epilog:                                        ; preds = %sw.default, %for.end102, %if.end47, %sw.bb18, %if.end17
  %64 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4624
  %call103 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %64), !dbg !4625
  store %union.gimple_statement_d* %call103, %union.gimple_statement_d** %stmt, align 8, !dbg !4626
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4627
  %call104 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %65), !dbg !4629
  %tobool105 = icmp ne i8 %call104, 0, !dbg !4629
  br i1 %tobool105, label %if.then106, label %if.end125, !dbg !4630

if.then106:                                       ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs107, metadata !4631, metadata !DIExpression()), !dbg !4633
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4634
  %call108 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %66), !dbg !4635
  store %union.tree_node* %call108, %union.tree_node** %lhs107, align 8, !dbg !4633
  %67 = load %union.tree_node*, %union.tree_node** %lhs107, align 8, !dbg !4636
  %tobool109 = icmp ne %union.tree_node* %67, null, !dbg !4636
  br i1 %tobool109, label %land.lhs.true110, label %if.end124, !dbg !4638

land.lhs.true110:                                 ; preds = %if.then106
  %68 = load %union.tree_node*, %union.tree_node** %lhs107, align 8, !dbg !4639
  %base111 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4639
  %69 = bitcast %struct.tree_base* %base111 to i64*, !dbg !4639
  %bf.load112 = load i64, i64* %69, align 8, !dbg !4639
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !4639
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !4639
  %idxprom115 = sext i32 %bf.cast114 to i64, !dbg !4639
  %arrayidx116 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom115, !dbg !4639
  %70 = load i32, i32* %arrayidx116, align 4, !dbg !4639
  %cmp117 = icmp eq i32 %70, 4, !dbg !4639
  br i1 %cmp117, label %if.then119, label %if.end124, !dbg !4640

if.then119:                                       ; preds = %land.lhs.true110
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_lhs, metadata !4641, metadata !DIExpression()), !dbg !4643
  %71 = load %union.tree_node*, %union.tree_node** %lhs107, align 8, !dbg !4644
  %call120 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %71, i8 zeroext 1), !dbg !4645
  store %union.tree_node* %call120, %union.tree_node** %new_lhs, align 8, !dbg !4643
  %72 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !4646
  %tobool121 = icmp ne %union.tree_node* %72, null, !dbg !4646
  br i1 %tobool121, label %if.then122, label %if.end123, !dbg !4648

if.then122:                                       ; preds = %if.then119
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4649
  %74 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !4651
  call void @gimple_set_lhs(%union.gimple_statement_d* %73, %union.tree_node* %74), !dbg !4652
  store i8 1, i8* %changed, align 1, !dbg !4653
  br label %if.end123, !dbg !4654

if.end123:                                        ; preds = %if.then122, %if.then119
  br label %if.end124, !dbg !4655

if.end124:                                        ; preds = %if.end123, %land.lhs.true110, %if.then106
  br label %if.end125, !dbg !4656

if.end125:                                        ; preds = %if.end124, %sw.epilog
  %75 = load i8, i8* %changed, align 1, !dbg !4657
  ret i8 %75, !dbg !4658
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d* %stmt) #0 !dbg !4659 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %changed = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4662, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4664, metadata !DIExpression()), !dbg !4665
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4666
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %gsi, %union.gimple_statement_d* %0), !dbg !4667
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4668, metadata !DIExpression()), !dbg !4669
  %call = call zeroext i8 @fold_stmt_1(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4670
  store i8 %call, i8* %changed, align 1, !dbg !4669
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4671
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4671
  %cmp = icmp eq %union.gimple_statement_d* %call1, %1, !dbg !4671
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4671

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 3178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4671
  br label %cond.end, !dbg !4671

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4671

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4671
  %2 = load i8, i8* %changed, align 1, !dbg !4672
  ret i8 %2, !dbg !4673
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4674 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4677, metadata !DIExpression()), !dbg !4678
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4679
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4679
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4680
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4680
  ret %union.gimple_statement_d* %1, !dbg !4681
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_fold_all_builtins() #0 !dbg !4682 {
entry:
  %cfg_changed = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %todoflags = alloca i32, align 4
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %callee = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %fcode = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8* %cfg_changed, metadata !4683, metadata !DIExpression()), !dbg !4684
  store i8 0, i8* %cfg_changed, align 1, !dbg !4684
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4685, metadata !DIExpression()), !dbg !4686
  call void @llvm.dbg.declare(metadata i32* %todoflags, metadata !4687, metadata !DIExpression()), !dbg !4688
  store i32 0, i32* %todoflags, align 4, !dbg !4688
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4689
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4689
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4689
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4689
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4689
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4689
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4689
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4689
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4689
  br label %for.cond, !dbg !4689

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4691
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4691
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4691
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4691
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4691
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4691
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4691
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4691
  br i1 %cmp, label %for.body, label %for.end89, !dbg !4689

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4693, metadata !DIExpression()), !dbg !4695
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4696
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4698
  %9 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !4698
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4698
  br label %for.cond3, !dbg !4699

for.cond3:                                        ; preds = %if.end87, %if.then67, %sw.default, %if.end31, %if.then11, %if.then, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4700
  %tobool = icmp ne i8 %call, 0, !dbg !4702
  %lnot = xor i1 %tobool, true, !dbg !4702
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4703

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4704, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !4707, metadata !DIExpression()), !dbg !4708
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !4709, metadata !DIExpression()), !dbg !4710
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !4711, metadata !DIExpression()), !dbg !4712
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !4713, metadata !DIExpression()), !dbg !4714
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4715
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !4716
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4717
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !4719
  %cmp7 = icmp ne i32 %call6, 8, !dbg !4720
  br i1 %cmp7, label %if.then, label %if.end, !dbg !4721

if.then:                                          ; preds = %for.body4
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4722
  br label %for.cond3, !dbg !4724, !llvm.loop !4725

if.end:                                           ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4727
  %call8 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %12), !dbg !4728
  store %union.tree_node* %call8, %union.tree_node** %callee, align 8, !dbg !4729
  %13 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4730
  %tobool9 = icmp ne %union.tree_node* %13, null, !dbg !4730
  br i1 %tobool9, label %lor.lhs.false, label %if.then11, !dbg !4732

lor.lhs.false:                                    ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4733
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !4733
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4733
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4733
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !4733
  %bf.clear = and i32 %bf.lshr, 3, !dbg !4733
  %cmp10 = icmp ne i32 %bf.clear, 3, !dbg !4734
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !4735

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4736
  br label %for.cond3, !dbg !4738, !llvm.loop !4725

if.end12:                                         ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4739
  %function_decl13 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !4739
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl13, i32 0, i32 5, !dbg !4739
  %bf.load14 = load i32, i32* %function_code, align 8, !dbg !4739
  %bf.clear15 = and i32 %bf.load14, 2047, !dbg !4739
  store i32 %bf.clear15, i32* %fcode, align 4, !dbg !4740
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4741
  %call16 = call %union.tree_node* @ccp_fold_builtin(%union.gimple_statement_d* %16), !dbg !4742
  store %union.tree_node* %call16, %union.tree_node** %result, align 8, !dbg !4743
  %17 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4744
  %tobool17 = icmp ne %union.tree_node* %17, null, !dbg !4744
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !4746

if.then18:                                        ; preds = %if.end12
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4747
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4747
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4748
  call void @gimple_remove_stmt_histograms(%struct.function* %add.ptr19, %union.gimple_statement_d* %19), !dbg !4749
  br label %if.end20, !dbg !4749

if.end20:                                         ; preds = %if.then18, %if.end12
  %20 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4750
  %tobool21 = icmp ne %union.tree_node* %20, null, !dbg !4750
  br i1 %tobool21, label %if.end37, label %if.then22, !dbg !4752

if.then22:                                        ; preds = %if.end20
  %21 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4753
  %function_decl23 = bitcast %union.tree_node* %21 to %struct.tree_function_decl*, !dbg !4753
  %function_code24 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl23, i32 0, i32 5, !dbg !4753
  %bf.load25 = load i32, i32* %function_code24, align 8, !dbg !4753
  %bf.clear26 = and i32 %bf.load25, 2047, !dbg !4753
  switch i32 %bf.clear26, label %sw.default [
    i32 428, label %sw.bb
    i32 527, label %sw.bb27
    i32 515, label %sw.bb32
    i32 514, label %sw.bb32
    i32 513, label %sw.bb32
  ], !dbg !4754

sw.bb:                                            ; preds = %if.then22
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4755
  store %union.tree_node* %22, %union.tree_node** %result, align 8, !dbg !4757
  br label %sw.epilog, !dbg !4758

sw.bb27:                                          ; preds = %if.then22
  %call28 = call %union.tree_node* @optimize_stack_restore(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4759
  store %union.tree_node* %call28, %union.tree_node** %result, align 8, !dbg !4760
  %23 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4761
  %tobool29 = icmp ne %union.tree_node* %23, null, !dbg !4761
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !4763

if.then30:                                        ; preds = %sw.bb27
  br label %sw.epilog, !dbg !4764

if.end31:                                         ; preds = %sw.bb27
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4765
  br label %for.cond3, !dbg !4766, !llvm.loop !4725

sw.bb32:                                          ; preds = %if.then22, %if.then22, %if.then22
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4767
  %call33 = call %union.tree_node* @optimize_stdarg_builtin(%union.gimple_statement_d* %24), !dbg !4768
  store %union.tree_node* %call33, %union.tree_node** %result, align 8, !dbg !4769
  %25 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4770
  %tobool34 = icmp ne %union.tree_node* %25, null, !dbg !4770
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !4772

if.then35:                                        ; preds = %sw.bb32
  br label %sw.epilog, !dbg !4773

if.end36:                                         ; preds = %sw.bb32
  br label %sw.default, !dbg !4770

sw.default:                                       ; preds = %if.then22, %if.end36
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4774
  br label %for.cond3, !dbg !4775, !llvm.loop !4725

sw.epilog:                                        ; preds = %if.then35, %if.then30, %sw.bb
  br label %if.end37, !dbg !4776

if.end37:                                         ; preds = %sw.epilog, %if.end20
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4777
  %tobool38 = icmp ne %struct._IO_FILE* %26, null, !dbg !4777
  br i1 %tobool38, label %land.lhs.true, label %if.end42, !dbg !4779

land.lhs.true:                                    ; preds = %if.end37
  %27 = load i32, i32* @dump_flags, align 4, !dbg !4780
  %and = and i32 %27, 8, !dbg !4781
  %tobool39 = icmp ne i32 %and, 0, !dbg !4781
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !4782

if.then40:                                        ; preds = %land.lhs.true
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4783
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i64 0, i64 0)), !dbg !4785
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4786
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4787
  %31 = load i32, i32* @dump_flags, align 4, !dbg !4788
  call void @print_gimple_stmt(%struct._IO_FILE* %29, %union.gimple_statement_d* %30, i32 0, i32 %31), !dbg !4789
  br label %if.end42, !dbg !4790

if.end42:                                         ; preds = %if.then40, %land.lhs.true, %if.end37
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4791
  store %union.gimple_statement_d* %32, %union.gimple_statement_d** %old_stmt, align 8, !dbg !4792
  %33 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4793
  %call43 = call zeroext i8 @update_call_from_tree(%struct.gimple_stmt_iterator* %i, %union.tree_node* %33), !dbg !4795
  %tobool44 = icmp ne i8 %call43, 0, !dbg !4795
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !4796

if.then45:                                        ; preds = %if.end42
  %34 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4797
  call void @gimplify_and_update_call_from_tree(%struct.gimple_stmt_iterator* %i, %union.tree_node* %34), !dbg !4799
  %35 = load i32, i32* %todoflags, align 4, !dbg !4800
  %or = or i32 %35, 2097152, !dbg !4800
  store i32 %or, i32* %todoflags, align 4, !dbg !4800
  br label %if.end46, !dbg !4801

if.end46:                                         ; preds = %if.then45, %if.end42
  %call47 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4802
  store %union.gimple_statement_d* %call47, %union.gimple_statement_d** %stmt, align 8, !dbg !4803
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4804
  call void @update_stmt(%union.gimple_statement_d* %36), !dbg !4805
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !4806
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4808
  %call48 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %37, %union.gimple_statement_d* %38), !dbg !4809
  %conv = zext i8 %call48 to i32, !dbg !4809
  %tobool49 = icmp ne i32 %conv, 0, !dbg !4809
  br i1 %tobool49, label %land.lhs.true50, label %if.end55, !dbg !4810

land.lhs.true50:                                  ; preds = %if.end46
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4811
  %call51 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %39), !dbg !4812
  %conv52 = zext i8 %call51 to i32, !dbg !4812
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !4812
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !4813

if.then54:                                        ; preds = %land.lhs.true50
  store i8 1, i8* %cfg_changed, align 1, !dbg !4814
  br label %if.end55, !dbg !4815

if.end55:                                         ; preds = %if.then54, %land.lhs.true50, %if.end46
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4816
  %tobool56 = icmp ne %struct._IO_FILE* %40, null, !dbg !4816
  br i1 %tobool56, label %land.lhs.true57, label %if.end63, !dbg !4818

land.lhs.true57:                                  ; preds = %if.end55
  %41 = load i32, i32* @dump_flags, align 4, !dbg !4819
  %and58 = and i32 %41, 8, !dbg !4820
  %tobool59 = icmp ne i32 %and58, 0, !dbg !4820
  br i1 %tobool59, label %if.then60, label %if.end63, !dbg !4821

if.then60:                                        ; preds = %land.lhs.true57
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4822
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i64 0, i64 0)), !dbg !4824
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4825
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4826
  %45 = load i32, i32* @dump_flags, align 4, !dbg !4827
  call void @print_gimple_stmt(%struct._IO_FILE* %43, %union.gimple_statement_d* %44, i32 0, i32 %45), !dbg !4828
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4829
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4830
  br label %if.end63, !dbg !4831

if.end63:                                         ; preds = %if.then60, %land.lhs.true57, %if.end55
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4832
  %call64 = call i32 @gimple_code(%union.gimple_statement_d* %47), !dbg !4834
  %cmp65 = icmp ne i32 %call64, 8, !dbg !4835
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !4836

if.then67:                                        ; preds = %if.end63
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4837
  br label %for.cond3, !dbg !4839, !llvm.loop !4725

if.end68:                                         ; preds = %if.end63
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4840
  %call69 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %48), !dbg !4841
  store %union.tree_node* %call69, %union.tree_node** %callee, align 8, !dbg !4842
  %49 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4843
  %tobool70 = icmp ne %union.tree_node* %49, null, !dbg !4843
  br i1 %tobool70, label %lor.lhs.false71, label %if.then86, !dbg !4845

lor.lhs.false71:                                  ; preds = %if.end68
  %50 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4846
  %function_decl72 = bitcast %union.tree_node* %50 to %struct.tree_function_decl*, !dbg !4846
  %built_in_class73 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl72, i32 0, i32 5, !dbg !4846
  %bf.load74 = load i32, i32* %built_in_class73, align 8, !dbg !4846
  %bf.lshr75 = lshr i32 %bf.load74, 11, !dbg !4846
  %bf.clear76 = and i32 %bf.lshr75, 3, !dbg !4846
  %cmp77 = icmp ne i32 %bf.clear76, 3, !dbg !4847
  br i1 %cmp77, label %if.then86, label %lor.lhs.false79, !dbg !4848

lor.lhs.false79:                                  ; preds = %lor.lhs.false71
  %51 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4849
  %function_decl80 = bitcast %union.tree_node* %51 to %struct.tree_function_decl*, !dbg !4849
  %function_code81 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl80, i32 0, i32 5, !dbg !4849
  %bf.load82 = load i32, i32* %function_code81, align 8, !dbg !4849
  %bf.clear83 = and i32 %bf.load82, 2047, !dbg !4849
  %52 = load i32, i32* %fcode, align 4, !dbg !4850
  %cmp84 = icmp eq i32 %bf.clear83, %52, !dbg !4851
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !4852

if.then86:                                        ; preds = %lor.lhs.false79, %lor.lhs.false71, %if.end68
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4853
  br label %if.end87, !dbg !4853

if.end87:                                         ; preds = %if.then86, %lor.lhs.false79
  br label %for.cond3, !dbg !4854, !llvm.loop !4725

for.end:                                          ; preds = %for.cond3
  br label %for.inc, !dbg !4855

for.inc:                                          ; preds = %for.end
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4691
  %next_bb88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 6, !dbg !4691
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb88, align 8, !dbg !4691
  store %struct.basic_block_def* %54, %struct.basic_block_def** %bb, align 8, !dbg !4691
  br label %for.cond, !dbg !4691, !llvm.loop !4856

for.end89:                                        ; preds = %for.cond
  %55 = load i8, i8* %cfg_changed, align 1, !dbg !4858
  %tobool90 = icmp ne i8 %55, 0, !dbg !4858
  br i1 %tobool90, label %if.then91, label %if.end93, !dbg !4860

if.then91:                                        ; preds = %for.end89
  %56 = load i32, i32* %todoflags, align 4, !dbg !4861
  %or92 = or i32 %56, 32, !dbg !4861
  store i32 %or92, i32* %todoflags, align 4, !dbg !4861
  br label %if.end93, !dbg !4862

if.end93:                                         ; preds = %if.then91, %for.end89
  %57 = load i32, i32* %todoflags, align 4, !dbg !4863
  ret i32 %57, !dbg !4864
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %union.tree_node* } @get_default_value(%union.tree_node* %var) #0 !dbg !4865 {
entry:
  %retval = alloca %struct.prop_value_d, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cst = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4868, metadata !DIExpression()), !dbg !4869
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !4870, metadata !DIExpression()), !dbg !4871
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4872
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !4872
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4872
  %1 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !4872
  store %union.tree_node* %1, %union.tree_node** %sym, align 8, !dbg !4871
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %retval, metadata !4873, metadata !DIExpression()), !dbg !4874
  %2 = bitcast %struct.prop_value_d* %retval to i8*, !dbg !4874
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false), !dbg !4874
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4875, metadata !DIExpression()), !dbg !4876
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4877
  %ssa_name2 = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !4877
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 2, !dbg !4877
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4877
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !4878
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4879
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %5), !dbg !4881
  %tobool = icmp ne i8 %call, 0, !dbg !4881
  br i1 %tobool, label %if.then, label %if.else8, !dbg !4882

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !4883
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %6), !dbg !4886
  %conv = zext i8 %call3 to i32, !dbg !4886
  %tobool4 = icmp ne i32 %conv, 0, !dbg !4886
  br i1 %tobool4, label %land.lhs.true, label %if.else, !dbg !4887

land.lhs.true:                                    ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !4888
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4888
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !4888
  %bf.load = load i64, i64* %8, align 8, !dbg !4888
  %bf.clear = and i64 %bf.load, 65535, !dbg !4888
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4888
  %cmp = icmp ne i32 %bf.cast, 34, !dbg !4889
  br i1 %cmp, label %if.then6, label %if.else, !dbg !4890

if.then6:                                         ; preds = %land.lhs.true
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !4891
  store i32 1, i32* %lattice_val, align 8, !dbg !4892
  br label %if.end, !dbg !4893

if.else:                                          ; preds = %land.lhs.true, %if.then
  %lattice_val7 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !4894
  store i32 3, i32* %lattice_val7, align 8, !dbg !4895
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  br label %if.end47, !dbg !4896

if.else8:                                         ; preds = %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4897
  %call9 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %9), !dbg !4899
  %conv10 = zext i8 %call9 to i32, !dbg !4899
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4899
  br i1 %tobool11, label %if.then23, label %lor.lhs.false, !dbg !4900

lor.lhs.false:                                    ; preds = %if.else8
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4901
  %call12 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %10), !dbg !4902
  %conv13 = zext i8 %call12 to i32, !dbg !4902
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !4902
  br i1 %tobool14, label %land.lhs.true15, label %lor.lhs.false19, !dbg !4903

land.lhs.true15:                                  ; preds = %lor.lhs.false
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4904
  %call16 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %11), !dbg !4905
  %cmp17 = icmp ne %union.tree_node* %call16, null, !dbg !4906
  br i1 %cmp17, label %if.then23, label %lor.lhs.false19, !dbg !4907

lor.lhs.false19:                                  ; preds = %land.lhs.true15, %lor.lhs.false
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4908
  %call20 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !4909
  %cmp21 = icmp eq i32 %call20, 16, !dbg !4910
  br i1 %cmp21, label %if.then23, label %if.else44, !dbg !4911

if.then23:                                        ; preds = %lor.lhs.false19, %land.lhs.true15, %if.else8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cst, metadata !4912, metadata !DIExpression()), !dbg !4914
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4915
  %call24 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %13), !dbg !4917
  %conv25 = zext i8 %call24 to i32, !dbg !4917
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !4917
  br i1 %tobool26, label %land.lhs.true27, label %if.else41, !dbg !4918

land.lhs.true27:                                  ; preds = %if.then23
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4919
  %call28 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %14), !dbg !4919
  %base29 = bitcast %union.tree_node* %call28 to %struct.tree_base*, !dbg !4919
  %15 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4919
  %bf.load30 = load i64, i64* %15, align 8, !dbg !4919
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !4919
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !4919
  %idxprom = sext i32 %bf.cast32 to i64, !dbg !4919
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4919
  %16 = load i32, i32* %arrayidx, align 4, !dbg !4919
  %cmp33 = icmp eq i32 %16, 3, !dbg !4919
  br i1 %cmp33, label %land.lhs.true35, label %if.else41, !dbg !4920

land.lhs.true35:                                  ; preds = %land.lhs.true27
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4921
  %call36 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %17), !dbg !4922
  %call37 = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %call36), !dbg !4923
  store %union.tree_node* %call37, %union.tree_node** %cst, align 8, !dbg !4924
  %tobool38 = icmp ne %union.tree_node* %call37, null, !dbg !4924
  br i1 %tobool38, label %if.then39, label %if.else41, !dbg !4925

if.then39:                                        ; preds = %land.lhs.true35
  %lattice_val40 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !4926
  store i32 2, i32* %lattice_val40, align 8, !dbg !4928
  %18 = load %union.tree_node*, %union.tree_node** %cst, align 8, !dbg !4929
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 1, !dbg !4930
  store %union.tree_node* %18, %union.tree_node** %value, align 8, !dbg !4931
  br label %if.end43, !dbg !4932

if.else41:                                        ; preds = %land.lhs.true35, %land.lhs.true27, %if.then23
  %lattice_val42 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !4933
  store i32 1, i32* %lattice_val42, align 8, !dbg !4934
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then39
  br label %if.end46, !dbg !4935

if.else44:                                        ; preds = %lor.lhs.false19
  %lattice_val45 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !4936
  store i32 3, i32* %lattice_val45, align 8, !dbg !4938
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.end43
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.end
  %19 = bitcast %struct.prop_value_d* %retval to { i32, %union.tree_node* }*, !dbg !4939
  %20 = load { i32, %union.tree_node* }, { i32, %union.tree_node* }* %19, align 8, !dbg !4939
  ret { i32, %union.tree_node* } %20, !dbg !4939
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @canonicalize_float_value(%struct.prop_value_d* %val) #0 !dbg !4940 {
entry:
  %val.addr = alloca %struct.prop_value_d*, align 8
  %mode = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %d = alloca %struct.real_value, align 8
  store %struct.prop_value_d* %val, %struct.prop_value_d** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val.addr, metadata !4943, metadata !DIExpression()), !dbg !4944
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4945, metadata !DIExpression()), !dbg !4946
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4947, metadata !DIExpression()), !dbg !4948
  call void @llvm.dbg.declare(metadata %struct.real_value* %d, metadata !4949, metadata !DIExpression()), !dbg !4950
  %0 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4951
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %0, i32 0, i32 0, !dbg !4953
  %1 = load i32, i32* %lattice_val, align 8, !dbg !4953
  %cmp = icmp ne i32 %1, 2, !dbg !4954
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4955

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4956
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %2, i32 0, i32 1, !dbg !4956
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4956
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4956
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4956
  %bf.load = load i64, i64* %4, align 8, !dbg !4956
  %bf.clear = and i64 %bf.load, 65535, !dbg !4956
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4956
  %cmp1 = icmp ne i32 %bf.cast, 24, !dbg !4957
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4958

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end214, !dbg !4959

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4960
  %value2 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %5, i32 0, i32 1, !dbg !4960
  %6 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !4960
  %real_cst = bitcast %union.tree_node* %6 to %struct.tree_real_cst*, !dbg !4960
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !4960
  %7 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !4960
  %8 = bitcast %struct.real_value* %d to i8*, !dbg !4960
  %9 = bitcast %struct.real_value* %7 to i8*, !dbg !4960
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false), !dbg !4960
  %10 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4961
  %value3 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %10, i32 0, i32 1, !dbg !4961
  %11 = load %union.tree_node*, %union.tree_node** %value3, align 8, !dbg !4961
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4961
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4961
  %12 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !4961
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !4962
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4963
  %base5 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4963
  %14 = bitcast %struct.tree_base* %base5 to i64*, !dbg !4963
  %bf.load6 = load i64, i64* %14, align 8, !dbg !4963
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !4963
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !4963
  %cmp9 = icmp eq i32 %bf.cast8, 14, !dbg !4963
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !4963

cond.true:                                        ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4963
  %call = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !4963
  br label %cond.end, !dbg !4963

cond.false:                                       ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4963
  %type10 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !4963
  %mode11 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6, !dbg !4963
  %bf.load12 = load i32, i32* %mode11, align 4, !dbg !4963
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !4963
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !4963
  br label %cond.end, !dbg !4963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear13, %cond.false ], !dbg !4963
  store i32 %cond, i32* %mode, align 4, !dbg !4964
  %17 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom = zext i32 %17 to i64, !dbg !4965
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4965
  %18 = load i8, i8* %arrayidx, align 1, !dbg !4965
  %conv = zext i8 %18 to i32, !dbg !4965
  %cmp14 = icmp eq i32 %conv, 8, !dbg !4965
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false16, !dbg !4965

lor.lhs.false16:                                  ; preds = %cond.end
  %19 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom17 = zext i32 %19 to i64, !dbg !4965
  %arrayidx18 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom17, !dbg !4965
  %20 = load i8, i8* %arrayidx18, align 1, !dbg !4965
  %conv19 = zext i8 %20 to i32, !dbg !4965
  %cmp20 = icmp eq i32 %conv19, 9, !dbg !4965
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false22, !dbg !4965

lor.lhs.false22:                                  ; preds = %lor.lhs.false16
  %21 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom23 = zext i32 %21 to i64, !dbg !4965
  %arrayidx24 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom23, !dbg !4965
  %22 = load i8, i8* %arrayidx24, align 1, !dbg !4965
  %conv25 = zext i8 %22 to i32, !dbg !4965
  %cmp26 = icmp eq i32 %conv25, 11, !dbg !4965
  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false28, !dbg !4965

lor.lhs.false28:                                  ; preds = %lor.lhs.false22
  %23 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom29 = zext i32 %23 to i64, !dbg !4965
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom29, !dbg !4965
  %24 = load i8, i8* %arrayidx30, align 1, !dbg !4965
  %conv31 = zext i8 %24 to i32, !dbg !4965
  %cmp32 = icmp eq i32 %conv31, 17, !dbg !4965
  br i1 %cmp32, label %land.lhs.true, label %land.lhs.true103, !dbg !4965

land.lhs.true:                                    ; preds = %lor.lhs.false28, %lor.lhs.false22, %lor.lhs.false16, %cond.end
  %25 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom34 = zext i32 %25 to i64, !dbg !4965
  %arrayidx35 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom34, !dbg !4965
  %26 = load i8, i8* %arrayidx35, align 1, !dbg !4965
  %conv36 = zext i8 %26 to i32, !dbg !4965
  %cmp37 = icmp eq i32 %conv36, 8, !dbg !4965
  br i1 %cmp37, label %cond.true45, label %lor.lhs.false39, !dbg !4965

lor.lhs.false39:                                  ; preds = %land.lhs.true
  %27 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom40 = zext i32 %27 to i64, !dbg !4965
  %arrayidx41 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom40, !dbg !4965
  %28 = load i8, i8* %arrayidx41, align 1, !dbg !4965
  %conv42 = zext i8 %28 to i32, !dbg !4965
  %cmp43 = icmp eq i32 %conv42, 9, !dbg !4965
  br i1 %cmp43, label %cond.true45, label %cond.false46, !dbg !4965

cond.true45:                                      ; preds = %lor.lhs.false39, %land.lhs.true
  %29 = load i32, i32* %mode, align 4, !dbg !4965
  br label %cond.end50, !dbg !4965

cond.false46:                                     ; preds = %lor.lhs.false39
  %30 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom47 = zext i32 %30 to i64, !dbg !4965
  %arrayidx48 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom47, !dbg !4965
  %31 = load i8, i8* %arrayidx48, align 1, !dbg !4965
  %conv49 = zext i8 %31 to i32, !dbg !4965
  br label %cond.end50, !dbg !4965

cond.end50:                                       ; preds = %cond.false46, %cond.true45
  %cond51 = phi i32 [ %29, %cond.true45 ], [ %conv49, %cond.false46 ], !dbg !4965
  %idxprom52 = zext i32 %cond51 to i64, !dbg !4965
  %arrayidx53 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom52, !dbg !4965
  %32 = load i8, i8* %arrayidx53, align 1, !dbg !4965
  %conv54 = zext i8 %32 to i32, !dbg !4965
  %cmp55 = icmp eq i32 %conv54, 9, !dbg !4965
  br i1 %cmp55, label %cond.true57, label %cond.false76, !dbg !4965

cond.true57:                                      ; preds = %cond.end50
  %33 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom58 = zext i32 %33 to i64, !dbg !4965
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom58, !dbg !4965
  %34 = load i8, i8* %arrayidx59, align 1, !dbg !4965
  %conv60 = zext i8 %34 to i32, !dbg !4965
  %cmp61 = icmp eq i32 %conv60, 8, !dbg !4965
  br i1 %cmp61, label %cond.true69, label %lor.lhs.false63, !dbg !4965

lor.lhs.false63:                                  ; preds = %cond.true57
  %35 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom64 = zext i32 %35 to i64, !dbg !4965
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom64, !dbg !4965
  %36 = load i8, i8* %arrayidx65, align 1, !dbg !4965
  %conv66 = zext i8 %36 to i32, !dbg !4965
  %cmp67 = icmp eq i32 %conv66, 9, !dbg !4965
  br i1 %cmp67, label %cond.true69, label %cond.false70, !dbg !4965

cond.true69:                                      ; preds = %lor.lhs.false63, %cond.true57
  %37 = load i32, i32* %mode, align 4, !dbg !4965
  br label %cond.end74, !dbg !4965

cond.false70:                                     ; preds = %lor.lhs.false63
  %38 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom71 = zext i32 %38 to i64, !dbg !4965
  %arrayidx72 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom71, !dbg !4965
  %39 = load i8, i8* %arrayidx72, align 1, !dbg !4965
  %conv73 = zext i8 %39 to i32, !dbg !4965
  br label %cond.end74, !dbg !4965

cond.end74:                                       ; preds = %cond.false70, %cond.true69
  %cond75 = phi i32 [ %37, %cond.true69 ], [ %conv73, %cond.false70 ], !dbg !4965
  %sub = sub i32 %cond75, 42, !dbg !4965
  %add = add i32 %sub, 4, !dbg !4965
  br label %cond.end96, !dbg !4965

cond.false76:                                     ; preds = %cond.end50
  %40 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom77 = zext i32 %40 to i64, !dbg !4965
  %arrayidx78 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom77, !dbg !4965
  %41 = load i8, i8* %arrayidx78, align 1, !dbg !4965
  %conv79 = zext i8 %41 to i32, !dbg !4965
  %cmp80 = icmp eq i32 %conv79, 8, !dbg !4965
  br i1 %cmp80, label %cond.true88, label %lor.lhs.false82, !dbg !4965

lor.lhs.false82:                                  ; preds = %cond.false76
  %42 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom83 = zext i32 %42 to i64, !dbg !4965
  %arrayidx84 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom83, !dbg !4965
  %43 = load i8, i8* %arrayidx84, align 1, !dbg !4965
  %conv85 = zext i8 %43 to i32, !dbg !4965
  %cmp86 = icmp eq i32 %conv85, 9, !dbg !4965
  br i1 %cmp86, label %cond.true88, label %cond.false89, !dbg !4965

cond.true88:                                      ; preds = %lor.lhs.false82, %cond.false76
  %44 = load i32, i32* %mode, align 4, !dbg !4965
  br label %cond.end93, !dbg !4965

cond.false89:                                     ; preds = %lor.lhs.false82
  %45 = load i32, i32* %mode, align 4, !dbg !4965
  %idxprom90 = zext i32 %45 to i64, !dbg !4965
  %arrayidx91 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom90, !dbg !4965
  %46 = load i8, i8* %arrayidx91, align 1, !dbg !4965
  %conv92 = zext i8 %46 to i32, !dbg !4965
  br label %cond.end93, !dbg !4965

cond.end93:                                       ; preds = %cond.false89, %cond.true88
  %cond94 = phi i32 [ %44, %cond.true88 ], [ %conv92, %cond.false89 ], !dbg !4965
  %sub95 = sub i32 %cond94, 38, !dbg !4965
  br label %cond.end96, !dbg !4965

cond.end96:                                       ; preds = %cond.end93, %cond.end74
  %cond97 = phi i32 [ %add, %cond.end74 ], [ %sub95, %cond.end93 ], !dbg !4965
  %idxprom98 = zext i32 %cond97 to i64, !dbg !4965
  %arrayidx99 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom98, !dbg !4965
  %47 = load %struct.real_format*, %struct.real_format** %arrayidx99, align 8, !dbg !4965
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %47, i32 0, i32 14, !dbg !4965
  %48 = load i8, i8* %has_signed_zero, align 1, !dbg !4965
  %conv100 = zext i8 %48 to i32, !dbg !4965
  %tobool = icmp ne i32 %conv100, 0, !dbg !4965
  br i1 %tobool, label %land.lhs.true101, label %land.lhs.true103, !dbg !4965

land.lhs.true101:                                 ; preds = %cond.end96
  %49 = load i32, i32* @flag_signed_zeros, align 4, !dbg !4965
  %tobool102 = icmp ne i32 %49, 0, !dbg !4965
  br i1 %tobool102, label %if.end110, label %land.lhs.true103, !dbg !4967

land.lhs.true103:                                 ; preds = %land.lhs.true101, %cond.end96, %lor.lhs.false28
  %call104 = call zeroext i8 @real_isnegzero(%struct.real_value* %d), !dbg !4968
  %conv105 = zext i8 %call104 to i32, !dbg !4968
  %tobool106 = icmp ne i32 %conv105, 0, !dbg !4968
  br i1 %tobool106, label %if.then107, label %if.end110, !dbg !4969

if.then107:                                       ; preds = %land.lhs.true103
  %50 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4970
  %call108 = call %union.tree_node* @build_real(%union.tree_node* %50, %struct.real_value* byval(%struct.real_value) align 8 @dconst0), !dbg !4972
  %51 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4973
  %value109 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %51, i32 0, i32 1, !dbg !4974
  store %union.tree_node* %call108, %union.tree_node** %value109, align 8, !dbg !4975
  br label %if.end214, !dbg !4976

if.end110:                                        ; preds = %land.lhs.true103, %land.lhs.true101
  %52 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom111 = zext i32 %52 to i64, !dbg !4977
  %arrayidx112 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom111, !dbg !4977
  %53 = load i8, i8* %arrayidx112, align 1, !dbg !4977
  %conv113 = zext i8 %53 to i32, !dbg !4977
  %cmp114 = icmp eq i32 %conv113, 8, !dbg !4977
  br i1 %cmp114, label %land.lhs.true134, label %lor.lhs.false116, !dbg !4977

lor.lhs.false116:                                 ; preds = %if.end110
  %54 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom117 = zext i32 %54 to i64, !dbg !4977
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom117, !dbg !4977
  %55 = load i8, i8* %arrayidx118, align 1, !dbg !4977
  %conv119 = zext i8 %55 to i32, !dbg !4977
  %cmp120 = icmp eq i32 %conv119, 9, !dbg !4977
  br i1 %cmp120, label %land.lhs.true134, label %lor.lhs.false122, !dbg !4977

lor.lhs.false122:                                 ; preds = %lor.lhs.false116
  %56 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom123 = zext i32 %56 to i64, !dbg !4977
  %arrayidx124 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom123, !dbg !4977
  %57 = load i8, i8* %arrayidx124, align 1, !dbg !4977
  %conv125 = zext i8 %57 to i32, !dbg !4977
  %cmp126 = icmp eq i32 %conv125, 11, !dbg !4977
  br i1 %cmp126, label %land.lhs.true134, label %lor.lhs.false128, !dbg !4977

lor.lhs.false128:                                 ; preds = %lor.lhs.false122
  %58 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom129 = zext i32 %58 to i64, !dbg !4977
  %arrayidx130 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom129, !dbg !4977
  %59 = load i8, i8* %arrayidx130, align 1, !dbg !4977
  %conv131 = zext i8 %59 to i32, !dbg !4977
  %cmp132 = icmp eq i32 %conv131, 17, !dbg !4977
  br i1 %cmp132, label %land.lhs.true134, label %land.lhs.true207, !dbg !4977

land.lhs.true134:                                 ; preds = %lor.lhs.false128, %lor.lhs.false122, %lor.lhs.false116, %if.end110
  %60 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom135 = zext i32 %60 to i64, !dbg !4977
  %arrayidx136 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom135, !dbg !4977
  %61 = load i8, i8* %arrayidx136, align 1, !dbg !4977
  %conv137 = zext i8 %61 to i32, !dbg !4977
  %cmp138 = icmp eq i32 %conv137, 8, !dbg !4977
  br i1 %cmp138, label %cond.true146, label %lor.lhs.false140, !dbg !4977

lor.lhs.false140:                                 ; preds = %land.lhs.true134
  %62 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom141 = zext i32 %62 to i64, !dbg !4977
  %arrayidx142 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom141, !dbg !4977
  %63 = load i8, i8* %arrayidx142, align 1, !dbg !4977
  %conv143 = zext i8 %63 to i32, !dbg !4977
  %cmp144 = icmp eq i32 %conv143, 9, !dbg !4977
  br i1 %cmp144, label %cond.true146, label %cond.false147, !dbg !4977

cond.true146:                                     ; preds = %lor.lhs.false140, %land.lhs.true134
  %64 = load i32, i32* %mode, align 4, !dbg !4977
  br label %cond.end151, !dbg !4977

cond.false147:                                    ; preds = %lor.lhs.false140
  %65 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom148 = zext i32 %65 to i64, !dbg !4977
  %arrayidx149 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom148, !dbg !4977
  %66 = load i8, i8* %arrayidx149, align 1, !dbg !4977
  %conv150 = zext i8 %66 to i32, !dbg !4977
  br label %cond.end151, !dbg !4977

cond.end151:                                      ; preds = %cond.false147, %cond.true146
  %cond152 = phi i32 [ %64, %cond.true146 ], [ %conv150, %cond.false147 ], !dbg !4977
  %idxprom153 = zext i32 %cond152 to i64, !dbg !4977
  %arrayidx154 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom153, !dbg !4977
  %67 = load i8, i8* %arrayidx154, align 1, !dbg !4977
  %conv155 = zext i8 %67 to i32, !dbg !4977
  %cmp156 = icmp eq i32 %conv155, 9, !dbg !4977
  br i1 %cmp156, label %cond.true158, label %cond.false179, !dbg !4977

cond.true158:                                     ; preds = %cond.end151
  %68 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom159 = zext i32 %68 to i64, !dbg !4977
  %arrayidx160 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom159, !dbg !4977
  %69 = load i8, i8* %arrayidx160, align 1, !dbg !4977
  %conv161 = zext i8 %69 to i32, !dbg !4977
  %cmp162 = icmp eq i32 %conv161, 8, !dbg !4977
  br i1 %cmp162, label %cond.true170, label %lor.lhs.false164, !dbg !4977

lor.lhs.false164:                                 ; preds = %cond.true158
  %70 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom165 = zext i32 %70 to i64, !dbg !4977
  %arrayidx166 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom165, !dbg !4977
  %71 = load i8, i8* %arrayidx166, align 1, !dbg !4977
  %conv167 = zext i8 %71 to i32, !dbg !4977
  %cmp168 = icmp eq i32 %conv167, 9, !dbg !4977
  br i1 %cmp168, label %cond.true170, label %cond.false171, !dbg !4977

cond.true170:                                     ; preds = %lor.lhs.false164, %cond.true158
  %72 = load i32, i32* %mode, align 4, !dbg !4977
  br label %cond.end175, !dbg !4977

cond.false171:                                    ; preds = %lor.lhs.false164
  %73 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom172 = zext i32 %73 to i64, !dbg !4977
  %arrayidx173 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom172, !dbg !4977
  %74 = load i8, i8* %arrayidx173, align 1, !dbg !4977
  %conv174 = zext i8 %74 to i32, !dbg !4977
  br label %cond.end175, !dbg !4977

cond.end175:                                      ; preds = %cond.false171, %cond.true170
  %cond176 = phi i32 [ %72, %cond.true170 ], [ %conv174, %cond.false171 ], !dbg !4977
  %sub177 = sub i32 %cond176, 42, !dbg !4977
  %add178 = add i32 %sub177, 4, !dbg !4977
  br label %cond.end199, !dbg !4977

cond.false179:                                    ; preds = %cond.end151
  %75 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom180 = zext i32 %75 to i64, !dbg !4977
  %arrayidx181 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom180, !dbg !4977
  %76 = load i8, i8* %arrayidx181, align 1, !dbg !4977
  %conv182 = zext i8 %76 to i32, !dbg !4977
  %cmp183 = icmp eq i32 %conv182, 8, !dbg !4977
  br i1 %cmp183, label %cond.true191, label %lor.lhs.false185, !dbg !4977

lor.lhs.false185:                                 ; preds = %cond.false179
  %77 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom186 = zext i32 %77 to i64, !dbg !4977
  %arrayidx187 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom186, !dbg !4977
  %78 = load i8, i8* %arrayidx187, align 1, !dbg !4977
  %conv188 = zext i8 %78 to i32, !dbg !4977
  %cmp189 = icmp eq i32 %conv188, 9, !dbg !4977
  br i1 %cmp189, label %cond.true191, label %cond.false192, !dbg !4977

cond.true191:                                     ; preds = %lor.lhs.false185, %cond.false179
  %79 = load i32, i32* %mode, align 4, !dbg !4977
  br label %cond.end196, !dbg !4977

cond.false192:                                    ; preds = %lor.lhs.false185
  %80 = load i32, i32* %mode, align 4, !dbg !4977
  %idxprom193 = zext i32 %80 to i64, !dbg !4977
  %arrayidx194 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom193, !dbg !4977
  %81 = load i8, i8* %arrayidx194, align 1, !dbg !4977
  %conv195 = zext i8 %81 to i32, !dbg !4977
  br label %cond.end196, !dbg !4977

cond.end196:                                      ; preds = %cond.false192, %cond.true191
  %cond197 = phi i32 [ %79, %cond.true191 ], [ %conv195, %cond.false192 ], !dbg !4977
  %sub198 = sub i32 %cond197, 38, !dbg !4977
  br label %cond.end199, !dbg !4977

cond.end199:                                      ; preds = %cond.end196, %cond.end175
  %cond200 = phi i32 [ %add178, %cond.end175 ], [ %sub198, %cond.end196 ], !dbg !4977
  %idxprom201 = zext i32 %cond200 to i64, !dbg !4977
  %arrayidx202 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom201, !dbg !4977
  %82 = load %struct.real_format*, %struct.real_format** %arrayidx202, align 8, !dbg !4977
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %82, i32 0, i32 11, !dbg !4977
  %83 = load i8, i8* %has_nans, align 2, !dbg !4977
  %conv203 = zext i8 %83 to i32, !dbg !4977
  %tobool204 = icmp ne i32 %conv203, 0, !dbg !4977
  br i1 %tobool204, label %land.lhs.true205, label %land.lhs.true207, !dbg !4977

land.lhs.true205:                                 ; preds = %cond.end199
  %84 = load i32, i32* @flag_finite_math_only, align 4, !dbg !4977
  %tobool206 = icmp ne i32 %84, 0, !dbg !4977
  br i1 %tobool206, label %land.lhs.true207, label %if.end214, !dbg !4979

land.lhs.true207:                                 ; preds = %land.lhs.true205, %cond.end199, %lor.lhs.false128
  %call208 = call zeroext i8 @real_isnan(%struct.real_value* %d), !dbg !4980
  %conv209 = zext i8 %call208 to i32, !dbg !4980
  %tobool210 = icmp ne i32 %conv209, 0, !dbg !4980
  br i1 %tobool210, label %if.then211, label %if.end214, !dbg !4981

if.then211:                                       ; preds = %land.lhs.true207
  %85 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4982
  %lattice_val212 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %85, i32 0, i32 0, !dbg !4984
  store i32 1, i32* %lattice_val212, align 8, !dbg !4985
  %86 = load %struct.prop_value_d*, %struct.prop_value_d** %val.addr, align 8, !dbg !4986
  %value213 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %86, i32 0, i32 1, !dbg !4987
  store %union.tree_node* null, %union.tree_node** %value213, align 8, !dbg !4988
  br label %if.end214, !dbg !4989

if.end214:                                        ; preds = %if.then, %if.then107, %if.then211, %land.lhs.true207, %land.lhs.true205
  ret void, !dbg !4990
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !4991 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4992, metadata !DIExpression()), !dbg !4993
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4994
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4995
  %cmp = icmp eq i32 %call, 18, !dbg !4996
  %conv = zext i1 %cmp to i32, !dbg !4996
  %conv1 = trunc i32 %conv to i8, !dbg !4995
  ret i8 %conv1, !dbg !4997
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !4998 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4999, metadata !DIExpression()), !dbg !5000
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5001
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5002
  %cmp = icmp eq i32 %call, 8, !dbg !5003
  %conv = zext i1 %cmp to i32, !dbg !5003
  %conv1 = trunc i32 %conv to i8, !dbg !5002
  ret i8 %conv1, !dbg !5004
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5005 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5006, metadata !DIExpression()), !dbg !5007
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5008
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5009
  ret %union.tree_node* %call, !dbg !5010
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5011 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5014, metadata !DIExpression()), !dbg !5015
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5016
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5017
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5018
  %bf.load = load i32, i32* %1, align 8, !dbg !5018
  %bf.clear = and i32 %bf.load, 255, !dbg !5018
  ret i32 %bf.clear, !dbg !5019
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5020 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5027
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5029
  %tobool = icmp ne i8 %call, 0, !dbg !5029
  br i1 %tobool, label %if.then, label %if.else, !dbg !5030

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5031
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5033
  %2 = load i32, i32* %i.addr, align 4, !dbg !5034
  %idxprom = zext i32 %2 to i64, !dbg !5033
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5033
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5033
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5035
  br label %return, !dbg !5035

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5036
  br label %return, !dbg !5036

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5037
  ret %union.tree_node* %4, !dbg !5037
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5038 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5039, metadata !DIExpression()), !dbg !5040
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5041
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5042
  %cmp = icmp uge i32 %call, 1, !dbg !5043
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5044

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5045
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5046
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5047
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5048
  %land.ext = zext i1 %2 to i32, !dbg !5044
  %conv = trunc i32 %land.ext to i8, !dbg !5042
  ret i8 %conv, !dbg !5049
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5050 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5053, metadata !DIExpression()), !dbg !5054
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5055, metadata !DIExpression()), !dbg !5056
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5057
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5058
  %idxprom = zext i32 %call to i64, !dbg !5059
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5059
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5059
  store i64 %1, i64* %off, align 8, !dbg !5060
  %2 = load i64, i64* %off, align 8, !dbg !5061
  %cmp = icmp ne i64 %2, 0, !dbg !5061
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5061

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5061
  br label %cond.end, !dbg !5061

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5061
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5062
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5063
  %5 = load i64, i64* %off, align 8, !dbg !5064
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5065
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5066
  ret %union.tree_node** %6, !dbg !5067
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5068 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5071, metadata !DIExpression()), !dbg !5072
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5073
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5074
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5075
  ret i32 %call1, !dbg !5076
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5077 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5080, metadata !DIExpression()), !dbg !5081
  %0 = load i32, i32* %code.addr, align 4, !dbg !5082
  %idxprom = zext i32 %0 to i64, !dbg !5083
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5083
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5083
  ret i32 %1, !dbg !5084
}

declare dso_local zeroext i8 @real_isnegzero(%struct.real_value*) #2

declare dso_local %union.tree_node* @build_real(%union.tree_node*, %struct.real_value* byval(%struct.real_value) align 8) #2

declare dso_local zeroext i8 @real_isnan(%struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ccp_initialize() #0 !dbg !5085 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %is_varying = alloca i8, align 1
  %def = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %i46 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp47 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5088, metadata !DIExpression()), !dbg !5089
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5090
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5090
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5090
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5090
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !5090
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5090
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !5090
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5090

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5090
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5090
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !5090
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !5090
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !5090
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !5090
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !5090
  br label %cond.end, !dbg !5090

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5090

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5090
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5090
  %conv = zext i32 %call to i64, !dbg !5090
  %call4 = call i8* @xcalloc(i64 %conv, i64 16), !dbg !5090
  %6 = bitcast i8* %call4 to %struct.prop_value_d*, !dbg !5090
  store %struct.prop_value_d* %6, %struct.prop_value_d** @const_val, align 8, !dbg !5091
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5092
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5092
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !5092
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5092
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 0, !dbg !5092
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5092
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !5092
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5092
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !5092
  br label %for.cond, !dbg !5092

for.cond:                                         ; preds = %for.inc32, %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5094
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5094
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5094
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !5094
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !5094
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 1, !dbg !5094
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5094
  %cmp = icmp ne %struct.basic_block_def* %11, %14, !dbg !5094
  br i1 %cmp, label %for.body, label %for.end34, !dbg !5092

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5096, metadata !DIExpression()), !dbg !5098
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5099
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %15), !dbg !5101
  %16 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !5101
  %17 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !5101
  br label %for.cond9, !dbg !5102

for.cond9:                                        ; preds = %for.inc30, %for.body
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !5103
  %tobool11 = icmp ne i8 %call10, 0, !dbg !5105
  %lnot = xor i1 %tobool11, true, !dbg !5105
  br i1 %lnot, label %for.body12, label %for.end31, !dbg !5106

for.body12:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5107, metadata !DIExpression()), !dbg !5109
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !5110
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !5109
  call void @llvm.dbg.declare(metadata i8* %is_varying, metadata !5111, metadata !DIExpression()), !dbg !5112
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5113
  %call14 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %18), !dbg !5115
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5115
  br i1 %tobool15, label %if.then, label %if.else, !dbg !5116

if.then:                                          ; preds = %for.body12
  store i8 0, i8* %is_varying, align 1, !dbg !5117
  br label %if.end, !dbg !5118

if.else:                                          ; preds = %for.body12
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5119
  %call16 = call zeroext i8 @surely_varying_stmt_p(%union.gimple_statement_d* %19), !dbg !5120
  store i8 %call16, i8* %is_varying, align 1, !dbg !5121
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load i8, i8* %is_varying, align 1, !dbg !5122
  %tobool17 = icmp ne i8 %20, 0, !dbg !5122
  br i1 %tobool17, label %if.then18, label %if.end26, !dbg !5124

if.then18:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !5125, metadata !DIExpression()), !dbg !5127
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !5128, metadata !DIExpression()), !dbg !5141
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5142
  %call19 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %21, i32 10), !dbg !5142
  store %union.tree_node* %call19, %union.tree_node** %def, align 8, !dbg !5142
  br label %for.cond20, !dbg !5142

for.cond20:                                       ; preds = %for.inc, %if.then18
  %call21 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5144
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5144
  %lnot23 = xor i1 %tobool22, true, !dbg !5144
  br i1 %lnot23, label %for.body24, label %for.end, !dbg !5142

for.body24:                                       ; preds = %for.cond20
  %22 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5146
  call void @set_value_varying(%union.tree_node* %22), !dbg !5147
  br label %for.inc, !dbg !5147

for.inc:                                          ; preds = %for.body24
  %call25 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !5144
  store %union.tree_node* %call25, %union.tree_node** %def, align 8, !dbg !5144
  br label %for.cond20, !dbg !5144, !llvm.loop !5148

for.end:                                          ; preds = %for.cond20
  br label %if.end26, !dbg !5150

if.end26:                                         ; preds = %for.end, %if.end
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5151
  %24 = load i8, i8* %is_varying, align 1, !dbg !5152
  %tobool27 = icmp ne i8 %24, 0, !dbg !5153
  %lnot28 = xor i1 %tobool27, true, !dbg !5153
  %lnot.ext = zext i1 %lnot28 to i32, !dbg !5153
  %conv29 = trunc i32 %lnot.ext to i8, !dbg !5153
  call void @prop_set_simulate_again(%union.gimple_statement_d* %23, i8 zeroext %conv29), !dbg !5154
  br label %for.inc30, !dbg !5155

for.inc30:                                        ; preds = %if.end26
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !5156
  br label %for.cond9, !dbg !5157, !llvm.loop !5158

for.end31:                                        ; preds = %for.cond9
  br label %for.inc32, !dbg !5160

for.inc32:                                        ; preds = %for.end31
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5094
  %next_bb33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 6, !dbg !5094
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb33, align 8, !dbg !5094
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !5094
  br label %for.cond, !dbg !5094, !llvm.loop !5161

for.end34:                                        ; preds = %for.cond
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5163
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !5163
  %cfg36 = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 1, !dbg !5163
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg36, align 8, !dbg !5163
  %x_entry_block_ptr37 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 0, !dbg !5163
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr37, align 8, !dbg !5163
  %next_bb38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !5163
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb38, align 8, !dbg !5163
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !5163
  br label %for.cond39, !dbg !5163

for.cond39:                                       ; preds = %for.inc63, %for.end34
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5165
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5165
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !5165
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !5165
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !5165
  %x_exit_block_ptr42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !5165
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr42, align 8, !dbg !5165
  %cmp43 = icmp ne %struct.basic_block_def* %31, %34, !dbg !5165
  br i1 %cmp43, label %for.body45, label %for.end65, !dbg !5163

for.body45:                                       ; preds = %for.cond39
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i46, metadata !5167, metadata !DIExpression()), !dbg !5169
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5170
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp47, %struct.basic_block_def* %35), !dbg !5172
  %36 = bitcast %struct.gimple_stmt_iterator* %i46 to i8*, !dbg !5172
  %37 = bitcast %struct.gimple_stmt_iterator* %tmp47 to i8*, !dbg !5172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false), !dbg !5172
  br label %for.cond48, !dbg !5173

for.cond48:                                       ; preds = %for.inc61, %for.body45
  %call49 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i46), !dbg !5174
  %tobool50 = icmp ne i8 %call49, 0, !dbg !5176
  %lnot51 = xor i1 %tobool50, true, !dbg !5176
  br i1 %lnot51, label %for.body53, label %for.end62, !dbg !5177

for.body53:                                       ; preds = %for.cond48
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5178, metadata !DIExpression()), !dbg !5180
  %call54 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i46), !dbg !5181
  store %union.gimple_statement_d* %call54, %union.gimple_statement_d** %phi, align 8, !dbg !5180
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5182
  %call55 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %38), !dbg !5184
  %call56 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call55), !dbg !5185
  %tobool57 = icmp ne i8 %call56, 0, !dbg !5185
  br i1 %tobool57, label %if.else59, label %if.then58, !dbg !5186

if.then58:                                        ; preds = %for.body53
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5187
  call void @prop_set_simulate_again(%union.gimple_statement_d* %39, i8 zeroext 0), !dbg !5188
  br label %if.end60, !dbg !5188

if.else59:                                        ; preds = %for.body53
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5189
  call void @prop_set_simulate_again(%union.gimple_statement_d* %40, i8 zeroext 1), !dbg !5190
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.then58
  br label %for.inc61, !dbg !5191

for.inc61:                                        ; preds = %if.end60
  call void @gsi_next(%struct.gimple_stmt_iterator* %i46), !dbg !5192
  br label %for.cond48, !dbg !5193, !llvm.loop !5194

for.end62:                                        ; preds = %for.cond48
  br label %for.inc63, !dbg !5196

for.inc63:                                        ; preds = %for.end62
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5165
  %next_bb64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 6, !dbg !5165
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb64, align 8, !dbg !5165
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !5165
  br label %for.cond39, !dbg !5165, !llvm.loop !5197

for.end65:                                        ; preds = %for.cond39
  ret void, !dbg !5199
}

declare dso_local void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)*, i32 (%union.gimple_statement_d*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @ccp_visit_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p, %union.tree_node** %output_p) #0 !dbg !5200 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %output_p.addr = alloca %union.tree_node**, align 8
  %def = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %v = alloca %struct.prop_value_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  store %union.tree_node** %output_p, %union.tree_node*** %output_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %output_p.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5214
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5214
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5216

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !5217
  %and = and i32 %1, 8, !dbg !5218
  %tobool1 = icmp ne i32 %and, 0, !dbg !5218
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5219

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5220
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0)), !dbg !5222
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5223
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5224
  %5 = load i32, i32* @dump_flags, align 4, !dbg !5225
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %4, i32 0, i32 %5), !dbg !5226
  br label %if.end, !dbg !5227

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5228
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !5229
  switch i32 %call2, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb4
    i32 1, label %sw.bb9
    i32 5, label %sw.bb9
  ], !dbg !5230

sw.bb:                                            ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5231
  %8 = load %union.tree_node**, %union.tree_node*** %output_p.addr, align 8, !dbg !5233
  %call3 = call i32 @visit_assignment(%union.gimple_statement_d* %7, %union.tree_node** %8), !dbg !5234
  store i32 %call3, i32* %retval, align 4, !dbg !5235
  br label %return, !dbg !5235

sw.bb4:                                           ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5236
  %call5 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %9), !dbg !5238
  %cmp = icmp ne %union.tree_node* %call5, null, !dbg !5239
  br i1 %cmp, label %if.then6, label %if.end8, !dbg !5240

if.then6:                                         ; preds = %sw.bb4
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5241
  %11 = load %union.tree_node**, %union.tree_node*** %output_p.addr, align 8, !dbg !5242
  %call7 = call i32 @visit_assignment(%union.gimple_statement_d* %10, %union.tree_node** %11), !dbg !5243
  store i32 %call7, i32* %retval, align 4, !dbg !5244
  br label %return, !dbg !5244

if.end8:                                          ; preds = %sw.bb4
  br label %sw.epilog, !dbg !5245

sw.bb9:                                           ; preds = %if.end, %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5246
  %13 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !5247
  %call10 = call i32 @visit_cond_stmt(%union.gimple_statement_d* %12, %struct.edge_def** %13), !dbg !5248
  store i32 %call10, i32* %retval, align 4, !dbg !5249
  br label %return, !dbg !5249

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !5250

sw.epilog:                                        ; preds = %sw.default, %if.end8
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5251
  %tobool11 = icmp ne %struct._IO_FILE* %14, null, !dbg !5251
  br i1 %tobool11, label %land.lhs.true12, label %if.end17, !dbg !5253

land.lhs.true12:                                  ; preds = %sw.epilog
  %15 = load i32, i32* @dump_flags, align 4, !dbg !5254
  %and13 = and i32 %15, 8, !dbg !5255
  %tobool14 = icmp ne i32 %and13, 0, !dbg !5255
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5256

if.then15:                                        ; preds = %land.lhs.true12
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5257
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0)), !dbg !5258
  br label %if.end17, !dbg !5258

if.end17:                                         ; preds = %if.then15, %land.lhs.true12, %sw.epilog
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5259
  %call18 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %17, i32 10), !dbg !5259
  store %union.tree_node* %call18, %union.tree_node** %def, align 8, !dbg !5259
  br label %for.cond, !dbg !5259

for.cond:                                         ; preds = %for.inc, %if.end17
  %call19 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5261
  %tobool20 = icmp ne i8 %call19, 0, !dbg !5261
  %lnot = xor i1 %tobool20, true, !dbg !5261
  br i1 %lnot, label %for.body, label %for.end, !dbg !5259

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %v, metadata !5263, metadata !DIExpression()), !dbg !5265
  %18 = bitcast %struct.prop_value_d* %v to i8*, !dbg !5265
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 bitcast (%struct.prop_value_d* @__const.ccp_visit_stmt.v to i8*), i64 16, i1 false), !dbg !5265
  %19 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5266
  %20 = bitcast %struct.prop_value_d* %v to { i32, %union.tree_node* }*, !dbg !5267
  %21 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %20, i32 0, i32 0, !dbg !5267
  %22 = load i32, i32* %21, align 8, !dbg !5267
  %23 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %20, i32 0, i32 1, !dbg !5267
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !5267
  %call21 = call zeroext i8 @set_lattice_value(%union.tree_node* %19, i32 %22, %union.tree_node* %24), !dbg !5267
  br label %for.inc, !dbg !5268

for.inc:                                          ; preds = %for.body
  %call22 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !5261
  store %union.tree_node* %call22, %union.tree_node** %def, align 8, !dbg !5261
  br label %for.cond, !dbg !5261, !llvm.loop !5269

for.end:                                          ; preds = %for.cond
  store i32 2, i32* %retval, align 4, !dbg !5271
  br label %return, !dbg !5271

return:                                           ; preds = %for.end, %sw.bb9, %if.then6, %sw.bb
  %25 = load i32, i32* %retval, align 4, !dbg !5272
  ret i32 %25, !dbg !5272
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ccp_visit_phi_node(%union.gimple_statement_d* %phi) #0 !dbg !5273 {
entry:
  %retval = alloca i32, align 4
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %old_val = alloca %struct.prop_value_d*, align 8
  %new_val = alloca %struct.prop_value_d, align 8
  %e = alloca %struct.edge_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %arg_val = alloca %struct.prop_value_d, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !5276, metadata !DIExpression()), !dbg !5277
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5278, metadata !DIExpression()), !dbg !5279
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %old_val, metadata !5280, metadata !DIExpression()), !dbg !5281
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %new_val, metadata !5282, metadata !DIExpression()), !dbg !5283
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5284
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5284
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5286

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !5287
  %and = and i32 %1, 8, !dbg !5288
  %tobool1 = icmp ne i32 %and, 0, !dbg !5288
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5289

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5290
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)), !dbg !5292
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5293
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5294
  %5 = load i32, i32* @dump_flags, align 4, !dbg !5295
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %4, i32 0, i32 %5), !dbg !5296
  br label %if.end, !dbg !5297

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5298
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %6), !dbg !5299
  %call3 = call %struct.prop_value_d* @get_value(%union.tree_node* %call2), !dbg !5300
  store %struct.prop_value_d* %call3, %struct.prop_value_d** %old_val, align 8, !dbg !5301
  %7 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !5302
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %7, i32 0, i32 0, !dbg !5303
  %8 = load i32, i32* %lattice_val, align 8, !dbg !5303
  switch i32 %8, label %sw.default [
    i32 3, label %sw.bb
    i32 2, label %sw.bb4
    i32 1, label %sw.bb5
  ], !dbg !5304

sw.bb:                                            ; preds = %if.end
  store i32 2, i32* %retval, align 4, !dbg !5305
  br label %return, !dbg !5305

sw.bb4:                                           ; preds = %if.end
  %9 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !5307
  %10 = bitcast %struct.prop_value_d* %new_val to i8*, !dbg !5308
  %11 = bitcast %struct.prop_value_d* %9 to i8*, !dbg !5308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !5308
  br label %sw.epilog, !dbg !5309

sw.bb5:                                           ; preds = %if.end
  %lattice_val6 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !5310
  store i32 1, i32* %lattice_val6, align 8, !dbg !5311
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 1, !dbg !5312
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !5313
  br label %sw.epilog, !dbg !5314

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 823, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5315
  br label %sw.epilog, !dbg !5316

sw.epilog:                                        ; preds = %sw.default, %sw.bb5, %sw.bb4
  store i32 0, i32* %i, align 4, !dbg !5317
  br label %for.cond, !dbg !5319

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %12 = load i32, i32* %i, align 4, !dbg !5320
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5322
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %13), !dbg !5323
  %cmp = icmp ult i32 %12, %call7, !dbg !5324
  br i1 %cmp, label %for.body, label %for.end, !dbg !5325

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5326, metadata !DIExpression()), !dbg !5328
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5329
  %15 = load i32, i32* %i, align 4, !dbg !5330
  %conv = zext i32 %15 to i64, !dbg !5330
  %call8 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %14, i64 %conv), !dbg !5331
  store %struct.edge_def* %call8, %struct.edge_def** %e, align 8, !dbg !5328
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5332
  %tobool9 = icmp ne %struct._IO_FILE* %16, null, !dbg !5332
  br i1 %tobool9, label %land.lhs.true10, label %if.end18, !dbg !5334

land.lhs.true10:                                  ; preds = %for.body
  %17 = load i32, i32* @dump_flags, align 4, !dbg !5335
  %and11 = and i32 %17, 8, !dbg !5336
  %tobool12 = icmp ne i32 %and11, 0, !dbg !5336
  br i1 %tobool12, label %if.then13, label %if.end18, !dbg !5337

if.then13:                                        ; preds = %land.lhs.true10
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5338
  %19 = load i32, i32* %i, align 4, !dbg !5340
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5341
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 0, !dbg !5342
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5342
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !5343
  %22 = load i32, i32* %index, align 8, !dbg !5343
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5344
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !5345
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5345
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 9, !dbg !5346
  %25 = load i32, i32* %index14, align 8, !dbg !5346
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5347
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 7, !dbg !5348
  %27 = load i32, i32* %flags, align 8, !dbg !5348
  %and15 = and i32 %27, 4096, !dbg !5349
  %tobool16 = icmp ne i32 %and15, 0, !dbg !5350
  %28 = zext i1 %tobool16 to i64, !dbg !5350
  %cond = select i1 %tobool16, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), !dbg !5350
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.21, i64 0, i64 0), i32 %19, i32 %22, i32 %25, i8* %cond), !dbg !5351
  br label %if.end18, !dbg !5352

if.end18:                                         ; preds = %if.then13, %land.lhs.true10, %for.body
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5353
  %flags19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 7, !dbg !5355
  %30 = load i32, i32* %flags19, align 8, !dbg !5355
  %and20 = and i32 %30, 4096, !dbg !5356
  %tobool21 = icmp ne i32 %and20, 0, !dbg !5356
  br i1 %tobool21, label %if.then22, label %if.end44, !dbg !5357

if.then22:                                        ; preds = %if.end18
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5358, metadata !DIExpression()), !dbg !5360
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5361
  %32 = load i32, i32* %i, align 4, !dbg !5362
  %call23 = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %31, i32 %32), !dbg !5363
  %def = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call23, i32 0, i32 1, !dbg !5364
  %33 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5364
  store %union.tree_node* %33, %union.tree_node** %arg, align 8, !dbg !5360
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %arg_val, metadata !5365, metadata !DIExpression()), !dbg !5366
  %34 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5367
  %call24 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %34), !dbg !5369
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5369
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !5370

if.then26:                                        ; preds = %if.then22
  %lattice_val27 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %arg_val, i32 0, i32 0, !dbg !5371
  store i32 2, i32* %lattice_val27, align 8, !dbg !5373
  %35 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5374
  %value28 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %arg_val, i32 0, i32 1, !dbg !5375
  store %union.tree_node* %35, %union.tree_node** %value28, align 8, !dbg !5376
  br label %if.end30, !dbg !5377

if.else:                                          ; preds = %if.then22
  %36 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5378
  %call29 = call %struct.prop_value_d* @get_value(%union.tree_node* %36), !dbg !5379
  %37 = bitcast %struct.prop_value_d* %arg_val to i8*, !dbg !5380
  %38 = bitcast %struct.prop_value_d* %call29 to i8*, !dbg !5380
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false), !dbg !5380
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then26
  call void @ccp_lattice_meet(%struct.prop_value_d* %new_val, %struct.prop_value_d* %arg_val), !dbg !5381
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5382
  %tobool31 = icmp ne %struct._IO_FILE* %39, null, !dbg !5382
  br i1 %tobool31, label %land.lhs.true32, label %if.end38, !dbg !5384

land.lhs.true32:                                  ; preds = %if.end30
  %40 = load i32, i32* @dump_flags, align 4, !dbg !5385
  %and33 = and i32 %40, 8, !dbg !5386
  %tobool34 = icmp ne i32 %and33, 0, !dbg !5386
  br i1 %tobool34, label %if.then35, label %if.end38, !dbg !5387

if.then35:                                        ; preds = %land.lhs.true32
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5388
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)), !dbg !5390
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5391
  %43 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5392
  %44 = load i32, i32* @dump_flags, align 4, !dbg !5393
  call void @print_generic_expr(%struct._IO_FILE* %42, %union.tree_node* %43, i32 %44), !dbg !5394
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5395
  %46 = bitcast %struct.prop_value_d* %arg_val to { i32, %union.tree_node* }*, !dbg !5396
  %47 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %46, i32 0, i32 0, !dbg !5396
  %48 = load i32, i32* %47, align 8, !dbg !5396
  %49 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %46, i32 0, i32 1, !dbg !5396
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !5396
  call void @dump_lattice_value(%struct._IO_FILE* %45, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i32 %48, %union.tree_node* %50), !dbg !5396
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5397
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5398
  br label %if.end38, !dbg !5399

if.end38:                                         ; preds = %if.then35, %land.lhs.true32, %if.end30
  %lattice_val39 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !5400
  %52 = load i32, i32* %lattice_val39, align 8, !dbg !5400
  %cmp40 = icmp eq i32 %52, 3, !dbg !5402
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !5403

if.then42:                                        ; preds = %if.end38
  br label %for.end, !dbg !5404

if.end43:                                         ; preds = %if.end38
  br label %if.end44, !dbg !5405

if.end44:                                         ; preds = %if.end43, %if.end18
  br label %for.inc, !dbg !5406

for.inc:                                          ; preds = %if.end44
  %53 = load i32, i32* %i, align 4, !dbg !5407
  %inc = add i32 %53, 1, !dbg !5407
  store i32 %inc, i32* %i, align 4, !dbg !5407
  br label %for.cond, !dbg !5408, !llvm.loop !5409

for.end:                                          ; preds = %if.then42, %for.cond
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5411
  %tobool45 = icmp ne %struct._IO_FILE* %54, null, !dbg !5411
  br i1 %tobool45, label %land.lhs.true46, label %if.end51, !dbg !5413

land.lhs.true46:                                  ; preds = %for.end
  %55 = load i32, i32* @dump_flags, align 4, !dbg !5414
  %and47 = and i32 %55, 8, !dbg !5415
  %tobool48 = icmp ne i32 %and47, 0, !dbg !5415
  br i1 %tobool48, label %if.then49, label %if.end51, !dbg !5416

if.then49:                                        ; preds = %land.lhs.true46
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5417
  %57 = bitcast %struct.prop_value_d* %new_val to { i32, %union.tree_node* }*, !dbg !5419
  %58 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %57, i32 0, i32 0, !dbg !5419
  %59 = load i32, i32* %58, align 8, !dbg !5419
  %60 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %57, i32 0, i32 1, !dbg !5419
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !5419
  call void @dump_lattice_value(%struct._IO_FILE* %56, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0), i32 %59, %union.tree_node* %61), !dbg !5419
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5420
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0)), !dbg !5421
  br label %if.end51, !dbg !5422

if.end51:                                         ; preds = %if.then49, %land.lhs.true46, %for.end
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5423
  %call52 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %63), !dbg !5425
  %64 = bitcast %struct.prop_value_d* %new_val to { i32, %union.tree_node* }*, !dbg !5426
  %65 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %64, i32 0, i32 0, !dbg !5426
  %66 = load i32, i32* %65, align 8, !dbg !5426
  %67 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %64, i32 0, i32 1, !dbg !5426
  %68 = load %union.tree_node*, %union.tree_node** %67, align 8, !dbg !5426
  %call53 = call zeroext i8 @set_lattice_value(%union.tree_node* %call52, i32 %66, %union.tree_node* %68), !dbg !5426
  %tobool54 = icmp ne i8 %call53, 0, !dbg !5426
  br i1 %tobool54, label %if.then55, label %if.else61, !dbg !5427

if.then55:                                        ; preds = %if.end51
  %lattice_val56 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !5428
  %69 = load i32, i32* %lattice_val56, align 8, !dbg !5428
  %cmp57 = icmp eq i32 %69, 3, !dbg !5431
  br i1 %cmp57, label %if.then59, label %if.else60, !dbg !5432

if.then59:                                        ; preds = %if.then55
  store i32 2, i32* %retval, align 4, !dbg !5433
  br label %return, !dbg !5433

if.else60:                                        ; preds = %if.then55
  store i32 1, i32* %retval, align 4, !dbg !5434
  br label %return, !dbg !5434

if.else61:                                        ; preds = %if.end51
  store i32 0, i32* %retval, align 4, !dbg !5435
  br label %return, !dbg !5435

return:                                           ; preds = %if.else61, %if.else60, %if.then59, %sw.bb
  %70 = load i32, i32* %retval, align 4, !dbg !5436
  ret i32 %70, !dbg !5436
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ccp_finalize() #0 !dbg !5437 {
entry:
  %something_changed = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i8* %something_changed, metadata !5438, metadata !DIExpression()), !dbg !5439
  call void @do_dbg_cnt(), !dbg !5440
  %0 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !5441
  %call = call zeroext i8 @substitute_and_fold(%struct.prop_value_d* %0, i8 (%struct.gimple_stmt_iterator*)* @ccp_fold_stmt), !dbg !5442
  store i8 %call, i8* %something_changed, align 1, !dbg !5443
  %1 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !5444
  %2 = bitcast %struct.prop_value_d* %1 to i8*, !dbg !5444
  call void @free(i8* %2), !dbg !5445
  store %struct.prop_value_d* null, %struct.prop_value_d** @const_val, align 8, !dbg !5446
  %3 = load i8, i8* %something_changed, align 1, !dbg !5447
  ret i8 %3, !dbg !5448
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !5449 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5454, metadata !DIExpression()), !dbg !5455
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5455
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5455
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5455

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5455
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5455
  %2 = load i32, i32* %num, align 8, !dbg !5455
  br label %cond.end, !dbg !5455

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5455

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5455
  ret i32 %cond, !dbg !5455
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5456 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5459, metadata !DIExpression()), !dbg !5460
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5461, metadata !DIExpression()), !dbg !5462
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5463, metadata !DIExpression()), !dbg !5464
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5465
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5466
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5467
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5468
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5469
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5470
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5471
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5472
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5473
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5474
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5475
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5476
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5477
  ret void, !dbg !5478
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5479 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5482, metadata !DIExpression()), !dbg !5483
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5484
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5484
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5485
  %conv = zext i1 %cmp to i32, !dbg !5485
  %conv1 = trunc i32 %conv to i8, !dbg !5486
  ret i8 %conv1, !dbg !5487
}

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @surely_varying_stmt_p(%union.gimple_statement_d* %stmt) #0 !dbg !5488 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5489, metadata !DIExpression()), !dbg !5490
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5491
  %call = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %0), !dbg !5493
  %tobool = icmp ne i8 %call, 0, !dbg !5493
  br i1 %tobool, label %if.then, label %if.end, !dbg !5494

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5495
  br label %return, !dbg !5495

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5496
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !5498
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5498
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !5499

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !5500, metadata !DIExpression()), !dbg !5502
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5503
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !5505
  %tobool5 = icmp ne %union.tree_node* %call4, null, !dbg !5505
  br i1 %tobool5, label %lor.lhs.false, label %if.then8, !dbg !5506

lor.lhs.false:                                    ; preds = %if.then3
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5507
  %call6 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %3), !dbg !5508
  store %union.tree_node* %call6, %union.tree_node** %fndecl, align 8, !dbg !5509
  %cmp = icmp ne %union.tree_node* %call6, null, !dbg !5510
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !5511

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5512
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !5512
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5512
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !5512
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5512
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5512
  %cmp7 = icmp ne i32 %bf.clear, 0, !dbg !5512
  br i1 %cmp7, label %if.end9, label %if.then8, !dbg !5513

if.then8:                                         ; preds = %land.lhs.true, %if.then3
  store i8 1, i8* %retval, align 1, !dbg !5514
  br label %return, !dbg !5514

if.end9:                                          ; preds = %land.lhs.true, %lor.lhs.false
  br label %if.end14, !dbg !5515

if.else:                                          ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5516
  %call10 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %5), !dbg !5518
  %tobool11 = icmp ne %union.tree_node* %call10, null, !dbg !5518
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5519

if.then12:                                        ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !5520
  br label %return, !dbg !5520

if.end13:                                         ; preds = %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end9
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5521
  %call15 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !5523
  %cmp16 = icmp ne i32 %call15, 6, !dbg !5524
  br i1 %cmp16, label %land.lhs.true17, label %if.end27, !dbg !5525

land.lhs.true17:                                  ; preds = %if.end14
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5526
  %call18 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !5527
  %cmp19 = icmp ne i32 %call18, 1, !dbg !5528
  br i1 %cmp19, label %land.lhs.true20, label %if.end27, !dbg !5529

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5530
  %call21 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !5531
  %cmp22 = icmp ne i32 %call21, 5, !dbg !5532
  br i1 %cmp22, label %land.lhs.true23, label %if.end27, !dbg !5533

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5534
  %call24 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !5535
  %cmp25 = icmp ne i32 %call24, 8, !dbg !5536
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5537

if.then26:                                        ; preds = %land.lhs.true23
  store i8 1, i8* %retval, align 1, !dbg !5538
  br label %return, !dbg !5538

if.end27:                                         ; preds = %land.lhs.true23, %land.lhs.true20, %land.lhs.true17, %if.end14
  store i8 0, i8* %retval, align 1, !dbg !5539
  br label %return, !dbg !5539

return:                                           ; preds = %if.end27, %if.then26, %if.then12, %if.then8, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !5540
  ret i8 %10, !dbg !5540
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5541 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5545, metadata !DIExpression()), !dbg !5546
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5547, metadata !DIExpression()), !dbg !5548
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5551
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5552
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5553
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !5554
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5555
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !5556
  store i32 1, i32* %iter_type, align 4, !dbg !5557
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5558
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !5559
  ret %union.tree_node* %call, !dbg !5560
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5561 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5566, metadata !DIExpression()), !dbg !5567
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5568
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !5569
  %1 = load i8, i8* %done, align 8, !dbg !5569
  ret i8 %1, !dbg !5570
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_value_varying(%union.tree_node* %var) #0 !dbg !5571 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %val = alloca %struct.prop_value_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5574, metadata !DIExpression()), !dbg !5575
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val, metadata !5576, metadata !DIExpression()), !dbg !5577
  %0 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !5578
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5579
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !5579
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5579
  %2 = load i32, i32* %version, align 8, !dbg !5579
  %idxprom = zext i32 %2 to i64, !dbg !5578
  %arrayidx = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %0, i64 %idxprom, !dbg !5578
  store %struct.prop_value_d* %arrayidx, %struct.prop_value_d** %val, align 8, !dbg !5577
  %3 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !5580
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %3, i32 0, i32 0, !dbg !5581
  store i32 3, i32* %lattice_val, align 8, !dbg !5582
  %4 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !5583
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %4, i32 0, i32 1, !dbg !5584
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !5585
  ret void, !dbg !5586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5587 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5590, metadata !DIExpression()), !dbg !5591
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !5592, metadata !DIExpression()), !dbg !5593
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5594
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5596
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5596
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5594
  br i1 %tobool, label %if.then, label %if.end, !dbg !5597

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5598
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5598
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5598
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5598
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !5598
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !5600
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5601
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5602
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5602
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5603
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5603
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5604
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5605
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5606
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5607
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5608
  br label %return, !dbg !5608

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5609
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !5611
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !5611
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !5609
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !5612

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5613
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5613
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !5613
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !5613
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5613
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !5613
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !5615
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5616
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5617
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !5617
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !5618
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !5618
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5619
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !5620
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !5621
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5622
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !5623
  br label %return, !dbg !5623

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5624
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !5625
  store i8 1, i8* %done, align 8, !dbg !5626
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5627
  br label %return, !dbg !5627

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5628
  ret %union.tree_node* %20, !dbg !5628
}

; Function Attrs: noinline nounwind uwtable
define internal void @prop_set_simulate_again(%union.gimple_statement_d* %s, i8 zeroext %visit_p) #0 !dbg !5629 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %visit_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5632, metadata !DIExpression()), !dbg !5633
  store i8 %visit_p, i8* %visit_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visit_p.addr, metadata !5634, metadata !DIExpression()), !dbg !5635
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5636
  %1 = load i8, i8* %visit_p.addr, align 1, !dbg !5637
  call void @gimple_set_visited(%union.gimple_statement_d* %0, i8 zeroext %1), !dbg !5638
  ret void, !dbg !5639
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5640 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5643, metadata !DIExpression()), !dbg !5644
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5645
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5646
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5646
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5647
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5647
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5648
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5649
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5650
  ret void, !dbg !5651
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !5652 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5653, metadata !DIExpression()), !dbg !5654
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5655
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5656
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !5657
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5657
  ret %union.tree_node* %1, !dbg !5658
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5659 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5665, metadata !DIExpression()), !dbg !5666
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5667
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5668
  %1 = load i32, i32* %flags, align 8, !dbg !5668
  %and = and i32 %1, 512, !dbg !5669
  %tobool = icmp ne i32 %and, 0, !dbg !5669
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5670

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5671
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5672
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5673
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5673
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5671
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5674

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5675
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5676
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5677
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5677
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5678
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5678
  br label %cond.end, !dbg !5674

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5674

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5674
  ret %struct.gimple_seq_d* %cond, !dbg !5679
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5680 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5686, metadata !DIExpression()), !dbg !5687
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5688
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5688
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5688

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5689
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5690
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5690
  br label %cond.end, !dbg !5688

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5688

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5688
  ret %struct.gimple_seq_node_d* %cond, !dbg !5691
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !5692 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5693, metadata !DIExpression()), !dbg !5694
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5695
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5697
  %tobool = icmp ne i8 %call, 0, !dbg !5697
  br i1 %tobool, label %if.then, label %if.else, !dbg !5698

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5699
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5700
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5701
  %bf.load = load i32, i32* %2, align 8, !dbg !5701
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !5701
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5701
  %conv = trunc i32 %bf.clear to i8, !dbg !5699
  store i8 %conv, i8* %retval, align 1, !dbg !5702
  br label %return, !dbg !5702

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5703
  br label %return, !dbg !5703

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !5704
  ret i8 %3, !dbg !5704
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5705 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5706, metadata !DIExpression()), !dbg !5707
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5708, metadata !DIExpression()), !dbg !5709
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5710
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5711
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5709
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5712
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5712
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5712
  %bf.load = load i64, i64* %2, align 8, !dbg !5712
  %bf.clear = and i64 %bf.load, 65535, !dbg !5712
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5712
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5714
  br i1 %cmp, label %if.then, label %if.end, !dbg !5715

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5716
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5716
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5716
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5716
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5716
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5717
  br label %return, !dbg !5717

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5718
  br label %return, !dbg !5718

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5719
  ret %union.tree_node* %5, !dbg !5719
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5720 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5721, metadata !DIExpression()), !dbg !5722
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5723
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5725
  %tobool = icmp ne i8 %call, 0, !dbg !5725
  br i1 %tobool, label %if.end, label %if.then, !dbg !5726

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5727
  br label %return, !dbg !5727

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5728
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5729
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5730
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5730
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5731
  br label %return, !dbg !5731

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5732
  ret %union.tree_node* %3, !dbg !5732
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5733 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5734, metadata !DIExpression()), !dbg !5735
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5736
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5737
  %cmp = icmp uge i32 %call, 6, !dbg !5738
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5739

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5740
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5741
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5742
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5743
  %land.ext = zext i1 %2 to i32, !dbg !5739
  %conv = trunc i32 %land.ext to i8, !dbg !5737
  ret i8 %conv, !dbg !5744
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !5745 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5746, metadata !DIExpression()), !dbg !5747
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5748
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5749
  ret %union.tree_node* %call, !dbg !5750
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5751 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5754, metadata !DIExpression()), !dbg !5755
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5756, metadata !DIExpression()), !dbg !5757
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5758, metadata !DIExpression()), !dbg !5759
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5760
  %and = and i32 %0, 8, !dbg !5760
  %tobool = icmp ne i32 %and, 0, !dbg !5760
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !5760

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5760
  %and1 = and i32 %1, 2, !dbg !5760
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5760
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !5760

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5760
  %and3 = and i32 %2, 4, !dbg !5760
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5760
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !5760

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5760
  %and6 = and i32 %3, 1, !dbg !5760
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5760
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !5760

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5760
  br label %cond.end, !dbg !5760

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !5760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5760
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5761
  %and8 = and i32 %4, 10, !dbg !5762
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5762
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5763

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5764
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !5765
  br label %cond.end12, !dbg !5763

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5763

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !5763
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5766
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !5767
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !5768
  %7 = load i32, i32* %flags.addr, align 4, !dbg !5769
  %and14 = and i32 %7, 8, !dbg !5771
  %tobool15 = icmp ne i32 %and14, 0, !dbg !5771
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !5772

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5773
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !5774
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !5774
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !5773
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !5775

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5776
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !5777
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !5778
  br i1 %cmp, label %if.then, label %if.end, !dbg !5779

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5780
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5781
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !5781
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !5782
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !5782
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5783
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5784
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !5785
  br label %if.end, !dbg !5783

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !5786
  %and23 = and i32 %15, 5, !dbg !5787
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5787
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5788

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5789
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !5790
  br label %cond.end28, !dbg !5788

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5788

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5788
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5791
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !5792
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !5793
  %18 = load i32, i32* %flags.addr, align 4, !dbg !5794
  %and30 = and i32 %18, 4, !dbg !5796
  %tobool31 = icmp ne i32 %and30, 0, !dbg !5796
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !5797

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5798
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !5799
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !5799
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !5798
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !5800

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5801
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !5802
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !5803
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5804

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5805
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !5806
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !5806
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !5807
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !5807
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5808
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !5809
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !5810
  br label %if.end42, !dbg !5808

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5811
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !5812
  store i8 0, i8* %done, align 8, !dbg !5813
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5814
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !5815
  store i32 0, i32* %phi_i, align 8, !dbg !5816
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5817
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !5818
  store i32 0, i32* %num_phi, align 4, !dbg !5819
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5820
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !5821
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5822
  ret void, !dbg !5823
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !5824 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5827, metadata !DIExpression()), !dbg !5828
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5829
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5831
  %tobool = icmp ne i8 %call, 0, !dbg !5831
  br i1 %tobool, label %if.end, label %if.then, !dbg !5832

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !5833
  br label %return, !dbg !5833

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5834
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5835
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5836
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5837
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5837
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !5838
  br label %return, !dbg !5838

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !5839
  ret %struct.def_optype_d* %3, !dbg !5839
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !5840 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5843, metadata !DIExpression()), !dbg !5844
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5845
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5847
  %tobool = icmp ne i8 %call, 0, !dbg !5847
  br i1 %tobool, label %if.end, label %if.then, !dbg !5848

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !5849
  br label %return, !dbg !5849

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5850
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5851
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5852
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5853
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5853
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !5854
  br label %return, !dbg !5854

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !5855
  ret %struct.use_optype_d* %3, !dbg !5855
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5856 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5857, metadata !DIExpression()), !dbg !5858
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5859
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5861
  %tobool = icmp ne i8 %call, 0, !dbg !5861
  br i1 %tobool, label %if.end, label %if.then, !dbg !5862

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5863
  br label %return, !dbg !5863

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5864
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5865
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5866
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !5866
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5867
  br label %return, !dbg !5867

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5868
  ret %union.tree_node* %3, !dbg !5868
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5869 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5877
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5878
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5878
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5879
  ret %union.tree_node* %2, !dbg !5880
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !5881 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !5885, metadata !DIExpression()), !dbg !5886
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !5887
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5888
  ret %union.tree_node* %1, !dbg !5889
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) #0 !dbg !5890 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5891, metadata !DIExpression()), !dbg !5892
  store i8 %visited_p, i8* %visited_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visited_p.addr, metadata !5893, metadata !DIExpression()), !dbg !5894
  %0 = load i8, i8* %visited_p.addr, align 1, !dbg !5895
  %conv = zext i8 %0 to i32, !dbg !5896
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5897
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5898
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5899
  %bf.load = load i32, i32* %2, align 8, !dbg !5900
  %bf.value = and i32 %conv, 1, !dbg !5900
  %bf.shl = shl i32 %bf.value, 9, !dbg !5900
  %bf.clear = and i32 %bf.load, -513, !dbg !5900
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !5900
  store i32 %bf.set, i32* %2, align 8, !dbg !5900
  ret void, !dbg !5901
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @visit_assignment(%union.gimple_statement_d* %stmt, %union.tree_node** %output_p) #0 !dbg !5902 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %output_p.addr = alloca %union.tree_node**, align 8
  %val = alloca %struct.prop_value_d, align 8
  %retval1 = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %nval = alloca %struct.prop_value_d*, align 8
  %tmp = alloca %struct.prop_value_d, align 8
  %tmp12 = alloca %struct.prop_value_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5905, metadata !DIExpression()), !dbg !5906
  store %union.tree_node** %output_p, %union.tree_node*** %output_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %output_p.addr, metadata !5907, metadata !DIExpression()), !dbg !5908
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %val, metadata !5909, metadata !DIExpression()), !dbg !5910
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !5911, metadata !DIExpression()), !dbg !5912
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5913, metadata !DIExpression()), !dbg !5914
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5915
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %0), !dbg !5916
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !5914
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5917
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5917
  %cmp = icmp ne i32 %call2, 8, !dbg !5917
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !5917

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5917
  %call3 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !5917
  %cmp4 = icmp ne %union.tree_node* %call3, null, !dbg !5917
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !5917

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 1604, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5917
  br label %cond.end, !dbg !5917

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !5917

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5917
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5918
  %call5 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %3), !dbg !5920
  %tobool = icmp ne i8 %call5, 0, !dbg !5920
  br i1 %tobool, label %if.then, label %if.else11, !dbg !5921

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5922, metadata !DIExpression()), !dbg !5924
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5925
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !5926
  store %union.tree_node* %call6, %union.tree_node** %rhs, align 8, !dbg !5924
  %5 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5927
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5927
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5927
  %bf.load = load i64, i64* %6, align 8, !dbg !5927
  %bf.clear = and i64 %bf.load, 65535, !dbg !5927
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5927
  %cmp7 = icmp eq i32 %bf.cast, 141, !dbg !5929
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !5930

if.then8:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %nval, metadata !5931, metadata !DIExpression()), !dbg !5933
  %7 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5934
  %call9 = call %struct.prop_value_d* @get_value(%union.tree_node* %7), !dbg !5935
  store %struct.prop_value_d* %call9, %struct.prop_value_d** %nval, align 8, !dbg !5933
  %8 = load %struct.prop_value_d*, %struct.prop_value_d** %nval, align 8, !dbg !5936
  %9 = bitcast %struct.prop_value_d* %val to i8*, !dbg !5937
  %10 = bitcast %struct.prop_value_d* %8 to i8*, !dbg !5937
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !5937
  br label %if.end, !dbg !5938

if.else:                                          ; preds = %if.then
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5939
  %call10 = call { i32, %union.tree_node* } @evaluate_stmt(%union.gimple_statement_d* %11), !dbg !5940
  %12 = bitcast %struct.prop_value_d* %tmp to { i32, %union.tree_node* }*, !dbg !5940
  %13 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %12, i32 0, i32 0, !dbg !5940
  %14 = extractvalue { i32, %union.tree_node* } %call10, 0, !dbg !5940
  store i32 %14, i32* %13, align 8, !dbg !5940
  %15 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %12, i32 0, i32 1, !dbg !5940
  %16 = extractvalue { i32, %union.tree_node* } %call10, 1, !dbg !5940
  store %union.tree_node* %16, %union.tree_node** %15, align 8, !dbg !5940
  %17 = bitcast %struct.prop_value_d* %val to i8*, !dbg !5940
  %18 = bitcast %struct.prop_value_d* %tmp to i8*, !dbg !5940
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false), !dbg !5940
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then8
  br label %if.end14, !dbg !5941

if.else11:                                        ; preds = %cond.end
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5942
  %call13 = call { i32, %union.tree_node* } @evaluate_stmt(%union.gimple_statement_d* %19), !dbg !5943
  %20 = bitcast %struct.prop_value_d* %tmp12 to { i32, %union.tree_node* }*, !dbg !5943
  %21 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %20, i32 0, i32 0, !dbg !5943
  %22 = extractvalue { i32, %union.tree_node* } %call13, 0, !dbg !5943
  store i32 %22, i32* %21, align 8, !dbg !5943
  %23 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %20, i32 0, i32 1, !dbg !5943
  %24 = extractvalue { i32, %union.tree_node* } %call13, 1, !dbg !5943
  store %union.tree_node* %24, %union.tree_node** %23, align 8, !dbg !5943
  %25 = bitcast %struct.prop_value_d* %val to i8*, !dbg !5943
  %26 = bitcast %struct.prop_value_d* %tmp12 to i8*, !dbg !5943
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 16, i1 false), !dbg !5943
  br label %if.end14

if.end14:                                         ; preds = %if.else11, %if.end
  store i32 0, i32* %retval1, align 4, !dbg !5944
  %27 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5945
  %base15 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5945
  %28 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5945
  %bf.load16 = load i64, i64* %28, align 8, !dbg !5945
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5945
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5945
  %cmp19 = icmp eq i32 %bf.cast18, 141, !dbg !5947
  br i1 %cmp19, label %if.then20, label %if.end29, !dbg !5948

if.then20:                                        ; preds = %if.end14
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5949
  %30 = bitcast %struct.prop_value_d* %val to { i32, %union.tree_node* }*, !dbg !5952
  %31 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %30, i32 0, i32 0, !dbg !5952
  %32 = load i32, i32* %31, align 8, !dbg !5952
  %33 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %30, i32 0, i32 1, !dbg !5952
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !5952
  %call21 = call zeroext i8 @set_lattice_value(%union.tree_node* %29, i32 %32, %union.tree_node* %34), !dbg !5952
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5952
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !5953

if.then23:                                        ; preds = %if.then20
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5954
  %36 = load %union.tree_node**, %union.tree_node*** %output_p.addr, align 8, !dbg !5956
  store %union.tree_node* %35, %union.tree_node** %36, align 8, !dbg !5957
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 0, !dbg !5958
  %37 = load i32, i32* %lattice_val, align 8, !dbg !5958
  %cmp24 = icmp eq i32 %37, 3, !dbg !5960
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !5961

if.then25:                                        ; preds = %if.then23
  store i32 2, i32* %retval1, align 4, !dbg !5962
  br label %if.end27, !dbg !5963

if.else26:                                        ; preds = %if.then23
  store i32 1, i32* %retval1, align 4, !dbg !5964
  br label %if.end27

if.end27:                                         ; preds = %if.else26, %if.then25
  br label %if.end28, !dbg !5965

if.end28:                                         ; preds = %if.end27, %if.then20
  br label %if.end29, !dbg !5966

if.end29:                                         ; preds = %if.end28, %if.end14
  %38 = load i32, i32* %retval1, align 4, !dbg !5967
  ret i32 %38, !dbg !5968
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @visit_cond_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) #0 !dbg !5969 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %taken_edge_p.addr = alloca %struct.edge_def**, align 8
  %val = alloca %struct.prop_value_d, align 8
  %block = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.prop_value_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  store %struct.edge_def** %taken_edge_p, %struct.edge_def*** %taken_edge_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %taken_edge_p.addr, metadata !5974, metadata !DIExpression()), !dbg !5975
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %val, metadata !5976, metadata !DIExpression()), !dbg !5977
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !5978, metadata !DIExpression()), !dbg !5979
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5980
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !5981
  store %struct.basic_block_def* %call, %struct.basic_block_def** %block, align 8, !dbg !5982
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5983
  %call1 = call { i32, %union.tree_node* } @evaluate_stmt(%union.gimple_statement_d* %1), !dbg !5984
  %2 = bitcast %struct.prop_value_d* %tmp to { i32, %union.tree_node* }*, !dbg !5984
  %3 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %2, i32 0, i32 0, !dbg !5984
  %4 = extractvalue { i32, %union.tree_node* } %call1, 0, !dbg !5984
  store i32 %4, i32* %3, align 8, !dbg !5984
  %5 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %2, i32 0, i32 1, !dbg !5984
  %6 = extractvalue { i32, %union.tree_node* } %call1, 1, !dbg !5984
  store %union.tree_node* %6, %union.tree_node** %5, align 8, !dbg !5984
  %7 = bitcast %struct.prop_value_d* %val to i8*, !dbg !5984
  %8 = bitcast %struct.prop_value_d* %tmp to i8*, !dbg !5984
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !5984
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 1, !dbg !5985
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5985
  %tobool = icmp ne %union.tree_node* %9, null, !dbg !5986
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5986

cond.true:                                        ; preds = %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !5987
  %value2 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 1, !dbg !5988
  %11 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !5988
  %call3 = call %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %10, %union.tree_node* %11), !dbg !5989
  br label %cond.end, !dbg !5986

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5986

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call3, %cond.true ], [ null, %cond.false ], !dbg !5986
  %12 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !5990
  store %struct.edge_def* %cond, %struct.edge_def** %12, align 8, !dbg !5991
  %13 = load %struct.edge_def**, %struct.edge_def*** %taken_edge_p.addr, align 8, !dbg !5992
  %14 = load %struct.edge_def*, %struct.edge_def** %13, align 8, !dbg !5994
  %tobool4 = icmp ne %struct.edge_def* %14, null, !dbg !5994
  br i1 %tobool4, label %if.then, label %if.else, !dbg !5995

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4, !dbg !5996
  br label %return, !dbg !5996

if.else:                                          ; preds = %cond.end
  store i32 2, i32* %retval, align 4, !dbg !5997
  br label %return, !dbg !5997

return:                                           ; preds = %if.else, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !5998
  ret i32 %15, !dbg !5998
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @set_lattice_value(%union.tree_node* %var, i32 %new_val.coerce0, %union.tree_node* %new_val.coerce1) #0 !dbg !5999 {
entry:
  %retval = alloca i8, align 1
  %new_val = alloca %struct.prop_value_d, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %old_val = alloca %struct.prop_value_d*, align 8
  %0 = bitcast %struct.prop_value_d* %new_val to { i32, %union.tree_node* }*
  %1 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 0
  store i32 %new_val.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %new_val.coerce1, %union.tree_node** %2, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %new_val, metadata !6004, metadata !DIExpression()), !dbg !6005
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %old_val, metadata !6006, metadata !DIExpression()), !dbg !6007
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6008
  %call = call %struct.prop_value_d* @get_value(%union.tree_node* %3), !dbg !6009
  store %struct.prop_value_d* %call, %struct.prop_value_d** %old_val, align 8, !dbg !6007
  call void @canonicalize_float_value(%struct.prop_value_d* %new_val), !dbg !6010
  %4 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6011
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %4, i32 0, i32 0, !dbg !6011
  %5 = load i32, i32* %lattice_val, align 8, !dbg !6011
  %lattice_val1 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !6011
  %6 = load i32, i32* %lattice_val1, align 8, !dbg !6011
  %cmp = icmp ult i32 %5, %6, !dbg !6011
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !6011

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6011
  %lattice_val2 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %7, i32 0, i32 0, !dbg !6011
  %8 = load i32, i32* %lattice_val2, align 8, !dbg !6011
  %lattice_val3 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !6011
  %9 = load i32, i32* %lattice_val3, align 8, !dbg !6011
  %cmp4 = icmp eq i32 %8, %9, !dbg !6011
  br i1 %cmp4, label %land.lhs.true, label %cond.true, !dbg !6011

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6011
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %10, i32 0, i32 1, !dbg !6011
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6011
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !6011
  br i1 %tobool, label %lor.lhs.false8, label %land.lhs.true5, !dbg !6011

land.lhs.true5:                                   ; preds = %land.lhs.true
  %value6 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 1, !dbg !6011
  %12 = load %union.tree_node*, %union.tree_node** %value6, align 8, !dbg !6011
  %tobool7 = icmp ne %union.tree_node* %12, null, !dbg !6011
  br i1 %tobool7, label %lor.lhs.false8, label %cond.false, !dbg !6011

lor.lhs.false8:                                   ; preds = %land.lhs.true5, %land.lhs.true
  %13 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6011
  %value9 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %13, i32 0, i32 1, !dbg !6011
  %14 = load %union.tree_node*, %union.tree_node** %value9, align 8, !dbg !6011
  %value10 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 1, !dbg !6011
  %15 = load %union.tree_node*, %union.tree_node** %value10, align 8, !dbg !6011
  %call11 = call i32 @operand_equal_p(%union.tree_node* %14, %union.tree_node* %15, i32 0), !dbg !6011
  %tobool12 = icmp ne i32 %call11, 0, !dbg !6011
  br i1 %tobool12, label %cond.false, label %cond.true, !dbg !6011

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 478, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6011
  br label %cond.end, !dbg !6011

cond.false:                                       ; preds = %lor.lhs.false8, %land.lhs.true5, %entry
  br label %cond.end, !dbg !6011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6011
  %16 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6012
  %lattice_val13 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %16, i32 0, i32 0, !dbg !6014
  %17 = load i32, i32* %lattice_val13, align 8, !dbg !6014
  %lattice_val14 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !6015
  %18 = load i32, i32* %lattice_val14, align 8, !dbg !6015
  %cmp15 = icmp ne i32 %17, %18, !dbg !6016
  br i1 %cmp15, label %if.then, label %if.end27, !dbg !6017

if.then:                                          ; preds = %cond.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6018
  %tobool16 = icmp ne %struct._IO_FILE* %19, null, !dbg !6018
  br i1 %tobool16, label %land.lhs.true17, label %if.end, !dbg !6021

land.lhs.true17:                                  ; preds = %if.then
  %20 = load i32, i32* @dump_flags, align 4, !dbg !6022
  %and = and i32 %20, 8, !dbg !6023
  %tobool18 = icmp ne i32 %and, 0, !dbg !6023
  br i1 %tobool18, label %if.then19, label %if.end, !dbg !6024

if.then19:                                        ; preds = %land.lhs.true17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6025
  %22 = bitcast %struct.prop_value_d* %new_val to { i32, %union.tree_node* }*, !dbg !6027
  %23 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %22, i32 0, i32 0, !dbg !6027
  %24 = load i32, i32* %23, align 8, !dbg !6027
  %25 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %22, i32 0, i32 1, !dbg !6027
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !6027
  call void @dump_lattice_value(%struct._IO_FILE* %21, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18, i64 0, i64 0), i32 %24, %union.tree_node* %26), !dbg !6027
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6028
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0)), !dbg !6029
  br label %if.end, !dbg !6030

if.end:                                           ; preds = %if.then19, %land.lhs.true17, %if.then
  %28 = load %struct.prop_value_d*, %struct.prop_value_d** %old_val, align 8, !dbg !6031
  %29 = bitcast %struct.prop_value_d* %28 to i8*, !dbg !6032
  %30 = bitcast %struct.prop_value_d* %new_val to i8*, !dbg !6032
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false), !dbg !6032
  %lattice_val21 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %new_val, i32 0, i32 0, !dbg !6033
  %31 = load i32, i32* %lattice_val21, align 8, !dbg !6033
  %cmp22 = icmp ne i32 %31, 1, !dbg !6033
  br i1 %cmp22, label %cond.false24, label %cond.true23, !dbg !6033

cond.true23:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 490, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6033
  br label %cond.end25, !dbg !6033

cond.false24:                                     ; preds = %if.end
  br label %cond.end25, !dbg !6033

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !6033
  store i8 1, i8* %retval, align 1, !dbg !6034
  br label %return, !dbg !6034

if.end27:                                         ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6035
  br label %return, !dbg !6035

return:                                           ; preds = %if.end27, %cond.end25
  %32 = load i8, i8* %retval, align 1, !dbg !6036
  ret i8 %32, !dbg !6036
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %union.tree_node* } @evaluate_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !6037 {
entry:
  %retval = alloca %struct.prop_value_d, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %simplified = alloca %union.tree_node*, align 8
  %likelyvalue = alloca i32, align 4
  %is_constant = alloca i8, align 1
  %code = alloca i32, align 4
  %subcode = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %retval, metadata !6042, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata %union.tree_node** %simplified, metadata !6044, metadata !DIExpression()), !dbg !6045
  store %union.tree_node* null, %union.tree_node** %simplified, align 8, !dbg !6045
  call void @llvm.dbg.declare(metadata i32* %likelyvalue, metadata !6046, metadata !DIExpression()), !dbg !6048
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6049
  %call = call i32 @likely_value(%union.gimple_statement_d* %0), !dbg !6050
  store i32 %call, i32* %likelyvalue, align 4, !dbg !6048
  call void @llvm.dbg.declare(metadata i8* %is_constant, metadata !6051, metadata !DIExpression()), !dbg !6052
  call void @fold_defer_overflow_warnings(), !dbg !6053
  %1 = load i32, i32* %likelyvalue, align 4, !dbg !6054
  %cmp = icmp eq i32 %1, 2, !dbg !6056
  br i1 %cmp, label %if.then, label %if.else, !dbg !6057

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6058
  %call1 = call %union.tree_node* @ccp_fold(%union.gimple_statement_d* %2), !dbg !6059
  store %union.tree_node* %call1, %union.tree_node** %simplified, align 8, !dbg !6060
  br label %if.end22, !dbg !6061

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %likelyvalue, align 4, !dbg !6062
  %cmp2 = icmp eq i32 %3, 3, !dbg !6064
  br i1 %cmp2, label %if.then3, label %if.end21, !dbg !6065

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6066, metadata !DIExpression()), !dbg !6068
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6069
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !6070
  store i32 %call4, i32* %code, align 4, !dbg !6068
  %5 = load i32, i32* %code, align 4, !dbg !6071
  %cmp5 = icmp eq i32 %5, 6, !dbg !6073
  br i1 %cmp5, label %if.then6, label %if.else12, !dbg !6074

if.then6:                                         ; preds = %if.then3
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !6075, metadata !DIExpression()), !dbg !6077
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6078
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %6), !dbg !6079
  store i32 %call7, i32* %subcode, align 4, !dbg !6077
  %7 = load i32, i32* %subcode, align 4, !dbg !6080
  %call8 = call i32 @get_gimple_rhs_class(i32 %7), !dbg !6082
  %cmp9 = icmp eq i32 %call8, 3, !dbg !6083
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !6084

if.then10:                                        ; preds = %if.then6
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6085
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !6086
  store %union.tree_node* %call11, %union.tree_node** %simplified, align 8, !dbg !6087
  br label %if.end, !dbg !6088

if.end:                                           ; preds = %if.then10, %if.then6
  br label %if.end20, !dbg !6089

if.else12:                                        ; preds = %if.then3
  %9 = load i32, i32* %code, align 4, !dbg !6090
  %cmp13 = icmp eq i32 %9, 5, !dbg !6092
  br i1 %cmp13, label %if.then14, label %if.else16, !dbg !6093

if.then14:                                        ; preds = %if.else12
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6094
  %call15 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %10), !dbg !6095
  store %union.tree_node* %call15, %union.tree_node** %simplified, align 8, !dbg !6096
  br label %if.end19, !dbg !6097

if.else16:                                        ; preds = %if.else12
  %11 = load i32, i32* %code, align 4, !dbg !6098
  %cmp17 = icmp eq i32 %11, 8, !dbg !6098
  br i1 %cmp17, label %cond.false, label %lor.lhs.false, !dbg !6098

lor.lhs.false:                                    ; preds = %if.else16
  %12 = load i32, i32* %code, align 4, !dbg !6098
  %cmp18 = icmp eq i32 %12, 1, !dbg !6098
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !6098

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 1434, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6098
  br label %cond.end, !dbg !6098

cond.false:                                       ; preds = %lor.lhs.false, %if.else16
  br label %cond.end, !dbg !6098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6098
  br label %if.end19

if.end19:                                         ; preds = %cond.end, %if.then14
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.end
  br label %if.end21, !dbg !6099

if.end21:                                         ; preds = %if.end20, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !6100
  %tobool = icmp ne %union.tree_node* %13, null, !dbg !6100
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6101

land.rhs:                                         ; preds = %if.end22
  %14 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !6102
  %call23 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %14), !dbg !6103
  %conv = zext i8 %call23 to i32, !dbg !6103
  %tobool24 = icmp ne i32 %conv, 0, !dbg !6101
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end22
  %15 = phi i1 [ false, %if.end22 ], [ %tobool24, %land.rhs ], !dbg !6104
  %land.ext = zext i1 %15 to i32, !dbg !6101
  %conv25 = trunc i32 %land.ext to i8, !dbg !6100
  store i8 %conv25, i8* %is_constant, align 1, !dbg !6105
  %16 = load i8, i8* %is_constant, align 1, !dbg !6106
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6107
  call void @fold_undefer_overflow_warnings(i8 zeroext %16, %union.gimple_statement_d* %17, i32 0), !dbg !6108
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6109
  %tobool26 = icmp ne %struct._IO_FILE* %18, null, !dbg !6109
  br i1 %tobool26, label %land.lhs.true, label %if.end36, !dbg !6111

land.lhs.true:                                    ; preds = %land.end
  %19 = load i32, i32* @dump_flags, align 4, !dbg !6112
  %and = and i32 %19, 8, !dbg !6113
  %tobool27 = icmp ne i32 %and, 0, !dbg !6113
  br i1 %tobool27, label %if.then28, label %if.end36, !dbg !6114

if.then28:                                        ; preds = %land.lhs.true
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6115
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0)), !dbg !6117
  %21 = load i32, i32* %likelyvalue, align 4, !dbg !6118
  switch i32 %21, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb31
    i32 3, label %sw.bb33
  ], !dbg !6119

sw.bb:                                            ; preds = %if.then28
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6120
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0)), !dbg !6122
  br label %sw.epilog, !dbg !6123

sw.bb31:                                          ; preds = %if.then28
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6124
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0)), !dbg !6125
  br label %sw.epilog, !dbg !6126

sw.bb33:                                          ; preds = %if.then28
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6127
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0)), !dbg !6128
  br label %sw.epilog, !dbg !6129

sw.default:                                       ; preds = %if.then28
  br label %sw.epilog, !dbg !6130

sw.epilog:                                        ; preds = %sw.default, %sw.bb33, %sw.bb31, %sw.bb
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6131
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6132
  br label %if.end36, !dbg !6133

if.end36:                                         ; preds = %sw.epilog, %land.lhs.true, %land.end
  %26 = load i8, i8* %is_constant, align 1, !dbg !6134
  %tobool37 = icmp ne i8 %26, 0, !dbg !6134
  br i1 %tobool37, label %if.then38, label %if.else39, !dbg !6136

if.then38:                                        ; preds = %if.end36
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !6137
  store i32 2, i32* %lattice_val, align 8, !dbg !6139
  %27 = load %union.tree_node*, %union.tree_node** %simplified, align 8, !dbg !6140
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 1, !dbg !6141
  store %union.tree_node* %27, %union.tree_node** %value, align 8, !dbg !6142
  br label %if.end48, !dbg !6143

if.else39:                                        ; preds = %if.end36
  %28 = load i32, i32* %likelyvalue, align 4, !dbg !6144
  %cmp40 = icmp eq i32 %28, 1, !dbg !6147
  br i1 %cmp40, label %if.then42, label %if.else44, !dbg !6148

if.then42:                                        ; preds = %if.else39
  %29 = load i32, i32* %likelyvalue, align 4, !dbg !6149
  %lattice_val43 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !6150
  store i32 %29, i32* %lattice_val43, align 8, !dbg !6151
  br label %if.end46, !dbg !6152

if.else44:                                        ; preds = %if.else39
  %lattice_val45 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 0, !dbg !6153
  store i32 3, i32* %lattice_val45, align 8, !dbg !6154
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.then42
  %value47 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %retval, i32 0, i32 1, !dbg !6155
  store %union.tree_node* null, %union.tree_node** %value47, align 8, !dbg !6156
  br label %if.end48

if.end48:                                         ; preds = %if.end46, %if.then38
  %30 = bitcast %struct.prop_value_d* %retval to { i32, %union.tree_node* }*, !dbg !6157
  %31 = load { i32, %union.tree_node* }, { i32, %union.tree_node* }* %30, align 8, !dbg !6157
  ret { i32, %union.tree_node* } %31, !dbg !6157
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @likely_value(%union.gimple_statement_d* %stmt) #0 !dbg !6158 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %has_constant_operand = alloca i8, align 1
  %has_undefined_operand = alloca i8, align 1
  %all_undefined_operands = alloca i8, align 1
  %use = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %val = alloca %struct.prop_value_d*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6161, metadata !DIExpression()), !dbg !6162
  call void @llvm.dbg.declare(metadata i8* %has_constant_operand, metadata !6163, metadata !DIExpression()), !dbg !6164
  call void @llvm.dbg.declare(metadata i8* %has_undefined_operand, metadata !6165, metadata !DIExpression()), !dbg !6166
  call void @llvm.dbg.declare(metadata i8* %all_undefined_operands, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6171, metadata !DIExpression()), !dbg !6172
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6173, metadata !DIExpression()), !dbg !6174
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6175, metadata !DIExpression()), !dbg !6176
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6177
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6178
  store i32 %call, i32* %code, align 4, !dbg !6176
  %1 = load i32, i32* %code, align 4, !dbg !6179
  %cmp = icmp eq i32 %1, 6, !dbg !6179
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !6179

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6179
  %cmp1 = icmp eq i32 %2, 8, !dbg !6179
  br i1 %cmp1, label %cond.false, label %lor.lhs.false2, !dbg !6179

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %code, align 4, !dbg !6179
  %cmp3 = icmp eq i32 %3, 1, !dbg !6179
  br i1 %cmp3, label %cond.false, label %lor.lhs.false4, !dbg !6179

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %code, align 4, !dbg !6179
  %cmp5 = icmp eq i32 %4, 5, !dbg !6179
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !6179

cond.true:                                        ; preds = %lor.lhs.false4
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 524, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6179
  br label %cond.end, !dbg !6179

cond.false:                                       ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  br label %cond.end, !dbg !6179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6179
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6180
  %call6 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %5), !dbg !6182
  %tobool = icmp ne i8 %call6, 0, !dbg !6182
  br i1 %tobool, label %if.then, label %if.end, !dbg !6183

if.then:                                          ; preds = %cond.end
  store i32 3, i32* %retval, align 4, !dbg !6184
  br label %return, !dbg !6184

if.end:                                           ; preds = %cond.end
  store i8 0, i8* %has_constant_operand, align 1, !dbg !6185
  store i8 0, i8* %has_undefined_operand, align 1, !dbg !6186
  store i8 1, i8* %all_undefined_operands, align 1, !dbg !6187
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6188
  %call7 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %6, i32 1), !dbg !6188
  store %union.tree_node* %call7, %union.tree_node** %use, align 8, !dbg !6188
  br label %for.cond, !dbg !6188

for.cond:                                         ; preds = %for.inc, %if.end
  %call8 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6190
  %tobool9 = icmp ne i8 %call8, 0, !dbg !6190
  %lnot = xor i1 %tobool9, true, !dbg !6190
  br i1 %lnot, label %for.body, label %for.end, !dbg !6188

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val, metadata !6192, metadata !DIExpression()), !dbg !6194
  %7 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6195
  %call10 = call %struct.prop_value_d* @get_value(%union.tree_node* %7), !dbg !6196
  store %struct.prop_value_d* %call10, %struct.prop_value_d** %val, align 8, !dbg !6194
  %8 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6197
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %8, i32 0, i32 0, !dbg !6199
  %9 = load i32, i32* %lattice_val, align 8, !dbg !6199
  %cmp11 = icmp eq i32 %9, 1, !dbg !6200
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !6201

if.then12:                                        ; preds = %for.body
  store i8 1, i8* %has_undefined_operand, align 1, !dbg !6202
  br label %if.end13, !dbg !6203

if.else:                                          ; preds = %for.body
  store i8 0, i8* %all_undefined_operands, align 1, !dbg !6204
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %10 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6205
  %lattice_val14 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %10, i32 0, i32 0, !dbg !6207
  %11 = load i32, i32* %lattice_val14, align 8, !dbg !6207
  %cmp15 = icmp eq i32 %11, 2, !dbg !6208
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !6209

if.then16:                                        ; preds = %if.end13
  store i8 1, i8* %has_constant_operand, align 1, !dbg !6210
  br label %if.end17, !dbg !6211

if.end17:                                         ; preds = %if.then16, %if.end13
  br label %for.inc, !dbg !6212

for.inc:                                          ; preds = %if.end17
  %call18 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !6190
  store %union.tree_node* %call18, %union.tree_node** %use, align 8, !dbg !6190
  br label %for.cond, !dbg !6190, !llvm.loop !6213

for.end:                                          ; preds = %for.cond
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6215
  %call19 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %12), !dbg !6217
  %conv = zext i8 %call19 to i32, !dbg !6217
  %tobool20 = icmp ne i32 %conv, 0, !dbg !6217
  %13 = zext i1 %tobool20 to i64, !dbg !6217
  %cond21 = select i1 %tobool20, i32 2, i32 0, !dbg !6217
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6218
  %call22 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %14), !dbg !6219
  %conv23 = zext i8 %call22 to i32, !dbg !6219
  %add = add nsw i32 %cond21, %conv23, !dbg !6220
  store i32 %add, i32* %i, align 4, !dbg !6221
  br label %for.cond24, !dbg !6222

for.cond24:                                       ; preds = %for.inc40, %for.end
  %15 = load i32, i32* %i, align 4, !dbg !6223
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6225
  %call25 = call i32 @gimple_num_ops(%union.gimple_statement_d* %16), !dbg !6226
  %cmp26 = icmp ult i32 %15, %call25, !dbg !6227
  br i1 %cmp26, label %for.body28, label %for.end41, !dbg !6228

for.body28:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6229, metadata !DIExpression()), !dbg !6231
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6232
  %18 = load i32, i32* %i, align 4, !dbg !6233
  %call29 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %17, i32 %18), !dbg !6234
  store %union.tree_node* %call29, %union.tree_node** %op, align 8, !dbg !6231
  %19 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6235
  %tobool30 = icmp ne %union.tree_node* %19, null, !dbg !6235
  br i1 %tobool30, label %lor.lhs.false31, label %if.then34, !dbg !6237

lor.lhs.false31:                                  ; preds = %for.body28
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6238
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6238
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !6238
  %bf.load = load i64, i64* %21, align 8, !dbg !6238
  %bf.clear = and i64 %bf.load, 65535, !dbg !6238
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6238
  %cmp32 = icmp eq i32 %bf.cast, 141, !dbg !6239
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !6240

if.then34:                                        ; preds = %lor.lhs.false31, %for.body28
  br label %for.inc40, !dbg !6241

if.end35:                                         ; preds = %lor.lhs.false31
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6242
  %call36 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %22), !dbg !6244
  %tobool37 = icmp ne i8 %call36, 0, !dbg !6244
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !6245

if.then38:                                        ; preds = %if.end35
  store i8 1, i8* %has_constant_operand, align 1, !dbg !6246
  br label %if.end39, !dbg !6247

if.end39:                                         ; preds = %if.then38, %if.end35
  br label %for.inc40, !dbg !6248

for.inc40:                                        ; preds = %if.end39, %if.then34
  %23 = load i32, i32* %i, align 4, !dbg !6249
  %inc = add i32 %23, 1, !dbg !6249
  store i32 %inc, i32* %i, align 4, !dbg !6249
  br label %for.cond24, !dbg !6250, !llvm.loop !6251

for.end41:                                        ; preds = %for.cond24
  %24 = load i8, i8* %has_constant_operand, align 1, !dbg !6253
  %tobool42 = icmp ne i8 %24, 0, !dbg !6253
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !6255

if.then43:                                        ; preds = %for.end41
  store i8 0, i8* %all_undefined_operands, align 1, !dbg !6256
  br label %if.end44, !dbg !6257

if.end44:                                         ; preds = %if.then43, %for.end41
  %25 = load i8, i8* %has_undefined_operand, align 1, !dbg !6258
  %conv45 = zext i8 %25 to i32, !dbg !6258
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !6258
  br i1 %tobool46, label %land.lhs.true, label %if.else50, !dbg !6260

land.lhs.true:                                    ; preds = %if.end44
  %26 = load i8, i8* %all_undefined_operands, align 1, !dbg !6261
  %conv47 = zext i8 %26 to i32, !dbg !6261
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !6261
  br i1 %tobool48, label %if.then49, label %if.else50, !dbg !6262

if.then49:                                        ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !6263
  br label %return, !dbg !6263

if.else50:                                        ; preds = %land.lhs.true, %if.end44
  %27 = load i32, i32* %code, align 4, !dbg !6264
  %cmp51 = icmp eq i32 %27, 6, !dbg !6266
  br i1 %cmp51, label %land.lhs.true53, label %if.end58, !dbg !6267

land.lhs.true53:                                  ; preds = %if.else50
  %28 = load i8, i8* %has_undefined_operand, align 1, !dbg !6268
  %conv54 = zext i8 %28 to i32, !dbg !6268
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !6268
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !6269

if.then56:                                        ; preds = %land.lhs.true53
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6270
  %call57 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %29), !dbg !6272
  switch i32 %call57, label %sw.default [
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 66, label %sw.bb
  ], !dbg !6273

sw.bb:                                            ; preds = %if.then56, %if.then56, %if.then56
  store i32 1, i32* %retval, align 4, !dbg !6274
  br label %return, !dbg !6274

sw.default:                                       ; preds = %if.then56
  br label %sw.epilog, !dbg !6276

sw.epilog:                                        ; preds = %sw.default
  br label %if.end58, !dbg !6277

if.end58:                                         ; preds = %sw.epilog, %land.lhs.true53, %if.else50
  br label %if.end59

if.end59:                                         ; preds = %if.end58
  %30 = load i8, i8* %has_undefined_operand, align 1, !dbg !6278
  %tobool60 = icmp ne i8 %30, 0, !dbg !6278
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !6280

if.then61:                                        ; preds = %if.end59
  store i32 3, i32* %retval, align 4, !dbg !6281
  br label %return, !dbg !6281

if.end62:                                         ; preds = %if.end59
  %31 = load i8, i8* %has_constant_operand, align 1, !dbg !6282
  %conv63 = zext i8 %31 to i32, !dbg !6282
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !6282
  br i1 %tobool64, label %if.then69, label %lor.lhs.false65, !dbg !6284

lor.lhs.false65:                                  ; preds = %if.end62
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6285
  %call66 = call zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %32), !dbg !6286
  %conv67 = zext i8 %call66 to i32, !dbg !6286
  %tobool68 = icmp ne i32 %conv67, 0, !dbg !6286
  br i1 %tobool68, label %if.then69, label %if.end70, !dbg !6287

if.then69:                                        ; preds = %lor.lhs.false65, %if.end62
  store i32 2, i32* %retval, align 4, !dbg !6288
  br label %return, !dbg !6288

if.end70:                                         ; preds = %lor.lhs.false65
  store i32 3, i32* %retval, align 4, !dbg !6289
  br label %return, !dbg !6289

return:                                           ; preds = %if.end70, %if.then69, %if.then61, %sw.bb, %if.then49, %if.then
  %33 = load i32, i32* %retval, align 4, !dbg !6290
  ret i32 %33, !dbg !6290
}

declare dso_local void @fold_defer_overflow_warnings() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ccp_fold(%union.gimple_statement_d* %stmt) #0 !dbg !6291 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  %subcode = alloca i32, align 4
  %rhs = alloca %union.tree_node*, align 8
  %kind = alloca i32, align 4
  %base13 = alloca %union.tree_node**, align 8
  %val = alloca %struct.prop_value_d*, align 8
  %ret = alloca %union.tree_node*, align 8
  %save = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %val85 = alloca %union.tree_node*, align 8
  %list = alloca %union.tree_node*, align 8
  %val195 = alloca %struct.prop_value_d*, align 8
  %val253 = alloca %struct.prop_value_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %val306 = alloca %struct.prop_value_d*, align 8
  %tem = alloca %union.tree_node*, align 8
  %op0396 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %val406 = alloca %struct.prop_value_d*, align 8
  %val422 = alloca %struct.prop_value_d*, align 8
  %tem449 = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %val462 = alloca %struct.prop_value_d*, align 8
  %args = alloca %union.tree_node**, align 8
  %call506 = alloca %union.tree_node*, align 8
  %retval507 = alloca %union.tree_node*, align 8
  %i508 = alloca i32, align 4
  %op0574 = alloca %union.tree_node*, align 8
  %op1576 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %val586 = alloca %struct.prop_value_d*, align 8
  %val602 = alloca %struct.prop_value_d*, align 8
  %rhs613 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6294, metadata !DIExpression()), !dbg !6295
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6296, metadata !DIExpression()), !dbg !6297
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6298
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !6299
  store i32 %call, i32* %loc, align 4, !dbg !6297
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6300
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6301
  switch i32 %call1, label %sw.default625 [
    i32 6, label %sw.bb
    i32 8, label %sw.bb460
    i32 1, label %sw.bb573
    i32 5, label %sw.bb612
  ], !dbg !6302

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !6303, metadata !DIExpression()), !dbg !6306
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6307
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !6308
  store i32 %call2, i32* %subcode, align 4, !dbg !6306
  %3 = load i32, i32* %subcode, align 4, !dbg !6309
  %call3 = call i32 @get_gimple_rhs_class(i32 %3), !dbg !6310
  switch i32 %call3, label %sw.default [
    i32 3, label %sw.bb4
    i32 2, label %sw.bb296
    i32 1, label %sw.bb395
  ], !dbg !6311

sw.bb4:                                           ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6312, metadata !DIExpression()), !dbg !6315
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6316
  %call5 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !6317
  store %union.tree_node* %call5, %union.tree_node** %rhs, align 8, !dbg !6315
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !6318, metadata !DIExpression()), !dbg !6319
  %5 = load i32, i32* %subcode, align 4, !dbg !6320
  %idxprom = sext i32 %5 to i64, !dbg !6320
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6320
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6320
  store i32 %6, i32* %kind, align 4, !dbg !6319
  %7 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6321
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6321
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !6321
  %bf.load = load i64, i64* %8, align 8, !dbg !6321
  %bf.clear = and i64 %bf.load, 65535, !dbg !6321
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6321
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6323
  br i1 %cmp, label %if.then, label %if.else, !dbg !6324

if.then:                                          ; preds = %sw.bb4
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6325
  %call6 = call %struct.prop_value_d* @get_value(%union.tree_node* %9), !dbg !6327
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %call6, i32 0, i32 1, !dbg !6328
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6328
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !6329
  br label %return, !dbg !6329

if.else:                                          ; preds = %sw.bb4
  %11 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6330
  %base7 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6330
  %12 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6330
  %bf.load8 = load i64, i64* %12, align 8, !dbg !6330
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6330
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6330
  %cmp11 = icmp eq i32 %bf.cast10, 121, !dbg !6332
  br i1 %cmp11, label %if.then12, label %if.else56, !dbg !6333

if.then12:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node*** %base13, metadata !6334, metadata !DIExpression()), !dbg !6336
  %13 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6337
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !6337
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6337
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6337
  store %union.tree_node** %arrayidx14, %union.tree_node*** %base13, align 8, !dbg !6338
  br label %while.cond, !dbg !6339

while.cond:                                       ; preds = %while.body, %if.then12
  %14 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6340
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !6341
  %call15 = call zeroext i8 @handled_component_p(%union.tree_node* %15), !dbg !6342
  %tobool = icmp ne i8 %call15, 0, !dbg !6339
  br i1 %tobool, label %while.body, label %while.end, !dbg !6339

while.body:                                       ; preds = %while.cond
  %16 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6343
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !6343
  %exp16 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !6343
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !6343
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 0, !dbg !6343
  store %union.tree_node** %arrayidx18, %union.tree_node*** %base13, align 8, !dbg !6344
  br label %while.cond, !dbg !6339, !llvm.loop !6345

while.end:                                        ; preds = %while.cond
  %18 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6346
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !6346
  %base19 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6346
  %20 = bitcast %struct.tree_base* %base19 to i64*, !dbg !6346
  %bf.load20 = load i64, i64* %20, align 8, !dbg !6346
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !6346
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !6346
  %cmp23 = icmp eq i32 %bf.cast22, 47, !dbg !6348
  br i1 %cmp23, label %land.lhs.true, label %if.end55, !dbg !6349

land.lhs.true:                                    ; preds = %while.end
  %21 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6350
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !6350
  %exp24 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !6350
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !6350
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 0, !dbg !6350
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !6350
  %base27 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6350
  %24 = bitcast %struct.tree_base* %base27 to i64*, !dbg !6350
  %bf.load28 = load i64, i64* %24, align 8, !dbg !6350
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !6350
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !6350
  %cmp31 = icmp eq i32 %bf.cast30, 141, !dbg !6351
  br i1 %cmp31, label %if.then32, label %if.end55, !dbg !6352

if.then32:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val, metadata !6353, metadata !DIExpression()), !dbg !6355
  %25 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6356
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !6356
  %exp33 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !6356
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !6356
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i64 0, i64 0, !dbg !6356
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !6356
  %call36 = call %struct.prop_value_d* @get_value(%union.tree_node* %27), !dbg !6357
  store %struct.prop_value_d* %call36, %struct.prop_value_d** %val, align 8, !dbg !6355
  %28 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6358
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %28, i32 0, i32 0, !dbg !6360
  %29 = load i32, i32* %lattice_val, align 8, !dbg !6360
  %cmp37 = icmp eq i32 %29, 2, !dbg !6361
  br i1 %cmp37, label %land.lhs.true38, label %if.end, !dbg !6362

land.lhs.true38:                                  ; preds = %if.then32
  %30 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6363
  %value39 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %30, i32 0, i32 1, !dbg !6363
  %31 = load %union.tree_node*, %union.tree_node** %value39, align 8, !dbg !6363
  %base40 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6363
  %32 = bitcast %struct.tree_base* %base40 to i64*, !dbg !6363
  %bf.load41 = load i64, i64* %32, align 8, !dbg !6363
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !6363
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !6363
  %cmp44 = icmp eq i32 %bf.cast43, 121, !dbg !6364
  br i1 %cmp44, label %land.lhs.true45, label %if.end, !dbg !6365

land.lhs.true45:                                  ; preds = %land.lhs.true38
  %33 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6366
  %value46 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %33, i32 0, i32 1, !dbg !6367
  %34 = load %union.tree_node*, %union.tree_node** %value46, align 8, !dbg !6367
  %35 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6368
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !6369
  %call47 = call zeroext i8 @may_propagate_address_into_dereference(%union.tree_node* %34, %union.tree_node* %36), !dbg !6370
  %conv = zext i8 %call47 to i32, !dbg !6370
  %tobool48 = icmp ne i32 %conv, 0, !dbg !6370
  br i1 %tobool48, label %if.then49, label %if.end, !dbg !6371

if.then49:                                        ; preds = %land.lhs.true45
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6372, metadata !DIExpression()), !dbg !6374
  call void @llvm.dbg.declare(metadata %union.tree_node** %save, metadata !6375, metadata !DIExpression()), !dbg !6376
  %37 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6377
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !6378
  store %union.tree_node* %38, %union.tree_node** %save, align 8, !dbg !6376
  %39 = load %struct.prop_value_d*, %struct.prop_value_d** %val, align 8, !dbg !6379
  %value50 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %39, i32 0, i32 1, !dbg !6379
  %40 = load %union.tree_node*, %union.tree_node** %value50, align 8, !dbg !6379
  %exp51 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !6379
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !6379
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 0, !dbg !6379
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !6379
  %42 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6380
  store %union.tree_node* %41, %union.tree_node** %42, align 8, !dbg !6381
  %43 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6382
  %call54 = call %union.tree_node* @unshare_expr(%union.tree_node* %43), !dbg !6383
  store %union.tree_node* %call54, %union.tree_node** %ret, align 8, !dbg !6384
  %44 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6385
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %44), !dbg !6386
  %45 = load %union.tree_node*, %union.tree_node** %save, align 8, !dbg !6387
  %46 = load %union.tree_node**, %union.tree_node*** %base13, align 8, !dbg !6388
  store %union.tree_node* %45, %union.tree_node** %46, align 8, !dbg !6389
  %47 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6390
  store %union.tree_node* %47, %union.tree_node** %retval, align 8, !dbg !6391
  br label %return, !dbg !6391

if.end:                                           ; preds = %land.lhs.true45, %land.lhs.true38, %if.then32
  br label %if.end55, !dbg !6392

if.end55:                                         ; preds = %if.end, %land.lhs.true, %while.end
  br label %if.end159, !dbg !6393

if.else56:                                        ; preds = %if.else
  %48 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6394
  %base57 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !6394
  %49 = bitcast %struct.tree_base* %base57 to i64*, !dbg !6394
  %bf.load58 = load i64, i64* %49, align 8, !dbg !6394
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !6394
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !6394
  %cmp61 = icmp eq i32 %bf.cast60, 51, !dbg !6396
  br i1 %cmp61, label %land.lhs.true63, label %if.end158, !dbg !6397

land.lhs.true63:                                  ; preds = %if.else56
  %50 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6398
  %common = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !6398
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6398
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6398
  %base64 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6398
  %52 = bitcast %struct.tree_base* %base64 to i64*, !dbg !6398
  %bf.load65 = load i64, i64* %52, align 8, !dbg !6398
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !6398
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !6398
  %cmp68 = icmp eq i32 %bf.cast67, 14, !dbg !6399
  br i1 %cmp68, label %land.lhs.true70, label %if.end158, !dbg !6400

land.lhs.true70:                                  ; preds = %land.lhs.true63
  %53 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6401
  %constructor = bitcast %union.tree_node* %53 to %struct.tree_constructor*, !dbg !6401
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !6401
  %54 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !6401
  %tobool71 = icmp ne %struct.VEC_constructor_elt_gc* %54, null, !dbg !6401
  br i1 %tobool71, label %cond.true, label %cond.false, !dbg !6401

cond.true:                                        ; preds = %land.lhs.true70
  %55 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6401
  %constructor72 = bitcast %union.tree_node* %55 to %struct.tree_constructor*, !dbg !6401
  %elts73 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor72, i32 0, i32 1, !dbg !6401
  %56 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts73, align 8, !dbg !6401
  %base74 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %56, i32 0, i32 0, !dbg !6401
  br label %cond.end, !dbg !6401

cond.false:                                       ; preds = %land.lhs.true70
  br label %cond.end, !dbg !6401

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base74, %cond.true ], [ null, %cond.false ], !dbg !6401
  %call75 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !6401
  %conv76 = zext i32 %call75 to i64, !dbg !6401
  %57 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6402
  %common77 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !6402
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !6402
  %58 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !6402
  %type79 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !6402
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 6, !dbg !6402
  %bf.load80 = load i32, i32* %precision, align 4, !dbg !6402
  %bf.clear81 = and i32 %bf.load80, 1023, !dbg !6402
  %sh_prom = zext i32 %bf.clear81 to i64, !dbg !6402
  %shl = shl i64 1, %sh_prom, !dbg !6402
  %cmp82 = icmp eq i64 %conv76, %shl, !dbg !6403
  br i1 %cmp82, label %if.then84, label %if.end158, !dbg !6404

if.then84:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6405, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata %union.tree_node** %val85, metadata !6408, metadata !DIExpression()), !dbg !6409
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !6410, metadata !DIExpression()), !dbg !6411
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !6412
  store i32 0, i32* %i, align 4, !dbg !6413
  br label %for.cond, !dbg !6413

for.cond:                                         ; preds = %for.inc, %if.then84
  %59 = load i32, i32* %i, align 4, !dbg !6415
  %60 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6415
  %constructor86 = bitcast %union.tree_node* %60 to %struct.tree_constructor*, !dbg !6415
  %elts87 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor86, i32 0, i32 1, !dbg !6415
  %61 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts87, align 8, !dbg !6415
  %tobool88 = icmp ne %struct.VEC_constructor_elt_gc* %61, null, !dbg !6415
  br i1 %tobool88, label %cond.true89, label %cond.false93, !dbg !6415

cond.true89:                                      ; preds = %for.cond
  %62 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6415
  %constructor90 = bitcast %union.tree_node* %62 to %struct.tree_constructor*, !dbg !6415
  %elts91 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor90, i32 0, i32 1, !dbg !6415
  %63 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts91, align 8, !dbg !6415
  %base92 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %63, i32 0, i32 0, !dbg !6415
  br label %cond.end94, !dbg !6415

cond.false93:                                     ; preds = %for.cond
  br label %cond.end94, !dbg !6415

cond.end94:                                       ; preds = %cond.false93, %cond.true89
  %cond95 = phi %struct.VEC_constructor_elt_base* [ %base92, %cond.true89 ], [ null, %cond.false93 ], !dbg !6415
  %call96 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond95), !dbg !6415
  %cmp97 = icmp uge i32 %59, %call96, !dbg !6415
  br i1 %cmp97, label %cond.true99, label %cond.false100, !dbg !6415

cond.true99:                                      ; preds = %cond.end94
  br label %cond.end113, !dbg !6415

cond.false100:                                    ; preds = %cond.end94
  %64 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6415
  %constructor101 = bitcast %union.tree_node* %64 to %struct.tree_constructor*, !dbg !6415
  %elts102 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor101, i32 0, i32 1, !dbg !6415
  %65 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts102, align 8, !dbg !6415
  %tobool103 = icmp ne %struct.VEC_constructor_elt_gc* %65, null, !dbg !6415
  br i1 %tobool103, label %cond.true104, label %cond.false108, !dbg !6415

cond.true104:                                     ; preds = %cond.false100
  %66 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6415
  %constructor105 = bitcast %union.tree_node* %66 to %struct.tree_constructor*, !dbg !6415
  %elts106 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor105, i32 0, i32 1, !dbg !6415
  %67 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts106, align 8, !dbg !6415
  %base107 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %67, i32 0, i32 0, !dbg !6415
  br label %cond.end109, !dbg !6415

cond.false108:                                    ; preds = %cond.false100
  br label %cond.end109, !dbg !6415

cond.end109:                                      ; preds = %cond.false108, %cond.true104
  %cond110 = phi %struct.VEC_constructor_elt_base* [ %base107, %cond.true104 ], [ null, %cond.false108 ], !dbg !6415
  %68 = load i32, i32* %i, align 4, !dbg !6415
  %call111 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond110, i32 %68), !dbg !6415
  %value112 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call111, i32 0, i32 1, !dbg !6415
  %69 = load %union.tree_node*, %union.tree_node** %value112, align 8, !dbg !6415
  store %union.tree_node* %69, %union.tree_node** %val85, align 8, !dbg !6415
  br label %cond.end113, !dbg !6415

cond.end113:                                      ; preds = %cond.end109, %cond.true99
  %cond114 = phi i32 [ 0, %cond.true99 ], [ 1, %cond.end109 ], !dbg !6415
  %tobool115 = icmp ne i32 %cond114, 0, !dbg !6413
  br i1 %tobool115, label %for.body, label %for.end, !dbg !6413

for.body:                                         ; preds = %cond.end113
  %70 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6417
  %base116 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !6417
  %71 = bitcast %struct.tree_base* %base116 to i64*, !dbg !6417
  %bf.load117 = load i64, i64* %71, align 8, !dbg !6417
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !6417
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !6417
  %cmp120 = icmp eq i32 %bf.cast119, 141, !dbg !6420
  br i1 %cmp120, label %land.lhs.true122, label %if.end130, !dbg !6421

land.lhs.true122:                                 ; preds = %for.body
  %72 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6422
  %call123 = call %struct.prop_value_d* @get_value(%union.tree_node* %72), !dbg !6423
  %lattice_val124 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %call123, i32 0, i32 0, !dbg !6424
  %73 = load i32, i32* %lattice_val124, align 8, !dbg !6424
  %cmp125 = icmp eq i32 %73, 2, !dbg !6425
  br i1 %cmp125, label %if.then127, label %if.end130, !dbg !6426

if.then127:                                       ; preds = %land.lhs.true122
  %74 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6427
  %call128 = call %struct.prop_value_d* @get_value(%union.tree_node* %74), !dbg !6428
  %value129 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %call128, i32 0, i32 1, !dbg !6429
  %75 = load %union.tree_node*, %union.tree_node** %value129, align 8, !dbg !6429
  store %union.tree_node* %75, %union.tree_node** %val85, align 8, !dbg !6430
  br label %if.end130, !dbg !6431

if.end130:                                        ; preds = %if.then127, %land.lhs.true122, %for.body
  %76 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6432
  %base131 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !6432
  %77 = bitcast %struct.tree_base* %base131 to i64*, !dbg !6432
  %bf.load132 = load i64, i64* %77, align 8, !dbg !6432
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !6432
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !6432
  %cmp135 = icmp eq i32 %bf.cast134, 23, !dbg !6434
  br i1 %cmp135, label %if.then150, label %lor.lhs.false, !dbg !6435

lor.lhs.false:                                    ; preds = %if.end130
  %78 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6436
  %base137 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !6436
  %79 = bitcast %struct.tree_base* %base137 to i64*, !dbg !6436
  %bf.load138 = load i64, i64* %79, align 8, !dbg !6436
  %bf.clear139 = and i64 %bf.load138, 65535, !dbg !6436
  %bf.cast140 = trunc i64 %bf.clear139 to i32, !dbg !6436
  %cmp141 = icmp eq i32 %bf.cast140, 24, !dbg !6437
  br i1 %cmp141, label %if.then150, label %lor.lhs.false143, !dbg !6438

lor.lhs.false143:                                 ; preds = %lor.lhs.false
  %80 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6439
  %base144 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !6439
  %81 = bitcast %struct.tree_base* %base144 to i64*, !dbg !6439
  %bf.load145 = load i64, i64* %81, align 8, !dbg !6439
  %bf.clear146 = and i64 %bf.load145, 65535, !dbg !6439
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !6439
  %cmp148 = icmp eq i32 %bf.cast147, 25, !dbg !6440
  br i1 %cmp148, label %if.then150, label %if.else152, !dbg !6441

if.then150:                                       ; preds = %lor.lhs.false143, %lor.lhs.false, %if.end130
  %82 = load %union.tree_node*, %union.tree_node** %val85, align 8, !dbg !6442
  %83 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6442
  %call151 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %82, %union.tree_node* %83), !dbg !6442
  store %union.tree_node* %call151, %union.tree_node** %list, align 8, !dbg !6443
  br label %if.end153, !dbg !6444

if.else152:                                       ; preds = %lor.lhs.false143
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6445
  br label %return, !dbg !6445

if.end153:                                        ; preds = %if.then150
  br label %for.inc, !dbg !6446

for.inc:                                          ; preds = %if.end153
  %84 = load i32, i32* %i, align 4, !dbg !6415
  %inc = add i32 %84, 1, !dbg !6415
  store i32 %inc, i32* %i, align 4, !dbg !6415
  br label %for.cond, !dbg !6415, !llvm.loop !6447

for.end:                                          ; preds = %cond.end113
  %85 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6449
  %common154 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !6449
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !6449
  %86 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !6449
  %87 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6450
  %call156 = call %union.tree_node* @nreverse(%union.tree_node* %87), !dbg !6451
  %call157 = call %union.tree_node* @build_vector(%union.tree_node* %86, %union.tree_node* %call156), !dbg !6452
  store %union.tree_node* %call157, %union.tree_node** %retval, align 8, !dbg !6453
  br label %return, !dbg !6453

if.end158:                                        ; preds = %cond.end, %land.lhs.true63, %if.else56
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.end55
  br label %if.end160

if.end160:                                        ; preds = %if.end159
  %88 = load i32, i32* %kind, align 4, !dbg !6454
  %cmp161 = icmp eq i32 %88, 4, !dbg !6456
  br i1 %cmp161, label %if.then163, label %if.else289, !dbg !6457

if.then163:                                       ; preds = %if.end160
  %89 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6458
  %base164 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !6458
  %90 = bitcast %struct.tree_base* %base164 to i64*, !dbg !6458
  %bf.load165 = load i64, i64* %90, align 8, !dbg !6458
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !6458
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !6458
  %cmp168 = icmp eq i32 %bf.cast167, 118, !dbg !6461
  br i1 %cmp168, label %land.lhs.true184, label %lor.lhs.false170, !dbg !6462

lor.lhs.false170:                                 ; preds = %if.then163
  %91 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6463
  %base171 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !6463
  %92 = bitcast %struct.tree_base* %base171 to i64*, !dbg !6463
  %bf.load172 = load i64, i64* %92, align 8, !dbg !6463
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !6463
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !6463
  %cmp175 = icmp eq i32 %bf.cast174, 43, !dbg !6464
  br i1 %cmp175, label %land.lhs.true184, label %lor.lhs.false177, !dbg !6465

lor.lhs.false177:                                 ; preds = %lor.lhs.false170
  %93 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6466
  %base178 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !6466
  %94 = bitcast %struct.tree_base* %base178 to i64*, !dbg !6466
  %bf.load179 = load i64, i64* %94, align 8, !dbg !6466
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !6466
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !6466
  %cmp182 = icmp eq i32 %bf.cast181, 44, !dbg !6467
  br i1 %cmp182, label %land.lhs.true184, label %if.else235, !dbg !6468

land.lhs.true184:                                 ; preds = %lor.lhs.false177, %lor.lhs.false170, %if.then163
  %95 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6469
  %exp185 = bitcast %union.tree_node* %95 to %struct.tree_exp*, !dbg !6469
  %operands186 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp185, i32 0, i32 3, !dbg !6469
  %arrayidx187 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands186, i64 0, i64 0, !dbg !6469
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx187, align 8, !dbg !6469
  %base188 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !6469
  %97 = bitcast %struct.tree_base* %base188 to i64*, !dbg !6469
  %bf.load189 = load i64, i64* %97, align 8, !dbg !6469
  %bf.clear190 = and i64 %bf.load189, 65535, !dbg !6469
  %bf.cast191 = trunc i64 %bf.clear190 to i32, !dbg !6469
  %cmp192 = icmp eq i32 %bf.cast191, 141, !dbg !6470
  br i1 %cmp192, label %if.then194, label %if.else235, !dbg !6471

if.then194:                                       ; preds = %land.lhs.true184
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val195, metadata !6472, metadata !DIExpression()), !dbg !6474
  %98 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6475
  %exp196 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !6475
  %operands197 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp196, i32 0, i32 3, !dbg !6475
  %arrayidx198 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands197, i64 0, i64 0, !dbg !6475
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx198, align 8, !dbg !6475
  %call199 = call %struct.prop_value_d* @get_value(%union.tree_node* %99), !dbg !6476
  store %struct.prop_value_d* %call199, %struct.prop_value_d** %val195, align 8, !dbg !6474
  %100 = load %struct.prop_value_d*, %struct.prop_value_d** %val195, align 8, !dbg !6477
  %lattice_val200 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %100, i32 0, i32 0, !dbg !6479
  %101 = load i32, i32* %lattice_val200, align 8, !dbg !6479
  %cmp201 = icmp eq i32 %101, 2, !dbg !6480
  br i1 %cmp201, label %if.then203, label %if.end234, !dbg !6481

if.then203:                                       ; preds = %if.then194
  %102 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6482
  %base204 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !6482
  %103 = bitcast %struct.tree_base* %base204 to i64*, !dbg !6482
  %bf.load205 = load i64, i64* %103, align 8, !dbg !6482
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !6482
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !6482
  %idxprom208 = sext i32 %bf.cast207 to i64, !dbg !6482
  %arrayidx209 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom208, !dbg !6482
  %104 = load i32, i32* %arrayidx209, align 4, !dbg !6482
  %cmp210 = icmp uge i32 %104, 4, !dbg !6482
  br i1 %cmp210, label %land.lhs.true212, label %cond.false223, !dbg !6482

land.lhs.true212:                                 ; preds = %if.then203
  %105 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6482
  %base213 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !6482
  %106 = bitcast %struct.tree_base* %base213 to i64*, !dbg !6482
  %bf.load214 = load i64, i64* %106, align 8, !dbg !6482
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !6482
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !6482
  %idxprom217 = sext i32 %bf.cast216 to i64, !dbg !6482
  %arrayidx218 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom217, !dbg !6482
  %107 = load i32, i32* %arrayidx218, align 4, !dbg !6482
  %cmp219 = icmp ule i32 %107, 10, !dbg !6482
  br i1 %cmp219, label %cond.true221, label %cond.false223, !dbg !6482

cond.true221:                                     ; preds = %land.lhs.true212
  %108 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6482
  %exp222 = bitcast %union.tree_node* %108 to %struct.tree_exp*, !dbg !6482
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp222, i32 0, i32 1, !dbg !6482
  %109 = load i32, i32* %locus, align 8, !dbg !6482
  br label %cond.end224, !dbg !6482

cond.false223:                                    ; preds = %land.lhs.true212, %if.then203
  br label %cond.end224, !dbg !6482

cond.end224:                                      ; preds = %cond.false223, %cond.true221
  %cond225 = phi i32 [ %109, %cond.true221 ], [ 0, %cond.false223 ], !dbg !6482
  %110 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6483
  %base226 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !6483
  %111 = bitcast %struct.tree_base* %base226 to i64*, !dbg !6483
  %bf.load227 = load i64, i64* %111, align 8, !dbg !6483
  %bf.clear228 = and i64 %bf.load227, 65535, !dbg !6483
  %bf.cast229 = trunc i64 %bf.clear228 to i32, !dbg !6483
  %112 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6484
  %common230 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !6484
  %type231 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common230, i32 0, i32 2, !dbg !6484
  %113 = load %union.tree_node*, %union.tree_node** %type231, align 8, !dbg !6484
  %114 = load %struct.prop_value_d*, %struct.prop_value_d** %val195, align 8, !dbg !6485
  %value232 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %114, i32 0, i32 1, !dbg !6486
  %115 = load %union.tree_node*, %union.tree_node** %value232, align 8, !dbg !6486
  %call233 = call %union.tree_node* @fold_unary_loc(i32 %cond225, i32 %bf.cast229, %union.tree_node* %113, %union.tree_node* %115), !dbg !6487
  store %union.tree_node* %call233, %union.tree_node** %retval, align 8, !dbg !6488
  br label %return, !dbg !6488

if.end234:                                        ; preds = %if.then194
  br label %if.end287, !dbg !6489

if.else235:                                       ; preds = %land.lhs.true184, %lor.lhs.false177
  %116 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6490
  %base236 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !6490
  %117 = bitcast %struct.tree_base* %base236 to i64*, !dbg !6490
  %bf.load237 = load i64, i64* %117, align 8, !dbg !6490
  %bf.clear238 = and i64 %bf.load237, 65535, !dbg !6490
  %bf.cast239 = trunc i64 %bf.clear238 to i32, !dbg !6490
  %cmp240 = icmp eq i32 %bf.cast239, 47, !dbg !6492
  br i1 %cmp240, label %land.lhs.true242, label %if.end286, !dbg !6493

land.lhs.true242:                                 ; preds = %if.else235
  %118 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6494
  %exp243 = bitcast %union.tree_node* %118 to %struct.tree_exp*, !dbg !6494
  %operands244 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp243, i32 0, i32 3, !dbg !6494
  %arrayidx245 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands244, i64 0, i64 0, !dbg !6494
  %119 = load %union.tree_node*, %union.tree_node** %arrayidx245, align 8, !dbg !6494
  %base246 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !6494
  %120 = bitcast %struct.tree_base* %base246 to i64*, !dbg !6494
  %bf.load247 = load i64, i64* %120, align 8, !dbg !6494
  %bf.clear248 = and i64 %bf.load247, 65535, !dbg !6494
  %bf.cast249 = trunc i64 %bf.clear248 to i32, !dbg !6494
  %cmp250 = icmp eq i32 %bf.cast249, 141, !dbg !6495
  br i1 %cmp250, label %if.then252, label %if.end286, !dbg !6496

if.then252:                                       ; preds = %land.lhs.true242
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val253, metadata !6497, metadata !DIExpression()), !dbg !6499
  %121 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6500
  %exp254 = bitcast %union.tree_node* %121 to %struct.tree_exp*, !dbg !6500
  %operands255 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp254, i32 0, i32 3, !dbg !6500
  %arrayidx256 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands255, i64 0, i64 0, !dbg !6500
  %122 = load %union.tree_node*, %union.tree_node** %arrayidx256, align 8, !dbg !6500
  %call257 = call %struct.prop_value_d* @get_value(%union.tree_node* %122), !dbg !6501
  store %struct.prop_value_d* %call257, %struct.prop_value_d** %val253, align 8, !dbg !6499
  %123 = load %struct.prop_value_d*, %struct.prop_value_d** %val253, align 8, !dbg !6502
  %lattice_val258 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %123, i32 0, i32 0, !dbg !6504
  %124 = load i32, i32* %lattice_val258, align 8, !dbg !6504
  %cmp259 = icmp eq i32 %124, 2, !dbg !6505
  br i1 %cmp259, label %land.lhs.true261, label %if.end285, !dbg !6506

land.lhs.true261:                                 ; preds = %if.then252
  %125 = load %struct.prop_value_d*, %struct.prop_value_d** %val253, align 8, !dbg !6507
  %value262 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %125, i32 0, i32 1, !dbg !6507
  %126 = load %union.tree_node*, %union.tree_node** %value262, align 8, !dbg !6507
  %base263 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !6507
  %127 = bitcast %struct.tree_base* %base263 to i64*, !dbg !6507
  %bf.load264 = load i64, i64* %127, align 8, !dbg !6507
  %bf.clear265 = and i64 %bf.load264, 65535, !dbg !6507
  %bf.cast266 = trunc i64 %bf.clear265 to i32, !dbg !6507
  %cmp267 = icmp eq i32 %bf.cast266, 121, !dbg !6508
  br i1 %cmp267, label %land.lhs.true269, label %if.end285, !dbg !6509

land.lhs.true269:                                 ; preds = %land.lhs.true261
  %128 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6510
  %common270 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !6510
  %type271 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common270, i32 0, i32 2, !dbg !6510
  %129 = load %union.tree_node*, %union.tree_node** %type271, align 8, !dbg !6510
  %130 = load %struct.prop_value_d*, %struct.prop_value_d** %val253, align 8, !dbg !6511
  %value272 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %130, i32 0, i32 1, !dbg !6511
  %131 = load %union.tree_node*, %union.tree_node** %value272, align 8, !dbg !6511
  %common273 = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !6511
  %type274 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common273, i32 0, i32 2, !dbg !6511
  %132 = load %union.tree_node*, %union.tree_node** %type274, align 8, !dbg !6511
  %common275 = bitcast %union.tree_node* %132 to %struct.tree_common*, !dbg !6511
  %type276 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common275, i32 0, i32 2, !dbg !6511
  %133 = load %union.tree_node*, %union.tree_node** %type276, align 8, !dbg !6511
  %call277 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %129, %union.tree_node* %133), !dbg !6512
  %conv278 = zext i8 %call277 to i32, !dbg !6512
  %tobool279 = icmp ne i32 %conv278, 0, !dbg !6512
  br i1 %tobool279, label %if.then280, label %if.end285, !dbg !6513

if.then280:                                       ; preds = %land.lhs.true269
  %134 = load %struct.prop_value_d*, %struct.prop_value_d** %val253, align 8, !dbg !6514
  %value281 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %134, i32 0, i32 1, !dbg !6514
  %135 = load %union.tree_node*, %union.tree_node** %value281, align 8, !dbg !6514
  %exp282 = bitcast %union.tree_node* %135 to %struct.tree_exp*, !dbg !6514
  %operands283 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp282, i32 0, i32 3, !dbg !6514
  %arrayidx284 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands283, i64 0, i64 0, !dbg !6514
  %136 = load %union.tree_node*, %union.tree_node** %arrayidx284, align 8, !dbg !6514
  store %union.tree_node* %136, %union.tree_node** %rhs, align 8, !dbg !6515
  br label %if.end285, !dbg !6516

if.end285:                                        ; preds = %if.then280, %land.lhs.true269, %land.lhs.true261, %if.then252
  br label %if.end286, !dbg !6517

if.end286:                                        ; preds = %if.end285, %land.lhs.true242, %if.else235
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %if.end234
  %137 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6518
  %call288 = call %union.tree_node* @fold_const_aggregate_ref(%union.tree_node* %137), !dbg !6519
  store %union.tree_node* %call288, %union.tree_node** %retval, align 8, !dbg !6520
  br label %return, !dbg !6520

if.else289:                                       ; preds = %if.end160
  %138 = load i32, i32* %kind, align 4, !dbg !6521
  %cmp290 = icmp eq i32 %138, 3, !dbg !6523
  br i1 %cmp290, label %if.then292, label %if.end294, !dbg !6524

if.then292:                                       ; preds = %if.else289
  %139 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6525
  %call293 = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %139), !dbg !6526
  store %union.tree_node* %call293, %union.tree_node** %retval, align 8, !dbg !6527
  br label %return, !dbg !6527

if.end294:                                        ; preds = %if.else289
  br label %if.end295

if.end295:                                        ; preds = %if.end294
  %140 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6528
  store %union.tree_node* %140, %union.tree_node** %retval, align 8, !dbg !6529
  br label %return, !dbg !6529

sw.bb296:                                         ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6530, metadata !DIExpression()), !dbg !6532
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6533
  %call297 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %141), !dbg !6534
  store %union.tree_node* %call297, %union.tree_node** %lhs, align 8, !dbg !6532
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !6535, metadata !DIExpression()), !dbg !6536
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6537
  %call298 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %142), !dbg !6538
  store %union.tree_node* %call298, %union.tree_node** %op0, align 8, !dbg !6536
  %143 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6539
  %base299 = bitcast %union.tree_node* %143 to %struct.tree_base*, !dbg !6539
  %144 = bitcast %struct.tree_base* %base299 to i64*, !dbg !6539
  %bf.load300 = load i64, i64* %144, align 8, !dbg !6539
  %bf.clear301 = and i64 %bf.load300, 65535, !dbg !6539
  %bf.cast302 = trunc i64 %bf.clear301 to i32, !dbg !6539
  %cmp303 = icmp eq i32 %bf.cast302, 141, !dbg !6541
  br i1 %cmp303, label %if.then305, label %if.end315, !dbg !6542

if.then305:                                       ; preds = %sw.bb296
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val306, metadata !6543, metadata !DIExpression()), !dbg !6545
  %145 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6546
  %call307 = call %struct.prop_value_d* @get_value(%union.tree_node* %145), !dbg !6547
  store %struct.prop_value_d* %call307, %struct.prop_value_d** %val306, align 8, !dbg !6545
  %146 = load %struct.prop_value_d*, %struct.prop_value_d** %val306, align 8, !dbg !6548
  %lattice_val308 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %146, i32 0, i32 0, !dbg !6550
  %147 = load i32, i32* %lattice_val308, align 8, !dbg !6550
  %cmp309 = icmp eq i32 %147, 2, !dbg !6551
  br i1 %cmp309, label %if.then311, label %if.end314, !dbg !6552

if.then311:                                       ; preds = %if.then305
  %148 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6553
  %call312 = call %struct.prop_value_d* @get_value(%union.tree_node* %148), !dbg !6554
  %value313 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %call312, i32 0, i32 1, !dbg !6555
  %149 = load %union.tree_node*, %union.tree_node** %value313, align 8, !dbg !6555
  store %union.tree_node* %149, %union.tree_node** %op0, align 8, !dbg !6556
  br label %if.end314, !dbg !6557

if.end314:                                        ; preds = %if.then311, %if.then305
  br label %if.end315, !dbg !6558

if.end315:                                        ; preds = %if.end314, %sw.bb296
  %150 = load i32, i32* %subcode, align 4, !dbg !6559
  %cmp316 = icmp eq i32 %150, 116, !dbg !6559
  br i1 %cmp316, label %land.lhs.true321, label %lor.lhs.false318, !dbg !6559

lor.lhs.false318:                                 ; preds = %if.end315
  %151 = load i32, i32* %subcode, align 4, !dbg !6559
  %cmp319 = icmp eq i32 %151, 113, !dbg !6559
  br i1 %cmp319, label %land.lhs.true321, label %if.end392, !dbg !6561

land.lhs.true321:                                 ; preds = %lor.lhs.false318, %if.end315
  %152 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6562
  %common322 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !6562
  %type323 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common322, i32 0, i32 2, !dbg !6562
  %153 = load %union.tree_node*, %union.tree_node** %type323, align 8, !dbg !6562
  %base324 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !6562
  %154 = bitcast %struct.tree_base* %base324 to i64*, !dbg !6562
  %bf.load325 = load i64, i64* %154, align 8, !dbg !6562
  %bf.clear326 = and i64 %bf.load325, 65535, !dbg !6562
  %bf.cast327 = trunc i64 %bf.clear326 to i32, !dbg !6562
  %cmp328 = icmp eq i32 %bf.cast327, 10, !dbg !6562
  br i1 %cmp328, label %land.lhs.true339, label %lor.lhs.false330, !dbg !6562

lor.lhs.false330:                                 ; preds = %land.lhs.true321
  %155 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6562
  %common331 = bitcast %union.tree_node* %155 to %struct.tree_common*, !dbg !6562
  %type332 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common331, i32 0, i32 2, !dbg !6562
  %156 = load %union.tree_node*, %union.tree_node** %type332, align 8, !dbg !6562
  %base333 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !6562
  %157 = bitcast %struct.tree_base* %base333 to i64*, !dbg !6562
  %bf.load334 = load i64, i64* %157, align 8, !dbg !6562
  %bf.clear335 = and i64 %bf.load334, 65535, !dbg !6562
  %bf.cast336 = trunc i64 %bf.clear335 to i32, !dbg !6562
  %cmp337 = icmp eq i32 %bf.cast336, 12, !dbg !6562
  br i1 %cmp337, label %land.lhs.true339, label %if.end392, !dbg !6563

land.lhs.true339:                                 ; preds = %lor.lhs.false330, %land.lhs.true321
  %158 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6564
  %common340 = bitcast %union.tree_node* %158 to %struct.tree_common*, !dbg !6564
  %type341 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common340, i32 0, i32 2, !dbg !6564
  %159 = load %union.tree_node*, %union.tree_node** %type341, align 8, !dbg !6564
  %base342 = bitcast %union.tree_node* %159 to %struct.tree_base*, !dbg !6564
  %160 = bitcast %struct.tree_base* %base342 to i64*, !dbg !6564
  %bf.load343 = load i64, i64* %160, align 8, !dbg !6564
  %bf.clear344 = and i64 %bf.load343, 65535, !dbg !6564
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !6564
  %cmp346 = icmp eq i32 %bf.cast345, 10, !dbg !6564
  br i1 %cmp346, label %land.lhs.true357, label %lor.lhs.false348, !dbg !6564

lor.lhs.false348:                                 ; preds = %land.lhs.true339
  %161 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6564
  %common349 = bitcast %union.tree_node* %161 to %struct.tree_common*, !dbg !6564
  %type350 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common349, i32 0, i32 2, !dbg !6564
  %162 = load %union.tree_node*, %union.tree_node** %type350, align 8, !dbg !6564
  %base351 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !6564
  %163 = bitcast %struct.tree_base* %base351 to i64*, !dbg !6564
  %bf.load352 = load i64, i64* %163, align 8, !dbg !6564
  %bf.clear353 = and i64 %bf.load352, 65535, !dbg !6564
  %bf.cast354 = trunc i64 %bf.clear353 to i32, !dbg !6564
  %cmp355 = icmp eq i32 %bf.cast354, 12, !dbg !6564
  br i1 %cmp355, label %land.lhs.true357, label %if.end392, !dbg !6565

land.lhs.true357:                                 ; preds = %lor.lhs.false348, %land.lhs.true339
  %164 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6566
  %common358 = bitcast %union.tree_node* %164 to %struct.tree_common*, !dbg !6566
  %type359 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common358, i32 0, i32 2, !dbg !6566
  %165 = load %union.tree_node*, %union.tree_node** %type359, align 8, !dbg !6566
  %common360 = bitcast %union.tree_node* %165 to %struct.tree_common*, !dbg !6566
  %type361 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common360, i32 0, i32 2, !dbg !6566
  %166 = load %union.tree_node*, %union.tree_node** %type361, align 8, !dbg !6566
  %base362 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !6566
  %167 = bitcast %struct.tree_base* %base362 to i64*, !dbg !6566
  %bf.load363 = load i64, i64* %167, align 8, !dbg !6566
  %bf.lshr = lshr i64 %bf.load363, 19, !dbg !6566
  %bf.clear364 = and i64 %bf.lshr, 1, !dbg !6566
  %bf.cast365 = trunc i64 %bf.clear364 to i32, !dbg !6566
  %168 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6567
  %common366 = bitcast %union.tree_node* %168 to %struct.tree_common*, !dbg !6567
  %type367 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common366, i32 0, i32 2, !dbg !6567
  %169 = load %union.tree_node*, %union.tree_node** %type367, align 8, !dbg !6567
  %common368 = bitcast %union.tree_node* %169 to %struct.tree_common*, !dbg !6567
  %type369 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common368, i32 0, i32 2, !dbg !6567
  %170 = load %union.tree_node*, %union.tree_node** %type369, align 8, !dbg !6567
  %base370 = bitcast %union.tree_node* %170 to %struct.tree_base*, !dbg !6567
  %171 = bitcast %struct.tree_base* %base370 to i64*, !dbg !6567
  %bf.load371 = load i64, i64* %171, align 8, !dbg !6567
  %bf.lshr372 = lshr i64 %bf.load371, 19, !dbg !6567
  %bf.clear373 = and i64 %bf.lshr372, 1, !dbg !6567
  %bf.cast374 = trunc i64 %bf.clear373 to i32, !dbg !6567
  %cmp375 = icmp eq i32 %bf.cast365, %bf.cast374, !dbg !6568
  br i1 %cmp375, label %if.then377, label %if.end392, !dbg !6569

if.then377:                                       ; preds = %land.lhs.true357
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !6570, metadata !DIExpression()), !dbg !6572
  %172 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6573
  %common378 = bitcast %union.tree_node* %172 to %struct.tree_common*, !dbg !6573
  %type379 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common378, i32 0, i32 2, !dbg !6573
  %173 = load %union.tree_node*, %union.tree_node** %type379, align 8, !dbg !6573
  %174 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6575
  %common380 = bitcast %union.tree_node* %174 to %struct.tree_common*, !dbg !6575
  %type381 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common380, i32 0, i32 2, !dbg !6575
  %175 = load %union.tree_node*, %union.tree_node** %type381, align 8, !dbg !6575
  %call382 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %173, %union.tree_node* %175), !dbg !6576
  %tobool383 = icmp ne i8 %call382, 0, !dbg !6576
  br i1 %tobool383, label %if.end391, label %land.lhs.true384, !dbg !6577

land.lhs.true384:                                 ; preds = %if.then377
  %176 = load i32, i32* %loc, align 4, !dbg !6578
  %177 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6579
  %178 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !6580
  %179 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6581
  %common385 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !6581
  %type386 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common385, i32 0, i32 2, !dbg !6581
  %180 = load %union.tree_node*, %union.tree_node** %type386, align 8, !dbg !6581
  %call387 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %176, %union.tree_node* %177, %union.tree_node* %178, %union.tree_node* %180), !dbg !6582
  store %union.tree_node* %call387, %union.tree_node** %tem, align 8, !dbg !6583
  %cmp388 = icmp ne %union.tree_node* %call387, null, !dbg !6584
  br i1 %cmp388, label %if.then390, label %if.end391, !dbg !6585

if.then390:                                       ; preds = %land.lhs.true384
  %181 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6586
  store %union.tree_node* %181, %union.tree_node** %retval, align 8, !dbg !6587
  br label %return, !dbg !6587

if.end391:                                        ; preds = %land.lhs.true384, %if.then377
  %182 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6588
  store %union.tree_node* %182, %union.tree_node** %retval, align 8, !dbg !6589
  br label %return, !dbg !6589

if.end392:                                        ; preds = %land.lhs.true357, %lor.lhs.false348, %lor.lhs.false330, %lor.lhs.false318
  %183 = load i32, i32* %loc, align 4, !dbg !6590
  %184 = load i32, i32* %subcode, align 4, !dbg !6591
  %185 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6592
  %call393 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %185), !dbg !6593
  %186 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6594
  %call394 = call %union.tree_node* @fold_unary_ignore_overflow_loc(i32 %183, i32 %184, %union.tree_node* %call393, %union.tree_node* %186), !dbg !6595
  store %union.tree_node* %call394, %union.tree_node** %retval, align 8, !dbg !6596
  br label %return, !dbg !6596

sw.bb395:                                         ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0396, metadata !6597, metadata !DIExpression()), !dbg !6599
  %187 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6600
  %call397 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %187), !dbg !6601
  store %union.tree_node* %call397, %union.tree_node** %op0396, align 8, !dbg !6599
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6602, metadata !DIExpression()), !dbg !6603
  %188 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6604
  %call398 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %188), !dbg !6605
  store %union.tree_node* %call398, %union.tree_node** %op1, align 8, !dbg !6603
  %189 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6606
  %base399 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !6606
  %190 = bitcast %struct.tree_base* %base399 to i64*, !dbg !6606
  %bf.load400 = load i64, i64* %190, align 8, !dbg !6606
  %bf.clear401 = and i64 %bf.load400, 65535, !dbg !6606
  %bf.cast402 = trunc i64 %bf.clear401 to i32, !dbg !6606
  %cmp403 = icmp eq i32 %bf.cast402, 141, !dbg !6608
  br i1 %cmp403, label %if.then405, label %if.end414, !dbg !6609

if.then405:                                       ; preds = %sw.bb395
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val406, metadata !6610, metadata !DIExpression()), !dbg !6612
  %191 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6613
  %call407 = call %struct.prop_value_d* @get_value(%union.tree_node* %191), !dbg !6614
  store %struct.prop_value_d* %call407, %struct.prop_value_d** %val406, align 8, !dbg !6612
  %192 = load %struct.prop_value_d*, %struct.prop_value_d** %val406, align 8, !dbg !6615
  %lattice_val408 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %192, i32 0, i32 0, !dbg !6617
  %193 = load i32, i32* %lattice_val408, align 8, !dbg !6617
  %cmp409 = icmp eq i32 %193, 2, !dbg !6618
  br i1 %cmp409, label %if.then411, label %if.end413, !dbg !6619

if.then411:                                       ; preds = %if.then405
  %194 = load %struct.prop_value_d*, %struct.prop_value_d** %val406, align 8, !dbg !6620
  %value412 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %194, i32 0, i32 1, !dbg !6621
  %195 = load %union.tree_node*, %union.tree_node** %value412, align 8, !dbg !6621
  store %union.tree_node* %195, %union.tree_node** %op0396, align 8, !dbg !6622
  br label %if.end413, !dbg !6623

if.end413:                                        ; preds = %if.then411, %if.then405
  br label %if.end414, !dbg !6624

if.end414:                                        ; preds = %if.end413, %sw.bb395
  %196 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6625
  %base415 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !6625
  %197 = bitcast %struct.tree_base* %base415 to i64*, !dbg !6625
  %bf.load416 = load i64, i64* %197, align 8, !dbg !6625
  %bf.clear417 = and i64 %bf.load416, 65535, !dbg !6625
  %bf.cast418 = trunc i64 %bf.clear417 to i32, !dbg !6625
  %cmp419 = icmp eq i32 %bf.cast418, 141, !dbg !6627
  br i1 %cmp419, label %if.then421, label %if.end430, !dbg !6628

if.then421:                                       ; preds = %if.end414
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val422, metadata !6629, metadata !DIExpression()), !dbg !6631
  %198 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6632
  %call423 = call %struct.prop_value_d* @get_value(%union.tree_node* %198), !dbg !6633
  store %struct.prop_value_d* %call423, %struct.prop_value_d** %val422, align 8, !dbg !6631
  %199 = load %struct.prop_value_d*, %struct.prop_value_d** %val422, align 8, !dbg !6634
  %lattice_val424 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %199, i32 0, i32 0, !dbg !6636
  %200 = load i32, i32* %lattice_val424, align 8, !dbg !6636
  %cmp425 = icmp eq i32 %200, 2, !dbg !6637
  br i1 %cmp425, label %if.then427, label %if.end429, !dbg !6638

if.then427:                                       ; preds = %if.then421
  %201 = load %struct.prop_value_d*, %struct.prop_value_d** %val422, align 8, !dbg !6639
  %value428 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %201, i32 0, i32 1, !dbg !6640
  %202 = load %union.tree_node*, %union.tree_node** %value428, align 8, !dbg !6640
  store %union.tree_node* %202, %union.tree_node** %op1, align 8, !dbg !6641
  br label %if.end429, !dbg !6642

if.end429:                                        ; preds = %if.then427, %if.then421
  br label %if.end430, !dbg !6643

if.end430:                                        ; preds = %if.end429, %if.end414
  %203 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6644
  %call431 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %203), !dbg !6646
  %cmp432 = icmp eq i32 %call431, 66, !dbg !6647
  br i1 %cmp432, label %land.lhs.true434, label %if.end457, !dbg !6648

land.lhs.true434:                                 ; preds = %if.end430
  %204 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6649
  %base435 = bitcast %union.tree_node* %204 to %struct.tree_base*, !dbg !6649
  %205 = bitcast %struct.tree_base* %base435 to i64*, !dbg !6649
  %bf.load436 = load i64, i64* %205, align 8, !dbg !6649
  %bf.clear437 = and i64 %bf.load436, 65535, !dbg !6649
  %bf.cast438 = trunc i64 %bf.clear437 to i32, !dbg !6649
  %cmp439 = icmp eq i32 %bf.cast438, 121, !dbg !6650
  br i1 %cmp439, label %land.lhs.true441, label %if.end457, !dbg !6651

land.lhs.true441:                                 ; preds = %land.lhs.true434
  %206 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6652
  %base442 = bitcast %union.tree_node* %206 to %struct.tree_base*, !dbg !6652
  %207 = bitcast %struct.tree_base* %base442 to i64*, !dbg !6652
  %bf.load443 = load i64, i64* %207, align 8, !dbg !6652
  %bf.clear444 = and i64 %bf.load443, 65535, !dbg !6652
  %bf.cast445 = trunc i64 %bf.clear444 to i32, !dbg !6652
  %cmp446 = icmp eq i32 %bf.cast445, 23, !dbg !6653
  br i1 %cmp446, label %if.then448, label %if.end457, !dbg !6654

if.then448:                                       ; preds = %land.lhs.true441
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem449, metadata !6655, metadata !DIExpression()), !dbg !6657
  %208 = load i32, i32* %loc, align 4, !dbg !6658
  %209 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6659
  %210 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6660
  %211 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6661
  %common450 = bitcast %union.tree_node* %211 to %struct.tree_common*, !dbg !6661
  %type451 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common450, i32 0, i32 2, !dbg !6661
  %212 = load %union.tree_node*, %union.tree_node** %type451, align 8, !dbg !6661
  %call452 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %208, %union.tree_node* %209, %union.tree_node* %210, %union.tree_node* %212), !dbg !6662
  store %union.tree_node* %call452, %union.tree_node** %tem449, align 8, !dbg !6657
  %213 = load %union.tree_node*, %union.tree_node** %tem449, align 8, !dbg !6663
  %cmp453 = icmp ne %union.tree_node* %213, null, !dbg !6665
  br i1 %cmp453, label %if.then455, label %if.end456, !dbg !6666

if.then455:                                       ; preds = %if.then448
  %214 = load %union.tree_node*, %union.tree_node** %tem449, align 8, !dbg !6667
  store %union.tree_node* %214, %union.tree_node** %retval, align 8, !dbg !6668
  br label %return, !dbg !6668

if.end456:                                        ; preds = %if.then448
  br label %if.end457, !dbg !6669

if.end457:                                        ; preds = %if.end456, %land.lhs.true441, %land.lhs.true434, %if.end430
  %215 = load i32, i32* %loc, align 4, !dbg !6670
  %216 = load i32, i32* %subcode, align 4, !dbg !6671
  %217 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6672
  %call458 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %217), !dbg !6673
  %218 = load %union.tree_node*, %union.tree_node** %op0396, align 8, !dbg !6674
  %219 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6675
  %call459 = call %union.tree_node* @fold_binary_loc(i32 %215, i32 %216, %union.tree_node* %call458, %union.tree_node* %218, %union.tree_node* %219), !dbg !6676
  store %union.tree_node* %call459, %union.tree_node** %retval, align 8, !dbg !6677
  br label %return, !dbg !6677

sw.default:                                       ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 1119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6678
  br label %sw.epilog, !dbg !6679

sw.epilog:                                        ; preds = %sw.default
  br label %sw.epilog626, !dbg !6680

sw.bb460:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6681, metadata !DIExpression()), !dbg !6683
  %220 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6684
  %call461 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %220), !dbg !6685
  store %union.tree_node* %call461, %union.tree_node** %fn, align 8, !dbg !6683
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val462, metadata !6686, metadata !DIExpression()), !dbg !6687
  %221 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6688
  %base463 = bitcast %union.tree_node* %221 to %struct.tree_base*, !dbg !6688
  %222 = bitcast %struct.tree_base* %base463 to i64*, !dbg !6688
  %bf.load464 = load i64, i64* %222, align 8, !dbg !6688
  %bf.clear465 = and i64 %bf.load464, 65535, !dbg !6688
  %bf.cast466 = trunc i64 %bf.clear465 to i32, !dbg !6688
  %cmp467 = icmp eq i32 %bf.cast466, 141, !dbg !6690
  br i1 %cmp467, label %if.then469, label %if.end477, !dbg !6691

if.then469:                                       ; preds = %sw.bb460
  %223 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6692
  %call470 = call %struct.prop_value_d* @get_value(%union.tree_node* %223), !dbg !6694
  store %struct.prop_value_d* %call470, %struct.prop_value_d** %val462, align 8, !dbg !6695
  %224 = load %struct.prop_value_d*, %struct.prop_value_d** %val462, align 8, !dbg !6696
  %lattice_val471 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %224, i32 0, i32 0, !dbg !6698
  %225 = load i32, i32* %lattice_val471, align 8, !dbg !6698
  %cmp472 = icmp eq i32 %225, 2, !dbg !6699
  br i1 %cmp472, label %if.then474, label %if.end476, !dbg !6700

if.then474:                                       ; preds = %if.then469
  %226 = load %struct.prop_value_d*, %struct.prop_value_d** %val462, align 8, !dbg !6701
  %value475 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %226, i32 0, i32 1, !dbg !6702
  %227 = load %union.tree_node*, %union.tree_node** %value475, align 8, !dbg !6702
  store %union.tree_node* %227, %union.tree_node** %fn, align 8, !dbg !6703
  br label %if.end476, !dbg !6704

if.end476:                                        ; preds = %if.then474, %if.then469
  br label %if.end477, !dbg !6705

if.end477:                                        ; preds = %if.end476, %sw.bb460
  %228 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6706
  %base478 = bitcast %union.tree_node* %228 to %struct.tree_base*, !dbg !6706
  %229 = bitcast %struct.tree_base* %base478 to i64*, !dbg !6706
  %bf.load479 = load i64, i64* %229, align 8, !dbg !6706
  %bf.clear480 = and i64 %bf.load479, 65535, !dbg !6706
  %bf.cast481 = trunc i64 %bf.clear480 to i32, !dbg !6706
  %cmp482 = icmp eq i32 %bf.cast481, 121, !dbg !6708
  br i1 %cmp482, label %land.lhs.true484, label %if.end572, !dbg !6709

land.lhs.true484:                                 ; preds = %if.end477
  %230 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6710
  %exp485 = bitcast %union.tree_node* %230 to %struct.tree_exp*, !dbg !6710
  %operands486 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp485, i32 0, i32 3, !dbg !6710
  %arrayidx487 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands486, i64 0, i64 0, !dbg !6710
  %231 = load %union.tree_node*, %union.tree_node** %arrayidx487, align 8, !dbg !6710
  %base488 = bitcast %union.tree_node* %231 to %struct.tree_base*, !dbg !6710
  %232 = bitcast %struct.tree_base* %base488 to i64*, !dbg !6710
  %bf.load489 = load i64, i64* %232, align 8, !dbg !6710
  %bf.clear490 = and i64 %bf.load489, 65535, !dbg !6710
  %bf.cast491 = trunc i64 %bf.clear490 to i32, !dbg !6710
  %cmp492 = icmp eq i32 %bf.cast491, 29, !dbg !6711
  br i1 %cmp492, label %land.lhs.true494, label %if.end572, !dbg !6712

land.lhs.true494:                                 ; preds = %land.lhs.true484
  %233 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6713
  %exp495 = bitcast %union.tree_node* %233 to %struct.tree_exp*, !dbg !6713
  %operands496 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp495, i32 0, i32 3, !dbg !6713
  %arrayidx497 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands496, i64 0, i64 0, !dbg !6713
  %234 = load %union.tree_node*, %union.tree_node** %arrayidx497, align 8, !dbg !6713
  %function_decl = bitcast %union.tree_node* %234 to %struct.tree_function_decl*, !dbg !6713
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6713
  %bf.load498 = load i32, i32* %built_in_class, align 8, !dbg !6713
  %bf.lshr499 = lshr i32 %bf.load498, 11, !dbg !6713
  %bf.clear500 = and i32 %bf.lshr499, 3, !dbg !6713
  %cmp501 = icmp ne i32 %bf.clear500, 0, !dbg !6713
  br i1 %cmp501, label %if.then503, label %if.end572, !dbg !6714

if.then503:                                       ; preds = %land.lhs.true494
  call void @llvm.dbg.declare(metadata %union.tree_node*** %args, metadata !6715, metadata !DIExpression()), !dbg !6717
  %235 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6718
  %call504 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %235), !dbg !6718
  %conv505 = zext i32 %call504 to i64, !dbg !6718
  %mul = mul i64 8, %conv505, !dbg !6718
  %236 = alloca i8, i64 %mul, align 16, !dbg !6718
  %237 = bitcast i8* %236 to %union.tree_node**, !dbg !6718
  store %union.tree_node** %237, %union.tree_node*** %args, align 8, !dbg !6717
  call void @llvm.dbg.declare(metadata %union.tree_node** %call506, metadata !6719, metadata !DIExpression()), !dbg !6720
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval507, metadata !6721, metadata !DIExpression()), !dbg !6722
  call void @llvm.dbg.declare(metadata i32* %i508, metadata !6723, metadata !DIExpression()), !dbg !6724
  store i32 0, i32* %i508, align 4, !dbg !6725
  br label %for.cond509, !dbg !6727

for.cond509:                                      ; preds = %for.inc538, %if.then503
  %238 = load i32, i32* %i508, align 4, !dbg !6728
  %239 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6730
  %call510 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %239), !dbg !6731
  %cmp511 = icmp ult i32 %238, %call510, !dbg !6732
  br i1 %cmp511, label %for.body513, label %for.end540, !dbg !6733

for.body513:                                      ; preds = %for.cond509
  %240 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6734
  %241 = load i32, i32* %i508, align 4, !dbg !6736
  %call514 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %240, i32 %241), !dbg !6737
  %242 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6738
  %243 = load i32, i32* %i508, align 4, !dbg !6739
  %idxprom515 = zext i32 %243 to i64, !dbg !6738
  %arrayidx516 = getelementptr inbounds %union.tree_node*, %union.tree_node** %242, i64 %idxprom515, !dbg !6738
  store %union.tree_node* %call514, %union.tree_node** %arrayidx516, align 8, !dbg !6740
  %244 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6741
  %245 = load i32, i32* %i508, align 4, !dbg !6741
  %idxprom517 = zext i32 %245 to i64, !dbg !6741
  %arrayidx518 = getelementptr inbounds %union.tree_node*, %union.tree_node** %244, i64 %idxprom517, !dbg !6741
  %246 = load %union.tree_node*, %union.tree_node** %arrayidx518, align 8, !dbg !6741
  %base519 = bitcast %union.tree_node* %246 to %struct.tree_base*, !dbg !6741
  %247 = bitcast %struct.tree_base* %base519 to i64*, !dbg !6741
  %bf.load520 = load i64, i64* %247, align 8, !dbg !6741
  %bf.clear521 = and i64 %bf.load520, 65535, !dbg !6741
  %bf.cast522 = trunc i64 %bf.clear521 to i32, !dbg !6741
  %cmp523 = icmp eq i32 %bf.cast522, 141, !dbg !6743
  br i1 %cmp523, label %if.then525, label %if.end537, !dbg !6744

if.then525:                                       ; preds = %for.body513
  %248 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6745
  %249 = load i32, i32* %i508, align 4, !dbg !6747
  %idxprom526 = zext i32 %249 to i64, !dbg !6745
  %arrayidx527 = getelementptr inbounds %union.tree_node*, %union.tree_node** %248, i64 %idxprom526, !dbg !6745
  %250 = load %union.tree_node*, %union.tree_node** %arrayidx527, align 8, !dbg !6745
  %call528 = call %struct.prop_value_d* @get_value(%union.tree_node* %250), !dbg !6748
  store %struct.prop_value_d* %call528, %struct.prop_value_d** %val462, align 8, !dbg !6749
  %251 = load %struct.prop_value_d*, %struct.prop_value_d** %val462, align 8, !dbg !6750
  %lattice_val529 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %251, i32 0, i32 0, !dbg !6752
  %252 = load i32, i32* %lattice_val529, align 8, !dbg !6752
  %cmp530 = icmp eq i32 %252, 2, !dbg !6753
  br i1 %cmp530, label %if.then532, label %if.end536, !dbg !6754

if.then532:                                       ; preds = %if.then525
  %253 = load %struct.prop_value_d*, %struct.prop_value_d** %val462, align 8, !dbg !6755
  %value533 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %253, i32 0, i32 1, !dbg !6756
  %254 = load %union.tree_node*, %union.tree_node** %value533, align 8, !dbg !6756
  %255 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6757
  %256 = load i32, i32* %i508, align 4, !dbg !6758
  %idxprom534 = zext i32 %256 to i64, !dbg !6757
  %arrayidx535 = getelementptr inbounds %union.tree_node*, %union.tree_node** %255, i64 %idxprom534, !dbg !6757
  store %union.tree_node* %254, %union.tree_node** %arrayidx535, align 8, !dbg !6759
  br label %if.end536, !dbg !6757

if.end536:                                        ; preds = %if.then532, %if.then525
  br label %if.end537, !dbg !6760

if.end537:                                        ; preds = %if.end536, %for.body513
  br label %for.inc538, !dbg !6761

for.inc538:                                       ; preds = %if.end537
  %257 = load i32, i32* %i508, align 4, !dbg !6762
  %inc539 = add i32 %257, 1, !dbg !6762
  store i32 %inc539, i32* %i508, align 4, !dbg !6762
  br label %for.cond509, !dbg !6763, !llvm.loop !6764

for.end540:                                       ; preds = %for.cond509
  %258 = load i32, i32* %loc, align 4, !dbg !6766
  %259 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6767
  %call541 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %259), !dbg !6768
  %260 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6769
  %261 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6770
  %call542 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %261), !dbg !6771
  %262 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6772
  %call543 = call %union.tree_node* @build_call_array_loc(i32 %258, %union.tree_node* %call541, %union.tree_node* %260, i32 %call542, %union.tree_node** %262), !dbg !6773
  store %union.tree_node* %call543, %union.tree_node** %call506, align 8, !dbg !6774
  %263 = load %union.tree_node*, %union.tree_node** %call506, align 8, !dbg !6775
  %base544 = bitcast %union.tree_node* %263 to %struct.tree_base*, !dbg !6775
  %264 = bitcast %struct.tree_base* %base544 to i64*, !dbg !6775
  %bf.load545 = load i64, i64* %264, align 8, !dbg !6775
  %bf.clear546 = and i64 %bf.load545, 65535, !dbg !6775
  %bf.cast547 = trunc i64 %bf.clear546 to i32, !dbg !6775
  %idxprom548 = sext i32 %bf.cast547 to i64, !dbg !6775
  %arrayidx549 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom548, !dbg !6775
  %265 = load i32, i32* %arrayidx549, align 4, !dbg !6775
  %cmp550 = icmp uge i32 %265, 4, !dbg !6775
  br i1 %cmp550, label %land.lhs.true552, label %cond.false564, !dbg !6775

land.lhs.true552:                                 ; preds = %for.end540
  %266 = load %union.tree_node*, %union.tree_node** %call506, align 8, !dbg !6775
  %base553 = bitcast %union.tree_node* %266 to %struct.tree_base*, !dbg !6775
  %267 = bitcast %struct.tree_base* %base553 to i64*, !dbg !6775
  %bf.load554 = load i64, i64* %267, align 8, !dbg !6775
  %bf.clear555 = and i64 %bf.load554, 65535, !dbg !6775
  %bf.cast556 = trunc i64 %bf.clear555 to i32, !dbg !6775
  %idxprom557 = sext i32 %bf.cast556 to i64, !dbg !6775
  %arrayidx558 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom557, !dbg !6775
  %268 = load i32, i32* %arrayidx558, align 4, !dbg !6775
  %cmp559 = icmp ule i32 %268, 10, !dbg !6775
  br i1 %cmp559, label %cond.true561, label %cond.false564, !dbg !6775

cond.true561:                                     ; preds = %land.lhs.true552
  %269 = load %union.tree_node*, %union.tree_node** %call506, align 8, !dbg !6775
  %exp562 = bitcast %union.tree_node* %269 to %struct.tree_exp*, !dbg !6775
  %locus563 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp562, i32 0, i32 1, !dbg !6775
  %270 = load i32, i32* %locus563, align 8, !dbg !6775
  br label %cond.end565, !dbg !6775

cond.false564:                                    ; preds = %land.lhs.true552, %for.end540
  br label %cond.end565, !dbg !6775

cond.end565:                                      ; preds = %cond.false564, %cond.true561
  %cond566 = phi i32 [ %270, %cond.true561 ], [ 0, %cond.false564 ], !dbg !6775
  %271 = load %union.tree_node*, %union.tree_node** %call506, align 8, !dbg !6776
  %call567 = call %union.tree_node* @fold_call_expr(i32 %cond566, %union.tree_node* %271, i8 zeroext 0), !dbg !6777
  store %union.tree_node* %call567, %union.tree_node** %retval507, align 8, !dbg !6778
  %272 = load %union.tree_node*, %union.tree_node** %retval507, align 8, !dbg !6779
  %tobool568 = icmp ne %union.tree_node* %272, null, !dbg !6779
  br i1 %tobool568, label %if.then569, label %if.end571, !dbg !6781

if.then569:                                       ; preds = %cond.end565
  %273 = load %union.tree_node*, %union.tree_node** %retval507, align 8, !dbg !6782
  %call570 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %273), !dbg !6782
  store %union.tree_node* %call570, %union.tree_node** %retval507, align 8, !dbg !6782
  br label %if.end571, !dbg !6782

if.end571:                                        ; preds = %if.then569, %cond.end565
  %274 = load %union.tree_node*, %union.tree_node** %retval507, align 8, !dbg !6783
  store %union.tree_node* %274, %union.tree_node** %retval, align 8, !dbg !6784
  br label %return, !dbg !6784

if.end572:                                        ; preds = %land.lhs.true494, %land.lhs.true484, %if.end477
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6785
  br label %return, !dbg !6785

sw.bb573:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0574, metadata !6786, metadata !DIExpression()), !dbg !6788
  %275 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6789
  %call575 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %275), !dbg !6790
  store %union.tree_node* %call575, %union.tree_node** %op0574, align 8, !dbg !6788
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1576, metadata !6791, metadata !DIExpression()), !dbg !6792
  %276 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6793
  %call577 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %276), !dbg !6794
  store %union.tree_node* %call577, %union.tree_node** %op1576, align 8, !dbg !6792
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6795, metadata !DIExpression()), !dbg !6796
  %277 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6797
  %call578 = call i32 @gimple_cond_code(%union.gimple_statement_d* %277), !dbg !6798
  store i32 %call578, i32* %code, align 4, !dbg !6796
  %278 = load %union.tree_node*, %union.tree_node** %op0574, align 8, !dbg !6799
  %base579 = bitcast %union.tree_node* %278 to %struct.tree_base*, !dbg !6799
  %279 = bitcast %struct.tree_base* %base579 to i64*, !dbg !6799
  %bf.load580 = load i64, i64* %279, align 8, !dbg !6799
  %bf.clear581 = and i64 %bf.load580, 65535, !dbg !6799
  %bf.cast582 = trunc i64 %bf.clear581 to i32, !dbg !6799
  %cmp583 = icmp eq i32 %bf.cast582, 141, !dbg !6801
  br i1 %cmp583, label %if.then585, label %if.end594, !dbg !6802

if.then585:                                       ; preds = %sw.bb573
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val586, metadata !6803, metadata !DIExpression()), !dbg !6805
  %280 = load %union.tree_node*, %union.tree_node** %op0574, align 8, !dbg !6806
  %call587 = call %struct.prop_value_d* @get_value(%union.tree_node* %280), !dbg !6807
  store %struct.prop_value_d* %call587, %struct.prop_value_d** %val586, align 8, !dbg !6805
  %281 = load %struct.prop_value_d*, %struct.prop_value_d** %val586, align 8, !dbg !6808
  %lattice_val588 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %281, i32 0, i32 0, !dbg !6810
  %282 = load i32, i32* %lattice_val588, align 8, !dbg !6810
  %cmp589 = icmp eq i32 %282, 2, !dbg !6811
  br i1 %cmp589, label %if.then591, label %if.end593, !dbg !6812

if.then591:                                       ; preds = %if.then585
  %283 = load %struct.prop_value_d*, %struct.prop_value_d** %val586, align 8, !dbg !6813
  %value592 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %283, i32 0, i32 1, !dbg !6814
  %284 = load %union.tree_node*, %union.tree_node** %value592, align 8, !dbg !6814
  store %union.tree_node* %284, %union.tree_node** %op0574, align 8, !dbg !6815
  br label %if.end593, !dbg !6816

if.end593:                                        ; preds = %if.then591, %if.then585
  br label %if.end594, !dbg !6817

if.end594:                                        ; preds = %if.end593, %sw.bb573
  %285 = load %union.tree_node*, %union.tree_node** %op1576, align 8, !dbg !6818
  %base595 = bitcast %union.tree_node* %285 to %struct.tree_base*, !dbg !6818
  %286 = bitcast %struct.tree_base* %base595 to i64*, !dbg !6818
  %bf.load596 = load i64, i64* %286, align 8, !dbg !6818
  %bf.clear597 = and i64 %bf.load596, 65535, !dbg !6818
  %bf.cast598 = trunc i64 %bf.clear597 to i32, !dbg !6818
  %cmp599 = icmp eq i32 %bf.cast598, 141, !dbg !6820
  br i1 %cmp599, label %if.then601, label %if.end610, !dbg !6821

if.then601:                                       ; preds = %if.end594
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val602, metadata !6822, metadata !DIExpression()), !dbg !6824
  %287 = load %union.tree_node*, %union.tree_node** %op1576, align 8, !dbg !6825
  %call603 = call %struct.prop_value_d* @get_value(%union.tree_node* %287), !dbg !6826
  store %struct.prop_value_d* %call603, %struct.prop_value_d** %val602, align 8, !dbg !6824
  %288 = load %struct.prop_value_d*, %struct.prop_value_d** %val602, align 8, !dbg !6827
  %lattice_val604 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %288, i32 0, i32 0, !dbg !6829
  %289 = load i32, i32* %lattice_val604, align 8, !dbg !6829
  %cmp605 = icmp eq i32 %289, 2, !dbg !6830
  br i1 %cmp605, label %if.then607, label %if.end609, !dbg !6831

if.then607:                                       ; preds = %if.then601
  %290 = load %struct.prop_value_d*, %struct.prop_value_d** %val602, align 8, !dbg !6832
  %value608 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %290, i32 0, i32 1, !dbg !6833
  %291 = load %union.tree_node*, %union.tree_node** %value608, align 8, !dbg !6833
  store %union.tree_node* %291, %union.tree_node** %op1576, align 8, !dbg !6834
  br label %if.end609, !dbg !6835

if.end609:                                        ; preds = %if.then607, %if.then601
  br label %if.end610, !dbg !6836

if.end610:                                        ; preds = %if.end609, %if.end594
  %292 = load i32, i32* %loc, align 4, !dbg !6837
  %293 = load i32, i32* %code, align 4, !dbg !6838
  %294 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6839
  %295 = load %union.tree_node*, %union.tree_node** %op0574, align 8, !dbg !6840
  %296 = load %union.tree_node*, %union.tree_node** %op1576, align 8, !dbg !6841
  %call611 = call %union.tree_node* @fold_binary_loc(i32 %292, i32 %293, %union.tree_node* %294, %union.tree_node* %295, %union.tree_node* %296), !dbg !6842
  store %union.tree_node* %call611, %union.tree_node** %retval, align 8, !dbg !6843
  br label %return, !dbg !6843

sw.bb612:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs613, metadata !6844, metadata !DIExpression()), !dbg !6846
  %297 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6847
  %call614 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %297), !dbg !6848
  store %union.tree_node* %call614, %union.tree_node** %rhs613, align 8, !dbg !6846
  %298 = load %union.tree_node*, %union.tree_node** %rhs613, align 8, !dbg !6849
  %base615 = bitcast %union.tree_node* %298 to %struct.tree_base*, !dbg !6849
  %299 = bitcast %struct.tree_base* %base615 to i64*, !dbg !6849
  %bf.load616 = load i64, i64* %299, align 8, !dbg !6849
  %bf.clear617 = and i64 %bf.load616, 65535, !dbg !6849
  %bf.cast618 = trunc i64 %bf.clear617 to i32, !dbg !6849
  %cmp619 = icmp eq i32 %bf.cast618, 141, !dbg !6851
  br i1 %cmp619, label %if.then621, label %if.end624, !dbg !6852

if.then621:                                       ; preds = %sw.bb612
  %300 = load %union.tree_node*, %union.tree_node** %rhs613, align 8, !dbg !6853
  %call622 = call %struct.prop_value_d* @get_value(%union.tree_node* %300), !dbg !6855
  %value623 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %call622, i32 0, i32 1, !dbg !6856
  %301 = load %union.tree_node*, %union.tree_node** %value623, align 8, !dbg !6856
  store %union.tree_node* %301, %union.tree_node** %retval, align 8, !dbg !6857
  br label %return, !dbg !6857

if.end624:                                        ; preds = %sw.bb612
  %302 = load %union.tree_node*, %union.tree_node** %rhs613, align 8, !dbg !6858
  store %union.tree_node* %302, %union.tree_node** %retval, align 8, !dbg !6859
  br label %return, !dbg !6859

sw.default625:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 1204, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6860
  br label %sw.epilog626, !dbg !6861

sw.epilog626:                                     ; preds = %sw.default625, %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6862
  br label %return, !dbg !6862

return:                                           ; preds = %sw.epilog626, %if.end624, %if.then621, %if.end610, %if.end572, %if.end571, %if.end457, %if.then455, %if.end392, %if.end391, %if.then390, %if.end295, %if.then292, %if.end287, %cond.end224, %for.end, %if.else152, %if.then49, %if.then
  %303 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6863
  ret %union.tree_node* %303, !dbg !6863
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6864 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6867, metadata !DIExpression()), !dbg !6868
  %0 = load i32, i32* %code.addr, align 4, !dbg !6869
  %idxprom = sext i32 %0 to i64, !dbg !6870
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6870
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6870
  %conv = zext i8 %1 to i32, !dbg !6871
  ret i32 %conv, !dbg !6872
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %gs) #0 !dbg !6873 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6874, metadata !DIExpression()), !dbg !6875
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6876
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6877
  ret %union.tree_node* %call, !dbg !6878
}

declare dso_local void @fold_undefer_overflow_warnings(i8 zeroext, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !6879 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6880, metadata !DIExpression()), !dbg !6881
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6882
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6883
  %conv = zext i8 %call to i32, !dbg !6883
  %tobool = icmp ne i32 %conv, 0, !dbg !6883
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !6884

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6885
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !6886
  %conv2 = zext i8 %call1 to i32, !dbg !6886
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !6886
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !6887

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6888
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !6889
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !6890
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !6891
  br label %lor.end, !dbg !6884

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !6884
  %conv6 = trunc i32 %lor.ext to i8, !dbg !6892
  ret i8 %conv6, !dbg !6893
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6894 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6897, metadata !DIExpression()), !dbg !6898
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6899
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6900
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6901
  %1 = load i32, i32* %num_ops, align 4, !dbg !6901
  ret i32 %1, !dbg !6902
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) #0 !dbg !6903 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6904, metadata !DIExpression()), !dbg !6905
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6906
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6907
  %conv = zext i8 %call to i32, !dbg !6907
  %tobool = icmp ne i32 %conv, 0, !dbg !6907
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6908

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6909
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !6910
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !6908
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !6911
  %land.ext = zext i1 %2 to i32, !dbg !6908
  %conv3 = trunc i32 %land.ext to i8, !dbg !6907
  ret i8 %conv3, !dbg !6912
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6913 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6918
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6919
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6920
  %1 = load i32, i32* %location, align 8, !dbg !6920
  ret i32 %1, !dbg !6921
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_vector(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_unary_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6922 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6923, metadata !DIExpression()), !dbg !6924
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6925
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6926
  ret %union.tree_node* %call, !dbg !6927
}

declare dso_local %union.tree_node* @fold_unary_ignore_overflow_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !6928 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6931, metadata !DIExpression()), !dbg !6932
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6933
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6934
  store i32 %call, i32* %code, align 4, !dbg !6932
  %1 = load i32, i32* %code, align 4, !dbg !6935
  %cmp = icmp eq i32 %1, 6, !dbg !6937
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6938

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6939
  %cmp1 = icmp eq i32 %2, 8, !dbg !6940
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !6941

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6942, metadata !DIExpression()), !dbg !6944
  %3 = load i32, i32* %code, align 4, !dbg !6945
  %cmp2 = icmp eq i32 %3, 8, !dbg !6947
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6948

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6949
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !6950
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !6951
  br label %if.end, !dbg !6952

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6953
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !6954
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !6955

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6956
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !6956
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !6956
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6956
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6956
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6958
  br label %sw.epilog, !dbg !6959

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6960
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !6960
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !6960
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6960
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6960
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !6961
  br label %sw.epilog, !dbg !6962

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6963
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !6964
  br label %return, !dbg !6964

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !6965
  %cmp12 = icmp eq i32 %11, 1, !dbg !6967
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !6968

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6969
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !6970
  br label %return, !dbg !6970

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6971
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !6972
  br label %return, !dbg !6972

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6973
  ret %union.tree_node* %14, !dbg !6973
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6974 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6975, metadata !DIExpression()), !dbg !6976
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6977, metadata !DIExpression()), !dbg !6978
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6979
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6980
  store i32 %call, i32* %num_ops, align 4, !dbg !6981
  %1 = load i32, i32* %num_ops, align 4, !dbg !6982
  %sub = sub i32 %1, 3, !dbg !6983
  ret i32 %sub, !dbg !6984
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6985 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6986, metadata !DIExpression()), !dbg !6987
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6988, metadata !DIExpression()), !dbg !6989
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6990
  %1 = load i32, i32* %index.addr, align 4, !dbg !6991
  %add = add i32 %1, 3, !dbg !6992
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6993
  ret %union.tree_node* %call, !dbg !6994
}

declare dso_local %union.tree_node* @build_call_array_loc(i32, %union.tree_node*, %union.tree_node*, i32, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !6995 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6998, metadata !DIExpression()), !dbg !6999
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7000
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7001
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !6999
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7002, metadata !DIExpression()), !dbg !7003
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7004
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7004
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7004
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7004
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7003
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7005
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7005
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7005
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7005
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7006
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7007
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7007
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7007
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7007
  ret %union.tree_node* %6, !dbg !7008
}

declare dso_local %union.tree_node* @fold_call_expr(i32, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7009 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7010, metadata !DIExpression()), !dbg !7011
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7012
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7013
  ret %union.tree_node* %call, !dbg !7014
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !7015 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7016, metadata !DIExpression()), !dbg !7017
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7018
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7019
  ret %union.tree_node* %call, !dbg !7020
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !7021 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7022, metadata !DIExpression()), !dbg !7023
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7024
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7025
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7026
  %bf.load = load i32, i32* %1, align 8, !dbg !7026
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7026
  ret i32 %bf.lshr, !dbg !7027
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7028 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7031, metadata !DIExpression()), !dbg !7032
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7033
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7034
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7035
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7035
  ret %struct.basic_block_def* %1, !dbg !7036
}

declare dso_local %struct.edge_def* @find_taken_edge(%struct.basic_block_def*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7037 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7038, metadata !DIExpression()), !dbg !7039
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7040
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7041
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7042
  %1 = load i32, i32* %nargs, align 4, !dbg !7042
  ret i32 %1, !dbg !7043
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !7044 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7051
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7051
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !7051
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7051
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7051
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7051

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7051
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !7051
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !7051
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !7051
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7051
  br label %cond.end, !dbg !7051

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7051
  %4 = load i64, i64* %i.addr, align 8, !dbg !7051
  %conv = trunc i64 %4 to i32, !dbg !7051
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !7051
  ret %struct.edge_def* %call3, !dbg !7052
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7053 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7057, metadata !DIExpression()), !dbg !7058
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7059, metadata !DIExpression()), !dbg !7060
  %0 = load i32, i32* %index.addr, align 4, !dbg !7061
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7061
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7061
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7061
  %2 = load i32, i32* %capacity, align 8, !dbg !7061
  %cmp = icmp ule i32 %0, %2, !dbg !7061
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7061

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7061
  br label %cond.end, !dbg !7061

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7061
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7062
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7063
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7064
  %4 = load i32, i32* %index.addr, align 4, !dbg !7065
  %idxprom = zext i32 %4 to i64, !dbg !7062
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7062
  ret %struct.phi_arg_d* %arrayidx, !dbg !7066
}

; Function Attrs: noinline nounwind uwtable
define internal void @ccp_lattice_meet(%struct.prop_value_d* %val1, %struct.prop_value_d* %val2) #0 !dbg !7067 {
entry:
  %val1.addr = alloca %struct.prop_value_d*, align 8
  %val2.addr = alloca %struct.prop_value_d*, align 8
  store %struct.prop_value_d* %val1, %struct.prop_value_d** %val1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val1.addr, metadata !7070, metadata !DIExpression()), !dbg !7071
  store %struct.prop_value_d* %val2, %struct.prop_value_d** %val2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val2.addr, metadata !7072, metadata !DIExpression()), !dbg !7073
  %0 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7074
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %0, i32 0, i32 0, !dbg !7076
  %1 = load i32, i32* %lattice_val, align 8, !dbg !7076
  %cmp = icmp eq i32 %1, 1, !dbg !7077
  br i1 %cmp, label %if.then, label %if.else, !dbg !7078

if.then:                                          ; preds = %entry
  %2 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7079
  %3 = load %struct.prop_value_d*, %struct.prop_value_d** %val2.addr, align 8, !dbg !7081
  %4 = bitcast %struct.prop_value_d* %2 to i8*, !dbg !7082
  %5 = bitcast %struct.prop_value_d* %3 to i8*, !dbg !7082
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false), !dbg !7082
  br label %if.end29, !dbg !7083

if.else:                                          ; preds = %entry
  %6 = load %struct.prop_value_d*, %struct.prop_value_d** %val2.addr, align 8, !dbg !7084
  %lattice_val1 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %6, i32 0, i32 0, !dbg !7086
  %7 = load i32, i32* %lattice_val1, align 8, !dbg !7086
  %cmp2 = icmp eq i32 %7, 1, !dbg !7087
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7088

if.then3:                                         ; preds = %if.else
  br label %if.end28, !dbg !7089

if.else4:                                         ; preds = %if.else
  %8 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7091
  %lattice_val5 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %8, i32 0, i32 0, !dbg !7093
  %9 = load i32, i32* %lattice_val5, align 8, !dbg !7093
  %cmp6 = icmp eq i32 %9, 3, !dbg !7094
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !7095

lor.lhs.false:                                    ; preds = %if.else4
  %10 = load %struct.prop_value_d*, %struct.prop_value_d** %val2.addr, align 8, !dbg !7096
  %lattice_val7 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %10, i32 0, i32 0, !dbg !7097
  %11 = load i32, i32* %lattice_val7, align 8, !dbg !7097
  %cmp8 = icmp eq i32 %11, 3, !dbg !7098
  br i1 %cmp8, label %if.then9, label %if.else11, !dbg !7099

if.then9:                                         ; preds = %lor.lhs.false, %if.else4
  %12 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7100
  %lattice_val10 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %12, i32 0, i32 0, !dbg !7102
  store i32 3, i32* %lattice_val10, align 8, !dbg !7103
  %13 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7104
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %13, i32 0, i32 1, !dbg !7105
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !7106
  br label %if.end27, !dbg !7107

if.else11:                                        ; preds = %lor.lhs.false
  %14 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7108
  %lattice_val12 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %14, i32 0, i32 0, !dbg !7110
  %15 = load i32, i32* %lattice_val12, align 8, !dbg !7110
  %cmp13 = icmp eq i32 %15, 2, !dbg !7111
  br i1 %cmp13, label %land.lhs.true, label %if.else24, !dbg !7112

land.lhs.true:                                    ; preds = %if.else11
  %16 = load %struct.prop_value_d*, %struct.prop_value_d** %val2.addr, align 8, !dbg !7113
  %lattice_val14 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %16, i32 0, i32 0, !dbg !7114
  %17 = load i32, i32* %lattice_val14, align 8, !dbg !7114
  %cmp15 = icmp eq i32 %17, 2, !dbg !7115
  br i1 %cmp15, label %land.lhs.true16, label %if.else24, !dbg !7116

land.lhs.true16:                                  ; preds = %land.lhs.true
  %18 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7117
  %value17 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %18, i32 0, i32 1, !dbg !7118
  %19 = load %union.tree_node*, %union.tree_node** %value17, align 8, !dbg !7118
  %20 = load %struct.prop_value_d*, %struct.prop_value_d** %val2.addr, align 8, !dbg !7119
  %value18 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %20, i32 0, i32 1, !dbg !7120
  %21 = load %union.tree_node*, %union.tree_node** %value18, align 8, !dbg !7120
  %call = call i32 @simple_cst_equal(%union.tree_node* %19, %union.tree_node* %21), !dbg !7121
  %cmp19 = icmp eq i32 %call, 1, !dbg !7122
  br i1 %cmp19, label %if.then20, label %if.else24, !dbg !7123

if.then20:                                        ; preds = %land.lhs.true16
  %22 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7124
  %lattice_val21 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %22, i32 0, i32 0, !dbg !7126
  store i32 2, i32* %lattice_val21, align 8, !dbg !7127
  %23 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7128
  %value22 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %23, i32 0, i32 1, !dbg !7129
  %24 = load %union.tree_node*, %union.tree_node** %value22, align 8, !dbg !7129
  %25 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7130
  %value23 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %25, i32 0, i32 1, !dbg !7131
  store %union.tree_node* %24, %union.tree_node** %value23, align 8, !dbg !7132
  br label %if.end, !dbg !7133

if.else24:                                        ; preds = %land.lhs.true16, %land.lhs.true, %if.else11
  %26 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7134
  %lattice_val25 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %26, i32 0, i32 0, !dbg !7136
  store i32 3, i32* %lattice_val25, align 8, !dbg !7137
  %27 = load %struct.prop_value_d*, %struct.prop_value_d** %val1.addr, align 8, !dbg !7138
  %value26 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %27, i32 0, i32 1, !dbg !7139
  store %union.tree_node* null, %union.tree_node** %value26, align 8, !dbg !7140
  br label %if.end

if.end:                                           ; preds = %if.else24, %if.then20
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then9
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then3
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then
  ret void, !dbg !7141
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7142 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7147, metadata !DIExpression()), !dbg !7148
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7149, metadata !DIExpression()), !dbg !7148
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7148
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7148
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7148

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7148
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7148
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7148
  %3 = load i32, i32* %num, align 8, !dbg !7148
  %cmp = icmp ult i32 %1, %3, !dbg !7148
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7150
  %land.ext = zext i1 %4 to i32, !dbg !7148
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7148
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7148
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7148
  %idxprom = zext i32 %6 to i64, !dbg !7148
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7148
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7148
  ret %struct.edge_def* %7, !dbg !7148
}

declare dso_local i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_dbg_cnt() #0 !dbg !7151 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7152, metadata !DIExpression()), !dbg !7153
  store i32 0, i32* %i, align 4, !dbg !7154
  br label %for.cond, !dbg !7156

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7157
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7159
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !7159
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !7159
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7159
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %2, i32 0, i32 2, !dbg !7159
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !7159
  %tobool = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !7159
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7159

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7159
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !7159
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !7159
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !7159
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !7159
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !7159
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %6, i32 0, i32 0, !dbg !7159
  br label %cond.end, !dbg !7159

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7159

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7159
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !7159
  %cmp = icmp ult i32 %0, %call, !dbg !7160
  br i1 %cmp, label %for.body, label %for.end, !dbg !7161

for.body:                                         ; preds = %cond.end
  %call4 = call zeroext i8 @dbg_cnt(i32 1), !dbg !7162
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7162
  br i1 %tobool5, label %if.end, label %if.then, !dbg !7165

if.then:                                          ; preds = %for.body
  %7 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !7166
  %8 = load i32, i32* %i, align 4, !dbg !7168
  %idxprom = zext i32 %8 to i64, !dbg !7166
  %arrayidx = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %7, i64 %idxprom, !dbg !7166
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %arrayidx, i32 0, i32 0, !dbg !7169
  store i32 3, i32* %lattice_val, align 8, !dbg !7170
  %9 = load %struct.prop_value_d*, %struct.prop_value_d** @const_val, align 8, !dbg !7171
  %10 = load i32, i32* %i, align 4, !dbg !7172
  %idxprom6 = zext i32 %10 to i64, !dbg !7171
  %arrayidx7 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %9, i64 %idxprom6, !dbg !7171
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %arrayidx7, i32 0, i32 1, !dbg !7173
  store %union.tree_node* null, %union.tree_node** %value, align 8, !dbg !7174
  br label %if.end, !dbg !7175

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7176

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !7177
  %inc = add i32 %11, 1, !dbg !7177
  store i32 %inc, i32* %i, align 4, !dbg !7177
  br label %for.cond, !dbg !7178, !llvm.loop !7179

for.end:                                          ; preds = %cond.end
  ret void, !dbg !7181
}

declare dso_local zeroext i8 @substitute_and_fold(%struct.prop_value_d*, i8 (%struct.gimple_stmt_iterator*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ccp_fold_stmt(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !7182 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %val = alloca %struct.prop_value_d, align 8
  %tmp = alloca %struct.prop_value_d, align 8
  %lhs = alloca %union.tree_node*, align 8
  %val10 = alloca %struct.prop_value_d*, align 8
  %argt = alloca %union.tree_node*, align 8
  %changed = alloca i8, align 1
  %i = alloca i32, align 4
  %new_rhs = alloca %union.tree_node*, align 8
  %res = alloca i8, align 1
  %arg = alloca %union.tree_node*, align 8
  %lhs75 = alloca %union.tree_node*, align 8
  %val77 = alloca %struct.prop_value_d*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7183, metadata !DIExpression()), !dbg !7184
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7185, metadata !DIExpression()), !dbg !7186
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7187
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !7188
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7186
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7189
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7190
  switch i32 %call1, label %sw.default [
    i32 1, label %sw.bb
    i32 8, label %sw.bb8
    i32 6, label %sw.bb74
  ], !dbg !7191

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.prop_value_d* %val, metadata !7192, metadata !DIExpression()), !dbg !7195
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7196
  %call2 = call { i32, %union.tree_node* } @evaluate_stmt(%union.gimple_statement_d* %2), !dbg !7197
  %3 = bitcast %struct.prop_value_d* %tmp to { i32, %union.tree_node* }*, !dbg !7197
  %4 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %3, i32 0, i32 0, !dbg !7197
  %5 = extractvalue { i32, %union.tree_node* } %call2, 0, !dbg !7197
  store i32 %5, i32* %4, align 8, !dbg !7197
  %6 = getelementptr inbounds { i32, %union.tree_node* }, { i32, %union.tree_node* }* %3, i32 0, i32 1, !dbg !7197
  %7 = extractvalue { i32, %union.tree_node* } %call2, 1, !dbg !7197
  store %union.tree_node* %7, %union.tree_node** %6, align 8, !dbg !7197
  %8 = bitcast %struct.prop_value_d* %val to i8*, !dbg !7197
  %9 = bitcast %struct.prop_value_d* %tmp to i8*, !dbg !7197
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !7197
  %lattice_val = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 0, !dbg !7198
  %10 = load i32, i32* %lattice_val, align 8, !dbg !7198
  %cmp = icmp ne i32 %10, 2, !dbg !7200
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7201

lor.lhs.false:                                    ; preds = %sw.bb
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 1, !dbg !7202
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7202
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7202
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !7202
  %bf.load = load i64, i64* %12, align 8, !dbg !7202
  %bf.clear = and i64 %bf.load, 65535, !dbg !7202
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7202
  %cmp3 = icmp ne i32 %bf.cast, 23, !dbg !7203
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7204

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !7205
  br label %return, !dbg !7205

if.end:                                           ; preds = %lor.lhs.false
  %value4 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %val, i32 0, i32 1, !dbg !7206
  %13 = load %union.tree_node*, %union.tree_node** %value4, align 8, !dbg !7206
  %call5 = call i32 @integer_zerop(%union.tree_node* %13), !dbg !7208
  %tobool = icmp ne i32 %call5, 0, !dbg !7208
  br i1 %tobool, label %if.then6, label %if.else, !dbg !7209

if.then6:                                         ; preds = %if.end
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7210
  call void @gimple_cond_make_false(%union.gimple_statement_d* %14), !dbg !7211
  br label %if.end7, !dbg !7211

if.else:                                          ; preds = %if.end
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7212
  call void @gimple_cond_make_true(%union.gimple_statement_d* %15), !dbg !7213
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  store i8 1, i8* %retval, align 1, !dbg !7214
  br label %return, !dbg !7214

sw.bb8:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !7215, metadata !DIExpression()), !dbg !7217
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7218
  %call9 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %16), !dbg !7219
  store %union.tree_node* %call9, %union.tree_node** %lhs, align 8, !dbg !7217
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val10, metadata !7220, metadata !DIExpression()), !dbg !7221
  call void @llvm.dbg.declare(metadata %union.tree_node** %argt, metadata !7222, metadata !DIExpression()), !dbg !7223
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7224, metadata !DIExpression()), !dbg !7225
  store i8 0, i8* %changed, align 1, !dbg !7225
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7226, metadata !DIExpression()), !dbg !7227
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7228
  %tobool11 = icmp ne %union.tree_node* %17, null, !dbg !7228
  br i1 %tobool11, label %land.lhs.true, label %if.end37, !dbg !7230

land.lhs.true:                                    ; preds = %sw.bb8
  %18 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7231
  %base12 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7231
  %19 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7231
  %bf.load13 = load i64, i64* %19, align 8, !dbg !7231
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7231
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7231
  %cmp16 = icmp eq i32 %bf.cast15, 141, !dbg !7232
  br i1 %cmp16, label %land.lhs.true17, label %if.end37, !dbg !7233

land.lhs.true17:                                  ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7234
  %call18 = call %struct.prop_value_d* @get_value(%union.tree_node* %20), !dbg !7235
  store %struct.prop_value_d* %call18, %struct.prop_value_d** %val10, align 8, !dbg !7236
  %tobool19 = icmp ne %struct.prop_value_d* %call18, null, !dbg !7236
  br i1 %tobool19, label %land.lhs.true20, label %if.end37, !dbg !7237

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %21 = load %struct.prop_value_d*, %struct.prop_value_d** %val10, align 8, !dbg !7238
  %lattice_val21 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %21, i32 0, i32 0, !dbg !7239
  %22 = load i32, i32* %lattice_val21, align 8, !dbg !7239
  %cmp22 = icmp eq i32 %22, 2, !dbg !7240
  br i1 %cmp22, label %if.then23, label %if.end37, !dbg !7241

if.then23:                                        ; preds = %land.lhs.true20
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !7242, metadata !DIExpression()), !dbg !7244
  %23 = load %struct.prop_value_d*, %struct.prop_value_d** %val10, align 8, !dbg !7245
  %value24 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %23, i32 0, i32 1, !dbg !7246
  %24 = load %union.tree_node*, %union.tree_node** %value24, align 8, !dbg !7246
  %call25 = call %union.tree_node* @unshare_expr(%union.tree_node* %24), !dbg !7247
  store %union.tree_node* %call25, %union.tree_node** %new_rhs, align 8, !dbg !7244
  call void @llvm.dbg.declare(metadata i8* %res, metadata !7248, metadata !DIExpression()), !dbg !7249
  %25 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7250
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !7250
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7250
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7250
  %27 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !7252
  %common26 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7252
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !7252
  %28 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !7252
  %call28 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %26, %union.tree_node* %28), !dbg !7253
  %tobool29 = icmp ne i8 %call28, 0, !dbg !7253
  br i1 %tobool29, label %if.end34, label %if.then30, !dbg !7254

if.then30:                                        ; preds = %if.then23
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7255
  %common31 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !7255
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !7255
  %30 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !7255
  %31 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !7255
  %call33 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %30, %union.tree_node* %31), !dbg !7255
  store %union.tree_node* %call33, %union.tree_node** %new_rhs, align 8, !dbg !7256
  br label %if.end34, !dbg !7257

if.end34:                                         ; preds = %if.then30, %if.then23
  %32 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7258
  %33 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !7259
  %call35 = call zeroext i8 @update_call_from_tree(%struct.gimple_stmt_iterator* %32, %union.tree_node* %33), !dbg !7260
  store i8 %call35, i8* %res, align 1, !dbg !7261
  %34 = load i8, i8* %res, align 1, !dbg !7262
  %tobool36 = icmp ne i8 %34, 0, !dbg !7262
  br i1 %tobool36, label %cond.false, label %cond.true, !dbg !7262

cond.true:                                        ; preds = %if.end34
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 1533, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7262
  br label %cond.end, !dbg !7262

cond.false:                                       ; preds = %if.end34
  br label %cond.end, !dbg !7262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7262
  store i8 1, i8* %retval, align 1, !dbg !7263
  br label %return, !dbg !7263

if.end37:                                         ; preds = %land.lhs.true20, %land.lhs.true17, %land.lhs.true, %sw.bb8
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7264
  %call38 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %35), !dbg !7264
  %common39 = bitcast %union.tree_node* %call38 to %struct.tree_common*, !dbg !7264
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !7264
  %36 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !7264
  %common41 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !7264
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !7264
  %37 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !7264
  %type43 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !7264
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 1, !dbg !7264
  %38 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7264
  store %union.tree_node* %38, %union.tree_node** %argt, align 8, !dbg !7265
  store i32 0, i32* %i, align 4, !dbg !7266
  br label %for.cond, !dbg !7268

for.cond:                                         ; preds = %for.inc, %if.end37
  %39 = load i32, i32* %i, align 4, !dbg !7269
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7271
  %call44 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %40), !dbg !7272
  %cmp45 = icmp ult i32 %39, %call44, !dbg !7273
  br i1 %cmp45, label %land.rhs, label %land.end, !dbg !7274

land.rhs:                                         ; preds = %for.cond
  %41 = load %union.tree_node*, %union.tree_node** %argt, align 8, !dbg !7275
  %tobool46 = icmp ne %union.tree_node* %41, null, !dbg !7274
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %42 = phi i1 [ false, %for.cond ], [ %tobool46, %land.rhs ], !dbg !7276
  br i1 %42, label %for.body, label %for.end, !dbg !7277

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7278, metadata !DIExpression()), !dbg !7280
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7281
  %44 = load i32, i32* %i, align 4, !dbg !7282
  %call47 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %43, i32 %44), !dbg !7283
  store %union.tree_node* %call47, %union.tree_node** %arg, align 8, !dbg !7280
  %45 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7284
  %base48 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !7284
  %46 = bitcast %struct.tree_base* %base48 to i64*, !dbg !7284
  %bf.load49 = load i64, i64* %46, align 8, !dbg !7284
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !7284
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !7284
  %cmp52 = icmp eq i32 %bf.cast51, 141, !dbg !7286
  br i1 %cmp52, label %land.lhs.true53, label %if.end72, !dbg !7287

land.lhs.true53:                                  ; preds = %for.body
  %47 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7288
  %call54 = call %struct.prop_value_d* @get_value(%union.tree_node* %47), !dbg !7289
  store %struct.prop_value_d* %call54, %struct.prop_value_d** %val10, align 8, !dbg !7290
  %tobool55 = icmp ne %struct.prop_value_d* %call54, null, !dbg !7290
  br i1 %tobool55, label %land.lhs.true56, label %if.end72, !dbg !7291

land.lhs.true56:                                  ; preds = %land.lhs.true53
  %48 = load %struct.prop_value_d*, %struct.prop_value_d** %val10, align 8, !dbg !7292
  %lattice_val57 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %48, i32 0, i32 0, !dbg !7293
  %49 = load i32, i32* %lattice_val57, align 8, !dbg !7293
  %cmp58 = icmp eq i32 %49, 2, !dbg !7294
  br i1 %cmp58, label %land.lhs.true59, label %if.end72, !dbg !7295

land.lhs.true59:                                  ; preds = %land.lhs.true56
  %50 = load %union.tree_node*, %union.tree_node** %argt, align 8, !dbg !7296
  %list = bitcast %union.tree_node* %50 to %struct.tree_list*, !dbg !7296
  %value60 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !7296
  %51 = load %union.tree_node*, %union.tree_node** %value60, align 8, !dbg !7296
  %type61 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !7296
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 16, !dbg !7296
  %52 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !7296
  %53 = load %struct.prop_value_d*, %struct.prop_value_d** %val10, align 8, !dbg !7297
  %value62 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %53, i32 0, i32 1, !dbg !7297
  %54 = load %union.tree_node*, %union.tree_node** %value62, align 8, !dbg !7297
  %common63 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !7297
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !7297
  %55 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !7297
  %type65 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !7297
  %main_variant66 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 16, !dbg !7297
  %56 = load %union.tree_node*, %union.tree_node** %main_variant66, align 8, !dbg !7297
  %call67 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %52, %union.tree_node* %56), !dbg !7298
  %conv = zext i8 %call67 to i32, !dbg !7298
  %tobool68 = icmp ne i32 %conv, 0, !dbg !7298
  br i1 %tobool68, label %if.then69, label %if.end72, !dbg !7299

if.then69:                                        ; preds = %land.lhs.true59
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7300
  %58 = load i32, i32* %i, align 4, !dbg !7302
  %59 = load %struct.prop_value_d*, %struct.prop_value_d** %val10, align 8, !dbg !7303
  %value70 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %59, i32 0, i32 1, !dbg !7304
  %60 = load %union.tree_node*, %union.tree_node** %value70, align 8, !dbg !7304
  %call71 = call %union.tree_node* @unshare_expr(%union.tree_node* %60), !dbg !7305
  call void @gimple_call_set_arg(%union.gimple_statement_d* %57, i32 %58, %union.tree_node* %call71), !dbg !7306
  store i8 1, i8* %changed, align 1, !dbg !7307
  br label %if.end72, !dbg !7308

if.end72:                                         ; preds = %if.then69, %land.lhs.true59, %land.lhs.true56, %land.lhs.true53, %for.body
  br label %for.inc, !dbg !7309

for.inc:                                          ; preds = %if.end72
  %61 = load i32, i32* %i, align 4, !dbg !7310
  %inc = add i32 %61, 1, !dbg !7310
  store i32 %inc, i32* %i, align 4, !dbg !7310
  %62 = load %union.tree_node*, %union.tree_node** %argt, align 8, !dbg !7311
  %common73 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !7311
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 1, !dbg !7311
  %63 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7311
  store %union.tree_node* %63, %union.tree_node** %argt, align 8, !dbg !7312
  br label %for.cond, !dbg !7313, !llvm.loop !7314

for.end:                                          ; preds = %land.end
  %64 = load i8, i8* %changed, align 1, !dbg !7316
  store i8 %64, i8* %retval, align 1, !dbg !7317
  br label %return, !dbg !7317

sw.bb74:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs75, metadata !7318, metadata !DIExpression()), !dbg !7320
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7321
  %call76 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %65), !dbg !7322
  store %union.tree_node* %call76, %union.tree_node** %lhs75, align 8, !dbg !7320
  call void @llvm.dbg.declare(metadata %struct.prop_value_d** %val77, metadata !7323, metadata !DIExpression()), !dbg !7324
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7325
  %call78 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %66), !dbg !7327
  %conv79 = zext i8 %call78 to i32, !dbg !7327
  %tobool80 = icmp ne i32 %conv79, 0, !dbg !7327
  br i1 %tobool80, label %land.lhs.true81, label %if.end109, !dbg !7328

land.lhs.true81:                                  ; preds = %sw.bb74
  %67 = load %union.tree_node*, %union.tree_node** %lhs75, align 8, !dbg !7329
  %base82 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !7329
  %68 = bitcast %struct.tree_base* %base82 to i64*, !dbg !7329
  %bf.load83 = load i64, i64* %68, align 8, !dbg !7329
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !7329
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !7329
  %cmp86 = icmp eq i32 %bf.cast85, 141, !dbg !7330
  br i1 %cmp86, label %land.lhs.true88, label %if.end109, !dbg !7331

land.lhs.true88:                                  ; preds = %land.lhs.true81
  %69 = load %union.tree_node*, %union.tree_node** %lhs75, align 8, !dbg !7332
  %call89 = call %struct.prop_value_d* @get_value(%union.tree_node* %69), !dbg !7333
  store %struct.prop_value_d* %call89, %struct.prop_value_d** %val77, align 8, !dbg !7334
  %tobool90 = icmp ne %struct.prop_value_d* %call89, null, !dbg !7334
  br i1 %tobool90, label %land.lhs.true91, label %if.end109, !dbg !7335

land.lhs.true91:                                  ; preds = %land.lhs.true88
  %70 = load %struct.prop_value_d*, %struct.prop_value_d** %val77, align 8, !dbg !7336
  %lattice_val92 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %70, i32 0, i32 0, !dbg !7337
  %71 = load i32, i32* %lattice_val92, align 8, !dbg !7337
  %cmp93 = icmp eq i32 %71, 2, !dbg !7338
  br i1 %cmp93, label %if.then95, label %if.end109, !dbg !7339

if.then95:                                        ; preds = %land.lhs.true91
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !7340, metadata !DIExpression()), !dbg !7342
  %72 = load %struct.prop_value_d*, %struct.prop_value_d** %val77, align 8, !dbg !7343
  %value96 = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %72, i32 0, i32 1, !dbg !7344
  %73 = load %union.tree_node*, %union.tree_node** %value96, align 8, !dbg !7344
  %call97 = call %union.tree_node* @unshare_expr(%union.tree_node* %73), !dbg !7345
  store %union.tree_node* %call97, %union.tree_node** %rhs, align 8, !dbg !7342
  %74 = load %union.tree_node*, %union.tree_node** %lhs75, align 8, !dbg !7346
  %common98 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !7346
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 2, !dbg !7346
  %75 = load %union.tree_node*, %union.tree_node** %type99, align 8, !dbg !7346
  %76 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7348
  %common100 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !7348
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !7348
  %77 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !7348
  %call102 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %75, %union.tree_node* %77), !dbg !7349
  %tobool103 = icmp ne i8 %call102, 0, !dbg !7349
  br i1 %tobool103, label %if.end108, label %if.then104, !dbg !7350

if.then104:                                       ; preds = %if.then95
  %78 = load %union.tree_node*, %union.tree_node** %lhs75, align 8, !dbg !7351
  %common105 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !7351
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !7351
  %79 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !7351
  %80 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7351
  %call107 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %79, %union.tree_node* %80), !dbg !7351
  store %union.tree_node* %call107, %union.tree_node** %rhs, align 8, !dbg !7352
  br label %if.end108, !dbg !7353

if.end108:                                        ; preds = %if.then104, %if.then95
  %81 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7354
  %82 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7355
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %81, %union.tree_node* %82), !dbg !7356
  store i8 1, i8* %retval, align 1, !dbg !7357
  br label %return, !dbg !7357

if.end109:                                        ; preds = %land.lhs.true91, %land.lhs.true88, %land.lhs.true81, %sw.bb74
  store i8 0, i8* %retval, align 1, !dbg !7358
  br label %return, !dbg !7358

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7359
  br label %return, !dbg !7359

return:                                           ; preds = %sw.default, %if.end109, %if.end108, %for.end, %cond.end, %if.end7, %if.then
  %83 = load i8, i8* %retval, align 1, !dbg !7360
  ret i8 %83, !dbg !7360
}

declare dso_local void @free(i8*) #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_false(%union.gimple_statement_d* %gs) #0 !dbg !7361 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7366
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7367
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !7368
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7369
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !7370
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !7371
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7372
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !7373
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7374
  %bf.load = load i32, i32* %5, align 8, !dbg !7375
  %bf.clear = and i32 %bf.load, 65535, !dbg !7375
  %bf.set = or i32 %bf.clear, 6619136, !dbg !7375
  store i32 %bf.set, i32* %5, align 8, !dbg !7375
  ret void, !dbg !7376
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_true(%union.gimple_statement_d* %gs) #0 !dbg !7377 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7380
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7381
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !7382
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7383
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7384
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !7385
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7386
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !7387
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7388
  %bf.load = load i32, i32* %5, align 8, !dbg !7389
  %bf.clear = and i32 %bf.load, 65535, !dbg !7389
  %bf.set = or i32 %bf.clear, 6619136, !dbg !7389
  store i32 %bf.set, i32* %5, align 8, !dbg !7389
  ret void, !dbg !7390
}

declare dso_local zeroext i8 @update_call_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !7391 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7394, metadata !DIExpression()), !dbg !7395
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7396, metadata !DIExpression()), !dbg !7397
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !7398, metadata !DIExpression()), !dbg !7399
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7400
  %1 = load i32, i32* %index.addr, align 4, !dbg !7401
  %add = add i32 %1, 3, !dbg !7402
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !7403
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !7404
  ret void, !dbg !7405
}

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7406 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7409, metadata !DIExpression()), !dbg !7410
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7411, metadata !DIExpression()), !dbg !7412
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7413
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7414
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7415
  ret void, !dbg !7416
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !7417 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7418, metadata !DIExpression()), !dbg !7419
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !7420, metadata !DIExpression()), !dbg !7421
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7422
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !7423
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !7424
  ret void, !dbg !7425
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7426 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7427, metadata !DIExpression()), !dbg !7428
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7429, metadata !DIExpression()), !dbg !7430
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7431, metadata !DIExpression()), !dbg !7432
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7433
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7433
  %conv = zext i8 %call to i32, !dbg !7433
  %tobool = icmp ne i32 %conv, 0, !dbg !7433
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7433

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7433
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7433
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7433
  %cmp = icmp ult i32 %1, %call1, !dbg !7433
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7433

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7433
  br label %cond.end, !dbg !7433

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7433

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7433
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7434
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7435
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7436
  %5 = load i32, i32* %i.addr, align 4, !dbg !7437
  %idxprom = zext i32 %5 to i64, !dbg !7436
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7436
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7438
  ret void, !dbg !7439
}

declare dso_local %union.tree_node* @byte_position(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local %union.tree_node* @signed_type_for(%union.tree_node*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local { i64, i64 } @double_int_sext(i64, i64, i32) #2

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) #2

declare dso_local i32 @div_and_round_double(i32, i32, i64, i64, i64, i64, i64*, i64*, i64*, i64*) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !7440 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7441, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7443, metadata !DIExpression()), !dbg !7444
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7445
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7446
  store i32 %call, i32* %code, align 4, !dbg !7444
  %1 = load i32, i32* %code, align 4, !dbg !7447
  %cmp = icmp eq i32 %1, 6, !dbg !7449
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7450

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7451
  %cmp1 = icmp eq i32 %2, 1, !dbg !7452
  br i1 %cmp1, label %if.then, label %if.else, !dbg !7453

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7454
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7455
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7456
  %bf.load = load i32, i32* %4, align 8, !dbg !7456
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7456
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !7457
  br label %return, !dbg !7457

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !7458
  %cmp2 = icmp eq i32 %5, 8, !dbg !7460
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7461

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !7462
  br label %return, !dbg !7462

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7463
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7464
  br label %return, !dbg !7464

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7465
  ret i32 %6, !dbg !7465
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @fold_gimple_assign(%struct.gimple_stmt_iterator* %si) #0 !dbg !7466 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %si.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %subcode = alloca i32, align 4
  %loc = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %set = alloca i8, align 1
  %cond_loc = alloca i32, align 4
  %tem90 = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %rhs226 = alloca %union.tree_node*, align 8
  %type307 = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %type321 = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %si, %struct.gimple_stmt_iterator** %si.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si.addr, metadata !7469, metadata !DIExpression()), !dbg !7470
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7471, metadata !DIExpression()), !dbg !7472
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si.addr, align 8, !dbg !7473
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !7474
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7472
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !7475, metadata !DIExpression()), !dbg !7476
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7477
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !7478
  store i32 %call1, i32* %subcode, align 4, !dbg !7476
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7479, metadata !DIExpression()), !dbg !7480
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7481
  %call2 = call i32 @gimple_location(%union.gimple_statement_d* %2), !dbg !7482
  store i32 %call2, i32* %loc, align 4, !dbg !7480
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !7483, metadata !DIExpression()), !dbg !7484
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !7484
  %3 = load i32, i32* %subcode, align 4, !dbg !7485
  %call3 = call i32 @get_gimple_rhs_class(i32 %3), !dbg !7486
  switch i32 %call3, label %sw.epilog [
    i32 3, label %sw.bb
    i32 2, label %sw.bb225
    i32 1, label %sw.bb316
    i32 0, label %sw.bb389
  ], !dbg !7487

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !7488, metadata !DIExpression()), !dbg !7491
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7492
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !7493
  store %union.tree_node* %call4, %union.tree_node** %rhs, align 8, !dbg !7491
  %5 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7494
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7494
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7494
  %bf.load = load i64, i64* %6, align 8, !dbg !7494
  %bf.clear = and i64 %bf.load, 65535, !dbg !7494
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7494
  %cmp = icmp eq i32 %bf.cast, 56, !dbg !7496
  br i1 %cmp, label %if.then, label %if.else62, !dbg !7497

if.then:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7498, metadata !DIExpression()), !dbg !7500
  %7 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7501
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7501
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7501
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7501
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7501
  store %union.tree_node* %8, %union.tree_node** %op0, align 8, !dbg !7500
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !7502, metadata !DIExpression()), !dbg !7503
  call void @llvm.dbg.declare(metadata i8* %set, metadata !7504, metadata !DIExpression()), !dbg !7505
  store i8 0, i8* %set, align 1, !dbg !7505
  call void @llvm.dbg.declare(metadata i32* %cond_loc, metadata !7506, metadata !DIExpression()), !dbg !7507
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7508
  %base5 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7508
  %10 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7508
  %bf.load6 = load i64, i64* %10, align 8, !dbg !7508
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7508
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7508
  %idxprom = sext i32 %bf.cast8 to i64, !dbg !7508
  %arrayidx9 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7508
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !7508
  %cmp10 = icmp uge i32 %11, 4, !dbg !7508
  br i1 %cmp10, label %land.lhs.true, label %cond.false, !dbg !7508

land.lhs.true:                                    ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7508
  %base11 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7508
  %13 = bitcast %struct.tree_base* %base11 to i64*, !dbg !7508
  %bf.load12 = load i64, i64* %13, align 8, !dbg !7508
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !7508
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7508
  %idxprom15 = sext i32 %bf.cast14 to i64, !dbg !7508
  %arrayidx16 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom15, !dbg !7508
  %14 = load i32, i32* %arrayidx16, align 4, !dbg !7508
  %cmp17 = icmp ule i32 %14, 10, !dbg !7508
  br i1 %cmp17, label %cond.true, label %cond.false, !dbg !7508

cond.true:                                        ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7508
  %exp18 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !7508
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp18, i32 0, i32 1, !dbg !7508
  %16 = load i32, i32* %locus, align 8, !dbg !7508
  br label %cond.end, !dbg !7508

cond.false:                                       ; preds = %land.lhs.true, %if.then
  br label %cond.end, !dbg !7508

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ 0, %cond.false ], !dbg !7508
  store i32 %cond, i32* %cond_loc, align 4, !dbg !7507
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7509
  %base19 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7509
  %18 = bitcast %struct.tree_base* %base19 to i64*, !dbg !7509
  %bf.load20 = load i64, i64* %18, align 8, !dbg !7509
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !7509
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !7509
  %idxprom23 = sext i32 %bf.cast22 to i64, !dbg !7509
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom23, !dbg !7509
  %19 = load i32, i32* %arrayidx24, align 4, !dbg !7509
  %cmp25 = icmp eq i32 %19, 5, !dbg !7509
  br i1 %cmp25, label %if.then26, label %if.else, !dbg !7511

if.then26:                                        ; preds = %cond.end
  call void @fold_defer_overflow_warnings(), !dbg !7512
  %20 = load i32, i32* %cond_loc, align 4, !dbg !7514
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7515
  %base27 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7515
  %22 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7515
  %bf.load28 = load i64, i64* %22, align 8, !dbg !7515
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7515
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7515
  %23 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7516
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !7516
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7516
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7516
  %25 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7517
  %exp31 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !7517
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !7517
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !7517
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !7517
  %27 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7518
  %exp34 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !7518
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !7518
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 1, !dbg !7518
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !7518
  %call37 = call %union.tree_node* @fold_binary_loc(i32 %20, i32 %bf.cast30, %union.tree_node* %24, %union.tree_node* %26, %union.tree_node* %28), !dbg !7519
  store %union.tree_node* %call37, %union.tree_node** %tem, align 8, !dbg !7520
  %29 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7521
  %tobool = icmp ne %union.tree_node* %29, null, !dbg !7521
  br i1 %tobool, label %land.lhs.true38, label %land.end, !dbg !7522

land.lhs.true38:                                  ; preds = %if.then26
  %30 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7523
  %call39 = call zeroext i8 @is_gimple_condexpr(%union.tree_node* %30), !dbg !7524
  %conv = zext i8 %call39 to i32, !dbg !7524
  %tobool40 = icmp ne i32 %conv, 0, !dbg !7524
  br i1 %tobool40, label %land.rhs, label %land.end, !dbg !7525

land.rhs:                                         ; preds = %land.lhs.true38
  %31 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7526
  %call41 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %31), !dbg !7527
  %conv42 = zext i8 %call41 to i32, !dbg !7527
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !7525
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true38, %if.then26
  %32 = phi i1 [ false, %land.lhs.true38 ], [ false, %if.then26 ], [ %tobool43, %land.rhs ], !dbg !7528
  %land.ext = zext i1 %32 to i32, !dbg !7525
  %conv44 = trunc i32 %land.ext to i8, !dbg !7529
  store i8 %conv44, i8* %set, align 1, !dbg !7530
  %33 = load i8, i8* %set, align 1, !dbg !7531
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7532
  call void @fold_undefer_overflow_warnings(i8 zeroext %33, %union.gimple_statement_d* %34, i32 0), !dbg !7533
  br label %if.end49, !dbg !7534

if.else:                                          ; preds = %cond.end
  %35 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7535
  %call45 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %35), !dbg !7537
  %tobool46 = icmp ne i8 %call45, 0, !dbg !7537
  br i1 %tobool46, label %if.then47, label %if.else48, !dbg !7538

if.then47:                                        ; preds = %if.else
  %36 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7539
  store %union.tree_node* %36, %union.tree_node** %tem, align 8, !dbg !7541
  store i8 1, i8* %set, align 1, !dbg !7542
  br label %if.end, !dbg !7543

if.else48:                                        ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7544
  br label %return, !dbg !7544

if.end:                                           ; preds = %if.then47
  br label %if.end49

if.end49:                                         ; preds = %if.end, %land.end
  %37 = load i8, i8* %set, align 1, !dbg !7545
  %tobool50 = icmp ne i8 %37, 0, !dbg !7545
  br i1 %tobool50, label %if.then51, label %if.end61, !dbg !7547

if.then51:                                        ; preds = %if.end49
  %38 = load i32, i32* %cond_loc, align 4, !dbg !7548
  %39 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7548
  %common52 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !7548
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !7548
  %40 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !7548
  %41 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7548
  %42 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7548
  %exp54 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !7548
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 3, !dbg !7548
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i64 0, i64 1, !dbg !7548
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8, !dbg !7548
  %44 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7548
  %exp57 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !7548
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !7548
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 2, !dbg !7548
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !7548
  %call60 = call %union.tree_node* @fold_build3_stat_loc(i32 %38, i32 56, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %43, %union.tree_node* %45), !dbg !7548
  store %union.tree_node* %call60, %union.tree_node** %result, align 8, !dbg !7549
  br label %if.end61, !dbg !7550

if.end61:                                         ; preds = %if.then51, %if.end49
  br label %if.end210, !dbg !7551

if.else62:                                        ; preds = %sw.bb
  %46 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7552
  %base63 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !7552
  %47 = bitcast %struct.tree_base* %base63 to i64*, !dbg !7552
  %bf.load64 = load i64, i64* %47, align 8, !dbg !7552
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !7552
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !7552
  %cmp67 = icmp eq i32 %bf.cast66, 152, !dbg !7554
  br i1 %cmp67, label %if.then69, label %if.else71, !dbg !7555

if.then69:                                        ; preds = %if.else62
  %48 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7556
  %call70 = call %union.tree_node* @maybe_fold_tmr(%union.tree_node* %48), !dbg !7557
  store %union.tree_node* %call70, %union.tree_node** %retval, align 8, !dbg !7558
  br label %return, !dbg !7558

if.else71:                                        ; preds = %if.else62
  %49 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7559
  %base72 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !7559
  %50 = bitcast %struct.tree_base* %base72 to i64*, !dbg !7559
  %bf.load73 = load i64, i64* %50, align 8, !dbg !7559
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !7559
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !7559
  %idxprom76 = sext i32 %bf.cast75 to i64, !dbg !7559
  %arrayidx77 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom76, !dbg !7559
  %51 = load i32, i32* %arrayidx77, align 4, !dbg !7559
  %cmp78 = icmp eq i32 %51, 4, !dbg !7559
  br i1 %cmp78, label %if.then80, label %if.else82, !dbg !7561

if.then80:                                        ; preds = %if.else71
  %52 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7562
  %call81 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %52, i8 zeroext 0), !dbg !7563
  store %union.tree_node* %call81, %union.tree_node** %retval, align 8, !dbg !7564
  br label %return, !dbg !7564

if.else82:                                        ; preds = %if.else71
  %53 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7565
  %base83 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !7565
  %54 = bitcast %struct.tree_base* %base83 to i64*, !dbg !7565
  %bf.load84 = load i64, i64* %54, align 8, !dbg !7565
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !7565
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !7565
  %cmp87 = icmp eq i32 %bf.cast86, 121, !dbg !7567
  br i1 %cmp87, label %if.then89, label %if.else102, !dbg !7568

if.then89:                                        ; preds = %if.else82
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem90, metadata !7569, metadata !DIExpression()), !dbg !7571
  %55 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7572
  %exp91 = bitcast %union.tree_node* %55 to %struct.tree_exp*, !dbg !7572
  %operands92 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp91, i32 0, i32 3, !dbg !7572
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands92, i64 0, i64 0, !dbg !7572
  %56 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8, !dbg !7572
  %call94 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %56, i8 zeroext 1), !dbg !7573
  store %union.tree_node* %call94, %union.tree_node** %tem90, align 8, !dbg !7571
  %57 = load %union.tree_node*, %union.tree_node** %tem90, align 8, !dbg !7574
  %tobool95 = icmp ne %union.tree_node* %57, null, !dbg !7574
  br i1 %tobool95, label %if.then96, label %if.end101, !dbg !7576

if.then96:                                        ; preds = %if.then89
  %58 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7577
  %common97 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !7577
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !7577
  %59 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !7577
  %60 = load i32, i32* %loc, align 4, !dbg !7577
  %61 = load %union.tree_node*, %union.tree_node** %tem90, align 8, !dbg !7577
  %call99 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %60, %union.tree_node* %61), !dbg !7577
  %call100 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %59, %union.tree_node* %call99), !dbg !7577
  store %union.tree_node* %call100, %union.tree_node** %result, align 8, !dbg !7578
  br label %if.end101, !dbg !7579

if.end101:                                        ; preds = %if.then96, %if.then89
  br label %if.end207, !dbg !7580

if.else102:                                       ; preds = %if.else82
  %62 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7581
  %base103 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !7581
  %63 = bitcast %struct.tree_base* %base103 to i64*, !dbg !7581
  %bf.load104 = load i64, i64* %63, align 8, !dbg !7581
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !7581
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !7581
  %cmp107 = icmp eq i32 %bf.cast106, 51, !dbg !7583
  br i1 %cmp107, label %land.lhs.true109, label %if.else193, !dbg !7584

land.lhs.true109:                                 ; preds = %if.else102
  %64 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7585
  %common110 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !7585
  %type111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2, !dbg !7585
  %65 = load %union.tree_node*, %union.tree_node** %type111, align 8, !dbg !7585
  %base112 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !7585
  %66 = bitcast %struct.tree_base* %base112 to i64*, !dbg !7585
  %bf.load113 = load i64, i64* %66, align 8, !dbg !7585
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !7585
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !7585
  %cmp116 = icmp eq i32 %bf.cast115, 14, !dbg !7586
  br i1 %cmp116, label %land.lhs.true118, label %if.else193, !dbg !7587

land.lhs.true118:                                 ; preds = %land.lhs.true109
  %67 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7588
  %constructor = bitcast %union.tree_node* %67 to %struct.tree_constructor*, !dbg !7588
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !7588
  %68 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !7588
  %tobool119 = icmp ne %struct.VEC_constructor_elt_gc* %68, null, !dbg !7588
  br i1 %tobool119, label %cond.true120, label %cond.false124, !dbg !7588

cond.true120:                                     ; preds = %land.lhs.true118
  %69 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7588
  %constructor121 = bitcast %union.tree_node* %69 to %struct.tree_constructor*, !dbg !7588
  %elts122 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor121, i32 0, i32 1, !dbg !7588
  %70 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts122, align 8, !dbg !7588
  %base123 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %70, i32 0, i32 0, !dbg !7588
  br label %cond.end125, !dbg !7588

cond.false124:                                    ; preds = %land.lhs.true118
  br label %cond.end125, !dbg !7588

cond.end125:                                      ; preds = %cond.false124, %cond.true120
  %cond126 = phi %struct.VEC_constructor_elt_base* [ %base123, %cond.true120 ], [ null, %cond.false124 ], !dbg !7588
  %call127 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond126), !dbg !7588
  %conv128 = zext i32 %call127 to i64, !dbg !7588
  %71 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7589
  %common129 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !7589
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !7589
  %72 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !7589
  %type131 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !7589
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type131, i32 0, i32 6, !dbg !7589
  %bf.load132 = load i32, i32* %precision, align 4, !dbg !7589
  %bf.clear133 = and i32 %bf.load132, 1023, !dbg !7589
  %sh_prom = zext i32 %bf.clear133 to i64, !dbg !7589
  %shl = shl i64 1, %sh_prom, !dbg !7589
  %cmp134 = icmp eq i64 %conv128, %shl, !dbg !7590
  br i1 %cmp134, label %if.then136, label %if.else193, !dbg !7591

if.then136:                                       ; preds = %cond.end125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7592, metadata !DIExpression()), !dbg !7594
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7595, metadata !DIExpression()), !dbg !7596
  store i32 0, i32* %i, align 4, !dbg !7597
  br label %for.cond, !dbg !7597

for.cond:                                         ; preds = %for.inc, %if.then136
  %73 = load i32, i32* %i, align 4, !dbg !7599
  %74 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7599
  %constructor137 = bitcast %union.tree_node* %74 to %struct.tree_constructor*, !dbg !7599
  %elts138 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor137, i32 0, i32 1, !dbg !7599
  %75 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts138, align 8, !dbg !7599
  %tobool139 = icmp ne %struct.VEC_constructor_elt_gc* %75, null, !dbg !7599
  br i1 %tobool139, label %cond.true140, label %cond.false144, !dbg !7599

cond.true140:                                     ; preds = %for.cond
  %76 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7599
  %constructor141 = bitcast %union.tree_node* %76 to %struct.tree_constructor*, !dbg !7599
  %elts142 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor141, i32 0, i32 1, !dbg !7599
  %77 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts142, align 8, !dbg !7599
  %base143 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %77, i32 0, i32 0, !dbg !7599
  br label %cond.end145, !dbg !7599

cond.false144:                                    ; preds = %for.cond
  br label %cond.end145, !dbg !7599

cond.end145:                                      ; preds = %cond.false144, %cond.true140
  %cond146 = phi %struct.VEC_constructor_elt_base* [ %base143, %cond.true140 ], [ null, %cond.false144 ], !dbg !7599
  %call147 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond146), !dbg !7599
  %cmp148 = icmp uge i32 %73, %call147, !dbg !7599
  br i1 %cmp148, label %cond.true150, label %cond.false151, !dbg !7599

cond.true150:                                     ; preds = %cond.end145
  br label %cond.end163, !dbg !7599

cond.false151:                                    ; preds = %cond.end145
  %78 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7599
  %constructor152 = bitcast %union.tree_node* %78 to %struct.tree_constructor*, !dbg !7599
  %elts153 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor152, i32 0, i32 1, !dbg !7599
  %79 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts153, align 8, !dbg !7599
  %tobool154 = icmp ne %struct.VEC_constructor_elt_gc* %79, null, !dbg !7599
  br i1 %tobool154, label %cond.true155, label %cond.false159, !dbg !7599

cond.true155:                                     ; preds = %cond.false151
  %80 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7599
  %constructor156 = bitcast %union.tree_node* %80 to %struct.tree_constructor*, !dbg !7599
  %elts157 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor156, i32 0, i32 1, !dbg !7599
  %81 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts157, align 8, !dbg !7599
  %base158 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %81, i32 0, i32 0, !dbg !7599
  br label %cond.end160, !dbg !7599

cond.false159:                                    ; preds = %cond.false151
  br label %cond.end160, !dbg !7599

cond.end160:                                      ; preds = %cond.false159, %cond.true155
  %cond161 = phi %struct.VEC_constructor_elt_base* [ %base158, %cond.true155 ], [ null, %cond.false159 ], !dbg !7599
  %82 = load i32, i32* %i, align 4, !dbg !7599
  %call162 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond161, i32 %82), !dbg !7599
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call162, i32 0, i32 1, !dbg !7599
  %83 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7599
  store %union.tree_node* %83, %union.tree_node** %val, align 8, !dbg !7599
  br label %cond.end163, !dbg !7599

cond.end163:                                      ; preds = %cond.end160, %cond.true150
  %cond164 = phi i32 [ 0, %cond.true150 ], [ 1, %cond.end160 ], !dbg !7599
  %tobool165 = icmp ne i32 %cond164, 0, !dbg !7597
  br i1 %tobool165, label %for.body, label %for.end, !dbg !7597

for.body:                                         ; preds = %cond.end163
  %84 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7601
  %base166 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !7601
  %85 = bitcast %struct.tree_base* %base166 to i64*, !dbg !7601
  %bf.load167 = load i64, i64* %85, align 8, !dbg !7601
  %bf.clear168 = and i64 %bf.load167, 65535, !dbg !7601
  %bf.cast169 = trunc i64 %bf.clear168 to i32, !dbg !7601
  %cmp170 = icmp ne i32 %bf.cast169, 23, !dbg !7603
  br i1 %cmp170, label %land.lhs.true172, label %if.end187, !dbg !7604

land.lhs.true172:                                 ; preds = %for.body
  %86 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7605
  %base173 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !7605
  %87 = bitcast %struct.tree_base* %base173 to i64*, !dbg !7605
  %bf.load174 = load i64, i64* %87, align 8, !dbg !7605
  %bf.clear175 = and i64 %bf.load174, 65535, !dbg !7605
  %bf.cast176 = trunc i64 %bf.clear175 to i32, !dbg !7605
  %cmp177 = icmp ne i32 %bf.cast176, 24, !dbg !7606
  br i1 %cmp177, label %land.lhs.true179, label %if.end187, !dbg !7607

land.lhs.true179:                                 ; preds = %land.lhs.true172
  %88 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7608
  %base180 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !7608
  %89 = bitcast %struct.tree_base* %base180 to i64*, !dbg !7608
  %bf.load181 = load i64, i64* %89, align 8, !dbg !7608
  %bf.clear182 = and i64 %bf.load181, 65535, !dbg !7608
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !7608
  %cmp184 = icmp ne i32 %bf.cast183, 25, !dbg !7609
  br i1 %cmp184, label %if.then186, label %if.end187, !dbg !7610

if.then186:                                       ; preds = %land.lhs.true179
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7611
  br label %return, !dbg !7611

if.end187:                                        ; preds = %land.lhs.true179, %land.lhs.true172, %for.body
  br label %for.inc, !dbg !7612

for.inc:                                          ; preds = %if.end187
  %90 = load i32, i32* %i, align 4, !dbg !7599
  %inc = add i32 %90, 1, !dbg !7599
  store i32 %inc, i32* %i, align 4, !dbg !7599
  br label %for.cond, !dbg !7599, !llvm.loop !7613

for.end:                                          ; preds = %cond.end163
  %91 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7615
  %common188 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !7615
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !7615
  %92 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !7615
  %93 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7616
  %constructor190 = bitcast %union.tree_node* %93 to %struct.tree_constructor*, !dbg !7616
  %elts191 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor190, i32 0, i32 1, !dbg !7616
  %94 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts191, align 8, !dbg !7616
  %call192 = call %union.tree_node* @build_vector_from_ctor(%union.tree_node* %92, %struct.VEC_constructor_elt_gc* %94), !dbg !7617
  store %union.tree_node* %call192, %union.tree_node** %retval, align 8, !dbg !7618
  br label %return, !dbg !7618

if.else193:                                       ; preds = %cond.end125, %land.lhs.true109, %if.else102
  %95 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7619
  %base194 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !7619
  %96 = bitcast %struct.tree_base* %base194 to i64*, !dbg !7619
  %bf.load195 = load i64, i64* %96, align 8, !dbg !7619
  %bf.clear196 = and i64 %bf.load195, 65535, !dbg !7619
  %bf.cast197 = trunc i64 %bf.clear196 to i32, !dbg !7619
  %idxprom198 = sext i32 %bf.cast197 to i64, !dbg !7619
  %arrayidx199 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom198, !dbg !7619
  %97 = load i32, i32* %arrayidx199, align 4, !dbg !7619
  %cmp200 = icmp eq i32 %97, 3, !dbg !7619
  br i1 %cmp200, label %if.then202, label %if.end205, !dbg !7621

if.then202:                                       ; preds = %if.else193
  %98 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7622
  %call203 = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %98), !dbg !7623
  %call204 = call %union.tree_node* @unshare_expr(%union.tree_node* %call203), !dbg !7624
  store %union.tree_node* %call204, %union.tree_node** %retval, align 8, !dbg !7625
  br label %return, !dbg !7625

if.end205:                                        ; preds = %if.else193
  br label %if.end206

if.end206:                                        ; preds = %if.end205
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.end101
  br label %if.end208

if.end208:                                        ; preds = %if.end207
  br label %if.end209

if.end209:                                        ; preds = %if.end208
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.end61
  %99 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7626
  %cmp211 = icmp eq %union.tree_node* %99, null, !dbg !7628
  br i1 %cmp211, label %if.then213, label %if.end215, !dbg !7629

if.then213:                                       ; preds = %if.end210
  %100 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7630
  %call214 = call %union.tree_node* @fold(%union.tree_node* %100), !dbg !7631
  store %union.tree_node* %call214, %union.tree_node** %result, align 8, !dbg !7632
  br label %if.end215, !dbg !7633

if.end215:                                        ; preds = %if.then213, %if.end210
  %101 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7634
  %call216 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %101), !dbg !7634
  store %union.tree_node* %call216, %union.tree_node** %result, align 8, !dbg !7634
  %102 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7635
  %103 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7637
  %cmp217 = icmp ne %union.tree_node* %102, %103, !dbg !7638
  br i1 %cmp217, label %land.lhs.true219, label %if.end224, !dbg !7639

land.lhs.true219:                                 ; preds = %if.end215
  %104 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7640
  %call220 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %104), !dbg !7641
  %conv221 = zext i8 %call220 to i32, !dbg !7641
  %tobool222 = icmp ne i32 %conv221, 0, !dbg !7641
  br i1 %tobool222, label %if.then223, label %if.end224, !dbg !7642

if.then223:                                       ; preds = %land.lhs.true219
  %105 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7643
  store %union.tree_node* %105, %union.tree_node** %retval, align 8, !dbg !7644
  br label %return, !dbg !7644

if.end224:                                        ; preds = %land.lhs.true219, %if.end215
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7645
  br label %return, !dbg !7645

sw.bb225:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs226, metadata !7646, metadata !DIExpression()), !dbg !7648
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7649
  %call227 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %106), !dbg !7650
  store %union.tree_node* %call227, %union.tree_node** %rhs226, align 8, !dbg !7648
  %107 = load i32, i32* %loc, align 4, !dbg !7651
  %108 = load i32, i32* %subcode, align 4, !dbg !7652
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7653
  %call228 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %109), !dbg !7654
  %110 = load %union.tree_node*, %union.tree_node** %rhs226, align 8, !dbg !7655
  %call229 = call %union.tree_node* @fold_unary_loc(i32 %107, i32 %108, %union.tree_node* %call228, %union.tree_node* %110), !dbg !7656
  store %union.tree_node* %call229, %union.tree_node** %result, align 8, !dbg !7657
  %111 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7658
  %tobool230 = icmp ne %union.tree_node* %111, null, !dbg !7658
  br i1 %tobool230, label %if.then231, label %if.else264, !dbg !7660

if.then231:                                       ; preds = %sw.bb225
  %112 = load i32, i32* %subcode, align 4, !dbg !7661
  %cmp232 = icmp eq i32 %112, 116, !dbg !7661
  br i1 %cmp232, label %land.lhs.true236, label %lor.lhs.false, !dbg !7661

lor.lhs.false:                                    ; preds = %if.then231
  %113 = load i32, i32* %subcode, align 4, !dbg !7661
  %cmp234 = icmp eq i32 %113, 113, !dbg !7661
  br i1 %cmp234, label %land.lhs.true236, label %if.end258, !dbg !7664

land.lhs.true236:                                 ; preds = %lor.lhs.false, %if.then231
  %114 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7665
  %base237 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !7665
  %115 = bitcast %struct.tree_base* %base237 to i64*, !dbg !7665
  %bf.load238 = load i64, i64* %115, align 8, !dbg !7665
  %bf.clear239 = and i64 %bf.load238, 65535, !dbg !7665
  %bf.cast240 = trunc i64 %bf.clear239 to i32, !dbg !7665
  %cmp241 = icmp eq i32 %bf.cast240, 23, !dbg !7666
  br i1 %cmp241, label %land.lhs.true243, label %if.end258, !dbg !7667

land.lhs.true243:                                 ; preds = %land.lhs.true236
  %116 = load %union.tree_node*, %union.tree_node** %rhs226, align 8, !dbg !7668
  %base244 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !7668
  %117 = bitcast %struct.tree_base* %base244 to i64*, !dbg !7668
  %bf.load245 = load i64, i64* %117, align 8, !dbg !7668
  %bf.clear246 = and i64 %bf.load245, 65535, !dbg !7668
  %bf.cast247 = trunc i64 %bf.clear246 to i32, !dbg !7668
  %cmp248 = icmp eq i32 %bf.cast247, 23, !dbg !7669
  br i1 %cmp248, label %if.then250, label %if.end258, !dbg !7670

if.then250:                                       ; preds = %land.lhs.true243
  %118 = load %union.tree_node*, %union.tree_node** %rhs226, align 8, !dbg !7671
  %base251 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !7671
  %119 = bitcast %struct.tree_base* %base251 to i64*, !dbg !7671
  %bf.load252 = load i64, i64* %119, align 8, !dbg !7671
  %bf.lshr = lshr i64 %bf.load252, 27, !dbg !7671
  %bf.clear253 = and i64 %bf.lshr, 1, !dbg !7671
  %bf.cast254 = trunc i64 %bf.clear253 to i32, !dbg !7671
  %120 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7672
  %base255 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !7672
  %121 = bitcast %struct.tree_base* %base255 to i64*, !dbg !7672
  %122 = zext i32 %bf.cast254 to i64, !dbg !7673
  %bf.load256 = load i64, i64* %121, align 8, !dbg !7673
  %bf.value = and i64 %122, 1, !dbg !7673
  %bf.shl = shl i64 %bf.value, 27, !dbg !7673
  %bf.clear257 = and i64 %bf.load256, -134217729, !dbg !7673
  %bf.set = or i64 %bf.clear257, %bf.shl, !dbg !7673
  store i64 %bf.set, i64* %121, align 8, !dbg !7673
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7673
  br label %if.end258, !dbg !7672

if.end258:                                        ; preds = %if.then250, %land.lhs.true243, %land.lhs.true236, %lor.lhs.false
  %123 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7674
  %call259 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %123), !dbg !7674
  store %union.tree_node* %call259, %union.tree_node** %result, align 8, !dbg !7674
  %124 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7675
  %call260 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %124), !dbg !7677
  %tobool261 = icmp ne i8 %call260, 0, !dbg !7677
  br i1 %tobool261, label %if.then262, label %if.end263, !dbg !7678

if.then262:                                       ; preds = %if.end258
  %125 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7679
  store %union.tree_node* %125, %union.tree_node** %retval, align 8, !dbg !7680
  br label %return, !dbg !7680

if.end263:                                        ; preds = %if.end258
  br label %if.end315, !dbg !7681

if.else264:                                       ; preds = %sw.bb225
  %126 = load i32, i32* %subcode, align 4, !dbg !7682
  %cmp265 = icmp eq i32 %126, 116, !dbg !7682
  br i1 %cmp265, label %land.lhs.true270, label %lor.lhs.false267, !dbg !7682

lor.lhs.false267:                                 ; preds = %if.else264
  %127 = load i32, i32* %subcode, align 4, !dbg !7682
  %cmp268 = icmp eq i32 %127, 113, !dbg !7682
  br i1 %cmp268, label %land.lhs.true270, label %if.end314, !dbg !7684

land.lhs.true270:                                 ; preds = %lor.lhs.false267, %if.else264
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7685
  %call271 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %128), !dbg !7685
  %base272 = bitcast %union.tree_node* %call271 to %struct.tree_base*, !dbg !7685
  %129 = bitcast %struct.tree_base* %base272 to i64*, !dbg !7685
  %bf.load273 = load i64, i64* %129, align 8, !dbg !7685
  %bf.clear274 = and i64 %bf.load273, 65535, !dbg !7685
  %bf.cast275 = trunc i64 %bf.clear274 to i32, !dbg !7685
  %cmp276 = icmp eq i32 %bf.cast275, 10, !dbg !7685
  br i1 %cmp276, label %land.lhs.true286, label %lor.lhs.false278, !dbg !7685

lor.lhs.false278:                                 ; preds = %land.lhs.true270
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7685
  %call279 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %130), !dbg !7685
  %base280 = bitcast %union.tree_node* %call279 to %struct.tree_base*, !dbg !7685
  %131 = bitcast %struct.tree_base* %base280 to i64*, !dbg !7685
  %bf.load281 = load i64, i64* %131, align 8, !dbg !7685
  %bf.clear282 = and i64 %bf.load281, 65535, !dbg !7685
  %bf.cast283 = trunc i64 %bf.clear282 to i32, !dbg !7685
  %cmp284 = icmp eq i32 %bf.cast283, 12, !dbg !7685
  br i1 %cmp284, label %land.lhs.true286, label %if.end314, !dbg !7686

land.lhs.true286:                                 ; preds = %lor.lhs.false278, %land.lhs.true270
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7687
  %call287 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %132), !dbg !7687
  %common288 = bitcast %union.tree_node* %call287 to %struct.tree_common*, !dbg !7687
  %type289 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common288, i32 0, i32 2, !dbg !7687
  %133 = load %union.tree_node*, %union.tree_node** %type289, align 8, !dbg !7687
  %base290 = bitcast %union.tree_node* %133 to %struct.tree_base*, !dbg !7687
  %134 = bitcast %struct.tree_base* %base290 to i64*, !dbg !7687
  %bf.load291 = load i64, i64* %134, align 8, !dbg !7687
  %bf.clear292 = and i64 %bf.load291, 65535, !dbg !7687
  %bf.cast293 = trunc i64 %bf.clear292 to i32, !dbg !7687
  %cmp294 = icmp eq i32 %bf.cast293, 10, !dbg !7687
  br i1 %cmp294, label %if.then306, label %lor.lhs.false296, !dbg !7687

lor.lhs.false296:                                 ; preds = %land.lhs.true286
  %135 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7687
  %call297 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %135), !dbg !7687
  %common298 = bitcast %union.tree_node* %call297 to %struct.tree_common*, !dbg !7687
  %type299 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common298, i32 0, i32 2, !dbg !7687
  %136 = load %union.tree_node*, %union.tree_node** %type299, align 8, !dbg !7687
  %base300 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !7687
  %137 = bitcast %struct.tree_base* %base300 to i64*, !dbg !7687
  %bf.load301 = load i64, i64* %137, align 8, !dbg !7687
  %bf.clear302 = and i64 %bf.load301, 65535, !dbg !7687
  %bf.cast303 = trunc i64 %bf.clear302 to i32, !dbg !7687
  %cmp304 = icmp eq i32 %bf.cast303, 12, !dbg !7687
  br i1 %cmp304, label %if.then306, label %if.end314, !dbg !7688

if.then306:                                       ; preds = %lor.lhs.false296, %land.lhs.true286
  call void @llvm.dbg.declare(metadata %union.tree_node** %type307, metadata !7689, metadata !DIExpression()), !dbg !7691
  %138 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7692
  %call308 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %138), !dbg !7693
  store %union.tree_node* %call308, %union.tree_node** %type307, align 8, !dbg !7691
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7694, metadata !DIExpression()), !dbg !7695
  %139 = load i32, i32* %loc, align 4, !dbg !7696
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7697
  %call309 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %140), !dbg !7698
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7699
  %142 = load %union.tree_node*, %union.tree_node** %type307, align 8, !dbg !7700
  %call310 = call %union.tree_node* @maybe_fold_offset_to_address(i32 %139, %union.tree_node* %call309, %union.tree_node* %141, %union.tree_node* %142), !dbg !7701
  store %union.tree_node* %call310, %union.tree_node** %t, align 8, !dbg !7695
  %143 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7702
  %tobool311 = icmp ne %union.tree_node* %143, null, !dbg !7702
  br i1 %tobool311, label %if.then312, label %if.end313, !dbg !7704

if.then312:                                       ; preds = %if.then306
  %144 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7705
  store %union.tree_node* %144, %union.tree_node** %retval, align 8, !dbg !7706
  br label %return, !dbg !7706

if.end313:                                        ; preds = %if.then306
  br label %if.end314, !dbg !7707

if.end314:                                        ; preds = %if.end313, %lor.lhs.false296, %lor.lhs.false278, %lor.lhs.false267
  br label %if.end315

if.end315:                                        ; preds = %if.end314, %if.end263
  br label %sw.epilog, !dbg !7708

sw.bb316:                                         ; preds = %entry
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7709
  %call317 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %145), !dbg !7711
  %cmp318 = icmp eq i32 %call317, 66, !dbg !7712
  br i1 %cmp318, label %if.then320, label %if.end354, !dbg !7713

if.then320:                                       ; preds = %sw.bb316
  call void @llvm.dbg.declare(metadata %union.tree_node** %type321, metadata !7714, metadata !DIExpression()), !dbg !7716
  %146 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7717
  %call322 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %146), !dbg !7717
  %common323 = bitcast %union.tree_node* %call322 to %struct.tree_common*, !dbg !7717
  %type324 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common323, i32 0, i32 2, !dbg !7717
  %147 = load %union.tree_node*, %union.tree_node** %type324, align 8, !dbg !7717
  store %union.tree_node* %147, %union.tree_node** %type321, align 8, !dbg !7716
  %148 = load %union.tree_node*, %union.tree_node** %type321, align 8, !dbg !7718
  %common325 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !7718
  %type326 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common325, i32 0, i32 2, !dbg !7718
  %149 = load %union.tree_node*, %union.tree_node** %type326, align 8, !dbg !7718
  %base327 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !7718
  %150 = bitcast %struct.tree_base* %base327 to i64*, !dbg !7718
  %bf.load328 = load i64, i64* %150, align 8, !dbg !7718
  %bf.clear329 = and i64 %bf.load328, 65535, !dbg !7718
  %bf.cast330 = trunc i64 %bf.clear329 to i32, !dbg !7718
  %cmp331 = icmp eq i32 %bf.cast330, 15, !dbg !7720
  br i1 %cmp331, label %if.then333, label %if.end349, !dbg !7721

if.then333:                                       ; preds = %if.then320
  %151 = load %union.tree_node*, %union.tree_node** %type321, align 8, !dbg !7722
  %common334 = bitcast %union.tree_node* %151 to %struct.tree_common*, !dbg !7722
  %type335 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common334, i32 0, i32 2, !dbg !7722
  %152 = load %union.tree_node*, %union.tree_node** %type335, align 8, !dbg !7722
  %common336 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !7722
  %type337 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common336, i32 0, i32 2, !dbg !7722
  %153 = load %union.tree_node*, %union.tree_node** %type337, align 8, !dbg !7722
  %call338 = call %union.tree_node* @build_pointer_type(%union.tree_node* %153), !dbg !7724
  store %union.tree_node* %call338, %union.tree_node** %type321, align 8, !dbg !7725
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7726
  %call339 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %154), !dbg !7726
  %common340 = bitcast %union.tree_node* %call339 to %struct.tree_common*, !dbg !7726
  %type341 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common340, i32 0, i32 2, !dbg !7726
  %155 = load %union.tree_node*, %union.tree_node** %type341, align 8, !dbg !7726
  %156 = load %union.tree_node*, %union.tree_node** %type321, align 8, !dbg !7728
  %call342 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %155, %union.tree_node* %156), !dbg !7729
  %tobool343 = icmp ne i8 %call342, 0, !dbg !7729
  br i1 %tobool343, label %if.end348, label %if.then344, !dbg !7730

if.then344:                                       ; preds = %if.then333
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7731
  %call345 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %157), !dbg !7731
  %common346 = bitcast %union.tree_node* %call345 to %struct.tree_common*, !dbg !7731
  %type347 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common346, i32 0, i32 2, !dbg !7731
  %158 = load %union.tree_node*, %union.tree_node** %type347, align 8, !dbg !7731
  store %union.tree_node* %158, %union.tree_node** %type321, align 8, !dbg !7732
  br label %if.end348, !dbg !7733

if.end348:                                        ; preds = %if.then344, %if.then333
  br label %if.end349, !dbg !7734

if.end349:                                        ; preds = %if.end348, %if.then320
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7735
  %call350 = call i32 @gimple_location(%union.gimple_statement_d* %159), !dbg !7736
  %160 = load %union.tree_node*, %union.tree_node** %type321, align 8, !dbg !7737
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7738
  %call351 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %161), !dbg !7739
  %162 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7740
  %call352 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %162), !dbg !7741
  %call353 = call %union.tree_node* @maybe_fold_stmt_addition(i32 %call350, %union.tree_node* %160, %union.tree_node* %call351, %union.tree_node* %call352), !dbg !7742
  store %union.tree_node* %call353, %union.tree_node** %result, align 8, !dbg !7743
  br label %if.end354, !dbg !7744

if.end354:                                        ; preds = %if.end349, %sw.bb316
  %163 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7745
  %tobool355 = icmp ne %union.tree_node* %163, null, !dbg !7745
  br i1 %tobool355, label %if.end363, label %if.then356, !dbg !7747

if.then356:                                       ; preds = %if.end354
  %164 = load i32, i32* %loc, align 4, !dbg !7748
  %165 = load i32, i32* %subcode, align 4, !dbg !7749
  %166 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7750
  %call357 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %166), !dbg !7750
  %common358 = bitcast %union.tree_node* %call357 to %struct.tree_common*, !dbg !7750
  %type359 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common358, i32 0, i32 2, !dbg !7750
  %167 = load %union.tree_node*, %union.tree_node** %type359, align 8, !dbg !7750
  %168 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7751
  %call360 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %168), !dbg !7752
  %169 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7753
  %call361 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %169), !dbg !7754
  %call362 = call %union.tree_node* @fold_binary_loc(i32 %164, i32 %165, %union.tree_node* %167, %union.tree_node* %call360, %union.tree_node* %call361), !dbg !7755
  store %union.tree_node* %call362, %union.tree_node** %result, align 8, !dbg !7756
  br label %if.end363, !dbg !7757

if.end363:                                        ; preds = %if.then356, %if.end354
  %170 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7758
  %tobool364 = icmp ne %union.tree_node* %170, null, !dbg !7758
  br i1 %tobool364, label %if.then365, label %if.end388, !dbg !7760

if.then365:                                       ; preds = %if.end363
  %171 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7761
  %call366 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %171), !dbg !7761
  store %union.tree_node* %call366, %union.tree_node** %result, align 8, !dbg !7761
  %172 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7763
  %call367 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %172), !dbg !7765
  %tobool368 = icmp ne i8 %call367, 0, !dbg !7765
  br i1 %tobool368, label %if.then369, label %if.end370, !dbg !7766

if.then369:                                       ; preds = %if.then365
  %173 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7767
  store %union.tree_node* %173, %union.tree_node** %retval, align 8, !dbg !7768
  br label %return, !dbg !7768

if.end370:                                        ; preds = %if.then365
  %174 = load i32, i32* %subcode, align 4, !dbg !7769
  %call371 = call zeroext i8 @commutative_tree_code(i32 %174), !dbg !7771
  %conv372 = zext i8 %call371 to i32, !dbg !7771
  %tobool373 = icmp ne i32 %conv372, 0, !dbg !7771
  br i1 %tobool373, label %land.lhs.true374, label %if.end387, !dbg !7772

land.lhs.true374:                                 ; preds = %if.end370
  %175 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7773
  %call375 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %175), !dbg !7774
  %176 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7775
  %call376 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %176), !dbg !7776
  %call377 = call zeroext i8 @tree_swap_operands_p(%union.tree_node* %call375, %union.tree_node* %call376, i8 zeroext 0), !dbg !7777
  %conv378 = zext i8 %call377 to i32, !dbg !7777
  %tobool379 = icmp ne i32 %conv378, 0, !dbg !7777
  br i1 %tobool379, label %if.then380, label %if.end387, !dbg !7778

if.then380:                                       ; preds = %land.lhs.true374
  %177 = load i32, i32* %subcode, align 4, !dbg !7779
  %178 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7779
  %call381 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %178), !dbg !7779
  %common382 = bitcast %union.tree_node* %call381 to %struct.tree_common*, !dbg !7779
  %type383 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common382, i32 0, i32 2, !dbg !7779
  %179 = load %union.tree_node*, %union.tree_node** %type383, align 8, !dbg !7779
  %180 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7779
  %call384 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %180), !dbg !7779
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7779
  %call385 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %181), !dbg !7779
  %call386 = call %union.tree_node* @build2_stat(i32 %177, %union.tree_node* %179, %union.tree_node* %call384, %union.tree_node* %call385), !dbg !7779
  store %union.tree_node* %call386, %union.tree_node** %retval, align 8, !dbg !7780
  br label %return, !dbg !7780

if.end387:                                        ; preds = %land.lhs.true374, %if.end370
  br label %if.end388, !dbg !7781

if.end388:                                        ; preds = %if.end387, %if.end363
  br label %sw.epilog, !dbg !7782

sw.bb389:                                         ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 2954, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7783
  br label %sw.epilog, !dbg !7784

sw.epilog:                                        ; preds = %sw.bb389, %entry, %if.end388, %if.end315
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7785
  br label %return, !dbg !7785

return:                                           ; preds = %sw.epilog, %if.then380, %if.then369, %if.then312, %if.then262, %if.end224, %if.then223, %if.then202, %for.end, %if.then186, %if.then80, %if.then69, %if.else48
  %182 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7786
  ret %union.tree_node* %182, !dbg !7786
}

declare dso_local i32 @get_gimple_rhs_num_ops(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fold_gimple_cond(%union.gimple_statement_d* %stmt) #0 !dbg !7787 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %result = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7788, metadata !DIExpression()), !dbg !7789
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !7790, metadata !DIExpression()), !dbg !7791
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7792
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !7793
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7794
  %call1 = call i32 @gimple_cond_code(%union.gimple_statement_d* %1), !dbg !7795
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7796
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7797
  %call2 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %3), !dbg !7798
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7799
  %call3 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %4), !dbg !7800
  %call4 = call %union.tree_node* @fold_binary_loc(i32 %call, i32 %call1, %union.tree_node* %2, %union.tree_node* %call2, %union.tree_node* %call3), !dbg !7801
  store %union.tree_node* %call4, %union.tree_node** %result, align 8, !dbg !7791
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7802
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !7802
  br i1 %tobool, label %if.then, label %if.end12, !dbg !7804

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7805
  %call5 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %6), !dbg !7805
  store %union.tree_node* %call5, %union.tree_node** %result, align 8, !dbg !7805
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7807
  %call6 = call zeroext i8 @is_gimple_condexpr(%union.tree_node* %7), !dbg !7809
  %conv = zext i8 %call6 to i32, !dbg !7809
  %tobool7 = icmp ne i32 %conv, 0, !dbg !7809
  br i1 %tobool7, label %land.lhs.true, label %if.end, !dbg !7810

land.lhs.true:                                    ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7811
  %call8 = call zeroext i8 @valid_gimple_rhs_p(%union.tree_node* %8), !dbg !7812
  %conv9 = zext i8 %call8 to i32, !dbg !7812
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !7812
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7813

if.then11:                                        ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7814
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7816
  call void @gimple_cond_set_condition_from_tree(%union.gimple_statement_d* %9, %union.tree_node* %10), !dbg !7817
  store i8 1, i8* %retval, align 1, !dbg !7818
  br label %return, !dbg !7818

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %if.end12, !dbg !7819

if.end12:                                         ; preds = %if.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !7820
  br label %return, !dbg !7820

return:                                           ; preds = %if.end12, %if.then11
  %11 = load i8, i8* %retval, align 1, !dbg !7821
  ret i8 %11, !dbg !7821
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @maybe_fold_reference(%union.tree_node* %expr, i8 zeroext %is_lhs) #0 !dbg !7822 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %is_lhs.addr = alloca i8, align 1
  %t = alloca %union.tree_node**, align 8
  %tem = alloca %union.tree_node*, align 8
  %tem15 = alloca %union.tree_node*, align 8
  %tem34 = alloca %union.tree_node*, align 8
  %tem91 = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7825, metadata !DIExpression()), !dbg !7826
  store i8 %is_lhs, i8* %is_lhs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_lhs.addr, metadata !7827, metadata !DIExpression()), !dbg !7828
  call void @llvm.dbg.declare(metadata %union.tree_node*** %t, metadata !7829, metadata !DIExpression()), !dbg !7830
  store %union.tree_node** %expr.addr, %union.tree_node*** %t, align 8, !dbg !7830
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7831
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7831
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7831
  %bf.load = load i64, i64* %1, align 8, !dbg !7831
  %bf.clear = and i64 %bf.load, 65535, !dbg !7831
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7831
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !7833
  br i1 %cmp, label %land.lhs.true, label %if.end3, !dbg !7834

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* %is_lhs.addr, align 1, !dbg !7835
  %tobool = icmp ne i8 %2, 0, !dbg !7835
  br i1 %tobool, label %if.end3, label %if.then, !dbg !7836

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !7837, metadata !DIExpression()), !dbg !7839
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7840
  %call = call %union.tree_node* @fold_read_from_constant_string(%union.tree_node* %3), !dbg !7841
  store %union.tree_node* %call, %union.tree_node** %tem, align 8, !dbg !7839
  %4 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7842
  %tobool1 = icmp ne %union.tree_node* %4, null, !dbg !7842
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7844

if.then2:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7845
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !7846
  br label %return, !dbg !7846

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !7847

if.end3:                                          ; preds = %if.end, %land.lhs.true, %entry
  %6 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7848
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !7850
  %call4 = call zeroext i8 @handled_component_p(%union.tree_node* %7), !dbg !7851
  %conv = zext i8 %call4 to i32, !dbg !7851
  %tobool5 = icmp ne i32 %conv, 0, !dbg !7851
  br i1 %tobool5, label %land.lhs.true6, label %if.end21, !dbg !7852

land.lhs.true6:                                   ; preds = %if.end3
  %8 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7853
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !7853
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7853
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7853
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7853
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7853
  %base7 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7853
  %11 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7853
  %bf.load8 = load i64, i64* %11, align 8, !dbg !7853
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7853
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7853
  %idxprom = sext i32 %bf.cast10 to i64, !dbg !7853
  %arrayidx11 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7853
  %12 = load i32, i32* %arrayidx11, align 4, !dbg !7853
  %cmp12 = icmp eq i32 %12, 1, !dbg !7853
  br i1 %cmp12, label %if.then14, label %if.end21, !dbg !7854

if.then14:                                        ; preds = %land.lhs.true6
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem15, metadata !7855, metadata !DIExpression()), !dbg !7857
  %13 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7858
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !7859
  %call16 = call %union.tree_node* @fold(%union.tree_node* %14), !dbg !7860
  store %union.tree_node* %call16, %union.tree_node** %tem15, align 8, !dbg !7857
  %15 = load %union.tree_node*, %union.tree_node** %tem15, align 8, !dbg !7861
  %16 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7863
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !7864
  %cmp17 = icmp ne %union.tree_node* %15, %17, !dbg !7865
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !7866

if.then19:                                        ; preds = %if.then14
  %18 = load %union.tree_node*, %union.tree_node** %tem15, align 8, !dbg !7867
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !7868
  br label %return, !dbg !7868

if.end20:                                         ; preds = %if.then14
  br label %if.end21, !dbg !7869

if.end21:                                         ; preds = %if.end20, %land.lhs.true6, %if.end3
  br label %while.cond, !dbg !7870

while.cond:                                       ; preds = %while.body, %if.end21
  %19 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7871
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !7872
  %call22 = call zeroext i8 @handled_component_p(%union.tree_node* %20), !dbg !7873
  %tobool23 = icmp ne i8 %call22, 0, !dbg !7870
  br i1 %tobool23, label %while.body, label %while.end, !dbg !7870

while.body:                                       ; preds = %while.cond
  %21 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7874
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !7874
  %exp24 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !7874
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !7874
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 0, !dbg !7874
  store %union.tree_node** %arrayidx26, %union.tree_node*** %t, align 8, !dbg !7875
  br label %while.cond, !dbg !7870, !llvm.loop !7876

while.end:                                        ; preds = %while.cond
  %23 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7877
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !7877
  %base27 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7877
  %25 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7877
  %bf.load28 = load i64, i64* %25, align 8, !dbg !7877
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7877
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7877
  %cmp31 = icmp eq i32 %bf.cast30, 47, !dbg !7879
  br i1 %cmp31, label %if.then33, label %if.else, !dbg !7880

if.then33:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem34, metadata !7881, metadata !DIExpression()), !dbg !7883
  %26 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7884
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !7885
  %28 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7886
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !7886
  %exp35 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !7886
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !7886
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 0, !dbg !7886
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !7886
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7887
  %call38 = call %union.tree_node* @maybe_fold_stmt_indirect(%union.tree_node* %27, %union.tree_node* %30, %union.tree_node* %31), !dbg !7888
  store %union.tree_node* %call38, %union.tree_node** %tem34, align 8, !dbg !7883
  %32 = load i8, i8* %is_lhs.addr, align 1, !dbg !7889
  %conv39 = zext i8 %32 to i32, !dbg !7889
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !7889
  br i1 %tobool40, label %land.lhs.true41, label %if.end53, !dbg !7891

land.lhs.true41:                                  ; preds = %if.then33
  %33 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7892
  %tobool42 = icmp ne %union.tree_node* %33, null, !dbg !7892
  br i1 %tobool42, label %land.lhs.true43, label %if.end53, !dbg !7893

land.lhs.true43:                                  ; preds = %land.lhs.true41
  %34 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7894
  %base44 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !7894
  %35 = bitcast %struct.tree_base* %base44 to i64*, !dbg !7894
  %bf.load45 = load i64, i64* %35, align 8, !dbg !7894
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !7894
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !7894
  %idxprom48 = sext i32 %bf.cast47 to i64, !dbg !7894
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom48, !dbg !7894
  %36 = load i32, i32* %arrayidx49, align 4, !dbg !7894
  %cmp50 = icmp eq i32 %36, 1, !dbg !7894
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !7895

if.then52:                                        ; preds = %land.lhs.true43
  store %union.tree_node* null, %union.tree_node** %tem34, align 8, !dbg !7896
  br label %if.end53, !dbg !7897

if.end53:                                         ; preds = %if.then52, %land.lhs.true43, %land.lhs.true41, %if.then33
  %37 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7898
  %tobool54 = icmp ne %union.tree_node* %37, null, !dbg !7898
  br i1 %tobool54, label %if.end72, label %land.lhs.true55, !dbg !7900

land.lhs.true55:                                  ; preds = %if.end53
  %38 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7901
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !7901
  %exp56 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !7901
  %operands57 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp56, i32 0, i32 3, !dbg !7901
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands57, i64 0, i64 0, !dbg !7901
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx58, align 8, !dbg !7901
  %base59 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7901
  %41 = bitcast %struct.tree_base* %base59 to i64*, !dbg !7901
  %bf.load60 = load i64, i64* %41, align 8, !dbg !7901
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !7901
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !7901
  %cmp63 = icmp eq i32 %bf.cast62, 121, !dbg !7902
  br i1 %cmp63, label %if.then65, label %if.end72, !dbg !7903

if.then65:                                        ; preds = %land.lhs.true55
  %42 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7904
  %43 = load %union.tree_node*, %union.tree_node** %42, align 8, !dbg !7904
  %exp66 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !7904
  %operands67 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp66, i32 0, i32 3, !dbg !7904
  %arrayidx68 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands67, i64 0, i64 0, !dbg !7904
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx68, align 8, !dbg !7904
  %exp69 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !7904
  %operands70 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp69, i32 0, i32 3, !dbg !7904
  %arrayidx71 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands70, i64 0, i64 0, !dbg !7904
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx71, align 8, !dbg !7904
  store %union.tree_node* %45, %union.tree_node** %tem34, align 8, !dbg !7905
  br label %if.end72, !dbg !7906

if.end72:                                         ; preds = %if.then65, %land.lhs.true55, %if.end53
  %46 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7907
  %tobool73 = icmp ne %union.tree_node* %46, null, !dbg !7907
  br i1 %tobool73, label %if.then74, label %if.end79, !dbg !7909

if.then74:                                        ; preds = %if.end72
  %47 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7910
  %48 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7912
  store %union.tree_node* %47, %union.tree_node** %48, align 8, !dbg !7913
  %49 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7914
  %50 = load i8, i8* %is_lhs.addr, align 1, !dbg !7915
  %call75 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %49, i8 zeroext %50), !dbg !7916
  store %union.tree_node* %call75, %union.tree_node** %tem34, align 8, !dbg !7917
  %51 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7918
  %tobool76 = icmp ne %union.tree_node* %51, null, !dbg !7918
  br i1 %tobool76, label %if.then77, label %if.end78, !dbg !7920

if.then77:                                        ; preds = %if.then74
  %52 = load %union.tree_node*, %union.tree_node** %tem34, align 8, !dbg !7921
  store %union.tree_node* %52, %union.tree_node** %retval, align 8, !dbg !7922
  br label %return, !dbg !7922

if.end78:                                         ; preds = %if.then74
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7923
  store %union.tree_node* %53, %union.tree_node** %retval, align 8, !dbg !7924
  br label %return, !dbg !7924

if.end79:                                         ; preds = %if.end72
  br label %if.end108, !dbg !7925

if.else:                                          ; preds = %while.end
  %54 = load i8, i8* %is_lhs.addr, align 1, !dbg !7926
  %tobool80 = icmp ne i8 %54, 0, !dbg !7926
  br i1 %tobool80, label %if.end107, label %land.lhs.true81, !dbg !7928

land.lhs.true81:                                  ; preds = %if.else
  %55 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7929
  %56 = load %union.tree_node*, %union.tree_node** %55, align 8, !dbg !7929
  %base82 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !7929
  %57 = bitcast %struct.tree_base* %base82 to i64*, !dbg !7929
  %bf.load83 = load i64, i64* %57, align 8, !dbg !7929
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !7929
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !7929
  %idxprom86 = sext i32 %bf.cast85 to i64, !dbg !7929
  %arrayidx87 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom86, !dbg !7929
  %58 = load i32, i32* %arrayidx87, align 4, !dbg !7929
  %cmp88 = icmp eq i32 %58, 3, !dbg !7929
  br i1 %cmp88, label %if.then90, label %if.end107, !dbg !7930

if.then90:                                        ; preds = %land.lhs.true81
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem91, metadata !7931, metadata !DIExpression()), !dbg !7933
  %59 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7934
  %60 = load %union.tree_node*, %union.tree_node** %59, align 8, !dbg !7935
  %call92 = call %union.tree_node* @get_symbol_constant_value(%union.tree_node* %60), !dbg !7936
  store %union.tree_node* %call92, %union.tree_node** %tem91, align 8, !dbg !7933
  %61 = load %union.tree_node*, %union.tree_node** %tem91, align 8, !dbg !7937
  %tobool93 = icmp ne %union.tree_node* %61, null, !dbg !7937
  br i1 %tobool93, label %land.lhs.true94, label %if.end106, !dbg !7939

land.lhs.true94:                                  ; preds = %if.then90
  %62 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7940
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !7940
  %common = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !7940
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7940
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7940
  %65 = load %union.tree_node*, %union.tree_node** %tem91, align 8, !dbg !7941
  %common95 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !7941
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !7941
  %66 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !7941
  %call97 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %64, %union.tree_node* %66), !dbg !7942
  %conv98 = zext i8 %call97 to i32, !dbg !7942
  %tobool99 = icmp ne i32 %conv98, 0, !dbg !7942
  br i1 %tobool99, label %if.then100, label %if.end106, !dbg !7943

if.then100:                                       ; preds = %land.lhs.true94
  %67 = load %union.tree_node*, %union.tree_node** %tem91, align 8, !dbg !7944
  %call101 = call %union.tree_node* @unshare_expr(%union.tree_node* %67), !dbg !7946
  %68 = load %union.tree_node**, %union.tree_node*** %t, align 8, !dbg !7947
  store %union.tree_node* %call101, %union.tree_node** %68, align 8, !dbg !7948
  %69 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7949
  %70 = load i8, i8* %is_lhs.addr, align 1, !dbg !7950
  %call102 = call %union.tree_node* @maybe_fold_reference(%union.tree_node* %69, i8 zeroext %70), !dbg !7951
  store %union.tree_node* %call102, %union.tree_node** %tem91, align 8, !dbg !7952
  %71 = load %union.tree_node*, %union.tree_node** %tem91, align 8, !dbg !7953
  %tobool103 = icmp ne %union.tree_node* %71, null, !dbg !7953
  br i1 %tobool103, label %if.then104, label %if.end105, !dbg !7955

if.then104:                                       ; preds = %if.then100
  %72 = load %union.tree_node*, %union.tree_node** %tem91, align 8, !dbg !7956
  store %union.tree_node* %72, %union.tree_node** %retval, align 8, !dbg !7957
  br label %return, !dbg !7957

if.end105:                                        ; preds = %if.then100
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7958
  store %union.tree_node* %73, %union.tree_node** %retval, align 8, !dbg !7959
  br label %return, !dbg !7959

if.end106:                                        ; preds = %land.lhs.true94, %if.then90
  br label %if.end107, !dbg !7960

if.end107:                                        ; preds = %if.end106, %land.lhs.true81, %if.else
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.end79
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7961
  br label %return, !dbg !7961

return:                                           ; preds = %if.end108, %if.end105, %if.then104, %if.end78, %if.then77, %if.then19, %if.then2
  %74 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7962
  ret %union.tree_node* %74, !dbg !7962
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fold_gimple_call(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !7963 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %callee = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7964, metadata !DIExpression()), !dbg !7965
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7966, metadata !DIExpression()), !dbg !7967
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7968
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !7969
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7967
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !7970, metadata !DIExpression()), !dbg !7971
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7972
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !7973
  store %union.tree_node* %call1, %union.tree_node** %callee, align 8, !dbg !7971
  %2 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !7974
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7974
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7976

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !7977
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !7977
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7977
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !7977
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !7977
  %bf.clear = and i32 %bf.lshr, 3, !dbg !7977
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !7977
  br i1 %cmp, label %if.then, label %if.else, !dbg !7978

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !7979, metadata !DIExpression()), !dbg !7981
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7982
  %call2 = call %union.tree_node* @ccp_fold_builtin(%union.gimple_statement_d* %4), !dbg !7983
  store %union.tree_node* %call2, %union.tree_node** %result, align 8, !dbg !7981
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7984
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !7984
  br i1 %tobool3, label %if.then4, label %if.end8, !dbg !7986

if.then4:                                         ; preds = %if.then
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7987
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7990
  %call5 = call zeroext i8 @update_call_from_tree(%struct.gimple_stmt_iterator* %6, %union.tree_node* %7), !dbg !7991
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7991
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !7992

if.then7:                                         ; preds = %if.then4
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7993
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7994
  call void @gimplify_and_update_call_from_tree(%struct.gimple_stmt_iterator* %8, %union.tree_node* %9), !dbg !7995
  br label %if.end, !dbg !7995

if.end:                                           ; preds = %if.then7, %if.then4
  store i8 1, i8* %retval, align 1, !dbg !7996
  br label %return, !dbg !7996

if.end8:                                          ; preds = %if.then
  br label %if.end45, !dbg !7997

if.else:                                          ; preds = %land.lhs.true, %entry
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7998
  %call9 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %10), !dbg !8000
  store %union.tree_node* %call9, %union.tree_node** %callee, align 8, !dbg !8001
  %11 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8002
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8002
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !8002
  %bf.load10 = load i64, i64* %12, align 8, !dbg !8002
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !8002
  %bf.cast = trunc i64 %bf.clear11 to i32, !dbg !8002
  %cmp12 = icmp eq i32 %bf.cast, 50, !dbg !8004
  br i1 %cmp12, label %land.lhs.true13, label %if.end44, !dbg !8005

land.lhs.true13:                                  ; preds = %if.else
  %13 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 40), align 8, !dbg !8006
  %tobool14 = icmp ne %union.tree_node* (%union.tree_node*, %union.tree_node*)* %13, null, !dbg !8007
  br i1 %tobool14, label %land.lhs.true15, label %if.end44, !dbg !8008

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %14 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8009
  %exp = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !8009
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8009
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !8009
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8009
  %base16 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8009
  %16 = bitcast %struct.tree_base* %base16 to i64*, !dbg !8009
  %bf.load17 = load i64, i64* %16, align 8, !dbg !8009
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !8009
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !8009
  %cmp20 = icmp eq i32 %bf.cast19, 121, !dbg !8010
  br i1 %cmp20, label %land.lhs.true21, label %if.end44, !dbg !8011

land.lhs.true21:                                  ; preds = %land.lhs.true15
  %17 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8012
  %exp22 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !8012
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !8012
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 1, !dbg !8012
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !8012
  %exp25 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !8012
  %operands26 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp25, i32 0, i32 3, !dbg !8012
  %arrayidx27 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands26, i64 0, i64 0, !dbg !8012
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx27, align 8, !dbg !8012
  %base28 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !8012
  %20 = bitcast %struct.tree_base* %base28 to i64*, !dbg !8012
  %bf.load29 = load i64, i64* %20, align 8, !dbg !8012
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !8012
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !8012
  %idxprom = sext i32 %bf.cast31 to i64, !dbg !8012
  %arrayidx32 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8012
  %21 = load i32, i32* %arrayidx32, align 4, !dbg !8012
  %cmp33 = icmp eq i32 %21, 3, !dbg !8012
  br i1 %cmp33, label %if.then34, label %if.end44, !dbg !8013

if.then34:                                        ; preds = %land.lhs.true21
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !8014, metadata !DIExpression()), !dbg !8016
  %22 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8017
  %exp35 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !8017
  %operands36 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !8017
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands36, i64 0, i64 1, !dbg !8017
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !8017
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !8017
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8017
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8017
  %common38 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !8017
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !8017
  %25 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !8017
  store %union.tree_node* %25, %union.tree_node** %t, align 8, !dbg !8018
  %26 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 40), align 8, !dbg !8019
  %27 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8020
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8021
  %call40 = call %union.tree_node* %26(%union.tree_node* %27, %union.tree_node* %28), !dbg !8022
  store %union.tree_node* %call40, %union.tree_node** %t, align 8, !dbg !8023
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8024
  %tobool41 = icmp ne %union.tree_node* %29, null, !dbg !8024
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !8026

if.then42:                                        ; preds = %if.then34
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8027
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8029
  call void @gimple_call_set_fn(%union.gimple_statement_d* %30, %union.tree_node* %31), !dbg !8030
  store i8 1, i8* %retval, align 1, !dbg !8031
  br label %return, !dbg !8031

if.end43:                                         ; preds = %if.then34
  br label %if.end44, !dbg !8032

if.end44:                                         ; preds = %if.end43, %land.lhs.true21, %land.lhs.true15, %land.lhs.true13, %if.else
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end8
  store i8 0, i8* %retval, align 1, !dbg !8033
  br label %return, !dbg !8033

return:                                           ; preds = %if.end45, %if.then42, %if.end
  %32 = load i8, i8* %retval, align 1, !dbg !8034
  ret i8 %32, !dbg !8034
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !8035 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8036, metadata !DIExpression()), !dbg !8037
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8038
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !8039
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !8040
  %1 = load i8, i8* %no, align 1, !dbg !8040
  %conv = zext i8 %1 to i32, !dbg !8038
  ret i32 %conv, !dbg !8041
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8042 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8043, metadata !DIExpression()), !dbg !8044
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8045, metadata !DIExpression()), !dbg !8046
  %0 = load i32, i32* %index.addr, align 4, !dbg !8047
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8047
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !8047
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !8047
  %2 = load i8, i8* %no, align 1, !dbg !8047
  %conv = zext i8 %2 to i32, !dbg !8047
  %cmp = icmp ule i32 %0, %conv, !dbg !8047
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8047

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8047
  br label %cond.end, !dbg !8047

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8047

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8047
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8048
  %4 = load i32, i32* %index.addr, align 4, !dbg !8049
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8050
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !8051
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !8052
  %6 = load i8, i8* %ni, align 8, !dbg !8052
  %conv3 = zext i8 %6 to i32, !dbg !8050
  %add = add i32 %4, %conv3, !dbg !8053
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !8054
  ret %union.tree_node* %call, !dbg !8055
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !8056 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8057, metadata !DIExpression()), !dbg !8058
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8059
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !8060
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !8061
  %1 = load i8, i8* %ni, align 8, !dbg !8061
  %conv = zext i8 %1 to i32, !dbg !8059
  ret i32 %conv, !dbg !8062
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8063 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8064, metadata !DIExpression()), !dbg !8065
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8066, metadata !DIExpression()), !dbg !8067
  %0 = load i32, i32* %index.addr, align 4, !dbg !8068
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8068
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !8068
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !8068
  %2 = load i8, i8* %ni, align 8, !dbg !8068
  %conv = zext i8 %2 to i32, !dbg !8068
  %cmp = icmp ule i32 %0, %conv, !dbg !8068
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8068

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8068
  br label %cond.end, !dbg !8068

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8068

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8068
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8069
  %4 = load i32, i32* %index.addr, align 4, !dbg !8070
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !8071
  ret %union.tree_node* %call, !dbg !8072
}

declare dso_local void @gimple_set_lhs(%union.gimple_statement_d*, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node*) #2

declare dso_local zeroext i8 @valid_gimple_rhs_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @maybe_fold_tmr(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_vector_from_ctor(%union.tree_node*, %struct.VEC_constructor_elt_gc*) #2

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #2

declare dso_local zeroext i8 @commutative_tree_code(i32) #2

declare dso_local zeroext i8 @tree_swap_operands_p(%union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gimple_cond_set_condition_from_tree(%union.gimple_statement_d*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_read_from_constant_string(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @maybe_fold_stmt_indirect(%union.tree_node* %expr, %union.tree_node* %base, %union.tree_node* %offset) #0 !dbg !8073 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %volatile_p = alloca i8, align 1
  %loc = alloca i32, align 4
  %offset2 = alloca %union.tree_node*, align 8
  %base_addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8076, metadata !DIExpression()), !dbg !8077
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !8078, metadata !DIExpression()), !dbg !8079
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !8080, metadata !DIExpression()), !dbg !8081
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !8082, metadata !DIExpression()), !dbg !8083
  call void @llvm.dbg.declare(metadata i8* %volatile_p, metadata !8084, metadata !DIExpression()), !dbg !8085
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8086
  %base1 = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8086
  %1 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8086
  %bf.load = load i64, i64* %1, align 8, !dbg !8086
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !8086
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8086
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8086
  %conv = trunc i32 %bf.cast to i8, !dbg !8086
  store i8 %conv, i8* %volatile_p, align 1, !dbg !8085
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8087, metadata !DIExpression()), !dbg !8088
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8089
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8089
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8089
  %bf.load3 = load i64, i64* %3, align 8, !dbg !8089
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8089
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8089
  %idxprom = sext i32 %bf.cast5 to i64, !dbg !8089
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8089
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8089
  %cmp = icmp uge i32 %4, 4, !dbg !8089
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !8089

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8089
  %base7 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8089
  %6 = bitcast %struct.tree_base* %base7 to i64*, !dbg !8089
  %bf.load8 = load i64, i64* %6, align 8, !dbg !8089
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !8089
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !8089
  %idxprom11 = sext i32 %bf.cast10 to i64, !dbg !8089
  %arrayidx12 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom11, !dbg !8089
  %7 = load i32, i32* %arrayidx12, align 4, !dbg !8089
  %cmp13 = icmp ule i32 %7, 10, !dbg !8089
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !8089

cond.true:                                        ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8089
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !8089
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !8089
  %9 = load i32, i32* %locus, align 8, !dbg !8089
  br label %cond.end, !dbg !8089

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ 0, %cond.false ], !dbg !8089
  store i32 %cond, i32* %loc, align 4, !dbg !8088
  %10 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8090
  %call = call %union.tree_node* @fold(%union.tree_node* %10), !dbg !8091
  store %union.tree_node* %call, %union.tree_node** %base.addr, align 8, !dbg !8092
  br label %while.cond, !dbg !8093

while.cond:                                       ; preds = %while.body, %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %base15 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8093
  %12 = bitcast %struct.tree_base* %base15 to i64*, !dbg !8093
  %bf.load16 = load i64, i64* %12, align 8, !dbg !8093
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !8093
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !8093
  %cmp19 = icmp eq i32 %bf.cast18, 116, !dbg !8093
  br i1 %cmp19, label %land.lhs.true34, label %lor.lhs.false, !dbg !8093

lor.lhs.false:                                    ; preds = %while.cond
  %13 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %base21 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !8093
  %14 = bitcast %struct.tree_base* %base21 to i64*, !dbg !8093
  %bf.load22 = load i64, i64* %14, align 8, !dbg !8093
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !8093
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !8093
  %cmp25 = icmp eq i32 %bf.cast24, 113, !dbg !8093
  br i1 %cmp25, label %land.lhs.true34, label %lor.lhs.false27, !dbg !8093

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %base28 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8093
  %16 = bitcast %struct.tree_base* %base28 to i64*, !dbg !8093
  %bf.load29 = load i64, i64* %16, align 8, !dbg !8093
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !8093
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !8093
  %cmp32 = icmp eq i32 %bf.cast31, 117, !dbg !8093
  br i1 %cmp32, label %land.lhs.true34, label %land.end, !dbg !8093

land.lhs.true34:                                  ; preds = %lor.lhs.false27, %lor.lhs.false, %while.cond
  %17 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %exp35 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !8093
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp35, i32 0, i32 3, !dbg !8093
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8093
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !8093
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8093
  %cmp37 = icmp ne %union.tree_node* %18, %19, !dbg !8093
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !8093

land.rhs:                                         ; preds = %land.lhs.true34
  %20 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !8093
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8093
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8093
  %22 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %exp39 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !8093
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !8093
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 0, !dbg !8093
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !8093
  %common42 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !8093
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !8093
  %24 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !8093
  %cmp44 = icmp eq %union.tree_node* %21, %24, !dbg !8093
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true34, %lor.lhs.false27
  %25 = phi i1 [ false, %land.lhs.true34 ], [ false, %lor.lhs.false27 ], [ %cmp44, %land.rhs ], !dbg !8094
  br i1 %25, label %while.body, label %while.end, !dbg !8093

while.body:                                       ; preds = %land.end
  %26 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8093
  %exp46 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !8093
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !8093
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 0, !dbg !8093
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !8093
  store %union.tree_node* %27, %union.tree_node** %base.addr, align 8, !dbg !8093
  br label %while.cond, !dbg !8093, !llvm.loop !8095

while.end:                                        ; preds = %land.end
  %28 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8096
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8097
  %exp49 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !8097
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !8097
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 0, !dbg !8097
  store %union.tree_node* %28, %union.tree_node** %arrayidx51, align 8, !dbg !8098
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8099
  %call52 = call %union.tree_node* @fold_read_from_constant_string(%union.tree_node* %30), !dbg !8100
  store %union.tree_node* %call52, %union.tree_node** %t, align 8, !dbg !8101
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8102
  %tobool = icmp ne %union.tree_node* %31, null, !dbg !8102
  br i1 %tobool, label %if.then, label %if.end, !dbg !8104

if.then:                                          ; preds = %while.end
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8105
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !8106
  br label %return, !dbg !8106

if.end:                                           ; preds = %while.end
  %33 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8107
  %base53 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !8107
  %34 = bitcast %struct.tree_base* %base53 to i64*, !dbg !8107
  %bf.load54 = load i64, i64* %34, align 8, !dbg !8107
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !8107
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !8107
  %cmp57 = icmp eq i32 %bf.cast56, 66, !dbg !8109
  br i1 %cmp57, label %if.then59, label %if.end76, !dbg !8110

if.then59:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset2, metadata !8111, metadata !DIExpression()), !dbg !8113
  %35 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8114
  %exp60 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !8114
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !8114
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 1, !dbg !8114
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !8114
  store %union.tree_node* %36, %union.tree_node** %offset2, align 8, !dbg !8115
  %37 = load %union.tree_node*, %union.tree_node** %offset2, align 8, !dbg !8116
  %base63 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !8116
  %38 = bitcast %struct.tree_base* %base63 to i64*, !dbg !8116
  %bf.load64 = load i64, i64* %38, align 8, !dbg !8116
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !8116
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !8116
  %cmp67 = icmp ne i32 %bf.cast66, 23, !dbg !8118
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !8119

if.then69:                                        ; preds = %if.then59
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8120
  br label %return, !dbg !8120

if.end70:                                         ; preds = %if.then59
  %39 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8121
  %exp71 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !8121
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !8121
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 0, !dbg !8121
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !8121
  store %union.tree_node* %40, %union.tree_node** %base.addr, align 8, !dbg !8122
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !8123
  %42 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8123
  %43 = load %union.tree_node*, %union.tree_node** %offset2, align 8, !dbg !8123
  %call74 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %42, %union.tree_node* %43, i32 1), !dbg !8123
  %call75 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %41, %union.tree_node* %call74), !dbg !8123
  store %union.tree_node* %call75, %union.tree_node** %offset.addr, align 8, !dbg !8124
  br label %if.end76, !dbg !8125

if.end76:                                         ; preds = %if.end70, %if.end
  %44 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8126
  %base77 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !8126
  %45 = bitcast %struct.tree_base* %base77 to i64*, !dbg !8126
  %bf.load78 = load i64, i64* %45, align 8, !dbg !8126
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !8126
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !8126
  %cmp81 = icmp eq i32 %bf.cast80, 121, !dbg !8128
  br i1 %cmp81, label %if.then83, label %if.else, !dbg !8129

if.then83:                                        ; preds = %if.end76
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_addr, metadata !8130, metadata !DIExpression()), !dbg !8132
  %46 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8133
  store %union.tree_node* %46, %union.tree_node** %base_addr, align 8, !dbg !8132
  %47 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8134
  %exp84 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !8134
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 3, !dbg !8134
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i64 0, i64 0, !dbg !8134
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx86, align 8, !dbg !8134
  store %union.tree_node* %48, %union.tree_node** %base.addr, align 8, !dbg !8135
  %49 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8136
  %base87 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !8136
  %50 = bitcast %struct.tree_base* %base87 to i64*, !dbg !8136
  %bf.load88 = load i64, i64* %50, align 8, !dbg !8136
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !8136
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !8136
  %cmp91 = icmp eq i32 %bf.cast90, 33, !dbg !8138
  br i1 %cmp91, label %land.lhs.true93, label %if.end100, !dbg !8139

land.lhs.true93:                                  ; preds = %if.then83
  %51 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8140
  %decl_common = bitcast %union.tree_node* %51 to %struct.tree_decl_common*, !dbg !8140
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !8140
  %52 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !8140
  %call94 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %52), !dbg !8141
  %conv95 = zext i8 %call94 to i32, !dbg !8141
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !8141
  br i1 %tobool96, label %if.then97, label %if.end100, !dbg !8142

if.then97:                                        ; preds = %land.lhs.true93
  %53 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8143
  %decl_common98 = bitcast %union.tree_node* %53 to %struct.tree_decl_common*, !dbg !8143
  %initial99 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common98, i32 0, i32 5, !dbg !8143
  %54 = load %union.tree_node*, %union.tree_node** %initial99, align 8, !dbg !8143
  store %union.tree_node* %54, %union.tree_node** %retval, align 8, !dbg !8144
  br label %return, !dbg !8144

if.end100:                                        ; preds = %land.lhs.true93, %if.then83
  %55 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8145
  %call101 = call i32 @integer_zerop(%union.tree_node* %55), !dbg !8147
  %tobool102 = icmp ne i32 %call101, 0, !dbg !8147
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !8148

if.then103:                                       ; preds = %if.end100
  %56 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8149
  store %union.tree_node* %56, %union.tree_node** %retval, align 8, !dbg !8150
  br label %return, !dbg !8150

if.end104:                                        ; preds = %if.end100
  %57 = load i32, i32* %loc, align 4, !dbg !8151
  %58 = load %union.tree_node*, %union.tree_node** %base_addr, align 8, !dbg !8152
  %59 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8153
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8154
  %common105 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !8154
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !8154
  %61 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !8154
  %call107 = call %union.tree_node* @maybe_fold_offset_to_reference(i32 %57, %union.tree_node* %58, %union.tree_node* %59, %union.tree_node* %61), !dbg !8155
  store %union.tree_node* %call107, %union.tree_node** %t, align 8, !dbg !8156
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8157
  %tobool108 = icmp ne %union.tree_node* %62, null, !dbg !8157
  br i1 %tobool108, label %if.then109, label %if.end168, !dbg !8159

if.then109:                                       ; preds = %if.end104
  %63 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %base110 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !8160
  %64 = bitcast %struct.tree_base* %base110 to i64*, !dbg !8160
  %bf.load111 = load i64, i64* %64, align 8, !dbg !8160
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !8160
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !8160
  %cmp114 = icmp eq i32 %bf.cast113, 32, !dbg !8160
  br i1 %cmp114, label %if.end167, label %lor.lhs.false116, !dbg !8160

lor.lhs.false116:                                 ; preds = %if.then109
  %65 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %base117 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !8160
  %66 = bitcast %struct.tree_base* %base117 to i64*, !dbg !8160
  %bf.load118 = load i64, i64* %66, align 8, !dbg !8160
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !8160
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !8160
  %cmp121 = icmp eq i32 %bf.cast120, 34, !dbg !8160
  br i1 %cmp121, label %if.end167, label %lor.lhs.false123, !dbg !8160

lor.lhs.false123:                                 ; preds = %lor.lhs.false116
  %67 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %base124 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !8160
  %68 = bitcast %struct.tree_base* %base124 to i64*, !dbg !8160
  %bf.load125 = load i64, i64* %68, align 8, !dbg !8160
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !8160
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !8160
  %cmp128 = icmp eq i32 %bf.cast127, 36, !dbg !8160
  br i1 %cmp128, label %if.end167, label %lor.lhs.false130, !dbg !8160

lor.lhs.false130:                                 ; preds = %lor.lhs.false123
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %base131 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !8160
  %70 = bitcast %struct.tree_base* %base131 to i64*, !dbg !8160
  %bf.load132 = load i64, i64* %70, align 8, !dbg !8160
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !8160
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !8160
  %cmp135 = icmp eq i32 %bf.cast134, 141, !dbg !8160
  br i1 %cmp135, label %land.lhs.true137, label %if.then162, !dbg !8160

land.lhs.true137:                                 ; preds = %lor.lhs.false130
  %71 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %ssa_name = bitcast %union.tree_node* %71 to %struct.tree_ssa_name*, !dbg !8160
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8160
  %72 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8160
  %base138 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !8160
  %73 = bitcast %struct.tree_base* %base138 to i64*, !dbg !8160
  %bf.load139 = load i64, i64* %73, align 8, !dbg !8160
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !8160
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !8160
  %cmp142 = icmp eq i32 %bf.cast141, 32, !dbg !8160
  br i1 %cmp142, label %if.end167, label %lor.lhs.false144, !dbg !8160

lor.lhs.false144:                                 ; preds = %land.lhs.true137
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %ssa_name145 = bitcast %union.tree_node* %74 to %struct.tree_ssa_name*, !dbg !8160
  %var146 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name145, i32 0, i32 1, !dbg !8160
  %75 = load %union.tree_node*, %union.tree_node** %var146, align 8, !dbg !8160
  %base147 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !8160
  %76 = bitcast %struct.tree_base* %base147 to i64*, !dbg !8160
  %bf.load148 = load i64, i64* %76, align 8, !dbg !8160
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !8160
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !8160
  %cmp151 = icmp eq i32 %bf.cast150, 34, !dbg !8160
  br i1 %cmp151, label %if.end167, label %lor.lhs.false153, !dbg !8160

lor.lhs.false153:                                 ; preds = %lor.lhs.false144
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8160
  %ssa_name154 = bitcast %union.tree_node* %77 to %struct.tree_ssa_name*, !dbg !8160
  %var155 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name154, i32 0, i32 1, !dbg !8160
  %78 = load %union.tree_node*, %union.tree_node** %var155, align 8, !dbg !8160
  %base156 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !8160
  %79 = bitcast %struct.tree_base* %base156 to i64*, !dbg !8160
  %bf.load157 = load i64, i64* %79, align 8, !dbg !8160
  %bf.clear158 = and i64 %bf.load157, 65535, !dbg !8160
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !8160
  %cmp160 = icmp eq i32 %bf.cast159, 36, !dbg !8160
  br i1 %cmp160, label %if.end167, label %if.then162, !dbg !8163

if.then162:                                       ; preds = %lor.lhs.false153, %lor.lhs.false130
  %80 = load i8, i8* %volatile_p, align 1, !dbg !8164
  %conv163 = zext i8 %80 to i32, !dbg !8164
  %81 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8165
  %base164 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !8165
  %82 = bitcast %struct.tree_base* %base164 to i64*, !dbg !8165
  %83 = zext i32 %conv163 to i64, !dbg !8166
  %bf.load165 = load i64, i64* %82, align 8, !dbg !8166
  %bf.value = and i64 %83, 1, !dbg !8166
  %bf.shl = shl i64 %bf.value, 19, !dbg !8166
  %bf.clear166 = and i64 %bf.load165, -524289, !dbg !8166
  %bf.set = or i64 %bf.clear166, %bf.shl, !dbg !8166
  store i64 %bf.set, i64* %82, align 8, !dbg !8166
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8166
  br label %if.end167, !dbg !8165

if.end167:                                        ; preds = %if.then162, %lor.lhs.false153, %lor.lhs.false144, %land.lhs.true137, %lor.lhs.false123, %lor.lhs.false116, %if.then109
  %84 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8167
  store %union.tree_node* %84, %union.tree_node** %retval, align 8, !dbg !8168
  br label %return, !dbg !8168

if.end168:                                        ; preds = %if.end104
  br label %if.end213, !dbg !8169

if.else:                                          ; preds = %if.end76
  %85 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8170
  store %union.tree_node* %85, %union.tree_node** %t, align 8, !dbg !8172
  %86 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8173
  %call169 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %86), !dbg !8173
  store %union.tree_node* %call169, %union.tree_node** %t, align 8, !dbg !8173
  %87 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8174
  %base170 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !8174
  %88 = bitcast %struct.tree_base* %base170 to i64*, !dbg !8174
  %bf.load171 = load i64, i64* %88, align 8, !dbg !8174
  %bf.clear172 = and i64 %bf.load171, 65535, !dbg !8174
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !8174
  %cmp174 = icmp eq i32 %bf.cast173, 121, !dbg !8176
  br i1 %cmp174, label %land.lhs.true176, label %if.end187, !dbg !8177

land.lhs.true176:                                 ; preds = %if.else
  %89 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8178
  %exp177 = bitcast %union.tree_node* %89 to %struct.tree_exp*, !dbg !8178
  %operands178 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp177, i32 0, i32 3, !dbg !8178
  %arrayidx179 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands178, i64 0, i64 0, !dbg !8178
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx179, align 8, !dbg !8178
  %base180 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !8178
  %91 = bitcast %struct.tree_base* %base180 to i64*, !dbg !8178
  %bf.load181 = load i64, i64* %91, align 8, !dbg !8178
  %bf.clear182 = and i64 %bf.load181, 65535, !dbg !8178
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !8178
  %cmp184 = icmp eq i32 %bf.cast183, 28, !dbg !8179
  br i1 %cmp184, label %if.then186, label %if.end187, !dbg !8180

if.then186:                                       ; preds = %land.lhs.true176
  %92 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8181
  store %union.tree_node* %92, %union.tree_node** %retval, align 8, !dbg !8183
  br label %return, !dbg !8183

if.end187:                                        ; preds = %land.lhs.true176, %if.else
  %93 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8184
  %common188 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !8184
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !8184
  %94 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !8184
  %base190 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !8184
  %95 = bitcast %struct.tree_base* %base190 to i64*, !dbg !8184
  %bf.load191 = load i64, i64* %95, align 8, !dbg !8184
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !8184
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !8184
  %cmp194 = icmp eq i32 %bf.cast193, 10, !dbg !8184
  br i1 %cmp194, label %if.then205, label %lor.lhs.false196, !dbg !8184

lor.lhs.false196:                                 ; preds = %if.end187
  %96 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8184
  %common197 = bitcast %union.tree_node* %96 to %struct.tree_common*, !dbg !8184
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !8184
  %97 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !8184
  %base199 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !8184
  %98 = bitcast %struct.tree_base* %base199 to i64*, !dbg !8184
  %bf.load200 = load i64, i64* %98, align 8, !dbg !8184
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !8184
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !8184
  %cmp203 = icmp eq i32 %bf.cast202, 12, !dbg !8184
  br i1 %cmp203, label %if.then205, label %if.end212, !dbg !8186

if.then205:                                       ; preds = %lor.lhs.false196, %if.end187
  %99 = load i32, i32* %loc, align 4, !dbg !8187
  %100 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8189
  %101 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !8190
  %102 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8191
  %common206 = bitcast %union.tree_node* %102 to %struct.tree_common*, !dbg !8191
  %type207 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common206, i32 0, i32 2, !dbg !8191
  %103 = load %union.tree_node*, %union.tree_node** %type207, align 8, !dbg !8191
  %call208 = call %union.tree_node* @maybe_fold_offset_to_reference(i32 %99, %union.tree_node* %100, %union.tree_node* %101, %union.tree_node* %103), !dbg !8192
  store %union.tree_node* %call208, %union.tree_node** %t, align 8, !dbg !8193
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8194
  %tobool209 = icmp ne %union.tree_node* %104, null, !dbg !8194
  br i1 %tobool209, label %if.then210, label %if.end211, !dbg !8196

if.then210:                                       ; preds = %if.then205
  %105 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8197
  store %union.tree_node* %105, %union.tree_node** %retval, align 8, !dbg !8198
  br label %return, !dbg !8198

if.end211:                                        ; preds = %if.then205
  br label %if.end212, !dbg !8199

if.end212:                                        ; preds = %if.end211, %lor.lhs.false196
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.end168
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8200
  br label %return, !dbg !8200

return:                                           ; preds = %if.end213, %if.then210, %if.then186, %if.end167, %if.then103, %if.then97, %if.then69, %if.then
  %106 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8201
  ret %union.tree_node* %106, !dbg !8201
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ccp_fold_builtin(%union.gimple_statement_d* %stmt) #0 !dbg !8202 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %result = alloca %union.tree_node*, align 8
  %val = alloca [3 x %union.tree_node*], align 16
  %callee = alloca %union.tree_node*, align 8
  %a = alloca %union.tree_node*, align 8
  %arg_idx = alloca i32, align 4
  %type = alloca i32, align 4
  %visited = alloca %struct.bitmap_head_def*, align 8
  %ignore = alloca i8, align 1
  %nargs = alloca i32, align 4
  %loc = alloca i32, align 4
  %new_val = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8203, metadata !DIExpression()), !dbg !8204
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !8205, metadata !DIExpression()), !dbg !8206
  call void @llvm.dbg.declare(metadata [3 x %union.tree_node*]* %val, metadata !8207, metadata !DIExpression()), !dbg !8209
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !8210, metadata !DIExpression()), !dbg !8211
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !8212, metadata !DIExpression()), !dbg !8213
  call void @llvm.dbg.declare(metadata i32* %arg_idx, metadata !8214, metadata !DIExpression()), !dbg !8215
  call void @llvm.dbg.declare(metadata i32* %type, metadata !8216, metadata !DIExpression()), !dbg !8217
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !8218, metadata !DIExpression()), !dbg !8219
  call void @llvm.dbg.declare(metadata i8* %ignore, metadata !8220, metadata !DIExpression()), !dbg !8221
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !8222, metadata !DIExpression()), !dbg !8223
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8224, metadata !DIExpression()), !dbg !8225
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8226
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !8227
  store i32 %call, i32* %loc, align 4, !dbg !8225
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8228
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !8228
  %tobool = icmp ne i8 %call1, 0, !dbg !8228
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8228

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 2593, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8228
  br label %cond.end, !dbg !8228

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8228

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8228
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8229
  %call2 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !8230
  %cmp = icmp eq %union.tree_node* %call2, null, !dbg !8231
  %conv = zext i1 %cmp to i32, !dbg !8231
  %conv3 = trunc i32 %conv to i8, !dbg !8232
  store i8 %conv3, i8* %ignore, align 1, !dbg !8233
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8234
  %4 = load i8, i8* %ignore, align 1, !dbg !8235
  %call4 = call %union.tree_node* @fold_call_stmt(%union.gimple_statement_d* %3, i8 zeroext %4), !dbg !8236
  store %union.tree_node* %call4, %union.tree_node** %result, align 8, !dbg !8237
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8238
  %tobool5 = icmp ne %union.tree_node* %5, null, !dbg !8238
  br i1 %tobool5, label %if.then, label %if.end9, !dbg !8240

if.then:                                          ; preds = %cond.end
  %6 = load i8, i8* %ignore, align 1, !dbg !8241
  %tobool6 = icmp ne i8 %6, 0, !dbg !8241
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !8244

if.then7:                                         ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8245
  %call8 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %7), !dbg !8245
  store %union.tree_node* %call8, %union.tree_node** %result, align 8, !dbg !8245
  br label %if.end, !dbg !8245

if.end:                                           ; preds = %if.then7, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8246
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8247
  br label %return, !dbg !8247

if.end9:                                          ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8248
  %call10 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %9), !dbg !8249
  store %union.tree_node* %call10, %union.tree_node** %callee, align 8, !dbg !8250
  %10 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8251
  %function_decl = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !8251
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8251
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !8251
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !8251
  %bf.clear = and i32 %bf.lshr, 3, !dbg !8251
  %cmp11 = icmp eq i32 %bf.clear, 2, !dbg !8253
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !8254

if.then13:                                        ; preds = %if.end9
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8255
  br label %return, !dbg !8255

if.end14:                                         ; preds = %if.end9
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8256
  %call15 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %11), !dbg !8257
  store i32 %call15, i32* %nargs, align 4, !dbg !8258
  %12 = load i32, i32* %nargs, align 4, !dbg !8259
  %cmp16 = icmp eq i32 %12, 0, !dbg !8261
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !8262

if.then18:                                        ; preds = %if.end14
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8263
  br label %return, !dbg !8263

if.end19:                                         ; preds = %if.end14
  %13 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8264
  %function_decl20 = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !8264
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl20, i32 0, i32 5, !dbg !8264
  %bf.load21 = load i32, i32* %function_code, align 8, !dbg !8264
  %bf.clear22 = and i32 %bf.load21, 2047, !dbg !8264
  switch i32 %bf.clear22, label %sw.default [
    i32 345, label %sw.bb
    i32 360, label %sw.bb
    i32 361, label %sw.bb
    i32 341, label %sw.bb23
    i32 349, label %sw.bb23
    i32 529, label %sw.bb24
    i32 531, label %sw.bb24
    i32 530, label %sw.bb24
    i32 532, label %sw.bb24
    i32 537, label %sw.bb24
    i32 535, label %sw.bb25
    i32 533, label %sw.bb25
    i32 538, label %sw.bb26
    i32 540, label %sw.bb26
  ], !dbg !8265

sw.bb:                                            ; preds = %if.end19, %if.end19, %if.end19
  store i32 0, i32* %arg_idx, align 4, !dbg !8266
  store i32 0, i32* %type, align 4, !dbg !8268
  br label %sw.epilog, !dbg !8269

sw.bb23:                                          ; preds = %if.end19, %if.end19
  store i32 1, i32* %arg_idx, align 4, !dbg !8270
  store i32 0, i32* %type, align 4, !dbg !8271
  br label %sw.epilog, !dbg !8272

sw.bb24:                                          ; preds = %if.end19, %if.end19, %if.end19, %if.end19, %if.end19
  store i32 2, i32* %arg_idx, align 4, !dbg !8273
  store i32 2, i32* %type, align 4, !dbg !8274
  br label %sw.epilog, !dbg !8275

sw.bb25:                                          ; preds = %if.end19, %if.end19
  store i32 1, i32* %arg_idx, align 4, !dbg !8276
  store i32 1, i32* %type, align 4, !dbg !8277
  br label %sw.epilog, !dbg !8278

sw.bb26:                                          ; preds = %if.end19, %if.end19
  store i32 1, i32* %arg_idx, align 4, !dbg !8279
  store i32 2, i32* %type, align 4, !dbg !8280
  br label %sw.epilog, !dbg !8281

sw.default:                                       ; preds = %if.end19
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8282
  br label %return, !dbg !8282

sw.epilog:                                        ; preds = %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb
  %14 = load i32, i32* %arg_idx, align 4, !dbg !8283
  %15 = load i32, i32* %nargs, align 4, !dbg !8285
  %cmp27 = icmp sge i32 %14, %15, !dbg !8286
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !8287

if.then29:                                        ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8288
  br label %return, !dbg !8288

if.end30:                                         ; preds = %sw.epilog
  %call31 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !8289
  store %struct.bitmap_head_def* %call31, %struct.bitmap_head_def** %visited, align 8, !dbg !8290
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !8291
  call void @bitmap_clear(%struct.bitmap_head_def* %16), !dbg !8292
  %arraydecay = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !8293
  %17 = bitcast %union.tree_node** %arraydecay to i8*, !dbg !8293
  call void @llvm.memset.p0i8.i64(i8* align 16 %17, i8 0, i64 24, i1 false), !dbg !8293
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8294
  %19 = load i32, i32* %arg_idx, align 4, !dbg !8295
  %call32 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %18, i32 %19), !dbg !8296
  store %union.tree_node* %call32, %union.tree_node** %a, align 8, !dbg !8297
  %20 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !8298
  %21 = load i32, i32* %arg_idx, align 4, !dbg !8300
  %idxprom = sext i32 %21 to i64, !dbg !8301
  %arrayidx = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 %idxprom, !dbg !8301
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !8302
  %23 = load i32, i32* %type, align 4, !dbg !8303
  %call33 = call zeroext i8 @get_maxval_strlen(%union.tree_node* %20, %union.tree_node** %arrayidx, %struct.bitmap_head_def* %22, i32 %23), !dbg !8304
  %tobool34 = icmp ne i8 %call33, 0, !dbg !8304
  br i1 %tobool34, label %if.end38, label %if.then35, !dbg !8305

if.then35:                                        ; preds = %if.end30
  %24 = load i32, i32* %arg_idx, align 4, !dbg !8306
  %idxprom36 = sext i32 %24 to i64, !dbg !8307
  %arrayidx37 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 %idxprom36, !dbg !8307
  store %union.tree_node* null, %union.tree_node** %arrayidx37, align 8, !dbg !8308
  br label %if.end38, !dbg !8307

if.end38:                                         ; preds = %if.then35, %if.end30
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !8309
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %25), !dbg !8309
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !8309
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !8310
  %26 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8311
  %function_decl39 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !8311
  %function_code40 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl39, i32 0, i32 5, !dbg !8311
  %bf.load41 = load i32, i32* %function_code40, align 8, !dbg !8311
  %bf.clear42 = and i32 %bf.load41, 2047, !dbg !8311
  switch i32 %bf.clear42, label %sw.default200 [
    i32 345, label %sw.bb43
    i32 341, label %sw.bb67
    i32 349, label %sw.bb84
    i32 360, label %sw.bb102
    i32 361, label %sw.bb111
    i32 529, label %sw.bb120
    i32 531, label %sw.bb120
    i32 530, label %sw.bb120
    i32 532, label %sw.bb120
    i32 535, label %sw.bb143
    i32 533, label %sw.bb143
    i32 537, label %sw.bb165
    i32 538, label %sw.bb184
    i32 540, label %sw.bb184
  ], !dbg !8312

sw.bb43:                                          ; preds = %if.end38
  %arrayidx44 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !8313
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 16, !dbg !8313
  %tobool45 = icmp ne %union.tree_node* %27, null, !dbg !8313
  br i1 %tobool45, label %land.lhs.true, label %if.end66, !dbg !8316

land.lhs.true:                                    ; preds = %sw.bb43
  %28 = load i32, i32* %nargs, align 4, !dbg !8317
  %cmp46 = icmp eq i32 %28, 1, !dbg !8318
  br i1 %cmp46, label %if.then48, label %if.end66, !dbg !8319

if.then48:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_val, metadata !8320, metadata !DIExpression()), !dbg !8322
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8323
  %call49 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %29), !dbg !8323
  %common = bitcast %union.tree_node* %call49 to %struct.tree_common*, !dbg !8323
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8323
  %30 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !8323
  %arrayidx51 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !8323
  %31 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 16, !dbg !8323
  %call52 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %30, %union.tree_node* %31), !dbg !8323
  store %union.tree_node* %call52, %union.tree_node** %new_val, align 8, !dbg !8322
  %32 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !8324
  %call53 = call zeroext i8 @is_gimple_val(%union.tree_node* %32), !dbg !8326
  %conv54 = zext i8 %call53 to i32, !dbg !8326
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !8326
  br i1 %tobool55, label %if.then64, label %lor.lhs.false, !dbg !8327

lor.lhs.false:                                    ; preds = %if.then48
  %33 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !8328
  %call56 = call zeroext i8 @is_gimple_cast(%union.tree_node* %33), !dbg !8329
  %conv57 = zext i8 %call56 to i32, !dbg !8329
  %tobool58 = icmp ne i32 %conv57, 0, !dbg !8329
  br i1 %tobool58, label %land.lhs.true59, label %if.end65, !dbg !8330

land.lhs.true59:                                  ; preds = %lor.lhs.false
  %34 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !8331
  %exp = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !8331
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8331
  %arrayidx60 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8331
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !8331
  %call61 = call zeroext i8 @is_gimple_val(%union.tree_node* %35), !dbg !8332
  %conv62 = zext i8 %call61 to i32, !dbg !8332
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !8332
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !8333

if.then64:                                        ; preds = %land.lhs.true59, %if.then48
  %36 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !8334
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !8335
  br label %return, !dbg !8335

if.end65:                                         ; preds = %land.lhs.true59, %lor.lhs.false
  br label %if.end66, !dbg !8336

if.end66:                                         ; preds = %if.end65, %land.lhs.true, %sw.bb43
  br label %sw.epilog201, !dbg !8337

sw.bb67:                                          ; preds = %if.end38
  %arrayidx68 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8338
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx68, align 8, !dbg !8338
  %tobool69 = icmp ne %union.tree_node* %37, null, !dbg !8338
  br i1 %tobool69, label %land.lhs.true70, label %if.end83, !dbg !8340

land.lhs.true70:                                  ; preds = %sw.bb67
  %arrayidx71 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8341
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx71, align 8, !dbg !8341
  %call72 = call zeroext i8 @is_gimple_val(%union.tree_node* %38), !dbg !8342
  %conv73 = zext i8 %call72 to i32, !dbg !8342
  %tobool74 = icmp ne i32 %conv73, 0, !dbg !8342
  br i1 %tobool74, label %land.lhs.true75, label %if.end83, !dbg !8343

land.lhs.true75:                                  ; preds = %land.lhs.true70
  %39 = load i32, i32* %nargs, align 4, !dbg !8344
  %cmp76 = icmp eq i32 %39, 2, !dbg !8345
  br i1 %cmp76, label %if.then78, label %if.end83, !dbg !8346

if.then78:                                        ; preds = %land.lhs.true75
  %40 = load i32, i32* %loc, align 4, !dbg !8347
  %41 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8348
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8349
  %call79 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %42, i32 0), !dbg !8350
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8351
  %call80 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %43, i32 1), !dbg !8352
  %arrayidx81 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8353
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !8353
  %call82 = call %union.tree_node* @fold_builtin_strcpy(i32 %40, %union.tree_node* %41, %union.tree_node* %call79, %union.tree_node* %call80, %union.tree_node* %44), !dbg !8354
  store %union.tree_node* %call82, %union.tree_node** %result, align 8, !dbg !8355
  br label %if.end83, !dbg !8356

if.end83:                                         ; preds = %if.then78, %land.lhs.true75, %land.lhs.true70, %sw.bb67
  br label %sw.epilog201, !dbg !8357

sw.bb84:                                          ; preds = %if.end38
  %arrayidx85 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8358
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx85, align 8, !dbg !8358
  %tobool86 = icmp ne %union.tree_node* %45, null, !dbg !8358
  br i1 %tobool86, label %land.lhs.true87, label %if.end101, !dbg !8360

land.lhs.true87:                                  ; preds = %sw.bb84
  %arrayidx88 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8361
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx88, align 8, !dbg !8361
  %call89 = call zeroext i8 @is_gimple_val(%union.tree_node* %46), !dbg !8362
  %conv90 = zext i8 %call89 to i32, !dbg !8362
  %tobool91 = icmp ne i32 %conv90, 0, !dbg !8362
  br i1 %tobool91, label %land.lhs.true92, label %if.end101, !dbg !8363

land.lhs.true92:                                  ; preds = %land.lhs.true87
  %47 = load i32, i32* %nargs, align 4, !dbg !8364
  %cmp93 = icmp eq i32 %47, 3, !dbg !8365
  br i1 %cmp93, label %if.then95, label %if.end101, !dbg !8366

if.then95:                                        ; preds = %land.lhs.true92
  %48 = load i32, i32* %loc, align 4, !dbg !8367
  %49 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8368
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8369
  %call96 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %50, i32 0), !dbg !8370
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8371
  %call97 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %51, i32 1), !dbg !8372
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8373
  %call98 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %52, i32 2), !dbg !8374
  %arrayidx99 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8375
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx99, align 8, !dbg !8375
  %call100 = call %union.tree_node* @fold_builtin_strncpy(i32 %48, %union.tree_node* %49, %union.tree_node* %call96, %union.tree_node* %call97, %union.tree_node* %call98, %union.tree_node* %53), !dbg !8376
  store %union.tree_node* %call100, %union.tree_node** %result, align 8, !dbg !8377
  br label %if.end101, !dbg !8378

if.end101:                                        ; preds = %if.then95, %land.lhs.true92, %land.lhs.true87, %sw.bb84
  br label %sw.epilog201, !dbg !8379

sw.bb102:                                         ; preds = %if.end38
  %54 = load i32, i32* %nargs, align 4, !dbg !8380
  %cmp103 = icmp eq i32 %54, 2, !dbg !8382
  br i1 %cmp103, label %if.then105, label %if.end110, !dbg !8383

if.then105:                                       ; preds = %sw.bb102
  %55 = load i32, i32* %loc, align 4, !dbg !8384
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8385
  %call106 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %56, i32 0), !dbg !8386
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8387
  %call107 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %57, i32 1), !dbg !8388
  %58 = load i8, i8* %ignore, align 1, !dbg !8389
  %arrayidx108 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !8390
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx108, align 16, !dbg !8390
  %call109 = call %union.tree_node* @fold_builtin_fputs(i32 %55, %union.tree_node* %call106, %union.tree_node* %call107, i8 zeroext %58, i8 zeroext 0, %union.tree_node* %59), !dbg !8391
  store %union.tree_node* %call109, %union.tree_node** %result, align 8, !dbg !8392
  br label %if.end110, !dbg !8393

if.end110:                                        ; preds = %if.then105, %sw.bb102
  br label %sw.epilog201, !dbg !8394

sw.bb111:                                         ; preds = %if.end38
  %60 = load i32, i32* %nargs, align 4, !dbg !8395
  %cmp112 = icmp eq i32 %60, 2, !dbg !8397
  br i1 %cmp112, label %if.then114, label %if.end119, !dbg !8398

if.then114:                                       ; preds = %sw.bb111
  %61 = load i32, i32* %loc, align 4, !dbg !8399
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8400
  %call115 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %62, i32 0), !dbg !8401
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8402
  %call116 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %63, i32 1), !dbg !8403
  %64 = load i8, i8* %ignore, align 1, !dbg !8404
  %arrayidx117 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !8405
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx117, align 16, !dbg !8405
  %call118 = call %union.tree_node* @fold_builtin_fputs(i32 %61, %union.tree_node* %call115, %union.tree_node* %call116, i8 zeroext %64, i8 zeroext 1, %union.tree_node* %65), !dbg !8406
  store %union.tree_node* %call118, %union.tree_node** %result, align 8, !dbg !8407
  br label %if.end119, !dbg !8408

if.end119:                                        ; preds = %if.then114, %sw.bb111
  br label %sw.epilog201, !dbg !8409

sw.bb120:                                         ; preds = %if.end38, %if.end38, %if.end38, %if.end38
  %arrayidx121 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8410
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx121, align 16, !dbg !8410
  %tobool122 = icmp ne %union.tree_node* %66, null, !dbg !8410
  br i1 %tobool122, label %land.lhs.true123, label %if.end142, !dbg !8412

land.lhs.true123:                                 ; preds = %sw.bb120
  %arrayidx124 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8413
  %67 = load %union.tree_node*, %union.tree_node** %arrayidx124, align 16, !dbg !8413
  %call125 = call zeroext i8 @is_gimple_val(%union.tree_node* %67), !dbg !8414
  %conv126 = zext i8 %call125 to i32, !dbg !8414
  %tobool127 = icmp ne i32 %conv126, 0, !dbg !8414
  br i1 %tobool127, label %land.lhs.true128, label %if.end142, !dbg !8415

land.lhs.true128:                                 ; preds = %land.lhs.true123
  %68 = load i32, i32* %nargs, align 4, !dbg !8416
  %cmp129 = icmp eq i32 %68, 4, !dbg !8417
  br i1 %cmp129, label %if.then131, label %if.end142, !dbg !8418

if.then131:                                       ; preds = %land.lhs.true128
  %69 = load i32, i32* %loc, align 4, !dbg !8419
  %70 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8420
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8421
  %call132 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %71, i32 0), !dbg !8422
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8423
  %call133 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %72, i32 1), !dbg !8424
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8425
  %call134 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %73, i32 2), !dbg !8426
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8427
  %call135 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %74, i32 3), !dbg !8428
  %arrayidx136 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8429
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx136, align 16, !dbg !8429
  %76 = load i8, i8* %ignore, align 1, !dbg !8430
  %77 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8431
  %function_decl137 = bitcast %union.tree_node* %77 to %struct.tree_function_decl*, !dbg !8431
  %function_code138 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl137, i32 0, i32 5, !dbg !8431
  %bf.load139 = load i32, i32* %function_code138, align 8, !dbg !8431
  %bf.clear140 = and i32 %bf.load139, 2047, !dbg !8431
  %call141 = call %union.tree_node* @fold_builtin_memory_chk(i32 %69, %union.tree_node* %70, %union.tree_node* %call132, %union.tree_node* %call133, %union.tree_node* %call134, %union.tree_node* %call135, %union.tree_node* %75, i8 zeroext %76, i32 %bf.clear140), !dbg !8432
  store %union.tree_node* %call141, %union.tree_node** %result, align 8, !dbg !8433
  br label %if.end142, !dbg !8434

if.end142:                                        ; preds = %if.then131, %land.lhs.true128, %land.lhs.true123, %sw.bb120
  br label %sw.epilog201, !dbg !8435

sw.bb143:                                         ; preds = %if.end38, %if.end38
  %arrayidx144 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8436
  %78 = load %union.tree_node*, %union.tree_node** %arrayidx144, align 8, !dbg !8436
  %tobool145 = icmp ne %union.tree_node* %78, null, !dbg !8436
  br i1 %tobool145, label %land.lhs.true146, label %if.end164, !dbg !8438

land.lhs.true146:                                 ; preds = %sw.bb143
  %arrayidx147 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8439
  %79 = load %union.tree_node*, %union.tree_node** %arrayidx147, align 8, !dbg !8439
  %call148 = call zeroext i8 @is_gimple_val(%union.tree_node* %79), !dbg !8440
  %conv149 = zext i8 %call148 to i32, !dbg !8440
  %tobool150 = icmp ne i32 %conv149, 0, !dbg !8440
  br i1 %tobool150, label %land.lhs.true151, label %if.end164, !dbg !8441

land.lhs.true151:                                 ; preds = %land.lhs.true146
  %80 = load i32, i32* %nargs, align 4, !dbg !8442
  %cmp152 = icmp eq i32 %80, 3, !dbg !8443
  br i1 %cmp152, label %if.then154, label %if.end164, !dbg !8444

if.then154:                                       ; preds = %land.lhs.true151
  %81 = load i32, i32* %loc, align 4, !dbg !8445
  %82 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8446
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8447
  %call155 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %83, i32 0), !dbg !8448
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8449
  %call156 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %84, i32 1), !dbg !8450
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8451
  %call157 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %85, i32 2), !dbg !8452
  %arrayidx158 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8453
  %86 = load %union.tree_node*, %union.tree_node** %arrayidx158, align 8, !dbg !8453
  %87 = load i8, i8* %ignore, align 1, !dbg !8454
  %88 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8455
  %function_decl159 = bitcast %union.tree_node* %88 to %struct.tree_function_decl*, !dbg !8455
  %function_code160 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl159, i32 0, i32 5, !dbg !8455
  %bf.load161 = load i32, i32* %function_code160, align 8, !dbg !8455
  %bf.clear162 = and i32 %bf.load161, 2047, !dbg !8455
  %call163 = call %union.tree_node* @fold_builtin_stxcpy_chk(i32 %81, %union.tree_node* %82, %union.tree_node* %call155, %union.tree_node* %call156, %union.tree_node* %call157, %union.tree_node* %86, i8 zeroext %87, i32 %bf.clear162), !dbg !8456
  store %union.tree_node* %call163, %union.tree_node** %result, align 8, !dbg !8457
  br label %if.end164, !dbg !8458

if.end164:                                        ; preds = %if.then154, %land.lhs.true151, %land.lhs.true146, %sw.bb143
  br label %sw.epilog201, !dbg !8459

sw.bb165:                                         ; preds = %if.end38
  %arrayidx166 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8460
  %89 = load %union.tree_node*, %union.tree_node** %arrayidx166, align 16, !dbg !8460
  %tobool167 = icmp ne %union.tree_node* %89, null, !dbg !8460
  br i1 %tobool167, label %land.lhs.true168, label %if.end183, !dbg !8462

land.lhs.true168:                                 ; preds = %sw.bb165
  %arrayidx169 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8463
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx169, align 16, !dbg !8463
  %call170 = call zeroext i8 @is_gimple_val(%union.tree_node* %90), !dbg !8464
  %conv171 = zext i8 %call170 to i32, !dbg !8464
  %tobool172 = icmp ne i32 %conv171, 0, !dbg !8464
  br i1 %tobool172, label %land.lhs.true173, label %if.end183, !dbg !8465

land.lhs.true173:                                 ; preds = %land.lhs.true168
  %91 = load i32, i32* %nargs, align 4, !dbg !8466
  %cmp174 = icmp eq i32 %91, 4, !dbg !8467
  br i1 %cmp174, label %if.then176, label %if.end183, !dbg !8468

if.then176:                                       ; preds = %land.lhs.true173
  %92 = load i32, i32* %loc, align 4, !dbg !8469
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8470
  %call177 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %93, i32 0), !dbg !8471
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8472
  %call178 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %94, i32 1), !dbg !8473
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8474
  %call179 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %95, i32 2), !dbg !8475
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8476
  %call180 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %96, i32 3), !dbg !8477
  %arrayidx181 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !8478
  %97 = load %union.tree_node*, %union.tree_node** %arrayidx181, align 16, !dbg !8478
  %call182 = call %union.tree_node* @fold_builtin_strncpy_chk(i32 %92, %union.tree_node* %call177, %union.tree_node* %call178, %union.tree_node* %call179, %union.tree_node* %call180, %union.tree_node* %97), !dbg !8479
  store %union.tree_node* %call182, %union.tree_node** %result, align 8, !dbg !8480
  br label %if.end183, !dbg !8481

if.end183:                                        ; preds = %if.then176, %land.lhs.true173, %land.lhs.true168, %sw.bb165
  br label %sw.epilog201, !dbg !8482

sw.bb184:                                         ; preds = %if.end38, %if.end38
  %arrayidx185 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8483
  %98 = load %union.tree_node*, %union.tree_node** %arrayidx185, align 8, !dbg !8483
  %tobool186 = icmp ne %union.tree_node* %98, null, !dbg !8483
  br i1 %tobool186, label %land.lhs.true187, label %if.end199, !dbg !8485

land.lhs.true187:                                 ; preds = %sw.bb184
  %arrayidx188 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8486
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx188, align 8, !dbg !8486
  %call189 = call zeroext i8 @is_gimple_val(%union.tree_node* %99), !dbg !8487
  %conv190 = zext i8 %call189 to i32, !dbg !8487
  %tobool191 = icmp ne i32 %conv190, 0, !dbg !8487
  br i1 %tobool191, label %if.then192, label %if.end199, !dbg !8488

if.then192:                                       ; preds = %land.lhs.true187
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8489
  %arrayidx193 = getelementptr inbounds [3 x %union.tree_node*], [3 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !8490
  %101 = load %union.tree_node*, %union.tree_node** %arrayidx193, align 8, !dbg !8490
  %102 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8491
  %function_decl194 = bitcast %union.tree_node* %102 to %struct.tree_function_decl*, !dbg !8491
  %function_code195 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl194, i32 0, i32 5, !dbg !8491
  %bf.load196 = load i32, i32* %function_code195, align 8, !dbg !8491
  %bf.clear197 = and i32 %bf.load196, 2047, !dbg !8491
  %call198 = call %union.tree_node* @gimple_fold_builtin_snprintf_chk(%union.gimple_statement_d* %100, %union.tree_node* %101, i32 %bf.clear197), !dbg !8492
  store %union.tree_node* %call198, %union.tree_node** %result, align 8, !dbg !8493
  br label %if.end199, !dbg !8494

if.end199:                                        ; preds = %if.then192, %land.lhs.true187, %sw.bb184
  br label %sw.epilog201, !dbg !8495

sw.default200:                                    ; preds = %if.end38
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 2759, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8496
  br label %sw.epilog201, !dbg !8497

sw.epilog201:                                     ; preds = %sw.default200, %if.end199, %if.end183, %if.end164, %if.end142, %if.end119, %if.end110, %if.end101, %if.end83, %if.end66
  %103 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8498
  %tobool202 = icmp ne %union.tree_node* %103, null, !dbg !8498
  br i1 %tobool202, label %land.lhs.true203, label %if.end208, !dbg !8500

land.lhs.true203:                                 ; preds = %sw.epilog201
  %104 = load i8, i8* %ignore, align 1, !dbg !8501
  %conv204 = zext i8 %104 to i32, !dbg !8501
  %tobool205 = icmp ne i32 %conv204, 0, !dbg !8501
  br i1 %tobool205, label %if.then206, label %if.end208, !dbg !8502

if.then206:                                       ; preds = %land.lhs.true203
  %105 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8503
  %call207 = call %union.tree_node* @fold_ignored_result(%union.tree_node* %105), !dbg !8504
  store %union.tree_node* %call207, %union.tree_node** %result, align 8, !dbg !8505
  br label %if.end208, !dbg !8506

if.end208:                                        ; preds = %if.then206, %land.lhs.true203, %sw.epilog201
  %106 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8507
  store %union.tree_node* %106, %union.tree_node** %retval, align 8, !dbg !8508
  br label %return, !dbg !8508

return:                                           ; preds = %if.end208, %if.then64, %if.then29, %sw.default, %if.then18, %if.then13, %if.end
  %107 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8509
  ret %union.tree_node* %107, !dbg !8509
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_and_update_call_from_tree(%struct.gimple_stmt_iterator* %si_p, %union.tree_node* %expr) #0 !dbg !8510 {
entry:
  %si_p.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_stmt_iterator* %si_p, %struct.gimple_stmt_iterator** %si_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %si_p.addr, metadata !8513, metadata !DIExpression()), !dbg !8514
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8515, metadata !DIExpression()), !dbg !8516
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8517, metadata !DIExpression()), !dbg !8518
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !8519, metadata !DIExpression()), !dbg !8520
  store %union.tree_node* null, %union.tree_node** %tmp, align 8, !dbg !8520
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8521, metadata !DIExpression()), !dbg !8522
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !8523, metadata !DIExpression()), !dbg !8524
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !8525, metadata !DIExpression()), !dbg !8526
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !8527, metadata !DIExpression()), !dbg !8528
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !8529
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %stmts, align 8, !dbg !8528
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !8530, metadata !DIExpression()), !dbg !8556
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si_p.addr, align 8, !dbg !8557
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !8558
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !8559
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8560
  %call2 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !8560
  %tobool = icmp ne i8 %call2, 0, !dbg !8560
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8560

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 3366, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8560
  br label %cond.end, !dbg !8560

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8560
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8561
  %call3 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !8562
  store %union.tree_node* %call3, %union.tree_node** %lhs, align 8, !dbg !8563
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !8564
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8565
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !8567
  br i1 %cmp, label %if.then, label %if.else, !dbg !8568

if.then:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8569
  call void @gimplify_and_add(%union.tree_node* %4, %struct.gimple_seq_d** %stmts), !dbg !8570
  br label %if.end, !dbg !8570

if.else:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8571
  %call4 = call %union.tree_node* @get_initialized_tmp_var(%union.tree_node* %5, %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d** null), !dbg !8572
  store %union.tree_node* %call4, %union.tree_node** %tmp, align 8, !dbg !8573
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !8574
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8575
  %call5 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %6), !dbg !8577
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8577
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !8578

if.then7:                                         ; preds = %if.end
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !8579
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8580
  %call8 = call i32 @gimple_location(%union.gimple_statement_d* %8), !dbg !8581
  call void @annotate_all_with_location(%struct.gimple_seq_d* %7, i32 %call8), !dbg !8582
  br label %if.end9, !dbg !8582

if.end9:                                          ; preds = %if.then7, %if.end
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !8583
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp10, %struct.gimple_seq_d* %9), !dbg !8585
  %10 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !8585
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !8585
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !8585
  br label %for.cond, !dbg !8586

for.cond:                                         ; preds = %for.inc, %if.end9
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8587
  %tobool12 = icmp ne i8 %call11, 0, !dbg !8589
  %lnot = xor i1 %tobool12, true, !dbg !8589
  br i1 %lnot, label %for.body, label %for.end, !dbg !8590

for.body:                                         ; preds = %for.cond
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8591
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8593
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8594
  call void @find_new_referenced_vars(%union.gimple_statement_d* %12), !dbg !8595
  %13 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si_p.addr, align 8, !dbg !8596
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8597
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %13, %union.gimple_statement_d* %14, i32 0), !dbg !8598
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8599
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %15), !dbg !8600
  %16 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si_p.addr, align 8, !dbg !8601
  call void @gsi_next(%struct.gimple_stmt_iterator* %16), !dbg !8602
  br label %for.inc, !dbg !8603

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !8604
  br label %for.cond, !dbg !8605, !llvm.loop !8606

for.end:                                          ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8608
  %cmp14 = icmp eq %union.tree_node* %17, null, !dbg !8610
  br i1 %cmp14, label %if.then15, label %if.else17, !dbg !8611

if.then15:                                        ; preds = %for.end
  %call16 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !8612
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8614
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8615
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %18), !dbg !8616
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8617
  call void @release_defs(%union.gimple_statement_d* %19), !dbg !8618
  br label %if.end21, !dbg !8619

if.else17:                                        ; preds = %for.end
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8620
  %21 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !8620
  %call18 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %20, %union.tree_node* %21), !dbg !8620
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8622
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8623
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8624
  %call19 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %23), !dbg !8625
  call void @gimple_set_vuse(%union.gimple_statement_d* %22, %union.tree_node* %call19), !dbg !8626
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8627
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8628
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %25), !dbg !8629
  call void @gimple_set_vdef(%union.gimple_statement_d* %24, %union.tree_node* %call20), !dbg !8630
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8631
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8632
  call void @move_ssa_defining_stmt_for_defs(%union.gimple_statement_d* %26, %union.gimple_statement_d* %27), !dbg !8633
  br label %if.end21

if.end21:                                         ; preds = %if.else17, %if.then15
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8634
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8635
  %call22 = call i32 @gimple_location(%union.gimple_statement_d* %29), !dbg !8636
  call void @gimple_set_location(%union.gimple_statement_d* %28, i32 %call22), !dbg !8637
  %30 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %si_p.addr, align 8, !dbg !8638
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !8639
  call void @gsi_replace(%struct.gimple_stmt_iterator* %30, %union.gimple_statement_d* %31, i8 zeroext 0), !dbg !8640
  ret void, !dbg !8641
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_fn(%union.gimple_statement_d* %gs, %union.tree_node* %fn) #0 !dbg !8642 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8643, metadata !DIExpression()), !dbg !8644
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !8645, metadata !DIExpression()), !dbg !8646
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8647
  %1 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !8648
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !8649
  ret void, !dbg !8650
}

declare dso_local %union.tree_node* @fold_call_stmt(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_maxval_strlen(%union.tree_node* %arg, %union.tree_node** %length, %struct.bitmap_head_def* %visited, i32 %type) #0 !dbg !8651 {
entry:
  %retval = alloca i8, align 1
  %arg.addr = alloca %union.tree_node*, align 8
  %length.addr = alloca %union.tree_node**, align 8
  %visited.addr = alloca %struct.bitmap_head_def*, align 8
  %type.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %aop0 = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %arg146 = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !8654, metadata !DIExpression()), !dbg !8655
  store %union.tree_node** %length, %union.tree_node*** %length.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %length.addr, metadata !8656, metadata !DIExpression()), !dbg !8657
  store %struct.bitmap_head_def* %visited, %struct.bitmap_head_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited.addr, metadata !8658, metadata !DIExpression()), !dbg !8659
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !8660, metadata !DIExpression()), !dbg !8661
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8662, metadata !DIExpression()), !dbg !8663
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8664, metadata !DIExpression()), !dbg !8665
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !8666, metadata !DIExpression()), !dbg !8667
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8668
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8668
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8668
  %bf.load = load i64, i64* %1, align 8, !dbg !8668
  %bf.clear = and i64 %bf.load, 65535, !dbg !8668
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8668
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !8670
  br i1 %cmp, label %if.then, label %if.end120, !dbg !8671

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8672
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8672
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8672
  %bf.load2 = load i64, i64* %3, align 8, !dbg !8672
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8672
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8672
  %cmp5 = icmp eq i32 %bf.cast4, 56, !dbg !8675
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !8676

if.then6:                                         ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8677
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !8677
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8677
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !8677
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8677
  %6 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8678
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8679
  %8 = load i32, i32* %type.addr, align 4, !dbg !8680
  %call = call zeroext i8 @get_maxval_strlen(%union.tree_node* %5, %union.tree_node** %6, %struct.bitmap_head_def* %7, i32 %8), !dbg !8681
  %conv = zext i8 %call to i32, !dbg !8681
  %tobool = icmp ne i32 %conv, 0, !dbg !8681
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8682

land.rhs:                                         ; preds = %if.then6
  %9 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8683
  %exp7 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !8683
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !8683
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 2, !dbg !8683
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !8683
  %11 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8684
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8685
  %13 = load i32, i32* %type.addr, align 4, !dbg !8686
  %call10 = call zeroext i8 @get_maxval_strlen(%union.tree_node* %10, %union.tree_node** %11, %struct.bitmap_head_def* %12, i32 %13), !dbg !8687
  %conv11 = zext i8 %call10 to i32, !dbg !8687
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !8682
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then6
  %14 = phi i1 [ false, %if.then6 ], [ %tobool12, %land.rhs ], !dbg !8688
  %land.ext = zext i1 %14 to i32, !dbg !8682
  %conv13 = trunc i32 %land.ext to i8, !dbg !8681
  store i8 %conv13, i8* %retval, align 1, !dbg !8689
  br label %return, !dbg !8689

if.else:                                          ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8690
  %base14 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8690
  %16 = bitcast %struct.tree_base* %base14 to i64*, !dbg !8690
  %bf.load15 = load i64, i64* %16, align 8, !dbg !8690
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !8690
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !8690
  %cmp18 = icmp eq i32 %bf.cast17, 121, !dbg !8692
  br i1 %cmp18, label %land.lhs.true, label %if.end66, !dbg !8693

land.lhs.true:                                    ; preds = %if.else
  %17 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8694
  %exp20 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !8694
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !8694
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 0, !dbg !8694
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !8694
  %base23 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !8694
  %19 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8694
  %bf.load24 = load i64, i64* %19, align 8, !dbg !8694
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !8694
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !8694
  %cmp27 = icmp eq i32 %bf.cast26, 45, !dbg !8695
  br i1 %cmp27, label %land.lhs.true29, label %if.end66, !dbg !8696

land.lhs.true29:                                  ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8697
  %exp30 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !8697
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !8697
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 0, !dbg !8697
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !8697
  %exp33 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !8697
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !8697
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i64 0, i64 1, !dbg !8697
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !8697
  %call36 = call i32 @integer_zerop(%union.tree_node* %22), !dbg !8698
  %tobool37 = icmp ne i32 %call36, 0, !dbg !8698
  br i1 %tobool37, label %if.then38, label %if.end66, !dbg !8699

if.then38:                                        ; preds = %land.lhs.true29
  call void @llvm.dbg.declare(metadata %union.tree_node** %aop0, metadata !8700, metadata !DIExpression()), !dbg !8702
  %23 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8703
  %exp39 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !8703
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !8703
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 0, !dbg !8703
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !8703
  %exp42 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !8703
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !8703
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 0, !dbg !8703
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !8703
  store %union.tree_node* %25, %union.tree_node** %aop0, align 8, !dbg !8702
  %26 = load %union.tree_node*, %union.tree_node** %aop0, align 8, !dbg !8704
  %base45 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !8704
  %27 = bitcast %struct.tree_base* %base45 to i64*, !dbg !8704
  %bf.load46 = load i64, i64* %27, align 8, !dbg !8704
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !8704
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !8704
  %cmp49 = icmp eq i32 %bf.cast48, 47, !dbg !8706
  br i1 %cmp49, label %land.lhs.true51, label %if.end, !dbg !8707

land.lhs.true51:                                  ; preds = %if.then38
  %28 = load %union.tree_node*, %union.tree_node** %aop0, align 8, !dbg !8708
  %exp52 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !8708
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 3, !dbg !8708
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i64 0, i64 0, !dbg !8708
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8, !dbg !8708
  %base55 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !8708
  %30 = bitcast %struct.tree_base* %base55 to i64*, !dbg !8708
  %bf.load56 = load i64, i64* %30, align 8, !dbg !8708
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !8708
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !8708
  %cmp59 = icmp eq i32 %bf.cast58, 141, !dbg !8709
  br i1 %cmp59, label %if.then61, label %if.end, !dbg !8710

if.then61:                                        ; preds = %land.lhs.true51
  %31 = load %union.tree_node*, %union.tree_node** %aop0, align 8, !dbg !8711
  %exp62 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !8711
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !8711
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 0, !dbg !8711
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !8711
  %33 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8712
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8713
  %35 = load i32, i32* %type.addr, align 4, !dbg !8714
  %call65 = call zeroext i8 @get_maxval_strlen(%union.tree_node* %32, %union.tree_node** %33, %struct.bitmap_head_def* %34, i32 %35), !dbg !8715
  store i8 %call65, i8* %retval, align 1, !dbg !8716
  br label %return, !dbg !8716

if.end:                                           ; preds = %land.lhs.true51, %if.then38
  br label %if.end66, !dbg !8717

if.end66:                                         ; preds = %if.end, %land.lhs.true29, %land.lhs.true, %if.else
  br label %if.end67

if.end67:                                         ; preds = %if.end66
  %36 = load i32, i32* %type.addr, align 4, !dbg !8718
  %cmp68 = icmp eq i32 %36, 2, !dbg !8720
  br i1 %cmp68, label %if.then70, label %if.else82, !dbg !8721

if.then70:                                        ; preds = %if.end67
  %37 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8722
  store %union.tree_node* %37, %union.tree_node** %val, align 8, !dbg !8724
  %38 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8725
  %base71 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8725
  %39 = bitcast %struct.tree_base* %base71 to i64*, !dbg !8725
  %bf.load72 = load i64, i64* %39, align 8, !dbg !8725
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !8725
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !8725
  %cmp75 = icmp ne i32 %bf.cast74, 23, !dbg !8727
  br i1 %cmp75, label %if.then80, label %lor.lhs.false, !dbg !8728

lor.lhs.false:                                    ; preds = %if.then70
  %40 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8729
  %call77 = call i32 @tree_int_cst_sgn(%union.tree_node* %40), !dbg !8730
  %cmp78 = icmp slt i32 %call77, 0, !dbg !8731
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !8732

if.then80:                                        ; preds = %lor.lhs.false, %if.then70
  store i8 0, i8* %retval, align 1, !dbg !8733
  br label %return, !dbg !8733

if.end81:                                         ; preds = %lor.lhs.false
  br label %if.end84, !dbg !8734

if.else82:                                        ; preds = %if.end67
  %41 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8735
  %call83 = call %union.tree_node* @c_strlen(%union.tree_node* %41, i32 1), !dbg !8736
  store %union.tree_node* %call83, %union.tree_node** %val, align 8, !dbg !8737
  br label %if.end84

if.end84:                                         ; preds = %if.else82, %if.end81
  %42 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8738
  %tobool85 = icmp ne %union.tree_node* %42, null, !dbg !8738
  br i1 %tobool85, label %if.end87, label %if.then86, !dbg !8740

if.then86:                                        ; preds = %if.end84
  store i8 0, i8* %retval, align 1, !dbg !8741
  br label %return, !dbg !8741

if.end87:                                         ; preds = %if.end84
  %43 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8742
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !8744
  %tobool88 = icmp ne %union.tree_node* %44, null, !dbg !8744
  br i1 %tobool88, label %if.then89, label %if.end119, !dbg !8745

if.then89:                                        ; preds = %if.end87
  %45 = load i32, i32* %type.addr, align 4, !dbg !8746
  %cmp90 = icmp sgt i32 %45, 0, !dbg !8749
  br i1 %cmp90, label %if.then92, label %if.else112, !dbg !8750

if.then92:                                        ; preds = %if.then89
  %46 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8751
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8, !dbg !8751
  %base93 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !8751
  %48 = bitcast %struct.tree_base* %base93 to i64*, !dbg !8751
  %bf.load94 = load i64, i64* %48, align 8, !dbg !8751
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !8751
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !8751
  %cmp97 = icmp ne i32 %bf.cast96, 23, !dbg !8754
  br i1 %cmp97, label %if.then106, label %lor.lhs.false99, !dbg !8755

lor.lhs.false99:                                  ; preds = %if.then92
  %49 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8756
  %base100 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !8756
  %50 = bitcast %struct.tree_base* %base100 to i64*, !dbg !8756
  %bf.load101 = load i64, i64* %50, align 8, !dbg !8756
  %bf.clear102 = and i64 %bf.load101, 65535, !dbg !8756
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !8756
  %cmp104 = icmp ne i32 %bf.cast103, 23, !dbg !8757
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !8758

if.then106:                                       ; preds = %lor.lhs.false99, %if.then92
  store i8 0, i8* %retval, align 1, !dbg !8759
  br label %return, !dbg !8759

if.end107:                                        ; preds = %lor.lhs.false99
  %51 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8760
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !8762
  %53 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8763
  %call108 = call i32 @tree_int_cst_lt(%union.tree_node* %52, %union.tree_node* %53), !dbg !8764
  %tobool109 = icmp ne i32 %call108, 0, !dbg !8764
  br i1 %tobool109, label %if.then110, label %if.end111, !dbg !8765

if.then110:                                       ; preds = %if.end107
  %54 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8766
  %55 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8767
  store %union.tree_node* %54, %union.tree_node** %55, align 8, !dbg !8768
  br label %if.end111, !dbg !8769

if.end111:                                        ; preds = %if.then110, %if.end107
  store i8 1, i8* %retval, align 1, !dbg !8770
  br label %return, !dbg !8770

if.else112:                                       ; preds = %if.then89
  %56 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8771
  %57 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8773
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !8774
  %call113 = call i32 @simple_cst_equal(%union.tree_node* %56, %union.tree_node* %58), !dbg !8775
  %cmp114 = icmp ne i32 %call113, 1, !dbg !8776
  br i1 %cmp114, label %if.then116, label %if.end117, !dbg !8777

if.then116:                                       ; preds = %if.else112
  store i8 0, i8* %retval, align 1, !dbg !8778
  br label %return, !dbg !8778

if.end117:                                        ; preds = %if.else112
  br label %if.end118

if.end118:                                        ; preds = %if.end117
  br label %if.end119, !dbg !8779

if.end119:                                        ; preds = %if.end118, %if.end87
  %59 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8780
  %60 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8781
  store %union.tree_node* %59, %union.tree_node** %60, align 8, !dbg !8782
  store i8 1, i8* %retval, align 1, !dbg !8783
  br label %return, !dbg !8783

if.end120:                                        ; preds = %entry
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8784
  %62 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8786
  %ssa_name = bitcast %union.tree_node* %62 to %struct.tree_ssa_name*, !dbg !8786
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8786
  %63 = load i32, i32* %version, align 8, !dbg !8786
  %call121 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %61, i32 %63), !dbg !8787
  %tobool122 = icmp ne i32 %call121, 0, !dbg !8787
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !8788

if.then123:                                       ; preds = %if.end120
  store i8 1, i8* %retval, align 1, !dbg !8789
  br label %return, !dbg !8789

if.end124:                                        ; preds = %if.end120
  %64 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8790
  %65 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8791
  %ssa_name125 = bitcast %union.tree_node* %65 to %struct.tree_ssa_name*, !dbg !8791
  %version126 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name125, i32 0, i32 3, !dbg !8791
  %66 = load i32, i32* %version126, align 8, !dbg !8791
  %call127 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %64, i32 %66), !dbg !8792
  %67 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !8793
  store %union.tree_node* %67, %union.tree_node** %var, align 8, !dbg !8794
  %68 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8795
  %ssa_name128 = bitcast %union.tree_node* %68 to %struct.tree_ssa_name*, !dbg !8795
  %def_stmt129 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name128, i32 0, i32 2, !dbg !8795
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt129, align 8, !dbg !8795
  store %union.gimple_statement_d* %69, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8796
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8797
  %call130 = call i32 @gimple_code(%union.gimple_statement_d* %70), !dbg !8798
  switch i32 %call130, label %sw.default [
    i32 6, label %sw.bb
    i32 16, label %sw.bb142
  ], !dbg !8799

sw.bb:                                            ; preds = %if.end124
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8800
  %call131 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %71), !dbg !8803
  %conv132 = zext i8 %call131 to i32, !dbg !8803
  %tobool133 = icmp ne i32 %conv132, 0, !dbg !8803
  br i1 %tobool133, label %if.then138, label %lor.lhs.false134, !dbg !8804

lor.lhs.false134:                                 ; preds = %sw.bb
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8805
  %call135 = call zeroext i8 @gimple_assign_unary_nop_p(%union.gimple_statement_d* %72), !dbg !8806
  %conv136 = zext i8 %call135 to i32, !dbg !8806
  %tobool137 = icmp ne i32 %conv136, 0, !dbg !8806
  br i1 %tobool137, label %if.then138, label %if.end141, !dbg !8807

if.then138:                                       ; preds = %lor.lhs.false134, %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !8808, metadata !DIExpression()), !dbg !8810
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8811
  %call139 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %73), !dbg !8812
  store %union.tree_node* %call139, %union.tree_node** %rhs, align 8, !dbg !8810
  %74 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8813
  %75 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8814
  %76 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8815
  %77 = load i32, i32* %type.addr, align 4, !dbg !8816
  %call140 = call zeroext i8 @get_maxval_strlen(%union.tree_node* %74, %union.tree_node** %75, %struct.bitmap_head_def* %76, i32 %77), !dbg !8817
  store i8 %call140, i8* %retval, align 1, !dbg !8818
  br label %return, !dbg !8818

if.end141:                                        ; preds = %lor.lhs.false134
  store i8 0, i8* %retval, align 1, !dbg !8819
  br label %return, !dbg !8819

sw.bb142:                                         ; preds = %if.end124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8820, metadata !DIExpression()), !dbg !8822
  store i32 0, i32* %i, align 4, !dbg !8823
  br label %for.cond, !dbg !8825

for.cond:                                         ; preds = %for.inc, %sw.bb142
  %78 = load i32, i32* %i, align 4, !dbg !8826
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8828
  %call143 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %79), !dbg !8829
  %cmp144 = icmp ult i32 %78, %call143, !dbg !8830
  br i1 %cmp144, label %for.body, label %for.end, !dbg !8831

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg146, metadata !8832, metadata !DIExpression()), !dbg !8834
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8835
  %81 = load i32, i32* %i, align 4, !dbg !8836
  %call147 = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %80, i32 %81), !dbg !8837
  %def = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call147, i32 0, i32 1, !dbg !8838
  %82 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8838
  store %union.tree_node* %82, %union.tree_node** %arg146, align 8, !dbg !8834
  %83 = load %union.tree_node*, %union.tree_node** %arg146, align 8, !dbg !8839
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8841
  %call148 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %84), !dbg !8842
  %cmp149 = icmp eq %union.tree_node* %83, %call148, !dbg !8843
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !8844

if.then151:                                       ; preds = %for.body
  br label %for.inc, !dbg !8845

if.end152:                                        ; preds = %for.body
  %85 = load %union.tree_node*, %union.tree_node** %arg146, align 8, !dbg !8846
  %86 = load %union.tree_node**, %union.tree_node*** %length.addr, align 8, !dbg !8848
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !8849
  %88 = load i32, i32* %type.addr, align 4, !dbg !8850
  %call153 = call zeroext i8 @get_maxval_strlen(%union.tree_node* %85, %union.tree_node** %86, %struct.bitmap_head_def* %87, i32 %88), !dbg !8851
  %tobool154 = icmp ne i8 %call153, 0, !dbg !8851
  br i1 %tobool154, label %if.end156, label %if.then155, !dbg !8852

if.then155:                                       ; preds = %if.end152
  store i8 0, i8* %retval, align 1, !dbg !8853
  br label %return, !dbg !8853

if.end156:                                        ; preds = %if.end152
  br label %for.inc, !dbg !8854

for.inc:                                          ; preds = %if.end156, %if.then151
  %89 = load i32, i32* %i, align 4, !dbg !8855
  %inc = add i32 %89, 1, !dbg !8855
  store i32 %inc, i32* %i, align 4, !dbg !8855
  br label %for.cond, !dbg !8856, !llvm.loop !8857

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !8859
  br label %return, !dbg !8859

sw.default:                                       ; preds = %if.end124
  store i8 0, i8* %retval, align 1, !dbg !8860
  br label %return, !dbg !8860

return:                                           ; preds = %sw.default, %for.end, %if.then155, %if.end141, %if.then138, %if.then123, %if.end119, %if.then116, %if.end111, %if.then106, %if.then86, %if.then80, %if.then61, %land.end
  %90 = load i8, i8* %retval, align 1, !dbg !8861
  ret i8 %90, !dbg !8861
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_cast(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_builtin_strcpy(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_builtin_strncpy(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_builtin_fputs(i32, %union.tree_node*, %union.tree_node*, i8 zeroext, i8 zeroext, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_builtin_memory_chk(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.tree_node* @fold_builtin_stxcpy_chk(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.tree_node* @fold_builtin_strncpy_chk(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @gimple_fold_builtin_snprintf_chk(%union.gimple_statement_d*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @fold_ignored_result(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare dso_local %union.tree_node* @c_strlen(%union.tree_node*, i32) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @gimple_assign_unary_nop_p(%union.gimple_statement_d*) #2

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

declare dso_local void @push_gimplify_context(%struct.gimplify_ctx*) #2

declare dso_local void @gimplify_and_add(%union.tree_node*, %struct.gimple_seq_d**) #2

declare dso_local %union.tree_node* @get_initialized_tmp_var(%union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**) #2

declare dso_local void @pop_gimplify_context(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !8862 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8865
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !8866
  %cmp = icmp ne i32 %call, 0, !dbg !8867
  %conv = zext i1 %cmp to i32, !dbg !8867
  %conv1 = trunc i32 %conv to i8, !dbg !8866
  ret i8 %conv1, !dbg !8868
}

declare dso_local void @annotate_all_with_location(%struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !8869 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !8872, metadata !DIExpression()), !dbg !8873
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8874, metadata !DIExpression()), !dbg !8875
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8876
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !8877
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8878
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8879
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8880
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8881
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !8882
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8883
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !8883
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !8884
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !8885

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8886
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !8886
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !8887
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8887
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !8888
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8889

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8890
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !8890
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !8891
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !8891
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !8892
  br label %cond.end, !dbg !8889

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !8889
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8893
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !8894
  ret void, !dbg !8895
}

declare dso_local void @find_new_referenced_vars(%union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) #0 !dbg !8896 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8897, metadata !DIExpression()), !dbg !8898
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !8899, metadata !DIExpression()), !dbg !8900
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8901
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8901
  %tobool = icmp ne i8 %call, 0, !dbg !8901
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8901

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8901
  br label %cond.end, !dbg !8901

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8901

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8901
  %1 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !8902
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8903
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8904
  %vuse1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8905
  store %union.tree_node* %1, %union.tree_node** %vuse1, align 8, !dbg !8906
  ret void, !dbg !8907
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) #0 !dbg !8908 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8909, metadata !DIExpression()), !dbg !8910
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !8911, metadata !DIExpression()), !dbg !8912
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8913
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8913
  %tobool = icmp ne i8 %call, 0, !dbg !8913
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8913

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8913
  br label %cond.end, !dbg !8913

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8913

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8913
  %1 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !8914
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8915
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8916
  %vdef1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !8917
  store %union.tree_node* %1, %union.tree_node** %vdef1, align 8, !dbg !8918
  ret void, !dbg !8919
}

declare dso_local void @move_ssa_defining_stmt_for_defs(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !8920 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8923, metadata !DIExpression()), !dbg !8924
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !8925, metadata !DIExpression()), !dbg !8926
  %0 = load i32, i32* %location.addr, align 4, !dbg !8927
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8928
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8929
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !8930
  store i32 %0, i32* %location1, align 8, !dbg !8931
  ret void, !dbg !8932
}

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @gimple_remove_stmt_histograms(%struct.function*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @optimize_stack_restore(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !8933 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %callee = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %call1 = alloca %union.gimple_statement_d*, align 8
  %stack_save = alloca %union.gimple_statement_d*, align 8
  %stack_save_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %rhs = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !8936, metadata !DIExpression()), !dbg !8937
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !8938, metadata !DIExpression()), !dbg !8939
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8940, metadata !DIExpression()), !dbg !8941
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8942, metadata !DIExpression()), !dbg !8943
  %call = call %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8944
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !8943
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call1, metadata !8945, metadata !DIExpression()), !dbg !8946
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8947
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %call1, align 8, !dbg !8946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !8948
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8950
  %cmp = icmp ne i32 %call3, 8, !dbg !8951
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8952

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !8953
  %call4 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !8954
  %cmp5 = icmp ne i32 %call4, 1, !dbg !8955
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !8956

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !8957
  %call7 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 0), !dbg !8957
  %base = bitcast %union.tree_node* %call7 to %struct.tree_base*, !dbg !8957
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8957
  %bf.load = load i64, i64* %3, align 8, !dbg !8957
  %bf.clear = and i64 %bf.load, 65535, !dbg !8957
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8957
  %cmp8 = icmp ne i32 %bf.cast, 141, !dbg !8958
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !8959

lor.lhs.false9:                                   ; preds = %lor.lhs.false6
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !8960
  %call10 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %4, i32 0), !dbg !8960
  %common = bitcast %union.tree_node* %call10 to %struct.tree_common*, !dbg !8960
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8960
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8960
  %base11 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8960
  %6 = bitcast %struct.tree_base* %base11 to i64*, !dbg !8960
  %bf.load12 = load i64, i64* %6, align 8, !dbg !8960
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !8960
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !8960
  %cmp15 = icmp eq i32 %bf.cast14, 10, !dbg !8960
  br i1 %cmp15, label %if.end, label %lor.lhs.false16, !dbg !8960

lor.lhs.false16:                                  ; preds = %lor.lhs.false9
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !8960
  %call17 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 0), !dbg !8960
  %common18 = bitcast %union.tree_node* %call17 to %struct.tree_common*, !dbg !8960
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !8960
  %8 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !8960
  %base20 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8960
  %9 = bitcast %struct.tree_base* %base20 to i64*, !dbg !8960
  %bf.load21 = load i64, i64* %9, align 8, !dbg !8960
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !8960
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !8960
  %cmp24 = icmp eq i32 %bf.cast23, 12, !dbg !8960
  br i1 %cmp24, label %if.end, label %if.then, !dbg !8961

if.then:                                          ; preds = %lor.lhs.false16, %lor.lhs.false6, %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8962
  br label %return, !dbg !8962

if.end:                                           ; preds = %lor.lhs.false16, %lor.lhs.false9
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !8963
  br label %for.cond, !dbg !8963

for.cond:                                         ; preds = %for.inc, %if.end
  %call25 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8965
  %tobool = icmp ne i8 %call25, 0, !dbg !8967
  %lnot = xor i1 %tobool, true, !dbg !8967
  br i1 %lnot, label %for.body, label %for.end, !dbg !8968

for.body:                                         ; preds = %for.cond
  %call26 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !8969
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %stmt, align 8, !dbg !8971
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8972
  %call27 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !8974
  %cmp28 = icmp eq i32 %call27, 7, !dbg !8975
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !8976

if.then29:                                        ; preds = %for.body
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8977
  br label %return, !dbg !8977

if.end30:                                         ; preds = %for.body
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8978
  %call31 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !8980
  %cmp32 = icmp ne i32 %call31, 8, !dbg !8981
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !8982

if.then33:                                        ; preds = %if.end30
  br label %for.inc, !dbg !8983

if.end34:                                         ; preds = %if.end30
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8984
  %call35 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %12), !dbg !8985
  store %union.tree_node* %call35, %union.tree_node** %callee, align 8, !dbg !8986
  %13 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8987
  %tobool36 = icmp ne %union.tree_node* %13, null, !dbg !8987
  br i1 %tobool36, label %lor.lhs.false37, label %if.then46, !dbg !8989

lor.lhs.false37:                                  ; preds = %if.end34
  %14 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8990
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !8990
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8990
  %bf.load38 = load i32, i32* %built_in_class, align 8, !dbg !8990
  %bf.lshr = lshr i32 %bf.load38, 11, !dbg !8990
  %bf.clear39 = and i32 %bf.lshr, 3, !dbg !8990
  %cmp40 = icmp ne i32 %bf.clear39, 3, !dbg !8991
  br i1 %cmp40, label %if.then46, label %lor.lhs.false41, !dbg !8992

lor.lhs.false41:                                  ; preds = %lor.lhs.false37
  %15 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8993
  %function_decl42 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !8993
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl42, i32 0, i32 5, !dbg !8993
  %bf.load43 = load i32, i32* %function_code, align 8, !dbg !8993
  %bf.clear44 = and i32 %bf.load43, 2047, !dbg !8993
  %cmp45 = icmp eq i32 %bf.clear44, 415, !dbg !8994
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !8995

if.then46:                                        ; preds = %lor.lhs.false41, %lor.lhs.false37, %if.end34
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8996
  br label %return, !dbg !8996

if.end47:                                         ; preds = %lor.lhs.false41
  %16 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !8997
  %function_decl48 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !8997
  %function_code49 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl48, i32 0, i32 5, !dbg !8997
  %bf.load50 = load i32, i32* %function_code49, align 8, !dbg !8997
  %bf.clear51 = and i32 %bf.load50, 2047, !dbg !8997
  %cmp52 = icmp eq i32 %bf.clear51, 527, !dbg !8999
  br i1 %cmp52, label %if.then53, label %if.end54, !dbg !9000

if.then53:                                        ; preds = %if.end47
  br label %second_stack_restore, !dbg !9001

if.end54:                                         ; preds = %if.end47
  br label %for.inc, !dbg !9002

for.inc:                                          ; preds = %if.end54, %if.then33
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !9003
  br label %for.cond, !dbg !9004, !llvm.loop !9005

for.end:                                          ; preds = %for.cond
  %call55 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !9007
  %tobool56 = icmp ne i8 %call55, 0, !dbg !9007
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !9009

if.then57:                                        ; preds = %for.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9010
  br label %return, !dbg !9010

if.end58:                                         ; preds = %for.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9011
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !9011
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9011
  %tobool59 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !9011
  br i1 %tobool59, label %cond.true, label %cond.false, !dbg !9011

cond.true:                                        ; preds = %if.end58
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9011
  %succs60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !9011
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs60, align 8, !dbg !9011
  %base61 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !9011
  br label %cond.end, !dbg !9011

cond.false:                                       ; preds = %if.end58
  br label %cond.end, !dbg !9011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base61, %cond.true ], [ null, %cond.false ], !dbg !9011
  %call62 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9011
  switch i32 %call62, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb63
  ], !dbg !9012

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog, !dbg !9013

sw.bb63:                                          ; preds = %cond.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9015
  %call64 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %21), !dbg !9017
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call64, i32 0, i32 1, !dbg !9018
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9018
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9019
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !9019
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9019
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9019
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 1, !dbg !9019
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9019
  %cmp65 = icmp ne %struct.basic_block_def* %22, %25, !dbg !9020
  br i1 %cmp65, label %if.then66, label %if.end67, !dbg !9021

if.then66:                                        ; preds = %sw.bb63
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9022
  br label %return, !dbg !9022

if.end67:                                         ; preds = %sw.bb63
  br label %sw.epilog, !dbg !9023

sw.default:                                       ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9024
  br label %return, !dbg !9024

sw.epilog:                                        ; preds = %if.end67, %sw.bb
  br label %second_stack_restore, !dbg !9025

second_stack_restore:                             ; preds = %sw.epilog, %if.then53
  call void @llvm.dbg.label(metadata !9026), !dbg !9027
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !9028
  %call68 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %26, i32 0), !dbg !9030
  %call69 = call zeroext i8 @has_single_use(%union.tree_node* %call68), !dbg !9031
  %tobool70 = icmp ne i8 %call69, 0, !dbg !9031
  br i1 %tobool70, label %if.then71, label %if.end98, !dbg !9032

if.then71:                                        ; preds = %second_stack_restore
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stack_save, metadata !9033, metadata !DIExpression()), !dbg !9035
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !9036
  %call72 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %27, i32 0), !dbg !9036
  %ssa_name = bitcast %union.tree_node* %call72 to %struct.tree_ssa_name*, !dbg !9036
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9036
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9036
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %stack_save, align 8, !dbg !9035
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stack_save, align 8, !dbg !9037
  %call73 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %29), !dbg !9039
  %tobool74 = icmp ne i8 %call73, 0, !dbg !9039
  br i1 %tobool74, label %if.then75, label %if.end97, !dbg !9040

if.then75:                                        ; preds = %if.then71
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stack_save, align 8, !dbg !9041
  %call76 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %30), !dbg !9043
  store %union.tree_node* %call76, %union.tree_node** %callee, align 8, !dbg !9044
  %31 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9045
  %tobool77 = icmp ne %union.tree_node* %31, null, !dbg !9045
  br i1 %tobool77, label %land.lhs.true, label %if.end96, !dbg !9047

land.lhs.true:                                    ; preds = %if.then75
  %32 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9048
  %function_decl78 = bitcast %union.tree_node* %32 to %struct.tree_function_decl*, !dbg !9048
  %built_in_class79 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl78, i32 0, i32 5, !dbg !9048
  %bf.load80 = load i32, i32* %built_in_class79, align 8, !dbg !9048
  %bf.lshr81 = lshr i32 %bf.load80, 11, !dbg !9048
  %bf.clear82 = and i32 %bf.lshr81, 3, !dbg !9048
  %cmp83 = icmp eq i32 %bf.clear82, 3, !dbg !9049
  br i1 %cmp83, label %land.lhs.true84, label %if.end96, !dbg !9050

land.lhs.true84:                                  ; preds = %land.lhs.true
  %33 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9051
  %function_decl85 = bitcast %union.tree_node* %33 to %struct.tree_function_decl*, !dbg !9051
  %function_code86 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl85, i32 0, i32 5, !dbg !9051
  %bf.load87 = load i32, i32* %function_code86, align 8, !dbg !9051
  %bf.clear88 = and i32 %bf.load87, 2047, !dbg !9051
  %cmp89 = icmp eq i32 %bf.clear88, 526, !dbg !9052
  br i1 %cmp89, label %if.then90, label %if.end96, !dbg !9053

if.then90:                                        ; preds = %land.lhs.true84
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %stack_save_gsi, metadata !9054, metadata !DIExpression()), !dbg !9056
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9057, metadata !DIExpression()), !dbg !9058
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stack_save, align 8, !dbg !9059
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %34), !dbg !9060
  %35 = bitcast %struct.gimple_stmt_iterator* %stack_save_gsi to i8*, !dbg !9060
  %36 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9060
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !9060
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call1, align 8, !dbg !9061
  %call91 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %37, i32 0), !dbg !9061
  %common92 = bitcast %union.tree_node* %call91 to %struct.tree_common*, !dbg !9061
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !9061
  %38 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !9061
  %call94 = call %union.tree_node* @build_int_cst(%union.tree_node* %38, i64 0), !dbg !9062
  store %union.tree_node* %call94, %union.tree_node** %rhs, align 8, !dbg !9063
  %39 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9064
  %call95 = call zeroext i8 @update_call_from_tree(%struct.gimple_stmt_iterator* %stack_save_gsi, %union.tree_node* %39), !dbg !9065
  br label %if.end96, !dbg !9066

if.end96:                                         ; preds = %if.then90, %land.lhs.true84, %land.lhs.true, %if.then75
  br label %if.end97, !dbg !9067

if.end97:                                         ; preds = %if.end96, %if.then71
  br label %if.end98, !dbg !9068

if.end98:                                         ; preds = %if.end97, %second_stack_restore
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9069
  store %union.tree_node* %40, %union.tree_node** %retval, align 8, !dbg !9070
  br label %return, !dbg !9070

return:                                           ; preds = %if.end98, %sw.default, %if.then66, %if.then57, %if.then46, %if.then29, %if.then
  %41 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9071
  ret %union.tree_node* %41, !dbg !9071
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @optimize_stdarg_builtin(%union.gimple_statement_d* %call) #0 !dbg !9072 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %callee = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %cfun_va_list = alloca %union.tree_node*, align 8
  %va_list_simple_ptr = alloca i8, align 1
  %loc = alloca i32, align 4
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !9073, metadata !DIExpression()), !dbg !9074
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !9075, metadata !DIExpression()), !dbg !9076
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9077, metadata !DIExpression()), !dbg !9078
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9079, metadata !DIExpression()), !dbg !9080
  call void @llvm.dbg.declare(metadata %union.tree_node** %cfun_va_list, metadata !9081, metadata !DIExpression()), !dbg !9082
  call void @llvm.dbg.declare(metadata i8* %va_list_simple_ptr, metadata !9083, metadata !DIExpression()), !dbg !9084
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !9085, metadata !DIExpression()), !dbg !9086
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9087
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !9088
  store i32 %call1, i32* %loc, align 4, !dbg !9086
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9089
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !9091
  %cmp = icmp ne i32 %call2, 8, !dbg !9092
  br i1 %cmp, label %if.then, label %if.end, !dbg !9093

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9094
  br label %return, !dbg !9094

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9095
  %call3 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %2), !dbg !9096
  store %union.tree_node* %call3, %union.tree_node** %callee, align 8, !dbg !9097
  %3 = load %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 70), align 8, !dbg !9098
  %4 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9099
  %call4 = call %union.tree_node* %3(%union.tree_node* %4), !dbg !9100
  store %union.tree_node* %call4, %union.tree_node** %cfun_va_list, align 8, !dbg !9101
  %5 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9102
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9102
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !9102
  %bf.load = load i64, i64* %6, align 8, !dbg !9102
  %bf.clear = and i64 %bf.load, 65535, !dbg !9102
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9102
  %cmp5 = icmp eq i32 %bf.cast, 10, !dbg !9102
  br i1 %cmp5, label %land.rhs, label %lor.lhs.false, !dbg !9102

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9102
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9102
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !9102
  %bf.load7 = load i64, i64* %8, align 8, !dbg !9102
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !9102
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9102
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !9102
  br i1 %cmp10, label %land.rhs, label %land.end, !dbg !9103

land.rhs:                                         ; preds = %lor.lhs.false, %if.end
  %9 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9104
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !9104
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9104
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9104
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9105
  %cmp11 = icmp eq %union.tree_node* %10, %11, !dbg !9106
  br i1 %cmp11, label %lor.end, label %lor.rhs, !dbg !9107

lor.rhs:                                          ; preds = %land.rhs
  %12 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9108
  %common12 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !9108
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !9108
  %13 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !9108
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !9109
  %cmp14 = icmp eq %union.tree_node* %13, %14, !dbg !9110
  br label %lor.end, !dbg !9107

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %15 = phi i1 [ true, %land.rhs ], [ %cmp14, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false
  %16 = phi i1 [ false, %lor.lhs.false ], [ %15, %lor.end ], !dbg !9111
  %land.ext = zext i1 %16 to i32, !dbg !9103
  %conv = trunc i32 %land.ext to i8, !dbg !9102
  store i8 %conv, i8* %va_list_simple_ptr, align 1, !dbg !9112
  %17 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9113
  %function_decl = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !9113
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9113
  %bf.load15 = load i32, i32* %function_code, align 8, !dbg !9113
  %bf.clear16 = and i32 %bf.load15, 2047, !dbg !9113
  switch i32 %bf.clear16, label %sw.default [
    i32 515, label %sw.bb
    i32 513, label %sw.bb68
    i32 514, label %sw.bb126
  ], !dbg !9114

sw.bb:                                            ; preds = %land.end
  %18 = load i8, i8* %va_list_simple_ptr, align 1, !dbg !9115
  %tobool = icmp ne i8 %18, 0, !dbg !9115
  br i1 %tobool, label %lor.lhs.false17, label %if.then23, !dbg !9118

lor.lhs.false17:                                  ; preds = %sw.bb
  %19 = load void (%union.tree_node*, %struct.rtx_def*)*, void (%union.tree_node*, %struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 72), align 8, !dbg !9119
  %cmp18 = icmp ne void (%union.tree_node*, %struct.rtx_def*)* %19, null, !dbg !9120
  br i1 %cmp18, label %if.then23, label %lor.lhs.false20, !dbg !9121

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 492), align 16, !dbg !9122
  %cmp21 = icmp eq %union.tree_node* %20, null, !dbg !9123
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !9124

if.then23:                                        ; preds = %lor.lhs.false20, %lor.lhs.false17, %sw.bb
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9125
  br label %return, !dbg !9125

if.end24:                                         ; preds = %lor.lhs.false20
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9126
  %call25 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %21), !dbg !9128
  %cmp26 = icmp ne i32 %call25, 2, !dbg !9129
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !9130

if.then28:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9131
  br label %return, !dbg !9131

if.end29:                                         ; preds = %if.end24
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9132
  %call30 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %22, i32 0), !dbg !9133
  store %union.tree_node* %call30, %union.tree_node** %lhs, align 8, !dbg !9134
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9135
  %common31 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !9135
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !9135
  %24 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !9135
  %base33 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9135
  %25 = bitcast %struct.tree_base* %base33 to i64*, !dbg !9135
  %bf.load34 = load i64, i64* %25, align 8, !dbg !9135
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !9135
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !9135
  %cmp37 = icmp eq i32 %bf.cast36, 10, !dbg !9135
  br i1 %cmp37, label %lor.lhs.false48, label %lor.lhs.false39, !dbg !9135

lor.lhs.false39:                                  ; preds = %if.end29
  %26 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9135
  %common40 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !9135
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !9135
  %27 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !9135
  %base42 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9135
  %28 = bitcast %struct.tree_base* %base42 to i64*, !dbg !9135
  %bf.load43 = load i64, i64* %28, align 8, !dbg !9135
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !9135
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !9135
  %cmp46 = icmp eq i32 %bf.cast45, 12, !dbg !9135
  br i1 %cmp46, label %lor.lhs.false48, label %if.then58, !dbg !9137

lor.lhs.false48:                                  ; preds = %lor.lhs.false39, %if.end29
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9138
  %common49 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !9138
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !9138
  %30 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !9138
  %common51 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !9138
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !9138
  %31 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !9138
  %type53 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !9138
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type53, i32 0, i32 16, !dbg !9138
  %32 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !9138
  %33 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9139
  %type54 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !9139
  %main_variant55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 16, !dbg !9139
  %34 = load %union.tree_node*, %union.tree_node** %main_variant55, align 8, !dbg !9139
  %cmp56 = icmp ne %union.tree_node* %32, %34, !dbg !9140
  br i1 %cmp56, label %if.then58, label %if.end59, !dbg !9141

if.then58:                                        ; preds = %lor.lhs.false48, %lor.lhs.false39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9142
  br label %return, !dbg !9142

if.end59:                                         ; preds = %lor.lhs.false48
  %35 = load i32, i32* %loc, align 4, !dbg !9143
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9144
  %call60 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %35, %union.tree_node* %36), !dbg !9145
  store %union.tree_node* %call60, %union.tree_node** %lhs, align 8, !dbg !9146
  %37 = load i32, i32* %loc, align 4, !dbg !9147
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 492), align 16, !dbg !9148
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9149
  %call61 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 %37, %union.tree_node* %38, i32 1, %union.tree_node* %39), !dbg !9150
  store %union.tree_node* %call61, %union.tree_node** %rhs, align 8, !dbg !9151
  %40 = load i32, i32* %loc, align 4, !dbg !9152
  %41 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9153
  %common62 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !9153
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !9153
  %42 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !9153
  %43 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9154
  %call64 = call %union.tree_node* @fold_convert_loc(i32 %40, %union.tree_node* %42, %union.tree_node* %43), !dbg !9155
  store %union.tree_node* %call64, %union.tree_node** %rhs, align 8, !dbg !9156
  %44 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9157
  %common65 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !9157
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !9157
  %45 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !9157
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9157
  %47 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9157
  %call67 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %47), !dbg !9157
  store %union.tree_node* %call67, %union.tree_node** %retval, align 8, !dbg !9158
  br label %return, !dbg !9158

sw.bb68:                                          ; preds = %land.end
  %48 = load i8, i8* %va_list_simple_ptr, align 1, !dbg !9159
  %tobool69 = icmp ne i8 %48, 0, !dbg !9159
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !9161

if.then70:                                        ; preds = %sw.bb68
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9162
  br label %return, !dbg !9162

if.end71:                                         ; preds = %sw.bb68
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9163
  %call72 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %49), !dbg !9165
  %cmp73 = icmp ne i32 %call72, 2, !dbg !9166
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !9167

if.then75:                                        ; preds = %if.end71
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9168
  br label %return, !dbg !9168

if.end76:                                         ; preds = %if.end71
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9169
  %call77 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %50, i32 0), !dbg !9170
  store %union.tree_node* %call77, %union.tree_node** %lhs, align 8, !dbg !9171
  %51 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9172
  %common78 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !9172
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !9172
  %52 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !9172
  %base80 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !9172
  %53 = bitcast %struct.tree_base* %base80 to i64*, !dbg !9172
  %bf.load81 = load i64, i64* %53, align 8, !dbg !9172
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !9172
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !9172
  %cmp84 = icmp eq i32 %bf.cast83, 10, !dbg !9172
  br i1 %cmp84, label %lor.lhs.false95, label %lor.lhs.false86, !dbg !9172

lor.lhs.false86:                                  ; preds = %if.end76
  %54 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9172
  %common87 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !9172
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2, !dbg !9172
  %55 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !9172
  %base89 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !9172
  %56 = bitcast %struct.tree_base* %base89 to i64*, !dbg !9172
  %bf.load90 = load i64, i64* %56, align 8, !dbg !9172
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !9172
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !9172
  %cmp93 = icmp eq i32 %bf.cast92, 12, !dbg !9172
  br i1 %cmp93, label %lor.lhs.false95, label %if.then106, !dbg !9174

lor.lhs.false95:                                  ; preds = %lor.lhs.false86, %if.end76
  %57 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9175
  %common96 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !9175
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 2, !dbg !9175
  %58 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !9175
  %common98 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !9175
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 2, !dbg !9175
  %59 = load %union.tree_node*, %union.tree_node** %type99, align 8, !dbg !9175
  %type100 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !9175
  %main_variant101 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type100, i32 0, i32 16, !dbg !9175
  %60 = load %union.tree_node*, %union.tree_node** %main_variant101, align 8, !dbg !9175
  %61 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9176
  %type102 = bitcast %union.tree_node* %61 to %struct.tree_type*, !dbg !9176
  %main_variant103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 16, !dbg !9176
  %62 = load %union.tree_node*, %union.tree_node** %main_variant103, align 8, !dbg !9176
  %cmp104 = icmp ne %union.tree_node* %60, %62, !dbg !9177
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !9178

if.then106:                                       ; preds = %lor.lhs.false95, %lor.lhs.false86
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9179
  br label %return, !dbg !9179

if.end107:                                        ; preds = %lor.lhs.false95
  %63 = load i32, i32* %loc, align 4, !dbg !9180
  %64 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9181
  %call108 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 %63, %union.tree_node* %64), !dbg !9182
  store %union.tree_node* %call108, %union.tree_node** %lhs, align 8, !dbg !9183
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !9184
  %call109 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %65, i32 1), !dbg !9185
  store %union.tree_node* %call109, %union.tree_node** %rhs, align 8, !dbg !9186
  %66 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9187
  %common110 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !9187
  %type111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2, !dbg !9187
  %67 = load %union.tree_node*, %union.tree_node** %type111, align 8, !dbg !9187
  %type112 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !9187
  %main_variant113 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type112, i32 0, i32 16, !dbg !9187
  %68 = load %union.tree_node*, %union.tree_node** %main_variant113, align 8, !dbg !9187
  %69 = load %union.tree_node*, %union.tree_node** %cfun_va_list, align 8, !dbg !9189
  %type114 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !9189
  %main_variant115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 16, !dbg !9189
  %70 = load %union.tree_node*, %union.tree_node** %main_variant115, align 8, !dbg !9189
  %cmp116 = icmp ne %union.tree_node* %68, %70, !dbg !9190
  br i1 %cmp116, label %if.then118, label %if.end119, !dbg !9191

if.then118:                                       ; preds = %if.end107
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9192
  br label %return, !dbg !9192

if.end119:                                        ; preds = %if.end107
  %71 = load i32, i32* %loc, align 4, !dbg !9193
  %72 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9194
  %common120 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !9194
  %type121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2, !dbg !9194
  %73 = load %union.tree_node*, %union.tree_node** %type121, align 8, !dbg !9194
  %74 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9195
  %call122 = call %union.tree_node* @fold_convert_loc(i32 %71, %union.tree_node* %73, %union.tree_node* %74), !dbg !9196
  store %union.tree_node* %call122, %union.tree_node** %rhs, align 8, !dbg !9197
  %75 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9198
  %common123 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !9198
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 2, !dbg !9198
  %76 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !9198
  %77 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9198
  %78 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9198
  %call125 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %76, %union.tree_node* %77, %union.tree_node* %78), !dbg !9198
  store %union.tree_node* %call125, %union.tree_node** %retval, align 8, !dbg !9199
  br label %return, !dbg !9199

sw.bb126:                                         ; preds = %land.end
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !9200
  store %union.tree_node* %79, %union.tree_node** %retval, align 8, !dbg !9201
  br label %return, !dbg !9201

sw.default:                                       ; preds = %land.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 3339, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9202
  br label %sw.epilog, !dbg !9203

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9204
  br label %return, !dbg !9204

return:                                           ; preds = %sw.epilog, %sw.bb126, %if.end119, %if.then118, %if.then106, %if.then75, %if.then70, %if.end59, %if.then58, %if.then28, %if.then23, %if.then
  %80 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9205
  ret %union.tree_node* %80, !dbg !9205
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !9206 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9207, metadata !DIExpression()), !dbg !9208
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9209
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9211
  %tobool = icmp ne i8 %call, 0, !dbg !9211
  br i1 %tobool, label %if.then, label %if.end, !dbg !9212

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9213
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !9215
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9216
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !9217
  br label %if.end, !dbg !9218

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !9219
}

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !9220 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !9223, metadata !DIExpression()), !dbg !9224
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 2, !dbg !9225
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9225
  ret %struct.basic_block_def* %0, !dbg !9226
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !9227 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9230, metadata !DIExpression()), !dbg !9231
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9231
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9231
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9231

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9231
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !9231
  %2 = load i32, i32* %num, align 8, !dbg !9231
  br label %cond.end, !dbg !9231

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9231

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9231
  ret i32 %cond, !dbg !9231
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !9232 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9235, metadata !DIExpression()), !dbg !9236
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9237
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !9237
  %tobool = icmp ne i8 %call, 0, !dbg !9237
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9237

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.29, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9237
  br label %cond.end, !dbg !9237

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9237

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9237
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9238
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !9238
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9238
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9238
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9238

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9238
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !9238
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9238
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9238
  br label %cond.end5, !dbg !9238

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9238

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9238
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9238
  ret %struct.edge_def* %call7, !dbg !9239
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_single_use(%union.tree_node* %var) #0 !dbg !9240 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !9243, metadata !DIExpression()), !dbg !9247
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9248
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !9248
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !9248
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9247
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9249
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9251
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !9252
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9252
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !9253
  br i1 %cmp, label %if.then, label %if.end, !dbg !9254

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9255
  br label %return, !dbg !9255

if.end:                                           ; preds = %entry
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9256
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9258
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !9259
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !9259
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !9260
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !9260
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %4, %7, !dbg !9261
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !9262

if.then4:                                         ; preds = %if.end
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9263
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !9263
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !9263
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 2, !dbg !9263
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9263
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9263
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %10), !dbg !9264
  %tobool = icmp ne i8 %call, 0, !dbg !9265
  %lnot = xor i1 %tobool, true, !dbg !9265
  %lnot.ext = zext i1 %lnot to i32, !dbg !9265
  %conv = trunc i32 %lnot.ext to i8, !dbg !9265
  store i8 %conv, i8* %retval, align 1, !dbg !9266
  br label %return, !dbg !9266

if.end6:                                          ; preds = %if.end
  %11 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !9267
  %tobool7 = icmp ne i32 %11, 0, !dbg !9267
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !9269

if.then8:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !9270
  br label %return, !dbg !9270

if.end9:                                          ; preds = %if.end6
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !9271
  %call10 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null), !dbg !9272
  store i8 %call10, i8* %retval, align 1, !dbg !9273
  br label %return, !dbg !9273

return:                                           ; preds = %if.end9, %if.then8, %if.then4, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !9274
  ret i8 %13, !dbg !9274
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !9275 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9278, metadata !DIExpression()), !dbg !9279
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9280
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9280
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9280
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !9280
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9280

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9280
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !9280
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !9280
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !9280
  br label %cond.end, !dbg !9280

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9280

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9280
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9280
  %cmp = icmp eq i32 %call, 1, !dbg !9281
  %conv = zext i1 %cmp to i32, !dbg !9281
  %conv2 = trunc i32 %conv to i8, !dbg !9280
  ret i8 %conv2, !dbg !9282
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !9283 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9284, metadata !DIExpression()), !dbg !9285
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9286
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9287
  %cmp = icmp eq i32 %call, 2, !dbg !9288
  %conv = zext i1 %cmp to i32, !dbg !9288
  %conv1 = trunc i32 %conv to i8, !dbg !9287
  ret i8 %conv1, !dbg !9289
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

declare dso_local %union.tree_node* @build_fold_indirect_ref_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_call_expr_loc(i32, %union.tree_node*, i32, ...) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3003, !3004, !3005}
!llvm.ident = !{!3006}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_ccp", scope: !2, file: !3, line: 1756, type: !2975, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1627, globals: !2972, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-ccp.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !511, !524, !530, !552, !559, !735, !742, !781, !807, !814, !828, !834, !840, !846, !888, !893, !1613}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510}
!379 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!390 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!391 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!392 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!393 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!394 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!395 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!511 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !512)
!512 = !{!513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523}
!513 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!514 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!515 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!516 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!517 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!518 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!519 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!520 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!521 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!522 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!523 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!524 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3, line: 215, baseType: !7, size: 32, elements: !525)
!525 = !{!526, !527, !528, !529}
!526 = !DIEnumerator(name: "UNINITIALIZED", value: 0, isUnsigned: true)
!527 = !DIEnumerator(name: "UNDEFINED", value: 1, isUnsigned: true)
!528 = !DIEnumerator(name: "CONSTANT", value: 2, isUnsigned: true)
!529 = !DIEnumerator(name: "VARYING", value: 3, isUnsigned: true)
!530 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !531, line: 36, baseType: !7, size: 32, elements: !532)
!531 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!532 = !{!533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551}
!533 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!534 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!535 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!536 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!537 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!538 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!539 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!540 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!541 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!542 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!543 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!544 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!545 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!546 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!547 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!548 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!549 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!550 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!551 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!552 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !553, line: 104, baseType: !7, size: 32, elements: !554)
!553 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!554 = !{!555, !556, !557, !558}
!555 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!556 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!557 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!558 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!559 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !560, line: 74, baseType: !7, size: 32, elements: !561)
!560 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!561 = !{!562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734}
!562 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!713 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!714 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!715 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!716 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!717 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!718 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!719 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!720 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!721 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!722 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!723 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!724 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!725 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!726 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!727 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!728 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!729 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!730 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!731 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!732 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!733 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!734 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!735 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !736)
!736 = !{!737, !738, !739, !740, !741}
!737 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!738 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!739 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!740 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!741 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!742 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !743, line: 51, baseType: !7, size: 32, elements: !744)
!743 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!744 = !{!745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780}
!745 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!746 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!747 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!748 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!749 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!750 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!751 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!752 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!753 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!754 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!755 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!756 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!757 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!758 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!759 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!760 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!761 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!762 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!763 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!764 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!765 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!766 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!767 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!768 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!769 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!770 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!771 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!772 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!773 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!774 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!775 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!776 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!777 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!778 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!779 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!780 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!781 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !743, line: 727, baseType: !7, size: 32, elements: !782)
!782 = !{!783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806}
!783 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!784 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!785 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!786 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!787 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!788 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!789 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!790 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!791 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!792 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!793 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!794 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!795 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!796 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!797 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!798 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!799 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!800 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!801 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!802 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!803 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!804 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!805 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!806 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!807 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !808, line: 119, baseType: !7, size: 32, elements: !809)
!808 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!809 = !{!810, !811, !812, !813}
!810 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!811 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!812 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!813 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!814 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !330, line: 295, baseType: !7, size: 32, elements: !815)
!815 = !{!816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827}
!816 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!817 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!818 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!819 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!820 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!821 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!822 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!823 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!824 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!825 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!826 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!827 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!828 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !829)
!829 = !{!830, !831, !832, !833}
!830 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!834 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_prop_result", file: !835, line: 44, baseType: !7, size: 32, elements: !836)
!835 = !DIFile(filename: "./tree-ssa-propagate.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!836 = !{!837, !838, !839}
!837 = !DIEnumerator(name: "SSA_PROP_NOT_INTERESTING", value: 0, isUnsigned: true)
!838 = !DIEnumerator(name: "SSA_PROP_INTERESTING", value: 1, isUnsigned: true)
!839 = !DIEnumerator(name: "SSA_PROP_VARYING", value: 2, isUnsigned: true)
!840 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !743, line: 80, baseType: !7, size: 32, elements: !841)
!841 = !{!842, !843, !844, !845}
!842 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!843 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!844 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!845 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!846 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !847, line: 27, baseType: !7, size: 32, elements: !848)
!847 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!848 = !{!849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887}
!849 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!850 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!851 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!852 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!853 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!854 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!855 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!856 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!857 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!858 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!859 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!860 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!861 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!862 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!863 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!864 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!865 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!866 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!867 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!868 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!869 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!870 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!871 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!872 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!873 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!874 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!875 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!876 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!877 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!878 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!879 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!880 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!881 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!882 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!883 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!884 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!885 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!886 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!887 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!888 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !743, line: 4603, baseType: !7, size: 32, elements: !889)
!889 = !{!890, !891, !892}
!890 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!891 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!892 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!893 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !894)
!894 = !{!895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612}
!895 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1486 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1487 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1488 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1489 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1490 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1491 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1492 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1493 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1494 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1495 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1496 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1497 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1498 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1499 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1500 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1501 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1502 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1503 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1504 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1505 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1506 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1507 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1508 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1509 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1510 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1511 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1512 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1513 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1514 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1515 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1516 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1517 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1518 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1519 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1520 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1521 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1522 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1523 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1524 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1525 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1526 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1527 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1528 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1529 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1530 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1531 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1532 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1533 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1534 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1535 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1536 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1537 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1538 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1539 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1540 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1541 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1542 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1543 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1544 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1545 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1546 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1547 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1548 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1549 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1550 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1551 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1552 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1553 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1554 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1555 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1556 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1557 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1558 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1559 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1560 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1561 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1562 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1563 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1564 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1565 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1566 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1567 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1568 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1569 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1570 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1571 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1572 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1573 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1574 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1575 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1576 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1577 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1578 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1579 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1580 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1581 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1582 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1583 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1584 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1585 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1586 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1587 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1588 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1589 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1590 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1591 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1592 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1593 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1594 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1595 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1596 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1597 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1598 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1599 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1600 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1601 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1602 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1603 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1604 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1605 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1606 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1607 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1608 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1609 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1610 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1611 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1612 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1613 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !1614)
!1614 = !{!1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626}
!1615 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1616 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1617 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1618 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1619 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1620 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1621 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1622 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1623 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1624 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1625 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1626 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1627 = !{!134, !1628, !2961, !1758, !1669, !1912, !1725, !530, !2963, !1832, !1960, !2964, !1993, !1897, !5, !2966, !7, !1682, !840, !2508}
!1628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1629, size: 64)
!1629 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1630)
!1630 = !{!1631, !1664, !1672, !1685, !1704, !1715, !1720, !1731, !1737, !1751, !1763, !1801, !2296, !2324, !2341, !2342, !2347, !2356, !2362, !2367, !2371, !2375, !2612, !2659, !2665, !2671, !2678, !2691, !2705, !2722, !2734, !2756, !2771, !2943}
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1629, file: !135, line: 3372, baseType: !1632, size: 64)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1633)
!1633 = !{!1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663}
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1632, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1632, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1632, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1632, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1632, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1632, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1632, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1632, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1632, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1632, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1632, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1632, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1632, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1632, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1632, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1632, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1632, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1632, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1632, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1632, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1632, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1632, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1632, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1632, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1632, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1632, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1632, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1632, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1632, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1632, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1629, file: !135, line: 3373, baseType: !1665, size: 192)
!1665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1666)
!1666 = !{!1667, !1668, !1671}
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1665, file: !135, line: 403, baseType: !1632, size: 64)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1665, file: !135, line: 404, baseType: !1669, size: 64, offset: 64)
!1669 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1670, line: 56, baseType: !1628)
!1670 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1665, file: !135, line: 405, baseType: !1669, size: 64, offset: 128)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1629, file: !135, line: 3374, baseType: !1673, size: 320)
!1673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1674)
!1674 = !{!1675, !1676}
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1673, file: !135, line: 1385, baseType: !1665, size: 192)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1673, file: !135, line: 1386, baseType: !1677, size: 128, offset: 192)
!1677 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1678, line: 58, baseType: !1679)
!1678 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1678, line: 54, size: 128, elements: !1680)
!1680 = !{!1681, !1683}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1679, file: !1678, line: 56, baseType: !1682, size: 64)
!1682 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1679, file: !1678, line: 57, baseType: !1684, size: 64, offset: 64)
!1684 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1629, file: !135, line: 3375, baseType: !1686, size: 256)
!1686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1687)
!1687 = !{!1688, !1689}
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1686, file: !135, line: 1398, baseType: !1665, size: 192)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1686, file: !135, line: 1399, baseType: !1690, size: 64, offset: 192)
!1690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1691, size: 64)
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1692, line: 52, size: 256, elements: !1693)
!1692 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1693 = !{!1694, !1695, !1696, !1697, !1698, !1699, !1700}
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1691, file: !1692, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1691, file: !1692, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1691, file: !1692, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1691, file: !1692, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1691, file: !1692, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1691, file: !1692, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1691, file: !1692, line: 62, baseType: !1701, size: 192, offset: 64)
!1701 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1682, size: 192, elements: !1702)
!1702 = !{!1703}
!1703 = !DISubrange(count: 3)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1629, file: !135, line: 3376, baseType: !1705, size: 256)
!1705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1706)
!1706 = !{!1707, !1708}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1705, file: !135, line: 1409, baseType: !1665, size: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1705, file: !135, line: 1410, baseType: !1709, size: 64, offset: 192)
!1709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1710, size: 64)
!1710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1711, line: 27, size: 192, elements: !1712)
!1711 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1712 = !{!1713, !1714}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1710, file: !1711, line: 29, baseType: !1677, size: 128)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1710, file: !1711, line: 30, baseType: !5, size: 32, offset: 128)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1629, file: !135, line: 3377, baseType: !1716, size: 256)
!1716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1717)
!1717 = !{!1718, !1719}
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1716, file: !135, line: 1438, baseType: !1665, size: 192)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1716, file: !135, line: 1439, baseType: !1669, size: 64, offset: 192)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1629, file: !135, line: 3378, baseType: !1721, size: 256)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1722)
!1722 = !{!1723, !1724, !1726}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1721, file: !135, line: 1419, baseType: !1665, size: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1721, file: !135, line: 1420, baseType: !1725, size: 32, offset: 192)
!1725 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1721, file: !135, line: 1421, baseType: !1727, size: 8, offset: 224)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1728, size: 8, elements: !1729)
!1728 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1729 = !{!1730}
!1730 = !DISubrange(count: 1)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1629, file: !135, line: 3379, baseType: !1732, size: 320)
!1732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1733)
!1733 = !{!1734, !1735, !1736}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1732, file: !135, line: 1429, baseType: !1665, size: 192)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1732, file: !135, line: 1430, baseType: !1669, size: 64, offset: 192)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1732, file: !135, line: 1431, baseType: !1669, size: 64, offset: 256)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1629, file: !135, line: 3380, baseType: !1738, size: 320)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1739)
!1739 = !{!1740, !1741}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1738, file: !135, line: 1461, baseType: !1665, size: 192)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1738, file: !135, line: 1462, baseType: !1742, size: 128, offset: 192)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1743, line: 31, size: 128, elements: !1744)
!1743 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1744 = !{!1745, !1749, !1750}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1742, file: !1743, line: 32, baseType: !1746, size: 64)
!1746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1747, size: 64)
!1747 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1748)
!1748 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1742, file: !1743, line: 33, baseType: !7, size: 32, offset: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1742, file: !1743, line: 34, baseType: !7, size: 32, offset: 96)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1629, file: !135, line: 3381, baseType: !1752, size: 384)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1753)
!1753 = !{!1754, !1755, !1760, !1761, !1762}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1752, file: !135, line: 2508, baseType: !1665, size: 192)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1752, file: !135, line: 2509, baseType: !1756, size: 32, offset: 192)
!1756 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1757, line: 58, baseType: !1758)
!1757 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1758 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1759, line: 44, baseType: !7)
!1759 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1752, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1752, file: !135, line: 2511, baseType: !1669, size: 64, offset: 256)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1752, file: !135, line: 2512, baseType: !1669, size: 64, offset: 320)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1629, file: !135, line: 3382, baseType: !1764, size: 896)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1765)
!1765 = !{!1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1764, file: !135, line: 2653, baseType: !1752, size: 384)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1764, file: !135, line: 2654, baseType: !1669, size: 64, offset: 384)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1764, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1764, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1764, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1764, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1764, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1764, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1764, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1764, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1764, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1764, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1764, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1764, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1764, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1764, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1764, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1764, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1764, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1764, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1764, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1764, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1764, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1764, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1764, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1764, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1764, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1764, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1764, file: !135, line: 2705, baseType: !1669, size: 64, offset: 576)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1764, file: !135, line: 2706, baseType: !1669, size: 64, offset: 640)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1764, file: !135, line: 2707, baseType: !1669, size: 64, offset: 704)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1764, file: !135, line: 2708, baseType: !1669, size: 64, offset: 768)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1764, file: !135, line: 2711, baseType: !1799, size: 64, offset: 832)
!1799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1800, size: 64)
!1800 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1629, file: !135, line: 3383, baseType: !1802, size: 960)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1803)
!1803 = !{!1804, !1805}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1802, file: !135, line: 2757, baseType: !1764, size: 896)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1802, file: !135, line: 2758, baseType: !1806, size: 64, offset: 896)
!1806 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1670, line: 50, baseType: !1807)
!1807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!1808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1809, line: 240, size: 384, elements: !1810)
!1809 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1810 = !{!1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1808, file: !1809, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1808, file: !1809, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1808, file: !1809, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1808, file: !1809, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1808, file: !1809, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1808, file: !1809, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1808, file: !1809, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1808, file: !1809, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1808, file: !1809, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1808, file: !1809, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1808, file: !1809, line: 321, baseType: !1822, size: 320, offset: 64)
!1822 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1809, line: 315, size: 320, elements: !1823)
!1823 = !{!1824, !2229, !2231, !2294, !2295}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1822, file: !1809, line: 316, baseType: !1825, size: 64)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 64, elements: !1729)
!1826 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1809, line: 183, baseType: !1827)
!1827 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1809, line: 166, size: 64, elements: !1828)
!1828 = !{!1829, !1830, !1831, !1834, !1835, !1843, !1844, !1856, !1859, !1921, !1922, !2206, !2219, !2226}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1827, file: !1809, line: 168, baseType: !1725, size: 32)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1827, file: !1809, line: 169, baseType: !7, size: 32)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1827, file: !1809, line: 170, baseType: !1832, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1833, size: 64)
!1833 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1728)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1827, file: !1809, line: 171, baseType: !1806, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1827, file: !1809, line: 172, baseType: !1836, size: 64)
!1836 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1670, line: 53, baseType: !1837)
!1837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1838, size: 64)
!1838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1809, line: 359, size: 128, elements: !1839)
!1839 = !{!1840, !1841}
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1838, file: !1809, line: 360, baseType: !1725, size: 32)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1838, file: !1809, line: 361, baseType: !1842, size: 64, offset: 64)
!1842 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1806, size: 64, elements: !1729)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1827, file: !1809, line: 173, baseType: !5, size: 32)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1827, file: !1809, line: 174, baseType: !1845, size: 32)
!1845 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1809, line: 133, baseType: !1846)
!1846 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1809, line: 115, size: 32, elements: !1847)
!1847 = !{!1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1846, file: !1809, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1846, file: !1809, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1846, file: !1809, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1846, file: !1809, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1846, file: !1809, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1846, file: !1809, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1846, file: !1809, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1846, file: !1809, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1827, file: !1809, line: 175, baseType: !1857, size: 64)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64)
!1858 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1809, line: 175, flags: DIFlagFwdDecl)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1827, file: !1809, line: 176, baseType: !1860, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1861, size: 64)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1862, line: 75, size: 256, elements: !1863)
!1862 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1863 = !{!1864, !1878, !1879, !1880}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1861, file: !1862, line: 76, baseType: !1865, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!1866 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1862, line: 68, baseType: !1867)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1862, line: 63, size: 320, elements: !1868)
!1868 = !{!1869, !1871, !1872, !1873}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1867, file: !1862, line: 64, baseType: !1870, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1867, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1867, file: !1862, line: 65, baseType: !1870, size: 64, offset: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1867, file: !1862, line: 66, baseType: !7, size: 32, offset: 128)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1867, file: !1862, line: 67, baseType: !1874, size: 128, offset: 192)
!1874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1875, size: 128, elements: !1876)
!1875 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1862, line: 29, baseType: !1682)
!1876 = !{!1877}
!1877 = !DISubrange(count: 2)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1861, file: !1862, line: 77, baseType: !1865, size: 64, offset: 64)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1861, file: !1862, line: 78, baseType: !7, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1861, file: !1862, line: 79, baseType: !1881, size: 64, offset: 192)
!1881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1882, size: 64)
!1882 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1862, line: 49, baseType: !1883)
!1883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1862, line: 45, size: 832, elements: !1884)
!1884 = !{!1885, !1886, !1887}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1883, file: !1862, line: 46, baseType: !1870, size: 64)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1883, file: !1862, line: 47, baseType: !1860, size: 64, offset: 64)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1883, file: !1862, line: 48, baseType: !1888, size: 704, offset: 128)
!1888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1889, line: 164, size: 704, elements: !1890)
!1889 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1890 = !{!1891, !1892, !1903, !1904, !1905, !1906, !1907, !1908, !1913, !1917, !1918, !1919, !1920}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1888, file: !1889, line: 166, baseType: !1684, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1888, file: !1889, line: 167, baseType: !1893, size: 64, offset: 64)
!1893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1889, line: 157, size: 192, elements: !1895)
!1895 = !{!1896, !1898, !1899}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1894, file: !1889, line: 159, baseType: !1897, size: 64)
!1897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1728, size: 64)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1894, file: !1889, line: 160, baseType: !1893, size: 64, offset: 64)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1894, file: !1889, line: 161, baseType: !1900, size: 32, offset: 128)
!1900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1728, size: 32, elements: !1901)
!1901 = !{!1902}
!1902 = !DISubrange(count: 4)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1888, file: !1889, line: 168, baseType: !1897, size: 64, offset: 128)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1888, file: !1889, line: 169, baseType: !1897, size: 64, offset: 192)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1888, file: !1889, line: 170, baseType: !1897, size: 64, offset: 256)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1888, file: !1889, line: 171, baseType: !1684, size: 64, offset: 320)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1888, file: !1889, line: 172, baseType: !1725, size: 32, offset: 384)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1888, file: !1889, line: 176, baseType: !1909, size: 64, offset: 448)
!1909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1910, size: 64)
!1910 = !DISubroutineType(types: !1911)
!1911 = !{!1893, !1912, !1684}
!1912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1888, file: !1889, line: 177, baseType: !1914, size: 64, offset: 512)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1915, size: 64)
!1915 = !DISubroutineType(types: !1916)
!1916 = !{null, !1912, !1893}
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1888, file: !1889, line: 178, baseType: !1912, size: 64, offset: 576)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1888, file: !1889, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1888, file: !1889, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1888, file: !1889, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1827, file: !1809, line: 177, baseType: !1669, size: 64)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1827, file: !1809, line: 178, baseType: !1923, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!1924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1925)
!1925 = !{!1926, !2171, !2172, !2173, !2176, !2180, !2181, !2182, !2200, !2201, !2202, !2203, !2204, !2205}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1924, file: !330, line: 219, baseType: !1927, size: 64)
!1927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1928, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1929)
!1929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1930)
!1930 = !{!1931}
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1929, file: !330, line: 151, baseType: !1932, size: 128)
!1932 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1933)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1934)
!1934 = !{!1935, !1936, !1937}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1933, file: !330, line: 150, baseType: !7, size: 32)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1933, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1933, file: !330, line: 150, baseType: !1938, size: 64, offset: 64)
!1938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1939, size: 64, elements: !1729)
!1939 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1670, line: 108, baseType: !1940)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1941, size: 64)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !1942)
!1942 = !{!1943, !1944, !1945, !2163, !2164, !2165, !2166, !2167, !2168, !2169}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1941, file: !330, line: 124, baseType: !1923, size: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1941, file: !330, line: 125, baseType: !1923, size: 64, offset: 64)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1941, file: !330, line: 131, baseType: !1946, size: 64, offset: 128)
!1946 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !1947)
!1947 = !{!1948, !2162}
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1946, file: !330, line: 129, baseType: !1949, size: 64)
!1949 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1670, line: 66, baseType: !1950)
!1950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1951, size: 64)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !743, line: 143, size: 192, elements: !1952)
!1952 = !{!1953, !2160, !2161}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1951, file: !743, line: 145, baseType: !1954, size: 64)
!1954 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1670, line: 69, baseType: !1955)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !743, line: 136, size: 192, elements: !1957)
!1957 = !{!1958, !2158, !2159}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1956, file: !743, line: 137, baseType: !1959, size: 64)
!1959 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1670, line: 58, baseType: !1960)
!1960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1961, size: 64)
!1961 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !743, line: 737, size: 768, elements: !1962)
!1962 = !{!1963, !1980, !2013, !2019, !2024, !2029, !2036, !2042, !2048, !2053, !2067, !2072, !2078, !2083, !2093, !2098, !2116, !2123, !2130, !2136, !2141, !2147, !2153}
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1961, file: !743, line: 738, baseType: !1964, size: 256)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !743, line: 271, size: 256, elements: !1965)
!1965 = !{!1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1964, file: !743, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1964, file: !743, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1964, file: !743, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1964, file: !743, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1964, file: !743, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1964, file: !743, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1964, file: !743, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1964, file: !743, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1964, file: !743, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1964, file: !743, line: 312, baseType: !7, size: 32, offset: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1964, file: !743, line: 316, baseType: !1756, size: 32, offset: 64)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1964, file: !743, line: 319, baseType: !7, size: 32, offset: 96)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1964, file: !743, line: 323, baseType: !1923, size: 64, offset: 128)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1964, file: !743, line: 327, baseType: !1669, size: 64, offset: 192)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1961, file: !743, line: 739, baseType: !1981, size: 448)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !743, line: 350, size: 448, elements: !1982)
!1982 = !{!1983, !2011}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1981, file: !743, line: 353, baseType: !1984, size: 384)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !743, line: 333, size: 384, elements: !1985)
!1985 = !{!1986, !1987, !1994}
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1984, file: !743, line: 336, baseType: !1964, size: 256)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1984, file: !743, line: 343, baseType: !1988, size: 64, offset: 256)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1989, size: 64)
!1989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !808, line: 37, size: 128, elements: !1990)
!1990 = !{!1991, !1992}
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1989, file: !808, line: 39, baseType: !1988, size: 64)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1989, file: !808, line: 40, baseType: !1993, size: 64, offset: 64)
!1993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1669, size: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1984, file: !743, line: 344, baseType: !1995, size: 64, offset: 320)
!1995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1996, size: 64)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !808, line: 45, size: 320, elements: !1997)
!1997 = !{!1998, !1999}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1996, file: !808, line: 47, baseType: !1995, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1996, file: !808, line: 48, baseType: !2000, size: 256, offset: 64)
!2000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2001)
!2001 = !{!2002, !2004, !2005, !2010}
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2000, file: !135, line: 1884, baseType: !2003, size: 64)
!2003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2000, size: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2000, file: !135, line: 1885, baseType: !2003, size: 64, offset: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2000, file: !135, line: 1891, baseType: !2006, size: 64, offset: 128)
!2006 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2000, file: !135, line: 1891, size: 64, elements: !2007)
!2007 = !{!2008, !2009}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2006, file: !135, line: 1891, baseType: !1959, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2006, file: !135, line: 1891, baseType: !1669, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2000, file: !135, line: 1892, baseType: !1993, size: 64, offset: 192)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1981, file: !743, line: 359, baseType: !2012, size: 64, offset: 384)
!2012 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1669, size: 64, elements: !1729)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1961, file: !743, line: 740, baseType: !2014, size: 512)
!2014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !743, line: 365, size: 512, elements: !2015)
!2015 = !{!2016, !2017, !2018}
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2014, file: !743, line: 368, baseType: !1984, size: 384)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2014, file: !743, line: 373, baseType: !1669, size: 64, offset: 384)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2014, file: !743, line: 374, baseType: !1669, size: 64, offset: 448)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1961, file: !743, line: 741, baseType: !2020, size: 576)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !743, line: 380, size: 576, elements: !2021)
!2021 = !{!2022, !2023}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2020, file: !743, line: 383, baseType: !2014, size: 512)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2020, file: !743, line: 389, baseType: !2012, size: 64, offset: 512)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1961, file: !743, line: 742, baseType: !2025, size: 320)
!2025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !743, line: 395, size: 320, elements: !2026)
!2026 = !{!2027, !2028}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2025, file: !743, line: 397, baseType: !1964, size: 256)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2025, file: !743, line: 400, baseType: !1949, size: 64, offset: 256)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1961, file: !743, line: 743, baseType: !2030, size: 448)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !743, line: 406, size: 448, elements: !2031)
!2031 = !{!2032, !2033, !2034, !2035}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2030, file: !743, line: 408, baseType: !1964, size: 256)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2030, file: !743, line: 412, baseType: !1669, size: 64, offset: 256)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2030, file: !743, line: 420, baseType: !1669, size: 64, offset: 320)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2030, file: !743, line: 423, baseType: !1949, size: 64, offset: 384)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1961, file: !743, line: 744, baseType: !2037, size: 384)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !743, line: 429, size: 384, elements: !2038)
!2038 = !{!2039, !2040, !2041}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2037, file: !743, line: 431, baseType: !1964, size: 256)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2037, file: !743, line: 434, baseType: !1669, size: 64, offset: 256)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2037, file: !743, line: 437, baseType: !1949, size: 64, offset: 320)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1961, file: !743, line: 745, baseType: !2043, size: 384)
!2043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !743, line: 443, size: 384, elements: !2044)
!2044 = !{!2045, !2046, !2047}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2043, file: !743, line: 445, baseType: !1964, size: 256)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2043, file: !743, line: 449, baseType: !1669, size: 64, offset: 256)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2043, file: !743, line: 453, baseType: !1949, size: 64, offset: 320)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1961, file: !743, line: 746, baseType: !2049, size: 320)
!2049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !743, line: 459, size: 320, elements: !2050)
!2050 = !{!2051, !2052}
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2049, file: !743, line: 461, baseType: !1964, size: 256)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2049, file: !743, line: 464, baseType: !1669, size: 64, offset: 256)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1961, file: !743, line: 747, baseType: !2054, size: 768)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !743, line: 469, size: 768, elements: !2055)
!2055 = !{!2056, !2057, !2058, !2059, !2060}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2054, file: !743, line: 471, baseType: !1964, size: 256)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2054, file: !743, line: 474, baseType: !7, size: 32, offset: 256)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2054, file: !743, line: 475, baseType: !7, size: 32, offset: 288)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2054, file: !743, line: 478, baseType: !1669, size: 64, offset: 320)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2054, file: !743, line: 481, baseType: !2061, size: 384, offset: 384)
!2061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2062, size: 384, elements: !1729)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2063)
!2063 = !{!2064, !2065, !2066}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2062, file: !135, line: 1920, baseType: !2000, size: 256)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2062, file: !135, line: 1921, baseType: !1669, size: 64, offset: 256)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2062, file: !135, line: 1922, baseType: !1756, size: 32, offset: 320)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1961, file: !743, line: 748, baseType: !2068, size: 320)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !743, line: 487, size: 320, elements: !2069)
!2069 = !{!2070, !2071}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2068, file: !743, line: 490, baseType: !1964, size: 256)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2068, file: !743, line: 494, baseType: !1725, size: 32, offset: 256)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1961, file: !743, line: 749, baseType: !2073, size: 384)
!2073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !743, line: 500, size: 384, elements: !2074)
!2074 = !{!2075, !2076, !2077}
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2073, file: !743, line: 502, baseType: !1964, size: 256)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2073, file: !743, line: 506, baseType: !1949, size: 64, offset: 256)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2073, file: !743, line: 510, baseType: !1949, size: 64, offset: 320)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1961, file: !743, line: 750, baseType: !2079, size: 320)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !743, line: 529, size: 320, elements: !2080)
!2080 = !{!2081, !2082}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2079, file: !743, line: 531, baseType: !1964, size: 256)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2079, file: !743, line: 540, baseType: !1949, size: 64, offset: 256)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1961, file: !743, line: 751, baseType: !2084, size: 704)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !743, line: 546, size: 704, elements: !2085)
!2085 = !{!2086, !2087, !2088, !2089, !2090, !2091, !2092}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2084, file: !743, line: 549, baseType: !2014, size: 512)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2084, file: !743, line: 553, baseType: !1832, size: 64, offset: 512)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2084, file: !743, line: 557, baseType: !1748, size: 8, offset: 576)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2084, file: !743, line: 558, baseType: !1748, size: 8, offset: 584)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2084, file: !743, line: 559, baseType: !1748, size: 8, offset: 592)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2084, file: !743, line: 560, baseType: !1748, size: 8, offset: 600)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2084, file: !743, line: 566, baseType: !2012, size: 64, offset: 640)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1961, file: !743, line: 752, baseType: !2094, size: 384)
!2094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !743, line: 571, size: 384, elements: !2095)
!2095 = !{!2096, !2097}
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2094, file: !743, line: 573, baseType: !2025, size: 320)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2094, file: !743, line: 577, baseType: !1669, size: 64, offset: 320)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1961, file: !743, line: 753, baseType: !2099, size: 576)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !743, line: 600, size: 576, elements: !2100)
!2100 = !{!2101, !2102, !2103, !2106, !2115}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2099, file: !743, line: 602, baseType: !2025, size: 320)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2099, file: !743, line: 605, baseType: !1669, size: 64, offset: 320)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2099, file: !743, line: 609, baseType: !2104, size: 64, offset: 384)
!2104 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2105, line: 46, baseType: !1682)
!2105 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2099, file: !743, line: 612, baseType: !2107, size: 64, offset: 448)
!2107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !743, line: 581, size: 320, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113, !2114}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2108, file: !743, line: 583, baseType: !134, size: 32)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2108, file: !743, line: 586, baseType: !1669, size: 64, offset: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2108, file: !743, line: 589, baseType: !1669, size: 64, offset: 128)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2108, file: !743, line: 592, baseType: !1669, size: 64, offset: 192)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2108, file: !743, line: 595, baseType: !1669, size: 64, offset: 256)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2099, file: !743, line: 616, baseType: !1949, size: 64, offset: 512)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1961, file: !743, line: 754, baseType: !2117, size: 512)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !743, line: 622, size: 512, elements: !2118)
!2118 = !{!2119, !2120, !2121, !2122}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2117, file: !743, line: 624, baseType: !2025, size: 320)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2117, file: !743, line: 628, baseType: !1669, size: 64, offset: 320)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2117, file: !743, line: 632, baseType: !1669, size: 64, offset: 384)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2117, file: !743, line: 636, baseType: !1669, size: 64, offset: 448)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1961, file: !743, line: 755, baseType: !2124, size: 704)
!2124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !743, line: 642, size: 704, elements: !2125)
!2125 = !{!2126, !2127, !2128, !2129}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2124, file: !743, line: 644, baseType: !2117, size: 512)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2124, file: !743, line: 648, baseType: !1669, size: 64, offset: 512)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2124, file: !743, line: 652, baseType: !1669, size: 64, offset: 576)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2124, file: !743, line: 653, baseType: !1669, size: 64, offset: 640)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1961, file: !743, line: 756, baseType: !2131, size: 448)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !743, line: 663, size: 448, elements: !2132)
!2132 = !{!2133, !2134, !2135}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2131, file: !743, line: 665, baseType: !2025, size: 320)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2131, file: !743, line: 668, baseType: !1669, size: 64, offset: 320)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2131, file: !743, line: 673, baseType: !1669, size: 64, offset: 384)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1961, file: !743, line: 757, baseType: !2137, size: 384)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !743, line: 694, size: 384, elements: !2138)
!2138 = !{!2139, !2140}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2137, file: !743, line: 696, baseType: !2025, size: 320)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2137, file: !743, line: 699, baseType: !1669, size: 64, offset: 320)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1961, file: !743, line: 758, baseType: !2142, size: 384)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !743, line: 681, size: 384, elements: !2143)
!2143 = !{!2144, !2145, !2146}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2142, file: !743, line: 683, baseType: !1964, size: 256)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2142, file: !743, line: 686, baseType: !1669, size: 64, offset: 256)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2142, file: !743, line: 689, baseType: !1669, size: 64, offset: 320)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1961, file: !743, line: 759, baseType: !2148, size: 384)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !743, line: 707, size: 384, elements: !2149)
!2149 = !{!2150, !2151, !2152}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2148, file: !743, line: 709, baseType: !1964, size: 256)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2148, file: !743, line: 712, baseType: !1669, size: 64, offset: 256)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2148, file: !743, line: 712, baseType: !1669, size: 64, offset: 320)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1961, file: !743, line: 760, baseType: !2154, size: 320)
!2154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !743, line: 718, size: 320, elements: !2155)
!2155 = !{!2156, !2157}
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2154, file: !743, line: 720, baseType: !1964, size: 256)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2154, file: !743, line: 723, baseType: !1669, size: 64, offset: 256)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1956, file: !743, line: 138, baseType: !1955, size: 64, offset: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1956, file: !743, line: 139, baseType: !1955, size: 64, offset: 128)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1951, file: !743, line: 146, baseType: !1954, size: 64, offset: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1951, file: !743, line: 152, baseType: !1949, size: 64, offset: 128)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1946, file: !330, line: 130, baseType: !1806, size: 64)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1941, file: !330, line: 134, baseType: !1912, size: 64, offset: 192)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1941, file: !330, line: 137, baseType: !1669, size: 64, offset: 256)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1941, file: !330, line: 138, baseType: !1756, size: 32, offset: 320)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1941, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1941, file: !330, line: 144, baseType: !1725, size: 32, offset: 384)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1941, file: !330, line: 145, baseType: !1725, size: 32, offset: 416)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1941, file: !330, line: 146, baseType: !2170, size: 64, offset: 448)
!2170 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1684)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1924, file: !330, line: 220, baseType: !1927, size: 64, offset: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1924, file: !330, line: 223, baseType: !1912, size: 64, offset: 128)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1924, file: !330, line: 226, baseType: !2174, size: 64, offset: 192)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1924, file: !330, line: 229, baseType: !2177, size: 128, offset: 256)
!2177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2178, size: 128, elements: !1876)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1924, file: !330, line: 232, baseType: !1923, size: 64, offset: 384)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1924, file: !330, line: 233, baseType: !1923, size: 64, offset: 448)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1924, file: !330, line: 238, baseType: !2183, size: 64, offset: 512)
!2183 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2184)
!2184 = !{!2185, !2191}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2183, file: !330, line: 236, baseType: !2186, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2188)
!2188 = !{!2189, !2190}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2187, file: !330, line: 275, baseType: !1949, size: 64)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2187, file: !330, line: 278, baseType: !1949, size: 64, offset: 64)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2183, file: !330, line: 237, baseType: !2192, size: 64)
!2192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2193, size: 64)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2194)
!2194 = !{!2195, !2196, !2197, !2198, !2199}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2193, file: !330, line: 261, baseType: !1806, size: 64)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2193, file: !330, line: 262, baseType: !1806, size: 64, offset: 64)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2193, file: !330, line: 266, baseType: !1806, size: 64, offset: 128)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2193, file: !330, line: 267, baseType: !1806, size: 64, offset: 192)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2193, file: !330, line: 270, baseType: !1725, size: 32, offset: 256)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1924, file: !330, line: 241, baseType: !2170, size: 64, offset: 576)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1924, file: !330, line: 244, baseType: !1725, size: 32, offset: 640)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1924, file: !330, line: 247, baseType: !1725, size: 32, offset: 672)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1924, file: !330, line: 250, baseType: !1725, size: 32, offset: 704)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1924, file: !330, line: 253, baseType: !1725, size: 32, offset: 736)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1924, file: !330, line: 256, baseType: !1725, size: 32, offset: 768)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1827, file: !1809, line: 179, baseType: !2207, size: 64)
!2207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2208, size: 64)
!2208 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1809, line: 150, baseType: !2209)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1809, line: 142, size: 320, elements: !2210)
!2210 = !{!2211, !2212, !2213, !2214, !2217, !2218}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2209, file: !1809, line: 144, baseType: !1669, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2209, file: !1809, line: 145, baseType: !1806, size: 64, offset: 64)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2209, file: !1809, line: 146, baseType: !1806, size: 64, offset: 128)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2209, file: !1809, line: 147, baseType: !2215, size: 32, offset: 192)
!2215 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2216, line: 31, baseType: !1725)
!2216 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2209, file: !1809, line: 148, baseType: !7, size: 32, offset: 224)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2209, file: !1809, line: 149, baseType: !1748, size: 8, offset: 256)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1827, file: !1809, line: 180, baseType: !2220, size: 64)
!2220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!2221 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1809, line: 162, baseType: !2222)
!2222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1809, line: 159, size: 128, elements: !2223)
!2223 = !{!2224, !2225}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2222, file: !1809, line: 160, baseType: !1669, size: 64)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2222, file: !1809, line: 161, baseType: !1684, size: 64, offset: 64)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1827, file: !1809, line: 181, baseType: !2227, size: 64)
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1809, line: 181, flags: DIFlagFwdDecl)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1822, file: !1809, line: 317, baseType: !2230, size: 64)
!2230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1684, size: 64, elements: !1729)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1822, file: !1809, line: 318, baseType: !2232, size: 320)
!2232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1809, line: 188, size: 320, elements: !2233)
!2233 = !{!2234, !2236, !2293}
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2232, file: !1809, line: 190, baseType: !2235, size: 192)
!2235 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 192, elements: !1702)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2232, file: !1809, line: 193, baseType: !2237, size: 64, offset: 192)
!2237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1809, line: 206, size: 320, elements: !2239)
!2239 = !{!2240, !2278, !2279, !2280, !2292}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2238, file: !1809, line: 208, baseType: !2241, size: 64)
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2242, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1670, line: 62, baseType: !2243)
!2243 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2244, line: 538, size: 256, elements: !2245)
!2244 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2245 = !{!2246, !2250, !2256, !2269}
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2243, file: !2244, line: 539, baseType: !2247, size: 32)
!2247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2244, line: 482, size: 32, elements: !2248)
!2248 = !{!2249}
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2247, file: !2244, line: 484, baseType: !7, size: 32)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2243, file: !2244, line: 540, baseType: !2251, size: 192)
!2251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2244, line: 488, size: 192, elements: !2252)
!2252 = !{!2253, !2254, !2255}
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2251, file: !2244, line: 489, baseType: !2247, size: 32)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2251, file: !2244, line: 492, baseType: !1832, size: 64, offset: 64)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2251, file: !2244, line: 496, baseType: !1669, size: 64, offset: 128)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2243, file: !2244, line: 541, baseType: !2257, size: 256)
!2257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2244, line: 504, size: 256, elements: !2258)
!2258 = !{!2259, !2260, !2267, !2268}
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2257, file: !2244, line: 505, baseType: !2247, size: 32)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2257, file: !2244, line: 509, baseType: !2261, size: 64, offset: 64)
!2261 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2244, line: 501, baseType: !2262)
!2262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2263, size: 64)
!2263 = !DISubroutineType(types: !2264)
!2264 = !{null, !2265}
!2265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2266, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2257, file: !2244, line: 510, baseType: !2265, size: 64, offset: 128)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2257, file: !2244, line: 513, baseType: !2241, size: 64, offset: 192)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2243, file: !2244, line: 542, baseType: !2270, size: 128)
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2244, line: 530, size: 128, elements: !2271)
!2271 = !{!2272, !2273}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2270, file: !2244, line: 531, baseType: !2247, size: 32)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2270, file: !2244, line: 534, baseType: !2274, size: 64, offset: 64)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2244, line: 525, baseType: !2275)
!2275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2276, size: 64)
!2276 = !DISubroutineType(types: !2277)
!2277 = !{!1748, !1669, !1832, !1682, !1682}
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2238, file: !1809, line: 211, baseType: !7, size: 32, offset: 64)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2238, file: !1809, line: 214, baseType: !1684, size: 64, offset: 128)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2238, file: !1809, line: 224, baseType: !2281, size: 64, offset: 192)
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!2282 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1809, line: 202, baseType: !2283)
!2283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1809, line: 202, size: 128, elements: !2284)
!2284 = !{!2285}
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2283, file: !1809, line: 202, baseType: !2286, size: 128)
!2286 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1809, line: 200, baseType: !2287)
!2287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1809, line: 200, size: 128, elements: !2288)
!2288 = !{!2289, !2290, !2291}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2287, file: !1809, line: 200, baseType: !7, size: 32)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2287, file: !1809, line: 200, baseType: !7, size: 32, offset: 32)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2287, file: !1809, line: 200, baseType: !1842, size: 64, offset: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2238, file: !1809, line: 234, baseType: !2281, size: 64, offset: 256)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2232, file: !1809, line: 197, baseType: !1684, size: 64, offset: 256)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1822, file: !1809, line: 319, baseType: !1691, size: 256)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1822, file: !1809, line: 320, baseType: !1710, size: 192)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1629, file: !135, line: 3384, baseType: !2297, size: 1472)
!2297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2298)
!2298 = !{!2299, !2320, !2321, !2322, !2323}
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2297, file: !135, line: 3115, baseType: !2300, size: 1216)
!2300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2301)
!2301 = !{!2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2300, file: !135, line: 2985, baseType: !1802, size: 960)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2300, file: !135, line: 2986, baseType: !1669, size: 64, offset: 960)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2300, file: !135, line: 2987, baseType: !1669, size: 64, offset: 1024)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2300, file: !135, line: 2988, baseType: !1669, size: 64, offset: 1088)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2300, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2300, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2300, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2300, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2300, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2300, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2300, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2300, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2300, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2300, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2300, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2300, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2300, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2300, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2297, file: !135, line: 3117, baseType: !1669, size: 64, offset: 1216)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2297, file: !135, line: 3119, baseType: !1669, size: 64, offset: 1280)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2297, file: !135, line: 3121, baseType: !1669, size: 64, offset: 1344)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2297, file: !135, line: 3123, baseType: !1669, size: 64, offset: 1408)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1629, file: !135, line: 3385, baseType: !2325, size: 1088)
!2325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2326)
!2326 = !{!2327, !2328, !2329}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2325, file: !135, line: 2875, baseType: !1802, size: 960)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2325, file: !135, line: 2876, baseType: !1806, size: 64, offset: 960)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2325, file: !135, line: 2877, baseType: !2330, size: 64, offset: 1024)
!2330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2331, size: 64)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2332, line: 172, size: 128, elements: !2333)
!2332 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2333 = !{!2334, !2335, !2336, !2337, !2338, !2339, !2340}
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2331, file: !2332, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2331, file: !2332, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2331, file: !2332, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2331, file: !2332, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2331, file: !2332, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2331, file: !2332, line: 195, baseType: !7, size: 32, offset: 32)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2331, file: !2332, line: 199, baseType: !1669, size: 64, offset: 64)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1629, file: !135, line: 3386, baseType: !2300, size: 1216)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1629, file: !135, line: 3387, baseType: !2343, size: 1280)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2344)
!2344 = !{!2345, !2346}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2343, file: !135, line: 3094, baseType: !2300, size: 1216)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2343, file: !135, line: 3095, baseType: !2330, size: 64, offset: 1216)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1629, file: !135, line: 3388, baseType: !2348, size: 1216)
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2349)
!2349 = !{!2350, !2351, !2352, !2353, !2354, !2355}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2348, file: !135, line: 2825, baseType: !1764, size: 896)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2348, file: !135, line: 2827, baseType: !1669, size: 64, offset: 896)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2348, file: !135, line: 2828, baseType: !1669, size: 64, offset: 960)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2348, file: !135, line: 2829, baseType: !1669, size: 64, offset: 1024)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2348, file: !135, line: 2830, baseType: !1669, size: 64, offset: 1088)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2348, file: !135, line: 2831, baseType: !1669, size: 64, offset: 1152)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1629, file: !135, line: 3389, baseType: !2357, size: 1024)
!2357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2358)
!2358 = !{!2359, !2360, !2361}
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2357, file: !135, line: 2851, baseType: !1802, size: 960)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2357, file: !135, line: 2852, baseType: !1725, size: 32, offset: 960)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2357, file: !135, line: 2853, baseType: !1725, size: 32, offset: 992)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1629, file: !135, line: 3390, baseType: !2363, size: 1024)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2364)
!2364 = !{!2365, !2366}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2363, file: !135, line: 2858, baseType: !1802, size: 960)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2363, file: !135, line: 2859, baseType: !2330, size: 64, offset: 960)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1629, file: !135, line: 3391, baseType: !2368, size: 960)
!2368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2369)
!2369 = !{!2370}
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2368, file: !135, line: 2863, baseType: !1802, size: 960)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1629, file: !135, line: 3392, baseType: !2372, size: 1472)
!2372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2373)
!2373 = !{!2374}
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2372, file: !135, line: 3305, baseType: !2297, size: 1472)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1629, file: !135, line: 3393, baseType: !2376, size: 1792)
!2376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2377)
!2377 = !{!2378, !2379, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611}
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2376, file: !135, line: 3249, baseType: !2297, size: 1472)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2376, file: !135, line: 3251, baseType: !2380, size: 64, offset: 1472)
!2380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2381, size: 64)
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2382, line: 463, size: 1152, elements: !2383)
!2382 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2383 = !{!2384, !2387, !2418, !2419, !2532, !2535, !2536, !2537, !2538, !2539, !2540, !2564, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590}
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2381, file: !2382, line: 464, baseType: !2385, size: 64)
!2385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!2386 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2382, line: 464, flags: DIFlagFwdDecl)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2381, file: !2382, line: 467, baseType: !2388, size: 64, offset: 64)
!2388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2389, size: 64)
!2389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2390)
!2390 = !{!2391, !2393, !2394, !2407, !2408, !2409, !2410, !2411, !2412, !2414, !2416, !2417}
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2389, file: !330, line: 377, baseType: !2392, size: 64)
!2392 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1670, line: 111, baseType: !1923)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2389, file: !330, line: 378, baseType: !2392, size: 64, offset: 64)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2389, file: !330, line: 381, baseType: !2395, size: 64, offset: 128)
!2395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2396, size: 64)
!2396 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2397)
!2397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2398)
!2398 = !{!2399}
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2397, file: !330, line: 282, baseType: !2400, size: 128)
!2400 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2401)
!2401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2402)
!2402 = !{!2403, !2404, !2405}
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2401, file: !330, line: 281, baseType: !7, size: 32)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2401, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2401, file: !330, line: 281, baseType: !2406, size: 64, offset: 64)
!2406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2392, size: 64, elements: !1729)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2389, file: !330, line: 384, baseType: !1725, size: 32, offset: 192)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2389, file: !330, line: 387, baseType: !1725, size: 32, offset: 224)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2389, file: !330, line: 390, baseType: !1725, size: 32, offset: 256)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2389, file: !330, line: 394, baseType: !2395, size: 64, offset: 320)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2389, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2389, file: !330, line: 399, baseType: !2413, size: 64, offset: 416)
!2413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1876)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2389, file: !330, line: 402, baseType: !2415, size: 64, offset: 480)
!2415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1876)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2389, file: !330, line: 406, baseType: !1725, size: 32, offset: 544)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2389, file: !330, line: 409, baseType: !1725, size: 32, offset: 576)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2381, file: !2382, line: 470, baseType: !1950, size: 64, offset: 128)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2381, file: !2382, line: 473, baseType: !2420, size: 64, offset: 192)
!2420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2421, size: 64)
!2421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2332, line: 39, size: 1152, elements: !2422)
!2422 = !{!2423, !2471, !2484, !2496, !2497, !2509, !2510, !2514, !2515, !2516, !2517, !2518}
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2421, file: !2332, line: 41, baseType: !2424, size: 64)
!2424 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2425, line: 144, baseType: !2426)
!2425 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2427, size: 64)
!2427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2425, line: 100, size: 896, elements: !2428)
!2428 = !{!2429, !2435, !2440, !2445, !2447, !2448, !2449, !2450, !2451, !2452, !2457, !2459, !2460, !2465, !2470}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2427, file: !2425, line: 102, baseType: !2430, size: 64)
!2430 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2425, line: 52, baseType: !2431)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = !DISubroutineType(types: !2433)
!2433 = !{!2434, !2265}
!2434 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2425, line: 47, baseType: !7)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2427, file: !2425, line: 105, baseType: !2436, size: 64, offset: 64)
!2436 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2425, line: 59, baseType: !2437)
!2437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2438, size: 64)
!2438 = !DISubroutineType(types: !2439)
!2439 = !{!1725, !2265, !2265}
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2427, file: !2425, line: 108, baseType: !2441, size: 64, offset: 128)
!2441 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2425, line: 63, baseType: !2442)
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 64)
!2443 = !DISubroutineType(types: !2444)
!2444 = !{null, !1912}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2427, file: !2425, line: 111, baseType: !2446, size: 64, offset: 192)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1912, size: 64)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2427, file: !2425, line: 114, baseType: !2104, size: 64, offset: 256)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2427, file: !2425, line: 117, baseType: !2104, size: 64, offset: 320)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2427, file: !2425, line: 120, baseType: !2104, size: 64, offset: 384)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2427, file: !2425, line: 124, baseType: !7, size: 32, offset: 448)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2427, file: !2425, line: 128, baseType: !7, size: 32, offset: 480)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2427, file: !2425, line: 131, baseType: !2453, size: 64, offset: 512)
!2453 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2425, line: 75, baseType: !2454)
!2454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2455, size: 64)
!2455 = !DISubroutineType(types: !2456)
!2456 = !{!1912, !2104, !2104}
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2427, file: !2425, line: 132, baseType: !2458, size: 64, offset: 576)
!2458 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2425, line: 78, baseType: !2442)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2427, file: !2425, line: 135, baseType: !1912, size: 64, offset: 640)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2427, file: !2425, line: 136, baseType: !2461, size: 64, offset: 704)
!2461 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2425, line: 82, baseType: !2462)
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = !DISubroutineType(types: !2464)
!2464 = !{!1912, !1912, !2104, !2104}
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2427, file: !2425, line: 137, baseType: !2466, size: 64, offset: 768)
!2466 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2425, line: 83, baseType: !2467)
!2467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2468, size: 64)
!2468 = !DISubroutineType(types: !2469)
!2469 = !{null, !1912, !1912}
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2427, file: !2425, line: 141, baseType: !7, size: 32, offset: 832)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2421, file: !2332, line: 48, baseType: !2472, size: 64, offset: 64)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2473, size: 64)
!2473 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !743, line: 35, baseType: !2474)
!2474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !743, line: 35, size: 128, elements: !2475)
!2475 = !{!2476}
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2474, file: !743, line: 35, baseType: !2477, size: 128)
!2477 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !743, line: 33, baseType: !2478)
!2478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !743, line: 33, size: 128, elements: !2479)
!2479 = !{!2480, !2481, !2482}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2478, file: !743, line: 33, baseType: !7, size: 32)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2478, file: !743, line: 33, baseType: !7, size: 32, offset: 32)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2478, file: !743, line: 33, baseType: !2483, size: 64, offset: 64)
!2483 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1959, size: 64, elements: !1729)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2421, file: !2332, line: 51, baseType: !2485, size: 64, offset: 128)
!2485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2486, size: 64)
!2486 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2487)
!2487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2488)
!2488 = !{!2489}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2487, file: !135, line: 183, baseType: !2490, size: 128)
!2490 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2491)
!2491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2492)
!2492 = !{!2493, !2494, !2495}
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2491, file: !135, line: 182, baseType: !7, size: 32)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2491, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2491, file: !135, line: 182, baseType: !2012, size: 64, offset: 64)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2421, file: !2332, line: 54, baseType: !1669, size: 64, offset: 192)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2421, file: !2332, line: 57, baseType: !2498, size: 128, offset: 256)
!2498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2499, line: 31, size: 128, elements: !2500)
!2499 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2500 = !{!2501, !2502, !2503, !2504, !2505, !2506, !2507}
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2498, file: !2499, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2498, file: !2499, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2498, file: !2499, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2498, file: !2499, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2498, file: !2499, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2498, file: !2499, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2498, file: !2499, line: 56, baseType: !2508, size: 64, offset: 64)
!2508 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1670, line: 47, baseType: !1860)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2421, file: !2332, line: 60, baseType: !2498, size: 128, offset: 384)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2421, file: !2332, line: 64, baseType: !2511, size: 64, offset: 512)
!2511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2512, size: 64)
!2512 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2513, line: 33, flags: DIFlagFwdDecl)
!2513 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2421, file: !2332, line: 67, baseType: !1669, size: 64, offset: 576)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2421, file: !2332, line: 73, baseType: !2424, size: 64, offset: 640)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2421, file: !2332, line: 77, baseType: !2508, size: 64, offset: 704)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2421, file: !2332, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2421, file: !2332, line: 82, baseType: !2519, size: 320, offset: 832)
!2519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !808, line: 62, size: 320, elements: !2520)
!2520 = !{!2521, !2527, !2528, !2529, !2530, !2531}
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2519, file: !808, line: 63, baseType: !2522, size: 64)
!2522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2523, size: 64)
!2523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !808, line: 56, size: 128, elements: !2524)
!2524 = !{!2525, !2526}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2523, file: !808, line: 57, baseType: !2522, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2523, file: !808, line: 58, baseType: !1727, size: 8, offset: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2519, file: !808, line: 64, baseType: !7, size: 32, offset: 64)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2519, file: !808, line: 66, baseType: !7, size: 32, offset: 96)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2519, file: !808, line: 68, baseType: !1748, size: 8, offset: 128)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2519, file: !808, line: 70, baseType: !1988, size: 64, offset: 192)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2519, file: !808, line: 71, baseType: !1995, size: 64, offset: 256)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2381, file: !2382, line: 476, baseType: !2533, size: 64, offset: 256)
!2533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2534, size: 64)
!2534 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2382, line: 476, flags: DIFlagFwdDecl)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2381, file: !2382, line: 479, baseType: !2424, size: 64, offset: 320)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2381, file: !2382, line: 484, baseType: !1669, size: 64, offset: 384)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2381, file: !2382, line: 488, baseType: !1669, size: 64, offset: 448)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2381, file: !2382, line: 493, baseType: !1669, size: 64, offset: 512)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2381, file: !2382, line: 496, baseType: !1669, size: 64, offset: 576)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2381, file: !2382, line: 501, baseType: !2541, size: 64, offset: 640)
!2541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2542, size: 64)
!2542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2543)
!2543 = !{!2544, !2547, !2548, !2549, !2550, !2552, !2553, !2558, !2559, !2560, !2561, !2562, !2563}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2542, file: !341, line: 2356, baseType: !2545, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2546, size: 64)
!2546 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2542, file: !341, line: 2357, baseType: !1832, size: 64, offset: 64)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2542, file: !341, line: 2358, baseType: !1725, size: 32, offset: 128)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2542, file: !341, line: 2359, baseType: !1725, size: 32, offset: 160)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2542, file: !341, line: 2360, baseType: !2551, size: 128, offset: 192)
!2551 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1725, size: 128, elements: !1901)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2542, file: !341, line: 2364, baseType: !1725, size: 32, offset: 320)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2542, file: !341, line: 2367, baseType: !2554, size: 128, offset: 384)
!2554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2555)
!2555 = !{!2556, !2557}
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2554, file: !341, line: 2351, baseType: !1806, size: 64)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2554, file: !341, line: 2352, baseType: !1684, size: 64, offset: 64)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2542, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2542, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2542, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2542, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2542, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2542, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2381, file: !2382, line: 504, baseType: !2565, size: 64, offset: 704)
!2565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2566, size: 64)
!2566 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2382, line: 504, flags: DIFlagFwdDecl)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2381, file: !2382, line: 507, baseType: !2424, size: 64, offset: 768)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2381, file: !2382, line: 510, baseType: !1725, size: 32, offset: 832)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2381, file: !2382, line: 513, baseType: !1725, size: 32, offset: 864)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2381, file: !2382, line: 516, baseType: !1756, size: 32, offset: 896)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2381, file: !2382, line: 519, baseType: !1756, size: 32, offset: 928)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2381, file: !2382, line: 522, baseType: !7, size: 32, offset: 960)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2381, file: !2382, line: 523, baseType: !7, size: 32, offset: 992)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2381, file: !2382, line: 528, baseType: !1832, size: 64, offset: 1024)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2381, file: !2382, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2381, file: !2382, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2381, file: !2382, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2381, file: !2382, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2381, file: !2382, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2381, file: !2382, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2381, file: !2382, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2381, file: !2382, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2381, file: !2382, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2381, file: !2382, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2381, file: !2382, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2381, file: !2382, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2381, file: !2382, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2381, file: !2382, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2381, file: !2382, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2381, file: !2382, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2376, file: !135, line: 3254, baseType: !1669, size: 64, offset: 1536)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2376, file: !135, line: 3257, baseType: !1669, size: 64, offset: 1600)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2376, file: !135, line: 3258, baseType: !1669, size: 64, offset: 1664)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2376, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2376, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2376, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2376, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2376, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2376, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2376, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2376, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2376, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2376, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2376, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2376, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2376, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2376, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2376, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2376, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2376, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2376, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1629, file: !135, line: 3394, baseType: !2613, size: 1344)
!2613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2614)
!2614 = !{!2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656}
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2613, file: !135, line: 2280, baseType: !1665, size: 192)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2613, file: !135, line: 2281, baseType: !1669, size: 64, offset: 192)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2613, file: !135, line: 2282, baseType: !1669, size: 64, offset: 256)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2613, file: !135, line: 2283, baseType: !1669, size: 64, offset: 320)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2613, file: !135, line: 2284, baseType: !1669, size: 64, offset: 384)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2613, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2613, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2613, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2613, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2613, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2613, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2613, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2613, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2613, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2613, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2613, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2613, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2613, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2613, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2613, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2613, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2613, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2613, file: !135, line: 2306, baseType: !2215, size: 32, offset: 544)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2613, file: !135, line: 2307, baseType: !1669, size: 64, offset: 576)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2613, file: !135, line: 2308, baseType: !1669, size: 64, offset: 640)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2613, file: !135, line: 2314, baseType: !2641, size: 64, offset: 704)
!2641 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2642)
!2642 = !{!2643, !2644, !2645}
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2641, file: !135, line: 2310, baseType: !1725, size: 32)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2641, file: !135, line: 2311, baseType: !1832, size: 64)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2641, file: !135, line: 2312, baseType: !2646, size: 64)
!2646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2647, size: 64)
!2647 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2613, file: !135, line: 2315, baseType: !1669, size: 64, offset: 768)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2613, file: !135, line: 2316, baseType: !1669, size: 64, offset: 832)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2613, file: !135, line: 2317, baseType: !1669, size: 64, offset: 896)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2613, file: !135, line: 2318, baseType: !1669, size: 64, offset: 960)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2613, file: !135, line: 2319, baseType: !1669, size: 64, offset: 1024)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2613, file: !135, line: 2320, baseType: !1669, size: 64, offset: 1088)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2613, file: !135, line: 2321, baseType: !1669, size: 64, offset: 1152)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2613, file: !135, line: 2322, baseType: !1669, size: 64, offset: 1216)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2613, file: !135, line: 2324, baseType: !2657, size: 64, offset: 1280)
!2657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2658, size: 64)
!2658 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1629, file: !135, line: 3395, baseType: !2660, size: 320)
!2660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2661)
!2661 = !{!2662, !2663, !2664}
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2660, file: !135, line: 1470, baseType: !1665, size: 192)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2660, file: !135, line: 1471, baseType: !1669, size: 64, offset: 192)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2660, file: !135, line: 1472, baseType: !1669, size: 64, offset: 256)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1629, file: !135, line: 3396, baseType: !2666, size: 320)
!2666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2667)
!2667 = !{!2668, !2669, !2670}
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2666, file: !135, line: 1483, baseType: !1665, size: 192)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2666, file: !135, line: 1484, baseType: !1725, size: 32, offset: 192)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2666, file: !135, line: 1485, baseType: !2012, size: 64, offset: 256)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1629, file: !135, line: 3397, baseType: !2672, size: 384)
!2672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2673)
!2673 = !{!2674, !2675, !2676, !2677}
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2672, file: !135, line: 1830, baseType: !1665, size: 192)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2672, file: !135, line: 1831, baseType: !1756, size: 32, offset: 192)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2672, file: !135, line: 1832, baseType: !1669, size: 64, offset: 256)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2672, file: !135, line: 1835, baseType: !2012, size: 64, offset: 320)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1629, file: !135, line: 3398, baseType: !2679, size: 704)
!2679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2680)
!2680 = !{!2681, !2682, !2683, !2684, !2685, !2690}
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2679, file: !135, line: 1899, baseType: !1665, size: 192)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2679, file: !135, line: 1902, baseType: !1669, size: 64, offset: 192)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2679, file: !135, line: 1905, baseType: !1959, size: 64, offset: 256)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2679, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2679, file: !135, line: 1911, baseType: !2686, size: 64, offset: 384)
!2686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2687, size: 64)
!2687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2332, line: 117, size: 128, elements: !2688)
!2688 = !{!2689}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2687, file: !2332, line: 120, baseType: !2498, size: 128)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2679, file: !135, line: 1914, baseType: !2000, size: 256, offset: 448)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1629, file: !135, line: 3399, baseType: !2692, size: 704)
!2692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2693)
!2693 = !{!2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704}
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2692, file: !135, line: 2009, baseType: !1665, size: 192)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2692, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2692, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2692, file: !135, line: 2014, baseType: !1756, size: 32, offset: 224)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2692, file: !135, line: 2016, baseType: !1669, size: 64, offset: 256)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2692, file: !135, line: 2017, baseType: !2485, size: 64, offset: 320)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2692, file: !135, line: 2019, baseType: !1669, size: 64, offset: 384)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2692, file: !135, line: 2020, baseType: !1669, size: 64, offset: 448)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2692, file: !135, line: 2021, baseType: !1669, size: 64, offset: 512)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2692, file: !135, line: 2022, baseType: !1669, size: 64, offset: 576)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2692, file: !135, line: 2023, baseType: !1669, size: 64, offset: 640)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1629, file: !135, line: 3400, baseType: !2706, size: 832)
!2706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2707)
!2707 = !{!2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717}
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2706, file: !135, line: 2431, baseType: !1665, size: 192)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2706, file: !135, line: 2433, baseType: !1669, size: 64, offset: 192)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2706, file: !135, line: 2434, baseType: !1669, size: 64, offset: 256)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2706, file: !135, line: 2435, baseType: !1669, size: 64, offset: 320)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2706, file: !135, line: 2436, baseType: !1669, size: 64, offset: 384)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2706, file: !135, line: 2437, baseType: !2485, size: 64, offset: 448)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2706, file: !135, line: 2438, baseType: !1669, size: 64, offset: 512)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2706, file: !135, line: 2440, baseType: !1669, size: 64, offset: 576)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2706, file: !135, line: 2441, baseType: !1669, size: 64, offset: 640)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2706, file: !135, line: 2443, baseType: !2718, size: 128, offset: 704)
!2718 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2719)
!2719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2720)
!2720 = !{!2721}
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2719, file: !135, line: 182, baseType: !2490, size: 128)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1629, file: !135, line: 3401, baseType: !2723, size: 320)
!2723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2724)
!2724 = !{!2725, !2726, !2733}
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2723, file: !135, line: 3329, baseType: !1665, size: 192)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2723, file: !135, line: 3330, baseType: !2727, size: 64, offset: 192)
!2727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2728, size: 64)
!2728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2729)
!2729 = !{!2730, !2731, !2732}
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2728, file: !135, line: 3322, baseType: !2727, size: 64)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2728, file: !135, line: 3323, baseType: !2727, size: 64, offset: 64)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2728, file: !135, line: 3324, baseType: !1669, size: 64, offset: 128)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2723, file: !135, line: 3331, baseType: !2727, size: 64, offset: 256)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1629, file: !135, line: 3402, baseType: !2735, size: 256)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2736)
!2736 = !{!2737, !2738}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2735, file: !135, line: 1541, baseType: !1665, size: 192)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2735, file: !135, line: 1542, baseType: !2739, size: 64, offset: 192)
!2739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2740, size: 64)
!2740 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2741)
!2741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2742)
!2742 = !{!2743}
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2741, file: !135, line: 1538, baseType: !2744, size: 192)
!2744 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2745)
!2745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2746)
!2746 = !{!2747, !2748, !2749}
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2745, file: !135, line: 1537, baseType: !7, size: 32)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2745, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2745, file: !135, line: 1537, baseType: !2750, size: 128, offset: 64)
!2750 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2751, size: 128, elements: !1729)
!2751 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2752)
!2752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2753)
!2753 = !{!2754, !2755}
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2752, file: !135, line: 1533, baseType: !1669, size: 64)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2752, file: !135, line: 1534, baseType: !1669, size: 64, offset: 64)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1629, file: !135, line: 3403, baseType: !2757, size: 512)
!2757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2758)
!2758 = !{!2759, !2760, !2761, !2762, !2768, !2769, !2770}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2757, file: !135, line: 1939, baseType: !1665, size: 192)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2757, file: !135, line: 1940, baseType: !1756, size: 32, offset: 192)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2757, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2757, file: !135, line: 1946, baseType: !2763, size: 32, offset: 256)
!2763 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2764)
!2764 = !{!2765, !2766, !2767}
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2763, file: !135, line: 1943, baseType: !363, size: 32)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2763, file: !135, line: 1944, baseType: !370, size: 32)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2763, file: !135, line: 1945, baseType: !134, size: 32)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2757, file: !135, line: 1950, baseType: !1949, size: 64, offset: 320)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2757, file: !135, line: 1951, baseType: !1949, size: 64, offset: 384)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2757, file: !135, line: 1953, baseType: !2012, size: 64, offset: 448)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1629, file: !135, line: 3404, baseType: !2772, size: 1664)
!2772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2773)
!2773 = !{!2774, !2775}
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2772, file: !135, line: 3338, baseType: !1665, size: 192)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2772, file: !135, line: 3341, baseType: !2776, size: 1472, offset: 192)
!2776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2777, line: 410, size: 1472, elements: !2778)
!2777 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2778 = !{!2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942}
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2776, file: !2777, line: 412, baseType: !1725, size: 32)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2776, file: !2777, line: 413, baseType: !1725, size: 32, offset: 32)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2776, file: !2777, line: 414, baseType: !1725, size: 32, offset: 64)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2776, file: !2777, line: 415, baseType: !1725, size: 32, offset: 96)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2776, file: !2777, line: 416, baseType: !1725, size: 32, offset: 128)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2776, file: !2777, line: 417, baseType: !1725, size: 32, offset: 160)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2776, file: !2777, line: 418, baseType: !1748, size: 8, offset: 192)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2776, file: !2777, line: 419, baseType: !1748, size: 8, offset: 200)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2776, file: !2777, line: 420, baseType: !2788, size: 8, offset: 208)
!2788 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2776, file: !2777, line: 421, baseType: !2788, size: 8, offset: 216)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2776, file: !2777, line: 422, baseType: !2788, size: 8, offset: 224)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2776, file: !2777, line: 423, baseType: !2788, size: 8, offset: 232)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2776, file: !2777, line: 424, baseType: !2788, size: 8, offset: 240)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2776, file: !2777, line: 425, baseType: !2788, size: 8, offset: 248)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2776, file: !2777, line: 426, baseType: !2788, size: 8, offset: 256)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2776, file: !2777, line: 427, baseType: !2788, size: 8, offset: 264)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2776, file: !2777, line: 428, baseType: !2788, size: 8, offset: 272)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2776, file: !2777, line: 429, baseType: !2788, size: 8, offset: 280)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2776, file: !2777, line: 430, baseType: !2788, size: 8, offset: 288)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2776, file: !2777, line: 431, baseType: !2788, size: 8, offset: 296)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2776, file: !2777, line: 432, baseType: !2788, size: 8, offset: 304)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2776, file: !2777, line: 433, baseType: !2788, size: 8, offset: 312)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2776, file: !2777, line: 434, baseType: !2788, size: 8, offset: 320)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2776, file: !2777, line: 435, baseType: !2788, size: 8, offset: 328)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2776, file: !2777, line: 436, baseType: !2788, size: 8, offset: 336)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2776, file: !2777, line: 437, baseType: !2788, size: 8, offset: 344)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2776, file: !2777, line: 438, baseType: !2788, size: 8, offset: 352)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2776, file: !2777, line: 439, baseType: !2788, size: 8, offset: 360)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2776, file: !2777, line: 440, baseType: !2788, size: 8, offset: 368)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2776, file: !2777, line: 441, baseType: !2788, size: 8, offset: 376)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2776, file: !2777, line: 442, baseType: !2788, size: 8, offset: 384)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2776, file: !2777, line: 443, baseType: !2788, size: 8, offset: 392)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2776, file: !2777, line: 444, baseType: !2788, size: 8, offset: 400)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2776, file: !2777, line: 445, baseType: !2788, size: 8, offset: 408)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2776, file: !2777, line: 446, baseType: !2788, size: 8, offset: 416)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2776, file: !2777, line: 447, baseType: !2788, size: 8, offset: 424)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2776, file: !2777, line: 448, baseType: !2788, size: 8, offset: 432)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2776, file: !2777, line: 449, baseType: !2788, size: 8, offset: 440)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2776, file: !2777, line: 450, baseType: !2788, size: 8, offset: 448)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2776, file: !2777, line: 451, baseType: !2788, size: 8, offset: 456)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2776, file: !2777, line: 452, baseType: !2788, size: 8, offset: 464)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2776, file: !2777, line: 453, baseType: !2788, size: 8, offset: 472)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2776, file: !2777, line: 454, baseType: !2788, size: 8, offset: 480)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2776, file: !2777, line: 455, baseType: !2788, size: 8, offset: 488)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2776, file: !2777, line: 456, baseType: !2788, size: 8, offset: 496)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2776, file: !2777, line: 457, baseType: !2788, size: 8, offset: 504)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2776, file: !2777, line: 458, baseType: !2788, size: 8, offset: 512)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2776, file: !2777, line: 459, baseType: !2788, size: 8, offset: 520)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2776, file: !2777, line: 460, baseType: !2788, size: 8, offset: 528)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2776, file: !2777, line: 461, baseType: !2788, size: 8, offset: 536)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2776, file: !2777, line: 462, baseType: !2788, size: 8, offset: 544)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2776, file: !2777, line: 463, baseType: !2788, size: 8, offset: 552)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2776, file: !2777, line: 464, baseType: !2788, size: 8, offset: 560)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2776, file: !2777, line: 465, baseType: !2788, size: 8, offset: 568)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2776, file: !2777, line: 466, baseType: !2788, size: 8, offset: 576)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2776, file: !2777, line: 467, baseType: !2788, size: 8, offset: 584)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2776, file: !2777, line: 468, baseType: !2788, size: 8, offset: 592)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2776, file: !2777, line: 469, baseType: !2788, size: 8, offset: 600)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2776, file: !2777, line: 470, baseType: !2788, size: 8, offset: 608)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2776, file: !2777, line: 471, baseType: !2788, size: 8, offset: 616)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2776, file: !2777, line: 472, baseType: !2788, size: 8, offset: 624)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2776, file: !2777, line: 473, baseType: !2788, size: 8, offset: 632)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2776, file: !2777, line: 474, baseType: !2788, size: 8, offset: 640)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2776, file: !2777, line: 475, baseType: !2788, size: 8, offset: 648)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2776, file: !2777, line: 476, baseType: !2788, size: 8, offset: 656)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2776, file: !2777, line: 477, baseType: !2788, size: 8, offset: 664)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2776, file: !2777, line: 478, baseType: !2788, size: 8, offset: 672)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2776, file: !2777, line: 479, baseType: !2788, size: 8, offset: 680)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2776, file: !2777, line: 480, baseType: !2788, size: 8, offset: 688)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2776, file: !2777, line: 481, baseType: !2788, size: 8, offset: 696)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2776, file: !2777, line: 482, baseType: !2788, size: 8, offset: 704)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2776, file: !2777, line: 483, baseType: !2788, size: 8, offset: 712)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2776, file: !2777, line: 484, baseType: !2788, size: 8, offset: 720)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2776, file: !2777, line: 485, baseType: !2788, size: 8, offset: 728)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2776, file: !2777, line: 486, baseType: !2788, size: 8, offset: 736)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2776, file: !2777, line: 487, baseType: !2788, size: 8, offset: 744)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2776, file: !2777, line: 488, baseType: !2788, size: 8, offset: 752)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2776, file: !2777, line: 489, baseType: !2788, size: 8, offset: 760)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2776, file: !2777, line: 490, baseType: !2788, size: 8, offset: 768)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2776, file: !2777, line: 491, baseType: !2788, size: 8, offset: 776)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2776, file: !2777, line: 492, baseType: !2788, size: 8, offset: 784)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2776, file: !2777, line: 493, baseType: !2788, size: 8, offset: 792)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2776, file: !2777, line: 494, baseType: !2788, size: 8, offset: 800)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2776, file: !2777, line: 495, baseType: !2788, size: 8, offset: 808)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2776, file: !2777, line: 496, baseType: !2788, size: 8, offset: 816)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2776, file: !2777, line: 497, baseType: !2788, size: 8, offset: 824)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2776, file: !2777, line: 498, baseType: !2788, size: 8, offset: 832)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2776, file: !2777, line: 499, baseType: !2788, size: 8, offset: 840)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2776, file: !2777, line: 500, baseType: !2788, size: 8, offset: 848)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2776, file: !2777, line: 501, baseType: !2788, size: 8, offset: 856)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2776, file: !2777, line: 502, baseType: !2788, size: 8, offset: 864)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2776, file: !2777, line: 503, baseType: !2788, size: 8, offset: 872)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2776, file: !2777, line: 504, baseType: !2788, size: 8, offset: 880)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2776, file: !2777, line: 505, baseType: !2788, size: 8, offset: 888)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2776, file: !2777, line: 506, baseType: !2788, size: 8, offset: 896)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2776, file: !2777, line: 507, baseType: !2788, size: 8, offset: 904)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2776, file: !2777, line: 508, baseType: !2788, size: 8, offset: 912)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2776, file: !2777, line: 509, baseType: !2788, size: 8, offset: 920)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2776, file: !2777, line: 510, baseType: !2788, size: 8, offset: 928)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2776, file: !2777, line: 511, baseType: !2788, size: 8, offset: 936)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2776, file: !2777, line: 512, baseType: !2788, size: 8, offset: 944)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2776, file: !2777, line: 513, baseType: !2788, size: 8, offset: 952)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2776, file: !2777, line: 514, baseType: !2788, size: 8, offset: 960)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2776, file: !2777, line: 515, baseType: !2788, size: 8, offset: 968)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2776, file: !2777, line: 516, baseType: !2788, size: 8, offset: 976)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2776, file: !2777, line: 517, baseType: !2788, size: 8, offset: 984)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2776, file: !2777, line: 518, baseType: !2788, size: 8, offset: 992)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2776, file: !2777, line: 519, baseType: !2788, size: 8, offset: 1000)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2776, file: !2777, line: 520, baseType: !2788, size: 8, offset: 1008)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2776, file: !2777, line: 521, baseType: !2788, size: 8, offset: 1016)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2776, file: !2777, line: 522, baseType: !2788, size: 8, offset: 1024)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2776, file: !2777, line: 523, baseType: !2788, size: 8, offset: 1032)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2776, file: !2777, line: 524, baseType: !2788, size: 8, offset: 1040)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2776, file: !2777, line: 525, baseType: !2788, size: 8, offset: 1048)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2776, file: !2777, line: 526, baseType: !2788, size: 8, offset: 1056)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2776, file: !2777, line: 527, baseType: !2788, size: 8, offset: 1064)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2776, file: !2777, line: 528, baseType: !2788, size: 8, offset: 1072)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2776, file: !2777, line: 529, baseType: !2788, size: 8, offset: 1080)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2776, file: !2777, line: 530, baseType: !2788, size: 8, offset: 1088)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2776, file: !2777, line: 531, baseType: !2788, size: 8, offset: 1096)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2776, file: !2777, line: 532, baseType: !2788, size: 8, offset: 1104)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2776, file: !2777, line: 533, baseType: !2788, size: 8, offset: 1112)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2776, file: !2777, line: 534, baseType: !2788, size: 8, offset: 1120)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2776, file: !2777, line: 535, baseType: !2788, size: 8, offset: 1128)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2776, file: !2777, line: 536, baseType: !2788, size: 8, offset: 1136)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2776, file: !2777, line: 537, baseType: !2788, size: 8, offset: 1144)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2776, file: !2777, line: 538, baseType: !2788, size: 8, offset: 1152)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2776, file: !2777, line: 539, baseType: !2788, size: 8, offset: 1160)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2776, file: !2777, line: 540, baseType: !2788, size: 8, offset: 1168)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2776, file: !2777, line: 541, baseType: !2788, size: 8, offset: 1176)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2776, file: !2777, line: 542, baseType: !2788, size: 8, offset: 1184)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2776, file: !2777, line: 543, baseType: !2788, size: 8, offset: 1192)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2776, file: !2777, line: 544, baseType: !2788, size: 8, offset: 1200)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2776, file: !2777, line: 545, baseType: !2788, size: 8, offset: 1208)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2776, file: !2777, line: 546, baseType: !2788, size: 8, offset: 1216)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2776, file: !2777, line: 547, baseType: !2788, size: 8, offset: 1224)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2776, file: !2777, line: 548, baseType: !2788, size: 8, offset: 1232)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2776, file: !2777, line: 549, baseType: !2788, size: 8, offset: 1240)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2776, file: !2777, line: 550, baseType: !2788, size: 8, offset: 1248)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2776, file: !2777, line: 551, baseType: !2788, size: 8, offset: 1256)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2776, file: !2777, line: 552, baseType: !2788, size: 8, offset: 1264)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2776, file: !2777, line: 553, baseType: !2788, size: 8, offset: 1272)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2776, file: !2777, line: 554, baseType: !2788, size: 8, offset: 1280)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2776, file: !2777, line: 555, baseType: !2788, size: 8, offset: 1288)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2776, file: !2777, line: 556, baseType: !2788, size: 8, offset: 1296)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2776, file: !2777, line: 557, baseType: !2788, size: 8, offset: 1304)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2776, file: !2777, line: 558, baseType: !2788, size: 8, offset: 1312)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2776, file: !2777, line: 559, baseType: !2788, size: 8, offset: 1320)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2776, file: !2777, line: 560, baseType: !2788, size: 8, offset: 1328)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2776, file: !2777, line: 561, baseType: !2788, size: 8, offset: 1336)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2776, file: !2777, line: 562, baseType: !2788, size: 8, offset: 1344)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2776, file: !2777, line: 563, baseType: !2788, size: 8, offset: 1352)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2776, file: !2777, line: 564, baseType: !2788, size: 8, offset: 1360)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2776, file: !2777, line: 565, baseType: !2788, size: 8, offset: 1368)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2776, file: !2777, line: 566, baseType: !2788, size: 8, offset: 1376)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2776, file: !2777, line: 567, baseType: !2788, size: 8, offset: 1384)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2776, file: !2777, line: 568, baseType: !2788, size: 8, offset: 1392)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2776, file: !2777, line: 569, baseType: !2788, size: 8, offset: 1400)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2776, file: !2777, line: 570, baseType: !2788, size: 8, offset: 1408)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2776, file: !2777, line: 571, baseType: !2788, size: 8, offset: 1416)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2776, file: !2777, line: 572, baseType: !2788, size: 8, offset: 1424)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2776, file: !2777, line: 573, baseType: !2788, size: 8, offset: 1432)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2776, file: !2777, line: 574, baseType: !2788, size: 8, offset: 1440)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1629, file: !135, line: 3405, baseType: !2944, size: 384)
!2944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2945)
!2945 = !{!2946, !2947}
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2944, file: !135, line: 3353, baseType: !1665, size: 192)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2944, file: !135, line: 3356, baseType: !2948, size: 192, offset: 192)
!2948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2777, line: 578, size: 192, elements: !2949)
!2949 = !{!2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960}
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2948, file: !2777, line: 580, baseType: !1725, size: 32)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2948, file: !2777, line: 581, baseType: !1725, size: 32, offset: 32)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2948, file: !2777, line: 582, baseType: !1725, size: 32, offset: 64)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2948, file: !2777, line: 583, baseType: !1725, size: 32, offset: 96)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2948, file: !2777, line: 584, baseType: !1748, size: 8, offset: 128)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2948, file: !2777, line: 585, baseType: !1748, size: 8, offset: 136)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2948, file: !2777, line: 586, baseType: !1748, size: 8, offset: 144)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2948, file: !2777, line: 587, baseType: !1748, size: 8, offset: 152)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2948, file: !2777, line: 588, baseType: !1748, size: 8, offset: 160)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2948, file: !2777, line: 589, baseType: !1748, size: 8, offset: 168)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2948, file: !2777, line: 590, baseType: !1748, size: 8, offset: 176)
!2961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2962, size: 64)
!2962 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1629)
!2963 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2965, size: 64)
!2965 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1961)
!2966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2967, size: 64)
!2967 = !DIDerivedType(tag: DW_TAG_typedef, name: "prop_value_t", file: !835, line: 74, baseType: !2968)
!2968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "prop_value_d", file: !835, line: 64, size: 128, elements: !2969)
!2969 = !{!2970, !2971}
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "lattice_val", scope: !2968, file: !835, line: 68, baseType: !7, size: 32)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2968, file: !835, line: 71, baseType: !1669, size: 64, offset: 64)
!2972 = !{!0, !2973, !3001}
!2973 = !DIGlobalVariableExpression(var: !2974, expr: !DIExpression())
!2974 = distinct !DIGlobalVariable(name: "pass_fold_builtins", scope: !2, file: !3, line: 3530, type: !2975, isLocal: false, isDefinition: true)
!2975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !553, line: 156, size: 640, elements: !2976)
!2976 = !{!2977}
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2975, file: !553, line: 158, baseType: !2978, size: 640)
!2978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !553, line: 114, size: 640, elements: !2979)
!2979 = !{!2980, !2981, !2982, !2986, !2990, !2992, !2993, !2994, !2996, !2997, !2998, !2999, !3000}
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2978, file: !553, line: 117, baseType: !552, size: 32)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2978, file: !553, line: 121, baseType: !1832, size: 64, offset: 64)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2978, file: !553, line: 125, baseType: !2983, size: 64, offset: 128)
!2983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2984, size: 64)
!2984 = !DISubroutineType(types: !2985)
!2985 = !{!1748}
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2978, file: !553, line: 130, baseType: !2987, size: 64, offset: 192)
!2987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2988, size: 64)
!2988 = !DISubroutineType(types: !2989)
!2989 = !{!7}
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2978, file: !553, line: 133, baseType: !2991, size: 64, offset: 256)
!2991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2978, size: 64)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2978, file: !553, line: 136, baseType: !2991, size: 64, offset: 320)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2978, file: !553, line: 139, baseType: !1725, size: 32, offset: 384)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2978, file: !553, line: 143, baseType: !2995, size: 32, offset: 416)
!2995 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !560, line: 80, baseType: !559)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2978, file: !553, line: 146, baseType: !7, size: 32, offset: 448)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2978, file: !553, line: 147, baseType: !7, size: 32, offset: 480)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2978, file: !553, line: 148, baseType: !7, size: 32, offset: 512)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2978, file: !553, line: 151, baseType: !7, size: 32, offset: 544)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2978, file: !553, line: 152, baseType: !7, size: 32, offset: 576)
!3001 = !DIGlobalVariableExpression(var: !3002, expr: !DIExpression())
!3002 = distinct !DIGlobalVariable(name: "const_val", scope: !2, file: !3, line: 229, type: !2966, isLocal: true, isDefinition: true)
!3003 = !{i32 7, !"Dwarf Version", i32 4}
!3004 = !{i32 2, !"Debug Info Version", i32 3}
!3005 = !{i32 1, !"wchar_size", i32 4}
!3006 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3007 = distinct !DISubprogram(name: "debug_lattice_value", scope: !3, file: !3, line: 265, type: !3008, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3008 = !DISubroutineType(types: !3009)
!3009 = !{null, !2967}
!3010 = !{}
!3011 = !DILocalVariable(name: "val", arg: 1, scope: !3007, file: !3, line: 265, type: !2967)
!3012 = !DILocation(line: 265, column: 35, scope: !3007)
!3013 = !DILocation(line: 267, column: 23, scope: !3007)
!3014 = !DILocation(line: 267, column: 3, scope: !3007)
!3015 = !DILocation(line: 268, column: 12, scope: !3007)
!3016 = !DILocation(line: 268, column: 3, scope: !3007)
!3017 = !DILocation(line: 269, column: 1, scope: !3007)
!3018 = distinct !DISubprogram(name: "dump_lattice_value", scope: !3, file: !3, line: 237, type: !3019, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3019 = !DISubroutineType(types: !3020)
!3020 = !{null, !3021, !1832, !2967}
!3021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3022, size: 64)
!3022 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3023, line: 7, baseType: !3024)
!3023 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3025, line: 49, size: 1728, elements: !3026)
!3025 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3026 = !{!3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3042, !3044, !3045, !3046, !3049, !3050, !3051, !3052, !3055, !3057, !3060, !3063, !3064, !3065, !3066, !3067}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3024, file: !3025, line: 51, baseType: !1725, size: 32)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3024, file: !3025, line: 54, baseType: !1897, size: 64, offset: 64)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3024, file: !3025, line: 55, baseType: !1897, size: 64, offset: 128)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3024, file: !3025, line: 56, baseType: !1897, size: 64, offset: 192)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3024, file: !3025, line: 57, baseType: !1897, size: 64, offset: 256)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3024, file: !3025, line: 58, baseType: !1897, size: 64, offset: 320)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3024, file: !3025, line: 59, baseType: !1897, size: 64, offset: 384)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3024, file: !3025, line: 60, baseType: !1897, size: 64, offset: 448)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3024, file: !3025, line: 61, baseType: !1897, size: 64, offset: 512)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3024, file: !3025, line: 64, baseType: !1897, size: 64, offset: 576)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3024, file: !3025, line: 65, baseType: !1897, size: 64, offset: 640)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3024, file: !3025, line: 66, baseType: !1897, size: 64, offset: 704)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3024, file: !3025, line: 68, baseType: !3040, size: 64, offset: 768)
!3040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3041, size: 64)
!3041 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3025, line: 36, flags: DIFlagFwdDecl)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3024, file: !3025, line: 70, baseType: !3043, size: 64, offset: 832)
!3043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3024, size: 64)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3024, file: !3025, line: 72, baseType: !1725, size: 32, offset: 896)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3024, file: !3025, line: 73, baseType: !1725, size: 32, offset: 928)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3024, file: !3025, line: 74, baseType: !3047, size: 64, offset: 960)
!3047 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3048, line: 152, baseType: !1684)
!3048 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3024, file: !3025, line: 77, baseType: !2963, size: 16, offset: 1024)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3024, file: !3025, line: 78, baseType: !2788, size: 8, offset: 1040)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3024, file: !3025, line: 79, baseType: !1727, size: 8, offset: 1048)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3024, file: !3025, line: 81, baseType: !3053, size: 64, offset: 1088)
!3053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3054, size: 64)
!3054 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3025, line: 43, baseType: null)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3024, file: !3025, line: 89, baseType: !3056, size: 64, offset: 1152)
!3056 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3048, line: 153, baseType: !1684)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3024, file: !3025, line: 91, baseType: !3058, size: 64, offset: 1216)
!3058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3059, size: 64)
!3059 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3025, line: 37, flags: DIFlagFwdDecl)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3024, file: !3025, line: 92, baseType: !3061, size: 64, offset: 1280)
!3061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3062, size: 64)
!3062 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3025, line: 38, flags: DIFlagFwdDecl)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3024, file: !3025, line: 93, baseType: !3043, size: 64, offset: 1344)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3024, file: !3025, line: 94, baseType: !1912, size: 64, offset: 1408)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3024, file: !3025, line: 95, baseType: !2104, size: 64, offset: 1472)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3024, file: !3025, line: 96, baseType: !1725, size: 32, offset: 1536)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3024, file: !3025, line: 98, baseType: !3068, size: 160, offset: 1568)
!3068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1728, size: 160, elements: !3069)
!3069 = !{!3070}
!3070 = !DISubrange(count: 20)
!3071 = !DILocalVariable(name: "outf", arg: 1, scope: !3018, file: !3, line: 237, type: !3021)
!3072 = !DILocation(line: 237, column: 27, scope: !3018)
!3073 = !DILocalVariable(name: "prefix", arg: 2, scope: !3018, file: !3, line: 237, type: !1832)
!3074 = !DILocation(line: 237, column: 45, scope: !3018)
!3075 = !DILocalVariable(name: "val", arg: 3, scope: !3018, file: !3, line: 237, type: !2967)
!3076 = !DILocation(line: 237, column: 66, scope: !3018)
!3077 = !DILocation(line: 239, column: 15, scope: !3018)
!3078 = !DILocation(line: 239, column: 3, scope: !3018)
!3079 = !DILocation(line: 242, column: 16, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3018, file: !3, line: 240, column: 5)
!3081 = !DILocation(line: 242, column: 41, scope: !3080)
!3082 = !DILocation(line: 242, column: 7, scope: !3080)
!3083 = !DILocation(line: 243, column: 7, scope: !3080)
!3084 = !DILocation(line: 245, column: 16, scope: !3080)
!3085 = !DILocation(line: 245, column: 37, scope: !3080)
!3086 = !DILocation(line: 245, column: 7, scope: !3080)
!3087 = !DILocation(line: 246, column: 7, scope: !3080)
!3088 = !DILocation(line: 248, column: 16, scope: !3080)
!3089 = !DILocation(line: 248, column: 35, scope: !3080)
!3090 = !DILocation(line: 248, column: 7, scope: !3080)
!3091 = !DILocation(line: 249, column: 7, scope: !3080)
!3092 = !DILocation(line: 251, column: 16, scope: !3080)
!3093 = !DILocation(line: 251, column: 37, scope: !3080)
!3094 = !DILocation(line: 251, column: 7, scope: !3080)
!3095 = !DILocation(line: 252, column: 27, scope: !3080)
!3096 = !DILocation(line: 252, column: 37, scope: !3080)
!3097 = !DILocation(line: 252, column: 44, scope: !3080)
!3098 = !DILocation(line: 252, column: 7, scope: !3080)
!3099 = !DILocation(line: 253, column: 7, scope: !3080)
!3100 = !DILocation(line: 255, column: 7, scope: !3080)
!3101 = !DILocation(line: 256, column: 5, scope: !3080)
!3102 = !DILocation(line: 257, column: 1, scope: !3018)
!3103 = distinct !DISubprogram(name: "get_symbol_constant_value", scope: !3, file: !3, line: 277, type: !3104, scopeLine: 278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3104 = !DISubroutineType(types: !3105)
!3105 = !{!1669, !1669}
!3106 = !DILocalVariable(name: "sym", arg: 1, scope: !3103, file: !3, line: 277, type: !1669)
!3107 = !DILocation(line: 277, column: 33, scope: !3103)
!3108 = !DILocation(line: 279, column: 7, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 279, column: 7)
!3110 = !DILocation(line: 280, column: 7, scope: !3109)
!3111 = !DILocation(line: 280, column: 11, scope: !3109)
!3112 = !DILocation(line: 281, column: 4, scope: !3109)
!3113 = !DILocation(line: 281, column: 7, scope: !3109)
!3114 = !DILocation(line: 281, column: 23, scope: !3109)
!3115 = !DILocation(line: 279, column: 7, scope: !3103)
!3116 = !DILocalVariable(name: "val", scope: !3117, file: !3, line: 283, type: !1669)
!3117 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 282, column: 5)
!3118 = !DILocation(line: 283, column: 12, scope: !3117)
!3119 = !DILocation(line: 283, column: 18, scope: !3117)
!3120 = !DILocation(line: 284, column: 11, scope: !3121)
!3121 = distinct !DILexicalBlock(scope: !3117, file: !3, line: 284, column: 11)
!3122 = !DILocation(line: 284, column: 11, scope: !3117)
!3123 = !DILocation(line: 286, column: 4, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3121, file: !3, line: 285, column: 2)
!3125 = !DILocation(line: 287, column: 33, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3124, file: !3, line: 287, column: 8)
!3127 = !DILocation(line: 287, column: 8, scope: !3126)
!3128 = !DILocation(line: 287, column: 8, scope: !3124)
!3129 = !DILocation(line: 289, column: 12, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 289, column: 12)
!3131 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 288, column: 6)
!3132 = !DILocation(line: 289, column: 28, scope: !3130)
!3133 = !DILocation(line: 289, column: 12, scope: !3131)
!3134 = !DILocalVariable(name: "base", scope: !3135, file: !3, line: 291, type: !1669)
!3135 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 290, column: 3)
!3136 = !DILocation(line: 291, column: 10, scope: !3135)
!3137 = !DILocation(line: 291, column: 35, scope: !3135)
!3138 = !DILocation(line: 291, column: 17, scope: !3135)
!3139 = !DILocation(line: 292, column: 9, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3135, file: !3, line: 292, column: 9)
!3141 = !DILocation(line: 292, column: 14, scope: !3140)
!3142 = !DILocation(line: 292, column: 17, scope: !3140)
!3143 = !DILocation(line: 292, column: 34, scope: !3140)
!3144 = !DILocation(line: 292, column: 9, scope: !3135)
!3145 = !DILocation(line: 294, column: 9, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3140, file: !3, line: 293, column: 7)
!3147 = !DILocation(line: 294, column: 33, scope: !3146)
!3148 = !DILocation(line: 295, column: 37, scope: !3149)
!3149 = distinct !DILexicalBlock(scope: !3146, file: !3, line: 295, column: 13)
!3150 = !DILocation(line: 295, column: 13, scope: !3149)
!3151 = !DILocation(line: 295, column: 13, scope: !3146)
!3152 = !DILocation(line: 296, column: 24, scope: !3149)
!3153 = !DILocation(line: 296, column: 4, scope: !3149)
!3154 = !DILocation(line: 297, column: 7, scope: !3146)
!3155 = !DILocation(line: 298, column: 3, scope: !3135)
!3156 = !DILocation(line: 299, column: 15, scope: !3131)
!3157 = !DILocation(line: 299, column: 8, scope: !3131)
!3158 = !DILocation(line: 301, column: 2, scope: !3124)
!3159 = !DILocation(line: 305, column: 12, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3117, file: !3, line: 305, column: 11)
!3161 = !DILocation(line: 306, column: 4, scope: !3160)
!3162 = !DILocation(line: 306, column: 8, scope: !3160)
!3163 = !DILocation(line: 307, column: 4, scope: !3160)
!3164 = !DILocation(line: 307, column: 15, scope: !3160)
!3165 = !DILocation(line: 307, column: 30, scope: !3160)
!3166 = !DILocation(line: 307, column: 7, scope: !3160)
!3167 = !DILocation(line: 308, column: 11, scope: !3160)
!3168 = !DILocation(line: 308, column: 15, scope: !3160)
!3169 = !DILocation(line: 309, column: 9, scope: !3160)
!3170 = !DILocation(line: 309, column: 12, scope: !3160)
!3171 = !DILocation(line: 305, column: 11, scope: !3117)
!3172 = !DILocation(line: 310, column: 9, scope: !3160)
!3173 = !DILocation(line: 310, column: 2, scope: !3160)
!3174 = !DILocation(line: 311, column: 5, scope: !3117)
!3175 = !DILocation(line: 313, column: 3, scope: !3103)
!3176 = !DILocation(line: 314, column: 1, scope: !3103)
!3177 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !3178, file: !3178, line: 40, type: !3179, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3178 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3179 = !DISubroutineType(types: !3180)
!3180 = !{!2424, !3181}
!3181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3182, size: 64)
!3182 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2381)
!3183 = !DILocalVariable(name: "fun", arg: 1, scope: !3177, file: !3178, line: 40, type: !3181)
!3184 = !DILocation(line: 40, column: 48, scope: !3177)
!3185 = !DILocation(line: 42, column: 8, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3177, file: !3178, line: 42, column: 7)
!3187 = !DILocation(line: 42, column: 13, scope: !3186)
!3188 = !DILocation(line: 42, column: 7, scope: !3177)
!3189 = !DILocation(line: 43, column: 5, scope: !3186)
!3190 = !DILocation(line: 44, column: 10, scope: !3177)
!3191 = !DILocation(line: 44, column: 15, scope: !3177)
!3192 = !DILocation(line: 44, column: 26, scope: !3177)
!3193 = !DILocation(line: 44, column: 3, scope: !3177)
!3194 = !DILocation(line: 45, column: 1, scope: !3177)
!3195 = distinct !DISubprogram(name: "may_propagate_address_into_dereference", scope: !3, file: !3, line: 892, type: !3196, scopeLine: 893, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{!1748, !1669, !1669}
!3198 = !DILocalVariable(name: "addr", arg: 1, scope: !3195, file: !3, line: 892, type: !1669)
!3199 = !DILocation(line: 892, column: 46, scope: !3195)
!3200 = !DILocalVariable(name: "deref", arg: 2, scope: !3195, file: !3, line: 892, type: !1669)
!3201 = !DILocation(line: 892, column: 57, scope: !3195)
!3202 = !DILocation(line: 894, column: 3, scope: !3195)
!3203 = !DILocation(line: 898, column: 8, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 898, column: 7)
!3205 = !DILocation(line: 898, column: 7, scope: !3195)
!3206 = !DILocation(line: 899, column: 5, scope: !3204)
!3207 = !DILocation(line: 904, column: 32, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 904, column: 7)
!3209 = !DILocation(line: 904, column: 7, scope: !3208)
!3210 = !DILocation(line: 905, column: 7, scope: !3208)
!3211 = !DILocation(line: 905, column: 12, scope: !3208)
!3212 = !DILocation(line: 906, column: 4, scope: !3208)
!3213 = !DILocation(line: 906, column: 7, scope: !3208)
!3214 = !DILocation(line: 904, column: 7, scope: !3195)
!3215 = !DILocation(line: 907, column: 39, scope: !3208)
!3216 = !DILocation(line: 908, column: 11, scope: !3208)
!3217 = !DILocation(line: 907, column: 12, scope: !3208)
!3218 = !DILocation(line: 907, column: 5, scope: !3208)
!3219 = !DILocation(line: 912, column: 38, scope: !3195)
!3220 = !DILocation(line: 913, column: 10, scope: !3195)
!3221 = !DILocation(line: 912, column: 11, scope: !3195)
!3222 = !DILocation(line: 914, column: 4, scope: !3195)
!3223 = !DILocation(line: 914, column: 34, scope: !3195)
!3224 = !DILocation(line: 915, column: 6, scope: !3195)
!3225 = !DILocation(line: 914, column: 7, scope: !3195)
!3226 = !DILocation(line: 0, scope: !3195)
!3227 = !DILocation(line: 912, column: 10, scope: !3195)
!3228 = !DILocation(line: 912, column: 3, scope: !3195)
!3229 = !DILocation(line: 916, column: 1, scope: !3195)
!3230 = distinct !DISubprogram(name: "fold_const_aggregate_ref", scope: !3, file: !3, line: 1217, type: !3104, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3231 = !DILocalVariable(name: "t", arg: 1, scope: !3230, file: !3, line: 1217, type: !1669)
!3232 = !DILocation(line: 1217, column: 32, scope: !3230)
!3233 = !DILocalVariable(name: "value", scope: !3230, file: !3, line: 1219, type: !2966)
!3234 = !DILocation(line: 1219, column: 17, scope: !3230)
!3235 = !DILocalVariable(name: "base", scope: !3230, file: !3, line: 1220, type: !1669)
!3236 = !DILocation(line: 1220, column: 8, scope: !3230)
!3237 = !DILocalVariable(name: "ctor", scope: !3230, file: !3, line: 1220, type: !1669)
!3238 = !DILocation(line: 1220, column: 14, scope: !3230)
!3239 = !DILocalVariable(name: "idx", scope: !3230, file: !3, line: 1220, type: !1669)
!3240 = !DILocation(line: 1220, column: 20, scope: !3230)
!3241 = !DILocalVariable(name: "field", scope: !3230, file: !3, line: 1220, type: !1669)
!3242 = !DILocation(line: 1220, column: 25, scope: !3230)
!3243 = !DILocalVariable(name: "cnt", scope: !3230, file: !3, line: 1221, type: !1682)
!3244 = !DILocation(line: 1221, column: 26, scope: !3230)
!3245 = !DILocalVariable(name: "cfield", scope: !3230, file: !3, line: 1222, type: !1669)
!3246 = !DILocation(line: 1222, column: 8, scope: !3230)
!3247 = !DILocalVariable(name: "cval", scope: !3230, file: !3, line: 1222, type: !1669)
!3248 = !DILocation(line: 1222, column: 16, scope: !3230)
!3249 = !DILocation(line: 1224, column: 7, scope: !3250)
!3250 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 1224, column: 7)
!3251 = !DILocation(line: 1224, column: 39, scope: !3250)
!3252 = !DILocation(line: 1224, column: 7, scope: !3230)
!3253 = !DILocation(line: 1225, column: 39, scope: !3250)
!3254 = !DILocation(line: 1225, column: 12, scope: !3250)
!3255 = !DILocation(line: 1225, column: 5, scope: !3250)
!3256 = !DILocation(line: 1227, column: 11, scope: !3230)
!3257 = !DILocation(line: 1227, column: 3, scope: !3230)
!3258 = !DILocation(line: 1234, column: 14, scope: !3259)
!3259 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 1228, column: 5)
!3260 = !DILocation(line: 1234, column: 12, scope: !3259)
!3261 = !DILocation(line: 1235, column: 15, scope: !3259)
!3262 = !DILocation(line: 1235, column: 7, scope: !3259)
!3263 = !DILocation(line: 1238, column: 9, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3265, file: !3, line: 1238, column: 8)
!3265 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1236, column: 2)
!3266 = !DILocation(line: 1239, column: 8, scope: !3264)
!3267 = !DILocation(line: 1239, column: 11, scope: !3264)
!3268 = !DILocation(line: 1239, column: 40, scope: !3264)
!3269 = !DILocation(line: 1240, column: 8, scope: !3264)
!3270 = !DILocation(line: 1240, column: 20, scope: !3264)
!3271 = !DILocation(line: 1240, column: 35, scope: !3264)
!3272 = !DILocation(line: 1240, column: 12, scope: !3264)
!3273 = !DILocation(line: 1238, column: 8, scope: !3265)
!3274 = !DILocation(line: 1241, column: 6, scope: !3264)
!3275 = !DILocation(line: 1243, column: 11, scope: !3265)
!3276 = !DILocation(line: 1243, column: 9, scope: !3265)
!3277 = !DILocation(line: 1244, column: 4, scope: !3265)
!3278 = !DILocation(line: 1248, column: 37, scope: !3265)
!3279 = !DILocation(line: 1248, column: 11, scope: !3265)
!3280 = !DILocation(line: 1248, column: 9, scope: !3265)
!3281 = !DILocation(line: 1249, column: 4, scope: !3265)
!3282 = !DILocation(line: 1253, column: 11, scope: !3265)
!3283 = !DILocation(line: 1253, column: 9, scope: !3265)
!3284 = !DILocation(line: 1254, column: 4, scope: !3265)
!3285 = !DILocation(line: 1257, column: 4, scope: !3265)
!3286 = !DILocation(line: 1260, column: 11, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1260, column: 11)
!3288 = !DILocation(line: 1260, column: 16, scope: !3287)
!3289 = !DILocation(line: 1261, column: 4, scope: !3287)
!3290 = !DILocation(line: 1261, column: 8, scope: !3287)
!3291 = !DILocation(line: 1261, column: 25, scope: !3287)
!3292 = !DILocation(line: 1262, column: 8, scope: !3287)
!3293 = !DILocation(line: 1262, column: 11, scope: !3287)
!3294 = !DILocation(line: 1262, column: 28, scope: !3287)
!3295 = !DILocation(line: 1263, column: 4, scope: !3287)
!3296 = !DILocation(line: 1263, column: 8, scope: !3287)
!3297 = !DILocation(line: 1260, column: 11, scope: !3259)
!3298 = !DILocation(line: 1264, column: 2, scope: !3287)
!3299 = !DILocation(line: 1268, column: 13, scope: !3259)
!3300 = !DILocation(line: 1268, column: 11, scope: !3259)
!3301 = !DILocation(line: 1269, column: 15, scope: !3259)
!3302 = !DILocation(line: 1269, column: 7, scope: !3259)
!3303 = !DILocation(line: 1272, column: 28, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 1272, column: 8)
!3305 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1270, column: 2)
!3306 = !DILocation(line: 1272, column: 17, scope: !3304)
!3307 = !DILocation(line: 1272, column: 15, scope: !3304)
!3308 = !DILocation(line: 1273, column: 8, scope: !3304)
!3309 = !DILocation(line: 1273, column: 11, scope: !3304)
!3310 = !DILocation(line: 1273, column: 18, scope: !3304)
!3311 = !DILocation(line: 1273, column: 30, scope: !3304)
!3312 = !DILocation(line: 1274, column: 8, scope: !3304)
!3313 = !DILocation(line: 1274, column: 11, scope: !3304)
!3314 = !DILocation(line: 1274, column: 36, scope: !3304)
!3315 = !DILocation(line: 1272, column: 8, scope: !3305)
!3316 = !DILocation(line: 1275, column: 12, scope: !3304)
!3317 = !DILocation(line: 1275, column: 19, scope: !3304)
!3318 = !DILocation(line: 1275, column: 10, scope: !3304)
!3319 = !DILocation(line: 1275, column: 6, scope: !3304)
!3320 = !DILocation(line: 1277, column: 6, scope: !3304)
!3321 = !DILocation(line: 1278, column: 4, scope: !3305)
!3322 = !DILocation(line: 1281, column: 4, scope: !3305)
!3323 = !DILocation(line: 1284, column: 4, scope: !3305)
!3324 = !DILocation(line: 1288, column: 11, scope: !3325)
!3325 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1288, column: 11)
!3326 = !DILocation(line: 1288, column: 28, scope: !3325)
!3327 = !DILocation(line: 1288, column: 11, scope: !3259)
!3328 = !DILocation(line: 1290, column: 9, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3330, file: !3, line: 1290, column: 8)
!3330 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 1289, column: 2)
!3331 = !DILocation(line: 1291, column: 12, scope: !3329)
!3332 = !DILocation(line: 1291, column: 9, scope: !3329)
!3333 = !DILocation(line: 1292, column: 8, scope: !3329)
!3334 = !DILocation(line: 1292, column: 12, scope: !3329)
!3335 = !DILocation(line: 1293, column: 12, scope: !3329)
!3336 = !DILocation(line: 1294, column: 8, scope: !3329)
!3337 = !DILocation(line: 1294, column: 11, scope: !3329)
!3338 = !DILocation(line: 1294, column: 68, scope: !3329)
!3339 = !DILocation(line: 1295, column: 8, scope: !3329)
!3340 = !DILocation(line: 1295, column: 29, scope: !3329)
!3341 = !DILocation(line: 1295, column: 34, scope: !3329)
!3342 = !DILocation(line: 1295, column: 11, scope: !3329)
!3343 = !DILocation(line: 1295, column: 61, scope: !3329)
!3344 = !DILocation(line: 1290, column: 8, scope: !3330)
!3345 = !DILocation(line: 1296, column: 33, scope: !3329)
!3346 = !DILocation(line: 1297, column: 13, scope: !3329)
!3347 = !DILocation(line: 1298, column: 7, scope: !3329)
!3348 = !DILocation(line: 1297, column: 12, scope: !3329)
!3349 = !DILocation(line: 1296, column: 13, scope: !3329)
!3350 = !DILocation(line: 1296, column: 6, scope: !3329)
!3351 = !DILocation(line: 1299, column: 4, scope: !3330)
!3352 = !DILocation(line: 1303, column: 7, scope: !3353)
!3353 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1303, column: 7)
!3354 = !DILocation(line: 1303, column: 7, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 1303, column: 7)
!3356 = !DILocation(line: 1304, column: 26, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3355, file: !3, line: 1304, column: 6)
!3358 = !DILocation(line: 1304, column: 34, scope: !3357)
!3359 = !DILocation(line: 1304, column: 6, scope: !3357)
!3360 = !DILocation(line: 1304, column: 6, scope: !3355)
!3361 = !DILocation(line: 1306, column: 6, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3357, file: !3, line: 1305, column: 4)
!3363 = !DILocation(line: 1307, column: 10, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3362, file: !3, line: 1307, column: 10)
!3365 = !DILocation(line: 1307, column: 27, scope: !3364)
!3366 = !DILocation(line: 1307, column: 10, scope: !3362)
!3367 = !DILocalVariable(name: "base", scope: !3368, file: !3, line: 1309, type: !1669)
!3368 = distinct !DILexicalBlock(scope: !3364, file: !3, line: 1308, column: 8)
!3369 = !DILocation(line: 1309, column: 8, scope: !3368)
!3370 = !DILocation(line: 1309, column: 33, scope: !3368)
!3371 = !DILocation(line: 1309, column: 15, scope: !3368)
!3372 = !DILocation(line: 1310, column: 7, scope: !3373)
!3373 = distinct !DILexicalBlock(scope: !3368, file: !3, line: 1310, column: 7)
!3374 = !DILocation(line: 1310, column: 12, scope: !3373)
!3375 = !DILocation(line: 1310, column: 15, scope: !3373)
!3376 = !DILocation(line: 1310, column: 32, scope: !3373)
!3377 = !DILocation(line: 1310, column: 7, scope: !3368)
!3378 = !DILocation(line: 1311, column: 25, scope: !3373)
!3379 = !DILocation(line: 1311, column: 5, scope: !3373)
!3380 = !DILocation(line: 1312, column: 8, scope: !3368)
!3381 = !DILocation(line: 1313, column: 13, scope: !3362)
!3382 = !DILocation(line: 1313, column: 6, scope: !3362)
!3383 = !DILocation(line: 1304, column: 37, scope: !3357)
!3384 = distinct !{!3384, !3352, !3385}
!3385 = !DILocation(line: 1314, column: 4, scope: !3353)
!3386 = !DILocation(line: 1315, column: 7, scope: !3259)
!3387 = !DILocation(line: 1322, column: 14, scope: !3259)
!3388 = !DILocation(line: 1322, column: 12, scope: !3259)
!3389 = !DILocation(line: 1323, column: 15, scope: !3259)
!3390 = !DILocation(line: 1323, column: 7, scope: !3259)
!3391 = !DILocation(line: 1326, column: 9, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3393, file: !3, line: 1326, column: 8)
!3393 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1324, column: 2)
!3394 = !DILocation(line: 1327, column: 8, scope: !3392)
!3395 = !DILocation(line: 1327, column: 11, scope: !3392)
!3396 = !DILocation(line: 1327, column: 40, scope: !3392)
!3397 = !DILocation(line: 1328, column: 8, scope: !3392)
!3398 = !DILocation(line: 1328, column: 20, scope: !3392)
!3399 = !DILocation(line: 1328, column: 35, scope: !3392)
!3400 = !DILocation(line: 1328, column: 12, scope: !3392)
!3401 = !DILocation(line: 1326, column: 8, scope: !3393)
!3402 = !DILocation(line: 1329, column: 6, scope: !3392)
!3403 = !DILocation(line: 1331, column: 11, scope: !3393)
!3404 = !DILocation(line: 1331, column: 9, scope: !3393)
!3405 = !DILocation(line: 1332, column: 4, scope: !3393)
!3406 = !DILocation(line: 1336, column: 37, scope: !3393)
!3407 = !DILocation(line: 1336, column: 11, scope: !3393)
!3408 = !DILocation(line: 1336, column: 9, scope: !3393)
!3409 = !DILocation(line: 1337, column: 4, scope: !3393)
!3410 = !DILocation(line: 1340, column: 4, scope: !3393)
!3411 = !DILocation(line: 1343, column: 11, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1343, column: 11)
!3413 = !DILocation(line: 1343, column: 16, scope: !3412)
!3414 = !DILocation(line: 1344, column: 4, scope: !3412)
!3415 = !DILocation(line: 1344, column: 7, scope: !3412)
!3416 = !DILocation(line: 1344, column: 24, scope: !3412)
!3417 = !DILocation(line: 1345, column: 4, scope: !3412)
!3418 = !DILocation(line: 1345, column: 8, scope: !3412)
!3419 = !DILocation(line: 1343, column: 11, scope: !3259)
!3420 = !DILocation(line: 1346, column: 2, scope: !3412)
!3421 = !DILocation(line: 1348, column: 15, scope: !3259)
!3422 = !DILocation(line: 1348, column: 13, scope: !3259)
!3423 = !DILocation(line: 1350, column: 7, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1350, column: 7)
!3425 = !DILocation(line: 1350, column: 7, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3424, file: !3, line: 1350, column: 7)
!3427 = !DILocation(line: 1351, column: 6, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3426, file: !3, line: 1351, column: 6)
!3429 = !DILocation(line: 1351, column: 16, scope: !3428)
!3430 = !DILocation(line: 1351, column: 13, scope: !3428)
!3431 = !DILocation(line: 1353, column: 6, scope: !3428)
!3432 = !DILocation(line: 1353, column: 11, scope: !3428)
!3433 = !DILocation(line: 1351, column: 6, scope: !3426)
!3434 = !DILocation(line: 1355, column: 6, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3428, file: !3, line: 1354, column: 4)
!3436 = !DILocation(line: 1356, column: 10, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 1356, column: 10)
!3438 = !DILocation(line: 1356, column: 27, scope: !3437)
!3439 = !DILocation(line: 1356, column: 10, scope: !3435)
!3440 = !DILocalVariable(name: "base", scope: !3441, file: !3, line: 1358, type: !1669)
!3441 = distinct !DILexicalBlock(scope: !3437, file: !3, line: 1357, column: 8)
!3442 = !DILocation(line: 1358, column: 8, scope: !3441)
!3443 = !DILocation(line: 1358, column: 33, scope: !3441)
!3444 = !DILocation(line: 1358, column: 15, scope: !3441)
!3445 = !DILocation(line: 1359, column: 7, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 1359, column: 7)
!3447 = !DILocation(line: 1359, column: 12, scope: !3446)
!3448 = !DILocation(line: 1359, column: 15, scope: !3446)
!3449 = !DILocation(line: 1359, column: 32, scope: !3446)
!3450 = !DILocation(line: 1359, column: 7, scope: !3441)
!3451 = !DILocation(line: 1360, column: 25, scope: !3446)
!3452 = !DILocation(line: 1360, column: 5, scope: !3446)
!3453 = !DILocation(line: 1361, column: 8, scope: !3441)
!3454 = !DILocation(line: 1362, column: 13, scope: !3435)
!3455 = !DILocation(line: 1362, column: 6, scope: !3435)
!3456 = distinct !{!3456, !3423, !3457}
!3457 = !DILocation(line: 1363, column: 4, scope: !3424)
!3458 = !DILocation(line: 1364, column: 7, scope: !3259)
!3459 = !DILocalVariable(name: "c", scope: !3460, file: !3, line: 1369, type: !1669)
!3460 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1368, column: 7)
!3461 = !DILocation(line: 1369, column: 7, scope: !3460)
!3462 = !DILocation(line: 1369, column: 37, scope: !3460)
!3463 = !DILocation(line: 1369, column: 11, scope: !3460)
!3464 = !DILocation(line: 1370, column: 6, scope: !3465)
!3465 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 1370, column: 6)
!3466 = !DILocation(line: 1370, column: 8, scope: !3465)
!3467 = !DILocation(line: 1370, column: 11, scope: !3465)
!3468 = !DILocation(line: 1370, column: 25, scope: !3465)
!3469 = !DILocation(line: 1370, column: 6, scope: !3460)
!3470 = !DILocation(line: 1371, column: 11, scope: !3465)
!3471 = !DILocation(line: 1371, column: 4, scope: !3465)
!3472 = !DILocation(line: 1373, column: 2, scope: !3460)
!3473 = !DILocalVariable(name: "base", scope: !3474, file: !3, line: 1378, type: !1669)
!3474 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1377, column: 7)
!3475 = !DILocation(line: 1378, column: 7, scope: !3474)
!3476 = !DILocation(line: 1378, column: 14, scope: !3474)
!3477 = !DILocation(line: 1379, column: 6, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3474, file: !3, line: 1379, column: 6)
!3479 = !DILocation(line: 1379, column: 23, scope: !3478)
!3480 = !DILocation(line: 1380, column: 6, scope: !3478)
!3481 = !DILocation(line: 1380, column: 29, scope: !3478)
!3482 = !DILocation(line: 1380, column: 18, scope: !3478)
!3483 = !DILocation(line: 1380, column: 16, scope: !3478)
!3484 = !DILocation(line: 1381, column: 6, scope: !3478)
!3485 = !DILocation(line: 1381, column: 9, scope: !3478)
!3486 = !DILocation(line: 1381, column: 16, scope: !3478)
!3487 = !DILocation(line: 1381, column: 28, scope: !3478)
!3488 = !DILocation(line: 1382, column: 6, scope: !3478)
!3489 = !DILocation(line: 1382, column: 9, scope: !3478)
!3490 = !DILocation(line: 1382, column: 34, scope: !3478)
!3491 = !DILocation(line: 1383, column: 6, scope: !3478)
!3492 = !DILocation(line: 1383, column: 36, scope: !3478)
!3493 = !DILocation(line: 1384, column: 8, scope: !3478)
!3494 = !DILocation(line: 1383, column: 9, scope: !3478)
!3495 = !DILocation(line: 1379, column: 6, scope: !3474)
!3496 = !DILocation(line: 1385, column: 37, scope: !3478)
!3497 = !DILocation(line: 1385, column: 11, scope: !3478)
!3498 = !DILocation(line: 1385, column: 4, scope: !3478)
!3499 = !DILocation(line: 1386, column: 2, scope: !3474)
!3500 = !DILocation(line: 1390, column: 7, scope: !3259)
!3501 = !DILocation(line: 1393, column: 3, scope: !3230)
!3502 = !DILocation(line: 1394, column: 1, scope: !3230)
!3503 = distinct !DISubprogram(name: "get_value", scope: !3, file: !3, line: 387, type: !3504, scopeLine: 388, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3504 = !DISubroutineType(types: !3505)
!3505 = !{!2966, !1669}
!3506 = !DILocalVariable(name: "var", arg: 1, scope: !3503, file: !3, line: 387, type: !1669)
!3507 = !DILocation(line: 387, column: 17, scope: !3503)
!3508 = !DILocalVariable(name: "val", scope: !3503, file: !3, line: 389, type: !2966)
!3509 = !DILocation(line: 389, column: 17, scope: !3503)
!3510 = !DILocation(line: 391, column: 7, scope: !3511)
!3511 = distinct !DILexicalBlock(scope: !3503, file: !3, line: 391, column: 7)
!3512 = !DILocation(line: 391, column: 17, scope: !3511)
!3513 = !DILocation(line: 391, column: 7, scope: !3503)
!3514 = !DILocation(line: 392, column: 5, scope: !3511)
!3515 = !DILocation(line: 394, column: 10, scope: !3503)
!3516 = !DILocation(line: 394, column: 20, scope: !3503)
!3517 = !DILocation(line: 394, column: 7, scope: !3503)
!3518 = !DILocation(line: 395, column: 7, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3503, file: !3, line: 395, column: 7)
!3520 = !DILocation(line: 395, column: 12, scope: !3519)
!3521 = !DILocation(line: 395, column: 24, scope: !3519)
!3522 = !DILocation(line: 395, column: 7, scope: !3503)
!3523 = !DILocation(line: 396, column: 6, scope: !3519)
!3524 = !DILocation(line: 396, column: 31, scope: !3519)
!3525 = !DILocation(line: 396, column: 12, scope: !3519)
!3526 = !DILocation(line: 396, column: 5, scope: !3519)
!3527 = !DILocation(line: 398, column: 29, scope: !3503)
!3528 = !DILocation(line: 398, column: 3, scope: !3503)
!3529 = !DILocation(line: 400, column: 10, scope: !3503)
!3530 = !DILocation(line: 400, column: 3, scope: !3503)
!3531 = !DILocation(line: 401, column: 1, scope: !3503)
!3532 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !135, file: !135, line: 1537, type: !3533, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3533 = !DISubroutineType(types: !3534)
!3534 = !{!7, !3535}
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3536, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2744)
!3537 = !DILocalVariable(name: "vec_", arg: 1, scope: !3532, file: !135, line: 1537, type: !3535)
!3538 = !DILocation(line: 1537, column: 1, scope: !3532)
!3539 = distinct !DISubprogram(name: "VEC_constructor_elt_base_index", scope: !135, file: !135, line: 1537, type: !3540, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3540 = !DISubroutineType(types: !3541)
!3541 = !{!3542, !3543, !7}
!3542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2751, size: 64)
!3543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2744, size: 64)
!3544 = !DILocalVariable(name: "vec_", arg: 1, scope: !3539, file: !135, line: 1537, type: !3543)
!3545 = !DILocation(line: 1537, column: 1, scope: !3539)
!3546 = !DILocalVariable(name: "ix_", arg: 2, scope: !3539, file: !135, line: 1537, type: !7)
!3547 = !DILocation(line: 0, scope: !3539)
!3548 = distinct !DISubprogram(name: "gate_ccp", scope: !3, file: !3, line: 1750, type: !2984, scopeLine: 1751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3549 = !DILocation(line: 1752, column: 10, scope: !3548)
!3550 = !DILocation(line: 1752, column: 24, scope: !3548)
!3551 = !DILocation(line: 1752, column: 3, scope: !3548)
!3552 = distinct !DISubprogram(name: "do_ssa_ccp", scope: !3, file: !3, line: 1738, type: !2988, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3553 = !DILocation(line: 1740, column: 3, scope: !3552)
!3554 = !DILocation(line: 1741, column: 3, scope: !3552)
!3555 = !DILocation(line: 1742, column: 7, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 1742, column: 7)
!3557 = !DILocation(line: 1742, column: 7, scope: !3552)
!3558 = !DILocation(line: 1743, column: 5, scope: !3556)
!3559 = !DILocation(line: 1745, column: 5, scope: !3556)
!3560 = !DILocation(line: 1746, column: 1, scope: !3552)
!3561 = distinct !DISubprogram(name: "maybe_fold_offset_to_reference", scope: !3, file: !3, line: 2053, type: !3562, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3562 = !DISubroutineType(types: !3563)
!3563 = !{!1669, !1756, !1669, !1669, !1669}
!3564 = !DILocalVariable(name: "loc", arg: 1, scope: !3561, file: !3, line: 2053, type: !1756)
!3565 = !DILocation(line: 2053, column: 44, scope: !3561)
!3566 = !DILocalVariable(name: "base", arg: 2, scope: !3561, file: !3, line: 2053, type: !1669)
!3567 = !DILocation(line: 2053, column: 54, scope: !3561)
!3568 = !DILocalVariable(name: "offset", arg: 3, scope: !3561, file: !3, line: 2053, type: !1669)
!3569 = !DILocation(line: 2053, column: 65, scope: !3561)
!3570 = !DILocalVariable(name: "orig_type", arg: 4, scope: !3561, file: !3, line: 2054, type: !1669)
!3571 = !DILocation(line: 2054, column: 10, scope: !3561)
!3572 = !DILocalVariable(name: "ret", scope: !3561, file: !3, line: 2056, type: !1669)
!3573 = !DILocation(line: 2056, column: 8, scope: !3561)
!3574 = !DILocalVariable(name: "type", scope: !3561, file: !3, line: 2057, type: !1669)
!3575 = !DILocation(line: 2057, column: 8, scope: !3561)
!3576 = !DILocation(line: 2059, column: 3, scope: !3561)
!3577 = !DILocation(line: 2060, column: 7, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 2060, column: 7)
!3579 = !DILocation(line: 2060, column: 24, scope: !3578)
!3580 = !DILocation(line: 2060, column: 7, scope: !3561)
!3581 = !DILocation(line: 2061, column: 5, scope: !3578)
!3582 = !DILocation(line: 2063, column: 10, scope: !3561)
!3583 = !DILocation(line: 2063, column: 8, scope: !3561)
!3584 = !DILocation(line: 2069, column: 28, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 2069, column: 7)
!3586 = !DILocation(line: 2069, column: 7, scope: !3585)
!3587 = !DILocation(line: 2069, column: 7, scope: !3561)
!3588 = !DILocalVariable(name: "sub_offset", scope: !3589, file: !3, line: 2071, type: !1684)
!3589 = distinct !DILexicalBlock(scope: !3585, file: !3, line: 2070, column: 5)
!3590 = !DILocation(line: 2071, column: 21, scope: !3589)
!3591 = !DILocalVariable(name: "size", scope: !3589, file: !3, line: 2071, type: !1684)
!3592 = !DILocation(line: 2071, column: 33, scope: !3589)
!3593 = !DILocalVariable(name: "maxsize", scope: !3589, file: !3, line: 2071, type: !1684)
!3594 = !DILocation(line: 2071, column: 39, scope: !3589)
!3595 = !DILocalVariable(name: "newbase", scope: !3589, file: !3, line: 2072, type: !1669)
!3596 = !DILocation(line: 2072, column: 12, scope: !3589)
!3597 = !DILocation(line: 2073, column: 42, scope: !3589)
!3598 = !DILocation(line: 2073, column: 17, scope: !3589)
!3599 = !DILocation(line: 2073, column: 15, scope: !3589)
!3600 = !DILocation(line: 2075, column: 7, scope: !3589)
!3601 = !DILocation(line: 2076, column: 11, scope: !3602)
!3602 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 2076, column: 11)
!3603 = !DILocation(line: 2076, column: 19, scope: !3602)
!3604 = !DILocation(line: 2076, column: 16, scope: !3602)
!3605 = !DILocation(line: 2077, column: 4, scope: !3602)
!3606 = !DILocation(line: 2077, column: 7, scope: !3602)
!3607 = !DILocation(line: 2077, column: 12, scope: !3602)
!3608 = !DILocation(line: 2078, column: 4, scope: !3602)
!3609 = !DILocation(line: 2078, column: 9, scope: !3602)
!3610 = !DILocation(line: 2078, column: 20, scope: !3602)
!3611 = !DILocation(line: 2076, column: 11, scope: !3589)
!3612 = !DILocation(line: 2080, column: 11, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3602, file: !3, line: 2079, column: 2)
!3614 = !DILocation(line: 2080, column: 9, scope: !3613)
!3615 = !DILocation(line: 2081, column: 8, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 2081, column: 8)
!3617 = !DILocation(line: 2081, column: 8, scope: !3613)
!3618 = !DILocation(line: 2082, column: 43, scope: !3616)
!3619 = !DILocation(line: 2083, column: 26, scope: !3616)
!3620 = !DILocation(line: 2084, column: 12, scope: !3616)
!3621 = !DILocation(line: 2084, column: 23, scope: !3616)
!3622 = !DILocation(line: 2083, column: 11, scope: !3616)
!3623 = !DILocation(line: 2082, column: 15, scope: !3616)
!3624 = !DILocation(line: 2082, column: 13, scope: !3616)
!3625 = !DILocation(line: 2082, column: 6, scope: !3616)
!3626 = !DILocation(line: 2085, column: 2, scope: !3613)
!3627 = !DILocation(line: 2086, column: 5, scope: !3589)
!3628 = !DILocation(line: 2087, column: 34, scope: !3629)
!3629 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 2087, column: 7)
!3630 = !DILocation(line: 2087, column: 45, scope: !3629)
!3631 = !DILocation(line: 2087, column: 7, scope: !3629)
!3632 = !DILocation(line: 2088, column: 7, scope: !3629)
!3633 = !DILocation(line: 2088, column: 25, scope: !3629)
!3634 = !DILocation(line: 2088, column: 10, scope: !3629)
!3635 = !DILocation(line: 2087, column: 7, scope: !3561)
!3636 = !DILocation(line: 2089, column: 12, scope: !3629)
!3637 = !DILocation(line: 2089, column: 5, scope: !3629)
!3638 = !DILocation(line: 2090, column: 10, scope: !3561)
!3639 = !DILocation(line: 2090, column: 8, scope: !3561)
!3640 = !DILocation(line: 2092, column: 45, scope: !3561)
!3641 = !DILocation(line: 2092, column: 50, scope: !3561)
!3642 = !DILocation(line: 2092, column: 56, scope: !3561)
!3643 = !DILocation(line: 2092, column: 62, scope: !3561)
!3644 = !DILocation(line: 2092, column: 70, scope: !3561)
!3645 = !DILocation(line: 2092, column: 9, scope: !3561)
!3646 = !DILocation(line: 2092, column: 7, scope: !3561)
!3647 = !DILocation(line: 2093, column: 8, scope: !3648)
!3648 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 2093, column: 7)
!3649 = !DILocation(line: 2093, column: 7, scope: !3561)
!3650 = !DILocation(line: 2094, column: 43, scope: !3648)
!3651 = !DILocation(line: 2094, column: 48, scope: !3648)
!3652 = !DILocation(line: 2094, column: 54, scope: !3648)
!3653 = !DILocation(line: 2094, column: 62, scope: !3648)
!3654 = !DILocation(line: 2094, column: 11, scope: !3648)
!3655 = !DILocation(line: 2094, column: 9, scope: !3648)
!3656 = !DILocation(line: 2094, column: 5, scope: !3648)
!3657 = !DILocation(line: 2096, column: 10, scope: !3561)
!3658 = !DILocation(line: 2096, column: 3, scope: !3561)
!3659 = !DILocation(line: 2097, column: 1, scope: !3561)
!3660 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !3661, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3661 = !DISubroutineType(types: !3662)
!3662 = !{!1748, !3663}
!3663 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1670, line: 59, baseType: !2961)
!3664 = !DILocalVariable(name: "t", arg: 1, scope: !3660, file: !135, line: 4551, type: !3663)
!3665 = !DILocation(line: 4551, column: 33, scope: !3660)
!3666 = !DILocation(line: 4553, column: 11, scope: !3660)
!3667 = !DILocation(line: 4553, column: 3, scope: !3660)
!3668 = !DILocation(line: 4562, column: 7, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3660, file: !135, line: 4554, column: 5)
!3670 = !DILocation(line: 4565, column: 7, scope: !3669)
!3671 = !DILocation(line: 4567, column: 1, scope: !3660)
!3672 = distinct !DISubprogram(name: "maybe_fold_offset_to_component_ref", scope: !3, file: !3, line: 1933, type: !3673, scopeLine: 1935, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3673 = !DISubroutineType(types: !3674)
!3674 = !{!1669, !1756, !1669, !1669, !1669, !1669}
!3675 = !DILocalVariable(name: "loc", arg: 1, scope: !3672, file: !3, line: 1933, type: !1756)
!3676 = !DILocation(line: 1933, column: 48, scope: !3672)
!3677 = !DILocalVariable(name: "record_type", arg: 2, scope: !3672, file: !3, line: 1933, type: !1669)
!3678 = !DILocation(line: 1933, column: 58, scope: !3672)
!3679 = !DILocalVariable(name: "base", arg: 3, scope: !3672, file: !3, line: 1934, type: !1669)
!3680 = !DILocation(line: 1934, column: 14, scope: !3672)
!3681 = !DILocalVariable(name: "offset", arg: 4, scope: !3672, file: !3, line: 1934, type: !1669)
!3682 = !DILocation(line: 1934, column: 25, scope: !3672)
!3683 = !DILocalVariable(name: "orig_type", arg: 5, scope: !3672, file: !3, line: 1934, type: !1669)
!3684 = !DILocation(line: 1934, column: 38, scope: !3672)
!3685 = !DILocalVariable(name: "f", scope: !3672, file: !3, line: 1936, type: !1669)
!3686 = !DILocation(line: 1936, column: 8, scope: !3672)
!3687 = !DILocalVariable(name: "t", scope: !3672, file: !3, line: 1936, type: !1669)
!3688 = !DILocation(line: 1936, column: 11, scope: !3672)
!3689 = !DILocalVariable(name: "field_type", scope: !3672, file: !3, line: 1936, type: !1669)
!3690 = !DILocation(line: 1936, column: 14, scope: !3672)
!3691 = !DILocalVariable(name: "tail_array_field", scope: !3672, file: !3, line: 1936, type: !1669)
!3692 = !DILocation(line: 1936, column: 26, scope: !3672)
!3693 = !DILocalVariable(name: "field_offset", scope: !3672, file: !3, line: 1936, type: !1669)
!3694 = !DILocation(line: 1936, column: 44, scope: !3672)
!3695 = !DILocalVariable(name: "ret", scope: !3672, file: !3, line: 1937, type: !1669)
!3696 = !DILocation(line: 1937, column: 8, scope: !3672)
!3697 = !DILocalVariable(name: "new_base", scope: !3672, file: !3, line: 1938, type: !1669)
!3698 = !DILocation(line: 1938, column: 8, scope: !3672)
!3699 = !DILocation(line: 1940, column: 7, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 1940, column: 7)
!3701 = !DILocation(line: 1940, column: 31, scope: !3700)
!3702 = !DILocation(line: 1941, column: 7, scope: !3700)
!3703 = !DILocation(line: 1941, column: 10, scope: !3700)
!3704 = !DILocation(line: 1941, column: 34, scope: !3700)
!3705 = !DILocation(line: 1942, column: 7, scope: !3700)
!3706 = !DILocation(line: 1942, column: 10, scope: !3700)
!3707 = !DILocation(line: 1942, column: 34, scope: !3700)
!3708 = !DILocation(line: 1940, column: 7, scope: !3672)
!3709 = !DILocation(line: 1943, column: 5, scope: !3700)
!3710 = !DILocation(line: 1946, column: 34, scope: !3711)
!3711 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 1946, column: 7)
!3712 = !DILocation(line: 1946, column: 47, scope: !3711)
!3713 = !DILocation(line: 1946, column: 7, scope: !3711)
!3714 = !DILocation(line: 1946, column: 7, scope: !3672)
!3715 = !DILocation(line: 1947, column: 5, scope: !3711)
!3716 = !DILocation(line: 1949, column: 20, scope: !3672)
!3717 = !DILocation(line: 1950, column: 12, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 1950, column: 3)
!3719 = !DILocation(line: 1950, column: 10, scope: !3718)
!3720 = !DILocation(line: 1950, column: 8, scope: !3718)
!3721 = !DILocation(line: 1950, column: 39, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 1950, column: 3)
!3723 = !DILocation(line: 1950, column: 3, scope: !3718)
!3724 = !DILocalVariable(name: "cmp", scope: !3725, file: !3, line: 1952, type: !1725)
!3725 = distinct !DILexicalBlock(scope: !3722, file: !3, line: 1951, column: 5)
!3726 = !DILocation(line: 1952, column: 11, scope: !3725)
!3727 = !DILocation(line: 1954, column: 11, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1954, column: 11)
!3729 = !DILocation(line: 1954, column: 25, scope: !3728)
!3730 = !DILocation(line: 1954, column: 11, scope: !3725)
!3731 = !DILocation(line: 1955, column: 2, scope: !3728)
!3732 = !DILocation(line: 1956, column: 11, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1956, column: 11)
!3734 = !DILocation(line: 1956, column: 11, scope: !3725)
!3735 = !DILocation(line: 1957, column: 2, scope: !3733)
!3736 = !DILocation(line: 1959, column: 12, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1959, column: 11)
!3738 = !DILocation(line: 1959, column: 11, scope: !3725)
!3739 = !DILocation(line: 1960, column: 2, scope: !3737)
!3740 = !DILocation(line: 1961, column: 37, scope: !3725)
!3741 = !DILocation(line: 1961, column: 22, scope: !3725)
!3742 = !DILocation(line: 1961, column: 20, scope: !3725)
!3743 = !DILocation(line: 1962, column: 11, scope: !3744)
!3744 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1962, column: 11)
!3745 = !DILocation(line: 1962, column: 36, scope: !3744)
!3746 = !DILocation(line: 1962, column: 11, scope: !3725)
!3747 = !DILocation(line: 1963, column: 2, scope: !3744)
!3748 = !DILocation(line: 1968, column: 12, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1968, column: 11)
!3750 = !DILocation(line: 1968, column: 11, scope: !3725)
!3751 = !DILocation(line: 1969, column: 2, scope: !3749)
!3752 = !DILocation(line: 1972, column: 24, scope: !3725)
!3753 = !DILocation(line: 1975, column: 35, scope: !3725)
!3754 = !DILocation(line: 1975, column: 49, scope: !3725)
!3755 = !DILocation(line: 1975, column: 13, scope: !3725)
!3756 = !DILocation(line: 1975, column: 11, scope: !3725)
!3757 = !DILocation(line: 1976, column: 11, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1976, column: 11)
!3759 = !DILocation(line: 1976, column: 15, scope: !3758)
!3760 = !DILocation(line: 1976, column: 11, scope: !3725)
!3761 = !DILocation(line: 1977, column: 2, scope: !3758)
!3762 = !DILocation(line: 1979, column: 20, scope: !3725)
!3763 = !DILocation(line: 1979, column: 18, scope: !3725)
!3764 = !DILocation(line: 1983, column: 11, scope: !3765)
!3765 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1983, column: 11)
!3766 = !DILocation(line: 1983, column: 15, scope: !3765)
!3767 = !DILocation(line: 1984, column: 4, scope: !3765)
!3768 = !DILocation(line: 1984, column: 34, scope: !3765)
!3769 = !DILocation(line: 1984, column: 45, scope: !3765)
!3770 = !DILocation(line: 1984, column: 7, scope: !3765)
!3771 = !DILocation(line: 1983, column: 11, scope: !3725)
!3772 = !DILocation(line: 1986, column: 8, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 1985, column: 2)
!3774 = !DILocation(line: 1986, column: 6, scope: !3773)
!3775 = !DILocation(line: 1987, column: 11, scope: !3773)
!3776 = !DILocation(line: 1987, column: 4, scope: !3773)
!3777 = !DILocation(line: 1991, column: 12, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1991, column: 11)
!3779 = !DILocation(line: 1991, column: 11, scope: !3725)
!3780 = !DILocation(line: 1992, column: 2, scope: !3778)
!3781 = !DILocation(line: 1997, column: 11, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 1997, column: 11)
!3783 = !DILocation(line: 1997, column: 34, scope: !3782)
!3784 = !DILocation(line: 1997, column: 11, scope: !3725)
!3785 = !DILocation(line: 1998, column: 21, scope: !3782)
!3786 = !DILocation(line: 1998, column: 19, scope: !3782)
!3787 = !DILocation(line: 1998, column: 2, scope: !3782)
!3788 = !DILocation(line: 2001, column: 12, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 2001, column: 11)
!3790 = !DILocation(line: 2002, column: 4, scope: !3789)
!3791 = !DILocation(line: 2002, column: 7, scope: !3789)
!3792 = !DILocation(line: 2002, column: 38, scope: !3789)
!3793 = !DILocation(line: 2001, column: 11, scope: !3725)
!3794 = !DILocation(line: 2003, column: 2, scope: !3789)
!3795 = !DILocation(line: 2004, column: 40, scope: !3725)
!3796 = !DILocation(line: 2004, column: 48, scope: !3725)
!3797 = !DILocation(line: 2004, column: 11, scope: !3725)
!3798 = !DILocation(line: 2004, column: 9, scope: !3725)
!3799 = !DILocation(line: 2005, column: 29, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 2005, column: 11)
!3801 = !DILocation(line: 2005, column: 32, scope: !3800)
!3802 = !DILocation(line: 2005, column: 12, scope: !3800)
!3803 = !DILocation(line: 2005, column: 11, scope: !3725)
!3804 = !DILocation(line: 2006, column: 2, scope: !3800)
!3805 = !DILocation(line: 2010, column: 18, scope: !3725)
!3806 = !DILocation(line: 2010, column: 16, scope: !3725)
!3807 = !DILocation(line: 2011, column: 7, scope: !3725)
!3808 = !DILocation(line: 2014, column: 45, scope: !3725)
!3809 = !DILocation(line: 2014, column: 50, scope: !3725)
!3810 = !DILocation(line: 2014, column: 60, scope: !3725)
!3811 = !DILocation(line: 2014, column: 63, scope: !3725)
!3812 = !DILocation(line: 2015, column: 10, scope: !3725)
!3813 = !DILocation(line: 2015, column: 15, scope: !3725)
!3814 = !DILocation(line: 2015, column: 12, scope: !3725)
!3815 = !DILocation(line: 2014, column: 13, scope: !3725)
!3816 = !DILocation(line: 2014, column: 11, scope: !3725)
!3817 = !DILocation(line: 2016, column: 11, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 2016, column: 11)
!3819 = !DILocation(line: 2016, column: 11, scope: !3725)
!3820 = !DILocation(line: 2017, column: 9, scope: !3818)
!3821 = !DILocation(line: 2017, column: 2, scope: !3818)
!3822 = !DILocation(line: 2018, column: 49, scope: !3725)
!3823 = !DILocation(line: 2018, column: 54, scope: !3725)
!3824 = !DILocation(line: 2018, column: 66, scope: !3725)
!3825 = !DILocation(line: 2018, column: 76, scope: !3725)
!3826 = !DILocation(line: 2019, column: 7, scope: !3725)
!3827 = !DILocation(line: 2018, column: 13, scope: !3725)
!3828 = !DILocation(line: 2018, column: 11, scope: !3725)
!3829 = !DILocation(line: 2020, column: 11, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3725, file: !3, line: 2020, column: 11)
!3831 = !DILocation(line: 2020, column: 11, scope: !3725)
!3832 = !DILocation(line: 2021, column: 9, scope: !3830)
!3833 = !DILocation(line: 2021, column: 2, scope: !3830)
!3834 = !DILocation(line: 2022, column: 5, scope: !3725)
!3835 = !DILocation(line: 1950, column: 47, scope: !3722)
!3836 = !DILocation(line: 1950, column: 45, scope: !3722)
!3837 = !DILocation(line: 1950, column: 3, scope: !3722)
!3838 = distinct !{!3838, !3723, !3839}
!3839 = !DILocation(line: 2022, column: 5, scope: !3718)
!3840 = !DILocation(line: 2024, column: 8, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 2024, column: 7)
!3842 = !DILocation(line: 2024, column: 7, scope: !3672)
!3843 = !DILocation(line: 2025, column: 5, scope: !3841)
!3844 = !DILocation(line: 2027, column: 7, scope: !3672)
!3845 = !DILocation(line: 2027, column: 5, scope: !3672)
!3846 = !DILocation(line: 2028, column: 16, scope: !3672)
!3847 = !DILocation(line: 2028, column: 14, scope: !3672)
!3848 = !DILocation(line: 2029, column: 41, scope: !3672)
!3849 = !DILocation(line: 2029, column: 64, scope: !3672)
!3850 = !DILocation(line: 2029, column: 49, scope: !3672)
!3851 = !DILocation(line: 2029, column: 12, scope: !3672)
!3852 = !DILocation(line: 2029, column: 10, scope: !3672)
!3853 = !DILocation(line: 2033, column: 10, scope: !3672)
!3854 = !DILocation(line: 2033, column: 8, scope: !3672)
!3855 = !DILocation(line: 2034, column: 3, scope: !3672)
!3856 = !DILocation(line: 2036, column: 39, scope: !3672)
!3857 = !DILocation(line: 2036, column: 44, scope: !3672)
!3858 = !DILocation(line: 2036, column: 50, scope: !3672)
!3859 = !DILocation(line: 2036, column: 58, scope: !3672)
!3860 = !DILocation(line: 2037, column: 11, scope: !3672)
!3861 = !DILocation(line: 2037, column: 16, scope: !3672)
!3862 = !DILocation(line: 2037, column: 13, scope: !3672)
!3863 = !DILocation(line: 2036, column: 7, scope: !3672)
!3864 = !DILocation(line: 2036, column: 5, scope: !3672)
!3865 = !DILocation(line: 2038, column: 7, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 2038, column: 7)
!3867 = !DILocation(line: 2038, column: 7, scope: !3672)
!3868 = !DILocation(line: 2039, column: 12, scope: !3866)
!3869 = !DILocation(line: 2039, column: 5, scope: !3866)
!3870 = !DILocation(line: 2040, column: 46, scope: !3672)
!3871 = !DILocation(line: 2040, column: 51, scope: !3672)
!3872 = !DILocation(line: 2040, column: 63, scope: !3672)
!3873 = !DILocation(line: 2040, column: 69, scope: !3672)
!3874 = !DILocation(line: 2041, column: 11, scope: !3672)
!3875 = !DILocation(line: 2040, column: 10, scope: !3672)
!3876 = !DILocation(line: 2040, column: 3, scope: !3672)
!3877 = !DILocation(line: 2042, column: 1, scope: !3672)
!3878 = distinct !DISubprogram(name: "maybe_fold_offset_to_array_ref", scope: !3, file: !3, line: 1784, type: !3879, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!3879 = !DISubroutineType(types: !3880)
!3880 = !{!1669, !1756, !1669, !1669, !1669, !1748}
!3881 = !DILocalVariable(name: "loc", arg: 1, scope: !3878, file: !3, line: 1784, type: !1756)
!3882 = !DILocation(line: 1784, column: 44, scope: !3878)
!3883 = !DILocalVariable(name: "base", arg: 2, scope: !3878, file: !3, line: 1784, type: !1669)
!3884 = !DILocation(line: 1784, column: 54, scope: !3878)
!3885 = !DILocalVariable(name: "offset", arg: 3, scope: !3878, file: !3, line: 1784, type: !1669)
!3886 = !DILocation(line: 1784, column: 65, scope: !3878)
!3887 = !DILocalVariable(name: "orig_type", arg: 4, scope: !3878, file: !3, line: 1785, type: !1669)
!3888 = !DILocation(line: 1785, column: 10, scope: !3878)
!3889 = !DILocalVariable(name: "allow_negative_idx", arg: 5, scope: !3878, file: !3, line: 1786, type: !1748)
!3890 = !DILocation(line: 1786, column: 10, scope: !3878)
!3891 = !DILocalVariable(name: "min_idx", scope: !3878, file: !3, line: 1788, type: !1669)
!3892 = !DILocation(line: 1788, column: 8, scope: !3878)
!3893 = !DILocalVariable(name: "idx", scope: !3878, file: !3, line: 1788, type: !1669)
!3894 = !DILocation(line: 1788, column: 17, scope: !3878)
!3895 = !DILocalVariable(name: "idx_type", scope: !3878, file: !3, line: 1788, type: !1669)
!3896 = !DILocation(line: 1788, column: 22, scope: !3878)
!3897 = !DILocalVariable(name: "elt_offset", scope: !3878, file: !3, line: 1788, type: !1669)
!3898 = !DILocation(line: 1788, column: 32, scope: !3878)
!3899 = !DILocation(line: 1788, column: 45, scope: !3878)
!3900 = !DILocalVariable(name: "array_type", scope: !3878, file: !3, line: 1789, type: !1669)
!3901 = !DILocation(line: 1789, column: 8, scope: !3878)
!3902 = !DILocalVariable(name: "elt_type", scope: !3878, file: !3, line: 1789, type: !1669)
!3903 = !DILocation(line: 1789, column: 20, scope: !3878)
!3904 = !DILocalVariable(name: "elt_size", scope: !3878, file: !3, line: 1789, type: !1669)
!3905 = !DILocation(line: 1789, column: 30, scope: !3878)
!3906 = !DILocalVariable(name: "domain_type", scope: !3878, file: !3, line: 1790, type: !1669)
!3907 = !DILocation(line: 1790, column: 8, scope: !3878)
!3908 = !DILocation(line: 1797, column: 7, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1797, column: 7)
!3910 = !DILocation(line: 1797, column: 24, scope: !3909)
!3911 = !DILocation(line: 1797, column: 7, scope: !3878)
!3912 = !DILocalVariable(name: "low_bound", scope: !3913, file: !3, line: 1799, type: !1669)
!3913 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 1798, column: 5)
!3914 = !DILocation(line: 1799, column: 12, scope: !3913)
!3915 = !DILocation(line: 1799, column: 45, scope: !3913)
!3916 = !DILocation(line: 1799, column: 24, scope: !3913)
!3917 = !DILocation(line: 1801, column: 20, scope: !3913)
!3918 = !DILocation(line: 1801, column: 18, scope: !3913)
!3919 = !DILocation(line: 1802, column: 11, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 1802, column: 11)
!3921 = !DILocation(line: 1802, column: 33, scope: !3920)
!3922 = !DILocation(line: 1803, column: 4, scope: !3920)
!3923 = !DILocation(line: 1803, column: 7, scope: !3920)
!3924 = !DILocation(line: 1803, column: 30, scope: !3920)
!3925 = !DILocation(line: 1802, column: 11, scope: !3913)
!3926 = !DILocation(line: 1804, column: 2, scope: !3920)
!3927 = !DILocation(line: 1806, column: 49, scope: !3913)
!3928 = !DILocation(line: 1806, column: 61, scope: !3913)
!3929 = !DILocation(line: 1806, column: 20, scope: !3913)
!3930 = !DILocation(line: 1806, column: 18, scope: !3913)
!3931 = !DILocation(line: 1807, column: 14, scope: !3913)
!3932 = !DILocation(line: 1807, column: 12, scope: !3913)
!3933 = !DILocation(line: 1808, column: 5, scope: !3913)
!3934 = !DILocation(line: 1811, column: 16, scope: !3878)
!3935 = !DILocation(line: 1811, column: 14, scope: !3878)
!3936 = !DILocation(line: 1812, column: 7, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1812, column: 7)
!3938 = !DILocation(line: 1812, column: 30, scope: !3937)
!3939 = !DILocation(line: 1812, column: 7, scope: !3878)
!3940 = !DILocation(line: 1813, column: 5, scope: !3937)
!3941 = !DILocation(line: 1814, column: 14, scope: !3878)
!3942 = !DILocation(line: 1814, column: 12, scope: !3878)
!3943 = !DILocation(line: 1815, column: 35, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1815, column: 7)
!3945 = !DILocation(line: 1815, column: 46, scope: !3944)
!3946 = !DILocation(line: 1815, column: 8, scope: !3944)
!3947 = !DILocation(line: 1815, column: 7, scope: !3878)
!3948 = !DILocation(line: 1816, column: 5, scope: !3944)
!3949 = !DILocation(line: 1819, column: 31, scope: !3878)
!3950 = !DILocation(line: 1819, column: 14, scope: !3878)
!3951 = !DILocation(line: 1819, column: 12, scope: !3878)
!3952 = !DILocation(line: 1825, column: 14, scope: !3878)
!3953 = !DILocation(line: 1825, column: 12, scope: !3878)
!3954 = !DILocation(line: 1826, column: 8, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1826, column: 7)
!3956 = !DILocation(line: 1826, column: 7, scope: !3878)
!3957 = !DILocation(line: 1827, column: 5, scope: !3955)
!3958 = !DILocation(line: 1828, column: 22, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1828, column: 7)
!3960 = !DILocation(line: 1828, column: 7, scope: !3959)
!3961 = !DILocation(line: 1828, column: 7, scope: !3878)
!3962 = !DILocation(line: 1830, column: 11, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 1830, column: 11)
!3964 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 1829, column: 5)
!3965 = !DILocation(line: 1830, column: 32, scope: !3963)
!3966 = !DILocation(line: 1830, column: 11, scope: !3964)
!3967 = !DILocation(line: 1831, column: 13, scope: !3963)
!3968 = !DILocation(line: 1831, column: 11, scope: !3963)
!3969 = !DILocation(line: 1831, column: 2, scope: !3963)
!3970 = !DILocation(line: 1833, column: 28, scope: !3964)
!3971 = !DILocation(line: 1833, column: 13, scope: !3964)
!3972 = !DILocation(line: 1833, column: 11, scope: !3964)
!3973 = !DILocation(line: 1834, column: 5, scope: !3964)
!3974 = !DILocalVariable(name: "lquo", scope: !3975, file: !3, line: 1837, type: !1682)
!3975 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 1836, column: 5)
!3976 = !DILocation(line: 1837, column: 30, scope: !3975)
!3977 = !DILocalVariable(name: "lrem", scope: !3975, file: !3, line: 1837, type: !1682)
!3978 = !DILocation(line: 1837, column: 36, scope: !3975)
!3979 = !DILocalVariable(name: "hquo", scope: !3975, file: !3, line: 1838, type: !1684)
!3980 = !DILocation(line: 1838, column: 21, scope: !3975)
!3981 = !DILocalVariable(name: "hrem", scope: !3975, file: !3, line: 1838, type: !1684)
!3982 = !DILocation(line: 1838, column: 27, scope: !3975)
!3983 = !DILocalVariable(name: "soffset", scope: !3975, file: !3, line: 1839, type: !1677)
!3984 = !DILocation(line: 1839, column: 18, scope: !3975)
!3985 = !DILocation(line: 1844, column: 54, scope: !3975)
!3986 = !DILocation(line: 1844, column: 34, scope: !3975)
!3987 = !DILocation(line: 1845, column: 6, scope: !3975)
!3988 = !DILocation(line: 1844, column: 17, scope: !3975)
!3989 = !DILocation(line: 1846, column: 11, scope: !3990)
!3990 = distinct !DILexicalBlock(scope: !3975, file: !3, line: 1846, column: 11)
!3991 = !DILocation(line: 1846, column: 32, scope: !3990)
!3992 = !DILocation(line: 1847, column: 4, scope: !3990)
!3993 = !DILocation(line: 1848, column: 16, scope: !3990)
!3994 = !DILocation(line: 1848, column: 29, scope: !3990)
!3995 = !DILocation(line: 1849, column: 8, scope: !3990)
!3996 = !DILocation(line: 1850, column: 8, scope: !3990)
!3997 = !DILocation(line: 1847, column: 7, scope: !3990)
!3998 = !DILocation(line: 1852, column: 4, scope: !3990)
!3999 = !DILocation(line: 1852, column: 7, scope: !3990)
!4000 = !DILocation(line: 1852, column: 12, scope: !3990)
!4001 = !DILocation(line: 1852, column: 15, scope: !3990)
!4002 = !DILocation(line: 1846, column: 11, scope: !3975)
!4003 = !DILocation(line: 1853, column: 2, scope: !3990)
!4004 = !DILocation(line: 1855, column: 33, scope: !3975)
!4005 = !DILocation(line: 1855, column: 43, scope: !3975)
!4006 = !DILocation(line: 1855, column: 49, scope: !3975)
!4007 = !DILocation(line: 1855, column: 13, scope: !3975)
!4008 = !DILocation(line: 1855, column: 11, scope: !3975)
!4009 = !DILocation(line: 1861, column: 28, scope: !3878)
!4010 = !DILocation(line: 1861, column: 13, scope: !3878)
!4011 = !DILocation(line: 1861, column: 11, scope: !3878)
!4012 = !DILocation(line: 1862, column: 17, scope: !3878)
!4013 = !DILocation(line: 1862, column: 15, scope: !3878)
!4014 = !DILocation(line: 1863, column: 7, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1863, column: 7)
!4016 = !DILocation(line: 1863, column: 7, scope: !3878)
!4017 = !DILocation(line: 1865, column: 18, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !4015, file: !3, line: 1864, column: 5)
!4019 = !DILocation(line: 1865, column: 16, scope: !4018)
!4020 = !DILocation(line: 1866, column: 11, scope: !4021)
!4021 = distinct !DILexicalBlock(scope: !4018, file: !3, line: 1866, column: 11)
!4022 = !DILocation(line: 1866, column: 11, scope: !4018)
!4023 = !DILocation(line: 1867, column: 12, scope: !4021)
!4024 = !DILocation(line: 1867, column: 10, scope: !4021)
!4025 = !DILocation(line: 1867, column: 2, scope: !4021)
!4026 = !DILocation(line: 1869, column: 12, scope: !4021)
!4027 = !DILocation(line: 1869, column: 10, scope: !4021)
!4028 = !DILocation(line: 1871, column: 11, scope: !4029)
!4029 = distinct !DILexicalBlock(scope: !4018, file: !3, line: 1871, column: 11)
!4030 = !DILocation(line: 1871, column: 31, scope: !4029)
!4031 = !DILocation(line: 1871, column: 11, scope: !4018)
!4032 = !DILocation(line: 1872, column: 2, scope: !4029)
!4033 = !DILocation(line: 1874, column: 20, scope: !4018)
!4034 = !DILocation(line: 1874, column: 18, scope: !4018)
!4035 = !DILocation(line: 1875, column: 5, scope: !4018)
!4036 = !DILocation(line: 1877, column: 23, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1877, column: 7)
!4038 = !DILocation(line: 1877, column: 8, scope: !4037)
!4039 = !DILocation(line: 1877, column: 7, scope: !3878)
!4040 = !DILocation(line: 1878, column: 39, scope: !4037)
!4041 = !DILocation(line: 1878, column: 44, scope: !4037)
!4042 = !DILocation(line: 1878, column: 11, scope: !4037)
!4043 = !DILocation(line: 1878, column: 9, scope: !4037)
!4044 = !DILocation(line: 1878, column: 5, scope: !4037)
!4045 = !DILocation(line: 1879, column: 23, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1879, column: 7)
!4047 = !DILocation(line: 1879, column: 8, scope: !4046)
!4048 = !DILocation(line: 1879, column: 7, scope: !3878)
!4049 = !DILocation(line: 1880, column: 39, scope: !4046)
!4050 = !DILocation(line: 1880, column: 44, scope: !4046)
!4051 = !DILocation(line: 1880, column: 11, scope: !4046)
!4052 = !DILocation(line: 1880, column: 9, scope: !4046)
!4053 = !DILocation(line: 1880, column: 5, scope: !4046)
!4054 = !DILocation(line: 1883, column: 9, scope: !3878)
!4055 = !DILocation(line: 1883, column: 7, scope: !3878)
!4056 = !DILocation(line: 1893, column: 7, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1893, column: 7)
!4058 = !DILocation(line: 1894, column: 7, scope: !4057)
!4059 = !DILocation(line: 1894, column: 10, scope: !4057)
!4060 = !DILocation(line: 1895, column: 7, scope: !4057)
!4061 = !DILocation(line: 1895, column: 10, scope: !4057)
!4062 = !DILocation(line: 1895, column: 51, scope: !4057)
!4063 = !DILocation(line: 1893, column: 7, scope: !3878)
!4064 = !DILocalVariable(name: "up_bound", scope: !4065, file: !3, line: 1897, type: !1669)
!4065 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 1896, column: 5)
!4066 = !DILocation(line: 1897, column: 12, scope: !4065)
!4067 = !DILocation(line: 1897, column: 23, scope: !4065)
!4068 = !DILocation(line: 1899, column: 28, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1899, column: 11)
!4070 = !DILocation(line: 1899, column: 38, scope: !4069)
!4071 = !DILocation(line: 1899, column: 11, scope: !4069)
!4072 = !DILocation(line: 1903, column: 4, scope: !4069)
!4073 = !DILocation(line: 1903, column: 25, scope: !4069)
!4074 = !DILocation(line: 1903, column: 7, scope: !4069)
!4075 = !DILocation(line: 1903, column: 38, scope: !4069)
!4076 = !DILocation(line: 1899, column: 11, scope: !4065)
!4077 = !DILocation(line: 1904, column: 2, scope: !4069)
!4078 = !DILocation(line: 1905, column: 5, scope: !4065)
!4079 = !DILocation(line: 1906, column: 7, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1906, column: 7)
!4081 = !DILocation(line: 1907, column: 7, scope: !4080)
!4082 = !DILocation(line: 1907, column: 10, scope: !4080)
!4083 = !DILocation(line: 1906, column: 7, scope: !3878)
!4084 = !DILocation(line: 1909, column: 12, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1909, column: 11)
!4086 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 1908, column: 5)
!4087 = !DILocation(line: 1910, column: 4, scope: !4085)
!4088 = !DILocation(line: 1910, column: 7, scope: !4085)
!4089 = !DILocation(line: 1910, column: 48, scope: !4085)
!4090 = !DILocation(line: 1911, column: 4, scope: !4085)
!4091 = !DILocation(line: 1911, column: 24, scope: !4085)
!4092 = !DILocation(line: 1911, column: 29, scope: !4085)
!4093 = !DILocation(line: 1911, column: 7, scope: !4085)
!4094 = !DILocation(line: 1909, column: 11, scope: !4086)
!4095 = !DILocation(line: 1912, column: 2, scope: !4085)
!4096 = !DILocation(line: 1913, column: 5, scope: !4086)
!4097 = !DILocation(line: 1914, column: 13, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 1914, column: 12)
!4099 = !DILocation(line: 1915, column: 5, scope: !4098)
!4100 = !DILocation(line: 1915, column: 26, scope: !4098)
!4101 = !DILocation(line: 1915, column: 8, scope: !4098)
!4102 = !DILocation(line: 1915, column: 34, scope: !4098)
!4103 = !DILocation(line: 1914, column: 12, scope: !4080)
!4104 = !DILocation(line: 1916, column: 5, scope: !4098)
!4105 = !DILocalVariable(name: "t", scope: !4106, file: !3, line: 1919, type: !1669)
!4106 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1918, column: 3)
!4107 = !DILocation(line: 1919, column: 10, scope: !4106)
!4108 = !DILocation(line: 1919, column: 14, scope: !4106)
!4109 = !DILocation(line: 1920, column: 5, scope: !4106)
!4110 = !DILocation(line: 1921, column: 12, scope: !4106)
!4111 = !DILocation(line: 1921, column: 5, scope: !4106)
!4112 = !DILocation(line: 1923, column: 1, scope: !3878)
!4113 = distinct !DISubprogram(name: "maybe_fold_offset_to_address", scope: !3, file: !3, line: 2107, type: !3562, scopeLine: 2109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4114 = !DILocalVariable(name: "loc", arg: 1, scope: !4113, file: !3, line: 2107, type: !1756)
!4115 = !DILocation(line: 2107, column: 42, scope: !4113)
!4116 = !DILocalVariable(name: "addr", arg: 2, scope: !4113, file: !3, line: 2107, type: !1669)
!4117 = !DILocation(line: 2107, column: 52, scope: !4113)
!4118 = !DILocalVariable(name: "offset", arg: 3, scope: !4113, file: !3, line: 2107, type: !1669)
!4119 = !DILocation(line: 2107, column: 63, scope: !4113)
!4120 = !DILocalVariable(name: "orig_type", arg: 4, scope: !4113, file: !3, line: 2108, type: !1669)
!4121 = !DILocation(line: 2108, column: 15, scope: !4113)
!4122 = !DILocalVariable(name: "t", scope: !4113, file: !3, line: 2110, type: !1669)
!4123 = !DILocation(line: 2110, column: 8, scope: !4113)
!4124 = !DILocation(line: 2112, column: 3, scope: !4113)
!4125 = !DILocation(line: 2115, column: 39, scope: !4113)
!4126 = !DILocation(line: 2115, column: 44, scope: !4113)
!4127 = !DILocation(line: 2115, column: 50, scope: !4113)
!4128 = !DILocation(line: 2116, column: 11, scope: !4113)
!4129 = !DILocation(line: 2115, column: 7, scope: !4113)
!4130 = !DILocation(line: 2115, column: 5, scope: !4113)
!4131 = !DILocation(line: 2117, column: 7, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 2117, column: 7)
!4133 = !DILocation(line: 2117, column: 9, scope: !4132)
!4134 = !DILocation(line: 2117, column: 7, scope: !4113)
!4135 = !DILocalVariable(name: "orig", scope: !4136, file: !3, line: 2119, type: !1669)
!4136 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 2118, column: 5)
!4137 = !DILocation(line: 2119, column: 12, scope: !4136)
!4138 = !DILocation(line: 2119, column: 19, scope: !4136)
!4139 = !DILocalVariable(name: "ptr_type", scope: !4136, file: !3, line: 2120, type: !1669)
!4140 = !DILocation(line: 2120, column: 12, scope: !4136)
!4141 = !DILocation(line: 2136, column: 7, scope: !4136)
!4142 = !DILocation(line: 2137, column: 11, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4136, file: !3, line: 2137, column: 11)
!4144 = !DILocation(line: 2137, column: 28, scope: !4143)
!4145 = !DILocation(line: 2137, column: 11, scope: !4136)
!4146 = !DILocation(line: 2138, column: 9, scope: !4143)
!4147 = !DILocation(line: 2138, column: 7, scope: !4143)
!4148 = !DILocation(line: 2138, column: 2, scope: !4143)
!4149 = !DILocation(line: 2139, column: 12, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4136, file: !3, line: 2139, column: 11)
!4151 = !DILocation(line: 2139, column: 29, scope: !4150)
!4152 = !DILocation(line: 2140, column: 5, scope: !4150)
!4153 = !DILocation(line: 2140, column: 9, scope: !4150)
!4154 = !DILocation(line: 2140, column: 26, scope: !4150)
!4155 = !DILocation(line: 2141, column: 9, scope: !4150)
!4156 = !DILocation(line: 2141, column: 12, scope: !4150)
!4157 = !DILocation(line: 2141, column: 59, scope: !4150)
!4158 = !DILocation(line: 2142, column: 4, scope: !4150)
!4159 = !DILocation(line: 2142, column: 8, scope: !4150)
!4160 = !DILocation(line: 2142, column: 22, scope: !4150)
!4161 = !DILocation(line: 2143, column: 8, scope: !4150)
!4162 = !DILocation(line: 2143, column: 11, scope: !4150)
!4163 = !DILocation(line: 2143, column: 25, scope: !4150)
!4164 = !DILocation(line: 2144, column: 4, scope: !4150)
!4165 = !DILocation(line: 2144, column: 25, scope: !4150)
!4166 = !DILocation(line: 2144, column: 42, scope: !4150)
!4167 = !DILocation(line: 2145, column: 13, scope: !4150)
!4168 = !DILocation(line: 2145, column: 38, scope: !4150)
!4169 = !DILocation(line: 2146, column: 11, scope: !4150)
!4170 = !DILocation(line: 2146, column: 25, scope: !4150)
!4171 = !DILocation(line: 2147, column: 13, scope: !4150)
!4172 = !DILocation(line: 2147, column: 35, scope: !4150)
!4173 = !DILocation(line: 2144, column: 8, scope: !4150)
!4174 = !DILocation(line: 2139, column: 11, scope: !4136)
!4175 = !DILocation(line: 2148, column: 2, scope: !4150)
!4176 = !DILocation(line: 2150, column: 38, scope: !4136)
!4177 = !DILocation(line: 2150, column: 18, scope: !4136)
!4178 = !DILocation(line: 2150, column: 16, scope: !4136)
!4179 = !DILocation(line: 2151, column: 39, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4136, file: !3, line: 2151, column: 11)
!4181 = !DILocation(line: 2151, column: 50, scope: !4180)
!4182 = !DILocation(line: 2151, column: 12, scope: !4180)
!4183 = !DILocation(line: 2151, column: 11, scope: !4136)
!4184 = !DILocation(line: 2152, column: 2, scope: !4180)
!4185 = !DILocation(line: 2153, column: 50, scope: !4136)
!4186 = !DILocation(line: 2153, column: 55, scope: !4136)
!4187 = !DILocation(line: 2153, column: 58, scope: !4136)
!4188 = !DILocation(line: 2153, column: 14, scope: !4136)
!4189 = !DILocation(line: 2153, column: 7, scope: !4136)
!4190 = !DILocation(line: 2156, column: 3, scope: !4113)
!4191 = !DILocation(line: 2157, column: 1, scope: !4113)
!4192 = distinct !DISubprogram(name: "maybe_fold_stmt_addition", scope: !3, file: !3, line: 2276, type: !3562, scopeLine: 2277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4193 = !DILocalVariable(name: "loc", arg: 1, scope: !4192, file: !3, line: 2276, type: !1756)
!4194 = !DILocation(line: 2276, column: 38, scope: !4192)
!4195 = !DILocalVariable(name: "res_type", arg: 2, scope: !4192, file: !3, line: 2276, type: !1669)
!4196 = !DILocation(line: 2276, column: 48, scope: !4192)
!4197 = !DILocalVariable(name: "op0", arg: 3, scope: !4192, file: !3, line: 2276, type: !1669)
!4198 = !DILocation(line: 2276, column: 63, scope: !4192)
!4199 = !DILocalVariable(name: "op1", arg: 4, scope: !4192, file: !3, line: 2276, type: !1669)
!4200 = !DILocation(line: 2276, column: 73, scope: !4192)
!4201 = !DILocalVariable(name: "ptd_type", scope: !4192, file: !3, line: 2278, type: !1669)
!4202 = !DILocation(line: 2278, column: 8, scope: !4192)
!4203 = !DILocalVariable(name: "t", scope: !4192, file: !3, line: 2279, type: !1669)
!4204 = !DILocation(line: 2279, column: 8, scope: !4192)
!4205 = !DILocation(line: 2282, column: 7, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2282, column: 7)
!4207 = !DILocation(line: 2282, column: 23, scope: !4206)
!4208 = !DILocation(line: 2282, column: 7, scope: !4192)
!4209 = !DILocation(line: 2283, column: 5, scope: !4206)
!4210 = !DILocation(line: 2284, column: 9, scope: !4192)
!4211 = !DILocation(line: 2284, column: 7, scope: !4192)
!4212 = !DILocation(line: 2287, column: 7, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2287, column: 7)
!4214 = !DILocation(line: 2287, column: 23, scope: !4213)
!4215 = !DILocation(line: 2287, column: 7, scope: !4192)
!4216 = !DILocation(line: 2291, column: 11, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 2291, column: 11)
!4218 = distinct !DILexicalBlock(scope: !4213, file: !3, line: 2288, column: 5)
!4219 = !DILocation(line: 2291, column: 27, scope: !4217)
!4220 = !DILocation(line: 2292, column: 4, scope: !4217)
!4221 = !DILocation(line: 2292, column: 22, scope: !4217)
!4222 = !DILocation(line: 2292, column: 7, scope: !4217)
!4223 = !DILocation(line: 2293, column: 4, scope: !4217)
!4224 = !DILocation(line: 2293, column: 7, scope: !4217)
!4225 = !DILocation(line: 2293, column: 23, scope: !4217)
!4226 = !DILocation(line: 2294, column: 4, scope: !4217)
!4227 = !DILocation(line: 2294, column: 22, scope: !4217)
!4228 = !DILocation(line: 2294, column: 7, scope: !4217)
!4229 = !DILocation(line: 2291, column: 11, scope: !4218)
!4230 = !DILocalVariable(name: "offset_def", scope: !4231, file: !3, line: 2296, type: !1959)
!4231 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 2295, column: 2)
!4232 = !DILocation(line: 2296, column: 11, scope: !4231)
!4233 = !DILocation(line: 2296, column: 24, scope: !4231)
!4234 = !DILocation(line: 2297, column: 27, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 2297, column: 8)
!4236 = !DILocation(line: 2297, column: 9, scope: !4235)
!4237 = !DILocation(line: 2297, column: 8, scope: !4231)
!4238 = !DILocation(line: 2298, column: 6, scope: !4235)
!4239 = !DILocation(line: 2300, column: 32, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 2300, column: 8)
!4241 = !DILocation(line: 2300, column: 8, scope: !4240)
!4242 = !DILocation(line: 2300, column: 44, scope: !4240)
!4243 = !DILocation(line: 2301, column: 8, scope: !4240)
!4244 = !DILocation(line: 2301, column: 11, scope: !4240)
!4245 = !DILocation(line: 2301, column: 55, scope: !4240)
!4246 = !DILocation(line: 2302, column: 8, scope: !4240)
!4247 = !DILocation(line: 2302, column: 51, scope: !4240)
!4248 = !DILocation(line: 2302, column: 31, scope: !4240)
!4249 = !DILocation(line: 2303, column: 10, scope: !4240)
!4250 = !DILocation(line: 2302, column: 11, scope: !4240)
!4251 = !DILocation(line: 2300, column: 8, scope: !4231)
!4252 = !DILocation(line: 2304, column: 13, scope: !4240)
!4253 = !DILocation(line: 2304, column: 6, scope: !4240)
!4254 = !DILocation(line: 2310, column: 27, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 2310, column: 13)
!4256 = !DILocation(line: 2310, column: 13, scope: !4255)
!4257 = !DILocation(line: 2311, column: 6, scope: !4255)
!4258 = !DILocation(line: 2311, column: 33, scope: !4255)
!4259 = !DILocation(line: 2311, column: 9, scope: !4255)
!4260 = !DILocation(line: 2311, column: 45, scope: !4255)
!4261 = !DILocation(line: 2310, column: 13, scope: !4240)
!4262 = !DILocation(line: 2312, column: 13, scope: !4255)
!4263 = !DILocation(line: 2312, column: 6, scope: !4255)
!4264 = !DILocation(line: 2318, column: 2, scope: !4231)
!4265 = !DILocation(line: 2319, column: 7, scope: !4218)
!4266 = !DILocation(line: 2324, column: 3, scope: !4192)
!4267 = !DILocation(line: 2324, column: 10, scope: !4192)
!4268 = !DILocation(line: 2324, column: 26, scope: !4192)
!4269 = !DILocalVariable(name: "array_obj", scope: !4270, file: !3, line: 2326, type: !1669)
!4270 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2325, column: 5)
!4271 = !DILocation(line: 2326, column: 12, scope: !4270)
!4272 = !DILocation(line: 2326, column: 24, scope: !4270)
!4273 = !DILocalVariable(name: "array_idx", scope: !4270, file: !3, line: 2327, type: !1669)
!4274 = !DILocation(line: 2327, column: 12, scope: !4270)
!4275 = !DILocation(line: 2327, column: 24, scope: !4270)
!4276 = !DILocalVariable(name: "elt_type", scope: !4270, file: !3, line: 2328, type: !1669)
!4277 = !DILocation(line: 2328, column: 12, scope: !4270)
!4278 = !DILocation(line: 2328, column: 23, scope: !4270)
!4279 = !DILocalVariable(name: "elt_size", scope: !4270, file: !3, line: 2329, type: !1669)
!4280 = !DILocation(line: 2329, column: 12, scope: !4270)
!4281 = !DILocation(line: 2329, column: 23, scope: !4270)
!4282 = !DILocalVariable(name: "min_idx", scope: !4270, file: !3, line: 2330, type: !1669)
!4283 = !DILocation(line: 2330, column: 12, scope: !4270)
!4284 = !DILocation(line: 2332, column: 11, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 2332, column: 11)
!4286 = !DILocation(line: 2332, column: 33, scope: !4285)
!4287 = !DILocation(line: 2332, column: 11, scope: !4270)
!4288 = !DILocation(line: 2333, column: 2, scope: !4285)
!4289 = !DILocation(line: 2334, column: 11, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 2334, column: 11)
!4291 = !DILocation(line: 2334, column: 32, scope: !4290)
!4292 = !DILocation(line: 2334, column: 11, scope: !4270)
!4293 = !DILocation(line: 2335, column: 2, scope: !4290)
!4294 = !DILocation(line: 2338, column: 17, scope: !4270)
!4295 = !DILocation(line: 2338, column: 15, scope: !4270)
!4296 = !DILocation(line: 2339, column: 11, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 2339, column: 11)
!4298 = !DILocation(line: 2339, column: 11, scope: !4270)
!4299 = !DILocation(line: 2341, column: 14, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 2340, column: 2)
!4301 = !DILocation(line: 2341, column: 12, scope: !4300)
!4302 = !DILocation(line: 2342, column: 8, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 2342, column: 8)
!4304 = !DILocation(line: 2342, column: 8, scope: !4300)
!4305 = !DILocation(line: 2344, column: 12, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2344, column: 12)
!4307 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 2343, column: 6)
!4308 = !DILocation(line: 2344, column: 32, scope: !4306)
!4309 = !DILocation(line: 2344, column: 12, scope: !4307)
!4310 = !DILocation(line: 2345, column: 3, scope: !4306)
!4311 = !DILocation(line: 2347, column: 20, scope: !4307)
!4312 = !DILocation(line: 2347, column: 18, scope: !4307)
!4313 = !DILocation(line: 2348, column: 28, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 2348, column: 12)
!4315 = !DILocation(line: 2348, column: 13, scope: !4314)
!4316 = !DILocation(line: 2348, column: 12, scope: !4307)
!4317 = !DILocation(line: 2349, column: 44, scope: !4314)
!4318 = !DILocation(line: 2350, column: 11, scope: !4314)
!4319 = !DILocation(line: 2349, column: 15, scope: !4314)
!4320 = !DILocation(line: 2349, column: 13, scope: !4314)
!4321 = !DILocation(line: 2349, column: 3, scope: !4314)
!4322 = !DILocation(line: 2351, column: 6, scope: !4307)
!4323 = !DILocation(line: 2352, column: 2, scope: !4300)
!4324 = !DILocation(line: 2355, column: 19, scope: !4270)
!4325 = !DILocation(line: 2355, column: 17, scope: !4270)
!4326 = !DILocation(line: 2356, column: 47, scope: !4270)
!4327 = !DILocation(line: 2356, column: 58, scope: !4270)
!4328 = !DILocation(line: 2356, column: 19, scope: !4270)
!4329 = !DILocation(line: 2356, column: 17, scope: !4270)
!4330 = !DILocation(line: 2360, column: 9, scope: !4270)
!4331 = !DILocation(line: 2360, column: 20, scope: !4270)
!4332 = !DILocation(line: 2359, column: 13, scope: !4270)
!4333 = !DILocation(line: 2359, column: 11, scope: !4270)
!4334 = !DILocation(line: 2361, column: 13, scope: !4270)
!4335 = !DILocation(line: 2361, column: 11, scope: !4270)
!4336 = distinct !{!4336, !4266, !4337}
!4337 = !DILocation(line: 2362, column: 5, scope: !4192)
!4338 = !DILocation(line: 2364, column: 14, scope: !4192)
!4339 = !DILocation(line: 2364, column: 12, scope: !4192)
!4340 = !DILocation(line: 2368, column: 7, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2368, column: 7)
!4342 = !DILocation(line: 2369, column: 7, scope: !4341)
!4343 = !DILocation(line: 2369, column: 10, scope: !4341)
!4344 = !DILocation(line: 2369, column: 38, scope: !4341)
!4345 = !DILocation(line: 2368, column: 7, scope: !4192)
!4346 = !DILocation(line: 2370, column: 16, scope: !4341)
!4347 = !DILocation(line: 2370, column: 14, scope: !4341)
!4348 = !DILocation(line: 2370, column: 5, scope: !4341)
!4349 = !DILocation(line: 2373, column: 39, scope: !4192)
!4350 = !DILocation(line: 2373, column: 44, scope: !4192)
!4351 = !DILocation(line: 2373, column: 49, scope: !4192)
!4352 = !DILocation(line: 2373, column: 54, scope: !4192)
!4353 = !DILocation(line: 2373, column: 7, scope: !4192)
!4354 = !DILocation(line: 2373, column: 5, scope: !4192)
!4355 = !DILocation(line: 2374, column: 8, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2374, column: 7)
!4357 = !DILocation(line: 2374, column: 7, scope: !4192)
!4358 = !DILocation(line: 2375, column: 45, scope: !4356)
!4359 = !DILocation(line: 2375, column: 50, scope: !4356)
!4360 = !DILocation(line: 2375, column: 67, scope: !4356)
!4361 = !DILocation(line: 2375, column: 72, scope: !4356)
!4362 = !DILocation(line: 2376, column: 10, scope: !4356)
!4363 = !DILocation(line: 2375, column: 9, scope: !4356)
!4364 = !DILocation(line: 2375, column: 7, scope: !4356)
!4365 = !DILocation(line: 2375, column: 5, scope: !4356)
!4366 = !DILocation(line: 2377, column: 7, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2377, column: 7)
!4368 = !DILocation(line: 2377, column: 7, scope: !4192)
!4369 = !DILocation(line: 2379, column: 11, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 2378, column: 5)
!4371 = !DILocation(line: 2379, column: 9, scope: !4370)
!4372 = !DILocation(line: 2380, column: 7, scope: !4370)
!4373 = !DILocation(line: 2381, column: 5, scope: !4370)
!4374 = !DILocation(line: 2383, column: 10, scope: !4192)
!4375 = !DILocation(line: 2383, column: 3, scope: !4192)
!4376 = !DILocation(line: 2384, column: 1, scope: !4192)
!4377 = distinct !DISubprogram(name: "is_gimple_assign", scope: !743, file: !743, line: 1677, type: !4378, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4378 = !DISubroutineType(types: !4379)
!4379 = !{!1748, !4380}
!4380 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1670, line: 60, baseType: !2964)
!4381 = !DILocalVariable(name: "gs", arg: 1, scope: !4377, file: !743, line: 1677, type: !4380)
!4382 = !DILocation(line: 1677, column: 32, scope: !4377)
!4383 = !DILocation(line: 1679, column: 23, scope: !4377)
!4384 = !DILocation(line: 1679, column: 10, scope: !4377)
!4385 = !DILocation(line: 1679, column: 27, scope: !4377)
!4386 = !DILocation(line: 1679, column: 3, scope: !4377)
!4387 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !743, file: !743, line: 1815, type: !4388, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4388 = !DISubroutineType(types: !4389)
!4389 = !{!134, !4380}
!4390 = !DILocalVariable(name: "gs", arg: 1, scope: !4387, file: !743, line: 1815, type: !4380)
!4391 = !DILocation(line: 1815, column: 38, scope: !4387)
!4392 = !DILocalVariable(name: "code", scope: !4387, file: !743, line: 1817, type: !134)
!4393 = !DILocation(line: 1817, column: 18, scope: !4387)
!4394 = !DILocation(line: 1820, column: 28, scope: !4387)
!4395 = !DILocation(line: 1820, column: 10, scope: !4387)
!4396 = !DILocation(line: 1820, column: 8, scope: !4387)
!4397 = !DILocation(line: 1821, column: 29, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4387, file: !743, line: 1821, column: 7)
!4399 = !DILocation(line: 1821, column: 7, scope: !4398)
!4400 = !DILocation(line: 1821, column: 35, scope: !4398)
!4401 = !DILocation(line: 1821, column: 7, scope: !4387)
!4402 = !DILocation(line: 1822, column: 12, scope: !4398)
!4403 = !DILocation(line: 1822, column: 10, scope: !4398)
!4404 = !DILocation(line: 1822, column: 5, scope: !4398)
!4405 = !DILocation(line: 1824, column: 10, scope: !4387)
!4406 = !DILocation(line: 1824, column: 3, scope: !4387)
!4407 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !743, file: !743, line: 1759, type: !4408, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4408 = !DISubroutineType(types: !4409)
!4409 = !{!1669, !4380}
!4410 = !DILocalVariable(name: "gs", arg: 1, scope: !4407, file: !743, line: 1759, type: !4380)
!4411 = !DILocation(line: 1759, column: 34, scope: !4407)
!4412 = !DILocation(line: 1763, column: 23, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4407, file: !743, line: 1763, column: 7)
!4414 = !DILocation(line: 1763, column: 7, scope: !4413)
!4415 = !DILocation(line: 1763, column: 27, scope: !4413)
!4416 = !DILocation(line: 1763, column: 7, scope: !4407)
!4417 = !DILocation(line: 1764, column: 23, scope: !4413)
!4418 = !DILocation(line: 1764, column: 12, scope: !4413)
!4419 = !DILocation(line: 1764, column: 5, scope: !4413)
!4420 = !DILocation(line: 1766, column: 5, scope: !4413)
!4421 = !DILocation(line: 1767, column: 1, scope: !4407)
!4422 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !743, file: !743, line: 1727, type: !4408, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4423 = !DILocalVariable(name: "gs", arg: 1, scope: !4422, file: !743, line: 1727, type: !4380)
!4424 = !DILocation(line: 1727, column: 34, scope: !4422)
!4425 = !DILocation(line: 1730, column: 21, scope: !4422)
!4426 = !DILocation(line: 1730, column: 10, scope: !4422)
!4427 = !DILocation(line: 1730, column: 3, scope: !4422)
!4428 = distinct !DISubprogram(name: "fold_stmt", scope: !3, file: !3, line: 3160, type: !4429, scopeLine: 3161, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4429 = !DISubroutineType(types: !4430)
!4430 = !{!1748, !4431}
!4431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4432, size: 64)
!4432 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !743, line: 265, baseType: !4433)
!4433 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !743, line: 254, size: 192, elements: !4434)
!4434 = !{!4435, !4436, !4437}
!4435 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4433, file: !743, line: 257, baseType: !1954, size: 64)
!4436 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4433, file: !743, line: 263, baseType: !1949, size: 64, offset: 64)
!4437 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4433, file: !743, line: 264, baseType: !2392, size: 64, offset: 128)
!4438 = !DILocalVariable(name: "gsi", arg: 1, scope: !4428, file: !3, line: 3160, type: !4431)
!4439 = !DILocation(line: 3160, column: 34, scope: !4428)
!4440 = !DILocation(line: 3162, column: 23, scope: !4428)
!4441 = !DILocation(line: 3162, column: 10, scope: !4428)
!4442 = !DILocation(line: 3162, column: 3, scope: !4428)
!4443 = distinct !DISubprogram(name: "fold_stmt_1", scope: !3, file: !3, line: 3054, type: !4444, scopeLine: 3055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4444 = !DISubroutineType(types: !4445)
!4445 = !{!1748, !4431, !1748}
!4446 = !DILocalVariable(name: "gsi", arg: 1, scope: !4443, file: !3, line: 3054, type: !4431)
!4447 = !DILocation(line: 3054, column: 36, scope: !4443)
!4448 = !DILocalVariable(name: "inplace", arg: 2, scope: !4443, file: !3, line: 3054, type: !1748)
!4449 = !DILocation(line: 3054, column: 46, scope: !4443)
!4450 = !DILocalVariable(name: "changed", scope: !4443, file: !3, line: 3056, type: !1748)
!4451 = !DILocation(line: 3056, column: 8, scope: !4443)
!4452 = !DILocalVariable(name: "stmt", scope: !4443, file: !3, line: 3057, type: !1959)
!4453 = !DILocation(line: 3057, column: 10, scope: !4443)
!4454 = !DILocation(line: 3057, column: 28, scope: !4443)
!4455 = !DILocation(line: 3057, column: 17, scope: !4443)
!4456 = !DILocalVariable(name: "i", scope: !4443, file: !3, line: 3058, type: !7)
!4457 = !DILocation(line: 3058, column: 12, scope: !4443)
!4458 = !DILocation(line: 3061, column: 24, scope: !4443)
!4459 = !DILocation(line: 3061, column: 11, scope: !4443)
!4460 = !DILocation(line: 3061, column: 3, scope: !4443)
!4461 = !DILocalVariable(name: "old_num_ops", scope: !4462, file: !3, line: 3065, type: !7)
!4462 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3064, column: 7)
!4463 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 3062, column: 5)
!4464 = !DILocation(line: 3065, column: 11, scope: !4462)
!4465 = !DILocation(line: 3065, column: 41, scope: !4462)
!4466 = !DILocation(line: 3065, column: 25, scope: !4462)
!4467 = !DILocalVariable(name: "new_rhs", scope: !4462, file: !3, line: 3066, type: !1669)
!4468 = !DILocation(line: 3066, column: 7, scope: !4462)
!4469 = !DILocation(line: 3066, column: 37, scope: !4462)
!4470 = !DILocation(line: 3066, column: 17, scope: !4462)
!4471 = !DILocalVariable(name: "lhs", scope: !4462, file: !3, line: 3067, type: !1669)
!4472 = !DILocation(line: 3067, column: 7, scope: !4462)
!4473 = !DILocation(line: 3067, column: 32, scope: !4462)
!4474 = !DILocation(line: 3067, column: 13, scope: !4462)
!4475 = !DILocation(line: 3068, column: 6, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 3068, column: 6)
!4477 = !DILocation(line: 3069, column: 6, scope: !4476)
!4478 = !DILocation(line: 3069, column: 37, scope: !4476)
!4479 = !DILocation(line: 3070, column: 9, scope: !4476)
!4480 = !DILocation(line: 3069, column: 10, scope: !4476)
!4481 = !DILocation(line: 3068, column: 6, scope: !4462)
!4482 = !DILocation(line: 3071, column: 14, scope: !4476)
!4483 = !DILocation(line: 3071, column: 12, scope: !4476)
!4484 = !DILocation(line: 3071, column: 4, scope: !4476)
!4485 = !DILocation(line: 3072, column: 6, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 3072, column: 6)
!4487 = !DILocation(line: 3073, column: 6, scope: !4486)
!4488 = !DILocation(line: 3073, column: 11, scope: !4486)
!4489 = !DILocation(line: 3074, column: 3, scope: !4486)
!4490 = !DILocation(line: 3074, column: 30, scope: !4486)
!4491 = !DILocation(line: 3074, column: 6, scope: !4486)
!4492 = !DILocation(line: 3074, column: 53, scope: !4486)
!4493 = !DILocation(line: 3074, column: 51, scope: !4486)
!4494 = !DILocation(line: 3072, column: 6, scope: !4462)
!4495 = !DILocation(line: 3076, column: 39, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 3075, column: 4)
!4497 = !DILocation(line: 3076, column: 44, scope: !4496)
!4498 = !DILocation(line: 3076, column: 6, scope: !4496)
!4499 = !DILocation(line: 3077, column: 14, scope: !4496)
!4500 = !DILocation(line: 3078, column: 4, scope: !4496)
!4501 = !DILocation(line: 3079, column: 2, scope: !4462)
!4502 = !DILocation(line: 3083, column: 36, scope: !4463)
!4503 = !DILocation(line: 3083, column: 18, scope: !4463)
!4504 = !DILocation(line: 3083, column: 15, scope: !4463)
!4505 = !DILocation(line: 3084, column: 7, scope: !4463)
!4506 = !DILocation(line: 3088, column: 14, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3088, column: 7)
!4508 = !DILocation(line: 3088, column: 12, scope: !4507)
!4509 = !DILocation(line: 3088, column: 19, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4507, file: !3, line: 3088, column: 7)
!4511 = !DILocation(line: 3088, column: 45, scope: !4510)
!4512 = !DILocation(line: 3088, column: 23, scope: !4510)
!4513 = !DILocation(line: 3088, column: 21, scope: !4510)
!4514 = !DILocation(line: 3088, column: 7, scope: !4507)
!4515 = !DILocation(line: 3089, column: 6, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3089, column: 6)
!4517 = !DILocation(line: 3089, column: 6, scope: !4510)
!4518 = !DILocalVariable(name: "tmp", scope: !4519, file: !3, line: 3091, type: !1669)
!4519 = distinct !DILexicalBlock(scope: !4516, file: !3, line: 3090, column: 4)
!4520 = !DILocation(line: 3091, column: 11, scope: !4519)
!4521 = !DILocation(line: 3091, column: 56, scope: !4519)
!4522 = !DILocation(line: 3091, column: 62, scope: !4519)
!4523 = !DILocation(line: 3091, column: 39, scope: !4519)
!4524 = !DILocation(line: 3091, column: 17, scope: !4519)
!4525 = !DILocation(line: 3092, column: 10, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 3092, column: 10)
!4527 = !DILocation(line: 3092, column: 10, scope: !4519)
!4528 = !DILocation(line: 3094, column: 24, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 3093, column: 8)
!4530 = !DILocation(line: 3094, column: 30, scope: !4529)
!4531 = !DILocation(line: 3094, column: 33, scope: !4529)
!4532 = !DILocation(line: 3094, column: 3, scope: !4529)
!4533 = !DILocation(line: 3095, column: 11, scope: !4529)
!4534 = !DILocation(line: 3096, column: 8, scope: !4529)
!4535 = !DILocation(line: 3097, column: 4, scope: !4519)
!4536 = !DILocation(line: 3088, column: 52, scope: !4510)
!4537 = !DILocation(line: 3088, column: 7, scope: !4510)
!4538 = distinct !{!4538, !4514, !4539}
!4539 = !DILocation(line: 3097, column: 4, scope: !4507)
!4540 = !DILocation(line: 3099, column: 12, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3099, column: 11)
!4542 = !DILocation(line: 3099, column: 11, scope: !4463)
!4543 = !DILocation(line: 3100, column: 31, scope: !4541)
!4544 = !DILocation(line: 3100, column: 13, scope: !4541)
!4545 = !DILocation(line: 3100, column: 10, scope: !4541)
!4546 = !DILocation(line: 3100, column: 2, scope: !4541)
!4547 = !DILocation(line: 3101, column: 7, scope: !4463)
!4548 = !DILocation(line: 3105, column: 14, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3105, column: 7)
!4550 = !DILocation(line: 3105, column: 12, scope: !4549)
!4551 = !DILocation(line: 3105, column: 19, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 3105, column: 7)
!4553 = !DILocation(line: 3105, column: 44, scope: !4552)
!4554 = !DILocation(line: 3105, column: 23, scope: !4552)
!4555 = !DILocation(line: 3105, column: 21, scope: !4552)
!4556 = !DILocation(line: 3105, column: 7, scope: !4549)
!4557 = !DILocalVariable(name: "link", scope: !4558, file: !3, line: 3107, type: !1669)
!4558 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 3106, column: 2)
!4559 = !DILocation(line: 3107, column: 9, scope: !4558)
!4560 = !DILocation(line: 3107, column: 38, scope: !4558)
!4561 = !DILocation(line: 3107, column: 44, scope: !4558)
!4562 = !DILocation(line: 3107, column: 16, scope: !4558)
!4563 = !DILocalVariable(name: "op", scope: !4558, file: !3, line: 3108, type: !1669)
!4564 = !DILocation(line: 3108, column: 9, scope: !4558)
!4565 = !DILocation(line: 3108, column: 14, scope: !4558)
!4566 = !DILocation(line: 3109, column: 8, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 3109, column: 8)
!4568 = !DILocation(line: 3110, column: 8, scope: !4567)
!4569 = !DILocation(line: 3110, column: 39, scope: !4567)
!4570 = !DILocation(line: 3110, column: 17, scope: !4567)
!4571 = !DILocation(line: 3110, column: 15, scope: !4567)
!4572 = !DILocation(line: 3110, column: 50, scope: !4567)
!4573 = !DILocation(line: 3109, column: 8, scope: !4558)
!4574 = !DILocation(line: 3112, column: 28, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 3111, column: 6)
!4576 = !DILocation(line: 3112, column: 8, scope: !4575)
!4577 = !DILocation(line: 3112, column: 26, scope: !4575)
!4578 = !DILocation(line: 3113, column: 16, scope: !4575)
!4579 = !DILocation(line: 3114, column: 6, scope: !4575)
!4580 = !DILocation(line: 3115, column: 2, scope: !4558)
!4581 = !DILocation(line: 3105, column: 51, scope: !4552)
!4582 = !DILocation(line: 3105, column: 7, scope: !4552)
!4583 = distinct !{!4583, !4556, !4584}
!4584 = !DILocation(line: 3115, column: 2, scope: !4549)
!4585 = !DILocation(line: 3116, column: 14, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3116, column: 7)
!4587 = !DILocation(line: 3116, column: 12, scope: !4586)
!4588 = !DILocation(line: 3116, column: 19, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4586, file: !3, line: 3116, column: 7)
!4590 = !DILocation(line: 3116, column: 43, scope: !4589)
!4591 = !DILocation(line: 3116, column: 23, scope: !4589)
!4592 = !DILocation(line: 3116, column: 21, scope: !4589)
!4593 = !DILocation(line: 3116, column: 7, scope: !4586)
!4594 = !DILocalVariable(name: "link", scope: !4595, file: !3, line: 3118, type: !1669)
!4595 = distinct !DILexicalBlock(scope: !4589, file: !3, line: 3117, column: 2)
!4596 = !DILocation(line: 3118, column: 9, scope: !4595)
!4597 = !DILocation(line: 3118, column: 37, scope: !4595)
!4598 = !DILocation(line: 3118, column: 43, scope: !4595)
!4599 = !DILocation(line: 3118, column: 16, scope: !4595)
!4600 = !DILocalVariable(name: "op", scope: !4595, file: !3, line: 3119, type: !1669)
!4601 = !DILocation(line: 3119, column: 9, scope: !4595)
!4602 = !DILocation(line: 3119, column: 14, scope: !4595)
!4603 = !DILocation(line: 3120, column: 8, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 3120, column: 8)
!4605 = !DILocation(line: 3121, column: 8, scope: !4604)
!4606 = !DILocation(line: 3121, column: 39, scope: !4604)
!4607 = !DILocation(line: 3121, column: 17, scope: !4604)
!4608 = !DILocation(line: 3121, column: 15, scope: !4604)
!4609 = !DILocation(line: 3121, column: 51, scope: !4604)
!4610 = !DILocation(line: 3120, column: 8, scope: !4595)
!4611 = !DILocation(line: 3123, column: 28, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 3122, column: 6)
!4613 = !DILocation(line: 3123, column: 8, scope: !4612)
!4614 = !DILocation(line: 3123, column: 26, scope: !4612)
!4615 = !DILocation(line: 3124, column: 16, scope: !4612)
!4616 = !DILocation(line: 3125, column: 6, scope: !4612)
!4617 = !DILocation(line: 3126, column: 2, scope: !4595)
!4618 = !DILocation(line: 3116, column: 50, scope: !4589)
!4619 = !DILocation(line: 3116, column: 7, scope: !4589)
!4620 = distinct !{!4620, !4593, !4621}
!4621 = !DILocation(line: 3126, column: 2, scope: !4586)
!4622 = !DILocation(line: 3127, column: 7, scope: !4463)
!4623 = !DILocation(line: 3130, column: 5, scope: !4463)
!4624 = !DILocation(line: 3132, column: 21, scope: !4443)
!4625 = !DILocation(line: 3132, column: 10, scope: !4443)
!4626 = !DILocation(line: 3132, column: 8, scope: !4443)
!4627 = !DILocation(line: 3135, column: 23, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 3135, column: 7)
!4629 = !DILocation(line: 3135, column: 7, scope: !4628)
!4630 = !DILocation(line: 3135, column: 7, scope: !4443)
!4631 = !DILocalVariable(name: "lhs", scope: !4632, file: !3, line: 3137, type: !1669)
!4632 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 3136, column: 5)
!4633 = !DILocation(line: 3137, column: 12, scope: !4632)
!4634 = !DILocation(line: 3137, column: 34, scope: !4632)
!4635 = !DILocation(line: 3137, column: 18, scope: !4632)
!4636 = !DILocation(line: 3138, column: 11, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 3138, column: 11)
!4638 = !DILocation(line: 3138, column: 15, scope: !4637)
!4639 = !DILocation(line: 3138, column: 18, scope: !4637)
!4640 = !DILocation(line: 3138, column: 11, scope: !4632)
!4641 = !DILocalVariable(name: "new_lhs", scope: !4642, file: !3, line: 3140, type: !1669)
!4642 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 3139, column: 2)
!4643 = !DILocation(line: 3140, column: 9, scope: !4642)
!4644 = !DILocation(line: 3140, column: 41, scope: !4642)
!4645 = !DILocation(line: 3140, column: 19, scope: !4642)
!4646 = !DILocation(line: 3141, column: 8, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 3141, column: 8)
!4648 = !DILocation(line: 3141, column: 8, scope: !4642)
!4649 = !DILocation(line: 3143, column: 24, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4647, file: !3, line: 3142, column: 6)
!4651 = !DILocation(line: 3143, column: 30, scope: !4650)
!4652 = !DILocation(line: 3143, column: 8, scope: !4650)
!4653 = !DILocation(line: 3144, column: 16, scope: !4650)
!4654 = !DILocation(line: 3145, column: 6, scope: !4650)
!4655 = !DILocation(line: 3146, column: 2, scope: !4642)
!4656 = !DILocation(line: 3147, column: 5, scope: !4632)
!4657 = !DILocation(line: 3149, column: 10, scope: !4443)
!4658 = !DILocation(line: 3149, column: 3, scope: !4443)
!4659 = distinct !DISubprogram(name: "fold_stmt_inplace", scope: !3, file: !3, line: 3174, type: !4660, scopeLine: 3175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4660 = !DISubroutineType(types: !4661)
!4661 = !{!1748, !1959}
!4662 = !DILocalVariable(name: "stmt", arg: 1, scope: !4659, file: !3, line: 3174, type: !1959)
!4663 = !DILocation(line: 3174, column: 27, scope: !4659)
!4664 = !DILocalVariable(name: "gsi", scope: !4659, file: !3, line: 3176, type: !4432)
!4665 = !DILocation(line: 3176, column: 24, scope: !4659)
!4666 = !DILocation(line: 3176, column: 44, scope: !4659)
!4667 = !DILocation(line: 3176, column: 30, scope: !4659)
!4668 = !DILocalVariable(name: "changed", scope: !4659, file: !3, line: 3177, type: !1748)
!4669 = !DILocation(line: 3177, column: 8, scope: !4659)
!4670 = !DILocation(line: 3177, column: 18, scope: !4659)
!4671 = !DILocation(line: 3178, column: 3, scope: !4659)
!4672 = !DILocation(line: 3179, column: 10, scope: !4659)
!4673 = !DILocation(line: 3179, column: 3, scope: !4659)
!4674 = distinct !DISubprogram(name: "gsi_stmt", scope: !743, file: !743, line: 4501, type: !4675, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4675 = !DISubroutineType(types: !4676)
!4676 = !{!1959, !4432}
!4677 = !DILocalVariable(name: "i", arg: 1, scope: !4674, file: !743, line: 4501, type: !4432)
!4678 = !DILocation(line: 4501, column: 32, scope: !4674)
!4679 = !DILocation(line: 4503, column: 12, scope: !4674)
!4680 = !DILocation(line: 4503, column: 17, scope: !4674)
!4681 = !DILocation(line: 4503, column: 3, scope: !4674)
!4682 = distinct !DISubprogram(name: "execute_fold_all_builtins", scope: !3, file: !3, line: 3414, type: !2988, scopeLine: 3415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4683 = !DILocalVariable(name: "cfg_changed", scope: !4682, file: !3, line: 3416, type: !1748)
!4684 = !DILocation(line: 3416, column: 8, scope: !4682)
!4685 = !DILocalVariable(name: "bb", scope: !4682, file: !3, line: 3417, type: !2392)
!4686 = !DILocation(line: 3417, column: 15, scope: !4682)
!4687 = !DILocalVariable(name: "todoflags", scope: !4682, file: !3, line: 3418, type: !7)
!4688 = !DILocation(line: 3418, column: 16, scope: !4682)
!4689 = !DILocation(line: 3420, column: 3, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 3420, column: 3)
!4691 = !DILocation(line: 3420, column: 3, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 3420, column: 3)
!4693 = !DILocalVariable(name: "i", scope: !4694, file: !3, line: 3422, type: !4432)
!4694 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 3421, column: 5)
!4695 = !DILocation(line: 3422, column: 28, scope: !4694)
!4696 = !DILocation(line: 3423, column: 30, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 3423, column: 7)
!4698 = !DILocation(line: 3423, column: 16, scope: !4697)
!4699 = !DILocation(line: 3423, column: 12, scope: !4697)
!4700 = !DILocation(line: 3423, column: 36, scope: !4701)
!4701 = distinct !DILexicalBlock(scope: !4697, file: !3, line: 3423, column: 7)
!4702 = !DILocation(line: 3423, column: 35, scope: !4701)
!4703 = !DILocation(line: 3423, column: 7, scope: !4697)
!4704 = !DILocalVariable(name: "stmt", scope: !4705, file: !3, line: 3425, type: !1959)
!4705 = distinct !DILexicalBlock(scope: !4701, file: !3, line: 3424, column: 2)
!4706 = !DILocation(line: 3425, column: 18, scope: !4705)
!4707 = !DILocalVariable(name: "old_stmt", scope: !4705, file: !3, line: 3425, type: !1959)
!4708 = !DILocation(line: 3425, column: 24, scope: !4705)
!4709 = !DILocalVariable(name: "callee", scope: !4705, file: !3, line: 3426, type: !1669)
!4710 = !DILocation(line: 3426, column: 9, scope: !4705)
!4711 = !DILocalVariable(name: "result", scope: !4705, file: !3, line: 3426, type: !1669)
!4712 = !DILocation(line: 3426, column: 17, scope: !4705)
!4713 = !DILocalVariable(name: "fcode", scope: !4705, file: !3, line: 3427, type: !893)
!4714 = !DILocation(line: 3427, column: 27, scope: !4705)
!4715 = !DILocation(line: 3429, column: 11, scope: !4705)
!4716 = !DILocation(line: 3429, column: 9, scope: !4705)
!4717 = !DILocation(line: 3431, column: 28, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3431, column: 15)
!4719 = !DILocation(line: 3431, column: 15, scope: !4718)
!4720 = !DILocation(line: 3431, column: 34, scope: !4718)
!4721 = !DILocation(line: 3431, column: 15, scope: !4705)
!4722 = !DILocation(line: 3433, column: 8, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 3432, column: 6)
!4724 = !DILocation(line: 3434, column: 8, scope: !4723)
!4725 = distinct !{!4725, !4703, !4726}
!4726 = !DILocation(line: 3519, column: 2, scope: !4697)
!4727 = !DILocation(line: 3436, column: 33, scope: !4705)
!4728 = !DILocation(line: 3436, column: 13, scope: !4705)
!4729 = !DILocation(line: 3436, column: 11, scope: !4705)
!4730 = !DILocation(line: 3437, column: 9, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3437, column: 8)
!4732 = !DILocation(line: 3437, column: 16, scope: !4731)
!4733 = !DILocation(line: 3437, column: 19, scope: !4731)
!4734 = !DILocation(line: 3437, column: 48, scope: !4731)
!4735 = !DILocation(line: 3437, column: 8, scope: !4705)
!4736 = !DILocation(line: 3439, column: 8, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 3438, column: 6)
!4738 = !DILocation(line: 3440, column: 8, scope: !4737)
!4739 = !DILocation(line: 3442, column: 12, scope: !4705)
!4740 = !DILocation(line: 3442, column: 10, scope: !4705)
!4741 = !DILocation(line: 3444, column: 31, scope: !4705)
!4742 = !DILocation(line: 3444, column: 13, scope: !4705)
!4743 = !DILocation(line: 3444, column: 11, scope: !4705)
!4744 = !DILocation(line: 3446, column: 8, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3446, column: 8)
!4746 = !DILocation(line: 3446, column: 8, scope: !4705)
!4747 = !DILocation(line: 3447, column: 37, scope: !4745)
!4748 = !DILocation(line: 3447, column: 43, scope: !4745)
!4749 = !DILocation(line: 3447, column: 6, scope: !4745)
!4750 = !DILocation(line: 3449, column: 9, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3449, column: 8)
!4752 = !DILocation(line: 3449, column: 8, scope: !4705)
!4753 = !DILocation(line: 3450, column: 14, scope: !4751)
!4754 = !DILocation(line: 3450, column: 6, scope: !4751)
!4755 = !DILocation(line: 3456, column: 26, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 3451, column: 8)
!4757 = !DILocation(line: 3456, column: 24, scope: !4756)
!4758 = !DILocation(line: 3457, column: 3, scope: !4756)
!4759 = !DILocation(line: 3460, column: 12, scope: !4756)
!4760 = !DILocation(line: 3460, column: 10, scope: !4756)
!4761 = !DILocation(line: 3461, column: 7, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 3461, column: 7)
!4763 = !DILocation(line: 3461, column: 7, scope: !4756)
!4764 = !DILocation(line: 3462, column: 5, scope: !4762)
!4765 = !DILocation(line: 3463, column: 3, scope: !4756)
!4766 = !DILocation(line: 3464, column: 3, scope: !4756)
!4767 = !DILocation(line: 3470, column: 37, scope: !4756)
!4768 = !DILocation(line: 3470, column: 12, scope: !4756)
!4769 = !DILocation(line: 3470, column: 10, scope: !4756)
!4770 = !DILocation(line: 3471, column: 7, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4756, file: !3, line: 3471, column: 7)
!4772 = !DILocation(line: 3471, column: 7, scope: !4756)
!4773 = !DILocation(line: 3472, column: 5, scope: !4771)
!4774 = !DILocation(line: 3476, column: 3, scope: !4756)
!4775 = !DILocation(line: 3477, column: 3, scope: !4756)
!4776 = !DILocation(line: 3478, column: 8, scope: !4756)
!4777 = !DILocation(line: 3480, column: 8, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3480, column: 8)
!4779 = !DILocation(line: 3480, column: 18, scope: !4778)
!4780 = !DILocation(line: 3480, column: 22, scope: !4778)
!4781 = !DILocation(line: 3480, column: 33, scope: !4778)
!4782 = !DILocation(line: 3480, column: 8, scope: !4705)
!4783 = !DILocation(line: 3482, column: 17, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 3481, column: 6)
!4785 = !DILocation(line: 3482, column: 8, scope: !4784)
!4786 = !DILocation(line: 3483, column: 27, scope: !4784)
!4787 = !DILocation(line: 3483, column: 38, scope: !4784)
!4788 = !DILocation(line: 3483, column: 47, scope: !4784)
!4789 = !DILocation(line: 3483, column: 8, scope: !4784)
!4790 = !DILocation(line: 3484, column: 6, scope: !4784)
!4791 = !DILocation(line: 3486, column: 22, scope: !4705)
!4792 = !DILocation(line: 3486, column: 20, scope: !4705)
!4793 = !DILocation(line: 3487, column: 43, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3487, column: 15)
!4795 = !DILocation(line: 3487, column: 16, scope: !4794)
!4796 = !DILocation(line: 3487, column: 15, scope: !4705)
!4797 = !DILocation(line: 3489, column: 48, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 3488, column: 6)
!4799 = !DILocation(line: 3489, column: 8, scope: !4798)
!4800 = !DILocation(line: 3490, column: 18, scope: !4798)
!4801 = !DILocation(line: 3491, column: 6, scope: !4798)
!4802 = !DILocation(line: 3493, column: 11, scope: !4705)
!4803 = !DILocation(line: 3493, column: 9, scope: !4705)
!4804 = !DILocation(line: 3494, column: 17, scope: !4705)
!4805 = !DILocation(line: 3494, column: 4, scope: !4705)
!4806 = !DILocation(line: 3496, column: 40, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3496, column: 8)
!4808 = !DILocation(line: 3496, column: 50, scope: !4807)
!4809 = !DILocation(line: 3496, column: 8, scope: !4807)
!4810 = !DILocation(line: 3497, column: 8, scope: !4807)
!4811 = !DILocation(line: 3497, column: 39, scope: !4807)
!4812 = !DILocation(line: 3497, column: 11, scope: !4807)
!4813 = !DILocation(line: 3496, column: 8, scope: !4705)
!4814 = !DILocation(line: 3498, column: 18, scope: !4807)
!4815 = !DILocation(line: 3498, column: 6, scope: !4807)
!4816 = !DILocation(line: 3500, column: 8, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3500, column: 8)
!4818 = !DILocation(line: 3500, column: 18, scope: !4817)
!4819 = !DILocation(line: 3500, column: 22, scope: !4817)
!4820 = !DILocation(line: 3500, column: 33, scope: !4817)
!4821 = !DILocation(line: 3500, column: 8, scope: !4705)
!4822 = !DILocation(line: 3502, column: 17, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 3501, column: 6)
!4824 = !DILocation(line: 3502, column: 8, scope: !4823)
!4825 = !DILocation(line: 3503, column: 27, scope: !4823)
!4826 = !DILocation(line: 3503, column: 38, scope: !4823)
!4827 = !DILocation(line: 3503, column: 47, scope: !4823)
!4828 = !DILocation(line: 3503, column: 8, scope: !4823)
!4829 = !DILocation(line: 3504, column: 17, scope: !4823)
!4830 = !DILocation(line: 3504, column: 8, scope: !4823)
!4831 = !DILocation(line: 3505, column: 6, scope: !4823)
!4832 = !DILocation(line: 3509, column: 28, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3509, column: 15)
!4834 = !DILocation(line: 3509, column: 15, scope: !4833)
!4835 = !DILocation(line: 3509, column: 34, scope: !4833)
!4836 = !DILocation(line: 3509, column: 15, scope: !4705)
!4837 = !DILocation(line: 3511, column: 8, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4833, file: !3, line: 3510, column: 6)
!4839 = !DILocation(line: 3512, column: 8, scope: !4838)
!4840 = !DILocation(line: 3514, column: 33, scope: !4705)
!4841 = !DILocation(line: 3514, column: 13, scope: !4705)
!4842 = !DILocation(line: 3514, column: 11, scope: !4705)
!4843 = !DILocation(line: 3515, column: 9, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 3515, column: 8)
!4845 = !DILocation(line: 3516, column: 15, scope: !4844)
!4846 = !DILocation(line: 3516, column: 18, scope: !4844)
!4847 = !DILocation(line: 3516, column: 47, scope: !4844)
!4848 = !DILocation(line: 3517, column: 8, scope: !4844)
!4849 = !DILocation(line: 3517, column: 11, scope: !4844)
!4850 = !DILocation(line: 3517, column: 42, scope: !4844)
!4851 = !DILocation(line: 3517, column: 39, scope: !4844)
!4852 = !DILocation(line: 3515, column: 8, scope: !4705)
!4853 = !DILocation(line: 3518, column: 6, scope: !4844)
!4854 = !DILocation(line: 3423, column: 7, scope: !4701)
!4855 = !DILocation(line: 3520, column: 5, scope: !4694)
!4856 = distinct !{!4856, !4689, !4857}
!4857 = !DILocation(line: 3520, column: 5, scope: !4690)
!4858 = !DILocation(line: 3523, column: 7, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 3523, column: 7)
!4860 = !DILocation(line: 3523, column: 7, scope: !4682)
!4861 = !DILocation(line: 3524, column: 15, scope: !4859)
!4862 = !DILocation(line: 3524, column: 5, scope: !4859)
!4863 = !DILocation(line: 3526, column: 10, scope: !4682)
!4864 = !DILocation(line: 3526, column: 3, scope: !4682)
!4865 = distinct !DISubprogram(name: "get_default_value", scope: !3, file: !3, line: 335, type: !4866, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4866 = !DISubroutineType(types: !4867)
!4867 = !{!2967, !1669}
!4868 = !DILocalVariable(name: "var", arg: 1, scope: !4865, file: !3, line: 335, type: !1669)
!4869 = !DILocation(line: 335, column: 25, scope: !4865)
!4870 = !DILocalVariable(name: "sym", scope: !4865, file: !3, line: 337, type: !1669)
!4871 = !DILocation(line: 337, column: 8, scope: !4865)
!4872 = !DILocation(line: 337, column: 14, scope: !4865)
!4873 = !DILocalVariable(name: "val", scope: !4865, file: !3, line: 338, type: !2967)
!4874 = !DILocation(line: 338, column: 16, scope: !4865)
!4875 = !DILocalVariable(name: "stmt", scope: !4865, file: !3, line: 339, type: !1959)
!4876 = !DILocation(line: 339, column: 10, scope: !4865)
!4877 = !DILocation(line: 341, column: 10, scope: !4865)
!4878 = !DILocation(line: 341, column: 8, scope: !4865)
!4879 = !DILocation(line: 343, column: 21, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 343, column: 7)
!4881 = !DILocation(line: 343, column: 7, scope: !4880)
!4882 = !DILocation(line: 343, column: 7, scope: !4865)
!4883 = !DILocation(line: 349, column: 26, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4885, file: !3, line: 349, column: 11)
!4885 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 344, column: 5)
!4886 = !DILocation(line: 349, column: 11, scope: !4884)
!4887 = !DILocation(line: 349, column: 31, scope: !4884)
!4888 = !DILocation(line: 349, column: 34, scope: !4884)
!4889 = !DILocation(line: 349, column: 50, scope: !4884)
!4890 = !DILocation(line: 349, column: 11, scope: !4885)
!4891 = !DILocation(line: 350, column: 6, scope: !4884)
!4892 = !DILocation(line: 350, column: 18, scope: !4884)
!4893 = !DILocation(line: 350, column: 2, scope: !4884)
!4894 = !DILocation(line: 352, column: 6, scope: !4884)
!4895 = !DILocation(line: 352, column: 18, scope: !4884)
!4896 = !DILocation(line: 353, column: 5, scope: !4885)
!4897 = !DILocation(line: 354, column: 30, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 354, column: 12)
!4899 = !DILocation(line: 354, column: 12, scope: !4898)
!4900 = !DILocation(line: 357, column: 5, scope: !4898)
!4901 = !DILocation(line: 357, column: 25, scope: !4898)
!4902 = !DILocation(line: 357, column: 9, scope: !4898)
!4903 = !DILocation(line: 358, column: 9, scope: !4898)
!4904 = !DILocation(line: 358, column: 29, scope: !4898)
!4905 = !DILocation(line: 358, column: 12, scope: !4898)
!4906 = !DILocation(line: 358, column: 35, scope: !4898)
!4907 = !DILocation(line: 359, column: 5, scope: !4898)
!4908 = !DILocation(line: 359, column: 21, scope: !4898)
!4909 = !DILocation(line: 359, column: 8, scope: !4898)
!4910 = !DILocation(line: 359, column: 27, scope: !4898)
!4911 = !DILocation(line: 354, column: 12, scope: !4880)
!4912 = !DILocalVariable(name: "cst", scope: !4913, file: !3, line: 361, type: !1669)
!4913 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 360, column: 5)
!4914 = !DILocation(line: 361, column: 12, scope: !4913)
!4915 = !DILocation(line: 362, column: 35, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4913, file: !3, line: 362, column: 11)
!4917 = !DILocation(line: 362, column: 11, scope: !4916)
!4918 = !DILocation(line: 363, column: 4, scope: !4916)
!4919 = !DILocation(line: 363, column: 7, scope: !4916)
!4920 = !DILocation(line: 364, column: 4, scope: !4916)
!4921 = !DILocation(line: 364, column: 61, scope: !4916)
!4922 = !DILocation(line: 364, column: 41, scope: !4916)
!4923 = !DILocation(line: 364, column: 14, scope: !4916)
!4924 = !DILocation(line: 364, column: 12, scope: !4916)
!4925 = !DILocation(line: 362, column: 11, scope: !4913)
!4926 = !DILocation(line: 366, column: 8, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 365, column: 2)
!4928 = !DILocation(line: 366, column: 20, scope: !4927)
!4929 = !DILocation(line: 367, column: 16, scope: !4927)
!4930 = !DILocation(line: 367, column: 8, scope: !4927)
!4931 = !DILocation(line: 367, column: 14, scope: !4927)
!4932 = !DILocation(line: 368, column: 2, scope: !4927)
!4933 = !DILocation(line: 372, column: 6, scope: !4916)
!4934 = !DILocation(line: 372, column: 18, scope: !4916)
!4935 = !DILocation(line: 373, column: 5, scope: !4913)
!4936 = !DILocation(line: 377, column: 11, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 375, column: 5)
!4938 = !DILocation(line: 377, column: 23, scope: !4937)
!4939 = !DILocation(line: 380, column: 3, scope: !4865)
!4940 = distinct !DISubprogram(name: "canonicalize_float_value", scope: !3, file: !3, line: 431, type: !4941, scopeLine: 432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4941 = !DISubroutineType(types: !4942)
!4942 = !{null, !2966}
!4943 = !DILocalVariable(name: "val", arg: 1, scope: !4940, file: !3, line: 431, type: !2966)
!4944 = !DILocation(line: 431, column: 41, scope: !4940)
!4945 = !DILocalVariable(name: "mode", scope: !4940, file: !3, line: 433, type: !5)
!4946 = !DILocation(line: 433, column: 21, scope: !4940)
!4947 = !DILocalVariable(name: "type", scope: !4940, file: !3, line: 434, type: !1669)
!4948 = !DILocation(line: 434, column: 8, scope: !4940)
!4949 = !DILocalVariable(name: "d", scope: !4940, file: !3, line: 435, type: !1691)
!4950 = !DILocation(line: 435, column: 19, scope: !4940)
!4951 = !DILocation(line: 437, column: 7, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 437, column: 7)
!4953 = !DILocation(line: 437, column: 12, scope: !4952)
!4954 = !DILocation(line: 437, column: 24, scope: !4952)
!4955 = !DILocation(line: 438, column: 7, scope: !4952)
!4956 = !DILocation(line: 438, column: 10, scope: !4952)
!4957 = !DILocation(line: 438, column: 33, scope: !4952)
!4958 = !DILocation(line: 437, column: 7, scope: !4940)
!4959 = !DILocation(line: 439, column: 5, scope: !4952)
!4960 = !DILocation(line: 441, column: 7, scope: !4940)
!4961 = !DILocation(line: 442, column: 10, scope: !4940)
!4962 = !DILocation(line: 442, column: 8, scope: !4940)
!4963 = !DILocation(line: 443, column: 10, scope: !4940)
!4964 = !DILocation(line: 443, column: 8, scope: !4940)
!4965 = !DILocation(line: 445, column: 8, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 445, column: 7)
!4967 = !DILocation(line: 446, column: 7, scope: !4966)
!4968 = !DILocation(line: 446, column: 10, scope: !4966)
!4969 = !DILocation(line: 445, column: 7, scope: !4940)
!4970 = !DILocation(line: 448, column: 32, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 447, column: 5)
!4972 = !DILocation(line: 448, column: 20, scope: !4971)
!4973 = !DILocation(line: 448, column: 7, scope: !4971)
!4974 = !DILocation(line: 448, column: 12, scope: !4971)
!4975 = !DILocation(line: 448, column: 18, scope: !4971)
!4976 = !DILocation(line: 449, column: 7, scope: !4971)
!4977 = !DILocation(line: 452, column: 8, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 452, column: 7)
!4979 = !DILocation(line: 453, column: 7, scope: !4978)
!4980 = !DILocation(line: 453, column: 10, scope: !4978)
!4981 = !DILocation(line: 452, column: 7, scope: !4940)
!4982 = !DILocation(line: 455, column: 7, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 454, column: 5)
!4984 = !DILocation(line: 455, column: 12, scope: !4983)
!4985 = !DILocation(line: 455, column: 24, scope: !4983)
!4986 = !DILocation(line: 456, column: 7, scope: !4983)
!4987 = !DILocation(line: 456, column: 12, scope: !4983)
!4988 = !DILocation(line: 456, column: 18, scope: !4983)
!4989 = !DILocation(line: 457, column: 7, scope: !4983)
!4990 = !DILocation(line: 459, column: 1, scope: !4940)
!4991 = distinct !DISubprogram(name: "gimple_nop_p", scope: !743, file: !743, line: 4304, type: !4378, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4992 = !DILocalVariable(name: "g", arg: 1, scope: !4991, file: !743, line: 4304, type: !4380)
!4993 = !DILocation(line: 4304, column: 28, scope: !4991)
!4994 = !DILocation(line: 4306, column: 23, scope: !4991)
!4995 = !DILocation(line: 4306, column: 10, scope: !4991)
!4996 = !DILocation(line: 4306, column: 26, scope: !4991)
!4997 = !DILocation(line: 4306, column: 3, scope: !4991)
!4998 = distinct !DISubprogram(name: "is_gimple_call", scope: !743, file: !743, line: 1870, type: !4378, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!4999 = !DILocalVariable(name: "gs", arg: 1, scope: !4998, file: !743, line: 1870, type: !4380)
!5000 = !DILocation(line: 1870, column: 30, scope: !4998)
!5001 = !DILocation(line: 1872, column: 23, scope: !4998)
!5002 = !DILocation(line: 1872, column: 10, scope: !4998)
!5003 = !DILocation(line: 1872, column: 27, scope: !4998)
!5004 = !DILocation(line: 1872, column: 3, scope: !4998)
!5005 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !743, file: !743, line: 1878, type: !4408, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5006 = !DILocalVariable(name: "gs", arg: 1, scope: !5005, file: !743, line: 1878, type: !4380)
!5007 = !DILocation(line: 1878, column: 31, scope: !5005)
!5008 = !DILocation(line: 1881, column: 21, scope: !5005)
!5009 = !DILocation(line: 1881, column: 10, scope: !5005)
!5010 = !DILocation(line: 1881, column: 3, scope: !5005)
!5011 = distinct !DISubprogram(name: "gimple_code", scope: !743, file: !743, line: 1052, type: !5012, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5012 = !DISubroutineType(types: !5013)
!5013 = !{!742, !4380}
!5014 = !DILocalVariable(name: "g", arg: 1, scope: !5011, file: !743, line: 1052, type: !4380)
!5015 = !DILocation(line: 1052, column: 27, scope: !5011)
!5016 = !DILocation(line: 1054, column: 10, scope: !5011)
!5017 = !DILocation(line: 1054, column: 13, scope: !5011)
!5018 = !DILocation(line: 1054, column: 20, scope: !5011)
!5019 = !DILocation(line: 1054, column: 3, scope: !5011)
!5020 = distinct !DISubprogram(name: "gimple_op", scope: !743, file: !743, line: 1631, type: !5021, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5021 = !DISubroutineType(types: !5022)
!5022 = !{!1669, !4380, !7}
!5023 = !DILocalVariable(name: "gs", arg: 1, scope: !5020, file: !743, line: 1631, type: !4380)
!5024 = !DILocation(line: 1631, column: 25, scope: !5020)
!5025 = !DILocalVariable(name: "i", arg: 2, scope: !5020, file: !743, line: 1631, type: !7)
!5026 = !DILocation(line: 1631, column: 38, scope: !5020)
!5027 = !DILocation(line: 1633, column: 23, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5020, file: !743, line: 1633, column: 7)
!5029 = !DILocation(line: 1633, column: 7, scope: !5028)
!5030 = !DILocation(line: 1633, column: 7, scope: !5020)
!5031 = !DILocation(line: 1638, column: 26, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5028, file: !743, line: 1634, column: 5)
!5033 = !DILocation(line: 1638, column: 14, scope: !5032)
!5034 = !DILocation(line: 1638, column: 50, scope: !5032)
!5035 = !DILocation(line: 1638, column: 7, scope: !5032)
!5036 = !DILocation(line: 1641, column: 5, scope: !5028)
!5037 = !DILocation(line: 1642, column: 1, scope: !5020)
!5038 = distinct !DISubprogram(name: "gimple_has_ops", scope: !743, file: !743, line: 1274, type: !4378, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5039 = !DILocalVariable(name: "g", arg: 1, scope: !5038, file: !743, line: 1274, type: !4380)
!5040 = !DILocation(line: 1274, column: 30, scope: !5038)
!5041 = !DILocation(line: 1276, column: 23, scope: !5038)
!5042 = !DILocation(line: 1276, column: 10, scope: !5038)
!5043 = !DILocation(line: 1276, column: 26, scope: !5038)
!5044 = !DILocation(line: 1276, column: 41, scope: !5038)
!5045 = !DILocation(line: 1276, column: 57, scope: !5038)
!5046 = !DILocation(line: 1276, column: 44, scope: !5038)
!5047 = !DILocation(line: 1276, column: 60, scope: !5038)
!5048 = !DILocation(line: 0, scope: !5038)
!5049 = !DILocation(line: 1276, column: 3, scope: !5038)
!5050 = distinct !DISubprogram(name: "gimple_ops", scope: !743, file: !743, line: 1614, type: !5051, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5051 = !DISubroutineType(types: !5052)
!5052 = !{!1993, !1959}
!5053 = !DILocalVariable(name: "gs", arg: 1, scope: !5050, file: !743, line: 1614, type: !1959)
!5054 = !DILocation(line: 1614, column: 20, scope: !5050)
!5055 = !DILocalVariable(name: "off", scope: !5050, file: !743, line: 1616, type: !2104)
!5056 = !DILocation(line: 1616, column: 10, scope: !5050)
!5057 = !DILocation(line: 1621, column: 56, scope: !5050)
!5058 = !DILocation(line: 1621, column: 28, scope: !5050)
!5059 = !DILocation(line: 1621, column: 9, scope: !5050)
!5060 = !DILocation(line: 1621, column: 7, scope: !5050)
!5061 = !DILocation(line: 1622, column: 3, scope: !5050)
!5062 = !DILocation(line: 1624, column: 29, scope: !5050)
!5063 = !DILocation(line: 1624, column: 20, scope: !5050)
!5064 = !DILocation(line: 1624, column: 34, scope: !5050)
!5065 = !DILocation(line: 1624, column: 32, scope: !5050)
!5066 = !DILocation(line: 1624, column: 10, scope: !5050)
!5067 = !DILocation(line: 1624, column: 3, scope: !5050)
!5068 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !743, file: !743, line: 1073, type: !5069, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5069 = !DISubroutineType(types: !5070)
!5070 = !{!781, !1959}
!5071 = !DILocalVariable(name: "gs", arg: 1, scope: !5068, file: !743, line: 1073, type: !1959)
!5072 = !DILocation(line: 1073, column: 36, scope: !5068)
!5073 = !DILocation(line: 1075, column: 37, scope: !5068)
!5074 = !DILocation(line: 1075, column: 24, scope: !5068)
!5075 = !DILocation(line: 1075, column: 10, scope: !5068)
!5076 = !DILocation(line: 1075, column: 3, scope: !5068)
!5077 = distinct !DISubprogram(name: "gss_for_code", scope: !743, file: !743, line: 1061, type: !5078, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5078 = !DISubroutineType(types: !5079)
!5079 = !{!781, !742}
!5080 = !DILocalVariable(name: "code", arg: 1, scope: !5077, file: !743, line: 1061, type: !742)
!5081 = !DILocation(line: 1061, column: 32, scope: !5077)
!5082 = !DILocation(line: 1066, column: 24, scope: !5077)
!5083 = !DILocation(line: 1066, column: 10, scope: !5077)
!5084 = !DILocation(line: 1066, column: 3, scope: !5077)
!5085 = distinct !DISubprogram(name: "ccp_initialize", scope: !3, file: !3, line: 643, type: !5086, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5086 = !DISubroutineType(types: !5087)
!5087 = !{null}
!5088 = !DILocalVariable(name: "bb", scope: !5085, file: !3, line: 645, type: !2392)
!5089 = !DILocation(line: 645, column: 15, scope: !5085)
!5090 = !DILocation(line: 647, column: 15, scope: !5085)
!5091 = !DILocation(line: 647, column: 13, scope: !5085)
!5092 = !DILocation(line: 650, column: 3, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 650, column: 3)
!5094 = !DILocation(line: 650, column: 3, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 650, column: 3)
!5096 = !DILocalVariable(name: "i", scope: !5097, file: !3, line: 652, type: !4432)
!5097 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 651, column: 5)
!5098 = !DILocation(line: 652, column: 28, scope: !5097)
!5099 = !DILocation(line: 654, column: 30, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 654, column: 7)
!5101 = !DILocation(line: 654, column: 16, scope: !5100)
!5102 = !DILocation(line: 654, column: 12, scope: !5100)
!5103 = !DILocation(line: 654, column: 36, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !5100, file: !3, line: 654, column: 7)
!5105 = !DILocation(line: 654, column: 35, scope: !5104)
!5106 = !DILocation(line: 654, column: 7, scope: !5100)
!5107 = !DILocalVariable(name: "stmt", scope: !5108, file: !3, line: 656, type: !1959)
!5108 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 655, column: 9)
!5109 = !DILocation(line: 656, column: 11, scope: !5108)
!5110 = !DILocation(line: 656, column: 18, scope: !5108)
!5111 = !DILocalVariable(name: "is_varying", scope: !5108, file: !3, line: 657, type: !1748)
!5112 = !DILocation(line: 657, column: 9, scope: !5108)
!5113 = !DILocation(line: 662, column: 24, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 662, column: 8)
!5115 = !DILocation(line: 662, column: 8, scope: !5114)
!5116 = !DILocation(line: 662, column: 8, scope: !5108)
!5117 = !DILocation(line: 663, column: 17, scope: !5114)
!5118 = !DILocation(line: 663, column: 6, scope: !5114)
!5119 = !DILocation(line: 665, column: 42, scope: !5114)
!5120 = !DILocation(line: 665, column: 19, scope: !5114)
!5121 = !DILocation(line: 665, column: 17, scope: !5114)
!5122 = !DILocation(line: 667, column: 8, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 667, column: 8)
!5124 = !DILocation(line: 667, column: 8, scope: !5108)
!5125 = !DILocalVariable(name: "def", scope: !5126, file: !3, line: 669, type: !1669)
!5126 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 668, column: 6)
!5127 = !DILocation(line: 669, column: 13, scope: !5126)
!5128 = !DILocalVariable(name: "iter", scope: !5126, file: !3, line: 670, type: !5129)
!5129 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !808, line: 140, baseType: !5130)
!5130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !808, line: 131, size: 320, elements: !5131)
!5131 = !{!5132, !5133, !5134, !5136, !5138, !5139, !5140}
!5132 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !5130, file: !808, line: 133, baseType: !1748, size: 8)
!5133 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !5130, file: !808, line: 134, baseType: !807, size: 32, offset: 32)
!5134 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !5130, file: !808, line: 135, baseType: !5135, size: 64, offset: 64)
!5135 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !808, line: 42, baseType: !1988)
!5136 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !5130, file: !808, line: 136, baseType: !5137, size: 64, offset: 128)
!5137 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !808, line: 50, baseType: !1995)
!5138 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !5130, file: !808, line: 137, baseType: !1725, size: 32, offset: 192)
!5139 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !5130, file: !808, line: 138, baseType: !1725, size: 32, offset: 224)
!5140 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !5130, file: !808, line: 139, baseType: !1959, size: 64, offset: 256)
!5141 = !DILocation(line: 670, column: 20, scope: !5126)
!5142 = !DILocation(line: 674, column: 8, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 674, column: 8)
!5144 = !DILocation(line: 674, column: 8, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 674, column: 8)
!5146 = !DILocation(line: 675, column: 22, scope: !5145)
!5147 = !DILocation(line: 675, column: 3, scope: !5145)
!5148 = distinct !{!5148, !5142, !5149}
!5149 = !DILocation(line: 675, column: 25, scope: !5143)
!5150 = !DILocation(line: 676, column: 6, scope: !5126)
!5151 = !DILocation(line: 677, column: 36, scope: !5108)
!5152 = !DILocation(line: 677, column: 43, scope: !5108)
!5153 = !DILocation(line: 677, column: 42, scope: !5108)
!5154 = !DILocation(line: 677, column: 11, scope: !5108)
!5155 = !DILocation(line: 678, column: 2, scope: !5108)
!5156 = !DILocation(line: 654, column: 51, scope: !5104)
!5157 = !DILocation(line: 654, column: 7, scope: !5104)
!5158 = distinct !{!5158, !5106, !5159}
!5159 = !DILocation(line: 678, column: 2, scope: !5100)
!5160 = !DILocation(line: 679, column: 5, scope: !5097)
!5161 = distinct !{!5161, !5092, !5162}
!5162 = !DILocation(line: 679, column: 5, scope: !5093)
!5163 = !DILocation(line: 684, column: 3, scope: !5164)
!5164 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 684, column: 3)
!5165 = !DILocation(line: 684, column: 3, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 684, column: 3)
!5167 = !DILocalVariable(name: "i", scope: !5168, file: !3, line: 686, type: !4432)
!5168 = distinct !DILexicalBlock(scope: !5166, file: !3, line: 685, column: 5)
!5169 = !DILocation(line: 686, column: 28, scope: !5168)
!5170 = !DILocation(line: 688, column: 32, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 688, column: 7)
!5172 = !DILocation(line: 688, column: 16, scope: !5171)
!5173 = !DILocation(line: 688, column: 12, scope: !5171)
!5174 = !DILocation(line: 688, column: 38, scope: !5175)
!5175 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 688, column: 7)
!5176 = !DILocation(line: 688, column: 37, scope: !5175)
!5177 = !DILocation(line: 688, column: 7, scope: !5171)
!5178 = !DILocalVariable(name: "phi", scope: !5179, file: !3, line: 690, type: !1959)
!5179 = distinct !DILexicalBlock(scope: !5175, file: !3, line: 689, column: 9)
!5180 = !DILocation(line: 690, column: 18, scope: !5179)
!5181 = !DILocation(line: 690, column: 24, scope: !5179)
!5182 = !DILocation(line: 692, column: 43, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 692, column: 8)
!5184 = !DILocation(line: 692, column: 24, scope: !5183)
!5185 = !DILocation(line: 692, column: 9, scope: !5183)
!5186 = !DILocation(line: 692, column: 8, scope: !5179)
!5187 = !DILocation(line: 693, column: 38, scope: !5183)
!5188 = !DILocation(line: 693, column: 13, scope: !5183)
!5189 = !DILocation(line: 695, column: 38, scope: !5183)
!5190 = !DILocation(line: 695, column: 13, scope: !5183)
!5191 = !DILocation(line: 696, column: 2, scope: !5179)
!5192 = !DILocation(line: 688, column: 53, scope: !5175)
!5193 = !DILocation(line: 688, column: 7, scope: !5175)
!5194 = distinct !{!5194, !5177, !5195}
!5195 = !DILocation(line: 696, column: 2, scope: !5171)
!5196 = !DILocation(line: 697, column: 5, scope: !5168)
!5197 = distinct !{!5197, !5163, !5198}
!5198 = !DILocation(line: 697, column: 5, scope: !5164)
!5199 = !DILocation(line: 698, column: 1, scope: !5085)
!5200 = distinct !DISubprogram(name: "ccp_visit_stmt", scope: !3, file: !3, line: 1680, type: !5201, scopeLine: 1681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5201 = !DISubroutineType(types: !5202)
!5202 = !{!834, !1959, !5203, !1993}
!5203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1939, size: 64)
!5204 = !DILocalVariable(name: "stmt", arg: 1, scope: !5200, file: !3, line: 1680, type: !1959)
!5205 = !DILocation(line: 1680, column: 24, scope: !5200)
!5206 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !5200, file: !3, line: 1680, type: !5203)
!5207 = !DILocation(line: 1680, column: 36, scope: !5200)
!5208 = !DILocalVariable(name: "output_p", arg: 3, scope: !5200, file: !3, line: 1680, type: !1993)
!5209 = !DILocation(line: 1680, column: 56, scope: !5200)
!5210 = !DILocalVariable(name: "def", scope: !5200, file: !3, line: 1682, type: !1669)
!5211 = !DILocation(line: 1682, column: 8, scope: !5200)
!5212 = !DILocalVariable(name: "iter", scope: !5200, file: !3, line: 1683, type: !5129)
!5213 = !DILocation(line: 1683, column: 15, scope: !5200)
!5214 = !DILocation(line: 1685, column: 7, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1685, column: 7)
!5216 = !DILocation(line: 1685, column: 17, scope: !5215)
!5217 = !DILocation(line: 1685, column: 21, scope: !5215)
!5218 = !DILocation(line: 1685, column: 32, scope: !5215)
!5219 = !DILocation(line: 1685, column: 7, scope: !5200)
!5220 = !DILocation(line: 1687, column: 16, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5215, file: !3, line: 1686, column: 5)
!5222 = !DILocation(line: 1687, column: 7, scope: !5221)
!5223 = !DILocation(line: 1688, column: 26, scope: !5221)
!5224 = !DILocation(line: 1688, column: 37, scope: !5221)
!5225 = !DILocation(line: 1688, column: 46, scope: !5221)
!5226 = !DILocation(line: 1688, column: 7, scope: !5221)
!5227 = !DILocation(line: 1689, column: 5, scope: !5221)
!5228 = !DILocation(line: 1691, column: 24, scope: !5200)
!5229 = !DILocation(line: 1691, column: 11, scope: !5200)
!5230 = !DILocation(line: 1691, column: 3, scope: !5200)
!5231 = !DILocation(line: 1697, column: 34, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1692, column: 5)
!5233 = !DILocation(line: 1697, column: 40, scope: !5232)
!5234 = !DILocation(line: 1697, column: 16, scope: !5232)
!5235 = !DILocation(line: 1697, column: 9, scope: !5232)
!5236 = !DILocation(line: 1701, column: 30, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 1701, column: 13)
!5238 = !DILocation(line: 1701, column: 13, scope: !5237)
!5239 = !DILocation(line: 1701, column: 36, scope: !5237)
!5240 = !DILocation(line: 1701, column: 13, scope: !5232)
!5241 = !DILocation(line: 1702, column: 36, scope: !5237)
!5242 = !DILocation(line: 1702, column: 42, scope: !5237)
!5243 = !DILocation(line: 1702, column: 18, scope: !5237)
!5244 = !DILocation(line: 1702, column: 11, scope: !5237)
!5245 = !DILocation(line: 1703, column: 9, scope: !5232)
!5246 = !DILocation(line: 1711, column: 33, scope: !5232)
!5247 = !DILocation(line: 1711, column: 39, scope: !5232)
!5248 = !DILocation(line: 1711, column: 16, scope: !5232)
!5249 = !DILocation(line: 1711, column: 9, scope: !5232)
!5250 = !DILocation(line: 1714, column: 9, scope: !5232)
!5251 = !DILocation(line: 1719, column: 7, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1719, column: 7)
!5253 = !DILocation(line: 1719, column: 17, scope: !5252)
!5254 = !DILocation(line: 1719, column: 21, scope: !5252)
!5255 = !DILocation(line: 1719, column: 32, scope: !5252)
!5256 = !DILocation(line: 1719, column: 7, scope: !5200)
!5257 = !DILocation(line: 1720, column: 14, scope: !5252)
!5258 = !DILocation(line: 1720, column: 5, scope: !5252)
!5259 = !DILocation(line: 1725, column: 3, scope: !5260)
!5260 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1725, column: 3)
!5261 = !DILocation(line: 1725, column: 3, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5260, file: !3, line: 1725, column: 3)
!5263 = !DILocalVariable(name: "v", scope: !5264, file: !3, line: 1727, type: !2967)
!5264 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1726, column: 5)
!5265 = !DILocation(line: 1727, column: 20, scope: !5264)
!5266 = !DILocation(line: 1728, column: 26, scope: !5264)
!5267 = !DILocation(line: 1728, column: 7, scope: !5264)
!5268 = !DILocation(line: 1729, column: 5, scope: !5264)
!5269 = distinct !{!5269, !5259, !5270}
!5270 = !DILocation(line: 1729, column: 5, scope: !5260)
!5271 = !DILocation(line: 1731, column: 3, scope: !5200)
!5272 = !DILocation(line: 1732, column: 1, scope: !5200)
!5273 = distinct !DISubprogram(name: "ccp_visit_phi_node", scope: !3, file: !3, line: 796, type: !5274, scopeLine: 797, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5274 = !DISubroutineType(types: !5275)
!5275 = !{!834, !1959}
!5276 = !DILocalVariable(name: "phi", arg: 1, scope: !5273, file: !3, line: 796, type: !1959)
!5277 = !DILocation(line: 796, column: 28, scope: !5273)
!5278 = !DILocalVariable(name: "i", scope: !5273, file: !3, line: 798, type: !7)
!5279 = !DILocation(line: 798, column: 12, scope: !5273)
!5280 = !DILocalVariable(name: "old_val", scope: !5273, file: !3, line: 799, type: !2966)
!5281 = !DILocation(line: 799, column: 17, scope: !5273)
!5282 = !DILocalVariable(name: "new_val", scope: !5273, file: !3, line: 799, type: !2967)
!5283 = !DILocation(line: 799, column: 26, scope: !5273)
!5284 = !DILocation(line: 801, column: 7, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 801, column: 7)
!5286 = !DILocation(line: 801, column: 17, scope: !5285)
!5287 = !DILocation(line: 801, column: 21, scope: !5285)
!5288 = !DILocation(line: 801, column: 32, scope: !5285)
!5289 = !DILocation(line: 801, column: 7, scope: !5273)
!5290 = !DILocation(line: 803, column: 16, scope: !5291)
!5291 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 802, column: 5)
!5292 = !DILocation(line: 803, column: 7, scope: !5291)
!5293 = !DILocation(line: 804, column: 26, scope: !5291)
!5294 = !DILocation(line: 804, column: 37, scope: !5291)
!5295 = !DILocation(line: 804, column: 45, scope: !5291)
!5296 = !DILocation(line: 804, column: 7, scope: !5291)
!5297 = !DILocation(line: 805, column: 5, scope: !5291)
!5298 = !DILocation(line: 807, column: 43, scope: !5273)
!5299 = !DILocation(line: 807, column: 24, scope: !5273)
!5300 = !DILocation(line: 807, column: 13, scope: !5273)
!5301 = !DILocation(line: 807, column: 11, scope: !5273)
!5302 = !DILocation(line: 808, column: 11, scope: !5273)
!5303 = !DILocation(line: 808, column: 20, scope: !5273)
!5304 = !DILocation(line: 808, column: 3, scope: !5273)
!5305 = !DILocation(line: 811, column: 7, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 809, column: 5)
!5307 = !DILocation(line: 814, column: 18, scope: !5306)
!5308 = !DILocation(line: 814, column: 17, scope: !5306)
!5309 = !DILocation(line: 815, column: 7, scope: !5306)
!5310 = !DILocation(line: 818, column: 15, scope: !5306)
!5311 = !DILocation(line: 818, column: 27, scope: !5306)
!5312 = !DILocation(line: 819, column: 15, scope: !5306)
!5313 = !DILocation(line: 819, column: 21, scope: !5306)
!5314 = !DILocation(line: 820, column: 7, scope: !5306)
!5315 = !DILocation(line: 823, column: 7, scope: !5306)
!5316 = !DILocation(line: 824, column: 5, scope: !5306)
!5317 = !DILocation(line: 826, column: 10, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 826, column: 3)
!5319 = !DILocation(line: 826, column: 8, scope: !5318)
!5320 = !DILocation(line: 826, column: 15, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 826, column: 3)
!5322 = !DILocation(line: 826, column: 40, scope: !5321)
!5323 = !DILocation(line: 826, column: 19, scope: !5321)
!5324 = !DILocation(line: 826, column: 17, scope: !5321)
!5325 = !DILocation(line: 826, column: 3, scope: !5318)
!5326 = !DILocalVariable(name: "e", scope: !5327, file: !3, line: 830, type: !1939)
!5327 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 827, column: 5)
!5328 = !DILocation(line: 830, column: 12, scope: !5327)
!5329 = !DILocation(line: 830, column: 37, scope: !5327)
!5330 = !DILocation(line: 830, column: 42, scope: !5327)
!5331 = !DILocation(line: 830, column: 16, scope: !5327)
!5332 = !DILocation(line: 832, column: 11, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 832, column: 11)
!5334 = !DILocation(line: 832, column: 21, scope: !5333)
!5335 = !DILocation(line: 832, column: 25, scope: !5333)
!5336 = !DILocation(line: 832, column: 36, scope: !5333)
!5337 = !DILocation(line: 832, column: 11, scope: !5327)
!5338 = !DILocation(line: 834, column: 13, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5333, file: !3, line: 833, column: 2)
!5340 = !DILocation(line: 836, column: 8, scope: !5339)
!5341 = !DILocation(line: 836, column: 11, scope: !5339)
!5342 = !DILocation(line: 836, column: 14, scope: !5339)
!5343 = !DILocation(line: 836, column: 19, scope: !5339)
!5344 = !DILocation(line: 836, column: 26, scope: !5339)
!5345 = !DILocation(line: 836, column: 29, scope: !5339)
!5346 = !DILocation(line: 836, column: 35, scope: !5339)
!5347 = !DILocation(line: 837, column: 9, scope: !5339)
!5348 = !DILocation(line: 837, column: 12, scope: !5339)
!5349 = !DILocation(line: 837, column: 18, scope: !5339)
!5350 = !DILocation(line: 837, column: 8, scope: !5339)
!5351 = !DILocation(line: 834, column: 4, scope: !5339)
!5352 = !DILocation(line: 838, column: 2, scope: !5339)
!5353 = !DILocation(line: 842, column: 11, scope: !5354)
!5354 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 842, column: 11)
!5355 = !DILocation(line: 842, column: 14, scope: !5354)
!5356 = !DILocation(line: 842, column: 20, scope: !5354)
!5357 = !DILocation(line: 842, column: 11, scope: !5327)
!5358 = !DILocalVariable(name: "arg", scope: !5359, file: !3, line: 844, type: !1669)
!5359 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 843, column: 2)
!5360 = !DILocation(line: 844, column: 9, scope: !5359)
!5361 = !DILocation(line: 844, column: 31, scope: !5359)
!5362 = !DILocation(line: 844, column: 36, scope: !5359)
!5363 = !DILocation(line: 844, column: 15, scope: !5359)
!5364 = !DILocation(line: 844, column: 40, scope: !5359)
!5365 = !DILocalVariable(name: "arg_val", scope: !5359, file: !3, line: 845, type: !2967)
!5366 = !DILocation(line: 845, column: 17, scope: !5359)
!5367 = !DILocation(line: 847, column: 33, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 847, column: 8)
!5369 = !DILocation(line: 847, column: 8, scope: !5368)
!5370 = !DILocation(line: 847, column: 8, scope: !5359)
!5371 = !DILocation(line: 849, column: 16, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5368, file: !3, line: 848, column: 6)
!5373 = !DILocation(line: 849, column: 28, scope: !5372)
!5374 = !DILocation(line: 850, column: 24, scope: !5372)
!5375 = !DILocation(line: 850, column: 16, scope: !5372)
!5376 = !DILocation(line: 850, column: 22, scope: !5372)
!5377 = !DILocation(line: 851, column: 6, scope: !5372)
!5378 = !DILocation(line: 853, column: 29, scope: !5368)
!5379 = !DILocation(line: 853, column: 18, scope: !5368)
!5380 = !DILocation(line: 853, column: 16, scope: !5368)
!5381 = !DILocation(line: 855, column: 4, scope: !5359)
!5382 = !DILocation(line: 857, column: 8, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 857, column: 8)
!5384 = !DILocation(line: 857, column: 18, scope: !5383)
!5385 = !DILocation(line: 857, column: 22, scope: !5383)
!5386 = !DILocation(line: 857, column: 33, scope: !5383)
!5387 = !DILocation(line: 857, column: 8, scope: !5359)
!5388 = !DILocation(line: 859, column: 17, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 858, column: 6)
!5390 = !DILocation(line: 859, column: 8, scope: !5389)
!5391 = !DILocation(line: 860, column: 28, scope: !5389)
!5392 = !DILocation(line: 860, column: 39, scope: !5389)
!5393 = !DILocation(line: 860, column: 44, scope: !5389)
!5394 = !DILocation(line: 860, column: 8, scope: !5389)
!5395 = !DILocation(line: 861, column: 28, scope: !5389)
!5396 = !DILocation(line: 861, column: 8, scope: !5389)
!5397 = !DILocation(line: 862, column: 17, scope: !5389)
!5398 = !DILocation(line: 862, column: 8, scope: !5389)
!5399 = !DILocation(line: 863, column: 6, scope: !5389)
!5400 = !DILocation(line: 865, column: 16, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 865, column: 8)
!5402 = !DILocation(line: 865, column: 28, scope: !5401)
!5403 = !DILocation(line: 865, column: 8, scope: !5359)
!5404 = !DILocation(line: 866, column: 6, scope: !5401)
!5405 = !DILocation(line: 867, column: 2, scope: !5359)
!5406 = !DILocation(line: 868, column: 5, scope: !5327)
!5407 = !DILocation(line: 826, column: 47, scope: !5321)
!5408 = !DILocation(line: 826, column: 3, scope: !5321)
!5409 = distinct !{!5409, !5325, !5410}
!5410 = !DILocation(line: 868, column: 5, scope: !5318)
!5411 = !DILocation(line: 870, column: 7, scope: !5412)
!5412 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 870, column: 7)
!5413 = !DILocation(line: 870, column: 17, scope: !5412)
!5414 = !DILocation(line: 870, column: 21, scope: !5412)
!5415 = !DILocation(line: 870, column: 32, scope: !5412)
!5416 = !DILocation(line: 870, column: 7, scope: !5273)
!5417 = !DILocation(line: 872, column: 27, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5412, file: !3, line: 871, column: 5)
!5419 = !DILocation(line: 872, column: 7, scope: !5418)
!5420 = !DILocation(line: 873, column: 16, scope: !5418)
!5421 = !DILocation(line: 873, column: 7, scope: !5418)
!5422 = !DILocation(line: 874, column: 5, scope: !5418)
!5423 = !DILocation(line: 877, column: 45, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 877, column: 7)
!5425 = !DILocation(line: 877, column: 26, scope: !5424)
!5426 = !DILocation(line: 877, column: 7, scope: !5424)
!5427 = !DILocation(line: 877, column: 7, scope: !5273)
!5428 = !DILocation(line: 879, column: 19, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 879, column: 11)
!5430 = distinct !DILexicalBlock(scope: !5424, file: !3, line: 878, column: 5)
!5431 = !DILocation(line: 879, column: 31, scope: !5429)
!5432 = !DILocation(line: 879, column: 11, scope: !5430)
!5433 = !DILocation(line: 880, column: 2, scope: !5429)
!5434 = !DILocation(line: 882, column: 2, scope: !5429)
!5435 = !DILocation(line: 885, column: 5, scope: !5424)
!5436 = !DILocation(line: 886, column: 1, scope: !5273)
!5437 = distinct !DISubprogram(name: "ccp_finalize", scope: !3, file: !3, line: 725, type: !2984, scopeLine: 726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5438 = !DILocalVariable(name: "something_changed", scope: !5437, file: !3, line: 727, type: !1748)
!5439 = !DILocation(line: 727, column: 8, scope: !5437)
!5440 = !DILocation(line: 729, column: 3, scope: !5437)
!5441 = !DILocation(line: 731, column: 44, scope: !5437)
!5442 = !DILocation(line: 731, column: 23, scope: !5437)
!5443 = !DILocation(line: 731, column: 21, scope: !5437)
!5444 = !DILocation(line: 733, column: 9, scope: !5437)
!5445 = !DILocation(line: 733, column: 3, scope: !5437)
!5446 = !DILocation(line: 734, column: 13, scope: !5437)
!5447 = !DILocation(line: 735, column: 10, scope: !5437)
!5448 = !DILocation(line: 735, column: 3, scope: !5437)
!5449 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !5450, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5450 = !DISubroutineType(types: !5451)
!5451 = !{!7, !5452}
!5452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5453, size: 64)
!5453 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2490)
!5454 = !DILocalVariable(name: "vec_", arg: 1, scope: !5449, file: !135, line: 182, type: !5452)
!5455 = !DILocation(line: 182, column: 1, scope: !5449)
!5456 = distinct !DISubprogram(name: "gsi_start_bb", scope: !743, file: !743, line: 4418, type: !5457, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5457 = !DISubroutineType(types: !5458)
!5458 = !{!4432, !2392}
!5459 = !DILocalVariable(name: "bb", arg: 1, scope: !5456, file: !743, line: 4418, type: !2392)
!5460 = !DILocation(line: 4418, column: 27, scope: !5456)
!5461 = !DILocalVariable(name: "i", scope: !5456, file: !743, line: 4420, type: !4432)
!5462 = !DILocation(line: 4420, column: 24, scope: !5456)
!5463 = !DILocalVariable(name: "seq", scope: !5456, file: !743, line: 4421, type: !1949)
!5464 = !DILocation(line: 4421, column: 14, scope: !5456)
!5465 = !DILocation(line: 4423, column: 17, scope: !5456)
!5466 = !DILocation(line: 4423, column: 9, scope: !5456)
!5467 = !DILocation(line: 4423, column: 7, scope: !5456)
!5468 = !DILocation(line: 4424, column: 29, scope: !5456)
!5469 = !DILocation(line: 4424, column: 11, scope: !5456)
!5470 = !DILocation(line: 4424, column: 5, scope: !5456)
!5471 = !DILocation(line: 4424, column: 9, scope: !5456)
!5472 = !DILocation(line: 4425, column: 11, scope: !5456)
!5473 = !DILocation(line: 4425, column: 5, scope: !5456)
!5474 = !DILocation(line: 4425, column: 9, scope: !5456)
!5475 = !DILocation(line: 4426, column: 10, scope: !5456)
!5476 = !DILocation(line: 4426, column: 5, scope: !5456)
!5477 = !DILocation(line: 4426, column: 8, scope: !5456)
!5478 = !DILocation(line: 4428, column: 3, scope: !5456)
!5479 = distinct !DISubprogram(name: "gsi_end_p", scope: !743, file: !743, line: 4467, type: !5480, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5480 = !DISubroutineType(types: !5481)
!5481 = !{!1748, !4432}
!5482 = !DILocalVariable(name: "i", arg: 1, scope: !5479, file: !743, line: 4467, type: !4432)
!5483 = !DILocation(line: 4467, column: 33, scope: !5479)
!5484 = !DILocation(line: 4469, column: 12, scope: !5479)
!5485 = !DILocation(line: 4469, column: 16, scope: !5479)
!5486 = !DILocation(line: 4469, column: 10, scope: !5479)
!5487 = !DILocation(line: 4469, column: 3, scope: !5479)
!5488 = distinct !DISubprogram(name: "surely_varying_stmt_p", scope: !3, file: !3, line: 607, type: !4660, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5489 = !DILocalVariable(name: "stmt", arg: 1, scope: !5488, file: !3, line: 607, type: !1959)
!5490 = !DILocation(line: 607, column: 31, scope: !5488)
!5491 = !DILocation(line: 611, column: 32, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 611, column: 7)
!5493 = !DILocation(line: 611, column: 7, scope: !5492)
!5494 = !DILocation(line: 611, column: 7, scope: !5488)
!5495 = !DILocation(line: 612, column: 5, scope: !5492)
!5496 = !DILocation(line: 616, column: 23, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 616, column: 7)
!5498 = !DILocation(line: 616, column: 7, scope: !5497)
!5499 = !DILocation(line: 616, column: 7, scope: !5488)
!5500 = !DILocalVariable(name: "fndecl", scope: !5501, file: !3, line: 618, type: !1669)
!5501 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 617, column: 5)
!5502 = !DILocation(line: 618, column: 12, scope: !5501)
!5503 = !DILocation(line: 619, column: 29, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 619, column: 11)
!5505 = !DILocation(line: 619, column: 12, scope: !5504)
!5506 = !DILocation(line: 620, column: 4, scope: !5504)
!5507 = !DILocation(line: 620, column: 38, scope: !5504)
!5508 = !DILocation(line: 620, column: 18, scope: !5504)
!5509 = !DILocation(line: 620, column: 16, scope: !5504)
!5510 = !DILocation(line: 620, column: 45, scope: !5504)
!5511 = !DILocation(line: 621, column: 8, scope: !5504)
!5512 = !DILocation(line: 621, column: 12, scope: !5504)
!5513 = !DILocation(line: 619, column: 11, scope: !5501)
!5514 = !DILocation(line: 622, column: 2, scope: !5504)
!5515 = !DILocation(line: 623, column: 5, scope: !5501)
!5516 = !DILocation(line: 626, column: 25, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 626, column: 12)
!5518 = !DILocation(line: 626, column: 12, scope: !5517)
!5519 = !DILocation(line: 626, column: 12, scope: !5497)
!5520 = !DILocation(line: 627, column: 5, scope: !5517)
!5521 = !DILocation(line: 631, column: 20, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 631, column: 7)
!5523 = !DILocation(line: 631, column: 7, scope: !5522)
!5524 = !DILocation(line: 631, column: 26, scope: !5522)
!5525 = !DILocation(line: 632, column: 7, scope: !5522)
!5526 = !DILocation(line: 632, column: 23, scope: !5522)
!5527 = !DILocation(line: 632, column: 10, scope: !5522)
!5528 = !DILocation(line: 632, column: 29, scope: !5522)
!5529 = !DILocation(line: 633, column: 7, scope: !5522)
!5530 = !DILocation(line: 633, column: 23, scope: !5522)
!5531 = !DILocation(line: 633, column: 10, scope: !5522)
!5532 = !DILocation(line: 633, column: 29, scope: !5522)
!5533 = !DILocation(line: 634, column: 7, scope: !5522)
!5534 = !DILocation(line: 634, column: 23, scope: !5522)
!5535 = !DILocation(line: 634, column: 10, scope: !5522)
!5536 = !DILocation(line: 634, column: 29, scope: !5522)
!5537 = !DILocation(line: 631, column: 7, scope: !5488)
!5538 = !DILocation(line: 635, column: 5, scope: !5522)
!5539 = !DILocation(line: 637, column: 3, scope: !5488)
!5540 = !DILocation(line: 638, column: 1, scope: !5488)
!5541 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !3178, file: !3178, line: 792, type: !5542, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5542 = !DISubroutineType(types: !5543)
!5543 = !{!1669, !5544, !1959, !1725}
!5544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5129, size: 64)
!5545 = !DILocalVariable(name: "ptr", arg: 1, scope: !5541, file: !3178, line: 792, type: !5544)
!5546 = !DILocation(line: 792, column: 33, scope: !5541)
!5547 = !DILocalVariable(name: "stmt", arg: 2, scope: !5541, file: !3178, line: 792, type: !1959)
!5548 = !DILocation(line: 792, column: 45, scope: !5541)
!5549 = !DILocalVariable(name: "flags", arg: 3, scope: !5541, file: !3178, line: 792, type: !1725)
!5550 = !DILocation(line: 792, column: 55, scope: !5541)
!5551 = !DILocation(line: 794, column: 17, scope: !5541)
!5552 = !DILocation(line: 794, column: 22, scope: !5541)
!5553 = !DILocation(line: 794, column: 28, scope: !5541)
!5554 = !DILocation(line: 794, column: 3, scope: !5541)
!5555 = !DILocation(line: 795, column: 3, scope: !5541)
!5556 = !DILocation(line: 795, column: 8, scope: !5541)
!5557 = !DILocation(line: 795, column: 18, scope: !5541)
!5558 = !DILocation(line: 796, column: 29, scope: !5541)
!5559 = !DILocation(line: 796, column: 10, scope: !5541)
!5560 = !DILocation(line: 796, column: 3, scope: !5541)
!5561 = distinct !DISubprogram(name: "op_iter_done", scope: !3178, file: !3178, line: 652, type: !5562, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5562 = !DISubroutineType(types: !5563)
!5563 = !{!1748, !5564}
!5564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5565, size: 64)
!5565 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5129)
!5566 = !DILocalVariable(name: "ptr", arg: 1, scope: !5561, file: !3178, line: 652, type: !5564)
!5567 = !DILocation(line: 652, column: 34, scope: !5561)
!5568 = !DILocation(line: 654, column: 10, scope: !5561)
!5569 = !DILocation(line: 654, column: 15, scope: !5561)
!5570 = !DILocation(line: 654, column: 3, scope: !5561)
!5571 = distinct !DISubprogram(name: "set_value_varying", scope: !3, file: !3, line: 406, type: !5572, scopeLine: 407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5572 = !DISubroutineType(types: !5573)
!5573 = !{null, !1669}
!5574 = !DILocalVariable(name: "var", arg: 1, scope: !5571, file: !3, line: 406, type: !1669)
!5575 = !DILocation(line: 406, column: 25, scope: !5571)
!5576 = !DILocalVariable(name: "val", scope: !5571, file: !3, line: 408, type: !2966)
!5577 = !DILocation(line: 408, column: 17, scope: !5571)
!5578 = !DILocation(line: 408, column: 24, scope: !5571)
!5579 = !DILocation(line: 408, column: 34, scope: !5571)
!5580 = !DILocation(line: 410, column: 3, scope: !5571)
!5581 = !DILocation(line: 410, column: 8, scope: !5571)
!5582 = !DILocation(line: 410, column: 20, scope: !5571)
!5583 = !DILocation(line: 411, column: 3, scope: !5571)
!5584 = !DILocation(line: 411, column: 8, scope: !5571)
!5585 = !DILocation(line: 411, column: 14, scope: !5571)
!5586 = !DILocation(line: 412, column: 1, scope: !5571)
!5587 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !3178, file: !3178, line: 699, type: !5588, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5588 = !DISubroutineType(types: !5589)
!5589 = !{!1669, !5544}
!5590 = !DILocalVariable(name: "ptr", arg: 1, scope: !5587, file: !3178, line: 699, type: !5544)
!5591 = !DILocation(line: 699, column: 33, scope: !5587)
!5592 = !DILocalVariable(name: "val", scope: !5587, file: !3178, line: 701, type: !1669)
!5593 = !DILocation(line: 701, column: 8, scope: !5587)
!5594 = !DILocation(line: 705, column: 7, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5587, file: !3178, line: 705, column: 7)
!5596 = !DILocation(line: 705, column: 12, scope: !5595)
!5597 = !DILocation(line: 705, column: 7, scope: !5587)
!5598 = !DILocation(line: 707, column: 13, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5595, file: !3178, line: 706, column: 5)
!5600 = !DILocation(line: 707, column: 11, scope: !5599)
!5601 = !DILocation(line: 708, column: 19, scope: !5599)
!5602 = !DILocation(line: 708, column: 24, scope: !5599)
!5603 = !DILocation(line: 708, column: 30, scope: !5599)
!5604 = !DILocation(line: 708, column: 7, scope: !5599)
!5605 = !DILocation(line: 708, column: 12, scope: !5599)
!5606 = !DILocation(line: 708, column: 17, scope: !5599)
!5607 = !DILocation(line: 709, column: 14, scope: !5599)
!5608 = !DILocation(line: 709, column: 7, scope: !5599)
!5609 = !DILocation(line: 711, column: 7, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5587, file: !3178, line: 711, column: 7)
!5611 = !DILocation(line: 711, column: 12, scope: !5610)
!5612 = !DILocation(line: 711, column: 7, scope: !5587)
!5613 = !DILocation(line: 713, column: 13, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5610, file: !3178, line: 712, column: 5)
!5615 = !DILocation(line: 713, column: 11, scope: !5614)
!5616 = !DILocation(line: 714, column: 19, scope: !5614)
!5617 = !DILocation(line: 714, column: 24, scope: !5614)
!5618 = !DILocation(line: 714, column: 30, scope: !5614)
!5619 = !DILocation(line: 714, column: 7, scope: !5614)
!5620 = !DILocation(line: 714, column: 12, scope: !5614)
!5621 = !DILocation(line: 714, column: 17, scope: !5614)
!5622 = !DILocation(line: 715, column: 14, scope: !5614)
!5623 = !DILocation(line: 715, column: 7, scope: !5614)
!5624 = !DILocation(line: 718, column: 3, scope: !5587)
!5625 = !DILocation(line: 718, column: 8, scope: !5587)
!5626 = !DILocation(line: 718, column: 13, scope: !5587)
!5627 = !DILocation(line: 719, column: 3, scope: !5587)
!5628 = !DILocation(line: 721, column: 1, scope: !5587)
!5629 = distinct !DISubprogram(name: "prop_set_simulate_again", scope: !835, file: !835, line: 28, type: !5630, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5630 = !DISubroutineType(types: !5631)
!5631 = !{null, !1959, !1748}
!5632 = !DILocalVariable(name: "s", arg: 1, scope: !5629, file: !835, line: 28, type: !1959)
!5633 = !DILocation(line: 28, column: 33, scope: !5629)
!5634 = !DILocalVariable(name: "visit_p", arg: 2, scope: !5629, file: !835, line: 28, type: !1748)
!5635 = !DILocation(line: 28, column: 41, scope: !5629)
!5636 = !DILocation(line: 30, column: 23, scope: !5629)
!5637 = !DILocation(line: 30, column: 26, scope: !5629)
!5638 = !DILocation(line: 30, column: 3, scope: !5629)
!5639 = !DILocation(line: 31, column: 1, scope: !5629)
!5640 = distinct !DISubprogram(name: "gsi_next", scope: !743, file: !743, line: 4485, type: !5641, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5641 = !DISubroutineType(types: !5642)
!5642 = !{null, !4431}
!5643 = !DILocalVariable(name: "i", arg: 1, scope: !5640, file: !743, line: 4485, type: !4431)
!5644 = !DILocation(line: 4485, column: 33, scope: !5640)
!5645 = !DILocation(line: 4487, column: 12, scope: !5640)
!5646 = !DILocation(line: 4487, column: 15, scope: !5640)
!5647 = !DILocation(line: 4487, column: 20, scope: !5640)
!5648 = !DILocation(line: 4487, column: 3, scope: !5640)
!5649 = !DILocation(line: 4487, column: 6, scope: !5640)
!5650 = !DILocation(line: 4487, column: 10, scope: !5640)
!5651 = !DILocation(line: 4488, column: 1, scope: !5640)
!5652 = distinct !DISubprogram(name: "gimple_phi_result", scope: !743, file: !743, line: 3071, type: !4408, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5653 = !DILocalVariable(name: "gs", arg: 1, scope: !5652, file: !743, line: 3071, type: !4380)
!5654 = !DILocation(line: 3071, column: 33, scope: !5652)
!5655 = !DILocation(line: 3074, column: 10, scope: !5652)
!5656 = !DILocation(line: 3074, column: 14, scope: !5652)
!5657 = !DILocation(line: 3074, column: 25, scope: !5652)
!5658 = !DILocation(line: 3074, column: 3, scope: !5652)
!5659 = distinct !DISubprogram(name: "bb_seq", scope: !743, file: !743, line: 237, type: !5660, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5660 = !DISubroutineType(types: !5661)
!5661 = !{!1949, !5662}
!5662 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1670, line: 112, baseType: !5663)
!5663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5664, size: 64)
!5664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1924)
!5665 = !DILocalVariable(name: "bb", arg: 1, scope: !5659, file: !743, line: 237, type: !5662)
!5666 = !DILocation(line: 237, column: 27, scope: !5659)
!5667 = !DILocation(line: 239, column: 13, scope: !5659)
!5668 = !DILocation(line: 239, column: 17, scope: !5659)
!5669 = !DILocation(line: 239, column: 23, scope: !5659)
!5670 = !DILocation(line: 239, column: 33, scope: !5659)
!5671 = !DILocation(line: 239, column: 36, scope: !5659)
!5672 = !DILocation(line: 239, column: 40, scope: !5659)
!5673 = !DILocation(line: 239, column: 43, scope: !5659)
!5674 = !DILocation(line: 239, column: 10, scope: !5659)
!5675 = !DILocation(line: 239, column: 53, scope: !5659)
!5676 = !DILocation(line: 239, column: 57, scope: !5659)
!5677 = !DILocation(line: 239, column: 60, scope: !5659)
!5678 = !DILocation(line: 239, column: 68, scope: !5659)
!5679 = !DILocation(line: 239, column: 3, scope: !5659)
!5680 = distinct !DISubprogram(name: "gimple_seq_first", scope: !743, file: !743, line: 159, type: !5681, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5681 = !DISubroutineType(types: !5682)
!5682 = !{!1954, !5683}
!5683 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1670, line: 67, baseType: !5684)
!5684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5685, size: 64)
!5685 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1951)
!5686 = !DILocalVariable(name: "s", arg: 1, scope: !5680, file: !743, line: 159, type: !5683)
!5687 = !DILocation(line: 159, column: 36, scope: !5680)
!5688 = !DILocation(line: 161, column: 10, scope: !5680)
!5689 = !DILocation(line: 161, column: 14, scope: !5680)
!5690 = !DILocation(line: 161, column: 17, scope: !5680)
!5691 = !DILocation(line: 161, column: 3, scope: !5680)
!5692 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !743, file: !743, line: 1477, type: !4378, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5693 = !DILocalVariable(name: "stmt", arg: 1, scope: !5692, file: !743, line: 1477, type: !4380)
!5694 = !DILocation(line: 1477, column: 39, scope: !5692)
!5695 = !DILocation(line: 1479, column: 27, scope: !5696)
!5696 = distinct !DILexicalBlock(scope: !5692, file: !743, line: 1479, column: 7)
!5697 = !DILocation(line: 1479, column: 7, scope: !5696)
!5698 = !DILocation(line: 1479, column: 7, scope: !5692)
!5699 = !DILocation(line: 1480, column: 12, scope: !5696)
!5700 = !DILocation(line: 1480, column: 18, scope: !5696)
!5701 = !DILocation(line: 1480, column: 25, scope: !5696)
!5702 = !DILocation(line: 1480, column: 5, scope: !5696)
!5703 = !DILocation(line: 1482, column: 5, scope: !5696)
!5704 = !DILocation(line: 1483, column: 1, scope: !5692)
!5705 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !743, file: !743, line: 1954, type: !4408, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5706 = !DILocalVariable(name: "gs", arg: 1, scope: !5705, file: !743, line: 1954, type: !4380)
!5707 = !DILocation(line: 1954, column: 34, scope: !5705)
!5708 = !DILocalVariable(name: "addr", scope: !5705, file: !743, line: 1956, type: !1669)
!5709 = !DILocation(line: 1956, column: 8, scope: !5705)
!5710 = !DILocation(line: 1956, column: 31, scope: !5705)
!5711 = !DILocation(line: 1956, column: 15, scope: !5705)
!5712 = !DILocation(line: 1957, column: 7, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5705, file: !743, line: 1957, column: 7)
!5714 = !DILocation(line: 1957, column: 24, scope: !5713)
!5715 = !DILocation(line: 1957, column: 7, scope: !5705)
!5716 = !DILocation(line: 1958, column: 12, scope: !5713)
!5717 = !DILocation(line: 1958, column: 5, scope: !5713)
!5718 = !DILocation(line: 1959, column: 3, scope: !5705)
!5719 = !DILocation(line: 1960, column: 1, scope: !5705)
!5720 = distinct !DISubprogram(name: "gimple_vdef", scope: !743, file: !743, line: 1375, type: !4408, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5721 = !DILocalVariable(name: "g", arg: 1, scope: !5720, file: !743, line: 1375, type: !4380)
!5722 = !DILocation(line: 1375, column: 27, scope: !5720)
!5723 = !DILocation(line: 1377, column: 28, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !5720, file: !743, line: 1377, column: 7)
!5725 = !DILocation(line: 1377, column: 8, scope: !5724)
!5726 = !DILocation(line: 1377, column: 7, scope: !5720)
!5727 = !DILocation(line: 1378, column: 5, scope: !5724)
!5728 = !DILocation(line: 1379, column: 10, scope: !5720)
!5729 = !DILocation(line: 1379, column: 13, scope: !5720)
!5730 = !DILocation(line: 1379, column: 23, scope: !5720)
!5731 = !DILocation(line: 1379, column: 3, scope: !5720)
!5732 = !DILocation(line: 1380, column: 1, scope: !5720)
!5733 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !743, file: !743, line: 1283, type: !4378, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5734 = !DILocalVariable(name: "g", arg: 1, scope: !5733, file: !743, line: 1283, type: !4380)
!5735 = !DILocation(line: 1283, column: 34, scope: !5733)
!5736 = !DILocation(line: 1285, column: 23, scope: !5733)
!5737 = !DILocation(line: 1285, column: 10, scope: !5733)
!5738 = !DILocation(line: 1285, column: 26, scope: !5733)
!5739 = !DILocation(line: 1285, column: 43, scope: !5733)
!5740 = !DILocation(line: 1285, column: 59, scope: !5733)
!5741 = !DILocation(line: 1285, column: 46, scope: !5733)
!5742 = !DILocation(line: 1285, column: 62, scope: !5733)
!5743 = !DILocation(line: 0, scope: !5733)
!5744 = !DILocation(line: 1285, column: 3, scope: !5733)
!5745 = distinct !DISubprogram(name: "gimple_call_fn", scope: !743, file: !743, line: 1911, type: !4408, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5746 = !DILocalVariable(name: "gs", arg: 1, scope: !5745, file: !743, line: 1911, type: !4380)
!5747 = !DILocation(line: 1911, column: 30, scope: !5745)
!5748 = !DILocation(line: 1914, column: 21, scope: !5745)
!5749 = !DILocation(line: 1914, column: 10, scope: !5745)
!5750 = !DILocation(line: 1914, column: 3, scope: !5745)
!5751 = distinct !DISubprogram(name: "op_iter_init", scope: !3178, file: !3178, line: 742, type: !5752, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5752 = !DISubroutineType(types: !5753)
!5753 = !{null, !5544, !1959, !1725}
!5754 = !DILocalVariable(name: "ptr", arg: 1, scope: !5751, file: !3178, line: 742, type: !5544)
!5755 = !DILocation(line: 742, column: 28, scope: !5751)
!5756 = !DILocalVariable(name: "stmt", arg: 2, scope: !5751, file: !3178, line: 742, type: !1959)
!5757 = !DILocation(line: 742, column: 40, scope: !5751)
!5758 = !DILocalVariable(name: "flags", arg: 3, scope: !5751, file: !3178, line: 742, type: !1725)
!5759 = !DILocation(line: 742, column: 50, scope: !5751)
!5760 = !DILocation(line: 746, column: 3, scope: !5751)
!5761 = !DILocation(line: 748, column: 16, scope: !5751)
!5762 = !DILocation(line: 748, column: 22, scope: !5751)
!5763 = !DILocation(line: 748, column: 15, scope: !5751)
!5764 = !DILocation(line: 748, column: 68, scope: !5751)
!5765 = !DILocation(line: 748, column: 52, scope: !5751)
!5766 = !DILocation(line: 748, column: 3, scope: !5751)
!5767 = !DILocation(line: 748, column: 8, scope: !5751)
!5768 = !DILocation(line: 748, column: 13, scope: !5751)
!5769 = !DILocation(line: 749, column: 9, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5751, file: !3178, line: 749, column: 7)
!5771 = !DILocation(line: 749, column: 15, scope: !5770)
!5772 = !DILocation(line: 750, column: 7, scope: !5770)
!5773 = !DILocation(line: 750, column: 10, scope: !5770)
!5774 = !DILocation(line: 750, column: 15, scope: !5770)
!5775 = !DILocation(line: 751, column: 7, scope: !5770)
!5776 = !DILocation(line: 751, column: 23, scope: !5770)
!5777 = !DILocation(line: 751, column: 10, scope: !5770)
!5778 = !DILocation(line: 751, column: 29, scope: !5770)
!5779 = !DILocation(line: 749, column: 7, scope: !5751)
!5780 = !DILocation(line: 752, column: 17, scope: !5770)
!5781 = !DILocation(line: 752, column: 22, scope: !5770)
!5782 = !DILocation(line: 752, column: 28, scope: !5770)
!5783 = !DILocation(line: 752, column: 5, scope: !5770)
!5784 = !DILocation(line: 752, column: 10, scope: !5770)
!5785 = !DILocation(line: 752, column: 15, scope: !5770)
!5786 = !DILocation(line: 753, column: 16, scope: !5751)
!5787 = !DILocation(line: 753, column: 22, scope: !5751)
!5788 = !DILocation(line: 753, column: 15, scope: !5751)
!5789 = !DILocation(line: 753, column: 68, scope: !5751)
!5790 = !DILocation(line: 753, column: 52, scope: !5751)
!5791 = !DILocation(line: 753, column: 3, scope: !5751)
!5792 = !DILocation(line: 753, column: 8, scope: !5751)
!5793 = !DILocation(line: 753, column: 13, scope: !5751)
!5794 = !DILocation(line: 754, column: 9, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5751, file: !3178, line: 754, column: 7)
!5796 = !DILocation(line: 754, column: 15, scope: !5795)
!5797 = !DILocation(line: 755, column: 7, scope: !5795)
!5798 = !DILocation(line: 755, column: 10, scope: !5795)
!5799 = !DILocation(line: 755, column: 15, scope: !5795)
!5800 = !DILocation(line: 756, column: 7, scope: !5795)
!5801 = !DILocation(line: 756, column: 23, scope: !5795)
!5802 = !DILocation(line: 756, column: 10, scope: !5795)
!5803 = !DILocation(line: 756, column: 29, scope: !5795)
!5804 = !DILocation(line: 754, column: 7, scope: !5751)
!5805 = !DILocation(line: 757, column: 17, scope: !5795)
!5806 = !DILocation(line: 757, column: 22, scope: !5795)
!5807 = !DILocation(line: 757, column: 28, scope: !5795)
!5808 = !DILocation(line: 757, column: 5, scope: !5795)
!5809 = !DILocation(line: 757, column: 10, scope: !5795)
!5810 = !DILocation(line: 757, column: 15, scope: !5795)
!5811 = !DILocation(line: 758, column: 3, scope: !5751)
!5812 = !DILocation(line: 758, column: 8, scope: !5751)
!5813 = !DILocation(line: 758, column: 13, scope: !5751)
!5814 = !DILocation(line: 760, column: 3, scope: !5751)
!5815 = !DILocation(line: 760, column: 8, scope: !5751)
!5816 = !DILocation(line: 760, column: 14, scope: !5751)
!5817 = !DILocation(line: 761, column: 3, scope: !5751)
!5818 = !DILocation(line: 761, column: 8, scope: !5751)
!5819 = !DILocation(line: 761, column: 16, scope: !5751)
!5820 = !DILocation(line: 762, column: 3, scope: !5751)
!5821 = !DILocation(line: 762, column: 8, scope: !5751)
!5822 = !DILocation(line: 762, column: 17, scope: !5751)
!5823 = !DILocation(line: 763, column: 1, scope: !5751)
!5824 = distinct !DISubprogram(name: "gimple_def_ops", scope: !743, file: !743, line: 1292, type: !5825, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5825 = !DISubroutineType(types: !5826)
!5826 = !{!1988, !4380}
!5827 = !DILocalVariable(name: "g", arg: 1, scope: !5824, file: !743, line: 1292, type: !4380)
!5828 = !DILocation(line: 1292, column: 30, scope: !5824)
!5829 = !DILocation(line: 1294, column: 24, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5824, file: !743, line: 1294, column: 7)
!5831 = !DILocation(line: 1294, column: 8, scope: !5830)
!5832 = !DILocation(line: 1294, column: 7, scope: !5824)
!5833 = !DILocation(line: 1295, column: 5, scope: !5830)
!5834 = !DILocation(line: 1296, column: 10, scope: !5824)
!5835 = !DILocation(line: 1296, column: 13, scope: !5824)
!5836 = !DILocation(line: 1296, column: 19, scope: !5824)
!5837 = !DILocation(line: 1296, column: 26, scope: !5824)
!5838 = !DILocation(line: 1296, column: 3, scope: !5824)
!5839 = !DILocation(line: 1297, column: 1, scope: !5824)
!5840 = distinct !DISubprogram(name: "gimple_use_ops", scope: !743, file: !743, line: 1313, type: !5841, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5841 = !DISubroutineType(types: !5842)
!5842 = !{!1995, !4380}
!5843 = !DILocalVariable(name: "g", arg: 1, scope: !5840, file: !743, line: 1313, type: !4380)
!5844 = !DILocation(line: 1313, column: 30, scope: !5840)
!5845 = !DILocation(line: 1315, column: 24, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5840, file: !743, line: 1315, column: 7)
!5847 = !DILocation(line: 1315, column: 8, scope: !5846)
!5848 = !DILocation(line: 1315, column: 7, scope: !5840)
!5849 = !DILocation(line: 1316, column: 5, scope: !5846)
!5850 = !DILocation(line: 1317, column: 10, scope: !5840)
!5851 = !DILocation(line: 1317, column: 13, scope: !5840)
!5852 = !DILocation(line: 1317, column: 19, scope: !5840)
!5853 = !DILocation(line: 1317, column: 26, scope: !5840)
!5854 = !DILocation(line: 1317, column: 3, scope: !5840)
!5855 = !DILocation(line: 1318, column: 1, scope: !5840)
!5856 = distinct !DISubprogram(name: "gimple_vuse", scope: !743, file: !743, line: 1365, type: !4408, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5857 = !DILocalVariable(name: "g", arg: 1, scope: !5856, file: !743, line: 1365, type: !4380)
!5858 = !DILocation(line: 1365, column: 27, scope: !5856)
!5859 = !DILocation(line: 1367, column: 28, scope: !5860)
!5860 = distinct !DILexicalBlock(scope: !5856, file: !743, line: 1367, column: 7)
!5861 = !DILocation(line: 1367, column: 8, scope: !5860)
!5862 = !DILocation(line: 1367, column: 7, scope: !5856)
!5863 = !DILocation(line: 1368, column: 5, scope: !5860)
!5864 = !DILocation(line: 1369, column: 10, scope: !5856)
!5865 = !DILocation(line: 1369, column: 13, scope: !5856)
!5866 = !DILocation(line: 1369, column: 23, scope: !5856)
!5867 = !DILocation(line: 1369, column: 3, scope: !5856)
!5868 = !DILocation(line: 1370, column: 1, scope: !5856)
!5869 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3178, file: !3178, line: 427, type: !5870, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5870 = !DISubroutineType(types: !5871)
!5871 = !{!1669, !5872}
!5872 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !808, line: 30, baseType: !5873)
!5873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5874, size: 64)
!5874 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !2000)
!5875 = !DILocalVariable(name: "use", arg: 1, scope: !5869, file: !3178, line: 427, type: !5872)
!5876 = !DILocation(line: 427, column: 33, scope: !5869)
!5877 = !DILocation(line: 429, column: 12, scope: !5869)
!5878 = !DILocation(line: 429, column: 17, scope: !5869)
!5879 = !DILocation(line: 429, column: 10, scope: !5869)
!5880 = !DILocation(line: 429, column: 3, scope: !5869)
!5881 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3178, file: !3178, line: 434, type: !5882, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5882 = !DISubroutineType(types: !5883)
!5883 = !{!1669, !5884}
!5884 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !808, line: 27, baseType: !1993)
!5885 = !DILocalVariable(name: "def", arg: 1, scope: !5881, file: !3178, line: 434, type: !5884)
!5886 = !DILocation(line: 434, column: 33, scope: !5881)
!5887 = !DILocation(line: 436, column: 11, scope: !5881)
!5888 = !DILocation(line: 436, column: 10, scope: !5881)
!5889 = !DILocation(line: 436, column: 3, scope: !5881)
!5890 = distinct !DISubprogram(name: "gimple_set_visited", scope: !743, file: !743, line: 1217, type: !5630, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5891 = !DILocalVariable(name: "stmt", arg: 1, scope: !5890, file: !743, line: 1217, type: !1959)
!5892 = !DILocation(line: 1217, column: 28, scope: !5890)
!5893 = !DILocalVariable(name: "visited_p", arg: 2, scope: !5890, file: !743, line: 1217, type: !1748)
!5894 = !DILocation(line: 1217, column: 39, scope: !5890)
!5895 = !DILocation(line: 1219, column: 37, scope: !5890)
!5896 = !DILocation(line: 1219, column: 26, scope: !5890)
!5897 = !DILocation(line: 1219, column: 3, scope: !5890)
!5898 = !DILocation(line: 1219, column: 9, scope: !5890)
!5899 = !DILocation(line: 1219, column: 16, scope: !5890)
!5900 = !DILocation(line: 1219, column: 24, scope: !5890)
!5901 = !DILocation(line: 1220, column: 1, scope: !5890)
!5902 = distinct !DISubprogram(name: "visit_assignment", scope: !3, file: !3, line: 1596, type: !5903, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5903 = !DISubroutineType(types: !5904)
!5904 = !{!834, !1959, !1993}
!5905 = !DILocalVariable(name: "stmt", arg: 1, scope: !5902, file: !3, line: 1596, type: !1959)
!5906 = !DILocation(line: 1596, column: 26, scope: !5902)
!5907 = !DILocalVariable(name: "output_p", arg: 2, scope: !5902, file: !3, line: 1596, type: !1993)
!5908 = !DILocation(line: 1596, column: 38, scope: !5902)
!5909 = !DILocalVariable(name: "val", scope: !5902, file: !3, line: 1598, type: !2967)
!5910 = !DILocation(line: 1598, column: 16, scope: !5902)
!5911 = !DILocalVariable(name: "retval", scope: !5902, file: !3, line: 1599, type: !834)
!5912 = !DILocation(line: 1599, column: 24, scope: !5902)
!5913 = !DILocalVariable(name: "lhs", scope: !5902, file: !3, line: 1601, type: !1669)
!5914 = !DILocation(line: 1601, column: 8, scope: !5902)
!5915 = !DILocation(line: 1601, column: 30, scope: !5902)
!5916 = !DILocation(line: 1601, column: 14, scope: !5902)
!5917 = !DILocation(line: 1603, column: 3, scope: !5902)
!5918 = !DILocation(line: 1606, column: 29, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 1606, column: 7)
!5920 = !DILocation(line: 1606, column: 7, scope: !5919)
!5921 = !DILocation(line: 1606, column: 7, scope: !5902)
!5922 = !DILocalVariable(name: "rhs", scope: !5923, file: !3, line: 1608, type: !1669)
!5923 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 1607, column: 5)
!5924 = !DILocation(line: 1608, column: 12, scope: !5923)
!5925 = !DILocation(line: 1608, column: 38, scope: !5923)
!5926 = !DILocation(line: 1608, column: 18, scope: !5923)
!5927 = !DILocation(line: 1610, column: 12, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 1610, column: 12)
!5929 = !DILocation(line: 1610, column: 28, scope: !5928)
!5930 = !DILocation(line: 1610, column: 12, scope: !5923)
!5931 = !DILocalVariable(name: "nval", scope: !5932, file: !3, line: 1613, type: !2966)
!5932 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 1611, column: 9)
!5933 = !DILocation(line: 1613, column: 25, scope: !5932)
!5934 = !DILocation(line: 1613, column: 43, scope: !5932)
!5935 = !DILocation(line: 1613, column: 32, scope: !5932)
!5936 = !DILocation(line: 1614, column: 18, scope: !5932)
!5937 = !DILocation(line: 1614, column: 17, scope: !5932)
!5938 = !DILocation(line: 1615, column: 9, scope: !5932)
!5939 = !DILocation(line: 1617, column: 30, scope: !5928)
!5940 = !DILocation(line: 1617, column: 15, scope: !5928)
!5941 = !DILocation(line: 1618, column: 5, scope: !5923)
!5942 = !DILocation(line: 1622, column: 26, scope: !5919)
!5943 = !DILocation(line: 1622, column: 11, scope: !5919)
!5944 = !DILocation(line: 1624, column: 10, scope: !5902)
!5945 = !DILocation(line: 1627, column: 7, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5902, file: !3, line: 1627, column: 7)
!5947 = !DILocation(line: 1627, column: 23, scope: !5946)
!5948 = !DILocation(line: 1627, column: 7, scope: !5902)
!5949 = !DILocation(line: 1631, column: 30, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1631, column: 11)
!5951 = distinct !DILexicalBlock(scope: !5946, file: !3, line: 1628, column: 5)
!5952 = !DILocation(line: 1631, column: 11, scope: !5950)
!5953 = !DILocation(line: 1631, column: 11, scope: !5951)
!5954 = !DILocation(line: 1633, column: 16, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5950, file: !3, line: 1632, column: 2)
!5956 = !DILocation(line: 1633, column: 5, scope: !5955)
!5957 = !DILocation(line: 1633, column: 14, scope: !5955)
!5958 = !DILocation(line: 1634, column: 12, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 1634, column: 8)
!5960 = !DILocation(line: 1634, column: 24, scope: !5959)
!5961 = !DILocation(line: 1634, column: 8, scope: !5955)
!5962 = !DILocation(line: 1635, column: 13, scope: !5959)
!5963 = !DILocation(line: 1635, column: 6, scope: !5959)
!5964 = !DILocation(line: 1637, column: 13, scope: !5959)
!5965 = !DILocation(line: 1638, column: 2, scope: !5955)
!5966 = !DILocation(line: 1639, column: 5, scope: !5951)
!5967 = !DILocation(line: 1641, column: 10, scope: !5902)
!5968 = !DILocation(line: 1641, column: 3, scope: !5902)
!5969 = distinct !DISubprogram(name: "visit_cond_stmt", scope: !3, file: !3, line: 1650, type: !5970, scopeLine: 1651, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!5970 = !DISubroutineType(types: !5971)
!5971 = !{!834, !1959, !5203}
!5972 = !DILocalVariable(name: "stmt", arg: 1, scope: !5969, file: !3, line: 1650, type: !1959)
!5973 = !DILocation(line: 1650, column: 25, scope: !5969)
!5974 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !5969, file: !3, line: 1650, type: !5203)
!5975 = !DILocation(line: 1650, column: 37, scope: !5969)
!5976 = !DILocalVariable(name: "val", scope: !5969, file: !3, line: 1652, type: !2967)
!5977 = !DILocation(line: 1652, column: 16, scope: !5969)
!5978 = !DILocalVariable(name: "block", scope: !5969, file: !3, line: 1653, type: !2392)
!5979 = !DILocation(line: 1653, column: 15, scope: !5969)
!5980 = !DILocation(line: 1655, column: 22, scope: !5969)
!5981 = !DILocation(line: 1655, column: 11, scope: !5969)
!5982 = !DILocation(line: 1655, column: 9, scope: !5969)
!5983 = !DILocation(line: 1656, column: 24, scope: !5969)
!5984 = !DILocation(line: 1656, column: 9, scope: !5969)
!5985 = !DILocation(line: 1662, column: 23, scope: !5969)
!5986 = !DILocation(line: 1662, column: 19, scope: !5969)
!5987 = !DILocation(line: 1662, column: 48, scope: !5969)
!5988 = !DILocation(line: 1662, column: 59, scope: !5969)
!5989 = !DILocation(line: 1662, column: 31, scope: !5969)
!5990 = !DILocation(line: 1662, column: 4, scope: !5969)
!5991 = !DILocation(line: 1662, column: 17, scope: !5969)
!5992 = !DILocation(line: 1663, column: 8, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 1663, column: 7)
!5994 = !DILocation(line: 1663, column: 7, scope: !5993)
!5995 = !DILocation(line: 1663, column: 7, scope: !5969)
!5996 = !DILocation(line: 1664, column: 5, scope: !5993)
!5997 = !DILocation(line: 1666, column: 5, scope: !5993)
!5998 = !DILocation(line: 1667, column: 1, scope: !5969)
!5999 = distinct !DISubprogram(name: "set_lattice_value", scope: !3, file: !3, line: 465, type: !6000, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6000 = !DISubroutineType(types: !6001)
!6001 = !{!1748, !1669, !2967}
!6002 = !DILocalVariable(name: "var", arg: 1, scope: !5999, file: !3, line: 465, type: !1669)
!6003 = !DILocation(line: 465, column: 25, scope: !5999)
!6004 = !DILocalVariable(name: "new_val", arg: 2, scope: !5999, file: !3, line: 465, type: !2967)
!6005 = !DILocation(line: 465, column: 43, scope: !5999)
!6006 = !DILocalVariable(name: "old_val", scope: !5999, file: !3, line: 467, type: !2966)
!6007 = !DILocation(line: 467, column: 17, scope: !5999)
!6008 = !DILocation(line: 467, column: 38, scope: !5999)
!6009 = !DILocation(line: 467, column: 27, scope: !5999)
!6010 = !DILocation(line: 469, column: 3, scope: !5999)
!6011 = !DILocation(line: 475, column: 3, scope: !5999)
!6012 = !DILocation(line: 480, column: 7, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 480, column: 7)
!6014 = !DILocation(line: 480, column: 16, scope: !6013)
!6015 = !DILocation(line: 480, column: 39, scope: !6013)
!6016 = !DILocation(line: 480, column: 28, scope: !6013)
!6017 = !DILocation(line: 480, column: 7, scope: !5999)
!6018 = !DILocation(line: 482, column: 11, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6020, file: !3, line: 482, column: 11)
!6020 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 481, column: 5)
!6021 = !DILocation(line: 482, column: 21, scope: !6019)
!6022 = !DILocation(line: 482, column: 25, scope: !6019)
!6023 = !DILocation(line: 482, column: 36, scope: !6019)
!6024 = !DILocation(line: 482, column: 11, scope: !6020)
!6025 = !DILocation(line: 484, column: 24, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 483, column: 2)
!6027 = !DILocation(line: 484, column: 4, scope: !6026)
!6028 = !DILocation(line: 485, column: 13, scope: !6026)
!6029 = !DILocation(line: 485, column: 4, scope: !6026)
!6030 = !DILocation(line: 486, column: 2, scope: !6026)
!6031 = !DILocation(line: 488, column: 8, scope: !6020)
!6032 = !DILocation(line: 488, column: 18, scope: !6020)
!6033 = !DILocation(line: 490, column: 7, scope: !6020)
!6034 = !DILocation(line: 491, column: 7, scope: !6020)
!6035 = !DILocation(line: 494, column: 3, scope: !5999)
!6036 = !DILocation(line: 495, column: 1, scope: !5999)
!6037 = distinct !DISubprogram(name: "evaluate_stmt", scope: !3, file: !3, line: 1400, type: !6038, scopeLine: 1401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6038 = !DISubroutineType(types: !6039)
!6039 = !{!2967, !1959}
!6040 = !DILocalVariable(name: "stmt", arg: 1, scope: !6037, file: !3, line: 1400, type: !1959)
!6041 = !DILocation(line: 1400, column: 23, scope: !6037)
!6042 = !DILocalVariable(name: "val", scope: !6037, file: !3, line: 1402, type: !2967)
!6043 = !DILocation(line: 1402, column: 16, scope: !6037)
!6044 = !DILocalVariable(name: "simplified", scope: !6037, file: !3, line: 1403, type: !1669)
!6045 = !DILocation(line: 1403, column: 8, scope: !6037)
!6046 = !DILocalVariable(name: "likelyvalue", scope: !6037, file: !3, line: 1404, type: !6047)
!6047 = !DIDerivedType(tag: DW_TAG_typedef, name: "ccp_lattice_t", file: !3, line: 221, baseType: !524)
!6048 = !DILocation(line: 1404, column: 17, scope: !6037)
!6049 = !DILocation(line: 1404, column: 45, scope: !6037)
!6050 = !DILocation(line: 1404, column: 31, scope: !6037)
!6051 = !DILocalVariable(name: "is_constant", scope: !6037, file: !3, line: 1405, type: !1748)
!6052 = !DILocation(line: 1405, column: 8, scope: !6037)
!6053 = !DILocation(line: 1407, column: 3, scope: !6037)
!6054 = !DILocation(line: 1414, column: 7, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1414, column: 7)
!6056 = !DILocation(line: 1414, column: 19, scope: !6055)
!6057 = !DILocation(line: 1414, column: 7, scope: !6037)
!6058 = !DILocation(line: 1415, column: 28, scope: !6055)
!6059 = !DILocation(line: 1415, column: 18, scope: !6055)
!6060 = !DILocation(line: 1415, column: 16, scope: !6055)
!6061 = !DILocation(line: 1415, column: 5, scope: !6055)
!6062 = !DILocation(line: 1418, column: 12, scope: !6063)
!6063 = distinct !DILexicalBlock(scope: !6055, file: !3, line: 1418, column: 12)
!6064 = !DILocation(line: 1418, column: 24, scope: !6063)
!6065 = !DILocation(line: 1418, column: 12, scope: !6055)
!6066 = !DILocalVariable(name: "code", scope: !6067, file: !3, line: 1420, type: !742)
!6067 = distinct !DILexicalBlock(scope: !6063, file: !3, line: 1419, column: 5)
!6068 = !DILocation(line: 1420, column: 24, scope: !6067)
!6069 = !DILocation(line: 1420, column: 44, scope: !6067)
!6070 = !DILocation(line: 1420, column: 31, scope: !6067)
!6071 = !DILocation(line: 1421, column: 11, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 1421, column: 11)
!6073 = !DILocation(line: 1421, column: 16, scope: !6072)
!6074 = !DILocation(line: 1421, column: 11, scope: !6067)
!6075 = !DILocalVariable(name: "subcode", scope: !6076, file: !3, line: 1423, type: !134)
!6076 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1422, column: 9)
!6077 = !DILocation(line: 1423, column: 26, scope: !6076)
!6078 = !DILocation(line: 1423, column: 60, scope: !6076)
!6079 = !DILocation(line: 1423, column: 36, scope: !6076)
!6080 = !DILocation(line: 1427, column: 37, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 1427, column: 15)
!6082 = !DILocation(line: 1427, column: 15, scope: !6081)
!6083 = !DILocation(line: 1427, column: 46, scope: !6081)
!6084 = !DILocation(line: 1427, column: 15, scope: !6076)
!6085 = !DILocation(line: 1428, column: 46, scope: !6081)
!6086 = !DILocation(line: 1428, column: 26, scope: !6081)
!6087 = !DILocation(line: 1428, column: 24, scope: !6081)
!6088 = !DILocation(line: 1428, column: 13, scope: !6081)
!6089 = !DILocation(line: 1429, column: 9, scope: !6076)
!6090 = !DILocation(line: 1430, column: 16, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1430, column: 16)
!6092 = !DILocation(line: 1430, column: 21, scope: !6091)
!6093 = !DILocation(line: 1430, column: 16, scope: !6072)
!6094 = !DILocation(line: 1431, column: 43, scope: !6091)
!6095 = !DILocation(line: 1431, column: 22, scope: !6091)
!6096 = !DILocation(line: 1431, column: 20, scope: !6091)
!6097 = !DILocation(line: 1431, column: 9, scope: !6091)
!6098 = !DILocation(line: 1434, column: 2, scope: !6091)
!6099 = !DILocation(line: 1435, column: 5, scope: !6067)
!6100 = !DILocation(line: 1437, column: 17, scope: !6037)
!6101 = !DILocation(line: 1437, column: 28, scope: !6037)
!6102 = !DILocation(line: 1437, column: 56, scope: !6037)
!6103 = !DILocation(line: 1437, column: 31, scope: !6037)
!6104 = !DILocation(line: 0, scope: !6037)
!6105 = !DILocation(line: 1437, column: 15, scope: !6037)
!6106 = !DILocation(line: 1439, column: 35, scope: !6037)
!6107 = !DILocation(line: 1439, column: 48, scope: !6037)
!6108 = !DILocation(line: 1439, column: 3, scope: !6037)
!6109 = !DILocation(line: 1441, column: 7, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1441, column: 7)
!6111 = !DILocation(line: 1441, column: 17, scope: !6110)
!6112 = !DILocation(line: 1441, column: 21, scope: !6110)
!6113 = !DILocation(line: 1441, column: 32, scope: !6110)
!6114 = !DILocation(line: 1441, column: 7, scope: !6037)
!6115 = !DILocation(line: 1443, column: 16, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 1442, column: 5)
!6117 = !DILocation(line: 1443, column: 7, scope: !6116)
!6118 = !DILocation(line: 1444, column: 15, scope: !6116)
!6119 = !DILocation(line: 1444, column: 7, scope: !6116)
!6120 = !DILocation(line: 1447, column: 13, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !6116, file: !3, line: 1445, column: 2)
!6122 = !DILocation(line: 1447, column: 4, scope: !6121)
!6123 = !DILocation(line: 1448, column: 4, scope: !6121)
!6124 = !DILocation(line: 1450, column: 13, scope: !6121)
!6125 = !DILocation(line: 1450, column: 4, scope: !6121)
!6126 = !DILocation(line: 1451, column: 4, scope: !6121)
!6127 = !DILocation(line: 1453, column: 13, scope: !6121)
!6128 = !DILocation(line: 1453, column: 4, scope: !6121)
!6129 = !DILocation(line: 1454, column: 4, scope: !6121)
!6130 = !DILocation(line: 1456, column: 2, scope: !6121)
!6131 = !DILocation(line: 1457, column: 16, scope: !6116)
!6132 = !DILocation(line: 1457, column: 7, scope: !6116)
!6133 = !DILocation(line: 1458, column: 5, scope: !6116)
!6134 = !DILocation(line: 1460, column: 7, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1460, column: 7)
!6136 = !DILocation(line: 1460, column: 7, scope: !6037)
!6137 = !DILocation(line: 1463, column: 11, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1461, column: 5)
!6139 = !DILocation(line: 1463, column: 23, scope: !6138)
!6140 = !DILocation(line: 1464, column: 19, scope: !6138)
!6141 = !DILocation(line: 1464, column: 11, scope: !6138)
!6142 = !DILocation(line: 1464, column: 17, scope: !6138)
!6143 = !DILocation(line: 1465, column: 5, scope: !6138)
!6144 = !DILocation(line: 1471, column: 11, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 1471, column: 11)
!6146 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1467, column: 5)
!6147 = !DILocation(line: 1471, column: 23, scope: !6145)
!6148 = !DILocation(line: 1471, column: 11, scope: !6146)
!6149 = !DILocation(line: 1472, column: 20, scope: !6145)
!6150 = !DILocation(line: 1472, column: 6, scope: !6145)
!6151 = !DILocation(line: 1472, column: 18, scope: !6145)
!6152 = !DILocation(line: 1472, column: 2, scope: !6145)
!6153 = !DILocation(line: 1474, column: 6, scope: !6145)
!6154 = !DILocation(line: 1474, column: 18, scope: !6145)
!6155 = !DILocation(line: 1476, column: 11, scope: !6146)
!6156 = !DILocation(line: 1476, column: 17, scope: !6146)
!6157 = !DILocation(line: 1479, column: 3, scope: !6037)
!6158 = distinct !DISubprogram(name: "likely_value", scope: !3, file: !3, line: 510, type: !6159, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6159 = !DISubroutineType(types: !6160)
!6160 = !{!6047, !1959}
!6161 = !DILocalVariable(name: "stmt", arg: 1, scope: !6158, file: !3, line: 510, type: !1959)
!6162 = !DILocation(line: 510, column: 22, scope: !6158)
!6163 = !DILocalVariable(name: "has_constant_operand", scope: !6158, file: !3, line: 512, type: !1748)
!6164 = !DILocation(line: 512, column: 8, scope: !6158)
!6165 = !DILocalVariable(name: "has_undefined_operand", scope: !6158, file: !3, line: 512, type: !1748)
!6166 = !DILocation(line: 512, column: 30, scope: !6158)
!6167 = !DILocalVariable(name: "all_undefined_operands", scope: !6158, file: !3, line: 512, type: !1748)
!6168 = !DILocation(line: 512, column: 53, scope: !6158)
!6169 = !DILocalVariable(name: "use", scope: !6158, file: !3, line: 513, type: !1669)
!6170 = !DILocation(line: 513, column: 8, scope: !6158)
!6171 = !DILocalVariable(name: "iter", scope: !6158, file: !3, line: 514, type: !5129)
!6172 = !DILocation(line: 514, column: 15, scope: !6158)
!6173 = !DILocalVariable(name: "i", scope: !6158, file: !3, line: 515, type: !7)
!6174 = !DILocation(line: 515, column: 12, scope: !6158)
!6175 = !DILocalVariable(name: "code", scope: !6158, file: !3, line: 517, type: !742)
!6176 = !DILocation(line: 517, column: 20, scope: !6158)
!6177 = !DILocation(line: 517, column: 40, scope: !6158)
!6178 = !DILocation(line: 517, column: 27, scope: !6158)
!6179 = !DILocation(line: 521, column: 3, scope: !6158)
!6180 = !DILocation(line: 528, column: 32, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 528, column: 7)
!6182 = !DILocation(line: 528, column: 7, scope: !6181)
!6183 = !DILocation(line: 528, column: 7, scope: !6158)
!6184 = !DILocation(line: 529, column: 5, scope: !6181)
!6185 = !DILocation(line: 532, column: 24, scope: !6158)
!6186 = !DILocation(line: 533, column: 25, scope: !6158)
!6187 = !DILocation(line: 534, column: 26, scope: !6158)
!6188 = !DILocation(line: 535, column: 3, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 535, column: 3)
!6190 = !DILocation(line: 535, column: 3, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6189, file: !3, line: 535, column: 3)
!6192 = !DILocalVariable(name: "val", scope: !6193, file: !3, line: 537, type: !2966)
!6193 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 536, column: 5)
!6194 = !DILocation(line: 537, column: 21, scope: !6193)
!6195 = !DILocation(line: 537, column: 38, scope: !6193)
!6196 = !DILocation(line: 537, column: 27, scope: !6193)
!6197 = !DILocation(line: 539, column: 11, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 539, column: 11)
!6199 = !DILocation(line: 539, column: 16, scope: !6198)
!6200 = !DILocation(line: 539, column: 28, scope: !6198)
!6201 = !DILocation(line: 539, column: 11, scope: !6193)
!6202 = !DILocation(line: 540, column: 24, scope: !6198)
!6203 = !DILocation(line: 540, column: 2, scope: !6198)
!6204 = !DILocation(line: 542, column: 25, scope: !6198)
!6205 = !DILocation(line: 544, column: 11, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 544, column: 11)
!6207 = !DILocation(line: 544, column: 16, scope: !6206)
!6208 = !DILocation(line: 544, column: 28, scope: !6206)
!6209 = !DILocation(line: 544, column: 11, scope: !6193)
!6210 = !DILocation(line: 545, column: 23, scope: !6206)
!6211 = !DILocation(line: 545, column: 2, scope: !6206)
!6212 = !DILocation(line: 546, column: 5, scope: !6193)
!6213 = distinct !{!6213, !6188, !6214}
!6214 = !DILocation(line: 546, column: 5, scope: !6189)
!6215 = !DILocation(line: 551, column: 29, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 551, column: 3)
!6217 = !DILocation(line: 551, column: 13, scope: !6216)
!6218 = !DILocation(line: 551, column: 62, scope: !6216)
!6219 = !DILocation(line: 551, column: 46, scope: !6216)
!6220 = !DILocation(line: 551, column: 44, scope: !6216)
!6221 = !DILocation(line: 551, column: 10, scope: !6216)
!6222 = !DILocation(line: 551, column: 8, scope: !6216)
!6223 = !DILocation(line: 552, column: 8, scope: !6224)
!6224 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 551, column: 3)
!6225 = !DILocation(line: 552, column: 28, scope: !6224)
!6226 = !DILocation(line: 552, column: 12, scope: !6224)
!6227 = !DILocation(line: 552, column: 10, scope: !6224)
!6228 = !DILocation(line: 551, column: 3, scope: !6216)
!6229 = !DILocalVariable(name: "op", scope: !6230, file: !3, line: 554, type: !1669)
!6230 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 553, column: 5)
!6231 = !DILocation(line: 554, column: 12, scope: !6230)
!6232 = !DILocation(line: 554, column: 28, scope: !6230)
!6233 = !DILocation(line: 554, column: 34, scope: !6230)
!6234 = !DILocation(line: 554, column: 17, scope: !6230)
!6235 = !DILocation(line: 555, column: 12, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 555, column: 11)
!6237 = !DILocation(line: 555, column: 15, scope: !6236)
!6238 = !DILocation(line: 555, column: 18, scope: !6236)
!6239 = !DILocation(line: 555, column: 33, scope: !6236)
!6240 = !DILocation(line: 555, column: 11, scope: !6230)
!6241 = !DILocation(line: 556, column: 2, scope: !6236)
!6242 = !DILocation(line: 557, column: 36, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 557, column: 11)
!6244 = !DILocation(line: 557, column: 11, scope: !6243)
!6245 = !DILocation(line: 557, column: 11, scope: !6230)
!6246 = !DILocation(line: 558, column: 23, scope: !6243)
!6247 = !DILocation(line: 558, column: 2, scope: !6243)
!6248 = !DILocation(line: 559, column: 5, scope: !6230)
!6249 = !DILocation(line: 552, column: 35, scope: !6224)
!6250 = !DILocation(line: 551, column: 3, scope: !6224)
!6251 = distinct !{!6251, !6228, !6252}
!6252 = !DILocation(line: 559, column: 5, scope: !6216)
!6253 = !DILocation(line: 561, column: 7, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 561, column: 7)
!6255 = !DILocation(line: 561, column: 7, scope: !6158)
!6256 = !DILocation(line: 562, column: 28, scope: !6254)
!6257 = !DILocation(line: 562, column: 5, scope: !6254)
!6258 = !DILocation(line: 567, column: 7, scope: !6259)
!6259 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 567, column: 7)
!6260 = !DILocation(line: 567, column: 29, scope: !6259)
!6261 = !DILocation(line: 567, column: 32, scope: !6259)
!6262 = !DILocation(line: 567, column: 7, scope: !6158)
!6263 = !DILocation(line: 568, column: 5, scope: !6259)
!6264 = !DILocation(line: 569, column: 12, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6259, file: !3, line: 569, column: 12)
!6266 = !DILocation(line: 569, column: 17, scope: !6265)
!6267 = !DILocation(line: 569, column: 34, scope: !6265)
!6268 = !DILocation(line: 569, column: 37, scope: !6265)
!6269 = !DILocation(line: 569, column: 12, scope: !6259)
!6270 = !DILocation(line: 571, column: 39, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 570, column: 5)
!6272 = !DILocation(line: 571, column: 15, scope: !6271)
!6273 = !DILocation(line: 571, column: 7, scope: !6271)
!6274 = !DILocation(line: 583, column: 4, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 572, column: 2)
!6276 = !DILocation(line: 587, column: 2, scope: !6275)
!6277 = !DILocation(line: 588, column: 5, scope: !6271)
!6278 = !DILocation(line: 591, column: 7, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 591, column: 7)
!6280 = !DILocation(line: 591, column: 7, scope: !6158)
!6281 = !DILocation(line: 592, column: 5, scope: !6279)
!6282 = !DILocation(line: 597, column: 7, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 597, column: 7)
!6284 = !DILocation(line: 598, column: 7, scope: !6283)
!6285 = !DILocation(line: 598, column: 38, scope: !6283)
!6286 = !DILocation(line: 598, column: 10, scope: !6283)
!6287 = !DILocation(line: 597, column: 7, scope: !6158)
!6288 = !DILocation(line: 599, column: 5, scope: !6283)
!6289 = !DILocation(line: 601, column: 3, scope: !6158)
!6290 = !DILocation(line: 602, column: 1, scope: !6158)
!6291 = distinct !DISubprogram(name: "ccp_fold", scope: !3, file: !3, line: 928, type: !6292, scopeLine: 929, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6292 = !DISubroutineType(types: !6293)
!6293 = !{!1669, !1959}
!6294 = !DILocalVariable(name: "stmt", arg: 1, scope: !6291, file: !3, line: 928, type: !1959)
!6295 = !DILocation(line: 928, column: 18, scope: !6291)
!6296 = !DILocalVariable(name: "loc", scope: !6291, file: !3, line: 930, type: !1756)
!6297 = !DILocation(line: 930, column: 14, scope: !6291)
!6298 = !DILocation(line: 930, column: 37, scope: !6291)
!6299 = !DILocation(line: 930, column: 20, scope: !6291)
!6300 = !DILocation(line: 931, column: 24, scope: !6291)
!6301 = !DILocation(line: 931, column: 11, scope: !6291)
!6302 = !DILocation(line: 931, column: 3, scope: !6291)
!6303 = !DILocalVariable(name: "subcode", scope: !6304, file: !3, line: 935, type: !134)
!6304 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 934, column: 7)
!6305 = distinct !DILexicalBlock(scope: !6291, file: !3, line: 932, column: 5)
!6306 = !DILocation(line: 935, column: 24, scope: !6304)
!6307 = !DILocation(line: 935, column: 58, scope: !6304)
!6308 = !DILocation(line: 935, column: 34, scope: !6304)
!6309 = !DILocation(line: 937, column: 39, scope: !6304)
!6310 = !DILocation(line: 937, column: 17, scope: !6304)
!6311 = !DILocation(line: 937, column: 9, scope: !6304)
!6312 = !DILocalVariable(name: "rhs", scope: !6313, file: !3, line: 941, type: !1669)
!6313 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 940, column: 13)
!6314 = distinct !DILexicalBlock(scope: !6304, file: !3, line: 938, column: 11)
!6315 = !DILocation(line: 941, column: 20, scope: !6313)
!6316 = !DILocation(line: 941, column: 46, scope: !6313)
!6317 = !DILocation(line: 941, column: 26, scope: !6313)
!6318 = !DILocalVariable(name: "kind", scope: !6313, file: !3, line: 942, type: !511)
!6319 = !DILocation(line: 942, column: 36, scope: !6313)
!6320 = !DILocation(line: 942, column: 43, scope: !6313)
!6321 = !DILocation(line: 944, column: 19, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6313, file: !3, line: 944, column: 19)
!6323 = !DILocation(line: 944, column: 35, scope: !6322)
!6324 = !DILocation(line: 944, column: 19, scope: !6313)
!6325 = !DILocation(line: 948, column: 37, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 945, column: 17)
!6327 = !DILocation(line: 948, column: 26, scope: !6326)
!6328 = !DILocation(line: 948, column: 43, scope: !6326)
!6329 = !DILocation(line: 948, column: 19, scope: !6326)
!6330 = !DILocation(line: 952, column: 17, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 952, column: 17)
!6332 = !DILocation(line: 952, column: 33, scope: !6331)
!6333 = !DILocation(line: 952, column: 17, scope: !6322)
!6334 = !DILocalVariable(name: "base", scope: !6335, file: !3, line: 954, type: !1993)
!6335 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 953, column: 3)
!6336 = !DILocation(line: 954, column: 11, scope: !6335)
!6337 = !DILocation(line: 955, column: 13, scope: !6335)
!6338 = !DILocation(line: 955, column: 10, scope: !6335)
!6339 = !DILocation(line: 956, column: 5, scope: !6335)
!6340 = !DILocation(line: 956, column: 34, scope: !6335)
!6341 = !DILocation(line: 956, column: 33, scope: !6335)
!6342 = !DILocation(line: 956, column: 12, scope: !6335)
!6343 = !DILocation(line: 957, column: 15, scope: !6335)
!6344 = !DILocation(line: 957, column: 12, scope: !6335)
!6345 = distinct !{!6345, !6339, !6343}
!6346 = !DILocation(line: 958, column: 9, scope: !6347)
!6347 = distinct !DILexicalBlock(scope: !6335, file: !3, line: 958, column: 9)
!6348 = !DILocation(line: 958, column: 27, scope: !6347)
!6349 = !DILocation(line: 959, column: 9, scope: !6347)
!6350 = !DILocation(line: 959, column: 12, scope: !6347)
!6351 = !DILocation(line: 959, column: 48, scope: !6347)
!6352 = !DILocation(line: 958, column: 9, scope: !6335)
!6353 = !DILocalVariable(name: "val", scope: !6354, file: !3, line: 961, type: !2966)
!6354 = distinct !DILexicalBlock(scope: !6347, file: !3, line: 960, column: 7)
!6355 = !DILocation(line: 961, column: 23, scope: !6354)
!6356 = !DILocation(line: 961, column: 40, scope: !6354)
!6357 = !DILocation(line: 961, column: 29, scope: !6354)
!6358 = !DILocation(line: 962, column: 13, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6354, file: !3, line: 962, column: 13)
!6360 = !DILocation(line: 962, column: 18, scope: !6359)
!6361 = !DILocation(line: 962, column: 30, scope: !6359)
!6362 = !DILocation(line: 963, column: 6, scope: !6359)
!6363 = !DILocation(line: 963, column: 9, scope: !6359)
!6364 = !DILocation(line: 963, column: 32, scope: !6359)
!6365 = !DILocation(line: 964, column: 6, scope: !6359)
!6366 = !DILocation(line: 965, column: 12, scope: !6359)
!6367 = !DILocation(line: 965, column: 17, scope: !6359)
!6368 = !DILocation(line: 965, column: 25, scope: !6359)
!6369 = !DILocation(line: 965, column: 24, scope: !6359)
!6370 = !DILocation(line: 964, column: 9, scope: !6359)
!6371 = !DILocation(line: 962, column: 13, scope: !6354)
!6372 = !DILocalVariable(name: "ret", scope: !6373, file: !3, line: 970, type: !1669)
!6373 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 966, column: 4)
!6374 = !DILocation(line: 970, column: 11, scope: !6373)
!6375 = !DILocalVariable(name: "save", scope: !6373, file: !3, line: 970, type: !1669)
!6376 = !DILocation(line: 970, column: 16, scope: !6373)
!6377 = !DILocation(line: 970, column: 24, scope: !6373)
!6378 = !DILocation(line: 970, column: 23, scope: !6373)
!6379 = !DILocation(line: 971, column: 14, scope: !6373)
!6380 = !DILocation(line: 971, column: 7, scope: !6373)
!6381 = !DILocation(line: 971, column: 12, scope: !6373)
!6382 = !DILocation(line: 972, column: 26, scope: !6373)
!6383 = !DILocation(line: 972, column: 12, scope: !6373)
!6384 = !DILocation(line: 972, column: 10, scope: !6373)
!6385 = !DILocation(line: 973, column: 46, scope: !6373)
!6386 = !DILocation(line: 973, column: 6, scope: !6373)
!6387 = !DILocation(line: 974, column: 14, scope: !6373)
!6388 = !DILocation(line: 974, column: 7, scope: !6373)
!6389 = !DILocation(line: 974, column: 12, scope: !6373)
!6390 = !DILocation(line: 975, column: 13, scope: !6373)
!6391 = !DILocation(line: 975, column: 6, scope: !6373)
!6392 = !DILocation(line: 977, column: 7, scope: !6354)
!6393 = !DILocation(line: 978, column: 3, scope: !6335)
!6394 = !DILocation(line: 979, column: 17, scope: !6395)
!6395 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 979, column: 17)
!6396 = !DILocation(line: 979, column: 33, scope: !6395)
!6397 = !DILocation(line: 980, column: 10, scope: !6395)
!6398 = !DILocation(line: 980, column: 13, scope: !6395)
!6399 = !DILocation(line: 980, column: 41, scope: !6395)
!6400 = !DILocation(line: 981, column: 10, scope: !6395)
!6401 = !DILocation(line: 981, column: 14, scope: !6395)
!6402 = !DILocation(line: 982, column: 10, scope: !6395)
!6403 = !DILocation(line: 982, column: 7, scope: !6395)
!6404 = !DILocation(line: 979, column: 17, scope: !6331)
!6405 = !DILocalVariable(name: "i", scope: !6406, file: !3, line: 984, type: !7)
!6406 = distinct !DILexicalBlock(scope: !6395, file: !3, line: 983, column: 3)
!6407 = !DILocation(line: 984, column: 14, scope: !6406)
!6408 = !DILocalVariable(name: "val", scope: !6406, file: !3, line: 985, type: !1669)
!6409 = !DILocation(line: 985, column: 10, scope: !6406)
!6410 = !DILocalVariable(name: "list", scope: !6406, file: !3, line: 985, type: !1669)
!6411 = !DILocation(line: 985, column: 15, scope: !6406)
!6412 = !DILocation(line: 987, column: 10, scope: !6406)
!6413 = !DILocation(line: 988, column: 5, scope: !6414)
!6414 = distinct !DILexicalBlock(scope: !6406, file: !3, line: 988, column: 5)
!6415 = !DILocation(line: 988, column: 5, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6414, file: !3, line: 988, column: 5)
!6417 = !DILocation(line: 990, column: 13, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 990, column: 13)
!6419 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 989, column: 7)
!6420 = !DILocation(line: 990, column: 29, scope: !6418)
!6421 = !DILocation(line: 991, column: 6, scope: !6418)
!6422 = !DILocation(line: 991, column: 20, scope: !6418)
!6423 = !DILocation(line: 991, column: 9, scope: !6418)
!6424 = !DILocation(line: 991, column: 26, scope: !6418)
!6425 = !DILocation(line: 991, column: 38, scope: !6418)
!6426 = !DILocation(line: 990, column: 13, scope: !6419)
!6427 = !DILocation(line: 992, column: 21, scope: !6418)
!6428 = !DILocation(line: 992, column: 10, scope: !6418)
!6429 = !DILocation(line: 992, column: 27, scope: !6418)
!6430 = !DILocation(line: 992, column: 8, scope: !6418)
!6431 = !DILocation(line: 992, column: 4, scope: !6418)
!6432 = !DILocation(line: 993, column: 13, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 993, column: 13)
!6434 = !DILocation(line: 993, column: 29, scope: !6433)
!6435 = !DILocation(line: 994, column: 6, scope: !6433)
!6436 = !DILocation(line: 994, column: 9, scope: !6433)
!6437 = !DILocation(line: 994, column: 25, scope: !6433)
!6438 = !DILocation(line: 995, column: 6, scope: !6433)
!6439 = !DILocation(line: 995, column: 9, scope: !6433)
!6440 = !DILocation(line: 995, column: 25, scope: !6433)
!6441 = !DILocation(line: 993, column: 13, scope: !6419)
!6442 = !DILocation(line: 996, column: 11, scope: !6433)
!6443 = !DILocation(line: 996, column: 9, scope: !6433)
!6444 = !DILocation(line: 996, column: 4, scope: !6433)
!6445 = !DILocation(line: 998, column: 4, scope: !6433)
!6446 = !DILocation(line: 999, column: 7, scope: !6419)
!6447 = distinct !{!6447, !6413, !6448}
!6448 = !DILocation(line: 999, column: 7, scope: !6414)
!6449 = !DILocation(line: 1001, column: 26, scope: !6406)
!6450 = !DILocation(line: 1001, column: 53, scope: !6406)
!6451 = !DILocation(line: 1001, column: 43, scope: !6406)
!6452 = !DILocation(line: 1001, column: 12, scope: !6406)
!6453 = !DILocation(line: 1001, column: 5, scope: !6406)
!6454 = !DILocation(line: 1004, column: 19, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6313, file: !3, line: 1004, column: 19)
!6456 = !DILocation(line: 1004, column: 24, scope: !6455)
!6457 = !DILocation(line: 1004, column: 19, scope: !6313)
!6458 = !DILocation(line: 1006, column: 10, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1006, column: 9)
!6460 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1005, column: 3)
!6461 = !DILocation(line: 1006, column: 26, scope: !6459)
!6462 = !DILocation(line: 1007, column: 10, scope: !6459)
!6463 = !DILocation(line: 1007, column: 13, scope: !6459)
!6464 = !DILocation(line: 1007, column: 29, scope: !6459)
!6465 = !DILocation(line: 1008, column: 10, scope: !6459)
!6466 = !DILocation(line: 1008, column: 13, scope: !6459)
!6467 = !DILocation(line: 1008, column: 29, scope: !6459)
!6468 = !DILocation(line: 1009, column: 9, scope: !6459)
!6469 = !DILocation(line: 1009, column: 12, scope: !6459)
!6470 = !DILocation(line: 1009, column: 46, scope: !6459)
!6471 = !DILocation(line: 1006, column: 9, scope: !6460)
!6472 = !DILocalVariable(name: "val", scope: !6473, file: !3, line: 1011, type: !2966)
!6473 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 1010, column: 7)
!6474 = !DILocation(line: 1011, column: 23, scope: !6473)
!6475 = !DILocation(line: 1011, column: 40, scope: !6473)
!6476 = !DILocation(line: 1011, column: 29, scope: !6473)
!6477 = !DILocation(line: 1012, column: 13, scope: !6478)
!6478 = distinct !DILexicalBlock(scope: !6473, file: !3, line: 1012, column: 13)
!6479 = !DILocation(line: 1012, column: 18, scope: !6478)
!6480 = !DILocation(line: 1012, column: 30, scope: !6478)
!6481 = !DILocation(line: 1012, column: 13, scope: !6473)
!6482 = !DILocation(line: 1013, column: 27, scope: !6478)
!6483 = !DILocation(line: 1014, column: 9, scope: !6478)
!6484 = !DILocation(line: 1015, column: 9, scope: !6478)
!6485 = !DILocation(line: 1015, column: 26, scope: !6478)
!6486 = !DILocation(line: 1015, column: 31, scope: !6478)
!6487 = !DILocation(line: 1013, column: 11, scope: !6478)
!6488 = !DILocation(line: 1013, column: 4, scope: !6478)
!6489 = !DILocation(line: 1016, column: 7, scope: !6473)
!6490 = !DILocation(line: 1017, column: 14, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 1017, column: 14)
!6492 = !DILocation(line: 1017, column: 30, scope: !6491)
!6493 = !DILocation(line: 1018, column: 7, scope: !6491)
!6494 = !DILocation(line: 1018, column: 10, scope: !6491)
!6495 = !DILocation(line: 1018, column: 44, scope: !6491)
!6496 = !DILocation(line: 1017, column: 14, scope: !6459)
!6497 = !DILocalVariable(name: "val", scope: !6498, file: !3, line: 1020, type: !2966)
!6498 = distinct !DILexicalBlock(scope: !6491, file: !3, line: 1019, column: 7)
!6499 = !DILocation(line: 1020, column: 23, scope: !6498)
!6500 = !DILocation(line: 1020, column: 40, scope: !6498)
!6501 = !DILocation(line: 1020, column: 29, scope: !6498)
!6502 = !DILocation(line: 1021, column: 13, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 1021, column: 13)
!6504 = !DILocation(line: 1021, column: 18, scope: !6503)
!6505 = !DILocation(line: 1021, column: 30, scope: !6503)
!6506 = !DILocation(line: 1022, column: 6, scope: !6503)
!6507 = !DILocation(line: 1022, column: 9, scope: !6503)
!6508 = !DILocation(line: 1022, column: 32, scope: !6503)
!6509 = !DILocation(line: 1023, column: 6, scope: !6503)
!6510 = !DILocation(line: 1023, column: 36, scope: !6503)
!6511 = !DILocation(line: 1024, column: 8, scope: !6503)
!6512 = !DILocation(line: 1023, column: 9, scope: !6503)
!6513 = !DILocation(line: 1021, column: 13, scope: !6498)
!6514 = !DILocation(line: 1025, column: 10, scope: !6503)
!6515 = !DILocation(line: 1025, column: 8, scope: !6503)
!6516 = !DILocation(line: 1025, column: 4, scope: !6503)
!6517 = !DILocation(line: 1026, column: 7, scope: !6498)
!6518 = !DILocation(line: 1027, column: 38, scope: !6460)
!6519 = !DILocation(line: 1027, column: 12, scope: !6460)
!6520 = !DILocation(line: 1027, column: 5, scope: !6460)
!6521 = !DILocation(line: 1029, column: 24, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1029, column: 24)
!6523 = !DILocation(line: 1029, column: 29, scope: !6522)
!6524 = !DILocation(line: 1029, column: 24, scope: !6455)
!6525 = !DILocation(line: 1030, column: 51, scope: !6522)
!6526 = !DILocation(line: 1030, column: 24, scope: !6522)
!6527 = !DILocation(line: 1030, column: 17, scope: !6522)
!6528 = !DILocation(line: 1031, column: 22, scope: !6313)
!6529 = !DILocation(line: 1031, column: 15, scope: !6313)
!6530 = !DILocalVariable(name: "lhs", scope: !6531, file: !3, line: 1039, type: !1669)
!6531 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 1035, column: 13)
!6532 = !DILocation(line: 1039, column: 20, scope: !6531)
!6533 = !DILocation(line: 1039, column: 45, scope: !6531)
!6534 = !DILocation(line: 1039, column: 26, scope: !6531)
!6535 = !DILocalVariable(name: "op0", scope: !6531, file: !3, line: 1040, type: !1669)
!6536 = !DILocation(line: 1040, column: 20, scope: !6531)
!6537 = !DILocation(line: 1040, column: 46, scope: !6531)
!6538 = !DILocation(line: 1040, column: 26, scope: !6531)
!6539 = !DILocation(line: 1043, column: 19, scope: !6540)
!6540 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 1043, column: 19)
!6541 = !DILocation(line: 1043, column: 35, scope: !6540)
!6542 = !DILocation(line: 1043, column: 19, scope: !6531)
!6543 = !DILocalVariable(name: "val", scope: !6544, file: !3, line: 1045, type: !2966)
!6544 = distinct !DILexicalBlock(scope: !6540, file: !3, line: 1044, column: 17)
!6545 = !DILocation(line: 1045, column: 33, scope: !6544)
!6546 = !DILocation(line: 1045, column: 50, scope: !6544)
!6547 = !DILocation(line: 1045, column: 39, scope: !6544)
!6548 = !DILocation(line: 1046, column: 23, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6544, file: !3, line: 1046, column: 23)
!6550 = !DILocation(line: 1046, column: 28, scope: !6549)
!6551 = !DILocation(line: 1046, column: 40, scope: !6549)
!6552 = !DILocation(line: 1046, column: 23, scope: !6544)
!6553 = !DILocation(line: 1047, column: 38, scope: !6549)
!6554 = !DILocation(line: 1047, column: 27, scope: !6549)
!6555 = !DILocation(line: 1047, column: 44, scope: !6549)
!6556 = !DILocation(line: 1047, column: 25, scope: !6549)
!6557 = !DILocation(line: 1047, column: 21, scope: !6549)
!6558 = !DILocation(line: 1048, column: 17, scope: !6544)
!6559 = !DILocation(line: 1055, column: 12, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 1055, column: 12)
!6561 = !DILocation(line: 1056, column: 5, scope: !6560)
!6562 = !DILocation(line: 1056, column: 8, scope: !6560)
!6563 = !DILocation(line: 1057, column: 5, scope: !6560)
!6564 = !DILocation(line: 1057, column: 8, scope: !6560)
!6565 = !DILocation(line: 1062, column: 5, scope: !6560)
!6566 = !DILocation(line: 1062, column: 9, scope: !6560)
!6567 = !DILocation(line: 1063, column: 12, scope: !6560)
!6568 = !DILocation(line: 1063, column: 9, scope: !6560)
!6569 = !DILocation(line: 1055, column: 12, scope: !6531)
!6570 = !DILocalVariable(name: "tem", scope: !6571, file: !3, line: 1065, type: !1669)
!6571 = distinct !DILexicalBlock(scope: !6560, file: !3, line: 1064, column: 3)
!6572 = !DILocation(line: 1065, column: 10, scope: !6571)
!6573 = !DILocation(line: 1067, column: 37, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 1067, column: 9)
!6575 = !DILocation(line: 1068, column: 9, scope: !6574)
!6576 = !DILocation(line: 1067, column: 10, scope: !6574)
!6577 = !DILocation(line: 1069, column: 9, scope: !6574)
!6578 = !DILocation(line: 1070, column: 8, scope: !6574)
!6579 = !DILocation(line: 1071, column: 8, scope: !6574)
!6580 = !DILocation(line: 1071, column: 13, scope: !6574)
!6581 = !DILocation(line: 1071, column: 32, scope: !6574)
!6582 = !DILocation(line: 1069, column: 20, scope: !6574)
!6583 = !DILocation(line: 1069, column: 18, scope: !6574)
!6584 = !DILocation(line: 1072, column: 6, scope: !6574)
!6585 = !DILocation(line: 1067, column: 9, scope: !6571)
!6586 = !DILocation(line: 1073, column: 14, scope: !6574)
!6587 = !DILocation(line: 1073, column: 7, scope: !6574)
!6588 = !DILocation(line: 1074, column: 12, scope: !6571)
!6589 = !DILocation(line: 1074, column: 5, scope: !6571)
!6590 = !DILocation(line: 1078, column: 35, scope: !6531)
!6591 = !DILocation(line: 1078, column: 40, scope: !6531)
!6592 = !DILocation(line: 1079, column: 25, scope: !6531)
!6593 = !DILocation(line: 1079, column: 7, scope: !6531)
!6594 = !DILocation(line: 1079, column: 32, scope: !6531)
!6595 = !DILocation(line: 1078, column: 3, scope: !6531)
!6596 = !DILocation(line: 1077, column: 15, scope: !6531)
!6597 = !DILocalVariable(name: "op0", scope: !6598, file: !3, line: 1085, type: !1669)
!6598 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 1083, column: 13)
!6599 = !DILocation(line: 1085, column: 20, scope: !6598)
!6600 = !DILocation(line: 1085, column: 46, scope: !6598)
!6601 = !DILocation(line: 1085, column: 26, scope: !6598)
!6602 = !DILocalVariable(name: "op1", scope: !6598, file: !3, line: 1086, type: !1669)
!6603 = !DILocation(line: 1086, column: 20, scope: !6598)
!6604 = !DILocation(line: 1086, column: 46, scope: !6598)
!6605 = !DILocation(line: 1086, column: 26, scope: !6598)
!6606 = !DILocation(line: 1089, column: 19, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 1089, column: 19)
!6608 = !DILocation(line: 1089, column: 35, scope: !6607)
!6609 = !DILocation(line: 1089, column: 19, scope: !6598)
!6610 = !DILocalVariable(name: "val", scope: !6611, file: !3, line: 1091, type: !2966)
!6611 = distinct !DILexicalBlock(scope: !6607, file: !3, line: 1090, column: 17)
!6612 = !DILocation(line: 1091, column: 33, scope: !6611)
!6613 = !DILocation(line: 1091, column: 50, scope: !6611)
!6614 = !DILocation(line: 1091, column: 39, scope: !6611)
!6615 = !DILocation(line: 1092, column: 23, scope: !6616)
!6616 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 1092, column: 23)
!6617 = !DILocation(line: 1092, column: 28, scope: !6616)
!6618 = !DILocation(line: 1092, column: 40, scope: !6616)
!6619 = !DILocation(line: 1092, column: 23, scope: !6611)
!6620 = !DILocation(line: 1093, column: 27, scope: !6616)
!6621 = !DILocation(line: 1093, column: 32, scope: !6616)
!6622 = !DILocation(line: 1093, column: 25, scope: !6616)
!6623 = !DILocation(line: 1093, column: 21, scope: !6616)
!6624 = !DILocation(line: 1094, column: 17, scope: !6611)
!6625 = !DILocation(line: 1096, column: 19, scope: !6626)
!6626 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 1096, column: 19)
!6627 = !DILocation(line: 1096, column: 35, scope: !6626)
!6628 = !DILocation(line: 1096, column: 19, scope: !6598)
!6629 = !DILocalVariable(name: "val", scope: !6630, file: !3, line: 1098, type: !2966)
!6630 = distinct !DILexicalBlock(scope: !6626, file: !3, line: 1097, column: 17)
!6631 = !DILocation(line: 1098, column: 33, scope: !6630)
!6632 = !DILocation(line: 1098, column: 50, scope: !6630)
!6633 = !DILocation(line: 1098, column: 39, scope: !6630)
!6634 = !DILocation(line: 1099, column: 23, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 1099, column: 23)
!6636 = !DILocation(line: 1099, column: 28, scope: !6635)
!6637 = !DILocation(line: 1099, column: 40, scope: !6635)
!6638 = !DILocation(line: 1099, column: 23, scope: !6630)
!6639 = !DILocation(line: 1100, column: 27, scope: !6635)
!6640 = !DILocation(line: 1100, column: 32, scope: !6635)
!6641 = !DILocation(line: 1100, column: 25, scope: !6635)
!6642 = !DILocation(line: 1100, column: 21, scope: !6635)
!6643 = !DILocation(line: 1101, column: 17, scope: !6630)
!6644 = !DILocation(line: 1104, column: 36, scope: !6645)
!6645 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 1104, column: 12)
!6646 = !DILocation(line: 1104, column: 12, scope: !6645)
!6647 = !DILocation(line: 1104, column: 42, scope: !6645)
!6648 = !DILocation(line: 1105, column: 5, scope: !6645)
!6649 = !DILocation(line: 1105, column: 8, scope: !6645)
!6650 = !DILocation(line: 1105, column: 24, scope: !6645)
!6651 = !DILocation(line: 1106, column: 5, scope: !6645)
!6652 = !DILocation(line: 1106, column: 8, scope: !6645)
!6653 = !DILocation(line: 1106, column: 24, scope: !6645)
!6654 = !DILocation(line: 1104, column: 12, scope: !6598)
!6655 = !DILocalVariable(name: "tem", scope: !6656, file: !3, line: 1108, type: !1669)
!6656 = distinct !DILexicalBlock(scope: !6645, file: !3, line: 1107, column: 3)
!6657 = !DILocation(line: 1108, column: 10, scope: !6656)
!6658 = !DILocation(line: 1109, column: 8, scope: !6656)
!6659 = !DILocation(line: 1109, column: 13, scope: !6656)
!6660 = !DILocation(line: 1109, column: 18, scope: !6656)
!6661 = !DILocation(line: 1109, column: 23, scope: !6656)
!6662 = !DILocation(line: 1108, column: 16, scope: !6656)
!6663 = !DILocation(line: 1110, column: 9, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6656, file: !3, line: 1110, column: 9)
!6665 = !DILocation(line: 1110, column: 13, scope: !6664)
!6666 = !DILocation(line: 1110, column: 9, scope: !6656)
!6667 = !DILocation(line: 1111, column: 14, scope: !6664)
!6668 = !DILocation(line: 1111, column: 7, scope: !6664)
!6669 = !DILocation(line: 1112, column: 3, scope: !6656)
!6670 = !DILocation(line: 1114, column: 39, scope: !6598)
!6671 = !DILocation(line: 1114, column: 44, scope: !6598)
!6672 = !DILocation(line: 1115, column: 25, scope: !6598)
!6673 = !DILocation(line: 1115, column: 7, scope: !6598)
!6674 = !DILocation(line: 1115, column: 32, scope: !6598)
!6675 = !DILocation(line: 1115, column: 37, scope: !6598)
!6676 = !DILocation(line: 1114, column: 22, scope: !6598)
!6677 = !DILocation(line: 1114, column: 15, scope: !6598)
!6678 = !DILocation(line: 1119, column: 13, scope: !6314)
!6679 = !DILocation(line: 1120, column: 11, scope: !6314)
!6680 = !DILocation(line: 1122, column: 7, scope: !6305)
!6681 = !DILocalVariable(name: "fn", scope: !6682, file: !3, line: 1126, type: !1669)
!6682 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 1125, column: 7)
!6683 = !DILocation(line: 1126, column: 7, scope: !6682)
!6684 = !DILocation(line: 1126, column: 28, scope: !6682)
!6685 = !DILocation(line: 1126, column: 12, scope: !6682)
!6686 = !DILocalVariable(name: "val", scope: !6682, file: !3, line: 1127, type: !2966)
!6687 = !DILocation(line: 1127, column: 16, scope: !6682)
!6688 = !DILocation(line: 1129, column: 6, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 1129, column: 6)
!6690 = !DILocation(line: 1129, column: 21, scope: !6689)
!6691 = !DILocation(line: 1129, column: 6, scope: !6682)
!6692 = !DILocation(line: 1131, column: 23, scope: !6693)
!6693 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 1130, column: 4)
!6694 = !DILocation(line: 1131, column: 12, scope: !6693)
!6695 = !DILocation(line: 1131, column: 10, scope: !6693)
!6696 = !DILocation(line: 1132, column: 10, scope: !6697)
!6697 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 1132, column: 10)
!6698 = !DILocation(line: 1132, column: 15, scope: !6697)
!6699 = !DILocation(line: 1132, column: 27, scope: !6697)
!6700 = !DILocation(line: 1132, column: 10, scope: !6693)
!6701 = !DILocation(line: 1133, column: 13, scope: !6697)
!6702 = !DILocation(line: 1133, column: 18, scope: !6697)
!6703 = !DILocation(line: 1133, column: 11, scope: !6697)
!6704 = !DILocation(line: 1133, column: 8, scope: !6697)
!6705 = !DILocation(line: 1134, column: 4, scope: !6693)
!6706 = !DILocation(line: 1135, column: 6, scope: !6707)
!6707 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 1135, column: 6)
!6708 = !DILocation(line: 1135, column: 21, scope: !6707)
!6709 = !DILocation(line: 1136, column: 6, scope: !6707)
!6710 = !DILocation(line: 1136, column: 9, scope: !6707)
!6711 = !DILocation(line: 1136, column: 42, scope: !6707)
!6712 = !DILocation(line: 1137, column: 6, scope: !6707)
!6713 = !DILocation(line: 1137, column: 9, scope: !6707)
!6714 = !DILocation(line: 1135, column: 6, scope: !6682)
!6715 = !DILocalVariable(name: "args", scope: !6716, file: !3, line: 1139, type: !1993)
!6716 = distinct !DILexicalBlock(scope: !6707, file: !3, line: 1138, column: 4)
!6717 = !DILocation(line: 1139, column: 12, scope: !6716)
!6718 = !DILocation(line: 1139, column: 19, scope: !6716)
!6719 = !DILocalVariable(name: "call", scope: !6716, file: !3, line: 1140, type: !1669)
!6720 = !DILocation(line: 1140, column: 11, scope: !6716)
!6721 = !DILocalVariable(name: "retval", scope: !6716, file: !3, line: 1140, type: !1669)
!6722 = !DILocation(line: 1140, column: 17, scope: !6716)
!6723 = !DILocalVariable(name: "i", scope: !6716, file: !3, line: 1141, type: !7)
!6724 = !DILocation(line: 1141, column: 15, scope: !6716)
!6725 = !DILocation(line: 1142, column: 13, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6716, file: !3, line: 1142, column: 6)
!6727 = !DILocation(line: 1142, column: 11, scope: !6726)
!6728 = !DILocation(line: 1142, column: 18, scope: !6729)
!6729 = distinct !DILexicalBlock(scope: !6726, file: !3, line: 1142, column: 6)
!6730 = !DILocation(line: 1142, column: 44, scope: !6729)
!6731 = !DILocation(line: 1142, column: 22, scope: !6729)
!6732 = !DILocation(line: 1142, column: 20, scope: !6729)
!6733 = !DILocation(line: 1142, column: 6, scope: !6726)
!6734 = !DILocation(line: 1144, column: 30, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6729, file: !3, line: 1143, column: 8)
!6736 = !DILocation(line: 1144, column: 36, scope: !6735)
!6737 = !DILocation(line: 1144, column: 13, scope: !6735)
!6738 = !DILocation(line: 1144, column: 3, scope: !6735)
!6739 = !DILocation(line: 1144, column: 8, scope: !6735)
!6740 = !DILocation(line: 1144, column: 11, scope: !6735)
!6741 = !DILocation(line: 1145, column: 7, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 1145, column: 7)
!6743 = !DILocation(line: 1145, column: 27, scope: !6742)
!6744 = !DILocation(line: 1145, column: 7, scope: !6735)
!6745 = !DILocation(line: 1147, column: 24, scope: !6746)
!6746 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 1146, column: 5)
!6747 = !DILocation(line: 1147, column: 29, scope: !6746)
!6748 = !DILocation(line: 1147, column: 13, scope: !6746)
!6749 = !DILocation(line: 1147, column: 11, scope: !6746)
!6750 = !DILocation(line: 1148, column: 11, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 1148, column: 11)
!6752 = !DILocation(line: 1148, column: 16, scope: !6751)
!6753 = !DILocation(line: 1148, column: 28, scope: !6751)
!6754 = !DILocation(line: 1148, column: 11, scope: !6746)
!6755 = !DILocation(line: 1149, column: 19, scope: !6751)
!6756 = !DILocation(line: 1149, column: 24, scope: !6751)
!6757 = !DILocation(line: 1149, column: 9, scope: !6751)
!6758 = !DILocation(line: 1149, column: 14, scope: !6751)
!6759 = !DILocation(line: 1149, column: 17, scope: !6751)
!6760 = !DILocation(line: 1150, column: 5, scope: !6746)
!6761 = !DILocation(line: 1151, column: 8, scope: !6735)
!6762 = !DILocation(line: 1142, column: 51, scope: !6729)
!6763 = !DILocation(line: 1142, column: 6, scope: !6729)
!6764 = distinct !{!6764, !6733, !6765}
!6765 = !DILocation(line: 1151, column: 8, scope: !6726)
!6766 = !DILocation(line: 1152, column: 35, scope: !6716)
!6767 = !DILocation(line: 1153, column: 32, scope: !6716)
!6768 = !DILocation(line: 1153, column: 7, scope: !6716)
!6769 = !DILocation(line: 1154, column: 7, scope: !6716)
!6770 = !DILocation(line: 1154, column: 33, scope: !6716)
!6771 = !DILocation(line: 1154, column: 11, scope: !6716)
!6772 = !DILocation(line: 1154, column: 40, scope: !6716)
!6773 = !DILocation(line: 1152, column: 13, scope: !6716)
!6774 = !DILocation(line: 1152, column: 11, scope: !6716)
!6775 = !DILocation(line: 1155, column: 31, scope: !6716)
!6776 = !DILocation(line: 1155, column: 53, scope: !6716)
!6777 = !DILocation(line: 1155, column: 15, scope: !6716)
!6778 = !DILocation(line: 1155, column: 13, scope: !6716)
!6779 = !DILocation(line: 1156, column: 10, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6716, file: !3, line: 1156, column: 10)
!6781 = !DILocation(line: 1156, column: 10, scope: !6716)
!6782 = !DILocation(line: 1158, column: 8, scope: !6780)
!6783 = !DILocation(line: 1159, column: 13, scope: !6716)
!6784 = !DILocation(line: 1159, column: 6, scope: !6716)
!6785 = !DILocation(line: 1161, column: 2, scope: !6682)
!6786 = !DILocalVariable(name: "op0", scope: !6787, file: !3, line: 1167, type: !1669)
!6787 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 1165, column: 7)
!6788 = !DILocation(line: 1167, column: 14, scope: !6787)
!6789 = !DILocation(line: 1167, column: 37, scope: !6787)
!6790 = !DILocation(line: 1167, column: 20, scope: !6787)
!6791 = !DILocalVariable(name: "op1", scope: !6787, file: !3, line: 1168, type: !1669)
!6792 = !DILocation(line: 1168, column: 14, scope: !6787)
!6793 = !DILocation(line: 1168, column: 37, scope: !6787)
!6794 = !DILocation(line: 1168, column: 20, scope: !6787)
!6795 = !DILocalVariable(name: "code", scope: !6787, file: !3, line: 1169, type: !134)
!6796 = !DILocation(line: 1169, column: 24, scope: !6787)
!6797 = !DILocation(line: 1169, column: 49, scope: !6787)
!6798 = !DILocation(line: 1169, column: 31, scope: !6787)
!6799 = !DILocation(line: 1172, column: 13, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 1172, column: 13)
!6801 = !DILocation(line: 1172, column: 29, scope: !6800)
!6802 = !DILocation(line: 1172, column: 13, scope: !6787)
!6803 = !DILocalVariable(name: "val", scope: !6804, file: !3, line: 1174, type: !2966)
!6804 = distinct !DILexicalBlock(scope: !6800, file: !3, line: 1173, column: 11)
!6805 = !DILocation(line: 1174, column: 27, scope: !6804)
!6806 = !DILocation(line: 1174, column: 44, scope: !6804)
!6807 = !DILocation(line: 1174, column: 33, scope: !6804)
!6808 = !DILocation(line: 1175, column: 17, scope: !6809)
!6809 = distinct !DILexicalBlock(scope: !6804, file: !3, line: 1175, column: 17)
!6810 = !DILocation(line: 1175, column: 22, scope: !6809)
!6811 = !DILocation(line: 1175, column: 34, scope: !6809)
!6812 = !DILocation(line: 1175, column: 17, scope: !6804)
!6813 = !DILocation(line: 1176, column: 21, scope: !6809)
!6814 = !DILocation(line: 1176, column: 26, scope: !6809)
!6815 = !DILocation(line: 1176, column: 19, scope: !6809)
!6816 = !DILocation(line: 1176, column: 15, scope: !6809)
!6817 = !DILocation(line: 1177, column: 11, scope: !6804)
!6818 = !DILocation(line: 1179, column: 13, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 1179, column: 13)
!6820 = !DILocation(line: 1179, column: 29, scope: !6819)
!6821 = !DILocation(line: 1179, column: 13, scope: !6787)
!6822 = !DILocalVariable(name: "val", scope: !6823, file: !3, line: 1181, type: !2966)
!6823 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 1180, column: 11)
!6824 = !DILocation(line: 1181, column: 27, scope: !6823)
!6825 = !DILocation(line: 1181, column: 44, scope: !6823)
!6826 = !DILocation(line: 1181, column: 33, scope: !6823)
!6827 = !DILocation(line: 1182, column: 17, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 1182, column: 17)
!6829 = !DILocation(line: 1182, column: 22, scope: !6828)
!6830 = !DILocation(line: 1182, column: 34, scope: !6828)
!6831 = !DILocation(line: 1182, column: 17, scope: !6823)
!6832 = !DILocation(line: 1183, column: 21, scope: !6828)
!6833 = !DILocation(line: 1183, column: 26, scope: !6828)
!6834 = !DILocation(line: 1183, column: 19, scope: !6828)
!6835 = !DILocation(line: 1183, column: 15, scope: !6828)
!6836 = !DILocation(line: 1184, column: 11, scope: !6823)
!6837 = !DILocation(line: 1186, column: 33, scope: !6787)
!6838 = !DILocation(line: 1186, column: 38, scope: !6787)
!6839 = !DILocation(line: 1186, column: 44, scope: !6787)
!6840 = !DILocation(line: 1186, column: 63, scope: !6787)
!6841 = !DILocation(line: 1186, column: 68, scope: !6787)
!6842 = !DILocation(line: 1186, column: 16, scope: !6787)
!6843 = !DILocation(line: 1186, column: 9, scope: !6787)
!6844 = !DILocalVariable(name: "rhs", scope: !6845, file: !3, line: 1191, type: !1669)
!6845 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 1190, column: 7)
!6846 = !DILocation(line: 1191, column: 14, scope: !6845)
!6847 = !DILocation(line: 1191, column: 41, scope: !6845)
!6848 = !DILocation(line: 1191, column: 20, scope: !6845)
!6849 = !DILocation(line: 1193, column: 13, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 1193, column: 13)
!6851 = !DILocation(line: 1193, column: 29, scope: !6850)
!6852 = !DILocation(line: 1193, column: 13, scope: !6845)
!6853 = !DILocation(line: 1197, column: 31, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 1194, column: 11)
!6855 = !DILocation(line: 1197, column: 20, scope: !6854)
!6856 = !DILocation(line: 1197, column: 37, scope: !6854)
!6857 = !DILocation(line: 1197, column: 13, scope: !6854)
!6858 = !DILocation(line: 1200, column: 16, scope: !6845)
!6859 = !DILocation(line: 1200, column: 9, scope: !6845)
!6860 = !DILocation(line: 1204, column: 7, scope: !6305)
!6861 = !DILocation(line: 1205, column: 5, scope: !6305)
!6862 = !DILocation(line: 1207, column: 5, scope: !6291)
!6863 = !DILocation(line: 1209, column: 1, scope: !6291)
!6864 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !743, file: !743, line: 1686, type: !6865, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6865 = !DISubroutineType(types: !6866)
!6866 = !{!840, !134}
!6867 = !DILocalVariable(name: "code", arg: 1, scope: !6864, file: !743, line: 1686, type: !134)
!6868 = !DILocation(line: 1686, column: 38, scope: !6864)
!6869 = !DILocation(line: 1688, column: 63, scope: !6864)
!6870 = !DILocation(line: 1688, column: 34, scope: !6864)
!6871 = !DILocation(line: 1688, column: 10, scope: !6864)
!6872 = !DILocation(line: 1688, column: 3, scope: !6864)
!6873 = distinct !DISubprogram(name: "gimple_switch_index", scope: !743, file: !743, line: 3180, type: !4408, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6874 = !DILocalVariable(name: "gs", arg: 1, scope: !6873, file: !743, line: 3180, type: !4380)
!6875 = !DILocation(line: 3180, column: 35, scope: !6873)
!6876 = !DILocation(line: 3183, column: 21, scope: !6873)
!6877 = !DILocation(line: 3183, column: 10, scope: !6873)
!6878 = !DILocation(line: 3183, column: 3, scope: !6873)
!6879 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !743, file: !743, line: 2210, type: !4660, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6880 = !DILocalVariable(name: "stmt", arg: 1, scope: !6879, file: !743, line: 2210, type: !1959)
!6881 = !DILocation(line: 2210, column: 24, scope: !6879)
!6882 = !DILocation(line: 2212, column: 29, scope: !6879)
!6883 = !DILocation(line: 2212, column: 11, scope: !6879)
!6884 = !DILocation(line: 2213, column: 4, scope: !6879)
!6885 = !DILocation(line: 2213, column: 24, scope: !6879)
!6886 = !DILocation(line: 2213, column: 8, scope: !6879)
!6887 = !DILocation(line: 2214, column: 8, scope: !6879)
!6888 = !DILocation(line: 2214, column: 28, scope: !6879)
!6889 = !DILocation(line: 2214, column: 11, scope: !6879)
!6890 = !DILocation(line: 2214, column: 34, scope: !6879)
!6891 = !DILocation(line: 0, scope: !6879)
!6892 = !DILocation(line: 2212, column: 10, scope: !6879)
!6893 = !DILocation(line: 2212, column: 3, scope: !6879)
!6894 = distinct !DISubprogram(name: "gimple_num_ops", scope: !743, file: !743, line: 1596, type: !6895, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6895 = !DISubroutineType(types: !6896)
!6896 = !{!7, !4380}
!6897 = !DILocalVariable(name: "gs", arg: 1, scope: !6894, file: !743, line: 1596, type: !4380)
!6898 = !DILocation(line: 1596, column: 30, scope: !6894)
!6899 = !DILocation(line: 1598, column: 10, scope: !6894)
!6900 = !DILocation(line: 1598, column: 14, scope: !6894)
!6901 = !DILocation(line: 1598, column: 21, scope: !6894)
!6902 = !DILocation(line: 1598, column: 3, scope: !6894)
!6903 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !743, file: !743, line: 1499, type: !4660, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6904 = !DILocalVariable(name: "stmt", arg: 1, scope: !6903, file: !743, line: 1499, type: !1959)
!6905 = !DILocation(line: 1499, column: 36, scope: !6903)
!6906 = !DILocation(line: 1501, column: 30, scope: !6903)
!6907 = !DILocation(line: 1501, column: 10, scope: !6903)
!6908 = !DILocation(line: 1501, column: 36, scope: !6903)
!6909 = !DILocation(line: 1501, column: 52, scope: !6903)
!6910 = !DILocation(line: 1501, column: 39, scope: !6903)
!6911 = !DILocation(line: 0, scope: !6903)
!6912 = !DILocation(line: 1501, column: 3, scope: !6903)
!6913 = distinct !DISubprogram(name: "gimple_location", scope: !743, file: !743, line: 1139, type: !6914, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6914 = !DISubroutineType(types: !6915)
!6915 = !{!1756, !4380}
!6916 = !DILocalVariable(name: "g", arg: 1, scope: !6913, file: !743, line: 1139, type: !4380)
!6917 = !DILocation(line: 1139, column: 31, scope: !6913)
!6918 = !DILocation(line: 1141, column: 10, scope: !6913)
!6919 = !DILocation(line: 1141, column: 13, scope: !6913)
!6920 = !DILocation(line: 1141, column: 20, scope: !6913)
!6921 = !DILocation(line: 1141, column: 3, scope: !6913)
!6922 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !743, file: !743, line: 1694, type: !4408, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6923 = !DILocalVariable(name: "gs", arg: 1, scope: !6922, file: !743, line: 1694, type: !4380)
!6924 = !DILocation(line: 1694, column: 33, scope: !6922)
!6925 = !DILocation(line: 1697, column: 21, scope: !6922)
!6926 = !DILocation(line: 1697, column: 10, scope: !6922)
!6927 = !DILocation(line: 1697, column: 3, scope: !6922)
!6928 = distinct !DISubprogram(name: "gimple_expr_type", scope: !743, file: !743, line: 4366, type: !4408, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6929 = !DILocalVariable(name: "stmt", arg: 1, scope: !6928, file: !743, line: 4366, type: !4380)
!6930 = !DILocation(line: 4366, column: 32, scope: !6928)
!6931 = !DILocalVariable(name: "code", scope: !6928, file: !743, line: 4368, type: !742)
!6932 = !DILocation(line: 4368, column: 20, scope: !6928)
!6933 = !DILocation(line: 4368, column: 40, scope: !6928)
!6934 = !DILocation(line: 4368, column: 27, scope: !6928)
!6935 = !DILocation(line: 4370, column: 7, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6928, file: !743, line: 4370, column: 7)
!6937 = !DILocation(line: 4370, column: 12, scope: !6936)
!6938 = !DILocation(line: 4370, column: 29, scope: !6936)
!6939 = !DILocation(line: 4370, column: 32, scope: !6936)
!6940 = !DILocation(line: 4370, column: 37, scope: !6936)
!6941 = !DILocation(line: 4370, column: 7, scope: !6928)
!6942 = !DILocalVariable(name: "type", scope: !6943, file: !743, line: 4372, type: !1669)
!6943 = distinct !DILexicalBlock(scope: !6936, file: !743, line: 4371, column: 5)
!6944 = !DILocation(line: 4372, column: 12, scope: !6943)
!6945 = !DILocation(line: 4377, column: 11, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6943, file: !743, line: 4377, column: 11)
!6947 = !DILocation(line: 4377, column: 16, scope: !6946)
!6948 = !DILocation(line: 4377, column: 11, scope: !6943)
!6949 = !DILocation(line: 4378, column: 34, scope: !6946)
!6950 = !DILocation(line: 4378, column: 9, scope: !6946)
!6951 = !DILocation(line: 4378, column: 7, scope: !6946)
!6952 = !DILocation(line: 4378, column: 2, scope: !6946)
!6953 = !DILocation(line: 4380, column: 34, scope: !6946)
!6954 = !DILocation(line: 4380, column: 10, scope: !6946)
!6955 = !DILocation(line: 4380, column: 2, scope: !6946)
!6956 = !DILocation(line: 4383, column: 13, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6946, file: !743, line: 4381, column: 4)
!6958 = !DILocation(line: 4383, column: 11, scope: !6957)
!6959 = !DILocation(line: 4384, column: 6, scope: !6957)
!6960 = !DILocation(line: 4388, column: 13, scope: !6957)
!6961 = !DILocation(line: 4388, column: 11, scope: !6957)
!6962 = !DILocation(line: 4389, column: 6, scope: !6957)
!6963 = !DILocation(line: 4391, column: 14, scope: !6943)
!6964 = !DILocation(line: 4391, column: 7, scope: !6943)
!6965 = !DILocation(line: 4393, column: 12, scope: !6966)
!6966 = distinct !DILexicalBlock(scope: !6936, file: !743, line: 4393, column: 12)
!6967 = !DILocation(line: 4393, column: 17, scope: !6966)
!6968 = !DILocation(line: 4393, column: 12, scope: !6936)
!6969 = !DILocation(line: 4394, column: 12, scope: !6966)
!6970 = !DILocation(line: 4394, column: 5, scope: !6966)
!6971 = !DILocation(line: 4396, column: 12, scope: !6966)
!6972 = !DILocation(line: 4396, column: 5, scope: !6966)
!6973 = !DILocation(line: 4397, column: 1, scope: !6928)
!6974 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !743, file: !743, line: 2013, type: !6895, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6975 = !DILocalVariable(name: "gs", arg: 1, scope: !6974, file: !743, line: 2013, type: !4380)
!6976 = !DILocation(line: 2013, column: 36, scope: !6974)
!6977 = !DILocalVariable(name: "num_ops", scope: !6974, file: !743, line: 2015, type: !7)
!6978 = !DILocation(line: 2015, column: 12, scope: !6974)
!6979 = !DILocation(line: 2017, column: 29, scope: !6974)
!6980 = !DILocation(line: 2017, column: 13, scope: !6974)
!6981 = !DILocation(line: 2017, column: 11, scope: !6974)
!6982 = !DILocation(line: 2018, column: 10, scope: !6974)
!6983 = !DILocation(line: 2018, column: 18, scope: !6974)
!6984 = !DILocation(line: 2018, column: 3, scope: !6974)
!6985 = distinct !DISubprogram(name: "gimple_call_arg", scope: !743, file: !743, line: 2025, type: !5021, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6986 = !DILocalVariable(name: "gs", arg: 1, scope: !6985, file: !743, line: 2025, type: !4380)
!6987 = !DILocation(line: 2025, column: 31, scope: !6985)
!6988 = !DILocalVariable(name: "index", arg: 2, scope: !6985, file: !743, line: 2025, type: !7)
!6989 = !DILocation(line: 2025, column: 44, scope: !6985)
!6990 = !DILocation(line: 2028, column: 21, scope: !6985)
!6991 = !DILocation(line: 2028, column: 25, scope: !6985)
!6992 = !DILocation(line: 2028, column: 31, scope: !6985)
!6993 = !DILocation(line: 2028, column: 10, scope: !6985)
!6994 = !DILocation(line: 2028, column: 3, scope: !6985)
!6995 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !743, file: !743, line: 1966, type: !4408, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!6996 = !DILocalVariable(name: "gs", arg: 1, scope: !6995, file: !743, line: 1966, type: !4380)
!6997 = !DILocation(line: 1966, column: 39, scope: !6995)
!6998 = !DILocalVariable(name: "fn", scope: !6995, file: !743, line: 1968, type: !1669)
!6999 = !DILocation(line: 1968, column: 8, scope: !6995)
!7000 = !DILocation(line: 1968, column: 29, scope: !6995)
!7001 = !DILocation(line: 1968, column: 13, scope: !6995)
!7002 = !DILocalVariable(name: "type", scope: !6995, file: !743, line: 1969, type: !1669)
!7003 = !DILocation(line: 1969, column: 8, scope: !6995)
!7004 = !DILocation(line: 1969, column: 15, scope: !6995)
!7005 = !DILocation(line: 1972, column: 10, scope: !6995)
!7006 = !DILocation(line: 1972, column: 8, scope: !6995)
!7007 = !DILocation(line: 1976, column: 10, scope: !6995)
!7008 = !DILocation(line: 1976, column: 3, scope: !6995)
!7009 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !743, file: !743, line: 2241, type: !4408, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7010 = !DILocalVariable(name: "gs", arg: 1, scope: !7009, file: !743, line: 2241, type: !4380)
!7011 = !DILocation(line: 2241, column: 31, scope: !7009)
!7012 = !DILocation(line: 2244, column: 21, scope: !7009)
!7013 = !DILocation(line: 2244, column: 10, scope: !7009)
!7014 = !DILocation(line: 2244, column: 3, scope: !7009)
!7015 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !743, file: !743, line: 2271, type: !4408, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7016 = !DILocalVariable(name: "gs", arg: 1, scope: !7015, file: !743, line: 2271, type: !4380)
!7017 = !DILocation(line: 2271, column: 31, scope: !7015)
!7018 = !DILocation(line: 2274, column: 21, scope: !7015)
!7019 = !DILocation(line: 2274, column: 10, scope: !7015)
!7020 = !DILocation(line: 2274, column: 3, scope: !7015)
!7021 = distinct !DISubprogram(name: "gimple_cond_code", scope: !743, file: !743, line: 2221, type: !4388, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7022 = !DILocalVariable(name: "gs", arg: 1, scope: !7021, file: !743, line: 2221, type: !4380)
!7023 = !DILocation(line: 2221, column: 32, scope: !7021)
!7024 = !DILocation(line: 2224, column: 27, scope: !7021)
!7025 = !DILocation(line: 2224, column: 31, scope: !7021)
!7026 = !DILocation(line: 2224, column: 38, scope: !7021)
!7027 = !DILocation(line: 2224, column: 3, scope: !7021)
!7028 = distinct !DISubprogram(name: "gimple_bb", scope: !743, file: !743, line: 1112, type: !7029, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7029 = !DISubroutineType(types: !7030)
!7030 = !{!1923, !4380}
!7031 = !DILocalVariable(name: "g", arg: 1, scope: !7028, file: !743, line: 1112, type: !4380)
!7032 = !DILocation(line: 1112, column: 25, scope: !7028)
!7033 = !DILocation(line: 1114, column: 10, scope: !7028)
!7034 = !DILocation(line: 1114, column: 13, scope: !7028)
!7035 = !DILocation(line: 1114, column: 20, scope: !7028)
!7036 = !DILocation(line: 1114, column: 3, scope: !7028)
!7037 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !743, file: !743, line: 3061, type: !6895, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7038 = !DILocalVariable(name: "gs", arg: 1, scope: !7037, file: !743, line: 3061, type: !4380)
!7039 = !DILocation(line: 3061, column: 35, scope: !7037)
!7040 = !DILocation(line: 3064, column: 10, scope: !7037)
!7041 = !DILocation(line: 3064, column: 14, scope: !7037)
!7042 = !DILocation(line: 3064, column: 25, scope: !7037)
!7043 = !DILocation(line: 3064, column: 3, scope: !7037)
!7044 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !3178, file: !3178, line: 467, type: !7045, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7045 = !DISubroutineType(types: !7046)
!7046 = !{!1939, !1959, !2104}
!7047 = !DILocalVariable(name: "gs", arg: 1, scope: !7044, file: !3178, line: 467, type: !1959)
!7048 = !DILocation(line: 467, column: 29, scope: !7044)
!7049 = !DILocalVariable(name: "i", arg: 2, scope: !7044, file: !3178, line: 467, type: !2104)
!7050 = !DILocation(line: 467, column: 40, scope: !7044)
!7051 = !DILocation(line: 469, column: 10, scope: !7044)
!7052 = !DILocation(line: 469, column: 3, scope: !7044)
!7053 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !743, file: !743, line: 3100, type: !7054, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7054 = !DISubroutineType(types: !7055)
!7055 = !{!7056, !1959, !7}
!7056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2062, size: 64)
!7057 = !DILocalVariable(name: "gs", arg: 1, scope: !7053, file: !743, line: 3100, type: !1959)
!7058 = !DILocation(line: 3100, column: 24, scope: !7053)
!7059 = !DILocalVariable(name: "index", arg: 2, scope: !7053, file: !743, line: 3100, type: !7)
!7060 = !DILocation(line: 3100, column: 37, scope: !7053)
!7061 = !DILocation(line: 3103, column: 3, scope: !7053)
!7062 = !DILocation(line: 3104, column: 12, scope: !7053)
!7063 = !DILocation(line: 3104, column: 16, scope: !7053)
!7064 = !DILocation(line: 3104, column: 27, scope: !7053)
!7065 = !DILocation(line: 3104, column: 32, scope: !7053)
!7066 = !DILocation(line: 3104, column: 3, scope: !7053)
!7067 = distinct !DISubprogram(name: "ccp_lattice_meet", scope: !3, file: !3, line: 749, type: !7068, scopeLine: 750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7068 = !DISubroutineType(types: !7069)
!7069 = !{null, !2966, !2966}
!7070 = !DILocalVariable(name: "val1", arg: 1, scope: !7067, file: !3, line: 749, type: !2966)
!7071 = !DILocation(line: 749, column: 33, scope: !7067)
!7072 = !DILocalVariable(name: "val2", arg: 2, scope: !7067, file: !3, line: 749, type: !2966)
!7073 = !DILocation(line: 749, column: 53, scope: !7067)
!7074 = !DILocation(line: 751, column: 7, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 751, column: 7)
!7076 = !DILocation(line: 751, column: 13, scope: !7075)
!7077 = !DILocation(line: 751, column: 25, scope: !7075)
!7078 = !DILocation(line: 751, column: 7, scope: !7067)
!7079 = !DILocation(line: 754, column: 8, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 752, column: 5)
!7081 = !DILocation(line: 754, column: 16, scope: !7080)
!7082 = !DILocation(line: 754, column: 15, scope: !7080)
!7083 = !DILocation(line: 755, column: 5, scope: !7080)
!7084 = !DILocation(line: 756, column: 12, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 756, column: 12)
!7086 = !DILocation(line: 756, column: 18, scope: !7085)
!7087 = !DILocation(line: 756, column: 30, scope: !7085)
!7088 = !DILocation(line: 756, column: 12, scope: !7075)
!7089 = !DILocation(line: 761, column: 5, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 757, column: 5)
!7091 = !DILocation(line: 762, column: 12, scope: !7092)
!7092 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 762, column: 12)
!7093 = !DILocation(line: 762, column: 18, scope: !7092)
!7094 = !DILocation(line: 762, column: 30, scope: !7092)
!7095 = !DILocation(line: 763, column: 12, scope: !7092)
!7096 = !DILocation(line: 763, column: 15, scope: !7092)
!7097 = !DILocation(line: 763, column: 21, scope: !7092)
!7098 = !DILocation(line: 763, column: 33, scope: !7092)
!7099 = !DILocation(line: 762, column: 12, scope: !7085)
!7100 = !DILocation(line: 766, column: 7, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7092, file: !3, line: 764, column: 5)
!7102 = !DILocation(line: 766, column: 13, scope: !7101)
!7103 = !DILocation(line: 766, column: 25, scope: !7101)
!7104 = !DILocation(line: 767, column: 7, scope: !7101)
!7105 = !DILocation(line: 767, column: 13, scope: !7101)
!7106 = !DILocation(line: 767, column: 19, scope: !7101)
!7107 = !DILocation(line: 768, column: 5, scope: !7101)
!7108 = !DILocation(line: 769, column: 12, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7092, file: !3, line: 769, column: 12)
!7110 = !DILocation(line: 769, column: 18, scope: !7109)
!7111 = !DILocation(line: 769, column: 30, scope: !7109)
!7112 = !DILocation(line: 770, column: 5, scope: !7109)
!7113 = !DILocation(line: 770, column: 8, scope: !7109)
!7114 = !DILocation(line: 770, column: 14, scope: !7109)
!7115 = !DILocation(line: 770, column: 26, scope: !7109)
!7116 = !DILocation(line: 771, column: 5, scope: !7109)
!7117 = !DILocation(line: 771, column: 26, scope: !7109)
!7118 = !DILocation(line: 771, column: 32, scope: !7109)
!7119 = !DILocation(line: 771, column: 39, scope: !7109)
!7120 = !DILocation(line: 771, column: 45, scope: !7109)
!7121 = !DILocation(line: 771, column: 8, scope: !7109)
!7122 = !DILocation(line: 771, column: 52, scope: !7109)
!7123 = !DILocation(line: 769, column: 12, scope: !7092)
!7124 = !DILocation(line: 778, column: 7, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7109, file: !3, line: 772, column: 5)
!7126 = !DILocation(line: 778, column: 13, scope: !7125)
!7127 = !DILocation(line: 778, column: 25, scope: !7125)
!7128 = !DILocation(line: 779, column: 21, scope: !7125)
!7129 = !DILocation(line: 779, column: 27, scope: !7125)
!7130 = !DILocation(line: 779, column: 7, scope: !7125)
!7131 = !DILocation(line: 779, column: 13, scope: !7125)
!7132 = !DILocation(line: 779, column: 19, scope: !7125)
!7133 = !DILocation(line: 780, column: 5, scope: !7125)
!7134 = !DILocation(line: 784, column: 7, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7109, file: !3, line: 782, column: 5)
!7136 = !DILocation(line: 784, column: 13, scope: !7135)
!7137 = !DILocation(line: 784, column: 25, scope: !7135)
!7138 = !DILocation(line: 785, column: 7, scope: !7135)
!7139 = !DILocation(line: 785, column: 13, scope: !7135)
!7140 = !DILocation(line: 785, column: 19, scope: !7135)
!7141 = !DILocation(line: 787, column: 1, scope: !7067)
!7142 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !330, file: !330, line: 150, type: !7143, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7143 = !DISubroutineType(types: !7144)
!7144 = !{!1939, !7145, !7}
!7145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7146, size: 64)
!7146 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1932)
!7147 = !DILocalVariable(name: "vec_", arg: 1, scope: !7142, file: !330, line: 150, type: !7145)
!7148 = !DILocation(line: 150, column: 1, scope: !7142)
!7149 = !DILocalVariable(name: "ix_", arg: 2, scope: !7142, file: !330, line: 150, type: !7)
!7150 = !DILocation(line: 0, scope: !7142)
!7151 = distinct !DISubprogram(name: "do_dbg_cnt", scope: !3, file: !3, line: 705, type: !5086, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7152 = !DILocalVariable(name: "i", scope: !7151, file: !3, line: 707, type: !7)
!7153 = !DILocation(line: 707, column: 12, scope: !7151)
!7154 = !DILocation(line: 708, column: 10, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 708, column: 3)
!7156 = !DILocation(line: 708, column: 8, scope: !7155)
!7157 = !DILocation(line: 708, column: 15, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 708, column: 3)
!7159 = !DILocation(line: 708, column: 19, scope: !7158)
!7160 = !DILocation(line: 708, column: 17, scope: !7158)
!7161 = !DILocation(line: 708, column: 3, scope: !7155)
!7162 = !DILocation(line: 710, column: 12, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 710, column: 11)
!7164 = distinct !DILexicalBlock(scope: !7158, file: !3, line: 709, column: 5)
!7165 = !DILocation(line: 710, column: 11, scope: !7164)
!7166 = !DILocation(line: 712, column: 11, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 711, column: 9)
!7168 = !DILocation(line: 712, column: 21, scope: !7167)
!7169 = !DILocation(line: 712, column: 24, scope: !7167)
!7170 = !DILocation(line: 712, column: 36, scope: !7167)
!7171 = !DILocation(line: 713, column: 11, scope: !7167)
!7172 = !DILocation(line: 713, column: 21, scope: !7167)
!7173 = !DILocation(line: 713, column: 24, scope: !7167)
!7174 = !DILocation(line: 713, column: 30, scope: !7167)
!7175 = !DILocation(line: 714, column: 9, scope: !7167)
!7176 = !DILocation(line: 715, column: 5, scope: !7164)
!7177 = !DILocation(line: 708, column: 35, scope: !7158)
!7178 = !DILocation(line: 708, column: 3, scope: !7158)
!7179 = distinct !{!7179, !7161, !7180}
!7180 = !DILocation(line: 715, column: 5, scope: !7155)
!7181 = !DILocation(line: 716, column: 1, scope: !7151)
!7182 = distinct !DISubprogram(name: "ccp_fold_stmt", scope: !3, file: !3, line: 1486, type: !4429, scopeLine: 1487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7183 = !DILocalVariable(name: "gsi", arg: 1, scope: !7182, file: !3, line: 1486, type: !4431)
!7184 = !DILocation(line: 1486, column: 38, scope: !7182)
!7185 = !DILocalVariable(name: "stmt", scope: !7182, file: !3, line: 1488, type: !1959)
!7186 = !DILocation(line: 1488, column: 10, scope: !7182)
!7187 = !DILocation(line: 1488, column: 28, scope: !7182)
!7188 = !DILocation(line: 1488, column: 17, scope: !7182)
!7189 = !DILocation(line: 1490, column: 24, scope: !7182)
!7190 = !DILocation(line: 1490, column: 11, scope: !7182)
!7191 = !DILocation(line: 1490, column: 3, scope: !7182)
!7192 = !DILocalVariable(name: "val", scope: !7193, file: !3, line: 1494, type: !2967)
!7193 = distinct !DILexicalBlock(scope: !7194, file: !3, line: 1493, column: 7)
!7194 = distinct !DILexicalBlock(scope: !7182, file: !3, line: 1491, column: 5)
!7195 = !DILocation(line: 1494, column: 15, scope: !7193)
!7196 = !DILocation(line: 1498, column: 23, scope: !7193)
!7197 = !DILocation(line: 1498, column: 8, scope: !7193)
!7198 = !DILocation(line: 1499, column: 10, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 1499, column: 6)
!7200 = !DILocation(line: 1499, column: 22, scope: !7199)
!7201 = !DILocation(line: 1500, column: 6, scope: !7199)
!7202 = !DILocation(line: 1500, column: 9, scope: !7199)
!7203 = !DILocation(line: 1500, column: 31, scope: !7199)
!7204 = !DILocation(line: 1499, column: 6, scope: !7193)
!7205 = !DILocation(line: 1501, column: 4, scope: !7199)
!7206 = !DILocation(line: 1503, column: 25, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 1503, column: 6)
!7208 = !DILocation(line: 1503, column: 6, scope: !7207)
!7209 = !DILocation(line: 1503, column: 6, scope: !7193)
!7210 = !DILocation(line: 1504, column: 28, scope: !7207)
!7211 = !DILocation(line: 1504, column: 4, scope: !7207)
!7212 = !DILocation(line: 1506, column: 27, scope: !7207)
!7213 = !DILocation(line: 1506, column: 4, scope: !7207)
!7214 = !DILocation(line: 1508, column: 2, scope: !7193)
!7215 = !DILocalVariable(name: "lhs", scope: !7216, file: !3, line: 1513, type: !1669)
!7216 = distinct !DILexicalBlock(scope: !7194, file: !3, line: 1512, column: 7)
!7217 = !DILocation(line: 1513, column: 7, scope: !7216)
!7218 = !DILocation(line: 1513, column: 30, scope: !7216)
!7219 = !DILocation(line: 1513, column: 13, scope: !7216)
!7220 = !DILocalVariable(name: "val", scope: !7216, file: !3, line: 1514, type: !2966)
!7221 = !DILocation(line: 1514, column: 16, scope: !7216)
!7222 = !DILocalVariable(name: "argt", scope: !7216, file: !3, line: 1515, type: !1669)
!7223 = !DILocation(line: 1515, column: 7, scope: !7216)
!7224 = !DILocalVariable(name: "changed", scope: !7216, file: !3, line: 1516, type: !1748)
!7225 = !DILocation(line: 1516, column: 7, scope: !7216)
!7226 = !DILocalVariable(name: "i", scope: !7216, file: !3, line: 1517, type: !7)
!7227 = !DILocation(line: 1517, column: 11, scope: !7216)
!7228 = !DILocation(line: 1522, column: 6, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !7216, file: !3, line: 1522, column: 6)
!7230 = !DILocation(line: 1523, column: 6, scope: !7229)
!7231 = !DILocation(line: 1523, column: 9, scope: !7229)
!7232 = !DILocation(line: 1523, column: 25, scope: !7229)
!7233 = !DILocation(line: 1524, column: 6, scope: !7229)
!7234 = !DILocation(line: 1524, column: 27, scope: !7229)
!7235 = !DILocation(line: 1524, column: 16, scope: !7229)
!7236 = !DILocation(line: 1524, column: 14, scope: !7229)
!7237 = !DILocation(line: 1525, column: 6, scope: !7229)
!7238 = !DILocation(line: 1525, column: 9, scope: !7229)
!7239 = !DILocation(line: 1525, column: 14, scope: !7229)
!7240 = !DILocation(line: 1525, column: 26, scope: !7229)
!7241 = !DILocation(line: 1522, column: 6, scope: !7216)
!7242 = !DILocalVariable(name: "new_rhs", scope: !7243, file: !3, line: 1527, type: !1669)
!7243 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 1526, column: 4)
!7244 = !DILocation(line: 1527, column: 11, scope: !7243)
!7245 = !DILocation(line: 1527, column: 35, scope: !7243)
!7246 = !DILocation(line: 1527, column: 40, scope: !7243)
!7247 = !DILocation(line: 1527, column: 21, scope: !7243)
!7248 = !DILocalVariable(name: "res", scope: !7243, file: !3, line: 1528, type: !1748)
!7249 = !DILocation(line: 1528, column: 11, scope: !7243)
!7250 = !DILocation(line: 1529, column: 38, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7243, file: !3, line: 1529, column: 10)
!7252 = !DILocation(line: 1530, column: 10, scope: !7251)
!7253 = !DILocation(line: 1529, column: 11, scope: !7251)
!7254 = !DILocation(line: 1529, column: 10, scope: !7243)
!7255 = !DILocation(line: 1531, column: 18, scope: !7251)
!7256 = !DILocation(line: 1531, column: 16, scope: !7251)
!7257 = !DILocation(line: 1531, column: 8, scope: !7251)
!7258 = !DILocation(line: 1532, column: 35, scope: !7243)
!7259 = !DILocation(line: 1532, column: 40, scope: !7243)
!7260 = !DILocation(line: 1532, column: 12, scope: !7243)
!7261 = !DILocation(line: 1532, column: 10, scope: !7243)
!7262 = !DILocation(line: 1533, column: 6, scope: !7243)
!7263 = !DILocation(line: 1534, column: 6, scope: !7243)
!7264 = !DILocation(line: 1541, column: 9, scope: !7216)
!7265 = !DILocation(line: 1541, column: 7, scope: !7216)
!7266 = !DILocation(line: 1542, column: 9, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7216, file: !3, line: 1542, column: 2)
!7268 = !DILocation(line: 1542, column: 7, scope: !7267)
!7269 = !DILocation(line: 1542, column: 14, scope: !7270)
!7270 = distinct !DILexicalBlock(scope: !7267, file: !3, line: 1542, column: 2)
!7271 = !DILocation(line: 1542, column: 40, scope: !7270)
!7272 = !DILocation(line: 1542, column: 18, scope: !7270)
!7273 = !DILocation(line: 1542, column: 16, scope: !7270)
!7274 = !DILocation(line: 1542, column: 46, scope: !7270)
!7275 = !DILocation(line: 1542, column: 49, scope: !7270)
!7276 = !DILocation(line: 0, scope: !7270)
!7277 = !DILocation(line: 1542, column: 2, scope: !7267)
!7278 = !DILocalVariable(name: "arg", scope: !7279, file: !3, line: 1545, type: !1669)
!7279 = distinct !DILexicalBlock(scope: !7270, file: !3, line: 1544, column: 4)
!7280 = !DILocation(line: 1545, column: 11, scope: !7279)
!7281 = !DILocation(line: 1545, column: 34, scope: !7279)
!7282 = !DILocation(line: 1545, column: 40, scope: !7279)
!7283 = !DILocation(line: 1545, column: 17, scope: !7279)
!7284 = !DILocation(line: 1546, column: 10, scope: !7285)
!7285 = distinct !DILexicalBlock(scope: !7279, file: !3, line: 1546, column: 10)
!7286 = !DILocation(line: 1546, column: 26, scope: !7285)
!7287 = !DILocation(line: 1547, column: 3, scope: !7285)
!7288 = !DILocation(line: 1547, column: 24, scope: !7285)
!7289 = !DILocation(line: 1547, column: 13, scope: !7285)
!7290 = !DILocation(line: 1547, column: 11, scope: !7285)
!7291 = !DILocation(line: 1548, column: 3, scope: !7285)
!7292 = !DILocation(line: 1548, column: 6, scope: !7285)
!7293 = !DILocation(line: 1548, column: 11, scope: !7285)
!7294 = !DILocation(line: 1548, column: 23, scope: !7285)
!7295 = !DILocation(line: 1549, column: 3, scope: !7285)
!7296 = !DILocation(line: 1550, column: 9, scope: !7285)
!7297 = !DILocation(line: 1551, column: 9, scope: !7285)
!7298 = !DILocation(line: 1549, column: 6, scope: !7285)
!7299 = !DILocation(line: 1546, column: 10, scope: !7279)
!7300 = !DILocation(line: 1553, column: 24, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7285, file: !3, line: 1552, column: 8)
!7302 = !DILocation(line: 1553, column: 30, scope: !7301)
!7303 = !DILocation(line: 1553, column: 47, scope: !7301)
!7304 = !DILocation(line: 1553, column: 52, scope: !7301)
!7305 = !DILocation(line: 1553, column: 33, scope: !7301)
!7306 = !DILocation(line: 1553, column: 3, scope: !7301)
!7307 = !DILocation(line: 1554, column: 11, scope: !7301)
!7308 = !DILocation(line: 1555, column: 8, scope: !7301)
!7309 = !DILocation(line: 1556, column: 4, scope: !7279)
!7310 = !DILocation(line: 1543, column: 7, scope: !7270)
!7311 = !DILocation(line: 1543, column: 19, scope: !7270)
!7312 = !DILocation(line: 1543, column: 17, scope: !7270)
!7313 = !DILocation(line: 1542, column: 2, scope: !7270)
!7314 = distinct !{!7314, !7277, !7315}
!7315 = !DILocation(line: 1556, column: 4, scope: !7267)
!7316 = !DILocation(line: 1558, column: 9, scope: !7216)
!7317 = !DILocation(line: 1558, column: 2, scope: !7216)
!7318 = !DILocalVariable(name: "lhs", scope: !7319, file: !3, line: 1563, type: !1669)
!7319 = distinct !DILexicalBlock(scope: !7194, file: !3, line: 1562, column: 7)
!7320 = !DILocation(line: 1563, column: 7, scope: !7319)
!7321 = !DILocation(line: 1563, column: 32, scope: !7319)
!7322 = !DILocation(line: 1563, column: 13, scope: !7319)
!7323 = !DILocalVariable(name: "val", scope: !7319, file: !3, line: 1564, type: !2966)
!7324 = !DILocation(line: 1564, column: 16, scope: !7319)
!7325 = !DILocation(line: 1568, column: 30, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7319, file: !3, line: 1568, column: 6)
!7327 = !DILocation(line: 1568, column: 6, scope: !7326)
!7328 = !DILocation(line: 1569, column: 6, scope: !7326)
!7329 = !DILocation(line: 1569, column: 9, scope: !7326)
!7330 = !DILocation(line: 1569, column: 25, scope: !7326)
!7331 = !DILocation(line: 1570, column: 6, scope: !7326)
!7332 = !DILocation(line: 1570, column: 27, scope: !7326)
!7333 = !DILocation(line: 1570, column: 16, scope: !7326)
!7334 = !DILocation(line: 1570, column: 14, scope: !7326)
!7335 = !DILocation(line: 1571, column: 6, scope: !7326)
!7336 = !DILocation(line: 1571, column: 9, scope: !7326)
!7337 = !DILocation(line: 1571, column: 14, scope: !7326)
!7338 = !DILocation(line: 1571, column: 26, scope: !7326)
!7339 = !DILocation(line: 1568, column: 6, scope: !7319)
!7340 = !DILocalVariable(name: "rhs", scope: !7341, file: !3, line: 1573, type: !1669)
!7341 = distinct !DILexicalBlock(scope: !7326, file: !3, line: 1572, column: 4)
!7342 = !DILocation(line: 1573, column: 11, scope: !7341)
!7343 = !DILocation(line: 1573, column: 31, scope: !7341)
!7344 = !DILocation(line: 1573, column: 36, scope: !7341)
!7345 = !DILocation(line: 1573, column: 17, scope: !7341)
!7346 = !DILocation(line: 1574, column: 38, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 1574, column: 10)
!7348 = !DILocation(line: 1574, column: 55, scope: !7347)
!7349 = !DILocation(line: 1574, column: 11, scope: !7347)
!7350 = !DILocation(line: 1574, column: 10, scope: !7341)
!7351 = !DILocation(line: 1575, column: 14, scope: !7347)
!7352 = !DILocation(line: 1575, column: 12, scope: !7347)
!7353 = !DILocation(line: 1575, column: 8, scope: !7347)
!7354 = !DILocation(line: 1576, column: 39, scope: !7341)
!7355 = !DILocation(line: 1576, column: 44, scope: !7341)
!7356 = !DILocation(line: 1576, column: 6, scope: !7341)
!7357 = !DILocation(line: 1577, column: 6, scope: !7341)
!7358 = !DILocation(line: 1580, column: 2, scope: !7319)
!7359 = !DILocation(line: 1584, column: 7, scope: !7194)
!7360 = !DILocation(line: 1586, column: 1, scope: !7182)
!7361 = distinct !DISubprogram(name: "gimple_cond_make_false", scope: !743, file: !743, line: 2346, type: !7362, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7362 = !DISubroutineType(types: !7363)
!7363 = !{null, !1959}
!7364 = !DILocalVariable(name: "gs", arg: 1, scope: !7361, file: !743, line: 2346, type: !1959)
!7365 = !DILocation(line: 2346, column: 32, scope: !7361)
!7366 = !DILocation(line: 2348, column: 24, scope: !7361)
!7367 = !DILocation(line: 2348, column: 28, scope: !7361)
!7368 = !DILocation(line: 2348, column: 3, scope: !7361)
!7369 = !DILocation(line: 2349, column: 24, scope: !7361)
!7370 = !DILocation(line: 2349, column: 28, scope: !7361)
!7371 = !DILocation(line: 2349, column: 3, scope: !7361)
!7372 = !DILocation(line: 2350, column: 3, scope: !7361)
!7373 = !DILocation(line: 2350, column: 7, scope: !7361)
!7374 = !DILocation(line: 2350, column: 14, scope: !7361)
!7375 = !DILocation(line: 2350, column: 22, scope: !7361)
!7376 = !DILocation(line: 2351, column: 1, scope: !7361)
!7377 = distinct !DISubprogram(name: "gimple_cond_make_true", scope: !743, file: !743, line: 2357, type: !7362, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7378 = !DILocalVariable(name: "gs", arg: 1, scope: !7377, file: !743, line: 2357, type: !1959)
!7379 = !DILocation(line: 2357, column: 31, scope: !7377)
!7380 = !DILocation(line: 2359, column: 24, scope: !7377)
!7381 = !DILocation(line: 2359, column: 28, scope: !7377)
!7382 = !DILocation(line: 2359, column: 3, scope: !7377)
!7383 = !DILocation(line: 2360, column: 24, scope: !7377)
!7384 = !DILocation(line: 2360, column: 28, scope: !7377)
!7385 = !DILocation(line: 2360, column: 3, scope: !7377)
!7386 = !DILocation(line: 2361, column: 3, scope: !7377)
!7387 = !DILocation(line: 2361, column: 7, scope: !7377)
!7388 = !DILocation(line: 2361, column: 14, scope: !7377)
!7389 = !DILocation(line: 2361, column: 22, scope: !7377)
!7390 = !DILocation(line: 2362, column: 1, scope: !7377)
!7391 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !743, file: !743, line: 2046, type: !7392, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7392 = !DISubroutineType(types: !7393)
!7393 = !{null, !1959, !7, !1669}
!7394 = !DILocalVariable(name: "gs", arg: 1, scope: !7391, file: !743, line: 2046, type: !1959)
!7395 = !DILocation(line: 2046, column: 29, scope: !7391)
!7396 = !DILocalVariable(name: "index", arg: 2, scope: !7391, file: !743, line: 2046, type: !7)
!7397 = !DILocation(line: 2046, column: 42, scope: !7391)
!7398 = !DILocalVariable(name: "arg", arg: 3, scope: !7391, file: !743, line: 2046, type: !1669)
!7399 = !DILocation(line: 2046, column: 54, scope: !7391)
!7400 = !DILocation(line: 2049, column: 18, scope: !7391)
!7401 = !DILocation(line: 2049, column: 22, scope: !7391)
!7402 = !DILocation(line: 2049, column: 28, scope: !7391)
!7403 = !DILocation(line: 2049, column: 33, scope: !7391)
!7404 = !DILocation(line: 2049, column: 3, scope: !7391)
!7405 = !DILocation(line: 2050, column: 1, scope: !7391)
!7406 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !743, file: !743, line: 2261, type: !7407, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7407 = !DISubroutineType(types: !7408)
!7408 = !{null, !1959, !1669}
!7409 = !DILocalVariable(name: "gs", arg: 1, scope: !7406, file: !743, line: 2261, type: !1959)
!7410 = !DILocation(line: 2261, column: 29, scope: !7406)
!7411 = !DILocalVariable(name: "lhs", arg: 2, scope: !7406, file: !743, line: 2261, type: !1669)
!7412 = !DILocation(line: 2261, column: 38, scope: !7406)
!7413 = !DILocation(line: 2264, column: 18, scope: !7406)
!7414 = !DILocation(line: 2264, column: 25, scope: !7406)
!7415 = !DILocation(line: 2264, column: 3, scope: !7406)
!7416 = !DILocation(line: 2265, column: 1, scope: !7406)
!7417 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !743, file: !743, line: 2292, type: !7407, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7418 = !DILocalVariable(name: "gs", arg: 1, scope: !7417, file: !743, line: 2292, type: !1959)
!7419 = !DILocation(line: 2292, column: 29, scope: !7417)
!7420 = !DILocalVariable(name: "rhs", arg: 2, scope: !7417, file: !743, line: 2292, type: !1669)
!7421 = !DILocation(line: 2292, column: 38, scope: !7417)
!7422 = !DILocation(line: 2295, column: 18, scope: !7417)
!7423 = !DILocation(line: 2295, column: 25, scope: !7417)
!7424 = !DILocation(line: 2295, column: 3, scope: !7417)
!7425 = !DILocation(line: 2296, column: 1, scope: !7417)
!7426 = distinct !DISubprogram(name: "gimple_set_op", scope: !743, file: !743, line: 1663, type: !7392, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7427 = !DILocalVariable(name: "gs", arg: 1, scope: !7426, file: !743, line: 1663, type: !1959)
!7428 = !DILocation(line: 1663, column: 23, scope: !7426)
!7429 = !DILocalVariable(name: "i", arg: 2, scope: !7426, file: !743, line: 1663, type: !7)
!7430 = !DILocation(line: 1663, column: 36, scope: !7426)
!7431 = !DILocalVariable(name: "op", arg: 3, scope: !7426, file: !743, line: 1663, type: !1669)
!7432 = !DILocation(line: 1663, column: 44, scope: !7426)
!7433 = !DILocation(line: 1665, column: 3, scope: !7426)
!7434 = !DILocation(line: 1671, column: 24, scope: !7426)
!7435 = !DILocation(line: 1671, column: 15, scope: !7426)
!7436 = !DILocation(line: 1671, column: 3, scope: !7426)
!7437 = !DILocation(line: 1671, column: 19, scope: !7426)
!7438 = !DILocation(line: 1671, column: 22, scope: !7426)
!7439 = !DILocation(line: 1672, column: 1, scope: !7426)
!7440 = distinct !DISubprogram(name: "gimple_expr_code", scope: !743, file: !743, line: 1438, type: !4388, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7441 = !DILocalVariable(name: "stmt", arg: 1, scope: !7440, file: !743, line: 1438, type: !4380)
!7442 = !DILocation(line: 1438, column: 32, scope: !7440)
!7443 = !DILocalVariable(name: "code", scope: !7440, file: !743, line: 1440, type: !742)
!7444 = !DILocation(line: 1440, column: 20, scope: !7440)
!7445 = !DILocation(line: 1440, column: 40, scope: !7440)
!7446 = !DILocation(line: 1440, column: 27, scope: !7440)
!7447 = !DILocation(line: 1441, column: 7, scope: !7448)
!7448 = distinct !DILexicalBlock(scope: !7440, file: !743, line: 1441, column: 7)
!7449 = !DILocation(line: 1441, column: 12, scope: !7448)
!7450 = !DILocation(line: 1441, column: 29, scope: !7448)
!7451 = !DILocation(line: 1441, column: 32, scope: !7448)
!7452 = !DILocation(line: 1441, column: 37, scope: !7448)
!7453 = !DILocation(line: 1441, column: 7, scope: !7440)
!7454 = !DILocation(line: 1442, column: 29, scope: !7448)
!7455 = !DILocation(line: 1442, column: 35, scope: !7448)
!7456 = !DILocation(line: 1442, column: 42, scope: !7448)
!7457 = !DILocation(line: 1442, column: 5, scope: !7448)
!7458 = !DILocation(line: 1443, column: 12, scope: !7459)
!7459 = distinct !DILexicalBlock(scope: !7448, file: !743, line: 1443, column: 12)
!7460 = !DILocation(line: 1443, column: 17, scope: !7459)
!7461 = !DILocation(line: 1443, column: 12, scope: !7448)
!7462 = !DILocation(line: 1444, column: 5, scope: !7459)
!7463 = !DILocation(line: 1446, column: 5, scope: !7459)
!7464 = !DILocation(line: 1448, column: 5, scope: !7440)
!7465 = !DILocation(line: 1450, column: 1, scope: !7440)
!7466 = distinct !DISubprogram(name: "fold_gimple_assign", scope: !3, file: !3, line: 2773, type: !7467, scopeLine: 2774, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7467 = !DISubroutineType(types: !7468)
!7468 = !{!1669, !4431}
!7469 = !DILocalVariable(name: "si", arg: 1, scope: !7466, file: !3, line: 2773, type: !4431)
!7470 = !DILocation(line: 2773, column: 43, scope: !7466)
!7471 = !DILocalVariable(name: "stmt", scope: !7466, file: !3, line: 2775, type: !1959)
!7472 = !DILocation(line: 2775, column: 10, scope: !7466)
!7473 = !DILocation(line: 2775, column: 28, scope: !7466)
!7474 = !DILocation(line: 2775, column: 17, scope: !7466)
!7475 = !DILocalVariable(name: "subcode", scope: !7466, file: !3, line: 2776, type: !134)
!7476 = !DILocation(line: 2776, column: 18, scope: !7466)
!7477 = !DILocation(line: 2776, column: 52, scope: !7466)
!7478 = !DILocation(line: 2776, column: 28, scope: !7466)
!7479 = !DILocalVariable(name: "loc", scope: !7466, file: !3, line: 2777, type: !1756)
!7480 = !DILocation(line: 2777, column: 14, scope: !7466)
!7481 = !DILocation(line: 2777, column: 37, scope: !7466)
!7482 = !DILocation(line: 2777, column: 20, scope: !7466)
!7483 = !DILocalVariable(name: "result", scope: !7466, file: !3, line: 2779, type: !1669)
!7484 = !DILocation(line: 2779, column: 8, scope: !7466)
!7485 = !DILocation(line: 2781, column: 33, scope: !7466)
!7486 = !DILocation(line: 2781, column: 11, scope: !7466)
!7487 = !DILocation(line: 2781, column: 3, scope: !7466)
!7488 = !DILocalVariable(name: "rhs", scope: !7489, file: !3, line: 2785, type: !1669)
!7489 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2784, column: 7)
!7490 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 2782, column: 5)
!7491 = !DILocation(line: 2785, column: 14, scope: !7489)
!7492 = !DILocation(line: 2785, column: 40, scope: !7489)
!7493 = !DILocation(line: 2785, column: 20, scope: !7489)
!7494 = !DILocation(line: 2788, column: 13, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 2788, column: 13)
!7496 = !DILocation(line: 2788, column: 29, scope: !7495)
!7497 = !DILocation(line: 2788, column: 13, scope: !7489)
!7498 = !DILocalVariable(name: "op0", scope: !7499, file: !3, line: 2790, type: !1669)
!7499 = distinct !DILexicalBlock(scope: !7495, file: !3, line: 2789, column: 11)
!7500 = !DILocation(line: 2790, column: 11, scope: !7499)
!7501 = !DILocation(line: 2790, column: 17, scope: !7499)
!7502 = !DILocalVariable(name: "tem", scope: !7499, file: !3, line: 2791, type: !1669)
!7503 = !DILocation(line: 2791, column: 11, scope: !7499)
!7504 = !DILocalVariable(name: "set", scope: !7499, file: !3, line: 2792, type: !1748)
!7505 = !DILocation(line: 2792, column: 11, scope: !7499)
!7506 = !DILocalVariable(name: "cond_loc", scope: !7499, file: !3, line: 2793, type: !1756)
!7507 = !DILocation(line: 2793, column: 17, scope: !7499)
!7508 = !DILocation(line: 2793, column: 28, scope: !7499)
!7509 = !DILocation(line: 2795, column: 10, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 2795, column: 10)
!7511 = !DILocation(line: 2795, column: 10, scope: !7499)
!7512 = !DILocation(line: 2797, column: 3, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 2796, column: 8)
!7514 = !DILocation(line: 2798, column: 26, scope: !7513)
!7515 = !DILocation(line: 2799, column: 8, scope: !7513)
!7516 = !DILocation(line: 2799, column: 25, scope: !7513)
!7517 = !DILocation(line: 2800, column: 8, scope: !7513)
!7518 = !DILocation(line: 2801, column: 8, scope: !7513)
!7519 = !DILocation(line: 2798, column: 9, scope: !7513)
!7520 = !DILocation(line: 2798, column: 7, scope: !7513)
!7521 = !DILocation(line: 2805, column: 10, scope: !7513)
!7522 = !DILocation(line: 2805, column: 14, scope: !7513)
!7523 = !DILocation(line: 2805, column: 37, scope: !7513)
!7524 = !DILocation(line: 2805, column: 17, scope: !7513)
!7525 = !DILocation(line: 2806, column: 10, scope: !7513)
!7526 = !DILocation(line: 2806, column: 33, scope: !7513)
!7527 = !DILocation(line: 2806, column: 13, scope: !7513)
!7528 = !DILocation(line: 0, scope: !7513)
!7529 = !DILocation(line: 2805, column: 9, scope: !7513)
!7530 = !DILocation(line: 2805, column: 7, scope: !7513)
!7531 = !DILocation(line: 2807, column: 35, scope: !7513)
!7532 = !DILocation(line: 2807, column: 40, scope: !7513)
!7533 = !DILocation(line: 2807, column: 3, scope: !7513)
!7534 = !DILocation(line: 2808, column: 8, scope: !7513)
!7535 = !DILocation(line: 2809, column: 40, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 2809, column: 15)
!7537 = !DILocation(line: 2809, column: 15, scope: !7536)
!7538 = !DILocation(line: 2809, column: 15, scope: !7510)
!7539 = !DILocation(line: 2811, column: 9, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2810, column: 8)
!7541 = !DILocation(line: 2811, column: 7, scope: !7540)
!7542 = !DILocation(line: 2812, column: 7, scope: !7540)
!7543 = !DILocation(line: 2813, column: 8, scope: !7540)
!7544 = !DILocation(line: 2815, column: 8, scope: !7536)
!7545 = !DILocation(line: 2817, column: 10, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 2817, column: 10)
!7547 = !DILocation(line: 2817, column: 10, scope: !7499)
!7548 = !DILocation(line: 2818, column: 17, scope: !7546)
!7549 = !DILocation(line: 2818, column: 15, scope: !7546)
!7550 = !DILocation(line: 2818, column: 8, scope: !7546)
!7551 = !DILocation(line: 2820, column: 11, scope: !7499)
!7552 = !DILocation(line: 2822, column: 11, scope: !7553)
!7553 = distinct !DILexicalBlock(scope: !7495, file: !3, line: 2822, column: 11)
!7554 = !DILocation(line: 2822, column: 27, scope: !7553)
!7555 = !DILocation(line: 2822, column: 11, scope: !7495)
!7556 = !DILocation(line: 2823, column: 27, scope: !7553)
!7557 = !DILocation(line: 2823, column: 11, scope: !7553)
!7558 = !DILocation(line: 2823, column: 4, scope: !7553)
!7559 = !DILocation(line: 2825, column: 11, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7553, file: !3, line: 2825, column: 11)
!7561 = !DILocation(line: 2825, column: 11, scope: !7553)
!7562 = !DILocation(line: 2826, column: 33, scope: !7560)
!7563 = !DILocation(line: 2826, column: 11, scope: !7560)
!7564 = !DILocation(line: 2826, column: 4, scope: !7560)
!7565 = !DILocation(line: 2828, column: 11, scope: !7566)
!7566 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 2828, column: 11)
!7567 = !DILocation(line: 2828, column: 27, scope: !7566)
!7568 = !DILocation(line: 2828, column: 11, scope: !7560)
!7569 = !DILocalVariable(name: "tem", scope: !7570, file: !3, line: 2830, type: !1669)
!7570 = distinct !DILexicalBlock(scope: !7566, file: !3, line: 2829, column: 4)
!7571 = !DILocation(line: 2830, column: 11, scope: !7570)
!7572 = !DILocation(line: 2830, column: 39, scope: !7570)
!7573 = !DILocation(line: 2830, column: 17, scope: !7570)
!7574 = !DILocation(line: 2831, column: 10, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2831, column: 10)
!7576 = !DILocation(line: 2831, column: 10, scope: !7570)
!7577 = !DILocation(line: 2832, column: 17, scope: !7575)
!7578 = !DILocation(line: 2832, column: 15, scope: !7575)
!7579 = !DILocation(line: 2832, column: 8, scope: !7575)
!7580 = !DILocation(line: 2834, column: 4, scope: !7570)
!7581 = !DILocation(line: 2836, column: 11, scope: !7582)
!7582 = distinct !DILexicalBlock(scope: !7566, file: !3, line: 2836, column: 11)
!7583 = !DILocation(line: 2836, column: 27, scope: !7582)
!7584 = !DILocation(line: 2837, column: 4, scope: !7582)
!7585 = !DILocation(line: 2837, column: 7, scope: !7582)
!7586 = !DILocation(line: 2837, column: 35, scope: !7582)
!7587 = !DILocation(line: 2838, column: 4, scope: !7582)
!7588 = !DILocation(line: 2838, column: 8, scope: !7582)
!7589 = !DILocation(line: 2839, column: 11, scope: !7582)
!7590 = !DILocation(line: 2839, column: 8, scope: !7582)
!7591 = !DILocation(line: 2836, column: 11, scope: !7566)
!7592 = !DILocalVariable(name: "i", scope: !7593, file: !3, line: 2842, type: !7)
!7593 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 2840, column: 4)
!7594 = !DILocation(line: 2842, column: 15, scope: !7593)
!7595 = !DILocalVariable(name: "val", scope: !7593, file: !3, line: 2843, type: !1669)
!7596 = !DILocation(line: 2843, column: 11, scope: !7593)
!7597 = !DILocation(line: 2845, column: 6, scope: !7598)
!7598 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 2845, column: 6)
!7599 = !DILocation(line: 2845, column: 6, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 2845, column: 6)
!7601 = !DILocation(line: 2846, column: 12, scope: !7602)
!7602 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 2846, column: 12)
!7603 = !DILocation(line: 2846, column: 28, scope: !7602)
!7604 = !DILocation(line: 2847, column: 5, scope: !7602)
!7605 = !DILocation(line: 2847, column: 8, scope: !7602)
!7606 = !DILocation(line: 2847, column: 24, scope: !7602)
!7607 = !DILocation(line: 2848, column: 5, scope: !7602)
!7608 = !DILocation(line: 2848, column: 8, scope: !7602)
!7609 = !DILocation(line: 2848, column: 24, scope: !7602)
!7610 = !DILocation(line: 2846, column: 12, scope: !7600)
!7611 = !DILocation(line: 2849, column: 3, scope: !7602)
!7612 = !DILocation(line: 2848, column: 27, scope: !7602)
!7613 = distinct !{!7613, !7597, !7614}
!7614 = !DILocation(line: 2849, column: 10, scope: !7598)
!7615 = !DILocation(line: 2851, column: 37, scope: !7593)
!7616 = !DILocation(line: 2852, column: 9, scope: !7593)
!7617 = !DILocation(line: 2851, column: 13, scope: !7593)
!7618 = !DILocation(line: 2851, column: 6, scope: !7593)
!7619 = !DILocation(line: 2855, column: 11, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7582, file: !3, line: 2855, column: 11)
!7621 = !DILocation(line: 2855, column: 11, scope: !7582)
!7622 = !DILocation(line: 2856, column: 52, scope: !7620)
!7623 = !DILocation(line: 2856, column: 25, scope: !7620)
!7624 = !DILocation(line: 2856, column: 11, scope: !7620)
!7625 = !DILocation(line: 2856, column: 4, scope: !7620)
!7626 = !DILocation(line: 2860, column: 13, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 2860, column: 13)
!7628 = !DILocation(line: 2860, column: 20, scope: !7627)
!7629 = !DILocation(line: 2860, column: 13, scope: !7489)
!7630 = !DILocation(line: 2861, column: 26, scope: !7627)
!7631 = !DILocation(line: 2861, column: 20, scope: !7627)
!7632 = !DILocation(line: 2861, column: 18, scope: !7627)
!7633 = !DILocation(line: 2861, column: 11, scope: !7627)
!7634 = !DILocation(line: 2866, column: 9, scope: !7489)
!7635 = !DILocation(line: 2868, column: 13, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 2868, column: 13)
!7637 = !DILocation(line: 2868, column: 23, scope: !7636)
!7638 = !DILocation(line: 2868, column: 20, scope: !7636)
!7639 = !DILocation(line: 2868, column: 27, scope: !7636)
!7640 = !DILocation(line: 2868, column: 50, scope: !7636)
!7641 = !DILocation(line: 2868, column: 30, scope: !7636)
!7642 = !DILocation(line: 2868, column: 13, scope: !7489)
!7643 = !DILocation(line: 2869, column: 11, scope: !7636)
!7644 = !DILocation(line: 2869, column: 4, scope: !7636)
!7645 = !DILocation(line: 2871, column: 2, scope: !7489)
!7646 = !DILocalVariable(name: "rhs", scope: !7647, file: !3, line: 2877, type: !1669)
!7647 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2876, column: 7)
!7648 = !DILocation(line: 2877, column: 7, scope: !7647)
!7649 = !DILocation(line: 2877, column: 33, scope: !7647)
!7650 = !DILocation(line: 2877, column: 13, scope: !7647)
!7651 = !DILocation(line: 2879, column: 27, scope: !7647)
!7652 = !DILocation(line: 2879, column: 32, scope: !7647)
!7653 = !DILocation(line: 2879, column: 59, scope: !7647)
!7654 = !DILocation(line: 2879, column: 41, scope: !7647)
!7655 = !DILocation(line: 2879, column: 66, scope: !7647)
!7656 = !DILocation(line: 2879, column: 11, scope: !7647)
!7657 = !DILocation(line: 2879, column: 9, scope: !7647)
!7658 = !DILocation(line: 2880, column: 6, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 2880, column: 6)
!7660 = !DILocation(line: 2880, column: 6, scope: !7647)
!7661 = !DILocation(line: 2887, column: 10, scope: !7662)
!7662 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2887, column: 10)
!7663 = distinct !DILexicalBlock(scope: !7659, file: !3, line: 2881, column: 4)
!7664 = !DILocation(line: 2888, column: 3, scope: !7662)
!7665 = !DILocation(line: 2888, column: 6, scope: !7662)
!7666 = !DILocation(line: 2888, column: 25, scope: !7662)
!7667 = !DILocation(line: 2889, column: 3, scope: !7662)
!7668 = !DILocation(line: 2889, column: 6, scope: !7662)
!7669 = !DILocation(line: 2889, column: 22, scope: !7662)
!7670 = !DILocation(line: 2887, column: 10, scope: !7663)
!7671 = !DILocation(line: 2890, column: 33, scope: !7662)
!7672 = !DILocation(line: 2890, column: 8, scope: !7662)
!7673 = !DILocation(line: 2890, column: 31, scope: !7662)
!7674 = !DILocation(line: 2892, column: 6, scope: !7663)
!7675 = !DILocation(line: 2893, column: 30, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2893, column: 10)
!7677 = !DILocation(line: 2893, column: 10, scope: !7676)
!7678 = !DILocation(line: 2893, column: 10, scope: !7663)
!7679 = !DILocation(line: 2894, column: 15, scope: !7676)
!7680 = !DILocation(line: 2894, column: 8, scope: !7676)
!7681 = !DILocation(line: 2895, column: 4, scope: !7663)
!7682 = !DILocation(line: 2896, column: 11, scope: !7683)
!7683 = distinct !DILexicalBlock(scope: !7659, file: !3, line: 2896, column: 11)
!7684 = !DILocation(line: 2897, column: 4, scope: !7683)
!7685 = !DILocation(line: 2897, column: 7, scope: !7683)
!7686 = !DILocation(line: 2898, column: 4, scope: !7683)
!7687 = !DILocation(line: 2898, column: 7, scope: !7683)
!7688 = !DILocation(line: 2896, column: 11, scope: !7659)
!7689 = !DILocalVariable(name: "type", scope: !7690, file: !3, line: 2900, type: !1669)
!7690 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 2899, column: 4)
!7691 = !DILocation(line: 2900, column: 11, scope: !7690)
!7692 = !DILocation(line: 2900, column: 36, scope: !7690)
!7693 = !DILocation(line: 2900, column: 18, scope: !7690)
!7694 = !DILocalVariable(name: "t", scope: !7690, file: !3, line: 2901, type: !1669)
!7695 = !DILocation(line: 2901, column: 11, scope: !7690)
!7696 = !DILocation(line: 2901, column: 45, scope: !7690)
!7697 = !DILocation(line: 2902, column: 30, scope: !7690)
!7698 = !DILocation(line: 2902, column: 10, scope: !7690)
!7699 = !DILocation(line: 2903, column: 10, scope: !7690)
!7700 = !DILocation(line: 2903, column: 29, scope: !7690)
!7701 = !DILocation(line: 2901, column: 15, scope: !7690)
!7702 = !DILocation(line: 2904, column: 10, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7690, file: !3, line: 2904, column: 10)
!7704 = !DILocation(line: 2904, column: 10, scope: !7690)
!7705 = !DILocation(line: 2905, column: 15, scope: !7703)
!7706 = !DILocation(line: 2905, column: 8, scope: !7703)
!7707 = !DILocation(line: 2906, column: 4, scope: !7690)
!7708 = !DILocation(line: 2908, column: 7, scope: !7490)
!7709 = !DILocation(line: 2912, column: 35, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2912, column: 11)
!7711 = !DILocation(line: 2912, column: 11, scope: !7710)
!7712 = !DILocation(line: 2912, column: 41, scope: !7710)
!7713 = !DILocation(line: 2912, column: 11, scope: !7490)
!7714 = !DILocalVariable(name: "type", scope: !7715, file: !3, line: 2914, type: !1669)
!7715 = distinct !DILexicalBlock(scope: !7710, file: !3, line: 2913, column: 2)
!7716 = !DILocation(line: 2914, column: 9, scope: !7715)
!7717 = !DILocation(line: 2914, column: 16, scope: !7715)
!7718 = !DILocation(line: 2915, column: 8, scope: !7719)
!7719 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 2915, column: 8)
!7720 = !DILocation(line: 2915, column: 37, scope: !7719)
!7721 = !DILocation(line: 2915, column: 8, scope: !7715)
!7722 = !DILocation(line: 2917, column: 35, scope: !7723)
!7723 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 2916, column: 6)
!7724 = !DILocation(line: 2917, column: 15, scope: !7723)
!7725 = !DILocation(line: 2917, column: 13, scope: !7723)
!7726 = !DILocation(line: 2919, column: 8, scope: !7727)
!7727 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 2918, column: 12)
!7728 = !DILocation(line: 2919, column: 46, scope: !7727)
!7729 = !DILocation(line: 2918, column: 13, scope: !7727)
!7730 = !DILocation(line: 2918, column: 12, scope: !7723)
!7731 = !DILocation(line: 2920, column: 10, scope: !7727)
!7732 = !DILocation(line: 2920, column: 8, scope: !7727)
!7733 = !DILocation(line: 2920, column: 3, scope: !7727)
!7734 = !DILocation(line: 2921, column: 6, scope: !7723)
!7735 = !DILocation(line: 2922, column: 56, scope: !7715)
!7736 = !DILocation(line: 2922, column: 39, scope: !7715)
!7737 = !DILocation(line: 2923, column: 11, scope: !7715)
!7738 = !DILocation(line: 2924, column: 31, scope: !7715)
!7739 = !DILocation(line: 2924, column: 11, scope: !7715)
!7740 = !DILocation(line: 2925, column: 31, scope: !7715)
!7741 = !DILocation(line: 2925, column: 11, scope: !7715)
!7742 = !DILocation(line: 2922, column: 13, scope: !7715)
!7743 = !DILocation(line: 2922, column: 11, scope: !7715)
!7744 = !DILocation(line: 2926, column: 2, scope: !7715)
!7745 = !DILocation(line: 2928, column: 12, scope: !7746)
!7746 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2928, column: 11)
!7747 = !DILocation(line: 2928, column: 11, scope: !7490)
!7748 = !DILocation(line: 2929, column: 35, scope: !7746)
!7749 = !DILocation(line: 2929, column: 40, scope: !7746)
!7750 = !DILocation(line: 2930, column: 31, scope: !7746)
!7751 = !DILocation(line: 2931, column: 51, scope: !7746)
!7752 = !DILocation(line: 2931, column: 31, scope: !7746)
!7753 = !DILocation(line: 2932, column: 51, scope: !7746)
!7754 = !DILocation(line: 2932, column: 31, scope: !7746)
!7755 = !DILocation(line: 2929, column: 18, scope: !7746)
!7756 = !DILocation(line: 2929, column: 16, scope: !7746)
!7757 = !DILocation(line: 2929, column: 9, scope: !7746)
!7758 = !DILocation(line: 2934, column: 11, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2934, column: 11)
!7760 = !DILocation(line: 2934, column: 11, scope: !7490)
!7761 = !DILocation(line: 2936, column: 11, scope: !7762)
!7762 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 2935, column: 9)
!7763 = !DILocation(line: 2937, column: 35, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7762, file: !3, line: 2937, column: 15)
!7765 = !DILocation(line: 2937, column: 15, scope: !7764)
!7766 = !DILocation(line: 2937, column: 15, scope: !7762)
!7767 = !DILocation(line: 2938, column: 13, scope: !7764)
!7768 = !DILocation(line: 2938, column: 6, scope: !7764)
!7769 = !DILocation(line: 2944, column: 38, scope: !7770)
!7770 = distinct !DILexicalBlock(scope: !7762, file: !3, line: 2944, column: 15)
!7771 = !DILocation(line: 2944, column: 15, scope: !7770)
!7772 = !DILocation(line: 2945, column: 15, scope: !7770)
!7773 = !DILocation(line: 2945, column: 60, scope: !7770)
!7774 = !DILocation(line: 2945, column: 40, scope: !7770)
!7775 = !DILocation(line: 2946, column: 60, scope: !7770)
!7776 = !DILocation(line: 2946, column: 40, scope: !7770)
!7777 = !DILocation(line: 2945, column: 18, scope: !7770)
!7778 = !DILocation(line: 2944, column: 15, scope: !7762)
!7779 = !DILocation(line: 2947, column: 20, scope: !7770)
!7780 = !DILocation(line: 2947, column: 13, scope: !7770)
!7781 = !DILocation(line: 2950, column: 9, scope: !7762)
!7782 = !DILocation(line: 2951, column: 7, scope: !7490)
!7783 = !DILocation(line: 2954, column: 7, scope: !7490)
!7784 = !DILocation(line: 2955, column: 5, scope: !7490)
!7785 = !DILocation(line: 2957, column: 3, scope: !7466)
!7786 = !DILocation(line: 2958, column: 1, scope: !7466)
!7787 = distinct !DISubprogram(name: "fold_gimple_cond", scope: !3, file: !3, line: 2966, type: !4660, scopeLine: 2967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7788 = !DILocalVariable(name: "stmt", arg: 1, scope: !7787, file: !3, line: 2966, type: !1959)
!7789 = !DILocation(line: 2966, column: 26, scope: !7787)
!7790 = !DILocalVariable(name: "result", scope: !7787, file: !3, line: 2968, type: !1669)
!7791 = !DILocation(line: 2968, column: 8, scope: !7787)
!7792 = !DILocation(line: 2968, column: 51, scope: !7787)
!7793 = !DILocation(line: 2968, column: 34, scope: !7787)
!7794 = !DILocation(line: 2969, column: 27, scope: !7787)
!7795 = !DILocation(line: 2969, column: 9, scope: !7787)
!7796 = !DILocation(line: 2970, column: 30, scope: !7787)
!7797 = !DILocation(line: 2971, column: 47, scope: !7787)
!7798 = !DILocation(line: 2971, column: 30, scope: !7787)
!7799 = !DILocation(line: 2972, column: 47, scope: !7787)
!7800 = !DILocation(line: 2972, column: 30, scope: !7787)
!7801 = !DILocation(line: 2968, column: 17, scope: !7787)
!7802 = !DILocation(line: 2974, column: 7, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7787, file: !3, line: 2974, column: 7)
!7804 = !DILocation(line: 2974, column: 7, scope: !7787)
!7805 = !DILocation(line: 2976, column: 7, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 2975, column: 5)
!7807 = !DILocation(line: 2977, column: 31, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 2977, column: 11)
!7809 = !DILocation(line: 2977, column: 11, scope: !7808)
!7810 = !DILocation(line: 2977, column: 39, scope: !7808)
!7811 = !DILocation(line: 2977, column: 62, scope: !7808)
!7812 = !DILocation(line: 2977, column: 42, scope: !7808)
!7813 = !DILocation(line: 2977, column: 11, scope: !7806)
!7814 = !DILocation(line: 2979, column: 48, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7808, file: !3, line: 2978, column: 9)
!7816 = !DILocation(line: 2979, column: 54, scope: !7815)
!7817 = !DILocation(line: 2979, column: 11, scope: !7815)
!7818 = !DILocation(line: 2980, column: 11, scope: !7815)
!7819 = !DILocation(line: 2982, column: 5, scope: !7806)
!7820 = !DILocation(line: 2984, column: 3, scope: !7787)
!7821 = !DILocation(line: 2985, column: 1, scope: !7787)
!7822 = distinct !DISubprogram(name: "maybe_fold_reference", scope: !3, file: !3, line: 2392, type: !7823, scopeLine: 2393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7823 = !DISubroutineType(types: !7824)
!7824 = !{!1669, !1669, !1748}
!7825 = !DILocalVariable(name: "expr", arg: 1, scope: !7822, file: !3, line: 2392, type: !1669)
!7826 = !DILocation(line: 2392, column: 28, scope: !7822)
!7827 = !DILocalVariable(name: "is_lhs", arg: 2, scope: !7822, file: !3, line: 2392, type: !1748)
!7828 = !DILocation(line: 2392, column: 39, scope: !7822)
!7829 = !DILocalVariable(name: "t", scope: !7822, file: !3, line: 2394, type: !1993)
!7830 = !DILocation(line: 2394, column: 9, scope: !7822)
!7831 = !DILocation(line: 2396, column: 7, scope: !7832)
!7832 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 2396, column: 7)
!7833 = !DILocation(line: 2396, column: 24, scope: !7832)
!7834 = !DILocation(line: 2397, column: 7, scope: !7832)
!7835 = !DILocation(line: 2397, column: 11, scope: !7832)
!7836 = !DILocation(line: 2396, column: 7, scope: !7822)
!7837 = !DILocalVariable(name: "tem", scope: !7838, file: !3, line: 2399, type: !1669)
!7838 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 2398, column: 5)
!7839 = !DILocation(line: 2399, column: 12, scope: !7838)
!7840 = !DILocation(line: 2399, column: 50, scope: !7838)
!7841 = !DILocation(line: 2399, column: 18, scope: !7838)
!7842 = !DILocation(line: 2400, column: 11, scope: !7843)
!7843 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 2400, column: 11)
!7844 = !DILocation(line: 2400, column: 11, scope: !7838)
!7845 = !DILocation(line: 2401, column: 9, scope: !7843)
!7846 = !DILocation(line: 2401, column: 2, scope: !7843)
!7847 = !DILocation(line: 2402, column: 5, scope: !7838)
!7848 = !DILocation(line: 2406, column: 29, scope: !7849)
!7849 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 2406, column: 7)
!7850 = !DILocation(line: 2406, column: 28, scope: !7849)
!7851 = !DILocation(line: 2406, column: 7, scope: !7849)
!7852 = !DILocation(line: 2407, column: 7, scope: !7849)
!7853 = !DILocation(line: 2407, column: 10, scope: !7849)
!7854 = !DILocation(line: 2406, column: 7, scope: !7822)
!7855 = !DILocalVariable(name: "tem", scope: !7856, file: !3, line: 2409, type: !1669)
!7856 = distinct !DILexicalBlock(scope: !7849, file: !3, line: 2408, column: 5)
!7857 = !DILocation(line: 2409, column: 12, scope: !7856)
!7858 = !DILocation(line: 2409, column: 25, scope: !7856)
!7859 = !DILocation(line: 2409, column: 24, scope: !7856)
!7860 = !DILocation(line: 2409, column: 18, scope: !7856)
!7861 = !DILocation(line: 2410, column: 11, scope: !7862)
!7862 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 2410, column: 11)
!7863 = !DILocation(line: 2410, column: 19, scope: !7862)
!7864 = !DILocation(line: 2410, column: 18, scope: !7862)
!7865 = !DILocation(line: 2410, column: 15, scope: !7862)
!7866 = !DILocation(line: 2410, column: 11, scope: !7856)
!7867 = !DILocation(line: 2411, column: 9, scope: !7862)
!7868 = !DILocation(line: 2411, column: 2, scope: !7862)
!7869 = !DILocation(line: 2412, column: 5, scope: !7856)
!7870 = !DILocation(line: 2414, column: 3, scope: !7822)
!7871 = !DILocation(line: 2414, column: 32, scope: !7822)
!7872 = !DILocation(line: 2414, column: 31, scope: !7822)
!7873 = !DILocation(line: 2414, column: 10, scope: !7822)
!7874 = !DILocation(line: 2415, column: 10, scope: !7822)
!7875 = !DILocation(line: 2415, column: 7, scope: !7822)
!7876 = distinct !{!7876, !7870, !7874}
!7877 = !DILocation(line: 2417, column: 7, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7822, file: !3, line: 2417, column: 7)
!7879 = !DILocation(line: 2417, column: 22, scope: !7878)
!7880 = !DILocation(line: 2417, column: 7, scope: !7822)
!7881 = !DILocalVariable(name: "tem", scope: !7882, file: !3, line: 2419, type: !1669)
!7882 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2418, column: 5)
!7883 = !DILocation(line: 2419, column: 12, scope: !7882)
!7884 = !DILocation(line: 2419, column: 45, scope: !7882)
!7885 = !DILocation(line: 2419, column: 44, scope: !7882)
!7886 = !DILocation(line: 2419, column: 48, scope: !7882)
!7887 = !DILocation(line: 2420, column: 9, scope: !7882)
!7888 = !DILocation(line: 2419, column: 18, scope: !7882)
!7889 = !DILocation(line: 2422, column: 11, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 2422, column: 11)
!7891 = !DILocation(line: 2422, column: 18, scope: !7890)
!7892 = !DILocation(line: 2422, column: 21, scope: !7890)
!7893 = !DILocation(line: 2422, column: 25, scope: !7890)
!7894 = !DILocation(line: 2422, column: 28, scope: !7890)
!7895 = !DILocation(line: 2422, column: 11, scope: !7882)
!7896 = !DILocation(line: 2423, column: 6, scope: !7890)
!7897 = !DILocation(line: 2423, column: 2, scope: !7890)
!7898 = !DILocation(line: 2424, column: 12, scope: !7899)
!7899 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 2424, column: 11)
!7900 = !DILocation(line: 2425, column: 4, scope: !7899)
!7901 = !DILocation(line: 2425, column: 7, scope: !7899)
!7902 = !DILocation(line: 2425, column: 40, scope: !7899)
!7903 = !DILocation(line: 2424, column: 11, scope: !7882)
!7904 = !DILocation(line: 2428, column: 8, scope: !7899)
!7905 = !DILocation(line: 2428, column: 6, scope: !7899)
!7906 = !DILocation(line: 2428, column: 2, scope: !7899)
!7907 = !DILocation(line: 2430, column: 11, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 2430, column: 11)
!7909 = !DILocation(line: 2430, column: 11, scope: !7882)
!7910 = !DILocation(line: 2432, column: 9, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 2431, column: 2)
!7912 = !DILocation(line: 2432, column: 5, scope: !7911)
!7913 = !DILocation(line: 2432, column: 7, scope: !7911)
!7914 = !DILocation(line: 2433, column: 32, scope: !7911)
!7915 = !DILocation(line: 2433, column: 38, scope: !7911)
!7916 = !DILocation(line: 2433, column: 10, scope: !7911)
!7917 = !DILocation(line: 2433, column: 8, scope: !7911)
!7918 = !DILocation(line: 2434, column: 8, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 2434, column: 8)
!7920 = !DILocation(line: 2434, column: 8, scope: !7911)
!7921 = !DILocation(line: 2435, column: 13, scope: !7919)
!7922 = !DILocation(line: 2435, column: 6, scope: !7919)
!7923 = !DILocation(line: 2436, column: 11, scope: !7911)
!7924 = !DILocation(line: 2436, column: 4, scope: !7911)
!7925 = !DILocation(line: 2438, column: 5, scope: !7882)
!7926 = !DILocation(line: 2439, column: 13, scope: !7927)
!7927 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2439, column: 12)
!7928 = !DILocation(line: 2440, column: 5, scope: !7927)
!7929 = !DILocation(line: 2440, column: 8, scope: !7927)
!7930 = !DILocation(line: 2439, column: 12, scope: !7878)
!7931 = !DILocalVariable(name: "tem", scope: !7932, file: !3, line: 2442, type: !1669)
!7932 = distinct !DILexicalBlock(scope: !7927, file: !3, line: 2441, column: 5)
!7933 = !DILocation(line: 2442, column: 12, scope: !7932)
!7934 = !DILocation(line: 2442, column: 46, scope: !7932)
!7935 = !DILocation(line: 2442, column: 45, scope: !7932)
!7936 = !DILocation(line: 2442, column: 18, scope: !7932)
!7937 = !DILocation(line: 2443, column: 11, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 2443, column: 11)
!7939 = !DILocation(line: 2444, column: 4, scope: !7938)
!7940 = !DILocation(line: 2444, column: 34, scope: !7938)
!7941 = !DILocation(line: 2444, column: 50, scope: !7938)
!7942 = !DILocation(line: 2444, column: 7, scope: !7938)
!7943 = !DILocation(line: 2443, column: 11, scope: !7932)
!7944 = !DILocation(line: 2446, column: 23, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7938, file: !3, line: 2445, column: 2)
!7946 = !DILocation(line: 2446, column: 9, scope: !7945)
!7947 = !DILocation(line: 2446, column: 5, scope: !7945)
!7948 = !DILocation(line: 2446, column: 7, scope: !7945)
!7949 = !DILocation(line: 2447, column: 32, scope: !7945)
!7950 = !DILocation(line: 2447, column: 38, scope: !7945)
!7951 = !DILocation(line: 2447, column: 10, scope: !7945)
!7952 = !DILocation(line: 2447, column: 8, scope: !7945)
!7953 = !DILocation(line: 2448, column: 8, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 2448, column: 8)
!7955 = !DILocation(line: 2448, column: 8, scope: !7945)
!7956 = !DILocation(line: 2449, column: 13, scope: !7954)
!7957 = !DILocation(line: 2449, column: 6, scope: !7954)
!7958 = !DILocation(line: 2450, column: 11, scope: !7945)
!7959 = !DILocation(line: 2450, column: 4, scope: !7945)
!7960 = !DILocation(line: 2452, column: 5, scope: !7932)
!7961 = !DILocation(line: 2454, column: 3, scope: !7822)
!7962 = !DILocation(line: 2455, column: 1, scope: !7822)
!7963 = distinct !DISubprogram(name: "fold_gimple_call", scope: !3, file: !3, line: 2995, type: !4429, scopeLine: 2996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!7964 = !DILocalVariable(name: "gsi", arg: 1, scope: !7963, file: !3, line: 2995, type: !4431)
!7965 = !DILocation(line: 2995, column: 41, scope: !7963)
!7966 = !DILocalVariable(name: "stmt", scope: !7963, file: !3, line: 2997, type: !1959)
!7967 = !DILocation(line: 2997, column: 10, scope: !7963)
!7968 = !DILocation(line: 2997, column: 28, scope: !7963)
!7969 = !DILocation(line: 2997, column: 17, scope: !7963)
!7970 = !DILocalVariable(name: "callee", scope: !7963, file: !3, line: 2999, type: !1669)
!7971 = !DILocation(line: 2999, column: 8, scope: !7963)
!7972 = !DILocation(line: 2999, column: 37, scope: !7963)
!7973 = !DILocation(line: 2999, column: 17, scope: !7963)
!7974 = !DILocation(line: 3003, column: 7, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 3003, column: 7)
!7976 = !DILocation(line: 3003, column: 14, scope: !7975)
!7977 = !DILocation(line: 3003, column: 17, scope: !7975)
!7978 = !DILocation(line: 3003, column: 7, scope: !7963)
!7979 = !DILocalVariable(name: "result", scope: !7980, file: !3, line: 3005, type: !1669)
!7980 = distinct !DILexicalBlock(scope: !7975, file: !3, line: 3004, column: 5)
!7981 = !DILocation(line: 3005, column: 12, scope: !7980)
!7982 = !DILocation(line: 3005, column: 39, scope: !7980)
!7983 = !DILocation(line: 3005, column: 21, scope: !7980)
!7984 = !DILocation(line: 3007, column: 11, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 3007, column: 11)
!7986 = !DILocation(line: 3007, column: 11, scope: !7980)
!7987 = !DILocation(line: 3009, column: 39, scope: !7988)
!7988 = distinct !DILexicalBlock(scope: !7989, file: !3, line: 3009, column: 15)
!7989 = distinct !DILexicalBlock(scope: !7985, file: !3, line: 3008, column: 2)
!7990 = !DILocation(line: 3009, column: 44, scope: !7988)
!7991 = !DILocation(line: 3009, column: 16, scope: !7988)
!7992 = !DILocation(line: 3009, column: 15, scope: !7989)
!7993 = !DILocation(line: 3010, column: 42, scope: !7988)
!7994 = !DILocation(line: 3010, column: 47, scope: !7988)
!7995 = !DILocation(line: 3010, column: 6, scope: !7988)
!7996 = !DILocation(line: 3011, column: 4, scope: !7989)
!7997 = !DILocation(line: 3013, column: 5, scope: !7980)
!7998 = !DILocation(line: 3024, column: 32, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !7975, file: !3, line: 3015, column: 5)
!8000 = !DILocation(line: 3024, column: 16, scope: !7999)
!8001 = !DILocation(line: 3024, column: 14, scope: !7999)
!8002 = !DILocation(line: 3025, column: 11, scope: !8003)
!8003 = distinct !DILexicalBlock(scope: !7999, file: !3, line: 3025, column: 11)
!8004 = !DILocation(line: 3025, column: 30, scope: !8003)
!8005 = !DILocation(line: 3026, column: 11, scope: !8003)
!8006 = !DILocation(line: 3026, column: 25, scope: !8003)
!8007 = !DILocation(line: 3026, column: 14, scope: !8003)
!8008 = !DILocation(line: 3027, column: 11, scope: !8003)
!8009 = !DILocation(line: 3027, column: 14, scope: !8003)
!8010 = !DILocation(line: 3027, column: 55, scope: !8003)
!8011 = !DILocation(line: 3028, column: 11, scope: !8003)
!8012 = !DILocation(line: 3028, column: 14, scope: !8003)
!8013 = !DILocation(line: 3025, column: 11, scope: !7999)
!8014 = !DILocalVariable(name: "t", scope: !8015, file: !3, line: 3031, type: !1669)
!8015 = distinct !DILexicalBlock(scope: !8003, file: !3, line: 3030, column: 9)
!8016 = !DILocation(line: 3031, column: 16, scope: !8015)
!8017 = !DILocation(line: 3037, column: 15, scope: !8015)
!8018 = !DILocation(line: 3037, column: 13, scope: !8015)
!8019 = !DILocation(line: 3038, column: 26, scope: !8015)
!8020 = !DILocation(line: 3038, column: 45, scope: !8015)
!8021 = !DILocation(line: 3038, column: 53, scope: !8015)
!8022 = !DILocation(line: 3038, column: 15, scope: !8015)
!8023 = !DILocation(line: 3038, column: 13, scope: !8015)
!8024 = !DILocation(line: 3039, column: 15, scope: !8025)
!8025 = distinct !DILexicalBlock(scope: !8015, file: !3, line: 3039, column: 15)
!8026 = !DILocation(line: 3039, column: 15, scope: !8015)
!8027 = !DILocation(line: 3041, column: 35, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8025, file: !3, line: 3040, column: 13)
!8029 = !DILocation(line: 3041, column: 41, scope: !8028)
!8030 = !DILocation(line: 3041, column: 15, scope: !8028)
!8031 = !DILocation(line: 3042, column: 15, scope: !8028)
!8032 = !DILocation(line: 3044, column: 9, scope: !8015)
!8033 = !DILocation(line: 3047, column: 3, scope: !7963)
!8034 = !DILocation(line: 3048, column: 1, scope: !7963)
!8035 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !743, file: !743, line: 2591, type: !6895, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8036 = !DILocalVariable(name: "gs", arg: 1, scope: !8035, file: !743, line: 2591, type: !4380)
!8037 = !DILocation(line: 2591, column: 35, scope: !8035)
!8038 = !DILocation(line: 2594, column: 10, scope: !8035)
!8039 = !DILocation(line: 2594, column: 14, scope: !8035)
!8040 = !DILocation(line: 2594, column: 25, scope: !8035)
!8041 = !DILocation(line: 2594, column: 3, scope: !8035)
!8042 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !743, file: !743, line: 2652, type: !5021, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8043 = !DILocalVariable(name: "gs", arg: 1, scope: !8042, file: !743, line: 2652, type: !4380)
!8044 = !DILocation(line: 2652, column: 36, scope: !8042)
!8045 = !DILocalVariable(name: "index", arg: 2, scope: !8042, file: !743, line: 2652, type: !7)
!8046 = !DILocation(line: 2652, column: 49, scope: !8042)
!8047 = !DILocation(line: 2655, column: 3, scope: !8042)
!8048 = !DILocation(line: 2656, column: 21, scope: !8042)
!8049 = !DILocation(line: 2656, column: 25, scope: !8042)
!8050 = !DILocation(line: 2656, column: 33, scope: !8042)
!8051 = !DILocation(line: 2656, column: 37, scope: !8042)
!8052 = !DILocation(line: 2656, column: 48, scope: !8042)
!8053 = !DILocation(line: 2656, column: 31, scope: !8042)
!8054 = !DILocation(line: 2656, column: 10, scope: !8042)
!8055 = !DILocation(line: 2656, column: 3, scope: !8042)
!8056 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !743, file: !743, line: 2581, type: !6895, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8057 = !DILocalVariable(name: "gs", arg: 1, scope: !8056, file: !743, line: 2581, type: !4380)
!8058 = !DILocation(line: 2581, column: 34, scope: !8056)
!8059 = !DILocation(line: 2584, column: 10, scope: !8056)
!8060 = !DILocation(line: 2584, column: 14, scope: !8056)
!8061 = !DILocation(line: 2584, column: 25, scope: !8056)
!8062 = !DILocation(line: 2584, column: 3, scope: !8056)
!8063 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !743, file: !743, line: 2619, type: !5021, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8064 = !DILocalVariable(name: "gs", arg: 1, scope: !8063, file: !743, line: 2619, type: !4380)
!8065 = !DILocation(line: 2619, column: 35, scope: !8063)
!8066 = !DILocalVariable(name: "index", arg: 2, scope: !8063, file: !743, line: 2619, type: !7)
!8067 = !DILocation(line: 2619, column: 48, scope: !8063)
!8068 = !DILocation(line: 2622, column: 3, scope: !8063)
!8069 = !DILocation(line: 2623, column: 21, scope: !8063)
!8070 = !DILocation(line: 2623, column: 25, scope: !8063)
!8071 = !DILocation(line: 2623, column: 10, scope: !8063)
!8072 = !DILocation(line: 2623, column: 3, scope: !8063)
!8073 = distinct !DISubprogram(name: "maybe_fold_stmt_indirect", scope: !3, file: !3, line: 2163, type: !8074, scopeLine: 2164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8074 = !DISubroutineType(types: !8075)
!8075 = !{!1669, !1669, !1669, !1669}
!8076 = !DILocalVariable(name: "expr", arg: 1, scope: !8073, file: !3, line: 2163, type: !1669)
!8077 = !DILocation(line: 2163, column: 32, scope: !8073)
!8078 = !DILocalVariable(name: "base", arg: 2, scope: !8073, file: !3, line: 2163, type: !1669)
!8079 = !DILocation(line: 2163, column: 43, scope: !8073)
!8080 = !DILocalVariable(name: "offset", arg: 3, scope: !8073, file: !3, line: 2163, type: !1669)
!8081 = !DILocation(line: 2163, column: 54, scope: !8073)
!8082 = !DILocalVariable(name: "t", scope: !8073, file: !3, line: 2165, type: !1669)
!8083 = !DILocation(line: 2165, column: 8, scope: !8073)
!8084 = !DILocalVariable(name: "volatile_p", scope: !8073, file: !3, line: 2166, type: !1748)
!8085 = !DILocation(line: 2166, column: 8, scope: !8073)
!8086 = !DILocation(line: 2166, column: 21, scope: !8073)
!8087 = !DILocalVariable(name: "loc", scope: !8073, file: !3, line: 2167, type: !1756)
!8088 = !DILocation(line: 2167, column: 14, scope: !8073)
!8089 = !DILocation(line: 2167, column: 20, scope: !8073)
!8090 = !DILocation(line: 2172, column: 16, scope: !8073)
!8091 = !DILocation(line: 2172, column: 10, scope: !8073)
!8092 = !DILocation(line: 2172, column: 8, scope: !8073)
!8093 = !DILocation(line: 2173, column: 3, scope: !8073)
!8094 = !DILocation(line: 0, scope: !8073)
!8095 = distinct !{!8095, !8093, !8093}
!8096 = !DILocation(line: 2174, column: 28, scope: !8073)
!8097 = !DILocation(line: 2174, column: 3, scope: !8073)
!8098 = !DILocation(line: 2174, column: 26, scope: !8073)
!8099 = !DILocation(line: 2177, column: 39, scope: !8073)
!8100 = !DILocation(line: 2177, column: 7, scope: !8073)
!8101 = !DILocation(line: 2177, column: 5, scope: !8073)
!8102 = !DILocation(line: 2178, column: 7, scope: !8103)
!8103 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 2178, column: 7)
!8104 = !DILocation(line: 2178, column: 7, scope: !8073)
!8105 = !DILocation(line: 2179, column: 12, scope: !8103)
!8106 = !DILocation(line: 2179, column: 5, scope: !8103)
!8107 = !DILocation(line: 2182, column: 7, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 2182, column: 7)
!8109 = !DILocation(line: 2182, column: 24, scope: !8108)
!8110 = !DILocation(line: 2182, column: 7, scope: !8073)
!8111 = !DILocalVariable(name: "offset2", scope: !8112, file: !3, line: 2184, type: !1669)
!8112 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 2183, column: 5)
!8113 = !DILocation(line: 2184, column: 12, scope: !8112)
!8114 = !DILocation(line: 2186, column: 17, scope: !8112)
!8115 = !DILocation(line: 2186, column: 15, scope: !8112)
!8116 = !DILocation(line: 2187, column: 11, scope: !8117)
!8117 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 2187, column: 11)
!8118 = !DILocation(line: 2187, column: 31, scope: !8117)
!8119 = !DILocation(line: 2187, column: 11, scope: !8112)
!8120 = !DILocation(line: 2188, column: 2, scope: !8117)
!8121 = !DILocation(line: 2189, column: 14, scope: !8112)
!8122 = !DILocation(line: 2189, column: 12, scope: !8112)
!8123 = !DILocation(line: 2191, column: 16, scope: !8112)
!8124 = !DILocation(line: 2191, column: 14, scope: !8112)
!8125 = !DILocation(line: 2193, column: 5, scope: !8112)
!8126 = !DILocation(line: 2195, column: 7, scope: !8127)
!8127 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 2195, column: 7)
!8128 = !DILocation(line: 2195, column: 24, scope: !8127)
!8129 = !DILocation(line: 2195, column: 7, scope: !8073)
!8130 = !DILocalVariable(name: "base_addr", scope: !8131, file: !3, line: 2197, type: !1669)
!8131 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 2196, column: 5)
!8132 = !DILocation(line: 2197, column: 12, scope: !8131)
!8133 = !DILocation(line: 2197, column: 24, scope: !8131)
!8134 = !DILocation(line: 2200, column: 14, scope: !8131)
!8135 = !DILocation(line: 2200, column: 12, scope: !8131)
!8136 = !DILocation(line: 2203, column: 11, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 2203, column: 11)
!8138 = !DILocation(line: 2203, column: 28, scope: !8137)
!8139 = !DILocation(line: 2204, column: 4, scope: !8137)
!8140 = !DILocation(line: 2204, column: 32, scope: !8137)
!8141 = !DILocation(line: 2204, column: 7, scope: !8137)
!8142 = !DILocation(line: 2203, column: 11, scope: !8131)
!8143 = !DILocation(line: 2205, column: 9, scope: !8137)
!8144 = !DILocation(line: 2205, column: 2, scope: !8137)
!8145 = !DILocation(line: 2208, column: 26, scope: !8146)
!8146 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 2208, column: 11)
!8147 = !DILocation(line: 2208, column: 11, scope: !8146)
!8148 = !DILocation(line: 2208, column: 11, scope: !8131)
!8149 = !DILocation(line: 2209, column: 9, scope: !8146)
!8150 = !DILocation(line: 2209, column: 2, scope: !8146)
!8151 = !DILocation(line: 2212, column: 43, scope: !8131)
!8152 = !DILocation(line: 2212, column: 48, scope: !8131)
!8153 = !DILocation(line: 2212, column: 59, scope: !8131)
!8154 = !DILocation(line: 2213, column: 8, scope: !8131)
!8155 = !DILocation(line: 2212, column: 11, scope: !8131)
!8156 = !DILocation(line: 2212, column: 9, scope: !8131)
!8157 = !DILocation(line: 2214, column: 11, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 2214, column: 11)
!8159 = !DILocation(line: 2214, column: 11, scope: !8131)
!8160 = !DILocation(line: 2219, column: 9, scope: !8161)
!8161 = distinct !DILexicalBlock(scope: !8162, file: !3, line: 2219, column: 8)
!8162 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 2215, column: 2)
!8163 = !DILocation(line: 2219, column: 8, scope: !8162)
!8164 = !DILocation(line: 2220, column: 31, scope: !8161)
!8165 = !DILocation(line: 2220, column: 6, scope: !8161)
!8166 = !DILocation(line: 2220, column: 29, scope: !8161)
!8167 = !DILocation(line: 2221, column: 11, scope: !8162)
!8168 = !DILocation(line: 2221, column: 4, scope: !8162)
!8169 = !DILocation(line: 2223, column: 5, scope: !8131)
!8170 = !DILocation(line: 2233, column: 11, scope: !8171)
!8171 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 2225, column: 5)
!8172 = !DILocation(line: 2233, column: 9, scope: !8171)
!8173 = !DILocation(line: 2234, column: 7, scope: !8171)
!8174 = !DILocation(line: 2235, column: 11, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 2235, column: 11)
!8176 = !DILocation(line: 2235, column: 25, scope: !8175)
!8177 = !DILocation(line: 2236, column: 4, scope: !8175)
!8178 = !DILocation(line: 2236, column: 7, scope: !8175)
!8179 = !DILocation(line: 2236, column: 39, scope: !8175)
!8180 = !DILocation(line: 2235, column: 11, scope: !8171)
!8181 = !DILocation(line: 2245, column: 11, scope: !8182)
!8182 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 2237, column: 2)
!8183 = !DILocation(line: 2245, column: 4, scope: !8182)
!8184 = !DILocation(line: 2249, column: 11, scope: !8185)
!8185 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 2249, column: 11)
!8186 = !DILocation(line: 2249, column: 11, scope: !8171)
!8187 = !DILocation(line: 2251, column: 47, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8185, file: !3, line: 2250, column: 2)
!8189 = !DILocation(line: 2251, column: 52, scope: !8188)
!8190 = !DILocation(line: 2251, column: 58, scope: !8188)
!8191 = !DILocation(line: 2252, column: 19, scope: !8188)
!8192 = !DILocation(line: 2251, column: 15, scope: !8188)
!8193 = !DILocation(line: 2251, column: 13, scope: !8188)
!8194 = !DILocation(line: 2253, column: 8, scope: !8195)
!8195 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 2253, column: 8)
!8196 = !DILocation(line: 2253, column: 8, scope: !8188)
!8197 = !DILocation(line: 2254, column: 13, scope: !8195)
!8198 = !DILocation(line: 2254, column: 6, scope: !8195)
!8199 = !DILocation(line: 2255, column: 2, scope: !8188)
!8200 = !DILocation(line: 2259, column: 3, scope: !8073)
!8201 = !DILocation(line: 2260, column: 1, scope: !8073)
!8202 = distinct !DISubprogram(name: "ccp_fold_builtin", scope: !3, file: !3, line: 2583, type: !6292, scopeLine: 2584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8203 = !DILocalVariable(name: "stmt", arg: 1, scope: !8202, file: !3, line: 2583, type: !1959)
!8204 = !DILocation(line: 2583, column: 26, scope: !8202)
!8205 = !DILocalVariable(name: "result", scope: !8202, file: !3, line: 2585, type: !1669)
!8206 = !DILocation(line: 2585, column: 8, scope: !8202)
!8207 = !DILocalVariable(name: "val", scope: !8202, file: !3, line: 2585, type: !8208)
!8208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1669, size: 192, elements: !1702)
!8209 = !DILocation(line: 2585, column: 16, scope: !8202)
!8210 = !DILocalVariable(name: "callee", scope: !8202, file: !3, line: 2586, type: !1669)
!8211 = !DILocation(line: 2586, column: 8, scope: !8202)
!8212 = !DILocalVariable(name: "a", scope: !8202, file: !3, line: 2586, type: !1669)
!8213 = !DILocation(line: 2586, column: 16, scope: !8202)
!8214 = !DILocalVariable(name: "arg_idx", scope: !8202, file: !3, line: 2587, type: !1725)
!8215 = !DILocation(line: 2587, column: 7, scope: !8202)
!8216 = !DILocalVariable(name: "type", scope: !8202, file: !3, line: 2587, type: !1725)
!8217 = !DILocation(line: 2587, column: 16, scope: !8202)
!8218 = !DILocalVariable(name: "visited", scope: !8202, file: !3, line: 2588, type: !2508)
!8219 = !DILocation(line: 2588, column: 10, scope: !8202)
!8220 = !DILocalVariable(name: "ignore", scope: !8202, file: !3, line: 2589, type: !1748)
!8221 = !DILocation(line: 2589, column: 8, scope: !8202)
!8222 = !DILocalVariable(name: "nargs", scope: !8202, file: !3, line: 2590, type: !1725)
!8223 = !DILocation(line: 2590, column: 7, scope: !8202)
!8224 = !DILocalVariable(name: "loc", scope: !8202, file: !3, line: 2591, type: !1756)
!8225 = !DILocation(line: 2591, column: 14, scope: !8202)
!8226 = !DILocation(line: 2591, column: 37, scope: !8202)
!8227 = !DILocation(line: 2591, column: 20, scope: !8202)
!8228 = !DILocation(line: 2593, column: 3, scope: !8202)
!8229 = !DILocation(line: 2595, column: 30, scope: !8202)
!8230 = !DILocation(line: 2595, column: 13, scope: !8202)
!8231 = !DILocation(line: 2595, column: 36, scope: !8202)
!8232 = !DILocation(line: 2595, column: 12, scope: !8202)
!8233 = !DILocation(line: 2595, column: 10, scope: !8202)
!8234 = !DILocation(line: 2599, column: 28, scope: !8202)
!8235 = !DILocation(line: 2599, column: 34, scope: !8202)
!8236 = !DILocation(line: 2599, column: 12, scope: !8202)
!8237 = !DILocation(line: 2599, column: 10, scope: !8202)
!8238 = !DILocation(line: 2600, column: 7, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2600, column: 7)
!8240 = !DILocation(line: 2600, column: 7, scope: !8202)
!8241 = !DILocation(line: 2602, column: 11, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 2602, column: 11)
!8243 = distinct !DILexicalBlock(scope: !8239, file: !3, line: 2601, column: 5)
!8244 = !DILocation(line: 2602, column: 11, scope: !8243)
!8245 = !DILocation(line: 2603, column: 2, scope: !8242)
!8246 = !DILocation(line: 2604, column: 14, scope: !8243)
!8247 = !DILocation(line: 2604, column: 7, scope: !8243)
!8248 = !DILocation(line: 2608, column: 32, scope: !8202)
!8249 = !DILocation(line: 2608, column: 12, scope: !8202)
!8250 = !DILocation(line: 2608, column: 10, scope: !8202)
!8251 = !DILocation(line: 2609, column: 7, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2609, column: 7)
!8253 = !DILocation(line: 2609, column: 36, scope: !8252)
!8254 = !DILocation(line: 2609, column: 7, scope: !8202)
!8255 = !DILocation(line: 2610, column: 5, scope: !8252)
!8256 = !DILocation(line: 2614, column: 33, scope: !8202)
!8257 = !DILocation(line: 2614, column: 11, scope: !8202)
!8258 = !DILocation(line: 2614, column: 9, scope: !8202)
!8259 = !DILocation(line: 2615, column: 7, scope: !8260)
!8260 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2615, column: 7)
!8261 = !DILocation(line: 2615, column: 13, scope: !8260)
!8262 = !DILocation(line: 2615, column: 7, scope: !8202)
!8263 = !DILocation(line: 2616, column: 5, scope: !8260)
!8264 = !DILocation(line: 2619, column: 11, scope: !8202)
!8265 = !DILocation(line: 2619, column: 3, scope: !8202)
!8266 = !DILocation(line: 2624, column: 15, scope: !8267)
!8267 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2620, column: 5)
!8268 = !DILocation(line: 2625, column: 12, scope: !8267)
!8269 = !DILocation(line: 2626, column: 7, scope: !8267)
!8270 = !DILocation(line: 2629, column: 15, scope: !8267)
!8271 = !DILocation(line: 2630, column: 12, scope: !8267)
!8272 = !DILocation(line: 2631, column: 7, scope: !8267)
!8273 = !DILocation(line: 2637, column: 15, scope: !8267)
!8274 = !DILocation(line: 2638, column: 12, scope: !8267)
!8275 = !DILocation(line: 2639, column: 7, scope: !8267)
!8276 = !DILocation(line: 2642, column: 15, scope: !8267)
!8277 = !DILocation(line: 2643, column: 12, scope: !8267)
!8278 = !DILocation(line: 2644, column: 7, scope: !8267)
!8279 = !DILocation(line: 2647, column: 15, scope: !8267)
!8280 = !DILocation(line: 2648, column: 12, scope: !8267)
!8281 = !DILocation(line: 2649, column: 7, scope: !8267)
!8282 = !DILocation(line: 2651, column: 7, scope: !8267)
!8283 = !DILocation(line: 2654, column: 7, scope: !8284)
!8284 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2654, column: 7)
!8285 = !DILocation(line: 2654, column: 18, scope: !8284)
!8286 = !DILocation(line: 2654, column: 15, scope: !8284)
!8287 = !DILocation(line: 2654, column: 7, scope: !8202)
!8288 = !DILocation(line: 2655, column: 5, scope: !8284)
!8289 = !DILocation(line: 2658, column: 13, scope: !8202)
!8290 = !DILocation(line: 2658, column: 11, scope: !8202)
!8291 = !DILocation(line: 2659, column: 17, scope: !8202)
!8292 = !DILocation(line: 2659, column: 3, scope: !8202)
!8293 = !DILocation(line: 2661, column: 3, scope: !8202)
!8294 = !DILocation(line: 2662, column: 24, scope: !8202)
!8295 = !DILocation(line: 2662, column: 30, scope: !8202)
!8296 = !DILocation(line: 2662, column: 7, scope: !8202)
!8297 = !DILocation(line: 2662, column: 5, scope: !8202)
!8298 = !DILocation(line: 2663, column: 27, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2663, column: 7)
!8300 = !DILocation(line: 2663, column: 35, scope: !8299)
!8301 = !DILocation(line: 2663, column: 31, scope: !8299)
!8302 = !DILocation(line: 2663, column: 45, scope: !8299)
!8303 = !DILocation(line: 2663, column: 54, scope: !8299)
!8304 = !DILocation(line: 2663, column: 8, scope: !8299)
!8305 = !DILocation(line: 2663, column: 7, scope: !8202)
!8306 = !DILocation(line: 2664, column: 9, scope: !8299)
!8307 = !DILocation(line: 2664, column: 5, scope: !8299)
!8308 = !DILocation(line: 2664, column: 18, scope: !8299)
!8309 = !DILocation(line: 2666, column: 3, scope: !8202)
!8310 = !DILocation(line: 2668, column: 10, scope: !8202)
!8311 = !DILocation(line: 2669, column: 11, scope: !8202)
!8312 = !DILocation(line: 2669, column: 3, scope: !8202)
!8313 = !DILocation(line: 2672, column: 11, scope: !8314)
!8314 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2672, column: 11)
!8315 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2670, column: 5)
!8316 = !DILocation(line: 2672, column: 18, scope: !8314)
!8317 = !DILocation(line: 2672, column: 21, scope: !8314)
!8318 = !DILocation(line: 2672, column: 27, scope: !8314)
!8319 = !DILocation(line: 2672, column: 11, scope: !8315)
!8320 = !DILocalVariable(name: "new_val", scope: !8321, file: !3, line: 2674, type: !1669)
!8321 = distinct !DILexicalBlock(scope: !8314, file: !3, line: 2673, column: 2)
!8322 = !DILocation(line: 2674, column: 9, scope: !8321)
!8323 = !DILocation(line: 2675, column: 15, scope: !8321)
!8324 = !DILocation(line: 2679, column: 23, scope: !8325)
!8325 = distinct !DILexicalBlock(scope: !8321, file: !3, line: 2679, column: 8)
!8326 = !DILocation(line: 2679, column: 8, scope: !8325)
!8327 = !DILocation(line: 2680, column: 8, scope: !8325)
!8328 = !DILocation(line: 2680, column: 28, scope: !8325)
!8329 = !DILocation(line: 2680, column: 12, scope: !8325)
!8330 = !DILocation(line: 2681, column: 5, scope: !8325)
!8331 = !DILocation(line: 2681, column: 23, scope: !8325)
!8332 = !DILocation(line: 2681, column: 8, scope: !8325)
!8333 = !DILocation(line: 2679, column: 8, scope: !8321)
!8334 = !DILocation(line: 2682, column: 13, scope: !8325)
!8335 = !DILocation(line: 2682, column: 6, scope: !8325)
!8336 = !DILocation(line: 2683, column: 2, scope: !8321)
!8337 = !DILocation(line: 2684, column: 7, scope: !8315)
!8338 = !DILocation(line: 2687, column: 11, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2687, column: 11)
!8340 = !DILocation(line: 2687, column: 18, scope: !8339)
!8341 = !DILocation(line: 2687, column: 36, scope: !8339)
!8342 = !DILocation(line: 2687, column: 21, scope: !8339)
!8343 = !DILocation(line: 2687, column: 44, scope: !8339)
!8344 = !DILocation(line: 2687, column: 47, scope: !8339)
!8345 = !DILocation(line: 2687, column: 53, scope: !8339)
!8346 = !DILocation(line: 2687, column: 11, scope: !8315)
!8347 = !DILocation(line: 2688, column: 32, scope: !8339)
!8348 = !DILocation(line: 2688, column: 37, scope: !8339)
!8349 = !DILocation(line: 2689, column: 56, scope: !8339)
!8350 = !DILocation(line: 2689, column: 39, scope: !8339)
!8351 = !DILocation(line: 2690, column: 56, scope: !8339)
!8352 = !DILocation(line: 2690, column: 39, scope: !8339)
!8353 = !DILocation(line: 2691, column: 11, scope: !8339)
!8354 = !DILocation(line: 2688, column: 11, scope: !8339)
!8355 = !DILocation(line: 2688, column: 9, scope: !8339)
!8356 = !DILocation(line: 2688, column: 2, scope: !8339)
!8357 = !DILocation(line: 2692, column: 7, scope: !8315)
!8358 = !DILocation(line: 2695, column: 11, scope: !8359)
!8359 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2695, column: 11)
!8360 = !DILocation(line: 2695, column: 18, scope: !8359)
!8361 = !DILocation(line: 2695, column: 36, scope: !8359)
!8362 = !DILocation(line: 2695, column: 21, scope: !8359)
!8363 = !DILocation(line: 2695, column: 44, scope: !8359)
!8364 = !DILocation(line: 2695, column: 47, scope: !8359)
!8365 = !DILocation(line: 2695, column: 53, scope: !8359)
!8366 = !DILocation(line: 2695, column: 11, scope: !8315)
!8367 = !DILocation(line: 2696, column: 33, scope: !8359)
!8368 = !DILocation(line: 2696, column: 38, scope: !8359)
!8369 = !DILocation(line: 2697, column: 57, scope: !8359)
!8370 = !DILocation(line: 2697, column: 40, scope: !8359)
!8371 = !DILocation(line: 2698, column: 57, scope: !8359)
!8372 = !DILocation(line: 2698, column: 40, scope: !8359)
!8373 = !DILocation(line: 2699, column: 57, scope: !8359)
!8374 = !DILocation(line: 2699, column: 40, scope: !8359)
!8375 = !DILocation(line: 2700, column: 12, scope: !8359)
!8376 = !DILocation(line: 2696, column: 11, scope: !8359)
!8377 = !DILocation(line: 2696, column: 9, scope: !8359)
!8378 = !DILocation(line: 2696, column: 2, scope: !8359)
!8379 = !DILocation(line: 2701, column: 7, scope: !8315)
!8380 = !DILocation(line: 2704, column: 11, scope: !8381)
!8381 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2704, column: 11)
!8382 = !DILocation(line: 2704, column: 17, scope: !8381)
!8383 = !DILocation(line: 2704, column: 11, scope: !8315)
!8384 = !DILocation(line: 2705, column: 31, scope: !8381)
!8385 = !DILocation(line: 2705, column: 53, scope: !8381)
!8386 = !DILocation(line: 2705, column: 36, scope: !8381)
!8387 = !DILocation(line: 2706, column: 27, scope: !8381)
!8388 = !DILocation(line: 2706, column: 10, scope: !8381)
!8389 = !DILocation(line: 2707, column: 10, scope: !8381)
!8390 = !DILocation(line: 2707, column: 25, scope: !8381)
!8391 = !DILocation(line: 2705, column: 11, scope: !8381)
!8392 = !DILocation(line: 2705, column: 9, scope: !8381)
!8393 = !DILocation(line: 2705, column: 2, scope: !8381)
!8394 = !DILocation(line: 2708, column: 7, scope: !8315)
!8395 = !DILocation(line: 2711, column: 11, scope: !8396)
!8396 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2711, column: 11)
!8397 = !DILocation(line: 2711, column: 17, scope: !8396)
!8398 = !DILocation(line: 2711, column: 11, scope: !8315)
!8399 = !DILocation(line: 2712, column: 31, scope: !8396)
!8400 = !DILocation(line: 2712, column: 53, scope: !8396)
!8401 = !DILocation(line: 2712, column: 36, scope: !8396)
!8402 = !DILocation(line: 2713, column: 27, scope: !8396)
!8403 = !DILocation(line: 2713, column: 10, scope: !8396)
!8404 = !DILocation(line: 2714, column: 10, scope: !8396)
!8405 = !DILocation(line: 2714, column: 24, scope: !8396)
!8406 = !DILocation(line: 2712, column: 11, scope: !8396)
!8407 = !DILocation(line: 2712, column: 9, scope: !8396)
!8408 = !DILocation(line: 2712, column: 2, scope: !8396)
!8409 = !DILocation(line: 2715, column: 7, scope: !8315)
!8410 = !DILocation(line: 2721, column: 11, scope: !8411)
!8411 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2721, column: 11)
!8412 = !DILocation(line: 2721, column: 18, scope: !8411)
!8413 = !DILocation(line: 2721, column: 36, scope: !8411)
!8414 = !DILocation(line: 2721, column: 21, scope: !8411)
!8415 = !DILocation(line: 2721, column: 44, scope: !8411)
!8416 = !DILocation(line: 2721, column: 47, scope: !8411)
!8417 = !DILocation(line: 2721, column: 53, scope: !8411)
!8418 = !DILocation(line: 2721, column: 11, scope: !8315)
!8419 = !DILocation(line: 2722, column: 36, scope: !8411)
!8420 = !DILocation(line: 2722, column: 41, scope: !8411)
!8421 = !DILocation(line: 2723, column: 60, scope: !8411)
!8422 = !DILocation(line: 2723, column: 43, scope: !8411)
!8423 = !DILocation(line: 2724, column: 60, scope: !8411)
!8424 = !DILocation(line: 2724, column: 43, scope: !8411)
!8425 = !DILocation(line: 2725, column: 60, scope: !8411)
!8426 = !DILocation(line: 2725, column: 43, scope: !8411)
!8427 = !DILocation(line: 2726, column: 60, scope: !8411)
!8428 = !DILocation(line: 2726, column: 43, scope: !8411)
!8429 = !DILocation(line: 2727, column: 8, scope: !8411)
!8430 = !DILocation(line: 2727, column: 16, scope: !8411)
!8431 = !DILocation(line: 2728, column: 8, scope: !8411)
!8432 = !DILocation(line: 2722, column: 11, scope: !8411)
!8433 = !DILocation(line: 2722, column: 9, scope: !8411)
!8434 = !DILocation(line: 2722, column: 2, scope: !8411)
!8435 = !DILocation(line: 2729, column: 7, scope: !8315)
!8436 = !DILocation(line: 2733, column: 11, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2733, column: 11)
!8438 = !DILocation(line: 2733, column: 18, scope: !8437)
!8439 = !DILocation(line: 2733, column: 36, scope: !8437)
!8440 = !DILocation(line: 2733, column: 21, scope: !8437)
!8441 = !DILocation(line: 2733, column: 44, scope: !8437)
!8442 = !DILocation(line: 2733, column: 47, scope: !8437)
!8443 = !DILocation(line: 2733, column: 53, scope: !8437)
!8444 = !DILocation(line: 2733, column: 11, scope: !8315)
!8445 = !DILocation(line: 2734, column: 36, scope: !8437)
!8446 = !DILocation(line: 2734, column: 41, scope: !8437)
!8447 = !DILocation(line: 2735, column: 60, scope: !8437)
!8448 = !DILocation(line: 2735, column: 43, scope: !8437)
!8449 = !DILocation(line: 2736, column: 60, scope: !8437)
!8450 = !DILocation(line: 2736, column: 43, scope: !8437)
!8451 = !DILocation(line: 2737, column: 60, scope: !8437)
!8452 = !DILocation(line: 2737, column: 43, scope: !8437)
!8453 = !DILocation(line: 2738, column: 8, scope: !8437)
!8454 = !DILocation(line: 2738, column: 16, scope: !8437)
!8455 = !DILocation(line: 2739, column: 8, scope: !8437)
!8456 = !DILocation(line: 2734, column: 11, scope: !8437)
!8457 = !DILocation(line: 2734, column: 9, scope: !8437)
!8458 = !DILocation(line: 2734, column: 2, scope: !8437)
!8459 = !DILocation(line: 2740, column: 7, scope: !8315)
!8460 = !DILocation(line: 2743, column: 11, scope: !8461)
!8461 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2743, column: 11)
!8462 = !DILocation(line: 2743, column: 18, scope: !8461)
!8463 = !DILocation(line: 2743, column: 36, scope: !8461)
!8464 = !DILocation(line: 2743, column: 21, scope: !8461)
!8465 = !DILocation(line: 2743, column: 44, scope: !8461)
!8466 = !DILocation(line: 2743, column: 47, scope: !8461)
!8467 = !DILocation(line: 2743, column: 53, scope: !8461)
!8468 = !DILocation(line: 2743, column: 11, scope: !8315)
!8469 = !DILocation(line: 2744, column: 37, scope: !8461)
!8470 = !DILocation(line: 2744, column: 59, scope: !8461)
!8471 = !DILocation(line: 2744, column: 42, scope: !8461)
!8472 = !DILocation(line: 2745, column: 61, scope: !8461)
!8473 = !DILocation(line: 2745, column: 44, scope: !8461)
!8474 = !DILocation(line: 2746, column: 61, scope: !8461)
!8475 = !DILocation(line: 2746, column: 44, scope: !8461)
!8476 = !DILocation(line: 2747, column: 61, scope: !8461)
!8477 = !DILocation(line: 2747, column: 44, scope: !8461)
!8478 = !DILocation(line: 2748, column: 9, scope: !8461)
!8479 = !DILocation(line: 2744, column: 11, scope: !8461)
!8480 = !DILocation(line: 2744, column: 9, scope: !8461)
!8481 = !DILocation(line: 2744, column: 2, scope: !8461)
!8482 = !DILocation(line: 2749, column: 7, scope: !8315)
!8483 = !DILocation(line: 2753, column: 11, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 2753, column: 11)
!8485 = !DILocation(line: 2753, column: 18, scope: !8484)
!8486 = !DILocation(line: 2753, column: 36, scope: !8484)
!8487 = !DILocation(line: 2753, column: 21, scope: !8484)
!8488 = !DILocation(line: 2753, column: 11, scope: !8315)
!8489 = !DILocation(line: 2754, column: 45, scope: !8484)
!8490 = !DILocation(line: 2754, column: 51, scope: !8484)
!8491 = !DILocation(line: 2755, column: 52, scope: !8484)
!8492 = !DILocation(line: 2754, column: 11, scope: !8484)
!8493 = !DILocation(line: 2754, column: 9, scope: !8484)
!8494 = !DILocation(line: 2754, column: 2, scope: !8484)
!8495 = !DILocation(line: 2756, column: 7, scope: !8315)
!8496 = !DILocation(line: 2759, column: 7, scope: !8315)
!8497 = !DILocation(line: 2760, column: 5, scope: !8315)
!8498 = !DILocation(line: 2762, column: 7, scope: !8499)
!8499 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 2762, column: 7)
!8500 = !DILocation(line: 2762, column: 14, scope: !8499)
!8501 = !DILocation(line: 2762, column: 17, scope: !8499)
!8502 = !DILocation(line: 2762, column: 7, scope: !8202)
!8503 = !DILocation(line: 2763, column: 35, scope: !8499)
!8504 = !DILocation(line: 2763, column: 14, scope: !8499)
!8505 = !DILocation(line: 2763, column: 12, scope: !8499)
!8506 = !DILocation(line: 2763, column: 5, scope: !8499)
!8507 = !DILocation(line: 2764, column: 10, scope: !8202)
!8508 = !DILocation(line: 2764, column: 3, scope: !8202)
!8509 = !DILocation(line: 2765, column: 1, scope: !8202)
!8510 = distinct !DISubprogram(name: "gimplify_and_update_call_from_tree", scope: !3, file: !3, line: 3355, type: !8511, scopeLine: 3356, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8511 = !DISubroutineType(types: !8512)
!8512 = !{null, !4431, !1669}
!8513 = !DILocalVariable(name: "si_p", arg: 1, scope: !8510, file: !3, line: 3355, type: !4431)
!8514 = !DILocation(line: 3355, column: 59, scope: !8510)
!8515 = !DILocalVariable(name: "expr", arg: 2, scope: !8510, file: !3, line: 3355, type: !1669)
!8516 = !DILocation(line: 3355, column: 70, scope: !8510)
!8517 = !DILocalVariable(name: "lhs", scope: !8510, file: !3, line: 3357, type: !1669)
!8518 = !DILocation(line: 3357, column: 8, scope: !8510)
!8519 = !DILocalVariable(name: "tmp", scope: !8510, file: !3, line: 3358, type: !1669)
!8520 = !DILocation(line: 3358, column: 8, scope: !8510)
!8521 = !DILocalVariable(name: "stmt", scope: !8510, file: !3, line: 3359, type: !1959)
!8522 = !DILocation(line: 3359, column: 10, scope: !8510)
!8523 = !DILocalVariable(name: "new_stmt", scope: !8510, file: !3, line: 3359, type: !1959)
!8524 = !DILocation(line: 3359, column: 16, scope: !8510)
!8525 = !DILocalVariable(name: "i", scope: !8510, file: !3, line: 3360, type: !4432)
!8526 = !DILocation(line: 3360, column: 24, scope: !8510)
!8527 = !DILocalVariable(name: "stmts", scope: !8510, file: !3, line: 3361, type: !1949)
!8528 = !DILocation(line: 3361, column: 14, scope: !8510)
!8529 = !DILocation(line: 3361, column: 22, scope: !8510)
!8530 = !DILocalVariable(name: "gctx", scope: !8510, file: !3, line: 3362, type: !8531)
!8531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_ctx", file: !743, line: 980, size: 576, elements: !8532)
!8532 = !{!8533, !8535, !8541, !8542, !8543, !8544, !8545, !8551, !8552, !8553, !8554, !8555}
!8533 = !DIDerivedType(tag: DW_TAG_member, name: "prev_context", scope: !8531, file: !743, line: 982, baseType: !8534, size: 64)
!8534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8531, size: 64)
!8535 = !DIDerivedType(tag: DW_TAG_member, name: "bind_expr_stack", scope: !8531, file: !743, line: 984, baseType: !8536, size: 64, offset: 64)
!8536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8537, size: 64)
!8537 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !743, line: 34, baseType: !8538)
!8538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !743, line: 34, size: 128, elements: !8539)
!8539 = !{!8540}
!8540 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !8538, file: !743, line: 34, baseType: !2477, size: 128)
!8541 = !DIDerivedType(tag: DW_TAG_member, name: "temps", scope: !8531, file: !743, line: 985, baseType: !1669, size: 64, offset: 128)
!8542 = !DIDerivedType(tag: DW_TAG_member, name: "conditional_cleanups", scope: !8531, file: !743, line: 986, baseType: !1949, size: 64, offset: 192)
!8543 = !DIDerivedType(tag: DW_TAG_member, name: "exit_label", scope: !8531, file: !743, line: 987, baseType: !1669, size: 64, offset: 256)
!8544 = !DIDerivedType(tag: DW_TAG_member, name: "return_temp", scope: !8531, file: !743, line: 988, baseType: !1669, size: 64, offset: 320)
!8545 = !DIDerivedType(tag: DW_TAG_member, name: "case_labels", scope: !8531, file: !743, line: 990, baseType: !8546, size: 64, offset: 384)
!8546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8547, size: 64)
!8547 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !8548)
!8548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !8549)
!8549 = !{!8550}
!8550 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !8548, file: !135, line: 184, baseType: !2490, size: 128)
!8551 = !DIDerivedType(tag: DW_TAG_member, name: "temp_htab", scope: !8531, file: !743, line: 992, baseType: !2424, size: 64, offset: 448)
!8552 = !DIDerivedType(tag: DW_TAG_member, name: "conditions", scope: !8531, file: !743, line: 994, baseType: !1725, size: 32, offset: 512)
!8553 = !DIDerivedType(tag: DW_TAG_member, name: "save_stack", scope: !8531, file: !743, line: 995, baseType: !1748, size: 8, offset: 544)
!8554 = !DIDerivedType(tag: DW_TAG_member, name: "into_ssa", scope: !8531, file: !743, line: 996, baseType: !1748, size: 8, offset: 552)
!8555 = !DIDerivedType(tag: DW_TAG_member, name: "allow_rhs_cond_expr", scope: !8531, file: !743, line: 997, baseType: !1748, size: 8, offset: 560)
!8556 = !DILocation(line: 3362, column: 23, scope: !8510)
!8557 = !DILocation(line: 3364, column: 21, scope: !8510)
!8558 = !DILocation(line: 3364, column: 10, scope: !8510)
!8559 = !DILocation(line: 3364, column: 8, scope: !8510)
!8560 = !DILocation(line: 3366, column: 3, scope: !8510)
!8561 = !DILocation(line: 3368, column: 26, scope: !8510)
!8562 = !DILocation(line: 3368, column: 9, scope: !8510)
!8563 = !DILocation(line: 3368, column: 7, scope: !8510)
!8564 = !DILocation(line: 3370, column: 3, scope: !8510)
!8565 = !DILocation(line: 3372, column: 7, scope: !8566)
!8566 = distinct !DILexicalBlock(scope: !8510, file: !3, line: 3372, column: 7)
!8567 = !DILocation(line: 3372, column: 11, scope: !8566)
!8568 = !DILocation(line: 3372, column: 7, scope: !8510)
!8569 = !DILocation(line: 3373, column: 23, scope: !8566)
!8570 = !DILocation(line: 3373, column: 5, scope: !8566)
!8571 = !DILocation(line: 3375, column: 36, scope: !8566)
!8572 = !DILocation(line: 3375, column: 11, scope: !8566)
!8573 = !DILocation(line: 3375, column: 9, scope: !8566)
!8574 = !DILocation(line: 3377, column: 3, scope: !8510)
!8575 = !DILocation(line: 3379, column: 28, scope: !8576)
!8576 = distinct !DILexicalBlock(scope: !8510, file: !3, line: 3379, column: 7)
!8577 = !DILocation(line: 3379, column: 7, scope: !8576)
!8578 = !DILocation(line: 3379, column: 7, scope: !8510)
!8579 = !DILocation(line: 3380, column: 33, scope: !8576)
!8580 = !DILocation(line: 3380, column: 57, scope: !8576)
!8581 = !DILocation(line: 3380, column: 40, scope: !8576)
!8582 = !DILocation(line: 3380, column: 5, scope: !8576)
!8583 = !DILocation(line: 3383, column: 23, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8510, file: !3, line: 3383, column: 3)
!8585 = !DILocation(line: 3383, column: 12, scope: !8584)
!8586 = !DILocation(line: 3383, column: 8, scope: !8584)
!8587 = !DILocation(line: 3383, column: 32, scope: !8588)
!8588 = distinct !DILexicalBlock(scope: !8584, file: !3, line: 3383, column: 3)
!8589 = !DILocation(line: 3383, column: 31, scope: !8588)
!8590 = !DILocation(line: 3383, column: 3, scope: !8584)
!8591 = !DILocation(line: 3385, column: 16, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 3384, column: 3)
!8593 = !DILocation(line: 3385, column: 14, scope: !8592)
!8594 = !DILocation(line: 3386, column: 31, scope: !8592)
!8595 = !DILocation(line: 3386, column: 5, scope: !8592)
!8596 = !DILocation(line: 3387, column: 24, scope: !8592)
!8597 = !DILocation(line: 3387, column: 30, scope: !8592)
!8598 = !DILocation(line: 3387, column: 5, scope: !8592)
!8599 = !DILocation(line: 3388, column: 32, scope: !8592)
!8600 = !DILocation(line: 3388, column: 5, scope: !8592)
!8601 = !DILocation(line: 3389, column: 15, scope: !8592)
!8602 = !DILocation(line: 3389, column: 5, scope: !8592)
!8603 = !DILocation(line: 3390, column: 3, scope: !8592)
!8604 = !DILocation(line: 3383, column: 47, scope: !8588)
!8605 = !DILocation(line: 3383, column: 3, scope: !8588)
!8606 = distinct !{!8606, !8590, !8607}
!8607 = !DILocation(line: 3390, column: 3, scope: !8584)
!8608 = !DILocation(line: 3392, column: 7, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8510, file: !3, line: 3392, column: 7)
!8610 = !DILocation(line: 3392, column: 11, scope: !8609)
!8611 = !DILocation(line: 3392, column: 7, scope: !8510)
!8612 = !DILocation(line: 3394, column: 18, scope: !8613)
!8613 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 3393, column: 5)
!8614 = !DILocation(line: 3394, column: 16, scope: !8613)
!8615 = !DILocation(line: 3395, column: 25, scope: !8613)
!8616 = !DILocation(line: 3395, column: 7, scope: !8613)
!8617 = !DILocation(line: 3396, column: 21, scope: !8613)
!8618 = !DILocation(line: 3396, column: 7, scope: !8613)
!8619 = !DILocation(line: 3397, column: 5, scope: !8613)
!8620 = !DILocation(line: 3400, column: 18, scope: !8621)
!8621 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 3399, column: 5)
!8622 = !DILocation(line: 3400, column: 16, scope: !8621)
!8623 = !DILocation(line: 3401, column: 24, scope: !8621)
!8624 = !DILocation(line: 3401, column: 47, scope: !8621)
!8625 = !DILocation(line: 3401, column: 34, scope: !8621)
!8626 = !DILocation(line: 3401, column: 7, scope: !8621)
!8627 = !DILocation(line: 3402, column: 24, scope: !8621)
!8628 = !DILocation(line: 3402, column: 47, scope: !8621)
!8629 = !DILocation(line: 3402, column: 34, scope: !8621)
!8630 = !DILocation(line: 3402, column: 7, scope: !8621)
!8631 = !DILocation(line: 3403, column: 40, scope: !8621)
!8632 = !DILocation(line: 3403, column: 50, scope: !8621)
!8633 = !DILocation(line: 3403, column: 7, scope: !8621)
!8634 = !DILocation(line: 3406, column: 24, scope: !8510)
!8635 = !DILocation(line: 3406, column: 51, scope: !8510)
!8636 = !DILocation(line: 3406, column: 34, scope: !8510)
!8637 = !DILocation(line: 3406, column: 3, scope: !8510)
!8638 = !DILocation(line: 3407, column: 16, scope: !8510)
!8639 = !DILocation(line: 3407, column: 22, scope: !8510)
!8640 = !DILocation(line: 3407, column: 3, scope: !8510)
!8641 = !DILocation(line: 3408, column: 1, scope: !8510)
!8642 = distinct !DISubprogram(name: "gimple_call_set_fn", scope: !743, file: !743, line: 1932, type: !7407, scopeLine: 1933, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8643 = !DILocalVariable(name: "gs", arg: 1, scope: !8642, file: !743, line: 1932, type: !1959)
!8644 = !DILocation(line: 1932, column: 28, scope: !8642)
!8645 = !DILocalVariable(name: "fn", arg: 2, scope: !8642, file: !743, line: 1932, type: !1669)
!8646 = !DILocation(line: 1932, column: 37, scope: !8642)
!8647 = !DILocation(line: 1935, column: 18, scope: !8642)
!8648 = !DILocation(line: 1935, column: 25, scope: !8642)
!8649 = !DILocation(line: 1935, column: 3, scope: !8642)
!8650 = !DILocation(line: 1936, column: 1, scope: !8642)
!8651 = distinct !DISubprogram(name: "get_maxval_strlen", scope: !3, file: !3, line: 2468, type: !8652, scopeLine: 2469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8652 = !DISubroutineType(types: !8653)
!8653 = !{!1748, !1669, !1993, !2508, !1725}
!8654 = !DILocalVariable(name: "arg", arg: 1, scope: !8651, file: !3, line: 2468, type: !1669)
!8655 = !DILocation(line: 2468, column: 25, scope: !8651)
!8656 = !DILocalVariable(name: "length", arg: 2, scope: !8651, file: !3, line: 2468, type: !1993)
!8657 = !DILocation(line: 2468, column: 36, scope: !8651)
!8658 = !DILocalVariable(name: "visited", arg: 3, scope: !8651, file: !3, line: 2468, type: !2508)
!8659 = !DILocation(line: 2468, column: 51, scope: !8651)
!8660 = !DILocalVariable(name: "type", arg: 4, scope: !8651, file: !3, line: 2468, type: !1725)
!8661 = !DILocation(line: 2468, column: 64, scope: !8651)
!8662 = !DILocalVariable(name: "var", scope: !8651, file: !3, line: 2470, type: !1669)
!8663 = !DILocation(line: 2470, column: 8, scope: !8651)
!8664 = !DILocalVariable(name: "val", scope: !8651, file: !3, line: 2470, type: !1669)
!8665 = !DILocation(line: 2470, column: 13, scope: !8651)
!8666 = !DILocalVariable(name: "def_stmt", scope: !8651, file: !3, line: 2471, type: !1959)
!8667 = !DILocation(line: 2471, column: 10, scope: !8651)
!8668 = !DILocation(line: 2473, column: 7, scope: !8669)
!8669 = distinct !DILexicalBlock(scope: !8651, file: !3, line: 2473, column: 7)
!8670 = !DILocation(line: 2473, column: 23, scope: !8669)
!8671 = !DILocation(line: 2473, column: 7, scope: !8651)
!8672 = !DILocation(line: 2475, column: 11, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 2475, column: 11)
!8674 = distinct !DILexicalBlock(scope: !8669, file: !3, line: 2474, column: 5)
!8675 = !DILocation(line: 2475, column: 27, scope: !8673)
!8676 = !DILocation(line: 2475, column: 11, scope: !8674)
!8677 = !DILocation(line: 2476, column: 35, scope: !8673)
!8678 = !DILocation(line: 2476, column: 57, scope: !8673)
!8679 = !DILocation(line: 2476, column: 65, scope: !8673)
!8680 = !DILocation(line: 2476, column: 74, scope: !8673)
!8681 = !DILocation(line: 2476, column: 16, scope: !8673)
!8682 = !DILocation(line: 2477, column: 16, scope: !8673)
!8683 = !DILocation(line: 2477, column: 38, scope: !8673)
!8684 = !DILocation(line: 2477, column: 60, scope: !8673)
!8685 = !DILocation(line: 2477, column: 68, scope: !8673)
!8686 = !DILocation(line: 2477, column: 77, scope: !8673)
!8687 = !DILocation(line: 2477, column: 19, scope: !8673)
!8688 = !DILocation(line: 0, scope: !8673)
!8689 = !DILocation(line: 2476, column: 9, scope: !8673)
!8690 = !DILocation(line: 2479, column: 16, scope: !8691)
!8691 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 2479, column: 16)
!8692 = !DILocation(line: 2479, column: 32, scope: !8691)
!8693 = !DILocation(line: 2480, column: 9, scope: !8691)
!8694 = !DILocation(line: 2480, column: 12, scope: !8691)
!8695 = !DILocation(line: 2480, column: 46, scope: !8691)
!8696 = !DILocation(line: 2481, column: 9, scope: !8691)
!8697 = !DILocation(line: 2481, column: 27, scope: !8691)
!8698 = !DILocation(line: 2481, column: 12, scope: !8691)
!8699 = !DILocation(line: 2479, column: 16, scope: !8673)
!8700 = !DILocalVariable(name: "aop0", scope: !8701, file: !3, line: 2483, type: !1669)
!8701 = distinct !DILexicalBlock(scope: !8691, file: !3, line: 2482, column: 2)
!8702 = !DILocation(line: 2483, column: 9, scope: !8701)
!8703 = !DILocation(line: 2483, column: 16, scope: !8701)
!8704 = !DILocation(line: 2484, column: 8, scope: !8705)
!8705 = distinct !DILexicalBlock(scope: !8701, file: !3, line: 2484, column: 8)
!8706 = !DILocation(line: 2484, column: 25, scope: !8705)
!8707 = !DILocation(line: 2485, column: 8, scope: !8705)
!8708 = !DILocation(line: 2485, column: 11, scope: !8705)
!8709 = !DILocation(line: 2485, column: 46, scope: !8705)
!8710 = !DILocation(line: 2484, column: 8, scope: !8701)
!8711 = !DILocation(line: 2486, column: 32, scope: !8705)
!8712 = !DILocation(line: 2487, column: 11, scope: !8705)
!8713 = !DILocation(line: 2487, column: 19, scope: !8705)
!8714 = !DILocation(line: 2487, column: 28, scope: !8705)
!8715 = !DILocation(line: 2486, column: 13, scope: !8705)
!8716 = !DILocation(line: 2486, column: 6, scope: !8705)
!8717 = !DILocation(line: 2488, column: 2, scope: !8701)
!8718 = !DILocation(line: 2490, column: 11, scope: !8719)
!8719 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 2490, column: 11)
!8720 = !DILocation(line: 2490, column: 16, scope: !8719)
!8721 = !DILocation(line: 2490, column: 11, scope: !8674)
!8722 = !DILocation(line: 2492, column: 10, scope: !8723)
!8723 = distinct !DILexicalBlock(scope: !8719, file: !3, line: 2491, column: 2)
!8724 = !DILocation(line: 2492, column: 8, scope: !8723)
!8725 = !DILocation(line: 2493, column: 8, scope: !8726)
!8726 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 2493, column: 8)
!8727 = !DILocation(line: 2493, column: 24, scope: !8726)
!8728 = !DILocation(line: 2494, column: 8, scope: !8726)
!8729 = !DILocation(line: 2494, column: 29, scope: !8726)
!8730 = !DILocation(line: 2494, column: 11, scope: !8726)
!8731 = !DILocation(line: 2494, column: 34, scope: !8726)
!8732 = !DILocation(line: 2493, column: 8, scope: !8723)
!8733 = !DILocation(line: 2495, column: 6, scope: !8726)
!8734 = !DILocation(line: 2496, column: 2, scope: !8723)
!8735 = !DILocation(line: 2498, column: 18, scope: !8719)
!8736 = !DILocation(line: 2498, column: 8, scope: !8719)
!8737 = !DILocation(line: 2498, column: 6, scope: !8719)
!8738 = !DILocation(line: 2499, column: 12, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 2499, column: 11)
!8740 = !DILocation(line: 2499, column: 11, scope: !8674)
!8741 = !DILocation(line: 2500, column: 2, scope: !8739)
!8742 = !DILocation(line: 2502, column: 12, scope: !8743)
!8743 = distinct !DILexicalBlock(scope: !8674, file: !3, line: 2502, column: 11)
!8744 = !DILocation(line: 2502, column: 11, scope: !8743)
!8745 = !DILocation(line: 2502, column: 11, scope: !8674)
!8746 = !DILocation(line: 2504, column: 8, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 2504, column: 8)
!8748 = distinct !DILexicalBlock(scope: !8743, file: !3, line: 2503, column: 2)
!8749 = !DILocation(line: 2504, column: 13, scope: !8747)
!8750 = !DILocation(line: 2504, column: 8, scope: !8748)
!8751 = !DILocation(line: 2506, column: 12, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 2506, column: 12)
!8753 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 2505, column: 6)
!8754 = !DILocation(line: 2506, column: 32, scope: !8752)
!8755 = !DILocation(line: 2507, column: 5, scope: !8752)
!8756 = !DILocation(line: 2507, column: 8, scope: !8752)
!8757 = !DILocation(line: 2507, column: 24, scope: !8752)
!8758 = !DILocation(line: 2506, column: 12, scope: !8753)
!8759 = !DILocation(line: 2508, column: 3, scope: !8752)
!8760 = !DILocation(line: 2510, column: 30, scope: !8761)
!8761 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 2510, column: 12)
!8762 = !DILocation(line: 2510, column: 29, scope: !8761)
!8763 = !DILocation(line: 2510, column: 38, scope: !8761)
!8764 = !DILocation(line: 2510, column: 12, scope: !8761)
!8765 = !DILocation(line: 2510, column: 12, scope: !8753)
!8766 = !DILocation(line: 2511, column: 13, scope: !8761)
!8767 = !DILocation(line: 2511, column: 4, scope: !8761)
!8768 = !DILocation(line: 2511, column: 11, scope: !8761)
!8769 = !DILocation(line: 2511, column: 3, scope: !8761)
!8770 = !DILocation(line: 2512, column: 8, scope: !8753)
!8771 = !DILocation(line: 2514, column: 31, scope: !8772)
!8772 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 2514, column: 13)
!8773 = !DILocation(line: 2514, column: 37, scope: !8772)
!8774 = !DILocation(line: 2514, column: 36, scope: !8772)
!8775 = !DILocation(line: 2514, column: 13, scope: !8772)
!8776 = !DILocation(line: 2514, column: 45, scope: !8772)
!8777 = !DILocation(line: 2514, column: 13, scope: !8747)
!8778 = !DILocation(line: 2515, column: 6, scope: !8772)
!8779 = !DILocation(line: 2516, column: 2, scope: !8748)
!8780 = !DILocation(line: 2518, column: 17, scope: !8674)
!8781 = !DILocation(line: 2518, column: 8, scope: !8674)
!8782 = !DILocation(line: 2518, column: 15, scope: !8674)
!8783 = !DILocation(line: 2519, column: 7, scope: !8674)
!8784 = !DILocation(line: 2523, column: 21, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8651, file: !3, line: 2523, column: 7)
!8786 = !DILocation(line: 2523, column: 30, scope: !8785)
!8787 = !DILocation(line: 2523, column: 7, scope: !8785)
!8788 = !DILocation(line: 2523, column: 7, scope: !8651)
!8789 = !DILocation(line: 2524, column: 5, scope: !8785)
!8790 = !DILocation(line: 2525, column: 19, scope: !8651)
!8791 = !DILocation(line: 2525, column: 28, scope: !8651)
!8792 = !DILocation(line: 2525, column: 3, scope: !8651)
!8793 = !DILocation(line: 2527, column: 9, scope: !8651)
!8794 = !DILocation(line: 2527, column: 7, scope: !8651)
!8795 = !DILocation(line: 2528, column: 14, scope: !8651)
!8796 = !DILocation(line: 2528, column: 12, scope: !8651)
!8797 = !DILocation(line: 2530, column: 24, scope: !8651)
!8798 = !DILocation(line: 2530, column: 11, scope: !8651)
!8799 = !DILocation(line: 2530, column: 3, scope: !8651)
!8800 = !DILocation(line: 2536, column: 37, scope: !8801)
!8801 = distinct !DILexicalBlock(scope: !8802, file: !3, line: 2536, column: 13)
!8802 = distinct !DILexicalBlock(scope: !8651, file: !3, line: 2531, column: 5)
!8803 = !DILocation(line: 2536, column: 13, scope: !8801)
!8804 = !DILocation(line: 2537, column: 13, scope: !8801)
!8805 = !DILocation(line: 2537, column: 43, scope: !8801)
!8806 = !DILocation(line: 2537, column: 16, scope: !8801)
!8807 = !DILocation(line: 2536, column: 13, scope: !8802)
!8808 = !DILocalVariable(name: "rhs", scope: !8809, file: !3, line: 2539, type: !1669)
!8809 = distinct !DILexicalBlock(scope: !8801, file: !3, line: 2538, column: 11)
!8810 = !DILocation(line: 2539, column: 18, scope: !8809)
!8811 = !DILocation(line: 2539, column: 44, scope: !8809)
!8812 = !DILocation(line: 2539, column: 24, scope: !8809)
!8813 = !DILocation(line: 2540, column: 39, scope: !8809)
!8814 = !DILocation(line: 2540, column: 44, scope: !8809)
!8815 = !DILocation(line: 2540, column: 52, scope: !8809)
!8816 = !DILocation(line: 2540, column: 61, scope: !8809)
!8817 = !DILocation(line: 2540, column: 20, scope: !8809)
!8818 = !DILocation(line: 2540, column: 13, scope: !8809)
!8819 = !DILocation(line: 2542, column: 9, scope: !8802)
!8820 = !DILocalVariable(name: "i", scope: !8821, file: !3, line: 2548, type: !7)
!8821 = distinct !DILexicalBlock(scope: !8802, file: !3, line: 2545, column: 2)
!8822 = !DILocation(line: 2548, column: 13, scope: !8821)
!8823 = !DILocation(line: 2550, column: 11, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8821, file: !3, line: 2550, column: 4)
!8825 = !DILocation(line: 2550, column: 9, scope: !8824)
!8826 = !DILocation(line: 2550, column: 16, scope: !8827)
!8827 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 2550, column: 4)
!8828 = !DILocation(line: 2550, column: 41, scope: !8827)
!8829 = !DILocation(line: 2550, column: 20, scope: !8827)
!8830 = !DILocation(line: 2550, column: 18, scope: !8827)
!8831 = !DILocation(line: 2550, column: 4, scope: !8824)
!8832 = !DILocalVariable(name: "arg", scope: !8833, file: !3, line: 2552, type: !1669)
!8833 = distinct !DILexicalBlock(scope: !8827, file: !3, line: 2551, column: 11)
!8834 = !DILocation(line: 2552, column: 18, scope: !8833)
!8835 = !DILocation(line: 2552, column: 40, scope: !8833)
!8836 = !DILocation(line: 2552, column: 50, scope: !8833)
!8837 = !DILocation(line: 2552, column: 24, scope: !8833)
!8838 = !DILocation(line: 2552, column: 54, scope: !8833)
!8839 = !DILocation(line: 2560, column: 17, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 2560, column: 17)
!8841 = !DILocation(line: 2560, column: 43, scope: !8840)
!8842 = !DILocation(line: 2560, column: 24, scope: !8840)
!8843 = !DILocation(line: 2560, column: 21, scope: !8840)
!8844 = !DILocation(line: 2560, column: 17, scope: !8833)
!8845 = !DILocation(line: 2561, column: 15, scope: !8840)
!8846 = !DILocation(line: 2563, column: 37, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !8833, file: !3, line: 2563, column: 17)
!8848 = !DILocation(line: 2563, column: 42, scope: !8847)
!8849 = !DILocation(line: 2563, column: 50, scope: !8847)
!8850 = !DILocation(line: 2563, column: 59, scope: !8847)
!8851 = !DILocation(line: 2563, column: 18, scope: !8847)
!8852 = !DILocation(line: 2563, column: 17, scope: !8833)
!8853 = !DILocation(line: 2564, column: 15, scope: !8847)
!8854 = !DILocation(line: 2565, column: 11, scope: !8833)
!8855 = !DILocation(line: 2550, column: 53, scope: !8827)
!8856 = !DILocation(line: 2550, column: 4, scope: !8827)
!8857 = distinct !{!8857, !8831, !8858}
!8858 = !DILocation(line: 2565, column: 11, scope: !8824)
!8859 = !DILocation(line: 2567, column: 9, scope: !8802)
!8860 = !DILocation(line: 2570, column: 9, scope: !8802)
!8861 = !DILocation(line: 2572, column: 1, scope: !8651)
!8862 = distinct !DISubprogram(name: "gimple_has_location", scope: !743, file: !743, line: 1165, type: !4378, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8863 = !DILocalVariable(name: "g", arg: 1, scope: !8862, file: !743, line: 1165, type: !4380)
!8864 = !DILocation(line: 1165, column: 35, scope: !8862)
!8865 = !DILocation(line: 1167, column: 27, scope: !8862)
!8866 = !DILocation(line: 1167, column: 10, scope: !8862)
!8867 = !DILocation(line: 1167, column: 30, scope: !8862)
!8868 = !DILocation(line: 1167, column: 3, scope: !8862)
!8869 = distinct !DISubprogram(name: "gsi_start", scope: !743, file: !743, line: 4403, type: !8870, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8870 = !DISubroutineType(types: !8871)
!8871 = !{!4432, !1949}
!8872 = !DILocalVariable(name: "seq", arg: 1, scope: !8869, file: !743, line: 4403, type: !1949)
!8873 = !DILocation(line: 4403, column: 23, scope: !8869)
!8874 = !DILocalVariable(name: "i", scope: !8869, file: !743, line: 4405, type: !4432)
!8875 = !DILocation(line: 4405, column: 24, scope: !8869)
!8876 = !DILocation(line: 4407, column: 29, scope: !8869)
!8877 = !DILocation(line: 4407, column: 11, scope: !8869)
!8878 = !DILocation(line: 4407, column: 5, scope: !8869)
!8879 = !DILocation(line: 4407, column: 9, scope: !8869)
!8880 = !DILocation(line: 4408, column: 11, scope: !8869)
!8881 = !DILocation(line: 4408, column: 5, scope: !8869)
!8882 = !DILocation(line: 4408, column: 9, scope: !8869)
!8883 = !DILocation(line: 4409, column: 13, scope: !8869)
!8884 = !DILocation(line: 4409, column: 11, scope: !8869)
!8885 = !DILocation(line: 4409, column: 17, scope: !8869)
!8886 = !DILocation(line: 4409, column: 22, scope: !8869)
!8887 = !DILocation(line: 4409, column: 27, scope: !8869)
!8888 = !DILocation(line: 4409, column: 20, scope: !8869)
!8889 = !DILocation(line: 4409, column: 10, scope: !8869)
!8890 = !DILocation(line: 4409, column: 48, scope: !8869)
!8891 = !DILocation(line: 4409, column: 53, scope: !8869)
!8892 = !DILocation(line: 4409, column: 35, scope: !8869)
!8893 = !DILocation(line: 4409, column: 5, scope: !8869)
!8894 = !DILocation(line: 4409, column: 8, scope: !8869)
!8895 = !DILocation(line: 4411, column: 3, scope: !8869)
!8896 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !743, file: !743, line: 1405, type: !7407, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8897 = !DILocalVariable(name: "g", arg: 1, scope: !8896, file: !743, line: 1405, type: !1959)
!8898 = !DILocation(line: 1405, column: 25, scope: !8896)
!8899 = !DILocalVariable(name: "vuse", arg: 2, scope: !8896, file: !743, line: 1405, type: !1669)
!8900 = !DILocation(line: 1405, column: 33, scope: !8896)
!8901 = !DILocation(line: 1407, column: 3, scope: !8896)
!8902 = !DILocation(line: 1408, column: 23, scope: !8896)
!8903 = !DILocation(line: 1408, column: 3, scope: !8896)
!8904 = !DILocation(line: 1408, column: 6, scope: !8896)
!8905 = !DILocation(line: 1408, column: 16, scope: !8896)
!8906 = !DILocation(line: 1408, column: 21, scope: !8896)
!8907 = !DILocation(line: 1409, column: 1, scope: !8896)
!8908 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !743, file: !743, line: 1414, type: !7407, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8909 = !DILocalVariable(name: "g", arg: 1, scope: !8908, file: !743, line: 1414, type: !1959)
!8910 = !DILocation(line: 1414, column: 25, scope: !8908)
!8911 = !DILocalVariable(name: "vdef", arg: 2, scope: !8908, file: !743, line: 1414, type: !1669)
!8912 = !DILocation(line: 1414, column: 33, scope: !8908)
!8913 = !DILocation(line: 1416, column: 3, scope: !8908)
!8914 = !DILocation(line: 1417, column: 23, scope: !8908)
!8915 = !DILocation(line: 1417, column: 3, scope: !8908)
!8916 = !DILocation(line: 1417, column: 6, scope: !8908)
!8917 = !DILocation(line: 1417, column: 16, scope: !8908)
!8918 = !DILocation(line: 1417, column: 21, scope: !8908)
!8919 = !DILocation(line: 1418, column: 1, scope: !8908)
!8920 = distinct !DISubprogram(name: "gimple_set_location", scope: !743, file: !743, line: 1156, type: !8921, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8921 = !DISubroutineType(types: !8922)
!8922 = !{null, !1959, !1756}
!8923 = !DILocalVariable(name: "g", arg: 1, scope: !8920, file: !743, line: 1156, type: !1959)
!8924 = !DILocation(line: 1156, column: 29, scope: !8920)
!8925 = !DILocalVariable(name: "location", arg: 2, scope: !8920, file: !743, line: 1156, type: !1756)
!8926 = !DILocation(line: 1156, column: 43, scope: !8920)
!8927 = !DILocation(line: 1158, column: 24, scope: !8920)
!8928 = !DILocation(line: 1158, column: 3, scope: !8920)
!8929 = !DILocation(line: 1158, column: 6, scope: !8920)
!8930 = !DILocation(line: 1158, column: 13, scope: !8920)
!8931 = !DILocation(line: 1158, column: 22, scope: !8920)
!8932 = !DILocation(line: 1159, column: 1, scope: !8920)
!8933 = distinct !DISubprogram(name: "optimize_stack_restore", scope: !3, file: !3, line: 3189, type: !8934, scopeLine: 3190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!8934 = !DISubroutineType(types: !8935)
!8935 = !{!1669, !4432}
!8936 = !DILocalVariable(name: "i", arg: 1, scope: !8933, file: !3, line: 3189, type: !4432)
!8937 = !DILocation(line: 3189, column: 46, scope: !8933)
!8938 = !DILocalVariable(name: "callee", scope: !8933, file: !3, line: 3191, type: !1669)
!8939 = !DILocation(line: 3191, column: 8, scope: !8933)
!8940 = !DILocalVariable(name: "stmt", scope: !8933, file: !3, line: 3192, type: !1959)
!8941 = !DILocation(line: 3192, column: 10, scope: !8933)
!8942 = !DILocalVariable(name: "bb", scope: !8933, file: !3, line: 3194, type: !2392)
!8943 = !DILocation(line: 3194, column: 15, scope: !8933)
!8944 = !DILocation(line: 3194, column: 20, scope: !8933)
!8945 = !DILocalVariable(name: "call", scope: !8933, file: !3, line: 3195, type: !1959)
!8946 = !DILocation(line: 3195, column: 10, scope: !8933)
!8947 = !DILocation(line: 3195, column: 17, scope: !8933)
!8948 = !DILocation(line: 3197, column: 20, scope: !8949)
!8949 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 3197, column: 7)
!8950 = !DILocation(line: 3197, column: 7, scope: !8949)
!8951 = !DILocation(line: 3197, column: 26, scope: !8949)
!8952 = !DILocation(line: 3198, column: 7, scope: !8949)
!8953 = !DILocation(line: 3198, column: 32, scope: !8949)
!8954 = !DILocation(line: 3198, column: 10, scope: !8949)
!8955 = !DILocation(line: 3198, column: 38, scope: !8949)
!8956 = !DILocation(line: 3199, column: 7, scope: !8949)
!8957 = !DILocation(line: 3199, column: 10, scope: !8949)
!8958 = !DILocation(line: 3199, column: 48, scope: !8949)
!8959 = !DILocation(line: 3200, column: 7, scope: !8949)
!8960 = !DILocation(line: 3200, column: 11, scope: !8949)
!8961 = !DILocation(line: 3197, column: 7, scope: !8933)
!8962 = !DILocation(line: 3201, column: 5, scope: !8949)
!8963 = !DILocation(line: 3203, column: 8, scope: !8964)
!8964 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 3203, column: 3)
!8965 = !DILocation(line: 3203, column: 24, scope: !8966)
!8966 = distinct !DILexicalBlock(scope: !8964, file: !3, line: 3203, column: 3)
!8967 = !DILocation(line: 3203, column: 23, scope: !8966)
!8968 = !DILocation(line: 3203, column: 3, scope: !8964)
!8969 = !DILocation(line: 3205, column: 14, scope: !8970)
!8970 = distinct !DILexicalBlock(scope: !8966, file: !3, line: 3204, column: 5)
!8971 = !DILocation(line: 3205, column: 12, scope: !8970)
!8972 = !DILocation(line: 3206, column: 24, scope: !8973)
!8973 = distinct !DILexicalBlock(scope: !8970, file: !3, line: 3206, column: 11)
!8974 = !DILocation(line: 3206, column: 11, scope: !8973)
!8975 = !DILocation(line: 3206, column: 30, scope: !8973)
!8976 = !DILocation(line: 3206, column: 11, scope: !8970)
!8977 = !DILocation(line: 3207, column: 2, scope: !8973)
!8978 = !DILocation(line: 3208, column: 24, scope: !8979)
!8979 = distinct !DILexicalBlock(scope: !8970, file: !3, line: 3208, column: 11)
!8980 = !DILocation(line: 3208, column: 11, scope: !8979)
!8981 = !DILocation(line: 3208, column: 30, scope: !8979)
!8982 = !DILocation(line: 3208, column: 11, scope: !8970)
!8983 = !DILocation(line: 3209, column: 2, scope: !8979)
!8984 = !DILocation(line: 3211, column: 36, scope: !8970)
!8985 = !DILocation(line: 3211, column: 16, scope: !8970)
!8986 = !DILocation(line: 3211, column: 14, scope: !8970)
!8987 = !DILocation(line: 3212, column: 12, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8970, file: !3, line: 3212, column: 11)
!8989 = !DILocation(line: 3213, column: 4, scope: !8988)
!8990 = !DILocation(line: 3213, column: 7, scope: !8988)
!8991 = !DILocation(line: 3213, column: 36, scope: !8988)
!8992 = !DILocation(line: 3215, column: 4, scope: !8988)
!8993 = !DILocation(line: 3215, column: 7, scope: !8988)
!8994 = !DILocation(line: 3215, column: 35, scope: !8988)
!8995 = !DILocation(line: 3212, column: 11, scope: !8970)
!8996 = !DILocation(line: 3216, column: 2, scope: !8988)
!8997 = !DILocation(line: 3218, column: 11, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8970, file: !3, line: 3218, column: 11)
!8999 = !DILocation(line: 3218, column: 39, scope: !8998)
!9000 = !DILocation(line: 3218, column: 11, scope: !8970)
!9001 = !DILocation(line: 3219, column: 2, scope: !8998)
!9002 = !DILocation(line: 3220, column: 5, scope: !8970)
!9003 = !DILocation(line: 3203, column: 39, scope: !8966)
!9004 = !DILocation(line: 3203, column: 3, scope: !8966)
!9005 = distinct !{!9005, !8968, !9006}
!9006 = !DILocation(line: 3220, column: 5, scope: !8964)
!9007 = !DILocation(line: 3222, column: 8, scope: !9008)
!9008 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 3222, column: 7)
!9009 = !DILocation(line: 3222, column: 7, scope: !8933)
!9010 = !DILocation(line: 3223, column: 5, scope: !9008)
!9011 = !DILocation(line: 3226, column: 11, scope: !8933)
!9012 = !DILocation(line: 3226, column: 3, scope: !8933)
!9013 = !DILocation(line: 3229, column: 7, scope: !9014)
!9014 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 3227, column: 5)
!9015 = !DILocation(line: 3231, column: 29, scope: !9016)
!9016 = distinct !DILexicalBlock(scope: !9014, file: !3, line: 3231, column: 11)
!9017 = !DILocation(line: 3231, column: 11, scope: !9016)
!9018 = !DILocation(line: 3231, column: 34, scope: !9016)
!9019 = !DILocation(line: 3231, column: 42, scope: !9016)
!9020 = !DILocation(line: 3231, column: 39, scope: !9016)
!9021 = !DILocation(line: 3231, column: 11, scope: !9014)
!9022 = !DILocation(line: 3232, column: 2, scope: !9016)
!9023 = !DILocation(line: 3233, column: 7, scope: !9014)
!9024 = !DILocation(line: 3235, column: 7, scope: !9014)
!9025 = !DILocation(line: 3236, column: 5, scope: !9014)
!9026 = !DILabel(scope: !8933, name: "second_stack_restore", file: !3, line: 3237)
!9027 = !DILocation(line: 3237, column: 2, scope: !8933)
!9028 = !DILocation(line: 3243, column: 40, scope: !9029)
!9029 = distinct !DILexicalBlock(scope: !8933, file: !3, line: 3243, column: 7)
!9030 = !DILocation(line: 3243, column: 23, scope: !9029)
!9031 = !DILocation(line: 3243, column: 7, scope: !9029)
!9032 = !DILocation(line: 3243, column: 7, scope: !8933)
!9033 = !DILocalVariable(name: "stack_save", scope: !9034, file: !3, line: 3245, type: !1959)
!9034 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 3244, column: 5)
!9035 = !DILocation(line: 3245, column: 14, scope: !9034)
!9036 = !DILocation(line: 3245, column: 27, scope: !9034)
!9037 = !DILocation(line: 3246, column: 27, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !9034, file: !3, line: 3246, column: 11)
!9039 = !DILocation(line: 3246, column: 11, scope: !9038)
!9040 = !DILocation(line: 3246, column: 11, scope: !9034)
!9041 = !DILocation(line: 3248, column: 33, scope: !9042)
!9042 = distinct !DILexicalBlock(scope: !9038, file: !3, line: 3247, column: 2)
!9043 = !DILocation(line: 3248, column: 13, scope: !9042)
!9044 = !DILocation(line: 3248, column: 11, scope: !9042)
!9045 = !DILocation(line: 3249, column: 8, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !9042, file: !3, line: 3249, column: 8)
!9047 = !DILocation(line: 3250, column: 8, scope: !9046)
!9048 = !DILocation(line: 3250, column: 11, scope: !9046)
!9049 = !DILocation(line: 3250, column: 40, scope: !9046)
!9050 = !DILocation(line: 3251, column: 8, scope: !9046)
!9051 = !DILocation(line: 3251, column: 11, scope: !9046)
!9052 = !DILocation(line: 3251, column: 39, scope: !9046)
!9053 = !DILocation(line: 3249, column: 8, scope: !9042)
!9054 = !DILocalVariable(name: "stack_save_gsi", scope: !9055, file: !3, line: 3253, type: !4432)
!9055 = distinct !DILexicalBlock(scope: !9046, file: !3, line: 3252, column: 6)
!9056 = !DILocation(line: 3253, column: 29, scope: !9055)
!9057 = !DILocalVariable(name: "rhs", scope: !9055, file: !3, line: 3254, type: !1669)
!9058 = !DILocation(line: 3254, column: 13, scope: !9055)
!9059 = !DILocation(line: 3256, column: 39, scope: !9055)
!9060 = !DILocation(line: 3256, column: 25, scope: !9055)
!9061 = !DILocation(line: 3257, column: 29, scope: !9055)
!9062 = !DILocation(line: 3257, column: 14, scope: !9055)
!9063 = !DILocation(line: 3257, column: 12, scope: !9055)
!9064 = !DILocation(line: 3258, column: 48, scope: !9055)
!9065 = !DILocation(line: 3258, column: 8, scope: !9055)
!9066 = !DILocation(line: 3259, column: 6, scope: !9055)
!9067 = !DILocation(line: 3260, column: 2, scope: !9042)
!9068 = !DILocation(line: 3261, column: 5, scope: !9034)
!9069 = !DILocation(line: 3264, column: 10, scope: !8933)
!9070 = !DILocation(line: 3264, column: 3, scope: !8933)
!9071 = !DILocation(line: 3265, column: 1, scope: !8933)
!9072 = distinct !DISubprogram(name: "optimize_stdarg_builtin", scope: !3, file: !3, line: 3273, type: !6292, scopeLine: 3274, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9073 = !DILocalVariable(name: "call", arg: 1, scope: !9072, file: !3, line: 3273, type: !1959)
!9074 = !DILocation(line: 3273, column: 33, scope: !9072)
!9075 = !DILocalVariable(name: "callee", scope: !9072, file: !3, line: 3275, type: !1669)
!9076 = !DILocation(line: 3275, column: 8, scope: !9072)
!9077 = !DILocalVariable(name: "lhs", scope: !9072, file: !3, line: 3275, type: !1669)
!9078 = !DILocation(line: 3275, column: 16, scope: !9072)
!9079 = !DILocalVariable(name: "rhs", scope: !9072, file: !3, line: 3275, type: !1669)
!9080 = !DILocation(line: 3275, column: 21, scope: !9072)
!9081 = !DILocalVariable(name: "cfun_va_list", scope: !9072, file: !3, line: 3275, type: !1669)
!9082 = !DILocation(line: 3275, column: 26, scope: !9072)
!9083 = !DILocalVariable(name: "va_list_simple_ptr", scope: !9072, file: !3, line: 3276, type: !1748)
!9084 = !DILocation(line: 3276, column: 8, scope: !9072)
!9085 = !DILocalVariable(name: "loc", scope: !9072, file: !3, line: 3277, type: !1756)
!9086 = !DILocation(line: 3277, column: 14, scope: !9072)
!9087 = !DILocation(line: 3277, column: 37, scope: !9072)
!9088 = !DILocation(line: 3277, column: 20, scope: !9072)
!9089 = !DILocation(line: 3279, column: 20, scope: !9090)
!9090 = distinct !DILexicalBlock(scope: !9072, file: !3, line: 3279, column: 7)
!9091 = !DILocation(line: 3279, column: 7, scope: !9090)
!9092 = !DILocation(line: 3279, column: 26, scope: !9090)
!9093 = !DILocation(line: 3279, column: 7, scope: !9072)
!9094 = !DILocation(line: 3280, column: 5, scope: !9090)
!9095 = !DILocation(line: 3282, column: 32, scope: !9072)
!9096 = !DILocation(line: 3282, column: 12, scope: !9072)
!9097 = !DILocation(line: 3282, column: 10, scope: !9072)
!9098 = !DILocation(line: 3284, column: 26, scope: !9072)
!9099 = !DILocation(line: 3284, column: 42, scope: !9072)
!9100 = !DILocation(line: 3284, column: 18, scope: !9072)
!9101 = !DILocation(line: 3284, column: 16, scope: !9072)
!9102 = !DILocation(line: 3285, column: 24, scope: !9072)
!9103 = !DILocation(line: 3286, column: 10, scope: !9072)
!9104 = !DILocation(line: 3286, column: 14, scope: !9072)
!9105 = !DILocation(line: 3286, column: 42, scope: !9072)
!9106 = !DILocation(line: 3286, column: 39, scope: !9072)
!9107 = !DILocation(line: 3287, column: 7, scope: !9072)
!9108 = !DILocation(line: 3287, column: 10, scope: !9072)
!9109 = !DILocation(line: 3287, column: 38, scope: !9072)
!9110 = !DILocation(line: 3287, column: 35, scope: !9072)
!9111 = !DILocation(line: 0, scope: !9072)
!9112 = !DILocation(line: 3285, column: 22, scope: !9072)
!9113 = !DILocation(line: 3289, column: 11, scope: !9072)
!9114 = !DILocation(line: 3289, column: 3, scope: !9072)
!9115 = !DILocation(line: 3292, column: 12, scope: !9116)
!9116 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3292, column: 11)
!9117 = distinct !DILexicalBlock(scope: !9072, file: !3, line: 3290, column: 5)
!9118 = !DILocation(line: 3293, column: 4, scope: !9116)
!9119 = !DILocation(line: 3293, column: 15, scope: !9116)
!9120 = !DILocation(line: 3293, column: 39, scope: !9116)
!9121 = !DILocation(line: 3294, column: 11, scope: !9116)
!9122 = !DILocation(line: 3294, column: 14, scope: !9116)
!9123 = !DILocation(line: 3294, column: 48, scope: !9116)
!9124 = !DILocation(line: 3292, column: 11, scope: !9117)
!9125 = !DILocation(line: 3295, column: 2, scope: !9116)
!9126 = !DILocation(line: 3297, column: 33, scope: !9127)
!9127 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3297, column: 11)
!9128 = !DILocation(line: 3297, column: 11, scope: !9127)
!9129 = !DILocation(line: 3297, column: 39, scope: !9127)
!9130 = !DILocation(line: 3297, column: 11, scope: !9117)
!9131 = !DILocation(line: 3298, column: 2, scope: !9127)
!9132 = !DILocation(line: 3300, column: 30, scope: !9117)
!9133 = !DILocation(line: 3300, column: 13, scope: !9117)
!9134 = !DILocation(line: 3300, column: 11, scope: !9117)
!9135 = !DILocation(line: 3301, column: 12, scope: !9136)
!9136 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3301, column: 11)
!9137 = !DILocation(line: 3302, column: 4, scope: !9136)
!9138 = !DILocation(line: 3302, column: 7, scope: !9136)
!9139 = !DILocation(line: 3303, column: 10, scope: !9136)
!9140 = !DILocation(line: 3303, column: 7, scope: !9136)
!9141 = !DILocation(line: 3301, column: 11, scope: !9117)
!9142 = !DILocation(line: 3304, column: 2, scope: !9136)
!9143 = !DILocation(line: 3306, column: 42, scope: !9117)
!9144 = !DILocation(line: 3306, column: 47, scope: !9117)
!9145 = !DILocation(line: 3306, column: 13, scope: !9117)
!9146 = !DILocation(line: 3306, column: 11, scope: !9117)
!9147 = !DILocation(line: 3307, column: 34, scope: !9117)
!9148 = !DILocation(line: 3307, column: 39, scope: !9117)
!9149 = !DILocation(line: 3308, column: 33, scope: !9117)
!9150 = !DILocation(line: 3307, column: 13, scope: !9117)
!9151 = !DILocation(line: 3307, column: 11, scope: !9117)
!9152 = !DILocation(line: 3309, column: 31, scope: !9117)
!9153 = !DILocation(line: 3309, column: 36, scope: !9117)
!9154 = !DILocation(line: 3309, column: 53, scope: !9117)
!9155 = !DILocation(line: 3309, column: 13, scope: !9117)
!9156 = !DILocation(line: 3309, column: 11, scope: !9117)
!9157 = !DILocation(line: 3310, column: 14, scope: !9117)
!9158 = !DILocation(line: 3310, column: 7, scope: !9117)
!9159 = !DILocation(line: 3313, column: 12, scope: !9160)
!9160 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3313, column: 11)
!9161 = !DILocation(line: 3313, column: 11, scope: !9117)
!9162 = !DILocation(line: 3314, column: 2, scope: !9160)
!9163 = !DILocation(line: 3316, column: 33, scope: !9164)
!9164 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3316, column: 11)
!9165 = !DILocation(line: 3316, column: 11, scope: !9164)
!9166 = !DILocation(line: 3316, column: 39, scope: !9164)
!9167 = !DILocation(line: 3316, column: 11, scope: !9117)
!9168 = !DILocation(line: 3317, column: 2, scope: !9164)
!9169 = !DILocation(line: 3319, column: 30, scope: !9117)
!9170 = !DILocation(line: 3319, column: 13, scope: !9117)
!9171 = !DILocation(line: 3319, column: 11, scope: !9117)
!9172 = !DILocation(line: 3320, column: 12, scope: !9173)
!9173 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3320, column: 11)
!9174 = !DILocation(line: 3321, column: 4, scope: !9173)
!9175 = !DILocation(line: 3321, column: 7, scope: !9173)
!9176 = !DILocation(line: 3322, column: 10, scope: !9173)
!9177 = !DILocation(line: 3322, column: 7, scope: !9173)
!9178 = !DILocation(line: 3320, column: 11, scope: !9117)
!9179 = !DILocation(line: 3323, column: 2, scope: !9173)
!9180 = !DILocation(line: 3325, column: 42, scope: !9117)
!9181 = !DILocation(line: 3325, column: 47, scope: !9117)
!9182 = !DILocation(line: 3325, column: 13, scope: !9117)
!9183 = !DILocation(line: 3325, column: 11, scope: !9117)
!9184 = !DILocation(line: 3326, column: 30, scope: !9117)
!9185 = !DILocation(line: 3326, column: 13, scope: !9117)
!9186 = !DILocation(line: 3326, column: 11, scope: !9117)
!9187 = !DILocation(line: 3327, column: 11, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 3327, column: 11)
!9189 = !DILocation(line: 3328, column: 7, scope: !9188)
!9190 = !DILocation(line: 3328, column: 4, scope: !9188)
!9191 = !DILocation(line: 3327, column: 11, scope: !9117)
!9192 = !DILocation(line: 3329, column: 2, scope: !9188)
!9193 = !DILocation(line: 3331, column: 31, scope: !9117)
!9194 = !DILocation(line: 3331, column: 36, scope: !9117)
!9195 = !DILocation(line: 3331, column: 53, scope: !9117)
!9196 = !DILocation(line: 3331, column: 13, scope: !9117)
!9197 = !DILocation(line: 3331, column: 11, scope: !9117)
!9198 = !DILocation(line: 3332, column: 14, scope: !9117)
!9199 = !DILocation(line: 3332, column: 7, scope: !9117)
!9200 = !DILocation(line: 3336, column: 14, scope: !9117)
!9201 = !DILocation(line: 3336, column: 7, scope: !9117)
!9202 = !DILocation(line: 3339, column: 7, scope: !9117)
!9203 = !DILocation(line: 3340, column: 5, scope: !9117)
!9204 = !DILocation(line: 3342, column: 5, scope: !9072)
!9205 = !DILocation(line: 3344, column: 1, scope: !9072)
!9206 = distinct !DISubprogram(name: "update_stmt", scope: !743, file: !743, line: 1456, type: !7362, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9207 = !DILocalVariable(name: "s", arg: 1, scope: !9206, file: !743, line: 1456, type: !1959)
!9208 = !DILocation(line: 1456, column: 21, scope: !9206)
!9209 = !DILocation(line: 1458, column: 23, scope: !9210)
!9210 = distinct !DILexicalBlock(scope: !9206, file: !743, line: 1458, column: 7)
!9211 = !DILocation(line: 1458, column: 7, scope: !9210)
!9212 = !DILocation(line: 1458, column: 7, scope: !9206)
!9213 = !DILocation(line: 1460, column: 28, scope: !9214)
!9214 = distinct !DILexicalBlock(scope: !9210, file: !743, line: 1459, column: 5)
!9215 = !DILocation(line: 1460, column: 7, scope: !9214)
!9216 = !DILocation(line: 1461, column: 29, scope: !9214)
!9217 = !DILocation(line: 1461, column: 7, scope: !9214)
!9218 = !DILocation(line: 1462, column: 5, scope: !9214)
!9219 = !DILocation(line: 1463, column: 1, scope: !9206)
!9220 = distinct !DISubprogram(name: "gsi_bb", scope: !743, file: !743, line: 4588, type: !9221, scopeLine: 4589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9221 = !DISubroutineType(types: !9222)
!9222 = !{!2392, !4432}
!9223 = !DILocalVariable(name: "i", arg: 1, scope: !9220, file: !743, line: 4588, type: !4432)
!9224 = !DILocation(line: 4588, column: 30, scope: !9220)
!9225 = !DILocation(line: 4590, column: 12, scope: !9220)
!9226 = !DILocation(line: 4590, column: 3, scope: !9220)
!9227 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !330, file: !330, line: 150, type: !9228, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9228 = !DISubroutineType(types: !9229)
!9229 = !{!7, !7145}
!9230 = !DILocalVariable(name: "vec_", arg: 1, scope: !9227, file: !330, line: 150, type: !7145)
!9231 = !DILocation(line: 150, column: 1, scope: !9227)
!9232 = distinct !DISubprogram(name: "single_succ_edge", scope: !330, file: !330, line: 643, type: !9233, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9233 = !DISubroutineType(types: !9234)
!9234 = !{!1939, !5662}
!9235 = !DILocalVariable(name: "bb", arg: 1, scope: !9232, file: !330, line: 643, type: !5662)
!9236 = !DILocation(line: 643, column: 37, scope: !9232)
!9237 = !DILocation(line: 645, column: 3, scope: !9232)
!9238 = !DILocation(line: 646, column: 10, scope: !9232)
!9239 = !DILocation(line: 646, column: 3, scope: !9232)
!9240 = distinct !DISubprogram(name: "has_single_use", scope: !3178, file: !3178, line: 350, type: !3661, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9241 = !DILocalVariable(name: "var", arg: 1, scope: !9240, file: !3178, line: 350, type: !3663)
!9242 = !DILocation(line: 350, column: 28, scope: !9240)
!9243 = !DILocalVariable(name: "ptr", scope: !9240, file: !3178, line: 352, type: !9244)
!9244 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9245)
!9245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9246, size: 64)
!9246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5874)
!9247 = !DILocation(line: 352, column: 34, scope: !9240)
!9248 = !DILocation(line: 352, column: 42, scope: !9240)
!9249 = !DILocation(line: 355, column: 7, scope: !9250)
!9250 = distinct !DILexicalBlock(scope: !9240, file: !3178, line: 355, column: 7)
!9251 = !DILocation(line: 355, column: 14, scope: !9250)
!9252 = !DILocation(line: 355, column: 19, scope: !9250)
!9253 = !DILocation(line: 355, column: 11, scope: !9250)
!9254 = !DILocation(line: 355, column: 7, scope: !9240)
!9255 = !DILocation(line: 356, column: 5, scope: !9250)
!9256 = !DILocation(line: 359, column: 7, scope: !9257)
!9257 = distinct !DILexicalBlock(scope: !9240, file: !3178, line: 359, column: 7)
!9258 = !DILocation(line: 359, column: 14, scope: !9257)
!9259 = !DILocation(line: 359, column: 19, scope: !9257)
!9260 = !DILocation(line: 359, column: 25, scope: !9257)
!9261 = !DILocation(line: 359, column: 11, scope: !9257)
!9262 = !DILocation(line: 359, column: 7, scope: !9240)
!9263 = !DILocation(line: 360, column: 30, scope: !9257)
!9264 = !DILocation(line: 360, column: 13, scope: !9257)
!9265 = !DILocation(line: 360, column: 12, scope: !9257)
!9266 = !DILocation(line: 360, column: 5, scope: !9257)
!9267 = !DILocation(line: 363, column: 8, scope: !9268)
!9268 = distinct !DILexicalBlock(scope: !9240, file: !3178, line: 363, column: 7)
!9269 = !DILocation(line: 363, column: 7, scope: !9240)
!9270 = !DILocation(line: 364, column: 5, scope: !9268)
!9271 = !DILocation(line: 366, column: 28, scope: !9240)
!9272 = !DILocation(line: 366, column: 10, scope: !9240)
!9273 = !DILocation(line: 366, column: 3, scope: !9240)
!9274 = !DILocation(line: 367, column: 1, scope: !9240)
!9275 = distinct !DISubprogram(name: "single_succ_p", scope: !330, file: !330, line: 626, type: !9276, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9276 = !DISubroutineType(types: !9277)
!9277 = !{!1748, !5662}
!9278 = !DILocalVariable(name: "bb", arg: 1, scope: !9275, file: !330, line: 626, type: !5662)
!9279 = !DILocation(line: 626, column: 34, scope: !9275)
!9280 = !DILocation(line: 628, column: 10, scope: !9275)
!9281 = !DILocation(line: 628, column: 33, scope: !9275)
!9282 = !DILocation(line: 628, column: 3, scope: !9275)
!9283 = distinct !DISubprogram(name: "is_gimple_debug", scope: !743, file: !743, line: 3249, type: !4378, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3010)
!9284 = !DILocalVariable(name: "gs", arg: 1, scope: !9283, file: !743, line: 3249, type: !4380)
!9285 = !DILocation(line: 3249, column: 31, scope: !9283)
!9286 = !DILocation(line: 3251, column: 23, scope: !9283)
!9287 = !DILocation(line: 3251, column: 10, scope: !9283)
!9288 = !DILocation(line: 3251, column: 27, scope: !9283)
!9289 = !DILocation(line: 3251, column: 3, scope: !9283)
