; ModuleID = 'ipa-struct-reorg.c'
source_filename = "ipa-struct-reorg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.VEC_structure_heap = type { %struct.VEC_structure_base }
%struct.VEC_structure_base = type { i32, i32, [1 x %struct.data_structure] }
%struct.data_structure = type { %union.tree_node*, i32, i64, %struct.field_entry*, %struct.htab*, %struct.field_cluster*, %struct.VEC_tree_heap* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.field_entry = type { i32, i64, %union.tree_node*, %union.tree_node*, %struct.htab* }
%struct.field_cluster = type { %struct.simple_bitmap_def*, %struct.field_cluster* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.access_site = type { %union.gimple_statement_d*, %struct.VEC_tree_heap* }
%struct.field_access_site = type { %union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.gimple_statement_d*, %union.gimple_statement_d* }
%struct.func_alloc_sites = type { %union.tree_node*, %struct.VEC_alloc_site_t_heap* }
%struct.VEC_alloc_site_t_heap = type { %struct.VEC_alloc_site_t_base }
%struct.VEC_alloc_site_t_base = type { i32, i32, [1 x %struct.alloc_site] }
%struct.alloc_site = type { %union.gimple_statement_d*, %struct.data_structure* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.exclude_data = type { %union.tree_node*, %struct.data_structure* }
%struct.find_stmt_data = type { i8, %union.gimple_statement_d* }
%struct.new_var_data = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_type_wrapper_t_heap = type { %struct.VEC_type_wrapper_t_base }
%struct.VEC_type_wrapper_t_base = type { i32, i32, [1 x %struct.type_wrapper] }
%struct.type_wrapper = type { i8, %union.tree_node* }
%struct.referenced_var_iterator = type { %struct.htab_iterator }
%struct.htab_iterator = type { %struct.htab*, i8**, i8** }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.create_acc_data = type { %struct.basic_block_def*, %struct.data_structure*, i32 }
%struct.ref_pos = type { %union.tree_node**, %union.tree_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }

@alloc_sites = dso_local global %struct.htab* null, align 8, !dbg !0
@.str = private unnamed_addr constant [17 x i8] c"ipa_struct_reorg\00", align 1
@pass_ipa_struct_reorg = dso_local global %struct.simple_ipa_opt_pass { %struct.opt_pass { i32 2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i8 ()* @struct_reorg_gate, i32 ()* @reorg_structs_drive, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 47, i32 0, i32 0, i32 0, i32 4, i32 5 } }, align 8, !dbg !3194
@new_global_vars = common dso_local global %struct.htab* null, align 8, !dbg !3222
@new_local_vars = common dso_local global %struct.htab* null, align 8, !dbg !3224
@structures = common dso_local global %struct.VEC_structure_heap* null, align 8, !dbg !3226
@flag_ipa_struct_reorg = external dso_local global i32, align 4
@flag_whole_program = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@.str.1 = private unnamed_addr constant [19 x i8] c"__builtin_offsetof\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"realloc\00", align 1
@varpool_nodes_queue = external dso_local global %struct.varpool_node*, align 8
@.str.3 = private unnamed_addr constant [19 x i8] c"ipa-struct-reorg.c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [10 x i8] c"The type \00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c" is initialized...Excluded.\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.7 = private unnamed_addr constant [25 x i8] c"\0AAdding data structure \22\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"\22 to data_struct_list.\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.9 = private unnamed_addr constant [7 x i8] c"\0AType \00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c" is a field in the structure \00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c". Escaping...\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"\0APointer to type \22\00", align 1
@.str.13 = private unnamed_addr constant [42 x i8] c"\22 is passed to local function...Excluded.\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"\0AThe type \22\00", align 1
@.str.15 = private unnamed_addr constant [41 x i8] c"\22 is return type of function...Excluded.\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"\0AEscaping type is \00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"\0Aescapes due to bitfield \00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"\0ARemoving data structure \22\00", align 1
@.str.19 = private unnamed_addr constant [25 x i8] c"\22 from data_struct_list.\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c"\0AUnsupported allocation function \00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.21 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.22 = private unnamed_addr constant [14 x i8] c"\0AAdding stmt \00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c" to list of mallocs.\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"\0AThe type \00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c" has bitfield.\00", align 1
@.str.26 = private unnamed_addr constant [37 x i8] c" has complicate access in statement \00", align 1
@tree_code_length = external dso_local constant [0 x i8], align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.28 = private unnamed_addr constant [31 x i8] c"\0AUnsafe conditional statement \00", align 1
@.str.29 = private unnamed_addr constant [25 x i8] c"\0AAccess sites of struct \00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"\0AAccess site of field \00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.32 = private unnamed_addr constant [23 x i8] c"\0AGeneral access sites\0A\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c" : \00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c", \00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.36 = private unnamed_addr constant [16 x i8] c"\0AThe structure \00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c" is cold.\00", align 1
@.str.38 = private unnamed_addr constant [20 x i8] c"\0ACounter of field \22\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"\22 is %ld\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"\0ACounter of struct \22\00", align 1
@.str.41 = private unnamed_addr constant [40 x i8] c"\0ANo structures to transform. Exiting...\00", align 1
@.str.42 = private unnamed_addr constant [41 x i8] c"\0ANumber of structures to transform is %d\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"struct\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"%s.%lu\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"_sub\00", align 1
@.str.46 = private unnamed_addr constant [66 x i8] c"\0AThe following are the new types generated by this optimization:\0A\00", align 1
@.str.47 = private unnamed_addr constant [11 x i8] c"\0AFor type \00", align 1
@.str.48 = private unnamed_addr constant [32 x i8] c"\0Athe number of new types is %d\0A\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"struct \00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c";\0A\00", align 1
@.str.54 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"\0AOrig var: \00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c" of type \00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.58 = private unnamed_addr constant [31 x i8] c"\0AFunction to do reorg is %s: \0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @struct_reorg_gate() #0 !dbg !3232 {
entry:
  %0 = load i32, i32* @flag_ipa_struct_reorg, align 4, !dbg !3234
  %tobool = icmp ne i32 %0, 0, !dbg !3234
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3235

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_whole_program, align 4, !dbg !3236
  %tobool1 = icmp ne i32 %1, 0, !dbg !3236
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !3237

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load i32, i32* @optimize, align 4, !dbg !3238
  %cmp = icmp sgt i32 %2, 0, !dbg !3239
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3240
  %land.ext = zext i1 %3 to i32, !dbg !3237
  %conv = trunc i32 %land.ext to i8, !dbg !3234
  ret i8 %conv, !dbg !3241
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @reorg_structs_drive() #0 !dbg !3242 {
entry:
  call void @reorg_structs(), !dbg !3243
  ret i32 0, !dbg !3244
}

; Function Attrs: noinline nounwind uwtable
define internal void @reorg_structs() #0 !dbg !3245 {
entry:
  call void @collect_structures(), !dbg !3248
  call void @collect_allocation_sites(), !dbg !3249
  call void @collect_data_accesses(), !dbg !3250
  call void @exclude_cold_structs(), !dbg !3251
  call void @peel_structs(), !dbg !3252
  call void @do_reorg(), !dbg !3253
  call void @free_data_structs(), !dbg !3254
  ret void, !dbg !3255
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_structures() #0 !dbg !3256 {
entry:
  %unsuitable_types = alloca %struct.VEC_tree_heap*, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %unsuitable_types, metadata !3257, metadata !DIExpression()), !dbg !3258
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 32), !dbg !3259
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %unsuitable_types, align 8, !dbg !3258
  %call1 = call %struct.VEC_structure_heap* @VEC_structure_heap_alloc(i32 32), !dbg !3260
  store %struct.VEC_structure_heap* %call1, %struct.VEC_structure_heap** @structures, align 8, !dbg !3261
  %call2 = call zeroext i8 @program_redefines_malloc_p(), !dbg !3262
  %tobool = icmp ne i8 %call2, 0, !dbg !3262
  br i1 %tobool, label %if.then, label %if.end, !dbg !3264

if.then:                                          ; preds = %entry
  br label %return, !dbg !3265

if.end:                                           ; preds = %entry
  call void @build_data_structure(%struct.VEC_tree_heap** %unsuitable_types), !dbg !3266
  call void @analyze_struct_form(%struct.VEC_tree_heap** %unsuitable_types), !dbg !3267
  call void @exclude_escaping_types(%struct.VEC_tree_heap** %unsuitable_types), !dbg !3268
  call void @exclude_types_with_bit_fields(%struct.VEC_tree_heap** %unsuitable_types), !dbg !3269
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %unsuitable_types, align 8, !dbg !3270
  call void @remove_unsuitable_types(%struct.VEC_tree_heap* %0), !dbg !3271
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %unsuitable_types), !dbg !3272
  br label %return, !dbg !3273

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3273
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_allocation_sites() #0 !dbg !3274 {
entry:
  %call = call %struct.htab* @htab_create(i64 32, i32 (i8*)* @malloc_hash, i32 (i8*, i8*)* @malloc_eq, void (i8*)* null), !dbg !3275
  store %struct.htab* %call, %struct.htab** @alloc_sites, align 8, !dbg !3276
  call void @collect_alloc_sites(), !dbg !3277
  ret void, !dbg !3278
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_data_accesses() #0 !dbg !3279 {
entry:
  %c_node = alloca %struct.cgraph_node*, align 8
  %avail = alloca i32, align 4
  %func = alloca %struct.function*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !3280, metadata !DIExpression()), !dbg !3485
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3486
  store %struct.cgraph_node* %0, %struct.cgraph_node** %c_node, align 8, !dbg !3488
  br label %for.cond, !dbg !3489

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3490
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !3492
  br i1 %tobool, label %for.body, label %for.end, !dbg !3492

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %avail, metadata !3493, metadata !DIExpression()), !dbg !3495
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3496
  %call = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %2), !dbg !3497
  store i32 %call, i32* %avail, align 4, !dbg !3495
  %3 = load i32, i32* %avail, align 4, !dbg !3498
  %cmp = icmp eq i32 %3, 4, !dbg !3500
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3501

lor.lhs.false:                                    ; preds = %for.body
  %4 = load i32, i32* %avail, align 4, !dbg !3502
  %cmp1 = icmp eq i32 %4, 3, !dbg !3503
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3504

if.then:                                          ; preds = %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %struct.function** %func, metadata !3505, metadata !DIExpression()), !dbg !3507
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3508
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !3508
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3508
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !3508
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3508
  %7 = load %struct.function*, %struct.function** %f, align 8, !dbg !3508
  store %struct.function* %7, %struct.function** %func, align 8, !dbg !3507
  %8 = load %struct.function*, %struct.function** %func, align 8, !dbg !3509
  call void @collect_accesses_in_func(%struct.function* %8), !dbg !3510
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3511
  call void @exclude_alloc_and_field_accs(%struct.cgraph_node* %9), !dbg !3512
  br label %if.end, !dbg !3513

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc, !dbg !3514

for.inc:                                          ; preds = %if.end
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3515
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 3, !dbg !3516
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3516
  store %struct.cgraph_node* %11, %struct.cgraph_node** %c_node, align 8, !dbg !3517
  br label %for.cond, !dbg !3518, !llvm.loop !3519

for.end:                                          ; preds = %for.cond
  call void @check_cond_exprs(), !dbg !3521
  call void @dump_accesses(), !dbg !3522
  ret void, !dbg !3523
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_cold_structs() #0 !dbg !3524 {
entry:
  %hottest = alloca i64, align 8
  %i = alloca i32, align 4
  %str = alloca %struct.data_structure*, align 8
  call void @llvm.dbg.declare(metadata i64* %hottest, metadata !3525, metadata !DIExpression()), !dbg !3526
  store i64 0, i64* %hottest, align 8, !dbg !3526
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3527, metadata !DIExpression()), !dbg !3528
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !3529, metadata !DIExpression()), !dbg !3530
  store i32 0, i32* %i, align 4, !dbg !3531
  br label %for.cond, !dbg !3533

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3534
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !3534
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3534

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3534
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !3534
  br label %cond.end, !dbg !3534

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3534
  %2 = load i32, i32* %i, align 4, !dbg !3534
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !3534
  %tobool1 = icmp ne i32 %call, 0, !dbg !3536
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3536

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3537
  call void @sum_counts(%struct.data_structure* %3, i64* %hottest), !dbg !3538
  br label %for.inc, !dbg !3538

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !3539
  %inc = add i32 %4, 1, !dbg !3539
  store i32 %inc, i32* %i, align 4, !dbg !3539
  br label %for.cond, !dbg !3540, !llvm.loop !3541

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !3543
  br label %while.cond, !dbg !3544

while.cond:                                       ; preds = %if.end17, %for.end
  %5 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3545
  %tobool2 = icmp ne %struct.VEC_structure_heap* %5, null, !dbg !3545
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !3545

cond.true3:                                       ; preds = %while.cond
  %6 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3545
  %base4 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %6, i32 0, i32 0, !dbg !3545
  br label %cond.end6, !dbg !3545

cond.false5:                                      ; preds = %while.cond
  br label %cond.end6, !dbg !3545

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_structure_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !3545
  %7 = load i32, i32* %i, align 4, !dbg !3545
  %call8 = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond7, i32 %7, %struct.data_structure** %str), !dbg !3545
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3544
  br i1 %tobool9, label %while.body, label %while.end, !dbg !3544

while.body:                                       ; preds = %cond.end6
  %8 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3546
  %count = getelementptr inbounds %struct.data_structure, %struct.data_structure* %8, i32 0, i32 2, !dbg !3548
  %9 = load i64, i64* %count, align 8, !dbg !3548
  %mul = mul nsw i64 %9, 100, !dbg !3549
  %10 = load i64, i64* %hottest, align 8, !dbg !3550
  %11 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3551
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %11, i64 0, !dbg !3551
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3551
  %12 = load i32, i32* %value, align 8, !dbg !3551
  %conv = sext i32 %12 to i64, !dbg !3551
  %mul10 = mul nsw i64 %10, %conv, !dbg !3552
  %cmp = icmp slt i64 %mul, %mul10, !dbg !3553
  br i1 %cmp, label %if.then, label %if.else, !dbg !3554

if.then:                                          ; preds = %while.body
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3555
  %tobool12 = icmp ne %struct._IO_FILE* %13, null, !dbg !3555
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !3558

if.then13:                                        ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3559
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0)), !dbg !3561
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3562
  %16 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3563
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 0, !dbg !3564
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3564
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %17, i32 0), !dbg !3565
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3566
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0)), !dbg !3567
  br label %if.end, !dbg !3568

if.end:                                           ; preds = %if.then13, %if.then
  %19 = load i32, i32* %i, align 4, !dbg !3569
  call void @remove_structure(i32 %19), !dbg !3570
  br label %if.end17, !dbg !3571

if.else:                                          ; preds = %while.body
  %20 = load i32, i32* %i, align 4, !dbg !3572
  %inc16 = add i32 %20, 1, !dbg !3572
  store i32 %inc16, i32* %i, align 4, !dbg !3572
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.end
  br label %while.cond, !dbg !3544, !llvm.loop !3573

while.end:                                        ; preds = %cond.end6
  ret void, !dbg !3575
}

; Function Attrs: noinline nounwind uwtable
define internal void @peel_structs() #0 !dbg !3576 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !3577, metadata !DIExpression()), !dbg !3578
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3579, metadata !DIExpression()), !dbg !3580
  store i32 0, i32* %i, align 4, !dbg !3581
  br label %for.cond, !dbg !3583

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3584
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !3584
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3584

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3584
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !3584
  br label %cond.end, !dbg !3584

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3584

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3584
  %2 = load i32, i32* %i, align 4, !dbg !3584
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !3584
  %tobool1 = icmp ne i32 %call, 0, !dbg !3586
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3586

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3587
  call void @peel_hot_fields(%struct.data_structure* %3), !dbg !3588
  br label %for.inc, !dbg !3588

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !3589
  %inc = add i32 %4, 1, !dbg !3589
  store i32 %inc, i32* %i, align 4, !dbg !3589
  br label %for.cond, !dbg !3590, !llvm.loop !3591

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3593
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_reorg() #0 !dbg !3594 {
entry:
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3595
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !3595
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3595

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3595
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !3595
  br label %cond.end, !dbg !3595

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3595

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3595
  %call = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !3595
  %tobool1 = icmp ne i32 %call, 0, !dbg !3595
  br i1 %tobool1, label %if.else, label %if.then, !dbg !3597

if.then:                                          ; preds = %cond.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3598
  %tobool2 = icmp ne %struct._IO_FILE* %2, null, !dbg !3598
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !3601

if.then3:                                         ; preds = %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3602
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.41, i64 0, i64 0)), !dbg !3603
  br label %if.end, !dbg !3603

if.end:                                           ; preds = %if.then3, %if.then
  br label %return, !dbg !3604

if.else:                                          ; preds = %cond.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3605
  %tobool5 = icmp ne %struct._IO_FILE* %4, null, !dbg !3605
  br i1 %tobool5, label %if.then6, label %if.end15, !dbg !3608

if.then6:                                         ; preds = %if.else
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3609
  %6 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3611
  %tobool7 = icmp ne %struct.VEC_structure_heap* %6, null, !dbg !3611
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !3611

cond.true8:                                       ; preds = %if.then6
  %7 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3611
  %base9 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %7, i32 0, i32 0, !dbg !3611
  br label %cond.end11, !dbg !3611

cond.false10:                                     ; preds = %if.then6
  br label %cond.end11, !dbg !3611

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_structure_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !3611
  %call13 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond12), !dbg !3611
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.42, i64 0, i64 0), i32 %call13), !dbg !3612
  br label %if.end15, !dbg !3613

if.end15:                                         ; preds = %cond.end11, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  call void @create_new_types(), !dbg !3614
  call void @dump_new_types(), !dbg !3615
  call void @create_new_global_vars(), !dbg !3616
  %8 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !3617
  call void @dump_new_vars(%struct.htab* %8), !dbg !3618
  call void @do_reorg_1(), !dbg !3619
  %9 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !3620
  call void @free_new_vars_htab(%struct.htab* %9), !dbg !3621
  br label %return, !dbg !3622

return:                                           ; preds = %if.end16, %if.end
  ret void, !dbg !3622
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_data_structs() #0 !dbg !3623 {
entry:
  call void @free_structures(), !dbg !3624
  call void @free_alloc_sites(), !dbg !3625
  ret void, !dbg !3626
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !3627 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3630, metadata !DIExpression()), !dbg !3631
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3631
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3631
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !3631
  ret %struct.VEC_tree_heap* %1, !dbg !3631
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_structure_heap* @VEC_structure_heap_alloc(i32 %alloc_) #0 !dbg !3632 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3635, metadata !DIExpression()), !dbg !3636
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3636
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 56), !dbg !3636
  %1 = bitcast i8* %call to %struct.VEC_structure_heap*, !dbg !3636
  ret %struct.VEC_structure_heap* %1, !dbg !3636
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @program_redefines_malloc_p() #0 !dbg !3637 {
entry:
  %retval = alloca i8, align 1
  %c_node = alloca %struct.cgraph_node*, align 8
  %c_node2 = alloca %struct.cgraph_node*, align 8
  %c_edge = alloca %struct.cgraph_edge*, align 8
  %fndecl2 = alloca %union.tree_node*, align 8
  %fname = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !3638, metadata !DIExpression()), !dbg !3639
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node2, metadata !3640, metadata !DIExpression()), !dbg !3641
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %c_edge, metadata !3642, metadata !DIExpression()), !dbg !3643
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl2, metadata !3644, metadata !DIExpression()), !dbg !3645
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3646
  store %struct.cgraph_node* %0, %struct.cgraph_node** %c_node, align 8, !dbg !3648
  br label %for.cond, !dbg !3649

for.cond:                                         ; preds = %for.inc35, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3650
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !3652
  br i1 %tobool, label %for.body, label %for.end36, !dbg !3652

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3653
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 1, !dbg !3656
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !3656
  store %struct.cgraph_edge* %3, %struct.cgraph_edge** %c_edge, align 8, !dbg !3657
  br label %for.cond1, !dbg !3658

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %c_edge, align 8, !dbg !3659
  %tobool2 = icmp ne %struct.cgraph_edge* %4, null, !dbg !3661
  br i1 %tobool2, label %for.body3, label %for.end, !dbg !3661

for.body3:                                        ; preds = %for.cond1
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %c_edge, align 8, !dbg !3662
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 2, !dbg !3664
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3664
  store %struct.cgraph_node* %6, %struct.cgraph_node** %c_node2, align 8, !dbg !3665
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node2, align 8, !dbg !3666
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !3667
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3667
  store %union.tree_node* %8, %union.tree_node** %fndecl2, align 8, !dbg !3668
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %c_edge, align 8, !dbg !3669
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 7, !dbg !3671
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !3671
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %10), !dbg !3672
  %tobool4 = icmp ne i8 %call, 0, !dbg !3672
  br i1 %tobool4, label %if.then, label %if.end34, !dbg !3673

if.then:                                          ; preds = %for.body3
  call void @llvm.dbg.declare(metadata i8** %fname, metadata !3674, metadata !DIExpression()), !dbg !3676
  %11 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !3677
  %call5 = call i8* @get_name(%union.tree_node* %11), !dbg !3678
  store i8* %call5, i8** %fname, align 8, !dbg !3676
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %c_edge, align 8, !dbg !3679
  %call_stmt6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 7, !dbg !3681
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt6, align 8, !dbg !3681
  %call7 = call i32 @gimple_call_flags(%union.gimple_statement_d* %13), !dbg !3682
  %and = and i32 %call7, 16, !dbg !3683
  %tobool8 = icmp ne i32 %and, 0, !dbg !3683
  br i1 %tobool8, label %land.lhs.true, label %if.end, !dbg !3684

land.lhs.true:                                    ; preds = %if.then
  %14 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !3685
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !3685
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3685
  %bf.load = load i32, i32* %function_code, align 8, !dbg !3685
  %bf.clear = and i32 %bf.load, 2047, !dbg !3685
  %cmp = icmp ne i32 %bf.clear, 491, !dbg !3686
  br i1 %cmp, label %land.lhs.true9, label %if.end, !dbg !3687

land.lhs.true9:                                   ; preds = %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !3688
  %function_decl10 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !3688
  %function_code11 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !3688
  %bf.load12 = load i32, i32* %function_code11, align 8, !dbg !3688
  %bf.clear13 = and i32 %bf.load12, 2047, !dbg !3688
  %cmp14 = icmp ne i32 %bf.clear13, 422, !dbg !3689
  br i1 %cmp14, label %land.lhs.true15, label %if.end, !dbg !3690

land.lhs.true15:                                  ; preds = %land.lhs.true9
  %16 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !3691
  %function_decl16 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !3691
  %function_code17 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl16, i32 0, i32 5, !dbg !3691
  %bf.load18 = load i32, i32* %function_code17, align 8, !dbg !3691
  %bf.clear19 = and i32 %bf.load18, 2047, !dbg !3691
  %cmp20 = icmp ne i32 %bf.clear19, 415, !dbg !3692
  br i1 %cmp20, label %if.then21, label %if.end, !dbg !3693

if.then21:                                        ; preds = %land.lhs.true15
  store i8 1, i8* %retval, align 1, !dbg !3694
  br label %return, !dbg !3694

if.end:                                           ; preds = %land.lhs.true15, %land.lhs.true9, %land.lhs.true, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %fndecl2, align 8, !dbg !3695
  %function_decl22 = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !3695
  %function_code23 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl22, i32 0, i32 5, !dbg !3695
  %bf.load24 = load i32, i32* %function_code23, align 8, !dbg !3695
  %bf.clear25 = and i32 %bf.load24, 2047, !dbg !3695
  %cmp26 = icmp eq i32 %bf.clear25, 528, !dbg !3697
  br i1 %cmp26, label %if.then32, label %lor.lhs.false, !dbg !3698

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i8*, i8** %fname, align 8, !dbg !3699
  %call27 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)), !dbg !3700
  %tobool28 = icmp ne i32 %call27, 0, !dbg !3700
  br i1 %tobool28, label %lor.lhs.false29, label %if.then32, !dbg !3701

lor.lhs.false29:                                  ; preds = %lor.lhs.false
  %19 = load i8*, i8** %fname, align 8, !dbg !3702
  %call30 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)), !dbg !3703
  %tobool31 = icmp ne i32 %call30, 0, !dbg !3703
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !3704

if.then32:                                        ; preds = %lor.lhs.false29, %lor.lhs.false, %if.end
  store i8 1, i8* %retval, align 1, !dbg !3705
  br label %return, !dbg !3705

if.end33:                                         ; preds = %lor.lhs.false29
  br label %if.end34, !dbg !3706

if.end34:                                         ; preds = %if.end33, %for.body3
  br label %for.inc, !dbg !3707

for.inc:                                          ; preds = %if.end34
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %c_edge, align 8, !dbg !3708
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 6, !dbg !3709
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !3709
  store %struct.cgraph_edge* %21, %struct.cgraph_edge** %c_edge, align 8, !dbg !3710
  br label %for.cond1, !dbg !3711, !llvm.loop !3712

for.end:                                          ; preds = %for.cond1
  br label %for.inc35, !dbg !3714

for.inc35:                                        ; preds = %for.end
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3715
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 3, !dbg !3716
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3716
  store %struct.cgraph_node* %23, %struct.cgraph_node** %c_node, align 8, !dbg !3717
  br label %for.cond, !dbg !3718, !llvm.loop !3719

for.end36:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !3721
  br label %return, !dbg !3721

return:                                           ; preds = %for.end36, %if.then32, %if.then21
  %24 = load i8, i8* %retval, align 1, !dbg !3722
  ret i8 %24, !dbg !3722
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_data_structure(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !3723 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %var = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %var_list = alloca %union.tree_node*, align 8
  %current_varpool = alloca %struct.varpool_node*, align 8
  %c_node = alloca %struct.cgraph_node*, align 8
  %avail = alloca i32, align 4
  %fn = alloca %struct.function*, align 8
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !3727, metadata !DIExpression()), !dbg !3728
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3729, metadata !DIExpression()), !dbg !3730
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3731, metadata !DIExpression()), !dbg !3732
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_list, metadata !3733, metadata !DIExpression()), !dbg !3734
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %current_varpool, metadata !3735, metadata !DIExpression()), !dbg !3736
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !3737, metadata !DIExpression()), !dbg !3738
  %0 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !3739
  store %struct.varpool_node* %0, %struct.varpool_node** %current_varpool, align 8, !dbg !3739
  br label %for.cond, !dbg !3739

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !3741
  %tobool = icmp ne %struct.varpool_node* %1, null, !dbg !3739
  br i1 %tobool, label %for.body, label %for.end, !dbg !3739

for.body:                                         ; preds = %for.cond
  %2 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !3743
  %decl = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %2, i32 0, i32 0, !dbg !3745
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3745
  store %union.tree_node* %3, %union.tree_node** %var, align 8, !dbg !3746
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3747
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3749
  %call = call zeroext i8 @is_candidate(%union.tree_node* %4, %union.tree_node** %type, %struct.VEC_tree_heap** %5), !dbg !3750
  %tobool1 = icmp ne i8 %call, 0, !dbg !3750
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3751

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3752
  call void @add_structure(%union.tree_node* %6), !dbg !3753
  br label %if.end, !dbg !3753

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3754

for.inc:                                          ; preds = %if.end
  %7 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !3741
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %7, i32 0, i32 2, !dbg !3741
  %8 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !3741
  store %struct.varpool_node* %8, %struct.varpool_node** %current_varpool, align 8, !dbg !3741
  br label %for.cond, !dbg !3741, !llvm.loop !3755

for.end:                                          ; preds = %for.cond
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3757
  store %struct.cgraph_node* %9, %struct.cgraph_node** %c_node, align 8, !dbg !3759
  br label %for.cond2, !dbg !3760

for.cond2:                                        ; preds = %for.inc39, %for.end
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3761
  %tobool3 = icmp ne %struct.cgraph_node* %10, null, !dbg !3763
  br i1 %tobool3, label %for.body4, label %for.end40, !dbg !3763

for.body4:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata i32* %avail, metadata !3764, metadata !DIExpression()), !dbg !3766
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3767
  %call5 = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %11), !dbg !3768
  store i32 %call5, i32* %avail, align 4, !dbg !3766
  %12 = load i32, i32* %avail, align 4, !dbg !3769
  %cmp = icmp eq i32 %12, 4, !dbg !3771
  br i1 %cmp, label %if.then7, label %lor.lhs.false, !dbg !3772

lor.lhs.false:                                    ; preds = %for.body4
  %13 = load i32, i32* %avail, align 4, !dbg !3773
  %cmp6 = icmp eq i32 %13, 3, !dbg !3774
  br i1 %cmp6, label %if.then7, label %if.end38, !dbg !3775

if.then7:                                         ; preds = %lor.lhs.false, %for.body4
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !3776, metadata !DIExpression()), !dbg !3778
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3779
  %decl8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 0, !dbg !3779
  %15 = load %union.tree_node*, %union.tree_node** %decl8, align 8, !dbg !3779
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !3779
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3779
  %16 = load %struct.function*, %struct.function** %f, align 8, !dbg !3779
  store %struct.function* %16, %struct.function** %fn, align 8, !dbg !3778
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3780
  %decl9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 0, !dbg !3780
  %18 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !3780
  %decl_non_common = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !3780
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3780
  %19 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !3780
  store %union.tree_node* %19, %union.tree_node** %var, align 8, !dbg !3782
  br label %for.cond10, !dbg !3783

for.cond10:                                       ; preds = %for.inc17, %if.then7
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3784
  %tobool11 = icmp ne %union.tree_node* %20, null, !dbg !3786
  br i1 %tobool11, label %for.body12, label %for.end18, !dbg !3786

for.body12:                                       ; preds = %for.cond10
  %21 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3787
  %22 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3789
  %call13 = call zeroext i8 @is_candidate(%union.tree_node* %21, %union.tree_node** %type, %struct.VEC_tree_heap** %22), !dbg !3790
  %tobool14 = icmp ne i8 %call13, 0, !dbg !3790
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3791

if.then15:                                        ; preds = %for.body12
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3792
  call void @add_structure(%union.tree_node* %23), !dbg !3793
  br label %if.end16, !dbg !3793

if.end16:                                         ; preds = %if.then15, %for.body12
  br label %for.inc17, !dbg !3794

for.inc17:                                        ; preds = %if.end16
  %24 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3795
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !3795
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3795
  %25 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3795
  store %union.tree_node* %25, %union.tree_node** %var, align 8, !dbg !3796
  br label %for.cond10, !dbg !3797, !llvm.loop !3798

for.end18:                                        ; preds = %for.cond10
  %26 = load %struct.function*, %struct.function** %fn, align 8, !dbg !3800
  %cmp19 = icmp eq %struct.function* %26, null, !dbg !3802
  br i1 %cmp19, label %if.then20, label %if.end26, !dbg !3803

if.then20:                                        ; preds = %for.end18
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3804
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 12, !dbg !3804
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !3804
  %tobool21 = icmp ne %struct.cgraph_node* %28, null, !dbg !3804
  br i1 %tobool21, label %land.lhs.true, label %cond.true, !dbg !3804

land.lhs.true:                                    ; preds = %if.then20
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3804
  %clone_of22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 12, !dbg !3804
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of22, align 8, !dbg !3804
  %decl23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 0, !dbg !3804
  %31 = load %union.tree_node*, %union.tree_node** %decl23, align 8, !dbg !3804
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3804
  %decl24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 0, !dbg !3804
  %33 = load %union.tree_node*, %union.tree_node** %decl24, align 8, !dbg !3804
  %cmp25 = icmp ne %union.tree_node* %31, %33, !dbg !3804
  br i1 %cmp25, label %cond.false, label %cond.true, !dbg !3804

cond.true:                                        ; preds = %land.lhs.true, %if.then20
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 3449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3804
  br label %cond.end, !dbg !3804

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3804

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3804
  br label %for.inc39, !dbg !3806

if.end26:                                         ; preds = %for.end18
  %34 = load %struct.function*, %struct.function** %fn, align 8, !dbg !3807
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %34, i32 0, i32 9, !dbg !3809
  %35 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !3809
  store %union.tree_node* %35, %union.tree_node** %var_list, align 8, !dbg !3810
  br label %for.cond27, !dbg !3811

for.cond27:                                       ; preds = %for.inc34, %if.end26
  %36 = load %union.tree_node*, %union.tree_node** %var_list, align 8, !dbg !3812
  %tobool28 = icmp ne %union.tree_node* %36, null, !dbg !3814
  br i1 %tobool28, label %for.body29, label %for.end37, !dbg !3814

for.body29:                                       ; preds = %for.cond27
  %37 = load %union.tree_node*, %union.tree_node** %var_list, align 8, !dbg !3815
  %list = bitcast %union.tree_node* %37 to %struct.tree_list*, !dbg !3815
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !3815
  %38 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3815
  store %union.tree_node* %38, %union.tree_node** %var, align 8, !dbg !3817
  %39 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3818
  %40 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3820
  %call30 = call zeroext i8 @is_candidate(%union.tree_node* %39, %union.tree_node** %type, %struct.VEC_tree_heap** %40), !dbg !3821
  %tobool31 = icmp ne i8 %call30, 0, !dbg !3821
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !3822

if.then32:                                        ; preds = %for.body29
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3823
  call void @add_structure(%union.tree_node* %41), !dbg !3824
  br label %if.end33, !dbg !3824

if.end33:                                         ; preds = %if.then32, %for.body29
  br label %for.inc34, !dbg !3825

for.inc34:                                        ; preds = %if.end33
  %42 = load %union.tree_node*, %union.tree_node** %var_list, align 8, !dbg !3826
  %common35 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3826
  %chain36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !3826
  %43 = load %union.tree_node*, %union.tree_node** %chain36, align 8, !dbg !3826
  store %union.tree_node* %43, %union.tree_node** %var_list, align 8, !dbg !3827
  br label %for.cond27, !dbg !3828, !llvm.loop !3829

for.end37:                                        ; preds = %for.cond27
  br label %if.end38, !dbg !3831

if.end38:                                         ; preds = %for.end37, %lor.lhs.false
  br label %for.inc39, !dbg !3832

for.inc39:                                        ; preds = %if.end38, %cond.end
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !3833
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 3, !dbg !3834
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3834
  store %struct.cgraph_node* %45, %struct.cgraph_node** %c_node, align 8, !dbg !3835
  br label %for.cond2, !dbg !3836, !llvm.loop !3837

for.end40:                                        ; preds = %for.cond2
  ret void, !dbg !3839
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_struct_form(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !3840 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !3841, metadata !DIExpression()), !dbg !3842
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3845, metadata !DIExpression()), !dbg !3846
  store i32 0, i32* %i, align 4, !dbg !3847
  br label %for.cond, !dbg !3849

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3850
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !3850
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3850

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3850
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !3850
  br label %cond.end, !dbg !3850

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3850

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3850
  %2 = load i32, i32* %i, align 4, !dbg !3850
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !3850
  %tobool1 = icmp ne i32 %call, 0, !dbg !3852
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3852

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3853
  %4 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3854
  call void @check_struct_form(%struct.data_structure* %3, %struct.VEC_tree_heap** %4), !dbg !3855
  br label %for.inc, !dbg !3855

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3856
  %inc = add i32 %5, 1, !dbg !3856
  store i32 %inc, i32* %i, align 4, !dbg !3856
  br label %for.cond, !dbg !3857, !llvm.loop !3858

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3860
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_escaping_types(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !3861 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !3862, metadata !DIExpression()), !dbg !3863
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3864
  call void @exclude_types_passed_to_local_func(%struct.VEC_tree_heap** %0), !dbg !3865
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3866
  call void @exclude_returned_types(%struct.VEC_tree_heap** %1), !dbg !3867
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3868
  call void @exclude_escaping_types_1(%struct.VEC_tree_heap** %2), !dbg !3869
  ret void, !dbg !3870
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_types_with_bit_fields(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !3871 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !3872, metadata !DIExpression()), !dbg !3873
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !3874, metadata !DIExpression()), !dbg !3875
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3876, metadata !DIExpression()), !dbg !3877
  store i32 0, i32* %i, align 4, !dbg !3878
  br label %for.cond, !dbg !3880

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3881
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !3881
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3881

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3881
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !3881
  br label %cond.end, !dbg !3881

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3881

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3881
  %2 = load i32, i32* %i, align 4, !dbg !3881
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !3881
  %tobool1 = icmp ne i32 %call, 0, !dbg !3883
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3883

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3884
  %4 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !3885
  call void @check_bitfields(%struct.data_structure* %3, %struct.VEC_tree_heap** %4), !dbg !3886
  br label %for.inc, !dbg !3886

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3887
  %inc = add i32 %5, 1, !dbg !3887
  store i32 %inc, i32* %i, align 4, !dbg !3887
  br label %for.cond, !dbg !3888, !llvm.loop !3889

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3891
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unsuitable_types(%struct.VEC_tree_heap* %unsuitable_types) #0 !dbg !3892 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap*, align 8
  %str = alloca %struct.data_structure*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.VEC_tree_heap* %unsuitable_types, %struct.VEC_tree_heap** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %unsuitable_types.addr, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3899, metadata !DIExpression()), !dbg !3900
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3901, metadata !DIExpression()), !dbg !3902
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3903, metadata !DIExpression()), !dbg !3904
  store i32 0, i32* %j, align 4, !dbg !3905
  br label %for.cond, !dbg !3907

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %unsuitable_types.addr, align 8, !dbg !3908
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !3908
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3908

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %unsuitable_types.addr, align 8, !dbg !3908
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !3908
  br label %cond.end, !dbg !3908

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3908

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3908
  %2 = load i32, i32* %j, align 4, !dbg !3908
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %type), !dbg !3908
  %tobool1 = icmp ne i32 %call, 0, !dbg !3910
  br i1 %tobool1, label %for.body, label %for.end16, !dbg !3910

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !3911
  br label %for.cond2, !dbg !3913

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3914
  %tobool3 = icmp ne %struct.VEC_structure_heap* %3, null, !dbg !3914
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !3914

cond.true4:                                       ; preds = %for.cond2
  %4 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !3914
  %base5 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %4, i32 0, i32 0, !dbg !3914
  br label %cond.end7, !dbg !3914

cond.false6:                                      ; preds = %for.cond2
  br label %cond.end7, !dbg !3914

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_structure_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !3914
  %5 = load i32, i32* %i, align 4, !dbg !3914
  %call9 = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond8, i32 %5, %struct.data_structure** %str), !dbg !3914
  %tobool10 = icmp ne i32 %call9, 0, !dbg !3916
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !3916

for.body11:                                       ; preds = %cond.end7
  %6 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !3917
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %6, i32 0, i32 0, !dbg !3919
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3919
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3920
  %call12 = call zeroext i8 @is_equal_types(%union.tree_node* %7, %union.tree_node* %8), !dbg !3921
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3921
  br i1 %tobool13, label %if.then, label %if.end, !dbg !3922

if.then:                                          ; preds = %for.body11
  %9 = load i32, i32* %i, align 4, !dbg !3923
  call void @remove_structure(i32 %9), !dbg !3925
  br label %for.end, !dbg !3926

if.end:                                           ; preds = %for.body11
  br label %for.inc, !dbg !3927

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3928
  %inc = add i32 %10, 1, !dbg !3928
  store i32 %inc, i32* %i, align 4, !dbg !3928
  br label %for.cond2, !dbg !3929, !llvm.loop !3930

for.end:                                          ; preds = %if.then, %cond.end7
  br label %for.inc14, !dbg !3931

for.inc14:                                        ; preds = %for.end
  %11 = load i32, i32* %j, align 4, !dbg !3932
  %inc15 = add i32 %11, 1, !dbg !3932
  store i32 %inc15, i32* %j, align 4, !dbg !3932
  br label %for.cond, !dbg !3933, !llvm.loop !3934

for.end16:                                        ; preds = %cond.end
  ret void, !dbg !3936
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !3937 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3940
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !3940
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !3940
  br i1 %tobool, label %if.then, label %if.end, !dbg !3939

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3940
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !3940
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !3940
  call void @free(i8* %4), !dbg !3940
  br label %if.end, !dbg !3940

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !3939
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !3939
  ret void, !dbg !3939
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !3942 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3947
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3948
  %cmp = icmp eq i32 %call, 8, !dbg !3949
  %conv = zext i1 %cmp to i32, !dbg !3949
  %conv1 = trunc i32 %conv to i8, !dbg !3948
  ret i8 %conv1, !dbg !3950
}

declare dso_local i8* @get_name(%union.tree_node*) #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3951 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3954, metadata !DIExpression()), !dbg !3955
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3956
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3957
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3958
  %bf.load = load i32, i32* %1, align 8, !dbg !3958
  %bf.clear = and i32 %bf.load, 255, !dbg !3958
  ret i32 %bf.clear, !dbg !3959
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_candidate(%union.tree_node* %var, %union.tree_node** %type_p, %struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !3960 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %type_p.addr = alloca %union.tree_node**, align 8
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %type = alloca %union.tree_node*, align 8
  %initialized = alloca i8, align 1
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3963, metadata !DIExpression()), !dbg !3964
  store %union.tree_node** %type_p, %union.tree_node*** %type_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %type_p.addr, metadata !3965, metadata !DIExpression()), !dbg !3966
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !3967, metadata !DIExpression()), !dbg !3968
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3969, metadata !DIExpression()), !dbg !3970
  call void @llvm.dbg.declare(metadata i8* %initialized, metadata !3971, metadata !DIExpression()), !dbg !3972
  store i8 0, i8* %initialized, align 1, !dbg !3972
  %0 = load %union.tree_node**, %union.tree_node*** %type_p.addr, align 8, !dbg !3973
  store %union.tree_node* null, %union.tree_node** %0, align 8, !dbg !3974
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3975
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3975
  br i1 %tobool, label %if.end, label %if.then, !dbg !3977

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3978
  br label %return, !dbg !3978

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3979
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3979
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3979
  %bf.load = load i64, i64* %3, align 8, !dbg !3979
  %bf.clear = and i64 %bf.load, 65535, !dbg !3979
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3979
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !3981
  br i1 %cmp, label %land.lhs.true, label %if.end3, !dbg !3982

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3983
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !3983
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3983
  %5 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !3983
  %cmp1 = icmp ne %union.tree_node* %5, null, !dbg !3984
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3985

if.then2:                                         ; preds = %land.lhs.true
  store i8 1, i8* %initialized, align 1, !dbg !3986
  br label %if.end3, !dbg !3987

if.end3:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3988
  %call = call %union.tree_node* @get_type_of_var(%union.tree_node* %6), !dbg !3989
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !3990
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3991
  %tobool4 = icmp ne %union.tree_node* %7, null, !dbg !3991
  br i1 %tobool4, label %if.then5, label %if.else26, !dbg !3993

if.then5:                                         ; preds = %if.end3
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3994
  %call6 = call %union.tree_node* @strip_type(%union.tree_node* %8), !dbg !3994
  %type7 = bitcast %union.tree_node* %call6 to %struct.tree_type*, !dbg !3994
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 16, !dbg !3994
  %9 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3994
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !3996
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3997
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3997
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3997
  %bf.load9 = load i64, i64* %11, align 8, !dbg !3997
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !3997
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3997
  %cmp12 = icmp ne i32 %bf.cast11, 16, !dbg !3999
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !4000

if.then13:                                        ; preds = %if.then5
  store i8 0, i8* %retval, align 1, !dbg !4001
  br label %return, !dbg !4001

if.else:                                          ; preds = %if.then5
  %12 = load i8, i8* %initialized, align 1, !dbg !4002
  %conv = zext i8 %12 to i32, !dbg !4002
  %tobool14 = icmp ne i32 %conv, 0, !dbg !4002
  br i1 %tobool14, label %land.lhs.true15, label %if.end25, !dbg !4005

land.lhs.true15:                                  ; preds = %if.else
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4006
  %tobool16 = icmp ne %struct.VEC_tree_heap** %13, null, !dbg !4006
  br i1 %tobool16, label %land.lhs.true17, label %if.end25, !dbg !4007

land.lhs.true17:                                  ; preds = %land.lhs.true15
  %14 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4008
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %14, align 8, !dbg !4009
  %tobool18 = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !4009
  br i1 %tobool18, label %if.then19, label %if.end25, !dbg !4010

if.then19:                                        ; preds = %land.lhs.true17
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4011
  %tobool20 = icmp ne %struct._IO_FILE* %16, null, !dbg !4011
  br i1 %tobool20, label %if.then21, label %if.end24, !dbg !4014

if.then21:                                        ; preds = %if.then19
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4015
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0)), !dbg !4017
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4018
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4019
  call void @print_generic_expr(%struct._IO_FILE* %18, %union.tree_node* %19, i32 0), !dbg !4020
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4021
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0)), !dbg !4022
  br label %if.end24, !dbg !4023

if.end24:                                         ; preds = %if.then21, %if.then19
  %21 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4024
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4025
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %21, %union.tree_node* %22), !dbg !4026
  br label %if.end25, !dbg !4027

if.end25:                                         ; preds = %if.end24, %land.lhs.true17, %land.lhs.true15, %if.else
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4028
  %24 = load %union.tree_node**, %union.tree_node*** %type_p.addr, align 8, !dbg !4029
  store %union.tree_node* %23, %union.tree_node** %24, align 8, !dbg !4030
  store i8 1, i8* %retval, align 1, !dbg !4031
  br label %return, !dbg !4031

if.else26:                                        ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !4032
  br label %return, !dbg !4032

return:                                           ; preds = %if.else26, %if.end25, %if.then13, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !4033
  ret i8 %25, !dbg !4033
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_structure(%union.tree_node* %type) #0 !dbg !4034 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.data_structure, align 8
  %i = alloca i32, align 4
  %num_fields = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4037, metadata !DIExpression()), !dbg !4038
  call void @llvm.dbg.declare(metadata %struct.data_structure* %node, metadata !4039, metadata !DIExpression()), !dbg !4040
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4041, metadata !DIExpression()), !dbg !4042
  call void @llvm.dbg.declare(metadata i32* %num_fields, metadata !4043, metadata !DIExpression()), !dbg !4044
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4045
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4045
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !4045
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4045
  store %union.tree_node* %1, %union.tree_node** %type.addr, align 8, !dbg !4046
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4047
  %call = call i32 @find_structure(%union.tree_node* %2), !dbg !4048
  store i32 %call, i32* %i, align 4, !dbg !4049
  %3 = load i32, i32* %i, align 4, !dbg !4050
  %4 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4052
  %tobool = icmp ne %struct.VEC_structure_heap* %4, null, !dbg !4052
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4052

cond.true:                                        ; preds = %entry
  %5 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4052
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %5, i32 0, i32 0, !dbg !4052
  br label %cond.end, !dbg !4052

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4052

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4052
  %call2 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !4052
  %cmp = icmp ne i32 %3, %call2, !dbg !4053
  br i1 %cmp, label %if.then, label %if.end, !dbg !4054

if.then:                                          ; preds = %cond.end
  br label %if.end13, !dbg !4055

if.end:                                           ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4056
  %call3 = call i32 @fields_length(%union.tree_node* %6), !dbg !4057
  store i32 %call3, i32* %num_fields, align 4, !dbg !4058
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4059
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 0, !dbg !4060
  store %union.tree_node* %7, %union.tree_node** %decl, align 8, !dbg !4061
  %8 = load i32, i32* %num_fields, align 4, !dbg !4062
  %num_fields4 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 1, !dbg !4063
  store i32 %8, i32* %num_fields4, align 8, !dbg !4064
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4065
  %10 = load i32, i32* %num_fields, align 4, !dbg !4066
  %call5 = call %struct.field_entry* @get_fields(%union.tree_node* %9, i32 %10), !dbg !4067
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 3, !dbg !4068
  store %struct.field_entry* %call5, %struct.field_entry** %fields, align 8, !dbg !4069
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 5, !dbg !4070
  store %struct.field_cluster* null, %struct.field_cluster** %struct_clustering, align 8, !dbg !4071
  %call6 = call %struct.htab* @htab_create(i64 32, i32 (i8*)* @acc_hash, i32 (i8*, i8*)* @acc_eq, void (i8*)* null), !dbg !4072
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 4, !dbg !4073
  store %struct.htab* %call6, %struct.htab** %accs, align 8, !dbg !4074
  %11 = load i32, i32* %num_fields, align 4, !dbg !4075
  %call7 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %11), !dbg !4075
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 6, !dbg !4076
  store %struct.VEC_tree_heap* %call7, %struct.VEC_tree_heap** %new_types, align 8, !dbg !4077
  %count = getelementptr inbounds %struct.data_structure, %struct.data_structure* %node, i32 0, i32 2, !dbg !4078
  store i64 0, i64* %count, align 8, !dbg !4079
  %call8 = call %struct.data_structure* @VEC_structure_heap_safe_push(%struct.VEC_structure_heap** @structures, %struct.data_structure* %node), !dbg !4080
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4081
  %tobool9 = icmp ne %struct._IO_FILE* %12, null, !dbg !4081
  br i1 %tobool9, label %if.then10, label %if.end13, !dbg !4083

if.then10:                                        ; preds = %if.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4084
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0)), !dbg !4086
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4087
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4088
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %15, i32 0), !dbg !4089
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4090
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0)), !dbg !4091
  br label %if.end13, !dbg !4092

if.end13:                                         ; preds = %if.then, %if.then10, %if.end
  ret void, !dbg !4093
}

declare dso_local i32 @cgraph_function_body_availability(%struct.cgraph_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_type_of_var(%union.tree_node* %var) #0 !dbg !4094 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4097, metadata !DIExpression()), !dbg !4098
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4099
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4099
  br i1 %tobool, label %if.end, label %if.then, !dbg !4101

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4102
  br label %return, !dbg !4102

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4103
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4103
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4103
  %bf.load = load i64, i64* %2, align 8, !dbg !4103
  %bf.clear = and i64 %bf.load, 65535, !dbg !4103
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4103
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !4105
  br i1 %cmp, label %if.then1, label %if.else, !dbg !4106

if.then1:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4107
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !4107
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4107
  %4 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4107
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !4108
  br label %return, !dbg !4108

if.else:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4109
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4109
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4109
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4109
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !4110
  br label %return, !dbg !4110

return:                                           ; preds = %if.else, %if.then1, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4111
  ret %union.tree_node* %7, !dbg !4111
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @strip_type(%union.tree_node* %type) #0 !dbg !4112 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4113, metadata !DIExpression()), !dbg !4114
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4115
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4115
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4115
  %bf.load = load i64, i64* %1, align 8, !dbg !4115
  %bf.clear = and i64 %bf.load, 65535, !dbg !4115
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4115
  %idxprom = sext i32 %bf.cast to i64, !dbg !4115
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4115
  %2 = load i32, i32* %arrayidx, align 4, !dbg !4115
  %cmp = icmp eq i32 %2, 2, !dbg !4115
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4115

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 210, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4115
  br label %cond.end, !dbg !4115

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4115
  br label %while.cond, !dbg !4116

while.cond:                                       ; preds = %while.body, %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4117
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4117
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4117
  %bf.load2 = load i64, i64* %4, align 8, !dbg !4117
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4117
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4117
  %cmp5 = icmp eq i32 %bf.cast4, 10, !dbg !4117
  br i1 %cmp5, label %lor.end, label %lor.lhs.false, !dbg !4117

lor.lhs.false:                                    ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4117
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4117
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4117
  %bf.load7 = load i64, i64* %6, align 8, !dbg !4117
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !4117
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4117
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !4117
  br i1 %cmp10, label %lor.end, label %lor.rhs, !dbg !4118

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4119
  %base11 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4119
  %8 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4119
  %bf.load12 = load i64, i64* %8, align 8, !dbg !4119
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4119
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4119
  %cmp15 = icmp eq i32 %bf.cast14, 15, !dbg !4120
  br label %lor.end, !dbg !4118

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp15, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end, !dbg !4116

while.body:                                       ; preds = %lor.end
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4121
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4121
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4121
  %11 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !4121
  store %union.tree_node* %11, %union.tree_node** %type.addr, align 8, !dbg !4122
  br label %while.cond, !dbg !4116, !llvm.loop !4123

while.end:                                        ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4124
  ret %union.tree_node* %12, !dbg !4125
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_unsuitable_type(%struct.VEC_tree_heap** %unsuitable_types, %union.tree_node* %type) #0 !dbg !4126 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4129, metadata !DIExpression()), !dbg !4130
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4131, metadata !DIExpression()), !dbg !4132
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4133, metadata !DIExpression()), !dbg !4134
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4135, metadata !DIExpression()), !dbg !4136
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4137
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4137
  br i1 %tobool, label %if.end, label %if.then, !dbg !4139

if.then:                                          ; preds = %entry
  br label %if.end17, !dbg !4140

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !4141
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !4141
  %2 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4141
  store %union.tree_node* %2, %union.tree_node** %type.addr, align 8, !dbg !4142
  store i32 0, i32* %i, align 4, !dbg !4143
  br label %for.cond, !dbg !4145

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4146
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !4146
  %tobool2 = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !4146
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !4146

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4146
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %5, align 8, !dbg !4146
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !4146
  br label %cond.end, !dbg !4146

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4146
  %7 = load i32, i32* %i, align 4, !dbg !4146
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %7, %union.tree_node** %t), !dbg !4146
  %tobool3 = icmp ne i32 %call, 0, !dbg !4148
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4148

for.body:                                         ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4149
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4151
  %call4 = call zeroext i8 @is_equal_types(%union.tree_node* %8, %union.tree_node* %9), !dbg !4152
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4152
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4153

if.then6:                                         ; preds = %for.body
  br label %for.end, !dbg !4154

if.end7:                                          ; preds = %for.body
  br label %for.inc, !dbg !4155

for.inc:                                          ; preds = %if.end7
  %10 = load i32, i32* %i, align 4, !dbg !4156
  %inc = add i32 %10, 1, !dbg !4156
  store i32 %inc, i32* %i, align 4, !dbg !4156
  br label %for.cond, !dbg !4157, !llvm.loop !4158

for.end:                                          ; preds = %if.then6, %cond.end
  %11 = load i32, i32* %i, align 4, !dbg !4160
  %12 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4162
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %12, align 8, !dbg !4162
  %tobool8 = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !4162
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !4162

cond.true9:                                       ; preds = %for.end
  %14 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4162
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %14, align 8, !dbg !4162
  %base10 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !4162
  br label %cond.end12, !dbg !4162

cond.false11:                                     ; preds = %for.end
  br label %cond.end12, !dbg !4162

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !4162
  %call14 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond13), !dbg !4162
  %cmp = icmp eq i32 %11, %call14, !dbg !4163
  br i1 %cmp, label %if.then15, label %if.end17, !dbg !4164

if.then15:                                        ; preds = %cond.end12
  %16 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4165
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4165
  %call16 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %16, %union.tree_node* %17), !dbg !4165
  br label %if.end17, !dbg !4165

if.end17:                                         ; preds = %if.then, %if.then15, %cond.end12
  ret void, !dbg !4166
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !4167 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4172, metadata !DIExpression()), !dbg !4173
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4174, metadata !DIExpression()), !dbg !4173
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !4175, metadata !DIExpression()), !dbg !4173
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4176
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4176
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4176

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4176
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4176
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !4176
  %3 = load i32, i32* %num, align 8, !dbg !4176
  %cmp = icmp ult i32 %1, %3, !dbg !4176
  br i1 %cmp, label %if.then, label %if.else, !dbg !4173

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4178
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !4178
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4178
  %idxprom = zext i32 %5 to i64, !dbg !4178
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4178
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4178
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !4178
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !4178
  store i32 1, i32* %retval, align 4, !dbg !4178
  br label %return, !dbg !4178

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !4180
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !4180
  store i32 0, i32* %retval, align 4, !dbg !4180
  br label %return, !dbg !4180

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4173
  ret i32 %9, !dbg !4173
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_equal_types(%union.tree_node* %type1, %union.tree_node* %type2) #0 !dbg !4182 {
entry:
  %retval = alloca i8, align 1
  %type1.addr = alloca %union.tree_node*, align 8
  %type2.addr = alloca %union.tree_node*, align 8
  %name1 = alloca i8*, align 8
  %name2 = alloca i8*, align 8
  %field1 = alloca %union.tree_node*, align 8
  %field2 = alloca %union.tree_node*, align 8
  %d1 = alloca %union.tree_node*, align 8
  %d2 = alloca %union.tree_node*, align 8
  %max1 = alloca %union.tree_node*, align 8
  %min1 = alloca %union.tree_node*, align 8
  %max2 = alloca %union.tree_node*, align 8
  %min2 = alloca %union.tree_node*, align 8
  store %union.tree_node* %type1, %union.tree_node** %type1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1.addr, metadata !4185, metadata !DIExpression()), !dbg !4186
  store %union.tree_node* %type2, %union.tree_node** %type2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type2.addr, metadata !4187, metadata !DIExpression()), !dbg !4188
  call void @llvm.dbg.declare(metadata i8** %name1, metadata !4189, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.declare(metadata i8** %name2, metadata !4191, metadata !DIExpression()), !dbg !4192
  %0 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4193
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4193
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !4195

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4196
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !4196
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !4197

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4198
  %tobool2 = icmp ne %union.tree_node* %2, null, !dbg !4198
  br i1 %tobool2, label %if.end, label %land.lhs.true3, !dbg !4199

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4200
  %tobool4 = icmp ne %union.tree_node* %3, null, !dbg !4200
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4201

if.then:                                          ; preds = %land.lhs.true3, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4202
  br label %return, !dbg !4202

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4203
  %tobool5 = icmp ne %union.tree_node* %4, null, !dbg !4203
  br i1 %tobool5, label %if.end9, label %land.lhs.true6, !dbg !4205

land.lhs.true6:                                   ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4206
  %tobool7 = icmp ne %union.tree_node* %5, null, !dbg !4206
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !4207

if.then8:                                         ; preds = %land.lhs.true6
  store i8 1, i8* %retval, align 1, !dbg !4208
  br label %return, !dbg !4208

if.end9:                                          ; preds = %land.lhs.true6, %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4209
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4209
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4209
  %bf.load = load i64, i64* %7, align 8, !dbg !4209
  %bf.clear = and i64 %bf.load, 65535, !dbg !4209
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4209
  %8 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4211
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4211
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4211
  %bf.load11 = load i64, i64* %9, align 8, !dbg !4211
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4211
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4211
  %cmp = icmp ne i32 %bf.cast, %bf.cast13, !dbg !4212
  br i1 %cmp, label %if.then14, label %if.end15, !dbg !4213

if.then14:                                        ; preds = %if.end9
  store i8 0, i8* %retval, align 1, !dbg !4214
  br label %return, !dbg !4214

if.end15:                                         ; preds = %if.end9
  %10 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4215
  %11 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4217
  %cmp16 = icmp eq %union.tree_node* %10, %11, !dbg !4218
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !4219

if.then17:                                        ; preds = %if.end15
  store i8 1, i8* %retval, align 1, !dbg !4220
  br label %return, !dbg !4220

if.end18:                                         ; preds = %if.end15
  %12 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4221
  %type = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4221
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 16, !dbg !4221
  %13 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4221
  %14 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4223
  %type19 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !4223
  %main_variant20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 16, !dbg !4223
  %15 = load %union.tree_node*, %union.tree_node** %main_variant20, align 8, !dbg !4223
  %cmp21 = icmp eq %union.tree_node* %13, %15, !dbg !4224
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !4225

if.then22:                                        ; preds = %if.end18
  store i8 1, i8* %retval, align 1, !dbg !4226
  br label %return, !dbg !4226

if.end23:                                         ; preds = %if.end18
  %16 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4227
  %call = call i8* @get_type_name(%union.tree_node* %16), !dbg !4228
  store i8* %call, i8** %name1, align 8, !dbg !4229
  %17 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4230
  %call24 = call i8* @get_type_name(%union.tree_node* %17), !dbg !4231
  store i8* %call24, i8** %name2, align 8, !dbg !4232
  %18 = load i8*, i8** %name1, align 8, !dbg !4233
  %tobool25 = icmp ne i8* %18, null, !dbg !4233
  br i1 %tobool25, label %land.lhs.true26, label %if.end32, !dbg !4235

land.lhs.true26:                                  ; preds = %if.end23
  %19 = load i8*, i8** %name2, align 8, !dbg !4236
  %tobool27 = icmp ne i8* %19, null, !dbg !4236
  br i1 %tobool27, label %if.then28, label %if.end32, !dbg !4237

if.then28:                                        ; preds = %land.lhs.true26
  %20 = load i8*, i8** %name1, align 8, !dbg !4238
  %21 = load i8*, i8** %name2, align 8, !dbg !4239
  %call29 = call i32 @strcmp(i8* %20, i8* %21), !dbg !4240
  %cmp30 = icmp eq i32 %call29, 0, !dbg !4241
  %conv = zext i1 %cmp30 to i32, !dbg !4241
  %conv31 = trunc i32 %conv to i8, !dbg !4240
  store i8 %conv31, i8* %retval, align 1, !dbg !4242
  br label %return, !dbg !4242

if.end32:                                         ; preds = %land.lhs.true26, %if.end23
  %22 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4243
  %base33 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4243
  %23 = bitcast %struct.tree_base* %base33 to i64*, !dbg !4243
  %bf.load34 = load i64, i64* %23, align 8, !dbg !4243
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !4243
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !4243
  switch i32 %bf.cast36, label %sw.default [
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 16, label %sw.bb41
    i32 17, label %sw.bb41
    i32 18, label %sw.bb41
    i32 6, label %sw.bb41
    i32 8, label %sw.bb58
    i32 15, label %sw.bb82
  ], !dbg !4244

sw.bb:                                            ; preds = %if.end32, %if.end32
  %24 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4245
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !4245
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4245
  %25 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !4245
  %26 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4248
  %common38 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !4248
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !4248
  %27 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !4248
  %call40 = call zeroext i8 @is_equal_types(%union.tree_node* %25, %union.tree_node* %27), !dbg !4249
  store i8 %call40, i8* %retval, align 1, !dbg !4250
  br label %return, !dbg !4250

sw.bb41:                                          ; preds = %if.end32, %if.end32, %if.end32, %if.end32
  call void @llvm.dbg.declare(metadata %union.tree_node** %field1, metadata !4251, metadata !DIExpression()), !dbg !4253
  call void @llvm.dbg.declare(metadata %union.tree_node** %field2, metadata !4254, metadata !DIExpression()), !dbg !4255
  %28 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4256
  %type42 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !4256
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type42, i32 0, i32 1, !dbg !4256
  %29 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4256
  store %union.tree_node* %29, %union.tree_node** %field1, align 8, !dbg !4258
  %30 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4259
  %type43 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !4259
  %values44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 1, !dbg !4259
  %31 = load %union.tree_node*, %union.tree_node** %values44, align 8, !dbg !4259
  store %union.tree_node* %31, %union.tree_node** %field2, align 8, !dbg !4260
  br label %for.cond, !dbg !4261

for.cond:                                         ; preds = %for.inc, %sw.bb41
  %32 = load %union.tree_node*, %union.tree_node** %field1, align 8, !dbg !4262
  %tobool45 = icmp ne %union.tree_node* %32, null, !dbg !4262
  br i1 %tobool45, label %land.rhs, label %land.end, !dbg !4264

land.rhs:                                         ; preds = %for.cond
  %33 = load %union.tree_node*, %union.tree_node** %field2, align 8, !dbg !4265
  %tobool46 = icmp ne %union.tree_node* %33, null, !dbg !4264
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %34 = phi i1 [ false, %for.cond ], [ %tobool46, %land.rhs ], !dbg !4266
  br i1 %34, label %for.body, label %for.end, !dbg !4267

for.body:                                         ; preds = %land.end
  %35 = load %union.tree_node*, %union.tree_node** %field1, align 8, !dbg !4268
  %36 = load %union.tree_node*, %union.tree_node** %field2, align 8, !dbg !4271
  %call47 = call zeroext i8 @compare_fields(%union.tree_node* %35, %union.tree_node* %36), !dbg !4272
  %tobool48 = icmp ne i8 %call47, 0, !dbg !4272
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !4273

if.then49:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4274
  br label %return, !dbg !4274

if.end50:                                         ; preds = %for.body
  br label %for.inc, !dbg !4275

for.inc:                                          ; preds = %if.end50
  %37 = load %union.tree_node*, %union.tree_node** %field1, align 8, !dbg !4276
  %common51 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !4276
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 1, !dbg !4276
  %38 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4276
  store %union.tree_node* %38, %union.tree_node** %field1, align 8, !dbg !4277
  %39 = load %union.tree_node*, %union.tree_node** %field2, align 8, !dbg !4278
  %common52 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !4278
  %chain53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 1, !dbg !4278
  %40 = load %union.tree_node*, %union.tree_node** %chain53, align 8, !dbg !4278
  store %union.tree_node* %40, %union.tree_node** %field2, align 8, !dbg !4279
  br label %for.cond, !dbg !4280, !llvm.loop !4281

for.end:                                          ; preds = %land.end
  %41 = load %union.tree_node*, %union.tree_node** %field1, align 8, !dbg !4283
  %tobool54 = icmp ne %union.tree_node* %41, null, !dbg !4283
  br i1 %tobool54, label %if.then57, label %lor.lhs.false55, !dbg !4285

lor.lhs.false55:                                  ; preds = %for.end
  %42 = load %union.tree_node*, %union.tree_node** %field2, align 8, !dbg !4286
  %tobool56 = icmp ne %union.tree_node* %42, null, !dbg !4286
  br i1 %tobool56, label %if.then57, label %if.else, !dbg !4287

if.then57:                                        ; preds = %lor.lhs.false55, %for.end
  store i8 0, i8* %retval, align 1, !dbg !4288
  br label %return, !dbg !4288

if.else:                                          ; preds = %lor.lhs.false55
  store i8 1, i8* %retval, align 1, !dbg !4289
  br label %return, !dbg !4289

sw.bb58:                                          ; preds = %if.end32
  %43 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4290
  %base59 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4290
  %44 = bitcast %struct.tree_base* %base59 to i64*, !dbg !4290
  %bf.load60 = load i64, i64* %44, align 8, !dbg !4290
  %bf.lshr = lshr i64 %bf.load60, 21, !dbg !4290
  %bf.clear61 = and i64 %bf.lshr, 1, !dbg !4290
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !4290
  %45 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4293
  %base63 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !4293
  %46 = bitcast %struct.tree_base* %base63 to i64*, !dbg !4293
  %bf.load64 = load i64, i64* %46, align 8, !dbg !4293
  %bf.lshr65 = lshr i64 %bf.load64, 21, !dbg !4293
  %bf.clear66 = and i64 %bf.lshr65, 1, !dbg !4293
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !4293
  %cmp68 = icmp eq i32 %bf.cast62, %bf.cast67, !dbg !4294
  br i1 %cmp68, label %land.lhs.true70, label %if.end81, !dbg !4295

land.lhs.true70:                                  ; preds = %sw.bb58
  %47 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4296
  %type71 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !4296
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 6, !dbg !4296
  %bf.load72 = load i32, i32* %precision, align 4, !dbg !4296
  %bf.clear73 = and i32 %bf.load72, 1023, !dbg !4296
  %48 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4297
  %type74 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !4297
  %precision75 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 6, !dbg !4297
  %bf.load76 = load i32, i32* %precision75, align 4, !dbg !4297
  %bf.clear77 = and i32 %bf.load76, 1023, !dbg !4297
  %cmp78 = icmp eq i32 %bf.clear73, %bf.clear77, !dbg !4298
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !4299

if.then80:                                        ; preds = %land.lhs.true70
  store i8 1, i8* %retval, align 1, !dbg !4300
  br label %return, !dbg !4300

if.end81:                                         ; preds = %land.lhs.true70, %sw.bb58
  br label %sw.epilog, !dbg !4301

sw.bb82:                                          ; preds = %if.end32
  call void @llvm.dbg.declare(metadata %union.tree_node** %d1, metadata !4302, metadata !DIExpression()), !dbg !4304
  call void @llvm.dbg.declare(metadata %union.tree_node** %d2, metadata !4305, metadata !DIExpression()), !dbg !4306
  call void @llvm.dbg.declare(metadata %union.tree_node** %max1, metadata !4307, metadata !DIExpression()), !dbg !4308
  call void @llvm.dbg.declare(metadata %union.tree_node** %min1, metadata !4309, metadata !DIExpression()), !dbg !4310
  call void @llvm.dbg.declare(metadata %union.tree_node** %max2, metadata !4311, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.declare(metadata %union.tree_node** %min2, metadata !4313, metadata !DIExpression()), !dbg !4314
  %49 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4315
  %common83 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !4315
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !4315
  %50 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !4315
  %51 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4317
  %common85 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !4317
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !4317
  %52 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !4317
  %call87 = call zeroext i8 @is_equal_types(%union.tree_node* %50, %union.tree_node* %52), !dbg !4318
  %tobool88 = icmp ne i8 %call87, 0, !dbg !4318
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !4319

if.then89:                                        ; preds = %sw.bb82
  store i8 0, i8* %retval, align 1, !dbg !4320
  br label %return, !dbg !4320

if.end90:                                         ; preds = %sw.bb82
  %53 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !4321
  %type91 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !4321
  %values92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 1, !dbg !4321
  %54 = load %union.tree_node*, %union.tree_node** %values92, align 8, !dbg !4321
  store %union.tree_node* %54, %union.tree_node** %d1, align 8, !dbg !4322
  %55 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !4323
  %type93 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !4323
  %values94 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 1, !dbg !4323
  %56 = load %union.tree_node*, %union.tree_node** %values94, align 8, !dbg !4323
  store %union.tree_node* %56, %union.tree_node** %d2, align 8, !dbg !4324
  %57 = load %union.tree_node*, %union.tree_node** %d1, align 8, !dbg !4325
  %tobool95 = icmp ne %union.tree_node* %57, null, !dbg !4325
  br i1 %tobool95, label %lor.lhs.false96, label %if.then98, !dbg !4327

lor.lhs.false96:                                  ; preds = %if.end90
  %58 = load %union.tree_node*, %union.tree_node** %d2, align 8, !dbg !4328
  %tobool97 = icmp ne %union.tree_node* %58, null, !dbg !4328
  br i1 %tobool97, label %if.end99, label %if.then98, !dbg !4329

if.then98:                                        ; preds = %lor.lhs.false96, %if.end90
  store i8 0, i8* %retval, align 1, !dbg !4330
  br label %return, !dbg !4330

if.end99:                                         ; preds = %lor.lhs.false96
  %59 = load %union.tree_node*, %union.tree_node** %d1, align 8, !dbg !4331
  %type100 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !4331
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type100, i32 0, i32 14, !dbg !4331
  %60 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !4331
  store %union.tree_node* %60, %union.tree_node** %max1, align 8, !dbg !4332
  %61 = load %union.tree_node*, %union.tree_node** %d2, align 8, !dbg !4333
  %type101 = bitcast %union.tree_node* %61 to %struct.tree_type*, !dbg !4333
  %maxval102 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type101, i32 0, i32 14, !dbg !4333
  %62 = load %union.tree_node*, %union.tree_node** %maxval102, align 8, !dbg !4333
  store %union.tree_node* %62, %union.tree_node** %max2, align 8, !dbg !4334
  %63 = load %union.tree_node*, %union.tree_node** %d1, align 8, !dbg !4335
  %type103 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !4335
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 13, !dbg !4335
  %64 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4335
  store %union.tree_node* %64, %union.tree_node** %min1, align 8, !dbg !4336
  %65 = load %union.tree_node*, %union.tree_node** %d2, align 8, !dbg !4337
  %type104 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !4337
  %minval105 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type104, i32 0, i32 13, !dbg !4337
  %66 = load %union.tree_node*, %union.tree_node** %minval105, align 8, !dbg !4337
  store %union.tree_node* %66, %union.tree_node** %min2, align 8, !dbg !4338
  %67 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !4339
  %tobool106 = icmp ne %union.tree_node* %67, null, !dbg !4339
  br i1 %tobool106, label %land.lhs.true107, label %if.end156, !dbg !4341

land.lhs.true107:                                 ; preds = %if.end99
  %68 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !4342
  %tobool108 = icmp ne %union.tree_node* %68, null, !dbg !4342
  br i1 %tobool108, label %land.lhs.true109, label %if.end156, !dbg !4343

land.lhs.true109:                                 ; preds = %land.lhs.true107
  %69 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !4344
  %tobool110 = icmp ne %union.tree_node* %69, null, !dbg !4344
  br i1 %tobool110, label %land.lhs.true111, label %if.end156, !dbg !4345

land.lhs.true111:                                 ; preds = %land.lhs.true109
  %70 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !4346
  %tobool112 = icmp ne %union.tree_node* %70, null, !dbg !4346
  br i1 %tobool112, label %land.lhs.true113, label %if.end156, !dbg !4347

land.lhs.true113:                                 ; preds = %land.lhs.true111
  %71 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !4348
  %base114 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !4348
  %72 = bitcast %struct.tree_base* %base114 to i64*, !dbg !4348
  %bf.load115 = load i64, i64* %72, align 8, !dbg !4348
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !4348
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !4348
  %73 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !4349
  %base118 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !4349
  %74 = bitcast %struct.tree_base* %base118 to i64*, !dbg !4349
  %bf.load119 = load i64, i64* %74, align 8, !dbg !4349
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !4349
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !4349
  %cmp122 = icmp eq i32 %bf.cast117, %bf.cast121, !dbg !4350
  br i1 %cmp122, label %land.lhs.true124, label %if.end156, !dbg !4351

land.lhs.true124:                                 ; preds = %land.lhs.true113
  %75 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !4352
  %base125 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !4352
  %76 = bitcast %struct.tree_base* %base125 to i64*, !dbg !4352
  %bf.load126 = load i64, i64* %76, align 8, !dbg !4352
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !4352
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !4352
  %cmp129 = icmp eq i32 %bf.cast128, 23, !dbg !4353
  br i1 %cmp129, label %land.lhs.true131, label %if.end156, !dbg !4354

land.lhs.true131:                                 ; preds = %land.lhs.true124
  %77 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !4355
  %base132 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !4355
  %78 = bitcast %struct.tree_base* %base132 to i64*, !dbg !4355
  %bf.load133 = load i64, i64* %78, align 8, !dbg !4355
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !4355
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !4355
  %79 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !4356
  %base136 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !4356
  %80 = bitcast %struct.tree_base* %base136 to i64*, !dbg !4356
  %bf.load137 = load i64, i64* %80, align 8, !dbg !4356
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !4356
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4356
  %cmp140 = icmp eq i32 %bf.cast135, %bf.cast139, !dbg !4357
  br i1 %cmp140, label %land.lhs.true142, label %if.end156, !dbg !4358

land.lhs.true142:                                 ; preds = %land.lhs.true131
  %81 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !4359
  %base143 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !4359
  %82 = bitcast %struct.tree_base* %base143 to i64*, !dbg !4359
  %bf.load144 = load i64, i64* %82, align 8, !dbg !4359
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !4359
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !4359
  %cmp147 = icmp eq i32 %bf.cast146, 23, !dbg !4360
  br i1 %cmp147, label %land.lhs.true149, label %if.end156, !dbg !4361

land.lhs.true149:                                 ; preds = %land.lhs.true142
  %83 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !4362
  %84 = load %union.tree_node*, %union.tree_node** %max2, align 8, !dbg !4363
  %call150 = call i32 @tree_int_cst_equal(%union.tree_node* %83, %union.tree_node* %84), !dbg !4364
  %tobool151 = icmp ne i32 %call150, 0, !dbg !4364
  br i1 %tobool151, label %land.lhs.true152, label %if.end156, !dbg !4365

land.lhs.true152:                                 ; preds = %land.lhs.true149
  %85 = load %union.tree_node*, %union.tree_node** %min1, align 8, !dbg !4366
  %86 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !4367
  %call153 = call i32 @tree_int_cst_equal(%union.tree_node* %85, %union.tree_node* %86), !dbg !4368
  %tobool154 = icmp ne i32 %call153, 0, !dbg !4368
  br i1 %tobool154, label %if.then155, label %if.end156, !dbg !4369

if.then155:                                       ; preds = %land.lhs.true152
  store i8 1, i8* %retval, align 1, !dbg !4370
  br label %return, !dbg !4370

if.end156:                                        ; preds = %land.lhs.true152, %land.lhs.true149, %land.lhs.true142, %land.lhs.true131, %land.lhs.true124, %land.lhs.true113, %land.lhs.true111, %land.lhs.true109, %land.lhs.true107, %if.end99
  br label %sw.epilog, !dbg !4371

sw.default:                                       ; preds = %if.end32
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1695, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4372
  br label %sw.epilog, !dbg !4373

sw.epilog:                                        ; preds = %sw.default, %if.end156, %if.end81
  store i8 0, i8* %retval, align 1, !dbg !4374
  br label %return, !dbg !4374

return:                                           ; preds = %sw.epilog, %if.then155, %if.then98, %if.then89, %if.then80, %if.else, %if.then57, %if.then49, %sw.bb, %if.then28, %if.then22, %if.then17, %if.then14, %if.then8, %if.then
  %87 = load i8, i8* %retval, align 1, !dbg !4375
  ret i8 %87, !dbg !4375
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4376 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4380
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4380
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4380

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4380
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4380
  %2 = load i32, i32* %num, align 8, !dbg !4380
  br label %cond.end, !dbg !4380

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4380

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4380
  ret i32 %cond, !dbg !4380
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !4381 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4384, metadata !DIExpression()), !dbg !4385
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4386, metadata !DIExpression()), !dbg !4385
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4385
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !4385
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4385
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !4385
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !4385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4385

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4385
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !4385
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !4385
  br label %cond.end, !dbg !4385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4385
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4385
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !4385
  ret %union.tree_node** %call1, !dbg !4385
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @get_type_name(%union.tree_node* %type) #0 !dbg !4387 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4390, metadata !DIExpression()), !dbg !4391
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4392
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4392
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 12, !dbg !4392
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4392
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4392
  br i1 %tobool, label %if.end, label %if.then, !dbg !4394

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !4395
  br label %return, !dbg !4395

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4396
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !4396
  %name3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 12, !dbg !4396
  %3 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !4396
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4396
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4396
  %bf.load = load i64, i64* %4, align 8, !dbg !4396
  %bf.clear = and i64 %bf.load, 65535, !dbg !4396
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4396
  %cmp = icmp eq i32 %bf.cast, 1, !dbg !4398
  br i1 %cmp, label %if.then4, label %if.else, !dbg !4399

if.then4:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4400
  %type5 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !4400
  %name6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 12, !dbg !4400
  %6 = load %union.tree_node*, %union.tree_node** %name6, align 8, !dbg !4400
  %identifier = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !4400
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4400
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !4400
  %7 = load i8*, i8** %str, align 8, !dbg !4400
  store i8* %7, i8** %retval, align 8, !dbg !4401
  br label %return, !dbg !4401

if.else:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4402
  %type7 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4402
  %name8 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 12, !dbg !4402
  %9 = load %union.tree_node*, %union.tree_node** %name8, align 8, !dbg !4402
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4402
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4402
  %bf.load10 = load i64, i64* %10, align 8, !dbg !4402
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4402
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4402
  %cmp13 = icmp eq i32 %bf.cast12, 35, !dbg !4404
  br i1 %cmp13, label %land.lhs.true, label %if.else26, !dbg !4405

land.lhs.true:                                    ; preds = %if.else
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4406
  %type14 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4406
  %name15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 12, !dbg !4406
  %12 = load %union.tree_node*, %union.tree_node** %name15, align 8, !dbg !4406
  %decl_minimal = bitcast %union.tree_node* %12 to %struct.tree_decl_minimal*, !dbg !4406
  %name16 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4406
  %13 = load %union.tree_node*, %union.tree_node** %name16, align 8, !dbg !4406
  %tobool17 = icmp ne %union.tree_node* %13, null, !dbg !4406
  br i1 %tobool17, label %if.then18, label %if.else26, !dbg !4407

if.then18:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4408
  %type19 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !4408
  %name20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 12, !dbg !4408
  %15 = load %union.tree_node*, %union.tree_node** %name20, align 8, !dbg !4408
  %decl_minimal21 = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !4408
  %name22 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal21, i32 0, i32 3, !dbg !4408
  %16 = load %union.tree_node*, %union.tree_node** %name22, align 8, !dbg !4408
  %identifier23 = bitcast %union.tree_node* %16 to %struct.tree_identifier*, !dbg !4408
  %id24 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier23, i32 0, i32 1, !dbg !4408
  %str25 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id24, i32 0, i32 0, !dbg !4408
  %17 = load i8*, i8** %str25, align 8, !dbg !4408
  store i8* %17, i8** %retval, align 8, !dbg !4409
  br label %return, !dbg !4409

if.else26:                                        ; preds = %land.lhs.true, %if.else
  store i8* null, i8** %retval, align 8, !dbg !4410
  br label %return, !dbg !4410

return:                                           ; preds = %if.else26, %if.then18, %if.then4, %if.then
  %18 = load i8*, i8** %retval, align 8, !dbg !4411
  ret i8* %18, !dbg !4411
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compare_fields(%union.tree_node* %field1, %union.tree_node* %field2) #0 !dbg !4412 {
entry:
  %retval = alloca i8, align 1
  %field1.addr = alloca %union.tree_node*, align 8
  %field2.addr = alloca %union.tree_node*, align 8
  %name1 = alloca i8*, align 8
  %name26 = alloca i8*, align 8
  store %union.tree_node* %field1, %union.tree_node** %field1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field1.addr, metadata !4413, metadata !DIExpression()), !dbg !4414
  store %union.tree_node* %field2, %union.tree_node** %field2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field2.addr, metadata !4415, metadata !DIExpression()), !dbg !4416
  %0 = load %union.tree_node*, %union.tree_node** %field1.addr, align 8, !dbg !4417
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !4417
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4417
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4417
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4417
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4419

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %field2.addr, align 8, !dbg !4420
  %decl_minimal1 = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !4420
  %name2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 3, !dbg !4420
  %3 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !4420
  %tobool3 = icmp ne %union.tree_node* %3, null, !dbg !4420
  br i1 %tobool3, label %if.then, label %if.else, !dbg !4421

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %name1, metadata !4422, metadata !DIExpression()), !dbg !4424
  %4 = load %union.tree_node*, %union.tree_node** %field1.addr, align 8, !dbg !4425
  %decl_minimal4 = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !4425
  %name5 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 3, !dbg !4425
  %5 = load %union.tree_node*, %union.tree_node** %name5, align 8, !dbg !4425
  %identifier = bitcast %union.tree_node* %5 to %struct.tree_identifier*, !dbg !4425
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4425
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !4425
  %6 = load i8*, i8** %str, align 8, !dbg !4425
  store i8* %6, i8** %name1, align 8, !dbg !4424
  call void @llvm.dbg.declare(metadata i8** %name26, metadata !4426, metadata !DIExpression()), !dbg !4427
  %7 = load %union.tree_node*, %union.tree_node** %field2.addr, align 8, !dbg !4428
  %decl_minimal7 = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !4428
  %name8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 3, !dbg !4428
  %8 = load %union.tree_node*, %union.tree_node** %name8, align 8, !dbg !4428
  %identifier9 = bitcast %union.tree_node* %8 to %struct.tree_identifier*, !dbg !4428
  %id10 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier9, i32 0, i32 1, !dbg !4428
  %str11 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id10, i32 0, i32 0, !dbg !4428
  %9 = load i8*, i8** %str11, align 8, !dbg !4428
  store i8* %9, i8** %name26, align 8, !dbg !4427
  %10 = load i8*, i8** %name1, align 8, !dbg !4429
  %tobool12 = icmp ne i8* %10, null, !dbg !4429
  br i1 %tobool12, label %land.lhs.true13, label %cond.true, !dbg !4429

land.lhs.true13:                                  ; preds = %if.then
  %11 = load i8*, i8** %name26, align 8, !dbg !4429
  %tobool14 = icmp ne i8* %11, null, !dbg !4429
  br i1 %tobool14, label %cond.false, label %cond.true, !dbg !4429

cond.true:                                        ; preds = %land.lhs.true13, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 262, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4429
  br label %cond.end, !dbg !4429

cond.false:                                       ; preds = %land.lhs.true13
  br label %cond.end, !dbg !4429

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4429
  %12 = load i8*, i8** %name1, align 8, !dbg !4430
  %13 = load i8*, i8** %name26, align 8, !dbg !4432
  %call = call i32 @strcmp(i8* %12, i8* %13), !dbg !4433
  %tobool15 = icmp ne i32 %call, 0, !dbg !4433
  br i1 %tobool15, label %if.then16, label %if.end, !dbg !4434

if.then16:                                        ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !4435
  br label %return, !dbg !4435

if.end:                                           ; preds = %cond.end
  br label %if.end25, !dbg !4436

if.else:                                          ; preds = %land.lhs.true, %entry
  %14 = load %union.tree_node*, %union.tree_node** %field1.addr, align 8, !dbg !4437
  %decl_minimal17 = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !4437
  %name18 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal17, i32 0, i32 3, !dbg !4437
  %15 = load %union.tree_node*, %union.tree_node** %name18, align 8, !dbg !4437
  %tobool19 = icmp ne %union.tree_node* %15, null, !dbg !4437
  br i1 %tobool19, label %if.then23, label %lor.lhs.false, !dbg !4439

lor.lhs.false:                                    ; preds = %if.else
  %16 = load %union.tree_node*, %union.tree_node** %field2.addr, align 8, !dbg !4440
  %decl_minimal20 = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !4440
  %name21 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal20, i32 0, i32 3, !dbg !4440
  %17 = load %union.tree_node*, %union.tree_node** %name21, align 8, !dbg !4440
  %tobool22 = icmp ne %union.tree_node* %17, null, !dbg !4440
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !4441

if.then23:                                        ; preds = %lor.lhs.false, %if.else
  store i8 0, i8* %retval, align 1, !dbg !4442
  br label %return, !dbg !4442

if.end24:                                         ; preds = %lor.lhs.false
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %field1.addr, align 8, !dbg !4443
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4443
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4443
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4443
  %20 = load %union.tree_node*, %union.tree_node** %field2.addr, align 8, !dbg !4445
  %common26 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4445
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !4445
  %21 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !4445
  %call28 = call zeroext i8 @is_equal_types(%union.tree_node* %19, %union.tree_node* %21), !dbg !4446
  %tobool29 = icmp ne i8 %call28, 0, !dbg !4446
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !4447

if.then30:                                        ; preds = %if.end25
  store i8 0, i8* %retval, align 1, !dbg !4448
  br label %return, !dbg !4448

if.end31:                                         ; preds = %if.end25
  store i8 1, i8* %retval, align 1, !dbg !4449
  br label %return, !dbg !4449

return:                                           ; preds = %if.end31, %if.then30, %if.then23, %if.then16
  %22 = load i8, i8* %retval, align 1, !dbg !4450
  ret i8 %22, !dbg !4450
}

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !4451 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4454, metadata !DIExpression()), !dbg !4455
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4456, metadata !DIExpression()), !dbg !4455
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4457, metadata !DIExpression()), !dbg !4455
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4455
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !4455
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !4455
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4455

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4455
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !4455
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !4455
  br label %cond.end, !dbg !4455

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4455

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4455
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4455
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !4455
  %tobool1 = icmp ne i32 %call, 0, !dbg !4455
  %lnot = xor i1 %tobool1, true, !dbg !4455
  %lnot.ext = zext i1 %lnot to i32, !dbg !4455
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4455
  %5 = load i32, i32* %extend, align 4, !dbg !4458
  %tobool2 = icmp ne i32 %5, 0, !dbg !4458
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4455

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4458
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !4458
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !4458
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4458
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !4458
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !4458
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4458
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !4458
  br label %if.end, !dbg !4458

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4455
  ret i32 %12, !dbg !4455
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !4460 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4464, metadata !DIExpression()), !dbg !4465
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4466, metadata !DIExpression()), !dbg !4465
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !4467, metadata !DIExpression()), !dbg !4465
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4465
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !4465
  %1 = load i32, i32* %num, align 8, !dbg !4465
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4465
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !4465
  %3 = load i32, i32* %alloc, align 4, !dbg !4465
  %cmp = icmp ult i32 %1, %3, !dbg !4465
  %conv = zext i1 %cmp to i32, !dbg !4465
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4465
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !4465
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4465
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !4465
  %6 = load i32, i32* %num1, align 8, !dbg !4465
  %inc = add i32 %6, 1, !dbg !4465
  store i32 %inc, i32* %num1, align 8, !dbg !4465
  %idxprom = zext i32 %6 to i64, !dbg !4465
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !4465
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !4465
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4465
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !4465
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !4465
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !4465
  ret %union.tree_node** %9, !dbg !4465
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !4468 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4473, metadata !DIExpression()), !dbg !4472
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4472
  %cmp = icmp sge i32 %0, 0, !dbg !4472
  %conv = zext i1 %cmp to i32, !dbg !4472
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4472
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !4472
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4472

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4472
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !4472
  %3 = load i32, i32* %alloc, align 4, !dbg !4472
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4472
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !4472
  %5 = load i32, i32* %num, align 8, !dbg !4472
  %sub = sub i32 %3, %5, !dbg !4472
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4472
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4472
  %conv2 = zext i1 %cmp1 to i32, !dbg !4472
  br label %cond.end, !dbg !4472

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4472
  %tobool3 = icmp ne i32 %7, 0, !dbg !4472
  %lnot = xor i1 %tobool3, true, !dbg !4472
  %lnot.ext = zext i1 %lnot to i32, !dbg !4472
  br label %cond.end, !dbg !4472

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4472
  ret i32 %cond, !dbg !4472
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_structure(%union.tree_node* %type) #0 !dbg !4474 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !4479, metadata !DIExpression()), !dbg !4480
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4481, metadata !DIExpression()), !dbg !4482
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4483
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4483
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 16, !dbg !4483
  %1 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4483
  store %union.tree_node* %1, %union.tree_node** %type.addr, align 8, !dbg !4484
  store i32 0, i32* %i, align 4, !dbg !4485
  br label %for.cond, !dbg !4487

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4488
  %tobool = icmp ne %struct.VEC_structure_heap* %2, null, !dbg !4488
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4488

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4488
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %3, i32 0, i32 0, !dbg !4488
  br label %cond.end, !dbg !4488

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4488
  %4 = load i32, i32* %i, align 4, !dbg !4488
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %4, %struct.data_structure** %str), !dbg !4488
  %tobool2 = icmp ne i32 %call, 0, !dbg !4490
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4490

for.body:                                         ; preds = %cond.end
  %5 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !4491
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 0, !dbg !4493
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4493
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4494
  %call3 = call zeroext i8 @is_equal_types(%union.tree_node* %6, %union.tree_node* %7), !dbg !4495
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4495
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4496

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !4497
  store i32 %8, i32* %retval, align 4, !dbg !4498
  br label %return, !dbg !4498

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4499

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !4500
  %inc = add i32 %9, 1, !dbg !4500
  store i32 %inc, i32* %i, align 4, !dbg !4500
  br label %for.cond, !dbg !4501, !llvm.loop !4502

for.end:                                          ; preds = %cond.end
  %10 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4504
  %tobool5 = icmp ne %struct.VEC_structure_heap* %10, null, !dbg !4504
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !4504

cond.true6:                                       ; preds = %for.end
  %11 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4504
  %base7 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %11, i32 0, i32 0, !dbg !4504
  br label %cond.end9, !dbg !4504

cond.false8:                                      ; preds = %for.end
  br label %cond.end9, !dbg !4504

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_structure_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !4504
  %call11 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond10), !dbg !4504
  store i32 %call11, i32* %retval, align 4, !dbg !4505
  br label %return, !dbg !4505

return:                                           ; preds = %cond.end9, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !4506
  ret i32 %12, !dbg !4506
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_structure_base_length(%struct.VEC_structure_base* %vec_) #0 !dbg !4507 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !4512, metadata !DIExpression()), !dbg !4513
  %0 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4513
  %tobool = icmp ne %struct.VEC_structure_base* %0, null, !dbg !4513
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4513

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4513
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %1, i32 0, i32 0, !dbg !4513
  %2 = load i32, i32* %num, align 8, !dbg !4513
  br label %cond.end, !dbg !4513

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4513
  ret i32 %cond, !dbg !4513
}

declare dso_local i32 @fields_length(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.field_entry* @get_fields(%union.tree_node* %struct_decl, i32 %num_fields) #0 !dbg !4514 {
entry:
  %struct_decl.addr = alloca %union.tree_node*, align 8
  %num_fields.addr = alloca i32, align 4
  %list = alloca %struct.field_entry*, align 8
  %t = alloca %union.tree_node*, align 8
  %idx = alloca i32, align 4
  store %union.tree_node* %struct_decl, %union.tree_node** %struct_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_decl.addr, metadata !4517, metadata !DIExpression()), !dbg !4518
  store i32 %num_fields, i32* %num_fields.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_fields.addr, metadata !4519, metadata !DIExpression()), !dbg !4520
  call void @llvm.dbg.declare(metadata %struct.field_entry** %list, metadata !4521, metadata !DIExpression()), !dbg !4522
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4523, metadata !DIExpression()), !dbg !4524
  %0 = load %union.tree_node*, %union.tree_node** %struct_decl.addr, align 8, !dbg !4525
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4525
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !4525
  %1 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4525
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !4524
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !4526, metadata !DIExpression()), !dbg !4527
  store i32 0, i32* %idx, align 4, !dbg !4527
  %2 = load i32, i32* %num_fields.addr, align 4, !dbg !4528
  %conv = sext i32 %2 to i64, !dbg !4528
  %mul = mul i64 40, %conv, !dbg !4528
  %call = call i8* @xmalloc(i64 %mul), !dbg !4528
  %3 = bitcast i8* %call to %struct.field_entry*, !dbg !4528
  store %struct.field_entry* %3, %struct.field_entry** %list, align 8, !dbg !4529
  store i32 0, i32* %idx, align 4, !dbg !4530
  br label %for.cond, !dbg !4532

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4533
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !4535
  br i1 %tobool, label %for.body, label %for.end, !dbg !4535

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4536
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4536
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !4536
  %bf.load = load i64, i64* %6, align 8, !dbg !4536
  %bf.clear = and i64 %bf.load, 65535, !dbg !4536
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4536
  %cmp = icmp eq i32 %bf.cast, 31, !dbg !4538
  br i1 %cmp, label %if.then, label %if.end, !dbg !4539

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %idx, align 4, !dbg !4540
  %8 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4542
  %9 = load i32, i32* %idx, align 4, !dbg !4543
  %idxprom = sext i32 %9 to i64, !dbg !4542
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %8, i64 %idxprom, !dbg !4542
  %index = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 0, !dbg !4544
  store i32 %7, i32* %index, align 8, !dbg !4545
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4546
  %11 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4547
  %12 = load i32, i32* %idx, align 4, !dbg !4548
  %idxprom2 = sext i32 %12 to i64, !dbg !4547
  %arrayidx3 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %11, i64 %idxprom2, !dbg !4547
  %decl = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx3, i32 0, i32 2, !dbg !4549
  store %union.tree_node* %10, %union.tree_node** %decl, align 8, !dbg !4550
  %call4 = call %struct.htab* @htab_create(i64 32, i32 (i8*)* @field_acc_hash, i32 (i8*, i8*)* @field_acc_eq, void (i8*)* null), !dbg !4551
  %13 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4552
  %14 = load i32, i32* %idx, align 4, !dbg !4553
  %idxprom5 = sext i32 %14 to i64, !dbg !4552
  %arrayidx6 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %13, i64 %idxprom5, !dbg !4552
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx6, i32 0, i32 4, !dbg !4554
  store %struct.htab* %call4, %struct.htab** %acc_sites, align 8, !dbg !4555
  %15 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4556
  %16 = load i32, i32* %idx, align 4, !dbg !4557
  %idxprom7 = sext i32 %16 to i64, !dbg !4556
  %arrayidx8 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %15, i64 %idxprom7, !dbg !4556
  %count = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx8, i32 0, i32 1, !dbg !4558
  store i64 0, i64* %count, align 8, !dbg !4559
  %17 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4560
  %18 = load i32, i32* %idx, align 4, !dbg !4561
  %idxprom9 = sext i32 %18 to i64, !dbg !4560
  %arrayidx10 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %17, i64 %idxprom9, !dbg !4560
  %field_mapping = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx10, i32 0, i32 3, !dbg !4562
  store %union.tree_node* null, %union.tree_node** %field_mapping, align 8, !dbg !4563
  br label %if.end, !dbg !4564

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4565

for.inc:                                          ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4566
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4566
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4566
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4566
  store %union.tree_node* %20, %union.tree_node** %t, align 8, !dbg !4567
  %21 = load i32, i32* %idx, align 4, !dbg !4568
  %inc = add nsw i32 %21, 1, !dbg !4568
  store i32 %inc, i32* %idx, align 4, !dbg !4568
  br label %for.cond, !dbg !4569, !llvm.loop !4570

for.end:                                          ; preds = %for.cond
  %22 = load %struct.field_entry*, %struct.field_entry** %list, align 8, !dbg !4572
  ret %struct.field_entry* %22, !dbg !4573
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @acc_hash(i8* %x) #0 !dbg !4574 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4575, metadata !DIExpression()), !dbg !4576
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4577
  %1 = load i8*, i8** %x.addr, align 8, !dbg !4578
  %2 = bitcast i8* %1 to %struct.access_site*, !dbg !4579
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %2, i32 0, i32 0, !dbg !4580
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4580
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4581
  %call = call i32 %0(i8* %4), !dbg !4577
  ret i32 %call, !dbg !4582
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @acc_eq(i8* %x, i8* %y) #0 !dbg !4583 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4584, metadata !DIExpression()), !dbg !4585
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !4586, metadata !DIExpression()), !dbg !4587
  %0 = load i8*, i8** %x.addr, align 8, !dbg !4588
  %1 = bitcast i8* %0 to %struct.access_site*, !dbg !4589
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %1, i32 0, i32 0, !dbg !4590
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4590
  %3 = load i8*, i8** %y.addr, align 8, !dbg !4591
  %4 = bitcast i8* %3 to %union.gimple_statement_d*, !dbg !4592
  %cmp = icmp eq %union.gimple_statement_d* %2, %4, !dbg !4593
  %conv = zext i1 %cmp to i32, !dbg !4593
  ret i32 %conv, !dbg !4594
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_structure* @VEC_structure_heap_safe_push(%struct.VEC_structure_heap** %vec_, %struct.data_structure* %obj_) #0 !dbg !4595 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_heap**, align 8
  %obj_.addr = alloca %struct.data_structure*, align 8
  store %struct.VEC_structure_heap** %vec_, %struct.VEC_structure_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_heap*** %vec_.addr, metadata !4602, metadata !DIExpression()), !dbg !4603
  store %struct.data_structure* %obj_, %struct.data_structure** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %obj_.addr, metadata !4604, metadata !DIExpression()), !dbg !4603
  %0 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4603
  %call = call i32 @VEC_structure_heap_reserve(%struct.VEC_structure_heap** %0, i32 1), !dbg !4603
  %1 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4603
  %2 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %1, align 8, !dbg !4603
  %tobool = icmp ne %struct.VEC_structure_heap* %2, null, !dbg !4603
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4603

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4603
  %4 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %3, align 8, !dbg !4603
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %4, i32 0, i32 0, !dbg !4603
  br label %cond.end, !dbg !4603

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4603

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4603
  %5 = load %struct.data_structure*, %struct.data_structure** %obj_.addr, align 8, !dbg !4603
  %call1 = call %struct.data_structure* @VEC_structure_base_quick_push(%struct.VEC_structure_base* %cond, %struct.data_structure* %5), !dbg !4603
  ret %struct.data_structure* %call1, !dbg !4603
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %vec_, i32 %ix_, %struct.data_structure** %ptr) #0 !dbg !4605 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_structure**, align 8
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !4610, metadata !DIExpression()), !dbg !4611
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4612, metadata !DIExpression()), !dbg !4611
  store %struct.data_structure** %ptr, %struct.data_structure*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure*** %ptr.addr, metadata !4613, metadata !DIExpression()), !dbg !4611
  %0 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4614
  %tobool = icmp ne %struct.VEC_structure_base* %0, null, !dbg !4614
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4614

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4614
  %2 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4614
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %2, i32 0, i32 0, !dbg !4614
  %3 = load i32, i32* %num, align 8, !dbg !4614
  %cmp = icmp ult i32 %1, %3, !dbg !4614
  br i1 %cmp, label %if.then, label %if.else, !dbg !4611

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4616
  %vec = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %4, i32 0, i32 2, !dbg !4616
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4616
  %idxprom = zext i32 %5 to i64, !dbg !4616
  %arrayidx = getelementptr inbounds [1 x %struct.data_structure], [1 x %struct.data_structure]* %vec, i64 0, i64 %idxprom, !dbg !4616
  %6 = load %struct.data_structure**, %struct.data_structure*** %ptr.addr, align 8, !dbg !4616
  store %struct.data_structure* %arrayidx, %struct.data_structure** %6, align 8, !dbg !4616
  store i32 1, i32* %retval, align 4, !dbg !4616
  br label %return, !dbg !4616

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.data_structure**, %struct.data_structure*** %ptr.addr, align 8, !dbg !4618
  store %struct.data_structure* null, %struct.data_structure** %7, align 8, !dbg !4618
  store i32 0, i32* %retval, align 4, !dbg !4618
  br label %return, !dbg !4618

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !4611
  ret i32 %8, !dbg !4611
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @field_acc_hash(i8* %x) #0 !dbg !4620 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4621, metadata !DIExpression()), !dbg !4622
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4623
  %1 = load i8*, i8** %x.addr, align 8, !dbg !4624
  %2 = bitcast i8* %1 to %struct.field_access_site*, !dbg !4625
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %2, i32 0, i32 0, !dbg !4626
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4626
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4627
  %call = call i32 %0(i8* %4), !dbg !4623
  ret i32 %call, !dbg !4628
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @field_acc_eq(i8* %x, i8* %y) #0 !dbg !4629 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4630, metadata !DIExpression()), !dbg !4631
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !4632, metadata !DIExpression()), !dbg !4633
  %0 = load i8*, i8** %x.addr, align 8, !dbg !4634
  %1 = bitcast i8* %0 to %struct.field_access_site*, !dbg !4635
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %1, i32 0, i32 0, !dbg !4636
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4636
  %3 = load i8*, i8** %y.addr, align 8, !dbg !4637
  %4 = bitcast i8* %3 to %union.gimple_statement_d*, !dbg !4638
  %cmp = icmp eq %union.gimple_statement_d* %2, %4, !dbg !4639
  %conv = zext i1 %cmp to i32, !dbg !4639
  ret i32 %conv, !dbg !4640
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_structure_heap_reserve(%struct.VEC_structure_heap** %vec_, i32 %alloc_) #0 !dbg !4641 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_structure_heap** %vec_, %struct.VEC_structure_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_heap*** %vec_.addr, metadata !4644, metadata !DIExpression()), !dbg !4645
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4646, metadata !DIExpression()), !dbg !4645
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4647, metadata !DIExpression()), !dbg !4645
  %0 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4645
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %0, align 8, !dbg !4645
  %tobool = icmp ne %struct.VEC_structure_heap* %1, null, !dbg !4645
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4645

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4645
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %2, align 8, !dbg !4645
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %3, i32 0, i32 0, !dbg !4645
  br label %cond.end, !dbg !4645

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4645

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4645
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4645
  %call = call i32 @VEC_structure_base_space(%struct.VEC_structure_base* %cond, i32 %4), !dbg !4645
  %tobool1 = icmp ne i32 %call, 0, !dbg !4645
  %lnot = xor i1 %tobool1, true, !dbg !4645
  %lnot.ext = zext i1 %lnot to i32, !dbg !4645
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4645
  %5 = load i32, i32* %extend, align 4, !dbg !4648
  %tobool2 = icmp ne i32 %5, 0, !dbg !4648
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4645

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4648
  %7 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %6, align 8, !dbg !4648
  %8 = bitcast %struct.VEC_structure_heap* %7 to i8*, !dbg !4648
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4648
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 56), !dbg !4648
  %10 = bitcast i8* %call3 to %struct.VEC_structure_heap*, !dbg !4648
  %11 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !4648
  store %struct.VEC_structure_heap* %10, %struct.VEC_structure_heap** %11, align 8, !dbg !4648
  br label %if.end, !dbg !4648

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4645
  ret i32 %12, !dbg !4645
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_structure* @VEC_structure_base_quick_push(%struct.VEC_structure_base* %vec_, %struct.data_structure* %obj_) #0 !dbg !4650 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  %obj_.addr = alloca %struct.data_structure*, align 8
  %slot_ = alloca %struct.data_structure*, align 8
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !4653, metadata !DIExpression()), !dbg !4654
  store %struct.data_structure* %obj_, %struct.data_structure** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %obj_.addr, metadata !4655, metadata !DIExpression()), !dbg !4654
  call void @llvm.dbg.declare(metadata %struct.data_structure** %slot_, metadata !4656, metadata !DIExpression()), !dbg !4654
  %0 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4654
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %0, i32 0, i32 0, !dbg !4654
  %1 = load i32, i32* %num, align 8, !dbg !4654
  %2 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4654
  %alloc = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %2, i32 0, i32 1, !dbg !4654
  %3 = load i32, i32* %alloc, align 4, !dbg !4654
  %cmp = icmp ult i32 %1, %3, !dbg !4654
  %conv = zext i1 %cmp to i32, !dbg !4654
  %4 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4654
  %vec = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %4, i32 0, i32 2, !dbg !4654
  %5 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4654
  %num1 = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %5, i32 0, i32 0, !dbg !4654
  %6 = load i32, i32* %num1, align 8, !dbg !4654
  %inc = add i32 %6, 1, !dbg !4654
  store i32 %inc, i32* %num1, align 8, !dbg !4654
  %idxprom = zext i32 %6 to i64, !dbg !4654
  %arrayidx = getelementptr inbounds [1 x %struct.data_structure], [1 x %struct.data_structure]* %vec, i64 0, i64 %idxprom, !dbg !4654
  store %struct.data_structure* %arrayidx, %struct.data_structure** %slot_, align 8, !dbg !4654
  %7 = load %struct.data_structure*, %struct.data_structure** %obj_.addr, align 8, !dbg !4657
  %tobool = icmp ne %struct.data_structure* %7, null, !dbg !4657
  br i1 %tobool, label %if.then, label %if.end, !dbg !4654

if.then:                                          ; preds = %entry
  %8 = load %struct.data_structure*, %struct.data_structure** %slot_, align 8, !dbg !4657
  %9 = load %struct.data_structure*, %struct.data_structure** %obj_.addr, align 8, !dbg !4657
  %10 = bitcast %struct.data_structure* %8 to i8*, !dbg !4657
  %11 = bitcast %struct.data_structure* %9 to i8*, !dbg !4657
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false), !dbg !4657
  br label %if.end, !dbg !4657

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.data_structure*, %struct.data_structure** %slot_, align 8, !dbg !4654
  ret %struct.data_structure* %12, !dbg !4654
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_structure_base_space(%struct.VEC_structure_base* %vec_, i32 %alloc_) #0 !dbg !4659 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !4662, metadata !DIExpression()), !dbg !4663
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4664, metadata !DIExpression()), !dbg !4663
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4663
  %cmp = icmp sge i32 %0, 0, !dbg !4663
  %conv = zext i1 %cmp to i32, !dbg !4663
  %1 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4663
  %tobool = icmp ne %struct.VEC_structure_base* %1, null, !dbg !4663
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4663

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4663
  %alloc = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %2, i32 0, i32 1, !dbg !4663
  %3 = load i32, i32* %alloc, align 4, !dbg !4663
  %4 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4663
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %4, i32 0, i32 0, !dbg !4663
  %5 = load i32, i32* %num, align 8, !dbg !4663
  %sub = sub i32 %3, %5, !dbg !4663
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4663
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4663
  %conv2 = zext i1 %cmp1 to i32, !dbg !4663
  br label %cond.end, !dbg !4663

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4663
  %tobool3 = icmp ne i32 %7, 0, !dbg !4663
  %lnot = xor i1 %tobool3, true, !dbg !4663
  %lnot.ext = zext i1 %lnot to i32, !dbg !4663
  br label %cond.end, !dbg !4663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4663
  ret i32 %cond, !dbg !4663
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @check_struct_form(%struct.data_structure* %str, %struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4665 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %i = alloca i32, align 4
  %f_type = alloca %union.tree_node*, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !4668, metadata !DIExpression()), !dbg !4669
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4670, metadata !DIExpression()), !dbg !4671
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4672, metadata !DIExpression()), !dbg !4673
  store i32 0, i32* %i, align 4, !dbg !4674
  br label %for.cond, !dbg !4676

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4677
  %1 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4679
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %1, i32 0, i32 1, !dbg !4680
  %2 = load i32, i32* %num_fields, align 8, !dbg !4680
  %cmp = icmp slt i32 %0, %2, !dbg !4681
  br i1 %cmp, label %for.body, label %for.end, !dbg !4682

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %f_type, metadata !4683, metadata !DIExpression()), !dbg !4685
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4686
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 3, !dbg !4686
  %4 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !4686
  %5 = load i32, i32* %i, align 4, !dbg !4686
  %idxprom = sext i32 %5 to i64, !dbg !4686
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %4, i64 %idxprom, !dbg !4686
  %decl = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 2, !dbg !4686
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4686
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !4686
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4686
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4686
  %call = call %union.tree_node* @strip_type(%union.tree_node* %7), !dbg !4687
  store %union.tree_node* %call, %union.tree_node** %f_type, align 8, !dbg !4685
  %8 = load %union.tree_node*, %union.tree_node** %f_type, align 8, !dbg !4688
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4688
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4688
  %bf.load = load i64, i64* %9, align 8, !dbg !4688
  %bf.clear = and i64 %bf.load, 65535, !dbg !4688
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4688
  %cmp1 = icmp eq i32 %bf.cast, 16, !dbg !4690
  br i1 %cmp1, label %if.then, label %if.end9, !dbg !4691

if.then:                                          ; preds = %for.body
  %10 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4692
  %11 = load %union.tree_node*, %union.tree_node** %f_type, align 8, !dbg !4694
  %type2 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4694
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !4694
  %12 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4694
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %10, %union.tree_node* %12), !dbg !4695
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4696
  %14 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4697
  %decl3 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %14, i32 0, i32 0, !dbg !4698
  %15 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !4698
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %13, %union.tree_node* %15), !dbg !4699
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4700
  %tobool = icmp ne %struct._IO_FILE* %16, null, !dbg !4700
  br i1 %tobool, label %if.then4, label %if.end, !dbg !4702

if.then4:                                         ; preds = %if.then
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4703
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)), !dbg !4705
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4706
  %19 = load %union.tree_node*, %union.tree_node** %f_type, align 8, !dbg !4707
  call void @print_generic_expr(%struct._IO_FILE* %18, %union.tree_node* %19, i32 0), !dbg !4708
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4709
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0)), !dbg !4710
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4711
  %22 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4712
  %decl7 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %22, i32 0, i32 0, !dbg !4713
  %23 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !4713
  call void @print_generic_expr(%struct._IO_FILE* %21, %union.tree_node* %23, i32 0), !dbg !4714
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4715
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0)), !dbg !4716
  br label %if.end, !dbg !4717

if.end:                                           ; preds = %if.then4, %if.then
  br label %if.end9, !dbg !4718

if.end9:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !4719

for.inc:                                          ; preds = %if.end9
  %25 = load i32, i32* %i, align 4, !dbg !4720
  %inc = add nsw i32 %25, 1, !dbg !4720
  store i32 %inc, i32* %i, align 4, !dbg !4720
  br label %for.cond, !dbg !4721, !llvm.loop !4722

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4724
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_types_passed_to_local_func(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4725 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %c_node = alloca %struct.cgraph_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4726, metadata !DIExpression()), !dbg !4727
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !4728, metadata !DIExpression()), !dbg !4729
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4730
  store %struct.cgraph_node* %0, %struct.cgraph_node** %c_node, align 8, !dbg !4732
  br label %for.cond, !dbg !4733

for.cond:                                         ; preds = %for.inc16, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4734
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !4736
  br i1 %tobool, label %for.body, label %for.end17, !dbg !4736

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4737
  %call = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %2), !dbg !4739
  %cmp = icmp eq i32 %call, 4, !dbg !4740
  br i1 %cmp, label %if.then, label %if.end15, !dbg !4741

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !4742, metadata !DIExpression()), !dbg !4744
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4745
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !4746
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4746
  store %union.tree_node* %4, %union.tree_node** %fn, align 8, !dbg !4744
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4747, metadata !DIExpression()), !dbg !4748
  %5 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4749
  %decl_non_common = bitcast %union.tree_node* %5 to %struct.tree_decl_non_common*, !dbg !4749
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4749
  %6 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4749
  store %union.tree_node* %6, %union.tree_node** %arg, align 8, !dbg !4751
  br label %for.cond1, !dbg !4752

for.cond1:                                        ; preds = %for.inc, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4753
  %tobool2 = icmp ne %union.tree_node* %7, null, !dbg !4755
  br i1 %tobool2, label %for.body3, label %for.end, !dbg !4755

for.body3:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4756, metadata !DIExpression()), !dbg !4758
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4759
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4759
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4759
  %9 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !4759
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !4758
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4760
  %call5 = call %union.tree_node* @strip_type(%union.tree_node* %10), !dbg !4761
  store %union.tree_node* %call5, %union.tree_node** %type, align 8, !dbg !4762
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4763
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4763
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !4763
  %bf.load = load i64, i64* %12, align 8, !dbg !4763
  %bf.clear = and i64 %bf.load, 65535, !dbg !4763
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4763
  %cmp6 = icmp eq i32 %bf.cast, 16, !dbg !4765
  br i1 %cmp6, label %if.then7, label %if.end13, !dbg !4766

if.then7:                                         ; preds = %for.body3
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4767
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4769
  %type8 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !4769
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 16, !dbg !4769
  %15 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4769
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %13, %union.tree_node* %15), !dbg !4770
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4771
  %tobool9 = icmp ne %struct._IO_FILE* %16, null, !dbg !4771
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !4773

if.then10:                                        ; preds = %if.then7
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4774
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0)), !dbg !4776
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4777
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4778
  call void @print_generic_expr(%struct._IO_FILE* %18, %union.tree_node* %19, i32 0), !dbg !4779
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4780
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.13, i64 0, i64 0)), !dbg !4781
  br label %if.end, !dbg !4782

if.end:                                           ; preds = %if.then10, %if.then7
  br label %if.end13, !dbg !4783

if.end13:                                         ; preds = %if.end, %for.body3
  br label %for.inc, !dbg !4784

for.inc:                                          ; preds = %if.end13
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4785
  %common14 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !4785
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !4785
  %22 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4785
  store %union.tree_node* %22, %union.tree_node** %arg, align 8, !dbg !4786
  br label %for.cond1, !dbg !4787, !llvm.loop !4788

for.end:                                          ; preds = %for.cond1
  br label %if.end15, !dbg !4790

if.end15:                                         ; preds = %for.end, %for.body
  br label %for.inc16, !dbg !4791

for.inc16:                                        ; preds = %if.end15
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4792
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 3, !dbg !4793
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4793
  store %struct.cgraph_node* %24, %struct.cgraph_node** %c_node, align 8, !dbg !4794
  br label %for.cond, !dbg !4795, !llvm.loop !4796

for.end17:                                        ; preds = %for.cond
  ret void, !dbg !4798
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_returned_types(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4799 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %c_node = alloca %struct.cgraph_node*, align 8
  %ret_t = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4800, metadata !DIExpression()), !dbg !4801
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !4802, metadata !DIExpression()), !dbg !4803
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4804
  store %struct.cgraph_node* %0, %struct.cgraph_node** %c_node, align 8, !dbg !4806
  br label %for.cond, !dbg !4807

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4808
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !4810
  br i1 %tobool, label %for.body, label %for.end, !dbg !4810

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret_t, metadata !4811, metadata !DIExpression()), !dbg !4813
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4814
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !4814
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4814
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !4814
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4814
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4814
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4814
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !4814
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4814
  store %union.tree_node* %5, %union.tree_node** %ret_t, align 8, !dbg !4813
  %6 = load %union.tree_node*, %union.tree_node** %ret_t, align 8, !dbg !4815
  %tobool3 = icmp ne %union.tree_node* %6, null, !dbg !4815
  br i1 %tobool3, label %if.then, label %if.end11, !dbg !4817

if.then:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %ret_t, align 8, !dbg !4818
  %call = call %union.tree_node* @strip_type(%union.tree_node* %7), !dbg !4820
  store %union.tree_node* %call, %union.tree_node** %ret_t, align 8, !dbg !4821
  %8 = load %union.tree_node*, %union.tree_node** %ret_t, align 8, !dbg !4822
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4822
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4822
  %bf.load = load i64, i64* %9, align 8, !dbg !4822
  %bf.clear = and i64 %bf.load, 65535, !dbg !4822
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4822
  %cmp = icmp eq i32 %bf.cast, 16, !dbg !4824
  br i1 %cmp, label %if.then4, label %if.end10, !dbg !4825

if.then4:                                         ; preds = %if.then
  %10 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4826
  %11 = load %union.tree_node*, %union.tree_node** %ret_t, align 8, !dbg !4828
  %type5 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4828
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 16, !dbg !4828
  %12 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !4828
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %10, %union.tree_node* %12), !dbg !4829
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4830
  %tobool6 = icmp ne %struct._IO_FILE* %13, null, !dbg !4830
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !4832

if.then7:                                         ; preds = %if.then4
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4833
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i64 0, i64 0)), !dbg !4835
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4836
  %16 = load %union.tree_node*, %union.tree_node** %ret_t, align 8, !dbg !4837
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %16, i32 0), !dbg !4838
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4839
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.15, i64 0, i64 0)), !dbg !4840
  br label %if.end, !dbg !4841

if.end:                                           ; preds = %if.then7, %if.then4
  br label %if.end10, !dbg !4842

if.end10:                                         ; preds = %if.end, %if.then
  br label %if.end11, !dbg !4843

if.end11:                                         ; preds = %if.end10, %for.body
  br label %for.inc, !dbg !4844

for.inc:                                          ; preds = %if.end11
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4845
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 3, !dbg !4846
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4846
  store %struct.cgraph_node* %19, %struct.cgraph_node** %c_node, align 8, !dbg !4847
  br label %for.cond, !dbg !4848, !llvm.loop !4849

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4851
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_escaping_types_1(%struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4852 {
entry:
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4853, metadata !DIExpression()), !dbg !4854
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !4855, metadata !DIExpression()), !dbg !4856
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4857, metadata !DIExpression()), !dbg !4858
  store i32 0, i32* %i, align 4, !dbg !4859
  br label %for.cond, !dbg !4861

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4862
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !4862
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4862

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4862
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !4862
  br label %cond.end, !dbg !4862

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4862

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4862
  %2 = load i32, i32* %i, align 4, !dbg !4862
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !4862
  %tobool1 = icmp ne i32 %call, 0, !dbg !4864
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4864

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !4865
  %4 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4866
  call void @check_type_escape(%struct.data_structure* %3, %struct.VEC_tree_heap** %4), !dbg !4867
  br label %for.inc, !dbg !4867

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !4868
  %inc = add i32 %5, 1, !dbg !4868
  store i32 %inc, i32* %i, align 4, !dbg !4868
  br label %for.cond, !dbg !4869, !llvm.loop !4870

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4872
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_type_escape(%struct.data_structure* %str, %struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4873 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !4874, metadata !DIExpression()), !dbg !4875
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4876, metadata !DIExpression()), !dbg !4877
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4878, metadata !DIExpression()), !dbg !4879
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4880
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 0, !dbg !4881
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4881
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !4879
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4882
  %call = call zeroext i8 @ipa_type_escape_type_contained_p(%union.tree_node* %2), !dbg !4884
  %tobool = icmp ne i8 %call, 0, !dbg !4884
  br i1 %tobool, label %if.end4, label %if.then, !dbg !4885

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4886
  %tobool1 = icmp ne %struct._IO_FILE* %3, null, !dbg !4886
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4889

if.then2:                                         ; preds = %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4890
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0)), !dbg !4892
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4893
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4894
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %6, i32 0), !dbg !4895
  br label %if.end, !dbg !4896

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4897
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4898
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %7, %union.tree_node* %8), !dbg !4899
  br label %if.end4, !dbg !4900

if.end4:                                          ; preds = %if.end, %entry
  ret void, !dbg !4901
}

declare dso_local zeroext i8 @ipa_type_escape_type_contained_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_bitfields(%struct.data_structure* %str, %struct.VEC_tree_heap** %unsuitable_types) #0 !dbg !4902 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %unsuitable_types.addr = alloca %struct.VEC_tree_heap**, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  store %struct.VEC_tree_heap** %unsuitable_types, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %unsuitable_types.addr, metadata !4905, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4907, metadata !DIExpression()), !dbg !4908
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4909
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 0, !dbg !4910
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4910
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !4908
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4911, metadata !DIExpression()), !dbg !4912
  store i32 0, i32* %i, align 4, !dbg !4913
  br label %for.cond, !dbg !4915

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !4916
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4918
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 1, !dbg !4919
  %4 = load i32, i32* %num_fields, align 8, !dbg !4919
  %cmp = icmp slt i32 %2, %4, !dbg !4920
  br i1 %cmp, label %for.body, label %for.end, !dbg !4921

for.body:                                         ; preds = %for.cond
  %5 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4922
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 3, !dbg !4922
  %6 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !4922
  %7 = load i32, i32* %i, align 4, !dbg !4922
  %idxprom = sext i32 %7 to i64, !dbg !4922
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %6, i64 %idxprom, !dbg !4922
  %decl1 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 2, !dbg !4922
  %8 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !4922
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !4922
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4922
  %9 = bitcast i40* %decl_flag_1 to i64*, !dbg !4922
  %bf.load = load i64, i64* %9, align 8, !dbg !4922
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !4922
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4922
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4922
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4922
  br i1 %tobool, label %if.then, label %if.end9, !dbg !4924

if.then:                                          ; preds = %for.body
  %10 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %unsuitable_types.addr, align 8, !dbg !4925
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4927
  call void @add_unsuitable_type(%struct.VEC_tree_heap** %10, %union.tree_node* %11), !dbg !4928
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4929
  %tobool2 = icmp ne %struct._IO_FILE* %12, null, !dbg !4929
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4931

if.then3:                                         ; preds = %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4932
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0)), !dbg !4934
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4935
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4936
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %15, i32 0), !dbg !4937
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4938
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17, i64 0, i64 0)), !dbg !4939
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4940
  %18 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4941
  %fields5 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %18, i32 0, i32 3, !dbg !4942
  %19 = load %struct.field_entry*, %struct.field_entry** %fields5, align 8, !dbg !4942
  %20 = load i32, i32* %i, align 4, !dbg !4943
  %idxprom6 = sext i32 %20 to i64, !dbg !4941
  %arrayidx7 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %19, i64 %idxprom6, !dbg !4941
  %decl8 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx7, i32 0, i32 2, !dbg !4944
  %21 = load %union.tree_node*, %union.tree_node** %decl8, align 8, !dbg !4944
  call void @print_generic_expr(%struct._IO_FILE* %17, %union.tree_node* %21, i32 0), !dbg !4945
  br label %if.end, !dbg !4946

if.end:                                           ; preds = %if.then3, %if.then
  br label %for.end, !dbg !4947

if.end9:                                          ; preds = %for.body
  br label %for.inc, !dbg !4922

for.inc:                                          ; preds = %if.end9
  %22 = load i32, i32* %i, align 4, !dbg !4948
  %inc = add nsw i32 %22, 1, !dbg !4948
  store i32 %inc, i32* %i, align 4, !dbg !4948
  br label %for.cond, !dbg !4949, !llvm.loop !4950

for.end:                                          ; preds = %if.end, %for.cond
  ret void, !dbg !4952
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_structure(i32 %i) #0 !dbg !4953 {
entry:
  %i.addr = alloca i32, align 4
  %str = alloca %struct.data_structure*, align 8
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !4958, metadata !DIExpression()), !dbg !4959
  %0 = load i32, i32* %i.addr, align 4, !dbg !4960
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4962
  %tobool = icmp ne %struct.VEC_structure_heap* %1, null, !dbg !4962
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4962

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4962
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %2, i32 0, i32 0, !dbg !4962
  br label %cond.end, !dbg !4962

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4962

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4962
  %call = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !4962
  %cmp = icmp uge i32 %0, %call, !dbg !4963
  br i1 %cmp, label %if.then, label %if.end, !dbg !4964

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !4965

if.end:                                           ; preds = %cond.end
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4966
  %tobool1 = icmp ne %struct.VEC_structure_heap* %3, null, !dbg !4966
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4966

cond.true2:                                       ; preds = %if.end
  %4 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4966
  %base3 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %4, i32 0, i32 0, !dbg !4966
  br label %cond.end5, !dbg !4966

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !4966

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_structure_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4966
  %5 = load i32, i32* %i.addr, align 4, !dbg !4966
  %call7 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond6, i32 %5), !dbg !4966
  store %struct.data_structure* %call7, %struct.data_structure** %str, align 8, !dbg !4967
  %6 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !4968
  call void @remove_str_allocs(%struct.data_structure* %6), !dbg !4969
  %7 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !4970
  call void @free_data_struct(%struct.data_structure* %7), !dbg !4971
  %8 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4972
  %tobool8 = icmp ne %struct.VEC_structure_heap* %8, null, !dbg !4972
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !4972

cond.true9:                                       ; preds = %cond.end5
  %9 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !4972
  %base10 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %9, i32 0, i32 0, !dbg !4972
  br label %cond.end12, !dbg !4972

cond.false11:                                     ; preds = %cond.end5
  br label %cond.end12, !dbg !4972

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_structure_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !4972
  %10 = load i32, i32* %i.addr, align 4, !dbg !4972
  call void @VEC_structure_base_ordered_remove(%struct.VEC_structure_base* %cond13, i32 %10), !dbg !4972
  br label %return, !dbg !4973

return:                                           ; preds = %cond.end12, %if.then
  ret void, !dbg !4973
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %vec_, i32 %ix_) #0 !dbg !4974 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !4977, metadata !DIExpression()), !dbg !4978
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4979, metadata !DIExpression()), !dbg !4978
  %0 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4978
  %tobool = icmp ne %struct.VEC_structure_base* %0, null, !dbg !4978
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4978

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4978
  %2 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4978
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %2, i32 0, i32 0, !dbg !4978
  %3 = load i32, i32* %num, align 8, !dbg !4978
  %cmp = icmp ult i32 %1, %3, !dbg !4978
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4980
  %land.ext = zext i1 %4 to i32, !dbg !4978
  %5 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !4978
  %vec = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %5, i32 0, i32 2, !dbg !4978
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4978
  %idxprom = zext i32 %6 to i64, !dbg !4978
  %arrayidx = getelementptr inbounds [1 x %struct.data_structure], [1 x %struct.data_structure]* %vec, i64 0, i64 %idxprom, !dbg !4978
  ret %struct.data_structure* %arrayidx, !dbg !4978
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_str_allocs(%struct.data_structure* %str) #0 !dbg !4981 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !4984, metadata !DIExpression()), !dbg !4985
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4986
  %tobool = icmp ne %struct.data_structure* %0, null, !dbg !4986
  br i1 %tobool, label %if.end, label %if.then, !dbg !4988

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !4989

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !4990
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !4990
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4992

if.then2:                                         ; preds = %if.end
  %2 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !4993
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !4994
  %4 = bitcast %struct.data_structure* %3 to i8*, !dbg !4994
  call void @htab_traverse(%struct.htab* %2, i32 (i8**, i8*)* @remove_str_allocs_in_func, i8* %4), !dbg !4995
  br label %if.end3, !dbg !4995

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !4996
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_data_struct(%struct.data_structure* %d_node) #0 !dbg !4997 {
entry:
  %d_node.addr = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %d_node, %struct.data_structure** %d_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %d_node.addr, metadata !4998, metadata !DIExpression()), !dbg !4999
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5000, metadata !DIExpression()), !dbg !5001
  %0 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5002
  %tobool = icmp ne %struct.data_structure* %0, null, !dbg !5002
  br i1 %tobool, label %if.end, label %if.then, !dbg !5004

if.then:                                          ; preds = %entry
  br label %if.end21, !dbg !5005

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5006
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !5006
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !5008

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5009
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0)), !dbg !5011
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5012
  %4 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5013
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %4, i32 0, i32 0, !dbg !5014
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5014
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %5, i32 0), !dbg !5015
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5016
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i64 0, i64 0)), !dbg !5017
  br label %if.end4, !dbg !5018

if.end4:                                          ; preds = %if.then2, %if.end
  %7 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5019
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %7, i32 0, i32 3, !dbg !5021
  %8 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !5021
  %tobool5 = icmp ne %struct.field_entry* %8, null, !dbg !5019
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !5022

if.then6:                                         ; preds = %if.end4
  store i32 0, i32* %i, align 4, !dbg !5023
  br label %for.cond, !dbg !5026

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load i32, i32* %i, align 4, !dbg !5027
  %10 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5029
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %10, i32 0, i32 1, !dbg !5030
  %11 = load i32, i32* %num_fields, align 8, !dbg !5030
  %cmp = icmp slt i32 %9, %11, !dbg !5031
  br i1 %cmp, label %for.body, label %for.end, !dbg !5032

for.body:                                         ; preds = %for.cond
  %12 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5033
  %fields7 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %12, i32 0, i32 3, !dbg !5034
  %13 = load %struct.field_entry*, %struct.field_entry** %fields7, align 8, !dbg !5034
  %14 = load i32, i32* %i, align 4, !dbg !5035
  %idxprom = sext i32 %14 to i64, !dbg !5033
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %13, i64 %idxprom, !dbg !5033
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 4, !dbg !5036
  %15 = load %struct.htab*, %struct.htab** %acc_sites, align 8, !dbg !5036
  call void @free_field_accesses(%struct.htab* %15), !dbg !5037
  br label %for.inc, !dbg !5037

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !5038
  %inc = add nsw i32 %16, 1, !dbg !5038
  store i32 %inc, i32* %i, align 4, !dbg !5038
  br label %for.cond, !dbg !5039, !llvm.loop !5040

for.end:                                          ; preds = %for.cond
  %17 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5042
  %fields8 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %17, i32 0, i32 3, !dbg !5043
  %18 = load %struct.field_entry*, %struct.field_entry** %fields8, align 8, !dbg !5043
  %19 = bitcast %struct.field_entry* %18 to i8*, !dbg !5042
  call void @free(i8* %19), !dbg !5044
  br label %if.end9, !dbg !5045

if.end9:                                          ; preds = %for.end, %if.end4
  %20 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5046
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %20, i32 0, i32 4, !dbg !5048
  %21 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !5048
  %tobool10 = icmp ne %struct.htab* %21, null, !dbg !5046
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !5049

if.then11:                                        ; preds = %if.end9
  %22 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5050
  %accs12 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %22, i32 0, i32 4, !dbg !5051
  %23 = load %struct.htab*, %struct.htab** %accs12, align 8, !dbg !5051
  call void @free_accesses(%struct.htab* %23), !dbg !5052
  br label %if.end13, !dbg !5052

if.end13:                                         ; preds = %if.then11, %if.end9
  %24 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5053
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %24, i32 0, i32 5, !dbg !5055
  %25 = load %struct.field_cluster*, %struct.field_cluster** %struct_clustering, align 8, !dbg !5055
  %tobool14 = icmp ne %struct.field_cluster* %25, null, !dbg !5053
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5056

if.then15:                                        ; preds = %if.end13
  %26 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5057
  %struct_clustering16 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %26, i32 0, i32 5, !dbg !5058
  %27 = load %struct.field_cluster*, %struct.field_cluster** %struct_clustering16, align 8, !dbg !5058
  call void @free_struct_cluster(%struct.field_cluster* %27), !dbg !5059
  br label %if.end17, !dbg !5059

if.end17:                                         ; preds = %if.then15, %if.end13
  %28 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5060
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %28, i32 0, i32 6, !dbg !5062
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !5062
  %tobool18 = icmp ne %struct.VEC_tree_heap* %29, null, !dbg !5060
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5063

if.then19:                                        ; preds = %if.end17
  %30 = load %struct.data_structure*, %struct.data_structure** %d_node.addr, align 8, !dbg !5064
  %new_types20 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %30, i32 0, i32 6, !dbg !5064
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %new_types20), !dbg !5064
  br label %if.end21, !dbg !5064

if.end21:                                         ; preds = %if.then, %if.then19, %if.end17
  ret void, !dbg !5065
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_structure_base_ordered_remove(%struct.VEC_structure_base* %vec_, i32 %ix_) #0 !dbg !5066 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.data_structure*, align 8
  store %struct.VEC_structure_base* %vec_, %struct.VEC_structure_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_base** %vec_.addr, metadata !5069, metadata !DIExpression()), !dbg !5070
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5071, metadata !DIExpression()), !dbg !5070
  call void @llvm.dbg.declare(metadata %struct.data_structure** %slot_, metadata !5072, metadata !DIExpression()), !dbg !5070
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5070
  %1 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !5070
  %num = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %1, i32 0, i32 0, !dbg !5070
  %2 = load i32, i32* %num, align 8, !dbg !5070
  %cmp = icmp ult i32 %0, %2, !dbg !5070
  %conv = zext i1 %cmp to i32, !dbg !5070
  %3 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !5070
  %vec = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %3, i32 0, i32 2, !dbg !5070
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5070
  %idxprom = zext i32 %4 to i64, !dbg !5070
  %arrayidx = getelementptr inbounds [1 x %struct.data_structure], [1 x %struct.data_structure]* %vec, i64 0, i64 %idxprom, !dbg !5070
  store %struct.data_structure* %arrayidx, %struct.data_structure** %slot_, align 8, !dbg !5070
  %5 = load %struct.data_structure*, %struct.data_structure** %slot_, align 8, !dbg !5070
  %6 = bitcast %struct.data_structure* %5 to i8*, !dbg !5070
  %7 = load %struct.data_structure*, %struct.data_structure** %slot_, align 8, !dbg !5070
  %add.ptr = getelementptr inbounds %struct.data_structure, %struct.data_structure* %7, i64 1, !dbg !5070
  %8 = bitcast %struct.data_structure* %add.ptr to i8*, !dbg !5070
  %9 = load %struct.VEC_structure_base*, %struct.VEC_structure_base** %vec_.addr, align 8, !dbg !5070
  %num1 = getelementptr inbounds %struct.VEC_structure_base, %struct.VEC_structure_base* %9, i32 0, i32 0, !dbg !5070
  %10 = load i32, i32* %num1, align 8, !dbg !5070
  %dec = add i32 %10, -1, !dbg !5070
  store i32 %dec, i32* %num1, align 8, !dbg !5070
  %11 = load i32, i32* %ix_.addr, align 4, !dbg !5070
  %sub = sub i32 %dec, %11, !dbg !5070
  %conv2 = zext i32 %sub to i64, !dbg !5070
  %mul = mul i64 %conv2, 56, !dbg !5070
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %8, i64 %mul, i1 false), !dbg !5070
  ret void, !dbg !5070
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @remove_str_allocs_in_func(i8** %slot, i8* %data) #0 !dbg !5073 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %fallocs = alloca %struct.func_alloc_sites*, align 8
  %i = alloca i32, align 4
  %call = alloca %struct.alloc_site*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5076, metadata !DIExpression()), !dbg !5077
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5078, metadata !DIExpression()), !dbg !5079
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %fallocs, metadata !5080, metadata !DIExpression()), !dbg !5081
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5082
  %1 = bitcast i8** %0 to %struct.func_alloc_sites**, !dbg !5083
  %2 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %1, align 8, !dbg !5083
  store %struct.func_alloc_sites* %2, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5081
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5084, metadata !DIExpression()), !dbg !5085
  store i32 0, i32* %i, align 4, !dbg !5085
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %call, metadata !5086, metadata !DIExpression()), !dbg !5088
  br label %while.cond, !dbg !5089

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5090
  %allocs = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %3, i32 0, i32 1, !dbg !5090
  %4 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs, align 8, !dbg !5090
  %tobool = icmp ne %struct.VEC_alloc_site_t_heap* %4, null, !dbg !5090
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5090

cond.true:                                        ; preds = %while.cond
  %5 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5090
  %allocs1 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %5, i32 0, i32 1, !dbg !5090
  %6 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs1, align 8, !dbg !5090
  %base = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %6, i32 0, i32 0, !dbg !5090
  br label %cond.end, !dbg !5090

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5090

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alloc_site_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5090
  %7 = load i32, i32* %i, align 4, !dbg !5090
  %call2 = call i32 @VEC_alloc_site_t_base_iterate(%struct.VEC_alloc_site_t_base* %cond, i32 %7, %struct.alloc_site** %call), !dbg !5090
  %tobool3 = icmp ne i32 %call2, 0, !dbg !5089
  br i1 %tobool3, label %while.body, label %while.end, !dbg !5089

while.body:                                       ; preds = %cond.end
  %8 = load %struct.alloc_site*, %struct.alloc_site** %call, align 8, !dbg !5091
  %str = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %8, i32 0, i32 1, !dbg !5094
  %9 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5094
  %10 = load i8*, i8** %data.addr, align 8, !dbg !5095
  %11 = bitcast i8* %10 to %struct.data_structure*, !dbg !5096
  %cmp = icmp eq %struct.data_structure* %9, %11, !dbg !5097
  br i1 %cmp, label %if.then, label %if.else, !dbg !5098

if.then:                                          ; preds = %while.body
  %12 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5099
  %allocs4 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %12, i32 0, i32 1, !dbg !5099
  %13 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs4, align 8, !dbg !5099
  %tobool5 = icmp ne %struct.VEC_alloc_site_t_heap* %13, null, !dbg !5099
  br i1 %tobool5, label %cond.true6, label %cond.false9, !dbg !5099

cond.true6:                                       ; preds = %if.then
  %14 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5099
  %allocs7 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %14, i32 0, i32 1, !dbg !5099
  %15 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs7, align 8, !dbg !5099
  %base8 = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %15, i32 0, i32 0, !dbg !5099
  br label %cond.end10, !dbg !5099

cond.false9:                                      ; preds = %if.then
  br label %cond.end10, !dbg !5099

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.VEC_alloc_site_t_base* [ %base8, %cond.true6 ], [ null, %cond.false9 ], !dbg !5099
  %16 = load i32, i32* %i, align 4, !dbg !5099
  call void @VEC_alloc_site_t_base_ordered_remove(%struct.VEC_alloc_site_t_base* %cond11, i32 %16), !dbg !5099
  br label %if.end, !dbg !5099

if.else:                                          ; preds = %while.body
  %17 = load i32, i32* %i, align 4, !dbg !5100
  %inc = add i32 %17, 1, !dbg !5100
  store i32 %inc, i32* %i, align 4, !dbg !5100
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end10
  br label %while.cond, !dbg !5089, !llvm.loop !5101

while.end:                                        ; preds = %cond.end
  ret i32 1, !dbg !5103
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alloc_site_t_base_iterate(%struct.VEC_alloc_site_t_base* %vec_, i32 %ix_, %struct.alloc_site** %ptr) #0 !dbg !5104 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_alloc_site_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.alloc_site**, align 8
  store %struct.VEC_alloc_site_t_base* %vec_, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_base** %vec_.addr, metadata !5109, metadata !DIExpression()), !dbg !5110
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5111, metadata !DIExpression()), !dbg !5110
  store %struct.alloc_site** %ptr, %struct.alloc_site*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alloc_site*** %ptr.addr, metadata !5112, metadata !DIExpression()), !dbg !5110
  %0 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5113
  %tobool = icmp ne %struct.VEC_alloc_site_t_base* %0, null, !dbg !5113
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5113

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5113
  %2 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5113
  %num = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %2, i32 0, i32 0, !dbg !5113
  %3 = load i32, i32* %num, align 8, !dbg !5113
  %cmp = icmp ult i32 %1, %3, !dbg !5113
  br i1 %cmp, label %if.then, label %if.else, !dbg !5110

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5115
  %vec = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %4, i32 0, i32 2, !dbg !5115
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5115
  %idxprom = zext i32 %5 to i64, !dbg !5115
  %arrayidx = getelementptr inbounds [1 x %struct.alloc_site], [1 x %struct.alloc_site]* %vec, i64 0, i64 %idxprom, !dbg !5115
  %6 = load %struct.alloc_site**, %struct.alloc_site*** %ptr.addr, align 8, !dbg !5115
  store %struct.alloc_site* %arrayidx, %struct.alloc_site** %6, align 8, !dbg !5115
  store i32 1, i32* %retval, align 4, !dbg !5115
  br label %return, !dbg !5115

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.alloc_site**, %struct.alloc_site*** %ptr.addr, align 8, !dbg !5117
  store %struct.alloc_site* null, %struct.alloc_site** %7, align 8, !dbg !5117
  store i32 0, i32* %retval, align 4, !dbg !5117
  br label %return, !dbg !5117

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5110
  ret i32 %8, !dbg !5110
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_alloc_site_t_base_ordered_remove(%struct.VEC_alloc_site_t_base* %vec_, i32 %ix_) #0 !dbg !5119 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.alloc_site*, align 8
  store %struct.VEC_alloc_site_t_base* %vec_, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_base** %vec_.addr, metadata !5122, metadata !DIExpression()), !dbg !5123
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5124, metadata !DIExpression()), !dbg !5123
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %slot_, metadata !5125, metadata !DIExpression()), !dbg !5123
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5123
  %1 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5123
  %num = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %1, i32 0, i32 0, !dbg !5123
  %2 = load i32, i32* %num, align 8, !dbg !5123
  %cmp = icmp ult i32 %0, %2, !dbg !5123
  %conv = zext i1 %cmp to i32, !dbg !5123
  %3 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5123
  %vec = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %3, i32 0, i32 2, !dbg !5123
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5123
  %idxprom = zext i32 %4 to i64, !dbg !5123
  %arrayidx = getelementptr inbounds [1 x %struct.alloc_site], [1 x %struct.alloc_site]* %vec, i64 0, i64 %idxprom, !dbg !5123
  store %struct.alloc_site* %arrayidx, %struct.alloc_site** %slot_, align 8, !dbg !5123
  %5 = load %struct.alloc_site*, %struct.alloc_site** %slot_, align 8, !dbg !5123
  %6 = bitcast %struct.alloc_site* %5 to i8*, !dbg !5123
  %7 = load %struct.alloc_site*, %struct.alloc_site** %slot_, align 8, !dbg !5123
  %add.ptr = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %7, i64 1, !dbg !5123
  %8 = bitcast %struct.alloc_site* %add.ptr to i8*, !dbg !5123
  %9 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5123
  %num1 = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %9, i32 0, i32 0, !dbg !5123
  %10 = load i32, i32* %num1, align 8, !dbg !5123
  %dec = add i32 %10, -1, !dbg !5123
  store i32 %dec, i32* %num1, align 8, !dbg !5123
  %11 = load i32, i32* %ix_.addr, align 4, !dbg !5123
  %sub = sub i32 %dec, %11, !dbg !5123
  %conv2 = zext i32 %sub to i64, !dbg !5123
  %mul = mul i64 %conv2, 16, !dbg !5123
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %8, i64 %mul, i1 false), !dbg !5123
  ret void, !dbg !5123
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @free_field_accesses(%struct.htab* %f_accs) #0 !dbg !5126 {
entry:
  %f_accs.addr = alloca %struct.htab*, align 8
  store %struct.htab* %f_accs, %struct.htab** %f_accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %f_accs.addr, metadata !5129, metadata !DIExpression()), !dbg !5130
  %0 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !5131
  %tobool = icmp ne %struct.htab* %0, null, !dbg !5131
  br i1 %tobool, label %if.then, label %if.end, !dbg !5133

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !5134
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @free_field_accs, i8* null), !dbg !5135
  br label %if.end, !dbg !5135

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !5136
  call void @htab_delete(%struct.htab* %2), !dbg !5137
  ret void, !dbg !5138
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_accesses(%struct.htab* %accs) #0 !dbg !5139 {
entry:
  %accs.addr = alloca %struct.htab*, align 8
  store %struct.htab* %accs, %struct.htab** %accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %accs.addr, metadata !5140, metadata !DIExpression()), !dbg !5141
  %0 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !5142
  %tobool = icmp ne %struct.htab* %0, null, !dbg !5142
  br i1 %tobool, label %if.then, label %if.end, !dbg !5144

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !5145
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @free_accs, i8* null), !dbg !5146
  br label %if.end, !dbg !5146

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !5147
  call void @htab_delete(%struct.htab* %2), !dbg !5148
  ret void, !dbg !5149
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_struct_cluster(%struct.field_cluster* %cluster) #0 !dbg !5150 {
entry:
  %cluster.addr = alloca %struct.field_cluster*, align 8
  store %struct.field_cluster* %cluster, %struct.field_cluster** %cluster.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %cluster.addr, metadata !5153, metadata !DIExpression()), !dbg !5154
  %0 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5155
  %tobool = icmp ne %struct.field_cluster* %0, null, !dbg !5155
  br i1 %tobool, label %if.then, label %if.end9, !dbg !5157

if.then:                                          ; preds = %entry
  %1 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5158
  %fields_in_cluster = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %1, i32 0, i32 0, !dbg !5161
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster, align 8, !dbg !5161
  %tobool1 = icmp ne %struct.simple_bitmap_def* %2, null, !dbg !5158
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !5162

if.then2:                                         ; preds = %if.then
  %3 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5163
  %fields_in_cluster3 = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %3, i32 0, i32 0, !dbg !5163
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster3, align 8, !dbg !5163
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 0, !dbg !5163
  %5 = load i8*, i8** %popcount, align 8, !dbg !5163
  call void @free(i8* %5), !dbg !5163
  %6 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5163
  %fields_in_cluster4 = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %6, i32 0, i32 0, !dbg !5163
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster4, align 8, !dbg !5163
  %8 = bitcast %struct.simple_bitmap_def* %7 to i8*, !dbg !5163
  call void @free(i8* %8), !dbg !5163
  br label %if.end, !dbg !5163

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5164
  %sibling = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %9, i32 0, i32 1, !dbg !5166
  %10 = load %struct.field_cluster*, %struct.field_cluster** %sibling, align 8, !dbg !5166
  %tobool5 = icmp ne %struct.field_cluster* %10, null, !dbg !5164
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !5167

if.then6:                                         ; preds = %if.end
  %11 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5168
  %sibling7 = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %11, i32 0, i32 1, !dbg !5169
  %12 = load %struct.field_cluster*, %struct.field_cluster** %sibling7, align 8, !dbg !5169
  call void @free_struct_cluster(%struct.field_cluster* %12), !dbg !5170
  br label %if.end8, !dbg !5170

if.end8:                                          ; preds = %if.then6, %if.end
  %13 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !5171
  %14 = bitcast %struct.field_cluster* %13 to i8*, !dbg !5171
  call void @free(i8* %14), !dbg !5172
  br label %if.end9, !dbg !5173

if.end9:                                          ; preds = %if.end8, %entry
  ret void, !dbg !5174
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @free_field_accs(i8** %slot, i8* %data) #0 !dbg !5175 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %f_acc = alloca %struct.field_access_site*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5176, metadata !DIExpression()), !dbg !5177
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5178, metadata !DIExpression()), !dbg !5179
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %f_acc, metadata !5180, metadata !DIExpression()), !dbg !5181
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5182
  %1 = bitcast i8** %0 to %struct.field_access_site**, !dbg !5183
  %2 = load %struct.field_access_site*, %struct.field_access_site** %1, align 8, !dbg !5183
  store %struct.field_access_site* %2, %struct.field_access_site** %f_acc, align 8, !dbg !5181
  %3 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !5184
  %4 = bitcast %struct.field_access_site* %3 to i8*, !dbg !5184
  call void @free(i8* %4), !dbg !5185
  ret i32 1, !dbg !5186
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @free_accs(i8** %slot, i8* %data) #0 !dbg !5187 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %acc = alloca %struct.access_site*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5188, metadata !DIExpression()), !dbg !5189
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5190, metadata !DIExpression()), !dbg !5191
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !5192, metadata !DIExpression()), !dbg !5193
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5194
  %1 = bitcast i8** %0 to %struct.access_site**, !dbg !5195
  %2 = load %struct.access_site*, %struct.access_site** %1, align 8, !dbg !5195
  store %struct.access_site* %2, %struct.access_site** %acc, align 8, !dbg !5193
  %3 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !5196
  %vars = getelementptr inbounds %struct.access_site, %struct.access_site* %3, i32 0, i32 1, !dbg !5196
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vars), !dbg !5196
  %4 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !5197
  %5 = bitcast %struct.access_site* %4 to i8*, !dbg !5197
  call void @free(i8* %5), !dbg !5198
  ret i32 1, !dbg !5199
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @malloc_hash(i8* %x) #0 !dbg !5200 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !5201, metadata !DIExpression()), !dbg !5202
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !5203
  %1 = load i8*, i8** %x.addr, align 8, !dbg !5204
  %2 = bitcast i8* %1 to %struct.func_alloc_sites*, !dbg !5205
  %func = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %2, i32 0, i32 0, !dbg !5206
  %3 = load %union.tree_node*, %union.tree_node** %func, align 8, !dbg !5206
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !5207
  %call = call i32 %0(i8* %4), !dbg !5203
  ret i32 %call, !dbg !5208
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @malloc_eq(i8* %x, i8* %y) #0 !dbg !5209 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load i8*, i8** %x.addr, align 8, !dbg !5214
  %1 = bitcast i8* %0 to %struct.func_alloc_sites*, !dbg !5215
  %func = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %1, i32 0, i32 0, !dbg !5216
  %2 = load %union.tree_node*, %union.tree_node** %func, align 8, !dbg !5216
  %3 = load i8*, i8** %y.addr, align 8, !dbg !5217
  %4 = bitcast i8* %3 to %union.tree_node*, !dbg !5218
  %cmp = icmp eq %union.tree_node* %2, %4, !dbg !5219
  %conv = zext i1 %cmp to i32, !dbg !5219
  ret i32 %conv, !dbg !5220
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_alloc_sites() #0 !dbg !5221 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %decl8 = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %str = alloca %struct.data_structure*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5222, metadata !DIExpression()), !dbg !5223
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !5224, metadata !DIExpression()), !dbg !5225
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !5226
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !5228
  br label %for.cond, !dbg !5229

for.cond:                                         ; preds = %for.inc35, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5230
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !5232
  br i1 %tobool, label %for.body, label %for.end36, !dbg !5232

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5233
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !5235
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !5235
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !5235
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5235
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5235
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !5233
  br i1 %tobool1, label %land.lhs.true, label %if.end34, !dbg !5236

land.lhs.true:                                    ; preds = %for.body
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5237
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !5238
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5238
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !5237
  br i1 %tobool2, label %if.then, label %if.end34, !dbg !5239

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5240
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 1, !dbg !5243
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5243
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %cs, align 8, !dbg !5244
  br label %for.cond3, !dbg !5245

for.cond3:                                        ; preds = %for.inc, %if.then
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5246
  %tobool4 = icmp ne %struct.cgraph_edge* %7, null, !dbg !5248
  br i1 %tobool4, label %for.body5, label %for.end, !dbg !5248

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5249, metadata !DIExpression()), !dbg !5251
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5252
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 7, !dbg !5253
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !5253
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %stmt, align 8, !dbg !5251
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5254
  %tobool6 = icmp ne %union.gimple_statement_d* %10, null, !dbg !5254
  br i1 %tobool6, label %if.then7, label %if.end33, !dbg !5256

if.then7:                                         ; preds = %for.body5
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl8, metadata !5257, metadata !DIExpression()), !dbg !5259
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5260
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %11), !dbg !5262
  %conv = zext i8 %call to i32, !dbg !5262
  %tobool9 = icmp ne i32 %conv, 0, !dbg !5262
  br i1 %tobool9, label %land.lhs.true10, label %if.end32, !dbg !5263

land.lhs.true10:                                  ; preds = %if.then7
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5264
  %call11 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %12), !dbg !5265
  store %union.tree_node* %call11, %union.tree_node** %decl8, align 8, !dbg !5266
  %tobool12 = icmp ne %union.tree_node* %call11, null, !dbg !5266
  br i1 %tobool12, label %land.lhs.true13, label %if.end32, !dbg !5267

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5268
  %call14 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %13), !dbg !5269
  %tobool15 = icmp ne %union.tree_node* %call14, null, !dbg !5269
  br i1 %tobool15, label %if.then16, label %if.end32, !dbg !5270

if.then16:                                        ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5271, metadata !DIExpression()), !dbg !5273
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5274
  %call17 = call zeroext i8 @is_alloc_of_struct(%union.gimple_statement_d* %14, i32* %i), !dbg !5276
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5276
  br i1 %tobool18, label %if.then19, label %if.end31, !dbg !5277

if.then19:                                        ; preds = %if.then16
  %15 = load %union.tree_node*, %union.tree_node** %decl8, align 8, !dbg !5278
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !5278
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5278
  %bf.load20 = load i32, i32* %function_code, align 8, !dbg !5278
  %bf.clear21 = and i32 %bf.load20, 2047, !dbg !5278
  %cmp = icmp eq i32 %bf.clear21, 491, !dbg !5281
  br i1 %cmp, label %if.then23, label %if.else, !dbg !5282

if.then23:                                        ; preds = %if.then19
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5283, metadata !DIExpression()), !dbg !5285
  %16 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5286
  %tobool24 = icmp ne %struct.VEC_structure_heap* %16, null, !dbg !5286
  br i1 %tobool24, label %cond.true, label %cond.false, !dbg !5286

cond.true:                                        ; preds = %if.then23
  %17 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5286
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %17, i32 0, i32 0, !dbg !5286
  br label %cond.end, !dbg !5286

cond.false:                                       ; preds = %if.then23
  br label %cond.end, !dbg !5286

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5286
  %18 = load i32, i32* %i, align 4, !dbg !5286
  %call25 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond, i32 %18), !dbg !5286
  store %struct.data_structure* %call25, %struct.data_structure** %str, align 8, !dbg !5287
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5288
  %decl26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 0, !dbg !5289
  %20 = load %union.tree_node*, %union.tree_node** %decl26, align 8, !dbg !5289
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5290
  %22 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5291
  call void @add_alloc_site(%union.tree_node* %20, %union.gimple_statement_d* %21, %struct.data_structure* %22), !dbg !5292
  br label %if.end30, !dbg !5293

if.else:                                          ; preds = %if.then19
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5294
  %tobool27 = icmp ne %struct._IO_FILE* %23, null, !dbg !5294
  br i1 %tobool27, label %if.then28, label %if.end, !dbg !5297

if.then28:                                        ; preds = %if.else
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5298
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i64 0, i64 0)), !dbg !5300
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5301
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5302
  call void @print_gimple_stmt(%struct._IO_FILE* %25, %union.gimple_statement_d* %26, i32 0, i32 0), !dbg !5303
  br label %if.end, !dbg !5304

if.end:                                           ; preds = %if.then28, %if.else
  %27 = load i32, i32* %i, align 4, !dbg !5305
  call void @remove_structure(i32 %27), !dbg !5306
  br label %if.end30

if.end30:                                         ; preds = %if.end, %cond.end
  br label %if.end31, !dbg !5307

if.end31:                                         ; preds = %if.end30, %if.then16
  br label %if.end32, !dbg !5308

if.end32:                                         ; preds = %if.end31, %land.lhs.true13, %land.lhs.true10, %if.then7
  br label %if.end33, !dbg !5309

if.end33:                                         ; preds = %if.end32, %for.body5
  br label %for.inc, !dbg !5310

for.inc:                                          ; preds = %if.end33
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !5311
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 6, !dbg !5312
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5312
  store %struct.cgraph_edge* %29, %struct.cgraph_edge** %cs, align 8, !dbg !5313
  br label %for.cond3, !dbg !5314, !llvm.loop !5315

for.end:                                          ; preds = %for.cond3
  br label %if.end34, !dbg !5317

if.end34:                                         ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc35, !dbg !5238

for.inc35:                                        ; preds = %if.end34
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5318
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 3, !dbg !5319
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5319
  store %struct.cgraph_node* %31, %struct.cgraph_node** %node, align 8, !dbg !5320
  br label %for.cond, !dbg !5321, !llvm.loop !5322

for.end36:                                        ; preds = %for.cond
  ret void, !dbg !5324
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5325 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5332
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5333
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5331
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5334
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5334
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5334
  %bf.load = load i64, i64* %2, align 8, !dbg !5334
  %bf.clear = and i64 %bf.load, 65535, !dbg !5334
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5334
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5336
  br i1 %cmp, label %if.then, label %if.end, !dbg !5337

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5338
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5338
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5338
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5338
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5338
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5339
  br label %return, !dbg !5339

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5340
  br label %return, !dbg !5340

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5341
  ret %union.tree_node* %5, !dbg !5341
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5342 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5343, metadata !DIExpression()), !dbg !5344
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5345
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5346
  ret %union.tree_node* %call, !dbg !5347
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_alloc_of_struct(%union.gimple_statement_d* %stmt, i32* %i_p) #0 !dbg !5348 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %i_p.addr = alloca i32*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %final_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5352, metadata !DIExpression()), !dbg !5353
  store i32* %i_p, i32** %i_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %i_p.addr, metadata !5354, metadata !DIExpression()), !dbg !5355
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5356, metadata !DIExpression()), !dbg !5357
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5358, metadata !DIExpression()), !dbg !5359
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %final_stmt, metadata !5360, metadata !DIExpression()), !dbg !5361
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5362
  %call = call %union.gimple_statement_d* @get_final_alloc_stmt(%union.gimple_statement_d* %0), !dbg !5363
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %final_stmt, align 8, !dbg !5364
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !5365
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !5365
  br i1 %tobool, label %if.end, label %if.then, !dbg !5367

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5368
  br label %return, !dbg !5368

if.end:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !5369
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !5371
  %cmp = icmp ne i32 %call1, 6, !dbg !5372
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !5373

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5374
  br label %return, !dbg !5374

if.end3:                                          ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !5375
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !5376
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !5377
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5378
  %call5 = call %union.tree_node* @get_type_of_var(%union.tree_node* %4), !dbg !5379
  store %union.tree_node* %call5, %union.tree_node** %type, align 8, !dbg !5380
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5381
  %tobool6 = icmp ne %union.tree_node* %5, null, !dbg !5381
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5383

if.then7:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !5384
  br label %return, !dbg !5384

if.end8:                                          ; preds = %if.end3
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5385
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5385
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5385
  %bf.load = load i64, i64* %7, align 8, !dbg !5385
  %bf.clear = and i64 %bf.load, 65535, !dbg !5385
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5385
  %cmp9 = icmp eq i32 %bf.cast, 10, !dbg !5385
  br i1 %cmp9, label %lor.lhs.false15, label %lor.lhs.false, !dbg !5385

lor.lhs.false:                                    ; preds = %if.end8
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5385
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5385
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5385
  %bf.load11 = load i64, i64* %9, align 8, !dbg !5385
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !5385
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !5385
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !5385
  br i1 %cmp14, label %lor.lhs.false15, label %if.then22, !dbg !5387

lor.lhs.false15:                                  ; preds = %lor.lhs.false, %if.end8
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5388
  %call16 = call %union.tree_node* @strip_type(%union.tree_node* %10), !dbg !5388
  %base17 = bitcast %union.tree_node* %call16 to %struct.tree_base*, !dbg !5388
  %11 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5388
  %bf.load18 = load i64, i64* %11, align 8, !dbg !5388
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !5388
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !5388
  %cmp21 = icmp ne i32 %bf.cast20, 16, !dbg !5389
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !5390

if.then22:                                        ; preds = %lor.lhs.false15, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !5391
  br label %return, !dbg !5391

if.end23:                                         ; preds = %lor.lhs.false15
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5392
  %call24 = call %union.tree_node* @strip_type(%union.tree_node* %12), !dbg !5393
  %call25 = call i32 @find_structure(%union.tree_node* %call24), !dbg !5394
  %13 = load i32*, i32** %i_p.addr, align 8, !dbg !5395
  store i32 %call25, i32* %13, align 4, !dbg !5396
  %14 = load i32*, i32** %i_p.addr, align 8, !dbg !5397
  %15 = load i32, i32* %14, align 4, !dbg !5399
  %16 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5400
  %tobool26 = icmp ne %struct.VEC_structure_heap* %16, null, !dbg !5400
  br i1 %tobool26, label %cond.true, label %cond.false, !dbg !5400

cond.true:                                        ; preds = %if.end23
  %17 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5400
  %base27 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %17, i32 0, i32 0, !dbg !5400
  br label %cond.end, !dbg !5400

cond.false:                                       ; preds = %if.end23
  br label %cond.end, !dbg !5400

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base27, %cond.true ], [ null, %cond.false ], !dbg !5400
  %call28 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !5400
  %cmp29 = icmp eq i32 %15, %call28, !dbg !5401
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !5402

if.then30:                                        ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !5403
  br label %return, !dbg !5403

if.end31:                                         ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5404
  br label %return, !dbg !5404

return:                                           ; preds = %if.end31, %if.then30, %if.then22, %if.then7, %if.then2, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !5405
  ret i8 %18, !dbg !5405
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_alloc_site(%union.tree_node* %fn_decl, %union.gimple_statement_d* %stmt, %struct.data_structure* %str) #0 !dbg !5406 {
entry:
  %fn_decl.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %fallocs = alloca %struct.func_alloc_sites*, align 8
  %m_call = alloca %struct.alloc_site, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !5409, metadata !DIExpression()), !dbg !5410
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5411, metadata !DIExpression()), !dbg !5412
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %fallocs, metadata !5415, metadata !DIExpression()), !dbg !5416
  store %struct.func_alloc_sites* null, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5416
  call void @llvm.dbg.declare(metadata %struct.alloc_site* %m_call, metadata !5417, metadata !DIExpression()), !dbg !5418
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5419
  %stmt1 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %m_call, i32 0, i32 0, !dbg !5420
  store %union.gimple_statement_d* %0, %union.gimple_statement_d** %stmt1, align 8, !dbg !5421
  %1 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !5422
  %str2 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %m_call, i32 0, i32 1, !dbg !5423
  store %struct.data_structure* %1, %struct.data_structure** %str2, align 8, !dbg !5424
  %2 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !5425
  %3 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !5426
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !5426
  %5 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !5427
  %6 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !5428
  %7 = bitcast %union.tree_node* %6 to i8*, !dbg !5428
  %call = call i32 %5(i8* %7), !dbg !5427
  %call3 = call i8* @htab_find_with_hash(%struct.htab* %2, i8* %4, i32 %call), !dbg !5429
  %8 = bitcast i8* %call3 to %struct.func_alloc_sites*, !dbg !5430
  store %struct.func_alloc_sites* %8, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5431
  %9 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5432
  %tobool = icmp ne %struct.func_alloc_sites* %9, null, !dbg !5432
  br i1 %tobool, label %if.end, label %if.then, !dbg !5434

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5435, metadata !DIExpression()), !dbg !5437
  %call4 = call i8* @xmalloc(i64 16), !dbg !5438
  %10 = bitcast i8* %call4 to %struct.func_alloc_sites*, !dbg !5438
  store %struct.func_alloc_sites* %10, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5439
  %11 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !5440
  %12 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5441
  %func = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %12, i32 0, i32 0, !dbg !5442
  store %union.tree_node* %11, %union.tree_node** %func, align 8, !dbg !5443
  %call5 = call %struct.VEC_alloc_site_t_heap* @VEC_alloc_site_t_heap_alloc(i32 1), !dbg !5444
  %13 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5445
  %allocs = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %13, i32 0, i32 1, !dbg !5446
  store %struct.VEC_alloc_site_t_heap* %call5, %struct.VEC_alloc_site_t_heap** %allocs, align 8, !dbg !5447
  %14 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !5448
  %15 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !5449
  %16 = bitcast %union.tree_node* %15 to i8*, !dbg !5449
  %17 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !5450
  %18 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !5451
  %19 = bitcast %union.tree_node* %18 to i8*, !dbg !5451
  %call6 = call i32 %17(i8* %19), !dbg !5450
  %call7 = call i8** @htab_find_slot_with_hash(%struct.htab* %14, i8* %16, i32 %call6, i32 1), !dbg !5452
  store i8** %call7, i8*** %slot, align 8, !dbg !5453
  %20 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5454
  %21 = bitcast %struct.func_alloc_sites* %20 to i8*, !dbg !5454
  %22 = load i8**, i8*** %slot, align 8, !dbg !5455
  store i8* %21, i8** %22, align 8, !dbg !5456
  br label %if.end, !dbg !5457

if.end:                                           ; preds = %if.then, %entry
  %23 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !5458
  %allocs8 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %23, i32 0, i32 1, !dbg !5458
  %call9 = call %struct.alloc_site* @VEC_alloc_site_t_heap_safe_push(%struct.VEC_alloc_site_t_heap** %allocs8, %struct.alloc_site* %m_call), !dbg !5458
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5459
  %tobool10 = icmp ne %struct._IO_FILE* %24, null, !dbg !5459
  br i1 %tobool10, label %if.then11, label %if.end14, !dbg !5461

if.then11:                                        ; preds = %if.end
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5462
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)), !dbg !5464
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5465
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5466
  call void @print_gimple_stmt(%struct._IO_FILE* %26, %union.gimple_statement_d* %27, i32 0, i32 0), !dbg !5467
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5468
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)), !dbg !5469
  br label %if.end14, !dbg !5470

if.end14:                                         ; preds = %if.then11, %if.end
  ret void, !dbg !5471
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !5472 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5473, metadata !DIExpression()), !dbg !5474
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5475
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5476
  ret %union.tree_node* %call, !dbg !5477
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5478 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5481, metadata !DIExpression()), !dbg !5482
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5485
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5487
  %tobool = icmp ne i8 %call, 0, !dbg !5487
  br i1 %tobool, label %if.then, label %if.else, !dbg !5488

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5489
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5491
  %2 = load i32, i32* %i.addr, align 4, !dbg !5492
  %idxprom = zext i32 %2 to i64, !dbg !5491
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5491
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5491
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5493
  br label %return, !dbg !5493

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5494
  br label %return, !dbg !5494

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5495
  ret %union.tree_node* %4, !dbg !5495
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5496 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5497, metadata !DIExpression()), !dbg !5498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5499
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5500
  %cmp = icmp uge i32 %call, 1, !dbg !5501
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5502

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5503
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5504
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5505
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5506
  %land.ext = zext i1 %2 to i32, !dbg !5502
  %conv = trunc i32 %land.ext to i8, !dbg !5500
  ret i8 %conv, !dbg !5507
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5508 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5511, metadata !DIExpression()), !dbg !5512
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5513, metadata !DIExpression()), !dbg !5514
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5515
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5516
  %idxprom = zext i32 %call to i64, !dbg !5517
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5517
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5517
  store i64 %1, i64* %off, align 8, !dbg !5518
  %2 = load i64, i64* %off, align 8, !dbg !5519
  %cmp = icmp ne i64 %2, 0, !dbg !5519
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5519

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5519
  br label %cond.end, !dbg !5519

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5519

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5519
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5520
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5521
  %5 = load i64, i64* %off, align 8, !dbg !5522
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5523
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5524
  ret %union.tree_node** %6, !dbg !5525
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5526 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5529, metadata !DIExpression()), !dbg !5530
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5531
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5532
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5533
  ret i32 %call1, !dbg !5534
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5535 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5538, metadata !DIExpression()), !dbg !5539
  %0 = load i32, i32* %code.addr, align 4, !dbg !5540
  %idxprom = zext i32 %0 to i64, !dbg !5541
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5541
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5541
  ret i32 %1, !dbg !5542
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @get_final_alloc_stmt(%union.gimple_statement_d* %alloc_stmt) #0 !dbg !5543 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %alloc_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %final_stmt = alloca %union.gimple_statement_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %alloc_res = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %alloc_stmt, %union.gimple_statement_d** %alloc_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %alloc_stmt.addr, metadata !5546, metadata !DIExpression()), !dbg !5547
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %final_stmt, metadata !5548, metadata !DIExpression()), !dbg !5549
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5550, metadata !DIExpression()), !dbg !5551
  call void @llvm.dbg.declare(metadata %union.tree_node** %alloc_res, metadata !5552, metadata !DIExpression()), !dbg !5553
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %alloc_stmt.addr, align 8, !dbg !5554
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !5554
  br i1 %tobool, label %if.end, label %if.then, !dbg !5556

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5557
  br label %return, !dbg !5557

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %alloc_stmt.addr, align 8, !dbg !5558
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !5560
  %tobool1 = icmp ne i8 %call, 0, !dbg !5560
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !5561

if.then2:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5562
  br label %return, !dbg !5562

if.end3:                                          ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %alloc_stmt.addr, align 8, !dbg !5563
  %call4 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %2), !dbg !5564
  store %union.tree_node* %call4, %union.tree_node** %alloc_res, align 8, !dbg !5565
  %3 = load %union.tree_node*, %union.tree_node** %alloc_res, align 8, !dbg !5566
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5566
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5566
  %bf.load = load i64, i64* %4, align 8, !dbg !5566
  %bf.clear = and i64 %bf.load, 65535, !dbg !5566
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5566
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5568
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !5569

if.then5:                                         ; preds = %if.end3
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5570
  br label %return, !dbg !5570

if.end6:                                          ; preds = %if.end3
  %5 = load %union.tree_node*, %union.tree_node** %alloc_res, align 8, !dbg !5571
  %call7 = call zeroext i8 @single_imm_use(%union.tree_node* %5, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %final_stmt), !dbg !5573
  %tobool8 = icmp ne i8 %call7, 0, !dbg !5573
  br i1 %tobool8, label %if.else, label %if.then9, !dbg !5574

if.then9:                                         ; preds = %if.end6
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5575
  br label %return, !dbg !5575

if.else:                                          ; preds = %if.end6
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !5576
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %retval, align 8, !dbg !5577
  br label %return, !dbg !5577

return:                                           ; preds = %if.else, %if.then9, %if.then5, %if.then2, %if.then
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5578
  ret %union.gimple_statement_d* %7, !dbg !5578
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5579 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5582
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5583
  ret %union.tree_node* %call, !dbg !5584
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_imm_use(%union.tree_node* %var, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #0 !dbg !5585 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5590, metadata !DIExpression()), !dbg !5591
  store %struct.ssa_use_operand_d** %use_p, %struct.ssa_use_operand_d*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d*** %use_p.addr, metadata !5592, metadata !DIExpression()), !dbg !5593
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !5594, metadata !DIExpression()), !dbg !5595
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !5596, metadata !DIExpression()), !dbg !5600
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5601
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5601
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5601
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5600
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5602
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5604
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5605
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5605
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5606
  br i1 %cmp, label %if.then, label %if.end, !dbg !5607

if.then:                                          ; preds = %entry
  br label %return_false, !dbg !5608

return_false:                                     ; preds = %if.then14, %if.else, %if.then
  call void @llvm.dbg.label(metadata !5609), !dbg !5611
  %4 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !5612
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %4, align 8, !dbg !5613
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5614
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %5, align 8, !dbg !5615
  store i8 0, i8* %retval, align 1, !dbg !5616
  br label %return, !dbg !5616

if.end:                                           ; preds = %entry
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5617
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5619
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 1, !dbg !5620
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !5620
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !5621
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5621
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %6, %9, !dbg !5622
  br i1 %cmp3, label %if.then4, label %if.end12, !dbg !5623

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5624
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 1, !dbg !5624
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !5624
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !5624
  %stmt6 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5624
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !5624
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !5627
  %tobool = icmp ne i8 %call, 0, !dbg !5627
  br i1 %tobool, label %if.else, label %if.then7, !dbg !5628

if.then7:                                         ; preds = %if.then4
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5629
  %next8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %13, i32 0, i32 1, !dbg !5631
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next8, align 8, !dbg !5631
  %15 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !5632
  store %struct.ssa_use_operand_d* %14, %struct.ssa_use_operand_d** %15, align 8, !dbg !5633
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5634
  %next9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 1, !dbg !5635
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next9, align 8, !dbg !5635
  %loc10 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %17, i32 0, i32 2, !dbg !5636
  %stmt11 = bitcast %union.anon* %loc10 to %union.gimple_statement_d**, !dbg !5637
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt11, align 8, !dbg !5637
  %19 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5638
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %19, align 8, !dbg !5639
  store i8 1, i8* %retval, align 1, !dbg !5640
  br label %return, !dbg !5640

if.else:                                          ; preds = %if.then4
  br label %return_false, !dbg !5641

if.end12:                                         ; preds = %if.end
  %20 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5642
  %tobool13 = icmp ne i32 %20, 0, !dbg !5642
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !5644

if.then14:                                        ; preds = %if.end12
  br label %return_false, !dbg !5645

if.end15:                                         ; preds = %if.end12
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5646
  %22 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !5647
  %23 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5648
  %call16 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %21, %struct.ssa_use_operand_d** %22, %union.gimple_statement_d** %23), !dbg !5649
  store i8 %call16, i8* %retval, align 1, !dbg !5650
  br label %return, !dbg !5650

return:                                           ; preds = %if.end15, %if.then7, %return_false
  %24 = load i8, i8* %retval, align 1, !dbg !5651
  ret i8 %24, !dbg !5651
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5652 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5653, metadata !DIExpression()), !dbg !5654
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5655
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5656
  %cmp = icmp eq i32 %call, 2, !dbg !5657
  %conv = zext i1 %cmp to i32, !dbg !5657
  %conv1 = trunc i32 %conv to i8, !dbg !5656
  ret i8 %conv1, !dbg !5658
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_alloc_site_t_heap* @VEC_alloc_site_t_heap_alloc(i32 %alloc_) #0 !dbg !5659 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5662, metadata !DIExpression()), !dbg !5663
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5663
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !5663
  %1 = bitcast i8* %call to %struct.VEC_alloc_site_t_heap*, !dbg !5663
  ret %struct.VEC_alloc_site_t_heap* %1, !dbg !5663
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.alloc_site* @VEC_alloc_site_t_heap_safe_push(%struct.VEC_alloc_site_t_heap** %vec_, %struct.alloc_site* %obj_) #0 !dbg !5664 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_heap**, align 8
  %obj_.addr = alloca %struct.alloc_site*, align 8
  store %struct.VEC_alloc_site_t_heap** %vec_, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_heap*** %vec_.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  store %struct.alloc_site* %obj_, %struct.alloc_site** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %obj_.addr, metadata !5672, metadata !DIExpression()), !dbg !5671
  %0 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5671
  %call = call i32 @VEC_alloc_site_t_heap_reserve(%struct.VEC_alloc_site_t_heap** %0, i32 1), !dbg !5671
  %1 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5671
  %2 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %1, align 8, !dbg !5671
  %tobool = icmp ne %struct.VEC_alloc_site_t_heap* %2, null, !dbg !5671
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5671

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5671
  %4 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %3, align 8, !dbg !5671
  %base = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %4, i32 0, i32 0, !dbg !5671
  br label %cond.end, !dbg !5671

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5671

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alloc_site_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5671
  %5 = load %struct.alloc_site*, %struct.alloc_site** %obj_.addr, align 8, !dbg !5671
  %call1 = call %struct.alloc_site* @VEC_alloc_site_t_base_quick_push(%struct.VEC_alloc_site_t_base* %cond, %struct.alloc_site* %5), !dbg !5671
  ret %struct.alloc_site* %call1, !dbg !5671
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alloc_site_t_heap_reserve(%struct.VEC_alloc_site_t_heap** %vec_, i32 %alloc_) #0 !dbg !5673 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_alloc_site_t_heap** %vec_, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_heap*** %vec_.addr, metadata !5676, metadata !DIExpression()), !dbg !5677
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5678, metadata !DIExpression()), !dbg !5677
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5679, metadata !DIExpression()), !dbg !5677
  %0 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5677
  %1 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %0, align 8, !dbg !5677
  %tobool = icmp ne %struct.VEC_alloc_site_t_heap* %1, null, !dbg !5677
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5677

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5677
  %3 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %2, align 8, !dbg !5677
  %base = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %3, i32 0, i32 0, !dbg !5677
  br label %cond.end, !dbg !5677

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5677

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alloc_site_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5677
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5677
  %call = call i32 @VEC_alloc_site_t_base_space(%struct.VEC_alloc_site_t_base* %cond, i32 %4), !dbg !5677
  %tobool1 = icmp ne i32 %call, 0, !dbg !5677
  %lnot = xor i1 %tobool1, true, !dbg !5677
  %lnot.ext = zext i1 %lnot to i32, !dbg !5677
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5677
  %5 = load i32, i32* %extend, align 4, !dbg !5680
  %tobool2 = icmp ne i32 %5, 0, !dbg !5680
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5677

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5680
  %7 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %6, align 8, !dbg !5680
  %8 = bitcast %struct.VEC_alloc_site_t_heap* %7 to i8*, !dbg !5680
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5680
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !5680
  %10 = bitcast i8* %call3 to %struct.VEC_alloc_site_t_heap*, !dbg !5680
  %11 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !5680
  store %struct.VEC_alloc_site_t_heap* %10, %struct.VEC_alloc_site_t_heap** %11, align 8, !dbg !5680
  br label %if.end, !dbg !5680

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5677
  ret i32 %12, !dbg !5677
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alloc_site* @VEC_alloc_site_t_base_quick_push(%struct.VEC_alloc_site_t_base* %vec_, %struct.alloc_site* %obj_) #0 !dbg !5682 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_base*, align 8
  %obj_.addr = alloca %struct.alloc_site*, align 8
  %slot_ = alloca %struct.alloc_site*, align 8
  store %struct.VEC_alloc_site_t_base* %vec_, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_base** %vec_.addr, metadata !5685, metadata !DIExpression()), !dbg !5686
  store %struct.alloc_site* %obj_, %struct.alloc_site** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %obj_.addr, metadata !5687, metadata !DIExpression()), !dbg !5686
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %slot_, metadata !5688, metadata !DIExpression()), !dbg !5686
  %0 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5686
  %num = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %0, i32 0, i32 0, !dbg !5686
  %1 = load i32, i32* %num, align 8, !dbg !5686
  %2 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5686
  %alloc = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %2, i32 0, i32 1, !dbg !5686
  %3 = load i32, i32* %alloc, align 4, !dbg !5686
  %cmp = icmp ult i32 %1, %3, !dbg !5686
  %conv = zext i1 %cmp to i32, !dbg !5686
  %4 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5686
  %vec = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %4, i32 0, i32 2, !dbg !5686
  %5 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5686
  %num1 = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %5, i32 0, i32 0, !dbg !5686
  %6 = load i32, i32* %num1, align 8, !dbg !5686
  %inc = add i32 %6, 1, !dbg !5686
  store i32 %inc, i32* %num1, align 8, !dbg !5686
  %idxprom = zext i32 %6 to i64, !dbg !5686
  %arrayidx = getelementptr inbounds [1 x %struct.alloc_site], [1 x %struct.alloc_site]* %vec, i64 0, i64 %idxprom, !dbg !5686
  store %struct.alloc_site* %arrayidx, %struct.alloc_site** %slot_, align 8, !dbg !5686
  %7 = load %struct.alloc_site*, %struct.alloc_site** %obj_.addr, align 8, !dbg !5689
  %tobool = icmp ne %struct.alloc_site* %7, null, !dbg !5689
  br i1 %tobool, label %if.then, label %if.end, !dbg !5686

if.then:                                          ; preds = %entry
  %8 = load %struct.alloc_site*, %struct.alloc_site** %slot_, align 8, !dbg !5689
  %9 = load %struct.alloc_site*, %struct.alloc_site** %obj_.addr, align 8, !dbg !5689
  %10 = bitcast %struct.alloc_site* %8 to i8*, !dbg !5689
  %11 = bitcast %struct.alloc_site* %9 to i8*, !dbg !5689
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !5689
  br label %if.end, !dbg !5689

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.alloc_site*, %struct.alloc_site** %slot_, align 8, !dbg !5686
  ret %struct.alloc_site* %12, !dbg !5686
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alloc_site_t_base_space(%struct.VEC_alloc_site_t_base* %vec_, i32 %alloc_) #0 !dbg !5691 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_alloc_site_t_base* %vec_, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_base** %vec_.addr, metadata !5694, metadata !DIExpression()), !dbg !5695
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5696, metadata !DIExpression()), !dbg !5695
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5695
  %cmp = icmp sge i32 %0, 0, !dbg !5695
  %conv = zext i1 %cmp to i32, !dbg !5695
  %1 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5695
  %tobool = icmp ne %struct.VEC_alloc_site_t_base* %1, null, !dbg !5695
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5695

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5695
  %alloc = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %2, i32 0, i32 1, !dbg !5695
  %3 = load i32, i32* %alloc, align 4, !dbg !5695
  %4 = load %struct.VEC_alloc_site_t_base*, %struct.VEC_alloc_site_t_base** %vec_.addr, align 8, !dbg !5695
  %num = getelementptr inbounds %struct.VEC_alloc_site_t_base, %struct.VEC_alloc_site_t_base* %4, i32 0, i32 0, !dbg !5695
  %5 = load i32, i32* %num, align 8, !dbg !5695
  %sub = sub i32 %3, %5, !dbg !5695
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5695
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5695
  %conv2 = zext i1 %cmp1 to i32, !dbg !5695
  br label %cond.end, !dbg !5695

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5695
  %tobool3 = icmp ne i32 %7, 0, !dbg !5695
  %lnot = xor i1 %tobool3, true, !dbg !5695
  %lnot.ext = zext i1 %lnot to i32, !dbg !5695
  br label %cond.end, !dbg !5695

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5695
  ret i32 %cond, !dbg !5695
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_accesses_in_func(%struct.function* %fn) #0 !dbg !5697 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5700, metadata !DIExpression()), !dbg !5701
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5702, metadata !DIExpression()), !dbg !5703
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5704
  %tobool = icmp ne %struct.function* %0, null, !dbg !5704
  br i1 %tobool, label %if.end, label %if.then, !dbg !5706

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !5707

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5708
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1, !dbg !5708
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5708
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !5708
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5708
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !5708
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5708
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !5708
  br label %for.cond, !dbg !5708

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5710
  %6 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5710
  %cfg1 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1, !dbg !5710
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg1, align 8, !dbg !5710
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !5710
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5710
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !5710
  br i1 %cmp, label %for.body, label %for.end, !dbg !5708

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5712
  call void @collect_accesses_in_bb(%struct.basic_block_def* %9), !dbg !5713
  br label %for.inc, !dbg !5713

for.inc:                                          ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5710
  %next_bb2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !5710
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb2, align 8, !dbg !5710
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !5710
  br label %for.cond, !dbg !5710, !llvm.loop !5714

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5716
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_alloc_and_field_accs(%struct.cgraph_node* %node) #0 !dbg !5717 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5718, metadata !DIExpression()), !dbg !5719
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5720, metadata !DIExpression()), !dbg !5721
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5722, metadata !DIExpression()), !dbg !5723
  store i32 0, i32* %i, align 4, !dbg !5724
  br label %for.cond, !dbg !5726

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5727
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !5727
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5727

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5727
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !5727
  br label %cond.end, !dbg !5727

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5727
  %2 = load i32, i32* %i, align 4, !dbg !5727
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !5727
  %tobool1 = icmp ne i32 %call, 0, !dbg !5729
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5729

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5730
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5731
  call void @exclude_alloc_and_field_accs_1(%struct.data_structure* %3, %struct.cgraph_node* %4), !dbg !5732
  br label %for.inc, !dbg !5732

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !5733
  %inc = add i32 %5, 1, !dbg !5733
  store i32 %inc, i32* %i, align 4, !dbg !5733
  br label %for.cond, !dbg !5734, !llvm.loop !5735

for.end:                                          ; preds = %cond.end
  ret void, !dbg !5737
}

; Function Attrs: noinline nounwind uwtable
define internal void @check_cond_exprs() #0 !dbg !5738 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  %safe_p = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5739, metadata !DIExpression()), !dbg !5740
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5741, metadata !DIExpression()), !dbg !5742
  store i32 0, i32* %i, align 4, !dbg !5743
  br label %while.cond, !dbg !5744

while.cond:                                       ; preds = %if.end6, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5745
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !5745
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5745

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5745
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !5745
  br label %cond.end, !dbg !5745

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5745

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5745
  %2 = load i32, i32* %i, align 4, !dbg !5745
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !5745
  %tobool1 = icmp ne i32 %call, 0, !dbg !5744
  br i1 %tobool1, label %while.body, label %while.end, !dbg !5744

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %safe_p, metadata !5746, metadata !DIExpression()), !dbg !5748
  store i8 1, i8* %safe_p, align 1, !dbg !5748
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5749
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 4, !dbg !5751
  %4 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !5751
  %tobool2 = icmp ne %struct.htab* %4, null, !dbg !5749
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5752

if.then:                                          ; preds = %while.body
  %5 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5753
  %accs3 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 4, !dbg !5754
  %6 = load %struct.htab*, %struct.htab** %accs3, align 8, !dbg !5754
  call void @htab_traverse(%struct.htab* %6, i32 (i8**, i8*)* @safe_cond_expr_check, i8* %safe_p), !dbg !5755
  br label %if.end, !dbg !5755

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i8, i8* %safe_p, align 1, !dbg !5756
  %tobool4 = icmp ne i8 %7, 0, !dbg !5756
  br i1 %tobool4, label %if.else, label %if.then5, !dbg !5758

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !5759
  call void @remove_structure(i32 %8), !dbg !5760
  br label %if.end6, !dbg !5760

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !5761
  %inc = add i32 %9, 1, !dbg !5761
  store i32 %inc, i32* %i, align 4, !dbg !5761
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  br label %while.cond, !dbg !5744, !llvm.loop !5762

while.end:                                        ; preds = %cond.end
  ret void, !dbg !5764
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_accesses() #0 !dbg !5765 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5766, metadata !DIExpression()), !dbg !5767
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5768, metadata !DIExpression()), !dbg !5769
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5770
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5770
  br i1 %tobool, label %if.end, label %if.then, !dbg !5772

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !5773

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !5774
  br label %for.cond, !dbg !5776

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5777
  %tobool1 = icmp ne %struct.VEC_structure_heap* %1, null, !dbg !5777
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5777

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5777
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %2, i32 0, i32 0, !dbg !5777
  br label %cond.end, !dbg !5777

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5777

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5777
  %3 = load i32, i32* %i, align 4, !dbg !5777
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %3, %struct.data_structure** %str), !dbg !5777
  %tobool2 = icmp ne i32 %call, 0, !dbg !5779
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5779

for.body:                                         ; preds = %cond.end
  %4 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5780
  call void @dump_accs(%struct.data_structure* %4), !dbg !5781
  br label %for.inc, !dbg !5781

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !5782
  %inc = add i32 %5, 1, !dbg !5782
  store i32 %inc, i32* %i, align 4, !dbg !5782
  br label %for.cond, !dbg !5783, !llvm.loop !5784

for.end:                                          ; preds = %if.then, %cond.end
  ret void, !dbg !5786
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_accesses_in_bb(%struct.basic_block_def* %bb) #0 !dbg !5787 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5790, metadata !DIExpression()), !dbg !5791
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5792, metadata !DIExpression()), !dbg !5793
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !5794, metadata !DIExpression()), !dbg !5795
  %0 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5796
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !5796
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5797
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !5799
  %2 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5799
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5799
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !5799
  br label %for.cond, !dbg !5800

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5801
  %tobool = icmp ne i8 %call, 0, !dbg !5803
  %lnot = xor i1 %tobool, true, !dbg !5803
  br i1 %lnot, label %for.body, label %for.end, !dbg !5804

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5805, metadata !DIExpression()), !dbg !5807
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5808
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !5807
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5809
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !5811
  %cmp = icmp eq i32 %call2, 7, !dbg !5812
  br i1 %cmp, label %if.then, label %if.end, !dbg !5813

if.then:                                          ; preds = %for.body
  call void @free_structures(), !dbg !5814
  br label %for.end, !dbg !5816

if.end:                                           ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5817
  %6 = bitcast %union.gimple_statement_d* %5 to i8*, !dbg !5818
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !5819
  store i8* %6, i8** %info, align 8, !dbg !5820
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5821
  %call3 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %7, %union.tree_node* (%union.tree_node**, i32*, i8*)* @get_stmt_accesses, %struct.walk_stmt_info* %wi), !dbg !5822
  br label %for.inc, !dbg !5823

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5824
  br label %for.cond, !dbg !5825, !llvm.loop !5826

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5828
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5829 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5832, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5836, metadata !DIExpression()), !dbg !5837
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5838
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5839
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5840
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5841
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5842
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5843
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5844
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5845
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5846
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5847
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5848
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5849
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5850
  ret void, !dbg !5851
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5852 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5855, metadata !DIExpression()), !dbg !5856
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5857
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5857
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5858
  %conv = zext i1 %cmp to i32, !dbg !5858
  %conv1 = trunc i32 %conv to i8, !dbg !5859
  ret i8 %conv1, !dbg !5860
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5861 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5864, metadata !DIExpression()), !dbg !5865
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5866
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5866
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5867
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5867
  ret %union.gimple_statement_d* %1, !dbg !5868
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_structures() #0 !dbg !5869 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5870, metadata !DIExpression()), !dbg !5871
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5872, metadata !DIExpression()), !dbg !5873
  store i32 0, i32* %i, align 4, !dbg !5874
  br label %for.cond, !dbg !5876

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5877
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !5877
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5877

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5877
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !5877
  br label %cond.end, !dbg !5877

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5877

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5877
  %2 = load i32, i32* %i, align 4, !dbg !5877
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !5877
  %tobool1 = icmp ne i32 %call, 0, !dbg !5879
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5879

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5880
  call void @free_data_struct(%struct.data_structure* %3), !dbg !5881
  br label %for.inc, !dbg !5881

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !5882
  %inc = add i32 %4, 1, !dbg !5882
  store i32 %inc, i32* %i, align 4, !dbg !5882
  br label %for.cond, !dbg !5883, !llvm.loop !5884

for.end:                                          ; preds = %cond.end
  call void @VEC_structure_heap_free(%struct.VEC_structure_heap** @structures), !dbg !5886
  store %struct.VEC_structure_heap* null, %struct.VEC_structure_heap** @structures, align 8, !dbg !5887
  ret void, !dbg !5888
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_stmt_accesses(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !5889 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %t = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %str = alloca %struct.data_structure*, align 8
  %ref = alloca %union.tree_node*, align 8
  %field_decl = alloca %union.tree_node*, align 8
  %type54 = alloca %union.tree_node*, align 8
  %i58 = alloca i32, align 4
  %str69 = alloca %struct.data_structure*, align 8
  %field = alloca %struct.field_entry*, align 8
  %acc = alloca %struct.field_access_site*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %cond109 = alloca %union.tree_node*, align 8
  %i113 = alloca i32, align 4
  %t121 = alloca %union.tree_node*, align 8
  %i128 = alloca i32, align 4
  %str151 = alloca %struct.data_structure*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5893, metadata !DIExpression()), !dbg !5894
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !5895, metadata !DIExpression()), !dbg !5896
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5897, metadata !DIExpression()), !dbg !5898
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !5899, metadata !DIExpression()), !dbg !5900
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5901
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !5902
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !5900
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5903, metadata !DIExpression()), !dbg !5904
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !5905
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !5906
  %3 = load i8*, i8** %info, align 8, !dbg !5906
  %4 = bitcast i8* %3 to %union.gimple_statement_d*, !dbg !5907
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !5904
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5908, metadata !DIExpression()), !dbg !5909
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5910
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !5911
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !5909
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5912
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !5912
  br i1 %tobool, label %if.end, label %if.then, !dbg !5914

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5915
  br label %return, !dbg !5915

if.end:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5916
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5916
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !5916
  %bf.load = load i64, i64* %9, align 8, !dbg !5916
  %bf.clear = and i64 %bf.load, 65535, !dbg !5916
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5916
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb25
    i32 56, label %sw.bb108
    i32 32, label %sw.bb127
    i32 141, label %sw.bb127
  ], !dbg !5917

sw.bb:                                            ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5918, metadata !DIExpression()), !dbg !5921
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5922
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !5922
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5922
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5922
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5922
  store %union.tree_node* %11, %union.tree_node** %var, align 8, !dbg !5921
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5923, metadata !DIExpression()), !dbg !5924
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5925
  %call = call %union.tree_node* @get_type_of_var(%union.tree_node* %12), !dbg !5925
  %call1 = call %union.tree_node* @strip_type(%union.tree_node* %call), !dbg !5925
  %type2 = bitcast %union.tree_node* %call1 to %struct.tree_type*, !dbg !5925
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !5925
  %13 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5925
  store %union.tree_node* %13, %union.tree_node** %type, align 8, !dbg !5924
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5926, metadata !DIExpression()), !dbg !5927
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5928
  %call3 = call i32 @find_structure(%union.tree_node* %14), !dbg !5929
  store i32 %call3, i32* %i, align 4, !dbg !5927
  %15 = load i32, i32* %i, align 4, !dbg !5930
  %16 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5932
  %tobool4 = icmp ne %struct.VEC_structure_heap* %16, null, !dbg !5932
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !5932

cond.true:                                        ; preds = %sw.bb
  %17 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5932
  %base5 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %17, i32 0, i32 0, !dbg !5932
  br label %cond.end, !dbg !5932

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !5932

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base5, %cond.true ], [ null, %cond.false ], !dbg !5932
  %call6 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !5932
  %cmp = icmp ne i32 %15, %call6, !dbg !5933
  br i1 %cmp, label %if.then7, label %if.end24, !dbg !5934

if.then7:                                         ; preds = %cond.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5935
  %call8 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %18), !dbg !5938
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5938
  br i1 %tobool9, label %if.then10, label %if.end18, !dbg !5939

if.then10:                                        ; preds = %if.then7
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !5940, metadata !DIExpression()), !dbg !5942
  %19 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5943
  %tobool11 = icmp ne %struct.VEC_structure_heap* %19, null, !dbg !5943
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !5943

cond.true12:                                      ; preds = %if.then10
  %20 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5943
  %base13 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %20, i32 0, i32 0, !dbg !5943
  br label %cond.end15, !dbg !5943

cond.false14:                                     ; preds = %if.then10
  br label %cond.end15, !dbg !5943

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_structure_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !5943
  %21 = load i32, i32* %i, align 4, !dbg !5943
  %call17 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond16, i32 %21), !dbg !5943
  store %struct.data_structure* %call17, %struct.data_structure** %str, align 8, !dbg !5944
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5945
  %23 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !5946
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %23, i32 0, i32 4, !dbg !5947
  %24 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !5947
  call void @add_access_to_acc_sites(%union.gimple_statement_d* %22, %union.tree_node* null, %struct.htab* %24), !dbg !5948
  %25 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5949
  store i32 0, i32* %25, align 4, !dbg !5950
  br label %sw.epilog, !dbg !5951

if.end18:                                         ; preds = %if.then7
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5952
  %tobool19 = icmp ne %struct._IO_FILE* %26, null, !dbg !5952
  br i1 %tobool19, label %if.then20, label %if.end23, !dbg !5954

if.then20:                                        ; preds = %if.end18
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5955
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i64 0, i64 0)), !dbg !5957
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5958
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5959
  call void @print_generic_expr(%struct._IO_FILE* %28, %union.tree_node* %29, i32 0), !dbg !5960
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5961
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i64 0, i64 0)), !dbg !5962
  br label %if.end23, !dbg !5963

if.end23:                                         ; preds = %if.then20, %if.end18
  %31 = load i32, i32* %i, align 4, !dbg !5964
  call void @remove_structure(i32 %31), !dbg !5965
  br label %if.end24, !dbg !5966

if.end24:                                         ; preds = %if.end23, %cond.end
  br label %sw.epilog, !dbg !5967

sw.bb25:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !5968, metadata !DIExpression()), !dbg !5970
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5971
  %exp26 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !5971
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !5971
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 0, !dbg !5971
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !5971
  store %union.tree_node* %33, %union.tree_node** %ref, align 8, !dbg !5970
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_decl, metadata !5972, metadata !DIExpression()), !dbg !5973
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5974
  %exp29 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !5974
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !5974
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 1, !dbg !5974
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !5974
  store %union.tree_node* %35, %union.tree_node** %field_decl, align 8, !dbg !5973
  %36 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !5975
  %base32 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !5975
  %37 = bitcast %struct.tree_base* %base32 to i64*, !dbg !5975
  %bf.load33 = load i64, i64* %37, align 8, !dbg !5975
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !5975
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !5975
  %cmp36 = icmp eq i32 %bf.cast35, 47, !dbg !5977
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false, !dbg !5978

lor.lhs.false:                                    ; preds = %sw.bb25
  %38 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !5979
  %base37 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5979
  %39 = bitcast %struct.tree_base* %base37 to i64*, !dbg !5979
  %bf.load38 = load i64, i64* %39, align 8, !dbg !5979
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !5979
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !5979
  %cmp41 = icmp eq i32 %bf.cast40, 45, !dbg !5980
  br i1 %cmp41, label %land.lhs.true, label %lor.lhs.false42, !dbg !5981

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %40 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !5982
  %base43 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !5982
  %41 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5982
  %bf.load44 = load i64, i64* %41, align 8, !dbg !5982
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5982
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5982
  %cmp47 = icmp eq i32 %bf.cast46, 32, !dbg !5983
  br i1 %cmp47, label %land.lhs.true, label %if.end107, !dbg !5984

land.lhs.true:                                    ; preds = %lor.lhs.false42, %lor.lhs.false, %sw.bb25
  %42 = load %union.tree_node*, %union.tree_node** %field_decl, align 8, !dbg !5985
  %base48 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !5985
  %43 = bitcast %struct.tree_base* %base48 to i64*, !dbg !5985
  %bf.load49 = load i64, i64* %43, align 8, !dbg !5985
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !5985
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !5985
  %cmp52 = icmp eq i32 %bf.cast51, 31, !dbg !5986
  br i1 %cmp52, label %if.then53, label %if.end107, !dbg !5987

if.then53:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %type54, metadata !5988, metadata !DIExpression()), !dbg !5990
  %44 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !5991
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !5991
  %type55 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5991
  %45 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !5991
  %type56 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !5991
  %main_variant57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 16, !dbg !5991
  %46 = load %union.tree_node*, %union.tree_node** %main_variant57, align 8, !dbg !5991
  store %union.tree_node* %46, %union.tree_node** %type54, align 8, !dbg !5990
  call void @llvm.dbg.declare(metadata i32* %i58, metadata !5992, metadata !DIExpression()), !dbg !5993
  %47 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !5994
  %call59 = call i32 @find_structure(%union.tree_node* %47), !dbg !5995
  store i32 %call59, i32* %i58, align 4, !dbg !5993
  %48 = load i32, i32* %i58, align 4, !dbg !5996
  %49 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5998
  %tobool60 = icmp ne %struct.VEC_structure_heap* %49, null, !dbg !5998
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !5998

cond.true61:                                      ; preds = %if.then53
  %50 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !5998
  %base62 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %50, i32 0, i32 0, !dbg !5998
  br label %cond.end64, !dbg !5998

cond.false63:                                     ; preds = %if.then53
  br label %cond.end64, !dbg !5998

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_structure_base* [ %base62, %cond.true61 ], [ null, %cond.false63 ], !dbg !5998
  %call66 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond65), !dbg !5998
  %cmp67 = icmp ne i32 %48, %call66, !dbg !5999
  br i1 %cmp67, label %if.then68, label %if.end106, !dbg !6000

if.then68:                                        ; preds = %cond.end64
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str69, metadata !6001, metadata !DIExpression()), !dbg !6003
  %51 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6004
  %tobool70 = icmp ne %struct.VEC_structure_heap* %51, null, !dbg !6004
  br i1 %tobool70, label %cond.true71, label %cond.false73, !dbg !6004

cond.true71:                                      ; preds = %if.then68
  %52 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6004
  %base72 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %52, i32 0, i32 0, !dbg !6004
  br label %cond.end74, !dbg !6004

cond.false73:                                     ; preds = %if.then68
  br label %cond.end74, !dbg !6004

cond.end74:                                       ; preds = %cond.false73, %cond.true71
  %cond75 = phi %struct.VEC_structure_base* [ %base72, %cond.true71 ], [ null, %cond.false73 ], !dbg !6004
  %53 = load i32, i32* %i58, align 4, !dbg !6004
  %call76 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond75, i32 %53), !dbg !6004
  store %struct.data_structure* %call76, %struct.data_structure** %str69, align 8, !dbg !6003
  call void @llvm.dbg.declare(metadata %struct.field_entry** %field, metadata !6005, metadata !DIExpression()), !dbg !6006
  %54 = load %struct.data_structure*, %struct.data_structure** %str69, align 8, !dbg !6007
  %55 = load %union.tree_node*, %union.tree_node** %field_decl, align 8, !dbg !6008
  %call77 = call %struct.field_entry* @find_field_in_struct(%struct.data_structure* %54, %union.tree_node* %55), !dbg !6009
  store %struct.field_entry* %call77, %struct.field_entry** %field, align 8, !dbg !6006
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6010
  %call78 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %56), !dbg !6012
  %tobool79 = icmp ne i8 %call78, 0, !dbg !6012
  br i1 %tobool79, label %if.then80, label %if.end82, !dbg !6013

if.then80:                                        ; preds = %cond.end74
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6014
  %58 = load %struct.data_structure*, %struct.data_structure** %str69, align 8, !dbg !6016
  %accs81 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %58, i32 0, i32 4, !dbg !6017
  %59 = load %struct.htab*, %struct.htab** %accs81, align 8, !dbg !6017
  call void @add_access_to_acc_sites(%union.gimple_statement_d* %57, %union.tree_node* null, %struct.htab* %59), !dbg !6018
  %60 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6019
  store i32 0, i32* %60, align 4, !dbg !6020
  br label %sw.epilog, !dbg !6021

if.end82:                                         ; preds = %cond.end74
  %61 = load %struct.field_entry*, %struct.field_entry** %field, align 8, !dbg !6022
  %tobool83 = icmp ne %struct.field_entry* %61, null, !dbg !6022
  br i1 %tobool83, label %if.then84, label %if.end105, !dbg !6024

if.then84:                                        ; preds = %if.end82
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc, metadata !6025, metadata !DIExpression()), !dbg !6027
  %call85 = call %struct.field_access_site* @make_field_acc_node(), !dbg !6028
  store %struct.field_access_site* %call85, %struct.field_access_site** %acc, align 8, !dbg !6027
  %62 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6029
  %tobool86 = icmp ne %struct.field_access_site* %62, null, !dbg !6029
  br i1 %tobool86, label %cond.false88, label %cond.true87, !dbg !6029

cond.true87:                                      ; preds = %if.then84
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 2556, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6029
  br label %cond.end89, !dbg !6029

cond.false88:                                     ; preds = %if.then84
  br label %cond.end89, !dbg !6029

cond.end89:                                       ; preds = %cond.false88, %cond.true87
  %cond90 = phi i32 [ 0, %cond.true87 ], [ 0, %cond.false88 ], !dbg !6029
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6030
  %64 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6031
  %stmt91 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %64, i32 0, i32 0, !dbg !6032
  store %union.gimple_statement_d* %63, %union.gimple_statement_d** %stmt91, align 8, !dbg !6033
  %65 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6034
  %66 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6035
  %comp_ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %66, i32 0, i32 1, !dbg !6036
  store %union.tree_node* %65, %union.tree_node** %comp_ref, align 8, !dbg !6037
  %67 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !6038
  %68 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6039
  %ref92 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %68, i32 0, i32 3, !dbg !6040
  store %union.tree_node* %67, %union.tree_node** %ref92, align 8, !dbg !6041
  %69 = load %union.tree_node*, %union.tree_node** %field_decl, align 8, !dbg !6042
  %70 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6043
  %field_decl93 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %70, i32 0, i32 2, !dbg !6044
  store %union.tree_node* %69, %union.tree_node** %field_decl93, align 8, !dbg !6045
  %71 = load %struct.data_structure*, %struct.data_structure** %str69, align 8, !dbg !6046
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %71, i32 0, i32 0, !dbg !6048
  %72 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6048
  %73 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6049
  %call94 = call zeroext i8 @decompose_access(%union.tree_node* %72, %struct.field_access_site* %73), !dbg !6050
  %tobool95 = icmp ne i8 %call94, 0, !dbg !6050
  br i1 %tobool95, label %if.else, label %if.then96, !dbg !6051

if.then96:                                        ; preds = %cond.end89
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6052
  %tobool97 = icmp ne %struct._IO_FILE* %74, null, !dbg !6052
  br i1 %tobool97, label %if.then98, label %if.end101, !dbg !6055

if.then98:                                        ; preds = %if.then96
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6056
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i64 0, i64 0)), !dbg !6058
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6059
  %77 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !6060
  call void @print_generic_expr(%struct._IO_FILE* %76, %union.tree_node* %77, i32 0), !dbg !6061
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6062
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.26, i64 0, i64 0)), !dbg !6063
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6064
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6065
  call void @print_gimple_stmt(%struct._IO_FILE* %79, %union.gimple_statement_d* %80, i32 0, i32 0), !dbg !6066
  br label %if.end101, !dbg !6067

if.end101:                                        ; preds = %if.then98, %if.then96
  %81 = load i32, i32* %i58, align 4, !dbg !6068
  call void @remove_structure(i32 %81), !dbg !6069
  %82 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6070
  %83 = bitcast %struct.field_access_site* %82 to i8*, !dbg !6070
  call void @free(i8* %83), !dbg !6071
  br label %if.end104, !dbg !6072

if.else:                                          ; preds = %cond.end89
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6073, metadata !DIExpression()), !dbg !6075
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6076
  %call102 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %84), !dbg !6077
  store %struct.basic_block_def* %call102, %struct.basic_block_def** %bb, align 8, !dbg !6075
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6078
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 8, !dbg !6079
  %86 = load i64, i64* %count, align 8, !dbg !6079
  %87 = load %struct.field_entry*, %struct.field_entry** %field, align 8, !dbg !6080
  %count103 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %87, i32 0, i32 1, !dbg !6081
  %88 = load i64, i64* %count103, align 8, !dbg !6082
  %add = add nsw i64 %88, %86, !dbg !6082
  store i64 %add, i64* %count103, align 8, !dbg !6082
  %89 = load %struct.field_access_site*, %struct.field_access_site** %acc, align 8, !dbg !6083
  %90 = load %struct.field_entry*, %struct.field_entry** %field, align 8, !dbg !6084
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %90, i32 0, i32 4, !dbg !6085
  %91 = load %struct.htab*, %struct.htab** %acc_sites, align 8, !dbg !6085
  call void @add_field_acc_to_acc_sites(%struct.field_access_site* %89, %struct.htab* %91), !dbg !6086
  br label %if.end104

if.end104:                                        ; preds = %if.else, %if.end101
  %92 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6087
  store i32 0, i32* %92, align 4, !dbg !6088
  br label %if.end105, !dbg !6089

if.end105:                                        ; preds = %if.end104, %if.end82
  br label %if.end106, !dbg !6090

if.end106:                                        ; preds = %if.end105, %cond.end64
  br label %if.end107, !dbg !6091

if.end107:                                        ; preds = %if.end106, %land.lhs.true, %lor.lhs.false42
  br label %sw.epilog, !dbg !6092

sw.bb108:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond109, metadata !6093, metadata !DIExpression()), !dbg !6095
  %93 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6096
  %exp110 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !6096
  %operands111 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp110, i32 0, i32 3, !dbg !6096
  %arrayidx112 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands111, i64 0, i64 0, !dbg !6096
  %94 = load %union.tree_node*, %union.tree_node** %arrayidx112, align 8, !dbg !6096
  store %union.tree_node* %94, %union.tree_node** %cond109, align 8, !dbg !6095
  call void @llvm.dbg.declare(metadata i32* %i113, metadata !6097, metadata !DIExpression()), !dbg !6098
  store i32 0, i32* %i113, align 4, !dbg !6099
  br label %for.cond, !dbg !6101

for.cond:                                         ; preds = %for.inc, %sw.bb108
  %95 = load i32, i32* %i113, align 4, !dbg !6102
  %96 = load %union.tree_node*, %union.tree_node** %cond109, align 8, !dbg !6104
  %base114 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !6104
  %97 = bitcast %struct.tree_base* %base114 to i64*, !dbg !6104
  %bf.load115 = load i64, i64* %97, align 8, !dbg !6104
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !6104
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !6104
  %idxprom = sext i32 %bf.cast117 to i64, !dbg !6104
  %arrayidx118 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !6104
  %98 = load i8, i8* %arrayidx118, align 1, !dbg !6104
  %conv = zext i8 %98 to i32, !dbg !6104
  %cmp119 = icmp slt i32 %95, %conv, !dbg !6105
  br i1 %cmp119, label %for.body, label %for.end, !dbg !6106

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %t121, metadata !6107, metadata !DIExpression()), !dbg !6109
  %99 = load %union.tree_node*, %union.tree_node** %cond109, align 8, !dbg !6110
  %exp122 = bitcast %union.tree_node* %99 to %struct.tree_exp*, !dbg !6110
  %operands123 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp122, i32 0, i32 3, !dbg !6110
  %100 = load i32, i32* %i113, align 4, !dbg !6110
  %idxprom124 = sext i32 %100 to i64, !dbg !6110
  %arrayidx125 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands123, i64 0, i64 %idxprom124, !dbg !6110
  %101 = load %union.tree_node*, %union.tree_node** %arrayidx125, align 8, !dbg !6110
  store %union.tree_node* %101, %union.tree_node** %t121, align 8, !dbg !6109
  %102 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6111
  store i32 1, i32* %102, align 4, !dbg !6112
  %103 = load i8*, i8** %data.addr, align 8, !dbg !6113
  %call126 = call %union.tree_node* @walk_tree_1(%union.tree_node** %t121, %union.tree_node* (%union.tree_node**, i32*, i8*)* @get_stmt_accesses, i8* %103, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !6113
  br label %for.inc, !dbg !6114

for.inc:                                          ; preds = %for.body
  %104 = load i32, i32* %i113, align 4, !dbg !6115
  %inc = add nsw i32 %104, 1, !dbg !6115
  store i32 %inc, i32* %i113, align 4, !dbg !6115
  br label %for.cond, !dbg !6116, !llvm.loop !6117

for.end:                                          ; preds = %for.cond
  %105 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6119
  store i32 0, i32* %105, align 4, !dbg !6120
  br label %sw.epilog, !dbg !6121

sw.bb127:                                         ; preds = %if.end, %if.end
  call void @llvm.dbg.declare(metadata i32* %i128, metadata !6122, metadata !DIExpression()), !dbg !6124
  %106 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6125
  %base129 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !6125
  %107 = bitcast %struct.tree_base* %base129 to i64*, !dbg !6125
  %bf.load130 = load i64, i64* %107, align 8, !dbg !6125
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !6125
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !6125
  %cmp133 = icmp eq i32 %bf.cast132, 141, !dbg !6127
  br i1 %cmp133, label %if.then135, label %if.end137, !dbg !6128

if.then135:                                       ; preds = %sw.bb127
  %108 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6129
  %ssa_name = bitcast %union.tree_node* %108 to %struct.tree_ssa_name*, !dbg !6129
  %var136 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6129
  %109 = load %union.tree_node*, %union.tree_node** %var136, align 8, !dbg !6129
  store %union.tree_node* %109, %union.tree_node** %t, align 8, !dbg !6130
  br label %if.end137, !dbg !6131

if.end137:                                        ; preds = %if.then135, %sw.bb127
  %110 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6132
  %call138 = call %union.tree_node* @get_type_of_var(%union.tree_node* %110), !dbg !6133
  %call139 = call %union.tree_node* @strip_type(%union.tree_node* %call138), !dbg !6134
  %call140 = call i32 @find_structure(%union.tree_node* %call139), !dbg !6135
  store i32 %call140, i32* %i128, align 4, !dbg !6136
  %111 = load i32, i32* %i128, align 4, !dbg !6137
  %112 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6139
  %tobool141 = icmp ne %struct.VEC_structure_heap* %112, null, !dbg !6139
  br i1 %tobool141, label %cond.true142, label %cond.false144, !dbg !6139

cond.true142:                                     ; preds = %if.end137
  %113 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6139
  %base143 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %113, i32 0, i32 0, !dbg !6139
  br label %cond.end145, !dbg !6139

cond.false144:                                    ; preds = %if.end137
  br label %cond.end145, !dbg !6139

cond.end145:                                      ; preds = %cond.false144, %cond.true142
  %cond146 = phi %struct.VEC_structure_base* [ %base143, %cond.true142 ], [ null, %cond.false144 ], !dbg !6139
  %call147 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond146), !dbg !6139
  %cmp148 = icmp ne i32 %111, %call147, !dbg !6140
  br i1 %cmp148, label %if.then150, label %if.end160, !dbg !6141

if.then150:                                       ; preds = %cond.end145
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str151, metadata !6142, metadata !DIExpression()), !dbg !6144
  %114 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6145
  %tobool152 = icmp ne %struct.VEC_structure_heap* %114, null, !dbg !6145
  br i1 %tobool152, label %cond.true153, label %cond.false155, !dbg !6145

cond.true153:                                     ; preds = %if.then150
  %115 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !6145
  %base154 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %115, i32 0, i32 0, !dbg !6145
  br label %cond.end156, !dbg !6145

cond.false155:                                    ; preds = %if.then150
  br label %cond.end156, !dbg !6145

cond.end156:                                      ; preds = %cond.false155, %cond.true153
  %cond157 = phi %struct.VEC_structure_base* [ %base154, %cond.true153 ], [ null, %cond.false155 ], !dbg !6145
  %116 = load i32, i32* %i128, align 4, !dbg !6145
  %call158 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond157, i32 %116), !dbg !6145
  store %struct.data_structure* %call158, %struct.data_structure** %str151, align 8, !dbg !6146
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6147
  %118 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6148
  %119 = load %struct.data_structure*, %struct.data_structure** %str151, align 8, !dbg !6149
  %accs159 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %119, i32 0, i32 4, !dbg !6150
  %120 = load %struct.htab*, %struct.htab** %accs159, align 8, !dbg !6150
  call void @add_access_to_acc_sites(%union.gimple_statement_d* %117, %union.tree_node* %118, %struct.htab* %120), !dbg !6151
  br label %if.end160, !dbg !6152

if.end160:                                        ; preds = %cond.end156, %cond.end145
  %121 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6153
  store i32 0, i32* %121, align 4, !dbg !6154
  br label %sw.epilog, !dbg !6155

sw.default:                                       ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6156
  br label %return, !dbg !6156

sw.epilog:                                        ; preds = %if.end160, %for.end, %if.end107, %if.then80, %if.end24, %cond.end15
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6157
  br label %return, !dbg !6157

return:                                           ; preds = %sw.epilog, %sw.default, %if.then
  %122 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6158
  ret %union.tree_node* %122, !dbg !6158
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6159 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6165
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6166
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6166
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6167
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6167
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6168
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6169
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6170
  ret void, !dbg !6171
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6172 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6178, metadata !DIExpression()), !dbg !6179
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6180
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6181
  %1 = load i32, i32* %flags, align 8, !dbg !6181
  %and = and i32 %1, 512, !dbg !6182
  %tobool = icmp ne i32 %and, 0, !dbg !6182
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6183

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6184
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6185
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6186
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6186
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6184
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6187

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6188
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6189
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6190
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6190
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6191
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6191
  br label %cond.end, !dbg !6187

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6187

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6187
  ret %struct.gimple_seq_d* %cond, !dbg !6192
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6193 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6199, metadata !DIExpression()), !dbg !6200
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6201
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6201
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6201

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6202
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6203
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6203
  br label %cond.end, !dbg !6201

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6201

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6201
  ret %struct.gimple_seq_node_d* %cond, !dbg !6204
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_structure_heap_free(%struct.VEC_structure_heap** %vec_) #0 !dbg !6205 {
entry:
  %vec_.addr = alloca %struct.VEC_structure_heap**, align 8
  store %struct.VEC_structure_heap** %vec_, %struct.VEC_structure_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_structure_heap*** %vec_.addr, metadata !6208, metadata !DIExpression()), !dbg !6209
  %0 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !6210
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %0, align 8, !dbg !6210
  %tobool = icmp ne %struct.VEC_structure_heap* %1, null, !dbg !6210
  br i1 %tobool, label %if.then, label %if.end, !dbg !6209

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !6210
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** %2, align 8, !dbg !6210
  %4 = bitcast %struct.VEC_structure_heap* %3 to i8*, !dbg !6210
  call void @free(i8* %4), !dbg !6210
  br label %if.end, !dbg !6210

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_structure_heap**, %struct.VEC_structure_heap*** %vec_.addr, align 8, !dbg !6209
  store %struct.VEC_structure_heap* null, %struct.VEC_structure_heap** %5, align 8, !dbg !6209
  ret void, !dbg !6209
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_access_to_acc_sites(%union.gimple_statement_d* %stmt, %union.tree_node* %var, %struct.htab* %accs) #0 !dbg !6212 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %accs.addr = alloca %struct.htab*, align 8
  %acc = alloca %struct.access_site*, align 8
  %slot = alloca i8**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6215, metadata !DIExpression()), !dbg !6216
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6217, metadata !DIExpression()), !dbg !6218
  store %struct.htab* %accs, %struct.htab** %accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %accs.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !6221, metadata !DIExpression()), !dbg !6222
  %0 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !6223
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6224
  %2 = bitcast %union.gimple_statement_d* %1 to i8*, !dbg !6224
  %3 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6225
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6226
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !6226
  %call = call i32 %3(i8* %5), !dbg !6225
  %call1 = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %2, i32 %call), !dbg !6227
  %6 = bitcast i8* %call1 to %struct.access_site*, !dbg !6228
  store %struct.access_site* %6, %struct.access_site** %acc, align 8, !dbg !6229
  %7 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6230
  %tobool = icmp ne %struct.access_site* %7, null, !dbg !6230
  br i1 %tobool, label %if.end11, label %if.then, !dbg !6232

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6233, metadata !DIExpression()), !dbg !6235
  %call2 = call i8* @xmalloc(i64 16), !dbg !6236
  %8 = bitcast i8* %call2 to %struct.access_site*, !dbg !6236
  store %struct.access_site* %8, %struct.access_site** %acc, align 8, !dbg !6237
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6238
  %10 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6239
  %stmt3 = getelementptr inbounds %struct.access_site, %struct.access_site* %10, i32 0, i32 0, !dbg !6240
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %stmt3, align 8, !dbg !6241
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6242
  %call4 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %11), !dbg !6244
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6244
  br i1 %tobool5, label %if.else, label %if.then6, !dbg !6245

if.then6:                                         ; preds = %if.then
  %call7 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 10), !dbg !6246
  %12 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6247
  %vars = getelementptr inbounds %struct.access_site, %struct.access_site* %12, i32 0, i32 1, !dbg !6248
  store %struct.VEC_tree_heap* %call7, %struct.VEC_tree_heap** %vars, align 8, !dbg !6249
  br label %if.end, !dbg !6247

if.else:                                          ; preds = %if.then
  %13 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6250
  %vars8 = getelementptr inbounds %struct.access_site, %struct.access_site* %13, i32 0, i32 1, !dbg !6251
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %vars8, align 8, !dbg !6252
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %14 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !6253
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6254
  %16 = bitcast %union.gimple_statement_d* %15 to i8*, !dbg !6254
  %17 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6255
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6256
  %19 = bitcast %union.gimple_statement_d* %18 to i8*, !dbg !6256
  %call9 = call i32 %17(i8* %19), !dbg !6255
  %call10 = call i8** @htab_find_slot_with_hash(%struct.htab* %14, i8* %16, i32 %call9, i32 1), !dbg !6257
  store i8** %call10, i8*** %slot, align 8, !dbg !6258
  %20 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6259
  %21 = bitcast %struct.access_site* %20 to i8*, !dbg !6259
  %22 = load i8**, i8*** %slot, align 8, !dbg !6260
  store i8* %21, i8** %22, align 8, !dbg !6261
  br label %if.end11, !dbg !6262

if.end11:                                         ; preds = %if.end, %entry
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6263
  %call12 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %23), !dbg !6265
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6265
  br i1 %tobool13, label %if.end17, label %if.then14, !dbg !6266

if.then14:                                        ; preds = %if.end11
  %24 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !6267
  %vars15 = getelementptr inbounds %struct.access_site, %struct.access_site* %24, i32 0, i32 1, !dbg !6267
  %25 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6267
  %call16 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vars15, %union.tree_node* %25), !dbg !6267
  br label %if.end17, !dbg !6267

if.end17:                                         ; preds = %if.then14, %if.end11
  ret void, !dbg !6268
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.field_entry* @find_field_in_struct(%struct.data_structure* %str, %union.tree_node* %field_decl) #0 !dbg !6269 {
entry:
  %retval = alloca %struct.field_entry*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %field_decl.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %field = alloca %union.tree_node*, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  store %union.tree_node* %field_decl, %union.tree_node** %field_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_decl.addr, metadata !6274, metadata !DIExpression()), !dbg !6275
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6276, metadata !DIExpression()), !dbg !6277
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6278, metadata !DIExpression()), !dbg !6279
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !6280
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 0, !dbg !6281
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6281
  %2 = load %union.tree_node*, %union.tree_node** %field_decl.addr, align 8, !dbg !6282
  %call = call %union.tree_node* @find_field_in_struct_1(%union.tree_node* %1, %union.tree_node* %2), !dbg !6283
  store %union.tree_node* %call, %union.tree_node** %field, align 8, !dbg !6279
  store i32 0, i32* %i, align 4, !dbg !6284
  br label %for.cond, !dbg !6286

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !6287
  %4 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !6289
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %4, i32 0, i32 1, !dbg !6290
  %5 = load i32, i32* %num_fields, align 8, !dbg !6290
  %cmp = icmp slt i32 %3, %5, !dbg !6291
  br i1 %cmp, label %for.body, label %for.end, !dbg !6292

for.body:                                         ; preds = %for.cond
  %6 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !6293
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %6, i32 0, i32 3, !dbg !6295
  %7 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !6295
  %8 = load i32, i32* %i, align 4, !dbg !6296
  %idxprom = sext i32 %8 to i64, !dbg !6293
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %7, i64 %idxprom, !dbg !6293
  %decl1 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 2, !dbg !6297
  %9 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !6297
  %10 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6298
  %cmp2 = icmp eq %union.tree_node* %9, %10, !dbg !6299
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6300

if.then:                                          ; preds = %for.body
  %11 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !6301
  %fields3 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %11, i32 0, i32 3, !dbg !6302
  %12 = load %struct.field_entry*, %struct.field_entry** %fields3, align 8, !dbg !6302
  %13 = load i32, i32* %i, align 4, !dbg !6303
  %idxprom4 = sext i32 %13 to i64, !dbg !6301
  %arrayidx5 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %12, i64 %idxprom4, !dbg !6301
  store %struct.field_entry* %arrayidx5, %struct.field_entry** %retval, align 8, !dbg !6304
  br label %return, !dbg !6304

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6298

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !6305
  %inc = add nsw i32 %14, 1, !dbg !6305
  store i32 %inc, i32* %i, align 4, !dbg !6305
  br label %for.cond, !dbg !6306, !llvm.loop !6307

for.end:                                          ; preds = %for.cond
  store %struct.field_entry* null, %struct.field_entry** %retval, align 8, !dbg !6309
  br label %return, !dbg !6309

return:                                           ; preds = %for.end, %if.then
  %15 = load %struct.field_entry*, %struct.field_entry** %retval, align 8, !dbg !6310
  ret %struct.field_entry* %15, !dbg !6310
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.field_access_site* @make_field_acc_node() #0 !dbg !6311 {
entry:
  %call = call i8* @xcalloc(i64 1, i64 72), !dbg !6314
  %0 = bitcast i8* %call to %struct.field_access_site*, !dbg !6314
  ret %struct.field_access_site* %0, !dbg !6315
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @decompose_access(%union.tree_node* %str_decl, %struct.field_access_site* %acc) #0 !dbg !6316 {
entry:
  %retval = alloca i8, align 1
  %str_decl.addr = alloca %union.tree_node*, align 8
  %acc.addr = alloca %struct.field_access_site*, align 8
  store %union.tree_node* %str_decl, %union.tree_node** %str_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %str_decl.addr, metadata !6319, metadata !DIExpression()), !dbg !6320
  store %struct.field_access_site* %acc, %struct.field_access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc.addr, metadata !6321, metadata !DIExpression()), !dbg !6322
  %0 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6323
  %ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %0, i32 0, i32 3, !dbg !6323
  %1 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !6323
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6323
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6323

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 433, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6323
  br label %cond.end, !dbg !6323

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6323

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6323
  %2 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6324
  %ref1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %2, i32 0, i32 3, !dbg !6324
  %3 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !6324
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6324
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6324
  %bf.load = load i64, i64* %4, align 8, !dbg !6324
  %bf.clear = and i64 %bf.load, 65535, !dbg !6324
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6324
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !6326
  br i1 %cmp, label %if.then, label %if.else, !dbg !6327

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %str_decl.addr, align 8, !dbg !6328
  %6 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6329
  %call = call zeroext i8 @decompose_indirect_ref_acc(%union.tree_node* %5, %struct.field_access_site* %6), !dbg !6330
  store i8 %call, i8* %retval, align 1, !dbg !6331
  br label %return, !dbg !6331

if.else:                                          ; preds = %cond.end
  %7 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6332
  %ref2 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %7, i32 0, i32 3, !dbg !6332
  %8 = load %union.tree_node*, %union.tree_node** %ref2, align 8, !dbg !6332
  %base3 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6332
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6332
  %bf.load4 = load i64, i64* %9, align 8, !dbg !6332
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !6332
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6332
  %cmp7 = icmp eq i32 %bf.cast6, 45, !dbg !6334
  br i1 %cmp7, label %if.then8, label %if.else9, !dbg !6335

if.then8:                                         ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !6336
  br label %return, !dbg !6336

if.else9:                                         ; preds = %if.else
  %10 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6337
  %ref10 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %10, i32 0, i32 3, !dbg !6337
  %11 = load %union.tree_node*, %union.tree_node** %ref10, align 8, !dbg !6337
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6337
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !6337
  %bf.load12 = load i64, i64* %12, align 8, !dbg !6337
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !6337
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6337
  %cmp15 = icmp eq i32 %bf.cast14, 32, !dbg !6339
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !6340

if.then16:                                        ; preds = %if.else9
  store i8 1, i8* %retval, align 1, !dbg !6341
  br label %return, !dbg !6341

if.end:                                           ; preds = %if.else9
  br label %if.end17

if.end17:                                         ; preds = %if.end
  br label %if.end18

if.end18:                                         ; preds = %if.end17
  store i8 0, i8* %retval, align 1, !dbg !6342
  br label %return, !dbg !6342

return:                                           ; preds = %if.end18, %if.then16, %if.then8, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !6343
  ret i8 %13, !dbg !6343
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6344 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6347, metadata !DIExpression()), !dbg !6348
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6349
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6350
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6351
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6351
  ret %struct.basic_block_def* %1, !dbg !6352
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_field_acc_to_acc_sites(%struct.field_access_site* %acc, %struct.htab* %f_accs) #0 !dbg !6353 {
entry:
  %acc.addr = alloca %struct.field_access_site*, align 8
  %f_accs.addr = alloca %struct.htab*, align 8
  %slot = alloca i8**, align 8
  store %struct.field_access_site* %acc, %struct.field_access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  store %struct.htab* %f_accs, %struct.htab** %f_accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %f_accs.addr, metadata !6358, metadata !DIExpression()), !dbg !6359
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6360, metadata !DIExpression()), !dbg !6361
  %0 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6362
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %0, i32 0, i32 0, !dbg !6362
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6362
  %2 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !6362
  %call = call %struct.field_access_site* @is_in_field_accs(%union.gimple_statement_d* %1, %struct.htab* %2), !dbg !6362
  %tobool = icmp ne %struct.field_access_site* %call, null, !dbg !6362
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6362

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 472, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6362
  br label %cond.end, !dbg !6362

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6362

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6362
  %3 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !6363
  %4 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6364
  %stmt1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %4, i32 0, i32 0, !dbg !6365
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6365
  %6 = bitcast %union.gimple_statement_d* %5 to i8*, !dbg !6364
  %7 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6366
  %8 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6367
  %stmt2 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %8, i32 0, i32 0, !dbg !6368
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6368
  %10 = bitcast %union.gimple_statement_d* %9 to i8*, !dbg !6367
  %call3 = call i32 %7(i8* %10), !dbg !6366
  %call4 = call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %6, i32 %call3, i32 1), !dbg !6369
  store i8** %call4, i8*** %slot, align 8, !dbg !6370
  %11 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6371
  %12 = bitcast %struct.field_access_site* %11 to i8*, !dbg !6371
  %13 = load i8**, i8*** %slot, align 8, !dbg !6372
  store i8* %12, i8** %13, align 8, !dbg !6373
  ret void, !dbg !6374
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_field_in_struct_1(%union.tree_node* %str_type, %union.tree_node* %field) #0 !dbg !6375 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %str_type.addr = alloca %union.tree_node*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %str_field = alloca %union.tree_node*, align 8
  store %union.tree_node* %str_type, %union.tree_node** %str_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %str_type.addr, metadata !6378, metadata !DIExpression()), !dbg !6379
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !6380, metadata !DIExpression()), !dbg !6381
  call void @llvm.dbg.declare(metadata %union.tree_node** %str_field, metadata !6382, metadata !DIExpression()), !dbg !6383
  %0 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6384
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !6384
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6384
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6384
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6384
  br i1 %tobool, label %if.end, label %if.then, !dbg !6386

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6387
  br label %return, !dbg !6387

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %str_type.addr, align 8, !dbg !6388
  %type = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !6388
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !6388
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6388
  store %union.tree_node* %3, %union.tree_node** %str_field, align 8, !dbg !6390
  br label %for.cond, !dbg !6391

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %str_field, align 8, !dbg !6392
  %tobool1 = icmp ne %union.tree_node* %4, null, !dbg !6394
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6394

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %str_field, align 8, !dbg !6395
  %decl_minimal2 = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !6395
  %name3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal2, i32 0, i32 3, !dbg !6395
  %6 = load %union.tree_node*, %union.tree_node** %name3, align 8, !dbg !6395
  %tobool4 = icmp ne %union.tree_node* %6, null, !dbg !6395
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !6398

if.then5:                                         ; preds = %for.body
  br label %for.inc, !dbg !6399

if.end6:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6400
  %8 = load %union.tree_node*, %union.tree_node** %str_field, align 8, !dbg !6402
  %call = call zeroext i8 @compare_fields(%union.tree_node* %7, %union.tree_node* %8), !dbg !6403
  %tobool7 = icmp ne i8 %call, 0, !dbg !6403
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !6404

if.then8:                                         ; preds = %if.end6
  %9 = load %union.tree_node*, %union.tree_node** %str_field, align 8, !dbg !6405
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !6406
  br label %return, !dbg !6406

if.end9:                                          ; preds = %if.end6
  br label %for.inc, !dbg !6407

for.inc:                                          ; preds = %if.end9, %if.then5
  %10 = load %union.tree_node*, %union.tree_node** %str_field, align 8, !dbg !6408
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6408
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6408
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6408
  store %union.tree_node* %11, %union.tree_node** %str_field, align 8, !dbg !6409
  br label %for.cond, !dbg !6410, !llvm.loop !6411

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6413
  br label %return, !dbg !6413

return:                                           ; preds = %for.end, %if.then8, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6414
  ret %union.tree_node* %12, !dbg !6414
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @decompose_indirect_ref_acc(%union.tree_node* %str_decl, %struct.field_access_site* %acc) #0 !dbg !6415 {
entry:
  %retval = alloca i8, align 1
  %str_decl.addr = alloca %union.tree_node*, align 8
  %acc.addr = alloca %struct.field_access_site*, align 8
  %ref_var = alloca %union.tree_node*, align 8
  %struct_size = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %before_cast = alloca %union.tree_node*, align 8
  %rhs_code = alloca i32, align 4
  store %union.tree_node* %str_decl, %union.tree_node** %str_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %str_decl.addr, metadata !6416, metadata !DIExpression()), !dbg !6417
  store %struct.field_access_site* %acc, %struct.field_access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc.addr, metadata !6418, metadata !DIExpression()), !dbg !6419
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref_var, metadata !6420, metadata !DIExpression()), !dbg !6421
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_size, metadata !6422, metadata !DIExpression()), !dbg !6423
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !6424, metadata !DIExpression()), !dbg !6425
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6426, metadata !DIExpression()), !dbg !6427
  call void @llvm.dbg.declare(metadata %union.tree_node** %before_cast, metadata !6428, metadata !DIExpression()), !dbg !6429
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !6430, metadata !DIExpression()), !dbg !6431
  %0 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6432
  %ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %0, i32 0, i32 3, !dbg !6432
  %1 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !6432
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !6432
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6432
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6432
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6432
  store %union.tree_node* %2, %union.tree_node** %ref_var, align 8, !dbg !6433
  %3 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !6434
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6434
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6434
  %bf.load = load i64, i64* %4, align 8, !dbg !6434
  %bf.clear = and i64 %bf.load, 65535, !dbg !6434
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6434
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6436
  br i1 %cmp, label %if.then, label %if.end, !dbg !6437

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6438
  br label %return, !dbg !6438

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !6439
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !6439
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6439
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6439
  %7 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6440
  %ref_def_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %7, i32 0, i32 7, !dbg !6441
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %ref_def_stmt, align 8, !dbg !6442
  %8 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6443
  %ref_def_stmt1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %8, i32 0, i32 7, !dbg !6445
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt1, align 8, !dbg !6445
  %tobool = icmp ne %union.gimple_statement_d* %9, null, !dbg !6446
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !6447

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6448
  %ref_def_stmt2 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %10, i32 0, i32 7, !dbg !6449
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt2, align 8, !dbg !6449
  %call = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !6450
  %cmp3 = icmp ne i32 %call, 6, !dbg !6451
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6452

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !6453
  br label %return, !dbg !6453

if.end5:                                          ; preds = %lor.lhs.false
  %12 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6454
  %ref_def_stmt6 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %12, i32 0, i32 7, !dbg !6455
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt6, align 8, !dbg !6455
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %13), !dbg !6456
  store i32 %call7, i32* %rhs_code, align 4, !dbg !6457
  %14 = load i32, i32* %rhs_code, align 4, !dbg !6458
  %cmp8 = icmp ne i32 %14, 63, !dbg !6460
  br i1 %cmp8, label %land.lhs.true, label %if.end13, !dbg !6461

land.lhs.true:                                    ; preds = %if.end5
  %15 = load i32, i32* %rhs_code, align 4, !dbg !6462
  %cmp9 = icmp ne i32 %15, 64, !dbg !6463
  br i1 %cmp9, label %land.lhs.true10, label %if.end13, !dbg !6464

land.lhs.true10:                                  ; preds = %land.lhs.true
  %16 = load i32, i32* %rhs_code, align 4, !dbg !6465
  %cmp11 = icmp ne i32 %16, 66, !dbg !6466
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !6467

if.then12:                                        ; preds = %land.lhs.true10
  store i8 0, i8* %retval, align 1, !dbg !6468
  br label %return, !dbg !6468

if.end13:                                         ; preds = %land.lhs.true10, %land.lhs.true, %if.end5
  %17 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6469
  %ref_def_stmt14 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %17, i32 0, i32 7, !dbg !6470
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt14, align 8, !dbg !6470
  %call15 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %18), !dbg !6471
  store %union.tree_node* %call15, %union.tree_node** %op0, align 8, !dbg !6472
  %19 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6473
  %ref_def_stmt16 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %19, i32 0, i32 7, !dbg !6474
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt16, align 8, !dbg !6474
  %call17 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %20), !dbg !6475
  store %union.tree_node* %call17, %union.tree_node** %op1, align 8, !dbg !6476
  %21 = load i32, i32* %rhs_code, align 4, !dbg !6477
  %22 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6479
  %23 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6480
  %24 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6481
  %base18 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %24, i32 0, i32 6, !dbg !6482
  %25 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6483
  %offset = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %25, i32 0, i32 5, !dbg !6484
  %26 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6485
  %cast_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %26, i32 0, i32 8, !dbg !6486
  %call19 = call zeroext i8 @is_array_access_through_pointer_and_index(i32 %21, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node** %base18, %union.tree_node** %offset, %union.gimple_statement_d** %cast_stmt), !dbg !6487
  %tobool20 = icmp ne i8 %call19, 0, !dbg !6487
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !6488

if.then21:                                        ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !6489
  br label %return, !dbg !6489

if.end22:                                         ; preds = %if.end13
  %27 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6490
  %cast_stmt23 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %27, i32 0, i32 8, !dbg !6492
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt23, align 8, !dbg !6492
  %tobool24 = icmp ne %union.gimple_statement_d* %28, null, !dbg !6490
  br i1 %tobool24, label %if.then25, label %if.else, !dbg !6493

if.then25:                                        ; preds = %if.end22
  %29 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6494
  %cast_stmt26 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %29, i32 0, i32 8, !dbg !6494
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt26, align 8, !dbg !6494
  %call27 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %30, i32 1), !dbg !6494
  store %union.tree_node* %call27, %union.tree_node** %before_cast, align 8, !dbg !6495
  br label %if.end29, !dbg !6496

if.else:                                          ; preds = %if.end22
  %31 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6497
  %offset28 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %31, i32 0, i32 5, !dbg !6498
  %32 = load %union.tree_node*, %union.tree_node** %offset28, align 8, !dbg !6498
  store %union.tree_node* %32, %union.tree_node** %before_cast, align 8, !dbg !6499
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then25
  %33 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !6500
  %tobool30 = icmp ne %union.tree_node* %33, null, !dbg !6500
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !6502

if.then31:                                        ; preds = %if.end29
  store i8 0, i8* %retval, align 1, !dbg !6503
  br label %return, !dbg !6503

if.end32:                                         ; preds = %if.end29
  %34 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !6504
  %base33 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6504
  %35 = bitcast %struct.tree_base* %base33 to i64*, !dbg !6504
  %bf.load34 = load i64, i64* %35, align 8, !dbg !6504
  %bf.lshr = lshr i64 %bf.load34, 32, !dbg !6504
  %bf.clear35 = and i64 %bf.lshr, 1, !dbg !6504
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !6504
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !6504
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !6506

if.then38:                                        ; preds = %if.end32
  store i8 0, i8* %retval, align 1, !dbg !6507
  br label %return, !dbg !6507

if.end39:                                         ; preds = %if.end32
  %36 = load %union.tree_node*, %union.tree_node** %str_decl.addr, align 8, !dbg !6508
  %type = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !6508
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 3, !dbg !6508
  %37 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6508
  store %union.tree_node* %37, %union.tree_node** %struct_size, align 8, !dbg !6509
  %38 = load %union.tree_node*, %union.tree_node** %before_cast, align 8, !dbg !6510
  %39 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !6512
  %num = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %39, i32 0, i32 4, !dbg !6513
  %40 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !6514
  %call40 = call zeroext i8 @is_result_of_mult(%union.tree_node* %38, %union.tree_node** %num, %union.tree_node* %40), !dbg !6515
  %tobool41 = icmp ne i8 %call40, 0, !dbg !6515
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !6516

if.then42:                                        ; preds = %if.end39
  store i8 0, i8* %retval, align 1, !dbg !6517
  br label %return, !dbg !6517

if.end43:                                         ; preds = %if.end39
  store i8 1, i8* %retval, align 1, !dbg !6518
  br label %return, !dbg !6518

return:                                           ; preds = %if.end43, %if.then42, %if.then38, %if.then31, %if.then21, %if.then12, %if.then4, %if.then
  %41 = load i8, i8* %retval, align 1, !dbg !6519
  ret i8 %41, !dbg !6519
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6520 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6523, metadata !DIExpression()), !dbg !6524
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6525, metadata !DIExpression()), !dbg !6526
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6527
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6528
  store i32 %call, i32* %code, align 4, !dbg !6529
  %1 = load i32, i32* %code, align 4, !dbg !6530
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6532
  %cmp = icmp eq i32 %call1, 3, !dbg !6533
  br i1 %cmp, label %if.then, label %if.end, !dbg !6534

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6535
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6535
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6535
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6535
  %bf.load = load i64, i64* %3, align 8, !dbg !6535
  %bf.clear = and i64 %bf.load, 65535, !dbg !6535
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6535
  store i32 %bf.cast, i32* %code, align 4, !dbg !6536
  br label %if.end, !dbg !6537

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6538
  ret i32 %4, !dbg !6539
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6540 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6541, metadata !DIExpression()), !dbg !6542
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6543
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6544
  ret %union.tree_node* %call, !dbg !6545
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6546 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6547, metadata !DIExpression()), !dbg !6548
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6549
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6551
  %cmp = icmp uge i32 %call, 3, !dbg !6552
  br i1 %cmp, label %if.then, label %if.else, !dbg !6553

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6554
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6555
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6556
  br label %return, !dbg !6556

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6557
  br label %return, !dbg !6557

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6558
  ret %union.tree_node* %2, !dbg !6558
}

declare dso_local zeroext i8 @is_array_access_through_pointer_and_index(i32, %union.tree_node*, %union.tree_node*, %union.tree_node**, %union.tree_node**, %union.gimple_statement_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6559 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6562, metadata !DIExpression()), !dbg !6563
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6564, metadata !DIExpression()), !dbg !6565
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6568, metadata !DIExpression()), !dbg !6581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6582
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6583
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !6584
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !6585
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6586
  %tobool = icmp ne i8 %call1, 0, !dbg !6586
  br i1 %tobool, label %if.then, label %if.end, !dbg !6588

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6589
  br label %return, !dbg !6589

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !6590
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6591
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6591
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !6593

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6594
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6595
  br label %return, !dbg !6595

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6596
  br label %return, !dbg !6596

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6597
  ret %union.tree_node* %3, !dbg !6597
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_result_of_mult(%union.tree_node* %arg, %union.tree_node** %num, %union.tree_node* %struct_size) #0 !dbg !6598 {
entry:
  %retval = alloca i8, align 1
  %arg.addr = alloca %union.tree_node*, align 8
  %num.addr = alloca %union.tree_node**, align 8
  %struct_size.addr = alloca %union.tree_node*, align 8
  %size_def_stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !6601, metadata !DIExpression()), !dbg !6602
  store %union.tree_node** %num, %union.tree_node*** %num.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %num.addr, metadata !6603, metadata !DIExpression()), !dbg !6604
  store %union.tree_node* %struct_size, %union.tree_node** %struct_size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_size.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %size_def_stmt, metadata !6607, metadata !DIExpression()), !dbg !6608
  %0 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !6609
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6609
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6609
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6609
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6608
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6610
  %tobool = icmp ne %union.gimple_statement_d* %2, null, !dbg !6610
  br i1 %tobool, label %land.lhs.true, label %if.end20, !dbg !6612

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6613
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %3), !dbg !6614
  %conv = zext i8 %call to i32, !dbg !6614
  %tobool1 = icmp ne i32 %conv, 0, !dbg !6614
  br i1 %tobool1, label %if.then, label %if.end20, !dbg !6615

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6616, metadata !DIExpression()), !dbg !6618
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6619
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !6620
  store %union.tree_node* %call2, %union.tree_node** %lhs, align 8, !dbg !6618
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6621
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %5), !dbg !6623
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6623
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !6624

if.then5:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !6625
  br label %return, !dbg !6625

if.end:                                           ; preds = %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6626
  %call6 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %6), !dbg !6628
  %cmp = icmp eq i32 %call6, 65, !dbg !6629
  br i1 %cmp, label %if.then8, label %if.end19, !dbg !6630

if.then8:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !6631, metadata !DIExpression()), !dbg !6633
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6634
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !6635
  store %union.tree_node* %call9, %union.tree_node** %arg0, align 8, !dbg !6633
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !6636, metadata !DIExpression()), !dbg !6637
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %size_def_stmt, align 8, !dbg !6638
  %call10 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %8), !dbg !6639
  store %union.tree_node* %call10, %union.tree_node** %arg1, align 8, !dbg !6637
  %9 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !6640
  %10 = load %union.tree_node*, %union.tree_node** %struct_size.addr, align 8, !dbg !6642
  %call11 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %10, i32 1), !dbg !6643
  %tobool12 = icmp ne i32 %call11, 0, !dbg !6643
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !6644

if.then13:                                        ; preds = %if.then8
  %11 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !6645
  %12 = load %union.tree_node**, %union.tree_node*** %num.addr, align 8, !dbg !6647
  store %union.tree_node* %11, %union.tree_node** %12, align 8, !dbg !6648
  store i8 1, i8* %retval, align 1, !dbg !6649
  br label %return, !dbg !6649

if.end14:                                         ; preds = %if.then8
  %13 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !6650
  %14 = load %union.tree_node*, %union.tree_node** %struct_size.addr, align 8, !dbg !6652
  %call15 = call i32 @operand_equal_p(%union.tree_node* %13, %union.tree_node* %14, i32 1), !dbg !6653
  %tobool16 = icmp ne i32 %call15, 0, !dbg !6653
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !6654

if.then17:                                        ; preds = %if.end14
  %15 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !6655
  %16 = load %union.tree_node**, %union.tree_node*** %num.addr, align 8, !dbg !6657
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !dbg !6658
  store i8 1, i8* %retval, align 1, !dbg !6659
  br label %return, !dbg !6659

if.end18:                                         ; preds = %if.end14
  br label %if.end19, !dbg !6660

if.end19:                                         ; preds = %if.end18, %if.end
  br label %if.end20, !dbg !6661

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %entry
  %17 = load %union.tree_node**, %union.tree_node*** %num.addr, align 8, !dbg !6662
  store %union.tree_node* null, %union.tree_node** %17, align 8, !dbg !6663
  store i8 0, i8* %retval, align 1, !dbg !6664
  br label %return, !dbg !6664

return:                                           ; preds = %if.end20, %if.then17, %if.then13, %if.then5
  %18 = load i8, i8* %retval, align 1, !dbg !6665
  ret i8 %18, !dbg !6665
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6666 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6667, metadata !DIExpression()), !dbg !6668
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6669, metadata !DIExpression()), !dbg !6670
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6671
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6672
  store i32 %call, i32* %code, align 4, !dbg !6670
  %1 = load i32, i32* %code, align 4, !dbg !6673
  %cmp = icmp eq i32 %1, 6, !dbg !6675
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6676

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6677
  %cmp1 = icmp eq i32 %2, 1, !dbg !6678
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6679

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6680
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6681
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6682
  %bf.load = load i32, i32* %4, align 8, !dbg !6682
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6682
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6683
  br label %return, !dbg !6683

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6684
  %cmp2 = icmp eq i32 %5, 8, !dbg !6686
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6687

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6688
  br label %return, !dbg !6688

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6689
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6690
  br label %return, !dbg !6690

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6691
  ret i32 %6, !dbg !6691
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6692 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6695, metadata !DIExpression()), !dbg !6696
  %0 = load i32, i32* %code.addr, align 4, !dbg !6697
  %idxprom = sext i32 %0 to i64, !dbg !6698
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6698
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6698
  %conv = zext i8 %1 to i32, !dbg !6699
  ret i32 %conv, !dbg !6700
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6701 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6704, metadata !DIExpression()), !dbg !6705
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6706
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6707
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6708
  %1 = load i32, i32* %num_ops, align 4, !dbg !6708
  ret i32 %1, !dbg !6709
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6710 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6714, metadata !DIExpression()), !dbg !6715
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6716, metadata !DIExpression()), !dbg !6717
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6718, metadata !DIExpression()), !dbg !6719
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6720
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6721
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6722
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !6723
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6724
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !6725
  store i32 1, i32* %iter_type, align 4, !dbg !6726
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6727
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !6728
  ret %union.tree_node* %call, !dbg !6729
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6730 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6735, metadata !DIExpression()), !dbg !6736
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6737
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6738
  %1 = load i8, i8* %done, align 8, !dbg !6738
  ret i8 %1, !dbg !6739
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6740 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6743, metadata !DIExpression()), !dbg !6744
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6745, metadata !DIExpression()), !dbg !6746
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6747
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6749
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6749
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6747
  br i1 %tobool, label %if.then, label %if.end, !dbg !6750

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6751
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6751
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6751
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6751
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !6751
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !6753
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6754
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6755
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6755
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6756
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6756
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6757
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6758
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6759
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6760
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !6761
  br label %return, !dbg !6761

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6762
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !6764
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6764
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !6762
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !6765

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6766
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6766
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !6766
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !6766
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6766
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !6766
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !6768
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6769
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6770
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !6770
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !6771
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !6771
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6772
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !6773
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !6774
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6775
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !6776
  br label %return, !dbg !6776

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6777
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !6778
  store i8 1, i8* %done, align 8, !dbg !6779
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6780
  br label %return, !dbg !6780

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6781
  ret %union.tree_node* %20, !dbg !6781
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6782 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6785, metadata !DIExpression()), !dbg !6786
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6787, metadata !DIExpression()), !dbg !6788
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6789, metadata !DIExpression()), !dbg !6790
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6791
  %and = and i32 %0, 8, !dbg !6791
  %tobool = icmp ne i32 %and, 0, !dbg !6791
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !6791

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6791
  %and1 = and i32 %1, 2, !dbg !6791
  %tobool2 = icmp ne i32 %and1, 0, !dbg !6791
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !6791

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6791
  %and3 = and i32 %2, 4, !dbg !6791
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6791
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !6791

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6791
  %and6 = and i32 %3, 1, !dbg !6791
  %tobool7 = icmp ne i32 %and6, 0, !dbg !6791
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !6791

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6791
  br label %cond.end, !dbg !6791

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !6791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6791
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6792
  %and8 = and i32 %4, 10, !dbg !6793
  %tobool9 = icmp ne i32 %and8, 0, !dbg !6793
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !6794

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6795
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !6796
  br label %cond.end12, !dbg !6794

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !6794

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !6794
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6797
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !6798
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !6799
  %7 = load i32, i32* %flags.addr, align 4, !dbg !6800
  %and14 = and i32 %7, 8, !dbg !6802
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6802
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !6803

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6804
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6805
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !6805
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !6804
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !6806

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6807
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !6808
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !6809
  br i1 %cmp, label %if.then, label %if.end, !dbg !6810

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6811
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6812
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !6812
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !6813
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6813
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6814
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6815
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !6816
  br label %if.end, !dbg !6814

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !6817
  %and23 = and i32 %15, 5, !dbg !6818
  %tobool24 = icmp ne i32 %and23, 0, !dbg !6818
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !6819

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6820
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !6821
  br label %cond.end28, !dbg !6819

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !6819

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !6819
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6822
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !6823
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !6824
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6825
  %and30 = and i32 %18, 4, !dbg !6827
  %tobool31 = icmp ne i32 %and30, 0, !dbg !6827
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !6828

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6829
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !6830
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !6830
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !6829
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !6831

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6832
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !6833
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !6834
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !6835

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6836
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !6837
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !6837
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !6838
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !6838
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6839
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !6840
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !6841
  br label %if.end42, !dbg !6839

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6842
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !6843
  store i8 0, i8* %done, align 8, !dbg !6844
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6845
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !6846
  store i32 0, i32* %phi_i, align 8, !dbg !6847
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6848
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !6849
  store i32 0, i32* %num_phi, align 4, !dbg !6850
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6851
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !6852
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6853
  ret void, !dbg !6854
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !6855 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6858, metadata !DIExpression()), !dbg !6859
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6860
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6862
  %tobool = icmp ne i8 %call, 0, !dbg !6862
  br i1 %tobool, label %if.end, label %if.then, !dbg !6863

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !6864
  br label %return, !dbg !6864

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6865
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6866
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6867
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !6868
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !6868
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !6869
  br label %return, !dbg !6869

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !6870
  ret %struct.def_optype_d* %3, !dbg !6870
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6871 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6872, metadata !DIExpression()), !dbg !6873
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6874
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6876
  %tobool = icmp ne i8 %call, 0, !dbg !6876
  br i1 %tobool, label %if.end, label %if.then, !dbg !6877

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6878
  br label %return, !dbg !6878

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6879
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6880
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6881
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6881
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6882
  br label %return, !dbg !6882

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6883
  ret %union.tree_node* %3, !dbg !6883
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !6884 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6887, metadata !DIExpression()), !dbg !6888
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6889
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6891
  %tobool = icmp ne i8 %call, 0, !dbg !6891
  br i1 %tobool, label %if.end, label %if.then, !dbg !6892

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !6893
  br label %return, !dbg !6893

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6894
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6895
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6896
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6897
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !6897
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !6898
  br label %return, !dbg !6898

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !6899
  ret %struct.use_optype_d* %3, !dbg !6899
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !6900 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6901, metadata !DIExpression()), !dbg !6902
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6903
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6905
  %tobool = icmp ne i8 %call, 0, !dbg !6905
  br i1 %tobool, label %if.end, label %if.then, !dbg !6906

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6907
  br label %return, !dbg !6907

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6908
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6909
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6910
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6910
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6911
  br label %return, !dbg !6911

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6912
  ret %union.tree_node* %3, !dbg !6912
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6913 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6914, metadata !DIExpression()), !dbg !6915
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6916
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6917
  %cmp = icmp uge i32 %call, 6, !dbg !6918
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6919

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6920
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6921
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6922
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6923
  %land.ext = zext i1 %2 to i32, !dbg !6919
  %conv = trunc i32 %land.ext to i8, !dbg !6917
  ret i8 %conv, !dbg !6924
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6925 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6928, metadata !DIExpression()), !dbg !6929
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6930
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6931
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6931
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6932
  ret %union.tree_node* %2, !dbg !6933
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6934 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6940
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6941
  ret %union.tree_node* %1, !dbg !6942
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6943 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6944, metadata !DIExpression()), !dbg !6945
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6946
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6947
  %cmp = icmp eq i32 %call, 6, !dbg !6948
  %conv = zext i1 %cmp to i32, !dbg !6948
  %conv1 = trunc i32 %conv to i8, !dbg !6947
  ret i8 %conv1, !dbg !6949
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.field_access_site* @is_in_field_accs(%union.gimple_statement_d* %stmt, %struct.htab* %f_accs) #0 !dbg !6950 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %f_accs.addr = alloca %struct.htab*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6953, metadata !DIExpression()), !dbg !6954
  store %struct.htab* %f_accs, %struct.htab** %f_accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %f_accs.addr, metadata !6955, metadata !DIExpression()), !dbg !6956
  %0 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !6957
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6958
  %2 = bitcast %union.gimple_statement_d* %1 to i8*, !dbg !6958
  %3 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6959
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6960
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !6960
  %call = call i32 %3(i8* %5), !dbg !6959
  %call1 = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %2, i32 %call), !dbg !6961
  %6 = bitcast i8* %call1 to %struct.field_access_site*, !dbg !6962
  ret %struct.field_access_site* %6, !dbg !6963
}

; Function Attrs: noinline nounwind uwtable
define internal void @exclude_alloc_and_field_accs_1(%struct.data_structure* %str, %struct.cgraph_node* %node) #0 !dbg !6964 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %dt = alloca %struct.exclude_data, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !6967, metadata !DIExpression()), !dbg !6968
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6969, metadata !DIExpression()), !dbg !6970
  call void @llvm.dbg.declare(metadata %struct.exclude_data* %dt, metadata !6971, metadata !DIExpression()), !dbg !6972
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !6973
  %str1 = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %dt, i32 0, i32 1, !dbg !6974
  store %struct.data_structure* %0, %struct.data_structure** %str1, align 8, !dbg !6975
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6976
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !6977
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6977
  %fn_decl = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %dt, i32 0, i32 0, !dbg !6978
  store %union.tree_node* %2, %union.tree_node** %fn_decl, align 8, !dbg !6979
  %str2 = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %dt, i32 0, i32 1, !dbg !6980
  %3 = load %struct.data_structure*, %struct.data_structure** %str2, align 8, !dbg !6980
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 4, !dbg !6982
  %4 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !6982
  %tobool = icmp ne %struct.htab* %4, null, !dbg !6983
  br i1 %tobool, label %if.then, label %if.end, !dbg !6984

if.then:                                          ; preds = %entry
  %str3 = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %dt, i32 0, i32 1, !dbg !6985
  %5 = load %struct.data_structure*, %struct.data_structure** %str3, align 8, !dbg !6985
  %accs4 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 4, !dbg !6986
  %6 = load %struct.htab*, %struct.htab** %accs4, align 8, !dbg !6986
  %7 = bitcast %struct.exclude_data* %dt to i8*, !dbg !6987
  call void @htab_traverse(%struct.htab* %6, i32 (i8**, i8*)* @exclude_from_accs, i8* %7), !dbg !6988
  br label %if.end, !dbg !6988

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6989
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @exclude_from_accs(i8** %slot, i8* %data) #0 !dbg !6990 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %acc = alloca %struct.access_site*, align 8
  %fn_decl = alloca %union.tree_node*, align 8
  %str = alloca %struct.data_structure*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !6991, metadata !DIExpression()), !dbg !6992
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6993, metadata !DIExpression()), !dbg !6994
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !6995, metadata !DIExpression()), !dbg !6996
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !6997
  %1 = bitcast i8** %0 to %struct.access_site**, !dbg !6998
  %2 = load %struct.access_site*, %struct.access_site** %1, align 8, !dbg !6998
  store %struct.access_site* %2, %struct.access_site** %acc, align 8, !dbg !6996
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl, metadata !6999, metadata !DIExpression()), !dbg !7000
  %3 = load i8*, i8** %data.addr, align 8, !dbg !7001
  %4 = bitcast i8* %3 to %struct.exclude_data*, !dbg !7002
  %fn_decl1 = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %4, i32 0, i32 0, !dbg !7003
  %5 = load %union.tree_node*, %union.tree_node** %fn_decl1, align 8, !dbg !7003
  store %union.tree_node* %5, %union.tree_node** %fn_decl, align 8, !dbg !7000
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !7004, metadata !DIExpression()), !dbg !7005
  %6 = load i8*, i8** %data.addr, align 8, !dbg !7006
  %7 = bitcast i8* %6 to %struct.exclude_data*, !dbg !7007
  %str2 = getelementptr inbounds %struct.exclude_data, %struct.exclude_data* %7, i32 0, i32 1, !dbg !7008
  %8 = load %struct.data_structure*, %struct.data_structure** %str2, align 8, !dbg !7008
  store %struct.data_structure* %8, %struct.data_structure** %str, align 8, !dbg !7005
  %9 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7009
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %9, i32 0, i32 0, !dbg !7011
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7011
  %11 = load %union.tree_node*, %union.tree_node** %fn_decl, align 8, !dbg !7012
  %call = call zeroext i8 @is_part_of_malloc(%union.gimple_statement_d* %10, %union.tree_node* %11), !dbg !7013
  %conv = zext i8 %call to i32, !dbg !7013
  %tobool = icmp ne i32 %conv, 0, !dbg !7013
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7014

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7015
  %stmt3 = getelementptr inbounds %struct.access_site, %struct.access_site* %12, i32 0, i32 0, !dbg !7016
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !7016
  %14 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7017
  %call4 = call zeroext i8 @is_part_of_field_access(%union.gimple_statement_d* %13, %struct.data_structure* %14), !dbg !7018
  %conv5 = zext i8 %call4 to i32, !dbg !7018
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !7018
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7019

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7020
  %vars = getelementptr inbounds %struct.access_site, %struct.access_site* %15, i32 0, i32 1, !dbg !7020
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vars), !dbg !7020
  %16 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7022
  %17 = bitcast %struct.access_site* %16 to i8*, !dbg !7022
  call void @free(i8* %17), !dbg !7023
  %18 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7024
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %18, i32 0, i32 4, !dbg !7025
  %19 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !7025
  %20 = load i8**, i8*** %slot.addr, align 8, !dbg !7026
  call void @htab_clear_slot(%struct.htab* %19, i8** %20), !dbg !7027
  br label %if.end, !dbg !7028

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret i32 1, !dbg !7029
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_part_of_malloc(%union.gimple_statement_d* %stmt, %union.tree_node* %fn_decl) #0 !dbg !7030 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fn_decl.addr = alloca %union.tree_node*, align 8
  %fallocs = alloca %struct.func_alloc_sites*, align 8
  %call1 = alloca %struct.alloc_site*, align 8
  %i = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7033, metadata !DIExpression()), !dbg !7034
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !7035, metadata !DIExpression()), !dbg !7036
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %fallocs, metadata !7037, metadata !DIExpression()), !dbg !7038
  %0 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !7039
  %call = call %struct.func_alloc_sites* @get_fallocs(%union.tree_node* %0), !dbg !7040
  store %struct.func_alloc_sites* %call, %struct.func_alloc_sites** %fallocs, align 8, !dbg !7038
  %1 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !7041
  %tobool = icmp ne %struct.func_alloc_sites* %1, null, !dbg !7041
  br i1 %tobool, label %if.then, label %if.end11, !dbg !7043

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %call1, metadata !7044, metadata !DIExpression()), !dbg !7046
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7047, metadata !DIExpression()), !dbg !7048
  store i32 0, i32* %i, align 4, !dbg !7049
  br label %for.cond, !dbg !7051

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !7052
  %allocs = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %2, i32 0, i32 1, !dbg !7052
  %3 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs, align 8, !dbg !7052
  %tobool2 = icmp ne %struct.VEC_alloc_site_t_heap* %3, null, !dbg !7052
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !7052

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !7052
  %allocs3 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %4, i32 0, i32 1, !dbg !7052
  %5 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs3, align 8, !dbg !7052
  %base = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %5, i32 0, i32 0, !dbg !7052
  br label %cond.end, !dbg !7052

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7052

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alloc_site_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7052
  %6 = load i32, i32* %i, align 4, !dbg !7052
  %call4 = call i32 @VEC_alloc_site_t_base_iterate(%struct.VEC_alloc_site_t_base* %cond, i32 %6, %struct.alloc_site** %call1), !dbg !7052
  %tobool5 = icmp ne i32 %call4, 0, !dbg !7054
  br i1 %tobool5, label %for.body, label %for.end, !dbg !7054

for.body:                                         ; preds = %cond.end
  %7 = load %struct.alloc_site*, %struct.alloc_site** %call1, align 8, !dbg !7055
  %stmt6 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %7, i32 0, i32 0, !dbg !7057
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !7057
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7058
  %cmp = icmp eq %union.gimple_statement_d* %8, %9, !dbg !7059
  br i1 %cmp, label %if.then10, label %lor.lhs.false, !dbg !7060

lor.lhs.false:                                    ; preds = %for.body
  %10 = load %struct.alloc_site*, %struct.alloc_site** %call1, align 8, !dbg !7061
  %stmt7 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %10, i32 0, i32 0, !dbg !7062
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt7, align 8, !dbg !7062
  %call8 = call %union.gimple_statement_d* @get_final_alloc_stmt(%union.gimple_statement_d* %11), !dbg !7063
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7064
  %cmp9 = icmp eq %union.gimple_statement_d* %call8, %12, !dbg !7065
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !7066

if.then10:                                        ; preds = %lor.lhs.false, %for.body
  store i8 1, i8* %retval, align 1, !dbg !7067
  br label %return, !dbg !7067

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc, !dbg !7064

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !7068
  %inc = add i32 %13, 1, !dbg !7068
  store i32 %inc, i32* %i, align 4, !dbg !7068
  br label %for.cond, !dbg !7069, !llvm.loop !7070

for.end:                                          ; preds = %cond.end
  br label %if.end11, !dbg !7072

if.end11:                                         ; preds = %for.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !7073
  br label %return, !dbg !7073

return:                                           ; preds = %if.end11, %if.then10
  %14 = load i8, i8* %retval, align 1, !dbg !7074
  ret i8 %14, !dbg !7074
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_part_of_field_access(%union.gimple_statement_d* %stmt, %struct.data_structure* %str) #0 !dbg !7075 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  %data = alloca %struct.find_stmt_data, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7078, metadata !DIExpression()), !dbg !7079
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7080, metadata !DIExpression()), !dbg !7081
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7082, metadata !DIExpression()), !dbg !7083
  store i32 0, i32* %i, align 4, !dbg !7084
  br label %for.cond, !dbg !7086

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7087
  %1 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7089
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %1, i32 0, i32 1, !dbg !7090
  %2 = load i32, i32* %num_fields, align 8, !dbg !7090
  %cmp = icmp slt i32 %0, %2, !dbg !7091
  br i1 %cmp, label %for.body, label %for.end, !dbg !7092

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.find_stmt_data* %data, metadata !7093, metadata !DIExpression()), !dbg !7095
  %found = getelementptr inbounds %struct.find_stmt_data, %struct.find_stmt_data* %data, i32 0, i32 0, !dbg !7096
  store i8 0, i8* %found, align 8, !dbg !7097
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7098
  %stmt1 = getelementptr inbounds %struct.find_stmt_data, %struct.find_stmt_data* %data, i32 0, i32 1, !dbg !7099
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %stmt1, align 8, !dbg !7100
  %4 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7101
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %4, i32 0, i32 3, !dbg !7103
  %5 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !7103
  %6 = load i32, i32* %i, align 4, !dbg !7104
  %idxprom = sext i32 %6 to i64, !dbg !7101
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %5, i64 %idxprom, !dbg !7101
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 4, !dbg !7105
  %7 = load %struct.htab*, %struct.htab** %acc_sites, align 8, !dbg !7105
  %tobool = icmp ne %struct.htab* %7, null, !dbg !7101
  br i1 %tobool, label %if.then, label %if.end, !dbg !7106

if.then:                                          ; preds = %for.body
  %8 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7107
  %fields2 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %8, i32 0, i32 3, !dbg !7108
  %9 = load %struct.field_entry*, %struct.field_entry** %fields2, align 8, !dbg !7108
  %10 = load i32, i32* %i, align 4, !dbg !7109
  %idxprom3 = sext i32 %10 to i64, !dbg !7107
  %arrayidx4 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %9, i64 %idxprom3, !dbg !7107
  %acc_sites5 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx4, i32 0, i32 4, !dbg !7110
  %11 = load %struct.htab*, %struct.htab** %acc_sites5, align 8, !dbg !7110
  %12 = bitcast %struct.find_stmt_data* %data to i8*, !dbg !7111
  call void @htab_traverse(%struct.htab* %11, i32 (i8**, i8*)* @find_in_field_accs, i8* %12), !dbg !7112
  br label %if.end, !dbg !7112

if.end:                                           ; preds = %if.then, %for.body
  %found6 = getelementptr inbounds %struct.find_stmt_data, %struct.find_stmt_data* %data, i32 0, i32 0, !dbg !7113
  %13 = load i8, i8* %found6, align 8, !dbg !7113
  %tobool7 = icmp ne i8 %13, 0, !dbg !7115
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !7116

if.then8:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7117
  br label %return, !dbg !7117

if.end9:                                          ; preds = %if.end
  br label %for.inc, !dbg !7118

for.inc:                                          ; preds = %if.end9
  %14 = load i32, i32* %i, align 4, !dbg !7119
  %inc = add nsw i32 %14, 1, !dbg !7119
  store i32 %inc, i32* %i, align 4, !dbg !7119
  br label %for.cond, !dbg !7120, !llvm.loop !7121

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7123
  br label %return, !dbg !7123

return:                                           ; preds = %for.end, %if.then8
  %15 = load i8, i8* %retval, align 1, !dbg !7124
  ret i8 %15, !dbg !7124
}

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.func_alloc_sites* @get_fallocs(%union.tree_node* %fn_decl) #0 !dbg !7125 {
entry:
  %fn_decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !7128, metadata !DIExpression()), !dbg !7129
  %0 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !7130
  %1 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !7131
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !7131
  %3 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !7132
  %4 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !7133
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !7133
  %call = call i32 %3(i8* %5), !dbg !7132
  %call1 = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %2, i32 %call), !dbg !7134
  %6 = bitcast i8* %call1 to %struct.func_alloc_sites*, !dbg !7135
  ret %struct.func_alloc_sites* %6, !dbg !7136
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_in_field_accs(i8** %slot, i8* %data) #0 !dbg !7137 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %f_acc = alloca %struct.field_access_site*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7138, metadata !DIExpression()), !dbg !7139
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7140, metadata !DIExpression()), !dbg !7141
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %f_acc, metadata !7142, metadata !DIExpression()), !dbg !7143
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7144
  %1 = bitcast i8** %0 to %struct.field_access_site**, !dbg !7145
  %2 = load %struct.field_access_site*, %struct.field_access_site** %1, align 8, !dbg !7145
  store %struct.field_access_site* %2, %struct.field_access_site** %f_acc, align 8, !dbg !7143
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7146, metadata !DIExpression()), !dbg !7147
  %3 = load i8*, i8** %data.addr, align 8, !dbg !7148
  %4 = bitcast i8* %3 to %struct.find_stmt_data*, !dbg !7149
  %stmt1 = getelementptr inbounds %struct.find_stmt_data, %struct.find_stmt_data* %4, i32 0, i32 1, !dbg !7150
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !7150
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !7147
  %6 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7151
  %stmt2 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %6, i32 0, i32 0, !dbg !7153
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !7153
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7154
  %cmp = icmp eq %union.gimple_statement_d* %7, %8, !dbg !7155
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7156

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7157
  %ref_def_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %9, i32 0, i32 7, !dbg !7158
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt, align 8, !dbg !7158
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7159
  %cmp3 = icmp eq %union.gimple_statement_d* %10, %11, !dbg !7160
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !7161

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %12 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7162
  %cast_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %12, i32 0, i32 8, !dbg !7163
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt, align 8, !dbg !7163
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7164
  %cmp5 = icmp eq %union.gimple_statement_d* %13, %14, !dbg !7165
  br i1 %cmp5, label %if.then, label %if.else, !dbg !7166

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %15 = load i8*, i8** %data.addr, align 8, !dbg !7167
  %16 = bitcast i8* %15 to %struct.find_stmt_data*, !dbg !7169
  %found = getelementptr inbounds %struct.find_stmt_data, %struct.find_stmt_data* %16, i32 0, i32 0, !dbg !7170
  store i8 1, i8* %found, align 8, !dbg !7171
  store i32 0, i32* %retval, align 4, !dbg !7172
  br label %return, !dbg !7172

if.else:                                          ; preds = %lor.lhs.false4
  store i32 1, i32* %retval, align 4, !dbg !7173
  br label %return, !dbg !7173

return:                                           ; preds = %if.else, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !7174
  ret i32 %17, !dbg !7174
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @safe_cond_expr_check(i8** %slot, i8* %data) #0 !dbg !7175 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %acc = alloca %struct.access_site*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7176, metadata !DIExpression()), !dbg !7177
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7178, metadata !DIExpression()), !dbg !7179
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !7180, metadata !DIExpression()), !dbg !7181
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7182
  %1 = bitcast i8** %0 to %struct.access_site**, !dbg !7183
  %2 = load %struct.access_site*, %struct.access_site** %1, align 8, !dbg !7183
  store %struct.access_site* %2, %struct.access_site** %acc, align 8, !dbg !7181
  %3 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7184
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %3, i32 0, i32 0, !dbg !7186
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7186
  %call = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !7187
  %cmp = icmp eq i32 %call, 1, !dbg !7188
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !7189

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7190
  %stmt1 = getelementptr inbounds %struct.access_site, %struct.access_site* %5, i32 0, i32 0, !dbg !7191
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !7191
  %call2 = call zeroext i8 @is_safe_cond_expr(%union.gimple_statement_d* %6), !dbg !7192
  %tobool = icmp ne i8 %call2, 0, !dbg !7192
  br i1 %tobool, label %if.end7, label %if.then, !dbg !7193

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7194
  %tobool3 = icmp ne %struct._IO_FILE* %7, null, !dbg !7194
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !7197

if.then4:                                         ; preds = %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7198
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.28, i64 0, i64 0)), !dbg !7200
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7201
  %10 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7202
  %stmt6 = getelementptr inbounds %struct.access_site, %struct.access_site* %10, i32 0, i32 0, !dbg !7203
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !7203
  call void @print_gimple_stmt(%struct._IO_FILE* %9, %union.gimple_statement_d* %11, i32 0, i32 0), !dbg !7204
  br label %if.end, !dbg !7205

if.end:                                           ; preds = %if.then4, %if.then
  %12 = load i8*, i8** %data.addr, align 8, !dbg !7206
  store i8 0, i8* %12, align 1, !dbg !7207
  store i32 0, i32* %retval, align 4, !dbg !7208
  br label %return, !dbg !7208

if.end7:                                          ; preds = %land.lhs.true, %entry
  store i32 1, i32* %retval, align 4, !dbg !7209
  br label %return, !dbg !7209

return:                                           ; preds = %if.end7, %if.end
  %13 = load i32, i32* %retval, align 4, !dbg !7210
  ret i32 %13, !dbg !7210
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_safe_cond_expr(%union.gimple_statement_d* %cond_stmt) #0 !dbg !7211 {
entry:
  %retval = alloca i8, align 1
  %cond_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %str0 = alloca i32, align 4
  %str1 = alloca i32, align 4
  %s0 = alloca i8, align 1
  %s1 = alloca i8, align 1
  %length = alloca i32, align 4
  store %union.gimple_statement_d* %cond_stmt, %union.gimple_statement_d** %cond_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt.addr, metadata !7214, metadata !DIExpression()), !dbg !7215
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !7216, metadata !DIExpression()), !dbg !7217
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !7218, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata i32* %str0, metadata !7220, metadata !DIExpression()), !dbg !7221
  call void @llvm.dbg.declare(metadata i32* %str1, metadata !7222, metadata !DIExpression()), !dbg !7223
  call void @llvm.dbg.declare(metadata i8* %s0, metadata !7224, metadata !DIExpression()), !dbg !7225
  call void @llvm.dbg.declare(metadata i8* %s1, metadata !7226, metadata !DIExpression()), !dbg !7227
  call void @llvm.dbg.declare(metadata i32* %length, metadata !7228, metadata !DIExpression()), !dbg !7229
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7230
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !7230
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7230

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7230
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !7230
  br label %cond.end, !dbg !7230

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7230

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7230
  %call = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !7230
  store i32 %call, i32* %length, align 4, !dbg !7229
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !7231
  %call1 = call i32 @gimple_cond_code(%union.gimple_statement_d* %2), !dbg !7233
  %cmp = icmp ne i32 %call1, 101, !dbg !7234
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7235

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !7236
  %call2 = call i32 @gimple_cond_code(%union.gimple_statement_d* %3), !dbg !7237
  %cmp3 = icmp ne i32 %call2, 102, !dbg !7238
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7239

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7240
  br label %return, !dbg !7240

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !7241
  %call4 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %4), !dbg !7242
  store %union.tree_node* %call4, %union.tree_node** %arg0, align 8, !dbg !7243
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !7244
  %call5 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %5), !dbg !7245
  store %union.tree_node* %call5, %union.tree_node** %arg1, align 8, !dbg !7246
  %6 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !7247
  %call6 = call %union.tree_node* @get_type_of_var(%union.tree_node* %6), !dbg !7248
  %call7 = call %union.tree_node* @strip_type(%union.tree_node* %call6), !dbg !7249
  %call8 = call i32 @find_structure(%union.tree_node* %call7), !dbg !7250
  store i32 %call8, i32* %str0, align 4, !dbg !7251
  %7 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !7252
  %call9 = call %union.tree_node* @get_type_of_var(%union.tree_node* %7), !dbg !7253
  %call10 = call %union.tree_node* @strip_type(%union.tree_node* %call9), !dbg !7254
  %call11 = call i32 @find_structure(%union.tree_node* %call10), !dbg !7255
  store i32 %call11, i32* %str1, align 4, !dbg !7256
  %8 = load i32, i32* %str0, align 4, !dbg !7257
  %9 = load i32, i32* %length, align 4, !dbg !7258
  %cmp12 = icmp ne i32 %8, %9, !dbg !7259
  %10 = zext i1 %cmp12 to i64, !dbg !7260
  %cond13 = select i1 %cmp12, i32 1, i32 0, !dbg !7260
  %conv = trunc i32 %cond13 to i8, !dbg !7260
  store i8 %conv, i8* %s0, align 1, !dbg !7261
  %11 = load i32, i32* %str1, align 4, !dbg !7262
  %12 = load i32, i32* %length, align 4, !dbg !7263
  %cmp14 = icmp ne i32 %11, %12, !dbg !7264
  %13 = zext i1 %cmp14 to i64, !dbg !7265
  %cond16 = select i1 %cmp14, i32 1, i32 0, !dbg !7265
  %conv17 = trunc i32 %cond16 to i8, !dbg !7265
  store i8 %conv17, i8* %s1, align 1, !dbg !7266
  %14 = load i8, i8* %s0, align 1, !dbg !7267
  %tobool18 = icmp ne i8 %14, 0, !dbg !7267
  br i1 %tobool18, label %if.end22, label %land.lhs.true19, !dbg !7269

land.lhs.true19:                                  ; preds = %if.end
  %15 = load i8, i8* %s1, align 1, !dbg !7270
  %tobool20 = icmp ne i8 %15, 0, !dbg !7270
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !7271

if.then21:                                        ; preds = %land.lhs.true19
  store i8 0, i8* %retval, align 1, !dbg !7272
  br label %return, !dbg !7272

if.end22:                                         ; preds = %land.lhs.true19, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !7273
  %call23 = call i32 @integer_zerop(%union.tree_node* %16), !dbg !7275
  %tobool24 = icmp ne i32 %call23, 0, !dbg !7275
  br i1 %tobool24, label %if.end29, label %land.lhs.true25, !dbg !7276

land.lhs.true25:                                  ; preds = %if.end22
  %17 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !7277
  %call26 = call i32 @integer_zerop(%union.tree_node* %17), !dbg !7278
  %tobool27 = icmp ne i32 %call26, 0, !dbg !7278
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !7279

if.then28:                                        ; preds = %land.lhs.true25
  store i8 0, i8* %retval, align 1, !dbg !7280
  br label %return, !dbg !7280

if.end29:                                         ; preds = %land.lhs.true25, %if.end22
  store i8 1, i8* %retval, align 1, !dbg !7281
  br label %return, !dbg !7281

return:                                           ; preds = %if.end29, %if.then28, %if.then21, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !7282
  ret i8 %18, !dbg !7282
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !7283 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7284, metadata !DIExpression()), !dbg !7285
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7286
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7287
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7288
  %bf.load = load i32, i32* %1, align 8, !dbg !7288
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7288
  ret i32 %bf.lshr, !dbg !7289
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7290 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7291, metadata !DIExpression()), !dbg !7292
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7293
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7294
  ret %union.tree_node* %call, !dbg !7295
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !7296 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7297, metadata !DIExpression()), !dbg !7298
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7299
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7300
  ret %union.tree_node* %call, !dbg !7301
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dump_accs(%struct.data_structure* %str) #0 !dbg !7302 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7303, metadata !DIExpression()), !dbg !7304
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7305, metadata !DIExpression()), !dbg !7306
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7307
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.29, i64 0, i64 0)), !dbg !7308
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7309
  %2 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7310
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %2, i32 0, i32 0, !dbg !7311
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7311
  call void @print_generic_expr(%struct._IO_FILE* %1, %union.tree_node* %3, i32 0), !dbg !7312
  store i32 0, i32* %i, align 4, !dbg !7313
  br label %for.cond, !dbg !7315

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !7316
  %5 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7318
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 1, !dbg !7319
  %6 = load i32, i32* %num_fields, align 8, !dbg !7319
  %cmp = icmp slt i32 %4, %6, !dbg !7320
  br i1 %cmp, label %for.body, label %for.end, !dbg !7321

for.body:                                         ; preds = %for.cond
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7322
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0)), !dbg !7324
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7325
  %9 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7326
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %9, i32 0, i32 3, !dbg !7327
  %10 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !7327
  %11 = load i32, i32* %i, align 4, !dbg !7328
  %idxprom = sext i32 %11 to i64, !dbg !7326
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %10, i64 %idxprom, !dbg !7326
  %decl2 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 2, !dbg !7329
  %12 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7329
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %12, i32 0), !dbg !7330
  %13 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7331
  %fields3 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %13, i32 0, i32 3, !dbg !7332
  %14 = load %struct.field_entry*, %struct.field_entry** %fields3, align 8, !dbg !7332
  %15 = load i32, i32* %i, align 4, !dbg !7333
  %idxprom4 = sext i32 %15 to i64, !dbg !7331
  %arrayidx5 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %14, i64 %idxprom4, !dbg !7331
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx5, i32 0, i32 4, !dbg !7334
  %16 = load %struct.htab*, %struct.htab** %acc_sites, align 8, !dbg !7334
  call void @dump_field_acc_sites(%struct.htab* %16), !dbg !7335
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7336
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i64 0, i64 0)), !dbg !7337
  br label %for.inc, !dbg !7338

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !7339
  %inc = add nsw i32 %18, 1, !dbg !7339
  store i32 %inc, i32* %i, align 4, !dbg !7339
  br label %for.cond, !dbg !7340, !llvm.loop !7341

for.end:                                          ; preds = %for.cond
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7343
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.32, i64 0, i64 0)), !dbg !7344
  %20 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7345
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %20, i32 0, i32 4, !dbg !7346
  %21 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !7346
  call void @dump_access_sites(%struct.htab* %21), !dbg !7347
  ret void, !dbg !7348
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_field_acc_sites(%struct.htab* %f_accs) #0 !dbg !7349 {
entry:
  %f_accs.addr = alloca %struct.htab*, align 8
  store %struct.htab* %f_accs, %struct.htab** %f_accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %f_accs.addr, metadata !7350, metadata !DIExpression()), !dbg !7351
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7352
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7352
  br i1 %tobool, label %if.end, label %if.then, !dbg !7354

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !7355

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !7356
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !7356
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !7358

if.then2:                                         ; preds = %if.end
  %2 = load %struct.htab*, %struct.htab** %f_accs.addr, align 8, !dbg !7359
  call void @htab_traverse(%struct.htab* %2, i32 (i8**, i8*)* @dump_field_acc, i8* null), !dbg !7360
  br label %if.end3, !dbg !7360

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !7361
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_access_sites(%struct.htab* %accs) #0 !dbg !7362 {
entry:
  %accs.addr = alloca %struct.htab*, align 8
  store %struct.htab* %accs, %struct.htab** %accs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %accs.addr, metadata !7363, metadata !DIExpression()), !dbg !7364
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7365
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7365
  br i1 %tobool, label %if.end, label %if.then, !dbg !7367

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !7368

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !7369
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !7369
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !7371

if.then2:                                         ; preds = %if.end
  %2 = load %struct.htab*, %struct.htab** %accs.addr, align 8, !dbg !7372
  call void @htab_traverse(%struct.htab* %2, i32 (i8**, i8*)* @dump_acc, i8* null), !dbg !7373
  br label %if.end3, !dbg !7373

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_field_acc(i8** %slot, i8* %data) #0 !dbg !7375 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %f_acc = alloca %struct.field_access_site*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7376, metadata !DIExpression()), !dbg !7377
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %f_acc, metadata !7380, metadata !DIExpression()), !dbg !7381
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7382
  %1 = bitcast i8** %0 to %struct.field_access_site**, !dbg !7383
  %2 = load %struct.field_access_site*, %struct.field_access_site** %1, align 8, !dbg !7383
  store %struct.field_access_site* %2, %struct.field_access_site** %f_acc, align 8, !dbg !7381
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7384
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)), !dbg !7385
  %4 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7386
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %4, i32 0, i32 0, !dbg !7388
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7388
  %tobool = icmp ne %union.gimple_statement_d* %5, null, !dbg !7386
  br i1 %tobool, label %if.then, label %if.end, !dbg !7389

if.then:                                          ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7390
  %7 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7391
  %stmt1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %7, i32 0, i32 0, !dbg !7392
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !7392
  call void @print_gimple_stmt(%struct._IO_FILE* %6, %union.gimple_statement_d* %8, i32 0, i32 0), !dbg !7393
  br label %if.end, !dbg !7393

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7394
  %ref_def_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %9, i32 0, i32 7, !dbg !7396
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt, align 8, !dbg !7396
  %tobool2 = icmp ne %union.gimple_statement_d* %10, null, !dbg !7394
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !7397

if.then3:                                         ; preds = %if.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7398
  %12 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7399
  %ref_def_stmt4 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %12, i32 0, i32 7, !dbg !7400
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt4, align 8, !dbg !7400
  call void @print_gimple_stmt(%struct._IO_FILE* %11, %union.gimple_statement_d* %13, i32 0, i32 0), !dbg !7401
  br label %if.end5, !dbg !7401

if.end5:                                          ; preds = %if.then3, %if.end
  %14 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7402
  %cast_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %14, i32 0, i32 8, !dbg !7404
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt, align 8, !dbg !7404
  %tobool6 = icmp ne %union.gimple_statement_d* %15, null, !dbg !7402
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !7405

if.then7:                                         ; preds = %if.end5
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7406
  %17 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !7407
  %cast_stmt8 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %17, i32 0, i32 8, !dbg !7408
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt8, align 8, !dbg !7408
  call void @print_gimple_stmt(%struct._IO_FILE* %16, %union.gimple_statement_d* %18, i32 0, i32 0), !dbg !7409
  br label %if.end9, !dbg !7409

if.end9:                                          ; preds = %if.then7, %if.end5
  ret i32 1, !dbg !7410
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_acc(i8** %slot, i8* %data) #0 !dbg !7411 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %acc = alloca %struct.access_site*, align 8
  %var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7414, metadata !DIExpression()), !dbg !7415
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !7416, metadata !DIExpression()), !dbg !7417
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7418
  %1 = bitcast i8** %0 to %struct.access_site**, !dbg !7419
  %2 = load %struct.access_site*, %struct.access_site** %1, align 8, !dbg !7419
  store %struct.access_site* %2, %struct.access_site** %acc, align 8, !dbg !7417
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7420, metadata !DIExpression()), !dbg !7421
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7422, metadata !DIExpression()), !dbg !7423
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7424
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)), !dbg !7425
  %4 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7426
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %4, i32 0, i32 0, !dbg !7428
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7428
  %tobool = icmp ne %union.gimple_statement_d* %5, null, !dbg !7426
  br i1 %tobool, label %if.then, label %if.end, !dbg !7429

if.then:                                          ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7430
  %7 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7431
  %stmt1 = getelementptr inbounds %struct.access_site, %struct.access_site* %7, i32 0, i32 0, !dbg !7432
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !7432
  call void @print_gimple_stmt(%struct._IO_FILE* %6, %union.gimple_statement_d* %8, i32 0, i32 0), !dbg !7433
  br label %if.end, !dbg !7433

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7434
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0)), !dbg !7435
  store i32 0, i32* %i, align 4, !dbg !7436
  br label %for.cond, !dbg !7438

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7439
  %vars = getelementptr inbounds %struct.access_site, %struct.access_site* %10, i32 0, i32 1, !dbg !7439
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7439
  %tobool3 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !7439
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !7439

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !7439
  %vars4 = getelementptr inbounds %struct.access_site, %struct.access_site* %12, i32 0, i32 1, !dbg !7439
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars4, align 8, !dbg !7439
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %13, i32 0, i32 0, !dbg !7439
  br label %cond.end, !dbg !7439

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7439
  %14 = load i32, i32* %i, align 4, !dbg !7439
  %call5 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %14, %union.tree_node** %var), !dbg !7439
  %tobool6 = icmp ne i32 %call5, 0, !dbg !7441
  br i1 %tobool6, label %for.body, label %for.end, !dbg !7441

for.body:                                         ; preds = %cond.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7442
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7444
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %16, i32 0), !dbg !7445
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7446
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !7447
  br label %for.inc, !dbg !7448

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !7449
  %inc = add i32 %18, 1, !dbg !7449
  store i32 %inc, i32* %i, align 4, !dbg !7449
  br label %for.cond, !dbg !7450, !llvm.loop !7451

for.end:                                          ; preds = %cond.end
  ret i32 1, !dbg !7453
}

; Function Attrs: noinline nounwind uwtable
define internal void @sum_counts(%struct.data_structure* %str, i64* %hottest) #0 !dbg !7454 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %hottest.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7458, metadata !DIExpression()), !dbg !7459
  store i64* %hottest, i64** %hottest.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %hottest.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7462, metadata !DIExpression()), !dbg !7463
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7464
  %count = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 2, !dbg !7465
  store i64 0, i64* %count, align 8, !dbg !7466
  store i32 0, i32* %i, align 4, !dbg !7467
  br label %for.cond, !dbg !7469

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !7470
  %2 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7472
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %2, i32 0, i32 1, !dbg !7473
  %3 = load i32, i32* %num_fields, align 8, !dbg !7473
  %cmp = icmp slt i32 %1, %3, !dbg !7474
  br i1 %cmp, label %for.body, label %for.end, !dbg !7475

for.body:                                         ; preds = %for.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7476
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !7476
  br i1 %tobool, label %if.then, label %if.end, !dbg !7479

if.then:                                          ; preds = %for.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7480
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.38, i64 0, i64 0)), !dbg !7482
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7483
  %7 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7484
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %7, i32 0, i32 3, !dbg !7485
  %8 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !7485
  %9 = load i32, i32* %i, align 4, !dbg !7486
  %idxprom = sext i32 %9 to i64, !dbg !7484
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %8, i64 %idxprom, !dbg !7484
  %decl = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 2, !dbg !7487
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7487
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %10, i32 0), !dbg !7488
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7489
  %12 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7490
  %fields1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %12, i32 0, i32 3, !dbg !7491
  %13 = load %struct.field_entry*, %struct.field_entry** %fields1, align 8, !dbg !7491
  %14 = load i32, i32* %i, align 4, !dbg !7492
  %idxprom2 = sext i32 %14 to i64, !dbg !7490
  %arrayidx3 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %13, i64 %idxprom2, !dbg !7490
  %count4 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx3, i32 0, i32 1, !dbg !7493
  %15 = load i64, i64* %count4, align 8, !dbg !7493
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i64 0, i64 0), i64 %15), !dbg !7494
  br label %if.end, !dbg !7495

if.end:                                           ; preds = %if.then, %for.body
  %16 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7496
  %fields6 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 3, !dbg !7497
  %17 = load %struct.field_entry*, %struct.field_entry** %fields6, align 8, !dbg !7497
  %18 = load i32, i32* %i, align 4, !dbg !7498
  %idxprom7 = sext i32 %18 to i64, !dbg !7496
  %arrayidx8 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %17, i64 %idxprom7, !dbg !7496
  %count9 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx8, i32 0, i32 1, !dbg !7499
  %19 = load i64, i64* %count9, align 8, !dbg !7499
  %20 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7500
  %count10 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %20, i32 0, i32 2, !dbg !7501
  %21 = load i64, i64* %count10, align 8, !dbg !7502
  %add = add nsw i64 %21, %19, !dbg !7502
  store i64 %add, i64* %count10, align 8, !dbg !7502
  br label %for.inc, !dbg !7503

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %i, align 4, !dbg !7504
  %inc = add nsw i32 %22, 1, !dbg !7504
  store i32 %inc, i32* %i, align 4, !dbg !7504
  br label %for.cond, !dbg !7505, !llvm.loop !7506

for.end:                                          ; preds = %for.cond
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7508
  %tobool11 = icmp ne %struct._IO_FILE* %23, null, !dbg !7508
  br i1 %tobool11, label %if.then12, label %if.end17, !dbg !7510

if.then12:                                        ; preds = %for.end
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7511
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0)), !dbg !7513
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7514
  %26 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7515
  %decl14 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %26, i32 0, i32 0, !dbg !7516
  %27 = load %union.tree_node*, %union.tree_node** %decl14, align 8, !dbg !7516
  call void @print_generic_expr(%struct._IO_FILE* %25, %union.tree_node* %27, i32 0), !dbg !7517
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7518
  %29 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7519
  %count15 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %29, i32 0, i32 2, !dbg !7520
  %30 = load i64, i64* %count15, align 8, !dbg !7520
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i64 0, i64 0), i64 %30), !dbg !7521
  br label %if.end17, !dbg !7522

if.end17:                                         ; preds = %if.then12, %for.end
  %31 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7523
  %count18 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %31, i32 0, i32 2, !dbg !7525
  %32 = load i64, i64* %count18, align 8, !dbg !7525
  %33 = load i64*, i64** %hottest.addr, align 8, !dbg !7526
  %34 = load i64, i64* %33, align 8, !dbg !7527
  %cmp19 = icmp sgt i64 %32, %34, !dbg !7528
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !7529

if.then20:                                        ; preds = %if.end17
  %35 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7530
  %count21 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %35, i32 0, i32 2, !dbg !7531
  %36 = load i64, i64* %count21, align 8, !dbg !7531
  %37 = load i64*, i64** %hottest.addr, align 8, !dbg !7532
  store i64 %36, i64* %37, align 8, !dbg !7533
  br label %if.end22, !dbg !7534

if.end22:                                         ; preds = %if.then20, %if.end17
  ret void, !dbg !7535
}

; Function Attrs: noinline nounwind uwtable
define internal void @peel_hot_fields(%struct.data_structure* %str) #0 !dbg !7536 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %max_field_count = alloca i64, align 8
  %fields_left = alloca %struct.simple_bitmap_def*, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7537, metadata !DIExpression()), !dbg !7538
  call void @llvm.dbg.declare(metadata i64* %max_field_count, metadata !7539, metadata !DIExpression()), !dbg !7540
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %fields_left, metadata !7541, metadata !DIExpression()), !dbg !7542
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7543
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 1, !dbg !7544
  %1 = load i32, i32* %num_fields, align 8, !dbg !7544
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %1), !dbg !7545
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7542
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7546, metadata !DIExpression()), !dbg !7547
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7548
  call void @sbitmap_ones(%struct.simple_bitmap_def* %2), !dbg !7549
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7550
  %call1 = call i64 @get_max_field_count(%struct.data_structure* %3), !dbg !7551
  %div = sdiv i64 %call1, 100, !dbg !7552
  %mul = mul nsw i64 %div, 90, !dbg !7553
  store i64 %mul, i64* %max_field_count, align 8, !dbg !7554
  %4 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7555
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %4, i32 0, i32 5, !dbg !7556
  store %struct.field_cluster* null, %struct.field_cluster** %struct_clustering, align 8, !dbg !7557
  store i32 0, i32* %i, align 4, !dbg !7558
  br label %for.cond, !dbg !7560

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !7561
  %6 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7563
  %num_fields2 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %6, i32 0, i32 1, !dbg !7564
  %7 = load i32, i32* %num_fields2, align 8, !dbg !7564
  %cmp = icmp slt i32 %5, %7, !dbg !7565
  br i1 %cmp, label %for.body, label %for.end, !dbg !7566

for.body:                                         ; preds = %for.cond
  %8 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7567
  %count = getelementptr inbounds %struct.data_structure, %struct.data_structure* %8, i32 0, i32 2, !dbg !7570
  %9 = load i64, i64* %count, align 8, !dbg !7570
  %10 = load i64, i64* %max_field_count, align 8, !dbg !7571
  %cmp3 = icmp sge i64 %9, %10, !dbg !7572
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7573

if.then:                                          ; preds = %for.body
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7574
  %12 = load i32, i32* %i, align 4, !dbg !7576
  call void @RESET_BIT(%struct.simple_bitmap_def* %11, i32 %12), !dbg !7577
  %13 = load i32, i32* %i, align 4, !dbg !7578
  %14 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7579
  call void @peel_field(i32 %13, %struct.data_structure* %14), !dbg !7580
  br label %if.end, !dbg !7581

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7582

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !7583
  %inc = add nsw i32 %15, 1, !dbg !7583
  store i32 %inc, i32* %i, align 4, !dbg !7583
  br label %for.cond, !dbg !7584, !llvm.loop !7585

for.end:                                          ; preds = %for.cond
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7587
  %call4 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %16), !dbg !7588
  store i32 %call4, i32* %i, align 4, !dbg !7589
  %17 = load i32, i32* %i, align 4, !dbg !7590
  %cmp5 = icmp ne i32 %17, -1, !dbg !7592
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !7593

if.then6:                                         ; preds = %for.end
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7594
  %19 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7595
  call void @gen_cluster(%struct.simple_bitmap_def* %18, %struct.data_structure* %19), !dbg !7596
  br label %if.end7, !dbg !7596

if.else:                                          ; preds = %for.end
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7597
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %20, i32 0, i32 0, !dbg !7597
  %21 = load i8*, i8** %popcount, align 8, !dbg !7597
  call void @free(i8* %21), !dbg !7597
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_left, align 8, !dbg !7597
  %23 = bitcast %struct.simple_bitmap_def* %22 to i8*, !dbg !7597
  call void @free(i8* %23), !dbg !7597
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then6
  ret void, !dbg !7598
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_max_field_count(%struct.data_structure* %str) #0 !dbg !7599 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %max = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7602, metadata !DIExpression()), !dbg !7603
  call void @llvm.dbg.declare(metadata i64* %max, metadata !7604, metadata !DIExpression()), !dbg !7605
  store i64 0, i64* %max, align 8, !dbg !7605
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7606, metadata !DIExpression()), !dbg !7607
  store i32 0, i32* %i, align 4, !dbg !7608
  br label %for.cond, !dbg !7610

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7611
  %1 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7613
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %1, i32 0, i32 1, !dbg !7614
  %2 = load i32, i32* %num_fields, align 8, !dbg !7614
  %cmp = icmp slt i32 %0, %2, !dbg !7615
  br i1 %cmp, label %for.body, label %for.end, !dbg !7616

for.body:                                         ; preds = %for.cond
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7617
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 3, !dbg !7619
  %4 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !7619
  %5 = load i32, i32* %i, align 4, !dbg !7620
  %idxprom = sext i32 %5 to i64, !dbg !7617
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %4, i64 %idxprom, !dbg !7617
  %count = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 1, !dbg !7621
  %6 = load i64, i64* %count, align 8, !dbg !7621
  %7 = load i64, i64* %max, align 8, !dbg !7622
  %cmp1 = icmp sgt i64 %6, %7, !dbg !7623
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7624

if.then:                                          ; preds = %for.body
  %8 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7625
  %fields2 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %8, i32 0, i32 3, !dbg !7626
  %9 = load %struct.field_entry*, %struct.field_entry** %fields2, align 8, !dbg !7626
  %10 = load i32, i32* %i, align 4, !dbg !7627
  %idxprom3 = sext i32 %10 to i64, !dbg !7625
  %arrayidx4 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %9, i64 %idxprom3, !dbg !7625
  %count5 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx4, i32 0, i32 1, !dbg !7628
  %11 = load i64, i64* %count5, align 8, !dbg !7628
  store i64 %11, i64* %max, align 8, !dbg !7629
  br label %if.end, !dbg !7630

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7622

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !7631
  %inc = add nsw i32 %12, 1, !dbg !7631
  store i32 %inc, i32* %i, align 4, !dbg !7631
  br label %for.cond, !dbg !7632, !llvm.loop !7633

for.end:                                          ; preds = %for.cond
  %13 = load i64, i64* %max, align 8, !dbg !7635
  ret i64 %13, !dbg !7636
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7637 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7640, metadata !DIExpression()), !dbg !7641
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7642, metadata !DIExpression()), !dbg !7643
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7644
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7646
  %1 = load i8*, i8** %popcount, align 8, !dbg !7646
  %tobool = icmp ne i8* %1, null, !dbg !7644
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7647

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7648, metadata !DIExpression()), !dbg !7650
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7651
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7651
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7651
  %div = udiv i32 %3, 64, !dbg !7651
  %idxprom = zext i32 %div to i64, !dbg !7651
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7651
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7651
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7651
  %rem = urem i32 %5, 64, !dbg !7651
  %sh_prom = zext i32 %rem to i64, !dbg !7651
  %shr = lshr i64 %4, %sh_prom, !dbg !7651
  %and = and i64 %shr, 1, !dbg !7651
  %conv = trunc i64 %and to i8, !dbg !7651
  store i8 %conv, i8* %oldbit, align 1, !dbg !7652
  %6 = load i8, i8* %oldbit, align 1, !dbg !7653
  %tobool1 = icmp ne i8 %6, 0, !dbg !7653
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7655

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7656
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7657
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7657
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7658
  %div4 = udiv i32 %9, 64, !dbg !7659
  %idxprom5 = zext i32 %div4 to i64, !dbg !7656
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7656
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7660
  %dec = add i8 %10, -1, !dbg !7660
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !7660
  br label %if.end, !dbg !7656

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7661

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7662
  %rem8 = urem i32 %11, 64, !dbg !7663
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7664
  %shl = shl i64 1, %sh_prom9, !dbg !7664
  %neg = xor i64 %shl, -1, !dbg !7665
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7666
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7667
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7668
  %div11 = udiv i32 %13, 64, !dbg !7669
  %idxprom12 = zext i32 %div11 to i64, !dbg !7666
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7666
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7670
  %and14 = and i64 %14, %neg, !dbg !7670
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !7670
  ret void, !dbg !7671
}

; Function Attrs: noinline nounwind uwtable
define internal void @peel_field(i32 %i, %struct.data_structure* %ds) #0 !dbg !7672 {
entry:
  %i.addr = alloca i32, align 4
  %ds.addr = alloca %struct.data_structure*, align 8
  %crr_cluster = alloca %struct.field_cluster*, align 8
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7675, metadata !DIExpression()), !dbg !7676
  store %struct.data_structure* %ds, %struct.data_structure** %ds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %ds.addr, metadata !7677, metadata !DIExpression()), !dbg !7678
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %crr_cluster, metadata !7679, metadata !DIExpression()), !dbg !7680
  %call = call i8* @xcalloc(i64 1, i64 16), !dbg !7681
  %0 = bitcast i8* %call to %struct.field_cluster*, !dbg !7681
  store %struct.field_cluster* %0, %struct.field_cluster** %crr_cluster, align 8, !dbg !7680
  %1 = load %struct.data_structure*, %struct.data_structure** %ds.addr, align 8, !dbg !7682
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %1, i32 0, i32 5, !dbg !7683
  %2 = load %struct.field_cluster*, %struct.field_cluster** %struct_clustering, align 8, !dbg !7683
  %3 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7684
  %sibling = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %3, i32 0, i32 1, !dbg !7685
  store %struct.field_cluster* %2, %struct.field_cluster** %sibling, align 8, !dbg !7686
  %4 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7687
  %5 = load %struct.data_structure*, %struct.data_structure** %ds.addr, align 8, !dbg !7688
  %struct_clustering1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 5, !dbg !7689
  store %struct.field_cluster* %4, %struct.field_cluster** %struct_clustering1, align 8, !dbg !7690
  %6 = load %struct.data_structure*, %struct.data_structure** %ds.addr, align 8, !dbg !7691
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %6, i32 0, i32 1, !dbg !7692
  %7 = load i32, i32* %num_fields, align 8, !dbg !7692
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %7), !dbg !7693
  %8 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7694
  %fields_in_cluster = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %8, i32 0, i32 0, !dbg !7695
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %fields_in_cluster, align 8, !dbg !7696
  %9 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7697
  %fields_in_cluster3 = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %9, i32 0, i32 0, !dbg !7698
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster3, align 8, !dbg !7698
  call void @sbitmap_zero(%struct.simple_bitmap_def* %10), !dbg !7699
  %11 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7700
  %fields_in_cluster4 = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %11, i32 0, i32 0, !dbg !7701
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster4, align 8, !dbg !7701
  %13 = load i32, i32* %i.addr, align 4, !dbg !7702
  call void @SET_BIT(%struct.simple_bitmap_def* %12, i32 %13), !dbg !7703
  ret void, !dbg !7704
}

declare dso_local i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gen_cluster(%struct.simple_bitmap_def* %fields, %struct.data_structure* %str) #0 !dbg !7705 {
entry:
  %fields.addr = alloca %struct.simple_bitmap_def*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %crr_cluster = alloca %struct.field_cluster*, align 8
  store %struct.simple_bitmap_def* %fields, %struct.simple_bitmap_def** %fields.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %fields.addr, metadata !7708, metadata !DIExpression()), !dbg !7709
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7710, metadata !DIExpression()), !dbg !7711
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %crr_cluster, metadata !7712, metadata !DIExpression()), !dbg !7713
  %call = call i8* @xcalloc(i64 1, i64 16), !dbg !7714
  %0 = bitcast i8* %call to %struct.field_cluster*, !dbg !7714
  store %struct.field_cluster* %0, %struct.field_cluster** %crr_cluster, align 8, !dbg !7713
  %1 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7715
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %1, i32 0, i32 5, !dbg !7716
  %2 = load %struct.field_cluster*, %struct.field_cluster** %struct_clustering, align 8, !dbg !7716
  %3 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7717
  %sibling = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %3, i32 0, i32 1, !dbg !7718
  store %struct.field_cluster* %2, %struct.field_cluster** %sibling, align 8, !dbg !7719
  %4 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7720
  %5 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7721
  %struct_clustering1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 5, !dbg !7722
  store %struct.field_cluster* %4, %struct.field_cluster** %struct_clustering1, align 8, !dbg !7723
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields.addr, align 8, !dbg !7724
  %7 = load %struct.field_cluster*, %struct.field_cluster** %crr_cluster, align 8, !dbg !7725
  %fields_in_cluster = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %7, i32 0, i32 0, !dbg !7726
  store %struct.simple_bitmap_def* %6, %struct.simple_bitmap_def** %fields_in_cluster, align 8, !dbg !7727
  ret void, !dbg !7728
}

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7729 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7730, metadata !DIExpression()), !dbg !7731
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7734
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7736
  %1 = load i8*, i8** %popcount, align 8, !dbg !7736
  %tobool = icmp ne i8* %1, null, !dbg !7734
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7737

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7738, metadata !DIExpression()), !dbg !7740
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7741
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7741
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7741
  %div = udiv i32 %3, 64, !dbg !7741
  %idxprom = zext i32 %div to i64, !dbg !7741
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7741
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7741
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7741
  %rem = urem i32 %5, 64, !dbg !7741
  %sh_prom = zext i32 %rem to i64, !dbg !7741
  %shr = lshr i64 %4, %sh_prom, !dbg !7741
  %and = and i64 %shr, 1, !dbg !7741
  %conv = trunc i64 %and to i8, !dbg !7741
  store i8 %conv, i8* %oldbit, align 1, !dbg !7742
  %6 = load i8, i8* %oldbit, align 1, !dbg !7743
  %tobool1 = icmp ne i8 %6, 0, !dbg !7743
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !7745

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7746
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7747
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7747
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7748
  %div4 = udiv i32 %9, 64, !dbg !7749
  %idxprom5 = zext i32 %div4 to i64, !dbg !7746
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7746
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7750
  %inc = add i8 %10, 1, !dbg !7750
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !7750
  br label %if.end, !dbg !7746

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7751

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7752
  %rem8 = urem i32 %11, 64, !dbg !7753
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7754
  %shl = shl i64 1, %sh_prom9, !dbg !7754
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7755
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7756
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7757
  %div11 = udiv i32 %13, 64, !dbg !7758
  %idxprom12 = zext i32 %div11 to i64, !dbg !7755
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7755
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7759
  %or = or i64 %14, %shl, !dbg !7759
  store i64 %or, i64* %arrayidx13, align 8, !dbg !7759
  ret void, !dbg !7760
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_types() #0 !dbg !7761 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  %str_num = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !7762, metadata !DIExpression()), !dbg !7763
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7764, metadata !DIExpression()), !dbg !7765
  call void @llvm.dbg.declare(metadata i32* %str_num, metadata !7766, metadata !DIExpression()), !dbg !7767
  store i32 0, i32* %str_num, align 4, !dbg !7767
  store i32 0, i32* %i, align 4, !dbg !7768
  br label %for.cond, !dbg !7770

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7771
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !7771
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7771

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7771
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !7771
  br label %cond.end, !dbg !7771

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7771

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7771
  %2 = load i32, i32* %i, align 4, !dbg !7771
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !7771
  %tobool1 = icmp ne i32 %call, 0, !dbg !7773
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7773

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7774
  call void @create_new_type(%struct.data_structure* %3, i32* %str_num), !dbg !7775
  br label %for.inc, !dbg !7775

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !7776
  %inc = add i32 %4, 1, !dbg !7776
  store i32 %inc, i32* %i, align 4, !dbg !7776
  br label %for.cond, !dbg !7777, !llvm.loop !7778

for.end:                                          ; preds = %cond.end
  ret void, !dbg !7780
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_new_types() #0 !dbg !7781 {
entry:
  %str = alloca %struct.data_structure*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !7782, metadata !DIExpression()), !dbg !7783
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7784, metadata !DIExpression()), !dbg !7785
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7786, metadata !DIExpression()), !dbg !7787
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7788, metadata !DIExpression()), !dbg !7789
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7790
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7790
  br i1 %tobool, label %if.end, label %if.then, !dbg !7792

if.then:                                          ; preds = %entry
  br label %for.end31, !dbg !7793

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7794
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.46, i64 0, i64 0)), !dbg !7795
  store i32 0, i32* %i, align 4, !dbg !7796
  br label %for.cond, !dbg !7798

for.cond:                                         ; preds = %for.inc29, %if.end
  %2 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7799
  %tobool1 = icmp ne %struct.VEC_structure_heap* %2, null, !dbg !7799
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7799

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !7799
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %3, i32 0, i32 0, !dbg !7799
  br label %cond.end, !dbg !7799

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7799

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7799
  %4 = load i32, i32* %i, align 4, !dbg !7799
  %call2 = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %4, %struct.data_structure** %str), !dbg !7799
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7801
  br i1 %tobool3, label %for.body, label %for.end31, !dbg !7801

for.body:                                         ; preds = %cond.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7802
  %tobool4 = icmp ne %struct._IO_FILE* %5, null, !dbg !7802
  br i1 %tobool4, label %if.then5, label %if.end16, !dbg !7805

if.then5:                                         ; preds = %for.body
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7806
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.47, i64 0, i64 0)), !dbg !7808
  %7 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7809
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %7, i32 0, i32 0, !dbg !7810
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7810
  call void @dump_struct_type(%union.tree_node* %8, i64 2, i64 0), !dbg !7811
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7812
  %10 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7813
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %10, i32 0, i32 6, !dbg !7813
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !7813
  %tobool7 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !7813
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !7813

cond.true8:                                       ; preds = %if.then5
  %12 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7813
  %new_types9 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %12, i32 0, i32 6, !dbg !7813
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types9, align 8, !dbg !7813
  %base10 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %13, i32 0, i32 0, !dbg !7813
  br label %cond.end12, !dbg !7813

cond.false11:                                     ; preds = %if.then5
  br label %cond.end12, !dbg !7813

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_tree_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !7813
  %call14 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond13), !dbg !7813
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.48, i64 0, i64 0), i32 %call14), !dbg !7814
  br label %if.end16, !dbg !7815

if.end16:                                         ; preds = %cond.end12, %for.body
  store i32 0, i32* %j, align 4, !dbg !7816
  br label %for.cond17, !dbg !7818

for.cond17:                                       ; preds = %for.inc, %if.end16
  %14 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7819
  %new_types18 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %14, i32 0, i32 6, !dbg !7819
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types18, align 8, !dbg !7819
  %tobool19 = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !7819
  br i1 %tobool19, label %cond.true20, label %cond.false23, !dbg !7819

cond.true20:                                      ; preds = %for.cond17
  %16 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !7819
  %new_types21 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 6, !dbg !7819
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types21, align 8, !dbg !7819
  %base22 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !7819
  br label %cond.end24, !dbg !7819

cond.false23:                                     ; preds = %for.cond17
  br label %cond.end24, !dbg !7819

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi %struct.VEC_tree_base* [ %base22, %cond.true20 ], [ null, %cond.false23 ], !dbg !7819
  %18 = load i32, i32* %j, align 4, !dbg !7819
  %call26 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond25, i32 %18, %union.tree_node** %type), !dbg !7819
  %tobool27 = icmp ne i32 %call26, 0, !dbg !7821
  br i1 %tobool27, label %for.body28, label %for.end, !dbg !7821

for.body28:                                       ; preds = %cond.end24
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7822
  call void @dump_struct_type(%union.tree_node* %19, i64 2, i64 0), !dbg !7823
  br label %for.inc, !dbg !7823

for.inc:                                          ; preds = %for.body28
  %20 = load i32, i32* %j, align 4, !dbg !7824
  %inc = add i32 %20, 1, !dbg !7824
  store i32 %inc, i32* %j, align 4, !dbg !7824
  br label %for.cond17, !dbg !7825, !llvm.loop !7826

for.end:                                          ; preds = %cond.end24
  br label %for.inc29, !dbg !7828

for.inc29:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4, !dbg !7829
  %inc30 = add i32 %21, 1, !dbg !7829
  store i32 %inc30, i32* %i, align 4, !dbg !7829
  br label %for.cond, !dbg !7830, !llvm.loop !7831

for.end31:                                        ; preds = %if.then, %cond.end
  ret void, !dbg !7833
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_global_vars() #0 !dbg !7834 {
entry:
  %current_varpool = alloca %struct.varpool_node*, align 8
  %i = alloca i64, align 8
  %varpool_size = alloca i64, align 8
  %var_decl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %current_varpool, metadata !7835, metadata !DIExpression()), !dbg !7836
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7837, metadata !DIExpression()), !dbg !7838
  call void @llvm.dbg.declare(metadata i64* %varpool_size, metadata !7839, metadata !DIExpression()), !dbg !7840
  store i64 0, i64* %varpool_size, align 8, !dbg !7840
  store i64 0, i64* %i, align 8, !dbg !7841
  br label %for.cond, !dbg !7843

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i64, i64* %i, align 8, !dbg !7844
  %cmp = icmp ult i64 %0, 2, !dbg !7846
  br i1 %cmp, label %for.body, label %for.end13, !dbg !7847

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %i, align 8, !dbg !7848
  %tobool = icmp ne i64 %1, 0, !dbg !7848
  br i1 %tobool, label %if.then, label %if.end, !dbg !7851

if.then:                                          ; preds = %for.body
  %2 = load i64, i64* %varpool_size, align 8, !dbg !7852
  %call = call %struct.htab* @htab_create(i64 %2, i32 (i8*)* @new_var_hash, i32 (i8*, i8*)* @new_var_eq, void (i8*)* null), !dbg !7853
  store %struct.htab* %call, %struct.htab** @new_global_vars, align 8, !dbg !7854
  br label %if.end, !dbg !7855

if.end:                                           ; preds = %if.then, %for.body
  %3 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !7856
  store %struct.varpool_node* %3, %struct.varpool_node** %current_varpool, align 8, !dbg !7856
  br label %for.cond1, !dbg !7856

for.cond1:                                        ; preds = %for.inc, %if.end
  %4 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !7858
  %tobool2 = icmp ne %struct.varpool_node* %4, null, !dbg !7856
  br i1 %tobool2, label %for.body3, label %for.end, !dbg !7856

for.body3:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_decl, metadata !7860, metadata !DIExpression()), !dbg !7862
  %5 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !7863
  %decl = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %5, i32 0, i32 0, !dbg !7864
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7864
  store %union.tree_node* %6, %union.tree_node** %var_decl, align 8, !dbg !7862
  %7 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !7865
  %tobool4 = icmp ne %union.tree_node* %7, null, !dbg !7865
  br i1 %tobool4, label %lor.lhs.false, label %if.then6, !dbg !7867

lor.lhs.false:                                    ; preds = %for.body3
  %8 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !7868
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7868
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7868
  %bf.load = load i64, i64* %9, align 8, !dbg !7868
  %bf.clear = and i64 %bf.load, 65535, !dbg !7868
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7868
  %cmp5 = icmp ne i32 %bf.cast, 32, !dbg !7869
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !7870

if.then6:                                         ; preds = %lor.lhs.false, %for.body3
  br label %for.inc, !dbg !7871

if.end7:                                          ; preds = %lor.lhs.false
  %10 = load i64, i64* %i, align 8, !dbg !7872
  %tobool8 = icmp ne i64 %10, 0, !dbg !7872
  br i1 %tobool8, label %if.else, label %if.then9, !dbg !7874

if.then9:                                         ; preds = %if.end7
  %11 = load i64, i64* %varpool_size, align 8, !dbg !7875
  %inc = add i64 %11, 1, !dbg !7875
  store i64 %inc, i64* %varpool_size, align 8, !dbg !7875
  br label %if.end10, !dbg !7876

if.else:                                          ; preds = %if.end7
  %12 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !7877
  %13 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !7878
  call void @create_new_var(%union.tree_node* %12, %struct.htab* %13), !dbg !7879
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then9
  br label %for.inc, !dbg !7880

for.inc:                                          ; preds = %if.end10, %if.then6
  %14 = load %struct.varpool_node*, %struct.varpool_node** %current_varpool, align 8, !dbg !7858
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %14, i32 0, i32 2, !dbg !7858
  %15 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !7858
  store %struct.varpool_node* %15, %struct.varpool_node** %current_varpool, align 8, !dbg !7858
  br label %for.cond1, !dbg !7858, !llvm.loop !7881

for.end:                                          ; preds = %for.cond1
  br label %for.inc11, !dbg !7883

for.inc11:                                        ; preds = %for.end
  %16 = load i64, i64* %i, align 8, !dbg !7884
  %inc12 = add i64 %16, 1, !dbg !7884
  store i64 %inc12, i64* %i, align 8, !dbg !7884
  br label %for.cond, !dbg !7885, !llvm.loop !7886

for.end13:                                        ; preds = %for.cond
  %17 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !7888
  %tobool14 = icmp ne %struct.htab* %17, null, !dbg !7888
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !7890

if.then15:                                        ; preds = %for.end13
  %18 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !7891
  call void @htab_traverse(%struct.htab* %18, i32 (i8**, i8*)* @update_varpool_with_new_var, i8* null), !dbg !7892
  br label %if.end16, !dbg !7892

if.end16:                                         ; preds = %if.then15, %for.end13
  ret void, !dbg !7893
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_new_vars(%struct.htab* %new_vars_htab) #0 !dbg !7894 {
entry:
  %new_vars_htab.addr = alloca %struct.htab*, align 8
  store %struct.htab* %new_vars_htab, %struct.htab** %new_vars_htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %new_vars_htab.addr, metadata !7895, metadata !DIExpression()), !dbg !7896
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7897
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7897
  br i1 %tobool, label %if.end, label %if.then, !dbg !7899

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !7900

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7901
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !7901
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !7903

if.then2:                                         ; preds = %if.end
  %2 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7904
  call void @htab_traverse(%struct.htab* %2, i32 (i8**, i8*)* @dump_new_var, i8* null), !dbg !7905
  br label %if.end3, !dbg !7905

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !7906
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_reorg_1() #0 !dbg !7907 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !7908, metadata !DIExpression()), !dbg !7909
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !7910
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !7911
  store %struct.cgraph_node* %0, %struct.cgraph_node** %node, align 8, !dbg !7913
  br label %for.cond, !dbg !7914

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7915
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !7917
  br i1 %tobool, label %for.body, label %for.end, !dbg !7917

for.body:                                         ; preds = %for.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7918
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !7920
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !7920
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !7920
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7920
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7920
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !7918
  br i1 %tobool1, label %land.lhs.true, label %if.end8, !dbg !7921

land.lhs.true:                                    ; preds = %for.body
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7922
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 0, !dbg !7923
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7923
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !7922
  br i1 %tobool2, label %if.then, label %if.end8, !dbg !7924

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7925
  %decl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !7925
  %6 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !7925
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !7925
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7925
  %7 = load %struct.function*, %struct.function** %f, align 8, !dbg !7925
  call void @push_cfun(%struct.function* %7), !dbg !7927
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7928
  %decl4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 0, !dbg !7929
  %9 = load %union.tree_node*, %union.tree_node** %decl4, align 8, !dbg !7929
  store %union.tree_node* %9, %union.tree_node** @current_function_decl, align 8, !dbg !7930
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7931
  %tobool5 = icmp ne %struct._IO_FILE* %10, null, !dbg !7931
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !7933

if.then6:                                         ; preds = %if.then
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7934
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7935
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !7935
  %13 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !7935
  %decl_minimal = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !7935
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !7935
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7935
  %identifier = bitcast %union.tree_node* %14 to %struct.tree_identifier*, !dbg !7935
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7935
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7935
  %15 = load i8*, i8** %str, align 8, !dbg !7935
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.58, i64 0, i64 0), i8* %15), !dbg !7936
  br label %if.end, !dbg !7936

if.end:                                           ; preds = %if.then6, %if.then
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7937
  call void @do_reorg_for_func(%struct.cgraph_node* %16), !dbg !7938
  call void @free_dominance_info(i32 1), !dbg !7939
  call void @free_dominance_info(i32 2), !dbg !7940
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !7941
  call void @pop_cfun(), !dbg !7942
  br label %if.end8, !dbg !7943

if.end8:                                          ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7923

for.inc:                                          ; preds = %if.end8
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7944
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 3, !dbg !7945
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7945
  store %struct.cgraph_node* %18, %struct.cgraph_node** %node, align 8, !dbg !7946
  br label %for.cond, !dbg !7947, !llvm.loop !7948

for.end:                                          ; preds = %for.cond
  call void @set_cfun(%struct.function* null), !dbg !7950
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !7951
  ret void, !dbg !7952
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_new_vars_htab(%struct.htab* %new_vars_htab) #0 !dbg !7953 {
entry:
  %new_vars_htab.addr = alloca %struct.htab*, align 8
  store %struct.htab* %new_vars_htab, %struct.htab** %new_vars_htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %new_vars_htab.addr, metadata !7954, metadata !DIExpression()), !dbg !7955
  %0 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7956
  %tobool = icmp ne %struct.htab* %0, null, !dbg !7956
  br i1 %tobool, label %if.then, label %if.end, !dbg !7958

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7959
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @free_new_var, i8* null), !dbg !7960
  br label %if.end, !dbg !7960

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7961
  call void @htab_delete(%struct.htab* %2), !dbg !7962
  store %struct.htab* null, %struct.htab** %new_vars_htab.addr, align 8, !dbg !7963
  ret void, !dbg !7964
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_type(%struct.data_structure* %str, i32* %str_num) #0 !dbg !7965 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %str_num.addr = alloca i32*, align 8
  %cluster_num = alloca i32, align 4
  %cluster = alloca %struct.field_cluster*, align 8
  %name = alloca %union.tree_node*, align 8
  %fields = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !7968, metadata !DIExpression()), !dbg !7969
  store i32* %str_num, i32** %str_num.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %str_num.addr, metadata !7970, metadata !DIExpression()), !dbg !7971
  call void @llvm.dbg.declare(metadata i32* %cluster_num, metadata !7972, metadata !DIExpression()), !dbg !7973
  store i32 0, i32* %cluster_num, align 4, !dbg !7973
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %cluster, metadata !7974, metadata !DIExpression()), !dbg !7975
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7976
  %struct_clustering = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 5, !dbg !7977
  %1 = load %struct.field_cluster*, %struct.field_cluster** %struct_clustering, align 8, !dbg !7977
  store %struct.field_cluster* %1, %struct.field_cluster** %cluster, align 8, !dbg !7975
  br label %while.cond, !dbg !7978

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.field_cluster*, %struct.field_cluster** %cluster, align 8, !dbg !7979
  %tobool = icmp ne %struct.field_cluster* %2, null, !dbg !7978
  br i1 %tobool, label %while.body, label %while.end, !dbg !7978

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !7980, metadata !DIExpression()), !dbg !7982
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7983
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 0, !dbg !7984
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7984
  %5 = load i32, i32* %cluster_num, align 4, !dbg !7985
  %6 = load i32*, i32** %str_num.addr, align 8, !dbg !7986
  %7 = load i32, i32* %6, align 4, !dbg !7987
  %call = call %union.tree_node* @gen_cluster_name(%union.tree_node* %4, i32 %5, i32 %7), !dbg !7988
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !7982
  call void @llvm.dbg.declare(metadata %union.tree_node** %fields, metadata !7989, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !7991, metadata !DIExpression()), !dbg !7992
  %8 = load i32, i32* %cluster_num, align 4, !dbg !7993
  %inc = add nsw i32 %8, 1, !dbg !7993
  store i32 %inc, i32* %cluster_num, align 4, !dbg !7993
  %9 = load %struct.field_cluster*, %struct.field_cluster** %cluster, align 8, !dbg !7994
  %10 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7995
  %fields1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %10, i32 0, i32 3, !dbg !7996
  %11 = load %struct.field_entry*, %struct.field_entry** %fields1, align 8, !dbg !7996
  %12 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !7997
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %12, i32 0, i32 1, !dbg !7998
  %13 = load i32, i32* %num_fields, align 8, !dbg !7998
  %call2 = call %union.tree_node* @create_fields(%struct.field_cluster* %9, %struct.field_entry* %11, i32 %13), !dbg !7999
  store %union.tree_node* %call2, %union.tree_node** %fields, align 8, !dbg !8000
  %14 = load %union.tree_node*, %union.tree_node** %fields, align 8, !dbg !8001
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8002
  %16 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8003
  %decl3 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 0, !dbg !8004
  %17 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !8004
  %call4 = call %union.tree_node* @build_basic_struct(%union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %17), !dbg !8005
  store %union.tree_node* %call4, %union.tree_node** %new_type, align 8, !dbg !8006
  %18 = load %struct.field_cluster*, %struct.field_cluster** %cluster, align 8, !dbg !8007
  %19 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8008
  %20 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8009
  %fields5 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %20, i32 0, i32 3, !dbg !8010
  %21 = load %struct.field_entry*, %struct.field_entry** %fields5, align 8, !dbg !8010
  %22 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8011
  %num_fields6 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %22, i32 0, i32 1, !dbg !8012
  %23 = load i32, i32* %num_fields6, align 8, !dbg !8012
  call void @update_fields_mapping(%struct.field_cluster* %18, %union.tree_node* %19, %struct.field_entry* %21, i32 %23), !dbg !8013
  %24 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8014
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %24, i32 0, i32 6, !dbg !8014
  %25 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8014
  %call7 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %new_types, %union.tree_node* %25), !dbg !8014
  %26 = load %struct.field_cluster*, %struct.field_cluster** %cluster, align 8, !dbg !8015
  %sibling = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %26, i32 0, i32 1, !dbg !8016
  %27 = load %struct.field_cluster*, %struct.field_cluster** %sibling, align 8, !dbg !8016
  store %struct.field_cluster* %27, %struct.field_cluster** %cluster, align 8, !dbg !8017
  br label %while.cond, !dbg !7978, !llvm.loop !8018

while.end:                                        ; preds = %while.cond
  %28 = load i32*, i32** %str_num.addr, align 8, !dbg !8020
  %29 = load i32, i32* %28, align 4, !dbg !8021
  %inc8 = add nsw i32 %29, 1, !dbg !8021
  store i32 %inc8, i32* %28, align 4, !dbg !8021
  ret void, !dbg !8022
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gen_cluster_name(%union.tree_node* %decl, i32 %clust_num, i32 %str_num) #0 !dbg !8023 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %clust_num.addr = alloca i32, align 4
  %str_num.addr = alloca i32, align 4
  %orig_name = alloca i8*, align 8
  %tmp_name = alloca i8*, align 8
  %prefix = alloca i8*, align 8
  %new_name = alloca i8*, align 8
  %len = alloca i64, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  %name_24 = alloca i8*, align 8
  %output_25 = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8026, metadata !DIExpression()), !dbg !8027
  store i32 %clust_num, i32* %clust_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %clust_num.addr, metadata !8028, metadata !DIExpression()), !dbg !8029
  store i32 %str_num, i32* %str_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %str_num.addr, metadata !8030, metadata !DIExpression()), !dbg !8031
  call void @llvm.dbg.declare(metadata i8** %orig_name, metadata !8032, metadata !DIExpression()), !dbg !8033
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8034
  %call = call i8* @get_type_name(%union.tree_node* %0), !dbg !8035
  store i8* %call, i8** %orig_name, align 8, !dbg !8033
  call void @llvm.dbg.declare(metadata i8** %tmp_name, metadata !8036, metadata !DIExpression()), !dbg !8037
  store i8* null, i8** %tmp_name, align 8, !dbg !8037
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !8038, metadata !DIExpression()), !dbg !8039
  call void @llvm.dbg.declare(metadata i8** %new_name, metadata !8040, metadata !DIExpression()), !dbg !8041
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8042, metadata !DIExpression()), !dbg !8043
  %1 = load i8*, i8** %orig_name, align 8, !dbg !8044
  %tobool = icmp ne i8* %1, null, !dbg !8044
  br i1 %tobool, label %if.end, label %if.then, !dbg !8046

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !8047

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !8048, metadata !DIExpression()), !dbg !8051
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i64 0, i64 0), i8** %name_, align 8, !dbg !8051
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !8052, metadata !DIExpression()), !dbg !8051
  %2 = alloca i8, i64 38, align 16, !dbg !8051
  store i8* %2, i8** %tmp_name, align 8, !dbg !8051
  store i8* %2, i8** %output_, align 8, !dbg !8051
  %3 = load i8*, i8** %output_, align 8, !dbg !8051
  %4 = load i32, i32* %str_num.addr, align 4, !dbg !8051
  %conv = sext i32 %4 to i64, !dbg !8051
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), i64 %conv), !dbg !8051
  br label %do.end, !dbg !8051

do.end:                                           ; preds = %do.body
  br label %if.end, !dbg !8051

if.end:                                           ; preds = %do.end, %entry
  %5 = load i8*, i8** %tmp_name, align 8, !dbg !8054
  %tobool2 = icmp ne i8* %5, null, !dbg !8054
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !8054

cond.true:                                        ; preds = %if.end
  %6 = load i8*, i8** %tmp_name, align 8, !dbg !8055
  br label %cond.end, !dbg !8054

cond.false:                                       ; preds = %if.end
  %7 = load i8*, i8** %orig_name, align 8, !dbg !8056
  br label %cond.end, !dbg !8054

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ %7, %cond.false ], !dbg !8054
  %call3 = call i64 @strlen(i8* %cond), !dbg !8057
  %add = add i64 %call3, 4, !dbg !8058
  store i64 %add, i64* %len, align 8, !dbg !8059
  %8 = load i64, i64* %len, align 8, !dbg !8060
  %add4 = add i64 %8, 1, !dbg !8060
  %mul = mul i64 1, %add4, !dbg !8060
  %9 = alloca i8, i64 %mul, align 16, !dbg !8060
  store i8* %9, i8** %prefix, align 8, !dbg !8061
  %10 = load i8*, i8** %prefix, align 8, !dbg !8062
  %11 = load i8*, i8** %tmp_name, align 8, !dbg !8063
  %tobool5 = icmp ne i8* %11, null, !dbg !8063
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !8063

cond.true6:                                       ; preds = %cond.end
  %12 = load i8*, i8** %tmp_name, align 8, !dbg !8064
  br label %cond.end8, !dbg !8063

cond.false7:                                      ; preds = %cond.end
  %13 = load i8*, i8** %orig_name, align 8, !dbg !8065
  br label %cond.end8, !dbg !8063

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i8* [ %12, %cond.true6 ], [ %13, %cond.false7 ], !dbg !8063
  %14 = load i8*, i8** %tmp_name, align 8, !dbg !8066
  %tobool10 = icmp ne i8* %14, null, !dbg !8066
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !8066

cond.true11:                                      ; preds = %cond.end8
  %15 = load i8*, i8** %tmp_name, align 8, !dbg !8067
  br label %cond.end13, !dbg !8066

cond.false12:                                     ; preds = %cond.end8
  %16 = load i8*, i8** %orig_name, align 8, !dbg !8068
  br label %cond.end13, !dbg !8066

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i8* [ %15, %cond.true11 ], [ %16, %cond.false12 ], !dbg !8066
  %call15 = call i64 @strlen(i8* %cond14), !dbg !8069
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %cond9, i64 %call15, i1 false), !dbg !8070
  %17 = load i8*, i8** %prefix, align 8, !dbg !8071
  %18 = load i8*, i8** %tmp_name, align 8, !dbg !8072
  %tobool16 = icmp ne i8* %18, null, !dbg !8072
  br i1 %tobool16, label %cond.true17, label %cond.false18, !dbg !8072

cond.true17:                                      ; preds = %cond.end13
  %19 = load i8*, i8** %tmp_name, align 8, !dbg !8073
  br label %cond.end19, !dbg !8072

cond.false18:                                     ; preds = %cond.end13
  %20 = load i8*, i8** %orig_name, align 8, !dbg !8074
  br label %cond.end19, !dbg !8072

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i8* [ %19, %cond.true17 ], [ %20, %cond.false18 ], !dbg !8072
  %call21 = call i64 @strlen(i8* %cond20), !dbg !8075
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %call21, !dbg !8076
  %call22 = call i8* @strcpy(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0)), !dbg !8077
  br label %do.body23, !dbg !8078

do.body23:                                        ; preds = %cond.end19
  call void @llvm.dbg.declare(metadata i8** %name_24, metadata !8079, metadata !DIExpression()), !dbg !8081
  %21 = load i8*, i8** %prefix, align 8, !dbg !8081
  store i8* %21, i8** %name_24, align 8, !dbg !8081
  call void @llvm.dbg.declare(metadata i8** %output_25, metadata !8082, metadata !DIExpression()), !dbg !8081
  %22 = load i8*, i8** %name_24, align 8, !dbg !8081
  %call26 = call i64 @strlen(i8* %22), !dbg !8081
  %add27 = add i64 %call26, 32, !dbg !8081
  %23 = alloca i8, i64 %add27, align 16, !dbg !8081
  store i8* %23, i8** %new_name, align 8, !dbg !8081
  store i8* %23, i8** %output_25, align 8, !dbg !8081
  %24 = load i8*, i8** %output_25, align 8, !dbg !8081
  %25 = load i8*, i8** %name_24, align 8, !dbg !8081
  %26 = load i32, i32* %clust_num.addr, align 4, !dbg !8081
  %conv28 = sext i32 %26 to i64, !dbg !8081
  %call29 = call i32 (i8*, i8*, ...) @sprintf(i8* %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i8* %25, i64 %conv28), !dbg !8081
  br label %do.end30, !dbg !8081

do.end30:                                         ; preds = %do.body23
  %27 = load i8*, i8** %new_name, align 8, !dbg !8083
  %call31 = call %union.tree_node* @get_identifier(i8* %27), !dbg !8084
  ret %union.tree_node* %call31, !dbg !8085
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_fields(%struct.field_cluster* %cluster, %struct.field_entry* %fields, i32 %num_fields) #0 !dbg !8086 {
entry:
  %cluster.addr = alloca %struct.field_cluster*, align 8
  %fields.addr = alloca %struct.field_entry*, align 8
  %num_fields.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %new_types = alloca %union.tree_node*, align 8
  %last = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  store %struct.field_cluster* %cluster, %struct.field_cluster** %cluster.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %cluster.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  store %struct.field_entry* %fields, %struct.field_entry** %fields.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_entry** %fields.addr, metadata !8091, metadata !DIExpression()), !dbg !8092
  store i32 %num_fields, i32* %num_fields.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_fields.addr, metadata !8093, metadata !DIExpression()), !dbg !8094
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_types, metadata !8097, metadata !DIExpression()), !dbg !8098
  store %union.tree_node* null, %union.tree_node** %new_types, align 8, !dbg !8098
  call void @llvm.dbg.declare(metadata %union.tree_node** %last, metadata !8099, metadata !DIExpression()), !dbg !8100
  store %union.tree_node* null, %union.tree_node** %last, align 8, !dbg !8100
  store i32 0, i32* %i, align 4, !dbg !8101
  br label %for.cond, !dbg !8103

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8104
  %1 = load i32, i32* %num_fields.addr, align 4, !dbg !8106
  %cmp = icmp slt i32 %0, %1, !dbg !8107
  br i1 %cmp, label %for.body, label %for.end, !dbg !8108

for.body:                                         ; preds = %for.cond
  %2 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !8109
  %fields_in_cluster = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %2, i32 0, i32 0, !dbg !8109
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster, align 8, !dbg !8109
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i32 0, i32 3, !dbg !8109
  %4 = load i32, i32* %i, align 4, !dbg !8109
  %div = udiv i32 %4, 64, !dbg !8109
  %idxprom = zext i32 %div to i64, !dbg !8109
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !8109
  %5 = load i64, i64* %arrayidx, align 8, !dbg !8109
  %6 = load i32, i32* %i, align 4, !dbg !8109
  %rem = urem i32 %6, 64, !dbg !8109
  %sh_prom = zext i32 %rem to i64, !dbg !8109
  %shr = lshr i64 %5, %sh_prom, !dbg !8109
  %and = and i64 %shr, 1, !dbg !8109
  %tobool = icmp ne i64 %and, 0, !dbg !8109
  br i1 %tobool, label %if.then, label %if.end5, !dbg !8111

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !8112, metadata !DIExpression()), !dbg !8114
  %7 = load %struct.field_entry*, %struct.field_entry** %fields.addr, align 8, !dbg !8115
  %8 = load i32, i32* %i, align 4, !dbg !8116
  %idxprom1 = sext i32 %8 to i64, !dbg !8115
  %arrayidx2 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %7, i64 %idxprom1, !dbg !8115
  %decl = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx2, i32 0, i32 2, !dbg !8117
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8117
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %9), !dbg !8118
  store %union.tree_node* %call, %union.tree_node** %new_decl, align 8, !dbg !8114
  %10 = load %union.tree_node*, %union.tree_node** %new_types, align 8, !dbg !8119
  %tobool3 = icmp ne %union.tree_node* %10, null, !dbg !8119
  br i1 %tobool3, label %if.else, label %if.then4, !dbg !8121

if.then4:                                         ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8122
  store %union.tree_node* %11, %union.tree_node** %new_types, align 8, !dbg !8123
  br label %if.end, !dbg !8124

if.else:                                          ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8125
  %13 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !8126
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !8126
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8126
  store %union.tree_node* %12, %union.tree_node** %chain, align 8, !dbg !8127
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %14 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8128
  store %union.tree_node* %14, %union.tree_node** %last, align 8, !dbg !8129
  br label %if.end5, !dbg !8130

if.end5:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !8109

for.inc:                                          ; preds = %if.end5
  %15 = load i32, i32* %i, align 4, !dbg !8131
  %inc = add nsw i32 %15, 1, !dbg !8131
  store i32 %inc, i32* %i, align 4, !dbg !8131
  br label %for.cond, !dbg !8132, !llvm.loop !8133

for.end:                                          ; preds = %for.cond
  %16 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !8135
  %common6 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !8135
  %chain7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1, !dbg !8135
  store %union.tree_node* null, %union.tree_node** %chain7, align 8, !dbg !8136
  %17 = load %union.tree_node*, %union.tree_node** %new_types, align 8, !dbg !8137
  ret %union.tree_node* %17, !dbg !8138
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_basic_struct(%union.tree_node* %fields, %union.tree_node* %name, %union.tree_node* %orig_struct) #0 !dbg !8139 {
entry:
  %fields.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %orig_struct.addr = alloca %union.tree_node*, align 8
  %attributes = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  store %union.tree_node* %fields, %union.tree_node** %fields.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fields.addr, metadata !8142, metadata !DIExpression()), !dbg !8143
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !8144, metadata !DIExpression()), !dbg !8145
  store %union.tree_node* %orig_struct, %union.tree_node** %orig_struct.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_struct.addr, metadata !8146, metadata !DIExpression()), !dbg !8147
  call void @llvm.dbg.declare(metadata %union.tree_node** %attributes, metadata !8148, metadata !DIExpression()), !dbg !8149
  store %union.tree_node* null, %union.tree_node** %attributes, align 8, !dbg !8149
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !8150, metadata !DIExpression()), !dbg !8151
  store %union.tree_node* null, %union.tree_node** %ref, align 8, !dbg !8151
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !8152, metadata !DIExpression()), !dbg !8153
  %0 = load %union.tree_node*, %union.tree_node** %orig_struct.addr, align 8, !dbg !8154
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !8154
  %attributes1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 4, !dbg !8154
  %1 = load %union.tree_node*, %union.tree_node** %attributes1, align 8, !dbg !8154
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !8154
  br i1 %tobool, label %if.then, label %if.end, !dbg !8156

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %orig_struct.addr, align 8, !dbg !8157
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !8157
  %attributes3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 4, !dbg !8157
  %3 = load %union.tree_node*, %union.tree_node** %attributes3, align 8, !dbg !8157
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %3), !dbg !8158
  store %union.tree_node* %call, %union.tree_node** %attributes, align 8, !dbg !8159
  br label %if.end, !dbg !8160

if.end:                                           ; preds = %if.then, %entry
  %call4 = call %union.tree_node* @make_node_stat(i32 16), !dbg !8161
  store %union.tree_node* %call4, %union.tree_node** %ref, align 8, !dbg !8162
  %4 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8163
  %type5 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !8163
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 2, !dbg !8163
  store %union.tree_node* null, %union.tree_node** %size, align 8, !dbg !8164
  %5 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !8165
  %call6 = call %union.tree_node* @decl_attributes(%union.tree_node** %ref, %union.tree_node* %5, i32 8), !dbg !8166
  %6 = load %union.tree_node*, %union.tree_node** %orig_struct.addr, align 8, !dbg !8167
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !8167
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !8167
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !8167
  %bf.load = load i64, i64* %7, align 8, !dbg !8167
  %bf.lshr = lshr i64 %bf.load, 41, !dbg !8167
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8167
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8167
  %8 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8168
  %common7 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !8168
  %base8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 0, !dbg !8168
  %9 = bitcast %struct.tree_base* %base8 to i64*, !dbg !8168
  %10 = zext i32 %bf.cast to i64, !dbg !8169
  %bf.load9 = load i64, i64* %9, align 8, !dbg !8169
  %bf.value = and i64 %10, 1, !dbg !8169
  %bf.shl = shl i64 %bf.value, 41, !dbg !8169
  %bf.clear10 = and i64 %bf.load9, -2199023255553, !dbg !8169
  %bf.set = or i64 %bf.clear10, %bf.shl, !dbg !8169
  store i64 %bf.set, i64* %9, align 8, !dbg !8169
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8169
  %11 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !8170
  store %union.tree_node* %11, %union.tree_node** %x, align 8, !dbg !8172
  br label %for.cond, !dbg !8173

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !8174
  %tobool11 = icmp ne %union.tree_node* %12, null, !dbg !8176
  br i1 %tobool11, label %for.body, label %for.end, !dbg !8176

for.body:                                         ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8177
  %14 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !8179
  %decl_minimal = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !8179
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !8179
  store %union.tree_node* %13, %union.tree_node** %context, align 8, !dbg !8180
  %15 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8181
  %common12 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !8181
  %base13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 0, !dbg !8181
  %16 = bitcast %struct.tree_base* %base13 to i64*, !dbg !8181
  %bf.load14 = load i64, i64* %16, align 8, !dbg !8181
  %bf.lshr15 = lshr i64 %bf.load14, 41, !dbg !8181
  %bf.clear16 = and i64 %bf.lshr15, 1, !dbg !8181
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !8181
  %17 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !8182
  %common18 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !8182
  %base19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 0, !dbg !8182
  %18 = bitcast %struct.tree_base* %base19 to i64*, !dbg !8182
  %bf.load20 = load i64, i64* %18, align 8, !dbg !8183
  %bf.lshr21 = lshr i64 %bf.load20, 41, !dbg !8183
  %bf.clear22 = and i64 %bf.lshr21, 1, !dbg !8183
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !8183
  %or = or i32 %bf.cast23, %bf.cast17, !dbg !8183
  %19 = zext i32 %or to i64, !dbg !8183
  %bf.load24 = load i64, i64* %18, align 8, !dbg !8183
  %bf.value25 = and i64 %19, 1, !dbg !8183
  %bf.shl26 = shl i64 %bf.value25, 41, !dbg !8183
  %bf.clear27 = and i64 %bf.load24, -2199023255553, !dbg !8183
  %bf.set28 = or i64 %bf.clear27, %bf.shl26, !dbg !8183
  store i64 %bf.set28, i64* %18, align 8, !dbg !8183
  %bf.result.cast29 = trunc i64 %bf.value25 to i32, !dbg !8183
  br label %for.inc, !dbg !8184

for.inc:                                          ; preds = %for.body
  %20 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !8185
  %common30 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !8185
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 1, !dbg !8185
  %21 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8185
  store %union.tree_node* %21, %union.tree_node** %x, align 8, !dbg !8186
  br label %for.cond, !dbg !8187, !llvm.loop !8188

for.end:                                          ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !8190
  %23 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8191
  %type31 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !8191
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 1, !dbg !8191
  store %union.tree_node* %22, %union.tree_node** %values, align 8, !dbg !8192
  %24 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8193
  call void @layout_type(%union.tree_node* %24), !dbg !8194
  %25 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !8195
  %26 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8196
  %type32 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !8196
  %name33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 12, !dbg !8196
  store %union.tree_node* %25, %union.tree_node** %name33, align 8, !dbg !8197
  %27 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8198
  ret %union.tree_node* %27, !dbg !8199
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_fields_mapping(%struct.field_cluster* %cluster, %union.tree_node* %new_type, %struct.field_entry* %fields, i32 %num_fields) #0 !dbg !8200 {
entry:
  %cluster.addr = alloca %struct.field_cluster*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %fields.addr = alloca %struct.field_entry*, align 8
  %num_fields.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.field_cluster* %cluster, %struct.field_cluster** %cluster.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_cluster** %cluster.addr, metadata !8203, metadata !DIExpression()), !dbg !8204
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  store %struct.field_entry* %fields, %struct.field_entry** %fields.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_entry** %fields.addr, metadata !8207, metadata !DIExpression()), !dbg !8208
  store i32 %num_fields, i32* %num_fields.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_fields.addr, metadata !8209, metadata !DIExpression()), !dbg !8210
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8211, metadata !DIExpression()), !dbg !8212
  store i32 0, i32* %i, align 4, !dbg !8213
  br label %for.cond, !dbg !8215

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8216
  %1 = load i32, i32* %num_fields.addr, align 4, !dbg !8218
  %cmp = icmp slt i32 %0, %1, !dbg !8219
  br i1 %cmp, label %for.body, label %for.end, !dbg !8220

for.body:                                         ; preds = %for.cond
  %2 = load %struct.field_cluster*, %struct.field_cluster** %cluster.addr, align 8, !dbg !8221
  %fields_in_cluster = getelementptr inbounds %struct.field_cluster, %struct.field_cluster* %2, i32 0, i32 0, !dbg !8221
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %fields_in_cluster, align 8, !dbg !8221
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i32 0, i32 3, !dbg !8221
  %4 = load i32, i32* %i, align 4, !dbg !8221
  %div = udiv i32 %4, 64, !dbg !8221
  %idxprom = zext i32 %div to i64, !dbg !8221
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !8221
  %5 = load i64, i64* %arrayidx, align 8, !dbg !8221
  %6 = load i32, i32* %i, align 4, !dbg !8221
  %rem = urem i32 %6, 64, !dbg !8221
  %sh_prom = zext i32 %rem to i64, !dbg !8221
  %shr = lshr i64 %5, %sh_prom, !dbg !8221
  %and = and i64 %shr, 1, !dbg !8221
  %tobool = icmp ne i64 %and, 0, !dbg !8221
  br i1 %tobool, label %if.then, label %if.end, !dbg !8223

if.then:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !8224
  %8 = load %struct.field_entry*, %struct.field_entry** %fields.addr, align 8, !dbg !8225
  %9 = load i32, i32* %i, align 4, !dbg !8226
  %idxprom1 = sext i32 %9 to i64, !dbg !8225
  %arrayidx2 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %8, i64 %idxprom1, !dbg !8225
  %field_mapping = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx2, i32 0, i32 3, !dbg !8227
  store %union.tree_node* %7, %union.tree_node** %field_mapping, align 8, !dbg !8228
  br label %if.end, !dbg !8225

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8221

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !8229
  %inc = add nsw i32 %10, 1, !dbg !8229
  store i32 %inc, i32* %i, align 4, !dbg !8229
  br label %for.cond, !dbg !8230, !llvm.loop !8231

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8233
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local %union.tree_node* @decl_attributes(%union.tree_node**, %union.tree_node*, i32) #2

declare dso_local void @layout_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dump_struct_type(%union.tree_node* %type, i64 %indent, i64 %shift) #0 !dbg !8234 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %indent.addr = alloca i64, align 8
  %shift.addr = alloca i64, align 8
  %struct_name = alloca i8*, align 8
  %field = alloca %union.tree_node*, align 8
  %s = alloca i64, align 8
  %f_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8237, metadata !DIExpression()), !dbg !8238
  store i64 %indent, i64* %indent.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %indent.addr, metadata !8239, metadata !DIExpression()), !dbg !8240
  store i64 %shift, i64* %shift.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift.addr, metadata !8241, metadata !DIExpression()), !dbg !8242
  call void @llvm.dbg.declare(metadata i8** %struct_name, metadata !8243, metadata !DIExpression()), !dbg !8244
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !8245, metadata !DIExpression()), !dbg !8246
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8247
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8247
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8249

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8250
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !8250
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8251

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8252

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8253
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8253
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8253
  %bf.load = load i64, i64* %3, align 8, !dbg !8253
  %bf.clear = and i64 %bf.load, 65535, !dbg !8253
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8253
  %cmp = icmp ne i32 %bf.cast, 16, !dbg !8255
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !8256

if.then2:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8257
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8259
  call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %5, i32 0), !dbg !8260
  br label %return, !dbg !8261

if.end3:                                          ; preds = %if.end
  %6 = load i64, i64* %shift.addr, align 8, !dbg !8262
  call void @print_shift(i64 %6), !dbg !8263
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8264
  %call = call i8* @get_type_name(%union.tree_node* %7), !dbg !8265
  store i8* %call, i8** %struct_name, align 8, !dbg !8266
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8267
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i64 0, i64 0)), !dbg !8268
  %9 = load i8*, i8** %struct_name, align 8, !dbg !8269
  %tobool5 = icmp ne i8* %9, null, !dbg !8269
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !8271

if.then6:                                         ; preds = %if.end3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8272
  %11 = load i8*, i8** %struct_name, align 8, !dbg !8273
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i8* %11), !dbg !8274
  br label %if.end8, !dbg !8274

if.end8:                                          ; preds = %if.then6, %if.end3
  %12 = load i64, i64* %shift.addr, align 8, !dbg !8275
  call void @print_shift(i64 %12), !dbg !8276
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8277
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i64 0, i64 0)), !dbg !8278
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8279
  %type10 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !8279
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 1, !dbg !8279
  %15 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !8279
  store %union.tree_node* %15, %union.tree_node** %field, align 8, !dbg !8281
  br label %for.cond, !dbg !8282

for.cond:                                         ; preds = %for.inc, %if.end8
  %16 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8283
  %tobool11 = icmp ne %union.tree_node* %16, null, !dbg !8285
  br i1 %tobool11, label %for.body, label %for.end, !dbg !8285

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %s, metadata !8286, metadata !DIExpression()), !dbg !8288
  %17 = load i64, i64* %indent.addr, align 8, !dbg !8289
  store i64 %17, i64* %s, align 8, !dbg !8288
  call void @llvm.dbg.declare(metadata %union.tree_node** %f_type, metadata !8290, metadata !DIExpression()), !dbg !8291
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8292
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !8292
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8292
  %19 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !8292
  store %union.tree_node* %19, %union.tree_node** %f_type, align 8, !dbg !8291
  %20 = load i64, i64* %shift.addr, align 8, !dbg !8293
  call void @print_shift(i64 %20), !dbg !8294
  br label %while.cond, !dbg !8295

while.cond:                                       ; preds = %while.body, %for.body
  %21 = load i64, i64* %s, align 8, !dbg !8296
  %dec = add i64 %21, -1, !dbg !8296
  store i64 %dec, i64* %s, align 8, !dbg !8296
  %tobool13 = icmp ne i64 %21, 0, !dbg !8295
  br i1 %tobool13, label %while.body, label %while.end, !dbg !8295

while.body:                                       ; preds = %while.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8297
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !8298
  br label %while.cond, !dbg !8295, !llvm.loop !8299

while.end:                                        ; preds = %while.cond
  %23 = load %union.tree_node*, %union.tree_node** %f_type, align 8, !dbg !8301
  %24 = load i64, i64* %indent.addr, align 8, !dbg !8302
  %25 = load i64, i64* %shift.addr, align 8, !dbg !8303
  %26 = load i64, i64* %indent.addr, align 8, !dbg !8304
  %add = add i64 %25, %26, !dbg !8305
  call void @dump_struct_type(%union.tree_node* %23, i64 %24, i64 %add), !dbg !8306
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8307
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !8308
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8309
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8310
  call void @print_generic_expr(%struct._IO_FILE* %28, %union.tree_node* %29, i32 0), !dbg !8311
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8312
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i64 0, i64 0)), !dbg !8313
  br label %for.inc, !dbg !8314

for.inc:                                          ; preds = %while.end
  %31 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8315
  %common17 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !8315
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1, !dbg !8315
  %32 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8315
  store %union.tree_node* %32, %union.tree_node** %field, align 8, !dbg !8316
  br label %for.cond, !dbg !8317, !llvm.loop !8318

for.end:                                          ; preds = %for.cond
  %33 = load i64, i64* %shift.addr, align 8, !dbg !8320
  call void @print_shift(i64 %33), !dbg !8321
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8322
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.54, i64 0, i64 0)), !dbg !8323
  br label %return, !dbg !8324

return:                                           ; preds = %for.end, %if.then2, %if.then
  ret void, !dbg !8324
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_shift(i64 %shift) #0 !dbg !8325 {
entry:
  %shift.addr = alloca i64, align 8
  %sh = alloca i64, align 8
  store i64 %shift, i64* %shift.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift.addr, metadata !8328, metadata !DIExpression()), !dbg !8329
  call void @llvm.dbg.declare(metadata i64* %sh, metadata !8330, metadata !DIExpression()), !dbg !8331
  %0 = load i64, i64* %shift.addr, align 8, !dbg !8332
  store i64 %0, i64* %sh, align 8, !dbg !8331
  br label %while.cond, !dbg !8333

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i64, i64* %sh, align 8, !dbg !8334
  %dec = add i64 %1, -1, !dbg !8334
  store i64 %dec, i64* %sh, align 8, !dbg !8334
  %tobool = icmp ne i64 %1, 0, !dbg !8333
  br i1 %tobool, label %while.body, label %while.end, !dbg !8333

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8335
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i64 0, i64 0)), !dbg !8336
  br label %while.cond, !dbg !8333, !llvm.loop !8337

while.end:                                        ; preds = %while.cond
  ret void, !dbg !8339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @new_var_hash(i8* %x) #0 !dbg !8340 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !8341, metadata !DIExpression()), !dbg !8342
  %0 = load i8*, i8** %x.addr, align 8, !dbg !8343
  %1 = bitcast i8* %0 to %struct.new_var_data*, !dbg !8343
  %orig_var = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %1, i32 0, i32 0, !dbg !8343
  %2 = load %union.tree_node*, %union.tree_node** %orig_var, align 8, !dbg !8343
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !8343
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8343
  %3 = load i32, i32* %uid, align 4, !dbg !8343
  ret i32 %3, !dbg !8344
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @new_var_eq(i8* %x, i8* %y) #0 !dbg !8345 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !8346, metadata !DIExpression()), !dbg !8347
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !8348, metadata !DIExpression()), !dbg !8349
  %0 = load i8*, i8** %y.addr, align 8, !dbg !8350
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !8350
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8350
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8350
  %bf.load = load i64, i64* %2, align 8, !dbg !8350
  %bf.clear = and i64 %bf.load, 65535, !dbg !8350
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8350
  %idxprom = sext i32 %bf.cast to i64, !dbg !8350
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8350
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8350
  %cmp = icmp eq i32 %3, 3, !dbg !8350
  br i1 %cmp, label %if.then, label %if.else, !dbg !8352

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %x.addr, align 8, !dbg !8353
  %5 = bitcast i8* %4 to %struct.new_var_data*, !dbg !8353
  %orig_var = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %5, i32 0, i32 0, !dbg !8353
  %6 = load %union.tree_node*, %union.tree_node** %orig_var, align 8, !dbg !8353
  %decl_minimal = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !8353
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8353
  %7 = load i32, i32* %uid, align 4, !dbg !8353
  %8 = load i8*, i8** %y.addr, align 8, !dbg !8354
  %9 = bitcast i8* %8 to %union.tree_node*, !dbg !8354
  %decl_minimal1 = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !8354
  %uid2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 2, !dbg !8354
  %10 = load i32, i32* %uid2, align 4, !dbg !8354
  %cmp3 = icmp eq i32 %7, %10, !dbg !8355
  %conv = zext i1 %cmp3 to i32, !dbg !8355
  store i32 %conv, i32* %retval, align 4, !dbg !8356
  br label %return, !dbg !8356

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8357
  br label %return, !dbg !8357

return:                                           ; preds = %if.else, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !8358
  ret i32 %11, !dbg !8358
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_var(%union.tree_node* %var_decl, %struct.htab* %new_vars_htab) #0 !dbg !8359 {
entry:
  %var_decl.addr = alloca %union.tree_node*, align 8
  %new_vars_htab.addr = alloca %struct.htab*, align 8
  %node = alloca %struct.new_var_data*, align 8
  %str = alloca %struct.data_structure*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %var_decl, %union.tree_node** %var_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_decl.addr, metadata !8362, metadata !DIExpression()), !dbg !8363
  store %struct.htab* %new_vars_htab, %struct.htab** %new_vars_htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %new_vars_htab.addr, metadata !8364, metadata !DIExpression()), !dbg !8365
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %node, metadata !8366, metadata !DIExpression()), !dbg !8367
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !8368, metadata !DIExpression()), !dbg !8369
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8370, metadata !DIExpression()), !dbg !8371
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8372, metadata !DIExpression()), !dbg !8373
  %0 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !8374
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8374
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8376

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !8377
  %2 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !8378
  %call = call %struct.new_var_data* @is_in_new_vars_htab(%union.tree_node* %1, %struct.htab* %2), !dbg !8379
  %tobool1 = icmp ne %struct.new_var_data* %call, null, !dbg !8379
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8380

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8381

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !8382
  %call2 = call zeroext i8 @is_candidate(%union.tree_node* %3, %union.tree_node** %type, %struct.VEC_tree_heap** null), !dbg !8384
  %tobool3 = icmp ne i8 %call2, 0, !dbg !8384
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !8385

if.then4:                                         ; preds = %if.end
  br label %return, !dbg !8386

if.end5:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8387
  %call6 = call i32 @find_structure(%union.tree_node* %4), !dbg !8388
  store i32 %call6, i32* %i, align 4, !dbg !8389
  %5 = load i32, i32* %i, align 4, !dbg !8390
  %6 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !8392
  %tobool7 = icmp ne %struct.VEC_structure_heap* %6, null, !dbg !8392
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !8392

cond.true:                                        ; preds = %if.end5
  %7 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !8392
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %7, i32 0, i32 0, !dbg !8392
  br label %cond.end, !dbg !8392

cond.false:                                       ; preds = %if.end5
  br label %cond.end, !dbg !8392

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8392
  %call8 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !8392
  %cmp = icmp eq i32 %5, %call8, !dbg !8393
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !8394

if.then9:                                         ; preds = %cond.end
  br label %return, !dbg !8395

if.end10:                                         ; preds = %cond.end
  %8 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !8396
  %tobool11 = icmp ne %struct.VEC_structure_heap* %8, null, !dbg !8396
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !8396

cond.true12:                                      ; preds = %if.end10
  %9 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !8396
  %base13 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %9, i32 0, i32 0, !dbg !8396
  br label %cond.end15, !dbg !8396

cond.false14:                                     ; preds = %if.end10
  br label %cond.end15, !dbg !8396

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_structure_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !8396
  %10 = load i32, i32* %i, align 4, !dbg !8396
  %call17 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond16, i32 %10), !dbg !8396
  store %struct.data_structure* %call17, %struct.data_structure** %str, align 8, !dbg !8397
  %11 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !8398
  %12 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !8399
  %call18 = call %struct.new_var_data* @create_new_var_node(%union.tree_node* %11, %struct.data_structure* %12), !dbg !8400
  store %struct.new_var_data* %call18, %struct.new_var_data** %node, align 8, !dbg !8401
  %13 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !8402
  %14 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !8403
  %15 = load %struct.new_var_data*, %struct.new_var_data** %node, align 8, !dbg !8404
  call void @create_new_var_1(%union.tree_node* %13, %struct.data_structure* %14, %struct.new_var_data* %15), !dbg !8405
  %16 = load %struct.new_var_data*, %struct.new_var_data** %node, align 8, !dbg !8406
  %17 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !8407
  call void @add_to_new_vars_htab(%struct.new_var_data* %16, %struct.htab* %17), !dbg !8408
  br label %return, !dbg !8409

return:                                           ; preds = %cond.end15, %if.then9, %if.then4, %if.then
  ret void, !dbg !8409
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @update_varpool_with_new_var(i8** %slot, i8* %data) #0 !dbg !8410 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %n_var = alloca %struct.new_var_data*, align 8
  %var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !8411, metadata !DIExpression()), !dbg !8412
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8413, metadata !DIExpression()), !dbg !8414
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %n_var, metadata !8415, metadata !DIExpression()), !dbg !8416
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !8417
  %1 = bitcast i8** %0 to %struct.new_var_data**, !dbg !8418
  %2 = load %struct.new_var_data*, %struct.new_var_data** %1, align 8, !dbg !8418
  store %struct.new_var_data* %2, %struct.new_var_data** %n_var, align 8, !dbg !8416
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8419, metadata !DIExpression()), !dbg !8420
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8421, metadata !DIExpression()), !dbg !8422
  store i32 0, i32* %i, align 4, !dbg !8423
  br label %for.cond, !dbg !8425

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8426
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %3, i32 0, i32 1, !dbg !8426
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars, align 8, !dbg !8426
  %tobool = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !8426
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8426

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8426
  %new_vars1 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %5, i32 0, i32 1, !dbg !8426
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars1, align 8, !dbg !8426
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !8426
  br label %cond.end, !dbg !8426

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8426
  %7 = load i32, i32* %i, align 4, !dbg !8426
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %7, %union.tree_node** %var), !dbg !8426
  %tobool2 = icmp ne i32 %call, 0, !dbg !8428
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8428

for.body:                                         ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8429
  call void @insert_global_to_varpool(%union.tree_node* %8), !dbg !8430
  br label %for.inc, !dbg !8430

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !8431
  %inc = add i32 %9, 1, !dbg !8431
  store i32 %inc, i32* %i, align 4, !dbg !8431
  br label %for.cond, !dbg !8432, !llvm.loop !8433

for.end:                                          ; preds = %cond.end
  ret i32 1, !dbg !8435
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.new_var_data* @is_in_new_vars_htab(%union.tree_node* %decl, %struct.htab* %new_vars_htab) #0 !dbg !8436 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %new_vars_htab.addr = alloca %struct.htab*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8439, metadata !DIExpression()), !dbg !8440
  store %struct.htab* %new_vars_htab, %struct.htab** %new_vars_htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %new_vars_htab.addr, metadata !8441, metadata !DIExpression()), !dbg !8442
  %0 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !8443
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8444
  %2 = bitcast %union.tree_node* %1 to i8*, !dbg !8444
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8445
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !8445
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8445
  %4 = load i32, i32* %uid, align 4, !dbg !8445
  %call = call i8* @htab_find_with_hash(%struct.htab* %0, i8* %2, i32 %4), !dbg !8446
  %5 = bitcast i8* %call to %struct.new_var_data*, !dbg !8447
  ret %struct.new_var_data* %5, !dbg !8448
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.new_var_data* @create_new_var_node(%union.tree_node* %var, %struct.data_structure* %str) #0 !dbg !8449 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %node = alloca %struct.new_var_data*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8452, metadata !DIExpression()), !dbg !8453
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !8454, metadata !DIExpression()), !dbg !8455
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %node, metadata !8456, metadata !DIExpression()), !dbg !8457
  %call = call i8* @xmalloc(i64 16), !dbg !8458
  %0 = bitcast i8* %call to %struct.new_var_data*, !dbg !8458
  store %struct.new_var_data* %0, %struct.new_var_data** %node, align 8, !dbg !8459
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8460
  %2 = load %struct.new_var_data*, %struct.new_var_data** %node, align 8, !dbg !8461
  %orig_var = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %2, i32 0, i32 0, !dbg !8462
  store %union.tree_node* %1, %union.tree_node** %orig_var, align 8, !dbg !8463
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8464
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 6, !dbg !8464
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !8464
  %tobool = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !8464
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8464

cond.true:                                        ; preds = %entry
  %5 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8464
  %new_types1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %5, i32 0, i32 6, !dbg !8464
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types1, align 8, !dbg !8464
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !8464
  br label %cond.end, !dbg !8464

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8464

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8464
  %call2 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !8464
  %call3 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %call2), !dbg !8464
  %7 = load %struct.new_var_data*, %struct.new_var_data** %node, align 8, !dbg !8465
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %7, i32 0, i32 1, !dbg !8466
  store %struct.VEC_tree_heap* %call3, %struct.VEC_tree_heap** %new_vars, align 8, !dbg !8467
  %8 = load %struct.new_var_data*, %struct.new_var_data** %node, align 8, !dbg !8468
  ret %struct.new_var_data* %8, !dbg !8469
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_var_1(%union.tree_node* %orig_decl, %struct.data_structure* %str, %struct.new_var_data* %node) #0 !dbg !8470 {
entry:
  %orig_decl.addr = alloca %union.tree_node*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %node.addr = alloca %struct.new_var_data*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %new_name = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %orig_decl, %union.tree_node** %orig_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_decl.addr, metadata !8473, metadata !DIExpression()), !dbg !8474
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !8475, metadata !DIExpression()), !dbg !8476
  store %struct.new_var_data* %node, %struct.new_var_data** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %node.addr, metadata !8477, metadata !DIExpression()), !dbg !8478
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8479, metadata !DIExpression()), !dbg !8480
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8481, metadata !DIExpression()), !dbg !8482
  store i32 0, i32* %i, align 4, !dbg !8483
  br label %for.cond, !dbg !8485

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8486
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %0, i32 0, i32 6, !dbg !8486
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !8486
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !8486
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8486

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !8486
  %new_types1 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %2, i32 0, i32 6, !dbg !8486
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types1, align 8, !dbg !8486
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !8486
  br label %cond.end, !dbg !8486

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8486

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8486
  %4 = load i32, i32* %i, align 4, !dbg !8486
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %type), !dbg !8486
  %tobool2 = icmp ne i32 %call, 0, !dbg !8488
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8488

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !8489, metadata !DIExpression()), !dbg !8491
  store %union.tree_node* null, %union.tree_node** %new_decl, align 8, !dbg !8491
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !8492, metadata !DIExpression()), !dbg !8493
  %5 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8494
  %6 = load i32, i32* %i, align 4, !dbg !8495
  %conv = zext i32 %6 to i64, !dbg !8495
  %call3 = call %union.tree_node* @gen_var_name(%union.tree_node* %5, i64 %conv), !dbg !8496
  store %union.tree_node* %call3, %union.tree_node** %new_name, align 8, !dbg !8497
  %7 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8498
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8499
  %call4 = call %union.tree_node* @gen_struct_type(%union.tree_node* %7, %union.tree_node* %8), !dbg !8500
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !8501
  %9 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8502
  %call5 = call zeroext i8 @is_global_var(%union.tree_node* %9), !dbg !8504
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8504
  br i1 %tobool6, label %if.then, label %if.else, !dbg !8505

if.then:                                          ; preds = %for.body
  %10 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8506
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !8506
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !8506
  %11 = load i32, i32* %locus, align 8, !dbg !8506
  %12 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !8506
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8506
  %call7 = call %union.tree_node* @build_decl_stat(i32 %11, i32 32, %union.tree_node* %12, %union.tree_node* %13), !dbg !8506
  store %union.tree_node* %call7, %union.tree_node** %new_decl, align 8, !dbg !8507
  br label %if.end, !dbg !8508

if.else:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i8** %name, metadata !8509, metadata !DIExpression()), !dbg !8511
  %14 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !8512
  %tobool8 = icmp ne %union.tree_node* %14, null, !dbg !8512
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !8512

cond.true9:                                       ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !8513
  %identifier = bitcast %union.tree_node* %15 to %struct.tree_identifier*, !dbg !8513
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !8513
  %str10 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !8513
  %16 = load i8*, i8** %str10, align 8, !dbg !8513
  br label %cond.end12, !dbg !8512

cond.false11:                                     ; preds = %if.else
  br label %cond.end12, !dbg !8512

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi i8* [ %16, %cond.true9 ], [ null, %cond.false11 ], !dbg !8512
  store i8* %cond13, i8** %name, align 8, !dbg !8511
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8514
  %18 = load i8*, i8** %name, align 8, !dbg !8515
  %call14 = call %union.tree_node* @create_tmp_var(%union.tree_node* %17, i8* %18), !dbg !8516
  store %union.tree_node* %call14, %union.tree_node** %new_decl, align 8, !dbg !8517
  br label %if.end

if.end:                                           ; preds = %cond.end12, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8518
  %20 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8519
  call void @copy_decl_attributes(%union.tree_node* %19, %union.tree_node* %20), !dbg !8520
  %21 = load %struct.new_var_data*, %struct.new_var_data** %node.addr, align 8, !dbg !8521
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %21, i32 0, i32 1, !dbg !8521
  %22 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8521
  %call15 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %new_vars, %union.tree_node* %22), !dbg !8521
  br label %for.inc, !dbg !8522

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %i, align 4, !dbg !8523
  %inc = add i32 %23, 1, !dbg !8523
  store i32 %inc, i32* %i, align 4, !dbg !8523
  br label %for.cond, !dbg !8524, !llvm.loop !8525

for.end:                                          ; preds = %cond.end
  ret void, !dbg !8527
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_new_vars_htab(%struct.new_var_data* %new_node, %struct.htab* %new_vars_htab) #0 !dbg !8528 {
entry:
  %new_node.addr = alloca %struct.new_var_data*, align 8
  %new_vars_htab.addr = alloca %struct.htab*, align 8
  %slot = alloca i8**, align 8
  store %struct.new_var_data* %new_node, %struct.new_var_data** %new_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %new_node.addr, metadata !8531, metadata !DIExpression()), !dbg !8532
  store %struct.htab* %new_vars_htab, %struct.htab** %new_vars_htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %new_vars_htab.addr, metadata !8533, metadata !DIExpression()), !dbg !8534
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8535, metadata !DIExpression()), !dbg !8536
  %0 = load %struct.htab*, %struct.htab** %new_vars_htab.addr, align 8, !dbg !8537
  %1 = load %struct.new_var_data*, %struct.new_var_data** %new_node.addr, align 8, !dbg !8538
  %orig_var = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %1, i32 0, i32 0, !dbg !8539
  %2 = load %union.tree_node*, %union.tree_node** %orig_var, align 8, !dbg !8539
  %3 = bitcast %union.tree_node* %2 to i8*, !dbg !8538
  %4 = load %struct.new_var_data*, %struct.new_var_data** %new_node.addr, align 8, !dbg !8540
  %orig_var1 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %4, i32 0, i32 0, !dbg !8540
  %5 = load %union.tree_node*, %union.tree_node** %orig_var1, align 8, !dbg !8540
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !8540
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !8540
  %6 = load i32, i32* %uid, align 4, !dbg !8540
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %3, i32 %6, i32 1), !dbg !8541
  store i8** %call, i8*** %slot, align 8, !dbg !8542
  %7 = load %struct.new_var_data*, %struct.new_var_data** %new_node.addr, align 8, !dbg !8543
  %8 = bitcast %struct.new_var_data* %7 to i8*, !dbg !8543
  %9 = load i8**, i8*** %slot, align 8, !dbg !8544
  store i8* %8, i8** %9, align 8, !dbg !8545
  ret void, !dbg !8546
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gen_var_name(%union.tree_node* %orig_decl, i64 %i) #0 !dbg !8547 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %orig_decl.addr = alloca %union.tree_node*, align 8
  %i.addr = alloca i64, align 8
  %old_name = alloca i8*, align 8
  %prefix = alloca i8*, align 8
  %new_name = alloca i8*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  store %union.tree_node* %orig_decl, %union.tree_node** %orig_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_decl.addr, metadata !8550, metadata !DIExpression()), !dbg !8551
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !8552, metadata !DIExpression()), !dbg !8553
  call void @llvm.dbg.declare(metadata i8** %old_name, metadata !8554, metadata !DIExpression()), !dbg !8555
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !8556, metadata !DIExpression()), !dbg !8557
  call void @llvm.dbg.declare(metadata i8** %new_name, metadata !8558, metadata !DIExpression()), !dbg !8559
  %0 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8560
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !8560
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !8560
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8560
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !8560
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8562

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8563
  %decl_minimal1 = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !8563
  %name2 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal1, i32 0, i32 3, !dbg !8563
  %3 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !8563
  %identifier = bitcast %union.tree_node* %3 to %struct.tree_identifier*, !dbg !8563
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !8563
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !8563
  %4 = load i8*, i8** %str, align 8, !dbg !8563
  %tobool3 = icmp ne i8* %4, null, !dbg !8563
  br i1 %tobool3, label %if.end, label %if.then, !dbg !8564

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8565
  br label %return, !dbg !8565

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8566
  %decl_minimal4 = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !8566
  %name5 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 3, !dbg !8566
  %6 = load %union.tree_node*, %union.tree_node** %name5, align 8, !dbg !8566
  %identifier6 = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !8566
  %id7 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier6, i32 0, i32 1, !dbg !8566
  %str8 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id7, i32 0, i32 0, !dbg !8566
  %7 = load i8*, i8** %str8, align 8, !dbg !8566
  store i8* %7, i8** %old_name, align 8, !dbg !8567
  %8 = load i8*, i8** %old_name, align 8, !dbg !8568
  %call = call i64 @strlen(i8* %8), !dbg !8568
  %add = add i64 %call, 1, !dbg !8568
  %mul = mul i64 1, %add, !dbg !8568
  %9 = alloca i8, i64 %mul, align 16, !dbg !8568
  store i8* %9, i8** %prefix, align 8, !dbg !8569
  %10 = load i8*, i8** %prefix, align 8, !dbg !8570
  %11 = load i8*, i8** %old_name, align 8, !dbg !8571
  %call9 = call i8* @strcpy(i8* %10, i8* %11), !dbg !8572
  br label %do.body, !dbg !8573

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !8574, metadata !DIExpression()), !dbg !8576
  %12 = load i8*, i8** %prefix, align 8, !dbg !8576
  store i8* %12, i8** %name_, align 8, !dbg !8576
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !8577, metadata !DIExpression()), !dbg !8576
  %13 = load i8*, i8** %name_, align 8, !dbg !8576
  %call10 = call i64 @strlen(i8* %13), !dbg !8576
  %add11 = add i64 %call10, 32, !dbg !8576
  %14 = alloca i8, i64 %add11, align 16, !dbg !8576
  store i8* %14, i8** %new_name, align 8, !dbg !8576
  store i8* %14, i8** %output_, align 8, !dbg !8576
  %15 = load i8*, i8** %output_, align 8, !dbg !8576
  %16 = load i8*, i8** %name_, align 8, !dbg !8576
  %17 = load i64, i64* %i.addr, align 8, !dbg !8576
  %call12 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i8* %16, i64 %17), !dbg !8576
  br label %do.end, !dbg !8576

do.end:                                           ; preds = %do.body
  %18 = load i8*, i8** %new_name, align 8, !dbg !8578
  %call13 = call %union.tree_node* @get_identifier(i8* %18), !dbg !8579
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !8580
  br label %return, !dbg !8580

return:                                           ; preds = %do.end, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8581
  ret %union.tree_node* %19, !dbg !8581
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gen_struct_type(%union.tree_node* %decl, %union.tree_node* %new_str_type) #0 !dbg !8582 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %new_str_type.addr = alloca %union.tree_node*, align 8
  %type_orig = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  %wrapper = alloca %struct.VEC_type_wrapper_t_heap*, align 8
  %wr = alloca %struct.type_wrapper, align 8
  %wr_p = alloca %struct.type_wrapper*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8583, metadata !DIExpression()), !dbg !8584
  store %union.tree_node* %new_str_type, %union.tree_node** %new_str_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_str_type.addr, metadata !8585, metadata !DIExpression()), !dbg !8586
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_orig, metadata !8587, metadata !DIExpression()), !dbg !8588
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8589
  %call = call %union.tree_node* @get_type_of_var(%union.tree_node* %0), !dbg !8590
  store %union.tree_node* %call, %union.tree_node** %type_orig, align 8, !dbg !8588
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !8591, metadata !DIExpression()), !dbg !8592
  %1 = load %union.tree_node*, %union.tree_node** %new_str_type.addr, align 8, !dbg !8593
  store %union.tree_node* %1, %union.tree_node** %new_type, align 8, !dbg !8592
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_heap** %wrapper, metadata !8594, metadata !DIExpression()), !dbg !8595
  %call1 = call %struct.VEC_type_wrapper_t_heap* @VEC_type_wrapper_t_heap_alloc(i32 10), !dbg !8596
  store %struct.VEC_type_wrapper_t_heap* %call1, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8595
  call void @llvm.dbg.declare(metadata %struct.type_wrapper* %wr, metadata !8597, metadata !DIExpression()), !dbg !8598
  call void @llvm.dbg.declare(metadata %struct.type_wrapper** %wr_p, metadata !8599, metadata !DIExpression()), !dbg !8601
  br label %while.cond, !dbg !8602

while.cond:                                       ; preds = %if.end, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8603
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8603
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8603
  %bf.load = load i64, i64* %3, align 8, !dbg !8603
  %bf.clear = and i64 %bf.load, 65535, !dbg !8603
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8603
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !8603
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !8603

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8603
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8603
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8603
  %bf.load3 = load i64, i64* %5, align 8, !dbg !8603
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8603
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8603
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !8603
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !8604

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8605
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8605
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !8605
  %bf.load8 = load i64, i64* %7, align 8, !dbg !8605
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !8605
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !8605
  %cmp11 = icmp eq i32 %bf.cast10, 15, !dbg !8606
  br label %lor.end, !dbg !8604

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %8 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp11, %lor.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !8602

while.body:                                       ; preds = %lor.end
  %9 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8607
  %base12 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !8607
  %10 = bitcast %struct.tree_base* %base12 to i64*, !dbg !8607
  %bf.load13 = load i64, i64* %10, align 8, !dbg !8607
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !8607
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !8607
  %cmp16 = icmp eq i32 %bf.cast15, 10, !dbg !8607
  br i1 %cmp16, label %if.then, label %lor.lhs.false17, !dbg !8607

lor.lhs.false17:                                  ; preds = %while.body
  %11 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8607
  %base18 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8607
  %12 = bitcast %struct.tree_base* %base18 to i64*, !dbg !8607
  %bf.load19 = load i64, i64* %12, align 8, !dbg !8607
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !8607
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !8607
  %cmp22 = icmp eq i32 %bf.cast21, 12, !dbg !8607
  br i1 %cmp22, label %if.then, label %if.else, !dbg !8610

if.then:                                          ; preds = %lor.lhs.false17, %while.body
  %wrap = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 0, !dbg !8611
  store i8 0, i8* %wrap, align 8, !dbg !8613
  %domain = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 1, !dbg !8614
  store %union.tree_node* null, %union.tree_node** %domain, align 8, !dbg !8615
  br label %if.end, !dbg !8616

if.else:                                          ; preds = %lor.lhs.false17
  %13 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8617
  %base23 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !8617
  %14 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8617
  %bf.load24 = load i64, i64* %14, align 8, !dbg !8617
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !8617
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !8617
  %cmp27 = icmp eq i32 %bf.cast26, 15, !dbg !8617
  br i1 %cmp27, label %cond.false, label %cond.true, !dbg !8617

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1932, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8617
  br label %cond.end, !dbg !8617

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !8617

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8617
  %wrap28 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 0, !dbg !8619
  store i8 1, i8* %wrap28, align 8, !dbg !8620
  %15 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8621
  %type = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !8621
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !8621
  %16 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !8621
  %domain29 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 1, !dbg !8622
  store %union.tree_node* %16, %union.tree_node** %domain29, align 8, !dbg !8623
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %call30 = call %struct.type_wrapper* @VEC_type_wrapper_t_heap_safe_push(%struct.VEC_type_wrapper_t_heap** %wrapper, %struct.type_wrapper* %wr), !dbg !8624
  %17 = load %union.tree_node*, %union.tree_node** %type_orig, align 8, !dbg !8625
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !8625
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8625
  %18 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !8625
  store %union.tree_node* %18, %union.tree_node** %type_orig, align 8, !dbg !8626
  br label %while.cond, !dbg !8602, !llvm.loop !8627

while.end:                                        ; preds = %lor.end
  br label %while.cond32, !dbg !8629

while.cond32:                                     ; preds = %cond.end60, %while.end
  %19 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8630
  %tobool = icmp ne %struct.VEC_type_wrapper_t_heap* %19, null, !dbg !8630
  br i1 %tobool, label %cond.true33, label %cond.false35, !dbg !8630

cond.true33:                                      ; preds = %while.cond32
  %20 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8630
  %base34 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %20, i32 0, i32 0, !dbg !8630
  br label %cond.end36, !dbg !8630

cond.false35:                                     ; preds = %while.cond32
  br label %cond.end36, !dbg !8630

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_type_wrapper_t_base* [ %base34, %cond.true33 ], [ null, %cond.false35 ], !dbg !8630
  %call38 = call i32 @VEC_type_wrapper_t_base_length(%struct.VEC_type_wrapper_t_base* %cond37), !dbg !8630
  %cmp39 = icmp ne i32 %call38, 0, !dbg !8631
  br i1 %cmp39, label %while.body40, label %while.end62, !dbg !8629

while.body40:                                     ; preds = %cond.end36
  %21 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8632
  %tobool41 = icmp ne %struct.VEC_type_wrapper_t_heap* %21, null, !dbg !8632
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !8632

cond.true42:                                      ; preds = %while.body40
  %22 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8632
  %base43 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %22, i32 0, i32 0, !dbg !8632
  br label %cond.end45, !dbg !8632

cond.false44:                                     ; preds = %while.body40
  br label %cond.end45, !dbg !8632

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_type_wrapper_t_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !8632
  %call47 = call %struct.type_wrapper* @VEC_type_wrapper_t_base_last(%struct.VEC_type_wrapper_t_base* %cond46), !dbg !8632
  store %struct.type_wrapper* %call47, %struct.type_wrapper** %wr_p, align 8, !dbg !8634
  %23 = load %struct.type_wrapper*, %struct.type_wrapper** %wr_p, align 8, !dbg !8635
  %wrap48 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %23, i32 0, i32 0, !dbg !8637
  %24 = load i8, i8* %wrap48, align 8, !dbg !8637
  %tobool49 = icmp ne i8 %24, 0, !dbg !8635
  br i1 %tobool49, label %if.then50, label %if.else53, !dbg !8638

if.then50:                                        ; preds = %cond.end45
  %25 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8639
  %26 = load %struct.type_wrapper*, %struct.type_wrapper** %wr_p, align 8, !dbg !8640
  %domain51 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %26, i32 0, i32 1, !dbg !8641
  %27 = load %union.tree_node*, %union.tree_node** %domain51, align 8, !dbg !8641
  %call52 = call %union.tree_node* @build_array_type(%union.tree_node* %25, %union.tree_node* %27), !dbg !8642
  store %union.tree_node* %call52, %union.tree_node** %new_type, align 8, !dbg !8643
  br label %if.end55, !dbg !8644

if.else53:                                        ; preds = %cond.end45
  %28 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8645
  %call54 = call %union.tree_node* @build_pointer_type(%union.tree_node* %28), !dbg !8646
  store %union.tree_node* %call54, %union.tree_node** %new_type, align 8, !dbg !8647
  br label %if.end55

if.end55:                                         ; preds = %if.else53, %if.then50
  %29 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8648
  %tobool56 = icmp ne %struct.VEC_type_wrapper_t_heap* %29, null, !dbg !8648
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !8648

cond.true57:                                      ; preds = %if.end55
  %30 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !8648
  %base58 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %30, i32 0, i32 0, !dbg !8648
  br label %cond.end60, !dbg !8648

cond.false59:                                     ; preds = %if.end55
  br label %cond.end60, !dbg !8648

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_type_wrapper_t_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !8648
  call void @VEC_type_wrapper_t_base_pop(%struct.VEC_type_wrapper_t_base* %cond61), !dbg !8648
  br label %while.cond32, !dbg !8629, !llvm.loop !8649

while.end62:                                      ; preds = %cond.end36
  call void @VEC_type_wrapper_t_heap_free(%struct.VEC_type_wrapper_t_heap** %wrapper), !dbg !8651
  %31 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !8652
  ret %union.tree_node* %31, !dbg !8653
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !8654 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8657, metadata !DIExpression()), !dbg !8658
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8659
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8659
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8659
  %bf.load = load i64, i64* %1, align 8, !dbg !8659
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !8659
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8659
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8659
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8659
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !8660

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8661
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !8661
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8661
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !8661
  %bf.load1 = load i64, i64* %3, align 8, !dbg !8661
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !8661
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !8661
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8661
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !8660
  br label %lor.end, !dbg !8660

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !8660
  %conv = trunc i32 %lor.ext to i8, !dbg !8662
  ret i8 %conv, !dbg !8663
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_decl_attributes(%union.tree_node* %new_decl, %union.tree_node* %orig_decl) #0 !dbg !8664 {
entry:
  %new_decl.addr = alloca %union.tree_node*, align 8
  %orig_decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %new_decl, %union.tree_node** %new_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl.addr, metadata !8667, metadata !DIExpression()), !dbg !8668
  store %union.tree_node* %orig_decl, %union.tree_node** %orig_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_decl.addr, metadata !8669, metadata !DIExpression()), !dbg !8670
  %0 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8671
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !8671
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8671
  %1 = bitcast i40* %artificial_flag to i64*, !dbg !8671
  %bf.load = load i64, i64* %1, align 8, !dbg !8672
  %bf.clear = and i64 %bf.load, -4097, !dbg !8672
  %bf.set = or i64 %bf.clear, 4096, !dbg !8672
  store i64 %bf.set, i64* %1, align 8, !dbg !8672
  %2 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8673
  %decl_common1 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !8673
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 2, !dbg !8673
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !8673
  %bf.load2 = load i64, i64* %3, align 8, !dbg !8673
  %bf.lshr = lshr i64 %bf.load2, 25, !dbg !8673
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !8673
  %bf.cast = trunc i64 %bf.clear3 to i32, !dbg !8673
  %4 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8674
  %decl_common4 = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !8674
  %decl_flag_15 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common4, i32 0, i32 2, !dbg !8674
  %5 = bitcast i40* %decl_flag_15 to i64*, !dbg !8674
  %6 = zext i32 %bf.cast to i64, !dbg !8675
  %bf.load6 = load i64, i64* %5, align 8, !dbg !8675
  %bf.value = and i64 %6, 1, !dbg !8675
  %bf.shl = shl i64 %bf.value, 25, !dbg !8675
  %bf.clear7 = and i64 %bf.load6, -33554433, !dbg !8675
  %bf.set8 = or i64 %bf.clear7, %bf.shl, !dbg !8675
  store i64 %bf.set8, i64* %5, align 8, !dbg !8675
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8675
  %7 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8676
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8676
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !8676
  %bf.load9 = load i64, i64* %8, align 8, !dbg !8676
  %bf.lshr10 = lshr i64 %bf.load9, 26, !dbg !8676
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !8676
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8676
  %9 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8677
  %base13 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !8677
  %10 = bitcast %struct.tree_base* %base13 to i64*, !dbg !8677
  %11 = zext i32 %bf.cast12 to i64, !dbg !8678
  %bf.load14 = load i64, i64* %10, align 8, !dbg !8678
  %bf.value15 = and i64 %11, 1, !dbg !8678
  %bf.shl16 = shl i64 %bf.value15, 26, !dbg !8678
  %bf.clear17 = and i64 %bf.load14, -67108865, !dbg !8678
  %bf.set18 = or i64 %bf.clear17, %bf.shl16, !dbg !8678
  store i64 %bf.set18, i64* %10, align 8, !dbg !8678
  %bf.result.cast19 = trunc i64 %bf.value15 to i32, !dbg !8678
  %12 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8679
  %base20 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8679
  %13 = bitcast %struct.tree_base* %base20 to i64*, !dbg !8679
  %bf.load21 = load i64, i64* %13, align 8, !dbg !8679
  %bf.lshr22 = lshr i64 %bf.load21, 27, !dbg !8679
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !8679
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !8679
  %14 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8680
  %base25 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !8680
  %15 = bitcast %struct.tree_base* %base25 to i64*, !dbg !8680
  %16 = zext i32 %bf.cast24 to i64, !dbg !8681
  %bf.load26 = load i64, i64* %15, align 8, !dbg !8681
  %bf.value27 = and i64 %16, 1, !dbg !8681
  %bf.shl28 = shl i64 %bf.value27, 27, !dbg !8681
  %bf.clear29 = and i64 %bf.load26, -134217729, !dbg !8681
  %bf.set30 = or i64 %bf.clear29, %bf.shl28, !dbg !8681
  store i64 %bf.set30, i64* %15, align 8, !dbg !8681
  %bf.result.cast31 = trunc i64 %bf.value27 to i32, !dbg !8681
  %17 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8682
  %base32 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8682
  %18 = bitcast %struct.tree_base* %base32 to i64*, !dbg !8682
  %bf.load33 = load i64, i64* %18, align 8, !dbg !8682
  %bf.lshr34 = lshr i64 %bf.load33, 24, !dbg !8682
  %bf.clear35 = and i64 %bf.lshr34, 1, !dbg !8682
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !8682
  %19 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8683
  %base37 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !8683
  %20 = bitcast %struct.tree_base* %base37 to i64*, !dbg !8683
  %21 = zext i32 %bf.cast36 to i64, !dbg !8684
  %bf.load38 = load i64, i64* %20, align 8, !dbg !8684
  %bf.value39 = and i64 %21, 1, !dbg !8684
  %bf.shl40 = shl i64 %bf.value39, 24, !dbg !8684
  %bf.clear41 = and i64 %bf.load38, -16777217, !dbg !8684
  %bf.set42 = or i64 %bf.clear41, %bf.shl40, !dbg !8684
  store i64 %bf.set42, i64* %20, align 8, !dbg !8684
  %bf.result.cast43 = trunc i64 %bf.value39 to i32, !dbg !8684
  %22 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8685
  %decl_minimal = bitcast %union.tree_node* %22 to %struct.tree_decl_minimal*, !dbg !8685
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !8685
  %23 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !8685
  %24 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8686
  %decl_minimal44 = bitcast %union.tree_node* %24 to %struct.tree_decl_minimal*, !dbg !8686
  %context45 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal44, i32 0, i32 4, !dbg !8686
  store %union.tree_node* %23, %union.tree_node** %context45, align 8, !dbg !8687
  %25 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8688
  %base46 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !8688
  %26 = bitcast %struct.tree_base* %base46 to i64*, !dbg !8688
  %bf.load47 = load i64, i64* %26, align 8, !dbg !8688
  %bf.lshr48 = lshr i64 %bf.load47, 19, !dbg !8688
  %bf.clear49 = and i64 %bf.lshr48, 1, !dbg !8688
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !8688
  %27 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8689
  %base51 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8689
  %28 = bitcast %struct.tree_base* %base51 to i64*, !dbg !8689
  %29 = zext i32 %bf.cast50 to i64, !dbg !8690
  %bf.load52 = load i64, i64* %28, align 8, !dbg !8690
  %bf.value53 = and i64 %29, 1, !dbg !8690
  %bf.shl54 = shl i64 %bf.value53, 19, !dbg !8690
  %bf.clear55 = and i64 %bf.load52, -524289, !dbg !8690
  %bf.set56 = or i64 %bf.clear55, %bf.shl54, !dbg !8690
  store i64 %bf.set56, i64* %28, align 8, !dbg !8690
  %bf.result.cast57 = trunc i64 %bf.value53 to i32, !dbg !8690
  %30 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8691
  %base58 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !8691
  %31 = bitcast %struct.tree_base* %base58 to i64*, !dbg !8691
  %bf.load59 = load i64, i64* %31, align 8, !dbg !8691
  %bf.lshr60 = lshr i64 %bf.load59, 18, !dbg !8691
  %bf.clear61 = and i64 %bf.lshr60, 1, !dbg !8691
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !8691
  %32 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8692
  %base63 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !8692
  %33 = bitcast %struct.tree_base* %base63 to i64*, !dbg !8692
  %34 = zext i32 %bf.cast62 to i64, !dbg !8693
  %bf.load64 = load i64, i64* %33, align 8, !dbg !8693
  %bf.value65 = and i64 %34, 1, !dbg !8693
  %bf.shl66 = shl i64 %bf.value65, 18, !dbg !8693
  %bf.clear67 = and i64 %bf.load64, -262145, !dbg !8693
  %bf.set68 = or i64 %bf.clear67, %bf.shl66, !dbg !8693
  store i64 %bf.set68, i64* %33, align 8, !dbg !8693
  %bf.result.cast69 = trunc i64 %bf.value65 to i32, !dbg !8693
  %35 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8694
  %base70 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !8694
  %36 = bitcast %struct.tree_base* %base70 to i64*, !dbg !8694
  %bf.load71 = load i64, i64* %36, align 8, !dbg !8694
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !8694
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !8694
  %cmp = icmp eq i32 %bf.cast73, 32, !dbg !8696
  br i1 %cmp, label %if.then, label %if.end, !dbg !8697

if.then:                                          ; preds = %entry
  %37 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8698
  %base74 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !8698
  %38 = bitcast %struct.tree_base* %base74 to i64*, !dbg !8698
  %bf.load75 = load i64, i64* %38, align 8, !dbg !8698
  %bf.lshr76 = lshr i64 %bf.load75, 20, !dbg !8698
  %bf.clear77 = and i64 %bf.lshr76, 1, !dbg !8698
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !8698
  %39 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8700
  %base79 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !8700
  %40 = bitcast %struct.tree_base* %base79 to i64*, !dbg !8700
  %41 = zext i32 %bf.cast78 to i64, !dbg !8701
  %bf.load80 = load i64, i64* %40, align 8, !dbg !8701
  %bf.value81 = and i64 %41, 1, !dbg !8701
  %bf.shl82 = shl i64 %bf.value81, 20, !dbg !8701
  %bf.clear83 = and i64 %bf.load80, -1048577, !dbg !8701
  %bf.set84 = or i64 %bf.clear83, %bf.shl82, !dbg !8701
  store i64 %bf.set84, i64* %40, align 8, !dbg !8701
  %bf.result.cast85 = trunc i64 %bf.value81 to i32, !dbg !8701
  %42 = load %union.tree_node*, %union.tree_node** %orig_decl.addr, align 8, !dbg !8702
  %decl_with_vis = bitcast %union.tree_node* %42 to %struct.tree_decl_with_vis*, !dbg !8702
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !8702
  %43 = bitcast i24* %tls_model to i32*, !dbg !8702
  %bf.load86 = load i32, i32* %43, align 8, !dbg !8702
  %bf.lshr87 = lshr i32 %bf.load86, 13, !dbg !8702
  %bf.clear88 = and i32 %bf.lshr87, 7, !dbg !8702
  %44 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8703
  %decl_with_vis89 = bitcast %union.tree_node* %44 to %struct.tree_decl_with_vis*, !dbg !8703
  %tls_model90 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis89, i32 0, i32 4, !dbg !8703
  %45 = bitcast i24* %tls_model90 to i32*, !dbg !8703
  %bf.load91 = load i32, i32* %45, align 8, !dbg !8704
  %bf.value92 = and i32 %bf.clear88, 7, !dbg !8704
  %bf.shl93 = shl i32 %bf.value92, 13, !dbg !8704
  %bf.clear94 = and i32 %bf.load91, -57345, !dbg !8704
  %bf.set95 = or i32 %bf.clear94, %bf.shl93, !dbg !8704
  store i32 %bf.set95, i32* %45, align 8, !dbg !8704
  br label %if.end, !dbg !8705

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8706
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_type_wrapper_t_heap* @VEC_type_wrapper_t_heap_alloc(i32 %alloc_) #0 !dbg !8707 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8710, metadata !DIExpression()), !dbg !8711
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8711
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !8711
  %1 = bitcast i8* %call to %struct.VEC_type_wrapper_t_heap*, !dbg !8711
  ret %struct.VEC_type_wrapper_t_heap* %1, !dbg !8711
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.type_wrapper* @VEC_type_wrapper_t_heap_safe_push(%struct.VEC_type_wrapper_t_heap** %vec_, %struct.type_wrapper* %obj_) #0 !dbg !8712 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_heap**, align 8
  %obj_.addr = alloca %struct.type_wrapper*, align 8
  store %struct.VEC_type_wrapper_t_heap** %vec_, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_heap*** %vec_.addr, metadata !8718, metadata !DIExpression()), !dbg !8719
  store %struct.type_wrapper* %obj_, %struct.type_wrapper** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.type_wrapper** %obj_.addr, metadata !8720, metadata !DIExpression()), !dbg !8719
  %0 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8719
  %call = call i32 @VEC_type_wrapper_t_heap_reserve(%struct.VEC_type_wrapper_t_heap** %0, i32 1), !dbg !8719
  %1 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8719
  %2 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %1, align 8, !dbg !8719
  %tobool = icmp ne %struct.VEC_type_wrapper_t_heap* %2, null, !dbg !8719
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8719

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8719
  %4 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %3, align 8, !dbg !8719
  %base = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %4, i32 0, i32 0, !dbg !8719
  br label %cond.end, !dbg !8719

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_type_wrapper_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8719
  %5 = load %struct.type_wrapper*, %struct.type_wrapper** %obj_.addr, align 8, !dbg !8719
  %call1 = call %struct.type_wrapper* @VEC_type_wrapper_t_base_quick_push(%struct.VEC_type_wrapper_t_base* %cond, %struct.type_wrapper* %5), !dbg !8719
  ret %struct.type_wrapper* %call1, !dbg !8719
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_type_wrapper_t_base_length(%struct.VEC_type_wrapper_t_base* %vec_) #0 !dbg !8721 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_base*, align 8
  store %struct.VEC_type_wrapper_t_base* %vec_, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_base** %vec_.addr, metadata !8726, metadata !DIExpression()), !dbg !8727
  %0 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8727
  %tobool = icmp ne %struct.VEC_type_wrapper_t_base* %0, null, !dbg !8727
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8727

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8727
  %num = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %1, i32 0, i32 0, !dbg !8727
  %2 = load i32, i32* %num, align 8, !dbg !8727
  br label %cond.end, !dbg !8727

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8727
  ret i32 %cond, !dbg !8727
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.type_wrapper* @VEC_type_wrapper_t_base_last(%struct.VEC_type_wrapper_t_base* %vec_) #0 !dbg !8728 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_base*, align 8
  store %struct.VEC_type_wrapper_t_base* %vec_, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_base** %vec_.addr, metadata !8732, metadata !DIExpression()), !dbg !8733
  %0 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8733
  %tobool = icmp ne %struct.VEC_type_wrapper_t_base* %0, null, !dbg !8733
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8733

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8733
  %num = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %1, i32 0, i32 0, !dbg !8733
  %2 = load i32, i32* %num, align 8, !dbg !8733
  %tobool1 = icmp ne i32 %2, 0, !dbg !8733
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !8734
  %land.ext = zext i1 %3 to i32, !dbg !8733
  %4 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8733
  %vec = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %4, i32 0, i32 2, !dbg !8733
  %5 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8733
  %num2 = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %5, i32 0, i32 0, !dbg !8733
  %6 = load i32, i32* %num2, align 8, !dbg !8733
  %sub = sub i32 %6, 1, !dbg !8733
  %idxprom = zext i32 %sub to i64, !dbg !8733
  %arrayidx = getelementptr inbounds [1 x %struct.type_wrapper], [1 x %struct.type_wrapper]* %vec, i64 0, i64 %idxprom, !dbg !8733
  ret %struct.type_wrapper* %arrayidx, !dbg !8733
}

declare dso_local %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_type_wrapper_t_base_pop(%struct.VEC_type_wrapper_t_base* %vec_) #0 !dbg !8735 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_base*, align 8
  store %struct.VEC_type_wrapper_t_base* %vec_, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_base** %vec_.addr, metadata !8738, metadata !DIExpression()), !dbg !8739
  %0 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8739
  %num = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %0, i32 0, i32 0, !dbg !8739
  %1 = load i32, i32* %num, align 8, !dbg !8739
  %2 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8739
  %num1 = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %2, i32 0, i32 0, !dbg !8739
  %3 = load i32, i32* %num1, align 8, !dbg !8739
  %dec = add i32 %3, -1, !dbg !8739
  store i32 %dec, i32* %num1, align 8, !dbg !8739
  ret void, !dbg !8739
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_type_wrapper_t_heap_free(%struct.VEC_type_wrapper_t_heap** %vec_) #0 !dbg !8740 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_heap**, align 8
  store %struct.VEC_type_wrapper_t_heap** %vec_, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_heap*** %vec_.addr, metadata !8743, metadata !DIExpression()), !dbg !8744
  %0 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8745
  %1 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %0, align 8, !dbg !8745
  %tobool = icmp ne %struct.VEC_type_wrapper_t_heap* %1, null, !dbg !8745
  br i1 %tobool, label %if.then, label %if.end, !dbg !8744

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8745
  %3 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %2, align 8, !dbg !8745
  %4 = bitcast %struct.VEC_type_wrapper_t_heap* %3 to i8*, !dbg !8745
  call void @free(i8* %4), !dbg !8745
  br label %if.end, !dbg !8745

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8744
  store %struct.VEC_type_wrapper_t_heap* null, %struct.VEC_type_wrapper_t_heap** %5, align 8, !dbg !8744
  ret void, !dbg !8744
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_type_wrapper_t_heap_reserve(%struct.VEC_type_wrapper_t_heap** %vec_, i32 %alloc_) #0 !dbg !8747 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_type_wrapper_t_heap** %vec_, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_heap*** %vec_.addr, metadata !8750, metadata !DIExpression()), !dbg !8751
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8752, metadata !DIExpression()), !dbg !8751
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8753, metadata !DIExpression()), !dbg !8751
  %0 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8751
  %1 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %0, align 8, !dbg !8751
  %tobool = icmp ne %struct.VEC_type_wrapper_t_heap* %1, null, !dbg !8751
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8751

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8751
  %3 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %2, align 8, !dbg !8751
  %base = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %3, i32 0, i32 0, !dbg !8751
  br label %cond.end, !dbg !8751

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8751

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_type_wrapper_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8751
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8751
  %call = call i32 @VEC_type_wrapper_t_base_space(%struct.VEC_type_wrapper_t_base* %cond, i32 %4), !dbg !8751
  %tobool1 = icmp ne i32 %call, 0, !dbg !8751
  %lnot = xor i1 %tobool1, true, !dbg !8751
  %lnot.ext = zext i1 %lnot to i32, !dbg !8751
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8751
  %5 = load i32, i32* %extend, align 4, !dbg !8754
  %tobool2 = icmp ne i32 %5, 0, !dbg !8754
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8751

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8754
  %7 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %6, align 8, !dbg !8754
  %8 = bitcast %struct.VEC_type_wrapper_t_heap* %7 to i8*, !dbg !8754
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8754
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !8754
  %10 = bitcast i8* %call3 to %struct.VEC_type_wrapper_t_heap*, !dbg !8754
  %11 = load %struct.VEC_type_wrapper_t_heap**, %struct.VEC_type_wrapper_t_heap*** %vec_.addr, align 8, !dbg !8754
  store %struct.VEC_type_wrapper_t_heap* %10, %struct.VEC_type_wrapper_t_heap** %11, align 8, !dbg !8754
  br label %if.end, !dbg !8754

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8751
  ret i32 %12, !dbg !8751
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.type_wrapper* @VEC_type_wrapper_t_base_quick_push(%struct.VEC_type_wrapper_t_base* %vec_, %struct.type_wrapper* %obj_) #0 !dbg !8756 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_base*, align 8
  %obj_.addr = alloca %struct.type_wrapper*, align 8
  %slot_ = alloca %struct.type_wrapper*, align 8
  store %struct.VEC_type_wrapper_t_base* %vec_, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_base** %vec_.addr, metadata !8759, metadata !DIExpression()), !dbg !8760
  store %struct.type_wrapper* %obj_, %struct.type_wrapper** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.type_wrapper** %obj_.addr, metadata !8761, metadata !DIExpression()), !dbg !8760
  call void @llvm.dbg.declare(metadata %struct.type_wrapper** %slot_, metadata !8762, metadata !DIExpression()), !dbg !8760
  %0 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8760
  %num = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %0, i32 0, i32 0, !dbg !8760
  %1 = load i32, i32* %num, align 8, !dbg !8760
  %2 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8760
  %alloc = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %2, i32 0, i32 1, !dbg !8760
  %3 = load i32, i32* %alloc, align 4, !dbg !8760
  %cmp = icmp ult i32 %1, %3, !dbg !8760
  %conv = zext i1 %cmp to i32, !dbg !8760
  %4 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8760
  %vec = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %4, i32 0, i32 2, !dbg !8760
  %5 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8760
  %num1 = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %5, i32 0, i32 0, !dbg !8760
  %6 = load i32, i32* %num1, align 8, !dbg !8760
  %inc = add i32 %6, 1, !dbg !8760
  store i32 %inc, i32* %num1, align 8, !dbg !8760
  %idxprom = zext i32 %6 to i64, !dbg !8760
  %arrayidx = getelementptr inbounds [1 x %struct.type_wrapper], [1 x %struct.type_wrapper]* %vec, i64 0, i64 %idxprom, !dbg !8760
  store %struct.type_wrapper* %arrayidx, %struct.type_wrapper** %slot_, align 8, !dbg !8760
  %7 = load %struct.type_wrapper*, %struct.type_wrapper** %obj_.addr, align 8, !dbg !8763
  %tobool = icmp ne %struct.type_wrapper* %7, null, !dbg !8763
  br i1 %tobool, label %if.then, label %if.end, !dbg !8760

if.then:                                          ; preds = %entry
  %8 = load %struct.type_wrapper*, %struct.type_wrapper** %slot_, align 8, !dbg !8763
  %9 = load %struct.type_wrapper*, %struct.type_wrapper** %obj_.addr, align 8, !dbg !8763
  %10 = bitcast %struct.type_wrapper* %8 to i8*, !dbg !8763
  %11 = bitcast %struct.type_wrapper* %9 to i8*, !dbg !8763
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !8763
  br label %if.end, !dbg !8763

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.type_wrapper*, %struct.type_wrapper** %slot_, align 8, !dbg !8760
  ret %struct.type_wrapper* %12, !dbg !8760
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_type_wrapper_t_base_space(%struct.VEC_type_wrapper_t_base* %vec_, i32 %alloc_) #0 !dbg !8765 {
entry:
  %vec_.addr = alloca %struct.VEC_type_wrapper_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_type_wrapper_t_base* %vec_, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_base** %vec_.addr, metadata !8768, metadata !DIExpression()), !dbg !8769
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8770, metadata !DIExpression()), !dbg !8769
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8769
  %cmp = icmp sge i32 %0, 0, !dbg !8769
  %conv = zext i1 %cmp to i32, !dbg !8769
  %1 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8769
  %tobool = icmp ne %struct.VEC_type_wrapper_t_base* %1, null, !dbg !8769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8769

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8769
  %alloc = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %2, i32 0, i32 1, !dbg !8769
  %3 = load i32, i32* %alloc, align 4, !dbg !8769
  %4 = load %struct.VEC_type_wrapper_t_base*, %struct.VEC_type_wrapper_t_base** %vec_.addr, align 8, !dbg !8769
  %num = getelementptr inbounds %struct.VEC_type_wrapper_t_base, %struct.VEC_type_wrapper_t_base* %4, i32 0, i32 0, !dbg !8769
  %5 = load i32, i32* %num, align 8, !dbg !8769
  %sub = sub i32 %3, %5, !dbg !8769
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8769
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8769
  %conv2 = zext i1 %cmp1 to i32, !dbg !8769
  br label %cond.end, !dbg !8769

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8769
  %tobool3 = icmp ne i32 %7, 0, !dbg !8769
  %lnot = xor i1 %tobool3, true, !dbg !8769
  %lnot.ext = zext i1 %lnot to i32, !dbg !8769
  br label %cond.end, !dbg !8769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8769
  ret i32 %cond, !dbg !8769
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_global_to_varpool(%union.tree_node* %new_decl) #0 !dbg !8771 {
entry:
  %new_decl.addr = alloca %union.tree_node*, align 8
  %new_node = alloca %struct.varpool_node*, align 8
  store %union.tree_node* %new_decl, %union.tree_node** %new_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl.addr, metadata !8772, metadata !DIExpression()), !dbg !8773
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %new_node, metadata !8774, metadata !DIExpression()), !dbg !8775
  %0 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8776
  %call = call %struct.varpool_node* @varpool_node(%union.tree_node* %0), !dbg !8777
  store %struct.varpool_node* %call, %struct.varpool_node** %new_node, align 8, !dbg !8778
  %1 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8779
  call void @notice_global_symbol(%union.tree_node* %1), !dbg !8780
  %2 = load %struct.varpool_node*, %struct.varpool_node** %new_node, align 8, !dbg !8781
  call void @varpool_mark_needed_node(%struct.varpool_node* %2), !dbg !8782
  %3 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8783
  call void @varpool_finalize_decl(%union.tree_node* %3), !dbg !8784
  ret void, !dbg !8785
}

declare dso_local %struct.varpool_node* @varpool_node(%union.tree_node*) #2

declare dso_local void @notice_global_symbol(%union.tree_node*) #2

declare dso_local void @varpool_mark_needed_node(%struct.varpool_node*) #2

declare dso_local void @varpool_finalize_decl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_new_var(i8** %slot, i8* %data) #0 !dbg !8786 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %n_var = alloca %struct.new_var_data*, align 8
  %var_type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !8787, metadata !DIExpression()), !dbg !8788
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8789, metadata !DIExpression()), !dbg !8790
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %n_var, metadata !8791, metadata !DIExpression()), !dbg !8792
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !8793
  %1 = bitcast i8** %0 to %struct.new_var_data**, !dbg !8794
  %2 = load %struct.new_var_data*, %struct.new_var_data** %1, align 8, !dbg !8794
  store %struct.new_var_data* %2, %struct.new_var_data** %n_var, align 8, !dbg !8792
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_type, metadata !8795, metadata !DIExpression()), !dbg !8796
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8797, metadata !DIExpression()), !dbg !8798
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8799, metadata !DIExpression()), !dbg !8800
  %3 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8801
  %orig_var = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %3, i32 0, i32 0, !dbg !8802
  %4 = load %union.tree_node*, %union.tree_node** %orig_var, align 8, !dbg !8802
  %call = call %union.tree_node* @get_type_of_var(%union.tree_node* %4), !dbg !8803
  store %union.tree_node* %call, %union.tree_node** %var_type, align 8, !dbg !8804
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8805
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i64 0, i64 0)), !dbg !8806
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8807
  %7 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8808
  %orig_var2 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %7, i32 0, i32 0, !dbg !8809
  %8 = load %union.tree_node*, %union.tree_node** %orig_var2, align 8, !dbg !8809
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %8, i32 0), !dbg !8810
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8811
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i64 0, i64 0)), !dbg !8812
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8813
  %11 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !8814
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0), !dbg !8815
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8816
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)), !dbg !8817
  store i32 0, i32* %i, align 4, !dbg !8818
  br label %for.cond, !dbg !8820

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8821
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %13, i32 0, i32 1, !dbg !8821
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars, align 8, !dbg !8821
  %tobool = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !8821
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8821

cond.true:                                        ; preds = %for.cond
  %15 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8821
  %new_vars5 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %15, i32 0, i32 1, !dbg !8821
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars5, align 8, !dbg !8821
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %16, i32 0, i32 0, !dbg !8821
  br label %cond.end, !dbg !8821

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8821

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8821
  %17 = load i32, i32* %i, align 4, !dbg !8821
  %call6 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %17, %union.tree_node** %var), !dbg !8821
  %tobool7 = icmp ne i32 %call6, 0, !dbg !8823
  br i1 %tobool7, label %for.body, label %for.end, !dbg !8823

for.body:                                         ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8824
  %call8 = call %union.tree_node* @get_type_of_var(%union.tree_node* %18), !dbg !8826
  store %union.tree_node* %call8, %union.tree_node** %var_type, align 8, !dbg !8827
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8828
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i64 0, i64 0)), !dbg !8829
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8830
  %21 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8831
  call void @print_generic_expr(%struct._IO_FILE* %20, %union.tree_node* %21, i32 0), !dbg !8832
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8833
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i64 0, i64 0)), !dbg !8834
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8835
  %24 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !8836
  call void @print_generic_expr(%struct._IO_FILE* %23, %union.tree_node* %24, i32 0), !dbg !8837
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8838
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)), !dbg !8839
  br label %for.inc, !dbg !8840

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %i, align 4, !dbg !8841
  %inc = add i32 %26, 1, !dbg !8841
  store i32 %inc, i32* %i, align 4, !dbg !8841
  br label %for.cond, !dbg !8842, !llvm.loop !8843

for.end:                                          ; preds = %cond.end
  ret i32 1, !dbg !8845
}

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local void @push_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_reorg_for_func(%struct.cgraph_node* %node) #0 !dbg !8846 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !8847, metadata !DIExpression()), !dbg !8848
  call void @create_new_local_vars(), !dbg !8849
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !8850
  call void @create_new_alloc_sites_for_func(%struct.cgraph_node* %0), !dbg !8851
  call void @create_new_accesses_for_func(), !dbg !8852
  call void @update_ssa(i32 2048), !dbg !8853
  %call = call zeroext i8 @cleanup_tree_cfg(), !dbg !8854
  %1 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !8855
  call void @free_new_vars_htab(%struct.htab* %1), !dbg !8856
  ret void, !dbg !8857
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @pop_cfun() #2

declare dso_local void @set_cfun(%struct.function*) #2

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_local_vars() #0 !dbg !8858 {
entry:
  %var = alloca %union.tree_node*, align 8
  %rvi = alloca %struct.referenced_var_iterator, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8859, metadata !DIExpression()), !dbg !8860
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !8861, metadata !DIExpression()), !dbg !8872
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8873
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8873
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !8873
  %call1 = call i64 @htab_elements(%struct.htab* %call), !dbg !8873
  %call2 = call %struct.htab* @htab_create(i64 %call1, i32 (i8*)* @new_var_hash, i32 (i8*, i8*)* @new_var_eq, void (i8*)* null), !dbg !8874
  store %struct.htab* %call2, %struct.htab** @new_local_vars, align 8, !dbg !8875
  %call3 = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !8876
  store %union.tree_node* %call3, %union.tree_node** %var, align 8, !dbg !8876
  br label %for.cond, !dbg !8876

for.cond:                                         ; preds = %for.inc, %entry
  %call4 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !8878
  %tobool = icmp ne i8 %call4, 0, !dbg !8878
  %lnot = xor i1 %tobool, true, !dbg !8878
  br i1 %lnot, label %for.body, label %for.end, !dbg !8876

for.body:                                         ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8880
  %call5 = call zeroext i8 @is_global_var(%union.tree_node* %1), !dbg !8883
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8883
  br i1 %tobool6, label %if.end, label %if.then, !dbg !8884

if.then:                                          ; preds = %for.body
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8885
  %3 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !8886
  call void @create_new_var(%union.tree_node* %2, %struct.htab* %3), !dbg !8887
  br label %if.end, !dbg !8887

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8888

for.inc:                                          ; preds = %if.end
  %call7 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !8878
  store %union.tree_node* %call7, %union.tree_node** %var, align 8, !dbg !8878
  br label %for.cond, !dbg !8878, !llvm.loop !8889

for.end:                                          ; preds = %for.cond
  %4 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !8891
  %tobool8 = icmp ne %struct.htab* %4, null, !dbg !8891
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !8893

if.then9:                                         ; preds = %for.end
  %5 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !8894
  call void @htab_traverse(%struct.htab* %5, i32 (i8**, i8*)* @finalize_new_vars_creation, i8* null), !dbg !8895
  br label %if.end10, !dbg !8895

if.end10:                                         ; preds = %if.then9, %for.end
  %6 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !8896
  call void @dump_new_vars(%struct.htab* %6), !dbg !8897
  ret void, !dbg !8898
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_alloc_sites_for_func(%struct.cgraph_node* %node) #0 !dbg !8899 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %fallocs = alloca %struct.func_alloc_sites*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !8900, metadata !DIExpression()), !dbg !8901
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %fallocs, metadata !8902, metadata !DIExpression()), !dbg !8903
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !8904
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !8905
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8905
  %call = call %struct.func_alloc_sites* @get_fallocs(%union.tree_node* %1), !dbg !8906
  store %struct.func_alloc_sites* %call, %struct.func_alloc_sites** %fallocs, align 8, !dbg !8903
  %2 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !8907
  %tobool = icmp ne %struct.func_alloc_sites* %2, null, !dbg !8907
  br i1 %tobool, label %if.then, label %if.end, !dbg !8909

if.then:                                          ; preds = %entry
  %3 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !8910
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !8911
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !8912
  %5 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !8912
  call void @create_new_alloc_sites(%struct.func_alloc_sites* %3, %union.tree_node* %5), !dbg !8913
  br label %if.end, !dbg !8913

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8914
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_accesses_for_func() #0 !dbg !8915 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8916, metadata !DIExpression()), !dbg !8917
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8918
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8918
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8918
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8918
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !8918
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8918
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !8918
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8918
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !8918
  br label %for.cond, !dbg !8918

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8920
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8920
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !8920
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8920
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8920
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !8920
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8920
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !8920
  br i1 %cmp, label %for.body, label %for.end, !dbg !8918

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8922
  call void @create_new_accesses_in_bb(%struct.basic_block_def* %8), !dbg !8923
  br label %for.inc, !dbg !8923

for.inc:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8920
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !8920
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !8920
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !8920
  br label %for.cond, !dbg !8920, !llvm.loop !8924

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8926
}

declare dso_local void @update_ssa(i32) #2

declare dso_local zeroext i8 @cleanup_tree_cfg() #2

declare dso_local i64 @htab_elements(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !8927 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !8932, metadata !DIExpression()), !dbg !8933
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !8934
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !8936
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !8936
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !8934
  br i1 %tobool, label %if.end, label %if.then, !dbg !8937

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !8938
  br label %return, !dbg !8938

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !8939
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !8940
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !8940
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !8941
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !8941
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !8942
  br label %return, !dbg !8942

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !8943
  ret %struct.htab* %5, !dbg !8943
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !8944 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !8948, metadata !DIExpression()), !dbg !8949
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !8950
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !8951
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8952
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !8952
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !8953
  %call1 = call i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %call), !dbg !8954
  %2 = bitcast i8* %call1 to %union.tree_node*, !dbg !8955
  ret %union.tree_node* %2, !dbg !8956
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %iter) #0 !dbg !8957 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !8962, metadata !DIExpression()), !dbg !8963
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !8964
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !8965
  %call = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hti), !dbg !8966
  ret i8 %call, !dbg !8967
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !8968 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !8969, metadata !DIExpression()), !dbg !8970
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !8971
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !8972
  %call = call i8* @next_htab_element(%struct.htab_iterator* %hti), !dbg !8973
  %1 = bitcast i8* %call to %union.tree_node*, !dbg !8974
  ret %union.tree_node* %1, !dbg !8975
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @finalize_new_vars_creation(i8** %slot, i8* %data) #0 !dbg !8976 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %n_var = alloca %struct.new_var_data*, align 8
  %i = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !8977, metadata !DIExpression()), !dbg !8978
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8979, metadata !DIExpression()), !dbg !8980
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %n_var, metadata !8981, metadata !DIExpression()), !dbg !8982
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !8983
  %1 = bitcast i8** %0 to %struct.new_var_data**, !dbg !8984
  %2 = load %struct.new_var_data*, %struct.new_var_data** %1, align 8, !dbg !8984
  store %struct.new_var_data* %2, %struct.new_var_data** %n_var, align 8, !dbg !8982
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8985, metadata !DIExpression()), !dbg !8986
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8987, metadata !DIExpression()), !dbg !8988
  store i32 0, i32* %i, align 4, !dbg !8989
  br label %for.cond, !dbg !8991

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8992
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %3, i32 0, i32 1, !dbg !8992
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars, align 8, !dbg !8992
  %tobool = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !8992
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8992

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !8992
  %new_vars1 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %5, i32 0, i32 1, !dbg !8992
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars1, align 8, !dbg !8992
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !8992
  br label %cond.end, !dbg !8992

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8992
  %7 = load i32, i32* %i, align 4, !dbg !8992
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %7, %union.tree_node** %var), !dbg !8992
  %tobool2 = icmp ne i32 %call, 0, !dbg !8994
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8994

for.body:                                         ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8995
  call void @finalize_var_creation(%union.tree_node* %8), !dbg !8996
  br label %for.inc, !dbg !8996

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !8997
  %inc = add i32 %9, 1, !dbg !8997
  store i32 %inc, i32* %i, align 4, !dbg !8997
  br label %for.cond, !dbg !8998, !llvm.loop !8999

for.end:                                          ; preds = %cond.end
  ret i32 1, !dbg !9001
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %table) #0 !dbg !9002 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %table.addr = alloca %struct.htab*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !9006, metadata !DIExpression()), !dbg !9007
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !9008, metadata !DIExpression()), !dbg !9009
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !9010
  %1 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9011
  %htab = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %1, i32 0, i32 0, !dbg !9012
  store %struct.htab* %0, %struct.htab** %htab, align 8, !dbg !9013
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !9014
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !9015
  %3 = load i8**, i8*** %entries, align 8, !dbg !9015
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9016
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !9017
  store i8** %3, i8*** %slot, align 8, !dbg !9018
  %5 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9019
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %5, i32 0, i32 1, !dbg !9020
  %6 = load i8**, i8*** %slot1, align 8, !dbg !9020
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !9021
  %call = call i64 @htab_size(%struct.htab* %7), !dbg !9022
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %call, !dbg !9023
  %8 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9024
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %8, i32 0, i32 2, !dbg !9025
  store i8** %add.ptr, i8*** %limit, align 8, !dbg !9026
  br label %do.body, !dbg !9027

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8** %x, metadata !9028, metadata !DIExpression()), !dbg !9030
  %9 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9031
  %slot2 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %9, i32 0, i32 1, !dbg !9032
  %10 = load i8**, i8*** %slot2, align 8, !dbg !9032
  %11 = load i8*, i8** %10, align 8, !dbg !9033
  store i8* %11, i8** %x, align 8, !dbg !9030
  %12 = load i8*, i8** %x, align 8, !dbg !9034
  %cmp = icmp ne i8* %12, null, !dbg !9036
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9037

land.lhs.true:                                    ; preds = %do.body
  %13 = load i8*, i8** %x, align 8, !dbg !9038
  %cmp3 = icmp ne i8* %13, inttoptr (i64 1 to i8*), !dbg !9039
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9040

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !9041

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.cond, !dbg !9042

do.cond:                                          ; preds = %if.end
  %14 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9043
  %slot4 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %14, i32 0, i32 1, !dbg !9044
  %15 = load i8**, i8*** %slot4, align 8, !dbg !9045
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !9045
  store i8** %incdec.ptr, i8*** %slot4, align 8, !dbg !9045
  %16 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9046
  %limit5 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %16, i32 0, i32 2, !dbg !9047
  %17 = load i8**, i8*** %limit5, align 8, !dbg !9047
  %cmp6 = icmp ult i8** %incdec.ptr, %17, !dbg !9048
  br i1 %cmp6, label %do.body, label %do.end, !dbg !9042, !llvm.loop !9049

do.end:                                           ; preds = %do.cond, %if.then
  %18 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9051
  %slot7 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %18, i32 0, i32 1, !dbg !9053
  %19 = load i8**, i8*** %slot7, align 8, !dbg !9053
  %20 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9054
  %limit8 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %20, i32 0, i32 2, !dbg !9055
  %21 = load i8**, i8*** %limit8, align 8, !dbg !9055
  %cmp9 = icmp ult i8** %19, %21, !dbg !9056
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !9057

if.then10:                                        ; preds = %do.end
  %22 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9058
  %slot11 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %22, i32 0, i32 1, !dbg !9059
  %23 = load i8**, i8*** %slot11, align 8, !dbg !9059
  %24 = load i8*, i8** %23, align 8, !dbg !9060
  store i8* %24, i8** %retval, align 8, !dbg !9061
  br label %return, !dbg !9061

if.end12:                                         ; preds = %do.end
  store i8* null, i8** %retval, align 8, !dbg !9062
  br label %return, !dbg !9062

return:                                           ; preds = %if.end12, %if.then10
  %25 = load i8*, i8** %retval, align 8, !dbg !9063
  ret i8* %25, !dbg !9063
}

declare dso_local i64 @htab_size(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_htab_p(%struct.htab_iterator* %hti) #0 !dbg !9064 {
entry:
  %retval = alloca i8, align 1
  %hti.addr = alloca %struct.htab_iterator*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !9069, metadata !DIExpression()), !dbg !9070
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9071
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !9073
  %1 = load i8**, i8*** %slot, align 8, !dbg !9073
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9074
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !9075
  %3 = load i8**, i8*** %limit, align 8, !dbg !9075
  %cmp = icmp uge i8** %1, %3, !dbg !9076
  br i1 %cmp, label %if.then, label %if.end, !dbg !9077

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9078
  br label %return, !dbg !9078

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9079
  br label %return, !dbg !9079

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !9080
  ret i8 %4, !dbg !9080
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @next_htab_element(%struct.htab_iterator* %hti) #0 !dbg !9081 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !9084, metadata !DIExpression()), !dbg !9085
  br label %while.cond, !dbg !9086

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9087
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !9088
  %1 = load i8**, i8*** %slot, align 8, !dbg !9089
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1, !dbg !9089
  store i8** %incdec.ptr, i8*** %slot, align 8, !dbg !9089
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9090
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !9091
  %3 = load i8**, i8*** %limit, align 8, !dbg !9091
  %cmp = icmp ult i8** %incdec.ptr, %3, !dbg !9092
  br i1 %cmp, label %while.body, label %while.end, !dbg !9086

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %x, metadata !9093, metadata !DIExpression()), !dbg !9095
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !9096
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !9097
  %5 = load i8**, i8*** %slot1, align 8, !dbg !9097
  %6 = load i8*, i8** %5, align 8, !dbg !9098
  store i8* %6, i8** %x, align 8, !dbg !9095
  %7 = load i8*, i8** %x, align 8, !dbg !9099
  %cmp2 = icmp ne i8* %7, null, !dbg !9101
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !9102

land.lhs.true:                                    ; preds = %while.body
  %8 = load i8*, i8** %x, align 8, !dbg !9103
  %cmp3 = icmp ne i8* %8, inttoptr (i64 1 to i8*), !dbg !9104
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9105

if.then:                                          ; preds = %land.lhs.true
  %9 = load i8*, i8** %x, align 8, !dbg !9106
  store i8* %9, i8** %retval, align 8, !dbg !9107
  br label %return, !dbg !9107

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond, !dbg !9086, !llvm.loop !9108

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !9110
  br label %return, !dbg !9110

return:                                           ; preds = %while.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !9111
  ret i8* %10, !dbg !9111
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_var_creation(%union.tree_node* %new_decl) #0 !dbg !9112 {
entry:
  %new_decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %new_decl, %union.tree_node** %new_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl.addr, metadata !9113, metadata !DIExpression()), !dbg !9114
  %0 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !9115
  %call = call zeroext i8 @add_referenced_var(%union.tree_node* %0), !dbg !9116
  %1 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !9117
  call void @mark_sym_for_renaming(%union.tree_node* %1), !dbg !9118
  ret void, !dbg !9119
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_alloc_sites(%struct.func_alloc_sites* %m_data, %union.tree_node* %context) #0 !dbg !9120 {
entry:
  %m_data.addr = alloca %struct.func_alloc_sites*, align 8
  %context.addr = alloca %union.tree_node*, align 8
  %call = alloca %struct.alloc_site*, align 8
  %j = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %str = alloca %struct.data_structure*, align 8
  %num = alloca %union.tree_node*, align 8
  %new_stmts = alloca %struct.gimple_seq_d*, align 8
  %last_stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %last_stmt_tmp = alloca %union.gimple_statement_d*, align 8
  %new_malloc_stmt = alloca %union.gimple_statement_d*, align 8
  %last_stmt_tmp21 = alloca %union.gimple_statement_d*, align 8
  store %struct.func_alloc_sites* %m_data, %struct.func_alloc_sites** %m_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %m_data.addr, metadata !9123, metadata !DIExpression()), !dbg !9124
  store %union.tree_node* %context, %union.tree_node** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %context.addr, metadata !9125, metadata !DIExpression()), !dbg !9126
  call void @llvm.dbg.declare(metadata %struct.alloc_site** %call, metadata !9127, metadata !DIExpression()), !dbg !9128
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9129, metadata !DIExpression()), !dbg !9130
  store i32 0, i32* %j, align 4, !dbg !9131
  br label %for.cond, !dbg !9133

for.cond:                                         ; preds = %for.inc24, %entry
  %0 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %m_data.addr, align 8, !dbg !9134
  %allocs = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %0, i32 0, i32 1, !dbg !9134
  %1 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs, align 8, !dbg !9134
  %tobool = icmp ne %struct.VEC_alloc_site_t_heap* %1, null, !dbg !9134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9134

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %m_data.addr, align 8, !dbg !9134
  %allocs1 = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %2, i32 0, i32 1, !dbg !9134
  %3 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %allocs1, align 8, !dbg !9134
  %base = getelementptr inbounds %struct.VEC_alloc_site_t_heap, %struct.VEC_alloc_site_t_heap* %3, i32 0, i32 0, !dbg !9134
  br label %cond.end, !dbg !9134

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alloc_site_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9134
  %4 = load i32, i32* %j, align 4, !dbg !9134
  %call2 = call i32 @VEC_alloc_site_t_base_iterate(%struct.VEC_alloc_site_t_base* %cond, i32 %4, %struct.alloc_site** %call), !dbg !9134
  %tobool3 = icmp ne i32 %call2, 0, !dbg !9136
  br i1 %tobool3, label %for.body, label %for.end26, !dbg !9136

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9137, metadata !DIExpression()), !dbg !9139
  %5 = load %struct.alloc_site*, %struct.alloc_site** %call, align 8, !dbg !9140
  %stmt4 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %5, i32 0, i32 0, !dbg !9141
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !9141
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %stmt, align 8, !dbg !9139
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !9142, metadata !DIExpression()), !dbg !9143
  %7 = load %struct.alloc_site*, %struct.alloc_site** %call, align 8, !dbg !9144
  %str5 = getelementptr inbounds %struct.alloc_site, %struct.alloc_site* %7, i32 0, i32 1, !dbg !9145
  %8 = load %struct.data_structure*, %struct.data_structure** %str5, align 8, !dbg !9145
  store %struct.data_structure* %8, %struct.data_structure** %str, align 8, !dbg !9143
  call void @llvm.dbg.declare(metadata %union.tree_node** %num, metadata !9146, metadata !DIExpression()), !dbg !9147
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_stmts, metadata !9148, metadata !DIExpression()), !dbg !9149
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9149
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last_stmt, metadata !9150, metadata !DIExpression()), !dbg !9151
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9152
  %call6 = call %union.gimple_statement_d* @get_final_alloc_stmt(%union.gimple_statement_d* %9), !dbg !9153
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %last_stmt, align 8, !dbg !9151
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9154, metadata !DIExpression()), !dbg !9155
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9156, metadata !DIExpression()), !dbg !9157
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9158
  %11 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9159
  %decl = getelementptr inbounds %struct.data_structure, %struct.data_structure* %11, i32 0, i32 0, !dbg !9160
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9160
  %call7 = call %union.tree_node* @gen_num_of_structs_in_malloc(%union.gimple_statement_d* %10, %union.tree_node* %12, %struct.gimple_seq_d** %new_stmts), !dbg !9161
  store %union.tree_node* %call7, %union.tree_node** %num, align 8, !dbg !9162
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9163
  %tobool8 = icmp ne %struct.gimple_seq_d* %13, null, !dbg !9163
  br i1 %tobool8, label %if.then, label %if.end, !dbg !9165

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last_stmt_tmp, metadata !9166, metadata !DIExpression()), !dbg !9168
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9169
  %call9 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %14), !dbg !9170
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %last_stmt_tmp, align 8, !dbg !9168
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_stmt, align 8, !dbg !9171
  %16 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9172
  call void @insert_seq_after_stmt(%union.gimple_statement_d* %15, %struct.gimple_seq_d* %16), !dbg !9173
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_stmt_tmp, align 8, !dbg !9174
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %last_stmt, align 8, !dbg !9175
  br label %if.end, !dbg !9176

if.end:                                           ; preds = %if.then, %for.body
  store i32 0, i32* %i, align 4, !dbg !9177
  br label %for.cond10, !dbg !9179

for.cond10:                                       ; preds = %for.inc, %if.end
  %18 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9180
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %18, i32 0, i32 6, !dbg !9180
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !9180
  %tobool11 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !9180
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !9180

cond.true12:                                      ; preds = %for.cond10
  %20 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9180
  %new_types13 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %20, i32 0, i32 6, !dbg !9180
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types13, align 8, !dbg !9180
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i32 0, i32 0, !dbg !9180
  br label %cond.end16, !dbg !9180

cond.false15:                                     ; preds = %for.cond10
  br label %cond.end16, !dbg !9180

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true12 ], [ null, %cond.false15 ], !dbg !9180
  %22 = load i32, i32* %i, align 4, !dbg !9180
  %call18 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond17, i32 %22, %union.tree_node** %type), !dbg !9180
  %tobool19 = icmp ne i32 %call18, 0, !dbg !9182
  br i1 %tobool19, label %for.body20, label %for.end, !dbg !9182

for.body20:                                       ; preds = %cond.end16
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_malloc_stmt, metadata !9183, metadata !DIExpression()), !dbg !9185
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %new_malloc_stmt, align 8, !dbg !9185
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last_stmt_tmp21, metadata !9186, metadata !DIExpression()), !dbg !9187
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %last_stmt_tmp21, align 8, !dbg !9187
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9188
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9189
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9190
  %25 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9191
  %call22 = call %union.gimple_statement_d* @create_new_malloc(%union.gimple_statement_d* %23, %union.tree_node* %24, %struct.gimple_seq_d** %new_stmts, %union.tree_node* %25), !dbg !9192
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %new_malloc_stmt, align 8, !dbg !9193
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9194
  %call23 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %26), !dbg !9195
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %last_stmt_tmp21, align 8, !dbg !9196
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_stmt, align 8, !dbg !9197
  %28 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !9198
  call void @insert_seq_after_stmt(%union.gimple_statement_d* %27, %struct.gimple_seq_d* %28), !dbg !9199
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_malloc_stmt, align 8, !dbg !9200
  %30 = load %union.tree_node*, %union.tree_node** %context.addr, align 8, !dbg !9201
  call void @update_cgraph_with_malloc_call(%union.gimple_statement_d* %29, %union.tree_node* %30), !dbg !9202
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_stmt_tmp21, align 8, !dbg !9203
  store %union.gimple_statement_d* %31, %union.gimple_statement_d** %last_stmt, align 8, !dbg !9204
  br label %for.inc, !dbg !9205

for.inc:                                          ; preds = %for.body20
  %32 = load i32, i32* %i, align 4, !dbg !9206
  %inc = add i32 %32, 1, !dbg !9206
  store i32 %inc, i32* %i, align 4, !dbg !9206
  br label %for.cond10, !dbg !9207, !llvm.loop !9208

for.end:                                          ; preds = %cond.end16
  br label %for.inc24, !dbg !9210

for.inc24:                                        ; preds = %for.end
  %33 = load i32, i32* %j, align 4, !dbg !9211
  %inc25 = add i32 %33, 1, !dbg !9211
  store i32 %inc25, i32* %j, align 4, !dbg !9211
  br label %for.cond, !dbg !9212, !llvm.loop !9213

for.end26:                                        ; preds = %cond.end
  ret void, !dbg !9215
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gen_num_of_structs_in_malloc(%union.gimple_statement_d* %stmt, %union.tree_node* %str_decl, %struct.gimple_seq_d** %new_stmts_p) #0 !dbg !9216 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %str_decl.addr = alloca %union.tree_node*, align 8
  %new_stmts_p.addr = alloca %struct.gimple_seq_d**, align 8
  %arg = alloca %union.tree_node*, align 8
  %struct_size = alloca %union.tree_node*, align 8
  %struct_size_int = alloca i64, align 8
  %num = alloca %union.tree_node*, align 8
  %div_stmt = alloca %union.gimple_statement_d*, align 8
  %C = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9220, metadata !DIExpression()), !dbg !9221
  store %union.tree_node* %str_decl, %union.tree_node** %str_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %str_decl.addr, metadata !9222, metadata !DIExpression()), !dbg !9223
  store %struct.gimple_seq_d** %new_stmts_p, %struct.gimple_seq_d*** %new_stmts_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %new_stmts_p.addr, metadata !9224, metadata !DIExpression()), !dbg !9225
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !9226, metadata !DIExpression()), !dbg !9227
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_size, metadata !9228, metadata !DIExpression()), !dbg !9229
  call void @llvm.dbg.declare(metadata i64* %struct_size_int, metadata !9230, metadata !DIExpression()), !dbg !9231
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9232
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9232
  br i1 %tobool, label %if.end, label %if.then, !dbg !9234

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9235
  br label %return, !dbg !9235

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9236
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !9238
  %tobool1 = icmp ne i8 %call, 0, !dbg !9238
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !9239

if.then2:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9240
  br label %return, !dbg !9240

if.end3:                                          ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9241
  %call4 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %2, i32 0), !dbg !9242
  store %union.tree_node* %call4, %union.tree_node** %arg, align 8, !dbg !9243
  %3 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9244
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9244
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9244
  %bf.load = load i64, i64* %4, align 8, !dbg !9244
  %bf.clear = and i64 %bf.load, 65535, !dbg !9244
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9244
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !9246
  br i1 %cmp, label %land.lhs.true, label %if.end11, !dbg !9247

land.lhs.true:                                    ; preds = %if.end3
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9248
  %base5 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9248
  %6 = bitcast %struct.tree_base* %base5 to i64*, !dbg !9248
  %bf.load6 = load i64, i64* %6, align 8, !dbg !9248
  %bf.lshr = lshr i64 %bf.load6, 17, !dbg !9248
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !9248
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9248
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !9248
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !9249

if.then10:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9250
  br label %return, !dbg !9250

if.end11:                                         ; preds = %land.lhs.true, %if.end3
  %7 = load %union.tree_node*, %union.tree_node** %str_decl.addr, align 8, !dbg !9251
  %type = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !9251
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 3, !dbg !9251
  %8 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !9251
  store %union.tree_node* %8, %union.tree_node** %struct_size, align 8, !dbg !9252
  %9 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9253
  %int_cst = bitcast %union.tree_node* %9 to %struct.tree_int_cst*, !dbg !9253
  %int_cst12 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9253
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst12, i32 0, i32 0, !dbg !9253
  %10 = load i64, i64* %low, align 8, !dbg !9253
  store i64 %10, i64* %struct_size_int, align 8, !dbg !9254
  %11 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9255
  %tobool13 = icmp ne %union.tree_node* %11, null, !dbg !9255
  br i1 %tobool13, label %cond.false, label %cond.true, !dbg !9255

cond.true:                                        ; preds = %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1815, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9255
  br label %cond.end, !dbg !9255

cond.false:                                       ; preds = %if.end11
  br label %cond.end, !dbg !9255

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9255
  %12 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9256
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9256
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9256
  %bf.load15 = load i64, i64* %13, align 8, !dbg !9256
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9256
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9256
  %cmp18 = icmp eq i32 %bf.cast17, 141, !dbg !9258
  br i1 %cmp18, label %if.then19, label %if.end37, !dbg !9259

if.then19:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %num, metadata !9260, metadata !DIExpression()), !dbg !9262
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %div_stmt, metadata !9263, metadata !DIExpression()), !dbg !9264
  %14 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9265
  %15 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9267
  %call20 = call zeroext i8 @is_result_of_mult(%union.tree_node* %14, %union.tree_node** %num, %union.tree_node* %15), !dbg !9268
  %tobool21 = icmp ne i8 %call20, 0, !dbg !9268
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !9269

if.then22:                                        ; preds = %if.then19
  %16 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9270
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !9271
  br label %return, !dbg !9271

if.end23:                                         ; preds = %if.then19
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !9272
  %call24 = call %union.tree_node* @create_tmp_var(%union.tree_node* %17, i8* null), !dbg !9273
  store %union.tree_node* %call24, %union.tree_node** %num, align 8, !dbg !9274
  %18 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9275
  %tobool25 = icmp ne %union.tree_node* %18, null, !dbg !9275
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !9277

if.then26:                                        ; preds = %if.end23
  %19 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9278
  %call27 = call zeroext i8 @add_referenced_var(%union.tree_node* %19), !dbg !9279
  br label %if.end28, !dbg !9279

if.end28:                                         ; preds = %if.then26, %if.end23
  %20 = load i64, i64* %struct_size_int, align 8, !dbg !9280
  %call29 = call i32 @exact_log2(i64 %20), !dbg !9282
  %cmp30 = icmp eq i32 %call29, -1, !dbg !9283
  br i1 %cmp30, label %if.then31, label %if.else, !dbg !9284

if.then31:                                        ; preds = %if.end28
  %21 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9285
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9285
  %23 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9285
  %call32 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 67, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !9285
  store %union.gimple_statement_d* %call32, %union.gimple_statement_d** %div_stmt, align 8, !dbg !9286
  br label %if.end36, !dbg !9287

if.else:                                          ; preds = %if.end28
  call void @llvm.dbg.declare(metadata %union.tree_node** %C, metadata !9288, metadata !DIExpression()), !dbg !9290
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !9291
  %25 = load i64, i64* %struct_size_int, align 8, !dbg !9292
  %call33 = call i32 @exact_log2(i64 %25), !dbg !9293
  %conv = sext i32 %call33 to i64, !dbg !9293
  %call34 = call %union.tree_node* @build_int_cst(%union.tree_node* %24, i64 %conv), !dbg !9294
  store %union.tree_node* %call34, %union.tree_node** %C, align 8, !dbg !9290
  %26 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9295
  %27 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9295
  %28 = load %union.tree_node*, %union.tree_node** %C, align 8, !dbg !9295
  %call35 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 84, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !9295
  store %union.gimple_statement_d* %call35, %union.gimple_statement_d** %div_stmt, align 8, !dbg !9296
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then31
  %29 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %new_stmts_p.addr, align 8, !dbg !9297
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %div_stmt, align 8, !dbg !9298
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %29, %union.gimple_statement_d* %30), !dbg !9299
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %div_stmt, align 8, !dbg !9300
  call void @finalize_stmt(%union.gimple_statement_d* %31), !dbg !9301
  %32 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9302
  store %union.tree_node* %32, %union.tree_node** %retval, align 8, !dbg !9303
  br label %return, !dbg !9303

if.end37:                                         ; preds = %cond.end
  %33 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9304
  %base38 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !9304
  %34 = bitcast %struct.tree_base* %base38 to i64*, !dbg !9304
  %bf.load39 = load i64, i64* %34, align 8, !dbg !9304
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !9304
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !9304
  %idxprom = sext i32 %bf.cast41 to i64, !dbg !9304
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9304
  %35 = load i32, i32* %arrayidx, align 4, !dbg !9304
  %cmp42 = icmp eq i32 %35, 1, !dbg !9304
  br i1 %cmp42, label %land.lhs.true44, label %if.end50, !dbg !9306

land.lhs.true44:                                  ; preds = %if.end37
  %36 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9307
  %common = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !9307
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9307
  %37 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !9307
  %38 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9308
  %39 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9309
  %call46 = call i32 @multiple_of_p(%union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !9310
  %tobool47 = icmp ne i32 %call46, 0, !dbg !9310
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !9311

if.then48:                                        ; preds = %land.lhs.true44
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9312
  %41 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9313
  %call49 = call %union.tree_node* @int_const_binop(i32 67, %union.tree_node* %40, %union.tree_node* %41, i32 0), !dbg !9314
  store %union.tree_node* %call49, %union.tree_node** %retval, align 8, !dbg !9315
  br label %return, !dbg !9315

if.end50:                                         ; preds = %land.lhs.true44, %if.end37
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9316
  br label %return, !dbg !9316

return:                                           ; preds = %if.end50, %if.then48, %if.end36, %if.then22, %if.then10, %if.then2, %if.then
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9317
  ret %union.tree_node* %42, !dbg !9317
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) #0 !dbg !9318 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9321, metadata !DIExpression()), !dbg !9322
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !9323, metadata !DIExpression()), !dbg !9324
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9325
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !9326
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !9324
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9327
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !9328
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9328

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9329
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !9330
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9330
  br label %cond.end, !dbg !9328

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !9328
  ret %union.gimple_statement_d* %cond, !dbg !9331
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_seq_after_stmt(%union.gimple_statement_d* %stmt, %struct.gimple_seq_d* %new_stmts) #0 !dbg !9332 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_stmts.addr = alloca %struct.gimple_seq_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9335, metadata !DIExpression()), !dbg !9336
  store %struct.gimple_seq_d* %new_stmts, %struct.gimple_seq_d** %new_stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_stmts.addr, metadata !9337, metadata !DIExpression()), !dbg !9338
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !9339, metadata !DIExpression()), !dbg !9340
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9341
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9341
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9343

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts.addr, align 8, !dbg !9344
  %tobool1 = icmp ne %struct.gimple_seq_d* %1, null, !dbg !9344
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9345

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !9346

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9347
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %2), !dbg !9348
  %3 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !9348
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9348
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !9348
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts.addr, align 8, !dbg !9349
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %bsi, %struct.gimple_seq_d* %5, i32 1), !dbg !9350
  br label %return, !dbg !9351

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !9351
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @create_new_malloc(%union.gimple_statement_d* %malloc_stmt, %union.tree_node* %new_type, %struct.gimple_seq_d** %new_stmts, %union.tree_node* %num) #0 !dbg !9352 {
entry:
  %malloc_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %new_stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %num.addr = alloca %union.tree_node*, align 8
  %new_malloc_size = alloca %union.tree_node*, align 8
  %malloc_fn_decl = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %malloc_res = alloca %union.tree_node*, align 8
  %call_stmt = alloca %union.gimple_statement_d*, align 8
  %final_stmt = alloca %union.gimple_statement_d*, align 8
  %cast_res = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %malloc_stmt, %union.gimple_statement_d** %malloc_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %malloc_stmt.addr, metadata !9355, metadata !DIExpression()), !dbg !9356
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !9357, metadata !DIExpression()), !dbg !9358
  store %struct.gimple_seq_d** %new_stmts, %struct.gimple_seq_d*** %new_stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %new_stmts.addr, metadata !9359, metadata !DIExpression()), !dbg !9360
  store %union.tree_node* %num, %union.tree_node** %num.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %num.addr, metadata !9361, metadata !DIExpression()), !dbg !9362
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_malloc_size, metadata !9363, metadata !DIExpression()), !dbg !9364
  call void @llvm.dbg.declare(metadata %union.tree_node** %malloc_fn_decl, metadata !9365, metadata !DIExpression()), !dbg !9366
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !9367, metadata !DIExpression()), !dbg !9368
  call void @llvm.dbg.declare(metadata %union.tree_node** %malloc_res, metadata !9369, metadata !DIExpression()), !dbg !9370
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt, metadata !9371, metadata !DIExpression()), !dbg !9372
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %final_stmt, metadata !9373, metadata !DIExpression()), !dbg !9374
  call void @llvm.dbg.declare(metadata %union.tree_node** %cast_res, metadata !9375, metadata !DIExpression()), !dbg !9376
  %0 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9377
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9377
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9377

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9377
  %tobool1 = icmp ne %union.gimple_statement_d* %1, null, !dbg !9377
  br i1 %tobool1, label %land.lhs.true2, label %cond.true, !dbg !9377

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9377
  %tobool3 = icmp ne %union.tree_node* %2, null, !dbg !9377
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !9377

cond.true:                                        ; preds = %land.lhs.true2, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9377
  br label %cond.end, !dbg !9377

cond.false:                                       ; preds = %land.lhs.true2
  br label %cond.end, !dbg !9377

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9377
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !9378
  %3 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %new_stmts.addr, align 8, !dbg !9379
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %3, align 8, !dbg !9380
  %4 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9381
  %5 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9382
  %call4 = call %union.gimple_statement_d* @gen_size(%union.tree_node* %4, %union.tree_node* %5, %union.tree_node** %new_malloc_size), !dbg !9383
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9384
  %6 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %new_stmts.addr, align 8, !dbg !9385
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9386
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %6, %union.gimple_statement_d* %7), !dbg !9387
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !9388
  %call5 = call %union.tree_node* @create_tmp_var(%union.tree_node* %8, i8* null), !dbg !9389
  store %union.tree_node* %call5, %union.tree_node** %malloc_res, align 8, !dbg !9390
  %9 = load %union.tree_node*, %union.tree_node** %malloc_res, align 8, !dbg !9391
  %call6 = call zeroext i8 @add_referenced_var(%union.tree_node* %9), !dbg !9392
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9393
  %call7 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %10), !dbg !9394
  store %union.tree_node* %call7, %union.tree_node** %malloc_fn_decl, align 8, !dbg !9395
  %11 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !9396
  %12 = load %union.tree_node*, %union.tree_node** %new_malloc_size, align 8, !dbg !9397
  %call8 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %11, i32 1, %union.tree_node* %12), !dbg !9398
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9399
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9400
  %14 = load %union.tree_node*, %union.tree_node** %malloc_res, align 8, !dbg !9401
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %13, %union.tree_node* %14), !dbg !9402
  %15 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %new_stmts.addr, align 8, !dbg !9403
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9404
  call void @finalize_stmt_and_append(%struct.gimple_seq_d** %15, %union.gimple_statement_d* %16), !dbg !9405
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9406
  %call9 = call %union.gimple_statement_d* @get_final_alloc_stmt(%union.gimple_statement_d* %17), !dbg !9407
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %final_stmt, align 8, !dbg !9408
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !9409
  %tobool10 = icmp ne %union.gimple_statement_d* %18, null, !dbg !9409
  br i1 %tobool10, label %cond.false12, label %cond.true11, !dbg !9409

cond.true11:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1779, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9409
  br label %cond.end13, !dbg !9409

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !9409

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !9409
  %19 = load %union.tree_node*, %union.tree_node** %malloc_res, align 8, !dbg !9410
  %20 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9411
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %final_stmt, align 8, !dbg !9412
  %call15 = call %union.gimple_statement_d* @gen_cast_stmt(%union.tree_node* %19, %union.tree_node* %20, %union.gimple_statement_d* %21, %union.tree_node** %cast_res), !dbg !9413
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9414
  %22 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %new_stmts.addr, align 8, !dbg !9415
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9416
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %22, %union.gimple_statement_d* %23), !dbg !9417
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9418
  ret %union.gimple_statement_d* %24, !dbg !9419
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_cgraph_with_malloc_call(%union.gimple_statement_d* %malloc_stmt, %union.tree_node* %context) #0 !dbg !9420 {
entry:
  %malloc_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %context.addr = alloca %union.tree_node*, align 8
  %src = alloca %struct.cgraph_node*, align 8
  %dest = alloca %struct.cgraph_node*, align 8
  %malloc_fn_decl = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %malloc_stmt, %union.gimple_statement_d** %malloc_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %malloc_stmt.addr, metadata !9423, metadata !DIExpression()), !dbg !9424
  store %union.tree_node* %context, %union.tree_node** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %context.addr, metadata !9425, metadata !DIExpression()), !dbg !9426
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %src, metadata !9427, metadata !DIExpression()), !dbg !9428
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %dest, metadata !9429, metadata !DIExpression()), !dbg !9430
  call void @llvm.dbg.declare(metadata %union.tree_node** %malloc_fn_decl, metadata !9431, metadata !DIExpression()), !dbg !9432
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9433
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9433
  br i1 %tobool, label %if.end, label %if.then, !dbg !9435

if.then:                                          ; preds = %entry
  br label %return, !dbg !9436

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9437
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !9438
  store %union.tree_node* %call, %union.tree_node** %malloc_fn_decl, align 8, !dbg !9439
  %2 = load %union.tree_node*, %union.tree_node** %context.addr, align 8, !dbg !9440
  %call1 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %2), !dbg !9441
  store %struct.cgraph_node* %call1, %struct.cgraph_node** %src, align 8, !dbg !9442
  %3 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !9443
  %call2 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %3), !dbg !9444
  store %struct.cgraph_node* %call2, %struct.cgraph_node** %dest, align 8, !dbg !9445
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %src, align 8, !dbg !9446
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !9447
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9448
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9449
  %call3 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !9450
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call3, i32 0, i32 8, !dbg !9451
  %8 = load i64, i64* %count, align 8, !dbg !9451
  %9 = load %union.tree_node*, %union.tree_node** %context.addr, align 8, !dbg !9452
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9453
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %10), !dbg !9454
  %call5 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %9, %struct.basic_block_def* %call4), !dbg !9455
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %malloc_stmt.addr, align 8, !dbg !9456
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %11), !dbg !9457
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call6, i32 0, i32 10, !dbg !9458
  %12 = load i32, i32* %loop_depth, align 4, !dbg !9458
  %call7 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %4, %struct.cgraph_node* %5, %union.gimple_statement_d* %6, i64 %8, i32 %call5, i32 %12), !dbg !9459
  br label %return, !dbg !9460

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !9460
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9461 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9462, metadata !DIExpression()), !dbg !9463
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9464, metadata !DIExpression()), !dbg !9465
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9466
  %1 = load i32, i32* %index.addr, align 4, !dbg !9467
  %add = add i32 %1, 3, !dbg !9468
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !9469
  ret %union.tree_node* %call, !dbg !9470
}

declare dso_local i32 @exact_log2(i64) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !9471 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9474, metadata !DIExpression()), !dbg !9475
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9476
  call void @update_stmt(%union.gimple_statement_d* %0), !dbg !9477
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9478
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %1), !dbg !9479
  ret void, !dbg !9480
}

declare dso_local i32 @multiple_of_p(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !9481 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9482, metadata !DIExpression()), !dbg !9483
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9484
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9486
  %tobool = icmp ne i8 %call, 0, !dbg !9486
  br i1 %tobool, label %if.then, label %if.end, !dbg !9487

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9488
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !9490
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9491
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !9492
  br label %if.end, !dbg !9493

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !9494
}

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !9495 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9496, metadata !DIExpression()), !dbg !9497
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9498
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !9498
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9498

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9499
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !9500
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !9500
  br label %cond.end, !dbg !9498

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9498

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !9498
  ret %struct.gimple_seq_node_d* %cond, !dbg !9501
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gen_size(%union.tree_node* %num, %union.tree_node* %type, %union.tree_node** %res) #0 !dbg !9502 {
entry:
  %num.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %res.addr = alloca %union.tree_node**, align 8
  %struct_size = alloca %union.tree_node*, align 8
  %struct_size_int = alloca i64, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %size = alloca %union.tree_node*, align 8
  %C = alloca %union.tree_node*, align 8
  store %union.tree_node* %num, %union.tree_node** %num.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %num.addr, metadata !9505, metadata !DIExpression()), !dbg !9506
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9507, metadata !DIExpression()), !dbg !9508
  store %union.tree_node** %res, %union.tree_node*** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %res.addr, metadata !9509, metadata !DIExpression()), !dbg !9510
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_size, metadata !9511, metadata !DIExpression()), !dbg !9512
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9513
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !9513
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 3, !dbg !9513
  %1 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !9513
  store %union.tree_node* %1, %union.tree_node** %struct_size, align 8, !dbg !9512
  call void @llvm.dbg.declare(metadata i64* %struct_size_int, metadata !9514, metadata !DIExpression()), !dbg !9515
  %2 = load %union.tree_node*, %union.tree_node** %struct_size, align 8, !dbg !9516
  %int_cst = bitcast %union.tree_node* %2 to %struct.tree_int_cst*, !dbg !9516
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9516
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !9516
  %3 = load i64, i64* %low, align 8, !dbg !9516
  store i64 %3, i64* %struct_size_int, align 8, !dbg !9515
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !9517, metadata !DIExpression()), !dbg !9518
  %4 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9519
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !9519
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9519
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9519
  %call = call %union.tree_node* @create_tmp_var(%union.tree_node* %5, i8* null), !dbg !9520
  %6 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !9521
  store %union.tree_node* %call, %union.tree_node** %6, align 8, !dbg !9522
  %7 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !9523
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !9525
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !9525
  br i1 %tobool, label %if.then, label %if.end, !dbg !9526

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !9527
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !9528
  %call4 = call zeroext i8 @add_referenced_var(%union.tree_node* %10), !dbg !9529
  br label %if.end, !dbg !9529

if.end:                                           ; preds = %if.then, %entry
  %11 = load i64, i64* %struct_size_int, align 8, !dbg !9530
  %call5 = call i32 @exact_log2(i64 %11), !dbg !9532
  %cmp = icmp eq i32 %call5, -1, !dbg !9533
  br i1 %cmp, label %if.then6, label %if.else, !dbg !9534

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !9535, metadata !DIExpression()), !dbg !9537
  %12 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9538
  %common7 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !9538
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !9538
  %13 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !9538
  %14 = load i64, i64* %struct_size_int, align 8, !dbg !9539
  %call9 = call %union.tree_node* @build_int_cst(%union.tree_node* %13, i64 %14), !dbg !9540
  store %union.tree_node* %call9, %union.tree_node** %size, align 8, !dbg !9537
  %15 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !9541
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !9541
  %17 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9541
  %common10 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !9541
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !9541
  %18 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !9541
  %19 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9541
  %20 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9541
  %call12 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !9541
  %call13 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %16, %union.tree_node* %call12), !dbg !9541
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9542
  br label %if.end22, !dbg !9543

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %C, metadata !9544, metadata !DIExpression()), !dbg !9546
  %21 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9547
  %common14 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !9547
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !9547
  %22 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !9547
  %23 = load i64, i64* %struct_size_int, align 8, !dbg !9548
  %call16 = call i32 @exact_log2(i64 %23), !dbg !9549
  %conv = sext i32 %call16 to i64, !dbg !9549
  %call17 = call %union.tree_node* @build_int_cst(%union.tree_node* %22, i64 %conv), !dbg !9550
  store %union.tree_node* %call17, %union.tree_node** %C, align 8, !dbg !9546
  %24 = load %union.tree_node**, %union.tree_node*** %res.addr, align 8, !dbg !9551
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !9551
  %26 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9551
  %common18 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !9551
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !9551
  %27 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !9551
  %28 = load %union.tree_node*, %union.tree_node** %num.addr, align 8, !dbg !9551
  %29 = load %union.tree_node*, %union.tree_node** %C, align 8, !dbg !9551
  %call20 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 83, %union.tree_node* %27, %union.tree_node* %28, %union.tree_node* %29), !dbg !9551
  %call21 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %25, %union.tree_node* %call20), !dbg !9551
  store %union.gimple_statement_d* %call21, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9552
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then6
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9553
  call void @finalize_stmt(%union.gimple_statement_d* %30), !dbg !9554
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9555
  ret %union.gimple_statement_d* %31, !dbg !9556
}

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !9557 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9558, metadata !DIExpression()), !dbg !9559
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !9560, metadata !DIExpression()), !dbg !9561
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9562
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9563
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !9564
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9565
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9565
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9567

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9568
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9568
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !9568
  %bf.load = load i64, i64* %4, align 8, !dbg !9568
  %bf.clear = and i64 %bf.load, 65535, !dbg !9568
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9568
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9569
  br i1 %cmp, label %if.then, label %if.end, !dbg !9570

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9571
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !9572
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !9572
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9572
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9573
  br label %if.end, !dbg !9572

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !9574
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_stmt_and_append(%struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %stmt) #0 !dbg !9575 {
entry:
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !9578, metadata !DIExpression()), !dbg !9579
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9580, metadata !DIExpression()), !dbg !9581
  %0 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !9582
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9583
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %0, %union.gimple_statement_d* %1), !dbg !9584
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9585
  call void @finalize_stmt(%union.gimple_statement_d* %2), !dbg !9586
  ret void, !dbg !9587
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gen_cast_stmt(%union.tree_node* %before_cast, %union.tree_node* %new_type, %union.gimple_statement_d* %orig_cast_stmt, %union.tree_node** %res_p) #0 !dbg !9588 {
entry:
  %before_cast.addr = alloca %union.tree_node*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %orig_cast_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %res_p.addr = alloca %union.tree_node**, align 8
  %lhs = alloca %union.tree_node*, align 8
  %new_lhs = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %before_cast, %union.tree_node** %before_cast.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %before_cast.addr, metadata !9591, metadata !DIExpression()), !dbg !9592
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !9593, metadata !DIExpression()), !dbg !9594
  store %union.gimple_statement_d* %orig_cast_stmt, %union.gimple_statement_d** %orig_cast_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_cast_stmt.addr, metadata !9595, metadata !DIExpression()), !dbg !9596
  store %union.tree_node** %res_p, %union.tree_node*** %res_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %res_p.addr, metadata !9597, metadata !DIExpression()), !dbg !9598
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9599, metadata !DIExpression()), !dbg !9600
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_lhs, metadata !9601, metadata !DIExpression()), !dbg !9602
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !9603, metadata !DIExpression()), !dbg !9604
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_cast_stmt.addr, align 8, !dbg !9605
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !9606
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !9607
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9608
  %2 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9609
  %call1 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %1, %union.tree_node* %2), !dbg !9610
  store %union.tree_node* %call1, %union.tree_node** %new_lhs, align 8, !dbg !9611
  %3 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !9612
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !9612
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9612

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 658, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9612
  br label %cond.end, !dbg !9612

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9612

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9612
  %4 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !9613
  %5 = load %union.tree_node*, %union.tree_node** %before_cast.addr, align 8, !dbg !9613
  %call2 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 116, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* null), !dbg !9613
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9614
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9615
  call void @finalize_stmt(%union.gimple_statement_d* %6), !dbg !9616
  %7 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !9617
  %8 = load %union.tree_node**, %union.tree_node*** %res_p.addr, align 8, !dbg !9618
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !9619
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9620
  ret %union.gimple_statement_d* %9, !dbg !9621
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !9622 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9625, metadata !DIExpression()), !dbg !9626
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9627, metadata !DIExpression()), !dbg !9628
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !9629, metadata !DIExpression()), !dbg !9630
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9631
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9631
  %conv = zext i8 %call to i32, !dbg !9631
  %tobool = icmp ne i32 %conv, 0, !dbg !9631
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9631

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !9631
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9631
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !9631
  %cmp = icmp ult i32 %1, %call1, !dbg !9631
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9631

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9631
  br label %cond.end, !dbg !9631

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9631

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9631
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !9632
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9633
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !9634
  %5 = load i32, i32* %i.addr, align 4, !dbg !9635
  %idxprom = zext i32 %5 to i64, !dbg !9634
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !9634
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !9636
  ret void, !dbg !9637
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_new_var_of_type(%union.tree_node* %orig_var, %union.tree_node* %new_type) #0 !dbg !9638 {
entry:
  %orig_var.addr = alloca %union.tree_node*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %var = alloca %struct.new_var_data*, align 8
  store %union.tree_node* %orig_var, %union.tree_node** %orig_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_var.addr, metadata !9639, metadata !DIExpression()), !dbg !9640
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !9641, metadata !DIExpression()), !dbg !9642
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %var, metadata !9643, metadata !DIExpression()), !dbg !9644
  %0 = load %union.tree_node*, %union.tree_node** %orig_var.addr, align 8, !dbg !9645
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9645
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9645

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9645
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !9645
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !9645

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 597, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9645
  br label %cond.end, !dbg !9645

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9645

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9645
  %2 = load %union.tree_node*, %union.tree_node** %orig_var.addr, align 8, !dbg !9646
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9646
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9646
  %bf.load = load i64, i64* %3, align 8, !dbg !9646
  %bf.clear = and i64 %bf.load, 65535, !dbg !9646
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9646
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9648
  br i1 %cmp, label %if.then, label %if.end, !dbg !9649

if.then:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %orig_var.addr, align 8, !dbg !9650
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !9650
  %var2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !9650
  %5 = load %union.tree_node*, %union.tree_node** %var2, align 8, !dbg !9650
  store %union.tree_node* %5, %union.tree_node** %orig_var.addr, align 8, !dbg !9651
  br label %if.end, !dbg !9652

if.end:                                           ; preds = %if.then, %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %orig_var.addr, align 8, !dbg !9653
  %7 = load %struct.htab*, %struct.htab** @new_global_vars, align 8, !dbg !9654
  %call = call %struct.new_var_data* @is_in_new_vars_htab(%union.tree_node* %6, %struct.htab* %7), !dbg !9655
  store %struct.new_var_data* %call, %struct.new_var_data** %var, align 8, !dbg !9656
  %8 = load %struct.new_var_data*, %struct.new_var_data** %var, align 8, !dbg !9657
  %tobool3 = icmp ne %struct.new_var_data* %8, null, !dbg !9657
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !9659

if.then4:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %orig_var.addr, align 8, !dbg !9660
  %10 = load %struct.htab*, %struct.htab** @new_local_vars, align 8, !dbg !9661
  %call5 = call %struct.new_var_data* @is_in_new_vars_htab(%union.tree_node* %9, %struct.htab* %10), !dbg !9662
  store %struct.new_var_data* %call5, %struct.new_var_data** %var, align 8, !dbg !9663
  br label %if.end6, !dbg !9664

if.end6:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.new_var_data*, %struct.new_var_data** %var, align 8, !dbg !9665
  %tobool7 = icmp ne %struct.new_var_data* %11, null, !dbg !9665
  br i1 %tobool7, label %cond.false9, label %cond.true8, !dbg !9665

cond.true8:                                       ; preds = %if.end6
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 605, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9665
  br label %cond.end10, !dbg !9665

cond.false9:                                      ; preds = %if.end6
  br label %cond.end10, !dbg !9665

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !9665
  %12 = load %struct.new_var_data*, %struct.new_var_data** %var, align 8, !dbg !9666
  %13 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9667
  %call12 = call %union.tree_node* @find_var_in_new_vars_vec(%struct.new_var_data* %12, %union.tree_node* %13), !dbg !9668
  ret %union.tree_node* %call12, !dbg !9669
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_var_in_new_vars_vec(%struct.new_var_data* %var, %union.tree_node* %new_type) #0 !dbg !9670 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %struct.new_var_data*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %n_var = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %struct.new_var_data* %var, %struct.new_var_data** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %var.addr, metadata !9673, metadata !DIExpression()), !dbg !9674
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !9675, metadata !DIExpression()), !dbg !9676
  call void @llvm.dbg.declare(metadata %union.tree_node** %n_var, metadata !9677, metadata !DIExpression()), !dbg !9678
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9679, metadata !DIExpression()), !dbg !9680
  store i32 0, i32* %i, align 4, !dbg !9681
  br label %for.cond, !dbg !9683

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.new_var_data*, %struct.new_var_data** %var.addr, align 8, !dbg !9684
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %0, i32 0, i32 1, !dbg !9684
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars, align 8, !dbg !9684
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !9684
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9684

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.new_var_data*, %struct.new_var_data** %var.addr, align 8, !dbg !9684
  %new_vars1 = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %2, i32 0, i32 1, !dbg !9684
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_vars1, align 8, !dbg !9684
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !9684
  br label %cond.end, !dbg !9684

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9684
  %4 = load i32, i32* %i, align 4, !dbg !9684
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %n_var), !dbg !9684
  %tobool2 = icmp ne i32 %call, 0, !dbg !9686
  br i1 %tobool2, label %for.body, label %for.end, !dbg !9686

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9687, metadata !DIExpression()), !dbg !9689
  %5 = load %union.tree_node*, %union.tree_node** %n_var, align 8, !dbg !9690
  %call3 = call %union.tree_node* @get_type_of_var(%union.tree_node* %5), !dbg !9691
  %call4 = call %union.tree_node* @strip_type(%union.tree_node* %call3), !dbg !9692
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !9689
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9693
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !9693
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !9693

cond.true6:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 570, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9693
  br label %cond.end8, !dbg !9693

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !9693

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !9693
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9694
  %8 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9696
  %cmp = icmp eq %union.tree_node* %7, %8, !dbg !9697
  br i1 %cmp, label %if.then, label %if.end, !dbg !9698

if.then:                                          ; preds = %cond.end8
  %9 = load %union.tree_node*, %union.tree_node** %n_var, align 8, !dbg !9699
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !9700
  br label %return, !dbg !9700

if.end:                                           ; preds = %cond.end8
  br label %for.inc, !dbg !9701

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !9702
  %inc = add i32 %10, 1, !dbg !9702
  store i32 %inc, i32* %i, align 4, !dbg !9702
  br label %for.cond, !dbg !9703, !llvm.loop !9704

for.end:                                          ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9706
  br label %return, !dbg !9706

return:                                           ; preds = %for.end, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9707
  ret %union.tree_node* %11, !dbg !9707
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

declare dso_local %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, i64, i32, i32) #2

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_accesses_in_bb(%struct.basic_block_def* %bb) #0 !dbg !9708 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9709, metadata !DIExpression()), !dbg !9710
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !9711, metadata !DIExpression()), !dbg !9712
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9713, metadata !DIExpression()), !dbg !9714
  store i32 0, i32* %i, align 4, !dbg !9715
  br label %for.cond, !dbg !9717

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !9718
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !9718
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9718

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !9718
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !9718
  br label %cond.end, !dbg !9718

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9718

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9718
  %2 = load i32, i32* %i, align 4, !dbg !9718
  %call = call i32 @VEC_structure_base_iterate(%struct.VEC_structure_base* %cond, i32 %2, %struct.data_structure** %str), !dbg !9718
  %tobool1 = icmp ne i32 %call, 0, !dbg !9720
  br i1 %tobool1, label %for.body, label %for.end, !dbg !9720

for.body:                                         ; preds = %cond.end
  %3 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9721
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9722
  call void @create_new_accs_for_struct(%struct.data_structure* %3, %struct.basic_block_def* %4), !dbg !9723
  br label %for.inc, !dbg !9723

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !9724
  %inc = add i32 %5, 1, !dbg !9724
  store i32 %inc, i32* %i, align 4, !dbg !9724
  br label %for.cond, !dbg !9725, !llvm.loop !9726

for.end:                                          ; preds = %cond.end
  ret void, !dbg !9728
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_accs_for_struct(%struct.data_structure* %str, %struct.basic_block_def* %bb) #0 !dbg !9729 {
entry:
  %str.addr = alloca %struct.data_structure*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %dt = alloca %struct.create_acc_data, align 8
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !9732, metadata !DIExpression()), !dbg !9733
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9734, metadata !DIExpression()), !dbg !9735
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9736, metadata !DIExpression()), !dbg !9737
  call void @llvm.dbg.declare(metadata %struct.create_acc_data* %dt, metadata !9738, metadata !DIExpression()), !dbg !9739
  %0 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9740
  %str1 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %dt, i32 0, i32 1, !dbg !9741
  store %struct.data_structure* %0, %struct.data_structure** %str1, align 8, !dbg !9742
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9743
  %bb2 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %dt, i32 0, i32 0, !dbg !9744
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb2, align 8, !dbg !9745
  %field_index = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %dt, i32 0, i32 2, !dbg !9746
  store i32 -1, i32* %field_index, align 8, !dbg !9747
  store i32 0, i32* %i, align 4, !dbg !9748
  br label %for.cond, !dbg !9750

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !9751
  %3 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9753
  %num_fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %3, i32 0, i32 1, !dbg !9754
  %4 = load i32, i32* %num_fields, align 8, !dbg !9754
  %cmp = icmp slt i32 %2, %4, !dbg !9755
  br i1 %cmp, label %for.body, label %for.end, !dbg !9756

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !9757
  %field_index3 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %dt, i32 0, i32 2, !dbg !9759
  store i32 %5, i32* %field_index3, align 8, !dbg !9760
  %6 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9761
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %6, i32 0, i32 3, !dbg !9763
  %7 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !9763
  %8 = load i32, i32* %i, align 4, !dbg !9764
  %idxprom = sext i32 %8 to i64, !dbg !9761
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %7, i64 %idxprom, !dbg !9761
  %acc_sites = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx, i32 0, i32 4, !dbg !9765
  %9 = load %struct.htab*, %struct.htab** %acc_sites, align 8, !dbg !9765
  %tobool = icmp ne %struct.htab* %9, null, !dbg !9761
  br i1 %tobool, label %if.then, label %if.end, !dbg !9766

if.then:                                          ; preds = %for.body
  %10 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9767
  %fields4 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %10, i32 0, i32 3, !dbg !9768
  %11 = load %struct.field_entry*, %struct.field_entry** %fields4, align 8, !dbg !9768
  %12 = load i32, i32* %i, align 4, !dbg !9769
  %idxprom5 = sext i32 %12 to i64, !dbg !9767
  %arrayidx6 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %11, i64 %idxprom5, !dbg !9767
  %acc_sites7 = getelementptr inbounds %struct.field_entry, %struct.field_entry* %arrayidx6, i32 0, i32 4, !dbg !9770
  %13 = load %struct.htab*, %struct.htab** %acc_sites7, align 8, !dbg !9770
  %14 = bitcast %struct.create_acc_data* %dt to i8*, !dbg !9771
  call void @htab_traverse(%struct.htab* %13, i32 (i8**, i8*)* @create_new_field_acc, i8* %14), !dbg !9772
  br label %if.end, !dbg !9772

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !9773

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %i, align 4, !dbg !9774
  %inc = add nsw i32 %15, 1, !dbg !9774
  store i32 %inc, i32* %i, align 4, !dbg !9774
  br label %for.cond, !dbg !9775, !llvm.loop !9776

for.end:                                          ; preds = %for.cond
  %16 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9778
  %accs = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 4, !dbg !9780
  %17 = load %struct.htab*, %struct.htab** %accs, align 8, !dbg !9780
  %tobool8 = icmp ne %struct.htab* %17, null, !dbg !9778
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !9781

if.then9:                                         ; preds = %for.end
  %18 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !9782
  %accs10 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %18, i32 0, i32 4, !dbg !9783
  %19 = load %struct.htab*, %struct.htab** %accs10, align 8, !dbg !9783
  %20 = bitcast %struct.create_acc_data* %dt to i8*, !dbg !9784
  call void @htab_traverse(%struct.htab* %19, i32 (i8**, i8*)* @create_new_acc, i8* %20), !dbg !9785
  br label %if.end11, !dbg !9785

if.end11:                                         ; preds = %if.then9, %for.end
  ret void, !dbg !9786
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_new_field_acc(i8** %slot, i8* %data) #0 !dbg !9787 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %f_acc = alloca %struct.field_access_site*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %str = alloca %struct.data_structure*, align 8
  %i = alloca i32, align 4
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !9788, metadata !DIExpression()), !dbg !9789
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9790, metadata !DIExpression()), !dbg !9791
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %f_acc, metadata !9792, metadata !DIExpression()), !dbg !9793
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !9794
  %1 = bitcast i8** %0 to %struct.field_access_site**, !dbg !9795
  %2 = load %struct.field_access_site*, %struct.field_access_site** %1, align 8, !dbg !9795
  store %struct.field_access_site* %2, %struct.field_access_site** %f_acc, align 8, !dbg !9793
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9796, metadata !DIExpression()), !dbg !9797
  %3 = load i8*, i8** %data.addr, align 8, !dbg !9798
  %4 = bitcast i8* %3 to %struct.create_acc_data*, !dbg !9799
  %bb1 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %4, i32 0, i32 0, !dbg !9800
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !9800
  store %struct.basic_block_def* %5, %struct.basic_block_def** %bb, align 8, !dbg !9797
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !9801, metadata !DIExpression()), !dbg !9802
  %6 = load i8*, i8** %data.addr, align 8, !dbg !9803
  %7 = bitcast i8* %6 to %struct.create_acc_data*, !dbg !9804
  %str2 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %7, i32 0, i32 1, !dbg !9805
  %8 = load %struct.data_structure*, %struct.data_structure** %str2, align 8, !dbg !9805
  store %struct.data_structure* %8, %struct.data_structure** %str, align 8, !dbg !9802
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9806, metadata !DIExpression()), !dbg !9807
  %9 = load i8*, i8** %data.addr, align 8, !dbg !9808
  %10 = bitcast i8* %9 to %struct.create_acc_data*, !dbg !9809
  %field_index = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %10, i32 0, i32 2, !dbg !9810
  %11 = load i32, i32* %field_index, align 8, !dbg !9810
  store i32 %11, i32* %i, align 4, !dbg !9807
  %12 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !9811
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %12, i32 0, i32 0, !dbg !9813
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9813
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %13), !dbg !9814
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9815
  %cmp = icmp eq %struct.basic_block_def* %call, %14, !dbg !9816
  br i1 %cmp, label %if.then, label %if.end, !dbg !9817

if.then:                                          ; preds = %entry
  %15 = load %struct.field_access_site*, %struct.field_access_site** %f_acc, align 8, !dbg !9818
  %16 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9819
  %fields = getelementptr inbounds %struct.data_structure, %struct.data_structure* %16, i32 0, i32 3, !dbg !9820
  %17 = load %struct.field_entry*, %struct.field_entry** %fields, align 8, !dbg !9820
  %18 = load i32, i32* %i, align 4, !dbg !9821
  %idxprom = sext i32 %18 to i64, !dbg !9819
  %arrayidx = getelementptr inbounds %struct.field_entry, %struct.field_entry* %17, i64 %idxprom, !dbg !9819
  call void @create_new_field_access(%struct.field_access_site* %15, %struct.field_entry* byval(%struct.field_entry) align 8 %arrayidx), !dbg !9822
  br label %if.end, !dbg !9822

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !9823
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_new_acc(i8** %slot, i8* %data) #0 !dbg !9824 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %acc = alloca %struct.access_site*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %str = alloca %struct.data_structure*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !9825, metadata !DIExpression()), !dbg !9826
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9827, metadata !DIExpression()), !dbg !9828
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc, metadata !9829, metadata !DIExpression()), !dbg !9830
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !9831
  %1 = bitcast i8** %0 to %struct.access_site**, !dbg !9832
  %2 = load %struct.access_site*, %struct.access_site** %1, align 8, !dbg !9832
  store %struct.access_site* %2, %struct.access_site** %acc, align 8, !dbg !9830
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9833, metadata !DIExpression()), !dbg !9834
  %3 = load i8*, i8** %data.addr, align 8, !dbg !9835
  %4 = bitcast i8* %3 to %struct.create_acc_data*, !dbg !9836
  %bb1 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %4, i32 0, i32 0, !dbg !9837
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !9837
  store %struct.basic_block_def* %5, %struct.basic_block_def** %bb, align 8, !dbg !9834
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !9838, metadata !DIExpression()), !dbg !9839
  %6 = load i8*, i8** %data.addr, align 8, !dbg !9840
  %7 = bitcast i8* %6 to %struct.create_acc_data*, !dbg !9841
  %str2 = getelementptr inbounds %struct.create_acc_data, %struct.create_acc_data* %7, i32 0, i32 1, !dbg !9842
  %8 = load %struct.data_structure*, %struct.data_structure** %str2, align 8, !dbg !9842
  store %struct.data_structure* %8, %struct.data_structure** %str, align 8, !dbg !9839
  %9 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !9843
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %9, i32 0, i32 0, !dbg !9845
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9845
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %10), !dbg !9846
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9847
  %cmp = icmp eq %struct.basic_block_def* %call, %11, !dbg !9848
  br i1 %cmp, label %if.then, label %if.end, !dbg !9849

if.then:                                          ; preds = %entry
  %12 = load %struct.access_site*, %struct.access_site** %acc, align 8, !dbg !9850
  %13 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !9851
  call void @create_new_general_access(%struct.access_site* %12, %struct.data_structure* %13), !dbg !9852
  br label %if.end, !dbg !9852

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !9853
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_field_access(%struct.field_access_site* %f_acc, %struct.field_entry* byval(%struct.field_entry) align 8 %field) #0 !dbg !9854 {
entry:
  %f_acc.addr = alloca %struct.field_access_site*, align 8
  %new_type = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %size_res = alloca %union.tree_node*, align 8
  %mult_stmt = alloca %union.gimple_statement_d*, align 8
  %cast_stmt = alloca %union.gimple_statement_d*, align 8
  %cast_res = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  store %struct.field_access_site* %f_acc, %struct.field_access_site** %f_acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %f_acc.addr, metadata !9857, metadata !DIExpression()), !dbg !9858
  call void @llvm.dbg.declare(metadata %struct.field_entry* %field, metadata !9859, metadata !DIExpression()), !dbg !9860
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !9861, metadata !DIExpression()), !dbg !9862
  %field_mapping = getelementptr inbounds %struct.field_entry, %struct.field_entry* %field, i32 0, i32 3, !dbg !9863
  %0 = load %union.tree_node*, %union.tree_node** %field_mapping, align 8, !dbg !9863
  store %union.tree_node* %0, %union.tree_node** %new_type, align 8, !dbg !9862
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !9864, metadata !DIExpression()), !dbg !9865
  call void @llvm.dbg.declare(metadata %union.tree_node** %size_res, metadata !9866, metadata !DIExpression()), !dbg !9867
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %mult_stmt, metadata !9868, metadata !DIExpression()), !dbg !9869
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cast_stmt, metadata !9870, metadata !DIExpression()), !dbg !9871
  call void @llvm.dbg.declare(metadata %union.tree_node** %cast_res, metadata !9872, metadata !DIExpression()), !dbg !9873
  store %union.tree_node* null, %union.tree_node** %cast_res, align 8, !dbg !9873
  %1 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9874
  %num = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %1, i32 0, i32 4, !dbg !9876
  %2 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !9876
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9874
  br i1 %tobool, label %if.then, label %if.end, !dbg !9877

if.then:                                          ; preds = %entry
  %3 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9878
  %num1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %3, i32 0, i32 4, !dbg !9880
  %4 = load %union.tree_node*, %union.tree_node** %num1, align 8, !dbg !9880
  %5 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9881
  %call = call %union.gimple_statement_d* @gen_size(%union.tree_node* %4, %union.tree_node* %5, %union.tree_node** %size_res), !dbg !9882
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %mult_stmt, align 8, !dbg !9883
  %6 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9884
  %ref_def_stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %6, i32 0, i32 7, !dbg !9885
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt, align 8, !dbg !9885
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %mult_stmt, align 8, !dbg !9886
  call void @insert_before_stmt(%union.gimple_statement_d* %7, %union.gimple_statement_d* %8), !dbg !9887
  br label %if.end, !dbg !9888

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9889
  %cast_stmt2 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %9, i32 0, i32 8, !dbg !9891
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt2, align 8, !dbg !9891
  %tobool3 = icmp ne %union.gimple_statement_d* %10, null, !dbg !9889
  br i1 %tobool3, label %if.then4, label %if.end8, !dbg !9892

if.then4:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %size_res, align 8, !dbg !9893
  %12 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9895
  %13 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9896
  %cast_stmt5 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %13, i32 0, i32 8, !dbg !9897
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt5, align 8, !dbg !9897
  %call6 = call %union.gimple_statement_d* @gen_cast_stmt(%union.tree_node* %11, %union.tree_node* %12, %union.gimple_statement_d* %14, %union.tree_node** %cast_res), !dbg !9898
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %cast_stmt, align 8, !dbg !9899
  %15 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9900
  %cast_stmt7 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %15, i32 0, i32 8, !dbg !9901
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt7, align 8, !dbg !9901
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cast_stmt, align 8, !dbg !9902
  call void @insert_after_stmt(%union.gimple_statement_d* %16, %union.gimple_statement_d* %17), !dbg !9903
  br label %if.end8, !dbg !9904

if.end8:                                          ; preds = %if.then4, %if.end
  %18 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9905
  %ref_def_stmt9 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %18, i32 0, i32 7, !dbg !9907
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt9, align 8, !dbg !9907
  %tobool10 = icmp ne %union.gimple_statement_d* %19, null, !dbg !9905
  br i1 %tobool10, label %if.then11, label %if.end18, !dbg !9908

if.then11:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !9909, metadata !DIExpression()), !dbg !9911
  %20 = load %union.tree_node*, %union.tree_node** %cast_res, align 8, !dbg !9912
  %tobool12 = icmp ne %union.tree_node* %20, null, !dbg !9912
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !9914

if.then13:                                        ; preds = %if.then11
  %21 = load %union.tree_node*, %union.tree_node** %cast_res, align 8, !dbg !9915
  store %union.tree_node* %21, %union.tree_node** %offset, align 8, !dbg !9916
  br label %if.end14, !dbg !9917

if.else:                                          ; preds = %if.then11
  %22 = load %union.tree_node*, %union.tree_node** %size_res, align 8, !dbg !9918
  store %union.tree_node* %22, %union.tree_node** %offset, align 8, !dbg !9919
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then13
  %23 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9920
  %ref_def_stmt15 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %23, i32 0, i32 7, !dbg !9921
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt15, align 8, !dbg !9921
  %25 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9922
  %26 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !9923
  %call16 = call %union.gimple_statement_d* @create_base_plus_offset(%union.gimple_statement_d* %24, %union.tree_node* %25, %union.tree_node* %26), !dbg !9924
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9925
  %27 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9926
  %ref_def_stmt17 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %27, i32 0, i32 7, !dbg !9927
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_def_stmt17, align 8, !dbg !9927
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !9928
  call void @insert_after_stmt(%union.gimple_statement_d* %28, %union.gimple_statement_d* %29), !dbg !9929
  br label %if.end18, !dbg !9930

if.end18:                                         ; preds = %if.end14, %if.end8
  %30 = load %struct.field_access_site*, %struct.field_access_site** %f_acc.addr, align 8, !dbg !9931
  %31 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9932
  call void @replace_field_access_stmt(%struct.field_access_site* %30, %union.tree_node* %31), !dbg !9933
  ret void, !dbg !9934
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_before_stmt(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %new_stmt) #0 !dbg !9935 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9938, metadata !DIExpression()), !dbg !9939
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !9940, metadata !DIExpression()), !dbg !9941
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !9942, metadata !DIExpression()), !dbg !9943
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9944
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9944
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9946

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !9947
  %tobool1 = icmp ne %union.gimple_statement_d* %1, null, !dbg !9947
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9948

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !9949

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9950
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %2), !dbg !9951
  %3 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !9951
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9951
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !9951
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !9952
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %5, i32 1), !dbg !9953
  br label %return, !dbg !9954

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !9954
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_after_stmt(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %new_stmt) #0 !dbg !9955 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9956, metadata !DIExpression()), !dbg !9957
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !9958, metadata !DIExpression()), !dbg !9959
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !9960, metadata !DIExpression()), !dbg !9961
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9962
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9962
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9964

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !9965
  %tobool1 = icmp ne %union.gimple_statement_d* %1, null, !dbg !9965
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9966

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !9967

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9968
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %2), !dbg !9969
  %3 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !9969
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9969
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !9969
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !9970
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %5, i32 1), !dbg !9971
  br label %return, !dbg !9972

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !9972
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @create_base_plus_offset(%union.gimple_statement_d* %orig_stmt, %union.tree_node* %new_type, %union.tree_node* %offset) #0 !dbg !9973 {
entry:
  %orig_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %new_lhs = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %new_op0 = alloca %union.tree_node*, align 8
  %new_op1 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %str0 = alloca i32, align 4
  %str1 = alloca i32, align 4
  %length = alloca i32, align 4
  store %union.gimple_statement_d* %orig_stmt, %union.gimple_statement_d** %orig_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_stmt.addr, metadata !9976, metadata !DIExpression()), !dbg !9977
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !9978, metadata !DIExpression()), !dbg !9979
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !9980, metadata !DIExpression()), !dbg !9981
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9982, metadata !DIExpression()), !dbg !9983
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_lhs, metadata !9984, metadata !DIExpression()), !dbg !9985
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !9986, metadata !DIExpression()), !dbg !9987
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_op0, metadata !9988, metadata !DIExpression()), !dbg !9989
  store %union.tree_node* null, %union.tree_node** %new_op0, align 8, !dbg !9989
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_op1, metadata !9990, metadata !DIExpression()), !dbg !9991
  store %union.tree_node* null, %union.tree_node** %new_op1, align 8, !dbg !9991
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt.addr, align 8, !dbg !9992
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %0), !dbg !9993
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !9994
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9995
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9995
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9995
  %bf.load = load i64, i64* %2, align 8, !dbg !9995
  %bf.clear = and i64 %bf.load, 65535, !dbg !9995
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9995
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !9995
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !9995

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9995
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9995
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9995
  %bf.load2 = load i64, i64* %4, align 8, !dbg !9995
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9995
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9995
  %cmp5 = icmp eq i32 %bf.cast4, 141, !dbg !9995
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !9995

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1086, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !9995
  br label %cond.end, !dbg !9995

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !9995

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9995
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9996
  %6 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !9997
  %call6 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %5, %union.tree_node* %6), !dbg !9998
  store %union.tree_node* %call6, %union.tree_node** %new_lhs, align 8, !dbg !9999
  %7 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !10000
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !10000
  br i1 %tobool, label %cond.false8, label %cond.true7, !dbg !10000

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1089, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10000
  br label %cond.end9, !dbg !10000

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !10000

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !10000
  %8 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !10001
  call void @finalize_var_creation(%union.tree_node* %8), !dbg !10002
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt.addr, align 8, !dbg !10003
  %call11 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %9), !dbg !10004
  switch i32 %call11, label %sw.default [
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 66, label %sw.bb
  ], !dbg !10005

sw.bb:                                            ; preds = %cond.end9, %cond.end9, %cond.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10006, metadata !DIExpression()), !dbg !10009
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt.addr, align 8, !dbg !10010
  %call12 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !10011
  store %union.tree_node* %call12, %union.tree_node** %op0, align 8, !dbg !10009
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10012, metadata !DIExpression()), !dbg !10013
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt.addr, align 8, !dbg !10014
  %call13 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %11), !dbg !10015
  store %union.tree_node* %call13, %union.tree_node** %op1, align 8, !dbg !10013
  call void @llvm.dbg.declare(metadata i32* %str0, metadata !10016, metadata !DIExpression()), !dbg !10017
  call void @llvm.dbg.declare(metadata i32* %str1, metadata !10018, metadata !DIExpression()), !dbg !10019
  call void @llvm.dbg.declare(metadata i32* %length, metadata !10020, metadata !DIExpression()), !dbg !10021
  %12 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10022
  %tobool14 = icmp ne %struct.VEC_structure_heap* %12, null, !dbg !10022
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !10022

cond.true15:                                      ; preds = %sw.bb
  %13 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10022
  %base16 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %13, i32 0, i32 0, !dbg !10022
  br label %cond.end18, !dbg !10022

cond.false17:                                     ; preds = %sw.bb
  br label %cond.end18, !dbg !10022

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_structure_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !10022
  %call20 = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond19), !dbg !10022
  store i32 %call20, i32* %length, align 4, !dbg !10021
  %14 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10023
  %call21 = call %union.tree_node* @get_type_of_var(%union.tree_node* %14), !dbg !10024
  %call22 = call %union.tree_node* @strip_type(%union.tree_node* %call21), !dbg !10025
  %call23 = call i32 @find_structure(%union.tree_node* %call22), !dbg !10026
  store i32 %call23, i32* %str0, align 4, !dbg !10027
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10028
  %call24 = call %union.tree_node* @get_type_of_var(%union.tree_node* %15), !dbg !10029
  %call25 = call %union.tree_node* @strip_type(%union.tree_node* %call24), !dbg !10030
  %call26 = call i32 @find_structure(%union.tree_node* %call25), !dbg !10031
  store i32 %call26, i32* %str1, align 4, !dbg !10032
  %16 = load i32, i32* %str0, align 4, !dbg !10033
  %17 = load i32, i32* %length, align 4, !dbg !10033
  %cmp27 = icmp ne i32 %16, %17, !dbg !10033
  br i1 %cmp27, label %cond.false31, label %lor.lhs.false28, !dbg !10033

lor.lhs.false28:                                  ; preds = %cond.end18
  %18 = load i32, i32* %str1, align 4, !dbg !10033
  %19 = load i32, i32* %length, align 4, !dbg !10033
  %cmp29 = icmp ne i32 %18, %19, !dbg !10033
  br i1 %cmp29, label %cond.false31, label %cond.true30, !dbg !10033

cond.true30:                                      ; preds = %lor.lhs.false28
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10033
  br label %cond.end32, !dbg !10033

cond.false31:                                     ; preds = %lor.lhs.false28, %cond.end18
  br label %cond.end32, !dbg !10033

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !10033
  %20 = load i32, i32* %str0, align 4, !dbg !10034
  %21 = load i32, i32* %length, align 4, !dbg !10036
  %cmp34 = icmp ne i32 %20, %21, !dbg !10037
  br i1 %cmp34, label %if.then, label %if.end, !dbg !10038

if.then:                                          ; preds = %cond.end32
  %22 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10039
  %23 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10040
  %call35 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %22, %union.tree_node* %23), !dbg !10041
  store %union.tree_node* %call35, %union.tree_node** %new_op0, align 8, !dbg !10042
  br label %if.end, !dbg !10043

if.end:                                           ; preds = %if.then, %cond.end32
  %24 = load i32, i32* %str1, align 4, !dbg !10044
  %25 = load i32, i32* %length, align 4, !dbg !10046
  %cmp36 = icmp ne i32 %24, %25, !dbg !10047
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !10048

if.then37:                                        ; preds = %if.end
  %26 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10049
  %27 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10050
  %call38 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %26, %union.tree_node* %27), !dbg !10051
  store %union.tree_node* %call38, %union.tree_node** %new_op1, align 8, !dbg !10052
  br label %if.end39, !dbg !10053

if.end39:                                         ; preds = %if.then37, %if.end
  %28 = load %union.tree_node*, %union.tree_node** %new_op0, align 8, !dbg !10054
  %tobool40 = icmp ne %union.tree_node* %28, null, !dbg !10054
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !10056

if.then41:                                        ; preds = %if.end39
  %29 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !10057
  store %union.tree_node* %29, %union.tree_node** %new_op0, align 8, !dbg !10058
  br label %if.end42, !dbg !10059

if.end42:                                         ; preds = %if.then41, %if.end39
  %30 = load %union.tree_node*, %union.tree_node** %new_op1, align 8, !dbg !10060
  %tobool43 = icmp ne %union.tree_node* %30, null, !dbg !10060
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !10062

if.then44:                                        ; preds = %if.end42
  %31 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !10063
  store %union.tree_node* %31, %union.tree_node** %new_op1, align 8, !dbg !10064
  br label %if.end45, !dbg !10065

if.end45:                                         ; preds = %if.then44, %if.end42
  br label %sw.epilog, !dbg !10066

sw.default:                                       ; preds = %cond.end9
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10067
  br label %sw.epilog, !dbg !10068

sw.epilog:                                        ; preds = %sw.default, %if.end45
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt.addr, align 8, !dbg !10069
  %call46 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %32), !dbg !10069
  %33 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !10069
  %34 = load %union.tree_node*, %union.tree_node** %new_op0, align 8, !dbg !10069
  %35 = load %union.tree_node*, %union.tree_node** %new_op1, align 8, !dbg !10069
  %call47 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call46, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !10069
  store %union.gimple_statement_d* %call47, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10070
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10071
  call void @finalize_stmt(%union.gimple_statement_d* %36), !dbg !10072
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10073
  ret %union.gimple_statement_d* %37, !dbg !10074
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_field_access_stmt(%struct.field_access_site* %acc, %union.tree_node* %new_type) #0 !dbg !10075 {
entry:
  %acc.addr = alloca %struct.field_access_site*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  store %struct.field_access_site* %acc, %struct.field_access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc.addr, metadata !10078, metadata !DIExpression()), !dbg !10079
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !10080, metadata !DIExpression()), !dbg !10081
  %0 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10082
  %ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %0, i32 0, i32 3, !dbg !10082
  %1 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !10082
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10082
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10082
  %bf.load = load i64, i64* %2, align 8, !dbg !10082
  %bf.clear = and i64 %bf.load, 65535, !dbg !10082
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10082
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !10084
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10085

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10086
  %ref1 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %3, i32 0, i32 3, !dbg !10086
  %4 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !10086
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10086
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10086
  %bf.load3 = load i64, i64* %5, align 8, !dbg !10086
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !10086
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10086
  %cmp6 = icmp eq i32 %bf.cast5, 45, !dbg !10087
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !10088

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %6 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10089
  %ref8 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %6, i32 0, i32 3, !dbg !10089
  %7 = load %union.tree_node*, %union.tree_node** %ref8, align 8, !dbg !10089
  %base9 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10089
  %8 = bitcast %struct.tree_base* %base9 to i64*, !dbg !10089
  %bf.load10 = load i64, i64* %8, align 8, !dbg !10089
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !10089
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !10089
  %cmp13 = icmp eq i32 %bf.cast12, 32, !dbg !10090
  br i1 %cmp13, label %if.then, label %if.else, !dbg !10091

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %entry
  %9 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10092
  %10 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10093
  call void @replace_field_acc(%struct.field_access_site* %9, %union.tree_node* %10), !dbg !10094
  br label %if.end, !dbg !10094

if.else:                                          ; preds = %lor.lhs.false7
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1047, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10095
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !10096
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_field_acc(%struct.field_access_site* %acc, %union.tree_node* %new_type) #0 !dbg !10097 {
entry:
  %acc.addr = alloca %struct.field_access_site*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %ref_var = alloca %union.tree_node*, align 8
  %new_ref = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %pos = alloca %union.tree_node**, align 8
  %new_acc = alloca %union.tree_node*, align 8
  %field_id = alloca %union.tree_node*, align 8
  %wrapper = alloca %struct.VEC_type_wrapper_t_heap*, align 8
  %wr_p = alloca %struct.type_wrapper*, align 8
  %r_pos = alloca %struct.ref_pos, align 8
  %wr = alloca %struct.type_wrapper, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.field_access_site* %acc, %struct.field_access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.field_access_site** %acc.addr, metadata !10098, metadata !DIExpression()), !dbg !10099
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref_var, metadata !10102, metadata !DIExpression()), !dbg !10103
  %0 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10104
  %ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %0, i32 0, i32 3, !dbg !10105
  %1 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !10105
  store %union.tree_node* %1, %union.tree_node** %ref_var, align 8, !dbg !10103
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_ref, metadata !10106, metadata !DIExpression()), !dbg !10107
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !10108, metadata !DIExpression()), !dbg !10109
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !10110, metadata !DIExpression()), !dbg !10111
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pos, metadata !10112, metadata !DIExpression()), !dbg !10113
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_acc, metadata !10114, metadata !DIExpression()), !dbg !10115
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_id, metadata !10116, metadata !DIExpression()), !dbg !10117
  %2 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10118
  %field_decl = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %2, i32 0, i32 2, !dbg !10118
  %3 = load %union.tree_node*, %union.tree_node** %field_decl, align 8, !dbg !10118
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !10118
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !10118
  %4 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10118
  store %union.tree_node* %4, %union.tree_node** %field_id, align 8, !dbg !10117
  call void @llvm.dbg.declare(metadata %struct.VEC_type_wrapper_t_heap** %wrapper, metadata !10119, metadata !DIExpression()), !dbg !10120
  %call = call %struct.VEC_type_wrapper_t_heap* @VEC_type_wrapper_t_heap_alloc(i32 10), !dbg !10121
  store %struct.VEC_type_wrapper_t_heap* %call, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10120
  call void @llvm.dbg.declare(metadata %struct.type_wrapper** %wr_p, metadata !10122, metadata !DIExpression()), !dbg !10123
  store %struct.type_wrapper* null, %struct.type_wrapper** %wr_p, align 8, !dbg !10123
  call void @llvm.dbg.declare(metadata %struct.ref_pos* %r_pos, metadata !10124, metadata !DIExpression()), !dbg !10125
  br label %while.cond, !dbg !10126

while.cond:                                       ; preds = %if.end, %entry
  %5 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10127
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10127
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !10127
  %bf.load = load i64, i64* %6, align 8, !dbg !10127
  %bf.clear = and i64 %bf.load, 65535, !dbg !10127
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10127
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !10128
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !10129

lor.rhs:                                          ; preds = %while.cond
  %7 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10130
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10130
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10130
  %bf.load2 = load i64, i64* %8, align 8, !dbg !10130
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10130
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10130
  %cmp5 = icmp eq i32 %bf.cast4, 45, !dbg !10131
  br label %lor.end, !dbg !10129

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %9 = phi i1 [ true, %while.cond ], [ %cmp5, %lor.rhs ]
  br i1 %9, label %while.body, label %while.end, !dbg !10126

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata %struct.type_wrapper* %wr, metadata !10132, metadata !DIExpression()), !dbg !10134
  %10 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10135
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10135
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !10135
  %bf.load7 = load i64, i64* %11, align 8, !dbg !10135
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !10135
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !10135
  %cmp10 = icmp eq i32 %bf.cast9, 47, !dbg !10137
  br i1 %cmp10, label %if.then, label %if.else, !dbg !10138

if.then:                                          ; preds = %while.body
  %wrap = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 0, !dbg !10139
  store i8 0, i8* %wrap, align 8, !dbg !10141
  %domain = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 1, !dbg !10142
  store %union.tree_node* null, %union.tree_node** %domain, align 8, !dbg !10143
  br label %if.end, !dbg !10144

if.else:                                          ; preds = %while.body
  %wrap11 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 0, !dbg !10145
  store i8 1, i8* %wrap11, align 8, !dbg !10147
  %12 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10148
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !10148
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10148
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !10148
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10148
  %domain12 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %wr, i32 0, i32 1, !dbg !10149
  store %union.tree_node* %13, %union.tree_node** %domain12, align 8, !dbg !10150
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call13 = call %struct.type_wrapper* @VEC_type_wrapper_t_heap_safe_push(%struct.VEC_type_wrapper_t_heap** %wrapper, %struct.type_wrapper* %wr), !dbg !10151
  %14 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10152
  %exp14 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !10152
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !10152
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !10152
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !10152
  store %union.tree_node* %15, %union.tree_node** %ref_var, align 8, !dbg !10153
  br label %while.cond, !dbg !10126, !llvm.loop !10154

while.end:                                        ; preds = %lor.end
  %16 = load %union.tree_node*, %union.tree_node** %ref_var, align 8, !dbg !10156
  %17 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10157
  %call17 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %16, %union.tree_node* %17), !dbg !10158
  store %union.tree_node* %call17, %union.tree_node** %new_ref, align 8, !dbg !10159
  %18 = load %union.tree_node*, %union.tree_node** %new_ref, align 8, !dbg !10160
  call void @finalize_global_creation(%union.tree_node* %18), !dbg !10161
  br label %while.cond18, !dbg !10162

while.cond18:                                     ; preds = %cond.end45, %while.end
  %19 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10163
  %tobool = icmp ne %struct.VEC_type_wrapper_t_heap* %19, null, !dbg !10163
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10163

cond.true:                                        ; preds = %while.cond18
  %20 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10163
  %base19 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %20, i32 0, i32 0, !dbg !10163
  br label %cond.end, !dbg !10163

cond.false:                                       ; preds = %while.cond18
  br label %cond.end, !dbg !10163

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_type_wrapper_t_base* [ %base19, %cond.true ], [ null, %cond.false ], !dbg !10163
  %call20 = call i32 @VEC_type_wrapper_t_base_length(%struct.VEC_type_wrapper_t_base* %cond), !dbg !10163
  %cmp21 = icmp ne i32 %call20, 0, !dbg !10164
  br i1 %cmp21, label %while.body22, label %while.end47, !dbg !10162

while.body22:                                     ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10165, metadata !DIExpression()), !dbg !10167
  %21 = load %union.tree_node*, %union.tree_node** %new_ref, align 8, !dbg !10168
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !10168
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10168
  %22 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !10168
  %common24 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !10168
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !10168
  %23 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !10168
  store %union.tree_node* %23, %union.tree_node** %type, align 8, !dbg !10167
  %24 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10169
  %tobool26 = icmp ne %struct.VEC_type_wrapper_t_heap* %24, null, !dbg !10169
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !10169

cond.true27:                                      ; preds = %while.body22
  %25 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10169
  %base28 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %25, i32 0, i32 0, !dbg !10169
  br label %cond.end30, !dbg !10169

cond.false29:                                     ; preds = %while.body22
  br label %cond.end30, !dbg !10169

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_type_wrapper_t_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !10169
  %call32 = call %struct.type_wrapper* @VEC_type_wrapper_t_base_last(%struct.VEC_type_wrapper_t_base* %cond31), !dbg !10169
  store %struct.type_wrapper* %call32, %struct.type_wrapper** %wr_p, align 8, !dbg !10170
  %26 = load %struct.type_wrapper*, %struct.type_wrapper** %wr_p, align 8, !dbg !10171
  %wrap33 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %26, i32 0, i32 0, !dbg !10173
  %27 = load i8, i8* %wrap33, align 8, !dbg !10173
  %tobool34 = icmp ne i8 %27, 0, !dbg !10171
  br i1 %tobool34, label %if.then35, label %if.else38, !dbg !10174

if.then35:                                        ; preds = %cond.end30
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10175
  %29 = load %union.tree_node*, %union.tree_node** %new_ref, align 8, !dbg !10175
  %30 = load %struct.type_wrapper*, %struct.type_wrapper** %wr_p, align 8, !dbg !10175
  %domain36 = getelementptr inbounds %struct.type_wrapper, %struct.type_wrapper* %30, i32 0, i32 1, !dbg !10175
  %31 = load %union.tree_node*, %union.tree_node** %domain36, align 8, !dbg !10175
  %call37 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %31, %union.tree_node* null, %union.tree_node* null), !dbg !10175
  store %union.tree_node* %call37, %union.tree_node** %new_ref, align 8, !dbg !10176
  br label %if.end40, !dbg !10177

if.else38:                                        ; preds = %cond.end30
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10178
  %33 = load %union.tree_node*, %union.tree_node** %new_ref, align 8, !dbg !10178
  %call39 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %32, %union.tree_node* %33), !dbg !10178
  store %union.tree_node* %call39, %union.tree_node** %new_ref, align 8, !dbg !10179
  br label %if.end40

if.end40:                                         ; preds = %if.else38, %if.then35
  %34 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10180
  %tobool41 = icmp ne %struct.VEC_type_wrapper_t_heap* %34, null, !dbg !10180
  br i1 %tobool41, label %cond.true42, label %cond.false44, !dbg !10180

cond.true42:                                      ; preds = %if.end40
  %35 = load %struct.VEC_type_wrapper_t_heap*, %struct.VEC_type_wrapper_t_heap** %wrapper, align 8, !dbg !10180
  %base43 = getelementptr inbounds %struct.VEC_type_wrapper_t_heap, %struct.VEC_type_wrapper_t_heap* %35, i32 0, i32 0, !dbg !10180
  br label %cond.end45, !dbg !10180

cond.false44:                                     ; preds = %if.end40
  br label %cond.end45, !dbg !10180

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi %struct.VEC_type_wrapper_t_base* [ %base43, %cond.true42 ], [ null, %cond.false44 ], !dbg !10180
  call void @VEC_type_wrapper_t_base_pop(%struct.VEC_type_wrapper_t_base* %cond46), !dbg !10180
  br label %while.cond18, !dbg !10162, !llvm.loop !10181

while.end47:                                      ; preds = %cond.end
  %36 = load %union.tree_node*, %union.tree_node** %new_ref, align 8, !dbg !10183
  %37 = load %union.tree_node*, %union.tree_node** %field_id, align 8, !dbg !10184
  %38 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10185
  %call48 = call %union.tree_node* @build_comp_ref(%union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38), !dbg !10186
  store %union.tree_node* %call48, %union.tree_node** %new_acc, align 8, !dbg !10187
  call void @VEC_type_wrapper_t_heap_free(%struct.VEC_type_wrapper_t_heap** %wrapper), !dbg !10188
  %39 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10189
  %stmt = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %39, i32 0, i32 0, !dbg !10191
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10191
  %call49 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %40), !dbg !10192
  %tobool50 = icmp ne i8 %call49, 0, !dbg !10192
  br i1 %tobool50, label %if.then51, label %if.else75, !dbg !10193

if.then51:                                        ; preds = %while.end47
  %41 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10194
  %stmt52 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %41, i32 0, i32 0, !dbg !10196
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt52, align 8, !dbg !10196
  %call53 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %42), !dbg !10197
  store %union.tree_node* %call53, %union.tree_node** %lhs, align 8, !dbg !10198
  %43 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10199
  %stmt54 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %43, i32 0, i32 0, !dbg !10200
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !10200
  %call55 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %44), !dbg !10201
  store %union.tree_node* %call55, %union.tree_node** %rhs, align 8, !dbg !10202
  %45 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !10203
  %46 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10205
  %comp_ref = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %46, i32 0, i32 1, !dbg !10206
  %47 = load %union.tree_node*, %union.tree_node** %comp_ref, align 8, !dbg !10206
  %cmp56 = icmp eq %union.tree_node* %45, %47, !dbg !10207
  br i1 %cmp56, label %if.then57, label %if.else59, !dbg !10208

if.then57:                                        ; preds = %if.then51
  %48 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10209
  %stmt58 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %48, i32 0, i32 0, !dbg !10210
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt58, align 8, !dbg !10210
  %50 = load %union.tree_node*, %union.tree_node** %new_acc, align 8, !dbg !10211
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %49, %union.tree_node* %50), !dbg !10212
  br label %if.end74, !dbg !10212

if.else59:                                        ; preds = %if.then51
  %51 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10213
  %52 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10215
  %comp_ref60 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %52, i32 0, i32 1, !dbg !10216
  %53 = load %union.tree_node*, %union.tree_node** %comp_ref60, align 8, !dbg !10216
  %cmp61 = icmp eq %union.tree_node* %51, %53, !dbg !10217
  br i1 %cmp61, label %if.then62, label %if.else64, !dbg !10218

if.then62:                                        ; preds = %if.else59
  %54 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10219
  %stmt63 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %54, i32 0, i32 0, !dbg !10220
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt63, align 8, !dbg !10220
  %56 = load %union.tree_node*, %union.tree_node** %new_acc, align 8, !dbg !10221
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %55, %union.tree_node* %56), !dbg !10222
  br label %if.end73, !dbg !10222

if.else64:                                        ; preds = %if.else59
  %57 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10223
  %stmt65 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %57, i32 0, i32 0, !dbg !10225
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt65, align 8, !dbg !10225
  %59 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10226
  %comp_ref66 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %59, i32 0, i32 1, !dbg !10227
  %60 = load %union.tree_node*, %union.tree_node** %comp_ref66, align 8, !dbg !10227
  %call67 = call %union.tree_node** @find_pos_in_stmt(%union.gimple_statement_d* %58, %union.tree_node* %60, %struct.ref_pos* %r_pos), !dbg !10228
  store %union.tree_node** %call67, %union.tree_node*** %pos, align 8, !dbg !10229
  %61 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10230
  %tobool68 = icmp ne %union.tree_node** %61, null, !dbg !10230
  br i1 %tobool68, label %cond.false70, label %cond.true69, !dbg !10230

cond.true69:                                      ; preds = %if.else64
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1021, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10230
  br label %cond.end71, !dbg !10230

cond.false70:                                     ; preds = %if.else64
  br label %cond.end71, !dbg !10230

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi i32 [ 0, %cond.true69 ], [ 0, %cond.false70 ], !dbg !10230
  %62 = load %union.tree_node*, %union.tree_node** %new_acc, align 8, !dbg !10231
  %63 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10232
  store %union.tree_node* %62, %union.tree_node** %63, align 8, !dbg !10233
  br label %if.end73

if.end73:                                         ; preds = %cond.end71, %if.then62
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then57
  br label %if.end84, !dbg !10234

if.else75:                                        ; preds = %while.end47
  %64 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10235
  %stmt76 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %64, i32 0, i32 0, !dbg !10237
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt76, align 8, !dbg !10237
  %66 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10238
  %comp_ref77 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %66, i32 0, i32 1, !dbg !10239
  %67 = load %union.tree_node*, %union.tree_node** %comp_ref77, align 8, !dbg !10239
  %call78 = call %union.tree_node** @find_pos_in_stmt(%union.gimple_statement_d* %65, %union.tree_node* %67, %struct.ref_pos* %r_pos), !dbg !10240
  store %union.tree_node** %call78, %union.tree_node*** %pos, align 8, !dbg !10241
  %68 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10242
  %tobool79 = icmp ne %union.tree_node** %68, null, !dbg !10242
  br i1 %tobool79, label %cond.false81, label %cond.true80, !dbg !10242

cond.true80:                                      ; preds = %if.else75
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1028, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10242
  br label %cond.end82, !dbg !10242

cond.false81:                                     ; preds = %if.else75
  br label %cond.end82, !dbg !10242

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !10242
  %69 = load %union.tree_node*, %union.tree_node** %new_acc, align 8, !dbg !10243
  %70 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10244
  store %union.tree_node* %69, %union.tree_node** %70, align 8, !dbg !10245
  br label %if.end84

if.end84:                                         ; preds = %cond.end82, %if.end74
  %71 = load %struct.field_access_site*, %struct.field_access_site** %acc.addr, align 8, !dbg !10246
  %stmt85 = getelementptr inbounds %struct.field_access_site, %struct.field_access_site* %71, i32 0, i32 0, !dbg !10247
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt85, align 8, !dbg !10247
  call void @finalize_stmt(%union.gimple_statement_d* %72), !dbg !10248
  ret void, !dbg !10249
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_global_creation(%union.tree_node* %var) #0 !dbg !10250 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !10251, metadata !DIExpression()), !dbg !10252
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10253
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10253
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10253
  %bf.load = load i64, i64* %1, align 8, !dbg !10253
  %bf.clear = and i64 %bf.load, 65535, !dbg !10253
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10253
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !10255
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10256

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10257
  %call = call zeroext i8 @is_global_var(%union.tree_node* %2), !dbg !10258
  %conv = zext i8 %call to i32, !dbg !10258
  %tobool = icmp ne i32 %conv, 0, !dbg !10258
  br i1 %tobool, label %if.then, label %if.end, !dbg !10259

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10260
  call void @finalize_var_creation(%union.tree_node* %3), !dbg !10261
  br label %if.end, !dbg !10261

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !10262
}

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @build_comp_ref(%union.tree_node* %base, %union.tree_node* %field_id, %union.tree_node* %type) #0 !dbg !10263 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %field_id.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %found = alloca i8, align 1
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !10264, metadata !DIExpression()), !dbg !10265
  store %union.tree_node* %field_id, %union.tree_node** %field_id.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field_id.addr, metadata !10266, metadata !DIExpression()), !dbg !10267
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !10268, metadata !DIExpression()), !dbg !10269
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !10270, metadata !DIExpression()), !dbg !10271
  call void @llvm.dbg.declare(metadata i8* %found, metadata !10272, metadata !DIExpression()), !dbg !10273
  store i8 0, i8* %found, align 1, !dbg !10273
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !10274
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !10274
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !10274
  %1 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !10274
  store %union.tree_node* %1, %union.tree_node** %field, align 8, !dbg !10276
  br label %for.cond, !dbg !10277

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10278
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !10280
  br i1 %tobool, label %for.body, label %for.end, !dbg !10280

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10281
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !10281
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !10281
  %4 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10281
  %5 = load %union.tree_node*, %union.tree_node** %field_id.addr, align 8, !dbg !10284
  %cmp = icmp eq %union.tree_node* %4, %5, !dbg !10285
  br i1 %cmp, label %if.then, label %if.end, !dbg !10286

if.then:                                          ; preds = %for.body
  store i8 1, i8* %found, align 1, !dbg !10287
  br label %for.end, !dbg !10289

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !10290

for.inc:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10291
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !10291
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10291
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10291
  store %union.tree_node* %7, %union.tree_node** %field, align 8, !dbg !10292
  br label %for.cond, !dbg !10293, !llvm.loop !10294

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load i8, i8* %found, align 1, !dbg !10296
  %tobool2 = icmp ne i8 %8, 0, !dbg !10296
  br i1 %tobool2, label %cond.false, label %cond.true, !dbg !10296

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 872, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10296
  br label %cond.end, !dbg !10296

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !10296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10296
  %9 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10297
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !10297
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !10297
  %10 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !10297
  %11 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !10297
  %12 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !10297
  %call = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* null), !dbg !10297
  ret %union.tree_node* %call, !dbg !10298
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !10299 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10300, metadata !DIExpression()), !dbg !10301
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !10302, metadata !DIExpression()), !dbg !10303
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10304
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !10305
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !10306
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !10307
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !10307
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10309

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !10310
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10310
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10310
  %bf.load = load i64, i64* %4, align 8, !dbg !10310
  %bf.clear = and i64 %bf.load, 65535, !dbg !10310
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10310
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !10311
  br i1 %cmp, label %if.then, label %if.end, !dbg !10312

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10313
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !10314
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !10314
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !10314
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !10315
  br label %if.end, !dbg !10314

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !10316
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !10317 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10318, metadata !DIExpression()), !dbg !10319
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !10320, metadata !DIExpression()), !dbg !10321
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10322
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !10323
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !10324
  ret void, !dbg !10325
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @find_pos_in_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %ref, %struct.ref_pos* %r_pos) #0 !dbg !10326 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  %r_pos.addr = alloca %struct.ref_pos*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10329, metadata !DIExpression()), !dbg !10330
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !10331, metadata !DIExpression()), !dbg !10332
  store %struct.ref_pos* %r_pos, %struct.ref_pos** %r_pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ref_pos** %r_pos.addr, metadata !10333, metadata !DIExpression()), !dbg !10334
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !10335, metadata !DIExpression()), !dbg !10336
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !10337
  %1 = load %struct.ref_pos*, %struct.ref_pos** %r_pos.addr, align 8, !dbg !10338
  %ref1 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %1, i32 0, i32 1, !dbg !10339
  store %union.tree_node* %0, %union.tree_node** %ref1, align 8, !dbg !10340
  %2 = load %struct.ref_pos*, %struct.ref_pos** %r_pos.addr, align 8, !dbg !10341
  %pos = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %2, i32 0, i32 0, !dbg !10342
  store %union.tree_node** null, %union.tree_node*** %pos, align 8, !dbg !10343
  %3 = load %struct.ref_pos*, %struct.ref_pos** %r_pos.addr, align 8, !dbg !10344
  %container = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %3, i32 0, i32 2, !dbg !10345
  store %union.tree_node* null, %union.tree_node** %container, align 8, !dbg !10346
  %4 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !10347
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false), !dbg !10347
  %5 = load %struct.ref_pos*, %struct.ref_pos** %r_pos.addr, align 8, !dbg !10348
  %6 = bitcast %struct.ref_pos* %5 to i8*, !dbg !10348
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !10349
  store i8* %6, i8** %info, align 8, !dbg !10350
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10351
  %call = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %7, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_pos_in_stmt_1, %struct.walk_stmt_info* %wi), !dbg !10352
  %8 = load %struct.ref_pos*, %struct.ref_pos** %r_pos.addr, align 8, !dbg !10353
  %pos2 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %8, i32 0, i32 0, !dbg !10354
  %9 = load %union.tree_node**, %union.tree_node*** %pos2, align 8, !dbg !10354
  ret %union.tree_node** %9, !dbg !10355
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_pos_in_stmt_1(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !10356 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %r_pos = alloca %struct.ref_pos*, align 8
  %ref = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !10357, metadata !DIExpression()), !dbg !10358
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !10359, metadata !DIExpression()), !dbg !10360
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10361, metadata !DIExpression()), !dbg !10362
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !10363, metadata !DIExpression()), !dbg !10364
  %0 = load i8*, i8** %data.addr, align 8, !dbg !10365
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !10366
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !10364
  call void @llvm.dbg.declare(metadata %struct.ref_pos** %r_pos, metadata !10367, metadata !DIExpression()), !dbg !10368
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !10369
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !10370
  %3 = load i8*, i8** %info, align 8, !dbg !10370
  %4 = bitcast i8* %3 to %struct.ref_pos*, !dbg !10371
  store %struct.ref_pos* %4, %struct.ref_pos** %r_pos, align 8, !dbg !10368
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !10372, metadata !DIExpression()), !dbg !10373
  %5 = load %struct.ref_pos*, %struct.ref_pos** %r_pos, align 8, !dbg !10374
  %ref1 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %5, i32 0, i32 1, !dbg !10375
  %6 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !10375
  store %union.tree_node* %6, %union.tree_node** %ref, align 8, !dbg !10373
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10376, metadata !DIExpression()), !dbg !10377
  %7 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !10378
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !10379
  store %union.tree_node* %8, %union.tree_node** %t, align 8, !dbg !10377
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10380
  %10 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !10382
  %cmp = icmp eq %union.tree_node* %9, %10, !dbg !10383
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10384

lor.lhs.false:                                    ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10385
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !10385
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !10385
  %bf.load = load i64, i64* %12, align 8, !dbg !10385
  %bf.clear = and i64 %bf.load, 65535, !dbg !10385
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10385
  %cmp2 = icmp eq i32 %bf.cast, 141, !dbg !10386
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !10387

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10388
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !10388
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !10388
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10388
  %15 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !10389
  %cmp3 = icmp eq %union.tree_node* %14, %15, !dbg !10390
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10391

if.then:                                          ; preds = %land.lhs.true, %entry
  %16 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !10392
  %17 = load %struct.ref_pos*, %struct.ref_pos** %r_pos, align 8, !dbg !10394
  %pos = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %17, i32 0, i32 0, !dbg !10395
  store %union.tree_node** %16, %union.tree_node*** %pos, align 8, !dbg !10396
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10397
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !10398
  br label %return, !dbg !10398

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10399
  %20 = load %struct.ref_pos*, %struct.ref_pos** %r_pos, align 8, !dbg !10400
  %container = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %20, i32 0, i32 2, !dbg !10401
  store %union.tree_node* %19, %union.tree_node** %container, align 8, !dbg !10402
  %21 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !10403
  store i32 1, i32* %21, align 4, !dbg !10404
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10405
  br label %return, !dbg !10405

return:                                           ; preds = %if.end, %if.then
  %22 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10406
  ret %union.tree_node* %22, !dbg !10406
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_general_access(%struct.access_site* %acc, %struct.data_structure* %str) #0 !dbg !10407 {
entry:
  %acc.addr = alloca %struct.access_site*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.access_site* %acc, %struct.access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc.addr, metadata !10410, metadata !DIExpression()), !dbg !10411
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !10412, metadata !DIExpression()), !dbg !10413
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10414, metadata !DIExpression()), !dbg !10415
  %0 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10416
  %stmt1 = getelementptr inbounds %struct.access_site, %struct.access_site* %0, i32 0, i32 0, !dbg !10417
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !10417
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !10415
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10418
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !10419
  switch i32 %call, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
  ], !dbg !10420

sw.bb:                                            ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10421
  call void @create_new_stmts_for_cond_expr(%union.gimple_statement_d* %3), !dbg !10423
  br label %sw.epilog, !dbg !10424

sw.bb2:                                           ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10425
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %4), !dbg !10426
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10427
  call void @update_stmt(%union.gimple_statement_d* %5), !dbg !10428
  br label %sw.epilog, !dbg !10429

sw.default:                                       ; preds = %entry
  %6 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10430
  %7 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !10431
  call void @create_new_stmts_for_general_acc(%struct.access_site* %6, %struct.data_structure* %7), !dbg !10432
  br label %sw.epilog, !dbg !10433

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb
  ret void, !dbg !10434
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_stmts_for_cond_expr(%union.gimple_statement_d* %stmt) #0 !dbg !10435 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %str0 = alloca i32, align 4
  %str1 = alloca i32, align 4
  %s0 = alloca i8, align 1
  %s1 = alloca i8, align 1
  %str = alloca %struct.data_structure*, align 8
  %type = alloca %union.tree_node*, align 8
  %pos = alloca i32, align 4
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %new_arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10436, metadata !DIExpression()), !dbg !10437
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !10438, metadata !DIExpression()), !dbg !10439
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !10440, metadata !DIExpression()), !dbg !10441
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !10442, metadata !DIExpression()), !dbg !10443
  call void @llvm.dbg.declare(metadata i32* %str0, metadata !10444, metadata !DIExpression()), !dbg !10445
  call void @llvm.dbg.declare(metadata i32* %str1, metadata !10446, metadata !DIExpression()), !dbg !10447
  call void @llvm.dbg.declare(metadata i8* %s0, metadata !10448, metadata !DIExpression()), !dbg !10449
  call void @llvm.dbg.declare(metadata i8* %s1, metadata !10450, metadata !DIExpression()), !dbg !10451
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str, metadata !10452, metadata !DIExpression()), !dbg !10453
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10454, metadata !DIExpression()), !dbg !10455
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !10456, metadata !DIExpression()), !dbg !10457
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10458, metadata !DIExpression()), !dbg !10459
  call void @llvm.dbg.declare(metadata i32* %length, metadata !10460, metadata !DIExpression()), !dbg !10461
  %0 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10462
  %tobool = icmp ne %struct.VEC_structure_heap* %0, null, !dbg !10462
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10462

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10462
  %base = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %1, i32 0, i32 0, !dbg !10462
  br label %cond.end, !dbg !10462

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10462

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_structure_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10462
  %call = call i32 @VEC_structure_base_length(%struct.VEC_structure_base* %cond), !dbg !10462
  store i32 %call, i32* %length, align 4, !dbg !10461
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10463
  %call1 = call i32 @gimple_cond_code(%union.gimple_statement_d* %2), !dbg !10463
  %cmp = icmp eq i32 %call1, 101, !dbg !10463
  br i1 %cmp, label %cond.false5, label %lor.lhs.false, !dbg !10463

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10463
  %call2 = call i32 @gimple_cond_code(%union.gimple_statement_d* %3), !dbg !10463
  %cmp3 = icmp eq i32 %call2, 102, !dbg !10463
  br i1 %cmp3, label %cond.false5, label %cond.true4, !dbg !10463

cond.true4:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10463
  br label %cond.end6, !dbg !10463

cond.false5:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end6, !dbg !10463

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !10463
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10464
  %call8 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %4), !dbg !10465
  store %union.tree_node* %call8, %union.tree_node** %arg0, align 8, !dbg !10466
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10467
  %call9 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %5), !dbg !10468
  store %union.tree_node* %call9, %union.tree_node** %arg1, align 8, !dbg !10469
  %6 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10470
  %call10 = call %union.tree_node* @get_type_of_var(%union.tree_node* %6), !dbg !10471
  %call11 = call %union.tree_node* @strip_type(%union.tree_node* %call10), !dbg !10472
  %call12 = call i32 @find_structure(%union.tree_node* %call11), !dbg !10473
  store i32 %call12, i32* %str0, align 4, !dbg !10474
  %7 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !10475
  %call13 = call %union.tree_node* @get_type_of_var(%union.tree_node* %7), !dbg !10476
  %call14 = call %union.tree_node* @strip_type(%union.tree_node* %call13), !dbg !10477
  %call15 = call i32 @find_structure(%union.tree_node* %call14), !dbg !10478
  store i32 %call15, i32* %str1, align 4, !dbg !10479
  %8 = load i32, i32* %str0, align 4, !dbg !10480
  %9 = load i32, i32* %length, align 4, !dbg !10481
  %cmp16 = icmp ne i32 %8, %9, !dbg !10482
  %10 = zext i1 %cmp16 to i64, !dbg !10483
  %cond17 = select i1 %cmp16, i32 1, i32 0, !dbg !10483
  %conv = trunc i32 %cond17 to i8, !dbg !10483
  store i8 %conv, i8* %s0, align 1, !dbg !10484
  %11 = load i32, i32* %str1, align 4, !dbg !10485
  %12 = load i32, i32* %length, align 4, !dbg !10486
  %cmp18 = icmp ne i32 %11, %12, !dbg !10487
  %13 = zext i1 %cmp18 to i64, !dbg !10488
  %cond20 = select i1 %cmp18, i32 1, i32 0, !dbg !10488
  %conv21 = trunc i32 %cond20 to i8, !dbg !10488
  store i8 %conv21, i8* %s1, align 1, !dbg !10489
  %14 = load i8, i8* %s0, align 1, !dbg !10490
  %conv22 = zext i8 %14 to i32, !dbg !10490
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !10490
  br i1 %tobool23, label %cond.false28, label %lor.lhs.false24, !dbg !10490

lor.lhs.false24:                                  ; preds = %cond.end6
  %15 = load i8, i8* %s1, align 1, !dbg !10490
  %conv25 = zext i8 %15 to i32, !dbg !10490
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !10490
  br i1 %tobool26, label %cond.false28, label %cond.true27, !dbg !10490

cond.true27:                                      ; preds = %lor.lhs.false24
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1246, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10490
  br label %cond.end29, !dbg !10490

cond.false28:                                     ; preds = %lor.lhs.false24, %cond.end6
  br label %cond.end29, !dbg !10490

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !10490
  %16 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10491
  %call31 = call i32 @integer_zerop(%union.tree_node* %16), !dbg !10491
  %tobool32 = icmp ne i32 %call31, 0, !dbg !10491
  br i1 %tobool32, label %cond.false37, label %lor.lhs.false33, !dbg !10491

lor.lhs.false33:                                  ; preds = %cond.end29
  %17 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !10491
  %call34 = call i32 @integer_zerop(%union.tree_node* %17), !dbg !10491
  %tobool35 = icmp ne i32 %call34, 0, !dbg !10491
  br i1 %tobool35, label %cond.false37, label %cond.true36, !dbg !10491

cond.true36:                                      ; preds = %lor.lhs.false33
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10491
  br label %cond.end38, !dbg !10491

cond.false37:                                     ; preds = %lor.lhs.false33, %cond.end29
  br label %cond.end38, !dbg !10491

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !10491
  %18 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10492
  %call40 = call i32 @integer_zerop(%union.tree_node* %18), !dbg !10493
  %tobool41 = icmp ne i32 %call40, 0, !dbg !10493
  br i1 %tobool41, label %cond.true42, label %cond.false50, !dbg !10493

cond.true42:                                      ; preds = %cond.end38
  %19 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10494
  %tobool43 = icmp ne %struct.VEC_structure_heap* %19, null, !dbg !10494
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !10494

cond.true44:                                      ; preds = %cond.true42
  %20 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10494
  %base45 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %20, i32 0, i32 0, !dbg !10494
  br label %cond.end47, !dbg !10494

cond.false46:                                     ; preds = %cond.true42
  br label %cond.end47, !dbg !10494

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_structure_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !10494
  %21 = load i32, i32* %str1, align 4, !dbg !10494
  %call49 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond48, i32 %21), !dbg !10494
  br label %cond.end58, !dbg !10493

cond.false50:                                     ; preds = %cond.end38
  %22 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10495
  %tobool51 = icmp ne %struct.VEC_structure_heap* %22, null, !dbg !10495
  br i1 %tobool51, label %cond.true52, label %cond.false54, !dbg !10495

cond.true52:                                      ; preds = %cond.false50
  %23 = load %struct.VEC_structure_heap*, %struct.VEC_structure_heap** @structures, align 8, !dbg !10495
  %base53 = getelementptr inbounds %struct.VEC_structure_heap, %struct.VEC_structure_heap* %23, i32 0, i32 0, !dbg !10495
  br label %cond.end55, !dbg !10495

cond.false54:                                     ; preds = %cond.false50
  br label %cond.end55, !dbg !10495

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.VEC_structure_base* [ %base53, %cond.true52 ], [ null, %cond.false54 ], !dbg !10495
  %24 = load i32, i32* %str0, align 4, !dbg !10495
  %call57 = call %struct.data_structure* @VEC_structure_base_index(%struct.VEC_structure_base* %cond56, i32 %24), !dbg !10495
  br label %cond.end58, !dbg !10493

cond.end58:                                       ; preds = %cond.end55, %cond.end47
  %cond59 = phi %struct.data_structure* [ %call49, %cond.end47 ], [ %call57, %cond.end55 ], !dbg !10493
  store %struct.data_structure* %cond59, %struct.data_structure** %str, align 8, !dbg !10496
  %25 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10497
  %call60 = call i32 @integer_zerop(%union.tree_node* %25), !dbg !10498
  %tobool61 = icmp ne i32 %call60, 0, !dbg !10498
  br i1 %tobool61, label %cond.true62, label %cond.false63, !dbg !10498

cond.true62:                                      ; preds = %cond.end58
  %26 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !10499
  br label %cond.end64, !dbg !10498

cond.false63:                                     ; preds = %cond.end58
  %27 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10500
  br label %cond.end64, !dbg !10498

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi %union.tree_node* [ %26, %cond.true62 ], [ %27, %cond.false63 ], !dbg !10498
  store %union.tree_node* %cond65, %union.tree_node** %arg, align 8, !dbg !10501
  %28 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !10502
  %call66 = call i32 @integer_zerop(%union.tree_node* %28), !dbg !10503
  %tobool67 = icmp ne i32 %call66, 0, !dbg !10503
  %29 = zext i1 %tobool67 to i64, !dbg !10503
  %cond68 = select i1 %tobool67, i32 1, i32 0, !dbg !10503
  store i32 %cond68, i32* %pos, align 4, !dbg !10504
  store i32 0, i32* %i, align 4, !dbg !10505
  br label %for.cond, !dbg !10507

for.cond:                                         ; preds = %for.inc, %cond.end64
  %30 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !10508
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %30, i32 0, i32 6, !dbg !10508
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !10508
  %tobool69 = icmp ne %struct.VEC_tree_heap* %31, null, !dbg !10508
  br i1 %tobool69, label %cond.true70, label %cond.false73, !dbg !10508

cond.true70:                                      ; preds = %for.cond
  %32 = load %struct.data_structure*, %struct.data_structure** %str, align 8, !dbg !10508
  %new_types71 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %32, i32 0, i32 6, !dbg !10508
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types71, align 8, !dbg !10508
  %base72 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %33, i32 0, i32 0, !dbg !10508
  br label %cond.end74, !dbg !10508

cond.false73:                                     ; preds = %for.cond
  br label %cond.end74, !dbg !10508

cond.end74:                                       ; preds = %cond.false73, %cond.true70
  %cond75 = phi %struct.VEC_tree_base* [ %base72, %cond.true70 ], [ null, %cond.false73 ], !dbg !10508
  %34 = load i32, i32* %i, align 4, !dbg !10508
  %call76 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond75, i32 %34, %union.tree_node** %type), !dbg !10508
  %tobool77 = icmp ne i32 %call76, 0, !dbg !10510
  br i1 %tobool77, label %for.body, label %for.end, !dbg !10510

for.body:                                         ; preds = %cond.end74
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_arg, metadata !10511, metadata !DIExpression()), !dbg !10513
  %35 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10514
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10515
  %call78 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %35, %union.tree_node* %36), !dbg !10516
  store %union.tree_node* %call78, %union.tree_node** %new_arg, align 8, !dbg !10517
  %37 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !10518
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10519
  %39 = load i32, i32* %pos, align 4, !dbg !10520
  call void @create_new_stmts_for_cond_expr_1(%union.tree_node* %37, %union.gimple_statement_d* %38, i32 %39), !dbg !10521
  br label %for.inc, !dbg !10522

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i, align 4, !dbg !10523
  %inc = add nsw i32 %40, 1, !dbg !10523
  store i32 %inc, i32* %i, align 4, !dbg !10523
  br label %for.cond, !dbg !10524, !llvm.loop !10525

for.end:                                          ; preds = %cond.end74
  ret void, !dbg !10527
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !10528 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !10529, metadata !DIExpression()), !dbg !10530
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !10531
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !10532
  ret void, !dbg !10533
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_stmts_for_general_acc(%struct.access_site* %acc, %struct.data_structure* %str) #0 !dbg !10534 {
entry:
  %acc.addr = alloca %struct.access_site*, align 8
  %str.addr = alloca %struct.data_structure*, align 8
  %type = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.access_site* %acc, %struct.access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc.addr, metadata !10535, metadata !DIExpression()), !dbg !10536
  store %struct.data_structure* %str, %struct.data_structure** %str.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_structure** %str.addr, metadata !10537, metadata !DIExpression()), !dbg !10538
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10539, metadata !DIExpression()), !dbg !10540
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10541, metadata !DIExpression()), !dbg !10542
  %0 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10543
  %stmt1 = getelementptr inbounds %struct.access_site, %struct.access_site* %0, i32 0, i32 0, !dbg !10544
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !10544
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !10542
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10545, metadata !DIExpression()), !dbg !10546
  store i32 0, i32* %i, align 4, !dbg !10547
  br label %for.cond, !dbg !10549

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !10550
  %new_types = getelementptr inbounds %struct.data_structure, %struct.data_structure* %2, i32 0, i32 6, !dbg !10550
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types, align 8, !dbg !10550
  %tobool = icmp ne %struct.VEC_tree_heap* %3, null, !dbg !10550
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10550

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.data_structure*, %struct.data_structure** %str.addr, align 8, !dbg !10550
  %new_types2 = getelementptr inbounds %struct.data_structure, %struct.data_structure* %4, i32 0, i32 6, !dbg !10550
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %new_types2, align 8, !dbg !10550
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !10550
  br label %cond.end, !dbg !10550

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10550
  %6 = load i32, i32* %i, align 4, !dbg !10550
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %6, %union.tree_node** %type), !dbg !10550
  %tobool3 = icmp ne i32 %call, 0, !dbg !10552
  br i1 %tobool3, label %for.body, label %for.end, !dbg !10552

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !10553, metadata !DIExpression()), !dbg !10555
  %7 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10556
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10557
  %call4 = call %union.gimple_statement_d* @create_general_new_stmt(%struct.access_site* %7, %union.tree_node* %8), !dbg !10558
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10559
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10560
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10561
  call void @insert_after_stmt(%union.gimple_statement_d* %9, %union.gimple_statement_d* %10), !dbg !10562
  br label %for.inc, !dbg !10563

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !10564
  %inc = add i32 %11, 1, !dbg !10564
  store i32 %inc, i32* %i, align 4, !dbg !10564
  br label %for.cond, !dbg !10565, !llvm.loop !10566

for.end:                                          ; preds = %cond.end
  ret void, !dbg !10568
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_stmts_for_cond_expr_1(%union.tree_node* %new_var, %union.gimple_statement_d* %cond_stmt, i32 %pos) #0 !dbg !10569 {
entry:
  %new_var.addr = alloca %union.tree_node*, align 8
  %cond_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %pos.addr = alloca i32, align 4
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %true_e = alloca %struct.edge_def*, align 8
  %false_e = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %new_var, %union.tree_node** %new_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_var.addr, metadata !10572, metadata !DIExpression()), !dbg !10573
  store %union.gimple_statement_d* %cond_stmt, %union.gimple_statement_d** %cond_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt.addr, metadata !10574, metadata !DIExpression()), !dbg !10575
  store i32 %pos, i32* %pos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pos.addr, metadata !10576, metadata !DIExpression()), !dbg !10577
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !10578, metadata !DIExpression()), !dbg !10579
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_e, metadata !10580, metadata !DIExpression()), !dbg !10581
  store %struct.edge_def* null, %struct.edge_def** %true_e, align 8, !dbg !10581
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_e, metadata !10582, metadata !DIExpression()), !dbg !10583
  store %struct.edge_def* null, %struct.edge_def** %false_e, align 8, !dbg !10583
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !10584, metadata !DIExpression()), !dbg !10585
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !10586, metadata !DIExpression()), !dbg !10587
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10588
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !10589
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %call, %struct.edge_def** %true_e, %struct.edge_def** %false_e), !dbg !10590
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10591
  %call1 = call i32 @gimple_cond_code(%union.gimple_statement_d* %1), !dbg !10592
  %2 = load i32, i32* %pos.addr, align 4, !dbg !10593
  %cmp = icmp eq i32 %2, 0, !dbg !10594
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10593

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10595
  br label %cond.end, !dbg !10593

cond.false:                                       ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10596
  %call2 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %4), !dbg !10597
  br label %cond.end, !dbg !10593

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %call2, %cond.false ], !dbg !10593
  %5 = load i32, i32* %pos.addr, align 4, !dbg !10598
  %cmp3 = icmp eq i32 %5, 1, !dbg !10599
  br i1 %cmp3, label %cond.true4, label %cond.false5, !dbg !10598

cond.true4:                                       ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10600
  br label %cond.end7, !dbg !10598

cond.false5:                                      ; preds = %cond.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10601
  %call6 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %7), !dbg !10602
  br label %cond.end7, !dbg !10598

cond.end7:                                        ; preds = %cond.false5, %cond.true4
  %cond8 = phi %union.tree_node* [ %6, %cond.true4 ], [ %call6, %cond.false5 ], !dbg !10598
  %call9 = call %union.gimple_statement_d* @gimple_build_cond(i32 %call1, %union.tree_node* %cond, %union.tree_node* %cond8, %union.tree_node* null, %union.tree_node* null), !dbg !10603
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10604
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10605
  call void @finalize_stmt(%union.gimple_statement_d* %8), !dbg !10606
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10607
  %call10 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %9), !dbg !10608
  %call11 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %call10), !dbg !10609
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %new_bb, align 8, !dbg !10610
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !10611
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %10), !dbg !10612
  %11 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !10612
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10612
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !10612
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10613
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %13, i32 0), !dbg !10614
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !10615
  %15 = load %struct.edge_def*, %struct.edge_def** %true_e, align 8, !dbg !10616
  %call12 = call %struct.edge_def* @make_edge_and_fix_phis_of_dest(%struct.basic_block_def* %14, %struct.edge_def* %15), !dbg !10617
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !10618
  %17 = load %struct.edge_def*, %struct.edge_def** %false_e, align 8, !dbg !10619
  %call13 = call %struct.edge_def* @make_edge_and_fix_phis_of_dest(%struct.basic_block_def* %16, %struct.edge_def* %17), !dbg !10620
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt.addr, align 8, !dbg !10621
  %call14 = call i32 @gimple_cond_code(%union.gimple_statement_d* %18), !dbg !10623
  %cmp15 = icmp eq i32 %call14, 102, !dbg !10624
  br i1 %cmp15, label %if.then, label %if.else, !dbg !10625

if.then:                                          ; preds = %cond.end7
  %19 = load %struct.edge_def*, %struct.edge_def** %true_e, align 8, !dbg !10626
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !10627
  call void @redirect_edge_succ(%struct.edge_def* %19, %struct.basic_block_def* %20), !dbg !10628
  br label %if.end, !dbg !10628

if.else:                                          ; preds = %cond.end7
  %21 = load %struct.edge_def*, %struct.edge_def** %false_e, align 8, !dbg !10629
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !10630
  call void @redirect_edge_succ(%struct.edge_def* %21, %struct.basic_block_def* %22), !dbg !10631
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !10632
}

declare dso_local void @extract_true_false_edges_from_block(%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @make_edge_and_fix_phis_of_dest(%struct.basic_block_def* %bb, %struct.edge_def* %e) #0 !dbg !10633 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %new_e = alloca %struct.edge_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10636, metadata !DIExpression()), !dbg !10637
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !10638, metadata !DIExpression()), !dbg !10639
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_e, metadata !10640, metadata !DIExpression()), !dbg !10641
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !10642, metadata !DIExpression()), !dbg !10643
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !10644, metadata !DIExpression()), !dbg !10645
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10646
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10647
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !10648
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10648
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10649
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 7, !dbg !10650
  %4 = load i32, i32* %flags, align 8, !dbg !10650
  %call = call %struct.edge_def* @make_edge(%struct.basic_block_def* %0, %struct.basic_block_def* %2, i32 %4), !dbg !10651
  store %struct.edge_def* %call, %struct.edge_def** %new_e, align 8, !dbg !10652
  %5 = load %struct.edge_def*, %struct.edge_def** %new_e, align 8, !dbg !10653
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 1, !dbg !10655
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !10655
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %6), !dbg !10656
  %7 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !10656
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10656
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !10656
  br label %for.cond, !dbg !10657

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !10658
  %tobool = icmp ne i8 %call2, 0, !dbg !10660
  %lnot = xor i1 %tobool, true, !dbg !10660
  br i1 %lnot, label %for.body, label %for.end, !dbg !10661

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !10662, metadata !DIExpression()), !dbg !10664
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !10665
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %phi, align 8, !dbg !10664
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !10666
  %10 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10666
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 6, !dbg !10666
  %11 = load i32, i32* %dest_idx, align 4, !dbg !10666
  %call4 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %9, i32 %11), !dbg !10666
  %call5 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call4), !dbg !10666
  store %union.tree_node* %call5, %union.tree_node** %arg, align 8, !dbg !10667
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !10668
  %13 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !10669
  %14 = load %struct.edge_def*, %struct.edge_def** %new_e, align 8, !dbg !10670
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !10671
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10672
  %call6 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %15, %struct.edge_def* %16), !dbg !10673
  call void @add_phi_arg(%union.gimple_statement_d* %12, %union.tree_node* %13, %struct.edge_def* %14, i32 %call6), !dbg !10674
  br label %for.inc, !dbg !10675

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !10676
  br label %for.cond, !dbg !10677, !llvm.loop !10678

for.end:                                          ; preds = %for.cond
  %17 = load %struct.edge_def*, %struct.edge_def** %new_e, align 8, !dbg !10680
  ret %struct.edge_def* %17, !dbg !10681
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !10682 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10685, metadata !DIExpression()), !dbg !10686
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10687, metadata !DIExpression()), !dbg !10688
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10689
  %1 = load i32, i32* %i.addr, align 4, !dbg !10690
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !10691
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !10692
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !10693
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !10694 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10697, metadata !DIExpression()), !dbg !10698
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !10699, metadata !DIExpression()), !dbg !10700
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10701
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10702
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !10703
  %2 = load i32, i32* %dest_idx, align 4, !dbg !10703
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !10704
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !10705
  %3 = load i32, i32* %locus, align 8, !dbg !10705
  ret i32 %3, !dbg !10706
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !10707 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10711, metadata !DIExpression()), !dbg !10712
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10713, metadata !DIExpression()), !dbg !10714
  %0 = load i32, i32* %index.addr, align 4, !dbg !10715
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10715
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !10715
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !10715
  %2 = load i32, i32* %capacity, align 8, !dbg !10715
  %cmp = icmp ule i32 %0, %2, !dbg !10715
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10715

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10715
  br label %cond.end, !dbg !10715

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10715

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10715
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10716
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !10717
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !10718
  %4 = load i32, i32* %index.addr, align 4, !dbg !10719
  %idxprom = zext i32 %4 to i64, !dbg !10716
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !10716
  ret %struct.phi_arg_d* %arrayidx, !dbg !10720
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @create_general_new_stmt(%struct.access_site* %acc, %union.tree_node* %new_type) #0 !dbg !10721 {
entry:
  %acc.addr = alloca %struct.access_site*, align 8
  %new_type.addr = alloca %union.tree_node*, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %new_var = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  store %struct.access_site* %acc, %struct.access_site** %acc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site** %acc.addr, metadata !10724, metadata !DIExpression()), !dbg !10725
  store %union.tree_node* %new_type, %union.tree_node** %new_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type.addr, metadata !10726, metadata !DIExpression()), !dbg !10727
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !10728, metadata !DIExpression()), !dbg !10729
  %0 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10730
  %stmt = getelementptr inbounds %struct.access_site, %struct.access_site* %0, i32 0, i32 0, !dbg !10731
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10731
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %old_stmt, align 8, !dbg !10729
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !10732, metadata !DIExpression()), !dbg !10733
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !10734, metadata !DIExpression()), !dbg !10735
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !10736
  %call = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %2), !dbg !10737
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10735
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10738, metadata !DIExpression()), !dbg !10739
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10740
  %call1 = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %3), !dbg !10742
  %tobool = icmp ne i8 %call1, 0, !dbg !10742
  br i1 %tobool, label %if.then, label %if.end, !dbg !10743

if.then:                                          ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10744
  call void @gimple_set_vuse(%union.gimple_statement_d* %4, %union.tree_node* null), !dbg !10746
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10747
  call void @gimple_set_vdef(%union.gimple_statement_d* %5, %union.tree_node* null), !dbg !10748
  br label %if.end, !dbg !10749

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !10750
  br label %for.cond, !dbg !10752

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10753
  %vars = getelementptr inbounds %struct.access_site, %struct.access_site* %6, i32 0, i32 1, !dbg !10753
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !10753
  %tobool2 = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !10753
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !10753

cond.true:                                        ; preds = %for.cond
  %8 = load %struct.access_site*, %struct.access_site** %acc.addr, align 8, !dbg !10753
  %vars3 = getelementptr inbounds %struct.access_site, %struct.access_site* %8, i32 0, i32 1, !dbg !10753
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars3, align 8, !dbg !10753
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i32 0, i32 0, !dbg !10753
  br label %cond.end, !dbg !10753

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10753

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10753
  %10 = load i32, i32* %i, align 4, !dbg !10753
  %call4 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %10, %union.tree_node** %var), !dbg !10753
  %tobool5 = icmp ne i32 %call4, 0, !dbg !10755
  br i1 %tobool5, label %for.body, label %for.end, !dbg !10755

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_var, metadata !10756, metadata !DIExpression()), !dbg !10758
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10759
  %12 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10760
  %call6 = call %union.tree_node* @find_new_var_of_type(%union.tree_node* %11, %union.tree_node* %12), !dbg !10761
  store %union.tree_node* %call6, %union.tree_node** %new_var, align 8, !dbg !10758
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !10762, metadata !DIExpression()), !dbg !10763
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !10764, metadata !DIExpression()), !dbg !10765
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !10765
  %13 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10766
  %tobool7 = icmp ne %union.tree_node* %13, null, !dbg !10766
  br i1 %tobool7, label %cond.false9, label %cond.true8, !dbg !10766

cond.true8:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1317, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10766
  br label %cond.end10, !dbg !10766

cond.false9:                                      ; preds = %for.body
  br label %cond.end10, !dbg !10766

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !10766
  %14 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10767
  call void @finalize_var_creation(%union.tree_node* %14), !dbg !10768
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10769
  %call12 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %15), !dbg !10771
  %tobool13 = icmp ne i8 %call12, 0, !dbg !10771
  br i1 %tobool13, label %if.then14, label %if.else53, !dbg !10772

if.then14:                                        ; preds = %cond.end10
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10773
  %call15 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %16), !dbg !10775
  store %union.tree_node* %call15, %union.tree_node** %lhs, align 8, !dbg !10776
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !10777
  %base16 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !10777
  %18 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10777
  %bf.load = load i64, i64* %18, align 8, !dbg !10777
  %bf.clear = and i64 %bf.load, 65535, !dbg !10777
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10777
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !10779
  br i1 %cmp, label %if.then17, label %if.end19, !dbg !10780

if.then17:                                        ; preds = %if.then14
  %19 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !10781
  %ssa_name = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !10781
  %var18 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !10781
  %20 = load %union.tree_node*, %union.tree_node** %var18, align 8, !dbg !10781
  store %union.tree_node* %20, %union.tree_node** %lhs, align 8, !dbg !10782
  br label %if.end19, !dbg !10783

if.end19:                                         ; preds = %if.then17, %if.then14
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10784
  %call20 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %21), !dbg !10786
  %cmp21 = icmp eq i32 %call20, 141, !dbg !10787
  br i1 %cmp21, label %if.then22, label %if.end26, !dbg !10788

if.then22:                                        ; preds = %if.end19
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10789
  %call23 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %22), !dbg !10789
  %ssa_name24 = bitcast %union.tree_node* %call23 to %struct.tree_ssa_name*, !dbg !10789
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !10789
  %23 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !10789
  store %union.tree_node* %23, %union.tree_node** %rhs, align 8, !dbg !10790
  br label %if.end26, !dbg !10791

if.end26:                                         ; preds = %if.then22, %if.end19
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10792
  %call27 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %24), !dbg !10794
  %cmp28 = icmp eq i32 %call27, 51, !dbg !10795
  br i1 %cmp28, label %if.then29, label %if.end45, !dbg !10796

if.then29:                                        ; preds = %if.end26
  %25 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10797
  %constructor = bitcast %union.tree_node* %25 to %struct.tree_constructor*, !dbg !10797
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !10797
  %26 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !10797
  %tobool30 = icmp ne %struct.VEC_constructor_elt_gc* %26, null, !dbg !10797
  br i1 %tobool30, label %cond.true31, label %cond.false35, !dbg !10797

cond.true31:                                      ; preds = %if.then29
  %27 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10797
  %constructor32 = bitcast %union.tree_node* %27 to %struct.tree_constructor*, !dbg !10797
  %elts33 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor32, i32 0, i32 1, !dbg !10797
  %28 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts33, align 8, !dbg !10797
  %base34 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %28, i32 0, i32 0, !dbg !10797
  br label %cond.end36, !dbg !10797

cond.false35:                                     ; preds = %if.then29
  br label %cond.end36, !dbg !10797

cond.end36:                                       ; preds = %cond.false35, %cond.true31
  %cond37 = phi %struct.VEC_constructor_elt_base* [ %base34, %cond.true31 ], [ null, %cond.false35 ], !dbg !10797
  %call38 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond37), !dbg !10797
  %cmp39 = icmp eq i32 %call38, 0, !dbg !10797
  br i1 %cmp39, label %cond.false41, label %cond.true40, !dbg !10797

cond.true40:                                      ; preds = %cond.end36
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1335, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10797
  br label %cond.end42, !dbg !10797

cond.false41:                                     ; preds = %cond.end36
  br label %cond.end42, !dbg !10797

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ 0, %cond.true40 ], [ 0, %cond.false41 ], !dbg !10797
  %29 = load %union.tree_node*, %union.tree_node** %new_type.addr, align 8, !dbg !10799
  %call44 = call %union.tree_node* @build_constructor(%union.tree_node* %29, %struct.VEC_constructor_elt_gc* null), !dbg !10800
  store %union.tree_node* %call44, %union.tree_node** %rhs, align 8, !dbg !10801
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10802
  %31 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10803
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %30, %union.tree_node* %31), !dbg !10804
  br label %if.end45, !dbg !10805

if.end45:                                         ; preds = %cond.end42, %if.end26
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !10806
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10808
  %cmp46 = icmp eq %union.tree_node* %32, %33, !dbg !10809
  br i1 %cmp46, label %if.then47, label %if.else, !dbg !10810

if.then47:                                        ; preds = %if.end45
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10811
  %35 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10812
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %34, %union.tree_node* %35), !dbg !10813
  br label %if.end52, !dbg !10813

if.else:                                          ; preds = %if.end45
  %36 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !10814
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10816
  %cmp48 = icmp eq %union.tree_node* %36, %37, !dbg !10817
  br i1 %cmp48, label %if.then49, label %if.else50, !dbg !10818

if.then49:                                        ; preds = %if.else
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10819
  %39 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10820
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %38, %union.tree_node* %39), !dbg !10821
  br label %if.end51, !dbg !10821

if.else50:                                        ; preds = %if.else
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10822
  %41 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10823
  %42 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10824
  call void @insert_new_var_in_stmt(%union.gimple_statement_d* %40, %union.tree_node* %41, %union.tree_node* %42), !dbg !10825
  br label %if.end51

if.end51:                                         ; preds = %if.else50, %if.then49
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then47
  br label %if.end54, !dbg !10826

if.else53:                                        ; preds = %cond.end10
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10827
  %44 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10828
  %45 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10829
  call void @insert_new_var_in_stmt(%union.gimple_statement_d* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !10830
  br label %if.end54

if.end54:                                         ; preds = %if.else53, %if.end52
  br label %for.inc, !dbg !10831

for.inc:                                          ; preds = %if.end54
  %46 = load i32, i32* %i, align 4, !dbg !10832
  %inc = add i32 %46, 1, !dbg !10832
  store i32 %inc, i32* %i, align 4, !dbg !10832
  br label %for.cond, !dbg !10833, !llvm.loop !10834

for.end:                                          ; preds = %cond.end
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10836
  call void @finalize_stmt(%union.gimple_statement_d* %47), !dbg !10837
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !10838
  ret %union.gimple_statement_d* %48, !dbg !10839
}

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) #0 !dbg !10840 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10841, metadata !DIExpression()), !dbg !10842
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !10843, metadata !DIExpression()), !dbg !10844
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10845
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10845
  %tobool = icmp ne i8 %call, 0, !dbg !10845
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10845

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10845
  br label %cond.end, !dbg !10845

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10845
  %1 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !10846
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10847
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10848
  %vuse1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10849
  store %union.tree_node* %1, %union.tree_node** %vuse1, align 8, !dbg !10850
  ret void, !dbg !10851
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) #0 !dbg !10852 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10853, metadata !DIExpression()), !dbg !10854
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !10855, metadata !DIExpression()), !dbg !10856
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10857
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10857
  %tobool = icmp ne i8 %call, 0, !dbg !10857
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10857

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10857
  br label %cond.end, !dbg !10857

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10857

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10857
  %1 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !10858
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10859
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10860
  %vdef1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !10861
  store %union.tree_node* %1, %union.tree_node** %vdef1, align 8, !dbg !10862
  ret void, !dbg !10863
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !10864 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !10869, metadata !DIExpression()), !dbg !10870
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !10870
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !10870
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10870

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !10870
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !10870
  %2 = load i32, i32* %num, align 8, !dbg !10870
  br label %cond.end, !dbg !10870

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !10870
  ret i32 %cond, !dbg !10870
}

declare dso_local %union.tree_node* @build_constructor(%union.tree_node*, %struct.VEC_constructor_elt_gc*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_new_var_in_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %var, %union.tree_node* %new_var) #0 !dbg !10871 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %new_var.addr = alloca %union.tree_node*, align 8
  %r_pos = alloca %struct.ref_pos, align 8
  %pos = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10874, metadata !DIExpression()), !dbg !10875
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !10876, metadata !DIExpression()), !dbg !10877
  store %union.tree_node* %new_var, %union.tree_node** %new_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_var.addr, metadata !10878, metadata !DIExpression()), !dbg !10879
  call void @llvm.dbg.declare(metadata %struct.ref_pos* %r_pos, metadata !10880, metadata !DIExpression()), !dbg !10881
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pos, metadata !10882, metadata !DIExpression()), !dbg !10883
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10884
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !10885
  %call = call %union.tree_node** @find_pos_in_stmt(%union.gimple_statement_d* %0, %union.tree_node* %1, %struct.ref_pos* %r_pos), !dbg !10886
  store %union.tree_node** %call, %union.tree_node*** %pos, align 8, !dbg !10887
  %2 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10888
  %tobool = icmp ne %union.tree_node** %2, null, !dbg !10888
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10888

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1276, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !10888
  br label %cond.end, !dbg !10888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10888
  br label %while.cond, !dbg !10889

while.cond:                                       ; preds = %if.end, %cond.end
  %container = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %r_pos, i32 0, i32 2, !dbg !10890
  %3 = load %union.tree_node*, %union.tree_node** %container, align 8, !dbg !10890
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !10891
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !10892

land.rhs:                                         ; preds = %while.cond
  %container2 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %r_pos, i32 0, i32 2, !dbg !10893
  %4 = load %union.tree_node*, %union.tree_node** %container2, align 8, !dbg !10893
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10893
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !10893
  %bf.load = load i64, i64* %5, align 8, !dbg !10893
  %bf.clear = and i64 %bf.load, 65535, !dbg !10893
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10893
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !10894
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !10895

lor.rhs:                                          ; preds = %land.rhs
  %container3 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %r_pos, i32 0, i32 2, !dbg !10896
  %6 = load %union.tree_node*, %union.tree_node** %container3, align 8, !dbg !10896
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10896
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !10896
  %bf.load5 = load i64, i64* %7, align 8, !dbg !10896
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !10896
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !10896
  %cmp8 = icmp eq i32 %bf.cast7, 121, !dbg !10897
  br label %lor.end, !dbg !10895

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp8, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %8, %lor.end ], !dbg !10898
  br i1 %9, label %while.body, label %while.end, !dbg !10889

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10899, metadata !DIExpression()), !dbg !10901
  %10 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10902
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !10902
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10902
  %11 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !10902
  %common10 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10902
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !10902
  %12 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !10902
  store %union.tree_node* %12, %union.tree_node** %type, align 8, !dbg !10901
  %container12 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %r_pos, i32 0, i32 2, !dbg !10903
  %13 = load %union.tree_node*, %union.tree_node** %container12, align 8, !dbg !10903
  %base13 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10903
  %14 = bitcast %struct.tree_base* %base13 to i64*, !dbg !10903
  %bf.load14 = load i64, i64* %14, align 8, !dbg !10903
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !10903
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !10903
  %cmp17 = icmp eq i32 %bf.cast16, 47, !dbg !10905
  br i1 %cmp17, label %if.then, label %if.else, !dbg !10906

if.then:                                          ; preds = %while.body
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10907
  %16 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10907
  %call18 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %15, %union.tree_node* %16), !dbg !10907
  store %union.tree_node* %call18, %union.tree_node** %new_var.addr, align 8, !dbg !10908
  br label %if.end, !dbg !10909

if.else:                                          ; preds = %while.body
  %17 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10910
  %call19 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %17), !dbg !10910
  store %union.tree_node* %call19, %union.tree_node** %new_var.addr, align 8, !dbg !10911
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10912
  %container20 = getelementptr inbounds %struct.ref_pos, %struct.ref_pos* %r_pos, i32 0, i32 2, !dbg !10913
  %19 = load %union.tree_node*, %union.tree_node** %container20, align 8, !dbg !10913
  %call21 = call %union.tree_node** @find_pos_in_stmt(%union.gimple_statement_d* %18, %union.tree_node* %19, %struct.ref_pos* %r_pos), !dbg !10914
  store %union.tree_node** %call21, %union.tree_node*** %pos, align 8, !dbg !10915
  br label %while.cond, !dbg !10889, !llvm.loop !10916

while.end:                                        ; preds = %land.end
  %20 = load %union.tree_node*, %union.tree_node** %new_var.addr, align 8, !dbg !10918
  %21 = load %union.tree_node**, %union.tree_node*** %pos, align 8, !dbg !10919
  store %union.tree_node* %20, %union.tree_node** %21, align 8, !dbg !10920
  ret void, !dbg !10921
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @free_new_var(i8** %slot, i8* %data) #0 !dbg !10922 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %n_var = alloca %struct.new_var_data*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !10923, metadata !DIExpression()), !dbg !10924
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10925, metadata !DIExpression()), !dbg !10926
  call void @llvm.dbg.declare(metadata %struct.new_var_data** %n_var, metadata !10927, metadata !DIExpression()), !dbg !10928
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !10929
  %1 = bitcast i8** %0 to %struct.new_var_data**, !dbg !10930
  %2 = load %struct.new_var_data*, %struct.new_var_data** %1, align 8, !dbg !10930
  store %struct.new_var_data* %2, %struct.new_var_data** %n_var, align 8, !dbg !10928
  %3 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !10931
  %new_vars = getelementptr inbounds %struct.new_var_data, %struct.new_var_data* %3, i32 0, i32 1, !dbg !10931
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %new_vars), !dbg !10931
  %4 = load %struct.new_var_data*, %struct.new_var_data** %n_var, align 8, !dbg !10932
  %5 = bitcast %struct.new_var_data* %4 to i8*, !dbg !10932
  call void @free(i8* %5), !dbg !10933
  ret i32 1, !dbg !10934
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_alloc_sites() #0 !dbg !10935 {
entry:
  %0 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !10936
  %tobool = icmp ne %struct.htab* %0, null, !dbg !10936
  br i1 %tobool, label %if.then, label %if.end, !dbg !10938

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !10939
  call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @free_falloc_sites, i8* null), !dbg !10940
  br label %if.end, !dbg !10940

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.htab*, %struct.htab** @alloc_sites, align 8, !dbg !10941
  call void @htab_delete(%struct.htab* %2), !dbg !10942
  store %struct.htab* null, %struct.htab** @alloc_sites, align 8, !dbg !10943
  ret void, !dbg !10944
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @free_falloc_sites(i8** %slot, i8* %data) #0 !dbg !10945 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %fallocs = alloca %struct.func_alloc_sites*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !10946, metadata !DIExpression()), !dbg !10947
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10948, metadata !DIExpression()), !dbg !10949
  call void @llvm.dbg.declare(metadata %struct.func_alloc_sites** %fallocs, metadata !10950, metadata !DIExpression()), !dbg !10951
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !10952
  %1 = bitcast i8** %0 to %struct.func_alloc_sites**, !dbg !10953
  %2 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %1, align 8, !dbg !10953
  store %struct.func_alloc_sites* %2, %struct.func_alloc_sites** %fallocs, align 8, !dbg !10951
  %3 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !10954
  %allocs = getelementptr inbounds %struct.func_alloc_sites, %struct.func_alloc_sites* %3, i32 0, i32 1, !dbg !10954
  call void @VEC_alloc_site_t_heap_free(%struct.VEC_alloc_site_t_heap** %allocs), !dbg !10954
  %4 = load %struct.func_alloc_sites*, %struct.func_alloc_sites** %fallocs, align 8, !dbg !10955
  %5 = bitcast %struct.func_alloc_sites* %4 to i8*, !dbg !10955
  call void @free(i8* %5), !dbg !10956
  ret i32 1, !dbg !10957
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_alloc_site_t_heap_free(%struct.VEC_alloc_site_t_heap** %vec_) #0 !dbg !10958 {
entry:
  %vec_.addr = alloca %struct.VEC_alloc_site_t_heap**, align 8
  store %struct.VEC_alloc_site_t_heap** %vec_, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alloc_site_t_heap*** %vec_.addr, metadata !10961, metadata !DIExpression()), !dbg !10962
  %0 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !10963
  %1 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %0, align 8, !dbg !10963
  %tobool = icmp ne %struct.VEC_alloc_site_t_heap* %1, null, !dbg !10963
  br i1 %tobool, label %if.then, label %if.end, !dbg !10962

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !10963
  %3 = load %struct.VEC_alloc_site_t_heap*, %struct.VEC_alloc_site_t_heap** %2, align 8, !dbg !10963
  %4 = bitcast %struct.VEC_alloc_site_t_heap* %3 to i8*, !dbg !10963
  call void @free(i8* %4), !dbg !10963
  br label %if.end, !dbg !10963

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_alloc_site_t_heap**, %struct.VEC_alloc_site_t_heap*** %vec_.addr, align 8, !dbg !10962
  store %struct.VEC_alloc_site_t_heap* null, %struct.VEC_alloc_site_t_heap** %5, align 8, !dbg !10962
  ret void, !dbg !10962
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3228, !3229, !3230}
!llvm.ident = !{!3231}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "alloc_sites", scope: !2, file: !3, line: 188, type: !2485, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1711, globals: !3193, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ipa-struct-reorg.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !512, !518, !523, !528, !546, !553, !560, !583, !1303, !1342, !1349, !1362, !1388, !1393, !1407, !1413, !1420, !1424, !1547, !1554, !1558, !1572, !1577}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !318, line: 39, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511}
!320 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!323 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!324 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!325 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!326 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!327 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!328 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!329 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!330 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!331 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!332 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!333 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!334 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!335 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!336 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!337 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!338 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!339 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!340 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!341 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!342 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!343 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!344 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!345 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!346 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!347 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!348 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!349 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!350 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!351 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!352 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!353 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!354 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!355 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!356 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!357 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!358 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!359 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!360 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!361 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!362 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!363 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!364 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!365 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!366 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!367 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!368 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!369 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!370 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!371 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!372 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!373 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!374 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!375 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!376 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!378 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!379 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!380 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!381 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!382 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!383 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!384 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!385 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!386 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!387 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!388 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!389 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!390 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!391 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!392 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!393 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!394 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!395 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!396 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!397 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!398 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!399 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!400 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!401 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!402 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!403 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!404 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!405 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!406 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!407 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!408 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!409 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!411 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!412 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!413 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!414 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!415 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!416 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!417 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!418 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!419 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!420 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!421 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!422 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!423 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!424 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!425 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!426 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!427 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!428 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!429 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!430 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!431 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!432 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!433 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!435 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!436 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!437 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!438 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!439 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!440 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!441 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!442 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!443 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!444 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!445 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!446 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!447 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!448 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!449 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!450 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!451 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!452 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!453 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!454 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!455 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!456 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!457 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!458 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!459 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!460 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!461 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!462 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!463 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!464 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!465 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!466 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!467 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!468 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!469 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!470 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!471 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!472 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!473 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!474 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!475 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!476 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!477 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!478 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!479 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!480 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!481 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!482 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!483 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!484 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!485 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!486 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!487 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!488 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!489 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!490 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!491 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!492 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!493 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!494 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!495 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!496 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!497 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!498 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!499 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!500 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!501 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!502 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!505 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!506 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!507 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!508 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!509 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!510 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!511 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!512 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !513, line: 363, baseType: !7, size: 32, elements: !514)
!513 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!514 = !{!515, !516, !517}
!515 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!516 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!517 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!518 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !513, line: 355, baseType: !7, size: 32, elements: !519)
!519 = !{!520, !521, !522}
!520 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!521 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!522 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!523 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !524, line: 474, baseType: !7, size: 32, elements: !525)
!524 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!525 = !{!526, !527}
!526 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!527 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!528 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !318, line: 280, baseType: !7, size: 32, elements: !529)
!529 = !{!530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545}
!530 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!531 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!532 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!533 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!534 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!535 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!536 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!537 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!538 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!539 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!540 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!541 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!542 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!543 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!544 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!545 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!546 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !318, line: 1817, baseType: !7, size: 32, elements: !547)
!547 = !{!548, !549, !550, !551, !552}
!548 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!549 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!550 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!551 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!552 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!553 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !318, line: 1805, baseType: !7, size: 32, elements: !554)
!554 = !{!555, !556, !557, !558, !559}
!555 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!556 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!557 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!558 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!559 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!560 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !561, line: 309, baseType: !7, size: 32, elements: !562)
!561 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!562 = !{!563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582}
!563 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!564 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!565 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!566 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!567 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!568 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!569 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!570 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!571 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!572 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!573 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!574 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!575 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!576 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!577 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!578 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!579 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!580 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!581 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!582 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!583 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !318, line: 220, baseType: !7, size: 32, elements: !584)
!584 = !{!585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302}
!585 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!586 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!587 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!588 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!589 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!590 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!591 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!592 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!593 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!594 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!595 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!596 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!597 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!598 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!599 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!600 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!601 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!602 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!603 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!604 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!605 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!606 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!607 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!608 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!609 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!610 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!611 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!612 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!613 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!614 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!615 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!616 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!617 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!618 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!619 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!620 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!621 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!622 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!623 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!624 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!625 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!626 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!627 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!628 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!629 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!630 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!631 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!632 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!633 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!634 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!635 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!636 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!637 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!638 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!639 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!640 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!641 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!642 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!643 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!644 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!645 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!646 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!647 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!648 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!649 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!650 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!651 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!652 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!653 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!654 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!655 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!656 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!657 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!658 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!659 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!660 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!661 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!667 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1302 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1303 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1304, line: 51, baseType: !7, size: 32, elements: !1305)
!1304 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1305 = !{!1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341}
!1306 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1307 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1308 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1309 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1310 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1311 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1312 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1313 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1314 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1315 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1316 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1317 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1318 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1319 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1320 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1321 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1322 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1323 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1324 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1325 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1326 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1327 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1328 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1329 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1330 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1331 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1332 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1333 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1334 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1335 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1336 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1337 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1338 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1339 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1340 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1341 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "availability", file: !561, line: 27, baseType: !7, size: 32, elements: !1343)
!1343 = !{!1344, !1345, !1346, !1347, !1348}
!1344 = !DIEnumerator(name: "AVAIL_UNSET", value: 0, isUnsigned: true)
!1345 = !DIEnumerator(name: "AVAIL_NOT_AVAILABLE", value: 1, isUnsigned: true)
!1346 = !DIEnumerator(name: "AVAIL_OVERWRITABLE", value: 2, isUnsigned: true)
!1347 = !DIEnumerator(name: "AVAIL_AVAILABLE", value: 3, isUnsigned: true)
!1348 = !DIEnumerator(name: "AVAIL_LOCAL", value: 4, isUnsigned: true)
!1349 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !318, line: 58, baseType: !7, size: 32, elements: !1350)
!1350 = !{!1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361}
!1351 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1352 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1353 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1354 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1355 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1356 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1357 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1358 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1359 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1360 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1361 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1362 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1304, line: 727, baseType: !7, size: 32, elements: !1363)
!1363 = !{!1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387}
!1364 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1365 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1366 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1367 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1368 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1369 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1370 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1371 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1372 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1373 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1374 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1375 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1376 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1377 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1378 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1379 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1380 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1381 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1382 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1383 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1384 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1385 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1386 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1387 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !1389, line: 147, baseType: !7, size: 32, elements: !1390)
!1389 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1390 = !{!1391, !1392}
!1391 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!1392 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!1393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !513, line: 295, baseType: !7, size: 32, elements: !1394)
!1394 = !{!1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406}
!1395 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1396 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1397 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1398 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1399 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1400 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1401 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1402 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1403 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1404 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1405 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1406 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !1304, line: 80, baseType: !7, size: 32, elements: !1408)
!1408 = !{!1409, !1410, !1411, !1412}
!1409 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1410 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1411 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1412 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1413 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1414, line: 119, baseType: !7, size: 32, elements: !1415)
!1414 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1415 = !{!1416, !1417, !1418, !1419}
!1416 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1417 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1418 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1419 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "operand_equal_flag", file: !318, line: 4853, baseType: !7, size: 32, elements: !1421)
!1421 = !{!1422, !1423}
!1422 = !DIEnumerator(name: "OEP_ONLY_CONST", value: 1, isUnsigned: true)
!1423 = !DIEnumerator(name: "OEP_PURE_SAME", value: 2, isUnsigned: true)
!1424 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1425, line: 82, baseType: !7, size: 32, elements: !1426)
!1425 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1426 = !{!1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546}
!1427 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1428 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1429 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1430 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1431 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1432 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1433 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1434 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1435 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1436 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1437 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1438 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1439 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1440 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1441 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1442 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1443 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1444 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1445 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1446 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1447 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1448 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1449 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1450 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1451 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1452 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1453 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1454 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1455 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1456 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1457 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1458 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1459 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1460 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1461 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1462 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1463 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1464 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1465 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1466 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1467 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1468 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1469 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1470 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1471 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1472 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1473 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1474 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1475 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1476 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1477 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1478 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1479 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1480 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1481 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1482 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1483 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1484 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1485 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1486 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1487 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1488 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1489 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1490 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1491 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1492 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1493 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1494 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1495 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1496 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1497 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1498 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1499 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1500 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1501 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1502 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1503 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1504 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1505 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1506 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1507 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1508 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1509 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1510 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1511 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1512 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1513 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1514 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1515 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1516 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1517 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1518 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1519 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1520 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1521 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1522 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1523 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1524 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1525 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1526 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1527 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1528 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1529 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1530 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1531 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1532 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1533 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1534 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1535 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1536 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1537 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1538 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1539 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1540 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1541 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1542 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1543 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1544 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1545 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1546 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1547 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "attribute_flags", file: !318, line: 4092, baseType: !7, size: 32, elements: !1548)
!1548 = !{!1549, !1550, !1551, !1552, !1553}
!1549 = !DIEnumerator(name: "ATTR_FLAG_DECL_NEXT", value: 1, isUnsigned: true)
!1550 = !DIEnumerator(name: "ATTR_FLAG_FUNCTION_NEXT", value: 2, isUnsigned: true)
!1551 = !DIEnumerator(name: "ATTR_FLAG_ARRAY_NEXT", value: 4, isUnsigned: true)
!1552 = !DIEnumerator(name: "ATTR_FLAG_TYPE_IN_PLACE", value: 8, isUnsigned: true)
!1553 = !DIEnumerator(name: "ATTR_FLAG_BUILT_IN", value: 16, isUnsigned: true)
!1554 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !513, line: 912, baseType: !7, size: 32, elements: !1555)
!1555 = !{!1556, !1557}
!1556 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!1557 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!1558 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !318, line: 3745, baseType: !7, size: 32, elements: !1559)
!1559 = !{!1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571}
!1560 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1561 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1562 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1563 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1564 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1565 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1566 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1567 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1568 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1569 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1570 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1571 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1572 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !1304, line: 4603, baseType: !7, size: 32, elements: !1573)
!1573 = !{!1574, !1575, !1576}
!1574 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1575 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1576 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1577 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !318, line: 3410, baseType: !7, size: 32, elements: !1578)
!1578 = !{!1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710}
!1579 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1580 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1581 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1582 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1583 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1584 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1585 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1586 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1587 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1588 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1589 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1590 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1591 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1592 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1593 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1594 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1595 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1596 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1597 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1598 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1599 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1600 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1601 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1602 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1603 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1604 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1605 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1606 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1607 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1608 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1609 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1610 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1611 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1612 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1613 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1614 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1615 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1616 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1617 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1618 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1619 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1620 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1621 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1622 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1623 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1624 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1625 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1626 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1627 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1628 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1629 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1630 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1631 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1632 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1633 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1634 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1635 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1636 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1637 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1638 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1639 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1640 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1641 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1642 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1643 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1644 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1645 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1646 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1647 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1648 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1649 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1650 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1651 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1652 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1653 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1654 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1655 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1656 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1657 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1658 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1659 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1660 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1661 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1662 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1663 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1664 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1665 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1666 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1667 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1668 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1669 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1670 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1671 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1672 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1673 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1674 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1675 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1676 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1677 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1678 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1679 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1680 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1681 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1682 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1683 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1684 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1685 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1686 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1687 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1688 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1689 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1690 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1691 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1692 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1693 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1694 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1695 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1696 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1697 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1698 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1699 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1700 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1701 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1702 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1703 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1704 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1705 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1706 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1707 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1708 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1709 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1710 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1711 = !{!1712, !2008, !3017, !317, !1724, !1821, !1928, !7, !3037, !3064, !3077, !3080, !3086, !3110, !3112, !3114, !3116, !3119, !2056, !3078, !2089, !1993, !3122, !3087, !3088, !3093, !3125, !2055, !3115, !3113, !1407, !3144, !3149, !3057, !2265, !1778, !3047, !3154, !3161, !3162, !3163, !3180, !1854, !3181, !3187}
!1712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1713, size: 64)
!1713 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !318, line: 184, baseType: !1714)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !318, line: 184, size: 128, elements: !1715)
!1715 = !{!1716}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1714, file: !318, line: 184, baseType: !1717, size: 128)
!1717 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !318, line: 182, baseType: !1718)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !318, line: 182, size: 128, elements: !1719)
!1719 = !{!1720, !1721, !1722}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1718, file: !318, line: 182, baseType: !7, size: 32)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1718, file: !318, line: 182, baseType: !7, size: 32, offset: 32)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1718, file: !318, line: 182, baseType: !1723, size: 64, offset: 64)
!1723 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1724, size: 64, elements: !1825)
!1724 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1725, line: 56, baseType: !1726)
!1725 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !318, line: 3371, size: 1792, elements: !1728)
!1728 = !{!1729, !1762, !1768, !1781, !1800, !1811, !1816, !1827, !1833, !1847, !1859, !1897, !2357, !2385, !2402, !2403, !2408, !2417, !2423, !2428, !2432, !2436, !2668, !2715, !2721, !2727, !2734, !2747, !2761, !2778, !2790, !2812, !2827, !2999}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1727, file: !318, line: 3372, baseType: !1730, size: 64)
!1730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !318, line: 360, size: 64, elements: !1731)
!1731 = !{!1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761}
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1730, file: !318, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1730, file: !318, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1730, file: !318, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1730, file: !318, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1730, file: !318, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1730, file: !318, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1730, file: !318, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1730, file: !318, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1730, file: !318, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1730, file: !318, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1730, file: !318, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1730, file: !318, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1730, file: !318, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1730, file: !318, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1730, file: !318, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1730, file: !318, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1730, file: !318, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1730, file: !318, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1730, file: !318, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1730, file: !318, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1730, file: !318, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1730, file: !318, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1730, file: !318, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1730, file: !318, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1730, file: !318, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1730, file: !318, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1730, file: !318, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1730, file: !318, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1730, file: !318, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1730, file: !318, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1727, file: !318, line: 3373, baseType: !1763, size: 192)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !318, line: 402, size: 192, elements: !1764)
!1764 = !{!1765, !1766, !1767}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1763, file: !318, line: 403, baseType: !1730, size: 64)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1763, file: !318, line: 404, baseType: !1724, size: 64, offset: 64)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1763, file: !318, line: 405, baseType: !1724, size: 64, offset: 128)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1727, file: !318, line: 3374, baseType: !1769, size: 320)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !318, line: 1384, size: 320, elements: !1770)
!1770 = !{!1771, !1772}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1769, file: !318, line: 1385, baseType: !1763, size: 192)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1769, file: !318, line: 1386, baseType: !1773, size: 128, offset: 192)
!1773 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1774, line: 58, baseType: !1775)
!1774 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1774, line: 54, size: 128, elements: !1776)
!1776 = !{!1777, !1779}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1775, file: !1774, line: 56, baseType: !1778, size: 64)
!1778 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1775, file: !1774, line: 57, baseType: !1780, size: 64, offset: 64)
!1780 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1727, file: !318, line: 3375, baseType: !1782, size: 256)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !318, line: 1397, size: 256, elements: !1783)
!1783 = !{!1784, !1785}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1782, file: !318, line: 1398, baseType: !1763, size: 192)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1782, file: !318, line: 1399, baseType: !1786, size: 64, offset: 192)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1788, line: 52, size: 256, elements: !1789)
!1788 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1789 = !{!1790, !1791, !1792, !1793, !1794, !1795, !1796}
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1787, file: !1788, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1787, file: !1788, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1787, file: !1788, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1787, file: !1788, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1787, file: !1788, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1787, file: !1788, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1787, file: !1788, line: 62, baseType: !1797, size: 192, offset: 64)
!1797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1778, size: 192, elements: !1798)
!1798 = !{!1799}
!1799 = !DISubrange(count: 3)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1727, file: !318, line: 3376, baseType: !1801, size: 256)
!1801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !318, line: 1408, size: 256, elements: !1802)
!1802 = !{!1803, !1804}
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1801, file: !318, line: 1409, baseType: !1763, size: 192)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1801, file: !318, line: 1410, baseType: !1805, size: 64, offset: 192)
!1805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1806, size: 64)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1807, line: 27, size: 192, elements: !1808)
!1807 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1808 = !{!1809, !1810}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1806, file: !1807, line: 29, baseType: !1773, size: 128)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1806, file: !1807, line: 30, baseType: !189, size: 32, offset: 128)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1727, file: !318, line: 3377, baseType: !1812, size: 256)
!1812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !318, line: 1437, size: 256, elements: !1813)
!1813 = !{!1814, !1815}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1812, file: !318, line: 1438, baseType: !1763, size: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1812, file: !318, line: 1439, baseType: !1724, size: 64, offset: 192)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1727, file: !318, line: 3378, baseType: !1817, size: 256)
!1817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !318, line: 1418, size: 256, elements: !1818)
!1818 = !{!1819, !1820, !1822}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1817, file: !318, line: 1419, baseType: !1763, size: 192)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1817, file: !318, line: 1420, baseType: !1821, size: 32, offset: 192)
!1821 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1817, file: !318, line: 1421, baseType: !1823, size: 8, offset: 224)
!1823 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1824, size: 8, elements: !1825)
!1824 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1825 = !{!1826}
!1826 = !DISubrange(count: 1)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1727, file: !318, line: 3379, baseType: !1828, size: 320)
!1828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !318, line: 1428, size: 320, elements: !1829)
!1829 = !{!1830, !1831, !1832}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1828, file: !318, line: 1429, baseType: !1763, size: 192)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1828, file: !318, line: 1430, baseType: !1724, size: 64, offset: 192)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1828, file: !318, line: 1431, baseType: !1724, size: 64, offset: 256)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1727, file: !318, line: 3380, baseType: !1834, size: 320)
!1834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !318, line: 1460, size: 320, elements: !1835)
!1835 = !{!1836, !1837}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1834, file: !318, line: 1461, baseType: !1763, size: 192)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1834, file: !318, line: 1462, baseType: !1838, size: 128, offset: 192)
!1838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1839, line: 31, size: 128, elements: !1840)
!1839 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1840 = !{!1841, !1845, !1846}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1838, file: !1839, line: 32, baseType: !1842, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1843, size: 64)
!1843 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1844)
!1844 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1838, file: !1839, line: 33, baseType: !7, size: 32, offset: 64)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1838, file: !1839, line: 34, baseType: !7, size: 32, offset: 96)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1727, file: !318, line: 3381, baseType: !1848, size: 384)
!1848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !318, line: 2507, size: 384, elements: !1849)
!1849 = !{!1850, !1851, !1856, !1857, !1858}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1848, file: !318, line: 2508, baseType: !1763, size: 192)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1848, file: !318, line: 2509, baseType: !1852, size: 32, offset: 192)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1853, line: 58, baseType: !1854)
!1853 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1854 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1855, line: 44, baseType: !7)
!1855 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1848, file: !318, line: 2510, baseType: !7, size: 32, offset: 224)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1848, file: !318, line: 2511, baseType: !1724, size: 64, offset: 256)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1848, file: !318, line: 2512, baseType: !1724, size: 64, offset: 320)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1727, file: !318, line: 3382, baseType: !1860, size: 896)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !318, line: 2652, size: 896, elements: !1861)
!1861 = !{!1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1860, file: !318, line: 2653, baseType: !1848, size: 384)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1860, file: !318, line: 2654, baseType: !1724, size: 64, offset: 384)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1860, file: !318, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1860, file: !318, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1860, file: !318, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1860, file: !318, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1860, file: !318, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1860, file: !318, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1860, file: !318, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1860, file: !318, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1860, file: !318, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1860, file: !318, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1860, file: !318, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1860, file: !318, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1860, file: !318, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1860, file: !318, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1860, file: !318, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1860, file: !318, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1860, file: !318, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1860, file: !318, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1860, file: !318, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1860, file: !318, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1860, file: !318, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1860, file: !318, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1860, file: !318, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1860, file: !318, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1860, file: !318, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1860, file: !318, line: 2703, baseType: !7, size: 32, offset: 512)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1860, file: !318, line: 2705, baseType: !1724, size: 64, offset: 576)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1860, file: !318, line: 2706, baseType: !1724, size: 64, offset: 640)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1860, file: !318, line: 2707, baseType: !1724, size: 64, offset: 704)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1860, file: !318, line: 2708, baseType: !1724, size: 64, offset: 768)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1860, file: !318, line: 2711, baseType: !1895, size: 64, offset: 832)
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1896, size: 64)
!1896 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !318, line: 2711, flags: DIFlagFwdDecl)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1727, file: !318, line: 3383, baseType: !1898, size: 960)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !318, line: 2756, size: 960, elements: !1899)
!1899 = !{!1900, !1901}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1898, file: !318, line: 2757, baseType: !1860, size: 896)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1898, file: !318, line: 2758, baseType: !1902, size: 64, offset: 896)
!1902 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1725, line: 50, baseType: !1903)
!1903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1904, size: 64)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1905, line: 240, size: 384, elements: !1906)
!1905 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1906 = !{!1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917}
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1904, file: !1905, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1904, file: !1905, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1904, file: !1905, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1904, file: !1905, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1904, file: !1905, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1904, file: !1905, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1904, file: !1905, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1904, file: !1905, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1904, file: !1905, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1904, file: !1905, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1904, file: !1905, line: 321, baseType: !1918, size: 320, offset: 64)
!1918 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1905, line: 315, size: 320, elements: !1919)
!1919 = !{!1920, !2324, !2326, !2355, !2356}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1918, file: !1905, line: 316, baseType: !1921, size: 64)
!1921 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 64, elements: !1825)
!1922 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1905, line: 183, baseType: !1923)
!1923 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1905, line: 166, size: 64, elements: !1924)
!1924 = !{!1925, !1926, !1927, !1930, !1931, !1939, !1940, !1952, !1955, !2017, !2018, !2301, !2314, !2321}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1923, file: !1905, line: 168, baseType: !1821, size: 32)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1923, file: !1905, line: 169, baseType: !7, size: 32)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1923, file: !1905, line: 170, baseType: !1928, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1929, size: 64)
!1929 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1824)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1923, file: !1905, line: 171, baseType: !1902, size: 64)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1923, file: !1905, line: 172, baseType: !1932, size: 64)
!1932 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1725, line: 53, baseType: !1933)
!1933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1934, size: 64)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1905, line: 359, size: 128, elements: !1935)
!1935 = !{!1936, !1937}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1934, file: !1905, line: 360, baseType: !1821, size: 32)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1934, file: !1905, line: 361, baseType: !1938, size: 64, offset: 64)
!1938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1902, size: 64, elements: !1825)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1923, file: !1905, line: 173, baseType: !189, size: 32)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1923, file: !1905, line: 174, baseType: !1941, size: 32)
!1941 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1905, line: 133, baseType: !1942)
!1942 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1905, line: 115, size: 32, elements: !1943)
!1943 = !{!1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1942, file: !1905, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1942, file: !1905, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1942, file: !1905, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1942, file: !1905, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1942, file: !1905, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1942, file: !1905, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1942, file: !1905, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1942, file: !1905, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1923, file: !1905, line: 175, baseType: !1953, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1954, size: 64)
!1954 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1905, line: 175, flags: DIFlagFwdDecl)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1923, file: !1905, line: 176, baseType: !1956, size: 64)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64)
!1957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1958, line: 75, size: 256, elements: !1959)
!1958 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1959 = !{!1960, !1974, !1975, !1976}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1957, file: !1958, line: 76, baseType: !1961, size: 64)
!1961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64)
!1962 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1958, line: 68, baseType: !1963)
!1963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1958, line: 63, size: 320, elements: !1964)
!1964 = !{!1965, !1967, !1968, !1969}
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1963, file: !1958, line: 64, baseType: !1966, size: 64)
!1966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1963, file: !1958, line: 65, baseType: !1966, size: 64, offset: 64)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1963, file: !1958, line: 66, baseType: !7, size: 32, offset: 128)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1963, file: !1958, line: 67, baseType: !1970, size: 128, offset: 192)
!1970 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1971, size: 128, elements: !1972)
!1971 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1958, line: 29, baseType: !1778)
!1972 = !{!1973}
!1973 = !DISubrange(count: 2)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1957, file: !1958, line: 77, baseType: !1961, size: 64, offset: 64)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1957, file: !1958, line: 78, baseType: !7, size: 32, offset: 128)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1957, file: !1958, line: 79, baseType: !1977, size: 64, offset: 192)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1958, line: 49, baseType: !1979)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1958, line: 45, size: 832, elements: !1980)
!1980 = !{!1981, !1982, !1983}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1979, file: !1958, line: 46, baseType: !1966, size: 64)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1979, file: !1958, line: 47, baseType: !1956, size: 64, offset: 64)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1979, file: !1958, line: 48, baseType: !1984, size: 704, offset: 128)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1985, line: 164, size: 704, elements: !1986)
!1985 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1986 = !{!1987, !1988, !1999, !2000, !2001, !2002, !2003, !2004, !2009, !2013, !2014, !2015, !2016}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1984, file: !1985, line: 166, baseType: !1780, size: 64)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1984, file: !1985, line: 167, baseType: !1989, size: 64, offset: 64)
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1990, size: 64)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1985, line: 157, size: 192, elements: !1991)
!1991 = !{!1992, !1994, !1995}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1990, file: !1985, line: 159, baseType: !1993, size: 64)
!1993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1824, size: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1990, file: !1985, line: 160, baseType: !1989, size: 64, offset: 64)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1990, file: !1985, line: 161, baseType: !1996, size: 32, offset: 128)
!1996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1824, size: 32, elements: !1997)
!1997 = !{!1998}
!1998 = !DISubrange(count: 4)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1984, file: !1985, line: 168, baseType: !1993, size: 64, offset: 128)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1984, file: !1985, line: 169, baseType: !1993, size: 64, offset: 192)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1984, file: !1985, line: 170, baseType: !1993, size: 64, offset: 256)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1984, file: !1985, line: 171, baseType: !1780, size: 64, offset: 320)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1984, file: !1985, line: 172, baseType: !1821, size: 32, offset: 384)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1984, file: !1985, line: 176, baseType: !2005, size: 64, offset: 448)
!2005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2006 = !DISubroutineType(types: !2007)
!2007 = !{!1989, !2008, !1780}
!2008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1984, file: !1985, line: 177, baseType: !2010, size: 64, offset: 512)
!2010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2011, size: 64)
!2011 = !DISubroutineType(types: !2012)
!2012 = !{null, !2008, !1989}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1984, file: !1985, line: 178, baseType: !2008, size: 64, offset: 576)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1984, file: !1985, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1984, file: !1985, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1984, file: !1985, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1923, file: !1905, line: 177, baseType: !1724, size: 64)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1923, file: !1905, line: 178, baseType: !2019, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2020, size: 64)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !513, line: 217, size: 832, elements: !2021)
!2021 = !{!2022, !2266, !2267, !2268, !2271, !2275, !2276, !2277, !2295, !2296, !2297, !2298, !2299, !2300}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2020, file: !513, line: 219, baseType: !2023, size: 64)
!2023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2024, size: 64)
!2024 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !513, line: 151, baseType: !2025)
!2025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !513, line: 151, size: 128, elements: !2026)
!2026 = !{!2027}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2025, file: !513, line: 151, baseType: !2028, size: 128)
!2028 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !513, line: 150, baseType: !2029)
!2029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !513, line: 150, size: 128, elements: !2030)
!2030 = !{!2031, !2032, !2033}
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2029, file: !513, line: 150, baseType: !7, size: 32)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2029, file: !513, line: 150, baseType: !7, size: 32, offset: 32)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2029, file: !513, line: 150, baseType: !2034, size: 64, offset: 64)
!2034 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2035, size: 64, elements: !1825)
!2035 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1725, line: 108, baseType: !2036)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !513, line: 122, size: 512, elements: !2038)
!2038 = !{!2039, !2040, !2041, !2258, !2259, !2260, !2261, !2262, !2263, !2264}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2037, file: !513, line: 124, baseType: !2019, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2037, file: !513, line: 125, baseType: !2019, size: 64, offset: 64)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2037, file: !513, line: 131, baseType: !2042, size: 64, offset: 128)
!2042 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !513, line: 128, size: 64, elements: !2043)
!2043 = !{!2044, !2257}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2042, file: !513, line: 129, baseType: !2045, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1725, line: 66, baseType: !2046)
!2046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2047, size: 64)
!2047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1304, line: 143, size: 192, elements: !2048)
!2048 = !{!2049, !2255, !2256}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2047, file: !1304, line: 145, baseType: !2050, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1725, line: 69, baseType: !2051)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1304, line: 136, size: 192, elements: !2053)
!2053 = !{!2054, !2253, !2254}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2052, file: !1304, line: 137, baseType: !2055, size: 64)
!2055 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1725, line: 58, baseType: !2056)
!2056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2057, size: 64)
!2057 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1304, line: 737, size: 768, elements: !2058)
!2058 = !{!2059, !2076, !2108, !2114, !2119, !2124, !2131, !2137, !2143, !2148, !2162, !2167, !2173, !2178, !2188, !2193, !2211, !2218, !2225, !2231, !2236, !2242, !2248}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2057, file: !1304, line: 738, baseType: !2060, size: 256)
!2060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1304, line: 271, size: 256, elements: !2061)
!2061 = !{!2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075}
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2060, file: !1304, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2060, file: !1304, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2060, file: !1304, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2060, file: !1304, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2060, file: !1304, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2060, file: !1304, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2060, file: !1304, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2060, file: !1304, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2060, file: !1304, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2060, file: !1304, line: 312, baseType: !7, size: 32, offset: 32)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2060, file: !1304, line: 316, baseType: !1852, size: 32, offset: 64)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2060, file: !1304, line: 319, baseType: !7, size: 32, offset: 96)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2060, file: !1304, line: 323, baseType: !2019, size: 64, offset: 128)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2060, file: !1304, line: 327, baseType: !1724, size: 64, offset: 192)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2057, file: !1304, line: 739, baseType: !2077, size: 448)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1304, line: 350, size: 448, elements: !2078)
!2078 = !{!2079, !2107}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2077, file: !1304, line: 353, baseType: !2080, size: 384)
!2080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1304, line: 333, size: 384, elements: !2081)
!2081 = !{!2082, !2083, !2090}
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2080, file: !1304, line: 336, baseType: !2060, size: 256)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2080, file: !1304, line: 343, baseType: !2084, size: 64, offset: 256)
!2084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2085, size: 64)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1414, line: 37, size: 128, elements: !2086)
!2086 = !{!2087, !2088}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2085, file: !1414, line: 39, baseType: !2084, size: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2085, file: !1414, line: 40, baseType: !2089, size: 64, offset: 64)
!2089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1724, size: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2080, file: !1304, line: 344, baseType: !2091, size: 64, offset: 320)
!2091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2092, size: 64)
!2092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1414, line: 45, size: 320, elements: !2093)
!2093 = !{!2094, !2095}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2092, file: !1414, line: 47, baseType: !2091, size: 64)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2092, file: !1414, line: 48, baseType: !2096, size: 256, offset: 64)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !318, line: 1883, size: 256, elements: !2097)
!2097 = !{!2098, !2100, !2101, !2106}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2096, file: !318, line: 1884, baseType: !2099, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2096, file: !318, line: 1885, baseType: !2099, size: 64, offset: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2096, file: !318, line: 1891, baseType: !2102, size: 64, offset: 128)
!2102 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2096, file: !318, line: 1891, size: 64, elements: !2103)
!2103 = !{!2104, !2105}
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2102, file: !318, line: 1891, baseType: !2055, size: 64)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2102, file: !318, line: 1891, baseType: !1724, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2096, file: !318, line: 1892, baseType: !2089, size: 64, offset: 192)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2077, file: !1304, line: 359, baseType: !1723, size: 64, offset: 384)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2057, file: !1304, line: 740, baseType: !2109, size: 512)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1304, line: 365, size: 512, elements: !2110)
!2110 = !{!2111, !2112, !2113}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2109, file: !1304, line: 368, baseType: !2080, size: 384)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2109, file: !1304, line: 373, baseType: !1724, size: 64, offset: 384)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2109, file: !1304, line: 374, baseType: !1724, size: 64, offset: 448)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2057, file: !1304, line: 741, baseType: !2115, size: 576)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1304, line: 380, size: 576, elements: !2116)
!2116 = !{!2117, !2118}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2115, file: !1304, line: 383, baseType: !2109, size: 512)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2115, file: !1304, line: 389, baseType: !1723, size: 64, offset: 512)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2057, file: !1304, line: 742, baseType: !2120, size: 320)
!2120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1304, line: 395, size: 320, elements: !2121)
!2121 = !{!2122, !2123}
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2120, file: !1304, line: 397, baseType: !2060, size: 256)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2120, file: !1304, line: 400, baseType: !2045, size: 64, offset: 256)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2057, file: !1304, line: 743, baseType: !2125, size: 448)
!2125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1304, line: 406, size: 448, elements: !2126)
!2126 = !{!2127, !2128, !2129, !2130}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2125, file: !1304, line: 408, baseType: !2060, size: 256)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2125, file: !1304, line: 412, baseType: !1724, size: 64, offset: 256)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2125, file: !1304, line: 420, baseType: !1724, size: 64, offset: 320)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2125, file: !1304, line: 423, baseType: !2045, size: 64, offset: 384)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2057, file: !1304, line: 744, baseType: !2132, size: 384)
!2132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1304, line: 429, size: 384, elements: !2133)
!2133 = !{!2134, !2135, !2136}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2132, file: !1304, line: 431, baseType: !2060, size: 256)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2132, file: !1304, line: 434, baseType: !1724, size: 64, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2132, file: !1304, line: 437, baseType: !2045, size: 64, offset: 320)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2057, file: !1304, line: 745, baseType: !2138, size: 384)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1304, line: 443, size: 384, elements: !2139)
!2139 = !{!2140, !2141, !2142}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2138, file: !1304, line: 445, baseType: !2060, size: 256)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2138, file: !1304, line: 449, baseType: !1724, size: 64, offset: 256)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2138, file: !1304, line: 453, baseType: !2045, size: 64, offset: 320)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2057, file: !1304, line: 746, baseType: !2144, size: 320)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1304, line: 459, size: 320, elements: !2145)
!2145 = !{!2146, !2147}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2144, file: !1304, line: 461, baseType: !2060, size: 256)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2144, file: !1304, line: 464, baseType: !1724, size: 64, offset: 256)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2057, file: !1304, line: 747, baseType: !2149, size: 768)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1304, line: 469, size: 768, elements: !2150)
!2150 = !{!2151, !2152, !2153, !2154, !2155}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2149, file: !1304, line: 471, baseType: !2060, size: 256)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2149, file: !1304, line: 474, baseType: !7, size: 32, offset: 256)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2149, file: !1304, line: 475, baseType: !7, size: 32, offset: 288)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2149, file: !1304, line: 478, baseType: !1724, size: 64, offset: 320)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2149, file: !1304, line: 481, baseType: !2156, size: 384, offset: 384)
!2156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2157, size: 384, elements: !1825)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !318, line: 1917, size: 384, elements: !2158)
!2158 = !{!2159, !2160, !2161}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2157, file: !318, line: 1920, baseType: !2096, size: 256)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2157, file: !318, line: 1921, baseType: !1724, size: 64, offset: 256)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2157, file: !318, line: 1922, baseType: !1852, size: 32, offset: 320)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2057, file: !1304, line: 748, baseType: !2163, size: 320)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1304, line: 487, size: 320, elements: !2164)
!2164 = !{!2165, !2166}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2163, file: !1304, line: 490, baseType: !2060, size: 256)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2163, file: !1304, line: 494, baseType: !1821, size: 32, offset: 256)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2057, file: !1304, line: 749, baseType: !2168, size: 384)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1304, line: 500, size: 384, elements: !2169)
!2169 = !{!2170, !2171, !2172}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2168, file: !1304, line: 502, baseType: !2060, size: 256)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2168, file: !1304, line: 506, baseType: !2045, size: 64, offset: 256)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2168, file: !1304, line: 510, baseType: !2045, size: 64, offset: 320)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2057, file: !1304, line: 750, baseType: !2174, size: 320)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1304, line: 529, size: 320, elements: !2175)
!2175 = !{!2176, !2177}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2174, file: !1304, line: 531, baseType: !2060, size: 256)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2174, file: !1304, line: 540, baseType: !2045, size: 64, offset: 256)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2057, file: !1304, line: 751, baseType: !2179, size: 704)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1304, line: 546, size: 704, elements: !2180)
!2180 = !{!2181, !2182, !2183, !2184, !2185, !2186, !2187}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2179, file: !1304, line: 549, baseType: !2109, size: 512)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2179, file: !1304, line: 553, baseType: !1928, size: 64, offset: 512)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2179, file: !1304, line: 557, baseType: !1844, size: 8, offset: 576)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2179, file: !1304, line: 558, baseType: !1844, size: 8, offset: 584)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2179, file: !1304, line: 559, baseType: !1844, size: 8, offset: 592)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2179, file: !1304, line: 560, baseType: !1844, size: 8, offset: 600)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2179, file: !1304, line: 566, baseType: !1723, size: 64, offset: 640)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2057, file: !1304, line: 752, baseType: !2189, size: 384)
!2189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1304, line: 571, size: 384, elements: !2190)
!2190 = !{!2191, !2192}
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2189, file: !1304, line: 573, baseType: !2120, size: 320)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2189, file: !1304, line: 577, baseType: !1724, size: 64, offset: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2057, file: !1304, line: 753, baseType: !2194, size: 576)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1304, line: 600, size: 576, elements: !2195)
!2195 = !{!2196, !2197, !2198, !2201, !2210}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2194, file: !1304, line: 602, baseType: !2120, size: 320)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2194, file: !1304, line: 605, baseType: !1724, size: 64, offset: 320)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2194, file: !1304, line: 609, baseType: !2199, size: 64, offset: 384)
!2199 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2200, line: 46, baseType: !1778)
!2200 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2194, file: !1304, line: 612, baseType: !2202, size: 64, offset: 448)
!2202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2203, size: 64)
!2203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1304, line: 581, size: 320, elements: !2204)
!2204 = !{!2205, !2206, !2207, !2208, !2209}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2203, file: !1304, line: 583, baseType: !317, size: 32)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2203, file: !1304, line: 586, baseType: !1724, size: 64, offset: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2203, file: !1304, line: 589, baseType: !1724, size: 64, offset: 128)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2203, file: !1304, line: 592, baseType: !1724, size: 64, offset: 192)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2203, file: !1304, line: 595, baseType: !1724, size: 64, offset: 256)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2194, file: !1304, line: 616, baseType: !2045, size: 64, offset: 512)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2057, file: !1304, line: 754, baseType: !2212, size: 512)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1304, line: 622, size: 512, elements: !2213)
!2213 = !{!2214, !2215, !2216, !2217}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2212, file: !1304, line: 624, baseType: !2120, size: 320)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2212, file: !1304, line: 628, baseType: !1724, size: 64, offset: 320)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2212, file: !1304, line: 632, baseType: !1724, size: 64, offset: 384)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2212, file: !1304, line: 636, baseType: !1724, size: 64, offset: 448)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2057, file: !1304, line: 755, baseType: !2219, size: 704)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1304, line: 642, size: 704, elements: !2220)
!2220 = !{!2221, !2222, !2223, !2224}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2219, file: !1304, line: 644, baseType: !2212, size: 512)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2219, file: !1304, line: 648, baseType: !1724, size: 64, offset: 512)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2219, file: !1304, line: 652, baseType: !1724, size: 64, offset: 576)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2219, file: !1304, line: 653, baseType: !1724, size: 64, offset: 640)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2057, file: !1304, line: 756, baseType: !2226, size: 448)
!2226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1304, line: 663, size: 448, elements: !2227)
!2227 = !{!2228, !2229, !2230}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2226, file: !1304, line: 665, baseType: !2120, size: 320)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2226, file: !1304, line: 668, baseType: !1724, size: 64, offset: 320)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2226, file: !1304, line: 673, baseType: !1724, size: 64, offset: 384)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2057, file: !1304, line: 757, baseType: !2232, size: 384)
!2232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1304, line: 694, size: 384, elements: !2233)
!2233 = !{!2234, !2235}
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2232, file: !1304, line: 696, baseType: !2120, size: 320)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2232, file: !1304, line: 699, baseType: !1724, size: 64, offset: 320)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2057, file: !1304, line: 758, baseType: !2237, size: 384)
!2237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1304, line: 681, size: 384, elements: !2238)
!2238 = !{!2239, !2240, !2241}
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2237, file: !1304, line: 683, baseType: !2060, size: 256)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2237, file: !1304, line: 686, baseType: !1724, size: 64, offset: 256)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2237, file: !1304, line: 689, baseType: !1724, size: 64, offset: 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2057, file: !1304, line: 759, baseType: !2243, size: 384)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1304, line: 707, size: 384, elements: !2244)
!2244 = !{!2245, !2246, !2247}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2243, file: !1304, line: 709, baseType: !2060, size: 256)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2243, file: !1304, line: 712, baseType: !1724, size: 64, offset: 256)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2243, file: !1304, line: 712, baseType: !1724, size: 64, offset: 320)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2057, file: !1304, line: 760, baseType: !2249, size: 320)
!2249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1304, line: 718, size: 320, elements: !2250)
!2250 = !{!2251, !2252}
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2249, file: !1304, line: 720, baseType: !2060, size: 256)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2249, file: !1304, line: 723, baseType: !1724, size: 64, offset: 256)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2052, file: !1304, line: 138, baseType: !2051, size: 64, offset: 64)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2052, file: !1304, line: 139, baseType: !2051, size: 64, offset: 128)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2047, file: !1304, line: 146, baseType: !2050, size: 64, offset: 64)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2047, file: !1304, line: 152, baseType: !2045, size: 64, offset: 128)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2042, file: !513, line: 130, baseType: !1902, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2037, file: !513, line: 134, baseType: !2008, size: 64, offset: 192)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2037, file: !513, line: 137, baseType: !1724, size: 64, offset: 256)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2037, file: !513, line: 138, baseType: !1852, size: 32, offset: 320)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2037, file: !513, line: 142, baseType: !7, size: 32, offset: 352)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2037, file: !513, line: 144, baseType: !1821, size: 32, offset: 384)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2037, file: !513, line: 145, baseType: !1821, size: 32, offset: 416)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2037, file: !513, line: 146, baseType: !2265, size: 64, offset: 448)
!2265 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !513, line: 119, baseType: !1780)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2020, file: !513, line: 220, baseType: !2023, size: 64, offset: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2020, file: !513, line: 223, baseType: !2008, size: 64, offset: 128)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2020, file: !513, line: 226, baseType: !2269, size: 64, offset: 192)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !513, line: 185, flags: DIFlagFwdDecl)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2020, file: !513, line: 229, baseType: !2272, size: 128, offset: 256)
!2272 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2273, size: 128, elements: !1972)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!2274 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !513, line: 229, flags: DIFlagFwdDecl)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2020, file: !513, line: 232, baseType: !2019, size: 64, offset: 384)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2020, file: !513, line: 233, baseType: !2019, size: 64, offset: 448)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2020, file: !513, line: 238, baseType: !2278, size: 64, offset: 512)
!2278 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !513, line: 235, size: 64, elements: !2279)
!2279 = !{!2280, !2286}
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2278, file: !513, line: 236, baseType: !2281, size: 64)
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !513, line: 273, size: 128, elements: !2283)
!2283 = !{!2284, !2285}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2282, file: !513, line: 275, baseType: !2045, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2282, file: !513, line: 278, baseType: !2045, size: 64, offset: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2278, file: !513, line: 237, baseType: !2287, size: 64)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !513, line: 259, size: 320, elements: !2289)
!2289 = !{!2290, !2291, !2292, !2293, !2294}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2288, file: !513, line: 261, baseType: !1902, size: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2288, file: !513, line: 262, baseType: !1902, size: 64, offset: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2288, file: !513, line: 266, baseType: !1902, size: 64, offset: 128)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2288, file: !513, line: 267, baseType: !1902, size: 64, offset: 192)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2288, file: !513, line: 270, baseType: !1821, size: 32, offset: 256)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2020, file: !513, line: 241, baseType: !2265, size: 64, offset: 576)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2020, file: !513, line: 244, baseType: !1821, size: 32, offset: 640)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2020, file: !513, line: 247, baseType: !1821, size: 32, offset: 672)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2020, file: !513, line: 250, baseType: !1821, size: 32, offset: 704)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2020, file: !513, line: 253, baseType: !1821, size: 32, offset: 736)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2020, file: !513, line: 256, baseType: !1821, size: 32, offset: 768)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1923, file: !1905, line: 179, baseType: !2302, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2303, size: 64)
!2303 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1905, line: 150, baseType: !2304)
!2304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1905, line: 142, size: 320, elements: !2305)
!2305 = !{!2306, !2307, !2308, !2309, !2312, !2313}
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2304, file: !1905, line: 144, baseType: !1724, size: 64)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2304, file: !1905, line: 145, baseType: !1902, size: 64, offset: 64)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2304, file: !1905, line: 146, baseType: !1902, size: 64, offset: 128)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2304, file: !1905, line: 147, baseType: !2310, size: 32, offset: 192)
!2310 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2311, line: 31, baseType: !1821)
!2311 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2304, file: !1905, line: 148, baseType: !7, size: 32, offset: 224)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2304, file: !1905, line: 149, baseType: !1844, size: 8, offset: 256)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1923, file: !1905, line: 180, baseType: !2315, size: 64)
!2315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!2316 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1905, line: 162, baseType: !2317)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1905, line: 159, size: 128, elements: !2318)
!2318 = !{!2319, !2320}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2317, file: !1905, line: 160, baseType: !1724, size: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2317, file: !1905, line: 161, baseType: !1780, size: 64, offset: 64)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1923, file: !1905, line: 181, baseType: !2322, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2323, size: 64)
!2323 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1905, line: 181, flags: DIFlagFwdDecl)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1918, file: !1905, line: 317, baseType: !2325, size: 64)
!2325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1780, size: 64, elements: !1825)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1918, file: !1905, line: 318, baseType: !2327, size: 320)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1905, line: 188, size: 320, elements: !2328)
!2328 = !{!2329, !2331, !2354}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2327, file: !1905, line: 190, baseType: !2330, size: 192)
!2330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1922, size: 192, elements: !1798)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2327, file: !1905, line: 193, baseType: !2332, size: 64, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64)
!2333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1905, line: 206, size: 320, elements: !2334)
!2334 = !{!2335, !2339, !2340, !2341, !2353}
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2333, file: !1905, line: 208, baseType: !2336, size: 64)
!2336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2337, size: 64)
!2337 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1725, line: 62, baseType: !2338)
!2338 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1725, line: 61, flags: DIFlagFwdDecl)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2333, file: !1905, line: 211, baseType: !7, size: 32, offset: 64)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2333, file: !1905, line: 214, baseType: !1780, size: 64, offset: 128)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2333, file: !1905, line: 224, baseType: !2342, size: 64, offset: 192)
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2343, size: 64)
!2343 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1905, line: 202, baseType: !2344)
!2344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1905, line: 202, size: 128, elements: !2345)
!2345 = !{!2346}
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2344, file: !1905, line: 202, baseType: !2347, size: 128)
!2347 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1905, line: 200, baseType: !2348)
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1905, line: 200, size: 128, elements: !2349)
!2349 = !{!2350, !2351, !2352}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2348, file: !1905, line: 200, baseType: !7, size: 32)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2348, file: !1905, line: 200, baseType: !7, size: 32, offset: 32)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2348, file: !1905, line: 200, baseType: !1938, size: 64, offset: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2333, file: !1905, line: 234, baseType: !2342, size: 64, offset: 256)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2327, file: !1905, line: 197, baseType: !1780, size: 64, offset: 256)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1918, file: !1905, line: 319, baseType: !1787, size: 256)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1918, file: !1905, line: 320, baseType: !1806, size: 192)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1727, file: !318, line: 3384, baseType: !2358, size: 1472)
!2358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !318, line: 3114, size: 1472, elements: !2359)
!2359 = !{!2360, !2381, !2382, !2383, !2384}
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2358, file: !318, line: 3115, baseType: !2361, size: 1216)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !318, line: 2984, size: 1216, elements: !2362)
!2362 = !{!2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2361, file: !318, line: 2985, baseType: !1898, size: 960)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2361, file: !318, line: 2986, baseType: !1724, size: 64, offset: 960)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2361, file: !318, line: 2987, baseType: !1724, size: 64, offset: 1024)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2361, file: !318, line: 2988, baseType: !1724, size: 64, offset: 1088)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2361, file: !318, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2361, file: !318, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2361, file: !318, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2361, file: !318, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2361, file: !318, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2361, file: !318, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2361, file: !318, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2361, file: !318, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2361, file: !318, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2361, file: !318, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2361, file: !318, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2361, file: !318, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2361, file: !318, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2361, file: !318, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2358, file: !318, line: 3117, baseType: !1724, size: 64, offset: 1216)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2358, file: !318, line: 3119, baseType: !1724, size: 64, offset: 1280)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2358, file: !318, line: 3121, baseType: !1724, size: 64, offset: 1344)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2358, file: !318, line: 3123, baseType: !1724, size: 64, offset: 1408)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1727, file: !318, line: 3385, baseType: !2386, size: 1088)
!2386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !318, line: 2874, size: 1088, elements: !2387)
!2387 = !{!2388, !2389, !2390}
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2386, file: !318, line: 2875, baseType: !1898, size: 960)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2386, file: !318, line: 2876, baseType: !1902, size: 64, offset: 960)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2386, file: !318, line: 2877, baseType: !2391, size: 64, offset: 1024)
!2391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2392, size: 64)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2393, line: 172, size: 128, elements: !2394)
!2393 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2394 = !{!2395, !2396, !2397, !2398, !2399, !2400, !2401}
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2392, file: !2393, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2392, file: !2393, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2392, file: !2393, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2392, file: !2393, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2392, file: !2393, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2392, file: !2393, line: 195, baseType: !7, size: 32, offset: 32)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2392, file: !2393, line: 199, baseType: !1724, size: 64, offset: 64)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1727, file: !318, line: 3386, baseType: !2361, size: 1216)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1727, file: !318, line: 3387, baseType: !2404, size: 1280)
!2404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !318, line: 3093, size: 1280, elements: !2405)
!2405 = !{!2406, !2407}
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2404, file: !318, line: 3094, baseType: !2361, size: 1216)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2404, file: !318, line: 3095, baseType: !2391, size: 64, offset: 1216)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1727, file: !318, line: 3388, baseType: !2409, size: 1216)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !318, line: 2824, size: 1216, elements: !2410)
!2410 = !{!2411, !2412, !2413, !2414, !2415, !2416}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2409, file: !318, line: 2825, baseType: !1860, size: 896)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2409, file: !318, line: 2827, baseType: !1724, size: 64, offset: 896)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2409, file: !318, line: 2828, baseType: !1724, size: 64, offset: 960)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2409, file: !318, line: 2829, baseType: !1724, size: 64, offset: 1024)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2409, file: !318, line: 2830, baseType: !1724, size: 64, offset: 1088)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2409, file: !318, line: 2831, baseType: !1724, size: 64, offset: 1152)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1727, file: !318, line: 3389, baseType: !2418, size: 1024)
!2418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !318, line: 2850, size: 1024, elements: !2419)
!2419 = !{!2420, !2421, !2422}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2418, file: !318, line: 2851, baseType: !1898, size: 960)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2418, file: !318, line: 2852, baseType: !1821, size: 32, offset: 960)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2418, file: !318, line: 2853, baseType: !1821, size: 32, offset: 992)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1727, file: !318, line: 3390, baseType: !2424, size: 1024)
!2424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !318, line: 2857, size: 1024, elements: !2425)
!2425 = !{!2426, !2427}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2424, file: !318, line: 2858, baseType: !1898, size: 960)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2424, file: !318, line: 2859, baseType: !2391, size: 64, offset: 960)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1727, file: !318, line: 3391, baseType: !2429, size: 960)
!2429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !318, line: 2862, size: 960, elements: !2430)
!2430 = !{!2431}
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2429, file: !318, line: 2863, baseType: !1898, size: 960)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1727, file: !318, line: 3392, baseType: !2433, size: 1472)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !318, line: 3304, size: 1472, elements: !2434)
!2434 = !{!2435}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2433, file: !318, line: 3305, baseType: !2358, size: 1472)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1727, file: !318, line: 3393, baseType: !2437, size: 1792)
!2437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !318, line: 3248, size: 1792, elements: !2438)
!2438 = !{!2439, !2440, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2437, file: !318, line: 3249, baseType: !2358, size: 1472)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2437, file: !318, line: 3251, baseType: !2441, size: 64, offset: 1472)
!2441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2442, size: 64)
!2442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2443, line: 463, size: 1152, elements: !2444)
!2443 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2444 = !{!2445, !2448, !2479, !2480, !2588, !2591, !2592, !2593, !2594, !2595, !2596, !2620, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2442, file: !2443, line: 464, baseType: !2446, size: 64)
!2446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!2447 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2443, line: 464, flags: DIFlagFwdDecl)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2442, file: !2443, line: 467, baseType: !2449, size: 64, offset: 64)
!2449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2450, size: 64)
!2450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !513, line: 374, size: 640, elements: !2451)
!2451 = !{!2452, !2454, !2455, !2468, !2469, !2470, !2471, !2472, !2473, !2475, !2477, !2478}
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2450, file: !513, line: 377, baseType: !2453, size: 64)
!2453 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1725, line: 111, baseType: !2019)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2450, file: !513, line: 378, baseType: !2453, size: 64, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2450, file: !513, line: 381, baseType: !2456, size: 64, offset: 128)
!2456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2457, size: 64)
!2457 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !513, line: 282, baseType: !2458)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !513, line: 282, size: 128, elements: !2459)
!2459 = !{!2460}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2458, file: !513, line: 282, baseType: !2461, size: 128)
!2461 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !513, line: 281, baseType: !2462)
!2462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !513, line: 281, size: 128, elements: !2463)
!2463 = !{!2464, !2465, !2466}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2462, file: !513, line: 281, baseType: !7, size: 32)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2462, file: !513, line: 281, baseType: !7, size: 32, offset: 32)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2462, file: !513, line: 281, baseType: !2467, size: 64, offset: 64)
!2467 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2453, size: 64, elements: !1825)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2450, file: !513, line: 384, baseType: !1821, size: 32, offset: 192)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2450, file: !513, line: 387, baseType: !1821, size: 32, offset: 224)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2450, file: !513, line: 390, baseType: !1821, size: 32, offset: 256)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2450, file: !513, line: 394, baseType: !2456, size: 64, offset: 320)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2450, file: !513, line: 396, baseType: !512, size: 32, offset: 384)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2450, file: !513, line: 399, baseType: !2474, size: 64, offset: 416)
!2474 = !DICompositeType(tag: DW_TAG_array_type, baseType: !518, size: 64, elements: !1972)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2450, file: !513, line: 402, baseType: !2476, size: 64, offset: 480)
!2476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1972)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2450, file: !513, line: 406, baseType: !1821, size: 32, offset: 544)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2450, file: !513, line: 409, baseType: !1821, size: 32, offset: 576)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2442, file: !2443, line: 470, baseType: !2046, size: 64, offset: 128)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2442, file: !2443, line: 473, baseType: !2481, size: 64, offset: 192)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2393, line: 39, size: 1152, elements: !2483)
!2483 = !{!2484, !2533, !2546, !2552, !2553, !2565, !2566, !2570, !2571, !2572, !2573, !2574}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2482, file: !2393, line: 41, baseType: !2485, size: 64)
!2485 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1389, line: 144, baseType: !2486)
!2486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2487, size: 64)
!2487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1389, line: 100, size: 896, elements: !2488)
!2488 = !{!2489, !2497, !2502, !2507, !2509, !2510, !2511, !2512, !2513, !2514, !2519, !2521, !2522, !2527, !2532}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2487, file: !1389, line: 102, baseType: !2490, size: 64)
!2490 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1389, line: 52, baseType: !2491)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DISubroutineType(types: !2493)
!2493 = !{!2494, !2495}
!2494 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1389, line: 47, baseType: !7)
!2495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!2496 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2487, file: !1389, line: 105, baseType: !2498, size: 64, offset: 64)
!2498 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1389, line: 59, baseType: !2499)
!2499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2500, size: 64)
!2500 = !DISubroutineType(types: !2501)
!2501 = !{!1821, !2495, !2495}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2487, file: !1389, line: 108, baseType: !2503, size: 64, offset: 128)
!2503 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1389, line: 63, baseType: !2504)
!2504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2505, size: 64)
!2505 = !DISubroutineType(types: !2506)
!2506 = !{null, !2008}
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2487, file: !1389, line: 111, baseType: !2508, size: 64, offset: 192)
!2508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2008, size: 64)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2487, file: !1389, line: 114, baseType: !2199, size: 64, offset: 256)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2487, file: !1389, line: 117, baseType: !2199, size: 64, offset: 320)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2487, file: !1389, line: 120, baseType: !2199, size: 64, offset: 384)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2487, file: !1389, line: 124, baseType: !7, size: 32, offset: 448)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2487, file: !1389, line: 128, baseType: !7, size: 32, offset: 480)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2487, file: !1389, line: 131, baseType: !2515, size: 64, offset: 512)
!2515 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1389, line: 75, baseType: !2516)
!2516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2517, size: 64)
!2517 = !DISubroutineType(types: !2518)
!2518 = !{!2008, !2199, !2199}
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2487, file: !1389, line: 132, baseType: !2520, size: 64, offset: 576)
!2520 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1389, line: 78, baseType: !2504)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2487, file: !1389, line: 135, baseType: !2008, size: 64, offset: 640)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2487, file: !1389, line: 136, baseType: !2523, size: 64, offset: 704)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1389, line: 82, baseType: !2524)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DISubroutineType(types: !2526)
!2526 = !{!2008, !2008, !2199, !2199}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2487, file: !1389, line: 137, baseType: !2528, size: 64, offset: 768)
!2528 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1389, line: 83, baseType: !2529)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = !DISubroutineType(types: !2531)
!2531 = !{null, !2008, !2008}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2487, file: !1389, line: 141, baseType: !7, size: 32, offset: 832)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2482, file: !2393, line: 48, baseType: !2534, size: 64, offset: 64)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64)
!2535 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1304, line: 35, baseType: !2536)
!2536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1304, line: 35, size: 128, elements: !2537)
!2537 = !{!2538}
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2536, file: !1304, line: 35, baseType: !2539, size: 128)
!2539 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1304, line: 33, baseType: !2540)
!2540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1304, line: 33, size: 128, elements: !2541)
!2541 = !{!2542, !2543, !2544}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2540, file: !1304, line: 33, baseType: !7, size: 32)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2540, file: !1304, line: 33, baseType: !7, size: 32, offset: 32)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2540, file: !1304, line: 33, baseType: !2545, size: 64, offset: 64)
!2545 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2055, size: 64, elements: !1825)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2482, file: !2393, line: 51, baseType: !2547, size: 64, offset: 128)
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2548, size: 64)
!2548 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !318, line: 183, baseType: !2549)
!2549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !318, line: 183, size: 128, elements: !2550)
!2550 = !{!2551}
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2549, file: !318, line: 183, baseType: !1717, size: 128)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2482, file: !2393, line: 54, baseType: !1724, size: 64, offset: 192)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2482, file: !2393, line: 57, baseType: !2554, size: 128, offset: 256)
!2554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2555, line: 31, size: 128, elements: !2556)
!2555 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2556 = !{!2557, !2558, !2559, !2560, !2561, !2562, !2563}
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2554, file: !2555, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2554, file: !2555, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2554, file: !2555, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2554, file: !2555, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2554, file: !2555, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2554, file: !2555, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2554, file: !2555, line: 56, baseType: !2564, size: 64, offset: 64)
!2564 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1725, line: 47, baseType: !1956)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2482, file: !2393, line: 60, baseType: !2554, size: 128, offset: 384)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2482, file: !2393, line: 64, baseType: !2567, size: 64, offset: 512)
!2567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!2568 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2569, line: 33, flags: DIFlagFwdDecl)
!2569 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2482, file: !2393, line: 67, baseType: !1724, size: 64, offset: 576)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2482, file: !2393, line: 73, baseType: !2485, size: 64, offset: 640)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2482, file: !2393, line: 77, baseType: !2564, size: 64, offset: 704)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2482, file: !2393, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2482, file: !2393, line: 82, baseType: !2575, size: 320, offset: 832)
!2575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1414, line: 62, size: 320, elements: !2576)
!2576 = !{!2577, !2583, !2584, !2585, !2586, !2587}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2575, file: !1414, line: 63, baseType: !2578, size: 64)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1414, line: 56, size: 128, elements: !2580)
!2580 = !{!2581, !2582}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2579, file: !1414, line: 57, baseType: !2578, size: 64)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2579, file: !1414, line: 58, baseType: !1823, size: 8, offset: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2575, file: !1414, line: 64, baseType: !7, size: 32, offset: 64)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2575, file: !1414, line: 66, baseType: !7, size: 32, offset: 96)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2575, file: !1414, line: 68, baseType: !1844, size: 8, offset: 128)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2575, file: !1414, line: 70, baseType: !2084, size: 64, offset: 192)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2575, file: !1414, line: 71, baseType: !2091, size: 64, offset: 256)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2442, file: !2443, line: 476, baseType: !2589, size: 64, offset: 256)
!2589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2590, size: 64)
!2590 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2443, line: 476, flags: DIFlagFwdDecl)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2442, file: !2443, line: 479, baseType: !2485, size: 64, offset: 320)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2442, file: !2443, line: 484, baseType: !1724, size: 64, offset: 384)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2442, file: !2443, line: 488, baseType: !1724, size: 64, offset: 448)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2442, file: !2443, line: 493, baseType: !1724, size: 64, offset: 512)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2442, file: !2443, line: 496, baseType: !1724, size: 64, offset: 576)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2442, file: !2443, line: 501, baseType: !2597, size: 64, offset: 640)
!2597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2598, size: 64)
!2598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !524, line: 2355, size: 576, elements: !2599)
!2599 = !{!2600, !2603, !2604, !2605, !2606, !2608, !2609, !2614, !2615, !2616, !2617, !2618, !2619}
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2598, file: !524, line: 2356, baseType: !2601, size: 64)
!2601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2602, size: 64)
!2602 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !524, line: 2356, flags: DIFlagFwdDecl)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2598, file: !524, line: 2357, baseType: !1928, size: 64, offset: 64)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2598, file: !524, line: 2358, baseType: !1821, size: 32, offset: 128)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2598, file: !524, line: 2359, baseType: !1821, size: 32, offset: 160)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2598, file: !524, line: 2360, baseType: !2607, size: 128, offset: 192)
!2607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1821, size: 128, elements: !1997)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2598, file: !524, line: 2364, baseType: !1821, size: 32, offset: 320)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2598, file: !524, line: 2367, baseType: !2610, size: 128, offset: 384)
!2610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !524, line: 2349, size: 128, elements: !2611)
!2611 = !{!2612, !2613}
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2610, file: !524, line: 2351, baseType: !1902, size: 64)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2610, file: !524, line: 2352, baseType: !1780, size: 64, offset: 64)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2598, file: !524, line: 2371, baseType: !523, size: 32, offset: 512)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2598, file: !524, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2598, file: !524, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2598, file: !524, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2598, file: !524, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2598, file: !524, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2442, file: !2443, line: 504, baseType: !2621, size: 64, offset: 704)
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2622 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2443, line: 504, flags: DIFlagFwdDecl)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2442, file: !2443, line: 507, baseType: !2485, size: 64, offset: 768)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2442, file: !2443, line: 510, baseType: !1821, size: 32, offset: 832)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2442, file: !2443, line: 513, baseType: !1821, size: 32, offset: 864)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2442, file: !2443, line: 516, baseType: !1852, size: 32, offset: 896)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2442, file: !2443, line: 519, baseType: !1852, size: 32, offset: 928)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2442, file: !2443, line: 522, baseType: !7, size: 32, offset: 960)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2442, file: !2443, line: 523, baseType: !7, size: 32, offset: 992)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2442, file: !2443, line: 528, baseType: !1928, size: 64, offset: 1024)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2442, file: !2443, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2442, file: !2443, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2442, file: !2443, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2442, file: !2443, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2442, file: !2443, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2442, file: !2443, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2442, file: !2443, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2442, file: !2443, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2442, file: !2443, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2442, file: !2443, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2442, file: !2443, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2442, file: !2443, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2442, file: !2443, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2442, file: !2443, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2442, file: !2443, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2442, file: !2443, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2437, file: !318, line: 3254, baseType: !1724, size: 64, offset: 1536)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2437, file: !318, line: 3257, baseType: !1724, size: 64, offset: 1600)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2437, file: !318, line: 3258, baseType: !1724, size: 64, offset: 1664)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2437, file: !318, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2437, file: !318, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2437, file: !318, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2437, file: !318, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2437, file: !318, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2437, file: !318, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2437, file: !318, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2437, file: !318, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2437, file: !318, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2437, file: !318, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2437, file: !318, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2437, file: !318, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2437, file: !318, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2437, file: !318, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2437, file: !318, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2437, file: !318, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2437, file: !318, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2437, file: !318, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1727, file: !318, line: 3394, baseType: !2669, size: 1344)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !318, line: 2279, size: 1344, elements: !2670)
!2670 = !{!2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2669, file: !318, line: 2280, baseType: !1763, size: 192)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2669, file: !318, line: 2281, baseType: !1724, size: 64, offset: 192)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2669, file: !318, line: 2282, baseType: !1724, size: 64, offset: 256)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2669, file: !318, line: 2283, baseType: !1724, size: 64, offset: 320)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2669, file: !318, line: 2284, baseType: !1724, size: 64, offset: 384)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2669, file: !318, line: 2285, baseType: !7, size: 32, offset: 448)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2669, file: !318, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2669, file: !318, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2669, file: !318, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2669, file: !318, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2669, file: !318, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2669, file: !318, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2669, file: !318, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2669, file: !318, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2669, file: !318, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2669, file: !318, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2669, file: !318, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2669, file: !318, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2669, file: !318, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2669, file: !318, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2669, file: !318, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2669, file: !318, line: 2305, baseType: !7, size: 32, offset: 512)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2669, file: !318, line: 2306, baseType: !2310, size: 32, offset: 544)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2669, file: !318, line: 2307, baseType: !1724, size: 64, offset: 576)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2669, file: !318, line: 2308, baseType: !1724, size: 64, offset: 640)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2669, file: !318, line: 2314, baseType: !2697, size: 64, offset: 704)
!2697 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !318, line: 2309, size: 64, elements: !2698)
!2698 = !{!2699, !2700, !2701}
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2697, file: !318, line: 2310, baseType: !1821, size: 32)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2697, file: !318, line: 2311, baseType: !1928, size: 64)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2697, file: !318, line: 2312, baseType: !2702, size: 64)
!2702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2703, size: 64)
!2703 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !318, line: 2277, flags: DIFlagFwdDecl)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2669, file: !318, line: 2315, baseType: !1724, size: 64, offset: 768)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2669, file: !318, line: 2316, baseType: !1724, size: 64, offset: 832)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2669, file: !318, line: 2317, baseType: !1724, size: 64, offset: 896)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2669, file: !318, line: 2318, baseType: !1724, size: 64, offset: 960)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2669, file: !318, line: 2319, baseType: !1724, size: 64, offset: 1024)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2669, file: !318, line: 2320, baseType: !1724, size: 64, offset: 1088)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2669, file: !318, line: 2321, baseType: !1724, size: 64, offset: 1152)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2669, file: !318, line: 2322, baseType: !1724, size: 64, offset: 1216)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2669, file: !318, line: 2324, baseType: !2713, size: 64, offset: 1280)
!2713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2714, size: 64)
!2714 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !318, line: 2324, flags: DIFlagFwdDecl)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1727, file: !318, line: 3395, baseType: !2716, size: 320)
!2716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !318, line: 1469, size: 320, elements: !2717)
!2717 = !{!2718, !2719, !2720}
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2716, file: !318, line: 1470, baseType: !1763, size: 192)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2716, file: !318, line: 1471, baseType: !1724, size: 64, offset: 192)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2716, file: !318, line: 1472, baseType: !1724, size: 64, offset: 256)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1727, file: !318, line: 3396, baseType: !2722, size: 320)
!2722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !318, line: 1482, size: 320, elements: !2723)
!2723 = !{!2724, !2725, !2726}
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2722, file: !318, line: 1483, baseType: !1763, size: 192)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2722, file: !318, line: 1484, baseType: !1821, size: 32, offset: 192)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2722, file: !318, line: 1485, baseType: !1723, size: 64, offset: 256)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1727, file: !318, line: 3397, baseType: !2728, size: 384)
!2728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !318, line: 1829, size: 384, elements: !2729)
!2729 = !{!2730, !2731, !2732, !2733}
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2728, file: !318, line: 1830, baseType: !1763, size: 192)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2728, file: !318, line: 1831, baseType: !1852, size: 32, offset: 192)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2728, file: !318, line: 1832, baseType: !1724, size: 64, offset: 256)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2728, file: !318, line: 1835, baseType: !1723, size: 64, offset: 320)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1727, file: !318, line: 3398, baseType: !2735, size: 704)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !318, line: 1898, size: 704, elements: !2736)
!2736 = !{!2737, !2738, !2739, !2740, !2741, !2746}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2735, file: !318, line: 1899, baseType: !1763, size: 192)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2735, file: !318, line: 1902, baseType: !1724, size: 64, offset: 192)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2735, file: !318, line: 1905, baseType: !2055, size: 64, offset: 256)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2735, file: !318, line: 1908, baseType: !7, size: 32, offset: 320)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2735, file: !318, line: 1911, baseType: !2742, size: 64, offset: 384)
!2742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2743, size: 64)
!2743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2393, line: 117, size: 128, elements: !2744)
!2744 = !{!2745}
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2743, file: !2393, line: 120, baseType: !2554, size: 128)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2735, file: !318, line: 1914, baseType: !2096, size: 256, offset: 448)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1727, file: !318, line: 3399, baseType: !2748, size: 704)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !318, line: 2008, size: 704, elements: !2749)
!2749 = !{!2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2748, file: !318, line: 2009, baseType: !1763, size: 192)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2748, file: !318, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2748, file: !318, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2748, file: !318, line: 2014, baseType: !1852, size: 32, offset: 224)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2748, file: !318, line: 2016, baseType: !1724, size: 64, offset: 256)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2748, file: !318, line: 2017, baseType: !2547, size: 64, offset: 320)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2748, file: !318, line: 2019, baseType: !1724, size: 64, offset: 384)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2748, file: !318, line: 2020, baseType: !1724, size: 64, offset: 448)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2748, file: !318, line: 2021, baseType: !1724, size: 64, offset: 512)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2748, file: !318, line: 2022, baseType: !1724, size: 64, offset: 576)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2748, file: !318, line: 2023, baseType: !1724, size: 64, offset: 640)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1727, file: !318, line: 3400, baseType: !2762, size: 832)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !318, line: 2430, size: 832, elements: !2763)
!2763 = !{!2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2762, file: !318, line: 2431, baseType: !1763, size: 192)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2762, file: !318, line: 2433, baseType: !1724, size: 64, offset: 192)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2762, file: !318, line: 2434, baseType: !1724, size: 64, offset: 256)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2762, file: !318, line: 2435, baseType: !1724, size: 64, offset: 320)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2762, file: !318, line: 2436, baseType: !1724, size: 64, offset: 384)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2762, file: !318, line: 2437, baseType: !2547, size: 64, offset: 448)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2762, file: !318, line: 2438, baseType: !1724, size: 64, offset: 512)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2762, file: !318, line: 2440, baseType: !1724, size: 64, offset: 576)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2762, file: !318, line: 2441, baseType: !1724, size: 64, offset: 640)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2762, file: !318, line: 2443, baseType: !2774, size: 128, offset: 704)
!2774 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !318, line: 182, baseType: !2775)
!2775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !318, line: 182, size: 128, elements: !2776)
!2776 = !{!2777}
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2775, file: !318, line: 182, baseType: !1717, size: 128)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1727, file: !318, line: 3401, baseType: !2779, size: 320)
!2779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !318, line: 3327, size: 320, elements: !2780)
!2780 = !{!2781, !2782, !2789}
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2779, file: !318, line: 3329, baseType: !1763, size: 192)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2779, file: !318, line: 3330, baseType: !2783, size: 64, offset: 192)
!2783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2784, size: 64)
!2784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !318, line: 3320, size: 192, elements: !2785)
!2785 = !{!2786, !2787, !2788}
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2784, file: !318, line: 3322, baseType: !2783, size: 64)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2784, file: !318, line: 3323, baseType: !2783, size: 64, offset: 64)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2784, file: !318, line: 3324, baseType: !1724, size: 64, offset: 128)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2779, file: !318, line: 3331, baseType: !2783, size: 64, offset: 256)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1727, file: !318, line: 3402, baseType: !2791, size: 256)
!2791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !318, line: 1540, size: 256, elements: !2792)
!2792 = !{!2793, !2794}
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2791, file: !318, line: 1541, baseType: !1763, size: 192)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2791, file: !318, line: 1542, baseType: !2795, size: 64, offset: 192)
!2795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2796, size: 64)
!2796 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !318, line: 1538, baseType: !2797)
!2797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !318, line: 1538, size: 192, elements: !2798)
!2798 = !{!2799}
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2797, file: !318, line: 1538, baseType: !2800, size: 192)
!2800 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !318, line: 1537, baseType: !2801)
!2801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !318, line: 1537, size: 192, elements: !2802)
!2802 = !{!2803, !2804, !2805}
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2801, file: !318, line: 1537, baseType: !7, size: 32)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2801, file: !318, line: 1537, baseType: !7, size: 32, offset: 32)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2801, file: !318, line: 1537, baseType: !2806, size: 128, offset: 64)
!2806 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2807, size: 128, elements: !1825)
!2807 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !318, line: 1535, baseType: !2808)
!2808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !318, line: 1532, size: 128, elements: !2809)
!2809 = !{!2810, !2811}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2808, file: !318, line: 1533, baseType: !1724, size: 64)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2808, file: !318, line: 1534, baseType: !1724, size: 64, offset: 64)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1727, file: !318, line: 3403, baseType: !2813, size: 512)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !318, line: 1938, size: 512, elements: !2814)
!2814 = !{!2815, !2816, !2817, !2818, !2824, !2825, !2826}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2813, file: !318, line: 1939, baseType: !1763, size: 192)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2813, file: !318, line: 1940, baseType: !1852, size: 32, offset: 192)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2813, file: !318, line: 1941, baseType: !528, size: 32, offset: 224)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2813, file: !318, line: 1946, baseType: !2819, size: 32, offset: 256)
!2819 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !318, line: 1942, size: 32, elements: !2820)
!2820 = !{!2821, !2822, !2823}
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2819, file: !318, line: 1943, baseType: !546, size: 32)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2819, file: !318, line: 1944, baseType: !553, size: 32)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2819, file: !318, line: 1945, baseType: !317, size: 32)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2813, file: !318, line: 1950, baseType: !2045, size: 64, offset: 320)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2813, file: !318, line: 1951, baseType: !2045, size: 64, offset: 384)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2813, file: !318, line: 1953, baseType: !1723, size: 64, offset: 448)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1727, file: !318, line: 3404, baseType: !2828, size: 1664)
!2828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !318, line: 3337, size: 1664, elements: !2829)
!2829 = !{!2830, !2831}
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2828, file: !318, line: 3338, baseType: !1763, size: 192)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2828, file: !318, line: 3341, baseType: !2832, size: 1472, offset: 192)
!2832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2833, line: 410, size: 1472, elements: !2834)
!2833 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2834 = !{!2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998}
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2832, file: !2833, line: 412, baseType: !1821, size: 32)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2832, file: !2833, line: 413, baseType: !1821, size: 32, offset: 32)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2832, file: !2833, line: 414, baseType: !1821, size: 32, offset: 64)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2832, file: !2833, line: 415, baseType: !1821, size: 32, offset: 96)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2832, file: !2833, line: 416, baseType: !1821, size: 32, offset: 128)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2832, file: !2833, line: 417, baseType: !1821, size: 32, offset: 160)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2832, file: !2833, line: 418, baseType: !1844, size: 8, offset: 192)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2832, file: !2833, line: 419, baseType: !1844, size: 8, offset: 200)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2832, file: !2833, line: 420, baseType: !2844, size: 8, offset: 208)
!2844 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2832, file: !2833, line: 421, baseType: !2844, size: 8, offset: 216)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2832, file: !2833, line: 422, baseType: !2844, size: 8, offset: 224)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2832, file: !2833, line: 423, baseType: !2844, size: 8, offset: 232)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2832, file: !2833, line: 424, baseType: !2844, size: 8, offset: 240)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2832, file: !2833, line: 425, baseType: !2844, size: 8, offset: 248)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2832, file: !2833, line: 426, baseType: !2844, size: 8, offset: 256)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2832, file: !2833, line: 427, baseType: !2844, size: 8, offset: 264)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2832, file: !2833, line: 428, baseType: !2844, size: 8, offset: 272)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2832, file: !2833, line: 429, baseType: !2844, size: 8, offset: 280)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2832, file: !2833, line: 430, baseType: !2844, size: 8, offset: 288)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2832, file: !2833, line: 431, baseType: !2844, size: 8, offset: 296)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2832, file: !2833, line: 432, baseType: !2844, size: 8, offset: 304)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2832, file: !2833, line: 433, baseType: !2844, size: 8, offset: 312)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2832, file: !2833, line: 434, baseType: !2844, size: 8, offset: 320)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2832, file: !2833, line: 435, baseType: !2844, size: 8, offset: 328)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2832, file: !2833, line: 436, baseType: !2844, size: 8, offset: 336)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2832, file: !2833, line: 437, baseType: !2844, size: 8, offset: 344)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2832, file: !2833, line: 438, baseType: !2844, size: 8, offset: 352)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2832, file: !2833, line: 439, baseType: !2844, size: 8, offset: 360)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2832, file: !2833, line: 440, baseType: !2844, size: 8, offset: 368)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2832, file: !2833, line: 441, baseType: !2844, size: 8, offset: 376)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2832, file: !2833, line: 442, baseType: !2844, size: 8, offset: 384)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2832, file: !2833, line: 443, baseType: !2844, size: 8, offset: 392)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2832, file: !2833, line: 444, baseType: !2844, size: 8, offset: 400)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2832, file: !2833, line: 445, baseType: !2844, size: 8, offset: 408)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2832, file: !2833, line: 446, baseType: !2844, size: 8, offset: 416)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2832, file: !2833, line: 447, baseType: !2844, size: 8, offset: 424)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2832, file: !2833, line: 448, baseType: !2844, size: 8, offset: 432)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2832, file: !2833, line: 449, baseType: !2844, size: 8, offset: 440)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2832, file: !2833, line: 450, baseType: !2844, size: 8, offset: 448)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2832, file: !2833, line: 451, baseType: !2844, size: 8, offset: 456)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2832, file: !2833, line: 452, baseType: !2844, size: 8, offset: 464)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2832, file: !2833, line: 453, baseType: !2844, size: 8, offset: 472)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2832, file: !2833, line: 454, baseType: !2844, size: 8, offset: 480)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2832, file: !2833, line: 455, baseType: !2844, size: 8, offset: 488)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2832, file: !2833, line: 456, baseType: !2844, size: 8, offset: 496)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2832, file: !2833, line: 457, baseType: !2844, size: 8, offset: 504)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2832, file: !2833, line: 458, baseType: !2844, size: 8, offset: 512)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2832, file: !2833, line: 459, baseType: !2844, size: 8, offset: 520)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2832, file: !2833, line: 460, baseType: !2844, size: 8, offset: 528)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2832, file: !2833, line: 461, baseType: !2844, size: 8, offset: 536)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2832, file: !2833, line: 462, baseType: !2844, size: 8, offset: 544)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2832, file: !2833, line: 463, baseType: !2844, size: 8, offset: 552)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2832, file: !2833, line: 464, baseType: !2844, size: 8, offset: 560)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2832, file: !2833, line: 465, baseType: !2844, size: 8, offset: 568)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2832, file: !2833, line: 466, baseType: !2844, size: 8, offset: 576)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2832, file: !2833, line: 467, baseType: !2844, size: 8, offset: 584)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2832, file: !2833, line: 468, baseType: !2844, size: 8, offset: 592)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2832, file: !2833, line: 469, baseType: !2844, size: 8, offset: 600)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2832, file: !2833, line: 470, baseType: !2844, size: 8, offset: 608)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2832, file: !2833, line: 471, baseType: !2844, size: 8, offset: 616)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2832, file: !2833, line: 472, baseType: !2844, size: 8, offset: 624)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2832, file: !2833, line: 473, baseType: !2844, size: 8, offset: 632)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2832, file: !2833, line: 474, baseType: !2844, size: 8, offset: 640)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2832, file: !2833, line: 475, baseType: !2844, size: 8, offset: 648)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2832, file: !2833, line: 476, baseType: !2844, size: 8, offset: 656)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2832, file: !2833, line: 477, baseType: !2844, size: 8, offset: 664)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2832, file: !2833, line: 478, baseType: !2844, size: 8, offset: 672)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2832, file: !2833, line: 479, baseType: !2844, size: 8, offset: 680)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2832, file: !2833, line: 480, baseType: !2844, size: 8, offset: 688)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2832, file: !2833, line: 481, baseType: !2844, size: 8, offset: 696)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2832, file: !2833, line: 482, baseType: !2844, size: 8, offset: 704)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2832, file: !2833, line: 483, baseType: !2844, size: 8, offset: 712)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2832, file: !2833, line: 484, baseType: !2844, size: 8, offset: 720)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2832, file: !2833, line: 485, baseType: !2844, size: 8, offset: 728)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2832, file: !2833, line: 486, baseType: !2844, size: 8, offset: 736)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2832, file: !2833, line: 487, baseType: !2844, size: 8, offset: 744)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2832, file: !2833, line: 488, baseType: !2844, size: 8, offset: 752)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2832, file: !2833, line: 489, baseType: !2844, size: 8, offset: 760)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2832, file: !2833, line: 490, baseType: !2844, size: 8, offset: 768)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2832, file: !2833, line: 491, baseType: !2844, size: 8, offset: 776)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2832, file: !2833, line: 492, baseType: !2844, size: 8, offset: 784)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2832, file: !2833, line: 493, baseType: !2844, size: 8, offset: 792)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2832, file: !2833, line: 494, baseType: !2844, size: 8, offset: 800)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2832, file: !2833, line: 495, baseType: !2844, size: 8, offset: 808)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2832, file: !2833, line: 496, baseType: !2844, size: 8, offset: 816)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2832, file: !2833, line: 497, baseType: !2844, size: 8, offset: 824)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2832, file: !2833, line: 498, baseType: !2844, size: 8, offset: 832)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2832, file: !2833, line: 499, baseType: !2844, size: 8, offset: 840)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2832, file: !2833, line: 500, baseType: !2844, size: 8, offset: 848)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2832, file: !2833, line: 501, baseType: !2844, size: 8, offset: 856)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2832, file: !2833, line: 502, baseType: !2844, size: 8, offset: 864)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2832, file: !2833, line: 503, baseType: !2844, size: 8, offset: 872)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2832, file: !2833, line: 504, baseType: !2844, size: 8, offset: 880)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2832, file: !2833, line: 505, baseType: !2844, size: 8, offset: 888)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2832, file: !2833, line: 506, baseType: !2844, size: 8, offset: 896)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2832, file: !2833, line: 507, baseType: !2844, size: 8, offset: 904)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2832, file: !2833, line: 508, baseType: !2844, size: 8, offset: 912)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2832, file: !2833, line: 509, baseType: !2844, size: 8, offset: 920)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2832, file: !2833, line: 510, baseType: !2844, size: 8, offset: 928)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2832, file: !2833, line: 511, baseType: !2844, size: 8, offset: 936)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2832, file: !2833, line: 512, baseType: !2844, size: 8, offset: 944)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2832, file: !2833, line: 513, baseType: !2844, size: 8, offset: 952)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2832, file: !2833, line: 514, baseType: !2844, size: 8, offset: 960)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2832, file: !2833, line: 515, baseType: !2844, size: 8, offset: 968)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2832, file: !2833, line: 516, baseType: !2844, size: 8, offset: 976)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2832, file: !2833, line: 517, baseType: !2844, size: 8, offset: 984)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2832, file: !2833, line: 518, baseType: !2844, size: 8, offset: 992)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2832, file: !2833, line: 519, baseType: !2844, size: 8, offset: 1000)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2832, file: !2833, line: 520, baseType: !2844, size: 8, offset: 1008)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2832, file: !2833, line: 521, baseType: !2844, size: 8, offset: 1016)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2832, file: !2833, line: 522, baseType: !2844, size: 8, offset: 1024)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2832, file: !2833, line: 523, baseType: !2844, size: 8, offset: 1032)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2832, file: !2833, line: 524, baseType: !2844, size: 8, offset: 1040)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2832, file: !2833, line: 525, baseType: !2844, size: 8, offset: 1048)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2832, file: !2833, line: 526, baseType: !2844, size: 8, offset: 1056)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2832, file: !2833, line: 527, baseType: !2844, size: 8, offset: 1064)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2832, file: !2833, line: 528, baseType: !2844, size: 8, offset: 1072)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2832, file: !2833, line: 529, baseType: !2844, size: 8, offset: 1080)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2832, file: !2833, line: 530, baseType: !2844, size: 8, offset: 1088)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2832, file: !2833, line: 531, baseType: !2844, size: 8, offset: 1096)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2832, file: !2833, line: 532, baseType: !2844, size: 8, offset: 1104)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2832, file: !2833, line: 533, baseType: !2844, size: 8, offset: 1112)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2832, file: !2833, line: 534, baseType: !2844, size: 8, offset: 1120)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2832, file: !2833, line: 535, baseType: !2844, size: 8, offset: 1128)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2832, file: !2833, line: 536, baseType: !2844, size: 8, offset: 1136)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2832, file: !2833, line: 537, baseType: !2844, size: 8, offset: 1144)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2832, file: !2833, line: 538, baseType: !2844, size: 8, offset: 1152)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2832, file: !2833, line: 539, baseType: !2844, size: 8, offset: 1160)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2832, file: !2833, line: 540, baseType: !2844, size: 8, offset: 1168)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2832, file: !2833, line: 541, baseType: !2844, size: 8, offset: 1176)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2832, file: !2833, line: 542, baseType: !2844, size: 8, offset: 1184)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2832, file: !2833, line: 543, baseType: !2844, size: 8, offset: 1192)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2832, file: !2833, line: 544, baseType: !2844, size: 8, offset: 1200)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2832, file: !2833, line: 545, baseType: !2844, size: 8, offset: 1208)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2832, file: !2833, line: 546, baseType: !2844, size: 8, offset: 1216)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2832, file: !2833, line: 547, baseType: !2844, size: 8, offset: 1224)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2832, file: !2833, line: 548, baseType: !2844, size: 8, offset: 1232)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2832, file: !2833, line: 549, baseType: !2844, size: 8, offset: 1240)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2832, file: !2833, line: 550, baseType: !2844, size: 8, offset: 1248)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2832, file: !2833, line: 551, baseType: !2844, size: 8, offset: 1256)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2832, file: !2833, line: 552, baseType: !2844, size: 8, offset: 1264)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2832, file: !2833, line: 553, baseType: !2844, size: 8, offset: 1272)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2832, file: !2833, line: 554, baseType: !2844, size: 8, offset: 1280)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2832, file: !2833, line: 555, baseType: !2844, size: 8, offset: 1288)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2832, file: !2833, line: 556, baseType: !2844, size: 8, offset: 1296)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2832, file: !2833, line: 557, baseType: !2844, size: 8, offset: 1304)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2832, file: !2833, line: 558, baseType: !2844, size: 8, offset: 1312)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2832, file: !2833, line: 559, baseType: !2844, size: 8, offset: 1320)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2832, file: !2833, line: 560, baseType: !2844, size: 8, offset: 1328)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2832, file: !2833, line: 561, baseType: !2844, size: 8, offset: 1336)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2832, file: !2833, line: 562, baseType: !2844, size: 8, offset: 1344)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2832, file: !2833, line: 563, baseType: !2844, size: 8, offset: 1352)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2832, file: !2833, line: 564, baseType: !2844, size: 8, offset: 1360)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2832, file: !2833, line: 565, baseType: !2844, size: 8, offset: 1368)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2832, file: !2833, line: 566, baseType: !2844, size: 8, offset: 1376)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2832, file: !2833, line: 567, baseType: !2844, size: 8, offset: 1384)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2832, file: !2833, line: 568, baseType: !2844, size: 8, offset: 1392)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2832, file: !2833, line: 569, baseType: !2844, size: 8, offset: 1400)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2832, file: !2833, line: 570, baseType: !2844, size: 8, offset: 1408)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2832, file: !2833, line: 571, baseType: !2844, size: 8, offset: 1416)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2832, file: !2833, line: 572, baseType: !2844, size: 8, offset: 1424)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2832, file: !2833, line: 573, baseType: !2844, size: 8, offset: 1432)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2832, file: !2833, line: 574, baseType: !2844, size: 8, offset: 1440)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1727, file: !318, line: 3405, baseType: !3000, size: 384)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !318, line: 3352, size: 384, elements: !3001)
!3001 = !{!3002, !3003}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3000, file: !318, line: 3353, baseType: !1763, size: 192)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3000, file: !318, line: 3356, baseType: !3004, size: 192, offset: 192)
!3004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2833, line: 578, size: 192, elements: !3005)
!3005 = !{!3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016}
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3004, file: !2833, line: 580, baseType: !1821, size: 32)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3004, file: !2833, line: 581, baseType: !1821, size: 32, offset: 32)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3004, file: !2833, line: 582, baseType: !1821, size: 32, offset: 64)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3004, file: !2833, line: 583, baseType: !1821, size: 32, offset: 96)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3004, file: !2833, line: 584, baseType: !1844, size: 8, offset: 128)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3004, file: !2833, line: 585, baseType: !1844, size: 8, offset: 136)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3004, file: !2833, line: 586, baseType: !1844, size: 8, offset: 144)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3004, file: !2833, line: 587, baseType: !1844, size: 8, offset: 152)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3004, file: !2833, line: 588, baseType: !1844, size: 8, offset: 160)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3004, file: !2833, line: 589, baseType: !1844, size: 8, offset: 168)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3004, file: !2833, line: 590, baseType: !1844, size: 8, offset: 176)
!3017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3018, size: 64)
!3018 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_structure_heap", file: !3, line: 199, baseType: !3019)
!3019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_structure_heap", file: !3, line: 199, size: 512, elements: !3020)
!3020 = !{!3021}
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3019, file: !3, line: 199, baseType: !3022, size: 512)
!3022 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_structure_base", file: !3, line: 198, baseType: !3023)
!3023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_structure_base", file: !3, line: 198, size: 512, elements: !3024)
!3024 = !{!3025, !3026, !3027}
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3023, file: !3, line: 198, baseType: !7, size: 32)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3023, file: !3, line: 198, baseType: !7, size: 32, offset: 32)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3023, file: !3, line: 198, baseType: !3028, size: 448, offset: 64)
!3028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3029, size: 448, elements: !1825)
!3029 = !DIDerivedType(tag: DW_TAG_typedef, name: "structure", file: !3, line: 197, baseType: !3030)
!3030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_structure", file: !3031, line: 85, size: 448, elements: !3032)
!3031 = !DIFile(filename: "./ipa-struct-reorg.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3032 = !{!3033, !3034, !3035, !3036, !3045, !3046, !3063}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3030, file: !3031, line: 89, baseType: !1724, size: 64)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "num_fields", scope: !3030, file: !3031, line: 92, baseType: !1821, size: 32, offset: 64)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3030, file: !3031, line: 95, baseType: !2265, size: 64, offset: 128)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "fields", scope: !3030, file: !3031, line: 98, baseType: !3037, size: 64, offset: 192)
!3037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3038, size: 64)
!3038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "field_entry", file: !3031, line: 61, size: 320, elements: !3039)
!3039 = !{!3040, !3041, !3042, !3043, !3044}
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3038, file: !3031, line: 64, baseType: !1821, size: 32)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3038, file: !3031, line: 66, baseType: !2265, size: 64, offset: 64)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3038, file: !3031, line: 67, baseType: !1724, size: 64, offset: 128)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "field_mapping", scope: !3038, file: !3031, line: 69, baseType: !1724, size: 64, offset: 192)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "acc_sites", scope: !3038, file: !3031, line: 70, baseType: !2485, size: 64, offset: 256)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "accs", scope: !3030, file: !3031, line: 101, baseType: !2485, size: 64, offset: 256)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "struct_clustering", scope: !3030, file: !3031, line: 104, baseType: !3047, size: 64, offset: 320)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!3048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "field_cluster", file: !3031, line: 75, size: 128, elements: !3049)
!3049 = !{!3050, !3062}
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "fields_in_cluster", scope: !3048, file: !3031, line: 79, baseType: !3051, size: 64)
!3051 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3052, line: 45, baseType: !3053)
!3052 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3054, size: 64)
!3054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3052, line: 39, size: 192, elements: !3055)
!3055 = !{!3056, !3058, !3059, !3060}
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3054, file: !3052, line: 41, baseType: !3057, size: 64)
!3057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3054, file: !3052, line: 42, baseType: !7, size: 32, offset: 64)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3054, file: !3052, line: 43, baseType: !7, size: 32, offset: 96)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3054, file: !3052, line: 44, baseType: !3061, size: 64, offset: 128)
!3061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1778, size: 64, elements: !1825)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "sibling", scope: !3048, file: !3031, line: 80, baseType: !3047, size: 64, offset: 64)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "new_types", scope: !3030, file: !3031, line: 107, baseType: !1712, size: 64, offset: 384)
!3064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3065, size: 64)
!3065 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3066)
!3066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "field_access_site", file: !3031, line: 36, size: 576, elements: !3067)
!3067 = !{!3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076}
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3066, file: !3031, line: 39, baseType: !2055, size: 64)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "comp_ref", scope: !3066, file: !3031, line: 40, baseType: !1724, size: 64, offset: 64)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !3066, file: !3031, line: 41, baseType: !1724, size: 64, offset: 128)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3066, file: !3031, line: 42, baseType: !1724, size: 64, offset: 192)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3066, file: !3031, line: 43, baseType: !1724, size: 64, offset: 256)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3066, file: !3031, line: 44, baseType: !1724, size: 64, offset: 320)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3066, file: !3031, line: 45, baseType: !1724, size: 64, offset: 384)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "ref_def_stmt", scope: !3066, file: !3031, line: 46, baseType: !2055, size: 64, offset: 448)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "cast_stmt", scope: !3066, file: !3031, line: 47, baseType: !2055, size: 64, offset: 512)
!3077 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1725, line: 60, baseType: !3078)
!3078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3079, size: 64)
!3079 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2057)
!3080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3081, size: 64)
!3081 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3082)
!3082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_site", file: !3031, line: 52, size: 128, elements: !3083)
!3083 = !{!3084, !3085}
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3082, file: !3031, line: 55, baseType: !2055, size: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3082, file: !3031, line: 57, baseType: !1712, size: 64, offset: 64)
!3086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3087, size: 64)
!3087 = !DIDerivedType(tag: DW_TAG_typedef, name: "fallocs_t", file: !3, line: 184, baseType: !3088)
!3088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3089, size: 64)
!3089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "func_alloc_sites", file: !3, line: 177, size: 128, elements: !3090)
!3090 = !{!3091, !3092}
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !3089, file: !3, line: 179, baseType: !1724, size: 64)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "allocs", scope: !3089, file: !3, line: 181, baseType: !3093, size: 64, offset: 64)
!3093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3094, size: 64)
!3094 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alloc_site_t_heap", file: !3, line: 174, baseType: !3095)
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alloc_site_t_heap", file: !3, line: 174, size: 192, elements: !3096)
!3096 = !{!3097}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3095, file: !3, line: 174, baseType: !3098, size: 192)
!3098 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alloc_site_t_base", file: !3, line: 173, baseType: !3099)
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alloc_site_t_base", file: !3, line: 173, size: 192, elements: !3100)
!3100 = !{!3101, !3102, !3103}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3099, file: !3, line: 173, baseType: !7, size: 32)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3099, file: !3, line: 173, baseType: !7, size: 32, offset: 32)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3099, file: !3, line: 173, baseType: !3104, size: 128, offset: 64)
!3104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3105, size: 128, elements: !1825)
!3105 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_site_t", file: !3, line: 171, baseType: !3106)
!3106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_site", file: !3, line: 167, size: 128, elements: !3107)
!3107 = !{!3108, !3109}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3106, file: !3, line: 169, baseType: !2055, size: 64)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3106, file: !3, line: 170, baseType: !3110, size: 64, offset: 64)
!3110 = !DIDerivedType(tag: DW_TAG_typedef, name: "d_str", file: !3031, line: 110, baseType: !3111)
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3030, size: 64)
!3112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3113, size: 64)
!3113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3066, size: 64)
!3114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3115, size: 64)
!3115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3082, size: 64)
!3116 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_fallocs_t", file: !3, line: 185, baseType: !3117)
!3117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3118 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3089)
!3119 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1725, line: 59, baseType: !3120)
!3120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3121, size: 64)
!3121 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1727)
!3122 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1414, line: 30, baseType: !3123)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !318, line: 1893, baseType: !2096)
!3125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3126, size: 64)
!3126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !1304, line: 4652, size: 448, elements: !3127)
!3127 = !{!3128, !3135, !3136, !3139, !3140, !3141, !3142, !3143}
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !3126, file: !1304, line: 4655, baseType: !3129, size: 192)
!3129 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !1304, line: 265, baseType: !3130)
!3130 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1304, line: 254, size: 192, elements: !3131)
!3131 = !{!3132, !3133, !3134}
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3130, file: !1304, line: 257, baseType: !2050, size: 64)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3130, file: !1304, line: 263, baseType: !2045, size: 64, offset: 64)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3130, file: !1304, line: 264, baseType: !2453, size: 64, offset: 128)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !3126, file: !1304, line: 4659, baseType: !2008, size: 64, offset: 192)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !3126, file: !1304, line: 4664, baseType: !3137, size: 64, offset: 256)
!3137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3138, size: 64)
!3138 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !318, line: 5199, flags: DIFlagFwdDecl)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !3126, file: !1304, line: 4678, baseType: !1844, size: 8, offset: 320)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !3126, file: !1304, line: 4681, baseType: !1844, size: 8, offset: 328)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !3126, file: !1304, line: 4685, baseType: !1844, size: 8, offset: 336)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !3126, file: !1304, line: 4688, baseType: !1844, size: 8, offset: 344)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !3126, file: !1304, line: 4694, baseType: !1724, size: 64, offset: 384)
!3144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3145, size: 64)
!3145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "exclude_data", file: !3, line: 846, size: 128, elements: !3146)
!3146 = !{!3147, !3148}
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !3145, file: !3, line: 848, baseType: !1724, size: 64)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3145, file: !3, line: 849, baseType: !3110, size: 64, offset: 64)
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "find_stmt_data", file: !3, line: 792, size: 128, elements: !3151)
!3151 = !{!3152, !3153}
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "found", scope: !3150, file: !3, line: 794, baseType: !1844, size: 8)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3150, file: !3, line: 795, baseType: !2055, size: 64, offset: 64)
!3154 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_new_var", file: !3, line: 164, baseType: !3155)
!3155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3156, size: 64)
!3156 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3157)
!3157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "new_var_data", file: !3, line: 156, size: 128, elements: !3158)
!3158 = !{!3159, !3160}
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "orig_var", scope: !3157, file: !3, line: 158, baseType: !1724, size: 64)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "new_vars", scope: !3157, file: !3, line: 160, baseType: !1712, size: 64, offset: 64)
!3161 = !DIDerivedType(tag: DW_TAG_typedef, name: "new_var", file: !3, line: 163, baseType: !3162)
!3162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3157, size: 64)
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3164, size: 64)
!3164 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_type_wrapper_t_heap", file: !3, line: 952, baseType: !3165)
!3165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_type_wrapper_t_heap", file: !3, line: 952, size: 192, elements: !3166)
!3166 = !{!3167}
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3165, file: !3, line: 952, baseType: !3168, size: 192)
!3168 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_type_wrapper_t_base", file: !3, line: 951, baseType: !3169)
!3169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_type_wrapper_t_base", file: !3, line: 951, size: 192, elements: !3170)
!3170 = !{!3171, !3172, !3173}
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3169, file: !3, line: 951, baseType: !7, size: 32)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3169, file: !3, line: 951, baseType: !7, size: 32, offset: 32)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3169, file: !3, line: 951, baseType: !3174, size: 128, offset: 64)
!3174 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3175, size: 128, elements: !1825)
!3175 = !DIDerivedType(tag: DW_TAG_typedef, name: "type_wrapper_t", file: !3, line: 949, baseType: !3176)
!3176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "type_wrapper", file: !3, line: 942, size: 128, elements: !3177)
!3177 = !{!3178, !3179}
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "wrap", scope: !3176, file: !3, line: 945, baseType: !1844, size: 8)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "domain", scope: !3176, file: !3, line: 948, baseType: !1724, size: 64, offset: 64)
!3180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3161, size: 64)
!3181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3182, size: 64)
!3182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "create_acc_data", file: !3, line: 1401, size: 192, elements: !3183)
!3183 = !{!3184, !3185, !3186}
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3182, file: !3, line: 1403, baseType: !2453, size: 64)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3182, file: !3, line: 1404, baseType: !3110, size: 64, offset: 64)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "field_index", scope: !3182, file: !3, line: 1405, baseType: !1821, size: 32, offset: 128)
!3187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3188, size: 64)
!3188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ref_pos", file: !3, line: 882, size: 192, elements: !3189)
!3189 = !{!3190, !3191, !3192}
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !3188, file: !3, line: 884, baseType: !2089, size: 64)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3188, file: !3, line: 885, baseType: !1724, size: 64, offset: 64)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3188, file: !3, line: 886, baseType: !1724, size: 64, offset: 128)
!3193 = !{!0, !3194, !3222, !3224, !3226}
!3194 = !DIGlobalVariableExpression(var: !3195, expr: !DIExpression())
!3195 = distinct !DIGlobalVariable(name: "pass_ipa_struct_reorg", scope: !2, file: !3, line: 4045, type: !3196, isLocal: false, isDefinition: true)
!3196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_ipa_opt_pass", file: !6, line: 202, size: 640, elements: !3197)
!3197 = !{!3198}
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3196, file: !6, line: 204, baseType: !3199, size: 640)
!3199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !3200)
!3200 = !{!3201, !3202, !3203, !3207, !3211, !3213, !3214, !3215, !3217, !3218, !3219, !3220, !3221}
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3199, file: !6, line: 117, baseType: !5, size: 32)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3199, file: !6, line: 121, baseType: !1928, size: 64, offset: 64)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3199, file: !6, line: 125, baseType: !3204, size: 64, offset: 128)
!3204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3205, size: 64)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{!1844}
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3199, file: !6, line: 130, baseType: !3208, size: 64, offset: 192)
!3208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3209, size: 64)
!3209 = !DISubroutineType(types: !3210)
!3210 = !{!7}
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3199, file: !6, line: 133, baseType: !3212, size: 64, offset: 256)
!3212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3199, size: 64)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3199, file: !6, line: 136, baseType: !3212, size: 64, offset: 320)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3199, file: !6, line: 139, baseType: !1821, size: 32, offset: 384)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3199, file: !6, line: 143, baseType: !3216, size: 32, offset: 416)
!3216 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3199, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3199, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3199, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3199, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3199, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!3222 = !DIGlobalVariableExpression(var: !3223, expr: !DIExpression())
!3223 = distinct !DIGlobalVariable(name: "new_global_vars", scope: !2, file: !3, line: 191, type: !2485, isLocal: false, isDefinition: true)
!3224 = !DIGlobalVariableExpression(var: !3225, expr: !DIExpression())
!3225 = distinct !DIGlobalVariable(name: "new_local_vars", scope: !2, file: !3, line: 194, type: !2485, isLocal: false, isDefinition: true)
!3226 = !DIGlobalVariableExpression(var: !3227, expr: !DIExpression())
!3227 = distinct !DIGlobalVariable(name: "structures", scope: !2, file: !3, line: 200, type: !3017, isLocal: false, isDefinition: true)
!3228 = !{i32 7, !"Dwarf Version", i32 4}
!3229 = !{i32 2, !"Debug Info Version", i32 3}
!3230 = !{i32 1, !"wchar_size", i32 4}
!3231 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3232 = distinct !DISubprogram(name: "struct_reorg_gate", scope: !3, file: !3, line: 4038, type: !3205, scopeLine: 4039, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3233 = !{}
!3234 = !DILocation(line: 4040, column: 10, scope: !3232)
!3235 = !DILocation(line: 4041, column: 3, scope: !3232)
!3236 = !DILocation(line: 4041, column: 6, scope: !3232)
!3237 = !DILocation(line: 4042, column: 3, scope: !3232)
!3238 = !DILocation(line: 4042, column: 7, scope: !3232)
!3239 = !DILocation(line: 4042, column: 16, scope: !3232)
!3240 = !DILocation(line: 0, scope: !3232)
!3241 = !DILocation(line: 4040, column: 3, scope: !3232)
!3242 = distinct !DISubprogram(name: "reorg_structs_drive", scope: !3, file: !3, line: 4029, type: !3209, scopeLine: 4030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3243 = !DILocation(line: 4031, column: 3, scope: !3242)
!3244 = !DILocation(line: 4032, column: 3, scope: !3242)
!3245 = distinct !DISubprogram(name: "reorg_structs", scope: !3, file: !3, line: 3997, type: !3246, scopeLine: 3998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{null}
!3248 = !DILocation(line: 4002, column: 3, scope: !3245)
!3249 = !DILocation(line: 4005, column: 3, scope: !3245)
!3250 = !DILocation(line: 4008, column: 3, scope: !3245)
!3251 = !DILocation(line: 4011, column: 3, scope: !3245)
!3252 = !DILocation(line: 4015, column: 3, scope: !3245)
!3253 = !DILocation(line: 4020, column: 3, scope: !3245)
!3254 = !DILocation(line: 4023, column: 3, scope: !3245)
!3255 = !DILocation(line: 4024, column: 1, scope: !3245)
!3256 = distinct !DISubprogram(name: "collect_structures", scope: !3, file: !3, line: 3829, type: !3246, scopeLine: 3830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3257 = !DILocalVariable(name: "unsuitable_types", scope: !3256, file: !3, line: 3831, type: !1712)
!3258 = !DILocation(line: 3831, column: 21, scope: !3256)
!3259 = !DILocation(line: 3831, column: 40, scope: !3256)
!3260 = !DILocation(line: 3833, column: 16, scope: !3256)
!3261 = !DILocation(line: 3833, column: 14, scope: !3256)
!3262 = !DILocation(line: 3836, column: 7, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 3836, column: 7)
!3264 = !DILocation(line: 3836, column: 7, scope: !3256)
!3265 = !DILocation(line: 3837, column: 6, scope: !3263)
!3266 = !DILocation(line: 3841, column: 3, scope: !3256)
!3267 = !DILocation(line: 3846, column: 3, scope: !3256)
!3268 = !DILocation(line: 3850, column: 3, scope: !3256)
!3269 = !DILocation(line: 3853, column: 3, scope: !3256)
!3270 = !DILocation(line: 3855, column: 28, scope: !3256)
!3271 = !DILocation(line: 3855, column: 3, scope: !3256)
!3272 = !DILocation(line: 3856, column: 3, scope: !3256)
!3273 = !DILocation(line: 3857, column: 1, scope: !3256)
!3274 = distinct !DISubprogram(name: "collect_allocation_sites", scope: !3, file: !3, line: 3863, type: !3246, scopeLine: 3864, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3275 = !DILocation(line: 3865, column: 17, scope: !3274)
!3276 = !DILocation(line: 3865, column: 15, scope: !3274)
!3277 = !DILocation(line: 3866, column: 3, scope: !3274)
!3278 = !DILocation(line: 3867, column: 1, scope: !3274)
!3279 = distinct !DISubprogram(name: "collect_data_accesses", scope: !3, file: !3, line: 3874, type: !3246, scopeLine: 3875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3280 = !DILocalVariable(name: "c_node", scope: !3279, file: !3, line: 3876, type: !3281)
!3281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3282, size: 64)
!3282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !561, line: 181, size: 2496, elements: !3283)
!3283 = !{!3284, !3285, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3400, !3422, !3432, !3436, !3462, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484}
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3282, file: !561, line: 182, baseType: !1724, size: 64)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3282, file: !561, line: 183, baseType: !3286, size: 64, offset: 64)
!3286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3287, size: 64)
!3287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !561, line: 314, size: 768, elements: !3288)
!3288 = !{!3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3300, !3301, !3302, !3303, !3305, !3306, !3307}
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3287, file: !561, line: 316, baseType: !2265, size: 64)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3287, file: !561, line: 317, baseType: !3281, size: 64, offset: 64)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3287, file: !561, line: 318, baseType: !3281, size: 64, offset: 128)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3287, file: !561, line: 319, baseType: !3286, size: 64, offset: 192)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3287, file: !561, line: 320, baseType: !3286, size: 64, offset: 256)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3287, file: !561, line: 321, baseType: !3286, size: 64, offset: 320)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3287, file: !561, line: 322, baseType: !3286, size: 64, offset: 384)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3287, file: !561, line: 323, baseType: !2055, size: 64, offset: 448)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3287, file: !561, line: 324, baseType: !2008, size: 64, offset: 512)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3287, file: !561, line: 327, baseType: !3299, size: 32, offset: 576)
!3299 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !561, line: 312, baseType: !560)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3287, file: !561, line: 330, baseType: !7, size: 32, offset: 608)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3287, file: !561, line: 334, baseType: !1821, size: 32, offset: 640)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3287, file: !561, line: 336, baseType: !1821, size: 32, offset: 672)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3287, file: !561, line: 338, baseType: !3304, size: 16, offset: 704)
!3304 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3287, file: !561, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3287, file: !561, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3287, file: !561, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3282, file: !561, line: 184, baseType: !3286, size: 64, offset: 128)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3282, file: !561, line: 185, baseType: !3281, size: 64, offset: 192)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3282, file: !561, line: 186, baseType: !3281, size: 64, offset: 256)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3282, file: !561, line: 188, baseType: !3281, size: 64, offset: 320)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3282, file: !561, line: 190, baseType: !3281, size: 64, offset: 384)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3282, file: !561, line: 192, baseType: !3281, size: 64, offset: 448)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3282, file: !561, line: 194, baseType: !3281, size: 64, offset: 512)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3282, file: !561, line: 196, baseType: !3281, size: 64, offset: 576)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3282, file: !561, line: 197, baseType: !3281, size: 64, offset: 640)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3282, file: !561, line: 198, baseType: !3281, size: 64, offset: 704)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3282, file: !561, line: 199, baseType: !3281, size: 64, offset: 768)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3282, file: !561, line: 202, baseType: !3281, size: 64, offset: 832)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3282, file: !561, line: 204, baseType: !3281, size: 64, offset: 896)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3282, file: !561, line: 207, baseType: !2485, size: 64, offset: 960)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3282, file: !561, line: 209, baseType: !2008, size: 64, offset: 1024)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3282, file: !561, line: 214, baseType: !3324, size: 64, offset: 1088)
!3324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3325, size: 64)
!3325 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2443, line: 177, baseType: !3326)
!3326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2443, line: 177, size: 128, elements: !3327)
!3327 = !{!3328}
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3326, file: !2443, line: 177, baseType: !3329, size: 128)
!3329 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2443, line: 176, baseType: !3330)
!3330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2443, line: 176, size: 128, elements: !3331)
!3331 = !{!3332, !3333, !3334}
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3330, file: !2443, line: 176, baseType: !7, size: 32)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3330, file: !2443, line: 176, baseType: !7, size: 32, offset: 32)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3330, file: !2443, line: 176, baseType: !3335, size: 64, offset: 64)
!3335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3336, size: 64, elements: !1825)
!3336 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2443, line: 174, baseType: !3337)
!3337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3338, size: 64)
!3338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !6, line: 173, size: 1152, elements: !3339)
!3339 = !{!3340, !3341, !3343, !3366, !3367, !3371, !3376, !3377, !3381}
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3338, file: !6, line: 175, baseType: !3199, size: 640)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3338, file: !6, line: 179, baseType: !3342, size: 64, offset: 640)
!3342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3246, size: 64)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3338, file: !6, line: 182, baseType: !3344, size: 64, offset: 704)
!3344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3345, size: 64)
!3345 = !DISubroutineType(types: !3346)
!3346 = !{null, !3347}
!3347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3348, size: 64)
!3348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !561, line: 276, size: 192, elements: !3349)
!3349 = !{!3350, !3351, !3365}
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3348, file: !561, line: 278, baseType: !2485, size: 64)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3348, file: !561, line: 279, baseType: !3352, size: 64, offset: 64)
!3352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3353, size: 64)
!3353 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !561, line: 272, baseType: !3354)
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !561, line: 272, size: 128, elements: !3355)
!3355 = !{!3356}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3354, file: !561, line: 272, baseType: !3357, size: 128)
!3357 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !561, line: 270, baseType: !3358)
!3358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !561, line: 270, size: 128, elements: !3359)
!3359 = !{!3360, !3361, !3362}
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3358, file: !561, line: 270, baseType: !7, size: 32)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3358, file: !561, line: 270, baseType: !7, size: 32, offset: 32)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3358, file: !561, line: 270, baseType: !3363, size: 64, offset: 64)
!3363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3364, size: 64, elements: !1825)
!3364 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !561, line: 268, baseType: !3281)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3348, file: !561, line: 280, baseType: !2008, size: 64, offset: 128)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3338, file: !6, line: 187, baseType: !3342, size: 64, offset: 768)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3338, file: !6, line: 188, baseType: !3368, size: 64, offset: 832)
!3368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3369, size: 64)
!3369 = !DISubroutineType(types: !3370)
!3370 = !{null, !3281}
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3338, file: !6, line: 191, baseType: !3372, size: 64, offset: 896)
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3373, size: 64)
!3373 = !DISubroutineType(types: !3374)
!3374 = !{null, !3281, !3375}
!3375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3338, file: !6, line: 195, baseType: !7, size: 32, offset: 960)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3338, file: !6, line: 196, baseType: !3378, size: 64, offset: 1024)
!3378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3379, size: 64)
!3379 = !DISubroutineType(types: !3380)
!3380 = !{!7, !3281}
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3338, file: !6, line: 197, baseType: !3382, size: 64, offset: 1088)
!3382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3383, size: 64)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{null, !3385}
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !561, line: 358, size: 320, elements: !3387)
!3387 = !{!3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399}
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3386, file: !561, line: 359, baseType: !1724, size: 64)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3386, file: !561, line: 361, baseType: !3385, size: 64, offset: 64)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3386, file: !561, line: 363, baseType: !3385, size: 64, offset: 128)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3386, file: !561, line: 366, baseType: !3385, size: 64, offset: 192)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3386, file: !561, line: 368, baseType: !1821, size: 32, offset: 256)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3386, file: !561, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3386, file: !561, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3386, file: !561, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3386, file: !561, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3386, file: !561, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3386, file: !561, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3386, file: !561, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3282, file: !561, line: 216, baseType: !3401, size: 320, offset: 1152)
!3401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !561, line: 88, size: 320, elements: !3402)
!3402 = !{!3403, !3406, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421}
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3401, file: !561, line: 90, baseType: !3404, size: 64)
!3404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3405, size: 64)
!3405 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !561, line: 51, flags: DIFlagFwdDecl)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3401, file: !561, line: 92, baseType: !3407, size: 192, offset: 64)
!3407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !561, line: 57, size: 192, elements: !3408)
!3408 = !{!3409, !3410, !3411, !3412, !3413}
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3407, file: !561, line: 60, baseType: !1780, size: 64)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3407, file: !561, line: 63, baseType: !1821, size: 32, offset: 64)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3407, file: !561, line: 65, baseType: !1821, size: 32, offset: 96)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3407, file: !561, line: 67, baseType: !1821, size: 32, offset: 128)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3407, file: !561, line: 69, baseType: !1821, size: 32, offset: 160)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3401, file: !561, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3401, file: !561, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3401, file: !561, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3401, file: !561, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3401, file: !561, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3401, file: !561, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3401, file: !561, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3401, file: !561, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3282, file: !561, line: 217, baseType: !3423, size: 320, offset: 1472)
!3423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !561, line: 126, size: 320, elements: !3424)
!3424 = !{!3425, !3426, !3427, !3428, !3429, !3430, !3431}
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3423, file: !561, line: 128, baseType: !1780, size: 64)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3423, file: !561, line: 130, baseType: !1780, size: 64, offset: 64)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3423, file: !561, line: 134, baseType: !3281, size: 64, offset: 128)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3423, file: !561, line: 137, baseType: !1821, size: 32, offset: 192)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3423, file: !561, line: 138, baseType: !1821, size: 32, offset: 224)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3423, file: !561, line: 141, baseType: !1821, size: 32, offset: 256)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3423, file: !561, line: 144, baseType: !1844, size: 8, offset: 288)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3282, file: !561, line: 218, baseType: !3433, size: 32, offset: 1792)
!3433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !561, line: 150, size: 32, elements: !3434)
!3434 = !{!3435}
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3433, file: !561, line: 151, baseType: !7, size: 32)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3282, file: !561, line: 219, baseType: !3437, size: 192, offset: 1856)
!3437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !561, line: 171, size: 192, elements: !3438)
!3438 = !{!3439, !3460, !3461}
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3437, file: !561, line: 173, baseType: !3440, size: 64)
!3440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3441, size: 64)
!3441 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !561, line: 169, baseType: !3442)
!3442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !561, line: 169, size: 128, elements: !3443)
!3443 = !{!3444}
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3442, file: !561, line: 169, baseType: !3445, size: 128)
!3445 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !561, line: 168, baseType: !3446)
!3446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !561, line: 168, size: 128, elements: !3447)
!3447 = !{!3448, !3449, !3450}
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3446, file: !561, line: 168, baseType: !7, size: 32)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3446, file: !561, line: 168, baseType: !7, size: 32, offset: 32)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3446, file: !561, line: 168, baseType: !3451, size: 64, offset: 64)
!3451 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3452, size: 64, elements: !1825)
!3452 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !561, line: 167, baseType: !3453)
!3453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3454, size: 64)
!3454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !561, line: 156, size: 192, elements: !3455)
!3455 = !{!3456, !3457, !3458, !3459}
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3454, file: !561, line: 159, baseType: !1724, size: 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3454, file: !561, line: 161, baseType: !1724, size: 64, offset: 64)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3454, file: !561, line: 163, baseType: !1844, size: 8, offset: 128)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3454, file: !561, line: 165, baseType: !1844, size: 8, offset: 136)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3437, file: !561, line: 174, baseType: !2564, size: 64, offset: 64)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3437, file: !561, line: 175, baseType: !2564, size: 64, offset: 128)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3282, file: !561, line: 220, baseType: !3463, size: 256, offset: 2048)
!3463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !561, line: 74, size: 256, elements: !3464)
!3464 = !{!3465, !3466, !3467, !3468, !3469, !3470}
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3463, file: !561, line: 76, baseType: !1780, size: 64)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3463, file: !561, line: 77, baseType: !1780, size: 64, offset: 64)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3463, file: !561, line: 78, baseType: !1724, size: 64, offset: 128)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3463, file: !561, line: 79, baseType: !1844, size: 8, offset: 192)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3463, file: !561, line: 80, baseType: !1844, size: 8, offset: 200)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3463, file: !561, line: 82, baseType: !1844, size: 8, offset: 208)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3282, file: !561, line: 223, baseType: !2265, size: 64, offset: 2304)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3282, file: !561, line: 225, baseType: !1821, size: 32, offset: 2368)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3282, file: !561, line: 227, baseType: !1821, size: 32, offset: 2400)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3282, file: !561, line: 231, baseType: !1821, size: 32, offset: 2432)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3282, file: !561, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3282, file: !561, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3282, file: !561, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3282, file: !561, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3282, file: !561, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3282, file: !561, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3282, file: !561, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3282, file: !561, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3282, file: !561, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3282, file: !561, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3485 = !DILocation(line: 3876, column: 23, scope: !3279)
!3486 = !DILocation(line: 3878, column: 17, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3279, file: !3, line: 3878, column: 3)
!3488 = !DILocation(line: 3878, column: 15, scope: !3487)
!3489 = !DILocation(line: 3878, column: 8, scope: !3487)
!3490 = !DILocation(line: 3878, column: 31, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 3878, column: 3)
!3492 = !DILocation(line: 3878, column: 3, scope: !3487)
!3493 = !DILocalVariable(name: "avail", scope: !3494, file: !3, line: 3880, type: !1342)
!3494 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 3879, column: 5)
!3495 = !DILocation(line: 3880, column: 25, scope: !3494)
!3496 = !DILocation(line: 3880, column: 68, scope: !3494)
!3497 = !DILocation(line: 3880, column: 33, scope: !3494)
!3498 = !DILocation(line: 3882, column: 11, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 3882, column: 11)
!3500 = !DILocation(line: 3882, column: 17, scope: !3499)
!3501 = !DILocation(line: 3882, column: 32, scope: !3499)
!3502 = !DILocation(line: 3882, column: 35, scope: !3499)
!3503 = !DILocation(line: 3882, column: 41, scope: !3499)
!3504 = !DILocation(line: 3882, column: 11, scope: !3494)
!3505 = !DILocalVariable(name: "func", scope: !3506, file: !3, line: 3884, type: !2441)
!3506 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 3883, column: 2)
!3507 = !DILocation(line: 3884, column: 21, scope: !3506)
!3508 = !DILocation(line: 3884, column: 28, scope: !3506)
!3509 = !DILocation(line: 3886, column: 30, scope: !3506)
!3510 = !DILocation(line: 3886, column: 4, scope: !3506)
!3511 = !DILocation(line: 3887, column: 34, scope: !3506)
!3512 = !DILocation(line: 3887, column: 4, scope: !3506)
!3513 = !DILocation(line: 3888, column: 2, scope: !3506)
!3514 = !DILocation(line: 3889, column: 5, scope: !3494)
!3515 = !DILocation(line: 3878, column: 48, scope: !3491)
!3516 = !DILocation(line: 3878, column: 56, scope: !3491)
!3517 = !DILocation(line: 3878, column: 46, scope: !3491)
!3518 = !DILocation(line: 3878, column: 3, scope: !3491)
!3519 = distinct !{!3519, !3492, !3520}
!3520 = !DILocation(line: 3889, column: 5, scope: !3487)
!3521 = !DILocation(line: 3891, column: 3, scope: !3279)
!3522 = !DILocation(line: 3893, column: 3, scope: !3279)
!3523 = !DILocation(line: 3894, column: 1, scope: !3279)
!3524 = distinct !DISubprogram(name: "exclude_cold_structs", scope: !3, file: !3, line: 3907, type: !3246, scopeLine: 3908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3525 = !DILocalVariable(name: "hottest", scope: !3524, file: !3, line: 3909, type: !2265)
!3526 = !DILocation(line: 3909, column: 13, scope: !3524)
!3527 = !DILocalVariable(name: "i", scope: !3524, file: !3, line: 3910, type: !7)
!3528 = !DILocation(line: 3910, column: 12, scope: !3524)
!3529 = !DILocalVariable(name: "str", scope: !3524, file: !3, line: 3911, type: !3110)
!3530 = !DILocation(line: 3911, column: 9, scope: !3524)
!3531 = !DILocation(line: 3914, column: 10, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 3914, column: 3)
!3533 = !DILocation(line: 3914, column: 8, scope: !3532)
!3534 = !DILocation(line: 3914, column: 15, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 3914, column: 3)
!3536 = !DILocation(line: 3914, column: 3, scope: !3532)
!3537 = !DILocation(line: 3915, column: 17, scope: !3535)
!3538 = !DILocation(line: 3915, column: 5, scope: !3535)
!3539 = !DILocation(line: 3914, column: 61, scope: !3535)
!3540 = !DILocation(line: 3914, column: 3, scope: !3535)
!3541 = distinct !{!3541, !3536, !3542}
!3542 = !DILocation(line: 3915, column: 30, scope: !3532)
!3543 = !DILocation(line: 3918, column: 5, scope: !3524)
!3544 = !DILocation(line: 3919, column: 3, scope: !3524)
!3545 = !DILocation(line: 3919, column: 10, scope: !3524)
!3546 = !DILocation(line: 3920, column: 9, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 3920, column: 9)
!3548 = !DILocation(line: 3920, column: 14, scope: !3547)
!3549 = !DILocation(line: 3920, column: 20, scope: !3547)
!3550 = !DILocation(line: 3920, column: 29, scope: !3547)
!3551 = !DILocation(line: 3920, column: 39, scope: !3547)
!3552 = !DILocation(line: 3920, column: 37, scope: !3547)
!3553 = !DILocation(line: 3920, column: 26, scope: !3547)
!3554 = !DILocation(line: 3920, column: 9, scope: !3524)
!3555 = !DILocation(line: 3922, column: 6, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 3922, column: 6)
!3557 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 3921, column: 7)
!3558 = !DILocation(line: 3922, column: 6, scope: !3557)
!3559 = !DILocation(line: 3924, column: 15, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 3923, column: 4)
!3561 = !DILocation(line: 3924, column: 6, scope: !3560)
!3562 = !DILocation(line: 3925, column: 26, scope: !3560)
!3563 = !DILocation(line: 3925, column: 37, scope: !3560)
!3564 = !DILocation(line: 3925, column: 42, scope: !3560)
!3565 = !DILocation(line: 3925, column: 6, scope: !3560)
!3566 = !DILocation(line: 3926, column: 15, scope: !3560)
!3567 = !DILocation(line: 3926, column: 6, scope: !3560)
!3568 = !DILocation(line: 3927, column: 4, scope: !3560)
!3569 = !DILocation(line: 3928, column: 20, scope: !3557)
!3570 = !DILocation(line: 3928, column: 2, scope: !3557)
!3571 = !DILocation(line: 3929, column: 7, scope: !3557)
!3572 = !DILocation(line: 3931, column: 8, scope: !3547)
!3573 = distinct !{!3573, !3544, !3574}
!3574 = !DILocation(line: 3931, column: 8, scope: !3524)
!3575 = !DILocation(line: 3932, column: 1, scope: !3524)
!3576 = distinct !DISubprogram(name: "peel_structs", scope: !3, file: !3, line: 3938, type: !3246, scopeLine: 3939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3577 = !DILocalVariable(name: "str", scope: !3576, file: !3, line: 3940, type: !3110)
!3578 = !DILocation(line: 3940, column: 9, scope: !3576)
!3579 = !DILocalVariable(name: "i", scope: !3576, file: !3, line: 3941, type: !7)
!3580 = !DILocation(line: 3941, column: 12, scope: !3576)
!3581 = !DILocation(line: 3943, column: 10, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 3943, column: 3)
!3583 = !DILocation(line: 3943, column: 8, scope: !3582)
!3584 = !DILocation(line: 3943, column: 15, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3582, file: !3, line: 3943, column: 3)
!3586 = !DILocation(line: 3943, column: 3, scope: !3582)
!3587 = !DILocation(line: 3944, column: 22, scope: !3585)
!3588 = !DILocation(line: 3944, column: 5, scope: !3585)
!3589 = !DILocation(line: 3943, column: 61, scope: !3585)
!3590 = !DILocation(line: 3943, column: 3, scope: !3585)
!3591 = distinct !{!3591, !3586, !3592}
!3592 = !DILocation(line: 3944, column: 25, scope: !3582)
!3593 = !DILocation(line: 3945, column: 1, scope: !3576)
!3594 = distinct !DISubprogram(name: "do_reorg", scope: !3, file: !3, line: 3952, type: !3246, scopeLine: 3953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3595 = !DILocation(line: 3955, column: 8, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3594, file: !3, line: 3955, column: 7)
!3597 = !DILocation(line: 3955, column: 7, scope: !3594)
!3598 = !DILocation(line: 3957, column: 11, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 3957, column: 11)
!3600 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 3956, column: 5)
!3601 = !DILocation(line: 3957, column: 11, scope: !3600)
!3602 = !DILocation(line: 3958, column: 11, scope: !3599)
!3603 = !DILocation(line: 3958, column: 2, scope: !3599)
!3604 = !DILocation(line: 3959, column: 7, scope: !3600)
!3605 = !DILocation(line: 3963, column: 11, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 3963, column: 11)
!3607 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 3962, column: 5)
!3608 = !DILocation(line: 3963, column: 11, scope: !3607)
!3609 = !DILocation(line: 3965, column: 13, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !3606, file: !3, line: 3964, column: 2)
!3611 = !DILocation(line: 3966, column: 6, scope: !3610)
!3612 = !DILocation(line: 3965, column: 4, scope: !3610)
!3613 = !DILocation(line: 3967, column: 2, scope: !3610)
!3614 = !DILocation(line: 3971, column: 3, scope: !3594)
!3615 = !DILocation(line: 3972, column: 3, scope: !3594)
!3616 = !DILocation(line: 3975, column: 3, scope: !3594)
!3617 = !DILocation(line: 3976, column: 18, scope: !3594)
!3618 = !DILocation(line: 3976, column: 3, scope: !3594)
!3619 = !DILocation(line: 3979, column: 3, scope: !3594)
!3620 = !DILocation(line: 3982, column: 23, scope: !3594)
!3621 = !DILocation(line: 3982, column: 3, scope: !3594)
!3622 = !DILocation(line: 3983, column: 1, scope: !3594)
!3623 = distinct !DISubprogram(name: "free_data_structs", scope: !3, file: !3, line: 3988, type: !3246, scopeLine: 3989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3624 = !DILocation(line: 3990, column: 3, scope: !3623)
!3625 = !DILocation(line: 3991, column: 3, scope: !3623)
!3626 = !DILocation(line: 3992, column: 1, scope: !3623)
!3627 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !318, file: !318, line: 184, type: !3628, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3628 = !DISubroutineType(types: !3629)
!3629 = !{!1712, !1821}
!3630 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3627, file: !318, line: 184, type: !1821)
!3631 = !DILocation(line: 184, column: 1, scope: !3627)
!3632 = distinct !DISubprogram(name: "VEC_structure_heap_alloc", scope: !3, file: !3, line: 199, type: !3633, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3633 = !DISubroutineType(types: !3634)
!3634 = !{!3017, !1821}
!3635 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3632, file: !3, line: 199, type: !1821)
!3636 = !DILocation(line: 199, column: 1, scope: !3632)
!3637 = distinct !DISubprogram(name: "program_redefines_malloc_p", scope: !3, file: !3, line: 3471, type: !3205, scopeLine: 3472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3638 = !DILocalVariable(name: "c_node", scope: !3637, file: !3, line: 3473, type: !3281)
!3639 = !DILocation(line: 3473, column: 23, scope: !3637)
!3640 = !DILocalVariable(name: "c_node2", scope: !3637, file: !3, line: 3474, type: !3281)
!3641 = !DILocation(line: 3474, column: 23, scope: !3637)
!3642 = !DILocalVariable(name: "c_edge", scope: !3637, file: !3, line: 3475, type: !3286)
!3643 = !DILocation(line: 3475, column: 23, scope: !3637)
!3644 = !DILocalVariable(name: "fndecl2", scope: !3637, file: !3, line: 3476, type: !1724)
!3645 = !DILocation(line: 3476, column: 8, scope: !3637)
!3646 = !DILocation(line: 3478, column: 17, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !3637, file: !3, line: 3478, column: 3)
!3648 = !DILocation(line: 3478, column: 15, scope: !3647)
!3649 = !DILocation(line: 3478, column: 8, scope: !3647)
!3650 = !DILocation(line: 3478, column: 31, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 3478, column: 3)
!3652 = !DILocation(line: 3478, column: 3, scope: !3647)
!3653 = !DILocation(line: 3480, column: 21, scope: !3654)
!3654 = distinct !DILexicalBlock(scope: !3655, file: !3, line: 3480, column: 7)
!3655 = distinct !DILexicalBlock(scope: !3651, file: !3, line: 3479, column: 5)
!3656 = !DILocation(line: 3480, column: 29, scope: !3654)
!3657 = !DILocation(line: 3480, column: 19, scope: !3654)
!3658 = !DILocation(line: 3480, column: 12, scope: !3654)
!3659 = !DILocation(line: 3480, column: 38, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3654, file: !3, line: 3480, column: 7)
!3661 = !DILocation(line: 3480, column: 7, scope: !3654)
!3662 = !DILocation(line: 3482, column: 14, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 3481, column: 2)
!3664 = !DILocation(line: 3482, column: 22, scope: !3663)
!3665 = !DILocation(line: 3482, column: 12, scope: !3663)
!3666 = !DILocation(line: 3483, column: 14, scope: !3663)
!3667 = !DILocation(line: 3483, column: 23, scope: !3663)
!3668 = !DILocation(line: 3483, column: 12, scope: !3663)
!3669 = !DILocation(line: 3484, column: 24, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3663, file: !3, line: 3484, column: 8)
!3671 = !DILocation(line: 3484, column: 32, scope: !3670)
!3672 = !DILocation(line: 3484, column: 8, scope: !3670)
!3673 = !DILocation(line: 3484, column: 8, scope: !3663)
!3674 = !DILocalVariable(name: "fname", scope: !3675, file: !3, line: 3486, type: !1928)
!3675 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 3485, column: 6)
!3676 = !DILocation(line: 3486, column: 21, scope: !3675)
!3677 = !DILocation(line: 3486, column: 39, scope: !3675)
!3678 = !DILocation(line: 3486, column: 29, scope: !3675)
!3679 = !DILocation(line: 3488, column: 32, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3675, file: !3, line: 3488, column: 12)
!3681 = !DILocation(line: 3488, column: 40, scope: !3680)
!3682 = !DILocation(line: 3488, column: 13, scope: !3680)
!3683 = !DILocation(line: 3488, column: 51, scope: !3680)
!3684 = !DILocation(line: 3489, column: 5, scope: !3680)
!3685 = !DILocation(line: 3489, column: 9, scope: !3680)
!3686 = !DILocation(line: 3489, column: 38, scope: !3680)
!3687 = !DILocation(line: 3490, column: 5, scope: !3680)
!3688 = !DILocation(line: 3490, column: 9, scope: !3680)
!3689 = !DILocation(line: 3490, column: 38, scope: !3680)
!3690 = !DILocation(line: 3491, column: 5, scope: !3680)
!3691 = !DILocation(line: 3491, column: 9, scope: !3680)
!3692 = !DILocation(line: 3491, column: 38, scope: !3680)
!3693 = !DILocation(line: 3488, column: 12, scope: !3675)
!3694 = !DILocation(line: 3492, column: 3, scope: !3680)
!3695 = !DILocation(line: 3496, column: 12, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3675, file: !3, line: 3496, column: 12)
!3697 = !DILocation(line: 3496, column: 41, scope: !3696)
!3698 = !DILocation(line: 3497, column: 5, scope: !3696)
!3699 = !DILocation(line: 3497, column: 17, scope: !3696)
!3700 = !DILocation(line: 3497, column: 9, scope: !3696)
!3701 = !DILocation(line: 3498, column: 5, scope: !3696)
!3702 = !DILocation(line: 3498, column: 17, scope: !3696)
!3703 = !DILocation(line: 3498, column: 9, scope: !3696)
!3704 = !DILocation(line: 3496, column: 12, scope: !3675)
!3705 = !DILocation(line: 3499, column: 3, scope: !3696)
!3706 = !DILocation(line: 3500, column: 6, scope: !3675)
!3707 = !DILocation(line: 3501, column: 2, scope: !3663)
!3708 = !DILocation(line: 3480, column: 55, scope: !3660)
!3709 = !DILocation(line: 3480, column: 63, scope: !3660)
!3710 = !DILocation(line: 3480, column: 53, scope: !3660)
!3711 = !DILocation(line: 3480, column: 7, scope: !3660)
!3712 = distinct !{!3712, !3661, !3713}
!3713 = !DILocation(line: 3501, column: 2, scope: !3654)
!3714 = !DILocation(line: 3502, column: 5, scope: !3655)
!3715 = !DILocation(line: 3478, column: 48, scope: !3651)
!3716 = !DILocation(line: 3478, column: 56, scope: !3651)
!3717 = !DILocation(line: 3478, column: 46, scope: !3651)
!3718 = !DILocation(line: 3478, column: 3, scope: !3651)
!3719 = distinct !{!3719, !3652, !3720}
!3720 = !DILocation(line: 3502, column: 5, scope: !3647)
!3721 = !DILocation(line: 3504, column: 3, scope: !3637)
!3722 = !DILocation(line: 3505, column: 1, scope: !3637)
!3723 = distinct !DISubprogram(name: "build_data_structure", scope: !3, file: !3, line: 3413, type: !3724, scopeLine: 3414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3724 = !DISubroutineType(types: !3725)
!3725 = !{null, !3726}
!3726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!3727 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !3723, file: !3, line: 3413, type: !3726)
!3728 = !DILocation(line: 3413, column: 42, scope: !3723)
!3729 = !DILocalVariable(name: "var", scope: !3723, file: !3, line: 3415, type: !1724)
!3730 = !DILocation(line: 3415, column: 8, scope: !3723)
!3731 = !DILocalVariable(name: "type", scope: !3723, file: !3, line: 3415, type: !1724)
!3732 = !DILocation(line: 3415, column: 13, scope: !3723)
!3733 = !DILocalVariable(name: "var_list", scope: !3723, file: !3, line: 3416, type: !1724)
!3734 = !DILocation(line: 3416, column: 8, scope: !3723)
!3735 = !DILocalVariable(name: "current_varpool", scope: !3723, file: !3, line: 3417, type: !3385)
!3736 = !DILocation(line: 3417, column: 24, scope: !3723)
!3737 = !DILocalVariable(name: "c_node", scope: !3723, file: !3, line: 3418, type: !3281)
!3738 = !DILocation(line: 3418, column: 23, scope: !3723)
!3739 = !DILocation(line: 3421, column: 3, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3723, file: !3, line: 3421, column: 3)
!3741 = !DILocation(line: 3421, column: 3, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3740, file: !3, line: 3421, column: 3)
!3743 = !DILocation(line: 3423, column: 13, scope: !3744)
!3744 = distinct !DILexicalBlock(scope: !3742, file: !3, line: 3422, column: 5)
!3745 = !DILocation(line: 3423, column: 30, scope: !3744)
!3746 = !DILocation(line: 3423, column: 11, scope: !3744)
!3747 = !DILocation(line: 3424, column: 25, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 3424, column: 11)
!3749 = !DILocation(line: 3424, column: 37, scope: !3748)
!3750 = !DILocation(line: 3424, column: 11, scope: !3748)
!3751 = !DILocation(line: 3424, column: 11, scope: !3744)
!3752 = !DILocation(line: 3425, column: 17, scope: !3748)
!3753 = !DILocation(line: 3425, column: 2, scope: !3748)
!3754 = !DILocation(line: 3426, column: 5, scope: !3744)
!3755 = distinct !{!3755, !3739, !3756}
!3756 = !DILocation(line: 3426, column: 5, scope: !3740)
!3757 = !DILocation(line: 3430, column: 17, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3723, file: !3, line: 3430, column: 3)
!3759 = !DILocation(line: 3430, column: 15, scope: !3758)
!3760 = !DILocation(line: 3430, column: 8, scope: !3758)
!3761 = !DILocation(line: 3430, column: 31, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3758, file: !3, line: 3430, column: 3)
!3763 = !DILocation(line: 3430, column: 3, scope: !3758)
!3764 = !DILocalVariable(name: "avail", scope: !3765, file: !3, line: 3432, type: !1342)
!3765 = distinct !DILexicalBlock(scope: !3762, file: !3, line: 3431, column: 5)
!3766 = !DILocation(line: 3432, column: 25, scope: !3765)
!3767 = !DILocation(line: 3433, column: 37, scope: !3765)
!3768 = !DILocation(line: 3433, column: 2, scope: !3765)
!3769 = !DILocation(line: 3436, column: 11, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3765, file: !3, line: 3436, column: 11)
!3771 = !DILocation(line: 3436, column: 17, scope: !3770)
!3772 = !DILocation(line: 3436, column: 32, scope: !3770)
!3773 = !DILocation(line: 3436, column: 35, scope: !3770)
!3774 = !DILocation(line: 3436, column: 41, scope: !3770)
!3775 = !DILocation(line: 3436, column: 11, scope: !3765)
!3776 = !DILocalVariable(name: "fn", scope: !3777, file: !3, line: 3438, type: !2441)
!3777 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 3437, column: 2)
!3778 = !DILocation(line: 3438, column: 21, scope: !3777)
!3779 = !DILocation(line: 3438, column: 26, scope: !3777)
!3780 = !DILocation(line: 3440, column: 15, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 3440, column: 4)
!3782 = !DILocation(line: 3440, column: 13, scope: !3781)
!3783 = !DILocation(line: 3440, column: 9, scope: !3781)
!3784 = !DILocation(line: 3440, column: 46, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3781, file: !3, line: 3440, column: 4)
!3786 = !DILocation(line: 3440, column: 4, scope: !3781)
!3787 = !DILocation(line: 3442, column: 26, scope: !3788)
!3788 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 3442, column: 12)
!3789 = !DILocation(line: 3442, column: 38, scope: !3788)
!3790 = !DILocation(line: 3442, column: 12, scope: !3788)
!3791 = !DILocation(line: 3442, column: 12, scope: !3785)
!3792 = !DILocation(line: 3443, column: 18, scope: !3788)
!3793 = !DILocation(line: 3443, column: 3, scope: !3788)
!3794 = !DILocation(line: 3442, column: 54, scope: !3788)
!3795 = !DILocation(line: 3441, column: 15, scope: !3785)
!3796 = !DILocation(line: 3441, column: 13, scope: !3785)
!3797 = !DILocation(line: 3440, column: 4, scope: !3785)
!3798 = distinct !{!3798, !3786, !3799}
!3799 = !DILocation(line: 3443, column: 22, scope: !3781)
!3800 = !DILocation(line: 3445, column: 8, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 3445, column: 8)
!3802 = !DILocation(line: 3445, column: 11, scope: !3801)
!3803 = !DILocation(line: 3445, column: 8, scope: !3777)
!3804 = !DILocation(line: 3448, column: 8, scope: !3805)
!3805 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 3446, column: 6)
!3806 = !DILocation(line: 3450, column: 8, scope: !3805)
!3807 = !DILocation(line: 3454, column: 20, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 3454, column: 4)
!3809 = !DILocation(line: 3454, column: 24, scope: !3808)
!3810 = !DILocation(line: 3454, column: 18, scope: !3808)
!3811 = !DILocation(line: 3454, column: 9, scope: !3808)
!3812 = !DILocation(line: 3454, column: 37, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 3454, column: 4)
!3814 = !DILocation(line: 3454, column: 4, scope: !3808)
!3815 = !DILocation(line: 3457, column: 14, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3813, file: !3, line: 3456, column: 6)
!3817 = !DILocation(line: 3457, column: 12, scope: !3816)
!3818 = !DILocation(line: 3459, column: 26, scope: !3819)
!3819 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 3459, column: 12)
!3820 = !DILocation(line: 3459, column: 38, scope: !3819)
!3821 = !DILocation(line: 3459, column: 12, scope: !3819)
!3822 = !DILocation(line: 3459, column: 12, scope: !3816)
!3823 = !DILocation(line: 3460, column: 18, scope: !3819)
!3824 = !DILocation(line: 3460, column: 3, scope: !3819)
!3825 = !DILocation(line: 3461, column: 6, scope: !3816)
!3826 = !DILocation(line: 3455, column: 20, scope: !3813)
!3827 = !DILocation(line: 3455, column: 18, scope: !3813)
!3828 = !DILocation(line: 3454, column: 4, scope: !3813)
!3829 = distinct !{!3829, !3814, !3830}
!3830 = !DILocation(line: 3461, column: 6, scope: !3808)
!3831 = !DILocation(line: 3462, column: 2, scope: !3777)
!3832 = !DILocation(line: 3463, column: 5, scope: !3765)
!3833 = !DILocation(line: 3430, column: 48, scope: !3762)
!3834 = !DILocation(line: 3430, column: 56, scope: !3762)
!3835 = !DILocation(line: 3430, column: 46, scope: !3762)
!3836 = !DILocation(line: 3430, column: 3, scope: !3762)
!3837 = distinct !{!3837, !3763, !3838}
!3838 = !DILocation(line: 3463, column: 5, scope: !3758)
!3839 = !DILocation(line: 3464, column: 1, scope: !3723)
!3840 = distinct !DISubprogram(name: "analyze_struct_form", scope: !3, file: !3, line: 3399, type: !3724, scopeLine: 3400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3841 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !3840, file: !3, line: 3399, type: !3726)
!3842 = !DILocation(line: 3399, column: 41, scope: !3840)
!3843 = !DILocalVariable(name: "str", scope: !3840, file: !3, line: 3401, type: !3110)
!3844 = !DILocation(line: 3401, column: 9, scope: !3840)
!3845 = !DILocalVariable(name: "i", scope: !3840, file: !3, line: 3402, type: !7)
!3846 = !DILocation(line: 3402, column: 12, scope: !3840)
!3847 = !DILocation(line: 3404, column: 10, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 3404, column: 3)
!3849 = !DILocation(line: 3404, column: 8, scope: !3848)
!3850 = !DILocation(line: 3404, column: 15, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 3404, column: 3)
!3852 = !DILocation(line: 3404, column: 3, scope: !3848)
!3853 = !DILocation(line: 3405, column: 24, scope: !3851)
!3854 = !DILocation(line: 3405, column: 29, scope: !3851)
!3855 = !DILocation(line: 3405, column: 5, scope: !3851)
!3856 = !DILocation(line: 3404, column: 61, scope: !3851)
!3857 = !DILocation(line: 3404, column: 3, scope: !3851)
!3858 = distinct !{!3858, !3852, !3859}
!3859 = !DILocation(line: 3405, column: 45, scope: !3848)
!3860 = !DILocation(line: 3406, column: 1, scope: !3840)
!3861 = distinct !DISubprogram(name: "exclude_escaping_types", scope: !3, file: !3, line: 3386, type: !3724, scopeLine: 3387, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3862 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !3861, file: !3, line: 3386, type: !3726)
!3863 = !DILocation(line: 3386, column: 44, scope: !3861)
!3864 = !DILocation(line: 3388, column: 39, scope: !3861)
!3865 = !DILocation(line: 3388, column: 3, scope: !3861)
!3866 = !DILocation(line: 3389, column: 27, scope: !3861)
!3867 = !DILocation(line: 3389, column: 3, scope: !3861)
!3868 = !DILocation(line: 3390, column: 29, scope: !3861)
!3869 = !DILocation(line: 3390, column: 3, scope: !3861)
!3870 = !DILocation(line: 3391, column: 1, scope: !3861)
!3871 = distinct !DISubprogram(name: "exclude_types_with_bit_fields", scope: !3, file: !3, line: 3368, type: !3724, scopeLine: 3369, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3872 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !3871, file: !3, line: 3368, type: !3726)
!3873 = !DILocation(line: 3368, column: 51, scope: !3871)
!3874 = !DILocalVariable(name: "str", scope: !3871, file: !3, line: 3370, type: !3110)
!3875 = !DILocation(line: 3370, column: 9, scope: !3871)
!3876 = !DILocalVariable(name: "i", scope: !3871, file: !3, line: 3371, type: !7)
!3877 = !DILocation(line: 3371, column: 12, scope: !3871)
!3878 = !DILocation(line: 3373, column: 10, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3871, file: !3, line: 3373, column: 3)
!3880 = !DILocation(line: 3373, column: 8, scope: !3879)
!3881 = !DILocation(line: 3373, column: 15, scope: !3882)
!3882 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 3373, column: 3)
!3883 = !DILocation(line: 3373, column: 3, scope: !3879)
!3884 = !DILocation(line: 3374, column: 22, scope: !3882)
!3885 = !DILocation(line: 3374, column: 27, scope: !3882)
!3886 = !DILocation(line: 3374, column: 5, scope: !3882)
!3887 = !DILocation(line: 3373, column: 61, scope: !3882)
!3888 = !DILocation(line: 3373, column: 3, scope: !3882)
!3889 = distinct !{!3889, !3883, !3890}
!3890 = !DILocation(line: 3374, column: 43, scope: !3879)
!3891 = !DILocation(line: 3375, column: 1, scope: !3871)
!3892 = distinct !DISubprogram(name: "remove_unsuitable_types", scope: !3, file: !3, line: 3347, type: !3893, scopeLine: 3348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3893 = !DISubroutineType(types: !3894)
!3894 = !{null, !1712}
!3895 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !3892, file: !3, line: 3347, type: !1712)
!3896 = !DILocation(line: 3347, column: 44, scope: !3892)
!3897 = !DILocalVariable(name: "str", scope: !3892, file: !3, line: 3349, type: !3110)
!3898 = !DILocation(line: 3349, column: 9, scope: !3892)
!3899 = !DILocalVariable(name: "type", scope: !3892, file: !3, line: 3350, type: !1724)
!3900 = !DILocation(line: 3350, column: 8, scope: !3892)
!3901 = !DILocalVariable(name: "i", scope: !3892, file: !3, line: 3351, type: !7)
!3902 = !DILocation(line: 3351, column: 12, scope: !3892)
!3903 = !DILocalVariable(name: "j", scope: !3892, file: !3, line: 3351, type: !7)
!3904 = !DILocation(line: 3351, column: 15, scope: !3892)
!3905 = !DILocation(line: 3353, column: 10, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3892, file: !3, line: 3353, column: 3)
!3907 = !DILocation(line: 3353, column: 8, scope: !3906)
!3908 = !DILocation(line: 3353, column: 15, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3906, file: !3, line: 3353, column: 3)
!3910 = !DILocation(line: 3353, column: 3, scope: !3906)
!3911 = !DILocation(line: 3354, column: 12, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 3354, column: 5)
!3913 = !DILocation(line: 3354, column: 10, scope: !3912)
!3914 = !DILocation(line: 3354, column: 17, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 3354, column: 5)
!3916 = !DILocation(line: 3354, column: 5, scope: !3912)
!3917 = !DILocation(line: 3355, column: 27, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 3355, column: 11)
!3919 = !DILocation(line: 3355, column: 32, scope: !3918)
!3920 = !DILocation(line: 3355, column: 38, scope: !3918)
!3921 = !DILocation(line: 3355, column: 11, scope: !3918)
!3922 = !DILocation(line: 3355, column: 11, scope: !3915)
!3923 = !DILocation(line: 3357, column: 22, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3918, file: !3, line: 3356, column: 2)
!3925 = !DILocation(line: 3357, column: 4, scope: !3924)
!3926 = !DILocation(line: 3358, column: 4, scope: !3924)
!3927 = !DILocation(line: 3355, column: 42, scope: !3918)
!3928 = !DILocation(line: 3354, column: 63, scope: !3915)
!3929 = !DILocation(line: 3354, column: 5, scope: !3915)
!3930 = distinct !{!3930, !3916, !3931}
!3931 = !DILocation(line: 3359, column: 2, scope: !3912)
!3932 = !DILocation(line: 3353, column: 63, scope: !3909)
!3933 = !DILocation(line: 3353, column: 3, scope: !3909)
!3934 = distinct !{!3934, !3910, !3935}
!3935 = !DILocation(line: 3359, column: 2, scope: !3906)
!3936 = !DILocation(line: 3360, column: 1, scope: !3892)
!3937 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !318, file: !318, line: 184, type: !3724, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3938 = !DILocalVariable(name: "vec_", arg: 1, scope: !3937, file: !318, line: 184, type: !3726)
!3939 = !DILocation(line: 184, column: 1, scope: !3937)
!3940 = !DILocation(line: 184, column: 1, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3937, file: !318, line: 184, column: 1)
!3942 = distinct !DISubprogram(name: "is_gimple_call", scope: !1304, file: !1304, line: 1870, type: !3943, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3943 = !DISubroutineType(types: !3944)
!3944 = !{!1844, !3077}
!3945 = !DILocalVariable(name: "gs", arg: 1, scope: !3942, file: !1304, line: 1870, type: !3077)
!3946 = !DILocation(line: 1870, column: 30, scope: !3942)
!3947 = !DILocation(line: 1872, column: 23, scope: !3942)
!3948 = !DILocation(line: 1872, column: 10, scope: !3942)
!3949 = !DILocation(line: 1872, column: 27, scope: !3942)
!3950 = !DILocation(line: 1872, column: 3, scope: !3942)
!3951 = distinct !DISubprogram(name: "gimple_code", scope: !1304, file: !1304, line: 1052, type: !3952, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3952 = !DISubroutineType(types: !3953)
!3953 = !{!1303, !3077}
!3954 = !DILocalVariable(name: "g", arg: 1, scope: !3951, file: !1304, line: 1052, type: !3077)
!3955 = !DILocation(line: 1052, column: 27, scope: !3951)
!3956 = !DILocation(line: 1054, column: 10, scope: !3951)
!3957 = !DILocation(line: 1054, column: 13, scope: !3951)
!3958 = !DILocation(line: 1054, column: 20, scope: !3951)
!3959 = !DILocation(line: 1054, column: 3, scope: !3951)
!3960 = distinct !DISubprogram(name: "is_candidate", scope: !3, file: !3, line: 2014, type: !3961, scopeLine: 2015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!3961 = !DISubroutineType(types: !3962)
!3962 = !{!1844, !1724, !2089, !3726}
!3963 = !DILocalVariable(name: "var", arg: 1, scope: !3960, file: !3, line: 2014, type: !1724)
!3964 = !DILocation(line: 2014, column: 20, scope: !3960)
!3965 = !DILocalVariable(name: "type_p", arg: 2, scope: !3960, file: !3, line: 2014, type: !2089)
!3966 = !DILocation(line: 2014, column: 31, scope: !3960)
!3967 = !DILocalVariable(name: "unsuitable_types", arg: 3, scope: !3960, file: !3, line: 2014, type: !3726)
!3968 = !DILocation(line: 2014, column: 58, scope: !3960)
!3969 = !DILocalVariable(name: "type", scope: !3960, file: !3, line: 2016, type: !1724)
!3970 = !DILocation(line: 2016, column: 8, scope: !3960)
!3971 = !DILocalVariable(name: "initialized", scope: !3960, file: !3, line: 2017, type: !1844)
!3972 = !DILocation(line: 2017, column: 8, scope: !3960)
!3973 = !DILocation(line: 2019, column: 4, scope: !3960)
!3974 = !DILocation(line: 2019, column: 11, scope: !3960)
!3975 = !DILocation(line: 2021, column: 8, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 2021, column: 7)
!3977 = !DILocation(line: 2021, column: 7, scope: !3960)
!3978 = !DILocation(line: 2022, column: 5, scope: !3976)
!3979 = !DILocation(line: 2025, column: 7, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 2025, column: 7)
!3981 = !DILocation(line: 2025, column: 23, scope: !3980)
!3982 = !DILocation(line: 2026, column: 7, scope: !3980)
!3983 = !DILocation(line: 2026, column: 10, scope: !3980)
!3984 = !DILocation(line: 2026, column: 29, scope: !3980)
!3985 = !DILocation(line: 2025, column: 7, scope: !3960)
!3986 = !DILocation(line: 2027, column: 17, scope: !3980)
!3987 = !DILocation(line: 2027, column: 5, scope: !3980)
!3988 = !DILocation(line: 2029, column: 27, scope: !3960)
!3989 = !DILocation(line: 2029, column: 10, scope: !3960)
!3990 = !DILocation(line: 2029, column: 8, scope: !3960)
!3991 = !DILocation(line: 2031, column: 7, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 2031, column: 7)
!3993 = !DILocation(line: 2031, column: 7, scope: !3960)
!3994 = !DILocation(line: 2033, column: 14, scope: !3995)
!3995 = distinct !DILexicalBlock(scope: !3992, file: !3, line: 2032, column: 5)
!3996 = !DILocation(line: 2033, column: 12, scope: !3995)
!3997 = !DILocation(line: 2034, column: 11, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 2034, column: 11)
!3999 = !DILocation(line: 2034, column: 28, scope: !3998)
!4000 = !DILocation(line: 2034, column: 11, scope: !3995)
!4001 = !DILocation(line: 2035, column: 4, scope: !3998)
!4002 = !DILocation(line: 2038, column: 8, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 2038, column: 8)
!4004 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 2037, column: 2)
!4005 = !DILocation(line: 2038, column: 20, scope: !4003)
!4006 = !DILocation(line: 2038, column: 23, scope: !4003)
!4007 = !DILocation(line: 2038, column: 40, scope: !4003)
!4008 = !DILocation(line: 2038, column: 44, scope: !4003)
!4009 = !DILocation(line: 2038, column: 43, scope: !4003)
!4010 = !DILocation(line: 2038, column: 8, scope: !4004)
!4011 = !DILocation(line: 2040, column: 12, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 2040, column: 12)
!4013 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 2039, column: 6)
!4014 = !DILocation(line: 2040, column: 12, scope: !4013)
!4015 = !DILocation(line: 2042, column: 14, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 2041, column: 3)
!4017 = !DILocation(line: 2042, column: 5, scope: !4016)
!4018 = !DILocation(line: 2043, column: 25, scope: !4016)
!4019 = !DILocation(line: 2043, column: 36, scope: !4016)
!4020 = !DILocation(line: 2043, column: 5, scope: !4016)
!4021 = !DILocation(line: 2044, column: 14, scope: !4016)
!4022 = !DILocation(line: 2044, column: 5, scope: !4016)
!4023 = !DILocation(line: 2045, column: 3, scope: !4016)
!4024 = !DILocation(line: 2046, column: 29, scope: !4013)
!4025 = !DILocation(line: 2046, column: 47, scope: !4013)
!4026 = !DILocation(line: 2046, column: 8, scope: !4013)
!4027 = !DILocation(line: 2047, column: 6, scope: !4013)
!4028 = !DILocation(line: 2048, column: 14, scope: !4004)
!4029 = !DILocation(line: 2048, column: 5, scope: !4004)
!4030 = !DILocation(line: 2048, column: 12, scope: !4004)
!4031 = !DILocation(line: 2049, column: 4, scope: !4004)
!4032 = !DILocation(line: 2053, column: 5, scope: !3992)
!4033 = !DILocation(line: 2054, column: 1, scope: !3960)
!4034 = distinct !DISubprogram(name: "add_structure", scope: !3, file: !3, line: 2986, type: !4035, scopeLine: 2987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4035 = !DISubroutineType(types: !4036)
!4036 = !{null, !1724}
!4037 = !DILocalVariable(name: "type", arg: 1, scope: !4034, file: !3, line: 2986, type: !1724)
!4038 = !DILocation(line: 2986, column: 21, scope: !4034)
!4039 = !DILocalVariable(name: "node", scope: !4034, file: !3, line: 2988, type: !3030)
!4040 = !DILocation(line: 2988, column: 25, scope: !4034)
!4041 = !DILocalVariable(name: "i", scope: !4034, file: !3, line: 2989, type: !7)
!4042 = !DILocation(line: 2989, column: 12, scope: !4034)
!4043 = !DILocalVariable(name: "num_fields", scope: !4034, file: !3, line: 2990, type: !1821)
!4044 = !DILocation(line: 2990, column: 7, scope: !4034)
!4045 = !DILocation(line: 2992, column: 10, scope: !4034)
!4046 = !DILocation(line: 2992, column: 8, scope: !4034)
!4047 = !DILocation(line: 2994, column: 23, scope: !4034)
!4048 = !DILocation(line: 2994, column: 7, scope: !4034)
!4049 = !DILocation(line: 2994, column: 5, scope: !4034)
!4050 = !DILocation(line: 2996, column: 7, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 2996, column: 7)
!4052 = !DILocation(line: 2996, column: 12, scope: !4051)
!4053 = !DILocation(line: 2996, column: 9, scope: !4051)
!4054 = !DILocation(line: 2996, column: 7, scope: !4034)
!4055 = !DILocation(line: 2997, column: 5, scope: !4051)
!4056 = !DILocation(line: 2999, column: 31, scope: !4034)
!4057 = !DILocation(line: 2999, column: 16, scope: !4034)
!4058 = !DILocation(line: 2999, column: 14, scope: !4034)
!4059 = !DILocation(line: 3000, column: 15, scope: !4034)
!4060 = !DILocation(line: 3000, column: 8, scope: !4034)
!4061 = !DILocation(line: 3000, column: 13, scope: !4034)
!4062 = !DILocation(line: 3001, column: 21, scope: !4034)
!4063 = !DILocation(line: 3001, column: 8, scope: !4034)
!4064 = !DILocation(line: 3001, column: 19, scope: !4034)
!4065 = !DILocation(line: 3002, column: 29, scope: !4034)
!4066 = !DILocation(line: 3002, column: 35, scope: !4034)
!4067 = !DILocation(line: 3002, column: 17, scope: !4034)
!4068 = !DILocation(line: 3002, column: 8, scope: !4034)
!4069 = !DILocation(line: 3002, column: 15, scope: !4034)
!4070 = !DILocation(line: 3003, column: 8, scope: !4034)
!4071 = !DILocation(line: 3003, column: 26, scope: !4034)
!4072 = !DILocation(line: 3004, column: 15, scope: !4034)
!4073 = !DILocation(line: 3004, column: 8, scope: !4034)
!4074 = !DILocation(line: 3004, column: 13, scope: !4034)
!4075 = !DILocation(line: 3005, column: 20, scope: !4034)
!4076 = !DILocation(line: 3005, column: 8, scope: !4034)
!4077 = !DILocation(line: 3005, column: 18, scope: !4034)
!4078 = !DILocation(line: 3006, column: 8, scope: !4034)
!4079 = !DILocation(line: 3006, column: 14, scope: !4034)
!4080 = !DILocation(line: 3008, column: 3, scope: !4034)
!4081 = !DILocation(line: 3010, column: 7, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 3010, column: 7)
!4083 = !DILocation(line: 3010, column: 7, scope: !4034)
!4084 = !DILocation(line: 3012, column: 16, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4082, file: !3, line: 3011, column: 5)
!4086 = !DILocation(line: 3012, column: 7, scope: !4085)
!4087 = !DILocation(line: 3013, column: 27, scope: !4085)
!4088 = !DILocation(line: 3013, column: 38, scope: !4085)
!4089 = !DILocation(line: 3013, column: 7, scope: !4085)
!4090 = !DILocation(line: 3014, column: 16, scope: !4085)
!4091 = !DILocation(line: 3014, column: 7, scope: !4085)
!4092 = !DILocation(line: 3015, column: 5, scope: !4085)
!4093 = !DILocation(line: 3016, column: 1, scope: !4034)
!4094 = distinct !DISubprogram(name: "get_type_of_var", scope: !3, file: !3, line: 222, type: !4095, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4095 = !DISubroutineType(types: !4096)
!4096 = !{!1724, !1724}
!4097 = !DILocalVariable(name: "var", arg: 1, scope: !4094, file: !3, line: 222, type: !1724)
!4098 = !DILocation(line: 222, column: 23, scope: !4094)
!4099 = !DILocation(line: 224, column: 8, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4094, file: !3, line: 224, column: 7)
!4101 = !DILocation(line: 224, column: 7, scope: !4094)
!4102 = !DILocation(line: 225, column: 5, scope: !4100)
!4103 = !DILocation(line: 227, column: 7, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4094, file: !3, line: 227, column: 7)
!4105 = !DILocation(line: 227, column: 23, scope: !4104)
!4106 = !DILocation(line: 227, column: 7, scope: !4094)
!4107 = !DILocation(line: 228, column: 14, scope: !4104)
!4108 = !DILocation(line: 228, column: 7, scope: !4104)
!4109 = !DILocation(line: 230, column: 12, scope: !4104)
!4110 = !DILocation(line: 230, column: 5, scope: !4104)
!4111 = !DILocation(line: 231, column: 1, scope: !4094)
!4112 = distinct !DISubprogram(name: "strip_type", scope: !3, file: !3, line: 208, type: !4095, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4113 = !DILocalVariable(name: "type", arg: 1, scope: !4112, file: !3, line: 208, type: !1724)
!4114 = !DILocation(line: 208, column: 18, scope: !4112)
!4115 = !DILocation(line: 210, column: 3, scope: !4112)
!4116 = !DILocation(line: 212, column: 3, scope: !4112)
!4117 = !DILocation(line: 212, column: 10, scope: !4112)
!4118 = !DILocation(line: 213, column: 3, scope: !4112)
!4119 = !DILocation(line: 213, column: 6, scope: !4112)
!4120 = !DILocation(line: 213, column: 23, scope: !4112)
!4121 = !DILocation(line: 214, column: 12, scope: !4112)
!4122 = !DILocation(line: 214, column: 10, scope: !4112)
!4123 = distinct !{!4123, !4116, !4121}
!4124 = !DILocation(line: 216, column: 11, scope: !4112)
!4125 = !DILocation(line: 216, column: 3, scope: !4112)
!4126 = distinct !DISubprogram(name: "add_unsuitable_type", scope: !3, file: !3, line: 1555, type: !4127, scopeLine: 1556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4127 = !DISubroutineType(types: !4128)
!4128 = !{null, !3726, !1724}
!4129 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !4126, file: !3, line: 1555, type: !3726)
!4130 = !DILocation(line: 1555, column: 41, scope: !4126)
!4131 = !DILocalVariable(name: "type", arg: 2, scope: !4126, file: !3, line: 1555, type: !1724)
!4132 = !DILocation(line: 1555, column: 64, scope: !4126)
!4133 = !DILocalVariable(name: "i", scope: !4126, file: !3, line: 1557, type: !7)
!4134 = !DILocation(line: 1557, column: 12, scope: !4126)
!4135 = !DILocalVariable(name: "t", scope: !4126, file: !3, line: 1558, type: !1724)
!4136 = !DILocation(line: 1558, column: 8, scope: !4126)
!4137 = !DILocation(line: 1560, column: 8, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4126, file: !3, line: 1560, column: 7)
!4139 = !DILocation(line: 1560, column: 7, scope: !4126)
!4140 = !DILocation(line: 1561, column: 5, scope: !4138)
!4141 = !DILocation(line: 1563, column: 10, scope: !4126)
!4142 = !DILocation(line: 1563, column: 8, scope: !4126)
!4143 = !DILocation(line: 1565, column: 10, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4126, file: !3, line: 1565, column: 3)
!4145 = !DILocation(line: 1565, column: 8, scope: !4144)
!4146 = !DILocation(line: 1565, column: 15, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 1565, column: 3)
!4148 = !DILocation(line: 1565, column: 3, scope: !4144)
!4149 = !DILocation(line: 1566, column: 25, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 1566, column: 9)
!4151 = !DILocation(line: 1566, column: 28, scope: !4150)
!4152 = !DILocation(line: 1566, column: 9, scope: !4150)
!4153 = !DILocation(line: 1566, column: 9, scope: !4147)
!4154 = !DILocation(line: 1567, column: 7, scope: !4150)
!4155 = !DILocation(line: 1566, column: 32, scope: !4150)
!4156 = !DILocation(line: 1565, column: 61, scope: !4147)
!4157 = !DILocation(line: 1565, column: 3, scope: !4147)
!4158 = distinct !{!4158, !4148, !4159}
!4159 = !DILocation(line: 1567, column: 7, scope: !4144)
!4160 = !DILocation(line: 1569, column: 7, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4126, file: !3, line: 1569, column: 7)
!4162 = !DILocation(line: 1569, column: 12, scope: !4161)
!4163 = !DILocation(line: 1569, column: 9, scope: !4161)
!4164 = !DILocation(line: 1569, column: 7, scope: !4126)
!4165 = !DILocation(line: 1570, column: 5, scope: !4161)
!4166 = !DILocation(line: 1571, column: 1, scope: !4126)
!4167 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !318, file: !318, line: 182, type: !4168, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4168 = !DISubroutineType(types: !4169)
!4169 = !{!1821, !4170, !7, !2089}
!4170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4171, size: 64)
!4171 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1717)
!4172 = !DILocalVariable(name: "vec_", arg: 1, scope: !4167, file: !318, line: 182, type: !4170)
!4173 = !DILocation(line: 182, column: 1, scope: !4167)
!4174 = !DILocalVariable(name: "ix_", arg: 2, scope: !4167, file: !318, line: 182, type: !7)
!4175 = !DILocalVariable(name: "ptr", arg: 3, scope: !4167, file: !318, line: 182, type: !2089)
!4176 = !DILocation(line: 182, column: 1, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4167, file: !318, line: 182, column: 1)
!4178 = !DILocation(line: 182, column: 1, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4177, file: !318, line: 182, column: 1)
!4180 = !DILocation(line: 182, column: 1, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4177, file: !318, line: 182, column: 1)
!4182 = distinct !DISubprogram(name: "is_equal_types", scope: !3, file: !3, line: 1599, type: !4183, scopeLine: 1600, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4183 = !DISubroutineType(types: !4184)
!4184 = !{!1844, !1724, !1724}
!4185 = !DILocalVariable(name: "type1", arg: 1, scope: !4182, file: !3, line: 1599, type: !1724)
!4186 = !DILocation(line: 1599, column: 22, scope: !4182)
!4187 = !DILocalVariable(name: "type2", arg: 2, scope: !4182, file: !3, line: 1599, type: !1724)
!4188 = !DILocation(line: 1599, column: 34, scope: !4182)
!4189 = !DILocalVariable(name: "name1", scope: !4182, file: !3, line: 1601, type: !1928)
!4190 = !DILocation(line: 1601, column: 16, scope: !4182)
!4191 = !DILocalVariable(name: "name2", scope: !4182, file: !3, line: 1601, type: !1928)
!4192 = !DILocation(line: 1601, column: 24, scope: !4182)
!4193 = !DILocation(line: 1603, column: 9, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1603, column: 7)
!4195 = !DILocation(line: 1603, column: 15, scope: !4194)
!4196 = !DILocation(line: 1603, column: 18, scope: !4194)
!4197 = !DILocation(line: 1604, column: 7, scope: !4194)
!4198 = !DILocation(line: 1604, column: 11, scope: !4194)
!4199 = !DILocation(line: 1604, column: 17, scope: !4194)
!4200 = !DILocation(line: 1604, column: 20, scope: !4194)
!4201 = !DILocation(line: 1603, column: 7, scope: !4182)
!4202 = !DILocation(line: 1605, column: 5, scope: !4194)
!4203 = !DILocation(line: 1607, column: 8, scope: !4204)
!4204 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1607, column: 7)
!4205 = !DILocation(line: 1607, column: 14, scope: !4204)
!4206 = !DILocation(line: 1607, column: 18, scope: !4204)
!4207 = !DILocation(line: 1607, column: 7, scope: !4182)
!4208 = !DILocation(line: 1608, column: 5, scope: !4204)
!4209 = !DILocation(line: 1610, column: 7, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1610, column: 7)
!4211 = !DILocation(line: 1610, column: 28, scope: !4210)
!4212 = !DILocation(line: 1610, column: 25, scope: !4210)
!4213 = !DILocation(line: 1610, column: 7, scope: !4182)
!4214 = !DILocation(line: 1611, column: 5, scope: !4210)
!4215 = !DILocation(line: 1613, column: 7, scope: !4216)
!4216 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1613, column: 7)
!4217 = !DILocation(line: 1613, column: 16, scope: !4216)
!4218 = !DILocation(line: 1613, column: 13, scope: !4216)
!4219 = !DILocation(line: 1613, column: 7, scope: !4182)
!4220 = !DILocation(line: 1614, column: 7, scope: !4216)
!4221 = !DILocation(line: 1616, column: 7, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1616, column: 7)
!4223 = !DILocation(line: 1616, column: 36, scope: !4222)
!4224 = !DILocation(line: 1616, column: 33, scope: !4222)
!4225 = !DILocation(line: 1616, column: 7, scope: !4182)
!4226 = !DILocation(line: 1617, column: 7, scope: !4222)
!4227 = !DILocation(line: 1619, column: 26, scope: !4182)
!4228 = !DILocation(line: 1619, column: 11, scope: !4182)
!4229 = !DILocation(line: 1619, column: 9, scope: !4182)
!4230 = !DILocation(line: 1620, column: 26, scope: !4182)
!4231 = !DILocation(line: 1620, column: 11, scope: !4182)
!4232 = !DILocation(line: 1620, column: 9, scope: !4182)
!4233 = !DILocation(line: 1622, column: 7, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1622, column: 7)
!4235 = !DILocation(line: 1622, column: 13, scope: !4234)
!4236 = !DILocation(line: 1622, column: 16, scope: !4234)
!4237 = !DILocation(line: 1622, column: 7, scope: !4182)
!4238 = !DILocation(line: 1623, column: 20, scope: !4234)
!4239 = !DILocation(line: 1623, column: 27, scope: !4234)
!4240 = !DILocation(line: 1623, column: 12, scope: !4234)
!4241 = !DILocation(line: 1623, column: 34, scope: !4234)
!4242 = !DILocation(line: 1623, column: 5, scope: !4234)
!4243 = !DILocation(line: 1625, column: 11, scope: !4182)
!4244 = !DILocation(line: 1625, column: 3, scope: !4182)
!4245 = !DILocation(line: 1630, column: 25, scope: !4246)
!4246 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1629, column: 7)
!4247 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1626, column: 5)
!4248 = !DILocation(line: 1630, column: 44, scope: !4246)
!4249 = !DILocation(line: 1630, column: 9, scope: !4246)
!4250 = !DILocation(line: 1630, column: 2, scope: !4246)
!4251 = !DILocalVariable(name: "field1", scope: !4252, file: !3, line: 1639, type: !1724)
!4252 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1638, column: 7)
!4253 = !DILocation(line: 1639, column: 7, scope: !4252)
!4254 = !DILocalVariable(name: "field2", scope: !4252, file: !3, line: 1639, type: !1724)
!4255 = !DILocation(line: 1639, column: 15, scope: !4252)
!4256 = !DILocation(line: 1642, column: 16, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 1642, column: 2)
!4258 = !DILocation(line: 1642, column: 14, scope: !4257)
!4259 = !DILocation(line: 1642, column: 46, scope: !4257)
!4260 = !DILocation(line: 1642, column: 44, scope: !4257)
!4261 = !DILocation(line: 1642, column: 7, scope: !4257)
!4262 = !DILocation(line: 1643, column: 7, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4257, file: !3, line: 1642, column: 2)
!4264 = !DILocation(line: 1643, column: 14, scope: !4263)
!4265 = !DILocation(line: 1643, column: 17, scope: !4263)
!4266 = !DILocation(line: 0, scope: !4263)
!4267 = !DILocation(line: 1642, column: 2, scope: !4257)
!4268 = !DILocation(line: 1646, column: 27, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1646, column: 10)
!4270 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 1645, column: 4)
!4271 = !DILocation(line: 1646, column: 35, scope: !4269)
!4272 = !DILocation(line: 1646, column: 11, scope: !4269)
!4273 = !DILocation(line: 1646, column: 10, scope: !4270)
!4274 = !DILocation(line: 1647, column: 8, scope: !4269)
!4275 = !DILocation(line: 1648, column: 4, scope: !4270)
!4276 = !DILocation(line: 1644, column: 16, scope: !4263)
!4277 = !DILocation(line: 1644, column: 14, scope: !4263)
!4278 = !DILocation(line: 1644, column: 46, scope: !4263)
!4279 = !DILocation(line: 1644, column: 44, scope: !4263)
!4280 = !DILocation(line: 1642, column: 2, scope: !4263)
!4281 = distinct !{!4281, !4267, !4282}
!4282 = !DILocation(line: 1648, column: 4, scope: !4257)
!4283 = !DILocation(line: 1649, column: 6, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 1649, column: 6)
!4285 = !DILocation(line: 1649, column: 13, scope: !4284)
!4286 = !DILocation(line: 1649, column: 16, scope: !4284)
!4287 = !DILocation(line: 1649, column: 6, scope: !4252)
!4288 = !DILocation(line: 1650, column: 4, scope: !4284)
!4289 = !DILocation(line: 1652, column: 4, scope: !4284)
!4290 = !DILocation(line: 1658, column: 6, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1658, column: 6)
!4292 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1657, column: 7)
!4293 = !DILocation(line: 1658, column: 31, scope: !4291)
!4294 = !DILocation(line: 1658, column: 28, scope: !4291)
!4295 = !DILocation(line: 1659, column: 6, scope: !4291)
!4296 = !DILocation(line: 1659, column: 9, scope: !4291)
!4297 = !DILocation(line: 1659, column: 35, scope: !4291)
!4298 = !DILocation(line: 1659, column: 32, scope: !4291)
!4299 = !DILocation(line: 1658, column: 6, scope: !4292)
!4300 = !DILocation(line: 1660, column: 4, scope: !4291)
!4301 = !DILocation(line: 1662, column: 7, scope: !4247)
!4302 = !DILocalVariable(name: "d1", scope: !4303, file: !3, line: 1666, type: !1724)
!4303 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1665, column: 7)
!4304 = !DILocation(line: 1666, column: 7, scope: !4303)
!4305 = !DILocalVariable(name: "d2", scope: !4303, file: !3, line: 1666, type: !1724)
!4306 = !DILocation(line: 1666, column: 11, scope: !4303)
!4307 = !DILocalVariable(name: "max1", scope: !4303, file: !3, line: 1667, type: !1724)
!4308 = !DILocation(line: 1667, column: 7, scope: !4303)
!4309 = !DILocalVariable(name: "min1", scope: !4303, file: !3, line: 1667, type: !1724)
!4310 = !DILocation(line: 1667, column: 13, scope: !4303)
!4311 = !DILocalVariable(name: "max2", scope: !4303, file: !3, line: 1667, type: !1724)
!4312 = !DILocation(line: 1667, column: 19, scope: !4303)
!4313 = !DILocalVariable(name: "min2", scope: !4303, file: !3, line: 1667, type: !1724)
!4314 = !DILocation(line: 1667, column: 25, scope: !4303)
!4315 = !DILocation(line: 1669, column: 23, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1669, column: 6)
!4317 = !DILocation(line: 1669, column: 42, scope: !4316)
!4318 = !DILocation(line: 1669, column: 7, scope: !4316)
!4319 = !DILocation(line: 1669, column: 6, scope: !4303)
!4320 = !DILocation(line: 1670, column: 4, scope: !4316)
!4321 = !DILocation(line: 1672, column: 7, scope: !4303)
!4322 = !DILocation(line: 1672, column: 5, scope: !4303)
!4323 = !DILocation(line: 1673, column: 7, scope: !4303)
!4324 = !DILocation(line: 1673, column: 5, scope: !4303)
!4325 = !DILocation(line: 1675, column: 7, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1675, column: 6)
!4327 = !DILocation(line: 1675, column: 10, scope: !4326)
!4328 = !DILocation(line: 1675, column: 14, scope: !4326)
!4329 = !DILocation(line: 1675, column: 6, scope: !4303)
!4330 = !DILocation(line: 1676, column: 4, scope: !4326)
!4331 = !DILocation(line: 1678, column: 9, scope: !4303)
!4332 = !DILocation(line: 1678, column: 7, scope: !4303)
!4333 = !DILocation(line: 1679, column: 9, scope: !4303)
!4334 = !DILocation(line: 1679, column: 7, scope: !4303)
!4335 = !DILocation(line: 1680, column: 9, scope: !4303)
!4336 = !DILocation(line: 1680, column: 7, scope: !4303)
!4337 = !DILocation(line: 1681, column: 9, scope: !4303)
!4338 = !DILocation(line: 1681, column: 7, scope: !4303)
!4339 = !DILocation(line: 1683, column: 6, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 1683, column: 6)
!4341 = !DILocation(line: 1683, column: 11, scope: !4340)
!4342 = !DILocation(line: 1683, column: 14, scope: !4340)
!4343 = !DILocation(line: 1683, column: 19, scope: !4340)
!4344 = !DILocation(line: 1683, column: 22, scope: !4340)
!4345 = !DILocation(line: 1683, column: 27, scope: !4340)
!4346 = !DILocation(line: 1683, column: 30, scope: !4340)
!4347 = !DILocation(line: 1684, column: 6, scope: !4340)
!4348 = !DILocation(line: 1684, column: 9, scope: !4340)
!4349 = !DILocation(line: 1684, column: 29, scope: !4340)
!4350 = !DILocation(line: 1684, column: 26, scope: !4340)
!4351 = !DILocation(line: 1685, column: 6, scope: !4340)
!4352 = !DILocation(line: 1685, column: 9, scope: !4340)
!4353 = !DILocation(line: 1685, column: 26, scope: !4340)
!4354 = !DILocation(line: 1686, column: 6, scope: !4340)
!4355 = !DILocation(line: 1686, column: 9, scope: !4340)
!4356 = !DILocation(line: 1686, column: 29, scope: !4340)
!4357 = !DILocation(line: 1686, column: 26, scope: !4340)
!4358 = !DILocation(line: 1687, column: 6, scope: !4340)
!4359 = !DILocation(line: 1687, column: 9, scope: !4340)
!4360 = !DILocation(line: 1687, column: 26, scope: !4340)
!4361 = !DILocation(line: 1688, column: 6, scope: !4340)
!4362 = !DILocation(line: 1688, column: 29, scope: !4340)
!4363 = !DILocation(line: 1688, column: 35, scope: !4340)
!4364 = !DILocation(line: 1688, column: 9, scope: !4340)
!4365 = !DILocation(line: 1689, column: 6, scope: !4340)
!4366 = !DILocation(line: 1689, column: 29, scope: !4340)
!4367 = !DILocation(line: 1689, column: 35, scope: !4340)
!4368 = !DILocation(line: 1689, column: 9, scope: !4340)
!4369 = !DILocation(line: 1683, column: 6, scope: !4303)
!4370 = !DILocation(line: 1690, column: 4, scope: !4340)
!4371 = !DILocation(line: 1692, column: 7, scope: !4247)
!4372 = !DILocation(line: 1695, column: 2, scope: !4247)
!4373 = !DILocation(line: 1696, column: 5, scope: !4247)
!4374 = !DILocation(line: 1698, column: 3, scope: !4182)
!4375 = !DILocation(line: 1699, column: 1, scope: !4182)
!4376 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !318, file: !318, line: 182, type: !4377, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4377 = !DISubroutineType(types: !4378)
!4378 = !{!7, !4170}
!4379 = !DILocalVariable(name: "vec_", arg: 1, scope: !4376, file: !318, line: 182, type: !4170)
!4380 = !DILocation(line: 182, column: 1, scope: !4376)
!4381 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !318, file: !318, line: 184, type: !4382, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4382 = !DISubroutineType(types: !4383)
!4383 = !{!2089, !3726, !1724}
!4384 = !DILocalVariable(name: "vec_", arg: 1, scope: !4381, file: !318, line: 184, type: !3726)
!4385 = !DILocation(line: 184, column: 1, scope: !4381)
!4386 = !DILocalVariable(name: "obj_", arg: 2, scope: !4381, file: !318, line: 184, type: !1724)
!4387 = distinct !DISubprogram(name: "get_type_name", scope: !3, file: !3, line: 1576, type: !4388, scopeLine: 1577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4388 = !DISubroutineType(types: !4389)
!4389 = !{!1928, !1724}
!4390 = !DILocalVariable(name: "type", arg: 1, scope: !4387, file: !3, line: 1576, type: !1724)
!4391 = !DILocation(line: 1576, column: 21, scope: !4387)
!4392 = !DILocation(line: 1578, column: 9, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1578, column: 7)
!4394 = !DILocation(line: 1578, column: 7, scope: !4387)
!4395 = !DILocation(line: 1579, column: 5, scope: !4393)
!4396 = !DILocation(line: 1581, column: 7, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1581, column: 7)
!4398 = !DILocation(line: 1581, column: 36, scope: !4397)
!4399 = !DILocation(line: 1581, column: 7, scope: !4387)
!4400 = !DILocation(line: 1582, column: 12, scope: !4397)
!4401 = !DILocation(line: 1582, column: 5, scope: !4397)
!4402 = !DILocation(line: 1583, column: 12, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4397, file: !3, line: 1583, column: 12)
!4404 = !DILocation(line: 1583, column: 41, scope: !4403)
!4405 = !DILocation(line: 1584, column: 5, scope: !4403)
!4406 = !DILocation(line: 1584, column: 8, scope: !4403)
!4407 = !DILocation(line: 1583, column: 12, scope: !4397)
!4408 = !DILocation(line: 1585, column: 12, scope: !4403)
!4409 = !DILocation(line: 1585, column: 5, scope: !4403)
!4410 = !DILocation(line: 1587, column: 5, scope: !4403)
!4411 = !DILocation(line: 1588, column: 1, scope: !4387)
!4412 = distinct !DISubprogram(name: "compare_fields", scope: !3, file: !3, line: 255, type: !4183, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4413 = !DILocalVariable(name: "field1", arg: 1, scope: !4412, file: !3, line: 255, type: !1724)
!4414 = !DILocation(line: 255, column: 22, scope: !4412)
!4415 = !DILocalVariable(name: "field2", arg: 2, scope: !4412, file: !3, line: 255, type: !1724)
!4416 = !DILocation(line: 255, column: 35, scope: !4412)
!4417 = !DILocation(line: 257, column: 7, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 257, column: 7)
!4419 = !DILocation(line: 257, column: 26, scope: !4418)
!4420 = !DILocation(line: 257, column: 29, scope: !4418)
!4421 = !DILocation(line: 257, column: 7, scope: !4412)
!4422 = !DILocalVariable(name: "name1", scope: !4423, file: !3, line: 259, type: !1928)
!4423 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 258, column: 5)
!4424 = !DILocation(line: 259, column: 19, scope: !4423)
!4425 = !DILocation(line: 259, column: 27, scope: !4423)
!4426 = !DILocalVariable(name: "name2", scope: !4423, file: !3, line: 260, type: !1928)
!4427 = !DILocation(line: 260, column: 19, scope: !4423)
!4428 = !DILocation(line: 260, column: 27, scope: !4423)
!4429 = !DILocation(line: 262, column: 7, scope: !4423)
!4430 = !DILocation(line: 264, column: 19, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 264, column: 11)
!4432 = !DILocation(line: 264, column: 26, scope: !4431)
!4433 = !DILocation(line: 264, column: 11, scope: !4431)
!4434 = !DILocation(line: 264, column: 11, scope: !4423)
!4435 = !DILocation(line: 265, column: 2, scope: !4431)
!4436 = !DILocation(line: 267, column: 5, scope: !4423)
!4437 = !DILocation(line: 268, column: 12, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 268, column: 12)
!4439 = !DILocation(line: 268, column: 31, scope: !4438)
!4440 = !DILocation(line: 268, column: 34, scope: !4438)
!4441 = !DILocation(line: 268, column: 12, scope: !4418)
!4442 = !DILocation(line: 269, column: 5, scope: !4438)
!4443 = !DILocation(line: 271, column: 24, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 271, column: 7)
!4445 = !DILocation(line: 271, column: 44, scope: !4444)
!4446 = !DILocation(line: 271, column: 8, scope: !4444)
!4447 = !DILocation(line: 271, column: 7, scope: !4412)
!4448 = !DILocation(line: 272, column: 5, scope: !4444)
!4449 = !DILocation(line: 274, column: 3, scope: !4412)
!4450 = !DILocation(line: 275, column: 1, scope: !4412)
!4451 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !318, file: !318, line: 184, type: !4452, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4452 = !DISubroutineType(types: !4453)
!4453 = !{!1821, !3726, !1821}
!4454 = !DILocalVariable(name: "vec_", arg: 1, scope: !4451, file: !318, line: 184, type: !3726)
!4455 = !DILocation(line: 184, column: 1, scope: !4451)
!4456 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4451, file: !318, line: 184, type: !1821)
!4457 = !DILocalVariable(name: "extend", scope: !4451, file: !318, line: 184, type: !1821)
!4458 = !DILocation(line: 184, column: 1, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4451, file: !318, line: 184, column: 1)
!4460 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !318, file: !318, line: 182, type: !4461, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4461 = !DISubroutineType(types: !4462)
!4462 = !{!2089, !4463, !1724}
!4463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1717, size: 64)
!4464 = !DILocalVariable(name: "vec_", arg: 1, scope: !4460, file: !318, line: 182, type: !4463)
!4465 = !DILocation(line: 182, column: 1, scope: !4460)
!4466 = !DILocalVariable(name: "obj_", arg: 2, scope: !4460, file: !318, line: 182, type: !1724)
!4467 = !DILocalVariable(name: "slot_", scope: !4460, file: !318, line: 182, type: !2089)
!4468 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !318, file: !318, line: 182, type: !4469, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4469 = !DISubroutineType(types: !4470)
!4470 = !{!1821, !4463, !1821}
!4471 = !DILocalVariable(name: "vec_", arg: 1, scope: !4468, file: !318, line: 182, type: !4463)
!4472 = !DILocation(line: 182, column: 1, scope: !4468)
!4473 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4468, file: !318, line: 182, type: !1821)
!4474 = distinct !DISubprogram(name: "find_structure", scope: !3, file: !3, line: 1055, type: !4475, scopeLine: 1056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4475 = !DISubroutineType(types: !4476)
!4476 = !{!7, !1724}
!4477 = !DILocalVariable(name: "type", arg: 1, scope: !4474, file: !3, line: 1055, type: !1724)
!4478 = !DILocation(line: 1055, column: 22, scope: !4474)
!4479 = !DILocalVariable(name: "str", scope: !4474, file: !3, line: 1057, type: !3110)
!4480 = !DILocation(line: 1057, column: 9, scope: !4474)
!4481 = !DILocalVariable(name: "i", scope: !4474, file: !3, line: 1058, type: !7)
!4482 = !DILocation(line: 1058, column: 12, scope: !4474)
!4483 = !DILocation(line: 1060, column: 10, scope: !4474)
!4484 = !DILocation(line: 1060, column: 8, scope: !4474)
!4485 = !DILocation(line: 1062, column: 10, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 1062, column: 3)
!4487 = !DILocation(line: 1062, column: 8, scope: !4486)
!4488 = !DILocation(line: 1062, column: 15, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 1062, column: 3)
!4490 = !DILocation(line: 1062, column: 3, scope: !4486)
!4491 = !DILocation(line: 1063, column: 25, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 1063, column: 9)
!4493 = !DILocation(line: 1063, column: 30, scope: !4492)
!4494 = !DILocation(line: 1063, column: 36, scope: !4492)
!4495 = !DILocation(line: 1063, column: 9, scope: !4492)
!4496 = !DILocation(line: 1063, column: 9, scope: !4489)
!4497 = !DILocation(line: 1064, column: 14, scope: !4492)
!4498 = !DILocation(line: 1064, column: 7, scope: !4492)
!4499 = !DILocation(line: 1063, column: 40, scope: !4492)
!4500 = !DILocation(line: 1062, column: 61, scope: !4489)
!4501 = !DILocation(line: 1062, column: 3, scope: !4489)
!4502 = distinct !{!4502, !4490, !4503}
!4503 = !DILocation(line: 1064, column: 14, scope: !4486)
!4504 = !DILocation(line: 1066, column: 10, scope: !4474)
!4505 = !DILocation(line: 1066, column: 3, scope: !4474)
!4506 = !DILocation(line: 1067, column: 1, scope: !4474)
!4507 = distinct !DISubprogram(name: "VEC_structure_base_length", scope: !3, file: !3, line: 198, type: !4508, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4508 = !DISubroutineType(types: !4509)
!4509 = !{!7, !4510}
!4510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4511, size: 64)
!4511 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3022)
!4512 = !DILocalVariable(name: "vec_", arg: 1, scope: !4507, file: !3, line: 198, type: !4510)
!4513 = !DILocation(line: 198, column: 1, scope: !4507)
!4514 = distinct !DISubprogram(name: "get_fields", scope: !3, file: !3, line: 2337, type: !4515, scopeLine: 2338, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4515 = !DISubroutineType(types: !4516)
!4516 = !{!3037, !1724, !1821}
!4517 = !DILocalVariable(name: "struct_decl", arg: 1, scope: !4514, file: !3, line: 2337, type: !1724)
!4518 = !DILocation(line: 2337, column: 18, scope: !4514)
!4519 = !DILocalVariable(name: "num_fields", arg: 2, scope: !4514, file: !3, line: 2337, type: !1821)
!4520 = !DILocation(line: 2337, column: 35, scope: !4514)
!4521 = !DILocalVariable(name: "list", scope: !4514, file: !3, line: 2339, type: !3037)
!4522 = !DILocation(line: 2339, column: 23, scope: !4514)
!4523 = !DILocalVariable(name: "t", scope: !4514, file: !3, line: 2340, type: !1724)
!4524 = !DILocation(line: 2340, column: 8, scope: !4514)
!4525 = !DILocation(line: 2340, column: 12, scope: !4514)
!4526 = !DILocalVariable(name: "idx", scope: !4514, file: !3, line: 2341, type: !1821)
!4527 = !DILocation(line: 2341, column: 7, scope: !4514)
!4528 = !DILocation(line: 2343, column: 10, scope: !4514)
!4529 = !DILocation(line: 2343, column: 8, scope: !4514)
!4530 = !DILocation(line: 2345, column: 12, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 2345, column: 3)
!4532 = !DILocation(line: 2345, column: 8, scope: !4531)
!4533 = !DILocation(line: 2345, column: 18, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4531, file: !3, line: 2345, column: 3)
!4535 = !DILocation(line: 2345, column: 3, scope: !4531)
!4536 = !DILocation(line: 2346, column: 9, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4534, file: !3, line: 2346, column: 9)
!4538 = !DILocation(line: 2346, column: 23, scope: !4537)
!4539 = !DILocation(line: 2346, column: 9, scope: !4534)
!4540 = !DILocation(line: 2348, column: 20, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 2347, column: 7)
!4542 = !DILocation(line: 2348, column: 2, scope: !4541)
!4543 = !DILocation(line: 2348, column: 7, scope: !4541)
!4544 = !DILocation(line: 2348, column: 12, scope: !4541)
!4545 = !DILocation(line: 2348, column: 18, scope: !4541)
!4546 = !DILocation(line: 2349, column: 19, scope: !4541)
!4547 = !DILocation(line: 2349, column: 2, scope: !4541)
!4548 = !DILocation(line: 2349, column: 7, scope: !4541)
!4549 = !DILocation(line: 2349, column: 12, scope: !4541)
!4550 = !DILocation(line: 2349, column: 17, scope: !4541)
!4551 = !DILocation(line: 2351, column: 4, scope: !4541)
!4552 = !DILocation(line: 2350, column: 2, scope: !4541)
!4553 = !DILocation(line: 2350, column: 7, scope: !4541)
!4554 = !DILocation(line: 2350, column: 12, scope: !4541)
!4555 = !DILocation(line: 2350, column: 22, scope: !4541)
!4556 = !DILocation(line: 2352, column: 2, scope: !4541)
!4557 = !DILocation(line: 2352, column: 7, scope: !4541)
!4558 = !DILocation(line: 2352, column: 12, scope: !4541)
!4559 = !DILocation(line: 2352, column: 18, scope: !4541)
!4560 = !DILocation(line: 2353, column: 2, scope: !4541)
!4561 = !DILocation(line: 2353, column: 7, scope: !4541)
!4562 = !DILocation(line: 2353, column: 12, scope: !4541)
!4563 = !DILocation(line: 2353, column: 26, scope: !4541)
!4564 = !DILocation(line: 2354, column: 7, scope: !4541)
!4565 = !DILocation(line: 2346, column: 26, scope: !4537)
!4566 = !DILocation(line: 2345, column: 25, scope: !4534)
!4567 = !DILocation(line: 2345, column: 23, scope: !4534)
!4568 = !DILocation(line: 2345, column: 44, scope: !4534)
!4569 = !DILocation(line: 2345, column: 3, scope: !4534)
!4570 = distinct !{!4570, !4535, !4571}
!4571 = !DILocation(line: 2354, column: 7, scope: !4531)
!4572 = !DILocation(line: 2356, column: 10, scope: !4514)
!4573 = !DILocation(line: 2356, column: 3, scope: !4514)
!4574 = distinct !DISubprogram(name: "acc_hash", scope: !3, file: !3, line: 2319, type: !2492, scopeLine: 2320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4575 = !DILocalVariable(name: "x", arg: 1, scope: !4574, file: !3, line: 2319, type: !2495)
!4576 = !DILocation(line: 2319, column: 23, scope: !4574)
!4577 = !DILocation(line: 2321, column: 10, scope: !4574)
!4578 = !DILocation(line: 2321, column: 58, scope: !4574)
!4579 = !DILocation(line: 2321, column: 30, scope: !4574)
!4580 = !DILocation(line: 2321, column: 62, scope: !4574)
!4581 = !DILocation(line: 2321, column: 29, scope: !4574)
!4582 = !DILocation(line: 2321, column: 3, scope: !4574)
!4583 = distinct !DISubprogram(name: "acc_eq", scope: !3, file: !3, line: 2327, type: !2500, scopeLine: 2328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4584 = !DILocalVariable(name: "x", arg: 1, scope: !4583, file: !3, line: 2327, type: !2495)
!4585 = !DILocation(line: 2327, column: 21, scope: !4583)
!4586 = !DILocalVariable(name: "y", arg: 2, scope: !4583, file: !3, line: 2327, type: !2495)
!4587 = !DILocation(line: 2327, column: 36, scope: !4583)
!4588 = !DILocation(line: 2329, column: 39, scope: !4583)
!4589 = !DILocation(line: 2329, column: 11, scope: !4583)
!4590 = !DILocation(line: 2329, column: 43, scope: !4583)
!4591 = !DILocation(line: 2329, column: 65, scope: !4583)
!4592 = !DILocation(line: 2329, column: 51, scope: !4583)
!4593 = !DILocation(line: 2329, column: 48, scope: !4583)
!4594 = !DILocation(line: 2329, column: 3, scope: !4583)
!4595 = distinct !DISubprogram(name: "VEC_structure_heap_safe_push", scope: !3, file: !3, line: 199, type: !4596, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4596 = !DISubroutineType(types: !4597)
!4597 = !{!4598, !4599, !4600}
!4598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3029, size: 64)
!4599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3017, size: 64)
!4600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4601, size: 64)
!4601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3029)
!4602 = !DILocalVariable(name: "vec_", arg: 1, scope: !4595, file: !3, line: 199, type: !4599)
!4603 = !DILocation(line: 199, column: 1, scope: !4595)
!4604 = !DILocalVariable(name: "obj_", arg: 2, scope: !4595, file: !3, line: 199, type: !4600)
!4605 = distinct !DISubprogram(name: "VEC_structure_base_iterate", scope: !3, file: !3, line: 198, type: !4606, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4606 = !DISubroutineType(types: !4607)
!4607 = !{!1821, !4608, !7, !4609}
!4608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3022, size: 64)
!4609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4598, size: 64)
!4610 = !DILocalVariable(name: "vec_", arg: 1, scope: !4605, file: !3, line: 198, type: !4608)
!4611 = !DILocation(line: 198, column: 1, scope: !4605)
!4612 = !DILocalVariable(name: "ix_", arg: 2, scope: !4605, file: !3, line: 198, type: !7)
!4613 = !DILocalVariable(name: "ptr", arg: 3, scope: !4605, file: !3, line: 198, type: !4609)
!4614 = !DILocation(line: 198, column: 1, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 198, column: 1)
!4616 = !DILocation(line: 198, column: 1, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 198, column: 1)
!4618 = !DILocation(line: 198, column: 1, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 198, column: 1)
!4620 = distinct !DISubprogram(name: "field_acc_hash", scope: !3, file: !3, line: 2059, type: !2492, scopeLine: 2060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4621 = !DILocalVariable(name: "x", arg: 1, scope: !4620, file: !3, line: 2059, type: !2495)
!4622 = !DILocation(line: 2059, column: 29, scope: !4620)
!4623 = !DILocation(line: 2061, column: 10, scope: !4620)
!4624 = !DILocation(line: 2061, column: 64, scope: !4620)
!4625 = !DILocation(line: 2061, column: 30, scope: !4620)
!4626 = !DILocation(line: 2061, column: 68, scope: !4620)
!4627 = !DILocation(line: 2061, column: 29, scope: !4620)
!4628 = !DILocation(line: 2061, column: 3, scope: !4620)
!4629 = distinct !DISubprogram(name: "field_acc_eq", scope: !3, file: !3, line: 2068, type: !2500, scopeLine: 2069, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4630 = !DILocalVariable(name: "x", arg: 1, scope: !4629, file: !3, line: 2068, type: !2495)
!4631 = !DILocation(line: 2068, column: 27, scope: !4629)
!4632 = !DILocalVariable(name: "y", arg: 2, scope: !4629, file: !3, line: 2068, type: !2495)
!4633 = !DILocation(line: 2068, column: 42, scope: !4629)
!4634 = !DILocation(line: 2070, column: 45, scope: !4629)
!4635 = !DILocation(line: 2070, column: 11, scope: !4629)
!4636 = !DILocation(line: 2070, column: 49, scope: !4629)
!4637 = !DILocation(line: 2070, column: 71, scope: !4629)
!4638 = !DILocation(line: 2070, column: 57, scope: !4629)
!4639 = !DILocation(line: 2070, column: 54, scope: !4629)
!4640 = !DILocation(line: 2070, column: 3, scope: !4629)
!4641 = distinct !DISubprogram(name: "VEC_structure_heap_reserve", scope: !3, file: !3, line: 199, type: !4642, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4642 = !DISubroutineType(types: !4643)
!4643 = !{!1821, !4599, !1821}
!4644 = !DILocalVariable(name: "vec_", arg: 1, scope: !4641, file: !3, line: 199, type: !4599)
!4645 = !DILocation(line: 199, column: 1, scope: !4641)
!4646 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4641, file: !3, line: 199, type: !1821)
!4647 = !DILocalVariable(name: "extend", scope: !4641, file: !3, line: 199, type: !1821)
!4648 = !DILocation(line: 199, column: 1, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 199, column: 1)
!4650 = distinct !DISubprogram(name: "VEC_structure_base_quick_push", scope: !3, file: !3, line: 198, type: !4651, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4651 = !DISubroutineType(types: !4652)
!4652 = !{!4598, !4608, !4600}
!4653 = !DILocalVariable(name: "vec_", arg: 1, scope: !4650, file: !3, line: 198, type: !4608)
!4654 = !DILocation(line: 198, column: 1, scope: !4650)
!4655 = !DILocalVariable(name: "obj_", arg: 2, scope: !4650, file: !3, line: 198, type: !4600)
!4656 = !DILocalVariable(name: "slot_", scope: !4650, file: !3, line: 198, type: !4598)
!4657 = !DILocation(line: 198, column: 1, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 198, column: 1)
!4659 = distinct !DISubprogram(name: "VEC_structure_base_space", scope: !3, file: !3, line: 198, type: !4660, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4660 = !DISubroutineType(types: !4661)
!4661 = !{!1821, !4608, !1821}
!4662 = !DILocalVariable(name: "vec_", arg: 1, scope: !4659, file: !3, line: 198, type: !4608)
!4663 = !DILocation(line: 198, column: 1, scope: !4659)
!4664 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4659, file: !3, line: 198, type: !1821)
!4665 = distinct !DISubprogram(name: "check_struct_form", scope: !3, file: !3, line: 2958, type: !4666, scopeLine: 2959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4666 = !DISubroutineType(types: !4667)
!4667 = !{null, !3110, !3726}
!4668 = !DILocalVariable(name: "str", arg: 1, scope: !4665, file: !3, line: 2958, type: !3110)
!4669 = !DILocation(line: 2958, column: 26, scope: !4665)
!4670 = !DILocalVariable(name: "unsuitable_types", arg: 2, scope: !4665, file: !3, line: 2958, type: !3726)
!4671 = !DILocation(line: 2958, column: 50, scope: !4665)
!4672 = !DILocalVariable(name: "i", scope: !4665, file: !3, line: 2960, type: !1821)
!4673 = !DILocation(line: 2960, column: 7, scope: !4665)
!4674 = !DILocation(line: 2962, column: 10, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 2962, column: 3)
!4676 = !DILocation(line: 2962, column: 8, scope: !4675)
!4677 = !DILocation(line: 2962, column: 15, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 2962, column: 3)
!4679 = !DILocation(line: 2962, column: 19, scope: !4678)
!4680 = !DILocation(line: 2962, column: 24, scope: !4678)
!4681 = !DILocation(line: 2962, column: 17, scope: !4678)
!4682 = !DILocation(line: 2962, column: 3, scope: !4675)
!4683 = !DILocalVariable(name: "f_type", scope: !4684, file: !3, line: 2964, type: !1724)
!4684 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 2963, column: 5)
!4685 = !DILocation(line: 2964, column: 12, scope: !4684)
!4686 = !DILocation(line: 2964, column: 32, scope: !4684)
!4687 = !DILocation(line: 2964, column: 21, scope: !4684)
!4688 = !DILocation(line: 2966, column: 11, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 2966, column: 11)
!4690 = !DILocation(line: 2966, column: 30, scope: !4689)
!4691 = !DILocation(line: 2966, column: 11, scope: !4684)
!4692 = !DILocation(line: 2968, column: 25, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 2967, column: 2)
!4694 = !DILocation(line: 2968, column: 43, scope: !4693)
!4695 = !DILocation(line: 2968, column: 4, scope: !4693)
!4696 = !DILocation(line: 2969, column: 25, scope: !4693)
!4697 = !DILocation(line: 2969, column: 43, scope: !4693)
!4698 = !DILocation(line: 2969, column: 48, scope: !4693)
!4699 = !DILocation(line: 2969, column: 4, scope: !4693)
!4700 = !DILocation(line: 2970, column: 8, scope: !4701)
!4701 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 2970, column: 8)
!4702 = !DILocation(line: 2970, column: 8, scope: !4693)
!4703 = !DILocation(line: 2972, column: 17, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4701, file: !3, line: 2971, column: 6)
!4705 = !DILocation(line: 2972, column: 8, scope: !4704)
!4706 = !DILocation(line: 2973, column: 28, scope: !4704)
!4707 = !DILocation(line: 2973, column: 39, scope: !4704)
!4708 = !DILocation(line: 2973, column: 8, scope: !4704)
!4709 = !DILocation(line: 2974, column: 17, scope: !4704)
!4710 = !DILocation(line: 2974, column: 8, scope: !4704)
!4711 = !DILocation(line: 2975, column: 28, scope: !4704)
!4712 = !DILocation(line: 2975, column: 39, scope: !4704)
!4713 = !DILocation(line: 2975, column: 44, scope: !4704)
!4714 = !DILocation(line: 2975, column: 8, scope: !4704)
!4715 = !DILocation(line: 2976, column: 17, scope: !4704)
!4716 = !DILocation(line: 2976, column: 8, scope: !4704)
!4717 = !DILocation(line: 2977, column: 6, scope: !4704)
!4718 = !DILocation(line: 2978, column: 2, scope: !4693)
!4719 = !DILocation(line: 2979, column: 5, scope: !4684)
!4720 = !DILocation(line: 2962, column: 37, scope: !4678)
!4721 = !DILocation(line: 2962, column: 3, scope: !4678)
!4722 = distinct !{!4722, !4682, !4723}
!4723 = !DILocation(line: 2979, column: 5, scope: !4675)
!4724 = !DILocation(line: 2980, column: 1, scope: !4665)
!4725 = distinct !DISubprogram(name: "exclude_types_passed_to_local_func", scope: !3, file: !3, line: 2914, type: !3724, scopeLine: 2915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4726 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !4725, file: !3, line: 2914, type: !3726)
!4727 = !DILocation(line: 2914, column: 56, scope: !4725)
!4728 = !DILocalVariable(name: "c_node", scope: !4725, file: !3, line: 2916, type: !3281)
!4729 = !DILocation(line: 2916, column: 23, scope: !4725)
!4730 = !DILocation(line: 2918, column: 17, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 2918, column: 3)
!4732 = !DILocation(line: 2918, column: 15, scope: !4731)
!4733 = !DILocation(line: 2918, column: 8, scope: !4731)
!4734 = !DILocation(line: 2918, column: 31, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 2918, column: 3)
!4736 = !DILocation(line: 2918, column: 3, scope: !4731)
!4737 = !DILocation(line: 2919, column: 44, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 2919, column: 9)
!4739 = !DILocation(line: 2919, column: 9, scope: !4738)
!4740 = !DILocation(line: 2919, column: 52, scope: !4738)
!4741 = !DILocation(line: 2919, column: 9, scope: !4735)
!4742 = !DILocalVariable(name: "fn", scope: !4743, file: !3, line: 2921, type: !1724)
!4743 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 2920, column: 7)
!4744 = !DILocation(line: 2921, column: 7, scope: !4743)
!4745 = !DILocation(line: 2921, column: 12, scope: !4743)
!4746 = !DILocation(line: 2921, column: 20, scope: !4743)
!4747 = !DILocalVariable(name: "arg", scope: !4743, file: !3, line: 2922, type: !1724)
!4748 = !DILocation(line: 2922, column: 7, scope: !4743)
!4749 = !DILocation(line: 2924, column: 13, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4743, file: !3, line: 2924, column: 2)
!4751 = !DILocation(line: 2924, column: 11, scope: !4750)
!4752 = !DILocation(line: 2924, column: 7, scope: !4750)
!4753 = !DILocation(line: 2924, column: 34, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4750, file: !3, line: 2924, column: 2)
!4755 = !DILocation(line: 2924, column: 2, scope: !4750)
!4756 = !DILocalVariable(name: "type", scope: !4757, file: !3, line: 2926, type: !1724)
!4757 = distinct !DILexicalBlock(scope: !4754, file: !3, line: 2925, column: 4)
!4758 = !DILocation(line: 2926, column: 11, scope: !4757)
!4759 = !DILocation(line: 2926, column: 18, scope: !4757)
!4760 = !DILocation(line: 2928, column: 25, scope: !4757)
!4761 = !DILocation(line: 2928, column: 13, scope: !4757)
!4762 = !DILocation(line: 2928, column: 11, scope: !4757)
!4763 = !DILocation(line: 2929, column: 10, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 2929, column: 10)
!4765 = !DILocation(line: 2929, column: 27, scope: !4764)
!4766 = !DILocation(line: 2929, column: 10, scope: !4757)
!4767 = !DILocation(line: 2931, column: 24, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4764, file: !3, line: 2930, column: 8)
!4769 = !DILocation(line: 2932, column: 10, scope: !4768)
!4770 = !DILocation(line: 2931, column: 3, scope: !4768)
!4771 = !DILocation(line: 2933, column: 7, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 2933, column: 7)
!4773 = !DILocation(line: 2933, column: 7, scope: !4768)
!4774 = !DILocation(line: 2935, column: 16, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 2934, column: 5)
!4776 = !DILocation(line: 2935, column: 7, scope: !4775)
!4777 = !DILocation(line: 2936, column: 27, scope: !4775)
!4778 = !DILocation(line: 2936, column: 38, scope: !4775)
!4779 = !DILocation(line: 2936, column: 7, scope: !4775)
!4780 = !DILocation(line: 2937, column: 16, scope: !4775)
!4781 = !DILocation(line: 2937, column: 7, scope: !4775)
!4782 = !DILocation(line: 2939, column: 5, scope: !4775)
!4783 = !DILocation(line: 2940, column: 8, scope: !4768)
!4784 = !DILocation(line: 2941, column: 4, scope: !4757)
!4785 = !DILocation(line: 2924, column: 45, scope: !4754)
!4786 = !DILocation(line: 2924, column: 43, scope: !4754)
!4787 = !DILocation(line: 2924, column: 2, scope: !4754)
!4788 = distinct !{!4788, !4755, !4789}
!4789 = !DILocation(line: 2941, column: 4, scope: !4750)
!4790 = !DILocation(line: 2942, column: 7, scope: !4743)
!4791 = !DILocation(line: 2919, column: 55, scope: !4738)
!4792 = !DILocation(line: 2918, column: 48, scope: !4735)
!4793 = !DILocation(line: 2918, column: 56, scope: !4735)
!4794 = !DILocation(line: 2918, column: 46, scope: !4735)
!4795 = !DILocation(line: 2918, column: 3, scope: !4735)
!4796 = distinct !{!4796, !4736, !4797}
!4797 = !DILocation(line: 2942, column: 7, scope: !4731)
!4798 = !DILocation(line: 2943, column: 1, scope: !4725)
!4799 = distinct !DISubprogram(name: "exclude_returned_types", scope: !3, file: !3, line: 2881, type: !3724, scopeLine: 2882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4800 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !4799, file: !3, line: 2881, type: !3726)
!4801 = !DILocation(line: 2881, column: 44, scope: !4799)
!4802 = !DILocalVariable(name: "c_node", scope: !4799, file: !3, line: 2883, type: !3281)
!4803 = !DILocation(line: 2883, column: 23, scope: !4799)
!4804 = !DILocation(line: 2885, column: 17, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4799, file: !3, line: 2885, column: 3)
!4806 = !DILocation(line: 2885, column: 15, scope: !4805)
!4807 = !DILocation(line: 2885, column: 8, scope: !4805)
!4808 = !DILocation(line: 2885, column: 31, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 2885, column: 3)
!4810 = !DILocation(line: 2885, column: 3, scope: !4805)
!4811 = !DILocalVariable(name: "ret_t", scope: !4812, file: !3, line: 2887, type: !1724)
!4812 = distinct !DILexicalBlock(scope: !4809, file: !3, line: 2886, column: 5)
!4813 = !DILocation(line: 2887, column: 12, scope: !4812)
!4814 = !DILocation(line: 2887, column: 20, scope: !4812)
!4815 = !DILocation(line: 2889, column: 11, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 2889, column: 11)
!4817 = !DILocation(line: 2889, column: 11, scope: !4812)
!4818 = !DILocation(line: 2891, column: 24, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 2890, column: 2)
!4820 = !DILocation(line: 2891, column: 12, scope: !4819)
!4821 = !DILocation(line: 2891, column: 10, scope: !4819)
!4822 = !DILocation(line: 2892, column: 8, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 2892, column: 8)
!4824 = !DILocation(line: 2892, column: 26, scope: !4823)
!4825 = !DILocation(line: 2892, column: 8, scope: !4819)
!4826 = !DILocation(line: 2894, column: 29, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4823, file: !3, line: 2893, column: 6)
!4828 = !DILocation(line: 2894, column: 47, scope: !4827)
!4829 = !DILocation(line: 2894, column: 8, scope: !4827)
!4830 = !DILocation(line: 2895, column: 12, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 2895, column: 12)
!4832 = !DILocation(line: 2895, column: 12, scope: !4827)
!4833 = !DILocation(line: 2897, column: 14, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 2896, column: 3)
!4835 = !DILocation(line: 2897, column: 5, scope: !4834)
!4836 = !DILocation(line: 2898, column: 25, scope: !4834)
!4837 = !DILocation(line: 2898, column: 36, scope: !4834)
!4838 = !DILocation(line: 2898, column: 5, scope: !4834)
!4839 = !DILocation(line: 2899, column: 14, scope: !4834)
!4840 = !DILocation(line: 2899, column: 5, scope: !4834)
!4841 = !DILocation(line: 2901, column: 3, scope: !4834)
!4842 = !DILocation(line: 2902, column: 6, scope: !4827)
!4843 = !DILocation(line: 2903, column: 2, scope: !4819)
!4844 = !DILocation(line: 2904, column: 5, scope: !4812)
!4845 = !DILocation(line: 2885, column: 48, scope: !4809)
!4846 = !DILocation(line: 2885, column: 56, scope: !4809)
!4847 = !DILocation(line: 2885, column: 46, scope: !4809)
!4848 = !DILocation(line: 2885, column: 3, scope: !4809)
!4849 = distinct !{!4849, !4810, !4850}
!4850 = !DILocation(line: 2904, column: 5, scope: !4805)
!4851 = !DILocation(line: 2905, column: 1, scope: !4799)
!4852 = distinct !DISubprogram(name: "exclude_escaping_types_1", scope: !3, file: !3, line: 2868, type: !3724, scopeLine: 2869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4853 = !DILocalVariable(name: "unsuitable_types", arg: 1, scope: !4852, file: !3, line: 2868, type: !3726)
!4854 = !DILocation(line: 2868, column: 46, scope: !4852)
!4855 = !DILocalVariable(name: "str", scope: !4852, file: !3, line: 2870, type: !3110)
!4856 = !DILocation(line: 2870, column: 9, scope: !4852)
!4857 = !DILocalVariable(name: "i", scope: !4852, file: !3, line: 2871, type: !7)
!4858 = !DILocation(line: 2871, column: 12, scope: !4852)
!4859 = !DILocation(line: 2873, column: 10, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4852, file: !3, line: 2873, column: 3)
!4861 = !DILocation(line: 2873, column: 8, scope: !4860)
!4862 = !DILocation(line: 2873, column: 15, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 2873, column: 3)
!4864 = !DILocation(line: 2873, column: 3, scope: !4860)
!4865 = !DILocation(line: 2874, column: 24, scope: !4863)
!4866 = !DILocation(line: 2874, column: 29, scope: !4863)
!4867 = !DILocation(line: 2874, column: 5, scope: !4863)
!4868 = !DILocation(line: 2873, column: 61, scope: !4863)
!4869 = !DILocation(line: 2873, column: 3, scope: !4863)
!4870 = distinct !{!4870, !4864, !4871}
!4871 = !DILocation(line: 2874, column: 45, scope: !4860)
!4872 = !DILocation(line: 2875, column: 1, scope: !4852)
!4873 = distinct !DISubprogram(name: "check_type_escape", scope: !3, file: !3, line: 2301, type: !4666, scopeLine: 2302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4874 = !DILocalVariable(name: "str", arg: 1, scope: !4873, file: !3, line: 2301, type: !3110)
!4875 = !DILocation(line: 2301, column: 26, scope: !4873)
!4876 = !DILocalVariable(name: "unsuitable_types", arg: 2, scope: !4873, file: !3, line: 2301, type: !3726)
!4877 = !DILocation(line: 2301, column: 50, scope: !4873)
!4878 = !DILocalVariable(name: "type", scope: !4873, file: !3, line: 2303, type: !1724)
!4879 = !DILocation(line: 2303, column: 8, scope: !4873)
!4880 = !DILocation(line: 2303, column: 15, scope: !4873)
!4881 = !DILocation(line: 2303, column: 20, scope: !4873)
!4882 = !DILocation(line: 2305, column: 42, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4873, file: !3, line: 2305, column: 7)
!4884 = !DILocation(line: 2305, column: 8, scope: !4883)
!4885 = !DILocation(line: 2305, column: 7, scope: !4873)
!4886 = !DILocation(line: 2307, column: 11, scope: !4887)
!4887 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 2307, column: 11)
!4888 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 2306, column: 5)
!4889 = !DILocation(line: 2307, column: 11, scope: !4888)
!4890 = !DILocation(line: 2309, column: 13, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 2308, column: 2)
!4892 = !DILocation(line: 2309, column: 4, scope: !4891)
!4893 = !DILocation(line: 2310, column: 24, scope: !4891)
!4894 = !DILocation(line: 2310, column: 35, scope: !4891)
!4895 = !DILocation(line: 2310, column: 4, scope: !4891)
!4896 = !DILocation(line: 2311, column: 2, scope: !4891)
!4897 = !DILocation(line: 2312, column: 28, scope: !4888)
!4898 = !DILocation(line: 2312, column: 46, scope: !4888)
!4899 = !DILocation(line: 2312, column: 7, scope: !4888)
!4900 = !DILocation(line: 2313, column: 5, scope: !4888)
!4901 = !DILocation(line: 2314, column: 1, scope: !4873)
!4902 = distinct !DISubprogram(name: "check_bitfields", scope: !3, file: !3, line: 2844, type: !4666, scopeLine: 2845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4903 = !DILocalVariable(name: "str", arg: 1, scope: !4902, file: !3, line: 2844, type: !3110)
!4904 = !DILocation(line: 2844, column: 24, scope: !4902)
!4905 = !DILocalVariable(name: "unsuitable_types", arg: 2, scope: !4902, file: !3, line: 2844, type: !3726)
!4906 = !DILocation(line: 2844, column: 48, scope: !4902)
!4907 = !DILocalVariable(name: "type", scope: !4902, file: !3, line: 2846, type: !1724)
!4908 = !DILocation(line: 2846, column: 8, scope: !4902)
!4909 = !DILocation(line: 2846, column: 15, scope: !4902)
!4910 = !DILocation(line: 2846, column: 20, scope: !4902)
!4911 = !DILocalVariable(name: "i", scope: !4902, file: !3, line: 2847, type: !1821)
!4912 = !DILocation(line: 2847, column: 7, scope: !4902)
!4913 = !DILocation(line: 2849, column: 10, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 2849, column: 3)
!4915 = !DILocation(line: 2849, column: 8, scope: !4914)
!4916 = !DILocation(line: 2849, column: 15, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4914, file: !3, line: 2849, column: 3)
!4918 = !DILocation(line: 2849, column: 19, scope: !4917)
!4919 = !DILocation(line: 2849, column: 24, scope: !4917)
!4920 = !DILocation(line: 2849, column: 17, scope: !4917)
!4921 = !DILocation(line: 2849, column: 3, scope: !4914)
!4922 = !DILocation(line: 2850, column: 9, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4917, file: !3, line: 2850, column: 9)
!4924 = !DILocation(line: 2850, column: 9, scope: !4917)
!4925 = !DILocation(line: 2852, column: 23, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 2851, column: 7)
!4927 = !DILocation(line: 2852, column: 41, scope: !4926)
!4928 = !DILocation(line: 2852, column: 2, scope: !4926)
!4929 = !DILocation(line: 2853, column: 6, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 2853, column: 6)
!4931 = !DILocation(line: 2853, column: 6, scope: !4926)
!4932 = !DILocation(line: 2855, column: 13, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4930, file: !3, line: 2854, column: 2)
!4934 = !DILocation(line: 2855, column: 4, scope: !4933)
!4935 = !DILocation(line: 2856, column: 24, scope: !4933)
!4936 = !DILocation(line: 2856, column: 35, scope: !4933)
!4937 = !DILocation(line: 2856, column: 4, scope: !4933)
!4938 = !DILocation(line: 2857, column: 13, scope: !4933)
!4939 = !DILocation(line: 2857, column: 4, scope: !4933)
!4940 = !DILocation(line: 2858, column: 24, scope: !4933)
!4941 = !DILocation(line: 2858, column: 35, scope: !4933)
!4942 = !DILocation(line: 2858, column: 40, scope: !4933)
!4943 = !DILocation(line: 2858, column: 47, scope: !4933)
!4944 = !DILocation(line: 2858, column: 50, scope: !4933)
!4945 = !DILocation(line: 2858, column: 4, scope: !4933)
!4946 = !DILocation(line: 2859, column: 2, scope: !4933)
!4947 = !DILocation(line: 2860, column: 2, scope: !4926)
!4948 = !DILocation(line: 2849, column: 37, scope: !4917)
!4949 = !DILocation(line: 2849, column: 3, scope: !4917)
!4950 = distinct !{!4950, !4921, !4951}
!4951 = !DILocation(line: 2861, column: 7, scope: !4914)
!4952 = !DILocation(line: 2862, column: 1, scope: !4902)
!4953 = distinct !DISubprogram(name: "remove_structure", scope: !3, file: !3, line: 2409, type: !4954, scopeLine: 2410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4954 = !DISubroutineType(types: !4955)
!4955 = !{null, !7}
!4956 = !DILocalVariable(name: "i", arg: 1, scope: !4953, file: !3, line: 2409, type: !7)
!4957 = !DILocation(line: 2409, column: 28, scope: !4953)
!4958 = !DILocalVariable(name: "str", scope: !4953, file: !3, line: 2411, type: !3110)
!4959 = !DILocation(line: 2411, column: 9, scope: !4953)
!4960 = !DILocation(line: 2413, column: 7, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 2413, column: 7)
!4962 = !DILocation(line: 2413, column: 12, scope: !4961)
!4963 = !DILocation(line: 2413, column: 9, scope: !4961)
!4964 = !DILocation(line: 2413, column: 7, scope: !4953)
!4965 = !DILocation(line: 2414, column: 5, scope: !4961)
!4966 = !DILocation(line: 2416, column: 9, scope: !4953)
!4967 = !DILocation(line: 2416, column: 7, scope: !4953)
!4968 = !DILocation(line: 2420, column: 22, scope: !4953)
!4969 = !DILocation(line: 2420, column: 3, scope: !4953)
!4970 = !DILocation(line: 2421, column: 21, scope: !4953)
!4971 = !DILocation(line: 2421, column: 3, scope: !4953)
!4972 = !DILocation(line: 2422, column: 3, scope: !4953)
!4973 = !DILocation(line: 2423, column: 1, scope: !4953)
!4974 = distinct !DISubprogram(name: "VEC_structure_base_index", scope: !3, file: !3, line: 198, type: !4975, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4975 = !DISubroutineType(types: !4976)
!4976 = !{!4598, !4608, !7}
!4977 = !DILocalVariable(name: "vec_", arg: 1, scope: !4974, file: !3, line: 198, type: !4608)
!4978 = !DILocation(line: 198, column: 1, scope: !4974)
!4979 = !DILocalVariable(name: "ix_", arg: 2, scope: !4974, file: !3, line: 198, type: !7)
!4980 = !DILocation(line: 0, scope: !4974)
!4981 = distinct !DISubprogram(name: "remove_str_allocs", scope: !3, file: !3, line: 2397, type: !4982, scopeLine: 2398, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4982 = !DISubroutineType(types: !4983)
!4983 = !{null, !3110}
!4984 = !DILocalVariable(name: "str", arg: 1, scope: !4981, file: !3, line: 2397, type: !3110)
!4985 = !DILocation(line: 2397, column: 26, scope: !4981)
!4986 = !DILocation(line: 2399, column: 8, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 2399, column: 7)
!4988 = !DILocation(line: 2399, column: 7, scope: !4981)
!4989 = !DILocation(line: 2400, column: 5, scope: !4987)
!4990 = !DILocation(line: 2402, column: 7, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 2402, column: 7)
!4992 = !DILocation(line: 2402, column: 7, scope: !4981)
!4993 = !DILocation(line: 2403, column: 20, scope: !4991)
!4994 = !DILocation(line: 2403, column: 60, scope: !4991)
!4995 = !DILocation(line: 2403, column: 5, scope: !4991)
!4996 = !DILocation(line: 2404, column: 1, scope: !4981)
!4997 = distinct !DISubprogram(name: "free_data_struct", scope: !3, file: !3, line: 2114, type: !4982, scopeLine: 2115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!4998 = !DILocalVariable(name: "d_node", arg: 1, scope: !4997, file: !3, line: 2114, type: !3110)
!4999 = !DILocation(line: 2114, column: 25, scope: !4997)
!5000 = !DILocalVariable(name: "i", scope: !4997, file: !3, line: 2116, type: !1821)
!5001 = !DILocation(line: 2116, column: 7, scope: !4997)
!5002 = !DILocation(line: 2118, column: 8, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2118, column: 7)
!5004 = !DILocation(line: 2118, column: 7, scope: !4997)
!5005 = !DILocation(line: 2119, column: 5, scope: !5003)
!5006 = !DILocation(line: 2121, column: 7, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2121, column: 7)
!5008 = !DILocation(line: 2121, column: 7, scope: !4997)
!5009 = !DILocation(line: 2123, column: 16, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 2122, column: 5)
!5011 = !DILocation(line: 2123, column: 7, scope: !5010)
!5012 = !DILocation(line: 2124, column: 27, scope: !5010)
!5013 = !DILocation(line: 2124, column: 38, scope: !5010)
!5014 = !DILocation(line: 2124, column: 46, scope: !5010)
!5015 = !DILocation(line: 2124, column: 7, scope: !5010)
!5016 = !DILocation(line: 2125, column: 16, scope: !5010)
!5017 = !DILocation(line: 2125, column: 7, scope: !5010)
!5018 = !DILocation(line: 2126, column: 5, scope: !5010)
!5019 = !DILocation(line: 2129, column: 7, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2129, column: 7)
!5021 = !DILocation(line: 2129, column: 15, scope: !5020)
!5022 = !DILocation(line: 2129, column: 7, scope: !4997)
!5023 = !DILocation(line: 2131, column: 14, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 2131, column: 7)
!5025 = distinct !DILexicalBlock(scope: !5020, file: !3, line: 2130, column: 5)
!5026 = !DILocation(line: 2131, column: 12, scope: !5024)
!5027 = !DILocation(line: 2131, column: 19, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5024, file: !3, line: 2131, column: 7)
!5029 = !DILocation(line: 2131, column: 23, scope: !5028)
!5030 = !DILocation(line: 2131, column: 31, scope: !5028)
!5031 = !DILocation(line: 2131, column: 21, scope: !5028)
!5032 = !DILocation(line: 2131, column: 7, scope: !5024)
!5033 = !DILocation(line: 2132, column: 23, scope: !5028)
!5034 = !DILocation(line: 2132, column: 31, scope: !5028)
!5035 = !DILocation(line: 2132, column: 38, scope: !5028)
!5036 = !DILocation(line: 2132, column: 41, scope: !5028)
!5037 = !DILocation(line: 2132, column: 2, scope: !5028)
!5038 = !DILocation(line: 2131, column: 44, scope: !5028)
!5039 = !DILocation(line: 2131, column: 7, scope: !5028)
!5040 = distinct !{!5040, !5032, !5041}
!5041 = !DILocation(line: 2132, column: 50, scope: !5024)
!5042 = !DILocation(line: 2133, column: 13, scope: !5025)
!5043 = !DILocation(line: 2133, column: 21, scope: !5025)
!5044 = !DILocation(line: 2133, column: 7, scope: !5025)
!5045 = !DILocation(line: 2134, column: 5, scope: !5025)
!5046 = !DILocation(line: 2136, column: 7, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2136, column: 7)
!5048 = !DILocation(line: 2136, column: 15, scope: !5047)
!5049 = !DILocation(line: 2136, column: 7, scope: !4997)
!5050 = !DILocation(line: 2137, column: 21, scope: !5047)
!5051 = !DILocation(line: 2137, column: 29, scope: !5047)
!5052 = !DILocation(line: 2137, column: 6, scope: !5047)
!5053 = !DILocation(line: 2139, column: 7, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2139, column: 7)
!5055 = !DILocation(line: 2139, column: 15, scope: !5054)
!5056 = !DILocation(line: 2139, column: 7, scope: !4997)
!5057 = !DILocation(line: 2140, column: 26, scope: !5054)
!5058 = !DILocation(line: 2140, column: 34, scope: !5054)
!5059 = !DILocation(line: 2140, column: 5, scope: !5054)
!5060 = !DILocation(line: 2142, column: 7, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 2142, column: 7)
!5062 = !DILocation(line: 2142, column: 15, scope: !5061)
!5063 = !DILocation(line: 2142, column: 7, scope: !4997)
!5064 = !DILocation(line: 2143, column: 5, scope: !5061)
!5065 = !DILocation(line: 2144, column: 1, scope: !4997)
!5066 = distinct !DISubprogram(name: "VEC_structure_base_ordered_remove", scope: !3, file: !3, line: 198, type: !5067, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5067 = !DISubroutineType(types: !5068)
!5068 = !{null, !4608, !7}
!5069 = !DILocalVariable(name: "vec_", arg: 1, scope: !5066, file: !3, line: 198, type: !4608)
!5070 = !DILocation(line: 198, column: 1, scope: !5066)
!5071 = !DILocalVariable(name: "ix_", arg: 2, scope: !5066, file: !3, line: 198, type: !7)
!5072 = !DILocalVariable(name: "slot_", scope: !5066, file: !3, line: 198, type: !4598)
!5073 = distinct !DISubprogram(name: "remove_str_allocs_in_func", scope: !3, file: !3, line: 2376, type: !5074, scopeLine: 2377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5074 = !DISubroutineType(types: !5075)
!5075 = !{!1821, !2508, !2008}
!5076 = !DILocalVariable(name: "slot", arg: 1, scope: !5073, file: !3, line: 2376, type: !2508)
!5077 = !DILocation(line: 2376, column: 35, scope: !5073)
!5078 = !DILocalVariable(name: "data", arg: 2, scope: !5073, file: !3, line: 2376, type: !2008)
!5079 = !DILocation(line: 2376, column: 47, scope: !5073)
!5080 = !DILocalVariable(name: "fallocs", scope: !5073, file: !3, line: 2378, type: !3087)
!5081 = !DILocation(line: 2378, column: 13, scope: !5073)
!5082 = !DILocation(line: 2378, column: 38, scope: !5073)
!5083 = !DILocation(line: 2378, column: 23, scope: !5073)
!5084 = !DILocalVariable(name: "i", scope: !5073, file: !3, line: 2379, type: !7)
!5085 = !DILocation(line: 2379, column: 12, scope: !5073)
!5086 = !DILocalVariable(name: "call", scope: !5073, file: !3, line: 2380, type: !5087)
!5087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!5088 = !DILocation(line: 2380, column: 17, scope: !5073)
!5089 = !DILocation(line: 2382, column: 3, scope: !5073)
!5090 = !DILocation(line: 2382, column: 10, scope: !5073)
!5091 = !DILocation(line: 2384, column: 11, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 2384, column: 11)
!5093 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 2383, column: 5)
!5094 = !DILocation(line: 2384, column: 17, scope: !5092)
!5095 = !DILocation(line: 2384, column: 32, scope: !5092)
!5096 = !DILocation(line: 2384, column: 24, scope: !5092)
!5097 = !DILocation(line: 2384, column: 21, scope: !5092)
!5098 = !DILocation(line: 2384, column: 11, scope: !5093)
!5099 = !DILocation(line: 2385, column: 2, scope: !5092)
!5100 = !DILocation(line: 2387, column: 3, scope: !5092)
!5101 = distinct !{!5101, !5089, !5102}
!5102 = !DILocation(line: 2388, column: 5, scope: !5073)
!5103 = !DILocation(line: 2390, column: 3, scope: !5073)
!5104 = distinct !DISubprogram(name: "VEC_alloc_site_t_base_iterate", scope: !3, file: !3, line: 173, type: !5105, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5105 = !DISubroutineType(types: !5106)
!5106 = !{!1821, !5107, !7, !5108}
!5107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3098, size: 64)
!5108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5087, size: 64)
!5109 = !DILocalVariable(name: "vec_", arg: 1, scope: !5104, file: !3, line: 173, type: !5107)
!5110 = !DILocation(line: 173, column: 1, scope: !5104)
!5111 = !DILocalVariable(name: "ix_", arg: 2, scope: !5104, file: !3, line: 173, type: !7)
!5112 = !DILocalVariable(name: "ptr", arg: 3, scope: !5104, file: !3, line: 173, type: !5108)
!5113 = !DILocation(line: 173, column: 1, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 173, column: 1)
!5115 = !DILocation(line: 173, column: 1, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5114, file: !3, line: 173, column: 1)
!5117 = !DILocation(line: 173, column: 1, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5114, file: !3, line: 173, column: 1)
!5119 = distinct !DISubprogram(name: "VEC_alloc_site_t_base_ordered_remove", scope: !3, file: !3, line: 173, type: !5120, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5120 = !DISubroutineType(types: !5121)
!5121 = !{null, !5107, !7}
!5122 = !DILocalVariable(name: "vec_", arg: 1, scope: !5119, file: !3, line: 173, type: !5107)
!5123 = !DILocation(line: 173, column: 1, scope: !5119)
!5124 = !DILocalVariable(name: "ix_", arg: 2, scope: !5119, file: !3, line: 173, type: !7)
!5125 = !DILocalVariable(name: "slot_", scope: !5119, file: !3, line: 173, type: !5087)
!5126 = distinct !DISubprogram(name: "free_field_accesses", scope: !3, file: !3, line: 1714, type: !5127, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5127 = !DISubroutineType(types: !5128)
!5128 = !{null, !2485}
!5129 = !DILocalVariable(name: "f_accs", arg: 1, scope: !5126, file: !3, line: 1714, type: !2485)
!5130 = !DILocation(line: 1714, column: 29, scope: !5126)
!5131 = !DILocation(line: 1716, column: 7, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 1716, column: 7)
!5133 = !DILocation(line: 1716, column: 7, scope: !5126)
!5134 = !DILocation(line: 1717, column: 20, scope: !5132)
!5135 = !DILocation(line: 1717, column: 5, scope: !5132)
!5136 = !DILocation(line: 1718, column: 16, scope: !5126)
!5137 = !DILocation(line: 1718, column: 3, scope: !5126)
!5138 = !DILocation(line: 1719, column: 1, scope: !5126)
!5139 = distinct !DISubprogram(name: "free_accesses", scope: !3, file: !3, line: 1704, type: !5127, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5140 = !DILocalVariable(name: "accs", arg: 1, scope: !5139, file: !3, line: 1704, type: !2485)
!5141 = !DILocation(line: 1704, column: 23, scope: !5139)
!5142 = !DILocation(line: 1706, column: 7, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5139, file: !3, line: 1706, column: 7)
!5144 = !DILocation(line: 1706, column: 7, scope: !5139)
!5145 = !DILocation(line: 1707, column: 20, scope: !5143)
!5146 = !DILocation(line: 1707, column: 5, scope: !5143)
!5147 = !DILocation(line: 1708, column: 16, scope: !5139)
!5148 = !DILocation(line: 1708, column: 3, scope: !5139)
!5149 = !DILocation(line: 1709, column: 1, scope: !5139)
!5150 = distinct !DISubprogram(name: "free_struct_cluster", scope: !3, file: !3, line: 2099, type: !5151, scopeLine: 2100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5151 = !DISubroutineType(types: !5152)
!5152 = !{null, !3047}
!5153 = !DILocalVariable(name: "cluster", arg: 1, scope: !5150, file: !3, line: 2099, type: !3047)
!5154 = !DILocation(line: 2099, column: 44, scope: !5150)
!5155 = !DILocation(line: 2101, column: 7, scope: !5156)
!5156 = distinct !DILexicalBlock(scope: !5150, file: !3, line: 2101, column: 7)
!5157 = !DILocation(line: 2101, column: 7, scope: !5150)
!5158 = !DILocation(line: 2103, column: 11, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 2103, column: 11)
!5160 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 2102, column: 5)
!5161 = !DILocation(line: 2103, column: 20, scope: !5159)
!5162 = !DILocation(line: 2103, column: 11, scope: !5160)
!5163 = !DILocation(line: 2104, column: 2, scope: !5159)
!5164 = !DILocation(line: 2105, column: 11, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 2105, column: 11)
!5166 = !DILocation(line: 2105, column: 20, scope: !5165)
!5167 = !DILocation(line: 2105, column: 11, scope: !5160)
!5168 = !DILocation(line: 2106, column: 23, scope: !5165)
!5169 = !DILocation(line: 2106, column: 32, scope: !5165)
!5170 = !DILocation(line: 2106, column: 2, scope: !5165)
!5171 = !DILocation(line: 2107, column: 13, scope: !5160)
!5172 = !DILocation(line: 2107, column: 7, scope: !5160)
!5173 = !DILocation(line: 2108, column: 5, scope: !5160)
!5174 = !DILocation(line: 2109, column: 1, scope: !5150)
!5175 = distinct !DISubprogram(name: "free_field_accs", scope: !3, file: !3, line: 1543, type: !5074, scopeLine: 1544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5176 = !DILocalVariable(name: "slot", arg: 1, scope: !5175, file: !3, line: 1543, type: !2508)
!5177 = !DILocation(line: 1543, column: 25, scope: !5175)
!5178 = !DILocalVariable(name: "data", arg: 2, scope: !5175, file: !3, line: 1543, type: !2008)
!5179 = !DILocation(line: 1543, column: 37, scope: !5175)
!5180 = !DILocalVariable(name: "f_acc", scope: !5175, file: !3, line: 1545, type: !3113)
!5181 = !DILocation(line: 1545, column: 29, scope: !5175)
!5182 = !DILocation(line: 1545, column: 68, scope: !5175)
!5183 = !DILocation(line: 1545, column: 37, scope: !5175)
!5184 = !DILocation(line: 1547, column: 9, scope: !5175)
!5185 = !DILocation(line: 1547, column: 3, scope: !5175)
!5186 = !DILocation(line: 1548, column: 3, scope: !5175)
!5187 = distinct !DISubprogram(name: "free_accs", scope: !3, file: !3, line: 1530, type: !5074, scopeLine: 1531, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5188 = !DILocalVariable(name: "slot", arg: 1, scope: !5187, file: !3, line: 1530, type: !2508)
!5189 = !DILocation(line: 1530, column: 19, scope: !5187)
!5190 = !DILocalVariable(name: "data", arg: 2, scope: !5187, file: !3, line: 1530, type: !2008)
!5191 = !DILocation(line: 1530, column: 31, scope: !5187)
!5192 = !DILocalVariable(name: "acc", scope: !5187, file: !3, line: 1532, type: !3115)
!5193 = !DILocation(line: 1532, column: 24, scope: !5187)
!5194 = !DILocation(line: 1532, column: 55, scope: !5187)
!5195 = !DILocation(line: 1532, column: 30, scope: !5187)
!5196 = !DILocation(line: 1534, column: 3, scope: !5187)
!5197 = !DILocation(line: 1535, column: 9, scope: !5187)
!5198 = !DILocation(line: 1535, column: 3, scope: !5187)
!5199 = !DILocation(line: 1536, column: 3, scope: !5187)
!5200 = distinct !DISubprogram(name: "malloc_hash", scope: !3, file: !3, line: 1512, type: !2492, scopeLine: 1513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5201 = !DILocalVariable(name: "x", arg: 1, scope: !5200, file: !3, line: 1512, type: !2495)
!5202 = !DILocation(line: 1512, column: 26, scope: !5200)
!5203 = !DILocation(line: 1514, column: 10, scope: !5200)
!5204 = !DILocation(line: 1514, column: 47, scope: !5200)
!5205 = !DILocation(line: 1514, column: 30, scope: !5200)
!5206 = !DILocation(line: 1514, column: 51, scope: !5200)
!5207 = !DILocation(line: 1514, column: 29, scope: !5200)
!5208 = !DILocation(line: 1514, column: 3, scope: !5200)
!5209 = distinct !DISubprogram(name: "malloc_eq", scope: !3, file: !3, line: 1521, type: !2500, scopeLine: 1522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5210 = !DILocalVariable(name: "x", arg: 1, scope: !5209, file: !3, line: 1521, type: !2495)
!5211 = !DILocation(line: 1521, column: 24, scope: !5209)
!5212 = !DILocalVariable(name: "y", arg: 2, scope: !5209, file: !3, line: 1521, type: !2495)
!5213 = !DILocation(line: 1521, column: 39, scope: !5209)
!5214 = !DILocation(line: 1523, column: 28, scope: !5209)
!5215 = !DILocation(line: 1523, column: 11, scope: !5209)
!5216 = !DILocation(line: 1523, column: 32, scope: !5209)
!5217 = !DILocation(line: 1523, column: 52, scope: !5209)
!5218 = !DILocation(line: 1523, column: 40, scope: !5209)
!5219 = !DILocation(line: 1523, column: 37, scope: !5209)
!5220 = !DILocation(line: 1523, column: 3, scope: !5209)
!5221 = distinct !DISubprogram(name: "collect_alloc_sites", scope: !3, file: !3, line: 3523, type: !3246, scopeLine: 3524, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5222 = !DILocalVariable(name: "node", scope: !5221, file: !3, line: 3525, type: !3281)
!5223 = !DILocation(line: 3525, column: 23, scope: !5221)
!5224 = !DILocalVariable(name: "cs", scope: !5221, file: !3, line: 3526, type: !3286)
!5225 = !DILocation(line: 3526, column: 23, scope: !5221)
!5226 = !DILocation(line: 3528, column: 15, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 3528, column: 3)
!5228 = !DILocation(line: 3528, column: 13, scope: !5227)
!5229 = !DILocation(line: 3528, column: 8, scope: !5227)
!5230 = !DILocation(line: 3528, column: 29, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5227, file: !3, line: 3528, column: 3)
!5232 = !DILocation(line: 3528, column: 3, scope: !5227)
!5233 = !DILocation(line: 3529, column: 9, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 3529, column: 9)
!5235 = !DILocation(line: 3529, column: 15, scope: !5234)
!5236 = !DILocation(line: 3529, column: 24, scope: !5234)
!5237 = !DILocation(line: 3529, column: 27, scope: !5234)
!5238 = !DILocation(line: 3529, column: 33, scope: !5234)
!5239 = !DILocation(line: 3529, column: 9, scope: !5231)
!5240 = !DILocation(line: 3531, column: 12, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 3531, column: 2)
!5242 = distinct !DILexicalBlock(scope: !5234, file: !3, line: 3530, column: 7)
!5243 = !DILocation(line: 3531, column: 18, scope: !5241)
!5244 = !DILocation(line: 3531, column: 10, scope: !5241)
!5245 = !DILocation(line: 3531, column: 7, scope: !5241)
!5246 = !DILocation(line: 3531, column: 27, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5241, file: !3, line: 3531, column: 2)
!5248 = !DILocation(line: 3531, column: 2, scope: !5241)
!5249 = !DILocalVariable(name: "stmt", scope: !5250, file: !3, line: 3533, type: !2055)
!5250 = distinct !DILexicalBlock(scope: !5247, file: !3, line: 3532, column: 4)
!5251 = !DILocation(line: 3533, column: 13, scope: !5250)
!5252 = !DILocation(line: 3533, column: 20, scope: !5250)
!5253 = !DILocation(line: 3533, column: 24, scope: !5250)
!5254 = !DILocation(line: 3535, column: 10, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 3535, column: 10)
!5256 = !DILocation(line: 3535, column: 10, scope: !5250)
!5257 = !DILocalVariable(name: "decl", scope: !5258, file: !3, line: 3537, type: !1724)
!5258 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 3536, column: 8)
!5259 = !DILocation(line: 3537, column: 8, scope: !5258)
!5260 = !DILocation(line: 3539, column: 23, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5258, file: !3, line: 3539, column: 7)
!5262 = !DILocation(line: 3539, column: 7, scope: !5261)
!5263 = !DILocation(line: 3540, column: 7, scope: !5261)
!5264 = !DILocation(line: 3540, column: 38, scope: !5261)
!5265 = !DILocation(line: 3540, column: 18, scope: !5261)
!5266 = !DILocation(line: 3540, column: 16, scope: !5261)
!5267 = !DILocation(line: 3541, column: 7, scope: !5261)
!5268 = !DILocation(line: 3541, column: 27, scope: !5261)
!5269 = !DILocation(line: 3541, column: 10, scope: !5261)
!5270 = !DILocation(line: 3539, column: 7, scope: !5258)
!5271 = !DILocalVariable(name: "i", scope: !5272, file: !3, line: 3543, type: !7)
!5272 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 3542, column: 5)
!5273 = !DILocation(line: 3543, column: 16, scope: !5272)
!5274 = !DILocation(line: 3545, column: 31, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 3545, column: 11)
!5276 = !DILocation(line: 3545, column: 11, scope: !5275)
!5277 = !DILocation(line: 3545, column: 11, scope: !5272)
!5278 = !DILocation(line: 3548, column: 8, scope: !5279)
!5279 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 3548, column: 8)
!5280 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 3546, column: 9)
!5281 = !DILocation(line: 3548, column: 34, scope: !5279)
!5282 = !DILocation(line: 3548, column: 8, scope: !5280)
!5283 = !DILocalVariable(name: "str", scope: !5284, file: !3, line: 3550, type: !3110)
!5284 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 3549, column: 6)
!5285 = !DILocation(line: 3550, column: 14, scope: !5284)
!5286 = !DILocation(line: 3552, column: 14, scope: !5284)
!5287 = !DILocation(line: 3552, column: 12, scope: !5284)
!5288 = !DILocation(line: 3553, column: 24, scope: !5284)
!5289 = !DILocation(line: 3553, column: 30, scope: !5284)
!5290 = !DILocation(line: 3553, column: 36, scope: !5284)
!5291 = !DILocation(line: 3553, column: 42, scope: !5284)
!5292 = !DILocation(line: 3553, column: 8, scope: !5284)
!5293 = !DILocation(line: 3554, column: 6, scope: !5284)
!5294 = !DILocation(line: 3557, column: 12, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5296, file: !3, line: 3557, column: 12)
!5296 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 3556, column: 6)
!5297 = !DILocation(line: 3557, column: 12, scope: !5296)
!5298 = !DILocation(line: 3559, column: 14, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 3558, column: 10)
!5300 = !DILocation(line: 3559, column: 5, scope: !5299)
!5301 = !DILocation(line: 3561, column: 24, scope: !5299)
!5302 = !DILocation(line: 3561, column: 35, scope: !5299)
!5303 = !DILocation(line: 3561, column: 5, scope: !5299)
!5304 = !DILocation(line: 3562, column: 10, scope: !5299)
!5305 = !DILocation(line: 3563, column: 26, scope: !5296)
!5306 = !DILocation(line: 3563, column: 8, scope: !5296)
!5307 = !DILocation(line: 3565, column: 9, scope: !5280)
!5308 = !DILocation(line: 3566, column: 5, scope: !5272)
!5309 = !DILocation(line: 3567, column: 8, scope: !5258)
!5310 = !DILocation(line: 3568, column: 4, scope: !5250)
!5311 = !DILocation(line: 3531, column: 36, scope: !5247)
!5312 = !DILocation(line: 3531, column: 40, scope: !5247)
!5313 = !DILocation(line: 3531, column: 34, scope: !5247)
!5314 = !DILocation(line: 3531, column: 2, scope: !5247)
!5315 = distinct !{!5315, !5248, !5316}
!5316 = !DILocation(line: 3568, column: 4, scope: !5241)
!5317 = !DILocation(line: 3569, column: 7, scope: !5242)
!5318 = !DILocation(line: 3528, column: 42, scope: !5231)
!5319 = !DILocation(line: 3528, column: 48, scope: !5231)
!5320 = !DILocation(line: 3528, column: 40, scope: !5231)
!5321 = !DILocation(line: 3528, column: 3, scope: !5231)
!5322 = distinct !{!5322, !5232, !5323}
!5323 = !DILocation(line: 3569, column: 7, scope: !5227)
!5324 = !DILocation(line: 3570, column: 1, scope: !5221)
!5325 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1304, file: !1304, line: 1954, type: !5326, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5326 = !DISubroutineType(types: !5327)
!5327 = !{!1724, !3077}
!5328 = !DILocalVariable(name: "gs", arg: 1, scope: !5325, file: !1304, line: 1954, type: !3077)
!5329 = !DILocation(line: 1954, column: 34, scope: !5325)
!5330 = !DILocalVariable(name: "addr", scope: !5325, file: !1304, line: 1956, type: !1724)
!5331 = !DILocation(line: 1956, column: 8, scope: !5325)
!5332 = !DILocation(line: 1956, column: 31, scope: !5325)
!5333 = !DILocation(line: 1956, column: 15, scope: !5325)
!5334 = !DILocation(line: 1957, column: 7, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5325, file: !1304, line: 1957, column: 7)
!5336 = !DILocation(line: 1957, column: 24, scope: !5335)
!5337 = !DILocation(line: 1957, column: 7, scope: !5325)
!5338 = !DILocation(line: 1958, column: 12, scope: !5335)
!5339 = !DILocation(line: 1958, column: 5, scope: !5335)
!5340 = !DILocation(line: 1959, column: 3, scope: !5325)
!5341 = !DILocation(line: 1960, column: 1, scope: !5325)
!5342 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !1304, file: !1304, line: 1878, type: !5326, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5343 = !DILocalVariable(name: "gs", arg: 1, scope: !5342, file: !1304, line: 1878, type: !3077)
!5344 = !DILocation(line: 1878, column: 31, scope: !5342)
!5345 = !DILocation(line: 1881, column: 21, scope: !5342)
!5346 = !DILocation(line: 1881, column: 10, scope: !5342)
!5347 = !DILocation(line: 1881, column: 3, scope: !5342)
!5348 = distinct !DISubprogram(name: "is_alloc_of_struct", scope: !3, file: !3, line: 3064, type: !5349, scopeLine: 3065, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5349 = !DISubroutineType(types: !5350)
!5350 = !{!1844, !2055, !5351}
!5351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5352 = !DILocalVariable(name: "stmt", arg: 1, scope: !5348, file: !3, line: 3064, type: !2055)
!5353 = !DILocation(line: 3064, column: 28, scope: !5348)
!5354 = !DILocalVariable(name: "i_p", arg: 2, scope: !5348, file: !3, line: 3064, type: !5351)
!5355 = !DILocation(line: 3064, column: 44, scope: !5348)
!5356 = !DILocalVariable(name: "lhs", scope: !5348, file: !3, line: 3066, type: !1724)
!5357 = !DILocation(line: 3066, column: 8, scope: !5348)
!5358 = !DILocalVariable(name: "type", scope: !5348, file: !3, line: 3067, type: !1724)
!5359 = !DILocation(line: 3067, column: 8, scope: !5348)
!5360 = !DILocalVariable(name: "final_stmt", scope: !5348, file: !3, line: 3068, type: !2055)
!5361 = !DILocation(line: 3068, column: 10, scope: !5348)
!5362 = !DILocation(line: 3070, column: 38, scope: !5348)
!5363 = !DILocation(line: 3070, column: 16, scope: !5348)
!5364 = !DILocation(line: 3070, column: 14, scope: !5348)
!5365 = !DILocation(line: 3072, column: 8, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 3072, column: 7)
!5367 = !DILocation(line: 3072, column: 7, scope: !5348)
!5368 = !DILocation(line: 3073, column: 5, scope: !5366)
!5369 = !DILocation(line: 3078, column: 20, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 3078, column: 7)
!5371 = !DILocation(line: 3078, column: 7, scope: !5370)
!5372 = !DILocation(line: 3078, column: 32, scope: !5370)
!5373 = !DILocation(line: 3078, column: 7, scope: !5348)
!5374 = !DILocation(line: 3079, column: 5, scope: !5370)
!5375 = !DILocation(line: 3081, column: 28, scope: !5348)
!5376 = !DILocation(line: 3081, column: 9, scope: !5348)
!5377 = !DILocation(line: 3081, column: 7, scope: !5348)
!5378 = !DILocation(line: 3083, column: 27, scope: !5348)
!5379 = !DILocation(line: 3083, column: 10, scope: !5348)
!5380 = !DILocation(line: 3083, column: 8, scope: !5348)
!5381 = !DILocation(line: 3085, column: 8, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 3085, column: 7)
!5383 = !DILocation(line: 3085, column: 7, scope: !5348)
!5384 = !DILocation(line: 3086, column: 5, scope: !5382)
!5385 = !DILocation(line: 3088, column: 8, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 3088, column: 7)
!5387 = !DILocation(line: 3089, column: 7, scope: !5386)
!5388 = !DILocation(line: 3089, column: 10, scope: !5386)
!5389 = !DILocation(line: 3089, column: 40, scope: !5386)
!5390 = !DILocation(line: 3088, column: 7, scope: !5348)
!5391 = !DILocation(line: 3090, column: 5, scope: !5386)
!5392 = !DILocation(line: 3092, column: 38, scope: !5348)
!5393 = !DILocation(line: 3092, column: 26, scope: !5348)
!5394 = !DILocation(line: 3092, column: 10, scope: !5348)
!5395 = !DILocation(line: 3092, column: 4, scope: !5348)
!5396 = !DILocation(line: 3092, column: 8, scope: !5348)
!5397 = !DILocation(line: 3094, column: 8, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 3094, column: 7)
!5399 = !DILocation(line: 3094, column: 7, scope: !5398)
!5400 = !DILocation(line: 3094, column: 15, scope: !5398)
!5401 = !DILocation(line: 3094, column: 12, scope: !5398)
!5402 = !DILocation(line: 3094, column: 7, scope: !5348)
!5403 = !DILocation(line: 3095, column: 5, scope: !5398)
!5404 = !DILocation(line: 3097, column: 3, scope: !5348)
!5405 = !DILocation(line: 3098, column: 1, scope: !5348)
!5406 = distinct !DISubprogram(name: "add_alloc_site", scope: !3, file: !3, line: 3023, type: !5407, scopeLine: 3024, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5407 = !DISubroutineType(types: !5408)
!5408 = !{null, !1724, !2055, !3110}
!5409 = !DILocalVariable(name: "fn_decl", arg: 1, scope: !5406, file: !3, line: 3023, type: !1724)
!5410 = !DILocation(line: 3023, column: 22, scope: !5406)
!5411 = !DILocalVariable(name: "stmt", arg: 2, scope: !5406, file: !3, line: 3023, type: !2055)
!5412 = !DILocation(line: 3023, column: 38, scope: !5406)
!5413 = !DILocalVariable(name: "str", arg: 3, scope: !5406, file: !3, line: 3023, type: !3110)
!5414 = !DILocation(line: 3023, column: 50, scope: !5406)
!5415 = !DILocalVariable(name: "fallocs", scope: !5406, file: !3, line: 3025, type: !3087)
!5416 = !DILocation(line: 3025, column: 13, scope: !5406)
!5417 = !DILocalVariable(name: "m_call", scope: !5406, file: !3, line: 3026, type: !3105)
!5418 = !DILocation(line: 3026, column: 16, scope: !5406)
!5419 = !DILocation(line: 3028, column: 17, scope: !5406)
!5420 = !DILocation(line: 3028, column: 10, scope: !5406)
!5421 = !DILocation(line: 3028, column: 15, scope: !5406)
!5422 = !DILocation(line: 3029, column: 16, scope: !5406)
!5423 = !DILocation(line: 3029, column: 10, scope: !5406)
!5424 = !DILocation(line: 3029, column: 14, scope: !5406)
!5425 = !DILocation(line: 3032, column: 38, scope: !5406)
!5426 = !DILocation(line: 3033, column: 10, scope: !5406)
!5427 = !DILocation(line: 3033, column: 19, scope: !5406)
!5428 = !DILocation(line: 3033, column: 38, scope: !5406)
!5429 = !DILocation(line: 3032, column: 17, scope: !5406)
!5430 = !DILocation(line: 3032, column: 5, scope: !5406)
!5431 = !DILocation(line: 3031, column: 11, scope: !5406)
!5432 = !DILocation(line: 3035, column: 8, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 3035, column: 7)
!5434 = !DILocation(line: 3035, column: 7, scope: !5406)
!5435 = !DILocalVariable(name: "slot", scope: !5436, file: !3, line: 3037, type: !2508)
!5436 = distinct !DILexicalBlock(scope: !5433, file: !3, line: 3036, column: 5)
!5437 = !DILocation(line: 3037, column: 14, scope: !5436)
!5438 = !DILocation(line: 3039, column: 17, scope: !5436)
!5439 = !DILocation(line: 3039, column: 15, scope: !5436)
!5440 = !DILocation(line: 3040, column: 23, scope: !5436)
!5441 = !DILocation(line: 3040, column: 7, scope: !5436)
!5442 = !DILocation(line: 3040, column: 16, scope: !5436)
!5443 = !DILocation(line: 3040, column: 21, scope: !5436)
!5444 = !DILocation(line: 3041, column: 25, scope: !5436)
!5445 = !DILocation(line: 3041, column: 7, scope: !5436)
!5446 = !DILocation(line: 3041, column: 16, scope: !5436)
!5447 = !DILocation(line: 3041, column: 23, scope: !5436)
!5448 = !DILocation(line: 3042, column: 40, scope: !5436)
!5449 = !DILocation(line: 3042, column: 53, scope: !5436)
!5450 = !DILocation(line: 3043, column: 11, scope: !5436)
!5451 = !DILocation(line: 3043, column: 30, scope: !5436)
!5452 = !DILocation(line: 3042, column: 14, scope: !5436)
!5453 = !DILocation(line: 3042, column: 12, scope: !5436)
!5454 = !DILocation(line: 3044, column: 15, scope: !5436)
!5455 = !DILocation(line: 3044, column: 8, scope: !5436)
!5456 = !DILocation(line: 3044, column: 13, scope: !5436)
!5457 = !DILocation(line: 3045, column: 5, scope: !5436)
!5458 = !DILocation(line: 3046, column: 3, scope: !5406)
!5459 = !DILocation(line: 3049, column: 7, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 3049, column: 7)
!5461 = !DILocation(line: 3049, column: 7, scope: !5406)
!5462 = !DILocation(line: 3051, column: 16, scope: !5463)
!5463 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 3050, column: 5)
!5464 = !DILocation(line: 3051, column: 7, scope: !5463)
!5465 = !DILocation(line: 3052, column: 26, scope: !5463)
!5466 = !DILocation(line: 3052, column: 37, scope: !5463)
!5467 = !DILocation(line: 3052, column: 7, scope: !5463)
!5468 = !DILocation(line: 3053, column: 16, scope: !5463)
!5469 = !DILocation(line: 3053, column: 7, scope: !5463)
!5470 = !DILocation(line: 3054, column: 5, scope: !5463)
!5471 = !DILocation(line: 3055, column: 1, scope: !5406)
!5472 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1304, file: !1304, line: 1911, type: !5326, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5473 = !DILocalVariable(name: "gs", arg: 1, scope: !5472, file: !1304, line: 1911, type: !3077)
!5474 = !DILocation(line: 1911, column: 30, scope: !5472)
!5475 = !DILocation(line: 1914, column: 21, scope: !5472)
!5476 = !DILocation(line: 1914, column: 10, scope: !5472)
!5477 = !DILocation(line: 1914, column: 3, scope: !5472)
!5478 = distinct !DISubprogram(name: "gimple_op", scope: !1304, file: !1304, line: 1631, type: !5479, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5479 = !DISubroutineType(types: !5480)
!5480 = !{!1724, !3077, !7}
!5481 = !DILocalVariable(name: "gs", arg: 1, scope: !5478, file: !1304, line: 1631, type: !3077)
!5482 = !DILocation(line: 1631, column: 25, scope: !5478)
!5483 = !DILocalVariable(name: "i", arg: 2, scope: !5478, file: !1304, line: 1631, type: !7)
!5484 = !DILocation(line: 1631, column: 38, scope: !5478)
!5485 = !DILocation(line: 1633, column: 23, scope: !5486)
!5486 = distinct !DILexicalBlock(scope: !5478, file: !1304, line: 1633, column: 7)
!5487 = !DILocation(line: 1633, column: 7, scope: !5486)
!5488 = !DILocation(line: 1633, column: 7, scope: !5478)
!5489 = !DILocation(line: 1638, column: 26, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5486, file: !1304, line: 1634, column: 5)
!5491 = !DILocation(line: 1638, column: 14, scope: !5490)
!5492 = !DILocation(line: 1638, column: 50, scope: !5490)
!5493 = !DILocation(line: 1638, column: 7, scope: !5490)
!5494 = !DILocation(line: 1641, column: 5, scope: !5486)
!5495 = !DILocation(line: 1642, column: 1, scope: !5478)
!5496 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1304, file: !1304, line: 1274, type: !3943, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5497 = !DILocalVariable(name: "g", arg: 1, scope: !5496, file: !1304, line: 1274, type: !3077)
!5498 = !DILocation(line: 1274, column: 30, scope: !5496)
!5499 = !DILocation(line: 1276, column: 23, scope: !5496)
!5500 = !DILocation(line: 1276, column: 10, scope: !5496)
!5501 = !DILocation(line: 1276, column: 26, scope: !5496)
!5502 = !DILocation(line: 1276, column: 41, scope: !5496)
!5503 = !DILocation(line: 1276, column: 57, scope: !5496)
!5504 = !DILocation(line: 1276, column: 44, scope: !5496)
!5505 = !DILocation(line: 1276, column: 60, scope: !5496)
!5506 = !DILocation(line: 0, scope: !5496)
!5507 = !DILocation(line: 1276, column: 3, scope: !5496)
!5508 = distinct !DISubprogram(name: "gimple_ops", scope: !1304, file: !1304, line: 1614, type: !5509, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5509 = !DISubroutineType(types: !5510)
!5510 = !{!2089, !2055}
!5511 = !DILocalVariable(name: "gs", arg: 1, scope: !5508, file: !1304, line: 1614, type: !2055)
!5512 = !DILocation(line: 1614, column: 20, scope: !5508)
!5513 = !DILocalVariable(name: "off", scope: !5508, file: !1304, line: 1616, type: !2199)
!5514 = !DILocation(line: 1616, column: 10, scope: !5508)
!5515 = !DILocation(line: 1621, column: 56, scope: !5508)
!5516 = !DILocation(line: 1621, column: 28, scope: !5508)
!5517 = !DILocation(line: 1621, column: 9, scope: !5508)
!5518 = !DILocation(line: 1621, column: 7, scope: !5508)
!5519 = !DILocation(line: 1622, column: 3, scope: !5508)
!5520 = !DILocation(line: 1624, column: 29, scope: !5508)
!5521 = !DILocation(line: 1624, column: 20, scope: !5508)
!5522 = !DILocation(line: 1624, column: 34, scope: !5508)
!5523 = !DILocation(line: 1624, column: 32, scope: !5508)
!5524 = !DILocation(line: 1624, column: 10, scope: !5508)
!5525 = !DILocation(line: 1624, column: 3, scope: !5508)
!5526 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1304, file: !1304, line: 1073, type: !5527, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5527 = !DISubroutineType(types: !5528)
!5528 = !{!1362, !2055}
!5529 = !DILocalVariable(name: "gs", arg: 1, scope: !5526, file: !1304, line: 1073, type: !2055)
!5530 = !DILocation(line: 1073, column: 36, scope: !5526)
!5531 = !DILocation(line: 1075, column: 37, scope: !5526)
!5532 = !DILocation(line: 1075, column: 24, scope: !5526)
!5533 = !DILocation(line: 1075, column: 10, scope: !5526)
!5534 = !DILocation(line: 1075, column: 3, scope: !5526)
!5535 = distinct !DISubprogram(name: "gss_for_code", scope: !1304, file: !1304, line: 1061, type: !5536, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5536 = !DISubroutineType(types: !5537)
!5537 = !{!1362, !1303}
!5538 = !DILocalVariable(name: "code", arg: 1, scope: !5535, file: !1304, line: 1061, type: !1303)
!5539 = !DILocation(line: 1061, column: 32, scope: !5535)
!5540 = !DILocation(line: 1066, column: 24, scope: !5535)
!5541 = !DILocation(line: 1066, column: 10, scope: !5535)
!5542 = !DILocation(line: 1066, column: 3, scope: !5535)
!5543 = distinct !DISubprogram(name: "get_final_alloc_stmt", scope: !3, file: !3, line: 747, type: !5544, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5544 = !DISubroutineType(types: !5545)
!5545 = !{!2055, !2055}
!5546 = !DILocalVariable(name: "alloc_stmt", arg: 1, scope: !5543, file: !3, line: 747, type: !2055)
!5547 = !DILocation(line: 747, column: 30, scope: !5543)
!5548 = !DILocalVariable(name: "final_stmt", scope: !5543, file: !3, line: 749, type: !2055)
!5549 = !DILocation(line: 749, column: 10, scope: !5543)
!5550 = !DILocalVariable(name: "use_p", scope: !5543, file: !3, line: 750, type: !3122)
!5551 = !DILocation(line: 750, column: 17, scope: !5543)
!5552 = !DILocalVariable(name: "alloc_res", scope: !5543, file: !3, line: 751, type: !1724)
!5553 = !DILocation(line: 751, column: 8, scope: !5543)
!5554 = !DILocation(line: 753, column: 8, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 753, column: 7)
!5556 = !DILocation(line: 753, column: 7, scope: !5543)
!5557 = !DILocation(line: 754, column: 5, scope: !5555)
!5558 = !DILocation(line: 756, column: 24, scope: !5559)
!5559 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 756, column: 7)
!5560 = !DILocation(line: 756, column: 8, scope: !5559)
!5561 = !DILocation(line: 756, column: 7, scope: !5543)
!5562 = !DILocation(line: 757, column: 5, scope: !5559)
!5563 = !DILocation(line: 759, column: 31, scope: !5543)
!5564 = !DILocation(line: 759, column: 15, scope: !5543)
!5565 = !DILocation(line: 759, column: 13, scope: !5543)
!5566 = !DILocation(line: 761, column: 7, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 761, column: 7)
!5568 = !DILocation(line: 761, column: 29, scope: !5567)
!5569 = !DILocation(line: 761, column: 7, scope: !5543)
!5570 = !DILocation(line: 762, column: 5, scope: !5567)
!5571 = !DILocation(line: 764, column: 24, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 764, column: 7)
!5573 = !DILocation(line: 764, column: 8, scope: !5572)
!5574 = !DILocation(line: 764, column: 7, scope: !5543)
!5575 = !DILocation(line: 765, column: 5, scope: !5572)
!5576 = !DILocation(line: 767, column: 12, scope: !5572)
!5577 = !DILocation(line: 767, column: 5, scope: !5572)
!5578 = !DILocation(line: 768, column: 1, scope: !5543)
!5579 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !1304, file: !1304, line: 1694, type: !5326, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5580 = !DILocalVariable(name: "gs", arg: 1, scope: !5579, file: !1304, line: 1694, type: !3077)
!5581 = !DILocation(line: 1694, column: 33, scope: !5579)
!5582 = !DILocation(line: 1697, column: 21, scope: !5579)
!5583 = !DILocation(line: 1697, column: 10, scope: !5579)
!5584 = !DILocation(line: 1697, column: 3, scope: !5579)
!5585 = distinct !DISubprogram(name: "single_imm_use", scope: !5586, file: !5586, line: 373, type: !5587, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5586 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5587 = !DISubroutineType(types: !5588)
!5588 = !{!1844, !3119, !5589, !3375}
!5589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3122, size: 64)
!5590 = !DILocalVariable(name: "var", arg: 1, scope: !5585, file: !5586, line: 373, type: !3119)
!5591 = !DILocation(line: 373, column: 28, scope: !5585)
!5592 = !DILocalVariable(name: "use_p", arg: 2, scope: !5585, file: !5586, line: 373, type: !5589)
!5593 = !DILocation(line: 373, column: 48, scope: !5585)
!5594 = !DILocalVariable(name: "stmt", arg: 3, scope: !5585, file: !5586, line: 373, type: !3375)
!5595 = !DILocation(line: 373, column: 63, scope: !5585)
!5596 = !DILocalVariable(name: "ptr", scope: !5585, file: !5586, line: 375, type: !5597)
!5597 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5598)
!5598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5599, size: 64)
!5599 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3124)
!5600 = !DILocation(line: 375, column: 34, scope: !5585)
!5601 = !DILocation(line: 375, column: 42, scope: !5585)
!5602 = !DILocation(line: 378, column: 7, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5585, file: !5586, line: 378, column: 7)
!5604 = !DILocation(line: 378, column: 14, scope: !5603)
!5605 = !DILocation(line: 378, column: 19, scope: !5603)
!5606 = !DILocation(line: 378, column: 11, scope: !5603)
!5607 = !DILocation(line: 378, column: 7, scope: !5585)
!5608 = !DILocation(line: 379, column: 5, scope: !5603)
!5609 = !DILabel(scope: !5610, name: "return_false", file: !5586, line: 380)
!5610 = distinct !DILexicalBlock(scope: !5603, file: !5586, line: 379, column: 5)
!5611 = !DILocation(line: 380, column: 5, scope: !5610)
!5612 = !DILocation(line: 381, column: 8, scope: !5610)
!5613 = !DILocation(line: 381, column: 14, scope: !5610)
!5614 = !DILocation(line: 382, column: 8, scope: !5610)
!5615 = !DILocation(line: 382, column: 13, scope: !5610)
!5616 = !DILocation(line: 383, column: 7, scope: !5610)
!5617 = !DILocation(line: 387, column: 7, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5585, file: !5586, line: 387, column: 7)
!5619 = !DILocation(line: 387, column: 14, scope: !5618)
!5620 = !DILocation(line: 387, column: 19, scope: !5618)
!5621 = !DILocation(line: 387, column: 25, scope: !5618)
!5622 = !DILocation(line: 387, column: 11, scope: !5618)
!5623 = !DILocation(line: 387, column: 7, scope: !5585)
!5624 = !DILocation(line: 389, column: 29, scope: !5625)
!5625 = distinct !DILexicalBlock(scope: !5626, file: !5586, line: 389, column: 11)
!5626 = distinct !DILexicalBlock(scope: !5618, file: !5586, line: 388, column: 5)
!5627 = !DILocation(line: 389, column: 12, scope: !5625)
!5628 = !DILocation(line: 389, column: 11, scope: !5626)
!5629 = !DILocation(line: 391, column: 13, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5625, file: !5586, line: 390, column: 2)
!5631 = !DILocation(line: 391, column: 18, scope: !5630)
!5632 = !DILocation(line: 391, column: 5, scope: !5630)
!5633 = !DILocation(line: 391, column: 11, scope: !5630)
!5634 = !DILocation(line: 392, column: 12, scope: !5630)
!5635 = !DILocation(line: 392, column: 17, scope: !5630)
!5636 = !DILocation(line: 392, column: 23, scope: !5630)
!5637 = !DILocation(line: 392, column: 27, scope: !5630)
!5638 = !DILocation(line: 392, column: 5, scope: !5630)
!5639 = !DILocation(line: 392, column: 10, scope: !5630)
!5640 = !DILocation(line: 393, column: 4, scope: !5630)
!5641 = !DILocation(line: 396, column: 2, scope: !5625)
!5642 = !DILocation(line: 400, column: 8, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5585, file: !5586, line: 400, column: 7)
!5644 = !DILocation(line: 400, column: 7, scope: !5585)
!5645 = !DILocation(line: 401, column: 5, scope: !5643)
!5646 = !DILocation(line: 403, column: 28, scope: !5585)
!5647 = !DILocation(line: 403, column: 33, scope: !5585)
!5648 = !DILocation(line: 403, column: 40, scope: !5585)
!5649 = !DILocation(line: 403, column: 10, scope: !5585)
!5650 = !DILocation(line: 403, column: 3, scope: !5585)
!5651 = !DILocation(line: 404, column: 1, scope: !5585)
!5652 = distinct !DISubprogram(name: "is_gimple_debug", scope: !1304, file: !1304, line: 3249, type: !3943, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5653 = !DILocalVariable(name: "gs", arg: 1, scope: !5652, file: !1304, line: 3249, type: !3077)
!5654 = !DILocation(line: 3249, column: 31, scope: !5652)
!5655 = !DILocation(line: 3251, column: 23, scope: !5652)
!5656 = !DILocation(line: 3251, column: 10, scope: !5652)
!5657 = !DILocation(line: 3251, column: 27, scope: !5652)
!5658 = !DILocation(line: 3251, column: 3, scope: !5652)
!5659 = distinct !DISubprogram(name: "VEC_alloc_site_t_heap_alloc", scope: !3, file: !3, line: 174, type: !5660, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5660 = !DISubroutineType(types: !5661)
!5661 = !{!3093, !1821}
!5662 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5659, file: !3, line: 174, type: !1821)
!5663 = !DILocation(line: 174, column: 1, scope: !5659)
!5664 = distinct !DISubprogram(name: "VEC_alloc_site_t_heap_safe_push", scope: !3, file: !3, line: 174, type: !5665, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5665 = !DISubroutineType(types: !5666)
!5666 = !{!5087, !5667, !5668}
!5667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3093, size: 64)
!5668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5669, size: 64)
!5669 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3105)
!5670 = !DILocalVariable(name: "vec_", arg: 1, scope: !5664, file: !3, line: 174, type: !5667)
!5671 = !DILocation(line: 174, column: 1, scope: !5664)
!5672 = !DILocalVariable(name: "obj_", arg: 2, scope: !5664, file: !3, line: 174, type: !5668)
!5673 = distinct !DISubprogram(name: "VEC_alloc_site_t_heap_reserve", scope: !3, file: !3, line: 174, type: !5674, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5674 = !DISubroutineType(types: !5675)
!5675 = !{!1821, !5667, !1821}
!5676 = !DILocalVariable(name: "vec_", arg: 1, scope: !5673, file: !3, line: 174, type: !5667)
!5677 = !DILocation(line: 174, column: 1, scope: !5673)
!5678 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5673, file: !3, line: 174, type: !1821)
!5679 = !DILocalVariable(name: "extend", scope: !5673, file: !3, line: 174, type: !1821)
!5680 = !DILocation(line: 174, column: 1, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5673, file: !3, line: 174, column: 1)
!5682 = distinct !DISubprogram(name: "VEC_alloc_site_t_base_quick_push", scope: !3, file: !3, line: 173, type: !5683, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5683 = !DISubroutineType(types: !5684)
!5684 = !{!5087, !5107, !5668}
!5685 = !DILocalVariable(name: "vec_", arg: 1, scope: !5682, file: !3, line: 173, type: !5107)
!5686 = !DILocation(line: 173, column: 1, scope: !5682)
!5687 = !DILocalVariable(name: "obj_", arg: 2, scope: !5682, file: !3, line: 173, type: !5668)
!5688 = !DILocalVariable(name: "slot_", scope: !5682, file: !3, line: 173, type: !5087)
!5689 = !DILocation(line: 173, column: 1, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 173, column: 1)
!5691 = distinct !DISubprogram(name: "VEC_alloc_site_t_base_space", scope: !3, file: !3, line: 173, type: !5692, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5692 = !DISubroutineType(types: !5693)
!5693 = !{!1821, !5107, !1821}
!5694 = !DILocalVariable(name: "vec_", arg: 1, scope: !5691, file: !3, line: 173, type: !5107)
!5695 = !DILocation(line: 173, column: 1, scope: !5691)
!5696 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5691, file: !3, line: 173, type: !1821)
!5697 = distinct !DISubprogram(name: "collect_accesses_in_func", scope: !3, file: !3, line: 3629, type: !5698, scopeLine: 3630, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5698 = !DISubroutineType(types: !5699)
!5699 = !{null, !2441}
!5700 = !DILocalVariable(name: "fn", arg: 1, scope: !5697, file: !3, line: 3629, type: !2441)
!5701 = !DILocation(line: 3629, column: 44, scope: !5697)
!5702 = !DILocalVariable(name: "bb", scope: !5697, file: !3, line: 3631, type: !2453)
!5703 = !DILocation(line: 3631, column: 15, scope: !5697)
!5704 = !DILocation(line: 3633, column: 9, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 3633, column: 7)
!5706 = !DILocation(line: 3633, column: 7, scope: !5697)
!5707 = !DILocation(line: 3634, column: 5, scope: !5705)
!5708 = !DILocation(line: 3637, column: 3, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 3637, column: 3)
!5710 = !DILocation(line: 3637, column: 3, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5709, file: !3, line: 3637, column: 3)
!5712 = !DILocation(line: 3638, column: 29, scope: !5711)
!5713 = !DILocation(line: 3638, column: 5, scope: !5711)
!5714 = distinct !{!5714, !5708, !5715}
!5715 = !DILocation(line: 3638, column: 31, scope: !5709)
!5716 = !DILocation(line: 3639, column: 1, scope: !5697)
!5717 = distinct !DISubprogram(name: "exclude_alloc_and_field_accs", scope: !3, file: !3, line: 3616, type: !3369, scopeLine: 3617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5718 = !DILocalVariable(name: "node", arg: 1, scope: !5717, file: !3, line: 3616, type: !3281)
!5719 = !DILocation(line: 3616, column: 51, scope: !5717)
!5720 = !DILocalVariable(name: "str", scope: !5717, file: !3, line: 3618, type: !3110)
!5721 = !DILocation(line: 3618, column: 9, scope: !5717)
!5722 = !DILocalVariable(name: "i", scope: !5717, file: !3, line: 3619, type: !7)
!5723 = !DILocation(line: 3619, column: 12, scope: !5717)
!5724 = !DILocation(line: 3621, column: 10, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5717, file: !3, line: 3621, column: 3)
!5726 = !DILocation(line: 3621, column: 8, scope: !5725)
!5727 = !DILocation(line: 3621, column: 15, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5725, file: !3, line: 3621, column: 3)
!5729 = !DILocation(line: 3621, column: 3, scope: !5725)
!5730 = !DILocation(line: 3622, column: 37, scope: !5728)
!5731 = !DILocation(line: 3622, column: 42, scope: !5728)
!5732 = !DILocation(line: 3622, column: 5, scope: !5728)
!5733 = !DILocation(line: 3621, column: 61, scope: !5728)
!5734 = !DILocation(line: 3621, column: 3, scope: !5728)
!5735 = distinct !{!5735, !5729, !5736}
!5736 = !DILocation(line: 3622, column: 46, scope: !5725)
!5737 = !DILocation(line: 3623, column: 1, scope: !5717)
!5738 = distinct !DISubprogram(name: "check_cond_exprs", scope: !3, file: !3, line: 3592, type: !3246, scopeLine: 3593, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5739 = !DILocalVariable(name: "str", scope: !5738, file: !3, line: 3594, type: !3110)
!5740 = !DILocation(line: 3594, column: 9, scope: !5738)
!5741 = !DILocalVariable(name: "i", scope: !5738, file: !3, line: 3595, type: !7)
!5742 = !DILocation(line: 3595, column: 12, scope: !5738)
!5743 = !DILocation(line: 3597, column: 5, scope: !5738)
!5744 = !DILocation(line: 3598, column: 3, scope: !5738)
!5745 = !DILocation(line: 3598, column: 10, scope: !5738)
!5746 = !DILocalVariable(name: "safe_p", scope: !5747, file: !3, line: 3600, type: !1844)
!5747 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 3599, column: 5)
!5748 = !DILocation(line: 3600, column: 12, scope: !5747)
!5749 = !DILocation(line: 3602, column: 11, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 3602, column: 11)
!5751 = !DILocation(line: 3602, column: 16, scope: !5750)
!5752 = !DILocation(line: 3602, column: 11, scope: !5747)
!5753 = !DILocation(line: 3603, column: 17, scope: !5750)
!5754 = !DILocation(line: 3603, column: 22, scope: !5750)
!5755 = !DILocation(line: 3603, column: 2, scope: !5750)
!5756 = !DILocation(line: 3604, column: 12, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 3604, column: 11)
!5758 = !DILocation(line: 3604, column: 11, scope: !5747)
!5759 = !DILocation(line: 3605, column: 20, scope: !5757)
!5760 = !DILocation(line: 3605, column: 2, scope: !5757)
!5761 = !DILocation(line: 3607, column: 3, scope: !5757)
!5762 = distinct !{!5762, !5744, !5763}
!5763 = !DILocation(line: 3608, column: 5, scope: !5738)
!5764 = !DILocation(line: 3609, column: 1, scope: !5738)
!5765 = distinct !DISubprogram(name: "dump_accesses", scope: !3, file: !3, line: 3575, type: !3246, scopeLine: 3576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5766 = !DILocalVariable(name: "str", scope: !5765, file: !3, line: 3577, type: !3110)
!5767 = !DILocation(line: 3577, column: 9, scope: !5765)
!5768 = !DILocalVariable(name: "i", scope: !5765, file: !3, line: 3578, type: !7)
!5769 = !DILocation(line: 3578, column: 12, scope: !5765)
!5770 = !DILocation(line: 3580, column: 8, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 3580, column: 7)
!5772 = !DILocation(line: 3580, column: 7, scope: !5765)
!5773 = !DILocation(line: 3581, column: 5, scope: !5771)
!5774 = !DILocation(line: 3583, column: 10, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 3583, column: 3)
!5776 = !DILocation(line: 3583, column: 8, scope: !5775)
!5777 = !DILocation(line: 3583, column: 15, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 3583, column: 3)
!5779 = !DILocation(line: 3583, column: 3, scope: !5775)
!5780 = !DILocation(line: 3584, column: 16, scope: !5778)
!5781 = !DILocation(line: 3584, column: 5, scope: !5778)
!5782 = !DILocation(line: 3583, column: 61, scope: !5778)
!5783 = !DILocation(line: 3583, column: 3, scope: !5778)
!5784 = distinct !{!5784, !5779, !5785}
!5785 = !DILocation(line: 3584, column: 19, scope: !5775)
!5786 = !DILocation(line: 3585, column: 1, scope: !5765)
!5787 = distinct !DISubprogram(name: "collect_accesses_in_bb", scope: !3, file: !3, line: 3164, type: !5788, scopeLine: 3165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5788 = !DISubroutineType(types: !5789)
!5789 = !{null, !2453}
!5790 = !DILocalVariable(name: "bb", arg: 1, scope: !5787, file: !3, line: 3164, type: !2453)
!5791 = !DILocation(line: 3164, column: 37, scope: !5787)
!5792 = !DILocalVariable(name: "bsi", scope: !5787, file: !3, line: 3166, type: !3129)
!5793 = !DILocation(line: 3166, column: 24, scope: !5787)
!5794 = !DILocalVariable(name: "wi", scope: !5787, file: !3, line: 3167, type: !3126)
!5795 = !DILocation(line: 3167, column: 25, scope: !5787)
!5796 = !DILocation(line: 3169, column: 3, scope: !5787)
!5797 = !DILocation(line: 3171, column: 28, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 3171, column: 3)
!5799 = !DILocation(line: 3171, column: 14, scope: !5798)
!5800 = !DILocation(line: 3171, column: 8, scope: !5798)
!5801 = !DILocation(line: 3171, column: 34, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !5798, file: !3, line: 3171, column: 3)
!5803 = !DILocation(line: 3171, column: 33, scope: !5802)
!5804 = !DILocation(line: 3171, column: 3, scope: !5798)
!5805 = !DILocalVariable(name: "stmt", scope: !5806, file: !3, line: 3173, type: !2055)
!5806 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 3172, column: 5)
!5807 = !DILocation(line: 3173, column: 14, scope: !5806)
!5808 = !DILocation(line: 3173, column: 21, scope: !5806)
!5809 = !DILocation(line: 3177, column: 24, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5806, file: !3, line: 3177, column: 11)
!5811 = !DILocation(line: 3177, column: 11, scope: !5810)
!5812 = !DILocation(line: 3177, column: 30, scope: !5810)
!5813 = !DILocation(line: 3177, column: 11, scope: !5806)
!5814 = !DILocation(line: 3179, column: 4, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5810, file: !3, line: 3178, column: 2)
!5816 = !DILocation(line: 3180, column: 4, scope: !5815)
!5817 = !DILocation(line: 3183, column: 26, scope: !5806)
!5818 = !DILocation(line: 3183, column: 17, scope: !5806)
!5819 = !DILocation(line: 3183, column: 10, scope: !5806)
!5820 = !DILocation(line: 3183, column: 15, scope: !5806)
!5821 = !DILocation(line: 3184, column: 23, scope: !5806)
!5822 = !DILocation(line: 3184, column: 7, scope: !5806)
!5823 = !DILocation(line: 3185, column: 5, scope: !5806)
!5824 = !DILocation(line: 3171, column: 51, scope: !5802)
!5825 = !DILocation(line: 3171, column: 3, scope: !5802)
!5826 = distinct !{!5826, !5804, !5827}
!5827 = !DILocation(line: 3185, column: 5, scope: !5798)
!5828 = !DILocation(line: 3186, column: 1, scope: !5787)
!5829 = distinct !DISubprogram(name: "gsi_start_bb", scope: !1304, file: !1304, line: 4418, type: !5830, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5830 = !DISubroutineType(types: !5831)
!5831 = !{!3129, !2453}
!5832 = !DILocalVariable(name: "bb", arg: 1, scope: !5829, file: !1304, line: 4418, type: !2453)
!5833 = !DILocation(line: 4418, column: 27, scope: !5829)
!5834 = !DILocalVariable(name: "i", scope: !5829, file: !1304, line: 4420, type: !3129)
!5835 = !DILocation(line: 4420, column: 24, scope: !5829)
!5836 = !DILocalVariable(name: "seq", scope: !5829, file: !1304, line: 4421, type: !2045)
!5837 = !DILocation(line: 4421, column: 14, scope: !5829)
!5838 = !DILocation(line: 4423, column: 17, scope: !5829)
!5839 = !DILocation(line: 4423, column: 9, scope: !5829)
!5840 = !DILocation(line: 4423, column: 7, scope: !5829)
!5841 = !DILocation(line: 4424, column: 29, scope: !5829)
!5842 = !DILocation(line: 4424, column: 11, scope: !5829)
!5843 = !DILocation(line: 4424, column: 5, scope: !5829)
!5844 = !DILocation(line: 4424, column: 9, scope: !5829)
!5845 = !DILocation(line: 4425, column: 11, scope: !5829)
!5846 = !DILocation(line: 4425, column: 5, scope: !5829)
!5847 = !DILocation(line: 4425, column: 9, scope: !5829)
!5848 = !DILocation(line: 4426, column: 10, scope: !5829)
!5849 = !DILocation(line: 4426, column: 5, scope: !5829)
!5850 = !DILocation(line: 4426, column: 8, scope: !5829)
!5851 = !DILocation(line: 4428, column: 3, scope: !5829)
!5852 = distinct !DISubprogram(name: "gsi_end_p", scope: !1304, file: !1304, line: 4467, type: !5853, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5853 = !DISubroutineType(types: !5854)
!5854 = !{!1844, !3129}
!5855 = !DILocalVariable(name: "i", arg: 1, scope: !5852, file: !1304, line: 4467, type: !3129)
!5856 = !DILocation(line: 4467, column: 33, scope: !5852)
!5857 = !DILocation(line: 4469, column: 12, scope: !5852)
!5858 = !DILocation(line: 4469, column: 16, scope: !5852)
!5859 = !DILocation(line: 4469, column: 10, scope: !5852)
!5860 = !DILocation(line: 4469, column: 3, scope: !5852)
!5861 = distinct !DISubprogram(name: "gsi_stmt", scope: !1304, file: !1304, line: 4501, type: !5862, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5862 = !DISubroutineType(types: !5863)
!5863 = !{!2055, !3129}
!5864 = !DILocalVariable(name: "i", arg: 1, scope: !5861, file: !1304, line: 4501, type: !3129)
!5865 = !DILocation(line: 4501, column: 32, scope: !5861)
!5866 = !DILocation(line: 4503, column: 12, scope: !5861)
!5867 = !DILocation(line: 4503, column: 17, scope: !5861)
!5868 = !DILocation(line: 4503, column: 3, scope: !5861)
!5869 = distinct !DISubprogram(name: "free_structures", scope: !3, file: !3, line: 2640, type: !3246, scopeLine: 2641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5870 = !DILocalVariable(name: "str", scope: !5869, file: !3, line: 2642, type: !3110)
!5871 = !DILocation(line: 2642, column: 9, scope: !5869)
!5872 = !DILocalVariable(name: "i", scope: !5869, file: !3, line: 2643, type: !7)
!5873 = !DILocation(line: 2643, column: 12, scope: !5869)
!5874 = !DILocation(line: 2645, column: 10, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 2645, column: 3)
!5876 = !DILocation(line: 2645, column: 8, scope: !5875)
!5877 = !DILocation(line: 2645, column: 15, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 2645, column: 3)
!5879 = !DILocation(line: 2645, column: 3, scope: !5875)
!5880 = !DILocation(line: 2646, column: 23, scope: !5878)
!5881 = !DILocation(line: 2646, column: 5, scope: !5878)
!5882 = !DILocation(line: 2645, column: 61, scope: !5878)
!5883 = !DILocation(line: 2645, column: 3, scope: !5878)
!5884 = distinct !{!5884, !5879, !5885}
!5885 = !DILocation(line: 2646, column: 26, scope: !5875)
!5886 = !DILocation(line: 2648, column: 3, scope: !5869)
!5887 = !DILocation(line: 2649, column: 14, scope: !5869)
!5888 = !DILocation(line: 2650, column: 1, scope: !5869)
!5889 = distinct !DISubprogram(name: "get_stmt_accesses", scope: !3, file: !3, line: 2486, type: !5890, scopeLine: 2487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!5890 = !DISubroutineType(types: !5891)
!5891 = !{!1724, !2089, !5892, !2008}
!5892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1821, size: 64)
!5893 = !DILocalVariable(name: "tp", arg: 1, scope: !5889, file: !3, line: 2486, type: !2089)
!5894 = !DILocation(line: 2486, column: 26, scope: !5889)
!5895 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5889, file: !3, line: 2486, type: !5892)
!5896 = !DILocation(line: 2486, column: 35, scope: !5889)
!5897 = !DILocalVariable(name: "data", arg: 3, scope: !5889, file: !3, line: 2486, type: !2008)
!5898 = !DILocation(line: 2486, column: 56, scope: !5889)
!5899 = !DILocalVariable(name: "wi", scope: !5889, file: !3, line: 2488, type: !3125)
!5900 = !DILocation(line: 2488, column: 26, scope: !5889)
!5901 = !DILocation(line: 2488, column: 57, scope: !5889)
!5902 = !DILocation(line: 2488, column: 31, scope: !5889)
!5903 = !DILocalVariable(name: "stmt", scope: !5889, file: !3, line: 2489, type: !2055)
!5904 = !DILocation(line: 2489, column: 10, scope: !5889)
!5905 = !DILocation(line: 2489, column: 26, scope: !5889)
!5906 = !DILocation(line: 2489, column: 30, scope: !5889)
!5907 = !DILocation(line: 2489, column: 17, scope: !5889)
!5908 = !DILocalVariable(name: "t", scope: !5889, file: !3, line: 2490, type: !1724)
!5909 = !DILocation(line: 2490, column: 8, scope: !5889)
!5910 = !DILocation(line: 2490, column: 13, scope: !5889)
!5911 = !DILocation(line: 2490, column: 12, scope: !5889)
!5912 = !DILocation(line: 2492, column: 8, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 2492, column: 7)
!5914 = !DILocation(line: 2492, column: 7, scope: !5889)
!5915 = !DILocation(line: 2493, column: 5, scope: !5913)
!5916 = !DILocation(line: 2495, column: 11, scope: !5889)
!5917 = !DILocation(line: 2495, column: 3, scope: !5889)
!5918 = !DILocalVariable(name: "var", scope: !5919, file: !3, line: 2499, type: !1724)
!5919 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 2498, column: 7)
!5920 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 2496, column: 5)
!5921 = !DILocation(line: 2499, column: 7, scope: !5919)
!5922 = !DILocation(line: 2499, column: 13, scope: !5919)
!5923 = !DILocalVariable(name: "type", scope: !5919, file: !3, line: 2500, type: !1724)
!5924 = !DILocation(line: 2500, column: 7, scope: !5919)
!5925 = !DILocation(line: 2500, column: 14, scope: !5919)
!5926 = !DILocalVariable(name: "i", scope: !5919, file: !3, line: 2501, type: !7)
!5927 = !DILocation(line: 2501, column: 11, scope: !5919)
!5928 = !DILocation(line: 2501, column: 31, scope: !5919)
!5929 = !DILocation(line: 2501, column: 15, scope: !5919)
!5930 = !DILocation(line: 2503, column: 6, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 2503, column: 6)
!5932 = !DILocation(line: 2503, column: 11, scope: !5931)
!5933 = !DILocation(line: 2503, column: 8, scope: !5931)
!5934 = !DILocation(line: 2503, column: 6, scope: !5919)
!5935 = !DILocation(line: 2505, column: 27, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5937, file: !3, line: 2505, column: 10)
!5937 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 2504, column: 4)
!5938 = !DILocation(line: 2505, column: 10, scope: !5936)
!5939 = !DILocation(line: 2505, column: 10, scope: !5937)
!5940 = !DILocalVariable(name: "str", scope: !5941, file: !3, line: 2507, type: !3110)
!5941 = distinct !DILexicalBlock(scope: !5936, file: !3, line: 2506, column: 8)
!5942 = !DILocation(line: 2507, column: 9, scope: !5941)
!5943 = !DILocation(line: 2509, column: 9, scope: !5941)
!5944 = !DILocation(line: 2509, column: 7, scope: !5941)
!5945 = !DILocation(line: 2510, column: 28, scope: !5941)
!5946 = !DILocation(line: 2510, column: 40, scope: !5941)
!5947 = !DILocation(line: 2510, column: 45, scope: !5941)
!5948 = !DILocation(line: 2510, column: 3, scope: !5941)
!5949 = !DILocation(line: 2511, column: 4, scope: !5941)
!5950 = !DILocation(line: 2511, column: 18, scope: !5941)
!5951 = !DILocation(line: 2512, column: 3, scope: !5941)
!5952 = !DILocation(line: 2514, column: 10, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5937, file: !3, line: 2514, column: 10)
!5954 = !DILocation(line: 2514, column: 10, scope: !5937)
!5955 = !DILocation(line: 2516, column: 12, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 2515, column: 8)
!5957 = !DILocation(line: 2516, column: 3, scope: !5956)
!5958 = !DILocation(line: 2517, column: 23, scope: !5956)
!5959 = !DILocation(line: 2517, column: 34, scope: !5956)
!5960 = !DILocation(line: 2517, column: 3, scope: !5956)
!5961 = !DILocation(line: 2518, column: 12, scope: !5956)
!5962 = !DILocation(line: 2518, column: 3, scope: !5956)
!5963 = !DILocation(line: 2519, column: 8, scope: !5956)
!5964 = !DILocation(line: 2520, column: 24, scope: !5937)
!5965 = !DILocation(line: 2520, column: 6, scope: !5937)
!5966 = !DILocation(line: 2521, column: 4, scope: !5937)
!5967 = !DILocation(line: 2523, column: 7, scope: !5920)
!5968 = !DILocalVariable(name: "ref", scope: !5969, file: !3, line: 2527, type: !1724)
!5969 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 2526, column: 7)
!5970 = !DILocation(line: 2527, column: 7, scope: !5969)
!5971 = !DILocation(line: 2527, column: 13, scope: !5969)
!5972 = !DILocalVariable(name: "field_decl", scope: !5969, file: !3, line: 2528, type: !1724)
!5973 = !DILocation(line: 2528, column: 7, scope: !5969)
!5974 = !DILocation(line: 2528, column: 20, scope: !5969)
!5975 = !DILocation(line: 2531, column: 7, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 2531, column: 6)
!5977 = !DILocation(line: 2531, column: 23, scope: !5976)
!5978 = !DILocation(line: 2532, column: 7, scope: !5976)
!5979 = !DILocation(line: 2532, column: 10, scope: !5976)
!5980 = !DILocation(line: 2532, column: 26, scope: !5976)
!5981 = !DILocation(line: 2533, column: 7, scope: !5976)
!5982 = !DILocation(line: 2533, column: 10, scope: !5976)
!5983 = !DILocation(line: 2533, column: 26, scope: !5976)
!5984 = !DILocation(line: 2534, column: 6, scope: !5976)
!5985 = !DILocation(line: 2534, column: 9, scope: !5976)
!5986 = !DILocation(line: 2534, column: 32, scope: !5976)
!5987 = !DILocation(line: 2531, column: 6, scope: !5969)
!5988 = !DILocalVariable(name: "type", scope: !5989, file: !3, line: 2536, type: !1724)
!5989 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 2535, column: 4)
!5990 = !DILocation(line: 2536, column: 11, scope: !5989)
!5991 = !DILocation(line: 2536, column: 18, scope: !5989)
!5992 = !DILocalVariable(name: "i", scope: !5989, file: !3, line: 2537, type: !7)
!5993 = !DILocation(line: 2537, column: 15, scope: !5989)
!5994 = !DILocation(line: 2537, column: 35, scope: !5989)
!5995 = !DILocation(line: 2537, column: 19, scope: !5989)
!5996 = !DILocation(line: 2539, column: 10, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2539, column: 10)
!5998 = !DILocation(line: 2539, column: 15, scope: !5997)
!5999 = !DILocation(line: 2539, column: 12, scope: !5997)
!6000 = !DILocation(line: 2539, column: 10, scope: !5989)
!6001 = !DILocalVariable(name: "str", scope: !6002, file: !3, line: 2541, type: !3110)
!6002 = distinct !DILexicalBlock(scope: !5997, file: !3, line: 2540, column: 8)
!6003 = !DILocation(line: 2541, column: 9, scope: !6002)
!6004 = !DILocation(line: 2541, column: 15, scope: !6002)
!6005 = !DILocalVariable(name: "field", scope: !6002, file: !3, line: 2542, type: !3037)
!6006 = !DILocation(line: 2542, column: 24, scope: !6002)
!6007 = !DILocation(line: 2543, column: 27, scope: !6002)
!6008 = !DILocation(line: 2543, column: 32, scope: !6002)
!6009 = !DILocation(line: 2543, column: 5, scope: !6002)
!6010 = !DILocation(line: 2545, column: 24, scope: !6011)
!6011 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 2545, column: 7)
!6012 = !DILocation(line: 2545, column: 7, scope: !6011)
!6013 = !DILocation(line: 2545, column: 7, scope: !6002)
!6014 = !DILocation(line: 2547, column: 32, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !6011, file: !3, line: 2546, column: 5)
!6016 = !DILocation(line: 2547, column: 44, scope: !6015)
!6017 = !DILocation(line: 2547, column: 49, scope: !6015)
!6018 = !DILocation(line: 2547, column: 7, scope: !6015)
!6019 = !DILocation(line: 2548, column: 8, scope: !6015)
!6020 = !DILocation(line: 2548, column: 22, scope: !6015)
!6021 = !DILocation(line: 2549, column: 7, scope: !6015)
!6022 = !DILocation(line: 2552, column: 7, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 2552, column: 7)
!6024 = !DILocation(line: 2552, column: 7, scope: !6002)
!6025 = !DILocalVariable(name: "acc", scope: !6026, file: !3, line: 2554, type: !3113)
!6026 = distinct !DILexicalBlock(scope: !6023, file: !3, line: 2553, column: 5)
!6027 = !DILocation(line: 2554, column: 33, scope: !6026)
!6028 = !DILocation(line: 2554, column: 39, scope: !6026)
!6029 = !DILocation(line: 2556, column: 7, scope: !6026)
!6030 = !DILocation(line: 2558, column: 19, scope: !6026)
!6031 = !DILocation(line: 2558, column: 7, scope: !6026)
!6032 = !DILocation(line: 2558, column: 12, scope: !6026)
!6033 = !DILocation(line: 2558, column: 17, scope: !6026)
!6034 = !DILocation(line: 2559, column: 23, scope: !6026)
!6035 = !DILocation(line: 2559, column: 7, scope: !6026)
!6036 = !DILocation(line: 2559, column: 12, scope: !6026)
!6037 = !DILocation(line: 2559, column: 21, scope: !6026)
!6038 = !DILocation(line: 2560, column: 18, scope: !6026)
!6039 = !DILocation(line: 2560, column: 7, scope: !6026)
!6040 = !DILocation(line: 2560, column: 12, scope: !6026)
!6041 = !DILocation(line: 2560, column: 16, scope: !6026)
!6042 = !DILocation(line: 2561, column: 25, scope: !6026)
!6043 = !DILocation(line: 2561, column: 7, scope: !6026)
!6044 = !DILocation(line: 2561, column: 12, scope: !6026)
!6045 = !DILocation(line: 2561, column: 23, scope: !6026)
!6046 = !DILocation(line: 2565, column: 30, scope: !6047)
!6047 = distinct !DILexicalBlock(scope: !6026, file: !3, line: 2565, column: 11)
!6048 = !DILocation(line: 2565, column: 35, scope: !6047)
!6049 = !DILocation(line: 2565, column: 41, scope: !6047)
!6050 = !DILocation(line: 2565, column: 12, scope: !6047)
!6051 = !DILocation(line: 2565, column: 11, scope: !6026)
!6052 = !DILocation(line: 2567, column: 8, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 2567, column: 8)
!6054 = distinct !DILexicalBlock(scope: !6047, file: !3, line: 2566, column: 9)
!6055 = !DILocation(line: 2567, column: 8, scope: !6054)
!6056 = !DILocation(line: 2569, column: 17, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6053, file: !3, line: 2568, column: 6)
!6058 = !DILocation(line: 2569, column: 8, scope: !6057)
!6059 = !DILocation(line: 2570, column: 28, scope: !6057)
!6060 = !DILocation(line: 2570, column: 39, scope: !6057)
!6061 = !DILocation(line: 2570, column: 8, scope: !6057)
!6062 = !DILocation(line: 2571, column: 17, scope: !6057)
!6063 = !DILocation(line: 2571, column: 8, scope: !6057)
!6064 = !DILocation(line: 2573, column: 27, scope: !6057)
!6065 = !DILocation(line: 2573, column: 38, scope: !6057)
!6066 = !DILocation(line: 2573, column: 8, scope: !6057)
!6067 = !DILocation(line: 2574, column: 6, scope: !6057)
!6068 = !DILocation(line: 2576, column: 22, scope: !6054)
!6069 = !DILocation(line: 2576, column: 4, scope: !6054)
!6070 = !DILocation(line: 2577, column: 10, scope: !6054)
!6071 = !DILocation(line: 2577, column: 4, scope: !6054)
!6072 = !DILocation(line: 2578, column: 9, scope: !6054)
!6073 = !DILocalVariable(name: "bb", scope: !6074, file: !3, line: 2582, type: !2453)
!6074 = distinct !DILexicalBlock(scope: !6047, file: !3, line: 2580, column: 9)
!6075 = !DILocation(line: 2582, column: 16, scope: !6074)
!6076 = !DILocation(line: 2582, column: 32, scope: !6074)
!6077 = !DILocation(line: 2582, column: 21, scope: !6074)
!6078 = !DILocation(line: 2583, column: 20, scope: !6074)
!6079 = !DILocation(line: 2583, column: 24, scope: !6074)
!6080 = !DILocation(line: 2583, column: 4, scope: !6074)
!6081 = !DILocation(line: 2583, column: 11, scope: !6074)
!6082 = !DILocation(line: 2583, column: 17, scope: !6074)
!6083 = !DILocation(line: 2586, column: 32, scope: !6074)
!6084 = !DILocation(line: 2586, column: 37, scope: !6074)
!6085 = !DILocation(line: 2586, column: 44, scope: !6074)
!6086 = !DILocation(line: 2586, column: 4, scope: !6074)
!6087 = !DILocation(line: 2588, column: 8, scope: !6026)
!6088 = !DILocation(line: 2588, column: 22, scope: !6026)
!6089 = !DILocation(line: 2589, column: 5, scope: !6026)
!6090 = !DILocation(line: 2590, column: 8, scope: !6002)
!6091 = !DILocation(line: 2591, column: 4, scope: !5989)
!6092 = !DILocation(line: 2593, column: 7, scope: !5920)
!6093 = !DILocalVariable(name: "cond", scope: !6094, file: !3, line: 2597, type: !1724)
!6094 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 2596, column: 7)
!6095 = !DILocation(line: 2597, column: 7, scope: !6094)
!6096 = !DILocation(line: 2597, column: 14, scope: !6094)
!6097 = !DILocalVariable(name: "i", scope: !6094, file: !3, line: 2598, type: !1821)
!6098 = !DILocation(line: 2598, column: 6, scope: !6094)
!6099 = !DILocation(line: 2599, column: 9, scope: !6100)
!6100 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2599, column: 2)
!6101 = !DILocation(line: 2599, column: 7, scope: !6100)
!6102 = !DILocation(line: 2599, column: 14, scope: !6103)
!6103 = distinct !DILexicalBlock(scope: !6100, file: !3, line: 2599, column: 2)
!6104 = !DILocation(line: 2599, column: 18, scope: !6103)
!6105 = !DILocation(line: 2599, column: 16, scope: !6103)
!6106 = !DILocation(line: 2599, column: 2, scope: !6100)
!6107 = !DILocalVariable(name: "t", scope: !6108, file: !3, line: 2601, type: !1724)
!6108 = distinct !DILexicalBlock(scope: !6103, file: !3, line: 2600, column: 4)
!6109 = !DILocation(line: 2601, column: 11, scope: !6108)
!6110 = !DILocation(line: 2601, column: 15, scope: !6108)
!6111 = !DILocation(line: 2603, column: 7, scope: !6108)
!6112 = !DILocation(line: 2603, column: 21, scope: !6108)
!6113 = !DILocation(line: 2604, column: 6, scope: !6108)
!6114 = !DILocation(line: 2605, column: 4, scope: !6108)
!6115 = !DILocation(line: 2599, column: 56, scope: !6103)
!6116 = !DILocation(line: 2599, column: 2, scope: !6103)
!6117 = distinct !{!6117, !6106, !6118}
!6118 = !DILocation(line: 2605, column: 4, scope: !6100)
!6119 = !DILocation(line: 2606, column: 3, scope: !6094)
!6120 = !DILocation(line: 2606, column: 17, scope: !6094)
!6121 = !DILocation(line: 2608, column: 7, scope: !5920)
!6122 = !DILocalVariable(name: "i", scope: !6123, file: !3, line: 2613, type: !7)
!6123 = distinct !DILexicalBlock(scope: !5920, file: !3, line: 2612, column: 7)
!6124 = !DILocation(line: 2613, column: 11, scope: !6123)
!6125 = !DILocation(line: 2615, column: 6, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2615, column: 6)
!6127 = !DILocation(line: 2615, column: 20, scope: !6126)
!6128 = !DILocation(line: 2615, column: 6, scope: !6123)
!6129 = !DILocation(line: 2616, column: 8, scope: !6126)
!6130 = !DILocation(line: 2616, column: 6, scope: !6126)
!6131 = !DILocation(line: 2616, column: 4, scope: !6126)
!6132 = !DILocation(line: 2618, column: 51, scope: !6123)
!6133 = !DILocation(line: 2618, column: 34, scope: !6123)
!6134 = !DILocation(line: 2618, column: 22, scope: !6123)
!6135 = !DILocation(line: 2618, column: 6, scope: !6123)
!6136 = !DILocation(line: 2618, column: 4, scope: !6123)
!6137 = !DILocation(line: 2619, column: 6, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2619, column: 6)
!6139 = !DILocation(line: 2619, column: 11, scope: !6138)
!6140 = !DILocation(line: 2619, column: 8, scope: !6138)
!6141 = !DILocation(line: 2619, column: 6, scope: !6123)
!6142 = !DILocalVariable(name: "str", scope: !6143, file: !3, line: 2621, type: !3110)
!6143 = distinct !DILexicalBlock(scope: !6138, file: !3, line: 2620, column: 4)
!6144 = !DILocation(line: 2621, column: 12, scope: !6143)
!6145 = !DILocation(line: 2623, column: 12, scope: !6143)
!6146 = !DILocation(line: 2623, column: 10, scope: !6143)
!6147 = !DILocation(line: 2624, column: 31, scope: !6143)
!6148 = !DILocation(line: 2624, column: 37, scope: !6143)
!6149 = !DILocation(line: 2624, column: 40, scope: !6143)
!6150 = !DILocation(line: 2624, column: 45, scope: !6143)
!6151 = !DILocation(line: 2624, column: 6, scope: !6143)
!6152 = !DILocation(line: 2625, column: 4, scope: !6143)
!6153 = !DILocation(line: 2626, column: 3, scope: !6123)
!6154 = !DILocation(line: 2626, column: 17, scope: !6123)
!6155 = !DILocation(line: 2628, column: 7, scope: !5920)
!6156 = !DILocation(line: 2631, column: 7, scope: !5920)
!6157 = !DILocation(line: 2634, column: 3, scope: !5889)
!6158 = !DILocation(line: 2635, column: 1, scope: !5889)
!6159 = distinct !DISubprogram(name: "gsi_next", scope: !1304, file: !1304, line: 4485, type: !6160, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6160 = !DISubroutineType(types: !6161)
!6161 = !{null, !6162}
!6162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3129, size: 64)
!6163 = !DILocalVariable(name: "i", arg: 1, scope: !6159, file: !1304, line: 4485, type: !6162)
!6164 = !DILocation(line: 4485, column: 33, scope: !6159)
!6165 = !DILocation(line: 4487, column: 12, scope: !6159)
!6166 = !DILocation(line: 4487, column: 15, scope: !6159)
!6167 = !DILocation(line: 4487, column: 20, scope: !6159)
!6168 = !DILocation(line: 4487, column: 3, scope: !6159)
!6169 = !DILocation(line: 4487, column: 6, scope: !6159)
!6170 = !DILocation(line: 4487, column: 10, scope: !6159)
!6171 = !DILocation(line: 4488, column: 1, scope: !6159)
!6172 = distinct !DISubprogram(name: "bb_seq", scope: !1304, file: !1304, line: 237, type: !6173, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6173 = !DISubroutineType(types: !6174)
!6174 = !{!2045, !6175}
!6175 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1725, line: 112, baseType: !6176)
!6176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6177, size: 64)
!6177 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2020)
!6178 = !DILocalVariable(name: "bb", arg: 1, scope: !6172, file: !1304, line: 237, type: !6175)
!6179 = !DILocation(line: 237, column: 27, scope: !6172)
!6180 = !DILocation(line: 239, column: 13, scope: !6172)
!6181 = !DILocation(line: 239, column: 17, scope: !6172)
!6182 = !DILocation(line: 239, column: 23, scope: !6172)
!6183 = !DILocation(line: 239, column: 33, scope: !6172)
!6184 = !DILocation(line: 239, column: 36, scope: !6172)
!6185 = !DILocation(line: 239, column: 40, scope: !6172)
!6186 = !DILocation(line: 239, column: 43, scope: !6172)
!6187 = !DILocation(line: 239, column: 10, scope: !6172)
!6188 = !DILocation(line: 239, column: 53, scope: !6172)
!6189 = !DILocation(line: 239, column: 57, scope: !6172)
!6190 = !DILocation(line: 239, column: 60, scope: !6172)
!6191 = !DILocation(line: 239, column: 68, scope: !6172)
!6192 = !DILocation(line: 239, column: 3, scope: !6172)
!6193 = distinct !DISubprogram(name: "gimple_seq_first", scope: !1304, file: !1304, line: 159, type: !6194, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6194 = !DISubroutineType(types: !6195)
!6195 = !{!2050, !6196}
!6196 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1725, line: 67, baseType: !6197)
!6197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6198, size: 64)
!6198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2047)
!6199 = !DILocalVariable(name: "s", arg: 1, scope: !6193, file: !1304, line: 159, type: !6196)
!6200 = !DILocation(line: 159, column: 36, scope: !6193)
!6201 = !DILocation(line: 161, column: 10, scope: !6193)
!6202 = !DILocation(line: 161, column: 14, scope: !6193)
!6203 = !DILocation(line: 161, column: 17, scope: !6193)
!6204 = !DILocation(line: 161, column: 3, scope: !6193)
!6205 = distinct !DISubprogram(name: "VEC_structure_heap_free", scope: !3, file: !3, line: 199, type: !6206, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6206 = !DISubroutineType(types: !6207)
!6207 = !{null, !4599}
!6208 = !DILocalVariable(name: "vec_", arg: 1, scope: !6205, file: !3, line: 199, type: !4599)
!6209 = !DILocation(line: 199, column: 1, scope: !6205)
!6210 = !DILocation(line: 199, column: 1, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6205, file: !3, line: 199, column: 1)
!6212 = distinct !DISubprogram(name: "add_access_to_acc_sites", scope: !3, file: !3, line: 485, type: !6213, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6213 = !DISubroutineType(types: !6214)
!6214 = !{null, !2055, !1724, !2485}
!6215 = !DILocalVariable(name: "stmt", arg: 1, scope: !6212, file: !3, line: 485, type: !2055)
!6216 = !DILocation(line: 485, column: 33, scope: !6212)
!6217 = !DILocalVariable(name: "var", arg: 2, scope: !6212, file: !3, line: 485, type: !1724)
!6218 = !DILocation(line: 485, column: 44, scope: !6212)
!6219 = !DILocalVariable(name: "accs", arg: 3, scope: !6212, file: !3, line: 485, type: !2485)
!6220 = !DILocation(line: 485, column: 56, scope: !6212)
!6221 = !DILocalVariable(name: "acc", scope: !6212, file: !3, line: 487, type: !3115)
!6222 = !DILocation(line: 487, column: 24, scope: !6212)
!6223 = !DILocation(line: 490, column: 27, scope: !6212)
!6224 = !DILocation(line: 490, column: 33, scope: !6212)
!6225 = !DILocation(line: 490, column: 39, scope: !6212)
!6226 = !DILocation(line: 490, column: 58, scope: !6212)
!6227 = !DILocation(line: 490, column: 6, scope: !6212)
!6228 = !DILocation(line: 489, column: 10, scope: !6212)
!6229 = !DILocation(line: 489, column: 8, scope: !6212)
!6230 = !DILocation(line: 492, column: 9, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 492, column: 8)
!6232 = !DILocation(line: 492, column: 8, scope: !6212)
!6233 = !DILocalVariable(name: "slot", scope: !6234, file: !3, line: 494, type: !2508)
!6234 = distinct !DILexicalBlock(scope: !6231, file: !3, line: 493, column: 6)
!6235 = !DILocation(line: 494, column: 15, scope: !6234)
!6236 = !DILocation(line: 496, column: 14, scope: !6234)
!6237 = !DILocation(line: 496, column: 12, scope: !6234)
!6238 = !DILocation(line: 497, column: 20, scope: !6234)
!6239 = !DILocation(line: 497, column: 8, scope: !6234)
!6240 = !DILocation(line: 497, column: 13, scope: !6234)
!6241 = !DILocation(line: 497, column: 18, scope: !6234)
!6242 = !DILocation(line: 498, column: 30, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 498, column: 12)
!6244 = !DILocation(line: 498, column: 13, scope: !6243)
!6245 = !DILocation(line: 498, column: 12, scope: !6234)
!6246 = !DILocation(line: 499, column: 15, scope: !6243)
!6247 = !DILocation(line: 499, column: 3, scope: !6243)
!6248 = !DILocation(line: 499, column: 8, scope: !6243)
!6249 = !DILocation(line: 499, column: 13, scope: !6243)
!6250 = !DILocation(line: 501, column: 3, scope: !6243)
!6251 = !DILocation(line: 501, column: 8, scope: !6243)
!6252 = !DILocation(line: 501, column: 13, scope: !6243)
!6253 = !DILocation(line: 502, column: 41, scope: !6234)
!6254 = !DILocation(line: 502, column: 47, scope: !6234)
!6255 = !DILocation(line: 503, column: 6, scope: !6234)
!6256 = !DILocation(line: 503, column: 25, scope: !6234)
!6257 = !DILocation(line: 502, column: 15, scope: !6234)
!6258 = !DILocation(line: 502, column: 13, scope: !6234)
!6259 = !DILocation(line: 504, column: 16, scope: !6234)
!6260 = !DILocation(line: 504, column: 9, scope: !6234)
!6261 = !DILocation(line: 504, column: 14, scope: !6234)
!6262 = !DILocation(line: 505, column: 6, scope: !6234)
!6263 = !DILocation(line: 506, column: 26, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 506, column: 8)
!6265 = !DILocation(line: 506, column: 9, scope: !6264)
!6266 = !DILocation(line: 506, column: 8, scope: !6212)
!6267 = !DILocation(line: 507, column: 6, scope: !6264)
!6268 = !DILocation(line: 508, column: 1, scope: !6212)
!6269 = distinct !DISubprogram(name: "find_field_in_struct", scope: !3, file: !3, line: 308, type: !6270, scopeLine: 309, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6270 = !DISubroutineType(types: !6271)
!6271 = !{!3037, !3110, !1724}
!6272 = !DILocalVariable(name: "str", arg: 1, scope: !6269, file: !3, line: 308, type: !3110)
!6273 = !DILocation(line: 308, column: 29, scope: !6269)
!6274 = !DILocalVariable(name: "field_decl", arg: 2, scope: !6269, file: !3, line: 308, type: !1724)
!6275 = !DILocation(line: 308, column: 39, scope: !6269)
!6276 = !DILocalVariable(name: "i", scope: !6269, file: !3, line: 310, type: !1821)
!6277 = !DILocation(line: 310, column: 7, scope: !6269)
!6278 = !DILocalVariable(name: "field", scope: !6269, file: !3, line: 312, type: !1724)
!6279 = !DILocation(line: 312, column: 8, scope: !6269)
!6280 = !DILocation(line: 312, column: 40, scope: !6269)
!6281 = !DILocation(line: 312, column: 45, scope: !6269)
!6282 = !DILocation(line: 312, column: 51, scope: !6269)
!6283 = !DILocation(line: 312, column: 16, scope: !6269)
!6284 = !DILocation(line: 314, column: 10, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 314, column: 3)
!6286 = !DILocation(line: 314, column: 8, scope: !6285)
!6287 = !DILocation(line: 314, column: 15, scope: !6288)
!6288 = distinct !DILexicalBlock(scope: !6285, file: !3, line: 314, column: 3)
!6289 = !DILocation(line: 314, column: 19, scope: !6288)
!6290 = !DILocation(line: 314, column: 24, scope: !6288)
!6291 = !DILocation(line: 314, column: 17, scope: !6288)
!6292 = !DILocation(line: 314, column: 3, scope: !6285)
!6293 = !DILocation(line: 315, column: 9, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 315, column: 9)
!6295 = !DILocation(line: 315, column: 14, scope: !6294)
!6296 = !DILocation(line: 315, column: 21, scope: !6294)
!6297 = !DILocation(line: 315, column: 24, scope: !6294)
!6298 = !DILocation(line: 315, column: 32, scope: !6294)
!6299 = !DILocation(line: 315, column: 29, scope: !6294)
!6300 = !DILocation(line: 315, column: 9, scope: !6288)
!6301 = !DILocation(line: 316, column: 16, scope: !6294)
!6302 = !DILocation(line: 316, column: 21, scope: !6294)
!6303 = !DILocation(line: 316, column: 28, scope: !6294)
!6304 = !DILocation(line: 316, column: 7, scope: !6294)
!6305 = !DILocation(line: 314, column: 37, scope: !6288)
!6306 = !DILocation(line: 314, column: 3, scope: !6288)
!6307 = distinct !{!6307, !6292, !6308}
!6308 = !DILocation(line: 316, column: 30, scope: !6285)
!6309 = !DILocation(line: 318, column: 3, scope: !6269)
!6310 = !DILocation(line: 319, column: 1, scope: !6269)
!6311 = distinct !DISubprogram(name: "make_field_acc_node", scope: !3, file: !3, line: 448, type: !6312, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6312 = !DISubroutineType(types: !6313)
!6313 = !{!3113}
!6314 = !DILocation(line: 450, column: 10, scope: !6311)
!6315 = !DILocation(line: 450, column: 3, scope: !6311)
!6316 = distinct !DISubprogram(name: "decompose_access", scope: !3, file: !3, line: 431, type: !6317, scopeLine: 432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6317 = !DISubroutineType(types: !6318)
!6318 = !{!1844, !1724, !3113}
!6319 = !DILocalVariable(name: "str_decl", arg: 1, scope: !6316, file: !3, line: 431, type: !1724)
!6320 = !DILocation(line: 431, column: 24, scope: !6316)
!6321 = !DILocalVariable(name: "acc", arg: 2, scope: !6316, file: !3, line: 431, type: !3113)
!6322 = !DILocation(line: 431, column: 60, scope: !6316)
!6323 = !DILocation(line: 433, column: 3, scope: !6316)
!6324 = !DILocation(line: 435, column: 7, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 435, column: 7)
!6326 = !DILocation(line: 435, column: 28, scope: !6325)
!6327 = !DILocation(line: 435, column: 7, scope: !6316)
!6328 = !DILocation(line: 436, column: 40, scope: !6325)
!6329 = !DILocation(line: 436, column: 50, scope: !6325)
!6330 = !DILocation(line: 436, column: 12, scope: !6325)
!6331 = !DILocation(line: 436, column: 5, scope: !6325)
!6332 = !DILocation(line: 437, column: 12, scope: !6333)
!6333 = distinct !DILexicalBlock(scope: !6325, file: !3, line: 437, column: 12)
!6334 = !DILocation(line: 437, column: 33, scope: !6333)
!6335 = !DILocation(line: 437, column: 12, scope: !6325)
!6336 = !DILocation(line: 438, column: 5, scope: !6333)
!6337 = !DILocation(line: 439, column: 12, scope: !6338)
!6338 = distinct !DILexicalBlock(scope: !6333, file: !3, line: 439, column: 12)
!6339 = !DILocation(line: 439, column: 33, scope: !6338)
!6340 = !DILocation(line: 439, column: 12, scope: !6333)
!6341 = !DILocation(line: 440, column: 5, scope: !6338)
!6342 = !DILocation(line: 442, column: 3, scope: !6316)
!6343 = !DILocation(line: 443, column: 1, scope: !6316)
!6344 = distinct !DISubprogram(name: "gimple_bb", scope: !1304, file: !1304, line: 1112, type: !6345, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6345 = !DISubroutineType(types: !6346)
!6346 = !{!2019, !3077}
!6347 = !DILocalVariable(name: "g", arg: 1, scope: !6344, file: !1304, line: 1112, type: !3077)
!6348 = !DILocation(line: 1112, column: 25, scope: !6344)
!6349 = !DILocation(line: 1114, column: 10, scope: !6344)
!6350 = !DILocation(line: 1114, column: 13, scope: !6344)
!6351 = !DILocation(line: 1114, column: 20, scope: !6344)
!6352 = !DILocation(line: 1114, column: 3, scope: !6344)
!6353 = distinct !DISubprogram(name: "add_field_acc_to_acc_sites", scope: !3, file: !3, line: 467, type: !6354, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6354 = !DISubroutineType(types: !6355)
!6355 = !{null, !3113, !2485}
!6356 = !DILocalVariable(name: "acc", arg: 1, scope: !6353, file: !3, line: 467, type: !3113)
!6357 = !DILocation(line: 467, column: 55, scope: !6353)
!6358 = !DILocalVariable(name: "f_accs", arg: 2, scope: !6353, file: !3, line: 468, type: !2485)
!6359 = !DILocation(line: 468, column: 15, scope: !6353)
!6360 = !DILocalVariable(name: "slot", scope: !6353, file: !3, line: 470, type: !2508)
!6361 = !DILocation(line: 470, column: 10, scope: !6353)
!6362 = !DILocation(line: 472, column: 3, scope: !6353)
!6363 = !DILocation(line: 473, column: 36, scope: !6353)
!6364 = !DILocation(line: 473, column: 44, scope: !6353)
!6365 = !DILocation(line: 473, column: 49, scope: !6353)
!6366 = !DILocation(line: 474, column: 8, scope: !6353)
!6367 = !DILocation(line: 474, column: 27, scope: !6353)
!6368 = !DILocation(line: 474, column: 32, scope: !6353)
!6369 = !DILocation(line: 473, column: 10, scope: !6353)
!6370 = !DILocation(line: 473, column: 8, scope: !6353)
!6371 = !DILocation(line: 476, column: 11, scope: !6353)
!6372 = !DILocation(line: 476, column: 4, scope: !6353)
!6373 = !DILocation(line: 476, column: 9, scope: !6353)
!6374 = !DILocation(line: 477, column: 1, scope: !6353)
!6375 = distinct !DISubprogram(name: "find_field_in_struct_1", scope: !3, file: !3, line: 283, type: !6376, scopeLine: 284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6376 = !DISubroutineType(types: !6377)
!6377 = !{!1724, !1724, !1724}
!6378 = !DILocalVariable(name: "str_type", arg: 1, scope: !6375, file: !3, line: 283, type: !1724)
!6379 = !DILocation(line: 283, column: 30, scope: !6375)
!6380 = !DILocalVariable(name: "field", arg: 2, scope: !6375, file: !3, line: 283, type: !1724)
!6381 = !DILocation(line: 283, column: 45, scope: !6375)
!6382 = !DILocalVariable(name: "str_field", scope: !6375, file: !3, line: 285, type: !1724)
!6383 = !DILocation(line: 285, column: 8, scope: !6375)
!6384 = !DILocation(line: 287, column: 8, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 287, column: 7)
!6386 = !DILocation(line: 287, column: 7, scope: !6375)
!6387 = !DILocation(line: 288, column: 5, scope: !6385)
!6388 = !DILocation(line: 290, column: 20, scope: !6389)
!6389 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 290, column: 3)
!6390 = !DILocation(line: 290, column: 18, scope: !6389)
!6391 = !DILocation(line: 290, column: 8, scope: !6389)
!6392 = !DILocation(line: 290, column: 44, scope: !6393)
!6393 = distinct !DILexicalBlock(scope: !6389, file: !3, line: 290, column: 3)
!6394 = !DILocation(line: 290, column: 3, scope: !6389)
!6395 = !DILocation(line: 294, column: 12, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 294, column: 11)
!6397 = distinct !DILexicalBlock(scope: !6393, file: !3, line: 292, column: 5)
!6398 = !DILocation(line: 294, column: 11, scope: !6397)
!6399 = !DILocation(line: 295, column: 2, scope: !6396)
!6400 = !DILocation(line: 297, column: 27, scope: !6401)
!6401 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 297, column: 11)
!6402 = !DILocation(line: 297, column: 34, scope: !6401)
!6403 = !DILocation(line: 297, column: 11, scope: !6401)
!6404 = !DILocation(line: 297, column: 11, scope: !6397)
!6405 = !DILocation(line: 298, column: 9, scope: !6401)
!6406 = !DILocation(line: 298, column: 2, scope: !6401)
!6407 = !DILocation(line: 299, column: 5, scope: !6397)
!6408 = !DILocation(line: 291, column: 20, scope: !6393)
!6409 = !DILocation(line: 291, column: 18, scope: !6393)
!6410 = !DILocation(line: 290, column: 3, scope: !6393)
!6411 = distinct !{!6411, !6394, !6412}
!6412 = !DILocation(line: 299, column: 5, scope: !6389)
!6413 = !DILocation(line: 301, column: 3, scope: !6375)
!6414 = !DILocation(line: 302, column: 1, scope: !6375)
!6415 = distinct !DISubprogram(name: "decompose_indirect_ref_acc", scope: !3, file: !3, line: 373, type: !6317, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6416 = !DILocalVariable(name: "str_decl", arg: 1, scope: !6415, file: !3, line: 373, type: !1724)
!6417 = !DILocation(line: 373, column: 34, scope: !6415)
!6418 = !DILocalVariable(name: "acc", arg: 2, scope: !6415, file: !3, line: 373, type: !3113)
!6419 = !DILocation(line: 373, column: 70, scope: !6415)
!6420 = !DILocalVariable(name: "ref_var", scope: !6415, file: !3, line: 375, type: !1724)
!6421 = !DILocation(line: 375, column: 8, scope: !6415)
!6422 = !DILocalVariable(name: "struct_size", scope: !6415, file: !3, line: 376, type: !1724)
!6423 = !DILocation(line: 376, column: 8, scope: !6415)
!6424 = !DILocalVariable(name: "op0", scope: !6415, file: !3, line: 376, type: !1724)
!6425 = !DILocation(line: 376, column: 21, scope: !6415)
!6426 = !DILocalVariable(name: "op1", scope: !6415, file: !3, line: 376, type: !1724)
!6427 = !DILocation(line: 376, column: 26, scope: !6415)
!6428 = !DILocalVariable(name: "before_cast", scope: !6415, file: !3, line: 377, type: !1724)
!6429 = !DILocation(line: 377, column: 8, scope: !6415)
!6430 = !DILocalVariable(name: "rhs_code", scope: !6415, file: !3, line: 378, type: !317)
!6431 = !DILocation(line: 378, column: 18, scope: !6415)
!6432 = !DILocation(line: 380, column: 13, scope: !6415)
!6433 = !DILocation(line: 380, column: 11, scope: !6415)
!6434 = !DILocation(line: 382, column: 7, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 382, column: 7)
!6436 = !DILocation(line: 382, column: 27, scope: !6435)
!6437 = !DILocation(line: 382, column: 7, scope: !6415)
!6438 = !DILocation(line: 383, column: 5, scope: !6435)
!6439 = !DILocation(line: 385, column: 23, scope: !6415)
!6440 = !DILocation(line: 385, column: 3, scope: !6415)
!6441 = !DILocation(line: 385, column: 8, scope: !6415)
!6442 = !DILocation(line: 385, column: 21, scope: !6415)
!6443 = !DILocation(line: 386, column: 9, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 386, column: 7)
!6445 = !DILocation(line: 386, column: 14, scope: !6444)
!6446 = !DILocation(line: 386, column: 8, scope: !6444)
!6447 = !DILocation(line: 387, column: 7, scope: !6444)
!6448 = !DILocation(line: 387, column: 24, scope: !6444)
!6449 = !DILocation(line: 387, column: 29, scope: !6444)
!6450 = !DILocation(line: 387, column: 11, scope: !6444)
!6451 = !DILocation(line: 387, column: 43, scope: !6444)
!6452 = !DILocation(line: 386, column: 7, scope: !6415)
!6453 = !DILocation(line: 388, column: 5, scope: !6444)
!6454 = !DILocation(line: 390, column: 38, scope: !6415)
!6455 = !DILocation(line: 390, column: 43, scope: !6415)
!6456 = !DILocation(line: 390, column: 14, scope: !6415)
!6457 = !DILocation(line: 390, column: 12, scope: !6415)
!6458 = !DILocation(line: 392, column: 7, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 392, column: 7)
!6460 = !DILocation(line: 392, column: 16, scope: !6459)
!6461 = !DILocation(line: 393, column: 7, scope: !6459)
!6462 = !DILocation(line: 393, column: 10, scope: !6459)
!6463 = !DILocation(line: 393, column: 19, scope: !6459)
!6464 = !DILocation(line: 394, column: 7, scope: !6459)
!6465 = !DILocation(line: 394, column: 10, scope: !6459)
!6466 = !DILocation(line: 394, column: 19, scope: !6459)
!6467 = !DILocation(line: 392, column: 7, scope: !6415)
!6468 = !DILocation(line: 395, column: 5, scope: !6459)
!6469 = !DILocation(line: 397, column: 29, scope: !6415)
!6470 = !DILocation(line: 397, column: 34, scope: !6415)
!6471 = !DILocation(line: 397, column: 9, scope: !6415)
!6472 = !DILocation(line: 397, column: 7, scope: !6415)
!6473 = !DILocation(line: 398, column: 29, scope: !6415)
!6474 = !DILocation(line: 398, column: 34, scope: !6415)
!6475 = !DILocation(line: 398, column: 9, scope: !6415)
!6476 = !DILocation(line: 398, column: 7, scope: !6415)
!6477 = !DILocation(line: 400, column: 51, scope: !6478)
!6478 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 400, column: 7)
!6479 = !DILocation(line: 400, column: 61, scope: !6478)
!6480 = !DILocation(line: 400, column: 66, scope: !6478)
!6481 = !DILocation(line: 401, column: 9, scope: !6478)
!6482 = !DILocation(line: 401, column: 14, scope: !6478)
!6483 = !DILocation(line: 401, column: 21, scope: !6478)
!6484 = !DILocation(line: 401, column: 26, scope: !6478)
!6485 = !DILocation(line: 402, column: 9, scope: !6478)
!6486 = !DILocation(line: 402, column: 14, scope: !6478)
!6487 = !DILocation(line: 400, column: 8, scope: !6478)
!6488 = !DILocation(line: 400, column: 7, scope: !6415)
!6489 = !DILocation(line: 403, column: 5, scope: !6478)
!6490 = !DILocation(line: 405, column: 7, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 405, column: 7)
!6492 = !DILocation(line: 405, column: 12, scope: !6491)
!6493 = !DILocation(line: 405, column: 7, scope: !6415)
!6494 = !DILocation(line: 406, column: 19, scope: !6491)
!6495 = !DILocation(line: 406, column: 17, scope: !6491)
!6496 = !DILocation(line: 406, column: 5, scope: !6491)
!6497 = !DILocation(line: 408, column: 19, scope: !6491)
!6498 = !DILocation(line: 408, column: 24, scope: !6491)
!6499 = !DILocation(line: 408, column: 17, scope: !6491)
!6500 = !DILocation(line: 410, column: 8, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 410, column: 7)
!6502 = !DILocation(line: 410, column: 7, scope: !6415)
!6503 = !DILocation(line: 411, column: 5, scope: !6501)
!6504 = !DILocation(line: 414, column: 7, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 414, column: 7)
!6506 = !DILocation(line: 414, column: 7, scope: !6415)
!6507 = !DILocation(line: 415, column: 5, scope: !6505)
!6508 = !DILocation(line: 417, column: 17, scope: !6415)
!6509 = !DILocation(line: 417, column: 15, scope: !6415)
!6510 = !DILocation(line: 419, column: 27, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 419, column: 7)
!6512 = !DILocation(line: 419, column: 41, scope: !6511)
!6513 = !DILocation(line: 419, column: 46, scope: !6511)
!6514 = !DILocation(line: 419, column: 51, scope: !6511)
!6515 = !DILocation(line: 419, column: 8, scope: !6511)
!6516 = !DILocation(line: 419, column: 7, scope: !6415)
!6517 = !DILocation(line: 420, column: 5, scope: !6511)
!6518 = !DILocation(line: 422, column: 3, scope: !6415)
!6519 = !DILocation(line: 423, column: 1, scope: !6415)
!6520 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !1304, file: !1304, line: 1815, type: !6521, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6521 = !DISubroutineType(types: !6522)
!6522 = !{!317, !3077}
!6523 = !DILocalVariable(name: "gs", arg: 1, scope: !6520, file: !1304, line: 1815, type: !3077)
!6524 = !DILocation(line: 1815, column: 38, scope: !6520)
!6525 = !DILocalVariable(name: "code", scope: !6520, file: !1304, line: 1817, type: !317)
!6526 = !DILocation(line: 1817, column: 18, scope: !6520)
!6527 = !DILocation(line: 1820, column: 28, scope: !6520)
!6528 = !DILocation(line: 1820, column: 10, scope: !6520)
!6529 = !DILocation(line: 1820, column: 8, scope: !6520)
!6530 = !DILocation(line: 1821, column: 29, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6520, file: !1304, line: 1821, column: 7)
!6532 = !DILocation(line: 1821, column: 7, scope: !6531)
!6533 = !DILocation(line: 1821, column: 35, scope: !6531)
!6534 = !DILocation(line: 1821, column: 7, scope: !6520)
!6535 = !DILocation(line: 1822, column: 12, scope: !6531)
!6536 = !DILocation(line: 1822, column: 10, scope: !6531)
!6537 = !DILocation(line: 1822, column: 5, scope: !6531)
!6538 = !DILocation(line: 1824, column: 10, scope: !6520)
!6539 = !DILocation(line: 1824, column: 3, scope: !6520)
!6540 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !1304, file: !1304, line: 1727, type: !5326, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6541 = !DILocalVariable(name: "gs", arg: 1, scope: !6540, file: !1304, line: 1727, type: !3077)
!6542 = !DILocation(line: 1727, column: 34, scope: !6540)
!6543 = !DILocation(line: 1730, column: 21, scope: !6540)
!6544 = !DILocation(line: 1730, column: 10, scope: !6540)
!6545 = !DILocation(line: 1730, column: 3, scope: !6540)
!6546 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !1304, file: !1304, line: 1759, type: !5326, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6547 = !DILocalVariable(name: "gs", arg: 1, scope: !6546, file: !1304, line: 1759, type: !3077)
!6548 = !DILocation(line: 1759, column: 34, scope: !6546)
!6549 = !DILocation(line: 1763, column: 23, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6546, file: !1304, line: 1763, column: 7)
!6551 = !DILocation(line: 1763, column: 7, scope: !6550)
!6552 = !DILocation(line: 1763, column: 27, scope: !6550)
!6553 = !DILocation(line: 1763, column: 7, scope: !6546)
!6554 = !DILocation(line: 1764, column: 23, scope: !6550)
!6555 = !DILocation(line: 1764, column: 12, scope: !6550)
!6556 = !DILocation(line: 1764, column: 5, scope: !6550)
!6557 = !DILocation(line: 1766, column: 5, scope: !6550)
!6558 = !DILocation(line: 1767, column: 1, scope: !6546)
!6559 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !5586, file: !5586, line: 803, type: !6560, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6560 = !DISubroutineType(types: !6561)
!6561 = !{!1724, !2055, !1821}
!6562 = !DILocalVariable(name: "stmt", arg: 1, scope: !6559, file: !5586, line: 803, type: !2055)
!6563 = !DILocation(line: 803, column: 33, scope: !6559)
!6564 = !DILocalVariable(name: "flags", arg: 2, scope: !6559, file: !5586, line: 803, type: !1821)
!6565 = !DILocation(line: 803, column: 43, scope: !6559)
!6566 = !DILocalVariable(name: "var", scope: !6559, file: !5586, line: 805, type: !1724)
!6567 = !DILocation(line: 805, column: 8, scope: !6559)
!6568 = !DILocalVariable(name: "iter", scope: !6559, file: !5586, line: 806, type: !6569)
!6569 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1414, line: 140, baseType: !6570)
!6570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1414, line: 131, size: 320, elements: !6571)
!6571 = !{!6572, !6573, !6574, !6576, !6578, !6579, !6580}
!6572 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6570, file: !1414, line: 133, baseType: !1844, size: 8)
!6573 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6570, file: !1414, line: 134, baseType: !1413, size: 32, offset: 32)
!6574 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6570, file: !1414, line: 135, baseType: !6575, size: 64, offset: 64)
!6575 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1414, line: 42, baseType: !2084)
!6576 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6570, file: !1414, line: 136, baseType: !6577, size: 64, offset: 128)
!6577 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1414, line: 50, baseType: !2091)
!6578 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6570, file: !1414, line: 137, baseType: !1821, size: 32, offset: 192)
!6579 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6570, file: !1414, line: 138, baseType: !1821, size: 32, offset: 224)
!6580 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6570, file: !1414, line: 139, baseType: !2055, size: 64, offset: 256)
!6581 = !DILocation(line: 806, column: 15, scope: !6559)
!6582 = !DILocation(line: 808, column: 35, scope: !6559)
!6583 = !DILocation(line: 808, column: 41, scope: !6559)
!6584 = !DILocation(line: 808, column: 9, scope: !6559)
!6585 = !DILocation(line: 808, column: 7, scope: !6559)
!6586 = !DILocation(line: 809, column: 7, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6559, file: !5586, line: 809, column: 7)
!6588 = !DILocation(line: 809, column: 7, scope: !6559)
!6589 = !DILocation(line: 810, column: 5, scope: !6587)
!6590 = !DILocation(line: 811, column: 3, scope: !6559)
!6591 = !DILocation(line: 812, column: 7, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6559, file: !5586, line: 812, column: 7)
!6593 = !DILocation(line: 812, column: 7, scope: !6559)
!6594 = !DILocation(line: 813, column: 12, scope: !6592)
!6595 = !DILocation(line: 813, column: 5, scope: !6592)
!6596 = !DILocation(line: 814, column: 3, scope: !6559)
!6597 = !DILocation(line: 815, column: 1, scope: !6559)
!6598 = distinct !DISubprogram(name: "is_result_of_mult", scope: !3, file: !3, line: 326, type: !6599, scopeLine: 327, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6599 = !DISubroutineType(types: !6600)
!6600 = !{!1844, !1724, !2089, !1724}
!6601 = !DILocalVariable(name: "arg", arg: 1, scope: !6598, file: !3, line: 326, type: !1724)
!6602 = !DILocation(line: 326, column: 25, scope: !6598)
!6603 = !DILocalVariable(name: "num", arg: 2, scope: !6598, file: !3, line: 326, type: !2089)
!6604 = !DILocation(line: 326, column: 36, scope: !6598)
!6605 = !DILocalVariable(name: "struct_size", arg: 3, scope: !6598, file: !3, line: 326, type: !1724)
!6606 = !DILocation(line: 326, column: 46, scope: !6598)
!6607 = !DILocalVariable(name: "size_def_stmt", scope: !6598, file: !3, line: 328, type: !2055)
!6608 = !DILocation(line: 328, column: 10, scope: !6598)
!6609 = !DILocation(line: 328, column: 26, scope: !6598)
!6610 = !DILocation(line: 334, column: 7, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 334, column: 7)
!6612 = !DILocation(line: 334, column: 21, scope: !6611)
!6613 = !DILocation(line: 334, column: 42, scope: !6611)
!6614 = !DILocation(line: 334, column: 24, scope: !6611)
!6615 = !DILocation(line: 334, column: 7, scope: !6598)
!6616 = !DILocalVariable(name: "lhs", scope: !6617, file: !3, line: 336, type: !1724)
!6617 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 335, column: 5)
!6618 = !DILocation(line: 336, column: 12, scope: !6617)
!6619 = !DILocation(line: 336, column: 37, scope: !6617)
!6620 = !DILocation(line: 336, column: 18, scope: !6617)
!6621 = !DILocation(line: 339, column: 27, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 339, column: 11)
!6623 = !DILocation(line: 339, column: 12, scope: !6622)
!6624 = !DILocation(line: 339, column: 11, scope: !6617)
!6625 = !DILocation(line: 340, column: 2, scope: !6622)
!6626 = !DILocation(line: 342, column: 35, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 342, column: 11)
!6628 = !DILocation(line: 342, column: 11, scope: !6627)
!6629 = !DILocation(line: 342, column: 50, scope: !6627)
!6630 = !DILocation(line: 342, column: 11, scope: !6617)
!6631 = !DILocalVariable(name: "arg0", scope: !6632, file: !3, line: 344, type: !1724)
!6632 = distinct !DILexicalBlock(scope: !6627, file: !3, line: 343, column: 2)
!6633 = !DILocation(line: 344, column: 9, scope: !6632)
!6634 = !DILocation(line: 344, column: 36, scope: !6632)
!6635 = !DILocation(line: 344, column: 16, scope: !6632)
!6636 = !DILocalVariable(name: "arg1", scope: !6632, file: !3, line: 345, type: !1724)
!6637 = !DILocation(line: 345, column: 9, scope: !6632)
!6638 = !DILocation(line: 345, column: 36, scope: !6632)
!6639 = !DILocation(line: 345, column: 16, scope: !6632)
!6640 = !DILocation(line: 347, column: 25, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 347, column: 8)
!6642 = !DILocation(line: 347, column: 31, scope: !6641)
!6643 = !DILocation(line: 347, column: 8, scope: !6641)
!6644 = !DILocation(line: 347, column: 8, scope: !6632)
!6645 = !DILocation(line: 349, column: 15, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 348, column: 6)
!6647 = !DILocation(line: 349, column: 9, scope: !6646)
!6648 = !DILocation(line: 349, column: 13, scope: !6646)
!6649 = !DILocation(line: 350, column: 8, scope: !6646)
!6650 = !DILocation(line: 353, column: 25, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6632, file: !3, line: 353, column: 8)
!6652 = !DILocation(line: 353, column: 31, scope: !6651)
!6653 = !DILocation(line: 353, column: 8, scope: !6651)
!6654 = !DILocation(line: 353, column: 8, scope: !6632)
!6655 = !DILocation(line: 355, column: 15, scope: !6656)
!6656 = distinct !DILexicalBlock(scope: !6651, file: !3, line: 354, column: 6)
!6657 = !DILocation(line: 355, column: 9, scope: !6656)
!6658 = !DILocation(line: 355, column: 13, scope: !6656)
!6659 = !DILocation(line: 356, column: 8, scope: !6656)
!6660 = !DILocation(line: 358, column: 2, scope: !6632)
!6661 = !DILocation(line: 359, column: 5, scope: !6617)
!6662 = !DILocation(line: 361, column: 4, scope: !6598)
!6663 = !DILocation(line: 361, column: 8, scope: !6598)
!6664 = !DILocation(line: 362, column: 3, scope: !6598)
!6665 = !DILocation(line: 363, column: 1, scope: !6598)
!6666 = distinct !DISubprogram(name: "gimple_expr_code", scope: !1304, file: !1304, line: 1438, type: !6521, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6667 = !DILocalVariable(name: "stmt", arg: 1, scope: !6666, file: !1304, line: 1438, type: !3077)
!6668 = !DILocation(line: 1438, column: 32, scope: !6666)
!6669 = !DILocalVariable(name: "code", scope: !6666, file: !1304, line: 1440, type: !1303)
!6670 = !DILocation(line: 1440, column: 20, scope: !6666)
!6671 = !DILocation(line: 1440, column: 40, scope: !6666)
!6672 = !DILocation(line: 1440, column: 27, scope: !6666)
!6673 = !DILocation(line: 1441, column: 7, scope: !6674)
!6674 = distinct !DILexicalBlock(scope: !6666, file: !1304, line: 1441, column: 7)
!6675 = !DILocation(line: 1441, column: 12, scope: !6674)
!6676 = !DILocation(line: 1441, column: 29, scope: !6674)
!6677 = !DILocation(line: 1441, column: 32, scope: !6674)
!6678 = !DILocation(line: 1441, column: 37, scope: !6674)
!6679 = !DILocation(line: 1441, column: 7, scope: !6666)
!6680 = !DILocation(line: 1442, column: 29, scope: !6674)
!6681 = !DILocation(line: 1442, column: 35, scope: !6674)
!6682 = !DILocation(line: 1442, column: 42, scope: !6674)
!6683 = !DILocation(line: 1442, column: 5, scope: !6674)
!6684 = !DILocation(line: 1443, column: 12, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6674, file: !1304, line: 1443, column: 12)
!6686 = !DILocation(line: 1443, column: 17, scope: !6685)
!6687 = !DILocation(line: 1443, column: 12, scope: !6674)
!6688 = !DILocation(line: 1444, column: 5, scope: !6685)
!6689 = !DILocation(line: 1446, column: 5, scope: !6685)
!6690 = !DILocation(line: 1448, column: 5, scope: !6666)
!6691 = !DILocation(line: 1450, column: 1, scope: !6666)
!6692 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !1304, file: !1304, line: 1686, type: !6693, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6693 = !DISubroutineType(types: !6694)
!6694 = !{!1407, !317}
!6695 = !DILocalVariable(name: "code", arg: 1, scope: !6692, file: !1304, line: 1686, type: !317)
!6696 = !DILocation(line: 1686, column: 38, scope: !6692)
!6697 = !DILocation(line: 1688, column: 63, scope: !6692)
!6698 = !DILocation(line: 1688, column: 34, scope: !6692)
!6699 = !DILocation(line: 1688, column: 10, scope: !6692)
!6700 = !DILocation(line: 1688, column: 3, scope: !6692)
!6701 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1304, file: !1304, line: 1596, type: !6702, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6702 = !DISubroutineType(types: !6703)
!6703 = !{!7, !3077}
!6704 = !DILocalVariable(name: "gs", arg: 1, scope: !6701, file: !1304, line: 1596, type: !3077)
!6705 = !DILocation(line: 1596, column: 30, scope: !6701)
!6706 = !DILocation(line: 1598, column: 10, scope: !6701)
!6707 = !DILocation(line: 1598, column: 14, scope: !6701)
!6708 = !DILocation(line: 1598, column: 21, scope: !6701)
!6709 = !DILocation(line: 1598, column: 3, scope: !6701)
!6710 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !5586, file: !5586, line: 792, type: !6711, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6711 = !DISubroutineType(types: !6712)
!6712 = !{!1724, !6713, !2055, !1821}
!6713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6569, size: 64)
!6714 = !DILocalVariable(name: "ptr", arg: 1, scope: !6710, file: !5586, line: 792, type: !6713)
!6715 = !DILocation(line: 792, column: 33, scope: !6710)
!6716 = !DILocalVariable(name: "stmt", arg: 2, scope: !6710, file: !5586, line: 792, type: !2055)
!6717 = !DILocation(line: 792, column: 45, scope: !6710)
!6718 = !DILocalVariable(name: "flags", arg: 3, scope: !6710, file: !5586, line: 792, type: !1821)
!6719 = !DILocation(line: 792, column: 55, scope: !6710)
!6720 = !DILocation(line: 794, column: 17, scope: !6710)
!6721 = !DILocation(line: 794, column: 22, scope: !6710)
!6722 = !DILocation(line: 794, column: 28, scope: !6710)
!6723 = !DILocation(line: 794, column: 3, scope: !6710)
!6724 = !DILocation(line: 795, column: 3, scope: !6710)
!6725 = !DILocation(line: 795, column: 8, scope: !6710)
!6726 = !DILocation(line: 795, column: 18, scope: !6710)
!6727 = !DILocation(line: 796, column: 29, scope: !6710)
!6728 = !DILocation(line: 796, column: 10, scope: !6710)
!6729 = !DILocation(line: 796, column: 3, scope: !6710)
!6730 = distinct !DISubprogram(name: "op_iter_done", scope: !5586, file: !5586, line: 652, type: !6731, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6731 = !DISubroutineType(types: !6732)
!6732 = !{!1844, !6733}
!6733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6734, size: 64)
!6734 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6569)
!6735 = !DILocalVariable(name: "ptr", arg: 1, scope: !6730, file: !5586, line: 652, type: !6733)
!6736 = !DILocation(line: 652, column: 34, scope: !6730)
!6737 = !DILocation(line: 654, column: 10, scope: !6730)
!6738 = !DILocation(line: 654, column: 15, scope: !6730)
!6739 = !DILocation(line: 654, column: 3, scope: !6730)
!6740 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !5586, file: !5586, line: 699, type: !6741, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6741 = !DISubroutineType(types: !6742)
!6742 = !{!1724, !6713}
!6743 = !DILocalVariable(name: "ptr", arg: 1, scope: !6740, file: !5586, line: 699, type: !6713)
!6744 = !DILocation(line: 699, column: 33, scope: !6740)
!6745 = !DILocalVariable(name: "val", scope: !6740, file: !5586, line: 701, type: !1724)
!6746 = !DILocation(line: 701, column: 8, scope: !6740)
!6747 = !DILocation(line: 705, column: 7, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6740, file: !5586, line: 705, column: 7)
!6749 = !DILocation(line: 705, column: 12, scope: !6748)
!6750 = !DILocation(line: 705, column: 7, scope: !6740)
!6751 = !DILocation(line: 707, column: 13, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6748, file: !5586, line: 706, column: 5)
!6753 = !DILocation(line: 707, column: 11, scope: !6752)
!6754 = !DILocation(line: 708, column: 19, scope: !6752)
!6755 = !DILocation(line: 708, column: 24, scope: !6752)
!6756 = !DILocation(line: 708, column: 30, scope: !6752)
!6757 = !DILocation(line: 708, column: 7, scope: !6752)
!6758 = !DILocation(line: 708, column: 12, scope: !6752)
!6759 = !DILocation(line: 708, column: 17, scope: !6752)
!6760 = !DILocation(line: 709, column: 14, scope: !6752)
!6761 = !DILocation(line: 709, column: 7, scope: !6752)
!6762 = !DILocation(line: 711, column: 7, scope: !6763)
!6763 = distinct !DILexicalBlock(scope: !6740, file: !5586, line: 711, column: 7)
!6764 = !DILocation(line: 711, column: 12, scope: !6763)
!6765 = !DILocation(line: 711, column: 7, scope: !6740)
!6766 = !DILocation(line: 713, column: 13, scope: !6767)
!6767 = distinct !DILexicalBlock(scope: !6763, file: !5586, line: 712, column: 5)
!6768 = !DILocation(line: 713, column: 11, scope: !6767)
!6769 = !DILocation(line: 714, column: 19, scope: !6767)
!6770 = !DILocation(line: 714, column: 24, scope: !6767)
!6771 = !DILocation(line: 714, column: 30, scope: !6767)
!6772 = !DILocation(line: 714, column: 7, scope: !6767)
!6773 = !DILocation(line: 714, column: 12, scope: !6767)
!6774 = !DILocation(line: 714, column: 17, scope: !6767)
!6775 = !DILocation(line: 715, column: 14, scope: !6767)
!6776 = !DILocation(line: 715, column: 7, scope: !6767)
!6777 = !DILocation(line: 718, column: 3, scope: !6740)
!6778 = !DILocation(line: 718, column: 8, scope: !6740)
!6779 = !DILocation(line: 718, column: 13, scope: !6740)
!6780 = !DILocation(line: 719, column: 3, scope: !6740)
!6781 = !DILocation(line: 721, column: 1, scope: !6740)
!6782 = distinct !DISubprogram(name: "op_iter_init", scope: !5586, file: !5586, line: 742, type: !6783, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6783 = !DISubroutineType(types: !6784)
!6784 = !{null, !6713, !2055, !1821}
!6785 = !DILocalVariable(name: "ptr", arg: 1, scope: !6782, file: !5586, line: 742, type: !6713)
!6786 = !DILocation(line: 742, column: 28, scope: !6782)
!6787 = !DILocalVariable(name: "stmt", arg: 2, scope: !6782, file: !5586, line: 742, type: !2055)
!6788 = !DILocation(line: 742, column: 40, scope: !6782)
!6789 = !DILocalVariable(name: "flags", arg: 3, scope: !6782, file: !5586, line: 742, type: !1821)
!6790 = !DILocation(line: 742, column: 50, scope: !6782)
!6791 = !DILocation(line: 746, column: 3, scope: !6782)
!6792 = !DILocation(line: 748, column: 16, scope: !6782)
!6793 = !DILocation(line: 748, column: 22, scope: !6782)
!6794 = !DILocation(line: 748, column: 15, scope: !6782)
!6795 = !DILocation(line: 748, column: 68, scope: !6782)
!6796 = !DILocation(line: 748, column: 52, scope: !6782)
!6797 = !DILocation(line: 748, column: 3, scope: !6782)
!6798 = !DILocation(line: 748, column: 8, scope: !6782)
!6799 = !DILocation(line: 748, column: 13, scope: !6782)
!6800 = !DILocation(line: 749, column: 9, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6782, file: !5586, line: 749, column: 7)
!6802 = !DILocation(line: 749, column: 15, scope: !6801)
!6803 = !DILocation(line: 750, column: 7, scope: !6801)
!6804 = !DILocation(line: 750, column: 10, scope: !6801)
!6805 = !DILocation(line: 750, column: 15, scope: !6801)
!6806 = !DILocation(line: 751, column: 7, scope: !6801)
!6807 = !DILocation(line: 751, column: 23, scope: !6801)
!6808 = !DILocation(line: 751, column: 10, scope: !6801)
!6809 = !DILocation(line: 751, column: 29, scope: !6801)
!6810 = !DILocation(line: 749, column: 7, scope: !6782)
!6811 = !DILocation(line: 752, column: 17, scope: !6801)
!6812 = !DILocation(line: 752, column: 22, scope: !6801)
!6813 = !DILocation(line: 752, column: 28, scope: !6801)
!6814 = !DILocation(line: 752, column: 5, scope: !6801)
!6815 = !DILocation(line: 752, column: 10, scope: !6801)
!6816 = !DILocation(line: 752, column: 15, scope: !6801)
!6817 = !DILocation(line: 753, column: 16, scope: !6782)
!6818 = !DILocation(line: 753, column: 22, scope: !6782)
!6819 = !DILocation(line: 753, column: 15, scope: !6782)
!6820 = !DILocation(line: 753, column: 68, scope: !6782)
!6821 = !DILocation(line: 753, column: 52, scope: !6782)
!6822 = !DILocation(line: 753, column: 3, scope: !6782)
!6823 = !DILocation(line: 753, column: 8, scope: !6782)
!6824 = !DILocation(line: 753, column: 13, scope: !6782)
!6825 = !DILocation(line: 754, column: 9, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6782, file: !5586, line: 754, column: 7)
!6827 = !DILocation(line: 754, column: 15, scope: !6826)
!6828 = !DILocation(line: 755, column: 7, scope: !6826)
!6829 = !DILocation(line: 755, column: 10, scope: !6826)
!6830 = !DILocation(line: 755, column: 15, scope: !6826)
!6831 = !DILocation(line: 756, column: 7, scope: !6826)
!6832 = !DILocation(line: 756, column: 23, scope: !6826)
!6833 = !DILocation(line: 756, column: 10, scope: !6826)
!6834 = !DILocation(line: 756, column: 29, scope: !6826)
!6835 = !DILocation(line: 754, column: 7, scope: !6782)
!6836 = !DILocation(line: 757, column: 17, scope: !6826)
!6837 = !DILocation(line: 757, column: 22, scope: !6826)
!6838 = !DILocation(line: 757, column: 28, scope: !6826)
!6839 = !DILocation(line: 757, column: 5, scope: !6826)
!6840 = !DILocation(line: 757, column: 10, scope: !6826)
!6841 = !DILocation(line: 757, column: 15, scope: !6826)
!6842 = !DILocation(line: 758, column: 3, scope: !6782)
!6843 = !DILocation(line: 758, column: 8, scope: !6782)
!6844 = !DILocation(line: 758, column: 13, scope: !6782)
!6845 = !DILocation(line: 760, column: 3, scope: !6782)
!6846 = !DILocation(line: 760, column: 8, scope: !6782)
!6847 = !DILocation(line: 760, column: 14, scope: !6782)
!6848 = !DILocation(line: 761, column: 3, scope: !6782)
!6849 = !DILocation(line: 761, column: 8, scope: !6782)
!6850 = !DILocation(line: 761, column: 16, scope: !6782)
!6851 = !DILocation(line: 762, column: 3, scope: !6782)
!6852 = !DILocation(line: 762, column: 8, scope: !6782)
!6853 = !DILocation(line: 762, column: 17, scope: !6782)
!6854 = !DILocation(line: 763, column: 1, scope: !6782)
!6855 = distinct !DISubprogram(name: "gimple_def_ops", scope: !1304, file: !1304, line: 1292, type: !6856, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6856 = !DISubroutineType(types: !6857)
!6857 = !{!2084, !3077}
!6858 = !DILocalVariable(name: "g", arg: 1, scope: !6855, file: !1304, line: 1292, type: !3077)
!6859 = !DILocation(line: 1292, column: 30, scope: !6855)
!6860 = !DILocation(line: 1294, column: 24, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6855, file: !1304, line: 1294, column: 7)
!6862 = !DILocation(line: 1294, column: 8, scope: !6861)
!6863 = !DILocation(line: 1294, column: 7, scope: !6855)
!6864 = !DILocation(line: 1295, column: 5, scope: !6861)
!6865 = !DILocation(line: 1296, column: 10, scope: !6855)
!6866 = !DILocation(line: 1296, column: 13, scope: !6855)
!6867 = !DILocation(line: 1296, column: 19, scope: !6855)
!6868 = !DILocation(line: 1296, column: 26, scope: !6855)
!6869 = !DILocation(line: 1296, column: 3, scope: !6855)
!6870 = !DILocation(line: 1297, column: 1, scope: !6855)
!6871 = distinct !DISubprogram(name: "gimple_vdef", scope: !1304, file: !1304, line: 1375, type: !5326, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6872 = !DILocalVariable(name: "g", arg: 1, scope: !6871, file: !1304, line: 1375, type: !3077)
!6873 = !DILocation(line: 1375, column: 27, scope: !6871)
!6874 = !DILocation(line: 1377, column: 28, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6871, file: !1304, line: 1377, column: 7)
!6876 = !DILocation(line: 1377, column: 8, scope: !6875)
!6877 = !DILocation(line: 1377, column: 7, scope: !6871)
!6878 = !DILocation(line: 1378, column: 5, scope: !6875)
!6879 = !DILocation(line: 1379, column: 10, scope: !6871)
!6880 = !DILocation(line: 1379, column: 13, scope: !6871)
!6881 = !DILocation(line: 1379, column: 23, scope: !6871)
!6882 = !DILocation(line: 1379, column: 3, scope: !6871)
!6883 = !DILocation(line: 1380, column: 1, scope: !6871)
!6884 = distinct !DISubprogram(name: "gimple_use_ops", scope: !1304, file: !1304, line: 1313, type: !6885, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6885 = !DISubroutineType(types: !6886)
!6886 = !{!2091, !3077}
!6887 = !DILocalVariable(name: "g", arg: 1, scope: !6884, file: !1304, line: 1313, type: !3077)
!6888 = !DILocation(line: 1313, column: 30, scope: !6884)
!6889 = !DILocation(line: 1315, column: 24, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6884, file: !1304, line: 1315, column: 7)
!6891 = !DILocation(line: 1315, column: 8, scope: !6890)
!6892 = !DILocation(line: 1315, column: 7, scope: !6884)
!6893 = !DILocation(line: 1316, column: 5, scope: !6890)
!6894 = !DILocation(line: 1317, column: 10, scope: !6884)
!6895 = !DILocation(line: 1317, column: 13, scope: !6884)
!6896 = !DILocation(line: 1317, column: 19, scope: !6884)
!6897 = !DILocation(line: 1317, column: 26, scope: !6884)
!6898 = !DILocation(line: 1317, column: 3, scope: !6884)
!6899 = !DILocation(line: 1318, column: 1, scope: !6884)
!6900 = distinct !DISubprogram(name: "gimple_vuse", scope: !1304, file: !1304, line: 1365, type: !5326, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6901 = !DILocalVariable(name: "g", arg: 1, scope: !6900, file: !1304, line: 1365, type: !3077)
!6902 = !DILocation(line: 1365, column: 27, scope: !6900)
!6903 = !DILocation(line: 1367, column: 28, scope: !6904)
!6904 = distinct !DILexicalBlock(scope: !6900, file: !1304, line: 1367, column: 7)
!6905 = !DILocation(line: 1367, column: 8, scope: !6904)
!6906 = !DILocation(line: 1367, column: 7, scope: !6900)
!6907 = !DILocation(line: 1368, column: 5, scope: !6904)
!6908 = !DILocation(line: 1369, column: 10, scope: !6900)
!6909 = !DILocation(line: 1369, column: 13, scope: !6900)
!6910 = !DILocation(line: 1369, column: 23, scope: !6900)
!6911 = !DILocation(line: 1369, column: 3, scope: !6900)
!6912 = !DILocation(line: 1370, column: 1, scope: !6900)
!6913 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !1304, file: !1304, line: 1283, type: !3943, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6914 = !DILocalVariable(name: "g", arg: 1, scope: !6913, file: !1304, line: 1283, type: !3077)
!6915 = !DILocation(line: 1283, column: 34, scope: !6913)
!6916 = !DILocation(line: 1285, column: 23, scope: !6913)
!6917 = !DILocation(line: 1285, column: 10, scope: !6913)
!6918 = !DILocation(line: 1285, column: 26, scope: !6913)
!6919 = !DILocation(line: 1285, column: 43, scope: !6913)
!6920 = !DILocation(line: 1285, column: 59, scope: !6913)
!6921 = !DILocation(line: 1285, column: 46, scope: !6913)
!6922 = !DILocation(line: 1285, column: 62, scope: !6913)
!6923 = !DILocation(line: 0, scope: !6913)
!6924 = !DILocation(line: 1285, column: 3, scope: !6913)
!6925 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5586, file: !5586, line: 427, type: !6926, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6926 = !DISubroutineType(types: !6927)
!6927 = !{!1724, !3122}
!6928 = !DILocalVariable(name: "use", arg: 1, scope: !6925, file: !5586, line: 427, type: !3122)
!6929 = !DILocation(line: 427, column: 33, scope: !6925)
!6930 = !DILocation(line: 429, column: 12, scope: !6925)
!6931 = !DILocation(line: 429, column: 17, scope: !6925)
!6932 = !DILocation(line: 429, column: 10, scope: !6925)
!6933 = !DILocation(line: 429, column: 3, scope: !6925)
!6934 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5586, file: !5586, line: 434, type: !6935, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6935 = !DISubroutineType(types: !6936)
!6936 = !{!1724, !6937}
!6937 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1414, line: 27, baseType: !2089)
!6938 = !DILocalVariable(name: "def", arg: 1, scope: !6934, file: !5586, line: 434, type: !6937)
!6939 = !DILocation(line: 434, column: 33, scope: !6934)
!6940 = !DILocation(line: 436, column: 11, scope: !6934)
!6941 = !DILocation(line: 436, column: 10, scope: !6934)
!6942 = !DILocation(line: 436, column: 3, scope: !6934)
!6943 = distinct !DISubprogram(name: "is_gimple_assign", scope: !1304, file: !1304, line: 1677, type: !3943, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6944 = !DILocalVariable(name: "gs", arg: 1, scope: !6943, file: !1304, line: 1677, type: !3077)
!6945 = !DILocation(line: 1677, column: 32, scope: !6943)
!6946 = !DILocation(line: 1679, column: 23, scope: !6943)
!6947 = !DILocation(line: 1679, column: 10, scope: !6943)
!6948 = !DILocation(line: 1679, column: 27, scope: !6943)
!6949 = !DILocation(line: 1679, column: 3, scope: !6943)
!6950 = distinct !DISubprogram(name: "is_in_field_accs", scope: !3, file: !3, line: 457, type: !6951, scopeLine: 458, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6951 = !DISubroutineType(types: !6952)
!6952 = !{!3113, !2055, !2485}
!6953 = !DILocalVariable(name: "stmt", arg: 1, scope: !6950, file: !3, line: 457, type: !2055)
!6954 = !DILocation(line: 457, column: 26, scope: !6950)
!6955 = !DILocalVariable(name: "f_accs", arg: 2, scope: !6950, file: !3, line: 457, type: !2485)
!6956 = !DILocation(line: 457, column: 39, scope: !6950)
!6957 = !DILocation(line: 460, column: 26, scope: !6950)
!6958 = !DILocation(line: 460, column: 34, scope: !6950)
!6959 = !DILocation(line: 460, column: 40, scope: !6950)
!6960 = !DILocation(line: 460, column: 59, scope: !6950)
!6961 = !DILocation(line: 460, column: 5, scope: !6950)
!6962 = !DILocation(line: 459, column: 10, scope: !6950)
!6963 = !DILocation(line: 459, column: 3, scope: !6950)
!6964 = distinct !DISubprogram(name: "exclude_alloc_and_field_accs_1", scope: !3, file: !3, line: 3151, type: !6965, scopeLine: 3152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6965 = !DISubroutineType(types: !6966)
!6966 = !{null, !3110, !3281}
!6967 = !DILocalVariable(name: "str", arg: 1, scope: !6964, file: !3, line: 3151, type: !3110)
!6968 = !DILocation(line: 3151, column: 39, scope: !6964)
!6969 = !DILocalVariable(name: "node", arg: 2, scope: !6964, file: !3, line: 3151, type: !3281)
!6970 = !DILocation(line: 3151, column: 64, scope: !6964)
!6971 = !DILocalVariable(name: "dt", scope: !6964, file: !3, line: 3153, type: !3145)
!6972 = !DILocation(line: 3153, column: 23, scope: !6964)
!6973 = !DILocation(line: 3154, column: 12, scope: !6964)
!6974 = !DILocation(line: 3154, column: 6, scope: !6964)
!6975 = !DILocation(line: 3154, column: 10, scope: !6964)
!6976 = !DILocation(line: 3155, column: 16, scope: !6964)
!6977 = !DILocation(line: 3155, column: 22, scope: !6964)
!6978 = !DILocation(line: 3155, column: 6, scope: !6964)
!6979 = !DILocation(line: 3155, column: 14, scope: !6964)
!6980 = !DILocation(line: 3157, column: 10, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6964, file: !3, line: 3157, column: 7)
!6982 = !DILocation(line: 3157, column: 15, scope: !6981)
!6983 = !DILocation(line: 3157, column: 7, scope: !6981)
!6984 = !DILocation(line: 3157, column: 7, scope: !6964)
!6985 = !DILocation(line: 3158, column: 23, scope: !6981)
!6986 = !DILocation(line: 3158, column: 28, scope: !6981)
!6987 = !DILocation(line: 3158, column: 53, scope: !6981)
!6988 = !DILocation(line: 3158, column: 5, scope: !6981)
!6989 = !DILocation(line: 3159, column: 1, scope: !6964)
!6990 = distinct !DISubprogram(name: "exclude_from_accs", scope: !3, file: !3, line: 2466, type: !5074, scopeLine: 2467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!6991 = !DILocalVariable(name: "slot", arg: 1, scope: !6990, file: !3, line: 2466, type: !2508)
!6992 = !DILocation(line: 2466, column: 27, scope: !6990)
!6993 = !DILocalVariable(name: "data", arg: 2, scope: !6990, file: !3, line: 2466, type: !2008)
!6994 = !DILocation(line: 2466, column: 39, scope: !6990)
!6995 = !DILocalVariable(name: "acc", scope: !6990, file: !3, line: 2468, type: !3115)
!6996 = !DILocation(line: 2468, column: 23, scope: !6990)
!6997 = !DILocation(line: 2468, column: 54, scope: !6990)
!6998 = !DILocation(line: 2468, column: 29, scope: !6990)
!6999 = !DILocalVariable(name: "fn_decl", scope: !6990, file: !3, line: 2469, type: !1724)
!7000 = !DILocation(line: 2469, column: 8, scope: !6990)
!7001 = !DILocation(line: 2469, column: 42, scope: !6990)
!7002 = !DILocation(line: 2469, column: 19, scope: !6990)
!7003 = !DILocation(line: 2469, column: 49, scope: !6990)
!7004 = !DILocalVariable(name: "str", scope: !6990, file: !3, line: 2470, type: !3110)
!7005 = !DILocation(line: 2470, column: 9, scope: !6990)
!7006 = !DILocation(line: 2470, column: 39, scope: !6990)
!7007 = !DILocation(line: 2470, column: 16, scope: !6990)
!7008 = !DILocation(line: 2470, column: 46, scope: !6990)
!7009 = !DILocation(line: 2472, column: 26, scope: !7010)
!7010 = distinct !DILexicalBlock(scope: !6990, file: !3, line: 2472, column: 7)
!7011 = !DILocation(line: 2472, column: 31, scope: !7010)
!7012 = !DILocation(line: 2472, column: 37, scope: !7010)
!7013 = !DILocation(line: 2472, column: 7, scope: !7010)
!7014 = !DILocation(line: 2473, column: 7, scope: !7010)
!7015 = !DILocation(line: 2473, column: 35, scope: !7010)
!7016 = !DILocation(line: 2473, column: 40, scope: !7010)
!7017 = !DILocation(line: 2473, column: 46, scope: !7010)
!7018 = !DILocation(line: 2473, column: 10, scope: !7010)
!7019 = !DILocation(line: 2472, column: 7, scope: !6990)
!7020 = !DILocation(line: 2475, column: 7, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2474, column: 5)
!7022 = !DILocation(line: 2476, column: 13, scope: !7021)
!7023 = !DILocation(line: 2476, column: 7, scope: !7021)
!7024 = !DILocation(line: 2477, column: 24, scope: !7021)
!7025 = !DILocation(line: 2477, column: 29, scope: !7021)
!7026 = !DILocation(line: 2477, column: 35, scope: !7021)
!7027 = !DILocation(line: 2477, column: 7, scope: !7021)
!7028 = !DILocation(line: 2478, column: 5, scope: !7021)
!7029 = !DILocation(line: 2479, column: 3, scope: !6990)
!7030 = distinct !DISubprogram(name: "is_part_of_malloc", scope: !3, file: !3, line: 774, type: !7031, scopeLine: 775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7031 = !DISubroutineType(types: !7032)
!7032 = !{!1844, !2055, !1724}
!7033 = !DILocalVariable(name: "stmt", arg: 1, scope: !7030, file: !3, line: 774, type: !2055)
!7034 = !DILocation(line: 774, column: 27, scope: !7030)
!7035 = !DILocalVariable(name: "fn_decl", arg: 2, scope: !7030, file: !3, line: 774, type: !1724)
!7036 = !DILocation(line: 774, column: 38, scope: !7030)
!7037 = !DILocalVariable(name: "fallocs", scope: !7030, file: !3, line: 776, type: !3087)
!7038 = !DILocation(line: 776, column: 13, scope: !7030)
!7039 = !DILocation(line: 776, column: 36, scope: !7030)
!7040 = !DILocation(line: 776, column: 23, scope: !7030)
!7041 = !DILocation(line: 778, column: 7, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 778, column: 7)
!7043 = !DILocation(line: 778, column: 7, scope: !7030)
!7044 = !DILocalVariable(name: "call", scope: !7045, file: !3, line: 780, type: !5087)
!7045 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 779, column: 5)
!7046 = !DILocation(line: 780, column: 21, scope: !7045)
!7047 = !DILocalVariable(name: "i", scope: !7045, file: !3, line: 781, type: !7)
!7048 = !DILocation(line: 781, column: 16, scope: !7045)
!7049 = !DILocation(line: 783, column: 14, scope: !7050)
!7050 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 783, column: 7)
!7051 = !DILocation(line: 783, column: 12, scope: !7050)
!7052 = !DILocation(line: 783, column: 19, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7050, file: !3, line: 783, column: 7)
!7054 = !DILocation(line: 783, column: 7, scope: !7050)
!7055 = !DILocation(line: 784, column: 6, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !7053, file: !3, line: 784, column: 6)
!7057 = !DILocation(line: 784, column: 12, scope: !7056)
!7058 = !DILocation(line: 784, column: 20, scope: !7056)
!7059 = !DILocation(line: 784, column: 17, scope: !7056)
!7060 = !DILocation(line: 785, column: 6, scope: !7056)
!7061 = !DILocation(line: 785, column: 31, scope: !7056)
!7062 = !DILocation(line: 785, column: 37, scope: !7056)
!7063 = !DILocation(line: 785, column: 9, scope: !7056)
!7064 = !DILocation(line: 785, column: 46, scope: !7056)
!7065 = !DILocation(line: 785, column: 43, scope: !7056)
!7066 = !DILocation(line: 784, column: 6, scope: !7053)
!7067 = !DILocation(line: 786, column: 4, scope: !7056)
!7068 = !DILocation(line: 783, column: 74, scope: !7053)
!7069 = !DILocation(line: 783, column: 7, scope: !7053)
!7070 = distinct !{!7070, !7054, !7071}
!7071 = !DILocation(line: 786, column: 11, scope: !7050)
!7072 = !DILocation(line: 787, column: 5, scope: !7045)
!7073 = !DILocation(line: 788, column: 3, scope: !7030)
!7074 = !DILocation(line: 789, column: 1, scope: !7030)
!7075 = distinct !DISubprogram(name: "is_part_of_field_access", scope: !3, file: !3, line: 824, type: !7076, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7076 = !DISubroutineType(types: !7077)
!7077 = !{!1844, !2055, !3110}
!7078 = !DILocalVariable(name: "stmt", arg: 1, scope: !7075, file: !3, line: 824, type: !2055)
!7079 = !DILocation(line: 824, column: 33, scope: !7075)
!7080 = !DILocalVariable(name: "str", arg: 2, scope: !7075, file: !3, line: 824, type: !3110)
!7081 = !DILocation(line: 824, column: 45, scope: !7075)
!7082 = !DILocalVariable(name: "i", scope: !7075, file: !3, line: 826, type: !1821)
!7083 = !DILocation(line: 826, column: 7, scope: !7075)
!7084 = !DILocation(line: 828, column: 10, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 828, column: 3)
!7086 = !DILocation(line: 828, column: 8, scope: !7085)
!7087 = !DILocation(line: 828, column: 15, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 828, column: 3)
!7089 = !DILocation(line: 828, column: 19, scope: !7088)
!7090 = !DILocation(line: 828, column: 24, scope: !7088)
!7091 = !DILocation(line: 828, column: 17, scope: !7088)
!7092 = !DILocation(line: 828, column: 3, scope: !7085)
!7093 = !DILocalVariable(name: "data", scope: !7094, file: !3, line: 830, type: !3150)
!7094 = distinct !DILexicalBlock(scope: !7088, file: !3, line: 829, column: 5)
!7095 = !DILocation(line: 830, column: 29, scope: !7094)
!7096 = !DILocation(line: 831, column: 12, scope: !7094)
!7097 = !DILocation(line: 831, column: 18, scope: !7094)
!7098 = !DILocation(line: 832, column: 19, scope: !7094)
!7099 = !DILocation(line: 832, column: 12, scope: !7094)
!7100 = !DILocation(line: 832, column: 17, scope: !7094)
!7101 = !DILocation(line: 834, column: 11, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7094, file: !3, line: 834, column: 11)
!7103 = !DILocation(line: 834, column: 16, scope: !7102)
!7104 = !DILocation(line: 834, column: 23, scope: !7102)
!7105 = !DILocation(line: 834, column: 26, scope: !7102)
!7106 = !DILocation(line: 834, column: 11, scope: !7094)
!7107 = !DILocation(line: 835, column: 17, scope: !7102)
!7108 = !DILocation(line: 835, column: 22, scope: !7102)
!7109 = !DILocation(line: 835, column: 29, scope: !7102)
!7110 = !DILocation(line: 835, column: 32, scope: !7102)
!7111 = !DILocation(line: 835, column: 63, scope: !7102)
!7112 = !DILocation(line: 835, column: 2, scope: !7102)
!7113 = !DILocation(line: 837, column: 16, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7094, file: !3, line: 837, column: 11)
!7115 = !DILocation(line: 837, column: 11, scope: !7114)
!7116 = !DILocation(line: 837, column: 11, scope: !7094)
!7117 = !DILocation(line: 838, column: 2, scope: !7114)
!7118 = !DILocation(line: 839, column: 5, scope: !7094)
!7119 = !DILocation(line: 828, column: 37, scope: !7088)
!7120 = !DILocation(line: 828, column: 3, scope: !7088)
!7121 = distinct !{!7121, !7092, !7122}
!7122 = !DILocation(line: 839, column: 5, scope: !7085)
!7123 = !DILocation(line: 841, column: 3, scope: !7075)
!7124 = !DILocation(line: 842, column: 1, scope: !7075)
!7125 = distinct !DISubprogram(name: "get_fallocs", scope: !3, file: !3, line: 734, type: !7126, scopeLine: 735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7126 = !DISubroutineType(types: !7127)
!7127 = !{!3087, !1724}
!7128 = !DILocalVariable(name: "fn_decl", arg: 1, scope: !7125, file: !3, line: 734, type: !1724)
!7129 = !DILocation(line: 734, column: 19, scope: !7125)
!7130 = !DILocation(line: 736, column: 43, scope: !7125)
!7131 = !DILocation(line: 736, column: 56, scope: !7125)
!7132 = !DILocation(line: 737, column: 7, scope: !7125)
!7133 = !DILocation(line: 737, column: 26, scope: !7125)
!7134 = !DILocation(line: 736, column: 22, scope: !7125)
!7135 = !DILocation(line: 736, column: 10, scope: !7125)
!7136 = !DILocation(line: 736, column: 3, scope: !7125)
!7137 = distinct !DISubprogram(name: "find_in_field_accs", scope: !3, file: !3, line: 803, type: !5074, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7138 = !DILocalVariable(name: "slot", arg: 1, scope: !7137, file: !3, line: 803, type: !2508)
!7139 = !DILocation(line: 803, column: 28, scope: !7137)
!7140 = !DILocalVariable(name: "data", arg: 2, scope: !7137, file: !3, line: 803, type: !2008)
!7141 = !DILocation(line: 803, column: 40, scope: !7137)
!7142 = !DILocalVariable(name: "f_acc", scope: !7137, file: !3, line: 805, type: !3113)
!7143 = !DILocation(line: 805, column: 29, scope: !7137)
!7144 = !DILocation(line: 805, column: 68, scope: !7137)
!7145 = !DILocation(line: 805, column: 37, scope: !7137)
!7146 = !DILocalVariable(name: "stmt", scope: !7137, file: !3, line: 806, type: !2055)
!7147 = !DILocation(line: 806, column: 10, scope: !7137)
!7148 = !DILocation(line: 806, column: 43, scope: !7137)
!7149 = !DILocation(line: 806, column: 18, scope: !7137)
!7150 = !DILocation(line: 806, column: 50, scope: !7137)
!7151 = !DILocation(line: 808, column: 7, scope: !7152)
!7152 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 808, column: 7)
!7153 = !DILocation(line: 808, column: 14, scope: !7152)
!7154 = !DILocation(line: 808, column: 22, scope: !7152)
!7155 = !DILocation(line: 808, column: 19, scope: !7152)
!7156 = !DILocation(line: 809, column: 7, scope: !7152)
!7157 = !DILocation(line: 809, column: 10, scope: !7152)
!7158 = !DILocation(line: 809, column: 17, scope: !7152)
!7159 = !DILocation(line: 809, column: 33, scope: !7152)
!7160 = !DILocation(line: 809, column: 30, scope: !7152)
!7161 = !DILocation(line: 810, column: 7, scope: !7152)
!7162 = !DILocation(line: 810, column: 10, scope: !7152)
!7163 = !DILocation(line: 810, column: 17, scope: !7152)
!7164 = !DILocation(line: 810, column: 30, scope: !7152)
!7165 = !DILocation(line: 810, column: 27, scope: !7152)
!7166 = !DILocation(line: 808, column: 7, scope: !7137)
!7167 = !DILocation(line: 812, column: 33, scope: !7168)
!7168 = distinct !DILexicalBlock(scope: !7152, file: !3, line: 811, column: 5)
!7169 = !DILocation(line: 812, column: 8, scope: !7168)
!7170 = !DILocation(line: 812, column: 40, scope: !7168)
!7171 = !DILocation(line: 812, column: 46, scope: !7168)
!7172 = !DILocation(line: 813, column: 7, scope: !7168)
!7173 = !DILocation(line: 816, column: 5, scope: !7152)
!7174 = !DILocation(line: 817, column: 1, scope: !7137)
!7175 = distinct !DISubprogram(name: "safe_cond_expr_check", scope: !3, file: !3, line: 3127, type: !5074, scopeLine: 3128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7176 = !DILocalVariable(name: "slot", arg: 1, scope: !7175, file: !3, line: 3127, type: !2508)
!7177 = !DILocation(line: 3127, column: 30, scope: !7175)
!7178 = !DILocalVariable(name: "data", arg: 2, scope: !7175, file: !3, line: 3127, type: !2008)
!7179 = !DILocation(line: 3127, column: 42, scope: !7175)
!7180 = !DILocalVariable(name: "acc", scope: !7175, file: !3, line: 3129, type: !3115)
!7181 = !DILocation(line: 3129, column: 23, scope: !7175)
!7182 = !DILocation(line: 3129, column: 54, scope: !7175)
!7183 = !DILocation(line: 3129, column: 29, scope: !7175)
!7184 = !DILocation(line: 3131, column: 20, scope: !7185)
!7185 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 3131, column: 7)
!7186 = !DILocation(line: 3131, column: 25, scope: !7185)
!7187 = !DILocation(line: 3131, column: 7, scope: !7185)
!7188 = !DILocation(line: 3131, column: 31, scope: !7185)
!7189 = !DILocation(line: 3132, column: 7, scope: !7185)
!7190 = !DILocation(line: 3132, column: 30, scope: !7185)
!7191 = !DILocation(line: 3132, column: 35, scope: !7185)
!7192 = !DILocation(line: 3132, column: 11, scope: !7185)
!7193 = !DILocation(line: 3131, column: 7, scope: !7175)
!7194 = !DILocation(line: 3134, column: 11, scope: !7195)
!7195 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 3134, column: 11)
!7196 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 3133, column: 5)
!7197 = !DILocation(line: 3134, column: 11, scope: !7196)
!7198 = !DILocation(line: 3136, column: 13, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7195, file: !3, line: 3135, column: 2)
!7200 = !DILocation(line: 3136, column: 4, scope: !7199)
!7201 = !DILocation(line: 3137, column: 23, scope: !7199)
!7202 = !DILocation(line: 3137, column: 34, scope: !7199)
!7203 = !DILocation(line: 3137, column: 39, scope: !7199)
!7204 = !DILocation(line: 3137, column: 4, scope: !7199)
!7205 = !DILocation(line: 3138, column: 2, scope: !7199)
!7206 = !DILocation(line: 3139, column: 17, scope: !7196)
!7207 = !DILocation(line: 3139, column: 22, scope: !7196)
!7208 = !DILocation(line: 3140, column: 7, scope: !7196)
!7209 = !DILocation(line: 3142, column: 3, scope: !7175)
!7210 = !DILocation(line: 3143, column: 1, scope: !7175)
!7211 = distinct !DISubprogram(name: "is_safe_cond_expr", scope: !3, file: !3, line: 2429, type: !7212, scopeLine: 2430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7212 = !DISubroutineType(types: !7213)
!7213 = !{!1844, !2055}
!7214 = !DILocalVariable(name: "cond_stmt", arg: 1, scope: !7211, file: !3, line: 2429, type: !2055)
!7215 = !DILocation(line: 2429, column: 27, scope: !7211)
!7216 = !DILocalVariable(name: "arg0", scope: !7211, file: !3, line: 2431, type: !1724)
!7217 = !DILocation(line: 2431, column: 8, scope: !7211)
!7218 = !DILocalVariable(name: "arg1", scope: !7211, file: !3, line: 2431, type: !1724)
!7219 = !DILocation(line: 2431, column: 14, scope: !7211)
!7220 = !DILocalVariable(name: "str0", scope: !7211, file: !3, line: 2432, type: !7)
!7221 = !DILocation(line: 2432, column: 12, scope: !7211)
!7222 = !DILocalVariable(name: "str1", scope: !7211, file: !3, line: 2432, type: !7)
!7223 = !DILocation(line: 2432, column: 18, scope: !7211)
!7224 = !DILocalVariable(name: "s0", scope: !7211, file: !3, line: 2433, type: !1844)
!7225 = !DILocation(line: 2433, column: 8, scope: !7211)
!7226 = !DILocalVariable(name: "s1", scope: !7211, file: !3, line: 2433, type: !1844)
!7227 = !DILocation(line: 2433, column: 12, scope: !7211)
!7228 = !DILocalVariable(name: "length", scope: !7211, file: !3, line: 2434, type: !7)
!7229 = !DILocation(line: 2434, column: 12, scope: !7211)
!7230 = !DILocation(line: 2434, column: 21, scope: !7211)
!7231 = !DILocation(line: 2436, column: 25, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7211, file: !3, line: 2436, column: 7)
!7233 = !DILocation(line: 2436, column: 7, scope: !7232)
!7234 = !DILocation(line: 2436, column: 36, scope: !7232)
!7235 = !DILocation(line: 2437, column: 7, scope: !7232)
!7236 = !DILocation(line: 2437, column: 28, scope: !7232)
!7237 = !DILocation(line: 2437, column: 10, scope: !7232)
!7238 = !DILocation(line: 2437, column: 39, scope: !7232)
!7239 = !DILocation(line: 2436, column: 7, scope: !7211)
!7240 = !DILocation(line: 2438, column: 5, scope: !7232)
!7241 = !DILocation(line: 2440, column: 27, scope: !7211)
!7242 = !DILocation(line: 2440, column: 10, scope: !7211)
!7243 = !DILocation(line: 2440, column: 8, scope: !7211)
!7244 = !DILocation(line: 2441, column: 27, scope: !7211)
!7245 = !DILocation(line: 2441, column: 10, scope: !7211)
!7246 = !DILocation(line: 2441, column: 8, scope: !7211)
!7247 = !DILocation(line: 2443, column: 55, scope: !7211)
!7248 = !DILocation(line: 2443, column: 38, scope: !7211)
!7249 = !DILocation(line: 2443, column: 26, scope: !7211)
!7250 = !DILocation(line: 2443, column: 10, scope: !7211)
!7251 = !DILocation(line: 2443, column: 8, scope: !7211)
!7252 = !DILocation(line: 2444, column: 55, scope: !7211)
!7253 = !DILocation(line: 2444, column: 38, scope: !7211)
!7254 = !DILocation(line: 2444, column: 26, scope: !7211)
!7255 = !DILocation(line: 2444, column: 10, scope: !7211)
!7256 = !DILocation(line: 2444, column: 8, scope: !7211)
!7257 = !DILocation(line: 2446, column: 9, scope: !7211)
!7258 = !DILocation(line: 2446, column: 17, scope: !7211)
!7259 = !DILocation(line: 2446, column: 14, scope: !7211)
!7260 = !DILocation(line: 2446, column: 8, scope: !7211)
!7261 = !DILocation(line: 2446, column: 6, scope: !7211)
!7262 = !DILocation(line: 2447, column: 9, scope: !7211)
!7263 = !DILocation(line: 2447, column: 17, scope: !7211)
!7264 = !DILocation(line: 2447, column: 14, scope: !7211)
!7265 = !DILocation(line: 2447, column: 8, scope: !7211)
!7266 = !DILocation(line: 2447, column: 6, scope: !7211)
!7267 = !DILocation(line: 2449, column: 8, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7211, file: !3, line: 2449, column: 7)
!7269 = !DILocation(line: 2449, column: 11, scope: !7268)
!7270 = !DILocation(line: 2449, column: 15, scope: !7268)
!7271 = !DILocation(line: 2449, column: 7, scope: !7211)
!7272 = !DILocation(line: 2450, column: 5, scope: !7268)
!7273 = !DILocation(line: 2453, column: 23, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7211, file: !3, line: 2453, column: 7)
!7275 = !DILocation(line: 2453, column: 8, scope: !7274)
!7276 = !DILocation(line: 2453, column: 29, scope: !7274)
!7277 = !DILocation(line: 2453, column: 48, scope: !7274)
!7278 = !DILocation(line: 2453, column: 33, scope: !7274)
!7279 = !DILocation(line: 2453, column: 7, scope: !7211)
!7280 = !DILocation(line: 2454, column: 5, scope: !7274)
!7281 = !DILocation(line: 2456, column: 3, scope: !7211)
!7282 = !DILocation(line: 2457, column: 1, scope: !7211)
!7283 = distinct !DISubprogram(name: "gimple_cond_code", scope: !1304, file: !1304, line: 2221, type: !6521, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7284 = !DILocalVariable(name: "gs", arg: 1, scope: !7283, file: !1304, line: 2221, type: !3077)
!7285 = !DILocation(line: 2221, column: 32, scope: !7283)
!7286 = !DILocation(line: 2224, column: 27, scope: !7283)
!7287 = !DILocation(line: 2224, column: 31, scope: !7283)
!7288 = !DILocation(line: 2224, column: 38, scope: !7283)
!7289 = !DILocation(line: 2224, column: 3, scope: !7283)
!7290 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !1304, file: !1304, line: 2241, type: !5326, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7291 = !DILocalVariable(name: "gs", arg: 1, scope: !7290, file: !1304, line: 2241, type: !3077)
!7292 = !DILocation(line: 2241, column: 31, scope: !7290)
!7293 = !DILocation(line: 2244, column: 21, scope: !7290)
!7294 = !DILocation(line: 2244, column: 10, scope: !7290)
!7295 = !DILocation(line: 2244, column: 3, scope: !7290)
!7296 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !1304, file: !1304, line: 2271, type: !5326, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7297 = !DILocalVariable(name: "gs", arg: 1, scope: !7296, file: !1304, line: 2271, type: !3077)
!7298 = !DILocation(line: 2271, column: 31, scope: !7296)
!7299 = !DILocation(line: 2274, column: 21, scope: !7296)
!7300 = !DILocation(line: 2274, column: 10, scope: !7296)
!7301 = !DILocation(line: 2274, column: 3, scope: !7296)
!7302 = distinct !DISubprogram(name: "dump_accs", scope: !3, file: !3, line: 3104, type: !4982, scopeLine: 3105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7303 = !DILocalVariable(name: "str", arg: 1, scope: !7302, file: !3, line: 3104, type: !3110)
!7304 = !DILocation(line: 3104, column: 18, scope: !7302)
!7305 = !DILocalVariable(name: "i", scope: !7302, file: !3, line: 3106, type: !1821)
!7306 = !DILocation(line: 3106, column: 7, scope: !7302)
!7307 = !DILocation(line: 3108, column: 12, scope: !7302)
!7308 = !DILocation(line: 3108, column: 3, scope: !7302)
!7309 = !DILocation(line: 3109, column: 23, scope: !7302)
!7310 = !DILocation(line: 3109, column: 34, scope: !7302)
!7311 = !DILocation(line: 3109, column: 39, scope: !7302)
!7312 = !DILocation(line: 3109, column: 3, scope: !7302)
!7313 = !DILocation(line: 3111, column: 10, scope: !7314)
!7314 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 3111, column: 3)
!7315 = !DILocation(line: 3111, column: 8, scope: !7314)
!7316 = !DILocation(line: 3111, column: 15, scope: !7317)
!7317 = distinct !DILexicalBlock(scope: !7314, file: !3, line: 3111, column: 3)
!7318 = !DILocation(line: 3111, column: 19, scope: !7317)
!7319 = !DILocation(line: 3111, column: 24, scope: !7317)
!7320 = !DILocation(line: 3111, column: 17, scope: !7317)
!7321 = !DILocation(line: 3111, column: 3, scope: !7314)
!7322 = !DILocation(line: 3113, column: 16, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7317, file: !3, line: 3112, column: 5)
!7324 = !DILocation(line: 3113, column: 7, scope: !7323)
!7325 = !DILocation(line: 3114, column: 27, scope: !7323)
!7326 = !DILocation(line: 3114, column: 38, scope: !7323)
!7327 = !DILocation(line: 3114, column: 43, scope: !7323)
!7328 = !DILocation(line: 3114, column: 50, scope: !7323)
!7329 = !DILocation(line: 3114, column: 53, scope: !7323)
!7330 = !DILocation(line: 3114, column: 7, scope: !7323)
!7331 = !DILocation(line: 3115, column: 29, scope: !7323)
!7332 = !DILocation(line: 3115, column: 34, scope: !7323)
!7333 = !DILocation(line: 3115, column: 41, scope: !7323)
!7334 = !DILocation(line: 3115, column: 44, scope: !7323)
!7335 = !DILocation(line: 3115, column: 7, scope: !7323)
!7336 = !DILocation(line: 3116, column: 16, scope: !7323)
!7337 = !DILocation(line: 3116, column: 7, scope: !7323)
!7338 = !DILocation(line: 3117, column: 5, scope: !7323)
!7339 = !DILocation(line: 3111, column: 37, scope: !7317)
!7340 = !DILocation(line: 3111, column: 3, scope: !7317)
!7341 = distinct !{!7341, !7321, !7342}
!7342 = !DILocation(line: 3117, column: 5, scope: !7314)
!7343 = !DILocation(line: 3118, column: 12, scope: !7302)
!7344 = !DILocation(line: 3118, column: 3, scope: !7302)
!7345 = !DILocation(line: 3119, column: 22, scope: !7302)
!7346 = !DILocation(line: 3119, column: 27, scope: !7302)
!7347 = !DILocation(line: 3119, column: 3, scope: !7302)
!7348 = !DILocation(line: 3120, column: 1, scope: !7302)
!7349 = distinct !DISubprogram(name: "dump_field_acc_sites", scope: !3, file: !3, line: 1500, type: !5127, scopeLine: 1501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7350 = !DILocalVariable(name: "f_accs", arg: 1, scope: !7349, file: !3, line: 1500, type: !2485)
!7351 = !DILocation(line: 1500, column: 30, scope: !7349)
!7352 = !DILocation(line: 1502, column: 8, scope: !7353)
!7353 = distinct !DILexicalBlock(scope: !7349, file: !3, line: 1502, column: 7)
!7354 = !DILocation(line: 1502, column: 7, scope: !7349)
!7355 = !DILocation(line: 1503, column: 5, scope: !7353)
!7356 = !DILocation(line: 1505, column: 7, scope: !7357)
!7357 = distinct !DILexicalBlock(scope: !7349, file: !3, line: 1505, column: 7)
!7358 = !DILocation(line: 1505, column: 7, scope: !7349)
!7359 = !DILocation(line: 1506, column: 20, scope: !7357)
!7360 = !DILocation(line: 1506, column: 5, scope: !7357)
!7361 = !DILocation(line: 1507, column: 1, scope: !7349)
!7362 = distinct !DISubprogram(name: "dump_access_sites", scope: !3, file: !3, line: 2362, type: !5127, scopeLine: 2363, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7363 = !DILocalVariable(name: "accs", arg: 1, scope: !7362, file: !3, line: 2362, type: !2485)
!7364 = !DILocation(line: 2362, column: 27, scope: !7362)
!7365 = !DILocation(line: 2364, column: 8, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 2364, column: 7)
!7367 = !DILocation(line: 2364, column: 7, scope: !7362)
!7368 = !DILocation(line: 2365, column: 5, scope: !7366)
!7369 = !DILocation(line: 2367, column: 7, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 2367, column: 7)
!7371 = !DILocation(line: 2367, column: 7, scope: !7362)
!7372 = !DILocation(line: 2368, column: 20, scope: !7370)
!7373 = !DILocation(line: 2368, column: 5, scope: !7370)
!7374 = !DILocation(line: 2369, column: 1, scope: !7362)
!7375 = distinct !DISubprogram(name: "dump_field_acc", scope: !3, file: !3, line: 1482, type: !5074, scopeLine: 1483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7376 = !DILocalVariable(name: "slot", arg: 1, scope: !7375, file: !3, line: 1482, type: !2508)
!7377 = !DILocation(line: 1482, column: 24, scope: !7375)
!7378 = !DILocalVariable(name: "data", arg: 2, scope: !7375, file: !3, line: 1482, type: !2008)
!7379 = !DILocation(line: 1482, column: 36, scope: !7375)
!7380 = !DILocalVariable(name: "f_acc", scope: !7375, file: !3, line: 1484, type: !3113)
!7381 = !DILocation(line: 1484, column: 29, scope: !7375)
!7382 = !DILocation(line: 1485, column: 36, scope: !7375)
!7383 = !DILocation(line: 1485, column: 5, scope: !7375)
!7384 = !DILocation(line: 1487, column: 11, scope: !7375)
!7385 = !DILocation(line: 1487, column: 3, scope: !7375)
!7386 = !DILocation(line: 1488, column: 7, scope: !7387)
!7387 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 1488, column: 7)
!7388 = !DILocation(line: 1488, column: 14, scope: !7387)
!7389 = !DILocation(line: 1488, column: 7, scope: !7375)
!7390 = !DILocation(line: 1489, column: 24, scope: !7387)
!7391 = !DILocation(line: 1489, column: 35, scope: !7387)
!7392 = !DILocation(line: 1489, column: 42, scope: !7387)
!7393 = !DILocation(line: 1489, column: 5, scope: !7387)
!7394 = !DILocation(line: 1490, column: 7, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 1490, column: 7)
!7396 = !DILocation(line: 1490, column: 14, scope: !7395)
!7397 = !DILocation(line: 1490, column: 7, scope: !7375)
!7398 = !DILocation(line: 1491, column: 24, scope: !7395)
!7399 = !DILocation(line: 1491, column: 35, scope: !7395)
!7400 = !DILocation(line: 1491, column: 42, scope: !7395)
!7401 = !DILocation(line: 1491, column: 5, scope: !7395)
!7402 = !DILocation(line: 1492, column: 7, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 1492, column: 7)
!7404 = !DILocation(line: 1492, column: 14, scope: !7403)
!7405 = !DILocation(line: 1492, column: 7, scope: !7375)
!7406 = !DILocation(line: 1493, column: 24, scope: !7403)
!7407 = !DILocation(line: 1493, column: 35, scope: !7403)
!7408 = !DILocation(line: 1493, column: 42, scope: !7403)
!7409 = !DILocation(line: 1493, column: 5, scope: !7403)
!7410 = !DILocation(line: 1494, column: 3, scope: !7375)
!7411 = distinct !DISubprogram(name: "dump_acc", scope: !3, file: !3, line: 2076, type: !5074, scopeLine: 2077, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7412 = !DILocalVariable(name: "slot", arg: 1, scope: !7411, file: !3, line: 2076, type: !2508)
!7413 = !DILocation(line: 2076, column: 18, scope: !7411)
!7414 = !DILocalVariable(name: "data", arg: 2, scope: !7411, file: !3, line: 2076, type: !2008)
!7415 = !DILocation(line: 2076, column: 30, scope: !7411)
!7416 = !DILocalVariable(name: "acc", scope: !7411, file: !3, line: 2078, type: !3115)
!7417 = !DILocation(line: 2078, column: 23, scope: !7411)
!7418 = !DILocation(line: 2078, column: 54, scope: !7411)
!7419 = !DILocation(line: 2078, column: 29, scope: !7411)
!7420 = !DILocalVariable(name: "var", scope: !7411, file: !3, line: 2079, type: !1724)
!7421 = !DILocation(line: 2079, column: 8, scope: !7411)
!7422 = !DILocalVariable(name: "i", scope: !7411, file: !3, line: 2080, type: !7)
!7423 = !DILocation(line: 2080, column: 12, scope: !7411)
!7424 = !DILocation(line: 2082, column: 11, scope: !7411)
!7425 = !DILocation(line: 2082, column: 3, scope: !7411)
!7426 = !DILocation(line: 2083, column: 7, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 2083, column: 7)
!7428 = !DILocation(line: 2083, column: 12, scope: !7427)
!7429 = !DILocation(line: 2083, column: 7, scope: !7411)
!7430 = !DILocation(line: 2084, column: 24, scope: !7427)
!7431 = !DILocation(line: 2084, column: 35, scope: !7427)
!7432 = !DILocation(line: 2084, column: 40, scope: !7427)
!7433 = !DILocation(line: 2084, column: 5, scope: !7427)
!7434 = !DILocation(line: 2085, column: 11, scope: !7411)
!7435 = !DILocation(line: 2085, column: 3, scope: !7411)
!7436 = !DILocation(line: 2087, column: 10, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 2087, column: 3)
!7438 = !DILocation(line: 2087, column: 8, scope: !7437)
!7439 = !DILocation(line: 2087, column: 15, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 2087, column: 3)
!7441 = !DILocation(line: 2087, column: 3, scope: !7437)
!7442 = !DILocation(line: 2089, column: 27, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 2088, column: 5)
!7444 = !DILocation(line: 2089, column: 38, scope: !7443)
!7445 = !DILocation(line: 2089, column: 7, scope: !7443)
!7446 = !DILocation(line: 2090, column: 15, scope: !7443)
!7447 = !DILocation(line: 2090, column: 7, scope: !7443)
!7448 = !DILocation(line: 2091, column: 5, scope: !7443)
!7449 = !DILocation(line: 2087, column: 55, scope: !7440)
!7450 = !DILocation(line: 2087, column: 3, scope: !7440)
!7451 = distinct !{!7451, !7441, !7452}
!7452 = !DILocation(line: 2091, column: 5, scope: !7437)
!7453 = !DILocation(line: 2092, column: 3, scope: !7411)
!7454 = distinct !DISubprogram(name: "sum_counts", scope: !3, file: !3, line: 3644, type: !7455, scopeLine: 3645, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7455 = !DISubroutineType(types: !7456)
!7456 = !{null, !3110, !7457}
!7457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2265, size: 64)
!7458 = !DILocalVariable(name: "str", arg: 1, scope: !7454, file: !3, line: 3644, type: !3110)
!7459 = !DILocation(line: 3644, column: 19, scope: !7454)
!7460 = !DILocalVariable(name: "hottest", arg: 2, scope: !7454, file: !3, line: 3644, type: !7457)
!7461 = !DILocation(line: 3644, column: 35, scope: !7454)
!7462 = !DILocalVariable(name: "i", scope: !7454, file: !3, line: 3646, type: !1821)
!7463 = !DILocation(line: 3646, column: 7, scope: !7454)
!7464 = !DILocation(line: 3648, column: 3, scope: !7454)
!7465 = !DILocation(line: 3648, column: 8, scope: !7454)
!7466 = !DILocation(line: 3648, column: 14, scope: !7454)
!7467 = !DILocation(line: 3649, column: 10, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7454, file: !3, line: 3649, column: 3)
!7469 = !DILocation(line: 3649, column: 8, scope: !7468)
!7470 = !DILocation(line: 3649, column: 15, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7468, file: !3, line: 3649, column: 3)
!7472 = !DILocation(line: 3649, column: 19, scope: !7471)
!7473 = !DILocation(line: 3649, column: 24, scope: !7471)
!7474 = !DILocation(line: 3649, column: 17, scope: !7471)
!7475 = !DILocation(line: 3649, column: 3, scope: !7468)
!7476 = !DILocation(line: 3651, column: 11, scope: !7477)
!7477 = distinct !DILexicalBlock(scope: !7478, file: !3, line: 3651, column: 11)
!7478 = distinct !DILexicalBlock(scope: !7471, file: !3, line: 3650, column: 5)
!7479 = !DILocation(line: 3651, column: 11, scope: !7478)
!7480 = !DILocation(line: 3653, column: 13, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 3652, column: 2)
!7482 = !DILocation(line: 3653, column: 4, scope: !7481)
!7483 = !DILocation(line: 3654, column: 24, scope: !7481)
!7484 = !DILocation(line: 3654, column: 35, scope: !7481)
!7485 = !DILocation(line: 3654, column: 40, scope: !7481)
!7486 = !DILocation(line: 3654, column: 47, scope: !7481)
!7487 = !DILocation(line: 3654, column: 50, scope: !7481)
!7488 = !DILocation(line: 3654, column: 4, scope: !7481)
!7489 = !DILocation(line: 3655, column: 13, scope: !7481)
!7490 = !DILocation(line: 3656, column: 6, scope: !7481)
!7491 = !DILocation(line: 3656, column: 11, scope: !7481)
!7492 = !DILocation(line: 3656, column: 18, scope: !7481)
!7493 = !DILocation(line: 3656, column: 21, scope: !7481)
!7494 = !DILocation(line: 3655, column: 4, scope: !7481)
!7495 = !DILocation(line: 3657, column: 2, scope: !7481)
!7496 = !DILocation(line: 3658, column: 21, scope: !7478)
!7497 = !DILocation(line: 3658, column: 26, scope: !7478)
!7498 = !DILocation(line: 3658, column: 33, scope: !7478)
!7499 = !DILocation(line: 3658, column: 36, scope: !7478)
!7500 = !DILocation(line: 3658, column: 7, scope: !7478)
!7501 = !DILocation(line: 3658, column: 12, scope: !7478)
!7502 = !DILocation(line: 3658, column: 18, scope: !7478)
!7503 = !DILocation(line: 3659, column: 5, scope: !7478)
!7504 = !DILocation(line: 3649, column: 37, scope: !7471)
!7505 = !DILocation(line: 3649, column: 3, scope: !7471)
!7506 = distinct !{!7506, !7475, !7507}
!7507 = !DILocation(line: 3659, column: 5, scope: !7468)
!7508 = !DILocation(line: 3661, column: 7, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7454, file: !3, line: 3661, column: 7)
!7510 = !DILocation(line: 3661, column: 7, scope: !7454)
!7511 = !DILocation(line: 3663, column: 16, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 3662, column: 5)
!7513 = !DILocation(line: 3663, column: 7, scope: !7512)
!7514 = !DILocation(line: 3664, column: 27, scope: !7512)
!7515 = !DILocation(line: 3664, column: 38, scope: !7512)
!7516 = !DILocation(line: 3664, column: 43, scope: !7512)
!7517 = !DILocation(line: 3664, column: 7, scope: !7512)
!7518 = !DILocation(line: 3665, column: 16, scope: !7512)
!7519 = !DILocation(line: 3665, column: 63, scope: !7512)
!7520 = !DILocation(line: 3665, column: 68, scope: !7512)
!7521 = !DILocation(line: 3665, column: 7, scope: !7512)
!7522 = !DILocation(line: 3666, column: 5, scope: !7512)
!7523 = !DILocation(line: 3668, column: 7, scope: !7524)
!7524 = distinct !DILexicalBlock(scope: !7454, file: !3, line: 3668, column: 7)
!7525 = !DILocation(line: 3668, column: 12, scope: !7524)
!7526 = !DILocation(line: 3668, column: 21, scope: !7524)
!7527 = !DILocation(line: 3668, column: 20, scope: !7524)
!7528 = !DILocation(line: 3668, column: 18, scope: !7524)
!7529 = !DILocation(line: 3668, column: 7, scope: !7454)
!7530 = !DILocation(line: 3669, column: 16, scope: !7524)
!7531 = !DILocation(line: 3669, column: 21, scope: !7524)
!7532 = !DILocation(line: 3669, column: 6, scope: !7524)
!7533 = !DILocation(line: 3669, column: 14, scope: !7524)
!7534 = !DILocation(line: 3669, column: 5, scope: !7524)
!7535 = !DILocation(line: 3670, column: 1, scope: !7454)
!7536 = distinct !DISubprogram(name: "peel_hot_fields", scope: !3, file: !3, line: 3677, type: !4982, scopeLine: 3678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7537 = !DILocalVariable(name: "str", arg: 1, scope: !7536, file: !3, line: 3677, type: !3110)
!7538 = !DILocation(line: 3677, column: 24, scope: !7536)
!7539 = !DILocalVariable(name: "max_field_count", scope: !7536, file: !3, line: 3679, type: !2265)
!7540 = !DILocation(line: 3679, column: 13, scope: !7536)
!7541 = !DILocalVariable(name: "fields_left", scope: !7536, file: !3, line: 3680, type: !3051)
!7542 = !DILocation(line: 3680, column: 11, scope: !7536)
!7543 = !DILocation(line: 3680, column: 40, scope: !7536)
!7544 = !DILocation(line: 3680, column: 45, scope: !7536)
!7545 = !DILocation(line: 3680, column: 25, scope: !7536)
!7546 = !DILocalVariable(name: "i", scope: !7536, file: !3, line: 3681, type: !1821)
!7547 = !DILocation(line: 3681, column: 7, scope: !7536)
!7548 = !DILocation(line: 3683, column: 17, scope: !7536)
!7549 = !DILocation(line: 3683, column: 3, scope: !7536)
!7550 = !DILocation(line: 3685, column: 39, scope: !7536)
!7551 = !DILocation(line: 3685, column: 18, scope: !7536)
!7552 = !DILocation(line: 3685, column: 43, scope: !7536)
!7553 = !DILocation(line: 3685, column: 48, scope: !7536)
!7554 = !DILocation(line: 3684, column: 19, scope: !7536)
!7555 = !DILocation(line: 3687, column: 3, scope: !7536)
!7556 = !DILocation(line: 3687, column: 8, scope: !7536)
!7557 = !DILocation(line: 3687, column: 26, scope: !7536)
!7558 = !DILocation(line: 3689, column: 10, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 3689, column: 3)
!7560 = !DILocation(line: 3689, column: 8, scope: !7559)
!7561 = !DILocation(line: 3689, column: 15, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7559, file: !3, line: 3689, column: 3)
!7563 = !DILocation(line: 3689, column: 19, scope: !7562)
!7564 = !DILocation(line: 3689, column: 24, scope: !7562)
!7565 = !DILocation(line: 3689, column: 17, scope: !7562)
!7566 = !DILocation(line: 3689, column: 3, scope: !7559)
!7567 = !DILocation(line: 3691, column: 11, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 3691, column: 11)
!7569 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 3690, column: 5)
!7570 = !DILocation(line: 3691, column: 16, scope: !7568)
!7571 = !DILocation(line: 3691, column: 25, scope: !7568)
!7572 = !DILocation(line: 3691, column: 22, scope: !7568)
!7573 = !DILocation(line: 3691, column: 11, scope: !7569)
!7574 = !DILocation(line: 3693, column: 15, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7568, file: !3, line: 3692, column: 2)
!7576 = !DILocation(line: 3693, column: 28, scope: !7575)
!7577 = !DILocation(line: 3693, column: 4, scope: !7575)
!7578 = !DILocation(line: 3694, column: 16, scope: !7575)
!7579 = !DILocation(line: 3694, column: 19, scope: !7575)
!7580 = !DILocation(line: 3694, column: 4, scope: !7575)
!7581 = !DILocation(line: 3695, column: 2, scope: !7575)
!7582 = !DILocation(line: 3696, column: 5, scope: !7569)
!7583 = !DILocation(line: 3689, column: 37, scope: !7562)
!7584 = !DILocation(line: 3689, column: 3, scope: !7562)
!7585 = distinct !{!7585, !7566, !7586}
!7586 = !DILocation(line: 3696, column: 5, scope: !7559)
!7587 = !DILocation(line: 3698, column: 30, scope: !7536)
!7588 = !DILocation(line: 3698, column: 7, scope: !7536)
!7589 = !DILocation(line: 3698, column: 5, scope: !7536)
!7590 = !DILocation(line: 3699, column: 7, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 3699, column: 7)
!7592 = !DILocation(line: 3699, column: 9, scope: !7591)
!7593 = !DILocation(line: 3699, column: 7, scope: !7536)
!7594 = !DILocation(line: 3700, column: 18, scope: !7591)
!7595 = !DILocation(line: 3700, column: 31, scope: !7591)
!7596 = !DILocation(line: 3700, column: 5, scope: !7591)
!7597 = !DILocation(line: 3702, column: 5, scope: !7591)
!7598 = !DILocation(line: 3703, column: 1, scope: !7536)
!7599 = distinct !DISubprogram(name: "get_max_field_count", scope: !3, file: !3, line: 3220, type: !7600, scopeLine: 3221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7600 = !DISubroutineType(types: !7601)
!7601 = !{!2265, !3110}
!7602 = !DILocalVariable(name: "str", arg: 1, scope: !7599, file: !3, line: 3220, type: !3110)
!7603 = !DILocation(line: 3220, column: 28, scope: !7599)
!7604 = !DILocalVariable(name: "max", scope: !7599, file: !3, line: 3222, type: !2265)
!7605 = !DILocation(line: 3222, column: 13, scope: !7599)
!7606 = !DILocalVariable(name: "i", scope: !7599, file: !3, line: 3223, type: !1821)
!7607 = !DILocation(line: 3223, column: 7, scope: !7599)
!7608 = !DILocation(line: 3225, column: 10, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 3225, column: 3)
!7610 = !DILocation(line: 3225, column: 8, scope: !7609)
!7611 = !DILocation(line: 3225, column: 15, scope: !7612)
!7612 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 3225, column: 3)
!7613 = !DILocation(line: 3225, column: 19, scope: !7612)
!7614 = !DILocation(line: 3225, column: 24, scope: !7612)
!7615 = !DILocation(line: 3225, column: 17, scope: !7612)
!7616 = !DILocation(line: 3225, column: 3, scope: !7609)
!7617 = !DILocation(line: 3226, column: 9, scope: !7618)
!7618 = distinct !DILexicalBlock(scope: !7612, file: !3, line: 3226, column: 9)
!7619 = !DILocation(line: 3226, column: 14, scope: !7618)
!7620 = !DILocation(line: 3226, column: 21, scope: !7618)
!7621 = !DILocation(line: 3226, column: 24, scope: !7618)
!7622 = !DILocation(line: 3226, column: 32, scope: !7618)
!7623 = !DILocation(line: 3226, column: 30, scope: !7618)
!7624 = !DILocation(line: 3226, column: 9, scope: !7612)
!7625 = !DILocation(line: 3227, column: 13, scope: !7618)
!7626 = !DILocation(line: 3227, column: 18, scope: !7618)
!7627 = !DILocation(line: 3227, column: 25, scope: !7618)
!7628 = !DILocation(line: 3227, column: 28, scope: !7618)
!7629 = !DILocation(line: 3227, column: 11, scope: !7618)
!7630 = !DILocation(line: 3227, column: 7, scope: !7618)
!7631 = !DILocation(line: 3225, column: 37, scope: !7612)
!7632 = !DILocation(line: 3225, column: 3, scope: !7612)
!7633 = distinct !{!7633, !7616, !7634}
!7634 = !DILocation(line: 3227, column: 28, scope: !7609)
!7635 = !DILocation(line: 3229, column: 10, scope: !7599)
!7636 = !DILocation(line: 3229, column: 3, scope: !7599)
!7637 = distinct !DISubprogram(name: "RESET_BIT", scope: !3052, file: !3052, line: 82, type: !7638, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7638 = !DISubroutineType(types: !7639)
!7639 = !{null, !3051, !7}
!7640 = !DILocalVariable(name: "map", arg: 1, scope: !7637, file: !3052, line: 82, type: !3051)
!7641 = !DILocation(line: 82, column: 20, scope: !7637)
!7642 = !DILocalVariable(name: "bitno", arg: 2, scope: !7637, file: !3052, line: 82, type: !7)
!7643 = !DILocation(line: 82, column: 39, scope: !7637)
!7644 = !DILocation(line: 84, column: 7, scope: !7645)
!7645 = distinct !DILexicalBlock(scope: !7637, file: !3052, line: 84, column: 7)
!7646 = !DILocation(line: 84, column: 12, scope: !7645)
!7647 = !DILocation(line: 84, column: 7, scope: !7637)
!7648 = !DILocalVariable(name: "oldbit", scope: !7649, file: !3052, line: 86, type: !1844)
!7649 = distinct !DILexicalBlock(scope: !7645, file: !3052, line: 85, column: 5)
!7650 = !DILocation(line: 86, column: 12, scope: !7649)
!7651 = !DILocation(line: 87, column: 16, scope: !7649)
!7652 = !DILocation(line: 87, column: 14, scope: !7649)
!7653 = !DILocation(line: 88, column: 11, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7649, file: !3052, line: 88, column: 11)
!7655 = !DILocation(line: 88, column: 11, scope: !7649)
!7656 = !DILocation(line: 89, column: 2, scope: !7654)
!7657 = !DILocation(line: 89, column: 7, scope: !7654)
!7658 = !DILocation(line: 89, column: 16, scope: !7654)
!7659 = !DILocation(line: 89, column: 22, scope: !7654)
!7660 = !DILocation(line: 89, column: 41, scope: !7654)
!7661 = !DILocation(line: 90, column: 5, scope: !7649)
!7662 = !DILocation(line: 92, column: 35, scope: !7637)
!7663 = !DILocation(line: 92, column: 42, scope: !7637)
!7664 = !DILocation(line: 92, column: 31, scope: !7637)
!7665 = !DILocation(line: 92, column: 8, scope: !7637)
!7666 = !DILocation(line: 91, column: 3, scope: !7637)
!7667 = !DILocation(line: 91, column: 8, scope: !7637)
!7668 = !DILocation(line: 91, column: 13, scope: !7637)
!7669 = !DILocation(line: 91, column: 19, scope: !7637)
!7670 = !DILocation(line: 92, column: 5, scope: !7637)
!7671 = !DILocation(line: 93, column: 1, scope: !7637)
!7672 = distinct !DISubprogram(name: "peel_field", scope: !3, file: !3, line: 3204, type: !7673, scopeLine: 3205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7673 = !DISubroutineType(types: !7674)
!7674 = !{null, !1821, !3110}
!7675 = !DILocalVariable(name: "i", arg: 1, scope: !7672, file: !3, line: 3204, type: !1821)
!7676 = !DILocation(line: 3204, column: 17, scope: !7672)
!7677 = !DILocalVariable(name: "ds", arg: 2, scope: !7672, file: !3, line: 3204, type: !3110)
!7678 = !DILocation(line: 3204, column: 26, scope: !7672)
!7679 = !DILocalVariable(name: "crr_cluster", scope: !7672, file: !3, line: 3206, type: !3047)
!7680 = !DILocation(line: 3206, column: 25, scope: !7672)
!7681 = !DILocation(line: 3206, column: 39, scope: !7672)
!7682 = !DILocation(line: 3208, column: 26, scope: !7672)
!7683 = !DILocation(line: 3208, column: 30, scope: !7672)
!7684 = !DILocation(line: 3208, column: 3, scope: !7672)
!7685 = !DILocation(line: 3208, column: 16, scope: !7672)
!7686 = !DILocation(line: 3208, column: 24, scope: !7672)
!7687 = !DILocation(line: 3209, column: 27, scope: !7672)
!7688 = !DILocation(line: 3209, column: 3, scope: !7672)
!7689 = !DILocation(line: 3209, column: 7, scope: !7672)
!7690 = !DILocation(line: 3209, column: 25, scope: !7672)
!7691 = !DILocation(line: 3211, column: 35, scope: !7672)
!7692 = !DILocation(line: 3211, column: 39, scope: !7672)
!7693 = !DILocation(line: 3211, column: 5, scope: !7672)
!7694 = !DILocation(line: 3210, column: 3, scope: !7672)
!7695 = !DILocation(line: 3210, column: 16, scope: !7672)
!7696 = !DILocation(line: 3210, column: 34, scope: !7672)
!7697 = !DILocation(line: 3212, column: 17, scope: !7672)
!7698 = !DILocation(line: 3212, column: 30, scope: !7672)
!7699 = !DILocation(line: 3212, column: 3, scope: !7672)
!7700 = !DILocation(line: 3213, column: 12, scope: !7672)
!7701 = !DILocation(line: 3213, column: 25, scope: !7672)
!7702 = !DILocation(line: 3213, column: 44, scope: !7672)
!7703 = !DILocation(line: 3213, column: 3, scope: !7672)
!7704 = !DILocation(line: 3214, column: 1, scope: !7672)
!7705 = distinct !DISubprogram(name: "gen_cluster", scope: !3, file: !3, line: 3192, type: !7706, scopeLine: 3193, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7706 = !DISubroutineType(types: !7707)
!7707 = !{null, !3051, !3110}
!7708 = !DILocalVariable(name: "fields", arg: 1, scope: !7705, file: !3, line: 3192, type: !3051)
!7709 = !DILocation(line: 3192, column: 22, scope: !7705)
!7710 = !DILocalVariable(name: "str", arg: 2, scope: !7705, file: !3, line: 3192, type: !3110)
!7711 = !DILocation(line: 3192, column: 36, scope: !7705)
!7712 = !DILocalVariable(name: "crr_cluster", scope: !7705, file: !3, line: 3194, type: !3047)
!7713 = !DILocation(line: 3194, column: 25, scope: !7705)
!7714 = !DILocation(line: 3194, column: 39, scope: !7705)
!7715 = !DILocation(line: 3196, column: 26, scope: !7705)
!7716 = !DILocation(line: 3196, column: 31, scope: !7705)
!7717 = !DILocation(line: 3196, column: 3, scope: !7705)
!7718 = !DILocation(line: 3196, column: 16, scope: !7705)
!7719 = !DILocation(line: 3196, column: 24, scope: !7705)
!7720 = !DILocation(line: 3197, column: 28, scope: !7705)
!7721 = !DILocation(line: 3197, column: 3, scope: !7705)
!7722 = !DILocation(line: 3197, column: 8, scope: !7705)
!7723 = !DILocation(line: 3197, column: 26, scope: !7705)
!7724 = !DILocation(line: 3198, column: 36, scope: !7705)
!7725 = !DILocation(line: 3198, column: 3, scope: !7705)
!7726 = !DILocation(line: 3198, column: 16, scope: !7705)
!7727 = !DILocation(line: 3198, column: 34, scope: !7705)
!7728 = !DILocation(line: 3199, column: 1, scope: !7705)
!7729 = distinct !DISubprogram(name: "SET_BIT", scope: !3052, file: !3052, line: 63, type: !7638, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7730 = !DILocalVariable(name: "map", arg: 1, scope: !7729, file: !3052, line: 63, type: !3051)
!7731 = !DILocation(line: 63, column: 18, scope: !7729)
!7732 = !DILocalVariable(name: "bitno", arg: 2, scope: !7729, file: !3052, line: 63, type: !7)
!7733 = !DILocation(line: 63, column: 36, scope: !7729)
!7734 = !DILocation(line: 65, column: 7, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7729, file: !3052, line: 65, column: 7)
!7736 = !DILocation(line: 65, column: 12, scope: !7735)
!7737 = !DILocation(line: 65, column: 7, scope: !7729)
!7738 = !DILocalVariable(name: "oldbit", scope: !7739, file: !3052, line: 67, type: !1844)
!7739 = distinct !DILexicalBlock(scope: !7735, file: !3052, line: 66, column: 5)
!7740 = !DILocation(line: 67, column: 12, scope: !7739)
!7741 = !DILocation(line: 68, column: 16, scope: !7739)
!7742 = !DILocation(line: 68, column: 14, scope: !7739)
!7743 = !DILocation(line: 69, column: 12, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7739, file: !3052, line: 69, column: 11)
!7745 = !DILocation(line: 69, column: 11, scope: !7739)
!7746 = !DILocation(line: 70, column: 2, scope: !7744)
!7747 = !DILocation(line: 70, column: 7, scope: !7744)
!7748 = !DILocation(line: 70, column: 16, scope: !7744)
!7749 = !DILocation(line: 70, column: 22, scope: !7744)
!7750 = !DILocation(line: 70, column: 41, scope: !7744)
!7751 = !DILocation(line: 71, column: 5, scope: !7739)
!7752 = !DILocation(line: 73, column: 33, scope: !7729)
!7753 = !DILocation(line: 73, column: 40, scope: !7729)
!7754 = !DILocation(line: 73, column: 29, scope: !7729)
!7755 = !DILocation(line: 72, column: 3, scope: !7729)
!7756 = !DILocation(line: 72, column: 8, scope: !7729)
!7757 = !DILocation(line: 72, column: 13, scope: !7729)
!7758 = !DILocation(line: 72, column: 19, scope: !7729)
!7759 = !DILocation(line: 73, column: 5, scope: !7729)
!7760 = !DILocation(line: 74, column: 1, scope: !7729)
!7761 = distinct !DISubprogram(name: "create_new_types", scope: !3, file: !3, line: 3803, type: !3246, scopeLine: 3804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7762 = !DILocalVariable(name: "str", scope: !7761, file: !3, line: 3805, type: !3110)
!7763 = !DILocation(line: 3805, column: 9, scope: !7761)
!7764 = !DILocalVariable(name: "i", scope: !7761, file: !3, line: 3806, type: !7)
!7765 = !DILocation(line: 3806, column: 12, scope: !7761)
!7766 = !DILocalVariable(name: "str_num", scope: !7761, file: !3, line: 3807, type: !1821)
!7767 = !DILocation(line: 3807, column: 7, scope: !7761)
!7768 = !DILocation(line: 3809, column: 10, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 3809, column: 3)
!7770 = !DILocation(line: 3809, column: 8, scope: !7769)
!7771 = !DILocation(line: 3809, column: 15, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7769, file: !3, line: 3809, column: 3)
!7773 = !DILocation(line: 3809, column: 3, scope: !7769)
!7774 = !DILocation(line: 3810, column: 22, scope: !7772)
!7775 = !DILocation(line: 3810, column: 5, scope: !7772)
!7776 = !DILocation(line: 3809, column: 61, scope: !7772)
!7777 = !DILocation(line: 3809, column: 3, scope: !7772)
!7778 = distinct !{!7778, !7773, !7779}
!7779 = !DILocation(line: 3810, column: 35, scope: !7769)
!7780 = !DILocation(line: 3811, column: 1, scope: !7761)
!7781 = distinct !DISubprogram(name: "dump_new_types", scope: !3, file: !3, line: 3774, type: !3246, scopeLine: 3775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7782 = !DILocalVariable(name: "str", scope: !7781, file: !3, line: 3776, type: !3110)
!7783 = !DILocation(line: 3776, column: 9, scope: !7781)
!7784 = !DILocalVariable(name: "type", scope: !7781, file: !3, line: 3777, type: !1724)
!7785 = !DILocation(line: 3777, column: 8, scope: !7781)
!7786 = !DILocalVariable(name: "i", scope: !7781, file: !3, line: 3778, type: !7)
!7787 = !DILocation(line: 3778, column: 12, scope: !7781)
!7788 = !DILocalVariable(name: "j", scope: !7781, file: !3, line: 3778, type: !7)
!7789 = !DILocation(line: 3778, column: 15, scope: !7781)
!7790 = !DILocation(line: 3780, column: 8, scope: !7791)
!7791 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 3780, column: 7)
!7792 = !DILocation(line: 3780, column: 7, scope: !7781)
!7793 = !DILocation(line: 3781, column: 5, scope: !7791)
!7794 = !DILocation(line: 3783, column: 12, scope: !7781)
!7795 = !DILocation(line: 3783, column: 3, scope: !7781)
!7796 = !DILocation(line: 3786, column: 10, scope: !7797)
!7797 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 3786, column: 3)
!7798 = !DILocation(line: 3786, column: 8, scope: !7797)
!7799 = !DILocation(line: 3786, column: 15, scope: !7800)
!7800 = distinct !DILexicalBlock(scope: !7797, file: !3, line: 3786, column: 3)
!7801 = !DILocation(line: 3786, column: 3, scope: !7797)
!7802 = !DILocation(line: 3788, column: 11, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 3788, column: 11)
!7804 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 3787, column: 5)
!7805 = !DILocation(line: 3788, column: 11, scope: !7804)
!7806 = !DILocation(line: 3790, column: 13, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 3789, column: 2)
!7808 = !DILocation(line: 3790, column: 4, scope: !7807)
!7809 = !DILocation(line: 3791, column: 22, scope: !7807)
!7810 = !DILocation(line: 3791, column: 27, scope: !7807)
!7811 = !DILocation(line: 3791, column: 4, scope: !7807)
!7812 = !DILocation(line: 3792, column: 13, scope: !7807)
!7813 = !DILocation(line: 3793, column: 6, scope: !7807)
!7814 = !DILocation(line: 3792, column: 4, scope: !7807)
!7815 = !DILocation(line: 3794, column: 2, scope: !7807)
!7816 = !DILocation(line: 3795, column: 14, scope: !7817)
!7817 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 3795, column: 7)
!7818 = !DILocation(line: 3795, column: 12, scope: !7817)
!7819 = !DILocation(line: 3795, column: 19, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 3795, column: 7)
!7821 = !DILocation(line: 3795, column: 7, scope: !7817)
!7822 = !DILocation(line: 3796, column: 20, scope: !7820)
!7823 = !DILocation(line: 3796, column: 2, scope: !7820)
!7824 = !DILocation(line: 3795, column: 65, scope: !7820)
!7825 = !DILocation(line: 3795, column: 7, scope: !7820)
!7826 = distinct !{!7826, !7821, !7827}
!7827 = !DILocation(line: 3796, column: 30, scope: !7817)
!7828 = !DILocation(line: 3797, column: 5, scope: !7804)
!7829 = !DILocation(line: 3786, column: 61, scope: !7800)
!7830 = !DILocation(line: 3786, column: 3, scope: !7800)
!7831 = distinct !{!7831, !7801, !7832}
!7832 = !DILocation(line: 3797, column: 5, scope: !7797)
!7833 = !DILocation(line: 3798, column: 1, scope: !7781)
!7834 = distinct !DISubprogram(name: "create_new_global_vars", scope: !3, file: !3, line: 3743, type: !3246, scopeLine: 3744, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7835 = !DILocalVariable(name: "current_varpool", scope: !7834, file: !3, line: 3745, type: !3385)
!7836 = !DILocation(line: 3745, column: 24, scope: !7834)
!7837 = !DILocalVariable(name: "i", scope: !7834, file: !3, line: 3746, type: !1778)
!7838 = !DILocation(line: 3746, column: 26, scope: !7834)
!7839 = !DILocalVariable(name: "varpool_size", scope: !7834, file: !3, line: 3747, type: !1778)
!7840 = !DILocation(line: 3747, column: 26, scope: !7834)
!7841 = !DILocation(line: 3749, column: 10, scope: !7842)
!7842 = distinct !DILexicalBlock(scope: !7834, file: !3, line: 3749, column: 3)
!7843 = !DILocation(line: 3749, column: 8, scope: !7842)
!7844 = !DILocation(line: 3749, column: 15, scope: !7845)
!7845 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 3749, column: 3)
!7846 = !DILocation(line: 3749, column: 17, scope: !7845)
!7847 = !DILocation(line: 3749, column: 3, scope: !7842)
!7848 = !DILocation(line: 3751, column: 11, scope: !7849)
!7849 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 3751, column: 11)
!7850 = distinct !DILexicalBlock(scope: !7845, file: !3, line: 3750, column: 5)
!7851 = !DILocation(line: 3751, column: 11, scope: !7850)
!7852 = !DILocation(line: 3752, column: 33, scope: !7849)
!7853 = !DILocation(line: 3752, column: 20, scope: !7849)
!7854 = !DILocation(line: 3752, column: 18, scope: !7849)
!7855 = !DILocation(line: 3752, column: 2, scope: !7849)
!7856 = !DILocation(line: 3754, column: 7, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 3754, column: 7)
!7858 = !DILocation(line: 3754, column: 7, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 3754, column: 7)
!7860 = !DILocalVariable(name: "var_decl", scope: !7861, file: !3, line: 3756, type: !1724)
!7861 = distinct !DILexicalBlock(scope: !7859, file: !3, line: 3755, column: 2)
!7862 = !DILocation(line: 3756, column: 10, scope: !7861)
!7863 = !DILocation(line: 3756, column: 21, scope: !7861)
!7864 = !DILocation(line: 3756, column: 38, scope: !7861)
!7865 = !DILocation(line: 3758, column: 9, scope: !7866)
!7866 = distinct !DILexicalBlock(scope: !7861, file: !3, line: 3758, column: 8)
!7867 = !DILocation(line: 3758, column: 18, scope: !7866)
!7868 = !DILocation(line: 3758, column: 21, scope: !7866)
!7869 = !DILocation(line: 3758, column: 42, scope: !7866)
!7870 = !DILocation(line: 3758, column: 8, scope: !7861)
!7871 = !DILocation(line: 3759, column: 6, scope: !7866)
!7872 = !DILocation(line: 3760, column: 9, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7861, file: !3, line: 3760, column: 8)
!7874 = !DILocation(line: 3760, column: 8, scope: !7861)
!7875 = !DILocation(line: 3761, column: 18, scope: !7873)
!7876 = !DILocation(line: 3761, column: 6, scope: !7873)
!7877 = !DILocation(line: 3763, column: 22, scope: !7873)
!7878 = !DILocation(line: 3763, column: 32, scope: !7873)
!7879 = !DILocation(line: 3763, column: 6, scope: !7873)
!7880 = !DILocation(line: 3764, column: 2, scope: !7861)
!7881 = distinct !{!7881, !7856, !7882}
!7882 = !DILocation(line: 3764, column: 2, scope: !7857)
!7883 = !DILocation(line: 3765, column: 5, scope: !7850)
!7884 = !DILocation(line: 3749, column: 23, scope: !7845)
!7885 = !DILocation(line: 3749, column: 3, scope: !7845)
!7886 = distinct !{!7886, !7847, !7887}
!7887 = !DILocation(line: 3765, column: 5, scope: !7842)
!7888 = !DILocation(line: 3767, column: 7, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7834, file: !3, line: 3767, column: 7)
!7890 = !DILocation(line: 3767, column: 7, scope: !7834)
!7891 = !DILocation(line: 3768, column: 20, scope: !7889)
!7892 = !DILocation(line: 3768, column: 5, scope: !7889)
!7893 = !DILocation(line: 3769, column: 1, scope: !7834)
!7894 = distinct !DISubprogram(name: "dump_new_vars", scope: !3, file: !3, line: 2205, type: !5127, scopeLine: 2206, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7895 = !DILocalVariable(name: "new_vars_htab", arg: 1, scope: !7894, file: !3, line: 2205, type: !2485)
!7896 = !DILocation(line: 2205, column: 23, scope: !7894)
!7897 = !DILocation(line: 2207, column: 8, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 2207, column: 7)
!7899 = !DILocation(line: 2207, column: 7, scope: !7894)
!7900 = !DILocation(line: 2208, column: 5, scope: !7898)
!7901 = !DILocation(line: 2210, column: 7, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 2210, column: 7)
!7903 = !DILocation(line: 2210, column: 7, scope: !7894)
!7904 = !DILocation(line: 2211, column: 20, scope: !7902)
!7905 = !DILocation(line: 2211, column: 5, scope: !7902)
!7906 = !DILocation(line: 2212, column: 1, scope: !7894)
!7907 = distinct !DISubprogram(name: "do_reorg_1", scope: !3, file: !3, line: 3710, type: !3246, scopeLine: 3711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7908 = !DILocalVariable(name: "node", scope: !7907, file: !3, line: 3712, type: !3281)
!7909 = !DILocation(line: 3712, column: 23, scope: !7907)
!7910 = !DILocation(line: 3715, column: 3, scope: !7907)
!7911 = !DILocation(line: 3717, column: 15, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 3717, column: 3)
!7913 = !DILocation(line: 3717, column: 13, scope: !7912)
!7914 = !DILocation(line: 3717, column: 8, scope: !7912)
!7915 = !DILocation(line: 3717, column: 29, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 3717, column: 3)
!7917 = !DILocation(line: 3717, column: 3, scope: !7912)
!7918 = !DILocation(line: 3718, column: 9, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7916, file: !3, line: 3718, column: 9)
!7920 = !DILocation(line: 3718, column: 15, scope: !7919)
!7921 = !DILocation(line: 3718, column: 24, scope: !7919)
!7922 = !DILocation(line: 3718, column: 27, scope: !7919)
!7923 = !DILocation(line: 3718, column: 33, scope: !7919)
!7924 = !DILocation(line: 3718, column: 9, scope: !7916)
!7925 = !DILocation(line: 3720, column: 13, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 3719, column: 7)
!7927 = !DILocation(line: 3720, column: 2, scope: !7926)
!7928 = !DILocation(line: 3721, column: 26, scope: !7926)
!7929 = !DILocation(line: 3721, column: 32, scope: !7926)
!7930 = !DILocation(line: 3721, column: 24, scope: !7926)
!7931 = !DILocation(line: 3722, column: 6, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7926, file: !3, line: 3722, column: 6)
!7933 = !DILocation(line: 3722, column: 6, scope: !7926)
!7934 = !DILocation(line: 3723, column: 13, scope: !7932)
!7935 = !DILocation(line: 3724, column: 21, scope: !7932)
!7936 = !DILocation(line: 3723, column: 4, scope: !7932)
!7937 = !DILocation(line: 3725, column: 21, scope: !7926)
!7938 = !DILocation(line: 3725, column: 2, scope: !7926)
!7939 = !DILocation(line: 3726, column: 2, scope: !7926)
!7940 = !DILocation(line: 3727, column: 2, scope: !7926)
!7941 = !DILocation(line: 3728, column: 24, scope: !7926)
!7942 = !DILocation(line: 3729, column: 2, scope: !7926)
!7943 = !DILocation(line: 3730, column: 7, scope: !7926)
!7944 = !DILocation(line: 3717, column: 42, scope: !7916)
!7945 = !DILocation(line: 3717, column: 48, scope: !7916)
!7946 = !DILocation(line: 3717, column: 40, scope: !7916)
!7947 = !DILocation(line: 3717, column: 3, scope: !7916)
!7948 = distinct !{!7948, !7917, !7949}
!7949 = !DILocation(line: 3730, column: 7, scope: !7912)
!7950 = !DILocation(line: 3732, column: 3, scope: !7907)
!7951 = !DILocation(line: 3733, column: 3, scope: !7907)
!7952 = !DILocation(line: 3734, column: 1, scope: !7907)
!7953 = distinct !DISubprogram(name: "free_new_vars_htab", scope: !3, file: !3, line: 2670, type: !5127, scopeLine: 2671, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7954 = !DILocalVariable(name: "new_vars_htab", arg: 1, scope: !7953, file: !3, line: 2670, type: !2485)
!7955 = !DILocation(line: 2670, column: 28, scope: !7953)
!7956 = !DILocation(line: 2672, column: 7, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 2672, column: 7)
!7958 = !DILocation(line: 2672, column: 7, scope: !7953)
!7959 = !DILocation(line: 2673, column: 20, scope: !7957)
!7960 = !DILocation(line: 2673, column: 5, scope: !7957)
!7961 = !DILocation(line: 2674, column: 16, scope: !7953)
!7962 = !DILocation(line: 2674, column: 3, scope: !7953)
!7963 = !DILocation(line: 2675, column: 17, scope: !7953)
!7964 = !DILocation(line: 2676, column: 1, scope: !7953)
!7965 = distinct !DISubprogram(name: "create_new_type", scope: !3, file: !3, line: 3303, type: !7966, scopeLine: 3304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!7966 = !DISubroutineType(types: !7967)
!7967 = !{null, !3110, !5892}
!7968 = !DILocalVariable(name: "str", arg: 1, scope: !7965, file: !3, line: 3303, type: !3110)
!7969 = !DILocation(line: 3303, column: 24, scope: !7965)
!7970 = !DILocalVariable(name: "str_num", arg: 2, scope: !7965, file: !3, line: 3303, type: !5892)
!7971 = !DILocation(line: 3303, column: 34, scope: !7965)
!7972 = !DILocalVariable(name: "cluster_num", scope: !7965, file: !3, line: 3305, type: !1821)
!7973 = !DILocation(line: 3305, column: 7, scope: !7965)
!7974 = !DILocalVariable(name: "cluster", scope: !7965, file: !3, line: 3307, type: !3047)
!7975 = !DILocation(line: 3307, column: 25, scope: !7965)
!7976 = !DILocation(line: 3307, column: 35, scope: !7965)
!7977 = !DILocation(line: 3307, column: 40, scope: !7965)
!7978 = !DILocation(line: 3308, column: 3, scope: !7965)
!7979 = !DILocation(line: 3308, column: 10, scope: !7965)
!7980 = !DILocalVariable(name: "name", scope: !7981, file: !3, line: 3310, type: !1724)
!7981 = distinct !DILexicalBlock(scope: !7965, file: !3, line: 3309, column: 5)
!7982 = !DILocation(line: 3310, column: 13, scope: !7981)
!7983 = !DILocation(line: 3310, column: 38, scope: !7981)
!7984 = !DILocation(line: 3310, column: 43, scope: !7981)
!7985 = !DILocation(line: 3310, column: 49, scope: !7981)
!7986 = !DILocation(line: 3311, column: 11, scope: !7981)
!7987 = !DILocation(line: 3311, column: 10, scope: !7981)
!7988 = !DILocation(line: 3310, column: 20, scope: !7981)
!7989 = !DILocalVariable(name: "fields", scope: !7981, file: !3, line: 3312, type: !1724)
!7990 = !DILocation(line: 3312, column: 12, scope: !7981)
!7991 = !DILocalVariable(name: "new_type", scope: !7981, file: !3, line: 3313, type: !1724)
!7992 = !DILocation(line: 3313, column: 12, scope: !7981)
!7993 = !DILocation(line: 3314, column: 18, scope: !7981)
!7994 = !DILocation(line: 3316, column: 31, scope: !7981)
!7995 = !DILocation(line: 3316, column: 40, scope: !7981)
!7996 = !DILocation(line: 3316, column: 45, scope: !7981)
!7997 = !DILocation(line: 3317, column: 10, scope: !7981)
!7998 = !DILocation(line: 3317, column: 15, scope: !7981)
!7999 = !DILocation(line: 3316, column: 16, scope: !7981)
!8000 = !DILocation(line: 3316, column: 14, scope: !7981)
!8001 = !DILocation(line: 3318, column: 38, scope: !7981)
!8002 = !DILocation(line: 3318, column: 46, scope: !7981)
!8003 = !DILocation(line: 3318, column: 52, scope: !7981)
!8004 = !DILocation(line: 3318, column: 57, scope: !7981)
!8005 = !DILocation(line: 3318, column: 18, scope: !7981)
!8006 = !DILocation(line: 3318, column: 16, scope: !7981)
!8007 = !DILocation(line: 3320, column: 30, scope: !7981)
!8008 = !DILocation(line: 3320, column: 39, scope: !7981)
!8009 = !DILocation(line: 3321, column: 9, scope: !7981)
!8010 = !DILocation(line: 3321, column: 14, scope: !7981)
!8011 = !DILocation(line: 3321, column: 22, scope: !7981)
!8012 = !DILocation(line: 3321, column: 27, scope: !7981)
!8013 = !DILocation(line: 3320, column: 7, scope: !7981)
!8014 = !DILocation(line: 3323, column: 7, scope: !7981)
!8015 = !DILocation(line: 3324, column: 17, scope: !7981)
!8016 = !DILocation(line: 3324, column: 26, scope: !7981)
!8017 = !DILocation(line: 3324, column: 15, scope: !7981)
!8018 = distinct !{!8018, !7978, !8019}
!8019 = !DILocation(line: 3325, column: 5, scope: !7965)
!8020 = !DILocation(line: 3326, column: 5, scope: !7965)
!8021 = !DILocation(line: 3326, column: 13, scope: !7965)
!8022 = !DILocation(line: 3327, column: 1, scope: !7965)
!8023 = distinct !DISubprogram(name: "gen_cluster_name", scope: !3, file: !3, line: 2819, type: !8024, scopeLine: 2820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8024 = !DISubroutineType(types: !8025)
!8025 = !{!1724, !1724, !1821, !1821}
!8026 = !DILocalVariable(name: "decl", arg: 1, scope: !8023, file: !3, line: 2819, type: !1724)
!8027 = !DILocation(line: 2819, column: 24, scope: !8023)
!8028 = !DILocalVariable(name: "clust_num", arg: 2, scope: !8023, file: !3, line: 2819, type: !1821)
!8029 = !DILocation(line: 2819, column: 34, scope: !8023)
!8030 = !DILocalVariable(name: "str_num", arg: 3, scope: !8023, file: !3, line: 2819, type: !1821)
!8031 = !DILocation(line: 2819, column: 49, scope: !8023)
!8032 = !DILocalVariable(name: "orig_name", scope: !8023, file: !3, line: 2821, type: !1928)
!8033 = !DILocation(line: 2821, column: 16, scope: !8023)
!8034 = !DILocation(line: 2821, column: 43, scope: !8023)
!8035 = !DILocation(line: 2821, column: 28, scope: !8023)
!8036 = !DILocalVariable(name: "tmp_name", scope: !8023, file: !3, line: 2822, type: !1993)
!8037 = !DILocation(line: 2822, column: 10, scope: !8023)
!8038 = !DILocalVariable(name: "prefix", scope: !8023, file: !3, line: 2823, type: !1993)
!8039 = !DILocation(line: 2823, column: 10, scope: !8023)
!8040 = !DILocalVariable(name: "new_name", scope: !8023, file: !3, line: 2824, type: !1993)
!8041 = !DILocation(line: 2824, column: 10, scope: !8023)
!8042 = !DILocalVariable(name: "len", scope: !8023, file: !3, line: 2825, type: !2199)
!8043 = !DILocation(line: 2825, column: 10, scope: !8023)
!8044 = !DILocation(line: 2827, column: 8, scope: !8045)
!8045 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 2827, column: 7)
!8046 = !DILocation(line: 2827, column: 7, scope: !8023)
!8047 = !DILocation(line: 2828, column: 5, scope: !8045)
!8048 = !DILocalVariable(name: "name_", scope: !8049, file: !3, line: 2828, type: !8050)
!8049 = distinct !DILexicalBlock(scope: !8045, file: !3, line: 2828, column: 5)
!8050 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1928)
!8051 = !DILocation(line: 2828, column: 5, scope: !8049)
!8052 = !DILocalVariable(name: "output_", scope: !8049, file: !3, line: 2828, type: !8053)
!8053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1993)
!8054 = !DILocation(line: 2830, column: 17, scope: !8023)
!8055 = !DILocation(line: 2830, column: 28, scope: !8023)
!8056 = !DILocation(line: 2830, column: 39, scope: !8023)
!8057 = !DILocation(line: 2830, column: 9, scope: !8023)
!8058 = !DILocation(line: 2830, column: 50, scope: !8023)
!8059 = !DILocation(line: 2830, column: 7, scope: !8023)
!8060 = !DILocation(line: 2831, column: 12, scope: !8023)
!8061 = !DILocation(line: 2831, column: 10, scope: !8023)
!8062 = !DILocation(line: 2832, column: 11, scope: !8023)
!8063 = !DILocation(line: 2832, column: 19, scope: !8023)
!8064 = !DILocation(line: 2832, column: 30, scope: !8023)
!8065 = !DILocation(line: 2832, column: 41, scope: !8023)
!8066 = !DILocation(line: 2833, column: 12, scope: !8023)
!8067 = !DILocation(line: 2833, column: 23, scope: !8023)
!8068 = !DILocation(line: 2833, column: 34, scope: !8023)
!8069 = !DILocation(line: 2833, column: 4, scope: !8023)
!8070 = !DILocation(line: 2832, column: 3, scope: !8023)
!8071 = !DILocation(line: 2834, column: 11, scope: !8023)
!8072 = !DILocation(line: 2834, column: 28, scope: !8023)
!8073 = !DILocation(line: 2834, column: 39, scope: !8023)
!8074 = !DILocation(line: 2834, column: 50, scope: !8023)
!8075 = !DILocation(line: 2834, column: 20, scope: !8023)
!8076 = !DILocation(line: 2834, column: 18, scope: !8023)
!8077 = !DILocation(line: 2834, column: 3, scope: !8023)
!8078 = !DILocation(line: 2836, column: 3, scope: !8023)
!8079 = !DILocalVariable(name: "name_", scope: !8080, file: !3, line: 2836, type: !8050)
!8080 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 2836, column: 3)
!8081 = !DILocation(line: 2836, column: 3, scope: !8080)
!8082 = !DILocalVariable(name: "output_", scope: !8080, file: !3, line: 2836, type: !8053)
!8083 = !DILocation(line: 2837, column: 26, scope: !8023)
!8084 = !DILocation(line: 2837, column: 10, scope: !8023)
!8085 = !DILocation(line: 2837, column: 3, scope: !8023)
!8086 = distinct !DISubprogram(name: "create_fields", scope: !3, file: !3, line: 2782, type: !8087, scopeLine: 2784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8087 = !DISubroutineType(types: !8088)
!8088 = !{!1724, !3047, !3037, !1821}
!8089 = !DILocalVariable(name: "cluster", arg: 1, scope: !8086, file: !3, line: 2782, type: !3047)
!8090 = !DILocation(line: 2782, column: 39, scope: !8086)
!8091 = !DILocalVariable(name: "fields", arg: 2, scope: !8086, file: !3, line: 2783, type: !3037)
!8092 = !DILocation(line: 2783, column: 30, scope: !8086)
!8093 = !DILocalVariable(name: "num_fields", arg: 3, scope: !8086, file: !3, line: 2783, type: !1821)
!8094 = !DILocation(line: 2783, column: 42, scope: !8086)
!8095 = !DILocalVariable(name: "i", scope: !8086, file: !3, line: 2785, type: !1821)
!8096 = !DILocation(line: 2785, column: 7, scope: !8086)
!8097 = !DILocalVariable(name: "new_types", scope: !8086, file: !3, line: 2786, type: !1724)
!8098 = !DILocation(line: 2786, column: 8, scope: !8086)
!8099 = !DILocalVariable(name: "last", scope: !8086, file: !3, line: 2787, type: !1724)
!8100 = !DILocation(line: 2787, column: 8, scope: !8086)
!8101 = !DILocation(line: 2789, column: 10, scope: !8102)
!8102 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 2789, column: 3)
!8103 = !DILocation(line: 2789, column: 8, scope: !8102)
!8104 = !DILocation(line: 2789, column: 15, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8102, file: !3, line: 2789, column: 3)
!8106 = !DILocation(line: 2789, column: 19, scope: !8105)
!8107 = !DILocation(line: 2789, column: 17, scope: !8105)
!8108 = !DILocation(line: 2789, column: 3, scope: !8102)
!8109 = !DILocation(line: 2790, column: 9, scope: !8110)
!8110 = distinct !DILexicalBlock(scope: !8105, file: !3, line: 2790, column: 9)
!8111 = !DILocation(line: 2790, column: 9, scope: !8105)
!8112 = !DILocalVariable(name: "new_decl", scope: !8113, file: !3, line: 2792, type: !1724)
!8113 = distinct !DILexicalBlock(scope: !8110, file: !3, line: 2791, column: 7)
!8114 = !DILocation(line: 2792, column: 7, scope: !8113)
!8115 = !DILocation(line: 2792, column: 32, scope: !8113)
!8116 = !DILocation(line: 2792, column: 39, scope: !8113)
!8117 = !DILocation(line: 2792, column: 42, scope: !8113)
!8118 = !DILocation(line: 2792, column: 18, scope: !8113)
!8119 = !DILocation(line: 2794, column: 7, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 2794, column: 6)
!8121 = !DILocation(line: 2794, column: 6, scope: !8113)
!8122 = !DILocation(line: 2795, column: 16, scope: !8120)
!8123 = !DILocation(line: 2795, column: 14, scope: !8120)
!8124 = !DILocation(line: 2795, column: 4, scope: !8120)
!8125 = !DILocation(line: 2797, column: 24, scope: !8120)
!8126 = !DILocation(line: 2797, column: 4, scope: !8120)
!8127 = !DILocation(line: 2797, column: 22, scope: !8120)
!8128 = !DILocation(line: 2798, column: 9, scope: !8113)
!8129 = !DILocation(line: 2798, column: 7, scope: !8113)
!8130 = !DILocation(line: 2799, column: 7, scope: !8113)
!8131 = !DILocation(line: 2789, column: 32, scope: !8105)
!8132 = !DILocation(line: 2789, column: 3, scope: !8105)
!8133 = distinct !{!8133, !8108, !8134}
!8134 = !DILocation(line: 2799, column: 7, scope: !8102)
!8135 = !DILocation(line: 2801, column: 3, scope: !8086)
!8136 = !DILocation(line: 2801, column: 21, scope: !8086)
!8137 = !DILocation(line: 2802, column: 10, scope: !8086)
!8138 = !DILocation(line: 2802, column: 3, scope: !8086)
!8139 = distinct !DISubprogram(name: "build_basic_struct", scope: !3, file: !3, line: 2752, type: !8140, scopeLine: 2753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8140 = !DISubroutineType(types: !8141)
!8141 = !{!1724, !1724, !1724, !1724}
!8142 = !DILocalVariable(name: "fields", arg: 1, scope: !8139, file: !3, line: 2752, type: !1724)
!8143 = !DILocation(line: 2752, column: 26, scope: !8139)
!8144 = !DILocalVariable(name: "name", arg: 2, scope: !8139, file: !3, line: 2752, type: !1724)
!8145 = !DILocation(line: 2752, column: 39, scope: !8139)
!8146 = !DILocalVariable(name: "orig_struct", arg: 3, scope: !8139, file: !3, line: 2752, type: !1724)
!8147 = !DILocation(line: 2752, column: 50, scope: !8139)
!8148 = !DILocalVariable(name: "attributes", scope: !8139, file: !3, line: 2754, type: !1724)
!8149 = !DILocation(line: 2754, column: 8, scope: !8139)
!8150 = !DILocalVariable(name: "ref", scope: !8139, file: !3, line: 2755, type: !1724)
!8151 = !DILocation(line: 2755, column: 8, scope: !8139)
!8152 = !DILocalVariable(name: "x", scope: !8139, file: !3, line: 2756, type: !1724)
!8153 = !DILocation(line: 2756, column: 8, scope: !8139)
!8154 = !DILocation(line: 2758, column: 7, scope: !8155)
!8155 = distinct !DILexicalBlock(scope: !8139, file: !3, line: 2758, column: 7)
!8156 = !DILocation(line: 2758, column: 7, scope: !8139)
!8157 = !DILocation(line: 2759, column: 32, scope: !8155)
!8158 = !DILocation(line: 2759, column: 18, scope: !8155)
!8159 = !DILocation(line: 2759, column: 16, scope: !8155)
!8160 = !DILocation(line: 2759, column: 5, scope: !8155)
!8161 = !DILocation(line: 2760, column: 9, scope: !8139)
!8162 = !DILocation(line: 2760, column: 7, scope: !8139)
!8163 = !DILocation(line: 2761, column: 3, scope: !8139)
!8164 = !DILocation(line: 2761, column: 19, scope: !8139)
!8165 = !DILocation(line: 2762, column: 26, scope: !8139)
!8166 = !DILocation(line: 2762, column: 3, scope: !8139)
!8167 = !DILocation(line: 2763, column: 23, scope: !8139)
!8168 = !DILocation(line: 2763, column: 3, scope: !8139)
!8169 = !DILocation(line: 2763, column: 21, scope: !8139)
!8170 = !DILocation(line: 2764, column: 12, scope: !8171)
!8171 = distinct !DILexicalBlock(scope: !8139, file: !3, line: 2764, column: 3)
!8172 = !DILocation(line: 2764, column: 10, scope: !8171)
!8173 = !DILocation(line: 2764, column: 8, scope: !8171)
!8174 = !DILocation(line: 2764, column: 20, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 2764, column: 3)
!8176 = !DILocation(line: 2764, column: 3, scope: !8171)
!8177 = !DILocation(line: 2766, column: 26, scope: !8178)
!8178 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 2765, column: 5)
!8179 = !DILocation(line: 2766, column: 7, scope: !8178)
!8180 = !DILocation(line: 2766, column: 24, scope: !8178)
!8181 = !DILocation(line: 2767, column: 26, scope: !8178)
!8182 = !DILocation(line: 2767, column: 7, scope: !8178)
!8183 = !DILocation(line: 2767, column: 23, scope: !8178)
!8184 = !DILocation(line: 2768, column: 5, scope: !8178)
!8185 = !DILocation(line: 2764, column: 27, scope: !8175)
!8186 = !DILocation(line: 2764, column: 25, scope: !8175)
!8187 = !DILocation(line: 2764, column: 3, scope: !8175)
!8188 = distinct !{!8188, !8176, !8189}
!8189 = !DILocation(line: 2768, column: 5, scope: !8171)
!8190 = !DILocation(line: 2769, column: 23, scope: !8139)
!8191 = !DILocation(line: 2769, column: 3, scope: !8139)
!8192 = !DILocation(line: 2769, column: 21, scope: !8139)
!8193 = !DILocation(line: 2770, column: 16, scope: !8139)
!8194 = !DILocation(line: 2770, column: 3, scope: !8139)
!8195 = !DILocation(line: 2771, column: 21, scope: !8139)
!8196 = !DILocation(line: 2771, column: 3, scope: !8139)
!8197 = !DILocation(line: 2771, column: 19, scope: !8139)
!8198 = !DILocation(line: 2773, column: 10, scope: !8139)
!8199 = !DILocation(line: 2773, column: 3, scope: !8139)
!8200 = distinct !DISubprogram(name: "update_fields_mapping", scope: !3, file: !3, line: 2737, type: !8201, scopeLine: 2739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8201 = !DISubroutineType(types: !8202)
!8202 = !{null, !3047, !1724, !3037, !1821}
!8203 = !DILocalVariable(name: "cluster", arg: 1, scope: !8200, file: !3, line: 2737, type: !3047)
!8204 = !DILocation(line: 2737, column: 46, scope: !8200)
!8205 = !DILocalVariable(name: "new_type", arg: 2, scope: !8200, file: !3, line: 2737, type: !1724)
!8206 = !DILocation(line: 2737, column: 60, scope: !8200)
!8207 = !DILocalVariable(name: "fields", arg: 3, scope: !8200, file: !3, line: 2738, type: !3037)
!8208 = !DILocation(line: 2738, column: 31, scope: !8200)
!8209 = !DILocalVariable(name: "num_fields", arg: 4, scope: !8200, file: !3, line: 2738, type: !1821)
!8210 = !DILocation(line: 2738, column: 43, scope: !8200)
!8211 = !DILocalVariable(name: "i", scope: !8200, file: !3, line: 2740, type: !1821)
!8212 = !DILocation(line: 2740, column: 7, scope: !8200)
!8213 = !DILocation(line: 2742, column: 10, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8200, file: !3, line: 2742, column: 3)
!8215 = !DILocation(line: 2742, column: 8, scope: !8214)
!8216 = !DILocation(line: 2742, column: 15, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 2742, column: 3)
!8218 = !DILocation(line: 2742, column: 19, scope: !8217)
!8219 = !DILocation(line: 2742, column: 17, scope: !8217)
!8220 = !DILocation(line: 2742, column: 3, scope: !8214)
!8221 = !DILocation(line: 2743, column: 9, scope: !8222)
!8222 = distinct !DILexicalBlock(scope: !8217, file: !3, line: 2743, column: 9)
!8223 = !DILocation(line: 2743, column: 9, scope: !8217)
!8224 = !DILocation(line: 2744, column: 28, scope: !8222)
!8225 = !DILocation(line: 2744, column: 2, scope: !8222)
!8226 = !DILocation(line: 2744, column: 9, scope: !8222)
!8227 = !DILocation(line: 2744, column: 12, scope: !8222)
!8228 = !DILocation(line: 2744, column: 26, scope: !8222)
!8229 = !DILocation(line: 2742, column: 32, scope: !8217)
!8230 = !DILocation(line: 2742, column: 3, scope: !8217)
!8231 = distinct !{!8231, !8220, !8232}
!8232 = !DILocation(line: 2744, column: 28, scope: !8214)
!8233 = !DILocation(line: 2745, column: 1, scope: !8200)
!8234 = distinct !DISubprogram(name: "dump_struct_type", scope: !3, file: !3, line: 3256, type: !8235, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8235 = !DISubroutineType(types: !8236)
!8236 = !{null, !1724, !1778, !1778}
!8237 = !DILocalVariable(name: "type", arg: 1, scope: !8234, file: !3, line: 3256, type: !1724)
!8238 = !DILocation(line: 3256, column: 24, scope: !8234)
!8239 = !DILocalVariable(name: "indent", arg: 2, scope: !8234, file: !3, line: 3256, type: !1778)
!8240 = !DILocation(line: 3256, column: 53, scope: !8234)
!8241 = !DILocalVariable(name: "shift", arg: 3, scope: !8234, file: !3, line: 3257, type: !1778)
!8242 = !DILocation(line: 3257, column: 29, scope: !8234)
!8243 = !DILocalVariable(name: "struct_name", scope: !8234, file: !3, line: 3259, type: !1928)
!8244 = !DILocation(line: 3259, column: 15, scope: !8234)
!8245 = !DILocalVariable(name: "field", scope: !8234, file: !3, line: 3260, type: !1724)
!8246 = !DILocation(line: 3260, column: 8, scope: !8234)
!8247 = !DILocation(line: 3262, column: 8, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8234, file: !3, line: 3262, column: 7)
!8249 = !DILocation(line: 3262, column: 13, scope: !8248)
!8250 = !DILocation(line: 3262, column: 17, scope: !8248)
!8251 = !DILocation(line: 3262, column: 7, scope: !8234)
!8252 = !DILocation(line: 3263, column: 5, scope: !8248)
!8253 = !DILocation(line: 3265, column: 7, scope: !8254)
!8254 = distinct !DILexicalBlock(scope: !8234, file: !3, line: 3265, column: 7)
!8255 = !DILocation(line: 3265, column: 24, scope: !8254)
!8256 = !DILocation(line: 3265, column: 7, scope: !8234)
!8257 = !DILocation(line: 3267, column: 27, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 3266, column: 5)
!8259 = !DILocation(line: 3267, column: 38, scope: !8258)
!8260 = !DILocation(line: 3267, column: 7, scope: !8258)
!8261 = !DILocation(line: 3268, column: 7, scope: !8258)
!8262 = !DILocation(line: 3271, column: 16, scope: !8234)
!8263 = !DILocation(line: 3271, column: 3, scope: !8234)
!8264 = !DILocation(line: 3272, column: 32, scope: !8234)
!8265 = !DILocation(line: 3272, column: 17, scope: !8234)
!8266 = !DILocation(line: 3272, column: 15, scope: !8234)
!8267 = !DILocation(line: 3273, column: 12, scope: !8234)
!8268 = !DILocation(line: 3273, column: 3, scope: !8234)
!8269 = !DILocation(line: 3274, column: 7, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8234, file: !3, line: 3274, column: 7)
!8271 = !DILocation(line: 3274, column: 7, scope: !8234)
!8272 = !DILocation(line: 3275, column: 14, scope: !8270)
!8273 = !DILocation(line: 3275, column: 32, scope: !8270)
!8274 = !DILocation(line: 3275, column: 5, scope: !8270)
!8275 = !DILocation(line: 3276, column: 16, scope: !8234)
!8276 = !DILocation(line: 3276, column: 3, scope: !8234)
!8277 = !DILocation(line: 3277, column: 12, scope: !8234)
!8278 = !DILocation(line: 3277, column: 3, scope: !8234)
!8279 = !DILocation(line: 3279, column: 16, scope: !8280)
!8280 = distinct !DILexicalBlock(scope: !8234, file: !3, line: 3279, column: 3)
!8281 = !DILocation(line: 3279, column: 14, scope: !8280)
!8282 = !DILocation(line: 3279, column: 8, scope: !8280)
!8283 = !DILocation(line: 3279, column: 36, scope: !8284)
!8284 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 3279, column: 3)
!8285 = !DILocation(line: 3279, column: 3, scope: !8280)
!8286 = !DILocalVariable(name: "s", scope: !8287, file: !3, line: 3282, type: !1778)
!8287 = distinct !DILexicalBlock(scope: !8284, file: !3, line: 3281, column: 5)
!8288 = !DILocation(line: 3282, column: 30, scope: !8287)
!8289 = !DILocation(line: 3282, column: 34, scope: !8287)
!8290 = !DILocalVariable(name: "f_type", scope: !8287, file: !3, line: 3283, type: !1724)
!8291 = !DILocation(line: 3283, column: 12, scope: !8287)
!8292 = !DILocation(line: 3283, column: 21, scope: !8287)
!8293 = !DILocation(line: 3285, column: 20, scope: !8287)
!8294 = !DILocation(line: 3285, column: 7, scope: !8287)
!8295 = !DILocation(line: 3286, column: 7, scope: !8287)
!8296 = !DILocation(line: 3286, column: 15, scope: !8287)
!8297 = !DILocation(line: 3287, column: 11, scope: !8287)
!8298 = !DILocation(line: 3287, column: 2, scope: !8287)
!8299 = distinct !{!8299, !8295, !8300}
!8300 = !DILocation(line: 3287, column: 25, scope: !8287)
!8301 = !DILocation(line: 3288, column: 25, scope: !8287)
!8302 = !DILocation(line: 3288, column: 33, scope: !8287)
!8303 = !DILocation(line: 3288, column: 41, scope: !8287)
!8304 = !DILocation(line: 3288, column: 49, scope: !8287)
!8305 = !DILocation(line: 3288, column: 47, scope: !8287)
!8306 = !DILocation(line: 3288, column: 7, scope: !8287)
!8307 = !DILocation(line: 3289, column: 15, scope: !8287)
!8308 = !DILocation(line: 3289, column: 7, scope: !8287)
!8309 = !DILocation(line: 3290, column: 27, scope: !8287)
!8310 = !DILocation(line: 3290, column: 38, scope: !8287)
!8311 = !DILocation(line: 3290, column: 7, scope: !8287)
!8312 = !DILocation(line: 3291, column: 15, scope: !8287)
!8313 = !DILocation(line: 3291, column: 7, scope: !8287)
!8314 = !DILocation(line: 3292, column: 5, scope: !8287)
!8315 = !DILocation(line: 3280, column: 16, scope: !8284)
!8316 = !DILocation(line: 3280, column: 14, scope: !8284)
!8317 = !DILocation(line: 3279, column: 3, scope: !8284)
!8318 = distinct !{!8318, !8285, !8319}
!8319 = !DILocation(line: 3292, column: 5, scope: !8280)
!8320 = !DILocation(line: 3293, column: 16, scope: !8234)
!8321 = !DILocation(line: 3293, column: 3, scope: !8234)
!8322 = !DILocation(line: 3294, column: 12, scope: !8234)
!8323 = !DILocation(line: 3294, column: 3, scope: !8234)
!8324 = !DILocation(line: 3295, column: 1, scope: !8234)
!8325 = distinct !DISubprogram(name: "print_shift", scope: !3, file: !3, line: 2726, type: !8326, scopeLine: 2727, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8326 = !DISubroutineType(types: !8327)
!8327 = !{null, !1778}
!8328 = !DILocalVariable(name: "shift", arg: 1, scope: !8325, file: !3, line: 2726, type: !1778)
!8329 = !DILocation(line: 2726, column: 37, scope: !8325)
!8330 = !DILocalVariable(name: "sh", scope: !8325, file: !3, line: 2728, type: !1778)
!8331 = !DILocation(line: 2728, column: 26, scope: !8325)
!8332 = !DILocation(line: 2728, column: 31, scope: !8325)
!8333 = !DILocation(line: 2730, column: 3, scope: !8325)
!8334 = !DILocation(line: 2730, column: 12, scope: !8325)
!8335 = !DILocation(line: 2731, column: 14, scope: !8325)
!8336 = !DILocation(line: 2731, column: 5, scope: !8325)
!8337 = distinct !{!8337, !8333, !8338}
!8338 = !DILocation(line: 2731, column: 28, scope: !8325)
!8339 = !DILocation(line: 2732, column: 1, scope: !8325)
!8340 = distinct !DISubprogram(name: "new_var_hash", scope: !3, file: !3, line: 2279, type: !2492, scopeLine: 2280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8341 = !DILocalVariable(name: "x", arg: 1, scope: !8340, file: !3, line: 2279, type: !2495)
!8342 = !DILocation(line: 2279, column: 27, scope: !8340)
!8343 = !DILocation(line: 2281, column: 10, scope: !8340)
!8344 = !DILocation(line: 2281, column: 3, scope: !8340)
!8345 = distinct !DISubprogram(name: "new_var_eq", scope: !3, file: !3, line: 2288, type: !2500, scopeLine: 2289, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8346 = !DILocalVariable(name: "x", arg: 1, scope: !8345, file: !3, line: 2288, type: !2495)
!8347 = !DILocation(line: 2288, column: 25, scope: !8345)
!8348 = !DILocalVariable(name: "y", arg: 2, scope: !8345, file: !3, line: 2288, type: !2495)
!8349 = !DILocation(line: 2288, column: 40, scope: !8345)
!8350 = !DILocation(line: 2290, column: 7, scope: !8351)
!8351 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2290, column: 7)
!8352 = !DILocation(line: 2290, column: 7, scope: !8345)
!8353 = !DILocation(line: 2291, column: 12, scope: !8351)
!8354 = !DILocation(line: 2291, column: 55, scope: !8351)
!8355 = !DILocation(line: 2291, column: 52, scope: !8351)
!8356 = !DILocation(line: 2291, column: 5, scope: !8351)
!8357 = !DILocation(line: 2293, column: 5, scope: !8351)
!8358 = !DILocation(line: 2294, column: 1, scope: !8345)
!8359 = distinct !DISubprogram(name: "create_new_var", scope: !3, file: !3, line: 2253, type: !8360, scopeLine: 2254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8360 = !DISubroutineType(types: !8361)
!8361 = !{null, !1724, !2485}
!8362 = !DILocalVariable(name: "var_decl", arg: 1, scope: !8359, file: !3, line: 2253, type: !1724)
!8363 = !DILocation(line: 2253, column: 22, scope: !8359)
!8364 = !DILocalVariable(name: "new_vars_htab", arg: 2, scope: !8359, file: !3, line: 2253, type: !2485)
!8365 = !DILocation(line: 2253, column: 39, scope: !8359)
!8366 = !DILocalVariable(name: "node", scope: !8359, file: !3, line: 2255, type: !3161)
!8367 = !DILocation(line: 2255, column: 11, scope: !8359)
!8368 = !DILocalVariable(name: "str", scope: !8359, file: !3, line: 2256, type: !3110)
!8369 = !DILocation(line: 2256, column: 9, scope: !8359)
!8370 = !DILocalVariable(name: "type", scope: !8359, file: !3, line: 2257, type: !1724)
!8371 = !DILocation(line: 2257, column: 8, scope: !8359)
!8372 = !DILocalVariable(name: "i", scope: !8359, file: !3, line: 2258, type: !7)
!8373 = !DILocation(line: 2258, column: 12, scope: !8359)
!8374 = !DILocation(line: 2260, column: 8, scope: !8375)
!8375 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2260, column: 7)
!8376 = !DILocation(line: 2260, column: 17, scope: !8375)
!8377 = !DILocation(line: 2260, column: 41, scope: !8375)
!8378 = !DILocation(line: 2260, column: 51, scope: !8375)
!8379 = !DILocation(line: 2260, column: 20, scope: !8375)
!8380 = !DILocation(line: 2260, column: 7, scope: !8359)
!8381 = !DILocation(line: 2261, column: 5, scope: !8375)
!8382 = !DILocation(line: 2263, column: 22, scope: !8383)
!8383 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2263, column: 7)
!8384 = !DILocation(line: 2263, column: 8, scope: !8383)
!8385 = !DILocation(line: 2263, column: 7, scope: !8359)
!8386 = !DILocation(line: 2264, column: 5, scope: !8383)
!8387 = !DILocation(line: 2266, column: 23, scope: !8359)
!8388 = !DILocation(line: 2266, column: 7, scope: !8359)
!8389 = !DILocation(line: 2266, column: 5, scope: !8359)
!8390 = !DILocation(line: 2267, column: 7, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2267, column: 7)
!8392 = !DILocation(line: 2267, column: 12, scope: !8391)
!8393 = !DILocation(line: 2267, column: 9, scope: !8391)
!8394 = !DILocation(line: 2267, column: 7, scope: !8359)
!8395 = !DILocation(line: 2268, column: 5, scope: !8391)
!8396 = !DILocation(line: 2270, column: 9, scope: !8359)
!8397 = !DILocation(line: 2270, column: 7, scope: !8359)
!8398 = !DILocation(line: 2271, column: 31, scope: !8359)
!8399 = !DILocation(line: 2271, column: 41, scope: !8359)
!8400 = !DILocation(line: 2271, column: 10, scope: !8359)
!8401 = !DILocation(line: 2271, column: 8, scope: !8359)
!8402 = !DILocation(line: 2272, column: 21, scope: !8359)
!8403 = !DILocation(line: 2272, column: 31, scope: !8359)
!8404 = !DILocation(line: 2272, column: 36, scope: !8359)
!8405 = !DILocation(line: 2272, column: 3, scope: !8359)
!8406 = !DILocation(line: 2273, column: 25, scope: !8359)
!8407 = !DILocation(line: 2273, column: 31, scope: !8359)
!8408 = !DILocation(line: 2273, column: 3, scope: !8359)
!8409 = !DILocation(line: 2274, column: 1, scope: !8359)
!8410 = distinct !DISubprogram(name: "update_varpool_with_new_var", scope: !3, file: !3, line: 1468, type: !5074, scopeLine: 1469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8411 = !DILocalVariable(name: "slot", arg: 1, scope: !8410, file: !3, line: 1468, type: !2508)
!8412 = !DILocation(line: 1468, column: 37, scope: !8410)
!8413 = !DILocalVariable(name: "data", arg: 2, scope: !8410, file: !3, line: 1468, type: !2008)
!8414 = !DILocation(line: 1468, column: 49, scope: !8410)
!8415 = !DILocalVariable(name: "n_var", scope: !8410, file: !3, line: 1470, type: !3161)
!8416 = !DILocation(line: 1470, column: 11, scope: !8410)
!8417 = !DILocation(line: 1470, column: 32, scope: !8410)
!8418 = !DILocation(line: 1470, column: 19, scope: !8410)
!8419 = !DILocalVariable(name: "var", scope: !8410, file: !3, line: 1471, type: !1724)
!8420 = !DILocation(line: 1471, column: 8, scope: !8410)
!8421 = !DILocalVariable(name: "i", scope: !8410, file: !3, line: 1472, type: !7)
!8422 = !DILocation(line: 1472, column: 12, scope: !8410)
!8423 = !DILocation(line: 1474, column: 10, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 1474, column: 3)
!8425 = !DILocation(line: 1474, column: 8, scope: !8424)
!8426 = !DILocation(line: 1474, column: 15, scope: !8427)
!8427 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 1474, column: 3)
!8428 = !DILocation(line: 1474, column: 3, scope: !8424)
!8429 = !DILocation(line: 1475, column: 31, scope: !8427)
!8430 = !DILocation(line: 1475, column: 5, scope: !8427)
!8431 = !DILocation(line: 1474, column: 61, scope: !8427)
!8432 = !DILocation(line: 1474, column: 3, scope: !8427)
!8433 = distinct !{!8433, !8428, !8434}
!8434 = !DILocation(line: 1475, column: 34, scope: !8424)
!8435 = !DILocation(line: 1476, column: 3, scope: !8410)
!8436 = distinct !DISubprogram(name: "is_in_new_vars_htab", scope: !3, file: !3, line: 584, type: !8437, scopeLine: 585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8437 = !DISubroutineType(types: !8438)
!8438 = !{!3161, !1724, !2485}
!8439 = !DILocalVariable(name: "decl", arg: 1, scope: !8436, file: !3, line: 584, type: !1724)
!8440 = !DILocation(line: 584, column: 27, scope: !8436)
!8441 = !DILocalVariable(name: "new_vars_htab", arg: 2, scope: !8436, file: !3, line: 584, type: !2485)
!8442 = !DILocation(line: 584, column: 40, scope: !8436)
!8443 = !DILocation(line: 586, column: 41, scope: !8436)
!8444 = !DILocation(line: 586, column: 56, scope: !8436)
!8445 = !DILocation(line: 587, column: 6, scope: !8436)
!8446 = !DILocation(line: 586, column: 20, scope: !8436)
!8447 = !DILocation(line: 586, column: 10, scope: !8436)
!8448 = !DILocation(line: 586, column: 3, scope: !8436)
!8449 = distinct !DISubprogram(name: "create_new_var_node", scope: !3, file: !3, line: 1998, type: !8450, scopeLine: 1999, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8450 = !DISubroutineType(types: !8451)
!8451 = !{!3161, !1724, !3110}
!8452 = !DILocalVariable(name: "var", arg: 1, scope: !8449, file: !3, line: 1998, type: !1724)
!8453 = !DILocation(line: 1998, column: 27, scope: !8449)
!8454 = !DILocalVariable(name: "str", arg: 2, scope: !8449, file: !3, line: 1998, type: !3110)
!8455 = !DILocation(line: 1998, column: 38, scope: !8449)
!8456 = !DILocalVariable(name: "node", scope: !8449, file: !3, line: 2000, type: !3161)
!8457 = !DILocation(line: 2000, column: 11, scope: !8449)
!8458 = !DILocation(line: 2002, column: 10, scope: !8449)
!8459 = !DILocation(line: 2002, column: 8, scope: !8449)
!8460 = !DILocation(line: 2003, column: 20, scope: !8449)
!8461 = !DILocation(line: 2003, column: 3, scope: !8449)
!8462 = !DILocation(line: 2003, column: 9, scope: !8449)
!8463 = !DILocation(line: 2003, column: 18, scope: !8449)
!8464 = !DILocation(line: 2004, column: 20, scope: !8449)
!8465 = !DILocation(line: 2004, column: 3, scope: !8449)
!8466 = !DILocation(line: 2004, column: 9, scope: !8449)
!8467 = !DILocation(line: 2004, column: 18, scope: !8449)
!8468 = !DILocation(line: 2005, column: 10, scope: !8449)
!8469 = !DILocation(line: 2005, column: 3, scope: !8449)
!8470 = distinct !DISubprogram(name: "create_new_var_1", scope: !3, file: !3, line: 2220, type: !8471, scopeLine: 2221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8471 = !DISubroutineType(types: !8472)
!8472 = !{null, !1724, !3110, !3161}
!8473 = !DILocalVariable(name: "orig_decl", arg: 1, scope: !8470, file: !3, line: 2220, type: !1724)
!8474 = !DILocation(line: 2220, column: 24, scope: !8470)
!8475 = !DILocalVariable(name: "str", arg: 2, scope: !8470, file: !3, line: 2220, type: !3110)
!8476 = !DILocation(line: 2220, column: 41, scope: !8470)
!8477 = !DILocalVariable(name: "node", arg: 3, scope: !8470, file: !3, line: 2220, type: !3161)
!8478 = !DILocation(line: 2220, column: 54, scope: !8470)
!8479 = !DILocalVariable(name: "i", scope: !8470, file: !3, line: 2222, type: !7)
!8480 = !DILocation(line: 2222, column: 12, scope: !8470)
!8481 = !DILocalVariable(name: "type", scope: !8470, file: !3, line: 2223, type: !1724)
!8482 = !DILocation(line: 2223, column: 8, scope: !8470)
!8483 = !DILocation(line: 2225, column: 10, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8470, file: !3, line: 2225, column: 3)
!8485 = !DILocation(line: 2225, column: 8, scope: !8484)
!8486 = !DILocation(line: 2226, column: 8, scope: !8487)
!8487 = distinct !DILexicalBlock(scope: !8484, file: !3, line: 2225, column: 3)
!8488 = !DILocation(line: 2225, column: 3, scope: !8484)
!8489 = !DILocalVariable(name: "new_decl", scope: !8490, file: !3, line: 2228, type: !1724)
!8490 = distinct !DILexicalBlock(scope: !8487, file: !3, line: 2227, column: 5)
!8491 = !DILocation(line: 2228, column: 12, scope: !8490)
!8492 = !DILocalVariable(name: "new_name", scope: !8490, file: !3, line: 2229, type: !1724)
!8493 = !DILocation(line: 2229, column: 12, scope: !8490)
!8494 = !DILocation(line: 2231, column: 32, scope: !8490)
!8495 = !DILocation(line: 2231, column: 43, scope: !8490)
!8496 = !DILocation(line: 2231, column: 18, scope: !8490)
!8497 = !DILocation(line: 2231, column: 16, scope: !8490)
!8498 = !DILocation(line: 2232, column: 31, scope: !8490)
!8499 = !DILocation(line: 2232, column: 42, scope: !8490)
!8500 = !DILocation(line: 2232, column: 14, scope: !8490)
!8501 = !DILocation(line: 2232, column: 12, scope: !8490)
!8502 = !DILocation(line: 2234, column: 26, scope: !8503)
!8503 = distinct !DILexicalBlock(scope: !8490, file: !3, line: 2234, column: 11)
!8504 = !DILocation(line: 2234, column: 11, scope: !8503)
!8505 = !DILocation(line: 2234, column: 11, scope: !8490)
!8506 = !DILocation(line: 2235, column: 13, scope: !8503)
!8507 = !DILocation(line: 2235, column: 11, scope: !8503)
!8508 = !DILocation(line: 2235, column: 2, scope: !8503)
!8509 = !DILocalVariable(name: "name", scope: !8510, file: !3, line: 2239, type: !1928)
!8510 = distinct !DILexicalBlock(scope: !8503, file: !3, line: 2238, column: 2)
!8511 = !DILocation(line: 2239, column: 16, scope: !8510)
!8512 = !DILocation(line: 2239, column: 23, scope: !8510)
!8513 = !DILocation(line: 2239, column: 34, scope: !8510)
!8514 = !DILocation(line: 2240, column: 31, scope: !8510)
!8515 = !DILocation(line: 2240, column: 37, scope: !8510)
!8516 = !DILocation(line: 2240, column: 15, scope: !8510)
!8517 = !DILocation(line: 2240, column: 13, scope: !8510)
!8518 = !DILocation(line: 2243, column: 29, scope: !8490)
!8519 = !DILocation(line: 2243, column: 39, scope: !8490)
!8520 = !DILocation(line: 2243, column: 7, scope: !8490)
!8521 = !DILocation(line: 2244, column: 7, scope: !8490)
!8522 = !DILocation(line: 2245, column: 5, scope: !8490)
!8523 = !DILocation(line: 2226, column: 54, scope: !8487)
!8524 = !DILocation(line: 2225, column: 3, scope: !8487)
!8525 = distinct !{!8525, !8488, !8526}
!8526 = !DILocation(line: 2245, column: 5, scope: !8484)
!8527 = !DILocation(line: 2246, column: 1, scope: !8470)
!8528 = distinct !DISubprogram(name: "add_to_new_vars_htab", scope: !3, file: !3, line: 1984, type: !8529, scopeLine: 1985, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8529 = !DISubroutineType(types: !8530)
!8530 = !{null, !3161, !2485}
!8531 = !DILocalVariable(name: "new_node", arg: 1, scope: !8528, file: !3, line: 1984, type: !3161)
!8532 = !DILocation(line: 1984, column: 31, scope: !8528)
!8533 = !DILocalVariable(name: "new_vars_htab", arg: 2, scope: !8528, file: !3, line: 1984, type: !2485)
!8534 = !DILocation(line: 1984, column: 48, scope: !8528)
!8535 = !DILocalVariable(name: "slot", scope: !8528, file: !3, line: 1986, type: !2508)
!8536 = !DILocation(line: 1986, column: 10, scope: !8528)
!8537 = !DILocation(line: 1988, column: 36, scope: !8528)
!8538 = !DILocation(line: 1988, column: 51, scope: !8528)
!8539 = !DILocation(line: 1988, column: 61, scope: !8528)
!8540 = !DILocation(line: 1989, column: 8, scope: !8528)
!8541 = !DILocation(line: 1988, column: 10, scope: !8528)
!8542 = !DILocation(line: 1988, column: 8, scope: !8528)
!8543 = !DILocation(line: 1991, column: 11, scope: !8528)
!8544 = !DILocation(line: 1991, column: 4, scope: !8528)
!8545 = !DILocation(line: 1991, column: 9, scope: !8528)
!8546 = !DILocation(line: 1992, column: 1, scope: !8528)
!8547 = distinct !DISubprogram(name: "gen_var_name", scope: !3, file: !3, line: 1961, type: !8548, scopeLine: 1962, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8548 = !DISubroutineType(types: !8549)
!8549 = !{!1724, !1724, !1778}
!8550 = !DILocalVariable(name: "orig_decl", arg: 1, scope: !8547, file: !3, line: 1961, type: !1724)
!8551 = !DILocation(line: 1961, column: 20, scope: !8547)
!8552 = !DILocalVariable(name: "i", arg: 2, scope: !8547, file: !3, line: 1961, type: !1778)
!8553 = !DILocation(line: 1961, column: 54, scope: !8547)
!8554 = !DILocalVariable(name: "old_name", scope: !8547, file: !3, line: 1963, type: !1928)
!8555 = !DILocation(line: 1963, column: 15, scope: !8547)
!8556 = !DILocalVariable(name: "prefix", scope: !8547, file: !3, line: 1964, type: !1993)
!8557 = !DILocation(line: 1964, column: 9, scope: !8547)
!8558 = !DILocalVariable(name: "new_name", scope: !8547, file: !3, line: 1965, type: !1993)
!8559 = !DILocation(line: 1965, column: 9, scope: !8547)
!8560 = !DILocation(line: 1967, column: 8, scope: !8561)
!8561 = distinct !DILexicalBlock(scope: !8547, file: !3, line: 1967, column: 7)
!8562 = !DILocation(line: 1968, column: 7, scope: !8561)
!8563 = !DILocation(line: 1968, column: 11, scope: !8561)
!8564 = !DILocation(line: 1967, column: 7, scope: !8547)
!8565 = !DILocation(line: 1969, column: 6, scope: !8561)
!8566 = !DILocation(line: 1974, column: 14, scope: !8547)
!8567 = !DILocation(line: 1974, column: 12, scope: !8547)
!8568 = !DILocation(line: 1975, column: 12, scope: !8547)
!8569 = !DILocation(line: 1975, column: 10, scope: !8547)
!8570 = !DILocation(line: 1976, column: 11, scope: !8547)
!8571 = !DILocation(line: 1976, column: 19, scope: !8547)
!8572 = !DILocation(line: 1976, column: 3, scope: !8547)
!8573 = !DILocation(line: 1977, column: 3, scope: !8547)
!8574 = !DILocalVariable(name: "name_", scope: !8575, file: !3, line: 1977, type: !8050)
!8575 = distinct !DILexicalBlock(scope: !8547, file: !3, line: 1977, column: 3)
!8576 = !DILocation(line: 1977, column: 3, scope: !8575)
!8577 = !DILocalVariable(name: "output_", scope: !8575, file: !3, line: 1977, type: !8053)
!8578 = !DILocation(line: 1978, column: 26, scope: !8547)
!8579 = !DILocation(line: 1978, column: 10, scope: !8547)
!8580 = !DILocation(line: 1978, column: 3, scope: !8547)
!8581 = !DILocation(line: 1979, column: 1, scope: !8547)
!8582 = distinct !DISubprogram(name: "gen_struct_type", scope: !3, file: !3, line: 1914, type: !6376, scopeLine: 1915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8583 = !DILocalVariable(name: "decl", arg: 1, scope: !8582, file: !3, line: 1914, type: !1724)
!8584 = !DILocation(line: 1914, column: 23, scope: !8582)
!8585 = !DILocalVariable(name: "new_str_type", arg: 2, scope: !8582, file: !3, line: 1914, type: !1724)
!8586 = !DILocation(line: 1914, column: 34, scope: !8582)
!8587 = !DILocalVariable(name: "type_orig", scope: !8582, file: !3, line: 1916, type: !1724)
!8588 = !DILocation(line: 1916, column: 8, scope: !8582)
!8589 = !DILocation(line: 1916, column: 37, scope: !8582)
!8590 = !DILocation(line: 1916, column: 20, scope: !8582)
!8591 = !DILocalVariable(name: "new_type", scope: !8582, file: !3, line: 1917, type: !1724)
!8592 = !DILocation(line: 1917, column: 8, scope: !8582)
!8593 = !DILocation(line: 1917, column: 19, scope: !8582)
!8594 = !DILocalVariable(name: "wrapper", scope: !8582, file: !3, line: 1918, type: !3163)
!8595 = !DILocation(line: 1918, column: 31, scope: !8582)
!8596 = !DILocation(line: 1918, column: 41, scope: !8582)
!8597 = !DILocalVariable(name: "wr", scope: !8582, file: !3, line: 1919, type: !3175)
!8598 = !DILocation(line: 1919, column: 18, scope: !8582)
!8599 = !DILocalVariable(name: "wr_p", scope: !8582, file: !3, line: 1920, type: !8600)
!8600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3175, size: 64)
!8601 = !DILocation(line: 1920, column: 19, scope: !8582)
!8602 = !DILocation(line: 1922, column: 3, scope: !8582)
!8603 = !DILocation(line: 1922, column: 10, scope: !8582)
!8604 = !DILocation(line: 1923, column: 3, scope: !8582)
!8605 = !DILocation(line: 1923, column: 6, scope: !8582)
!8606 = !DILocation(line: 1923, column: 28, scope: !8582)
!8607 = !DILocation(line: 1925, column: 11, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 1925, column: 11)
!8609 = distinct !DILexicalBlock(scope: !8582, file: !3, line: 1924, column: 5)
!8610 = !DILocation(line: 1925, column: 11, scope: !8609)
!8611 = !DILocation(line: 1927, column: 7, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 1926, column: 2)
!8613 = !DILocation(line: 1927, column: 12, scope: !8612)
!8614 = !DILocation(line: 1928, column: 7, scope: !8612)
!8615 = !DILocation(line: 1928, column: 14, scope: !8612)
!8616 = !DILocation(line: 1929, column: 2, scope: !8612)
!8617 = !DILocation(line: 1932, column: 4, scope: !8618)
!8618 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 1931, column: 2)
!8619 = !DILocation(line: 1933, column: 7, scope: !8618)
!8620 = !DILocation(line: 1933, column: 12, scope: !8618)
!8621 = !DILocation(line: 1934, column: 16, scope: !8618)
!8622 = !DILocation(line: 1934, column: 7, scope: !8618)
!8623 = !DILocation(line: 1934, column: 14, scope: !8618)
!8624 = !DILocation(line: 1936, column: 7, scope: !8609)
!8625 = !DILocation(line: 1937, column: 19, scope: !8609)
!8626 = !DILocation(line: 1937, column: 17, scope: !8609)
!8627 = distinct !{!8627, !8602, !8628}
!8628 = !DILocation(line: 1938, column: 5, scope: !8582)
!8629 = !DILocation(line: 1940, column: 3, scope: !8582)
!8630 = !DILocation(line: 1940, column: 10, scope: !8582)
!8631 = !DILocation(line: 1940, column: 47, scope: !8582)
!8632 = !DILocation(line: 1942, column: 14, scope: !8633)
!8633 = distinct !DILexicalBlock(scope: !8582, file: !3, line: 1941, column: 5)
!8634 = !DILocation(line: 1942, column: 12, scope: !8633)
!8635 = !DILocation(line: 1944, column: 11, scope: !8636)
!8636 = distinct !DILexicalBlock(scope: !8633, file: !3, line: 1944, column: 11)
!8637 = !DILocation(line: 1944, column: 17, scope: !8636)
!8638 = !DILocation(line: 1944, column: 11, scope: !8633)
!8639 = !DILocation(line: 1945, column: 31, scope: !8636)
!8640 = !DILocation(line: 1945, column: 41, scope: !8636)
!8641 = !DILocation(line: 1945, column: 47, scope: !8636)
!8642 = !DILocation(line: 1945, column: 13, scope: !8636)
!8643 = !DILocation(line: 1945, column: 11, scope: !8636)
!8644 = !DILocation(line: 1945, column: 2, scope: !8636)
!8645 = !DILocation(line: 1947, column: 33, scope: !8636)
!8646 = !DILocation(line: 1947, column: 13, scope: !8636)
!8647 = !DILocation(line: 1947, column: 11, scope: !8636)
!8648 = !DILocation(line: 1949, column: 7, scope: !8633)
!8649 = distinct !{!8649, !8629, !8650}
!8650 = !DILocation(line: 1950, column: 5, scope: !8582)
!8651 = !DILocation(line: 1952, column: 3, scope: !8582)
!8652 = !DILocation(line: 1953, column: 10, scope: !8582)
!8653 = !DILocation(line: 1953, column: 3, scope: !8582)
!8654 = distinct !DISubprogram(name: "is_global_var", scope: !5586, file: !5586, line: 575, type: !8655, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8655 = !DISubroutineType(types: !8656)
!8656 = !{!1844, !3119}
!8657 = !DILocalVariable(name: "t", arg: 1, scope: !8654, file: !5586, line: 575, type: !3119)
!8658 = !DILocation(line: 575, column: 27, scope: !8654)
!8659 = !DILocation(line: 577, column: 11, scope: !8654)
!8660 = !DILocation(line: 577, column: 27, scope: !8654)
!8661 = !DILocation(line: 577, column: 30, scope: !8654)
!8662 = !DILocation(line: 577, column: 10, scope: !8654)
!8663 = !DILocation(line: 577, column: 3, scope: !8654)
!8664 = distinct !DISubprogram(name: "copy_decl_attributes", scope: !3, file: !3, line: 1890, type: !8665, scopeLine: 1891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8665 = !DISubroutineType(types: !8666)
!8666 = !{null, !1724, !1724}
!8667 = !DILocalVariable(name: "new_decl", arg: 1, scope: !8664, file: !3, line: 1890, type: !1724)
!8668 = !DILocation(line: 1890, column: 28, scope: !8664)
!8669 = !DILocalVariable(name: "orig_decl", arg: 2, scope: !8664, file: !3, line: 1890, type: !1724)
!8670 = !DILocation(line: 1890, column: 43, scope: !8664)
!8671 = !DILocation(line: 1893, column: 3, scope: !8664)
!8672 = !DILocation(line: 1893, column: 30, scope: !8664)
!8673 = !DILocation(line: 1894, column: 30, scope: !8664)
!8674 = !DILocation(line: 1894, column: 3, scope: !8664)
!8675 = !DILocation(line: 1894, column: 28, scope: !8664)
!8676 = !DILocation(line: 1895, column: 28, scope: !8664)
!8677 = !DILocation(line: 1895, column: 3, scope: !8664)
!8678 = !DILocation(line: 1895, column: 26, scope: !8664)
!8679 = !DILocation(line: 1896, column: 28, scope: !8664)
!8680 = !DILocation(line: 1896, column: 3, scope: !8664)
!8681 = !DILocation(line: 1896, column: 26, scope: !8664)
!8682 = !DILocation(line: 1897, column: 26, scope: !8664)
!8683 = !DILocation(line: 1897, column: 3, scope: !8664)
!8684 = !DILocation(line: 1897, column: 24, scope: !8664)
!8685 = !DILocation(line: 1898, column: 29, scope: !8664)
!8686 = !DILocation(line: 1898, column: 3, scope: !8664)
!8687 = !DILocation(line: 1898, column: 27, scope: !8664)
!8688 = !DILocation(line: 1899, column: 35, scope: !8664)
!8689 = !DILocation(line: 1899, column: 3, scope: !8664)
!8690 = !DILocation(line: 1899, column: 33, scope: !8664)
!8691 = !DILocation(line: 1900, column: 33, scope: !8664)
!8692 = !DILocation(line: 1900, column: 3, scope: !8664)
!8693 = !DILocation(line: 1900, column: 31, scope: !8664)
!8694 = !DILocation(line: 1902, column: 7, scope: !8695)
!8695 = distinct !DILexicalBlock(scope: !8664, file: !3, line: 1902, column: 7)
!8696 = !DILocation(line: 1902, column: 29, scope: !8695)
!8697 = !DILocation(line: 1902, column: 7, scope: !8664)
!8698 = !DILocation(line: 1904, column: 34, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8695, file: !3, line: 1903, column: 5)
!8700 = !DILocation(line: 1904, column: 7, scope: !8699)
!8701 = !DILocation(line: 1904, column: 32, scope: !8699)
!8702 = !DILocation(line: 1905, column: 35, scope: !8699)
!8703 = !DILocation(line: 1905, column: 7, scope: !8699)
!8704 = !DILocation(line: 1905, column: 33, scope: !8699)
!8705 = !DILocation(line: 1906, column: 5, scope: !8699)
!8706 = !DILocation(line: 1907, column: 1, scope: !8664)
!8707 = distinct !DISubprogram(name: "VEC_type_wrapper_t_heap_alloc", scope: !3, file: !3, line: 952, type: !8708, scopeLine: 952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8708 = !DISubroutineType(types: !8709)
!8709 = !{!3163, !1821}
!8710 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8707, file: !3, line: 952, type: !1821)
!8711 = !DILocation(line: 952, column: 1, scope: !8707)
!8712 = distinct !DISubprogram(name: "VEC_type_wrapper_t_heap_safe_push", scope: !3, file: !3, line: 952, type: !8713, scopeLine: 952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8713 = !DISubroutineType(types: !8714)
!8714 = !{!8600, !8715, !8716}
!8715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3163, size: 64)
!8716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8717, size: 64)
!8717 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3175)
!8718 = !DILocalVariable(name: "vec_", arg: 1, scope: !8712, file: !3, line: 952, type: !8715)
!8719 = !DILocation(line: 952, column: 1, scope: !8712)
!8720 = !DILocalVariable(name: "obj_", arg: 2, scope: !8712, file: !3, line: 952, type: !8716)
!8721 = distinct !DISubprogram(name: "VEC_type_wrapper_t_base_length", scope: !3, file: !3, line: 951, type: !8722, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8722 = !DISubroutineType(types: !8723)
!8723 = !{!7, !8724}
!8724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8725, size: 64)
!8725 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3168)
!8726 = !DILocalVariable(name: "vec_", arg: 1, scope: !8721, file: !3, line: 951, type: !8724)
!8727 = !DILocation(line: 951, column: 1, scope: !8721)
!8728 = distinct !DISubprogram(name: "VEC_type_wrapper_t_base_last", scope: !3, file: !3, line: 951, type: !8729, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8729 = !DISubroutineType(types: !8730)
!8730 = !{!8600, !8731}
!8731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3168, size: 64)
!8732 = !DILocalVariable(name: "vec_", arg: 1, scope: !8728, file: !3, line: 951, type: !8731)
!8733 = !DILocation(line: 951, column: 1, scope: !8728)
!8734 = !DILocation(line: 0, scope: !8728)
!8735 = distinct !DISubprogram(name: "VEC_type_wrapper_t_base_pop", scope: !3, file: !3, line: 951, type: !8736, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8736 = !DISubroutineType(types: !8737)
!8737 = !{null, !8731}
!8738 = !DILocalVariable(name: "vec_", arg: 1, scope: !8735, file: !3, line: 951, type: !8731)
!8739 = !DILocation(line: 951, column: 1, scope: !8735)
!8740 = distinct !DISubprogram(name: "VEC_type_wrapper_t_heap_free", scope: !3, file: !3, line: 952, type: !8741, scopeLine: 952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8741 = !DISubroutineType(types: !8742)
!8742 = !{null, !8715}
!8743 = !DILocalVariable(name: "vec_", arg: 1, scope: !8740, file: !3, line: 952, type: !8715)
!8744 = !DILocation(line: 952, column: 1, scope: !8740)
!8745 = !DILocation(line: 952, column: 1, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !8740, file: !3, line: 952, column: 1)
!8747 = distinct !DISubprogram(name: "VEC_type_wrapper_t_heap_reserve", scope: !3, file: !3, line: 952, type: !8748, scopeLine: 952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8748 = !DISubroutineType(types: !8749)
!8749 = !{!1821, !8715, !1821}
!8750 = !DILocalVariable(name: "vec_", arg: 1, scope: !8747, file: !3, line: 952, type: !8715)
!8751 = !DILocation(line: 952, column: 1, scope: !8747)
!8752 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8747, file: !3, line: 952, type: !1821)
!8753 = !DILocalVariable(name: "extend", scope: !8747, file: !3, line: 952, type: !1821)
!8754 = !DILocation(line: 952, column: 1, scope: !8755)
!8755 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 952, column: 1)
!8756 = distinct !DISubprogram(name: "VEC_type_wrapper_t_base_quick_push", scope: !3, file: !3, line: 951, type: !8757, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8757 = !DISubroutineType(types: !8758)
!8758 = !{!8600, !8731, !8716}
!8759 = !DILocalVariable(name: "vec_", arg: 1, scope: !8756, file: !3, line: 951, type: !8731)
!8760 = !DILocation(line: 951, column: 1, scope: !8756)
!8761 = !DILocalVariable(name: "obj_", arg: 2, scope: !8756, file: !3, line: 951, type: !8716)
!8762 = !DILocalVariable(name: "slot_", scope: !8756, file: !3, line: 951, type: !8600)
!8763 = !DILocation(line: 951, column: 1, scope: !8764)
!8764 = distinct !DILexicalBlock(scope: !8756, file: !3, line: 951, column: 1)
!8765 = distinct !DISubprogram(name: "VEC_type_wrapper_t_base_space", scope: !3, file: !3, line: 951, type: !8766, scopeLine: 951, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8766 = !DISubroutineType(types: !8767)
!8767 = !{!1821, !8731, !1821}
!8768 = !DILocalVariable(name: "vec_", arg: 1, scope: !8765, file: !3, line: 951, type: !8731)
!8769 = !DILocation(line: 951, column: 1, scope: !8765)
!8770 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8765, file: !3, line: 951, type: !1821)
!8771 = distinct !DISubprogram(name: "insert_global_to_varpool", scope: !3, file: !3, line: 533, type: !4035, scopeLine: 534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8772 = !DILocalVariable(name: "new_decl", arg: 1, scope: !8771, file: !3, line: 533, type: !1724)
!8773 = !DILocation(line: 533, column: 32, scope: !8771)
!8774 = !DILocalVariable(name: "new_node", scope: !8771, file: !3, line: 535, type: !3385)
!8775 = !DILocation(line: 535, column: 24, scope: !8771)
!8776 = !DILocation(line: 537, column: 28, scope: !8771)
!8777 = !DILocation(line: 537, column: 14, scope: !8771)
!8778 = !DILocation(line: 537, column: 12, scope: !8771)
!8779 = !DILocation(line: 538, column: 25, scope: !8771)
!8780 = !DILocation(line: 538, column: 3, scope: !8771)
!8781 = !DILocation(line: 539, column: 29, scope: !8771)
!8782 = !DILocation(line: 539, column: 3, scope: !8771)
!8783 = !DILocation(line: 540, column: 26, scope: !8771)
!8784 = !DILocation(line: 540, column: 3, scope: !8771)
!8785 = !DILocation(line: 541, column: 1, scope: !8771)
!8786 = distinct !DISubprogram(name: "dump_new_var", scope: !3, file: !3, line: 1858, type: !5074, scopeLine: 1859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8787 = !DILocalVariable(name: "slot", arg: 1, scope: !8786, file: !3, line: 1858, type: !2508)
!8788 = !DILocation(line: 1858, column: 22, scope: !8786)
!8789 = !DILocalVariable(name: "data", arg: 2, scope: !8786, file: !3, line: 1858, type: !2008)
!8790 = !DILocation(line: 1858, column: 34, scope: !8786)
!8791 = !DILocalVariable(name: "n_var", scope: !8786, file: !3, line: 1860, type: !3161)
!8792 = !DILocation(line: 1860, column: 11, scope: !8786)
!8793 = !DILocation(line: 1860, column: 32, scope: !8786)
!8794 = !DILocation(line: 1860, column: 19, scope: !8786)
!8795 = !DILocalVariable(name: "var_type", scope: !8786, file: !3, line: 1861, type: !1724)
!8796 = !DILocation(line: 1861, column: 8, scope: !8786)
!8797 = !DILocalVariable(name: "var", scope: !8786, file: !3, line: 1862, type: !1724)
!8798 = !DILocation(line: 1862, column: 8, scope: !8786)
!8799 = !DILocalVariable(name: "i", scope: !8786, file: !3, line: 1863, type: !7)
!8800 = !DILocation(line: 1863, column: 12, scope: !8786)
!8801 = !DILocation(line: 1865, column: 31, scope: !8786)
!8802 = !DILocation(line: 1865, column: 38, scope: !8786)
!8803 = !DILocation(line: 1865, column: 14, scope: !8786)
!8804 = !DILocation(line: 1865, column: 12, scope: !8786)
!8805 = !DILocation(line: 1867, column: 12, scope: !8786)
!8806 = !DILocation(line: 1867, column: 3, scope: !8786)
!8807 = !DILocation(line: 1868, column: 23, scope: !8786)
!8808 = !DILocation(line: 1868, column: 34, scope: !8786)
!8809 = !DILocation(line: 1868, column: 41, scope: !8786)
!8810 = !DILocation(line: 1868, column: 3, scope: !8786)
!8811 = !DILocation(line: 1869, column: 12, scope: !8786)
!8812 = !DILocation(line: 1869, column: 3, scope: !8786)
!8813 = !DILocation(line: 1870, column: 23, scope: !8786)
!8814 = !DILocation(line: 1870, column: 34, scope: !8786)
!8815 = !DILocation(line: 1870, column: 3, scope: !8786)
!8816 = !DILocation(line: 1871, column: 12, scope: !8786)
!8817 = !DILocation(line: 1871, column: 3, scope: !8786)
!8818 = !DILocation(line: 1873, column: 10, scope: !8819)
!8819 = distinct !DILexicalBlock(scope: !8786, file: !3, line: 1873, column: 3)
!8820 = !DILocation(line: 1873, column: 8, scope: !8819)
!8821 = !DILocation(line: 1874, column: 8, scope: !8822)
!8822 = distinct !DILexicalBlock(scope: !8819, file: !3, line: 1873, column: 3)
!8823 = !DILocation(line: 1873, column: 3, scope: !8819)
!8824 = !DILocation(line: 1876, column: 35, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 1875, column: 5)
!8826 = !DILocation(line: 1876, column: 18, scope: !8825)
!8827 = !DILocation(line: 1876, column: 16, scope: !8825)
!8828 = !DILocation(line: 1878, column: 16, scope: !8825)
!8829 = !DILocation(line: 1878, column: 7, scope: !8825)
!8830 = !DILocation(line: 1879, column: 27, scope: !8825)
!8831 = !DILocation(line: 1879, column: 38, scope: !8825)
!8832 = !DILocation(line: 1879, column: 7, scope: !8825)
!8833 = !DILocation(line: 1880, column: 16, scope: !8825)
!8834 = !DILocation(line: 1880, column: 7, scope: !8825)
!8835 = !DILocation(line: 1881, column: 27, scope: !8825)
!8836 = !DILocation(line: 1881, column: 38, scope: !8825)
!8837 = !DILocation(line: 1881, column: 7, scope: !8825)
!8838 = !DILocation(line: 1882, column: 16, scope: !8825)
!8839 = !DILocation(line: 1882, column: 7, scope: !8825)
!8840 = !DILocation(line: 1883, column: 5, scope: !8825)
!8841 = !DILocation(line: 1874, column: 54, scope: !8822)
!8842 = !DILocation(line: 1873, column: 3, scope: !8822)
!8843 = distinct !{!8843, !8823, !8844}
!8844 = !DILocation(line: 1883, column: 5, scope: !8819)
!8845 = !DILocation(line: 1884, column: 3, scope: !8786)
!8846 = distinct !DISubprogram(name: "do_reorg_for_func", scope: !3, file: !3, line: 3237, type: !3369, scopeLine: 3238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8847 = !DILocalVariable(name: "node", arg: 1, scope: !8846, file: !3, line: 3237, type: !3281)
!8848 = !DILocation(line: 3237, column: 40, scope: !8846)
!8849 = !DILocation(line: 3239, column: 3, scope: !8846)
!8850 = !DILocation(line: 3240, column: 36, scope: !8846)
!8851 = !DILocation(line: 3240, column: 3, scope: !8846)
!8852 = !DILocation(line: 3241, column: 3, scope: !8846)
!8853 = !DILocation(line: 3242, column: 3, scope: !8846)
!8854 = !DILocation(line: 3243, column: 3, scope: !8846)
!8855 = !DILocation(line: 3246, column: 23, scope: !8846)
!8856 = !DILocation(line: 3246, column: 3, scope: !8846)
!8857 = !DILocation(line: 3247, column: 1, scope: !8846)
!8858 = distinct !DISubprogram(name: "create_new_local_vars", scope: !3, file: !3, line: 2704, type: !3246, scopeLine: 2705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8859 = !DILocalVariable(name: "var", scope: !8858, file: !3, line: 2706, type: !1724)
!8860 = !DILocation(line: 2706, column: 8, scope: !8858)
!8861 = !DILocalVariable(name: "rvi", scope: !8858, file: !3, line: 2707, type: !8862)
!8862 = !DIDerivedType(tag: DW_TAG_typedef, name: "referenced_var_iterator", file: !2393, line: 336, baseType: !8863)
!8863 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2393, line: 333, size: 192, elements: !8864)
!8864 = !{!8865}
!8865 = !DIDerivedType(tag: DW_TAG_member, name: "hti", scope: !8863, file: !2393, line: 335, baseType: !8866, size: 192)
!8866 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_iterator", file: !2393, line: 98, baseType: !8867)
!8867 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2393, line: 93, size: 192, elements: !8868)
!8868 = !{!8869, !8870, !8871}
!8869 = !DIDerivedType(tag: DW_TAG_member, name: "htab", scope: !8867, file: !2393, line: 95, baseType: !2485, size: 64)
!8870 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !8867, file: !2393, line: 96, baseType: !2508, size: 64, offset: 64)
!8871 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !8867, file: !2393, line: 97, baseType: !2508, size: 64, offset: 128)
!8872 = !DILocation(line: 2707, column: 27, scope: !8858)
!8873 = !DILocation(line: 2709, column: 33, scope: !8858)
!8874 = !DILocation(line: 2709, column: 20, scope: !8858)
!8875 = !DILocation(line: 2709, column: 18, scope: !8858)
!8876 = !DILocation(line: 2712, column: 3, scope: !8877)
!8877 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 2712, column: 3)
!8878 = !DILocation(line: 2712, column: 3, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8877, file: !3, line: 2712, column: 3)
!8880 = !DILocation(line: 2714, column: 27, scope: !8881)
!8881 = distinct !DILexicalBlock(scope: !8882, file: !3, line: 2714, column: 11)
!8882 = distinct !DILexicalBlock(scope: !8879, file: !3, line: 2713, column: 5)
!8883 = !DILocation(line: 2714, column: 12, scope: !8881)
!8884 = !DILocation(line: 2714, column: 11, scope: !8882)
!8885 = !DILocation(line: 2715, column: 18, scope: !8881)
!8886 = !DILocation(line: 2715, column: 23, scope: !8881)
!8887 = !DILocation(line: 2715, column: 2, scope: !8881)
!8888 = !DILocation(line: 2716, column: 5, scope: !8882)
!8889 = distinct !{!8889, !8876, !8890}
!8890 = !DILocation(line: 2716, column: 5, scope: !8877)
!8891 = !DILocation(line: 2718, column: 7, scope: !8892)
!8892 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 2718, column: 7)
!8893 = !DILocation(line: 2718, column: 7, scope: !8858)
!8894 = !DILocation(line: 2719, column: 20, scope: !8892)
!8895 = !DILocation(line: 2719, column: 5, scope: !8892)
!8896 = !DILocation(line: 2720, column: 18, scope: !8858)
!8897 = !DILocation(line: 2720, column: 3, scope: !8858)
!8898 = !DILocation(line: 2721, column: 1, scope: !8858)
!8899 = distinct !DISubprogram(name: "create_new_alloc_sites_for_func", scope: !3, file: !3, line: 2692, type: !3369, scopeLine: 2693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8900 = !DILocalVariable(name: "node", arg: 1, scope: !8899, file: !3, line: 2692, type: !3281)
!8901 = !DILocation(line: 2692, column: 54, scope: !8899)
!8902 = !DILocalVariable(name: "fallocs", scope: !8899, file: !3, line: 2694, type: !3087)
!8903 = !DILocation(line: 2694, column: 13, scope: !8899)
!8904 = !DILocation(line: 2694, column: 36, scope: !8899)
!8905 = !DILocation(line: 2694, column: 42, scope: !8899)
!8906 = !DILocation(line: 2694, column: 23, scope: !8899)
!8907 = !DILocation(line: 2696, column: 7, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !8899, file: !3, line: 2696, column: 7)
!8909 = !DILocation(line: 2696, column: 7, scope: !8899)
!8910 = !DILocation(line: 2697, column: 29, scope: !8908)
!8911 = !DILocation(line: 2697, column: 38, scope: !8908)
!8912 = !DILocation(line: 2697, column: 44, scope: !8908)
!8913 = !DILocation(line: 2697, column: 5, scope: !8908)
!8914 = !DILocation(line: 2698, column: 1, scope: !8899)
!8915 = distinct !DISubprogram(name: "create_new_accesses_for_func", scope: !3, file: !3, line: 2681, type: !3246, scopeLine: 2682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8916 = !DILocalVariable(name: "bb", scope: !8915, file: !3, line: 2683, type: !2453)
!8917 = !DILocation(line: 2683, column: 15, scope: !8915)
!8918 = !DILocation(line: 2685, column: 3, scope: !8919)
!8919 = distinct !DILexicalBlock(scope: !8915, file: !3, line: 2685, column: 3)
!8920 = !DILocation(line: 2685, column: 3, scope: !8921)
!8921 = distinct !DILexicalBlock(scope: !8919, file: !3, line: 2685, column: 3)
!8922 = !DILocation(line: 2686, column: 32, scope: !8921)
!8923 = !DILocation(line: 2686, column: 5, scope: !8921)
!8924 = distinct !{!8924, !8918, !8925}
!8925 = !DILocation(line: 2686, column: 34, scope: !8919)
!8926 = !DILocation(line: 2687, column: 1, scope: !8915)
!8927 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !5586, file: !5586, line: 40, type: !8928, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8928 = !DISubroutineType(types: !8929)
!8929 = !{!2485, !8930}
!8930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8931, size: 64)
!8931 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2442)
!8932 = !DILocalVariable(name: "fun", arg: 1, scope: !8927, file: !5586, line: 40, type: !8930)
!8933 = !DILocation(line: 40, column: 48, scope: !8927)
!8934 = !DILocation(line: 42, column: 8, scope: !8935)
!8935 = distinct !DILexicalBlock(scope: !8927, file: !5586, line: 42, column: 7)
!8936 = !DILocation(line: 42, column: 13, scope: !8935)
!8937 = !DILocation(line: 42, column: 7, scope: !8927)
!8938 = !DILocation(line: 43, column: 5, scope: !8935)
!8939 = !DILocation(line: 44, column: 10, scope: !8927)
!8940 = !DILocation(line: 44, column: 15, scope: !8927)
!8941 = !DILocation(line: 44, column: 26, scope: !8927)
!8942 = !DILocation(line: 44, column: 3, scope: !8927)
!8943 = !DILocation(line: 45, column: 1, scope: !8927)
!8944 = distinct !DISubprogram(name: "first_referenced_var", scope: !5586, file: !5586, line: 105, type: !8945, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8945 = !DISubroutineType(types: !8946)
!8946 = !{!1724, !8947}
!8947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8862, size: 64)
!8948 = !DILocalVariable(name: "iter", arg: 1, scope: !8944, file: !5586, line: 105, type: !8947)
!8949 = !DILocation(line: 105, column: 48, scope: !8944)
!8950 = !DILocation(line: 107, column: 38, scope: !8944)
!8951 = !DILocation(line: 107, column: 44, scope: !8944)
!8952 = !DILocation(line: 108, column: 33, scope: !8944)
!8953 = !DILocation(line: 108, column: 9, scope: !8944)
!8954 = !DILocation(line: 107, column: 17, scope: !8944)
!8955 = !DILocation(line: 107, column: 10, scope: !8944)
!8956 = !DILocation(line: 107, column: 3, scope: !8944)
!8957 = distinct !DISubprogram(name: "end_referenced_vars_p", scope: !5586, file: !5586, line: 115, type: !8958, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8958 = !DISubroutineType(types: !8959)
!8959 = !{!1844, !8960}
!8960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8961, size: 64)
!8961 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8862)
!8962 = !DILocalVariable(name: "iter", arg: 1, scope: !8957, file: !5586, line: 115, type: !8960)
!8963 = !DILocation(line: 115, column: 55, scope: !8957)
!8964 = !DILocation(line: 117, column: 23, scope: !8957)
!8965 = !DILocation(line: 117, column: 29, scope: !8957)
!8966 = !DILocation(line: 117, column: 10, scope: !8957)
!8967 = !DILocation(line: 117, column: 3, scope: !8957)
!8968 = distinct !DISubprogram(name: "next_referenced_var", scope: !5586, file: !5586, line: 124, type: !8945, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8969 = !DILocalVariable(name: "iter", arg: 1, scope: !8968, file: !5586, line: 124, type: !8947)
!8970 = !DILocation(line: 124, column: 47, scope: !8968)
!8971 = !DILocation(line: 126, column: 37, scope: !8968)
!8972 = !DILocation(line: 126, column: 43, scope: !8968)
!8973 = !DILocation(line: 126, column: 17, scope: !8968)
!8974 = !DILocation(line: 126, column: 10, scope: !8968)
!8975 = !DILocation(line: 126, column: 3, scope: !8968)
!8976 = distinct !DISubprogram(name: "finalize_new_vars_creation", scope: !3, file: !3, line: 547, type: !5074, scopeLine: 548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!8977 = !DILocalVariable(name: "slot", arg: 1, scope: !8976, file: !3, line: 547, type: !2508)
!8978 = !DILocation(line: 547, column: 36, scope: !8976)
!8979 = !DILocalVariable(name: "data", arg: 2, scope: !8976, file: !3, line: 547, type: !2008)
!8980 = !DILocation(line: 547, column: 48, scope: !8976)
!8981 = !DILocalVariable(name: "n_var", scope: !8976, file: !3, line: 549, type: !3161)
!8982 = !DILocation(line: 549, column: 11, scope: !8976)
!8983 = !DILocation(line: 549, column: 32, scope: !8976)
!8984 = !DILocation(line: 549, column: 19, scope: !8976)
!8985 = !DILocalVariable(name: "i", scope: !8976, file: !3, line: 550, type: !7)
!8986 = !DILocation(line: 550, column: 12, scope: !8976)
!8987 = !DILocalVariable(name: "var", scope: !8976, file: !3, line: 551, type: !1724)
!8988 = !DILocation(line: 551, column: 8, scope: !8976)
!8989 = !DILocation(line: 553, column: 10, scope: !8990)
!8990 = distinct !DILexicalBlock(scope: !8976, file: !3, line: 553, column: 3)
!8991 = !DILocation(line: 553, column: 8, scope: !8990)
!8992 = !DILocation(line: 553, column: 15, scope: !8993)
!8993 = distinct !DILexicalBlock(scope: !8990, file: !3, line: 553, column: 3)
!8994 = !DILocation(line: 553, column: 3, scope: !8990)
!8995 = !DILocation(line: 554, column: 28, scope: !8993)
!8996 = !DILocation(line: 554, column: 5, scope: !8993)
!8997 = !DILocation(line: 553, column: 61, scope: !8993)
!8998 = !DILocation(line: 553, column: 3, scope: !8993)
!8999 = distinct !{!8999, !8994, !9000}
!9000 = !DILocation(line: 554, column: 31, scope: !8990)
!9001 = !DILocation(line: 555, column: 3, scope: !8976)
!9002 = distinct !DISubprogram(name: "first_htab_element", scope: !5586, file: !5586, line: 58, type: !9003, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9003 = !DISubroutineType(types: !9004)
!9004 = !{!2008, !9005, !2485}
!9005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8866, size: 64)
!9006 = !DILocalVariable(name: "hti", arg: 1, scope: !9002, file: !5586, line: 58, type: !9005)
!9007 = !DILocation(line: 58, column: 36, scope: !9002)
!9008 = !DILocalVariable(name: "table", arg: 2, scope: !9002, file: !5586, line: 58, type: !2485)
!9009 = !DILocation(line: 58, column: 48, scope: !9002)
!9010 = !DILocation(line: 60, column: 15, scope: !9002)
!9011 = !DILocation(line: 60, column: 3, scope: !9002)
!9012 = !DILocation(line: 60, column: 8, scope: !9002)
!9013 = !DILocation(line: 60, column: 13, scope: !9002)
!9014 = !DILocation(line: 61, column: 15, scope: !9002)
!9015 = !DILocation(line: 61, column: 22, scope: !9002)
!9016 = !DILocation(line: 61, column: 3, scope: !9002)
!9017 = !DILocation(line: 61, column: 8, scope: !9002)
!9018 = !DILocation(line: 61, column: 13, scope: !9002)
!9019 = !DILocation(line: 62, column: 16, scope: !9002)
!9020 = !DILocation(line: 62, column: 21, scope: !9002)
!9021 = !DILocation(line: 62, column: 39, scope: !9002)
!9022 = !DILocation(line: 62, column: 28, scope: !9002)
!9023 = !DILocation(line: 62, column: 26, scope: !9002)
!9024 = !DILocation(line: 62, column: 3, scope: !9002)
!9025 = !DILocation(line: 62, column: 8, scope: !9002)
!9026 = !DILocation(line: 62, column: 14, scope: !9002)
!9027 = !DILocation(line: 63, column: 3, scope: !9002)
!9028 = !DILocalVariable(name: "x", scope: !9029, file: !5586, line: 65, type: !2008)
!9029 = distinct !DILexicalBlock(scope: !9002, file: !5586, line: 64, column: 5)
!9030 = !DILocation(line: 65, column: 11, scope: !9029)
!9031 = !DILocation(line: 65, column: 17, scope: !9029)
!9032 = !DILocation(line: 65, column: 22, scope: !9029)
!9033 = !DILocation(line: 65, column: 15, scope: !9029)
!9034 = !DILocation(line: 66, column: 11, scope: !9035)
!9035 = distinct !DILexicalBlock(scope: !9029, file: !5586, line: 66, column: 11)
!9036 = !DILocation(line: 66, column: 13, scope: !9035)
!9037 = !DILocation(line: 66, column: 33, scope: !9035)
!9038 = !DILocation(line: 66, column: 36, scope: !9035)
!9039 = !DILocation(line: 66, column: 38, scope: !9035)
!9040 = !DILocation(line: 66, column: 11, scope: !9029)
!9041 = !DILocation(line: 67, column: 2, scope: !9035)
!9042 = !DILocation(line: 68, column: 5, scope: !9029)
!9043 = !DILocation(line: 68, column: 17, scope: !9002)
!9044 = !DILocation(line: 68, column: 22, scope: !9002)
!9045 = !DILocation(line: 68, column: 14, scope: !9002)
!9046 = !DILocation(line: 68, column: 30, scope: !9002)
!9047 = !DILocation(line: 68, column: 35, scope: !9002)
!9048 = !DILocation(line: 68, column: 28, scope: !9002)
!9049 = distinct !{!9049, !9027, !9050}
!9050 = !DILocation(line: 68, column: 40, scope: !9002)
!9051 = !DILocation(line: 70, column: 7, scope: !9052)
!9052 = distinct !DILexicalBlock(scope: !9002, file: !5586, line: 70, column: 7)
!9053 = !DILocation(line: 70, column: 12, scope: !9052)
!9054 = !DILocation(line: 70, column: 19, scope: !9052)
!9055 = !DILocation(line: 70, column: 24, scope: !9052)
!9056 = !DILocation(line: 70, column: 17, scope: !9052)
!9057 = !DILocation(line: 70, column: 7, scope: !9002)
!9058 = !DILocation(line: 71, column: 14, scope: !9052)
!9059 = !DILocation(line: 71, column: 19, scope: !9052)
!9060 = !DILocation(line: 71, column: 12, scope: !9052)
!9061 = !DILocation(line: 71, column: 5, scope: !9052)
!9062 = !DILocation(line: 72, column: 3, scope: !9002)
!9063 = !DILocation(line: 73, column: 1, scope: !9002)
!9064 = distinct !DISubprogram(name: "end_htab_p", scope: !5586, file: !5586, line: 79, type: !9065, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9065 = !DISubroutineType(types: !9066)
!9066 = !{!1844, !9067}
!9067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9068, size: 64)
!9068 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8866)
!9069 = !DILocalVariable(name: "hti", arg: 1, scope: !9064, file: !5586, line: 79, type: !9067)
!9070 = !DILocation(line: 79, column: 34, scope: !9064)
!9071 = !DILocation(line: 81, column: 7, scope: !9072)
!9072 = distinct !DILexicalBlock(scope: !9064, file: !5586, line: 81, column: 7)
!9073 = !DILocation(line: 81, column: 12, scope: !9072)
!9074 = !DILocation(line: 81, column: 20, scope: !9072)
!9075 = !DILocation(line: 81, column: 25, scope: !9072)
!9076 = !DILocation(line: 81, column: 17, scope: !9072)
!9077 = !DILocation(line: 81, column: 7, scope: !9064)
!9078 = !DILocation(line: 82, column: 5, scope: !9072)
!9079 = !DILocation(line: 83, column: 3, scope: !9064)
!9080 = !DILocation(line: 84, column: 1, scope: !9064)
!9081 = distinct !DISubprogram(name: "next_htab_element", scope: !5586, file: !5586, line: 90, type: !9082, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9082 = !DISubroutineType(types: !9083)
!9083 = !{!2008, !9005}
!9084 = !DILocalVariable(name: "hti", arg: 1, scope: !9081, file: !5586, line: 90, type: !9005)
!9085 = !DILocation(line: 90, column: 35, scope: !9081)
!9086 = !DILocation(line: 92, column: 3, scope: !9081)
!9087 = !DILocation(line: 92, column: 13, scope: !9081)
!9088 = !DILocation(line: 92, column: 18, scope: !9081)
!9089 = !DILocation(line: 92, column: 10, scope: !9081)
!9090 = !DILocation(line: 92, column: 26, scope: !9081)
!9091 = !DILocation(line: 92, column: 31, scope: !9081)
!9092 = !DILocation(line: 92, column: 24, scope: !9081)
!9093 = !DILocalVariable(name: "x", scope: !9094, file: !5586, line: 94, type: !2008)
!9094 = distinct !DILexicalBlock(scope: !9081, file: !5586, line: 93, column: 5)
!9095 = !DILocation(line: 94, column: 11, scope: !9094)
!9096 = !DILocation(line: 94, column: 17, scope: !9094)
!9097 = !DILocation(line: 94, column: 22, scope: !9094)
!9098 = !DILocation(line: 94, column: 15, scope: !9094)
!9099 = !DILocation(line: 95, column: 11, scope: !9100)
!9100 = distinct !DILexicalBlock(scope: !9094, file: !5586, line: 95, column: 11)
!9101 = !DILocation(line: 95, column: 13, scope: !9100)
!9102 = !DILocation(line: 95, column: 33, scope: !9100)
!9103 = !DILocation(line: 95, column: 36, scope: !9100)
!9104 = !DILocation(line: 95, column: 38, scope: !9100)
!9105 = !DILocation(line: 95, column: 11, scope: !9094)
!9106 = !DILocation(line: 96, column: 9, scope: !9100)
!9107 = !DILocation(line: 96, column: 2, scope: !9100)
!9108 = distinct !{!9108, !9086, !9109}
!9109 = !DILocation(line: 97, column: 5, scope: !9081)
!9110 = !DILocation(line: 98, column: 3, scope: !9081)
!9111 = !DILocation(line: 99, column: 1, scope: !9081)
!9112 = distinct !DISubprogram(name: "finalize_var_creation", scope: !3, file: !3, line: 514, type: !4035, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9113 = !DILocalVariable(name: "new_decl", arg: 1, scope: !9112, file: !3, line: 514, type: !1724)
!9114 = !DILocation(line: 514, column: 29, scope: !9112)
!9115 = !DILocation(line: 516, column: 23, scope: !9112)
!9116 = !DILocation(line: 516, column: 3, scope: !9112)
!9117 = !DILocation(line: 517, column: 26, scope: !9112)
!9118 = !DILocation(line: 517, column: 3, scope: !9112)
!9119 = !DILocation(line: 518, column: 1, scope: !9112)
!9120 = distinct !DISubprogram(name: "create_new_alloc_sites", scope: !3, file: !3, line: 2162, type: !9121, scopeLine: 2163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9121 = !DISubroutineType(types: !9122)
!9122 = !{null, !3087, !1724}
!9123 = !DILocalVariable(name: "m_data", arg: 1, scope: !9120, file: !3, line: 2162, type: !3087)
!9124 = !DILocation(line: 2162, column: 35, scope: !9120)
!9125 = !DILocalVariable(name: "context", arg: 2, scope: !9120, file: !3, line: 2162, type: !1724)
!9126 = !DILocation(line: 2162, column: 48, scope: !9120)
!9127 = !DILocalVariable(name: "call", scope: !9120, file: !3, line: 2164, type: !5087)
!9128 = !DILocation(line: 2164, column: 17, scope: !9120)
!9129 = !DILocalVariable(name: "j", scope: !9120, file: !3, line: 2165, type: !7)
!9130 = !DILocation(line: 2165, column: 12, scope: !9120)
!9131 = !DILocation(line: 2167, column: 10, scope: !9132)
!9132 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 2167, column: 3)
!9133 = !DILocation(line: 2167, column: 8, scope: !9132)
!9134 = !DILocation(line: 2167, column: 15, scope: !9135)
!9135 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 2167, column: 3)
!9136 = !DILocation(line: 2167, column: 3, scope: !9132)
!9137 = !DILocalVariable(name: "stmt", scope: !9138, file: !3, line: 2169, type: !2055)
!9138 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 2168, column: 5)
!9139 = !DILocation(line: 2169, column: 14, scope: !9138)
!9140 = !DILocation(line: 2169, column: 21, scope: !9138)
!9141 = !DILocation(line: 2169, column: 27, scope: !9138)
!9142 = !DILocalVariable(name: "str", scope: !9138, file: !3, line: 2170, type: !3110)
!9143 = !DILocation(line: 2170, column: 13, scope: !9138)
!9144 = !DILocation(line: 2170, column: 19, scope: !9138)
!9145 = !DILocation(line: 2170, column: 25, scope: !9138)
!9146 = !DILocalVariable(name: "num", scope: !9138, file: !3, line: 2171, type: !1724)
!9147 = !DILocation(line: 2171, column: 12, scope: !9138)
!9148 = !DILocalVariable(name: "new_stmts", scope: !9138, file: !3, line: 2172, type: !2045)
!9149 = !DILocation(line: 2172, column: 18, scope: !9138)
!9150 = !DILocalVariable(name: "last_stmt", scope: !9138, file: !3, line: 2173, type: !2055)
!9151 = !DILocation(line: 2173, column: 14, scope: !9138)
!9152 = !DILocation(line: 2173, column: 48, scope: !9138)
!9153 = !DILocation(line: 2173, column: 26, scope: !9138)
!9154 = !DILocalVariable(name: "i", scope: !9138, file: !3, line: 2174, type: !7)
!9155 = !DILocation(line: 2174, column: 16, scope: !9138)
!9156 = !DILocalVariable(name: "type", scope: !9138, file: !3, line: 2175, type: !1724)
!9157 = !DILocation(line: 2175, column: 12, scope: !9138)
!9158 = !DILocation(line: 2177, column: 43, scope: !9138)
!9159 = !DILocation(line: 2177, column: 49, scope: !9138)
!9160 = !DILocation(line: 2177, column: 54, scope: !9138)
!9161 = !DILocation(line: 2177, column: 13, scope: !9138)
!9162 = !DILocation(line: 2177, column: 11, scope: !9138)
!9163 = !DILocation(line: 2178, column: 11, scope: !9164)
!9164 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 2178, column: 11)
!9165 = !DILocation(line: 2178, column: 11, scope: !9138)
!9166 = !DILocalVariable(name: "last_stmt_tmp", scope: !9167, file: !3, line: 2180, type: !2055)
!9167 = distinct !DILexicalBlock(scope: !9164, file: !3, line: 2179, column: 2)
!9168 = !DILocation(line: 2180, column: 11, scope: !9167)
!9169 = !DILocation(line: 2180, column: 49, scope: !9167)
!9170 = !DILocation(line: 2180, column: 27, scope: !9167)
!9171 = !DILocation(line: 2181, column: 27, scope: !9167)
!9172 = !DILocation(line: 2181, column: 38, scope: !9167)
!9173 = !DILocation(line: 2181, column: 4, scope: !9167)
!9174 = !DILocation(line: 2182, column: 16, scope: !9167)
!9175 = !DILocation(line: 2182, column: 14, scope: !9167)
!9176 = !DILocation(line: 2183, column: 2, scope: !9167)
!9177 = !DILocation(line: 2186, column: 14, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 2186, column: 7)
!9179 = !DILocation(line: 2186, column: 12, scope: !9178)
!9180 = !DILocation(line: 2186, column: 19, scope: !9181)
!9181 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 2186, column: 7)
!9182 = !DILocation(line: 2186, column: 7, scope: !9178)
!9183 = !DILocalVariable(name: "new_malloc_stmt", scope: !9184, file: !3, line: 2188, type: !2055)
!9184 = distinct !DILexicalBlock(scope: !9181, file: !3, line: 2187, column: 2)
!9185 = !DILocation(line: 2188, column: 11, scope: !9184)
!9186 = !DILocalVariable(name: "last_stmt_tmp", scope: !9184, file: !3, line: 2189, type: !2055)
!9187 = !DILocation(line: 2189, column: 11, scope: !9184)
!9188 = !DILocation(line: 2191, column: 14, scope: !9184)
!9189 = !DILocation(line: 2192, column: 41, scope: !9184)
!9190 = !DILocation(line: 2192, column: 47, scope: !9184)
!9191 = !DILocation(line: 2192, column: 65, scope: !9184)
!9192 = !DILocation(line: 2192, column: 22, scope: !9184)
!9193 = !DILocation(line: 2192, column: 20, scope: !9184)
!9194 = !DILocation(line: 2193, column: 42, scope: !9184)
!9195 = !DILocation(line: 2193, column: 20, scope: !9184)
!9196 = !DILocation(line: 2193, column: 18, scope: !9184)
!9197 = !DILocation(line: 2194, column: 27, scope: !9184)
!9198 = !DILocation(line: 2194, column: 38, scope: !9184)
!9199 = !DILocation(line: 2194, column: 4, scope: !9184)
!9200 = !DILocation(line: 2195, column: 36, scope: !9184)
!9201 = !DILocation(line: 2195, column: 53, scope: !9184)
!9202 = !DILocation(line: 2195, column: 4, scope: !9184)
!9203 = !DILocation(line: 2196, column: 16, scope: !9184)
!9204 = !DILocation(line: 2196, column: 14, scope: !9184)
!9205 = !DILocation(line: 2197, column: 2, scope: !9184)
!9206 = !DILocation(line: 2186, column: 65, scope: !9181)
!9207 = !DILocation(line: 2186, column: 7, scope: !9181)
!9208 = distinct !{!9208, !9182, !9209}
!9209 = !DILocation(line: 2197, column: 2, scope: !9178)
!9210 = !DILocation(line: 2198, column: 5, scope: !9138)
!9211 = !DILocation(line: 2167, column: 69, scope: !9135)
!9212 = !DILocation(line: 2167, column: 3, scope: !9135)
!9213 = distinct !{!9213, !9136, !9214}
!9214 = !DILocation(line: 2198, column: 5, scope: !9132)
!9215 = !DILocation(line: 2199, column: 1, scope: !9120)
!9216 = distinct !DISubprogram(name: "gen_num_of_structs_in_malloc", scope: !3, file: !3, line: 1792, type: !9217, scopeLine: 1794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9217 = !DISubroutineType(types: !9218)
!9218 = !{!1724, !2055, !1724, !9219}
!9219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2045, size: 64)
!9220 = !DILocalVariable(name: "stmt", arg: 1, scope: !9216, file: !3, line: 1792, type: !2055)
!9221 = !DILocation(line: 1792, column: 38, scope: !9216)
!9222 = !DILocalVariable(name: "str_decl", arg: 2, scope: !9216, file: !3, line: 1792, type: !1724)
!9223 = !DILocation(line: 1792, column: 49, scope: !9216)
!9224 = !DILocalVariable(name: "new_stmts_p", arg: 3, scope: !9216, file: !3, line: 1793, type: !9219)
!9225 = !DILocation(line: 1793, column: 22, scope: !9216)
!9226 = !DILocalVariable(name: "arg", scope: !9216, file: !3, line: 1795, type: !1724)
!9227 = !DILocation(line: 1795, column: 8, scope: !9216)
!9228 = !DILocalVariable(name: "struct_size", scope: !9216, file: !3, line: 1796, type: !1724)
!9229 = !DILocation(line: 1796, column: 8, scope: !9216)
!9230 = !DILocalVariable(name: "struct_size_int", scope: !9216, file: !3, line: 1797, type: !1780)
!9231 = !DILocation(line: 1797, column: 17, scope: !9216)
!9232 = !DILocation(line: 1799, column: 8, scope: !9233)
!9233 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 1799, column: 7)
!9234 = !DILocation(line: 1799, column: 7, scope: !9216)
!9235 = !DILocation(line: 1800, column: 5, scope: !9233)
!9236 = !DILocation(line: 1803, column: 24, scope: !9237)
!9237 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 1803, column: 7)
!9238 = !DILocation(line: 1803, column: 8, scope: !9237)
!9239 = !DILocation(line: 1803, column: 7, scope: !9216)
!9240 = !DILocation(line: 1804, column: 5, scope: !9237)
!9241 = !DILocation(line: 1806, column: 26, scope: !9216)
!9242 = !DILocation(line: 1806, column: 9, scope: !9216)
!9243 = !DILocation(line: 1806, column: 7, scope: !9216)
!9244 = !DILocation(line: 1808, column: 7, scope: !9245)
!9245 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 1808, column: 7)
!9246 = !DILocation(line: 1808, column: 23, scope: !9245)
!9247 = !DILocation(line: 1809, column: 7, scope: !9245)
!9248 = !DILocation(line: 1809, column: 11, scope: !9245)
!9249 = !DILocation(line: 1808, column: 7, scope: !9216)
!9250 = !DILocation(line: 1810, column: 5, scope: !9245)
!9251 = !DILocation(line: 1812, column: 17, scope: !9216)
!9252 = !DILocation(line: 1812, column: 15, scope: !9216)
!9253 = !DILocation(line: 1813, column: 21, scope: !9216)
!9254 = !DILocation(line: 1813, column: 19, scope: !9216)
!9255 = !DILocation(line: 1815, column: 3, scope: !9216)
!9256 = !DILocation(line: 1817, column: 7, scope: !9257)
!9257 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 1817, column: 7)
!9258 = !DILocation(line: 1817, column: 23, scope: !9257)
!9259 = !DILocation(line: 1817, column: 7, scope: !9216)
!9260 = !DILocalVariable(name: "num", scope: !9261, file: !3, line: 1819, type: !1724)
!9261 = distinct !DILexicalBlock(scope: !9257, file: !3, line: 1818, column: 5)
!9262 = !DILocation(line: 1819, column: 12, scope: !9261)
!9263 = !DILocalVariable(name: "div_stmt", scope: !9261, file: !3, line: 1820, type: !2055)
!9264 = !DILocation(line: 1820, column: 14, scope: !9261)
!9265 = !DILocation(line: 1822, column: 30, scope: !9266)
!9266 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 1822, column: 11)
!9267 = !DILocation(line: 1822, column: 41, scope: !9266)
!9268 = !DILocation(line: 1822, column: 11, scope: !9266)
!9269 = !DILocation(line: 1822, column: 11, scope: !9261)
!9270 = !DILocation(line: 1823, column: 11, scope: !9266)
!9271 = !DILocation(line: 1823, column: 4, scope: !9266)
!9272 = !DILocation(line: 1825, column: 29, scope: !9261)
!9273 = !DILocation(line: 1825, column: 13, scope: !9261)
!9274 = !DILocation(line: 1825, column: 11, scope: !9261)
!9275 = !DILocation(line: 1827, column: 11, scope: !9276)
!9276 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 1827, column: 11)
!9277 = !DILocation(line: 1827, column: 11, scope: !9261)
!9278 = !DILocation(line: 1828, column: 22, scope: !9276)
!9279 = !DILocation(line: 1828, column: 2, scope: !9276)
!9280 = !DILocation(line: 1830, column: 23, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9261, file: !3, line: 1830, column: 11)
!9282 = !DILocation(line: 1830, column: 11, scope: !9281)
!9283 = !DILocation(line: 1830, column: 40, scope: !9281)
!9284 = !DILocation(line: 1830, column: 11, scope: !9261)
!9285 = !DILocation(line: 1831, column: 13, scope: !9281)
!9286 = !DILocation(line: 1831, column: 11, scope: !9281)
!9287 = !DILocation(line: 1831, column: 2, scope: !9281)
!9288 = !DILocalVariable(name: "C", scope: !9289, file: !3, line: 1835, type: !1724)
!9289 = distinct !DILexicalBlock(scope: !9281, file: !3, line: 1834, column: 2)
!9290 = !DILocation(line: 1835, column: 9, scope: !9289)
!9291 = !DILocation(line: 1835, column: 29, scope: !9289)
!9292 = !DILocation(line: 1836, column: 20, scope: !9289)
!9293 = !DILocation(line: 1836, column: 8, scope: !9289)
!9294 = !DILocation(line: 1835, column: 14, scope: !9289)
!9295 = !DILocation(line: 1838, column: 15, scope: !9289)
!9296 = !DILocation(line: 1838, column: 13, scope: !9289)
!9297 = !DILocation(line: 1840, column: 28, scope: !9261)
!9298 = !DILocation(line: 1840, column: 41, scope: !9261)
!9299 = !DILocation(line: 1840, column: 7, scope: !9261)
!9300 = !DILocation(line: 1841, column: 22, scope: !9261)
!9301 = !DILocation(line: 1841, column: 7, scope: !9261)
!9302 = !DILocation(line: 1842, column: 14, scope: !9261)
!9303 = !DILocation(line: 1842, column: 7, scope: !9261)
!9304 = !DILocation(line: 1845, column: 7, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9216, file: !3, line: 1845, column: 7)
!9306 = !DILocation(line: 1846, column: 7, scope: !9305)
!9307 = !DILocation(line: 1846, column: 25, scope: !9305)
!9308 = !DILocation(line: 1846, column: 50, scope: !9305)
!9309 = !DILocation(line: 1846, column: 55, scope: !9305)
!9310 = !DILocation(line: 1846, column: 10, scope: !9305)
!9311 = !DILocation(line: 1845, column: 7, scope: !9216)
!9312 = !DILocation(line: 1847, column: 45, scope: !9305)
!9313 = !DILocation(line: 1847, column: 50, scope: !9305)
!9314 = !DILocation(line: 1847, column: 12, scope: !9305)
!9315 = !DILocation(line: 1847, column: 5, scope: !9305)
!9316 = !DILocation(line: 1849, column: 3, scope: !9216)
!9317 = !DILocation(line: 1850, column: 1, scope: !9216)
!9318 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !1304, file: !1304, line: 187, type: !9319, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9319 = !DISubroutineType(types: !9320)
!9320 = !{!2055, !6196}
!9321 = !DILocalVariable(name: "s", arg: 1, scope: !9318, file: !1304, line: 187, type: !6196)
!9322 = !DILocation(line: 187, column: 40, scope: !9318)
!9323 = !DILocalVariable(name: "n", scope: !9318, file: !1304, line: 189, type: !2050)
!9324 = !DILocation(line: 189, column: 19, scope: !9318)
!9325 = !DILocation(line: 189, column: 40, scope: !9318)
!9326 = !DILocation(line: 189, column: 23, scope: !9318)
!9327 = !DILocation(line: 190, column: 11, scope: !9318)
!9328 = !DILocation(line: 190, column: 10, scope: !9318)
!9329 = !DILocation(line: 190, column: 16, scope: !9318)
!9330 = !DILocation(line: 190, column: 19, scope: !9318)
!9331 = !DILocation(line: 190, column: 3, scope: !9318)
!9332 = distinct !DISubprogram(name: "insert_seq_after_stmt", scope: !3, file: !3, line: 705, type: !9333, scopeLine: 706, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9333 = !DISubroutineType(types: !9334)
!9334 = !{null, !2055, !2045}
!9335 = !DILocalVariable(name: "stmt", arg: 1, scope: !9332, file: !3, line: 705, type: !2055)
!9336 = !DILocation(line: 705, column: 31, scope: !9332)
!9337 = !DILocalVariable(name: "new_stmts", arg: 2, scope: !9332, file: !3, line: 705, type: !2045)
!9338 = !DILocation(line: 705, column: 48, scope: !9332)
!9339 = !DILocalVariable(name: "bsi", scope: !9332, file: !3, line: 707, type: !3129)
!9340 = !DILocation(line: 707, column: 24, scope: !9332)
!9341 = !DILocation(line: 709, column: 8, scope: !9342)
!9342 = distinct !DILexicalBlock(scope: !9332, file: !3, line: 709, column: 7)
!9343 = !DILocation(line: 709, column: 13, scope: !9342)
!9344 = !DILocation(line: 709, column: 17, scope: !9342)
!9345 = !DILocation(line: 709, column: 7, scope: !9332)
!9346 = !DILocation(line: 710, column: 5, scope: !9342)
!9347 = !DILocation(line: 712, column: 23, scope: !9332)
!9348 = !DILocation(line: 712, column: 9, scope: !9332)
!9349 = !DILocation(line: 713, column: 31, scope: !9332)
!9350 = !DILocation(line: 713, column: 3, scope: !9332)
!9351 = !DILocation(line: 714, column: 1, scope: !9332)
!9352 = distinct !DISubprogram(name: "create_new_malloc", scope: !3, file: !3, line: 1750, type: !9353, scopeLine: 1752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9353 = !DISubroutineType(types: !9354)
!9354 = !{!2055, !2055, !1724, !9219, !1724}
!9355 = !DILocalVariable(name: "malloc_stmt", arg: 1, scope: !9352, file: !3, line: 1750, type: !2055)
!9356 = !DILocation(line: 1750, column: 27, scope: !9352)
!9357 = !DILocalVariable(name: "new_type", arg: 2, scope: !9352, file: !3, line: 1750, type: !1724)
!9358 = !DILocation(line: 1750, column: 45, scope: !9352)
!9359 = !DILocalVariable(name: "new_stmts", arg: 3, scope: !9352, file: !3, line: 1750, type: !9219)
!9360 = !DILocation(line: 1750, column: 67, scope: !9352)
!9361 = !DILocalVariable(name: "num", arg: 4, scope: !9352, file: !3, line: 1751, type: !1724)
!9362 = !DILocation(line: 1751, column: 11, scope: !9352)
!9363 = !DILocalVariable(name: "new_malloc_size", scope: !9352, file: !3, line: 1753, type: !1724)
!9364 = !DILocation(line: 1753, column: 8, scope: !9352)
!9365 = !DILocalVariable(name: "malloc_fn_decl", scope: !9352, file: !3, line: 1754, type: !1724)
!9366 = !DILocation(line: 1754, column: 8, scope: !9352)
!9367 = !DILocalVariable(name: "new_stmt", scope: !9352, file: !3, line: 1755, type: !2055)
!9368 = !DILocation(line: 1755, column: 10, scope: !9352)
!9369 = !DILocalVariable(name: "malloc_res", scope: !9352, file: !3, line: 1756, type: !1724)
!9370 = !DILocation(line: 1756, column: 8, scope: !9352)
!9371 = !DILocalVariable(name: "call_stmt", scope: !9352, file: !3, line: 1757, type: !2055)
!9372 = !DILocation(line: 1757, column: 10, scope: !9352)
!9373 = !DILocalVariable(name: "final_stmt", scope: !9352, file: !3, line: 1757, type: !2055)
!9374 = !DILocation(line: 1757, column: 21, scope: !9352)
!9375 = !DILocalVariable(name: "cast_res", scope: !9352, file: !3, line: 1758, type: !1724)
!9376 = !DILocation(line: 1758, column: 8, scope: !9352)
!9377 = !DILocation(line: 1760, column: 3, scope: !9352)
!9378 = !DILocation(line: 1761, column: 16, scope: !9352)
!9379 = !DILocation(line: 1761, column: 4, scope: !9352)
!9380 = !DILocation(line: 1761, column: 14, scope: !9352)
!9381 = !DILocation(line: 1765, column: 24, scope: !9352)
!9382 = !DILocation(line: 1765, column: 29, scope: !9352)
!9383 = !DILocation(line: 1765, column: 14, scope: !9352)
!9384 = !DILocation(line: 1765, column: 12, scope: !9352)
!9385 = !DILocation(line: 1766, column: 24, scope: !9352)
!9386 = !DILocation(line: 1766, column: 35, scope: !9352)
!9387 = !DILocation(line: 1766, column: 3, scope: !9352)
!9388 = !DILocation(line: 1769, column: 32, scope: !9352)
!9389 = !DILocation(line: 1769, column: 16, scope: !9352)
!9390 = !DILocation(line: 1769, column: 14, scope: !9352)
!9391 = !DILocation(line: 1770, column: 23, scope: !9352)
!9392 = !DILocation(line: 1770, column: 3, scope: !9352)
!9393 = !DILocation(line: 1772, column: 40, scope: !9352)
!9394 = !DILocation(line: 1772, column: 20, scope: !9352)
!9395 = !DILocation(line: 1772, column: 18, scope: !9352)
!9396 = !DILocation(line: 1773, column: 34, scope: !9352)
!9397 = !DILocation(line: 1773, column: 53, scope: !9352)
!9398 = !DILocation(line: 1773, column: 15, scope: !9352)
!9399 = !DILocation(line: 1773, column: 13, scope: !9352)
!9400 = !DILocation(line: 1774, column: 24, scope: !9352)
!9401 = !DILocation(line: 1774, column: 35, scope: !9352)
!9402 = !DILocation(line: 1774, column: 3, scope: !9352)
!9403 = !DILocation(line: 1775, column: 29, scope: !9352)
!9404 = !DILocation(line: 1775, column: 40, scope: !9352)
!9405 = !DILocation(line: 1775, column: 3, scope: !9352)
!9406 = !DILocation(line: 1778, column: 38, scope: !9352)
!9407 = !DILocation(line: 1778, column: 16, scope: !9352)
!9408 = !DILocation(line: 1778, column: 14, scope: !9352)
!9409 = !DILocation(line: 1779, column: 3, scope: !9352)
!9410 = !DILocation(line: 1780, column: 29, scope: !9352)
!9411 = !DILocation(line: 1780, column: 41, scope: !9352)
!9412 = !DILocation(line: 1780, column: 51, scope: !9352)
!9413 = !DILocation(line: 1780, column: 14, scope: !9352)
!9414 = !DILocation(line: 1780, column: 12, scope: !9352)
!9415 = !DILocation(line: 1781, column: 24, scope: !9352)
!9416 = !DILocation(line: 1781, column: 35, scope: !9352)
!9417 = !DILocation(line: 1781, column: 3, scope: !9352)
!9418 = !DILocation(line: 1783, column: 10, scope: !9352)
!9419 = !DILocation(line: 1783, column: 3, scope: !9352)
!9420 = distinct !DISubprogram(name: "update_cgraph_with_malloc_call", scope: !3, file: !3, line: 1725, type: !9421, scopeLine: 1726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9421 = !DISubroutineType(types: !9422)
!9422 = !{null, !2055, !1724}
!9423 = !DILocalVariable(name: "malloc_stmt", arg: 1, scope: !9420, file: !3, line: 1725, type: !2055)
!9424 = !DILocation(line: 1725, column: 40, scope: !9420)
!9425 = !DILocalVariable(name: "context", arg: 2, scope: !9420, file: !3, line: 1725, type: !1724)
!9426 = !DILocation(line: 1725, column: 58, scope: !9420)
!9427 = !DILocalVariable(name: "src", scope: !9420, file: !3, line: 1727, type: !3281)
!9428 = !DILocation(line: 1727, column: 23, scope: !9420)
!9429 = !DILocalVariable(name: "dest", scope: !9420, file: !3, line: 1727, type: !3281)
!9430 = !DILocation(line: 1727, column: 29, scope: !9420)
!9431 = !DILocalVariable(name: "malloc_fn_decl", scope: !9420, file: !3, line: 1728, type: !1724)
!9432 = !DILocation(line: 1728, column: 8, scope: !9420)
!9433 = !DILocation(line: 1730, column: 8, scope: !9434)
!9434 = distinct !DILexicalBlock(scope: !9420, file: !3, line: 1730, column: 7)
!9435 = !DILocation(line: 1730, column: 7, scope: !9420)
!9436 = !DILocation(line: 1731, column: 5, scope: !9434)
!9437 = !DILocation(line: 1733, column: 40, scope: !9420)
!9438 = !DILocation(line: 1733, column: 20, scope: !9420)
!9439 = !DILocation(line: 1733, column: 18, scope: !9420)
!9440 = !DILocation(line: 1735, column: 22, scope: !9420)
!9441 = !DILocation(line: 1735, column: 9, scope: !9420)
!9442 = !DILocation(line: 1735, column: 7, scope: !9420)
!9443 = !DILocation(line: 1736, column: 23, scope: !9420)
!9444 = !DILocation(line: 1736, column: 10, scope: !9420)
!9445 = !DILocation(line: 1736, column: 8, scope: !9420)
!9446 = !DILocation(line: 1737, column: 23, scope: !9420)
!9447 = !DILocation(line: 1737, column: 28, scope: !9420)
!9448 = !DILocation(line: 1737, column: 34, scope: !9420)
!9449 = !DILocation(line: 1738, column: 20, scope: !9420)
!9450 = !DILocation(line: 1738, column: 9, scope: !9420)
!9451 = !DILocation(line: 1738, column: 34, scope: !9420)
!9452 = !DILocation(line: 1740, column: 12, scope: !9420)
!9453 = !DILocation(line: 1740, column: 32, scope: !9420)
!9454 = !DILocation(line: 1740, column: 21, scope: !9420)
!9455 = !DILocation(line: 1739, column: 9, scope: !9420)
!9456 = !DILocation(line: 1741, column: 20, scope: !9420)
!9457 = !DILocation(line: 1741, column: 9, scope: !9420)
!9458 = !DILocation(line: 1741, column: 34, scope: !9420)
!9459 = !DILocation(line: 1737, column: 3, scope: !9420)
!9460 = !DILocation(line: 1742, column: 1, scope: !9420)
!9461 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1304, file: !1304, line: 2025, type: !5479, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9462 = !DILocalVariable(name: "gs", arg: 1, scope: !9461, file: !1304, line: 2025, type: !3077)
!9463 = !DILocation(line: 2025, column: 31, scope: !9461)
!9464 = !DILocalVariable(name: "index", arg: 2, scope: !9461, file: !1304, line: 2025, type: !7)
!9465 = !DILocation(line: 2025, column: 44, scope: !9461)
!9466 = !DILocation(line: 2028, column: 21, scope: !9461)
!9467 = !DILocation(line: 2028, column: 25, scope: !9461)
!9468 = !DILocation(line: 2028, column: 31, scope: !9461)
!9469 = !DILocation(line: 2028, column: 10, scope: !9461)
!9470 = !DILocation(line: 2028, column: 3, scope: !9461)
!9471 = distinct !DISubprogram(name: "finalize_stmt", scope: !3, file: !3, line: 236, type: !9472, scopeLine: 237, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9472 = !DISubroutineType(types: !9473)
!9473 = !{null, !2055}
!9474 = !DILocalVariable(name: "stmt", arg: 1, scope: !9471, file: !3, line: 236, type: !2055)
!9475 = !DILocation(line: 236, column: 23, scope: !9471)
!9476 = !DILocation(line: 238, column: 16, scope: !9471)
!9477 = !DILocation(line: 238, column: 3, scope: !9471)
!9478 = !DILocation(line: 239, column: 30, scope: !9471)
!9479 = !DILocation(line: 239, column: 3, scope: !9471)
!9480 = !DILocation(line: 240, column: 1, scope: !9471)
!9481 = distinct !DISubprogram(name: "update_stmt", scope: !1304, file: !1304, line: 1456, type: !9472, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9482 = !DILocalVariable(name: "s", arg: 1, scope: !9481, file: !1304, line: 1456, type: !2055)
!9483 = !DILocation(line: 1456, column: 21, scope: !9481)
!9484 = !DILocation(line: 1458, column: 23, scope: !9485)
!9485 = distinct !DILexicalBlock(scope: !9481, file: !1304, line: 1458, column: 7)
!9486 = !DILocation(line: 1458, column: 7, scope: !9485)
!9487 = !DILocation(line: 1458, column: 7, scope: !9481)
!9488 = !DILocation(line: 1460, column: 28, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9485, file: !1304, line: 1459, column: 5)
!9490 = !DILocation(line: 1460, column: 7, scope: !9489)
!9491 = !DILocation(line: 1461, column: 29, scope: !9489)
!9492 = !DILocation(line: 1461, column: 7, scope: !9489)
!9493 = !DILocation(line: 1462, column: 5, scope: !9489)
!9494 = !DILocation(line: 1463, column: 1, scope: !9481)
!9495 = distinct !DISubprogram(name: "gimple_seq_last", scope: !1304, file: !1304, line: 178, type: !6194, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9496 = !DILocalVariable(name: "s", arg: 1, scope: !9495, file: !1304, line: 178, type: !6196)
!9497 = !DILocation(line: 178, column: 35, scope: !9495)
!9498 = !DILocation(line: 180, column: 10, scope: !9495)
!9499 = !DILocation(line: 180, column: 14, scope: !9495)
!9500 = !DILocation(line: 180, column: 17, scope: !9495)
!9501 = !DILocation(line: 180, column: 3, scope: !9495)
!9502 = distinct !DISubprogram(name: "gen_size", scope: !3, file: !3, line: 614, type: !9503, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9503 = !DISubroutineType(types: !9504)
!9504 = !{!2055, !1724, !1724, !2089}
!9505 = !DILocalVariable(name: "num", arg: 1, scope: !9502, file: !3, line: 614, type: !1724)
!9506 = !DILocation(line: 614, column: 16, scope: !9502)
!9507 = !DILocalVariable(name: "type", arg: 2, scope: !9502, file: !3, line: 614, type: !1724)
!9508 = !DILocation(line: 614, column: 26, scope: !9502)
!9509 = !DILocalVariable(name: "res", arg: 3, scope: !9502, file: !3, line: 614, type: !2089)
!9510 = !DILocation(line: 614, column: 38, scope: !9502)
!9511 = !DILocalVariable(name: "struct_size", scope: !9502, file: !3, line: 616, type: !1724)
!9512 = !DILocation(line: 616, column: 8, scope: !9502)
!9513 = !DILocation(line: 616, column: 22, scope: !9502)
!9514 = !DILocalVariable(name: "struct_size_int", scope: !9502, file: !3, line: 617, type: !1780)
!9515 = !DILocation(line: 617, column: 17, scope: !9502)
!9516 = !DILocation(line: 617, column: 35, scope: !9502)
!9517 = !DILocalVariable(name: "new_stmt", scope: !9502, file: !3, line: 618, type: !2055)
!9518 = !DILocation(line: 618, column: 10, scope: !9502)
!9519 = !DILocation(line: 620, column: 26, scope: !9502)
!9520 = !DILocation(line: 620, column: 10, scope: !9502)
!9521 = !DILocation(line: 620, column: 4, scope: !9502)
!9522 = !DILocation(line: 620, column: 8, scope: !9502)
!9523 = !DILocation(line: 622, column: 8, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9502, file: !3, line: 622, column: 7)
!9525 = !DILocation(line: 622, column: 7, scope: !9524)
!9526 = !DILocation(line: 622, column: 7, scope: !9502)
!9527 = !DILocation(line: 623, column: 26, scope: !9524)
!9528 = !DILocation(line: 623, column: 25, scope: !9524)
!9529 = !DILocation(line: 623, column: 5, scope: !9524)
!9530 = !DILocation(line: 625, column: 19, scope: !9531)
!9531 = distinct !DILexicalBlock(scope: !9502, file: !3, line: 625, column: 7)
!9532 = !DILocation(line: 625, column: 7, scope: !9531)
!9533 = !DILocation(line: 625, column: 36, scope: !9531)
!9534 = !DILocation(line: 625, column: 7, scope: !9502)
!9535 = !DILocalVariable(name: "size", scope: !9536, file: !3, line: 627, type: !1724)
!9536 = distinct !DILexicalBlock(scope: !9531, file: !3, line: 626, column: 5)
!9537 = !DILocation(line: 627, column: 12, scope: !9536)
!9538 = !DILocation(line: 627, column: 34, scope: !9536)
!9539 = !DILocation(line: 627, column: 51, scope: !9536)
!9540 = !DILocation(line: 627, column: 19, scope: !9536)
!9541 = !DILocation(line: 628, column: 18, scope: !9536)
!9542 = !DILocation(line: 628, column: 16, scope: !9536)
!9543 = !DILocation(line: 631, column: 5, scope: !9536)
!9544 = !DILocalVariable(name: "C", scope: !9545, file: !3, line: 634, type: !1724)
!9545 = distinct !DILexicalBlock(scope: !9531, file: !3, line: 633, column: 5)
!9546 = !DILocation(line: 634, column: 12, scope: !9545)
!9547 = !DILocation(line: 634, column: 31, scope: !9545)
!9548 = !DILocation(line: 634, column: 60, scope: !9545)
!9549 = !DILocation(line: 634, column: 48, scope: !9545)
!9550 = !DILocation(line: 634, column: 16, scope: !9545)
!9551 = !DILocation(line: 636, column: 18, scope: !9545)
!9552 = !DILocation(line: 636, column: 16, scope: !9545)
!9553 = !DILocation(line: 641, column: 18, scope: !9502)
!9554 = !DILocation(line: 641, column: 3, scope: !9502)
!9555 = !DILocation(line: 642, column: 10, scope: !9502)
!9556 = !DILocation(line: 642, column: 3, scope: !9502)
!9557 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !1304, file: !1304, line: 1898, type: !9421, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9558 = !DILocalVariable(name: "gs", arg: 1, scope: !9557, file: !1304, line: 1898, type: !2055)
!9559 = !DILocation(line: 1898, column: 29, scope: !9557)
!9560 = !DILocalVariable(name: "lhs", arg: 2, scope: !9557, file: !1304, line: 1898, type: !1724)
!9561 = !DILocation(line: 1898, column: 38, scope: !9557)
!9562 = !DILocation(line: 1901, column: 18, scope: !9557)
!9563 = !DILocation(line: 1901, column: 25, scope: !9557)
!9564 = !DILocation(line: 1901, column: 3, scope: !9557)
!9565 = !DILocation(line: 1902, column: 7, scope: !9566)
!9566 = distinct !DILexicalBlock(scope: !9557, file: !1304, line: 1902, column: 7)
!9567 = !DILocation(line: 1902, column: 11, scope: !9566)
!9568 = !DILocation(line: 1902, column: 14, scope: !9566)
!9569 = !DILocation(line: 1902, column: 30, scope: !9566)
!9570 = !DILocation(line: 1902, column: 7, scope: !9557)
!9571 = !DILocation(line: 1903, column: 31, scope: !9566)
!9572 = !DILocation(line: 1903, column: 5, scope: !9566)
!9573 = !DILocation(line: 1903, column: 29, scope: !9566)
!9574 = !DILocation(line: 1904, column: 1, scope: !9557)
!9575 = distinct !DISubprogram(name: "finalize_stmt_and_append", scope: !3, file: !3, line: 245, type: !9576, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9576 = !DISubroutineType(types: !9577)
!9577 = !{null, !9219, !2055}
!9578 = !DILocalVariable(name: "stmts", arg: 1, scope: !9575, file: !3, line: 245, type: !9219)
!9579 = !DILocation(line: 245, column: 39, scope: !9575)
!9580 = !DILocalVariable(name: "stmt", arg: 2, scope: !9575, file: !3, line: 245, type: !2055)
!9581 = !DILocation(line: 245, column: 53, scope: !9575)
!9582 = !DILocation(line: 247, column: 24, scope: !9575)
!9583 = !DILocation(line: 247, column: 31, scope: !9575)
!9584 = !DILocation(line: 247, column: 3, scope: !9575)
!9585 = !DILocation(line: 248, column: 18, scope: !9575)
!9586 = !DILocation(line: 248, column: 3, scope: !9575)
!9587 = !DILocation(line: 249, column: 1, scope: !9575)
!9588 = distinct !DISubprogram(name: "gen_cast_stmt", scope: !3, file: !3, line: 650, type: !9589, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9589 = !DISubroutineType(types: !9590)
!9590 = !{!2055, !1724, !1724, !2055, !2089}
!9591 = !DILocalVariable(name: "before_cast", arg: 1, scope: !9588, file: !3, line: 650, type: !1724)
!9592 = !DILocation(line: 650, column: 21, scope: !9588)
!9593 = !DILocalVariable(name: "new_type", arg: 2, scope: !9588, file: !3, line: 650, type: !1724)
!9594 = !DILocation(line: 650, column: 39, scope: !9588)
!9595 = !DILocalVariable(name: "orig_cast_stmt", arg: 3, scope: !9588, file: !3, line: 650, type: !2055)
!9596 = !DILocation(line: 650, column: 56, scope: !9588)
!9597 = !DILocalVariable(name: "res_p", arg: 4, scope: !9588, file: !3, line: 651, type: !2089)
!9598 = !DILocation(line: 651, column: 15, scope: !9588)
!9599 = !DILocalVariable(name: "lhs", scope: !9588, file: !3, line: 653, type: !1724)
!9600 = !DILocation(line: 653, column: 8, scope: !9588)
!9601 = !DILocalVariable(name: "new_lhs", scope: !9588, file: !3, line: 653, type: !1724)
!9602 = !DILocation(line: 653, column: 13, scope: !9588)
!9603 = !DILocalVariable(name: "new_stmt", scope: !9588, file: !3, line: 654, type: !2055)
!9604 = !DILocation(line: 654, column: 10, scope: !9588)
!9605 = !DILocation(line: 656, column: 28, scope: !9588)
!9606 = !DILocation(line: 656, column: 9, scope: !9588)
!9607 = !DILocation(line: 656, column: 7, scope: !9588)
!9608 = !DILocation(line: 657, column: 35, scope: !9588)
!9609 = !DILocation(line: 657, column: 40, scope: !9588)
!9610 = !DILocation(line: 657, column: 13, scope: !9588)
!9611 = !DILocation(line: 657, column: 11, scope: !9588)
!9612 = !DILocation(line: 658, column: 3, scope: !9588)
!9613 = !DILocation(line: 660, column: 14, scope: !9588)
!9614 = !DILocation(line: 660, column: 12, scope: !9588)
!9615 = !DILocation(line: 661, column: 18, scope: !9588)
!9616 = !DILocation(line: 661, column: 3, scope: !9588)
!9617 = !DILocation(line: 662, column: 12, scope: !9588)
!9618 = !DILocation(line: 662, column: 4, scope: !9588)
!9619 = !DILocation(line: 662, column: 10, scope: !9588)
!9620 = !DILocation(line: 663, column: 10, scope: !9588)
!9621 = !DILocation(line: 663, column: 3, scope: !9588)
!9622 = distinct !DISubprogram(name: "gimple_set_op", scope: !1304, file: !1304, line: 1663, type: !9623, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9623 = !DISubroutineType(types: !9624)
!9624 = !{null, !2055, !7, !1724}
!9625 = !DILocalVariable(name: "gs", arg: 1, scope: !9622, file: !1304, line: 1663, type: !2055)
!9626 = !DILocation(line: 1663, column: 23, scope: !9622)
!9627 = !DILocalVariable(name: "i", arg: 2, scope: !9622, file: !1304, line: 1663, type: !7)
!9628 = !DILocation(line: 1663, column: 36, scope: !9622)
!9629 = !DILocalVariable(name: "op", arg: 3, scope: !9622, file: !1304, line: 1663, type: !1724)
!9630 = !DILocation(line: 1663, column: 44, scope: !9622)
!9631 = !DILocation(line: 1665, column: 3, scope: !9622)
!9632 = !DILocation(line: 1671, column: 24, scope: !9622)
!9633 = !DILocation(line: 1671, column: 15, scope: !9622)
!9634 = !DILocation(line: 1671, column: 3, scope: !9622)
!9635 = !DILocation(line: 1671, column: 19, scope: !9622)
!9636 = !DILocation(line: 1671, column: 22, scope: !9622)
!9637 = !DILocation(line: 1672, column: 1, scope: !9622)
!9638 = distinct !DISubprogram(name: "find_new_var_of_type", scope: !3, file: !3, line: 594, type: !6376, scopeLine: 595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9639 = !DILocalVariable(name: "orig_var", arg: 1, scope: !9638, file: !3, line: 594, type: !1724)
!9640 = !DILocation(line: 594, column: 28, scope: !9638)
!9641 = !DILocalVariable(name: "new_type", arg: 2, scope: !9638, file: !3, line: 594, type: !1724)
!9642 = !DILocation(line: 594, column: 43, scope: !9638)
!9643 = !DILocalVariable(name: "var", scope: !9638, file: !3, line: 596, type: !3161)
!9644 = !DILocation(line: 596, column: 11, scope: !9638)
!9645 = !DILocation(line: 597, column: 3, scope: !9638)
!9646 = !DILocation(line: 599, column: 7, scope: !9647)
!9647 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 599, column: 7)
!9648 = !DILocation(line: 599, column: 28, scope: !9647)
!9649 = !DILocation(line: 599, column: 7, scope: !9638)
!9650 = !DILocation(line: 600, column: 16, scope: !9647)
!9651 = !DILocation(line: 600, column: 14, scope: !9647)
!9652 = !DILocation(line: 600, column: 5, scope: !9647)
!9653 = !DILocation(line: 602, column: 30, scope: !9638)
!9654 = !DILocation(line: 602, column: 40, scope: !9638)
!9655 = !DILocation(line: 602, column: 9, scope: !9638)
!9656 = !DILocation(line: 602, column: 7, scope: !9638)
!9657 = !DILocation(line: 603, column: 8, scope: !9658)
!9658 = distinct !DILexicalBlock(scope: !9638, file: !3, line: 603, column: 7)
!9659 = !DILocation(line: 603, column: 7, scope: !9638)
!9660 = !DILocation(line: 604, column: 32, scope: !9658)
!9661 = !DILocation(line: 604, column: 42, scope: !9658)
!9662 = !DILocation(line: 604, column: 11, scope: !9658)
!9663 = !DILocation(line: 604, column: 9, scope: !9658)
!9664 = !DILocation(line: 604, column: 5, scope: !9658)
!9665 = !DILocation(line: 605, column: 3, scope: !9638)
!9666 = !DILocation(line: 606, column: 36, scope: !9638)
!9667 = !DILocation(line: 606, column: 41, scope: !9638)
!9668 = !DILocation(line: 606, column: 10, scope: !9638)
!9669 = !DILocation(line: 606, column: 3, scope: !9638)
!9670 = distinct !DISubprogram(name: "find_var_in_new_vars_vec", scope: !3, file: !3, line: 562, type: !9671, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9671 = !DISubroutineType(types: !9672)
!9672 = !{!1724, !3161, !1724}
!9673 = !DILocalVariable(name: "var", arg: 1, scope: !9670, file: !3, line: 562, type: !3161)
!9674 = !DILocation(line: 562, column: 35, scope: !9670)
!9675 = !DILocalVariable(name: "new_type", arg: 2, scope: !9670, file: !3, line: 562, type: !1724)
!9676 = !DILocation(line: 562, column: 45, scope: !9670)
!9677 = !DILocalVariable(name: "n_var", scope: !9670, file: !3, line: 564, type: !1724)
!9678 = !DILocation(line: 564, column: 8, scope: !9670)
!9679 = !DILocalVariable(name: "i", scope: !9670, file: !3, line: 565, type: !7)
!9680 = !DILocation(line: 565, column: 12, scope: !9670)
!9681 = !DILocation(line: 567, column: 10, scope: !9682)
!9682 = distinct !DILexicalBlock(scope: !9670, file: !3, line: 567, column: 3)
!9683 = !DILocation(line: 567, column: 8, scope: !9682)
!9684 = !DILocation(line: 567, column: 15, scope: !9685)
!9685 = distinct !DILexicalBlock(scope: !9682, file: !3, line: 567, column: 3)
!9686 = !DILocation(line: 567, column: 3, scope: !9682)
!9687 = !DILocalVariable(name: "type", scope: !9688, file: !3, line: 569, type: !1724)
!9688 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 568, column: 5)
!9689 = !DILocation(line: 569, column: 12, scope: !9688)
!9690 = !DILocation(line: 569, column: 47, scope: !9688)
!9691 = !DILocation(line: 569, column: 30, scope: !9688)
!9692 = !DILocation(line: 569, column: 19, scope: !9688)
!9693 = !DILocation(line: 570, column: 7, scope: !9688)
!9694 = !DILocation(line: 572, column: 11, scope: !9695)
!9695 = distinct !DILexicalBlock(scope: !9688, file: !3, line: 572, column: 11)
!9696 = !DILocation(line: 572, column: 19, scope: !9695)
!9697 = !DILocation(line: 572, column: 16, scope: !9695)
!9698 = !DILocation(line: 572, column: 11, scope: !9688)
!9699 = !DILocation(line: 573, column: 9, scope: !9695)
!9700 = !DILocation(line: 573, column: 2, scope: !9695)
!9701 = !DILocation(line: 574, column: 5, scope: !9688)
!9702 = !DILocation(line: 567, column: 61, scope: !9685)
!9703 = !DILocation(line: 567, column: 3, scope: !9685)
!9704 = distinct !{!9704, !9686, !9705}
!9705 = !DILocation(line: 574, column: 5, scope: !9682)
!9706 = !DILocation(line: 576, column: 3, scope: !9670)
!9707 = !DILocation(line: 577, column: 1, scope: !9670)
!9708 = distinct !DISubprogram(name: "create_new_accesses_in_bb", scope: !3, file: !3, line: 2149, type: !5788, scopeLine: 2150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9709 = !DILocalVariable(name: "bb", arg: 1, scope: !9708, file: !3, line: 2149, type: !2453)
!9710 = !DILocation(line: 2149, column: 40, scope: !9708)
!9711 = !DILocalVariable(name: "str", scope: !9708, file: !3, line: 2151, type: !3110)
!9712 = !DILocation(line: 2151, column: 9, scope: !9708)
!9713 = !DILocalVariable(name: "i", scope: !9708, file: !3, line: 2152, type: !7)
!9714 = !DILocation(line: 2152, column: 12, scope: !9708)
!9715 = !DILocation(line: 2154, column: 10, scope: !9716)
!9716 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 2154, column: 3)
!9717 = !DILocation(line: 2154, column: 8, scope: !9716)
!9718 = !DILocation(line: 2154, column: 15, scope: !9719)
!9719 = distinct !DILexicalBlock(scope: !9716, file: !3, line: 2154, column: 3)
!9720 = !DILocation(line: 2154, column: 3, scope: !9716)
!9721 = !DILocation(line: 2155, column: 33, scope: !9719)
!9722 = !DILocation(line: 2155, column: 38, scope: !9719)
!9723 = !DILocation(line: 2155, column: 5, scope: !9719)
!9724 = !DILocation(line: 2154, column: 61, scope: !9719)
!9725 = !DILocation(line: 2154, column: 3, scope: !9719)
!9726 = distinct !{!9726, !9720, !9727}
!9727 = !DILocation(line: 2155, column: 40, scope: !9716)
!9728 = !DILocation(line: 2156, column: 1, scope: !9708)
!9729 = distinct !DISubprogram(name: "create_new_accs_for_struct", scope: !3, file: !3, line: 1443, type: !9730, scopeLine: 1444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9730 = !DISubroutineType(types: !9731)
!9731 = !{null, !3110, !2453}
!9732 = !DILocalVariable(name: "str", arg: 1, scope: !9729, file: !3, line: 1443, type: !3110)
!9733 = !DILocation(line: 1443, column: 35, scope: !9729)
!9734 = !DILocalVariable(name: "bb", arg: 2, scope: !9729, file: !3, line: 1443, type: !2453)
!9735 = !DILocation(line: 1443, column: 52, scope: !9729)
!9736 = !DILocalVariable(name: "i", scope: !9729, file: !3, line: 1445, type: !1821)
!9737 = !DILocation(line: 1445, column: 7, scope: !9729)
!9738 = !DILocalVariable(name: "dt", scope: !9729, file: !3, line: 1446, type: !3182)
!9739 = !DILocation(line: 1446, column: 26, scope: !9729)
!9740 = !DILocation(line: 1448, column: 12, scope: !9729)
!9741 = !DILocation(line: 1448, column: 6, scope: !9729)
!9742 = !DILocation(line: 1448, column: 10, scope: !9729)
!9743 = !DILocation(line: 1449, column: 11, scope: !9729)
!9744 = !DILocation(line: 1449, column: 6, scope: !9729)
!9745 = !DILocation(line: 1449, column: 9, scope: !9729)
!9746 = !DILocation(line: 1450, column: 6, scope: !9729)
!9747 = !DILocation(line: 1450, column: 18, scope: !9729)
!9748 = !DILocation(line: 1452, column: 10, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9729, file: !3, line: 1452, column: 3)
!9750 = !DILocation(line: 1452, column: 8, scope: !9749)
!9751 = !DILocation(line: 1452, column: 15, scope: !9752)
!9752 = distinct !DILexicalBlock(scope: !9749, file: !3, line: 1452, column: 3)
!9753 = !DILocation(line: 1452, column: 19, scope: !9752)
!9754 = !DILocation(line: 1452, column: 24, scope: !9752)
!9755 = !DILocation(line: 1452, column: 17, scope: !9752)
!9756 = !DILocation(line: 1452, column: 3, scope: !9749)
!9757 = !DILocation(line: 1454, column: 24, scope: !9758)
!9758 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 1453, column: 5)
!9759 = !DILocation(line: 1454, column: 10, scope: !9758)
!9760 = !DILocation(line: 1454, column: 22, scope: !9758)
!9761 = !DILocation(line: 1456, column: 11, scope: !9762)
!9762 = distinct !DILexicalBlock(scope: !9758, file: !3, line: 1456, column: 11)
!9763 = !DILocation(line: 1456, column: 16, scope: !9762)
!9764 = !DILocation(line: 1456, column: 23, scope: !9762)
!9765 = !DILocation(line: 1456, column: 26, scope: !9762)
!9766 = !DILocation(line: 1456, column: 11, scope: !9758)
!9767 = !DILocation(line: 1457, column: 17, scope: !9762)
!9768 = !DILocation(line: 1457, column: 22, scope: !9762)
!9769 = !DILocation(line: 1457, column: 29, scope: !9762)
!9770 = !DILocation(line: 1457, column: 32, scope: !9762)
!9771 = !DILocation(line: 1458, column: 32, scope: !9762)
!9772 = !DILocation(line: 1457, column: 2, scope: !9762)
!9773 = !DILocation(line: 1459, column: 5, scope: !9758)
!9774 = !DILocation(line: 1452, column: 37, scope: !9752)
!9775 = !DILocation(line: 1452, column: 3, scope: !9752)
!9776 = distinct !{!9776, !9756, !9777}
!9777 = !DILocation(line: 1459, column: 5, scope: !9749)
!9778 = !DILocation(line: 1460, column: 7, scope: !9779)
!9779 = distinct !DILexicalBlock(scope: !9729, file: !3, line: 1460, column: 7)
!9780 = !DILocation(line: 1460, column: 12, scope: !9779)
!9781 = !DILocation(line: 1460, column: 7, scope: !9729)
!9782 = !DILocation(line: 1461, column: 20, scope: !9779)
!9783 = !DILocation(line: 1461, column: 25, scope: !9779)
!9784 = !DILocation(line: 1461, column: 47, scope: !9779)
!9785 = !DILocation(line: 1461, column: 5, scope: !9779)
!9786 = !DILocation(line: 1462, column: 1, scope: !9729)
!9787 = distinct !DISubprogram(name: "create_new_field_acc", scope: !3, file: !3, line: 1427, type: !5074, scopeLine: 1428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9788 = !DILocalVariable(name: "slot", arg: 1, scope: !9787, file: !3, line: 1427, type: !2508)
!9789 = !DILocation(line: 1427, column: 30, scope: !9787)
!9790 = !DILocalVariable(name: "data", arg: 2, scope: !9787, file: !3, line: 1427, type: !2008)
!9791 = !DILocation(line: 1427, column: 42, scope: !9787)
!9792 = !DILocalVariable(name: "f_acc", scope: !9787, file: !3, line: 1429, type: !3113)
!9793 = !DILocation(line: 1429, column: 29, scope: !9787)
!9794 = !DILocation(line: 1429, column: 68, scope: !9787)
!9795 = !DILocation(line: 1429, column: 37, scope: !9787)
!9796 = !DILocalVariable(name: "bb", scope: !9787, file: !3, line: 1430, type: !2453)
!9797 = !DILocation(line: 1430, column: 15, scope: !9787)
!9798 = !DILocation(line: 1430, column: 47, scope: !9787)
!9799 = !DILocation(line: 1430, column: 21, scope: !9787)
!9800 = !DILocation(line: 1430, column: 54, scope: !9787)
!9801 = !DILocalVariable(name: "str", scope: !9787, file: !3, line: 1431, type: !3110)
!9802 = !DILocation(line: 1431, column: 9, scope: !9787)
!9803 = !DILocation(line: 1431, column: 42, scope: !9787)
!9804 = !DILocation(line: 1431, column: 16, scope: !9787)
!9805 = !DILocation(line: 1431, column: 49, scope: !9787)
!9806 = !DILocalVariable(name: "i", scope: !9787, file: !3, line: 1432, type: !1821)
!9807 = !DILocation(line: 1432, column: 7, scope: !9787)
!9808 = !DILocation(line: 1432, column: 38, scope: !9787)
!9809 = !DILocation(line: 1432, column: 12, scope: !9787)
!9810 = !DILocation(line: 1432, column: 45, scope: !9787)
!9811 = !DILocation(line: 1434, column: 18, scope: !9812)
!9812 = distinct !DILexicalBlock(scope: !9787, file: !3, line: 1434, column: 7)
!9813 = !DILocation(line: 1434, column: 25, scope: !9812)
!9814 = !DILocation(line: 1434, column: 7, scope: !9812)
!9815 = !DILocation(line: 1434, column: 34, scope: !9812)
!9816 = !DILocation(line: 1434, column: 31, scope: !9812)
!9817 = !DILocation(line: 1434, column: 7, scope: !9787)
!9818 = !DILocation(line: 1435, column: 30, scope: !9812)
!9819 = !DILocation(line: 1435, column: 37, scope: !9812)
!9820 = !DILocation(line: 1435, column: 42, scope: !9812)
!9821 = !DILocation(line: 1435, column: 49, scope: !9812)
!9822 = !DILocation(line: 1435, column: 5, scope: !9812)
!9823 = !DILocation(line: 1436, column: 3, scope: !9787)
!9824 = distinct !DISubprogram(name: "create_new_acc", scope: !3, file: !3, line: 1412, type: !5074, scopeLine: 1413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9825 = !DILocalVariable(name: "slot", arg: 1, scope: !9824, file: !3, line: 1412, type: !2508)
!9826 = !DILocation(line: 1412, column: 24, scope: !9824)
!9827 = !DILocalVariable(name: "data", arg: 2, scope: !9824, file: !3, line: 1412, type: !2008)
!9828 = !DILocation(line: 1412, column: 36, scope: !9824)
!9829 = !DILocalVariable(name: "acc", scope: !9824, file: !3, line: 1414, type: !3115)
!9830 = !DILocation(line: 1414, column: 23, scope: !9824)
!9831 = !DILocation(line: 1414, column: 54, scope: !9824)
!9832 = !DILocation(line: 1414, column: 29, scope: !9824)
!9833 = !DILocalVariable(name: "bb", scope: !9824, file: !3, line: 1415, type: !2453)
!9834 = !DILocation(line: 1415, column: 15, scope: !9824)
!9835 = !DILocation(line: 1415, column: 47, scope: !9824)
!9836 = !DILocation(line: 1415, column: 21, scope: !9824)
!9837 = !DILocation(line: 1415, column: 54, scope: !9824)
!9838 = !DILocalVariable(name: "str", scope: !9824, file: !3, line: 1416, type: !3110)
!9839 = !DILocation(line: 1416, column: 9, scope: !9824)
!9840 = !DILocation(line: 1416, column: 42, scope: !9824)
!9841 = !DILocation(line: 1416, column: 16, scope: !9824)
!9842 = !DILocation(line: 1416, column: 49, scope: !9824)
!9843 = !DILocation(line: 1418, column: 18, scope: !9844)
!9844 = distinct !DILexicalBlock(scope: !9824, file: !3, line: 1418, column: 7)
!9845 = !DILocation(line: 1418, column: 23, scope: !9844)
!9846 = !DILocation(line: 1418, column: 7, scope: !9844)
!9847 = !DILocation(line: 1418, column: 32, scope: !9844)
!9848 = !DILocation(line: 1418, column: 29, scope: !9844)
!9849 = !DILocation(line: 1418, column: 7, scope: !9824)
!9850 = !DILocation(line: 1419, column: 32, scope: !9844)
!9851 = !DILocation(line: 1419, column: 37, scope: !9844)
!9852 = !DILocation(line: 1419, column: 5, scope: !9844)
!9853 = !DILocation(line: 1420, column: 3, scope: !9824)
!9854 = distinct !DISubprogram(name: "create_new_field_access", scope: !3, file: !3, line: 1135, type: !9855, scopeLine: 1137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9855 = !DISubroutineType(types: !9856)
!9856 = !{null, !3113, !3038}
!9857 = !DILocalVariable(name: "f_acc", arg: 1, scope: !9854, file: !3, line: 1135, type: !3113)
!9858 = !DILocation(line: 1135, column: 52, scope: !9854)
!9859 = !DILocalVariable(name: "field", arg: 2, scope: !9854, file: !3, line: 1136, type: !3038)
!9860 = !DILocation(line: 1136, column: 24, scope: !9854)
!9861 = !DILocalVariable(name: "new_type", scope: !9854, file: !3, line: 1138, type: !1724)
!9862 = !DILocation(line: 1138, column: 8, scope: !9854)
!9863 = !DILocation(line: 1138, column: 25, scope: !9854)
!9864 = !DILocalVariable(name: "new_stmt", scope: !9854, file: !3, line: 1139, type: !2055)
!9865 = !DILocation(line: 1139, column: 10, scope: !9854)
!9866 = !DILocalVariable(name: "size_res", scope: !9854, file: !3, line: 1140, type: !1724)
!9867 = !DILocation(line: 1140, column: 8, scope: !9854)
!9868 = !DILocalVariable(name: "mult_stmt", scope: !9854, file: !3, line: 1141, type: !2055)
!9869 = !DILocation(line: 1141, column: 10, scope: !9854)
!9870 = !DILocalVariable(name: "cast_stmt", scope: !9854, file: !3, line: 1142, type: !2055)
!9871 = !DILocation(line: 1142, column: 10, scope: !9854)
!9872 = !DILocalVariable(name: "cast_res", scope: !9854, file: !3, line: 1143, type: !1724)
!9873 = !DILocation(line: 1143, column: 8, scope: !9854)
!9874 = !DILocation(line: 1145, column: 7, scope: !9875)
!9875 = distinct !DILexicalBlock(scope: !9854, file: !3, line: 1145, column: 7)
!9876 = !DILocation(line: 1145, column: 14, scope: !9875)
!9877 = !DILocation(line: 1145, column: 7, scope: !9854)
!9878 = !DILocation(line: 1147, column: 29, scope: !9879)
!9879 = distinct !DILexicalBlock(scope: !9875, file: !3, line: 1146, column: 5)
!9880 = !DILocation(line: 1147, column: 36, scope: !9879)
!9881 = !DILocation(line: 1147, column: 41, scope: !9879)
!9882 = !DILocation(line: 1147, column: 19, scope: !9879)
!9883 = !DILocation(line: 1147, column: 17, scope: !9879)
!9884 = !DILocation(line: 1148, column: 27, scope: !9879)
!9885 = !DILocation(line: 1148, column: 34, scope: !9879)
!9886 = !DILocation(line: 1148, column: 48, scope: !9879)
!9887 = !DILocation(line: 1148, column: 7, scope: !9879)
!9888 = !DILocation(line: 1149, column: 5, scope: !9879)
!9889 = !DILocation(line: 1151, column: 7, scope: !9890)
!9890 = distinct !DILexicalBlock(scope: !9854, file: !3, line: 1151, column: 7)
!9891 = !DILocation(line: 1151, column: 14, scope: !9890)
!9892 = !DILocation(line: 1151, column: 7, scope: !9854)
!9893 = !DILocation(line: 1153, column: 34, scope: !9894)
!9894 = distinct !DILexicalBlock(scope: !9890, file: !3, line: 1152, column: 5)
!9895 = !DILocation(line: 1153, column: 44, scope: !9894)
!9896 = !DILocation(line: 1154, column: 6, scope: !9894)
!9897 = !DILocation(line: 1154, column: 13, scope: !9894)
!9898 = !DILocation(line: 1153, column: 19, scope: !9894)
!9899 = !DILocation(line: 1153, column: 17, scope: !9894)
!9900 = !DILocation(line: 1155, column: 26, scope: !9894)
!9901 = !DILocation(line: 1155, column: 33, scope: !9894)
!9902 = !DILocation(line: 1155, column: 44, scope: !9894)
!9903 = !DILocation(line: 1155, column: 7, scope: !9894)
!9904 = !DILocation(line: 1156, column: 5, scope: !9894)
!9905 = !DILocation(line: 1158, column: 7, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9854, file: !3, line: 1158, column: 7)
!9907 = !DILocation(line: 1158, column: 14, scope: !9906)
!9908 = !DILocation(line: 1158, column: 7, scope: !9854)
!9909 = !DILocalVariable(name: "offset", scope: !9910, file: !3, line: 1160, type: !1724)
!9910 = distinct !DILexicalBlock(scope: !9906, file: !3, line: 1159, column: 5)
!9911 = !DILocation(line: 1160, column: 12, scope: !9910)
!9912 = !DILocation(line: 1161, column: 11, scope: !9913)
!9913 = distinct !DILexicalBlock(scope: !9910, file: !3, line: 1161, column: 11)
!9914 = !DILocation(line: 1161, column: 11, scope: !9910)
!9915 = !DILocation(line: 1162, column: 11, scope: !9913)
!9916 = !DILocation(line: 1162, column: 9, scope: !9913)
!9917 = !DILocation(line: 1162, column: 2, scope: !9913)
!9918 = !DILocation(line: 1164, column: 11, scope: !9913)
!9919 = !DILocation(line: 1164, column: 9, scope: !9913)
!9920 = !DILocation(line: 1166, column: 43, scope: !9910)
!9921 = !DILocation(line: 1166, column: 50, scope: !9910)
!9922 = !DILocation(line: 1167, column: 8, scope: !9910)
!9923 = !DILocation(line: 1167, column: 18, scope: !9910)
!9924 = !DILocation(line: 1166, column: 18, scope: !9910)
!9925 = !DILocation(line: 1166, column: 16, scope: !9910)
!9926 = !DILocation(line: 1168, column: 26, scope: !9910)
!9927 = !DILocation(line: 1168, column: 33, scope: !9910)
!9928 = !DILocation(line: 1168, column: 47, scope: !9910)
!9929 = !DILocation(line: 1168, column: 7, scope: !9910)
!9930 = !DILocation(line: 1169, column: 5, scope: !9910)
!9931 = !DILocation(line: 1173, column: 30, scope: !9854)
!9932 = !DILocation(line: 1173, column: 37, scope: !9854)
!9933 = !DILocation(line: 1173, column: 3, scope: !9854)
!9934 = !DILocation(line: 1174, column: 1, scope: !9854)
!9935 = distinct !DISubprogram(name: "insert_before_stmt", scope: !3, file: !3, line: 691, type: !9936, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9936 = !DISubroutineType(types: !9937)
!9937 = !{null, !2055, !2055}
!9938 = !DILocalVariable(name: "stmt", arg: 1, scope: !9935, file: !3, line: 691, type: !2055)
!9939 = !DILocation(line: 691, column: 28, scope: !9935)
!9940 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !9935, file: !3, line: 691, type: !2055)
!9941 = !DILocation(line: 691, column: 41, scope: !9935)
!9942 = !DILocalVariable(name: "bsi", scope: !9935, file: !3, line: 693, type: !3129)
!9943 = !DILocation(line: 693, column: 24, scope: !9935)
!9944 = !DILocation(line: 695, column: 8, scope: !9945)
!9945 = distinct !DILexicalBlock(scope: !9935, file: !3, line: 695, column: 7)
!9946 = !DILocation(line: 695, column: 13, scope: !9945)
!9947 = !DILocation(line: 695, column: 17, scope: !9945)
!9948 = !DILocation(line: 695, column: 7, scope: !9935)
!9949 = !DILocation(line: 696, column: 5, scope: !9945)
!9950 = !DILocation(line: 698, column: 23, scope: !9935)
!9951 = !DILocation(line: 698, column: 9, scope: !9935)
!9952 = !DILocation(line: 699, column: 28, scope: !9935)
!9953 = !DILocation(line: 699, column: 3, scope: !9935)
!9954 = !DILocation(line: 700, column: 1, scope: !9935)
!9955 = distinct !DISubprogram(name: "insert_after_stmt", scope: !3, file: !3, line: 719, type: !9936, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9956 = !DILocalVariable(name: "stmt", arg: 1, scope: !9955, file: !3, line: 719, type: !2055)
!9957 = !DILocation(line: 719, column: 27, scope: !9955)
!9958 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !9955, file: !3, line: 719, type: !2055)
!9959 = !DILocation(line: 719, column: 40, scope: !9955)
!9960 = !DILocalVariable(name: "bsi", scope: !9955, file: !3, line: 721, type: !3129)
!9961 = !DILocation(line: 721, column: 24, scope: !9955)
!9962 = !DILocation(line: 723, column: 8, scope: !9963)
!9963 = distinct !DILexicalBlock(scope: !9955, file: !3, line: 723, column: 7)
!9964 = !DILocation(line: 723, column: 13, scope: !9963)
!9965 = !DILocation(line: 723, column: 17, scope: !9963)
!9966 = !DILocation(line: 723, column: 7, scope: !9955)
!9967 = !DILocation(line: 724, column: 5, scope: !9963)
!9968 = !DILocation(line: 726, column: 23, scope: !9955)
!9969 = !DILocation(line: 726, column: 9, scope: !9955)
!9970 = !DILocation(line: 727, column: 27, scope: !9955)
!9971 = !DILocation(line: 727, column: 3, scope: !9955)
!9972 = !DILocation(line: 728, column: 1, scope: !9955)
!9973 = distinct !DISubprogram(name: "create_base_plus_offset", scope: !3, file: !3, line: 1076, type: !9974, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!9974 = !DISubroutineType(types: !9975)
!9975 = !{!2055, !2055, !1724, !1724}
!9976 = !DILocalVariable(name: "orig_stmt", arg: 1, scope: !9973, file: !3, line: 1076, type: !2055)
!9977 = !DILocation(line: 1076, column: 33, scope: !9973)
!9978 = !DILocalVariable(name: "new_type", arg: 2, scope: !9973, file: !3, line: 1076, type: !1724)
!9979 = !DILocation(line: 1076, column: 49, scope: !9973)
!9980 = !DILocalVariable(name: "offset", arg: 3, scope: !9973, file: !3, line: 1076, type: !1724)
!9981 = !DILocation(line: 1076, column: 64, scope: !9973)
!9982 = !DILocalVariable(name: "lhs", scope: !9973, file: !3, line: 1078, type: !1724)
!9983 = !DILocation(line: 1078, column: 8, scope: !9973)
!9984 = !DILocalVariable(name: "new_lhs", scope: !9973, file: !3, line: 1079, type: !1724)
!9985 = !DILocation(line: 1079, column: 8, scope: !9973)
!9986 = !DILocalVariable(name: "new_stmt", scope: !9973, file: !3, line: 1080, type: !2055)
!9987 = !DILocation(line: 1080, column: 10, scope: !9973)
!9988 = !DILocalVariable(name: "new_op0", scope: !9973, file: !3, line: 1081, type: !1724)
!9989 = !DILocation(line: 1081, column: 8, scope: !9973)
!9990 = !DILocalVariable(name: "new_op1", scope: !9973, file: !3, line: 1081, type: !1724)
!9991 = !DILocation(line: 1081, column: 29, scope: !9973)
!9992 = !DILocation(line: 1083, column: 28, scope: !9973)
!9993 = !DILocation(line: 1083, column: 9, scope: !9973)
!9994 = !DILocation(line: 1083, column: 7, scope: !9973)
!9995 = !DILocation(line: 1085, column: 3, scope: !9973)
!9996 = !DILocation(line: 1088, column: 35, scope: !9973)
!9997 = !DILocation(line: 1088, column: 40, scope: !9973)
!9998 = !DILocation(line: 1088, column: 13, scope: !9973)
!9999 = !DILocation(line: 1088, column: 11, scope: !9973)
!10000 = !DILocation(line: 1089, column: 3, scope: !9973)
!10001 = !DILocation(line: 1090, column: 26, scope: !9973)
!10002 = !DILocation(line: 1090, column: 3, scope: !9973)
!10003 = !DILocation(line: 1092, column: 35, scope: !9973)
!10004 = !DILocation(line: 1092, column: 11, scope: !9973)
!10005 = !DILocation(line: 1092, column: 3, scope: !9973)
!10006 = !DILocalVariable(name: "op0", scope: !10007, file: !3, line: 1098, type: !1724)
!10007 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 1097, column: 7)
!10008 = distinct !DILexicalBlock(scope: !9973, file: !3, line: 1093, column: 5)
!10009 = !DILocation(line: 1098, column: 7, scope: !10007)
!10010 = !DILocation(line: 1098, column: 33, scope: !10007)
!10011 = !DILocation(line: 1098, column: 13, scope: !10007)
!10012 = !DILocalVariable(name: "op1", scope: !10007, file: !3, line: 1099, type: !1724)
!10013 = !DILocation(line: 1099, column: 7, scope: !10007)
!10014 = !DILocation(line: 1099, column: 33, scope: !10007)
!10015 = !DILocation(line: 1099, column: 13, scope: !10007)
!10016 = !DILocalVariable(name: "str0", scope: !10007, file: !3, line: 1100, type: !7)
!10017 = !DILocation(line: 1100, column: 11, scope: !10007)
!10018 = !DILocalVariable(name: "str1", scope: !10007, file: !3, line: 1100, type: !7)
!10019 = !DILocation(line: 1100, column: 17, scope: !10007)
!10020 = !DILocalVariable(name: "length", scope: !10007, file: !3, line: 1101, type: !7)
!10021 = !DILocation(line: 1101, column: 11, scope: !10007)
!10022 = !DILocation(line: 1101, column: 20, scope: !10007)
!10023 = !DILocation(line: 1104, column: 54, scope: !10007)
!10024 = !DILocation(line: 1104, column: 37, scope: !10007)
!10025 = !DILocation(line: 1104, column: 25, scope: !10007)
!10026 = !DILocation(line: 1104, column: 9, scope: !10007)
!10027 = !DILocation(line: 1104, column: 7, scope: !10007)
!10028 = !DILocation(line: 1105, column: 54, scope: !10007)
!10029 = !DILocation(line: 1105, column: 37, scope: !10007)
!10030 = !DILocation(line: 1105, column: 25, scope: !10007)
!10031 = !DILocation(line: 1105, column: 9, scope: !10007)
!10032 = !DILocation(line: 1105, column: 7, scope: !10007)
!10033 = !DILocation(line: 1106, column: 2, scope: !10007)
!10034 = !DILocation(line: 1108, column: 6, scope: !10035)
!10035 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 1108, column: 6)
!10036 = !DILocation(line: 1108, column: 14, scope: !10035)
!10037 = !DILocation(line: 1108, column: 11, scope: !10035)
!10038 = !DILocation(line: 1108, column: 6, scope: !10007)
!10039 = !DILocation(line: 1109, column: 36, scope: !10035)
!10040 = !DILocation(line: 1109, column: 41, scope: !10035)
!10041 = !DILocation(line: 1109, column: 14, scope: !10035)
!10042 = !DILocation(line: 1109, column: 12, scope: !10035)
!10043 = !DILocation(line: 1109, column: 4, scope: !10035)
!10044 = !DILocation(line: 1110, column: 6, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 1110, column: 6)
!10046 = !DILocation(line: 1110, column: 14, scope: !10045)
!10047 = !DILocation(line: 1110, column: 11, scope: !10045)
!10048 = !DILocation(line: 1110, column: 6, scope: !10007)
!10049 = !DILocation(line: 1111, column: 36, scope: !10045)
!10050 = !DILocation(line: 1111, column: 41, scope: !10045)
!10051 = !DILocation(line: 1111, column: 14, scope: !10045)
!10052 = !DILocation(line: 1111, column: 12, scope: !10045)
!10053 = !DILocation(line: 1111, column: 4, scope: !10045)
!10054 = !DILocation(line: 1113, column: 7, scope: !10055)
!10055 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 1113, column: 6)
!10056 = !DILocation(line: 1113, column: 6, scope: !10007)
!10057 = !DILocation(line: 1114, column: 14, scope: !10055)
!10058 = !DILocation(line: 1114, column: 12, scope: !10055)
!10059 = !DILocation(line: 1114, column: 4, scope: !10055)
!10060 = !DILocation(line: 1115, column: 7, scope: !10061)
!10061 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 1115, column: 6)
!10062 = !DILocation(line: 1115, column: 6, scope: !10007)
!10063 = !DILocation(line: 1116, column: 14, scope: !10061)
!10064 = !DILocation(line: 1116, column: 12, scope: !10061)
!10065 = !DILocation(line: 1116, column: 4, scope: !10061)
!10066 = !DILocation(line: 1118, column: 7, scope: !10008)
!10067 = !DILocation(line: 1121, column: 7, scope: !10008)
!10068 = !DILocation(line: 1122, column: 5, scope: !10008)
!10069 = !DILocation(line: 1124, column: 14, scope: !9973)
!10070 = !DILocation(line: 1124, column: 12, scope: !9973)
!10071 = !DILocation(line: 1126, column: 18, scope: !9973)
!10072 = !DILocation(line: 1126, column: 3, scope: !9973)
!10073 = !DILocation(line: 1128, column: 10, scope: !9973)
!10074 = !DILocation(line: 1128, column: 3, scope: !9973)
!10075 = distinct !DISubprogram(name: "replace_field_access_stmt", scope: !3, file: !3, line: 1039, type: !10076, scopeLine: 1040, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10076 = !DISubroutineType(types: !10077)
!10077 = !{null, !3113, !1724}
!10078 = !DILocalVariable(name: "acc", arg: 1, scope: !10075, file: !3, line: 1039, type: !3113)
!10079 = !DILocation(line: 1039, column: 54, scope: !10075)
!10080 = !DILocalVariable(name: "new_type", arg: 2, scope: !10075, file: !3, line: 1039, type: !1724)
!10081 = !DILocation(line: 1039, column: 64, scope: !10075)
!10082 = !DILocation(line: 1042, column: 7, scope: !10083)
!10083 = distinct !DILexicalBlock(scope: !10075, file: !3, line: 1042, column: 7)
!10084 = !DILocation(line: 1042, column: 28, scope: !10083)
!10085 = !DILocation(line: 1043, column: 7, scope: !10083)
!10086 = !DILocation(line: 1043, column: 9, scope: !10083)
!10087 = !DILocation(line: 1043, column: 30, scope: !10083)
!10088 = !DILocation(line: 1044, column: 7, scope: !10083)
!10089 = !DILocation(line: 1044, column: 9, scope: !10083)
!10090 = !DILocation(line: 1044, column: 30, scope: !10083)
!10091 = !DILocation(line: 1042, column: 7, scope: !10075)
!10092 = !DILocation(line: 1045, column: 24, scope: !10083)
!10093 = !DILocation(line: 1045, column: 29, scope: !10083)
!10094 = !DILocation(line: 1045, column: 5, scope: !10083)
!10095 = !DILocation(line: 1047, column: 5, scope: !10083)
!10096 = !DILocation(line: 1048, column: 1, scope: !10075)
!10097 = distinct !DISubprogram(name: "replace_field_acc", scope: !3, file: !3, line: 958, type: !10076, scopeLine: 959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10098 = !DILocalVariable(name: "acc", arg: 1, scope: !10097, file: !3, line: 958, type: !3113)
!10099 = !DILocation(line: 958, column: 46, scope: !10097)
!10100 = !DILocalVariable(name: "new_type", arg: 2, scope: !10097, file: !3, line: 958, type: !1724)
!10101 = !DILocation(line: 958, column: 56, scope: !10097)
!10102 = !DILocalVariable(name: "ref_var", scope: !10097, file: !3, line: 960, type: !1724)
!10103 = !DILocation(line: 960, column: 8, scope: !10097)
!10104 = !DILocation(line: 960, column: 18, scope: !10097)
!10105 = !DILocation(line: 960, column: 23, scope: !10097)
!10106 = !DILocalVariable(name: "new_ref", scope: !10097, file: !3, line: 961, type: !1724)
!10107 = !DILocation(line: 961, column: 8, scope: !10097)
!10108 = !DILocalVariable(name: "lhs", scope: !10097, file: !3, line: 962, type: !1724)
!10109 = !DILocation(line: 962, column: 8, scope: !10097)
!10110 = !DILocalVariable(name: "rhs", scope: !10097, file: !3, line: 962, type: !1724)
!10111 = !DILocation(line: 962, column: 13, scope: !10097)
!10112 = !DILocalVariable(name: "pos", scope: !10097, file: !3, line: 963, type: !2089)
!10113 = !DILocation(line: 963, column: 9, scope: !10097)
!10114 = !DILocalVariable(name: "new_acc", scope: !10097, file: !3, line: 964, type: !1724)
!10115 = !DILocation(line: 964, column: 8, scope: !10097)
!10116 = !DILocalVariable(name: "field_id", scope: !10097, file: !3, line: 965, type: !1724)
!10117 = !DILocation(line: 965, column: 8, scope: !10097)
!10118 = !DILocation(line: 965, column: 19, scope: !10097)
!10119 = !DILocalVariable(name: "wrapper", scope: !10097, file: !3, line: 966, type: !3163)
!10120 = !DILocation(line: 966, column: 31, scope: !10097)
!10121 = !DILocation(line: 966, column: 41, scope: !10097)
!10122 = !DILocalVariable(name: "wr_p", scope: !10097, file: !3, line: 967, type: !8600)
!10123 = !DILocation(line: 967, column: 19, scope: !10097)
!10124 = !DILocalVariable(name: "r_pos", scope: !10097, file: !3, line: 968, type: !3188)
!10125 = !DILocation(line: 968, column: 18, scope: !10097)
!10126 = !DILocation(line: 970, column: 3, scope: !10097)
!10127 = !DILocation(line: 970, column: 10, scope: !10097)
!10128 = !DILocation(line: 970, column: 30, scope: !10097)
!10129 = !DILocation(line: 971, column: 3, scope: !10097)
!10130 = !DILocation(line: 971, column: 6, scope: !10097)
!10131 = !DILocation(line: 971, column: 26, scope: !10097)
!10132 = !DILocalVariable(name: "wr", scope: !10133, file: !3, line: 973, type: !3175)
!10133 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 972, column: 5)
!10134 = !DILocation(line: 973, column: 22, scope: !10133)
!10135 = !DILocation(line: 975, column: 12, scope: !10136)
!10136 = distinct !DILexicalBlock(scope: !10133, file: !3, line: 975, column: 12)
!10137 = !DILocation(line: 975, column: 32, scope: !10136)
!10138 = !DILocation(line: 975, column: 12, scope: !10133)
!10139 = !DILocation(line: 977, column: 7, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 976, column: 2)
!10141 = !DILocation(line: 977, column: 12, scope: !10140)
!10142 = !DILocation(line: 978, column: 7, scope: !10140)
!10143 = !DILocation(line: 978, column: 14, scope: !10140)
!10144 = !DILocation(line: 979, column: 2, scope: !10140)
!10145 = !DILocation(line: 982, column: 7, scope: !10146)
!10146 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 981, column: 2)
!10147 = !DILocation(line: 982, column: 12, scope: !10146)
!10148 = !DILocation(line: 983, column: 16, scope: !10146)
!10149 = !DILocation(line: 983, column: 7, scope: !10146)
!10150 = !DILocation(line: 983, column: 14, scope: !10146)
!10151 = !DILocation(line: 986, column: 7, scope: !10133)
!10152 = !DILocation(line: 987, column: 17, scope: !10133)
!10153 = !DILocation(line: 987, column: 15, scope: !10133)
!10154 = distinct !{!10154, !10126, !10155}
!10155 = !DILocation(line: 988, column: 5, scope: !10097)
!10156 = !DILocation(line: 990, column: 35, scope: !10097)
!10157 = !DILocation(line: 990, column: 44, scope: !10097)
!10158 = !DILocation(line: 990, column: 13, scope: !10097)
!10159 = !DILocation(line: 990, column: 11, scope: !10097)
!10160 = !DILocation(line: 991, column: 29, scope: !10097)
!10161 = !DILocation(line: 991, column: 3, scope: !10097)
!10162 = !DILocation(line: 993, column: 3, scope: !10097)
!10163 = !DILocation(line: 993, column: 10, scope: !10097)
!10164 = !DILocation(line: 993, column: 47, scope: !10097)
!10165 = !DILocalVariable(name: "type", scope: !10166, file: !3, line: 995, type: !1724)
!10166 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 994, column: 5)
!10167 = !DILocation(line: 995, column: 12, scope: !10166)
!10168 = !DILocation(line: 995, column: 19, scope: !10166)
!10169 = !DILocation(line: 997, column: 14, scope: !10166)
!10170 = !DILocation(line: 997, column: 12, scope: !10166)
!10171 = !DILocation(line: 998, column: 11, scope: !10172)
!10172 = distinct !DILexicalBlock(scope: !10166, file: !3, line: 998, column: 11)
!10173 = !DILocation(line: 998, column: 17, scope: !10172)
!10174 = !DILocation(line: 998, column: 11, scope: !10166)
!10175 = !DILocation(line: 999, column: 12, scope: !10172)
!10176 = !DILocation(line: 999, column: 10, scope: !10172)
!10177 = !DILocation(line: 999, column: 2, scope: !10172)
!10178 = !DILocation(line: 1002, column: 12, scope: !10172)
!10179 = !DILocation(line: 1002, column: 10, scope: !10172)
!10180 = !DILocation(line: 1003, column: 7, scope: !10166)
!10181 = distinct !{!10181, !10162, !10182}
!10182 = !DILocation(line: 1004, column: 5, scope: !10097)
!10183 = !DILocation(line: 1006, column: 29, scope: !10097)
!10184 = !DILocation(line: 1006, column: 38, scope: !10097)
!10185 = !DILocation(line: 1006, column: 48, scope: !10097)
!10186 = !DILocation(line: 1006, column: 13, scope: !10097)
!10187 = !DILocation(line: 1006, column: 11, scope: !10097)
!10188 = !DILocation(line: 1007, column: 3, scope: !10097)
!10189 = !DILocation(line: 1009, column: 25, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 1009, column: 7)
!10191 = !DILocation(line: 1009, column: 30, scope: !10190)
!10192 = !DILocation(line: 1009, column: 7, scope: !10190)
!10193 = !DILocation(line: 1009, column: 7, scope: !10097)
!10194 = !DILocation(line: 1011, column: 32, scope: !10195)
!10195 = distinct !DILexicalBlock(scope: !10190, file: !3, line: 1010, column: 5)
!10196 = !DILocation(line: 1011, column: 37, scope: !10195)
!10197 = !DILocation(line: 1011, column: 13, scope: !10195)
!10198 = !DILocation(line: 1011, column: 11, scope: !10195)
!10199 = !DILocation(line: 1012, column: 33, scope: !10195)
!10200 = !DILocation(line: 1012, column: 38, scope: !10195)
!10201 = !DILocation(line: 1012, column: 13, scope: !10195)
!10202 = !DILocation(line: 1012, column: 11, scope: !10195)
!10203 = !DILocation(line: 1014, column: 11, scope: !10204)
!10204 = distinct !DILexicalBlock(scope: !10195, file: !3, line: 1014, column: 11)
!10205 = !DILocation(line: 1014, column: 18, scope: !10204)
!10206 = !DILocation(line: 1014, column: 23, scope: !10204)
!10207 = !DILocation(line: 1014, column: 15, scope: !10204)
!10208 = !DILocation(line: 1014, column: 11, scope: !10195)
!10209 = !DILocation(line: 1015, column: 25, scope: !10204)
!10210 = !DILocation(line: 1015, column: 30, scope: !10204)
!10211 = !DILocation(line: 1015, column: 36, scope: !10204)
!10212 = !DILocation(line: 1015, column: 2, scope: !10204)
!10213 = !DILocation(line: 1016, column: 16, scope: !10214)
!10214 = distinct !DILexicalBlock(scope: !10204, file: !3, line: 1016, column: 16)
!10215 = !DILocation(line: 1016, column: 23, scope: !10214)
!10216 = !DILocation(line: 1016, column: 28, scope: !10214)
!10217 = !DILocation(line: 1016, column: 20, scope: !10214)
!10218 = !DILocation(line: 1016, column: 16, scope: !10204)
!10219 = !DILocation(line: 1017, column: 26, scope: !10214)
!10220 = !DILocation(line: 1017, column: 31, scope: !10214)
!10221 = !DILocation(line: 1017, column: 37, scope: !10214)
!10222 = !DILocation(line: 1017, column: 2, scope: !10214)
!10223 = !DILocation(line: 1020, column: 28, scope: !10224)
!10224 = distinct !DILexicalBlock(scope: !10214, file: !3, line: 1019, column: 2)
!10225 = !DILocation(line: 1020, column: 33, scope: !10224)
!10226 = !DILocation(line: 1020, column: 39, scope: !10224)
!10227 = !DILocation(line: 1020, column: 44, scope: !10224)
!10228 = !DILocation(line: 1020, column: 10, scope: !10224)
!10229 = !DILocation(line: 1020, column: 8, scope: !10224)
!10230 = !DILocation(line: 1021, column: 4, scope: !10224)
!10231 = !DILocation(line: 1022, column: 11, scope: !10224)
!10232 = !DILocation(line: 1022, column: 5, scope: !10224)
!10233 = !DILocation(line: 1022, column: 9, scope: !10224)
!10234 = !DILocation(line: 1024, column: 5, scope: !10195)
!10235 = !DILocation(line: 1027, column: 31, scope: !10236)
!10236 = distinct !DILexicalBlock(scope: !10190, file: !3, line: 1026, column: 5)
!10237 = !DILocation(line: 1027, column: 36, scope: !10236)
!10238 = !DILocation(line: 1027, column: 42, scope: !10236)
!10239 = !DILocation(line: 1027, column: 47, scope: !10236)
!10240 = !DILocation(line: 1027, column: 13, scope: !10236)
!10241 = !DILocation(line: 1027, column: 11, scope: !10236)
!10242 = !DILocation(line: 1028, column: 7, scope: !10236)
!10243 = !DILocation(line: 1029, column: 14, scope: !10236)
!10244 = !DILocation(line: 1029, column: 8, scope: !10236)
!10245 = !DILocation(line: 1029, column: 12, scope: !10236)
!10246 = !DILocation(line: 1032, column: 18, scope: !10097)
!10247 = !DILocation(line: 1032, column: 23, scope: !10097)
!10248 = !DILocation(line: 1032, column: 3, scope: !10097)
!10249 = !DILocation(line: 1033, column: 1, scope: !10097)
!10250 = distinct !DISubprogram(name: "finalize_global_creation", scope: !3, file: !3, line: 523, type: !4035, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10251 = !DILocalVariable(name: "var", arg: 1, scope: !10250, file: !3, line: 523, type: !1724)
!10252 = !DILocation(line: 523, column: 32, scope: !10250)
!10253 = !DILocation(line: 525, column: 7, scope: !10254)
!10254 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 525, column: 7)
!10255 = !DILocation(line: 525, column: 23, scope: !10254)
!10256 = !DILocation(line: 526, column: 7, scope: !10254)
!10257 = !DILocation(line: 526, column: 25, scope: !10254)
!10258 = !DILocation(line: 526, column: 10, scope: !10254)
!10259 = !DILocation(line: 525, column: 7, scope: !10250)
!10260 = !DILocation(line: 527, column: 28, scope: !10254)
!10261 = !DILocation(line: 527, column: 5, scope: !10254)
!10262 = !DILocation(line: 528, column: 1, scope: !10250)
!10263 = distinct !DISubprogram(name: "build_comp_ref", scope: !3, file: !3, line: 856, type: !8140, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10264 = !DILocalVariable(name: "base", arg: 1, scope: !10263, file: !3, line: 856, type: !1724)
!10265 = !DILocation(line: 856, column: 22, scope: !10263)
!10266 = !DILocalVariable(name: "field_id", arg: 2, scope: !10263, file: !3, line: 856, type: !1724)
!10267 = !DILocation(line: 856, column: 33, scope: !10263)
!10268 = !DILocalVariable(name: "type", arg: 3, scope: !10263, file: !3, line: 856, type: !1724)
!10269 = !DILocation(line: 856, column: 48, scope: !10263)
!10270 = !DILocalVariable(name: "field", scope: !10263, file: !3, line: 858, type: !1724)
!10271 = !DILocation(line: 858, column: 8, scope: !10263)
!10272 = !DILocalVariable(name: "found", scope: !10263, file: !3, line: 859, type: !1844)
!10273 = !DILocation(line: 859, column: 8, scope: !10263)
!10274 = !DILocation(line: 863, column: 16, scope: !10275)
!10275 = distinct !DILexicalBlock(scope: !10263, file: !3, line: 863, column: 3)
!10276 = !DILocation(line: 863, column: 14, scope: !10275)
!10277 = !DILocation(line: 863, column: 8, scope: !10275)
!10278 = !DILocation(line: 863, column: 36, scope: !10279)
!10279 = distinct !DILexicalBlock(scope: !10275, file: !3, line: 863, column: 3)
!10280 = !DILocation(line: 863, column: 3, scope: !10275)
!10281 = !DILocation(line: 865, column: 11, scope: !10282)
!10282 = distinct !DILexicalBlock(scope: !10283, file: !3, line: 865, column: 11)
!10283 = distinct !DILexicalBlock(scope: !10279, file: !3, line: 864, column: 5)
!10284 = !DILocation(line: 865, column: 32, scope: !10282)
!10285 = !DILocation(line: 865, column: 29, scope: !10282)
!10286 = !DILocation(line: 865, column: 11, scope: !10283)
!10287 = !DILocation(line: 867, column: 10, scope: !10288)
!10288 = distinct !DILexicalBlock(scope: !10282, file: !3, line: 866, column: 2)
!10289 = !DILocation(line: 868, column: 4, scope: !10288)
!10290 = !DILocation(line: 870, column: 5, scope: !10283)
!10291 = !DILocation(line: 863, column: 51, scope: !10279)
!10292 = !DILocation(line: 863, column: 49, scope: !10279)
!10293 = !DILocation(line: 863, column: 3, scope: !10279)
!10294 = distinct !{!10294, !10280, !10295}
!10295 = !DILocation(line: 870, column: 5, scope: !10275)
!10296 = !DILocation(line: 872, column: 3, scope: !10263)
!10297 = !DILocation(line: 874, column: 10, scope: !10263)
!10298 = !DILocation(line: 874, column: 3, scope: !10263)
!10299 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !1304, file: !1304, line: 1714, type: !9421, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10300 = !DILocalVariable(name: "gs", arg: 1, scope: !10299, file: !1304, line: 1714, type: !2055)
!10301 = !DILocation(line: 1714, column: 31, scope: !10299)
!10302 = !DILocalVariable(name: "lhs", arg: 2, scope: !10299, file: !1304, line: 1714, type: !1724)
!10303 = !DILocation(line: 1714, column: 40, scope: !10299)
!10304 = !DILocation(line: 1717, column: 18, scope: !10299)
!10305 = !DILocation(line: 1717, column: 25, scope: !10299)
!10306 = !DILocation(line: 1717, column: 3, scope: !10299)
!10307 = !DILocation(line: 1719, column: 7, scope: !10308)
!10308 = distinct !DILexicalBlock(scope: !10299, file: !1304, line: 1719, column: 7)
!10309 = !DILocation(line: 1719, column: 11, scope: !10308)
!10310 = !DILocation(line: 1719, column: 14, scope: !10308)
!10311 = !DILocation(line: 1719, column: 30, scope: !10308)
!10312 = !DILocation(line: 1719, column: 7, scope: !10299)
!10313 = !DILocation(line: 1720, column: 31, scope: !10308)
!10314 = !DILocation(line: 1720, column: 5, scope: !10308)
!10315 = !DILocation(line: 1720, column: 29, scope: !10308)
!10316 = !DILocation(line: 1721, column: 1, scope: !10299)
!10317 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !1304, file: !1304, line: 1747, type: !9421, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10318 = !DILocalVariable(name: "gs", arg: 1, scope: !10317, file: !1304, line: 1747, type: !2055)
!10319 = !DILocation(line: 1747, column: 32, scope: !10317)
!10320 = !DILocalVariable(name: "rhs", arg: 2, scope: !10317, file: !1304, line: 1747, type: !1724)
!10321 = !DILocation(line: 1747, column: 41, scope: !10317)
!10322 = !DILocation(line: 1751, column: 18, scope: !10317)
!10323 = !DILocation(line: 1751, column: 25, scope: !10317)
!10324 = !DILocation(line: 1751, column: 3, scope: !10317)
!10325 = !DILocation(line: 1752, column: 1, scope: !10317)
!10326 = distinct !DISubprogram(name: "find_pos_in_stmt", scope: !3, file: !3, line: 919, type: !10327, scopeLine: 920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10327 = !DISubroutineType(types: !10328)
!10328 = !{!2089, !2055, !1724, !3187}
!10329 = !DILocalVariable(name: "stmt", arg: 1, scope: !10326, file: !3, line: 919, type: !2055)
!10330 = !DILocation(line: 919, column: 26, scope: !10326)
!10331 = !DILocalVariable(name: "ref", arg: 2, scope: !10326, file: !3, line: 919, type: !1724)
!10332 = !DILocation(line: 919, column: 37, scope: !10326)
!10333 = !DILocalVariable(name: "r_pos", arg: 3, scope: !10326, file: !3, line: 919, type: !3187)
!10334 = !DILocation(line: 919, column: 59, scope: !10326)
!10335 = !DILocalVariable(name: "wi", scope: !10326, file: !3, line: 921, type: !3126)
!10336 = !DILocation(line: 921, column: 25, scope: !10326)
!10337 = !DILocation(line: 923, column: 16, scope: !10326)
!10338 = !DILocation(line: 923, column: 3, scope: !10326)
!10339 = !DILocation(line: 923, column: 10, scope: !10326)
!10340 = !DILocation(line: 923, column: 14, scope: !10326)
!10341 = !DILocation(line: 924, column: 3, scope: !10326)
!10342 = !DILocation(line: 924, column: 10, scope: !10326)
!10343 = !DILocation(line: 924, column: 14, scope: !10326)
!10344 = !DILocation(line: 925, column: 3, scope: !10326)
!10345 = !DILocation(line: 925, column: 10, scope: !10326)
!10346 = !DILocation(line: 925, column: 20, scope: !10326)
!10347 = !DILocation(line: 926, column: 3, scope: !10326)
!10348 = !DILocation(line: 927, column: 13, scope: !10326)
!10349 = !DILocation(line: 927, column: 6, scope: !10326)
!10350 = !DILocation(line: 927, column: 11, scope: !10326)
!10351 = !DILocation(line: 928, column: 19, scope: !10326)
!10352 = !DILocation(line: 928, column: 3, scope: !10326)
!10353 = !DILocation(line: 930, column: 10, scope: !10326)
!10354 = !DILocation(line: 930, column: 17, scope: !10326)
!10355 = !DILocation(line: 930, column: 3, scope: !10326)
!10356 = distinct !DISubprogram(name: "find_pos_in_stmt_1", scope: !3, file: !3, line: 896, type: !5890, scopeLine: 897, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10357 = !DILocalVariable(name: "tp", arg: 1, scope: !10356, file: !3, line: 896, type: !2089)
!10358 = !DILocation(line: 896, column: 27, scope: !10356)
!10359 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !10356, file: !3, line: 896, type: !5892)
!10360 = !DILocation(line: 896, column: 36, scope: !10356)
!10361 = !DILocalVariable(name: "data", arg: 3, scope: !10356, file: !3, line: 896, type: !2008)
!10362 = !DILocation(line: 896, column: 58, scope: !10356)
!10363 = !DILocalVariable(name: "wi", scope: !10356, file: !3, line: 898, type: !3125)
!10364 = !DILocation(line: 898, column: 26, scope: !10356)
!10365 = !DILocation(line: 898, column: 57, scope: !10356)
!10366 = !DILocation(line: 898, column: 31, scope: !10356)
!10367 = !DILocalVariable(name: "r_pos", scope: !10356, file: !3, line: 899, type: !3187)
!10368 = !DILocation(line: 899, column: 19, scope: !10356)
!10369 = !DILocation(line: 899, column: 46, scope: !10356)
!10370 = !DILocation(line: 899, column: 50, scope: !10356)
!10371 = !DILocation(line: 899, column: 27, scope: !10356)
!10372 = !DILocalVariable(name: "ref", scope: !10356, file: !3, line: 900, type: !1724)
!10373 = !DILocation(line: 900, column: 8, scope: !10356)
!10374 = !DILocation(line: 900, column: 14, scope: !10356)
!10375 = !DILocation(line: 900, column: 21, scope: !10356)
!10376 = !DILocalVariable(name: "t", scope: !10356, file: !3, line: 901, type: !1724)
!10377 = !DILocation(line: 901, column: 8, scope: !10356)
!10378 = !DILocation(line: 901, column: 13, scope: !10356)
!10379 = !DILocation(line: 901, column: 12, scope: !10356)
!10380 = !DILocation(line: 903, column: 7, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10356, file: !3, line: 903, column: 7)
!10382 = !DILocation(line: 903, column: 12, scope: !10381)
!10383 = !DILocation(line: 903, column: 9, scope: !10381)
!10384 = !DILocation(line: 903, column: 16, scope: !10381)
!10385 = !DILocation(line: 903, column: 20, scope: !10381)
!10386 = !DILocation(line: 903, column: 34, scope: !10381)
!10387 = !DILocation(line: 903, column: 46, scope: !10381)
!10388 = !DILocation(line: 903, column: 49, scope: !10381)
!10389 = !DILocation(line: 903, column: 69, scope: !10381)
!10390 = !DILocation(line: 903, column: 66, scope: !10381)
!10391 = !DILocation(line: 903, column: 7, scope: !10356)
!10392 = !DILocation(line: 905, column: 20, scope: !10393)
!10393 = distinct !DILexicalBlock(scope: !10381, file: !3, line: 904, column: 5)
!10394 = !DILocation(line: 905, column: 7, scope: !10393)
!10395 = !DILocation(line: 905, column: 14, scope: !10393)
!10396 = !DILocation(line: 905, column: 18, scope: !10393)
!10397 = !DILocation(line: 906, column: 14, scope: !10393)
!10398 = !DILocation(line: 906, column: 7, scope: !10393)
!10399 = !DILocation(line: 909, column: 22, scope: !10356)
!10400 = !DILocation(line: 909, column: 3, scope: !10356)
!10401 = !DILocation(line: 909, column: 10, scope: !10356)
!10402 = !DILocation(line: 909, column: 20, scope: !10356)
!10403 = !DILocation(line: 910, column: 4, scope: !10356)
!10404 = !DILocation(line: 910, column: 18, scope: !10356)
!10405 = !DILocation(line: 911, column: 3, scope: !10356)
!10406 = !DILocation(line: 912, column: 1, scope: !10356)
!10407 = distinct !DISubprogram(name: "create_new_general_access", scope: !3, file: !3, line: 1378, type: !10408, scopeLine: 1379, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10408 = !DISubroutineType(types: !10409)
!10409 = !{null, !3115, !3110}
!10410 = !DILocalVariable(name: "acc", arg: 1, scope: !10407, file: !3, line: 1378, type: !3115)
!10411 = !DILocation(line: 1378, column: 48, scope: !10407)
!10412 = !DILocalVariable(name: "str", arg: 2, scope: !10407, file: !3, line: 1378, type: !3110)
!10413 = !DILocation(line: 1378, column: 59, scope: !10407)
!10414 = !DILocalVariable(name: "stmt", scope: !10407, file: !3, line: 1380, type: !2055)
!10415 = !DILocation(line: 1380, column: 10, scope: !10407)
!10416 = !DILocation(line: 1380, column: 17, scope: !10407)
!10417 = !DILocation(line: 1380, column: 22, scope: !10407)
!10418 = !DILocation(line: 1381, column: 24, scope: !10407)
!10419 = !DILocation(line: 1381, column: 11, scope: !10407)
!10420 = !DILocation(line: 1381, column: 3, scope: !10407)
!10421 = !DILocation(line: 1384, column: 39, scope: !10422)
!10422 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 1382, column: 5)
!10423 = !DILocation(line: 1384, column: 7, scope: !10422)
!10424 = !DILocation(line: 1385, column: 7, scope: !10422)
!10425 = !DILocation(line: 1391, column: 38, scope: !10422)
!10426 = !DILocation(line: 1391, column: 7, scope: !10422)
!10427 = !DILocation(line: 1392, column: 20, scope: !10422)
!10428 = !DILocation(line: 1392, column: 7, scope: !10422)
!10429 = !DILocation(line: 1393, column: 7, scope: !10422)
!10430 = !DILocation(line: 1396, column: 41, scope: !10422)
!10431 = !DILocation(line: 1396, column: 46, scope: !10422)
!10432 = !DILocation(line: 1396, column: 7, scope: !10422)
!10433 = !DILocation(line: 1397, column: 5, scope: !10422)
!10434 = !DILocation(line: 1398, column: 1, scope: !10407)
!10435 = distinct !DISubprogram(name: "create_new_stmts_for_cond_expr", scope: !3, file: !3, line: 1223, type: !9472, scopeLine: 1224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10436 = !DILocalVariable(name: "stmt", arg: 1, scope: !10435, file: !3, line: 1223, type: !2055)
!10437 = !DILocation(line: 1223, column: 40, scope: !10435)
!10438 = !DILocalVariable(name: "arg0", scope: !10435, file: !3, line: 1225, type: !1724)
!10439 = !DILocation(line: 1225, column: 8, scope: !10435)
!10440 = !DILocalVariable(name: "arg1", scope: !10435, file: !3, line: 1225, type: !1724)
!10441 = !DILocation(line: 1225, column: 14, scope: !10435)
!10442 = !DILocalVariable(name: "arg", scope: !10435, file: !3, line: 1225, type: !1724)
!10443 = !DILocation(line: 1225, column: 20, scope: !10435)
!10444 = !DILocalVariable(name: "str0", scope: !10435, file: !3, line: 1226, type: !7)
!10445 = !DILocation(line: 1226, column: 12, scope: !10435)
!10446 = !DILocalVariable(name: "str1", scope: !10435, file: !3, line: 1226, type: !7)
!10447 = !DILocation(line: 1226, column: 18, scope: !10435)
!10448 = !DILocalVariable(name: "s0", scope: !10435, file: !3, line: 1227, type: !1844)
!10449 = !DILocation(line: 1227, column: 8, scope: !10435)
!10450 = !DILocalVariable(name: "s1", scope: !10435, file: !3, line: 1227, type: !1844)
!10451 = !DILocation(line: 1227, column: 12, scope: !10435)
!10452 = !DILocalVariable(name: "str", scope: !10435, file: !3, line: 1228, type: !3110)
!10453 = !DILocation(line: 1228, column: 9, scope: !10435)
!10454 = !DILocalVariable(name: "type", scope: !10435, file: !3, line: 1229, type: !1724)
!10455 = !DILocation(line: 1229, column: 8, scope: !10435)
!10456 = !DILocalVariable(name: "pos", scope: !10435, file: !3, line: 1230, type: !7)
!10457 = !DILocation(line: 1230, column: 12, scope: !10435)
!10458 = !DILocalVariable(name: "i", scope: !10435, file: !3, line: 1231, type: !1821)
!10459 = !DILocation(line: 1231, column: 7, scope: !10435)
!10460 = !DILocalVariable(name: "length", scope: !10435, file: !3, line: 1232, type: !7)
!10461 = !DILocation(line: 1232, column: 12, scope: !10435)
!10462 = !DILocation(line: 1232, column: 21, scope: !10435)
!10463 = !DILocation(line: 1234, column: 3, scope: !10435)
!10464 = !DILocation(line: 1237, column: 27, scope: !10435)
!10465 = !DILocation(line: 1237, column: 10, scope: !10435)
!10466 = !DILocation(line: 1237, column: 8, scope: !10435)
!10467 = !DILocation(line: 1238, column: 27, scope: !10435)
!10468 = !DILocation(line: 1238, column: 10, scope: !10435)
!10469 = !DILocation(line: 1238, column: 8, scope: !10435)
!10470 = !DILocation(line: 1240, column: 55, scope: !10435)
!10471 = !DILocation(line: 1240, column: 38, scope: !10435)
!10472 = !DILocation(line: 1240, column: 26, scope: !10435)
!10473 = !DILocation(line: 1240, column: 10, scope: !10435)
!10474 = !DILocation(line: 1240, column: 8, scope: !10435)
!10475 = !DILocation(line: 1241, column: 55, scope: !10435)
!10476 = !DILocation(line: 1241, column: 38, scope: !10435)
!10477 = !DILocation(line: 1241, column: 26, scope: !10435)
!10478 = !DILocation(line: 1241, column: 10, scope: !10435)
!10479 = !DILocation(line: 1241, column: 8, scope: !10435)
!10480 = !DILocation(line: 1243, column: 9, scope: !10435)
!10481 = !DILocation(line: 1243, column: 17, scope: !10435)
!10482 = !DILocation(line: 1243, column: 14, scope: !10435)
!10483 = !DILocation(line: 1243, column: 8, scope: !10435)
!10484 = !DILocation(line: 1243, column: 6, scope: !10435)
!10485 = !DILocation(line: 1244, column: 9, scope: !10435)
!10486 = !DILocation(line: 1244, column: 17, scope: !10435)
!10487 = !DILocation(line: 1244, column: 14, scope: !10435)
!10488 = !DILocation(line: 1244, column: 8, scope: !10435)
!10489 = !DILocation(line: 1244, column: 6, scope: !10435)
!10490 = !DILocation(line: 1246, column: 3, scope: !10435)
!10491 = !DILocation(line: 1248, column: 3, scope: !10435)
!10492 = !DILocation(line: 1250, column: 24, scope: !10435)
!10493 = !DILocation(line: 1250, column: 9, scope: !10435)
!10494 = !DILocation(line: 1251, column: 5, scope: !10435)
!10495 = !DILocation(line: 1252, column: 5, scope: !10435)
!10496 = !DILocation(line: 1250, column: 7, scope: !10435)
!10497 = !DILocation(line: 1253, column: 24, scope: !10435)
!10498 = !DILocation(line: 1253, column: 9, scope: !10435)
!10499 = !DILocation(line: 1253, column: 32, scope: !10435)
!10500 = !DILocation(line: 1253, column: 39, scope: !10435)
!10501 = !DILocation(line: 1253, column: 7, scope: !10435)
!10502 = !DILocation(line: 1254, column: 24, scope: !10435)
!10503 = !DILocation(line: 1254, column: 9, scope: !10435)
!10504 = !DILocation(line: 1254, column: 7, scope: !10435)
!10505 = !DILocation(line: 1256, column: 10, scope: !10506)
!10506 = distinct !DILexicalBlock(scope: !10435, file: !3, line: 1256, column: 3)
!10507 = !DILocation(line: 1256, column: 8, scope: !10506)
!10508 = !DILocation(line: 1256, column: 15, scope: !10509)
!10509 = distinct !DILexicalBlock(scope: !10506, file: !3, line: 1256, column: 3)
!10510 = !DILocation(line: 1256, column: 3, scope: !10506)
!10511 = !DILocalVariable(name: "new_arg", scope: !10512, file: !3, line: 1258, type: !1724)
!10512 = distinct !DILexicalBlock(scope: !10509, file: !3, line: 1257, column: 5)
!10513 = !DILocation(line: 1258, column: 12, scope: !10512)
!10514 = !DILocation(line: 1260, column: 39, scope: !10512)
!10515 = !DILocation(line: 1260, column: 44, scope: !10512)
!10516 = !DILocation(line: 1260, column: 17, scope: !10512)
!10517 = !DILocation(line: 1260, column: 15, scope: !10512)
!10518 = !DILocation(line: 1261, column: 41, scope: !10512)
!10519 = !DILocation(line: 1261, column: 50, scope: !10512)
!10520 = !DILocation(line: 1261, column: 56, scope: !10512)
!10521 = !DILocation(line: 1261, column: 7, scope: !10512)
!10522 = !DILocation(line: 1262, column: 5, scope: !10512)
!10523 = !DILocation(line: 1256, column: 61, scope: !10509)
!10524 = !DILocation(line: 1256, column: 3, scope: !10509)
!10525 = distinct !{!10525, !10510, !10526}
!10526 = !DILocation(line: 1262, column: 5, scope: !10506)
!10527 = !DILocation(line: 1263, column: 1, scope: !10435)
!10528 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !1304, file: !1304, line: 3336, type: !9472, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10529 = !DILocalVariable(name: "dbg", arg: 1, scope: !10528, file: !1304, line: 3336, type: !2055)
!10530 = !DILocation(line: 3336, column: 39, scope: !10528)
!10531 = !DILocation(line: 3342, column: 18, scope: !10528)
!10532 = !DILocation(line: 3342, column: 3, scope: !10528)
!10533 = !DILocation(line: 3343, column: 1, scope: !10528)
!10534 = distinct !DISubprogram(name: "create_new_stmts_for_general_acc", scope: !3, file: !3, line: 1359, type: !10408, scopeLine: 1360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10535 = !DILocalVariable(name: "acc", arg: 1, scope: !10534, file: !3, line: 1359, type: !3115)
!10536 = !DILocation(line: 1359, column: 55, scope: !10534)
!10537 = !DILocalVariable(name: "str", arg: 2, scope: !10534, file: !3, line: 1359, type: !3110)
!10538 = !DILocation(line: 1359, column: 66, scope: !10534)
!10539 = !DILocalVariable(name: "type", scope: !10534, file: !3, line: 1361, type: !1724)
!10540 = !DILocation(line: 1361, column: 8, scope: !10534)
!10541 = !DILocalVariable(name: "stmt", scope: !10534, file: !3, line: 1362, type: !2055)
!10542 = !DILocation(line: 1362, column: 10, scope: !10534)
!10543 = !DILocation(line: 1362, column: 17, scope: !10534)
!10544 = !DILocation(line: 1362, column: 22, scope: !10534)
!10545 = !DILocalVariable(name: "i", scope: !10534, file: !3, line: 1363, type: !7)
!10546 = !DILocation(line: 1363, column: 12, scope: !10534)
!10547 = !DILocation(line: 1365, column: 10, scope: !10548)
!10548 = distinct !DILexicalBlock(scope: !10534, file: !3, line: 1365, column: 3)
!10549 = !DILocation(line: 1365, column: 8, scope: !10548)
!10550 = !DILocation(line: 1365, column: 15, scope: !10551)
!10551 = distinct !DILexicalBlock(scope: !10548, file: !3, line: 1365, column: 3)
!10552 = !DILocation(line: 1365, column: 3, scope: !10548)
!10553 = !DILocalVariable(name: "new_stmt", scope: !10554, file: !3, line: 1367, type: !2055)
!10554 = distinct !DILexicalBlock(scope: !10551, file: !3, line: 1366, column: 5)
!10555 = !DILocation(line: 1367, column: 14, scope: !10554)
!10556 = !DILocation(line: 1369, column: 43, scope: !10554)
!10557 = !DILocation(line: 1369, column: 48, scope: !10554)
!10558 = !DILocation(line: 1369, column: 18, scope: !10554)
!10559 = !DILocation(line: 1369, column: 16, scope: !10554)
!10560 = !DILocation(line: 1370, column: 26, scope: !10554)
!10561 = !DILocation(line: 1370, column: 32, scope: !10554)
!10562 = !DILocation(line: 1370, column: 7, scope: !10554)
!10563 = !DILocation(line: 1371, column: 5, scope: !10554)
!10564 = !DILocation(line: 1365, column: 61, scope: !10551)
!10565 = !DILocation(line: 1365, column: 3, scope: !10551)
!10566 = distinct !{!10566, !10552, !10567}
!10567 = !DILocation(line: 1371, column: 5, scope: !10548)
!10568 = !DILocation(line: 1372, column: 1, scope: !10534)
!10569 = distinct !DISubprogram(name: "create_new_stmts_for_cond_expr_1", scope: !3, file: !3, line: 1182, type: !10570, scopeLine: 1183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10570 = !DISubroutineType(types: !10571)
!10571 = !{null, !1724, !2055, !7}
!10572 = !DILocalVariable(name: "new_var", arg: 1, scope: !10569, file: !3, line: 1182, type: !1724)
!10573 = !DILocation(line: 1182, column: 40, scope: !10569)
!10574 = !DILocalVariable(name: "cond_stmt", arg: 2, scope: !10569, file: !3, line: 1182, type: !2055)
!10575 = !DILocation(line: 1182, column: 56, scope: !10569)
!10576 = !DILocalVariable(name: "pos", arg: 3, scope: !10569, file: !3, line: 1182, type: !7)
!10577 = !DILocation(line: 1182, column: 76, scope: !10569)
!10578 = !DILocalVariable(name: "new_stmt", scope: !10569, file: !3, line: 1184, type: !2055)
!10579 = !DILocation(line: 1184, column: 10, scope: !10569)
!10580 = !DILocalVariable(name: "true_e", scope: !10569, file: !3, line: 1185, type: !2035)
!10581 = !DILocation(line: 1185, column: 8, scope: !10569)
!10582 = !DILocalVariable(name: "false_e", scope: !10569, file: !3, line: 1185, type: !2035)
!10583 = !DILocation(line: 1185, column: 23, scope: !10569)
!10584 = !DILocalVariable(name: "new_bb", scope: !10569, file: !3, line: 1186, type: !2453)
!10585 = !DILocation(line: 1186, column: 15, scope: !10569)
!10586 = !DILocalVariable(name: "si", scope: !10569, file: !3, line: 1187, type: !3129)
!10587 = !DILocation(line: 1187, column: 24, scope: !10569)
!10588 = !DILocation(line: 1189, column: 51, scope: !10569)
!10589 = !DILocation(line: 1189, column: 40, scope: !10569)
!10590 = !DILocation(line: 1189, column: 3, scope: !10569)
!10591 = !DILocation(line: 1192, column: 51, scope: !10569)
!10592 = !DILocation(line: 1192, column: 33, scope: !10569)
!10593 = !DILocation(line: 1193, column: 11, scope: !10569)
!10594 = !DILocation(line: 1193, column: 15, scope: !10569)
!10595 = !DILocation(line: 1193, column: 22, scope: !10569)
!10596 = !DILocation(line: 1193, column: 49, scope: !10569)
!10597 = !DILocation(line: 1193, column: 32, scope: !10569)
!10598 = !DILocation(line: 1194, column: 11, scope: !10569)
!10599 = !DILocation(line: 1194, column: 15, scope: !10569)
!10600 = !DILocation(line: 1194, column: 22, scope: !10569)
!10601 = !DILocation(line: 1194, column: 49, scope: !10569)
!10602 = !DILocation(line: 1194, column: 32, scope: !10569)
!10603 = !DILocation(line: 1192, column: 14, scope: !10569)
!10604 = !DILocation(line: 1192, column: 12, scope: !10569)
!10605 = !DILocation(line: 1198, column: 18, scope: !10569)
!10606 = !DILocation(line: 1198, column: 3, scope: !10569)
!10607 = !DILocation(line: 1201, column: 40, scope: !10569)
!10608 = !DILocation(line: 1201, column: 29, scope: !10569)
!10609 = !DILocation(line: 1201, column: 12, scope: !10569)
!10610 = !DILocation(line: 1201, column: 10, scope: !10569)
!10611 = !DILocation(line: 1204, column: 22, scope: !10569)
!10612 = !DILocation(line: 1204, column: 8, scope: !10569)
!10613 = !DILocation(line: 1205, column: 26, scope: !10569)
!10614 = !DILocation(line: 1205, column: 3, scope: !10569)
!10615 = !DILocation(line: 1208, column: 35, scope: !10569)
!10616 = !DILocation(line: 1208, column: 43, scope: !10569)
!10617 = !DILocation(line: 1208, column: 3, scope: !10569)
!10618 = !DILocation(line: 1209, column: 35, scope: !10569)
!10619 = !DILocation(line: 1209, column: 43, scope: !10569)
!10620 = !DILocation(line: 1209, column: 3, scope: !10569)
!10621 = !DILocation(line: 1212, column: 25, scope: !10622)
!10622 = distinct !DILexicalBlock(scope: !10569, file: !3, line: 1212, column: 7)
!10623 = !DILocation(line: 1212, column: 7, scope: !10622)
!10624 = !DILocation(line: 1212, column: 36, scope: !10622)
!10625 = !DILocation(line: 1212, column: 7, scope: !10569)
!10626 = !DILocation(line: 1213, column: 25, scope: !10622)
!10627 = !DILocation(line: 1213, column: 33, scope: !10622)
!10628 = !DILocation(line: 1213, column: 5, scope: !10622)
!10629 = !DILocation(line: 1215, column: 25, scope: !10622)
!10630 = !DILocation(line: 1215, column: 34, scope: !10622)
!10631 = !DILocation(line: 1215, column: 5, scope: !10622)
!10632 = !DILocation(line: 1216, column: 1, scope: !10569)
!10633 = distinct !DISubprogram(name: "make_edge_and_fix_phis_of_dest", scope: !3, file: !3, line: 670, type: !10634, scopeLine: 671, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10634 = !DISubroutineType(types: !10635)
!10635 = !{!2035, !2453, !2035}
!10636 = !DILocalVariable(name: "bb", arg: 1, scope: !10633, file: !3, line: 670, type: !2453)
!10637 = !DILocation(line: 670, column: 45, scope: !10633)
!10638 = !DILocalVariable(name: "e", arg: 2, scope: !10633, file: !3, line: 670, type: !2035)
!10639 = !DILocation(line: 670, column: 54, scope: !10633)
!10640 = !DILocalVariable(name: "new_e", scope: !10633, file: !3, line: 672, type: !2035)
!10641 = !DILocation(line: 672, column: 8, scope: !10633)
!10642 = !DILocalVariable(name: "arg", scope: !10633, file: !3, line: 673, type: !1724)
!10643 = !DILocation(line: 673, column: 8, scope: !10633)
!10644 = !DILocalVariable(name: "si", scope: !10633, file: !3, line: 674, type: !3129)
!10645 = !DILocation(line: 674, column: 24, scope: !10633)
!10646 = !DILocation(line: 676, column: 22, scope: !10633)
!10647 = !DILocation(line: 676, column: 26, scope: !10633)
!10648 = !DILocation(line: 676, column: 29, scope: !10633)
!10649 = !DILocation(line: 676, column: 35, scope: !10633)
!10650 = !DILocation(line: 676, column: 38, scope: !10633)
!10651 = !DILocation(line: 676, column: 11, scope: !10633)
!10652 = !DILocation(line: 676, column: 9, scope: !10633)
!10653 = !DILocation(line: 678, column: 29, scope: !10654)
!10654 = distinct !DILexicalBlock(scope: !10633, file: !3, line: 678, column: 3)
!10655 = !DILocation(line: 678, column: 36, scope: !10654)
!10656 = !DILocation(line: 678, column: 13, scope: !10654)
!10657 = !DILocation(line: 678, column: 8, scope: !10654)
!10658 = !DILocation(line: 678, column: 44, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10654, file: !3, line: 678, column: 3)
!10660 = !DILocation(line: 678, column: 43, scope: !10659)
!10661 = !DILocation(line: 678, column: 3, scope: !10654)
!10662 = !DILocalVariable(name: "phi", scope: !10663, file: !3, line: 680, type: !2055)
!10663 = distinct !DILexicalBlock(scope: !10659, file: !3, line: 679, column: 5)
!10664 = !DILocation(line: 680, column: 14, scope: !10663)
!10665 = !DILocation(line: 680, column: 20, scope: !10663)
!10666 = !DILocation(line: 681, column: 13, scope: !10663)
!10667 = !DILocation(line: 681, column: 11, scope: !10663)
!10668 = !DILocation(line: 682, column: 20, scope: !10663)
!10669 = !DILocation(line: 682, column: 25, scope: !10663)
!10670 = !DILocation(line: 682, column: 30, scope: !10663)
!10671 = !DILocation(line: 682, column: 72, scope: !10663)
!10672 = !DILocation(line: 682, column: 77, scope: !10663)
!10673 = !DILocation(line: 682, column: 37, scope: !10663)
!10674 = !DILocation(line: 682, column: 7, scope: !10663)
!10675 = !DILocation(line: 683, column: 5, scope: !10663)
!10676 = !DILocation(line: 678, column: 60, scope: !10659)
!10677 = !DILocation(line: 678, column: 3, scope: !10659)
!10678 = distinct !{!10678, !10661, !10679}
!10679 = !DILocation(line: 683, column: 5, scope: !10654)
!10680 = !DILocation(line: 685, column: 10, scope: !10633)
!10681 = !DILocation(line: 685, column: 3, scope: !10633)
!10682 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5586, file: !5586, line: 442, type: !10683, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10683 = !DISubroutineType(types: !10684)
!10684 = !{!3122, !2055, !1821}
!10685 = !DILocalVariable(name: "gs", arg: 1, scope: !10682, file: !5586, line: 442, type: !2055)
!10686 = !DILocation(line: 442, column: 36, scope: !10682)
!10687 = !DILocalVariable(name: "i", arg: 2, scope: !10682, file: !5586, line: 442, type: !1821)
!10688 = !DILocation(line: 442, column: 44, scope: !10682)
!10689 = !DILocation(line: 444, column: 27, scope: !10682)
!10690 = !DILocation(line: 444, column: 31, scope: !10682)
!10691 = !DILocation(line: 444, column: 11, scope: !10682)
!10692 = !DILocation(line: 444, column: 35, scope: !10682)
!10693 = !DILocation(line: 444, column: 3, scope: !10682)
!10694 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !5586, file: !5586, line: 483, type: !10695, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10695 = !DISubroutineType(types: !10696)
!10696 = !{!1854, !2055, !2035}
!10697 = !DILocalVariable(name: "gs", arg: 1, scope: !10694, file: !5586, line: 483, type: !2055)
!10698 = !DILocation(line: 483, column: 43, scope: !10694)
!10699 = !DILocalVariable(name: "e", arg: 2, scope: !10694, file: !5586, line: 483, type: !2035)
!10700 = !DILocation(line: 483, column: 52, scope: !10694)
!10701 = !DILocation(line: 485, column: 26, scope: !10694)
!10702 = !DILocation(line: 485, column: 30, scope: !10694)
!10703 = !DILocation(line: 485, column: 33, scope: !10694)
!10704 = !DILocation(line: 485, column: 10, scope: !10694)
!10705 = !DILocation(line: 485, column: 44, scope: !10694)
!10706 = !DILocation(line: 485, column: 3, scope: !10694)
!10707 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !1304, file: !1304, line: 3100, type: !10708, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10708 = !DISubroutineType(types: !10709)
!10709 = !{!10710, !2055, !7}
!10710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!10711 = !DILocalVariable(name: "gs", arg: 1, scope: !10707, file: !1304, line: 3100, type: !2055)
!10712 = !DILocation(line: 3100, column: 24, scope: !10707)
!10713 = !DILocalVariable(name: "index", arg: 2, scope: !10707, file: !1304, line: 3100, type: !7)
!10714 = !DILocation(line: 3100, column: 37, scope: !10707)
!10715 = !DILocation(line: 3103, column: 3, scope: !10707)
!10716 = !DILocation(line: 3104, column: 12, scope: !10707)
!10717 = !DILocation(line: 3104, column: 16, scope: !10707)
!10718 = !DILocation(line: 3104, column: 27, scope: !10707)
!10719 = !DILocation(line: 3104, column: 32, scope: !10707)
!10720 = !DILocation(line: 3104, column: 3, scope: !10707)
!10721 = distinct !DISubprogram(name: "create_general_new_stmt", scope: !3, file: !3, line: 1298, type: !10722, scopeLine: 1299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10722 = !DISubroutineType(types: !10723)
!10723 = !{!2055, !3115, !1724}
!10724 = !DILocalVariable(name: "acc", arg: 1, scope: !10721, file: !3, line: 1298, type: !3115)
!10725 = !DILocation(line: 1298, column: 46, scope: !10721)
!10726 = !DILocalVariable(name: "new_type", arg: 2, scope: !10721, file: !3, line: 1298, type: !1724)
!10727 = !DILocation(line: 1298, column: 56, scope: !10721)
!10728 = !DILocalVariable(name: "old_stmt", scope: !10721, file: !3, line: 1300, type: !2055)
!10729 = !DILocation(line: 1300, column: 10, scope: !10721)
!10730 = !DILocation(line: 1300, column: 21, scope: !10721)
!10731 = !DILocation(line: 1300, column: 26, scope: !10721)
!10732 = !DILocalVariable(name: "var", scope: !10721, file: !3, line: 1301, type: !1724)
!10733 = !DILocation(line: 1301, column: 8, scope: !10721)
!10734 = !DILocalVariable(name: "new_stmt", scope: !10721, file: !3, line: 1302, type: !2055)
!10735 = !DILocation(line: 1302, column: 10, scope: !10721)
!10736 = !DILocation(line: 1302, column: 34, scope: !10721)
!10737 = !DILocation(line: 1302, column: 21, scope: !10721)
!10738 = !DILocalVariable(name: "i", scope: !10721, file: !3, line: 1303, type: !7)
!10739 = !DILocation(line: 1303, column: 12, scope: !10721)
!10740 = !DILocation(line: 1306, column: 27, scope: !10741)
!10741 = distinct !DILexicalBlock(scope: !10721, file: !3, line: 1306, column: 7)
!10742 = !DILocation(line: 1306, column: 7, scope: !10741)
!10743 = !DILocation(line: 1306, column: 7, scope: !10721)
!10744 = !DILocation(line: 1308, column: 24, scope: !10745)
!10745 = distinct !DILexicalBlock(scope: !10741, file: !3, line: 1307, column: 5)
!10746 = !DILocation(line: 1308, column: 7, scope: !10745)
!10747 = !DILocation(line: 1309, column: 24, scope: !10745)
!10748 = !DILocation(line: 1309, column: 7, scope: !10745)
!10749 = !DILocation(line: 1310, column: 5, scope: !10745)
!10750 = !DILocation(line: 1312, column: 10, scope: !10751)
!10751 = distinct !DILexicalBlock(scope: !10721, file: !3, line: 1312, column: 3)
!10752 = !DILocation(line: 1312, column: 8, scope: !10751)
!10753 = !DILocation(line: 1312, column: 15, scope: !10754)
!10754 = distinct !DILexicalBlock(scope: !10751, file: !3, line: 1312, column: 3)
!10755 = !DILocation(line: 1312, column: 3, scope: !10751)
!10756 = !DILocalVariable(name: "new_var", scope: !10757, file: !3, line: 1314, type: !1724)
!10757 = distinct !DILexicalBlock(scope: !10754, file: !3, line: 1313, column: 5)
!10758 = !DILocation(line: 1314, column: 12, scope: !10757)
!10759 = !DILocation(line: 1314, column: 44, scope: !10757)
!10760 = !DILocation(line: 1314, column: 49, scope: !10757)
!10761 = !DILocation(line: 1314, column: 22, scope: !10757)
!10762 = !DILocalVariable(name: "lhs", scope: !10757, file: !3, line: 1315, type: !1724)
!10763 = !DILocation(line: 1315, column: 12, scope: !10757)
!10764 = !DILocalVariable(name: "rhs", scope: !10757, file: !3, line: 1315, type: !1724)
!10765 = !DILocation(line: 1315, column: 17, scope: !10757)
!10766 = !DILocation(line: 1317, column: 7, scope: !10757)
!10767 = !DILocation(line: 1318, column: 30, scope: !10757)
!10768 = !DILocation(line: 1318, column: 7, scope: !10757)
!10769 = !DILocation(line: 1320, column: 29, scope: !10770)
!10770 = distinct !DILexicalBlock(scope: !10757, file: !3, line: 1320, column: 11)
!10771 = !DILocation(line: 1320, column: 11, scope: !10770)
!10772 = !DILocation(line: 1320, column: 11, scope: !10757)
!10773 = !DILocation(line: 1322, column: 29, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10770, file: !3, line: 1321, column: 2)
!10775 = !DILocation(line: 1322, column: 10, scope: !10774)
!10776 = !DILocation(line: 1322, column: 8, scope: !10774)
!10777 = !DILocation(line: 1324, column: 8, scope: !10778)
!10778 = distinct !DILexicalBlock(scope: !10774, file: !3, line: 1324, column: 8)
!10779 = !DILocation(line: 1324, column: 24, scope: !10778)
!10780 = !DILocation(line: 1324, column: 8, scope: !10774)
!10781 = !DILocation(line: 1325, column: 12, scope: !10778)
!10782 = !DILocation(line: 1325, column: 10, scope: !10778)
!10783 = !DILocation(line: 1325, column: 6, scope: !10778)
!10784 = !DILocation(line: 1326, column: 32, scope: !10785)
!10785 = distinct !DILexicalBlock(scope: !10774, file: !3, line: 1326, column: 8)
!10786 = !DILocation(line: 1326, column: 8, scope: !10785)
!10787 = !DILocation(line: 1326, column: 42, scope: !10785)
!10788 = !DILocation(line: 1326, column: 8, scope: !10774)
!10789 = !DILocation(line: 1327, column: 12, scope: !10785)
!10790 = !DILocation(line: 1327, column: 10, scope: !10785)
!10791 = !DILocation(line: 1327, column: 6, scope: !10785)
!10792 = !DILocation(line: 1331, column: 32, scope: !10793)
!10793 = distinct !DILexicalBlock(scope: !10774, file: !3, line: 1331, column: 8)
!10794 = !DILocation(line: 1331, column: 8, scope: !10793)
!10795 = !DILocation(line: 1331, column: 42, scope: !10793)
!10796 = !DILocation(line: 1331, column: 8, scope: !10774)
!10797 = !DILocation(line: 1334, column: 8, scope: !10798)
!10798 = distinct !DILexicalBlock(scope: !10793, file: !3, line: 1332, column: 6)
!10799 = !DILocation(line: 1336, column: 33, scope: !10798)
!10800 = !DILocation(line: 1336, column: 14, scope: !10798)
!10801 = !DILocation(line: 1336, column: 12, scope: !10798)
!10802 = !DILocation(line: 1337, column: 32, scope: !10798)
!10803 = !DILocation(line: 1337, column: 42, scope: !10798)
!10804 = !DILocation(line: 1337, column: 8, scope: !10798)
!10805 = !DILocation(line: 1338, column: 6, scope: !10798)
!10806 = !DILocation(line: 1340, column: 8, scope: !10807)
!10807 = distinct !DILexicalBlock(scope: !10774, file: !3, line: 1340, column: 8)
!10808 = !DILocation(line: 1340, column: 15, scope: !10807)
!10809 = !DILocation(line: 1340, column: 12, scope: !10807)
!10810 = !DILocation(line: 1340, column: 8, scope: !10774)
!10811 = !DILocation(line: 1341, column: 29, scope: !10807)
!10812 = !DILocation(line: 1341, column: 39, scope: !10807)
!10813 = !DILocation(line: 1341, column: 6, scope: !10807)
!10814 = !DILocation(line: 1342, column: 13, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10807, file: !3, line: 1342, column: 13)
!10816 = !DILocation(line: 1342, column: 20, scope: !10815)
!10817 = !DILocation(line: 1342, column: 17, scope: !10815)
!10818 = !DILocation(line: 1342, column: 13, scope: !10807)
!10819 = !DILocation(line: 1343, column: 30, scope: !10815)
!10820 = !DILocation(line: 1343, column: 40, scope: !10815)
!10821 = !DILocation(line: 1343, column: 6, scope: !10815)
!10822 = !DILocation(line: 1345, column: 30, scope: !10815)
!10823 = !DILocation(line: 1345, column: 40, scope: !10815)
!10824 = !DILocation(line: 1345, column: 45, scope: !10815)
!10825 = !DILocation(line: 1345, column: 6, scope: !10815)
!10826 = !DILocation(line: 1346, column: 2, scope: !10774)
!10827 = !DILocation(line: 1348, column: 26, scope: !10770)
!10828 = !DILocation(line: 1348, column: 36, scope: !10770)
!10829 = !DILocation(line: 1348, column: 41, scope: !10770)
!10830 = !DILocation(line: 1348, column: 2, scope: !10770)
!10831 = !DILocation(line: 1349, column: 5, scope: !10757)
!10832 = !DILocation(line: 1312, column: 55, scope: !10754)
!10833 = !DILocation(line: 1312, column: 3, scope: !10754)
!10834 = distinct !{!10834, !10755, !10835}
!10835 = !DILocation(line: 1349, column: 5, scope: !10751)
!10836 = !DILocation(line: 1351, column: 18, scope: !10721)
!10837 = !DILocation(line: 1351, column: 3, scope: !10721)
!10838 = !DILocation(line: 1352, column: 10, scope: !10721)
!10839 = !DILocation(line: 1352, column: 3, scope: !10721)
!10840 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !1304, file: !1304, line: 1405, type: !9421, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10841 = !DILocalVariable(name: "g", arg: 1, scope: !10840, file: !1304, line: 1405, type: !2055)
!10842 = !DILocation(line: 1405, column: 25, scope: !10840)
!10843 = !DILocalVariable(name: "vuse", arg: 2, scope: !10840, file: !1304, line: 1405, type: !1724)
!10844 = !DILocation(line: 1405, column: 33, scope: !10840)
!10845 = !DILocation(line: 1407, column: 3, scope: !10840)
!10846 = !DILocation(line: 1408, column: 23, scope: !10840)
!10847 = !DILocation(line: 1408, column: 3, scope: !10840)
!10848 = !DILocation(line: 1408, column: 6, scope: !10840)
!10849 = !DILocation(line: 1408, column: 16, scope: !10840)
!10850 = !DILocation(line: 1408, column: 21, scope: !10840)
!10851 = !DILocation(line: 1409, column: 1, scope: !10840)
!10852 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !1304, file: !1304, line: 1414, type: !9421, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10853 = !DILocalVariable(name: "g", arg: 1, scope: !10852, file: !1304, line: 1414, type: !2055)
!10854 = !DILocation(line: 1414, column: 25, scope: !10852)
!10855 = !DILocalVariable(name: "vdef", arg: 2, scope: !10852, file: !1304, line: 1414, type: !1724)
!10856 = !DILocation(line: 1414, column: 33, scope: !10852)
!10857 = !DILocation(line: 1416, column: 3, scope: !10852)
!10858 = !DILocation(line: 1417, column: 23, scope: !10852)
!10859 = !DILocation(line: 1417, column: 3, scope: !10852)
!10860 = !DILocation(line: 1417, column: 6, scope: !10852)
!10861 = !DILocation(line: 1417, column: 16, scope: !10852)
!10862 = !DILocation(line: 1417, column: 21, scope: !10852)
!10863 = !DILocation(line: 1418, column: 1, scope: !10852)
!10864 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !318, file: !318, line: 1537, type: !10865, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10865 = !DISubroutineType(types: !10866)
!10866 = !{!7, !10867}
!10867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10868, size: 64)
!10868 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2800)
!10869 = !DILocalVariable(name: "vec_", arg: 1, scope: !10864, file: !318, line: 1537, type: !10867)
!10870 = !DILocation(line: 1537, column: 1, scope: !10864)
!10871 = distinct !DISubprogram(name: "insert_new_var_in_stmt", scope: !3, file: !3, line: 1270, type: !10872, scopeLine: 1271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10872 = !DISubroutineType(types: !10873)
!10873 = !{null, !2055, !1724, !1724}
!10874 = !DILocalVariable(name: "stmt", arg: 1, scope: !10871, file: !3, line: 1270, type: !2055)
!10875 = !DILocation(line: 1270, column: 32, scope: !10871)
!10876 = !DILocalVariable(name: "var", arg: 2, scope: !10871, file: !3, line: 1270, type: !1724)
!10877 = !DILocation(line: 1270, column: 43, scope: !10871)
!10878 = !DILocalVariable(name: "new_var", arg: 3, scope: !10871, file: !3, line: 1270, type: !1724)
!10879 = !DILocation(line: 1270, column: 53, scope: !10871)
!10880 = !DILocalVariable(name: "r_pos", scope: !10871, file: !3, line: 1272, type: !3188)
!10881 = !DILocation(line: 1272, column: 18, scope: !10871)
!10882 = !DILocalVariable(name: "pos", scope: !10871, file: !3, line: 1273, type: !2089)
!10883 = !DILocation(line: 1273, column: 9, scope: !10871)
!10884 = !DILocation(line: 1275, column: 27, scope: !10871)
!10885 = !DILocation(line: 1275, column: 33, scope: !10871)
!10886 = !DILocation(line: 1275, column: 9, scope: !10871)
!10887 = !DILocation(line: 1275, column: 7, scope: !10871)
!10888 = !DILocation(line: 1276, column: 3, scope: !10871)
!10889 = !DILocation(line: 1278, column: 3, scope: !10871)
!10890 = !DILocation(line: 1278, column: 16, scope: !10871)
!10891 = !DILocation(line: 1278, column: 10, scope: !10871)
!10892 = !DILocation(line: 1278, column: 26, scope: !10871)
!10893 = !DILocation(line: 1278, column: 30, scope: !10871)
!10894 = !DILocation(line: 1278, column: 57, scope: !10871)
!10895 = !DILocation(line: 1279, column: 9, scope: !10871)
!10896 = !DILocation(line: 1279, column: 12, scope: !10871)
!10897 = !DILocation(line: 1279, column: 39, scope: !10871)
!10898 = !DILocation(line: 0, scope: !10871)
!10899 = !DILocalVariable(name: "type", scope: !10900, file: !3, line: 1281, type: !1724)
!10900 = distinct !DILexicalBlock(scope: !10871, file: !3, line: 1280, column: 5)
!10901 = !DILocation(line: 1281, column: 12, scope: !10900)
!10902 = !DILocation(line: 1281, column: 19, scope: !10900)
!10903 = !DILocation(line: 1283, column: 11, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !10900, file: !3, line: 1283, column: 11)
!10905 = !DILocation(line: 1283, column: 38, scope: !10904)
!10906 = !DILocation(line: 1283, column: 11, scope: !10900)
!10907 = !DILocation(line: 1284, column: 12, scope: !10904)
!10908 = !DILocation(line: 1284, column: 10, scope: !10904)
!10909 = !DILocation(line: 1284, column: 2, scope: !10904)
!10910 = !DILocation(line: 1286, column: 12, scope: !10904)
!10911 = !DILocation(line: 1286, column: 10, scope: !10904)
!10912 = !DILocation(line: 1287, column: 31, scope: !10900)
!10913 = !DILocation(line: 1287, column: 43, scope: !10900)
!10914 = !DILocation(line: 1287, column: 13, scope: !10900)
!10915 = !DILocation(line: 1287, column: 11, scope: !10900)
!10916 = distinct !{!10916, !10889, !10917}
!10917 = !DILocation(line: 1288, column: 5, scope: !10871)
!10918 = !DILocation(line: 1290, column: 10, scope: !10871)
!10919 = !DILocation(line: 1290, column: 4, scope: !10871)
!10920 = !DILocation(line: 1290, column: 8, scope: !10871)
!10921 = !DILocation(line: 1291, column: 1, scope: !10871)
!10922 = distinct !DISubprogram(name: "free_new_var", scope: !3, file: !3, line: 2657, type: !5074, scopeLine: 2658, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10923 = !DILocalVariable(name: "slot", arg: 1, scope: !10922, file: !3, line: 2657, type: !2508)
!10924 = !DILocation(line: 2657, column: 22, scope: !10922)
!10925 = !DILocalVariable(name: "data", arg: 2, scope: !10922, file: !3, line: 2657, type: !2008)
!10926 = !DILocation(line: 2657, column: 34, scope: !10922)
!10927 = !DILocalVariable(name: "n_var", scope: !10922, file: !3, line: 2659, type: !3161)
!10928 = !DILocation(line: 2659, column: 11, scope: !10922)
!10929 = !DILocation(line: 2659, column: 32, scope: !10922)
!10930 = !DILocation(line: 2659, column: 19, scope: !10922)
!10931 = !DILocation(line: 2662, column: 3, scope: !10922)
!10932 = !DILocation(line: 2663, column: 9, scope: !10922)
!10933 = !DILocation(line: 2663, column: 3, scope: !10922)
!10934 = !DILocation(line: 2664, column: 3, scope: !10922)
!10935 = distinct !DISubprogram(name: "free_alloc_sites", scope: !3, file: !3, line: 3816, type: !3246, scopeLine: 3817, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10936 = !DILocation(line: 3818, column: 7, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 3818, column: 7)
!10938 = !DILocation(line: 3818, column: 7, scope: !10935)
!10939 = !DILocation(line: 3819, column: 20, scope: !10937)
!10940 = !DILocation(line: 3819, column: 5, scope: !10937)
!10941 = !DILocation(line: 3820, column: 16, scope: !10935)
!10942 = !DILocation(line: 3820, column: 3, scope: !10935)
!10943 = !DILocation(line: 3821, column: 15, scope: !10935)
!10944 = !DILocation(line: 3822, column: 1, scope: !10935)
!10945 = distinct !DISubprogram(name: "free_falloc_sites", scope: !3, file: !3, line: 3334, type: !5074, scopeLine: 3335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10946 = !DILocalVariable(name: "slot", arg: 1, scope: !10945, file: !3, line: 3334, type: !2508)
!10947 = !DILocation(line: 3334, column: 27, scope: !10945)
!10948 = !DILocalVariable(name: "data", arg: 2, scope: !10945, file: !3, line: 3334, type: !2008)
!10949 = !DILocation(line: 3334, column: 39, scope: !10945)
!10950 = !DILocalVariable(name: "fallocs", scope: !10945, file: !3, line: 3336, type: !3087)
!10951 = !DILocation(line: 3336, column: 13, scope: !10945)
!10952 = !DILocation(line: 3336, column: 38, scope: !10945)
!10953 = !DILocation(line: 3336, column: 23, scope: !10945)
!10954 = !DILocation(line: 3338, column: 3, scope: !10945)
!10955 = !DILocation(line: 3339, column: 9, scope: !10945)
!10956 = !DILocation(line: 3339, column: 3, scope: !10945)
!10957 = !DILocation(line: 3340, column: 3, scope: !10945)
!10958 = distinct !DISubprogram(name: "VEC_alloc_site_t_heap_free", scope: !3, file: !3, line: 174, type: !10959, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3233)
!10959 = !DISubroutineType(types: !10960)
!10960 = !{null, !5667}
!10961 = !DILocalVariable(name: "vec_", arg: 1, scope: !10958, file: !3, line: 174, type: !5667)
!10962 = !DILocation(line: 174, column: 1, scope: !10958)
!10963 = !DILocation(line: 174, column: 1, scope: !10964)
!10964 = distinct !DILexicalBlock(scope: !10958, file: !3, line: 174, column: 1)
